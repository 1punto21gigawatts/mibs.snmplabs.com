#
# PySNMP MIB module DellrPDU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DellrPDU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:58:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, iso, NotificationType, Integer32, Counter64, Counter32, Unsigned32, ModuleIdentity, MibIdentifier, enterprises, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "iso", "NotificationType", "Integer32", "Counter64", "Counter32", "Unsigned32", "ModuleIdentity", "MibIdentifier", "enterprises", "NotificationType", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dell = MibIdentifier((1, 3, 6, 1, 4, 1, 674))
pdu = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903))
pdusub = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200))
software = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 1))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 3))
sysRPDUV1 = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 3, 1))
class RpduEnableDisableType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2))

class RpduNormalAlarmType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("normal", 1), ("alarm", 2))

class RpduCommNoneOKLostType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3))

class RpduLowNormalNearOverloadType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("lowLoad", 1), ("normal", 2), ("nearOverload", 3), ("overload", 4))

class RpduNotPBMinLowNrmlOHiMaxType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("notPresent", 1), ("belowMin", 2), ("belowLow", 3), ("normal", 4), ("overHigh", 5), ("overMax", 6))

class RpduOtherToNonrecoverableType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("non-critical", 4), ("critical", 5), ("non-recoverable", 6))

class RpduOutletPhaseLayoutType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("seqPhase1ToNeutral", 1), ("seqPhase2ToNeutral", 2), ("seqPhase3ToNeutral", 3), ("seqPhase1ToPhase2", 4), ("seqPhase2ToPhase3", 5), ("seqPhase3ToPhase1", 6))

productID = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 100))
productIDDisplayName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 100, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: productIDDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: productIDDisplayName.setDescription('Name of this product for display purposes.')
productIDDescription = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 100, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: productIDDescription.setStatus('mandatory')
if mibBuilder.loadTexts: productIDDescription.setDescription('A short description of this product.')
productIDVendor = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 100, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDVendor.setStatus('mandatory')
if mibBuilder.loadTexts: productIDVendor.setDescription('The name of the product manufacturer.')
productIDVersion = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 100, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDVersion.setStatus('mandatory')
if mibBuilder.loadTexts: productIDVersion.setDescription('The hardware version of this product.')
productIDBuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 100, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDBuildNumber.setStatus('mandatory')
if mibBuilder.loadTexts: productIDBuildNumber.setDescription('The software build number of the product populating the MIB.')
productIDURL = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 100, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIDURL.setStatus('mandatory')
if mibBuilder.loadTexts: productIDURL.setDescription('The URL of the Web-based application to manage this device, should the device provide one.')
productIDDeviceNetworkName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 100, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: productIDDeviceNetworkName.setStatus('mandatory')
if mibBuilder.loadTexts: productIDDeviceNetworkName.setDescription('Operating system-specific computer name if product SNMP service is hosted.')
productStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 110))
productStatusGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 110, 1), RpduOtherToNonrecoverableType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusGlobalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: productStatusGlobalStatus.setDescription('The current status of the product. This is a summary of the status for the entire product including any metered devices. The SNMP monitor performs a get to retrieve additional data when this status is abnormal. Valid values 1: Other 2: Unknown 3: OK 4: Non-critical 5: Critical 6: Non-recoverable.')
productStatusLastGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 110, 2), RpduOtherToNonrecoverableType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusLastGlobalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: productStatusLastGlobalStatus.setDescription('The status before the current status which induced an initiative to issue a global status change trap.')
productStatusTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 110, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: productStatusTimeStamp.setDescription('The last time that the SNMP table geometries changed or attribute data was significantly updated. Management applications use this OID to trigger a refresh of data acquired from the MIB. This time should be a relative timestamp, for example, the value of MIB II SysUpTime when the values are updated.')
productStatusRESERVED1 = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 110, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusRESERVED1.setStatus('mandatory')
if mibBuilder.loadTexts: productStatusRESERVED1.setDescription('RESERVED')
productStatusRESERVED2 = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 110, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusRESERVED2.setStatus('mandatory')
if mibBuilder.loadTexts: productStatusRESERVED2.setDescription('RESERVED')
productStatusRESERVED3 = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 110, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productStatusRESERVED3.setStatus('mandatory')
if mibBuilder.loadTexts: productStatusRESERVED3.setDescription('RESERVED')
rPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200))
rPDUIdentD = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 100))
rPDUIdentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 100, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUIdentTableSize.setDescription('The number of connected Rack PDUs.')
rPDUIdentTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 100, 2), )
if mibBuilder.loadTexts: rPDUIdentTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUIdentTable.setDescription('A table of Rack PDU identification data.')
rPDUIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 100, 2, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUIdentIndex"))
if mibBuilder.loadTexts: rPDUIdentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUIdentEntry.setDescription('Identification data from the Rack PDU being queried.')
rPDUIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 100, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUIdentIndex.setDescription('The index to the Rack PDU identification table entry.')
rPDUIdentNameD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 100, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUIdentNameD.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUIdentNameD.setDescription('A user-defined string identifying the Rack PDU.')
rPDUIdentLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 100, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUIdentLocation.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUIdentLocation.setDescription('A user-defined string identifying the location of the Rack PDU.')
rPDUIdentHardwareRevD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 100, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentHardwareRevD.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUIdentHardwareRevD.setDescription('The Rack PDU hardware version.')
rPDUIdentFirmwareRevD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 100, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentFirmwareRevD.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUIdentFirmwareRevD.setDescription('The Rack PDU firmware version.')
rPDUIdentDateOfManufactureD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 100, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDateOfManufactureD.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUIdentDateOfManufactureD.setDescription('The date the Rack PDU was manufactured in mm/dd/yyyy format.')
rPDUIdentModelNumberD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 100, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentModelNumberD.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUIdentModelNumberD.setDescription('The Rack PDU model number.')
rPDUIdentSerialNumberD = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 100, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentSerialNumberD.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUIdentSerialNumberD.setDescription('The Rack PDU serial number.')
rPDUDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110))
rPDUDeviceTableSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDeviceTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceTableSize.setDescription('The number of connected Rack PDUs.')
rPDUDeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 2), )
if mibBuilder.loadTexts: rPDUDeviceStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceStatusTable.setDescription('A table of Rack PDU status information.')
rPDUDeviceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 2, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUDeviceStatusIndex"))
if mibBuilder.loadTexts: rPDUDeviceStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceStatusEntry.setDescription('Status information from the Rack PDU being queried.')
rPDUDeviceStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDeviceStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceStatusIndex.setDescription('The index to the Rack PDU status table entry.')
rPDUDeviceStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUDeviceStatusName.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceStatusName.setDescription('A user-defined string identifying the Rack PDU.')
rPDUDeviceStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDeviceStatusPower.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceStatusPower.setDescription('The power consumption of the Rack PDU load in 1/100 of KWatts.')
rPDUDeviceStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDeviceStatusEnergy.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceStatusEnergy.setDescription('A user resettable energy meter measuring Rack PDU load energy consumption in tenths of kilowatt-hours.')
rPDUDeviceStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("commandPending", 1), ("noCommandPending", 2), ("commandPendingUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDeviceStatusCommandPending.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceStatusCommandPending.setDescription("Indicates whether the device is processing a pending command. If the commandPendingUnknown (3) value is returned, all devices receiving power from the Rack PDU should be shut down. The Rack PDU's power should then be cycled to clear this condition.")
rPDUDeviceStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 2, 1, 6), RpduLowNormalNearOverloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDeviceStatusLoadState.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceStatusLoadState.setDescription('Indicates the present load status of the Rack PDU Device being queried.')
rPDUDeviceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 3), )
if mibBuilder.loadTexts: rPDUDeviceConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceConfigTable.setDescription('A table of Rack PDU configuration data.')
rPDUDeviceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 3, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUDeviceConfigIndex"))
if mibBuilder.loadTexts: rPDUDeviceConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceConfigEntry.setDescription('Configuration data from the Rack PDU being queried.')
rPDUDeviceConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDeviceConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceConfigIndex.setDescription('The index to the Rack PDU table entry.')
rPDUDeviceConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUDeviceConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceConfigName.setDescription('A user-defined string identifying the Rack PDU.')
rPDUDeviceConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUDeviceConfigLocation.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceConfigLocation.setDescription('The Location of the Rack PDU.')
rPDUDeviceConfigColdstartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUDeviceConfigColdstartDelay.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceConfigColdstartDelay.setDescription('The amount of delay, measured in seconds, between when power is provided to the Rack PDU and when the Rack PDU provides basic master power to the outlets.')
rPDUDeviceCfgLowLoadPwrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUDeviceCfgLowLoadPwrThresh.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceCfgLowLoadPwrThresh.setDescription('The user-defined low power draw alarm threshold, measured in tenths of kilowatts.')
rPDUDeviceCfgNerOvloadPwrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUDeviceCfgNerOvloadPwrThresh.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceCfgNerOvloadPwrThresh.setDescription('The user-defined near power overload threshold, measured in tenths of kilowatts.')
rPDUDeviceCfgOverloadPwrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUDeviceCfgOverloadPwrThresh.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceCfgOverloadPwrThresh.setDescription('The user-defined power overload threshold, measured in tenths of kilowatts.')
rPDUDeviceConfigPowerHeadroom = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDeviceConfigPowerHeadroom.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceConfigPowerHeadroom.setDescription('The amount of input power that is available to the connected devices in hundredths of kilowatt-hours.')
rPDUDeviceConfigPeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDeviceConfigPeakPower.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceConfigPeakPower.setDescription('The highest input power level recorded by the connected devices in hundredths of kilowatt-hours.')
rPDUDeviceCfgPeakPwrStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDeviceCfgPeakPwrStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceCfgPeakPwrStartTime.setDescription('The time, in hh:mm:ss, when the device started recording the highest input power level.')
rPDUDeviceConfigPeakPwrCapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDeviceConfigPeakPwrCapTime.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceConfigPeakPwrCapTime.setDescription('The time, in hh:mm:ss, when the highest input power level was recorded by the device.')
rPDUDeviceCfgPeakPowerHeadroom = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDeviceCfgPeakPowerHeadroom.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceCfgPeakPowerHeadroom.setDescription('The highest level of input power that is available to the connected devices in hundredths of kilowatt-hours.')
rPDUDeviceCfgEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDeviceCfgEnergyStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceCfgEnergyStartTime.setDescription('The time, in hh:mm:ss, when the device started recording the input energy level.')
rPDUDevicePropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 4), )
if mibBuilder.loadTexts: rPDUDevicePropertiesTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDevicePropertiesTable.setDescription('A table of Rack PDU properties.')
rPDUDevicePropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 4, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUDevicePropertiesIndex"))
if mibBuilder.loadTexts: rPDUDevicePropertiesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDevicePropertiesEntry.setDescription('Properties of the Rack PDU being queried.')
rPDUDevicePropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDevicePropertiesIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDevicePropertiesIndex.setDescription('The index to the Rack PDU properties table entry.')
rPDUDevicePropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUDevicePropertiesName.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDevicePropertiesName.setDescription('A user-defined string identifying the Rack PDU.')
rPDUDevicePropertiesNumOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDevicePropertiesNumOutlets.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDevicePropertiesNumOutlets.setDescription('The number of outlets on the Rack PDU.')
rPDUDevicePropertiesNumSwdOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDevicePropertiesNumSwdOuts.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDevicePropertiesNumSwdOuts.setDescription('The number of switched outlets on the Rack PDU.')
rPDUDevicePropertiesNumMtrdOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDevicePropertiesNumMtrdOuts.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDevicePropertiesNumMtrdOuts.setDescription('The number of metered outlets on the Rack PDU.')
rPDUDevicePropertiesNumPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDevicePropertiesNumPhases.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDevicePropertiesNumPhases.setDescription('The number of phases present in the Rack PDU.')
rPDUDevicePropertiesNumBreakers = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDevicePropertiesNumBreakers.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDevicePropertiesNumBreakers.setDescription('The number of breakers present in the Rack PDU.')
rPDUDevicePropertiesMaxCurntRtg = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDevicePropertiesMaxCurntRtg.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDevicePropertiesMaxCurntRtg.setDescription('The maximum current rating, measured in Amps, for the Rack PDU.')
rPDUDevicePropertiesOutlayout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("phaseToNeutral", 1), ("phaseToPhase", 2), ("phaseToNeutralGrouped", 3), ("phaseToPhaseGrouped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDevicePropertiesOutlayout.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDevicePropertiesOutlayout.setDescription('The phase wiring for the Rack PDU outlets. PhaseToNeutral and PhaseToPhase: outlets wired consecutively; PhaseToNeutralGrouped and PhaseToPhaseGrouped: groups of outlets wired consecutively.')
rPDUDeviceControlTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 5), )
if mibBuilder.loadTexts: rPDUDeviceControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceControlTable.setDescription('A table of Rack PDU control data.')
rPDUDeviceControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 5, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUDeviceControlIndex"))
if mibBuilder.loadTexts: rPDUDeviceControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceControlEntry.setDescription('Control data from the Rack PDU being queried.')
rPDUDeviceControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUDeviceControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceControlIndex.setDescription('The index to the Rack PDU control table entry.')
rPDUDeviceControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUDeviceControlName.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceControlName.setDescription('A user-defined string identifying the Rack PDU.')
rPDUDeviceControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 110, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("turnAllOnNow", 1), ("turnAllOnSequence", 2), ("turnAllOffNow", 3), ("rebootAllNow", 4), ("rebootAllSequence", 5), ("noCommand", 6), ("turnAllOffSequence", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUDeviceControlCommand.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUDeviceControlCommand.setDescription("Setting this OID to turnAllOnNow (1) will turn all outlets on immediately. Setting this OID to turnAllOnSequence (2) will turn all outlets on as defined by each outlet's sPDUOutletPowerOnTime OID value. Setting this OID to turnAllOff (3) will turn all outlets off immediately. Setting this OID to rebootAllNow (4) will reboot all outlets immediately. Setting this OID to rebootAllSequence (5) reboots all outlets, with power returned to the outlets in the sequence defined by each outlet's rPDUOutSwitchedCfgPowerOnTime OID value. Setting this OID to rebootAllSequence (5) will cause a turnAllOffSequence to be performed. Once all outlets are off, the Rack PDU will then delay the rPDUOutSwtchedCfgRebootDuration OID time, and then perform a turnAllOnSequence. Setting this OID to turnAllOffSequence (7) will turn all outlets off as defined by each outlet's rPDUOutSwitchedCfgPowerOffTime OID value. Getting this OID will return the noCommand (6) value.")
rPDUPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120))
rPDUPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPhaseTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhaseTableSize.setDescription('The number of connected Rack PDU phases.')
rPDUPhaseStatusTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 2), )
if mibBuilder.loadTexts: rPDUPhaseStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhaseStatusTable.setDescription('A table of Rack PDU phase status data.')
rPDUPhaseStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 2, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUPhaseStatusIndex"))
if mibBuilder.loadTexts: rPDUPhaseStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhaseStatusEntry.setDescription('Status data from the currently queried Rack PDU phase.')
rPDUPhaseStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPhaseStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhaseStatusIndex.setDescription('The index to the Rack PDU phase status table entry.')
rPDUPhaseStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPhaseStatusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhaseStatusNumber.setDescription('The numeric phase ID.')
rPDUPhaseStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 2, 1, 3), RpduLowNormalNearOverloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPhaseStatusLoadState.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhaseStatusLoadState.setDescription('Indicates the present load status of the Rack PDU phase being queried.')
rPDUPhaseStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPhaseStatusCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhaseStatusCurrent.setDescription('Indicates the current draw, in tenths of Amps, of the load on the Rack PDU phase being queried.')
rPDUPhaseStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPhaseStatusVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhaseStatusVoltage.setDescription('Indicates the Voltage, in Volts, of the Rack PDU phase being queried.')
rPDUPhaseStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPhaseStatusPower.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhaseStatusPower.setDescription('Indicates the load power, in hundredths of kilowatts, consumed on the Rack PDU phase being queried.')
rPDUPhaseConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 3), )
if mibBuilder.loadTexts: rPDUPhaseConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhaseConfigTable.setDescription('A table of Rack PDU phase configuration data.')
rPDUPhaseConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 3, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUPhaseConfigIndex"))
if mibBuilder.loadTexts: rPDUPhaseConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhaseConfigEntry.setDescription('Configuration data from the currently queried Rack PDU phase.')
rPDUPhaseConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPhaseConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhaseConfigIndex.setDescription('The index to the Rack PDU phase configuration table entry.')
rPDUPhaseConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPhaseConfigNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhaseConfigNumber.setDescription('The numeric phase ID.')
rPDUPhaseCfgOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUPhaseCfgOverloadRestriction.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhaseCfgOverloadRestriction.setDescription('This OID controls the behavior of a Switched Rack PDU phase when an overload condition is possible and additional outlets are requested to be turned on. Setting this OID to alwaysAllowTurnON (1) will always allow the outlets on the corresponding phase to turn on. Setting this OID to restrictOnNearOverload (2) will not allow outlets on the corresponding phase to turn on if the rPDULoadConfigNearOverloadThreshold OID is exceeded. Setting this OID to restrictOnOverload (3) will not allow outlets on the corresponding phase to turn on if the rPDULoadConfigOverloadThreshold OID is exceeded.')
rPDUPhCfgLowLoadCurntThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUPhCfgLowLoadCurntThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhCfgLowLoadCurntThreshold.setDescription('The user-defined threshold for low phase current load, in Amps.')
rPDUPhCfgNerOverloadCurntThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUPhCfgNerOverloadCurntThresh.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhCfgNerOverloadCurntThresh.setDescription('The user-defined near phase overload warning threshold in Amps.')
rPDUPhCfgOverloadCurntThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 120, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUPhCfgOverloadCurntThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPhCfgOverloadCurntThreshold.setDescription('The user-defined phase overload current threshold in Amps.')
rPDUOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130))
rPDUOutletSwitched = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1))
rPDUOutletSwitchedTableSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletSwitchedTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedTableSize.setDescription('The number of switched outlets on connected Rack PDUs.')
rPDUOutletSwitchedStatusTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 2), )
if mibBuilder.loadTexts: rPDUOutletSwitchedStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedStatusTable.setDescription('A table of Rack PDU switched outlet status information.')
rPDUOutletSwitchedStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 2, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUOutletSwitchedStatusIndex"))
if mibBuilder.loadTexts: rPDUOutletSwitchedStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedStatusEntry.setDescription('Status information for the currently-queried Rack PDU switched outlet.')
rPDUOutletSwitchedStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletSwitchedStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedStatusIndex.setDescription('The index to the Rack PDU switched outlet status information table entry.')
rPDUOutletSwitchedStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletSwitchedStatusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedStatusNumber.setDescription('The numeric switched outlet ID.')
rPDUOutletSwitchedStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletSwitchedStatusName.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedStatusName.setDescription('The user-defined switched outlet ID string.')
rPDUOutletSwitchedStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletSwitchedStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedStatusState.setDescription('Indicates the present status of the Rack PDU switched outlet being queried.')
rPDUOutletSwitchedStatCmdPnding = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("commandPending", 1), ("noCommandPending", 2), ("commandPendingUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletSwitchedStatCmdPnding.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedStatCmdPnding.setDescription("Indicates whether the device is processing a command for this outlet. If the commandPendingUnknown (3) value is returned, all devices receiving power from the Rack PDU should be shut down. The Rack PDU's power should then be cycled to clear this condition.")
rPDUOutletSwitchedStatPhLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 2, 1, 6), RpduOutletPhaseLayoutType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletSwitchedStatPhLayout.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedStatPhLayout.setDescription('Phase description of the currently-queried Rack PDU switched outlet.')
rPDUOutletSwitchedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 3), )
if mibBuilder.loadTexts: rPDUOutletSwitchedConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedConfigTable.setDescription('A table of Rack PDU switched outlet configuration data.')
rPDUOutletSwitchedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 3, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUOutletSwitchedConfigIndex"))
if mibBuilder.loadTexts: rPDUOutletSwitchedConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedConfigEntry.setDescription('Configuration data from the currently-queried Rack PDU switched outlet.')
rPDUOutletSwitchedConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletSwitchedConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedConfigIndex.setDescription('The index to the Rack PDU switched outlet configuration table entry.')
rPDUOutletSwitchedConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletSwitchedConfigNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedConfigNumber.setDescription('The numeric switched outlet ID.')
rPDUOutletSwitchedConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletSwitchedConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedConfigName.setDescription('The user-defined switched outlet ID string.')
rPDUOutSwitchedCfgPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutSwitchedCfgPowerOnTime.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutSwitchedCfgPowerOnTime.setDescription('The amount of time, in seconds, between when power is provided to the Rack PDU and when this switched outlet starts providing power.')
rPDUOutSwitchedCfgPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutSwitchedCfgPowerOffTime.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutSwitchedCfgPowerOffTime.setDescription('The amount of time, in seconds, this outlet will delay turning off.')
rPDUOutSwtchedCfgRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutSwtchedCfgRebootDuration.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutSwtchedCfgRebootDuration.setDescription('After turning off power during a reboot sequence, the amount of time, in seconds, to wait before turning on power to this outlet again.')
rPDUOutletSwitchedControlTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 4), )
if mibBuilder.loadTexts: rPDUOutletSwitchedControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedControlTable.setDescription('A table of Rack PDU switched outlet control data.')
rPDUOutletSwitchedControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 4, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUOutletSwitchedControlIndex"))
if mibBuilder.loadTexts: rPDUOutletSwitchedControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedControlEntry.setDescription('Control data for the currently-queried Rack PDU switched outlet.')
rPDUOutletSwitchedControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletSwitchedControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedControlIndex.setDescription('The index to the Rack PDU switched outlet control data table entry.')
rPDUOutletSwitchedControlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletSwitchedControlNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedControlNumber.setDescription('The numeric switched outlet ID.')
rPDUOutletSwitchedControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletSwitchedControlName.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedControlName.setDescription('The user-defined switched outlet ID string.')
rPDUOutletSwitchedControlCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("outletOn", 1), ("outletOff", 2), ("outletReboot", 3), ("outletUnknown", 4), ("outletOnWithDelay", 5), ("outletOffWithDelay", 6), ("outletRebootWithDelay", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletSwitchedControlCmd.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletSwitchedControlCmd.setDescription("Getting this variable will return the outlet state. If the outlet is on, the outletOn (1) value will be returned. If the outlet is off, the outletOff (2) value will be returned. If the state of the outlet cannot be determined, the outletUnknown (4) value will be returned. If the outletUnknown condition should occur, all devices receiving power from the PDU should be shut down. The PDU's power should then be cycled to clear this condition. Setting this variable to outletOn (1) will turn the outlet on. Setting this variable to outletOff (2) will turn the outlet off. Setting this variable to outletReboot (3) will reboot the outlet. Setting this variable to outletOnWithDelay (5) will turn the outlet on after the rPDUOutSwitchedCfgPowerOnTime OID has elapsed. Setting this variable to outletOffWithDelay (6) will turn the outlet off after the rPDUOutSwitchedCfgPowerOffTime OID has elapsed. Setting this variable to outletRebootWithDelay (7) will turn the outlet off after the rPDUOutSwitchedCfgPowerOffTime OID has elapsed, wait the rPDUOutSwtchedCfgRebootDuration OID time, then turn the outlet back on.")
rPDUOutletMetered = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2))
rPDUOutletMeteredTableSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletMeteredTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletMeteredTableSize.setDescription('The number of metered outlets on connected Rack PDUs.')
rPDUOutletMeteredStatusTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 2), )
if mibBuilder.loadTexts: rPDUOutletMeteredStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletMeteredStatusTable.setDescription('A table of Rack PDU metered outlet status data.')
rPDUOutletMeteredStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 2, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUOutletMeteredStatusIndex"))
if mibBuilder.loadTexts: rPDUOutletMeteredStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletMeteredStatusEntry.setDescription('Status data from the currently-queried Rack PDU metered outlet.')
rPDUOutletMeteredStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletMeteredStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletMeteredStatusIndex.setDescription('The index to the Rack PDU metered status table entry.')
rPDUOutletMeteredStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletMeteredStatusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletMeteredStatusNumber.setDescription('The numeric metered outlet ID.')
rPDUOutletMeteredStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletMeteredStatusName.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletMeteredStatusName.setDescription('The user-defined metered outlet ID string.')
rPDUOutletMeteredStatusLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 2, 1, 4), RpduOutletPhaseLayoutType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletMeteredStatusLayout.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletMeteredStatusLayout.setDescription('Phase description of currently queried Rack PDU metered outlet.')
rPDUOutMeteredStatPowerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutMeteredStatPowerRating.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutMeteredStatPowerRating.setDescription('The power rating for the currently queried Rack PDU metered outlet.')
rPDUOutletMeteredStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletMeteredStatusCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletMeteredStatusCurrent.setDescription('Indicates the current draw, in Amps, of the load on the Rack PDU outlet being queried.')
rPDUOutletMeteredStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletMeteredStatusEnergy.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletMeteredStatusEnergy.setDescription('A user resettable energy meter measuring Rack PDU load energy consumption in kilowatt-hours.')
rPDUOutletMeteredStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletMeteredStatusPower.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletMeteredStatusPower.setDescription('Indicates the power draw of the load on the Rack PDU outlet being queried.')
rPDUOutletMeteredStatPeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletMeteredStatPeakPower.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletMeteredStatPeakPower.setDescription('The highest power level recorded by the currently queried Rack PDU metered outlet, in kilowatts.')
rPDUOutMeteredStatPeakPwrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutMeteredStatPeakPwrTime.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutMeteredStatPeakPwrTime.setDescription('Indicates the date and time that peak power consumption occured')
rPDUOutMeteredStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 2, 1, 11), RpduLowNormalNearOverloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutMeteredStatusLoadState.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutMeteredStatusLoadState.setDescription('Indicates the present load status of the Rack PDU Outlet being queried.')
rPDUOutletMeteredConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 4), )
if mibBuilder.loadTexts: rPDUOutletMeteredConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletMeteredConfigTable.setDescription('A table of Rack PDU metered outlet configuration data.')
rPDUOutletMeteredConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 4, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUOutletMeteredConfigIndex"))
if mibBuilder.loadTexts: rPDUOutletMeteredConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletMeteredConfigEntry.setDescription('Configuration data from the currently queried Rack PDU metered outlet.')
rPDUOutletMeteredConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletMeteredConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletMeteredConfigIndex.setDescription('The index to the Rack PDU metered outlet configuration table entry.')
rPDUOutletMeteredConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletMeteredConfigNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletMeteredConfigNumber.setDescription('The numeric switched outlet ID.')
rPDUOutletMeteredConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletMeteredConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutletMeteredConfigName.setDescription('The user-defined metered outlet ID string.')
rPDUOutMtredCfgLowLdCurntThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutMtredCfgLowLdCurntThresh.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutMtredCfgLowLdCurntThresh.setDescription('The user-defined low load outlet current threshold, in Amps.')
rPDUOutMtrdCfgNrOvdCurntThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutMtrdCfgNrOvdCurntThresh.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutMtrdCfgNrOvdCurntThresh.setDescription('The user-defined near outlet overload warning threshold, in Amps.')
rPDUOutMtredCfgOvrldCurntThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutMtredCfgOvrldCurntThresh.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutMtredCfgOvrldCurntThresh.setDescription('The user-defined outlet overload current threshold, in Amps.')
rPDUOutMeteredEnergyStartTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutMeteredEnergyStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutMeteredEnergyStartTime.setDescription('The time, in hh:mm:ss, when the currently queried Rack PDU metered outlet started recording the input energy level.')
rPDUOutMeteredPeakPwrStartTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 130, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutMeteredPeakPwrStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUOutMeteredPeakPwrStartTime.setDescription('The time, in hh:mm:ss, when the currently queried Rack PDU metered outlet started recording the highest level of input power that is available to the connected device.')
rPDUPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 140))
rPDUPowerSupplyAlarmD = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 140, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allAvailablePowerSuppliesOK", 1), ("powerSupplyFailed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPowerSupplyAlarmD.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPowerSupplyAlarmD.setDescription('Getting this OID will return the status of the power supply alarm.')
rPDUPowerSupplyVoltage = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 140, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPowerSupplyVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUPowerSupplyVoltage.setDescription('The voltage provided by the power supply in tenths of volts.')
rPDUSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150))
rPDUSensorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 1))
rPDUSensorStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSensorStatusTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorStatusTableSize.setDescription('The number of connected temperature sensors.')
rPDUSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 1, 2), )
if mibBuilder.loadTexts: rPDUSensorStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorStatusTable.setDescription('A table of temperature sensor status data.')
rPDUSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 1, 2, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUSensorStatusIndex"))
if mibBuilder.loadTexts: rPDUSensorStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorStatusEntry.setDescription('Status information from the temperature sensor being queried.')
rPDUSensorStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSensorStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorStatusIndex.setDescription('The index to the status data table entry.')
rPDUSensorStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSensorStatusName.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorStatusName.setDescription('The user-defined sensor ID string.')
rPDUSensorStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("temperature", 2), ("temperatureHumidity", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSensorStatusType.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorStatusType.setDescription('The type of the sensor.')
rPDUSensorTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2))
rPDUSensorTempTableSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSensorTempTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorTempTableSize.setDescription('The number of connected temperature sensors.')
rPDUSensorTempStatusTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 2), )
if mibBuilder.loadTexts: rPDUSensorTempStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorTempStatusTable.setDescription('A table of temperature sensor status data.')
rPDUSensorTempStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 2, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUSensorTempStatusIndex"))
if mibBuilder.loadTexts: rPDUSensorTempStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorTempStatusEntry.setDescription('Status information from the temperature sensor being queried.')
rPDUSensorTempStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSensorTempStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorTempStatusIndex.setDescription('The index to the temperature status data table entry.')
rPDUSensorTempStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSensorTempStatusName.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorTempStatusName.setDescription('The user-defined temperature-humidity sensor ID string.')
rPDUSensorTempStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 2, 1, 3), RpduCommNoneOKLostType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSensorTempStatusCommStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorTempStatusCommStatus.setDescription('The communications status of the sensor.')
rPDUSensorTempStatusTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSensorTempStatusTempF.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorTempStatusTempF.setDescription('The sensor temperature reading in tenths of degrees Fahrenheit.')
rPDUSensorTempStatusTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSensorTempStatusTempC.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorTempStatusTempC.setDescription('The sensor temperature reading in tenths of degrees Celsius.')
rPDUSensorTempStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 2, 1, 6), RpduNotPBMinLowNrmlOHiMaxType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSensorTempStatusAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorTempStatusAlarmStatus.setDescription('The alarm status of the sensor.')
rPDUSensorTempConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 3), )
if mibBuilder.loadTexts: rPDUSensorTempConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorTempConfigTable.setDescription('A table of temperature-humidity sensor configuration data.')
rPDUSensorTempConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 3, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUSensorTempConfigIndex"))
if mibBuilder.loadTexts: rPDUSensorTempConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorTempConfigEntry.setDescription('Configuration data from the temperature-humidity sensor being queried.')
rPDUSensorTempConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSensorTempConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorTempConfigIndex.setDescription('The index to the temperature-humidity sensor configuration data table entry.')
rPDUSensorTempConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSensorTempConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorTempConfigName.setDescription('The user-defined temperature-humidity sensor ID string.')
rPDUSensorTempCfgTempMaxThreshF = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSensorTempCfgTempMaxThreshF.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorTempCfgTempMaxThreshF.setDescription('The sensor maximum temperature alarm threshold in Fahrenheit.')
rPDUSnsorTempCfgTempHighThreshF = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSnsorTempCfgTempHighThreshF.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSnsorTempCfgTempHighThreshF.setDescription('The sensor high temperature warning alarm threshold in Fahrenheit.')
rPDUSnsorTempCfgTempHysteresisF = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSnsorTempCfgTempHysteresisF.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSnsorTempCfgTempHysteresisF.setDescription('The sensor temperature hysteresis setting in Fahrenheit.')
rPDUSensorTempCfgTempMaxThreshC = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSensorTempCfgTempMaxThreshC.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorTempCfgTempMaxThreshC.setDescription('The sensor maximum temperature alarm threshold in Celsius.')
rPDUSnsorTempCfgTempHighThreshC = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSnsorTempCfgTempHighThreshC.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSnsorTempCfgTempHighThreshC.setDescription('The sensor high temperature warning alarm threshold in Celsius.')
rPDUSnsorTempCfgTempHysteresisC = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSnsorTempCfgTempHysteresisC.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSnsorTempCfgTempHysteresisC.setDescription('The sensor temperature hysteresis setting in Celsius.')
rPDUSnsorTempCfgAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 2, 3, 1, 9), RpduEnableDisableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSnsorTempCfgAlarmGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSnsorTempCfgAlarmGeneration.setDescription('Indicates whether the Temp Alarm Generation is enabled.')
rPDUSensorHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3))
rPDUSensorHumidityTableSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSensorHumidityTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorHumidityTableSize.setDescription('The number of connected temperature-humidity sensors.')
rPDUSensorHumidityStatusTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3, 2), )
if mibBuilder.loadTexts: rPDUSensorHumidityStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorHumidityStatusTable.setDescription('A table of temperature-humidity sensor status data.')
rPDUSensorHumidityStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3, 2, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUSensorHumidityStatusIndex"))
if mibBuilder.loadTexts: rPDUSensorHumidityStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorHumidityStatusEntry.setDescription('Status information from the temperature-humidity sensor being queried.')
rPDUSensorHumidityStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSensorHumidityStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorHumidityStatusIndex.setDescription('The index to the temperature-humidity status data table entry.')
rPDUSensorHumidityStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSensorHumidityStatusName.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorHumidityStatusName.setDescription('The user-defined temperature-humidity sensor ID string.')
rPDUSnsorHumidityStatCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3, 2, 1, 3), RpduCommNoneOKLostType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSnsorHumidityStatCommStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSnsorHumidityStatCommStatus.setDescription('The communications status of the sensor.')
rPDUSnsorHumStatRelativeHumdity = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSnsorHumStatRelativeHumdity.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSnsorHumStatRelativeHumdity.setDescription('The sensor humidity reading in percent relative humidity.')
rPDUSnsorHumStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3, 2, 1, 5), RpduNotPBMinLowNrmlOHiMaxType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSnsorHumStatusAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSnsorHumStatusAlarmStatus.setDescription('The alarm status of the sensor.')
rPDUSensorHumidityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3, 3), )
if mibBuilder.loadTexts: rPDUSensorHumidityConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorHumidityConfigTable.setDescription('A table of temperature-humidity sensor configuration data.')
rPDUSensorHumidityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3, 3, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUSensorHumidityConfigIndex"))
if mibBuilder.loadTexts: rPDUSensorHumidityConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorHumidityConfigEntry.setDescription('Configuration data from the temperature-humidity sensor being queried.')
rPDUSensorHumidityConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSensorHumidityConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorHumidityConfigIndex.setDescription('The index to the temperature-humidity sensor configuration data table entry.')
rPDUSensorHumidityConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSensorHumidityConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorHumidityConfigName.setDescription('The user-defined temperature-humidity sensor ID string.')
rPDUSnsorHumCfgHumdityLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSnsorHumCfgHumdityLowThresh.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSnsorHumCfgHumdityLowThresh.setDescription('The sensor low humidity warning alarm threshold in percent relative humidity.')
rPDUSnsorHumCfgHumdityMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSnsorHumCfgHumdityMinThresh.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSnsorHumCfgHumdityMinThresh.setDescription('The sensor minimum humidity alarm threshold in percent relative humidity.')
rPDUSnsorHumCfgHumdtyHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSnsorHumCfgHumdtyHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSnsorHumCfgHumdtyHysteresis.setDescription('The sensor humidity hysteresis setting in percent relative humidity.')
rPDUSnsorHumCfgAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 3, 3, 1, 6), RpduEnableDisableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSnsorHumCfgAlarmGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSnsorHumCfgAlarmGeneration.setDescription('Indicates whether the Humidity Alarm Generation is enabled.')
rPDUSensorDiscrete = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 4))
rPDUSensorDiscreteTableSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSensorDiscreteTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorDiscreteTableSize.setDescription('The number of connected discrete sensors.')
rPDUSensorDiscreteStatusTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 4, 2), )
if mibBuilder.loadTexts: rPDUSensorDiscreteStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorDiscreteStatusTable.setDescription('A table of discrete sensor status data.')
rPDUSensorDiscreteStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 4, 2, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUSensorDiscreteStatusIndex"))
if mibBuilder.loadTexts: rPDUSensorDiscreteStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorDiscreteStatusEntry.setDescription('Status information from the discrete sensor being queried.')
rPDUSensorDiscreteStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSensorDiscreteStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorDiscreteStatusIndex.setDescription('The index to the discrete sensor status data table entry.')
rPDUSensorDiscreteStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 4, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSensorDiscreteStatusName.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorDiscreteStatusName.setDescription('The user-defined discrete sensor ID string.')
rPDUSnsorDiscreteStatCurntState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSnsorDiscreteStatCurntState.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSnsorDiscreteStatCurntState.setDescription('The current state of the discrete sensor, open, closed, or unknown.')
rPDUSnsorDiscreteStatAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 4, 2, 1, 4), RpduNormalAlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSnsorDiscreteStatAlarmState.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSnsorDiscreteStatAlarmState.setDescription('Indicates the alarm status of the discrete sensor input.')
rPDUSensorDiscreteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 4, 3), )
if mibBuilder.loadTexts: rPDUSensorDiscreteConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorDiscreteConfigTable.setDescription('A table of discrete sensor configuration data.')
rPDUSensorDiscreteConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 4, 3, 1), ).setIndexNames((0, "DellrPDU-MIB", "rPDUSensorDiscreteConfigIndex"))
if mibBuilder.loadTexts: rPDUSensorDiscreteConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorDiscreteConfigEntry.setDescription('Configuration data from the discrete sensor being queried.')
rPDUSensorDiscreteConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUSensorDiscreteConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorDiscreteConfigIndex.setDescription('The index to the discrete sensor configuration data table entry.')
rPDUSensorDiscreteConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 4, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSensorDiscreteConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSensorDiscreteConfigName.setDescription('The user-defined discrete sensor ID string.')
rPDUSnsorDiscreteCfgNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSnsorDiscreteCfgNormalState.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSnsorDiscreteCfgNormalState.setDescription('Indicates the normal state of the discrete input contact.')
rPDUSnsorDiscrteAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 150, 4, 3, 1, 4), RpduEnableDisableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUSnsorDiscrteAlarmGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: rPDUSnsorDiscrteAlarmGeneration.setDescription('Indicates whether Discrete Alarm Generation is enabled.')
mtrapargsD = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 160))
contactNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 160, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contactNumber.setStatus('mandatory')
if mibBuilder.loadTexts: contactNumber.setDescription('This OID allows traps to be sent with an integer argument that may not be defined in the MIB. A get of this OID will return 0.')
outletNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 160, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletNumber.setStatus('mandatory')
if mibBuilder.loadTexts: outletNumber.setDescription('This OID allows traps to be sent with an integer argument that may not be defined in the MIB. A get of this OID will return 0.')
mtrapargsString = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 160, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString.setStatus('mandatory')
if mibBuilder.loadTexts: mtrapargsString.setDescription('This OID allows traps to be sent with an octet string argument that may not be defined in the MIB. A get of this OID will return a NULL string.')
phaseNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 160, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phaseNumber.setStatus('mandatory')
if mibBuilder.loadTexts: phaseNumber.setDescription('This OID allows traps to be sent with an integer argument that may not be defined in the MIB. A get of this OID will return 0.')
sensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 160, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sensorNumber.setDescription('This OID allows traps to be sent with an integer argument that may not be defined in the MIB. A get of this OID will return 0.')
deviceNameD = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 160, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceNameD.setStatus('mandatory')
if mibBuilder.loadTexts: deviceNameD.setDescription('This OID allows traps to be sent with an octet string argument that may not be defined in the MIB. A get of this OID will return a NULL string.')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 160, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: serialNumber.setDescription('This OID allows traps to be sent with an octet string argument that may not be defined in the MIB. A get of this OID will return a NULL string.')
testTrapargsInteger = MibScalar((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 160, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: testTrapargsInteger.setStatus('mandatory')
if mibBuilder.loadTexts: testTrapargsInteger.setDescription('This OID allows traps to be sent with an integer argument that may not be defined in the MIB. A get of this OID will return 0.')
events = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500))
deviceCommunicationLostCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,1)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: deviceCommunicationLostCleared.setDescription('INFORMATIONAL: Lost communication with device has been re-established. The first argument is the serial number. The second argument is the device name.')
deviceCommunicationLostSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,2)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: deviceCommunicationLostSet.setDescription('CRITICAL: Lost communication with device. The first argument is the serial number. The second argument is the device name.')
componentCommLostCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,3)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: componentCommLostCleared.setDescription('INFORMATIONAL: Lost communication with an on board component has been re-established. The first argument is the serial number. The second argument is the device name.')
componentCommLostSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,4)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: componentCommLostSet.setDescription('CRITICAL: Lost communication with an on board component. The first argument is the serial number. The second argument is the device name.')
cANBusOffCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,5)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: cANBusOffCleared.setDescription('INFORMATIONAL: CAN bus off condition was cleared. The first argument is the serial number. The second argument is the device name.')
canBusOffSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,6)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: canBusOffSet.setDescription('MINOR: CAN bus off condition was set. The first argument is the serial number. The second argument is the device name.')
powerSupplyFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,7)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: powerSupplyFailureCleared.setDescription("INFORMATIONAL: Unit's power supply voltage is no longer out of tolerance. The first argument is the serial number. The second argument is the device name.")
powerSupplyFailureSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,8)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: powerSupplyFailureSet.setDescription("CRITICAL: Unit's power supply voltage is out of tolerance. The first argument is the serial number. The second argument is the device name.")
keypadButtonStuckCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,9)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: keypadButtonStuckCleared.setDescription('INFORMATIONAL: Keypad button stuck has been cleared. The first argument is the serial number. The second argument is the device name.')
keypadButtonStuckSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,10)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: keypadButtonStuckSet.setDescription('MINOR: Keypad button stuck has been set. The first argument is the serial number. The second argument is the device name.')
dryContactAbnormalCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,11)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "contactNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: dryContactAbnormalCleared.setDescription('INFORMATIONAL: Dry Contact is no longer in an abnormal state. The first argument is the serial number. The second argument is the device name. The third argument is the contact number.')
dryContactAbnormalSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,12)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "contactNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: dryContactAbnormalSet.setDescription('CRITICAL: Dry Contact has moved to an abnormal state. The first argument is the serial number. The second argument is the device name. The third argument is the contact number.')
deviceLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,13)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: deviceLowLoadCleared.setDescription("INFORMATIONAL: Device load is no longer below the 'Low Load' threshold value. The first argument is the serial number. The second argument is the device name.")
deviceLowLoadSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,14)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: deviceLowLoadSet.setDescription("MINOR: Device load has fallen below the 'Low Load' threshold value. The first argument is the serial number. The second argument is the device name.")
deviceNearOverLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,15)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: deviceNearOverLoadCleared.setDescription("INFORMATIONAL: Device load no longer exceeds the 'Near Over Load' threshold value. The first argument is the serial number. The second argument is the device name.")
deviceNearOverLoadSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,16)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: deviceNearOverLoadSet.setDescription("MINOR: Device load has exceeded the 'Near Over Load' threshold value. The first argument is the serial number. The second argument is the device name.")
deviceOverLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,17)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: deviceOverLoadCleared.setDescription("INFORMATIONAL: Device load no longer exceeds the 'Over Load' threshold value. The first argument is the serial number. The second argument is the device name.")
deviceOverLoadSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,18)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: deviceOverLoadSet.setDescription("CRITICAL: Device load has exceeded the 'Over Load' threshold value. The first argument is the serial number. The second argument is the device name.")
phaseLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,19)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "phaseNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: phaseLowLoadCleared.setDescription("INFORMATIONAL: Phase load is no longer below the 'Low Load' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the phase number.")
phaseLowLoadSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,20)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "phaseNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: phaseLowLoadSet.setDescription("MINOR: Phase load has fallen below the 'Low Load' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the phase number.")
phaseNearOverLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,21)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "phaseNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: phaseNearOverLoadCleared.setDescription("INFORMATIONAL: Phase load no longer exceeds the 'Near Over Load' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the phase number.")
phaseNearOverLoadSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,22)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "phaseNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: phaseNearOverLoadSet.setDescription("MINOR: Phase load has exceeded the 'Near Over Load' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the phase number.")
phaseOverLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,23)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "phaseNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: phaseOverLoadCleared.setDescription("INFORMATIONAL: Phase load no longer exceeds the 'Over Load' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the phase number.")
phaseOverLoadSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,24)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "phaseNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: phaseOverLoadSet.setDescription("CRITICAL: Phase load has exceeded the 'Over Load' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the phase number.")
outletLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,25)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "outletNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: outletLowLoadCleared.setDescription("INFORMATIONAL: Outlet load is no longer below the 'Low Load' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the outlet number.")
outletLowLoadSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,26)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "outletNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: outletLowLoadSet.setDescription("MINOR: Outlet load had fallen below the 'Low Load' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the outlet number.")
outletNearOverLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,27)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "outletNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: outletNearOverLoadCleared.setDescription("INFORMATIONAL: Outlet load no longer exceeds the 'Near Over Load' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the outlet number.")
outletNearOverLoadSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,28)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "outletNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: outletNearOverLoadSet.setDescription("MINOR: Outlet load has exceeded the 'Near Over Load' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the outlet number.")
outletOverLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,29)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "outletNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: outletOverLoadCleared.setDescription("INFORMATIONAL: Outlet load no longer exceeds the 'Over Load' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the outlet number.")
outletOverLoadSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,30)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "outletNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: outletOverLoadSet.setDescription("CRITICAL: Outlet load has exceeded the 'Over Load' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the outlet number.")
sensorDisconnectedCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,31)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "sensorNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: sensorDisconnectedCleared.setDescription('INFORMATIONAL: Sensor disconnected condition cleared. The first argument is the serial number. The second argument is the device name. The third argument is the sensor number.')
sensorDisconnectedSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,32)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "sensorNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: sensorDisconnectedSet.setDescription('MINOR: Sensor disconnected condition set. The first argument is the serial number. The second argument is the device name. The third argument is the sensor number.')
sensorTypeIndeterminateCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,33)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "sensorNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: sensorTypeIndeterminateCleared.setDescription('INFORMATIONAL: Sensor type indeterminate condition cleared. The first argument is the serial number. The second argument is the device name. The third argument is the sensor number.')
sensorTypeIndeterminateSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,34)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "sensorNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: sensorTypeIndeterminateSet.setDescription('MINOR: Sensor type indeterminate condition set. The first argument is the serial number. The second argument is the device name. The third argument is the sensor number.')
sensorTypeUnsupportedCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,35)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "sensorNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: sensorTypeUnsupportedCleared.setDescription('INFORMATIONAL: Sensor type unsupported condition cleared. The first argument is the serial number. The second argument is the device name. The third argument is the sensor number.')
sensorTypeUnsupportedSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,36)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "sensorNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: sensorTypeUnsupportedSet.setDescription('MINOR: Sensor type unsupported condition set. The first argument is the serial number. The second argument is the device name. The third argument is the sensor number.')
maxTemperatureExceededCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,37)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "sensorNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: maxTemperatureExceededCleared.setDescription("INFORMATIONAL: Sensor Temperature no longer exceeds the 'Max Temperature' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the sensor number.")
maxTemperatureExceededSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,38)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "sensorNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: maxTemperatureExceededSet.setDescription("CRITICAL: Sensor Temperature has exceeded the 'Max Temperature' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the sensor number.")
highTemperatureExceededCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,39)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "sensorNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: highTemperatureExceededCleared.setDescription("INFORMATIONAL: Sensor Temperature no longer exceeds the 'High Temperature' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the sensor number.")
highTemperatureExceededSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,40)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "sensorNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: highTemperatureExceededSet.setDescription("MINOR: Sensor Temperature has exceeded the 'High Temperature' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the sensor number.")
lowHumidityExceededCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,41)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "sensorNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: lowHumidityExceededCleared.setDescription("INFORMATIONAL: Sensor Humidity is no longer below the 'Low Humidity' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the sensor number.")
lowHumidityExceededSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,42)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "sensorNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: lowHumidityExceededSet.setDescription("MINOR: Sensor Humidity has fallen below the 'Low Humidity' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the sensor number.")
minHumidityExceededCleared = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,43)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "sensorNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: minHumidityExceededCleared.setDescription("INFORMATIONAL: Sensor Humidity is no longer below the 'Min Humidity' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the sensor number.")
minHumidityExceededSet = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,44)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "sensorNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: minHumidityExceededSet.setDescription("CRITICAL: Sensor Humidity has fallen below the 'Min Humidity' threshold value. The first argument is the serial number. The second argument is the device name. The third argument is the sensor number.")
outletTurnOn = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,45)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "outletNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: outletTurnOn.setDescription('INFORMATIONAL: An outlet has turned on. The first argument is the serial number. The second argument is the device name. The third argument is the outlet number.')
outletTurnOff = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,46)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "outletNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: outletTurnOff.setDescription('INFORMATIONAL: An outlet has turned off. The first argument is the serial number. The second argument is the device name. The third argument is the outlet number.')
actionCancelled = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,47)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "outletNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: actionCancelled.setDescription('INFORMATIONAL: An outlet action has been cancelled. The first argument is the serial number. The second argument is the device name. The third argument is the outlet number.')
deviceConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,48)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: deviceConfigurationChange.setDescription('INFORMATIONAL: A device configuration has been changed. The first argument is the serial number. The second argument is the device name.')
sensorConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,49)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "sensorNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: sensorConfigurationChange.setDescription('INFORMATIONAL: A sensor configuration has been changed. The first argument is the serial number. The second argument is the device name. The third argument is the sensor number.')
outletConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,50)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "outletNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: outletConfigurationChange.setDescription('INFORMATIONAL: An outlet configuration has been changed. The first argument is the serial number. The second argument is the device name. The third argument is the outlet number.')
phaseConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,51)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "phaseNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: phaseConfigurationChange.setDescription('INFORMATIONAL: A phase configuration has been changed. The first argument is the serial number. The second argument is the device name. The third argument is the phase number.')
dryContactConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,52)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "contactNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: dryContactConfigurationChange.setDescription('INFORMATIONAL: A dry contact configuration has been changed. The first argument is the serial number. The second argument is the device name. The third argument is the contact number.')
actionInit = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,53)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "outletNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: actionInit.setDescription('INFORMATIONAL: An outlet action has been initialized. The first argument is the serial number. The second argument is the device name. The third argument is the outlet number.')
actionFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,54)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "outletNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: actionFailed.setDescription('MINOR: An outlet action has failed to complete. The first argument is the serial number. The second argument is the device name. The third argument is the outlet number.')
actionDeleted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,55)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "outletNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: actionDeleted.setDescription('INFORMATIONAL: An outlet action has been deleted. The first argument is the serial number. The second argument is the device name. The third argument is the outlet number.')
syncCommandFailed = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,56)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "outletNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: syncCommandFailed.setDescription('MINOR: An outlet sync command to another unit has failed. The first argument is the serial number. The second argument is the device name. The third argument is the outlet number.')
mPOPicFwDownloadStarted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,57)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: mPOPicFwDownloadStarted.setDescription('INFORMATIONAL: MPO pic fw download started. The first argument is the serial number. The second argument is the device name.')
mPOPicFwDownloadComplete = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,58)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: mPOPicFwDownloadComplete.setDescription('INFORMATIONAL: MPO pic fw download complete. The first argument is the serial number. The second argument is the device name.')
mPOPicFwDownloadAborted = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,59)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: mPOPicFwDownloadAborted.setDescription('INFORMATIONAL: MPO pic fw download aborted. The first argument is the serial number. The second argument is the device name.')
sensorCommEstablished = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,60)).setObjects(("DellrPDU-MIB", "serialNumber"), ("DellrPDU-MIB", "deviceNameD"), ("DellrPDU-MIB", "sensorNumber"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: sensorCommEstablished.setDescription('INFORMATIONAL: Sensor comm established. The first argument is the serial number. The second argument is the device name. The third argument is the sensor number.')
configChangeSNMP = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,1000)).setObjects(("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: configChangeSNMP.setDescription('MINOR: The SNMP configuration has been changed.')
accessViolationConsole = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,1001)).setObjects(("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: accessViolationConsole.setDescription('MINOR: Someone attempted console login with incorrect password three times.')
accessViolationHTTP = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,1002)).setObjects(("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: accessViolationHTTP.setDescription('MINOR: Someone attempted login via HTTP with incorrect password.')
dellTestTrap = NotificationType((1, 3, 6, 1, 4, 1, 674, 10903, 200, 2, 200, 500) + (0,1003)).setObjects(("DellrPDU-MIB", "testTrapargsInteger"), ("DellrPDU-MIB", "mtrapargsString"))
if mibBuilder.loadTexts: dellTestTrap.setDescription('INFORMATIONAL: Trap used to test SNMP trap functionality. The first argument is a place holder for test variables.')
mibBuilder.exportSymbols("DellrPDU-MIB", rPDUIdentIndex=rPDUIdentIndex, phaseConfigurationChange=phaseConfigurationChange, rPDUSensorTempCfgTempMaxThreshF=rPDUSensorTempCfgTempMaxThreshF, rPDUSensorTempConfigName=rPDUSensorTempConfigName, rPDUSensorDiscreteStatusName=rPDUSensorDiscreteStatusName, rPDUOutSwitchedCfgPowerOnTime=rPDUOutSwitchedCfgPowerOnTime, deviceLowLoadSet=deviceLowLoadSet, dellTestTrap=dellTestTrap, rPDUDevicePropertiesNumMtrdOuts=rPDUDevicePropertiesNumMtrdOuts, rPDUOutletSwitchedControlTable=rPDUOutletSwitchedControlTable, rPDUIdentD=rPDUIdentD, sensorTypeUnsupportedCleared=sensorTypeUnsupportedCleared, rPDUSensorHumidity=rPDUSensorHumidity, mPOPicFwDownloadComplete=mPOPicFwDownloadComplete, sysRPDUV1=sysRPDUV1, rPDUSensorTempStatusTempF=rPDUSensorTempStatusTempF, testTrapargsInteger=testTrapargsInteger, events=events, mPOPicFwDownloadStarted=mPOPicFwDownloadStarted, rPDUPhCfgLowLoadCurntThreshold=rPDUPhCfgLowLoadCurntThreshold, productStatusTimeStamp=productStatusTimeStamp, rPDUIdentModelNumberD=rPDUIdentModelNumberD, rPDUOutletSwitchedConfigIndex=rPDUOutletSwitchedConfigIndex, rPDUPowerSupplyAlarmD=rPDUPowerSupplyAlarmD, deviceLowLoadCleared=deviceLowLoadCleared, rPDUSensorTempStatusEntry=rPDUSensorTempStatusEntry, rPDUOutletSwitchedStatusTable=rPDUOutletSwitchedStatusTable, rPDUSnsorHumStatRelativeHumdity=rPDUSnsorHumStatRelativeHumdity, powerSupplyFailureSet=powerSupplyFailureSet, rPDUPhaseCfgOverloadRestriction=rPDUPhaseCfgOverloadRestriction, rPDUOutletMeteredStatPeakPower=rPDUOutletMeteredStatPeakPower, rPDUSensorDiscrete=rPDUSensorDiscrete, componentCommLostSet=componentCommLostSet, productIDURL=productIDURL, productStatusRESERVED1=productStatusRESERVED1, rPDUDeviceCfgPeakPowerHeadroom=rPDUDeviceCfgPeakPowerHeadroom, rPDUSensorTempConfigIndex=rPDUSensorTempConfigIndex, deviceCommunicationLostCleared=deviceCommunicationLostCleared, deviceNearOverLoadSet=deviceNearOverLoadSet, productStatusGlobalStatus=productStatusGlobalStatus, rPDUDeviceCfgNerOvloadPwrThresh=rPDUDeviceCfgNerOvloadPwrThresh, rPDUPhaseConfigNumber=rPDUPhaseConfigNumber, sensorDisconnectedCleared=sensorDisconnectedCleared, syncCommandFailed=syncCommandFailed, rPDUIdentTable=rPDUIdentTable, rPDUSensorTempStatusName=rPDUSensorTempStatusName, RpduNormalAlarmType=RpduNormalAlarmType, rPDUDeviceStatusPower=rPDUDeviceStatusPower, rPDUSnsorHumCfgAlarmGeneration=rPDUSnsorHumCfgAlarmGeneration, rPDUIdentTableSize=rPDUIdentTableSize, rPDUSensorHumidityStatusEntry=rPDUSensorHumidityStatusEntry, rPDUOutletMeteredStatusTable=rPDUOutletMeteredStatusTable, sensorCommEstablished=sensorCommEstablished, pdusub=pdusub, rPDUDeviceStatusEntry=rPDUDeviceStatusEntry, rPDUDeviceConfigColdstartDelay=rPDUDeviceConfigColdstartDelay, rPDUDeviceConfigPeakPower=rPDUDeviceConfigPeakPower, rPDUPhCfgOverloadCurntThreshold=rPDUPhCfgOverloadCurntThreshold, rPDUOutletSwitchedControlIndex=rPDUOutletSwitchedControlIndex, rPDUOutletMeteredTableSize=rPDUOutletMeteredTableSize, rPDUSensorDiscreteConfigEntry=rPDUSensorDiscreteConfigEntry, deviceOverLoadSet=deviceOverLoadSet, actionDeleted=actionDeleted, rPDUDeviceStatusLoadState=rPDUDeviceStatusLoadState, productStatusLastGlobalStatus=productStatusLastGlobalStatus, maxTemperatureExceededSet=maxTemperatureExceededSet, rPDUSnsorHumStatusAlarmStatus=rPDUSnsorHumStatusAlarmStatus, rPDUDevicePropertiesNumSwdOuts=rPDUDevicePropertiesNumSwdOuts, outletTurnOn=outletTurnOn, actionFailed=actionFailed, rPDUDeviceCfgEnergyStartTime=rPDUDeviceCfgEnergyStartTime, rPDUOutletMeteredConfigTable=rPDUOutletMeteredConfigTable, rPDUSensorHumidityStatusTable=rPDUSensorHumidityStatusTable, rPDUOutletSwitchedStatusState=rPDUOutletSwitchedStatusState, sensorDisconnectedSet=sensorDisconnectedSet, rPDUOutletSwitchedControlEntry=rPDUOutletSwitchedControlEntry, rPDUOutletMeteredStatusCurrent=rPDUOutletMeteredStatusCurrent, rPDUPhaseStatusCurrent=rPDUPhaseStatusCurrent, rPDUSensorHumidityConfigEntry=rPDUSensorHumidityConfigEntry, rPDUOutletSwitchedStatCmdPnding=rPDUOutletSwitchedStatCmdPnding, rPDUOutletSwitchedConfigNumber=rPDUOutletSwitchedConfigNumber, rPDUOutletMeteredStatusEntry=rPDUOutletMeteredStatusEntry, rPDUOutletMeteredConfigNumber=rPDUOutletMeteredConfigNumber, rPDUSensorStatusType=rPDUSensorStatusType, rPDUSensorTempTableSize=rPDUSensorTempTableSize, rPDUSensorStatusTableSize=rPDUSensorStatusTableSize, rPDUSnsorDiscreteStatAlarmState=rPDUSnsorDiscreteStatAlarmState, rPDUSnsorHumCfgHumdtyHysteresis=rPDUSnsorHumCfgHumdtyHysteresis, rPDUPowerSupplyVoltage=rPDUPowerSupplyVoltage, rPDUPhCfgNerOverloadCurntThresh=rPDUPhCfgNerOverloadCurntThresh, rPDUSensorDiscreteStatusEntry=rPDUSensorDiscreteStatusEntry, rPDUDeviceConfigPowerHeadroom=rPDUDeviceConfigPowerHeadroom, rPDUSnsorTempCfgTempHysteresisF=rPDUSnsorTempCfgTempHysteresisF, rPDUSnsorHumCfgHumdityLowThresh=rPDUSnsorHumCfgHumdityLowThresh, outletNumber=outletNumber, configChangeSNMP=configChangeSNMP, rPDUDeviceConfigPeakPwrCapTime=rPDUDeviceConfigPeakPwrCapTime, rPDUDeviceStatusTable=rPDUDeviceStatusTable, rPDUSnsorDiscreteCfgNormalState=rPDUSnsorDiscreteCfgNormalState, outletOverLoadSet=outletOverLoadSet, rPDUDeviceControlEntry=rPDUDeviceControlEntry, rPDUDevicePropertiesNumPhases=rPDUDevicePropertiesNumPhases, productIDVersion=productIDVersion, rPDUOutletMeteredConfigEntry=rPDUOutletMeteredConfigEntry, rPDUSensorTempStatusAlarmStatus=rPDUSensorTempStatusAlarmStatus, productID=productID, rPDUOutletMeteredStatusLayout=rPDUOutletMeteredStatusLayout, rPDUSensorStatusName=rPDUSensorStatusName, cANBusOffCleared=cANBusOffCleared, sensorTypeUnsupportedSet=sensorTypeUnsupportedSet, lowHumidityExceededCleared=lowHumidityExceededCleared, rPDUDeviceConfigLocation=rPDUDeviceConfigLocation, rPDUOutSwtchedCfgRebootDuration=rPDUOutSwtchedCfgRebootDuration, productIDVendor=productIDVendor, RpduEnableDisableType=RpduEnableDisableType, RpduLowNormalNearOverloadType=RpduLowNormalNearOverloadType, rPDUDevicePropertiesEntry=rPDUDevicePropertiesEntry, rPDUOutlet=rPDUOutlet, rPDUOutMtredCfgLowLdCurntThresh=rPDUOutMtredCfgLowLdCurntThresh, phaseNumber=phaseNumber, rPDUOutletMeteredStatusName=rPDUOutletMeteredStatusName, rPDUOutletMeteredStatusNumber=rPDUOutletMeteredStatusNumber, rPDUSensorDiscreteConfigIndex=rPDUSensorDiscreteConfigIndex, accessViolationConsole=accessViolationConsole, rPDUIdentLocation=rPDUIdentLocation, rPDUOutletSwitchedConfigEntry=rPDUOutletSwitchedConfigEntry, rPDUIdentDateOfManufactureD=rPDUIdentDateOfManufactureD, rPDUDeviceCfgOverloadPwrThresh=rPDUDeviceCfgOverloadPwrThresh, rPDUOutletSwitchedStatPhLayout=rPDUOutletSwitchedStatPhLayout, rPDUSensorTempConfigEntry=rPDUSensorTempConfigEntry, rPDUSnsorTempCfgTempHighThreshC=rPDUSnsorTempCfgTempHighThreshC, rPDUSensorHumidityConfigName=rPDUSensorHumidityConfigName, deviceOverLoadCleared=deviceOverLoadCleared, productIDDeviceNetworkName=productIDDeviceNetworkName, rPDUDevicePropertiesNumOutlets=rPDUDevicePropertiesNumOutlets, rPDUOutMeteredStatusLoadState=rPDUOutMeteredStatusLoadState, rPDUPhaseStatusIndex=rPDUPhaseStatusIndex, rPDUOutletMeteredConfigIndex=rPDUOutletMeteredConfigIndex, rPDUDevicePropertiesNumBreakers=rPDUDevicePropertiesNumBreakers, rPDUOutletSwitchedStatusName=rPDUOutletSwitchedStatusName, rPDUOutSwitchedCfgPowerOffTime=rPDUOutSwitchedCfgPowerOffTime, componentCommLostCleared=componentCommLostCleared, deviceNearOverLoadCleared=deviceNearOverLoadCleared, rPDUSensorStatus=rPDUSensorStatus, rPDUOutletMeteredStatusIndex=rPDUOutletMeteredStatusIndex, software=software, rPDUOutMeteredEnergyStartTime=rPDUOutMeteredEnergyStartTime, rPDUSensorStatusTable=rPDUSensorStatusTable, rPDUDeviceTableSize=rPDUDeviceTableSize, rPDUDevice=rPDUDevice, rPDUDeviceStatusName=rPDUDeviceStatusName, rPDUPhaseStatusPower=rPDUPhaseStatusPower, rPDUOutletSwitchedControlNumber=rPDUOutletSwitchedControlNumber, rPDUSensorTemp=rPDUSensorTemp, productIDBuildNumber=productIDBuildNumber, productStatusRESERVED2=productStatusRESERVED2, rPDUSensorDiscreteConfigTable=rPDUSensorDiscreteConfigTable, rPDUDeviceControlIndex=rPDUDeviceControlIndex, dryContactAbnormalCleared=dryContactAbnormalCleared, phaseLowLoadCleared=phaseLowLoadCleared, maxTemperatureExceededCleared=maxTemperatureExceededCleared, dryContactConfigurationChange=dryContactConfigurationChange, rPDUSensorStatusEntry=rPDUSensorStatusEntry, rPDUDeviceConfigIndex=rPDUDeviceConfigIndex, rPDUSensorDiscreteStatusIndex=rPDUSensorDiscreteStatusIndex, rPDUDevicePropertiesOutlayout=rPDUDevicePropertiesOutlayout, rPDUDevicePropertiesMaxCurntRtg=rPDUDevicePropertiesMaxCurntRtg, rPDUIdentFirmwareRevD=rPDUIdentFirmwareRevD, outletNearOverLoadSet=outletNearOverLoadSet, rPDUPhaseConfigEntry=rPDUPhaseConfigEntry, rPDUSensorHumidityTableSize=rPDUSensorHumidityTableSize, rPDUDevicePropertiesIndex=rPDUDevicePropertiesIndex, outletTurnOff=outletTurnOff, actionInit=actionInit, rPDUSensorTempStatusTable=rPDUSensorTempStatusTable, rPDUOutletMeteredStatusEnergy=rPDUOutletMeteredStatusEnergy, outletLowLoadSet=outletLowLoadSet, system=system, rPDUSensor=rPDUSensor, RpduOutletPhaseLayoutType=RpduOutletPhaseLayoutType, mtrapargsString=mtrapargsString, phaseOverLoadSet=phaseOverLoadSet, minHumidityExceededCleared=minHumidityExceededCleared, rPDUOutletMetered=rPDUOutletMetered, rPDU=rPDU, rPDUOutletSwitchedStatusNumber=rPDUOutletSwitchedStatusNumber, rPDUOutMeteredPeakPwrStartTime=rPDUOutMeteredPeakPwrStartTime, outletOverLoadCleared=outletOverLoadCleared, rPDUIdentSerialNumberD=rPDUIdentSerialNumberD, sensorConfigurationChange=sensorConfigurationChange, phaseOverLoadCleared=phaseOverLoadCleared, mtrapargsD=mtrapargsD, rPDUPhaseStatusVoltage=rPDUPhaseStatusVoltage, rPDUDeviceCfgLowLoadPwrThresh=rPDUDeviceCfgLowLoadPwrThresh, productStatusRESERVED3=productStatusRESERVED3, rPDUPhase=rPDUPhase, rPDUIdentHardwareRevD=rPDUIdentHardwareRevD, rPDUSensorHumidityStatusName=rPDUSensorHumidityStatusName, canBusOffSet=canBusOffSet, rPDUSensorDiscreteConfigName=rPDUSensorDiscreteConfigName, contactNumber=contactNumber, rPDUSnsorTempCfgTempHysteresisC=rPDUSnsorTempCfgTempHysteresisC, rPDUSnsorTempCfgAlarmGeneration=rPDUSnsorTempCfgAlarmGeneration, pdu=pdu, rPDUSensorDiscreteStatusTable=rPDUSensorDiscreteStatusTable, highTemperatureExceededCleared=highTemperatureExceededCleared, rPDUDeviceConfigTable=rPDUDeviceConfigTable, productStatus=productStatus, rPDUDevicePropertiesName=rPDUDevicePropertiesName, rPDUSensorDiscreteTableSize=rPDUSensorDiscreteTableSize, keypadButtonStuckSet=keypadButtonStuckSet, rPDUSensorHumidityConfigIndex=rPDUSensorHumidityConfigIndex, rPDUDevicePropertiesTable=rPDUDevicePropertiesTable, rPDUPowerSupply=rPDUPowerSupply, rPDUIdentNameD=rPDUIdentNameD, rPDUOutletSwitchedConfigTable=rPDUOutletSwitchedConfigTable, powerSupplyFailureCleared=powerSupplyFailureCleared, rPDUPhaseStatusLoadState=rPDUPhaseStatusLoadState, RpduCommNoneOKLostType=RpduCommNoneOKLostType, phaseNearOverLoadCleared=phaseNearOverLoadCleared, rPDUDeviceControlName=rPDUDeviceControlName, rPDUPhaseStatusTable=rPDUPhaseStatusTable, rPDUPhaseTableSize=rPDUPhaseTableSize, keypadButtonStuckCleared=keypadButtonStuckCleared, rPDUDeviceStatusIndex=rPDUDeviceStatusIndex, outletNearOverLoadCleared=outletNearOverLoadCleared, highTemperatureExceededSet=highTemperatureExceededSet, rPDUPhaseConfigIndex=rPDUPhaseConfigIndex, rPDUOutletSwitchedControlName=rPDUOutletSwitchedControlName, rPDUSnsorHumidityStatCommStatus=rPDUSnsorHumidityStatCommStatus, rPDUSnsorTempCfgTempHighThreshF=rPDUSnsorTempCfgTempHighThreshF, rPDUOutMeteredStatPowerRating=rPDUOutMeteredStatPowerRating, sensorNumber=sensorNumber, deviceNameD=deviceNameD, dryContactAbnormalSet=dryContactAbnormalSet, deviceConfigurationChange=deviceConfigurationChange, mPOPicFwDownloadAborted=mPOPicFwDownloadAborted, rPDUDeviceStatusCommandPending=rPDUDeviceStatusCommandPending, rPDUSensorStatusIndex=rPDUSensorStatusIndex, deviceCommunicationLostSet=deviceCommunicationLostSet, rPDUDeviceCfgPeakPwrStartTime=rPDUDeviceCfgPeakPwrStartTime, hardware=hardware, dell=dell, rPDUDeviceControlTable=rPDUDeviceControlTable, accessViolationHTTP=accessViolationHTTP, rPDUOutMtrdCfgNrOvdCurntThresh=rPDUOutMtrdCfgNrOvdCurntThresh, rPDUOutletSwitchedTableSize=rPDUOutletSwitchedTableSize, rPDUOutletSwitchedConfigName=rPDUOutletSwitchedConfigName, productIDDisplayName=productIDDisplayName, rPDUSensorTempStatusCommStatus=rPDUSensorTempStatusCommStatus, actionCancelled=actionCancelled, rPDUIdentEntry=rPDUIdentEntry, rPDUOutletSwitchedStatusEntry=rPDUOutletSwitchedStatusEntry, rPDUOutletSwitchedControlCmd=rPDUOutletSwitchedControlCmd)
mibBuilder.exportSymbols("DellrPDU-MIB", rPDUSensorHumidityStatusIndex=rPDUSensorHumidityStatusIndex, rPDUSensorTempConfigTable=rPDUSensorTempConfigTable, lowHumidityExceededSet=lowHumidityExceededSet, serialNumber=serialNumber, rPDUDeviceConfigName=rPDUDeviceConfigName, outletConfigurationChange=outletConfigurationChange, rPDUDeviceConfigEntry=rPDUDeviceConfigEntry, rPDUPhaseStatusEntry=rPDUPhaseStatusEntry, RpduNotPBMinLowNrmlOHiMaxType=RpduNotPBMinLowNrmlOHiMaxType, rPDUOutletMeteredStatusPower=rPDUOutletMeteredStatusPower, rPDUOutMtredCfgOvrldCurntThresh=rPDUOutMtredCfgOvrldCurntThresh, sensorTypeIndeterminateCleared=sensorTypeIndeterminateCleared, rPDUDeviceStatusEnergy=rPDUDeviceStatusEnergy, rPDUPhaseConfigTable=rPDUPhaseConfigTable, rPDUOutletSwitched=rPDUOutletSwitched, rPDUPhaseStatusNumber=rPDUPhaseStatusNumber, rPDUOutletSwitchedStatusIndex=rPDUOutletSwitchedStatusIndex, rPDUOutMeteredStatPeakPwrTime=rPDUOutMeteredStatPeakPwrTime, RpduOtherToNonrecoverableType=RpduOtherToNonrecoverableType, rPDUOutletMeteredConfigName=rPDUOutletMeteredConfigName, rPDUSensorHumidityConfigTable=rPDUSensorHumidityConfigTable, rPDUSensorTempCfgTempMaxThreshC=rPDUSensorTempCfgTempMaxThreshC, rPDUSnsorDiscreteStatCurntState=rPDUSnsorDiscreteStatCurntState, rPDUSnsorDiscrteAlarmGeneration=rPDUSnsorDiscrteAlarmGeneration, outletLowLoadCleared=outletLowLoadCleared, minHumidityExceededSet=minHumidityExceededSet, phaseNearOverLoadSet=phaseNearOverLoadSet, phaseLowLoadSet=phaseLowLoadSet, rPDUSensorTempStatusIndex=rPDUSensorTempStatusIndex, rPDUSnsorHumCfgHumdityMinThresh=rPDUSnsorHumCfgHumdityMinThresh, productIDDescription=productIDDescription, rPDUDeviceControlCommand=rPDUDeviceControlCommand, sensorTypeIndeterminateSet=sensorTypeIndeterminateSet, rPDUSensorTempStatusTempC=rPDUSensorTempStatusTempC)
