#
# PySNMP MIB module MPLS-FRR-FACILITY-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MPLS-FRR-FACILITY-STD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:14:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
mplsFrrGeneralTunnelARHopGroup, mplsFrrGeneralScalarGroup, mplsFrrGeneralConstraintsGroup = mibBuilder.importSymbols("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralTunnelARHopGroup", "mplsFrrGeneralScalarGroup", "mplsFrrGeneralConstraintsGroup")
MplsTunnelInstanceIndex, MplsTunnelIndex, MplsLsrIdentifier, MplsBitRate = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsTunnelInstanceIndex", "MplsTunnelIndex", "MplsLsrIdentifier", "MplsBitRate")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, Counter64, TimeTicks, Integer32, mib_2, Counter32, iso, MibIdentifier, Unsigned32, ModuleIdentity, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Counter64", "TimeTicks", "Integer32", "mib-2", "Counter32", "iso", "MibIdentifier", "Unsigned32", "ModuleIdentity", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
mplsFrrFacilityMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 204))
mplsFrrFacilityMIB.setRevisions(('2011-11-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mplsFrrFacilityMIB.setRevisionsDescriptions(('Initial version. Published as RFC 6445.',))
if mibBuilder.loadTexts: mplsFrrFacilityMIB.setLastUpdated('201111030000Z')
if mibBuilder.loadTexts: mplsFrrFacilityMIB.setOrganization('Multiprotocol Label Switching (MPLS) Working Group')
if mibBuilder.loadTexts: mplsFrrFacilityMIB.setContactInfo(' Riza Cetin Email: riza.cetin@alcatel.be Thomas D. Nadeau Email: thomas.nadeau@ca.com A S Kiran Koushik Email: kkoushik@cisco.com Stefaan De Cnodder Email: Stefaan.de_cnodder@alcatel.be Der-Hwa Gan Email: dhg@juniper.net ')
if mibBuilder.loadTexts: mplsFrrFacilityMIB.setDescription("Copyright (c) 2011 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info). This MIB module contains object definitions for the MPLS Traffic Engineering facility backup method for Fast Reroute as defined in RFC 4090.")
mplsFrrFacilityNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 204, 0))
mplsFrrFacilityObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 204, 1))
mplsFrrFacilityConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 204, 2))
mplsFrrConfiguredInterfaces = MibScalar((1, 3, 6, 1, 2, 1, 204, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrConfiguredInterfaces.setStatus('current')
if mibBuilder.loadTexts: mplsFrrConfiguredInterfaces.setDescription('Indicates the number of MPLS interfaces configured for protection.')
mplsFrrActiveInterfaces = MibScalar((1, 3, 6, 1, 2, 1, 204, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrActiveInterfaces.setStatus('current')
if mibBuilder.loadTexts: mplsFrrActiveInterfaces.setDescription('Indicates the number of interfaces currently being protected. This value MUST be less than or equal to mplsFrrConfiguredInterfaces.')
mplsFrrConfiguredBypassTunnels = MibScalar((1, 3, 6, 1, 2, 1, 204, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrConfiguredBypassTunnels.setStatus('current')
if mibBuilder.loadTexts: mplsFrrConfiguredBypassTunnels.setDescription('Indicates the number of bypass tunnels configured to protect TE tunnels on this LSR.')
mplsFrrActiveBypassTunnels = MibScalar((1, 3, 6, 1, 2, 1, 204, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrActiveBypassTunnels.setStatus('current')
if mibBuilder.loadTexts: mplsFrrActiveBypassTunnels.setDescription('Indicates the number of bypass tunnels indicated in mplsFrrConfiguredBypassTunnels whose operStatus is up(1), indicating that they are currently protecting TE tunnels on this LSR.')
mplsFrrFacilityNotificationsEnabled = MibScalar((1, 3, 6, 1, 2, 1, 204, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsFrrFacilityNotificationsEnabled.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityNotificationsEnabled.setDescription('Enables or disables FRR notifications defined in this MIB module. Notifications are disabled by default. This object is needed to control the notifications emitted by this implementation.')
mplsFrrFacilityNotificationsMaxRate = MibScalar((1, 3, 6, 1, 2, 1, 204, 1, 6), Gauge32()).setUnits('Notifications per Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsFrrFacilityNotificationsMaxRate.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityNotificationsMaxRate.setDescription('This variable indicates the maximum number of notifications issued per second. If events occur more rapidly, the implementation may simply fail to emit these notifications during that period, or may queue them until an appropriate time. In case the implementation chooses to drop the events during throttling instead of queuing them to be sent at a later time, it is assumed that there will be no indication that events are being thrown away. A value of 0 means no throttling is applied and events may be generated at the rate at which they occur.')
mplsFrrFacilityDBTable = MibTable((1, 3, 6, 1, 2, 1, 204, 1, 7), )
if mibBuilder.loadTexts: mplsFrrFacilityDBTable.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityDBTable.setDescription('The mplsFrrFacilityDBTable provides information about the fast-reroute database. Each entry belongs to a protected interface, protecting backup tunnel, and protected tunnel. MPLS interfaces defined on this node are protected by backup tunnels and are indicated by the index mplsFrrFacilityProtectedIfIndex. If the interface index is set to 0, this indicates that the remaining indexes apply to all configured protected interfaces. Note that all objects in this table are read-only, and if new objects are added to this table, they should also be read-only. It is recommended that ifIndex persistence be enabled across re-initializations. If persistence is not implemented, then the value of mplsFrrFacilityProtectedIfIndex in this table cannot be guaranteed across restarts and all entries in this table MUST NOT be persistent, or the values of mplsFrrFacilityProtectedIfIndex MUST be reconstructed on restart. It is recommended that entries in this table be persistent across reboots. The protecting tunnel is indicated by the index mplsFrrFacilityProtectingTunnelIndex and represents a valid mplsTunnelEntry. Note that the tunnel instance index of the protecting tunnel may be set to 0, which indicates the tunnel head interface for the protecting tunnel, as per RFC 3812, but it may also be defined using the following semantics: - lower 16 bits : protected tunnel instance - higher 16 bits: must be all zeros')
mplsFrrFacilityDBEntry = MibTableRow((1, 3, 6, 1, 2, 1, 204, 1, 7, 1), ).setIndexNames((0, "MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityProtectedIfIndex"), (0, "MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityProtectingTunnelIndex"), (0, "MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityBackupTunnelIndex"), (0, "MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityBackupTunnelInstance"), (0, "MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityBackupTunnelIngressLSRId"), (0, "MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityBackupTunnelEgressLSRId"))
if mibBuilder.loadTexts: mplsFrrFacilityDBEntry.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityDBEntry.setDescription('An entry in the mplsFrrFacilityDBTable represents a single protected LSP, protected by a backup tunnel on a specific protected interface, or if the interface index is set to 0, on all interfaces. Note that for brevity, managers should consult the mplsTunnelTable present in the MPLS-TE-STD-MIB module for additional information about the protecting and protected tunnels, and the ifEntry in the IF-MIB module for the protected interface.')
mplsFrrFacilityProtectedIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 204, 1, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mplsFrrFacilityProtectedIfIndex.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityProtectedIfIndex.setDescription('Uniquely identifies the interface configured for FRR protection. If this object is set to 0, this indicates that the remaining indexing combinations for this row apply to all interfaces on this device for which the FRR feature can operate.')
mplsFrrFacilityProtectingTunnelIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 204, 1, 7, 1, 2), MplsTunnelIndex())
if mibBuilder.loadTexts: mplsFrrFacilityProtectingTunnelIndex.setReference('Section 6.1 of RFC 3812.')
if mibBuilder.loadTexts: mplsFrrFacilityProtectingTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityProtectingTunnelIndex.setDescription('Uniquely identifies the mplsTunnelEntry primary index for the tunnel head interface designated to protect the interface as specified in the mplsFrrFacilityProtectedIfIndex (and all of the tunnels using this interface). Note that the corresponding mplsTunnelInstance MUST BE 0 as per the indexing convention stipulated.')
mplsFrrFacilityBackupTunnelIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 204, 1, 7, 1, 3), MplsTunnelIndex())
if mibBuilder.loadTexts: mplsFrrFacilityBackupTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityBackupTunnelIndex.setDescription('Uniquely identifies the mplsTunnelEntry primary index for the TE tunnel LSP being protected on the interface as specified by mplsFrrFacilityProtectedIfIndex.')
mplsFrrFacilityBackupTunnelInstance = MibTableColumn((1, 3, 6, 1, 2, 1, 204, 1, 7, 1, 4), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: mplsFrrFacilityBackupTunnelInstance.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityBackupTunnelInstance.setDescription('Uniquely identifies the mplsTunnelEntry secondary index for the TE tunnel LSP being protected on the interface as specified by mplsFrrFacilityProtectedIfIndex.')
mplsFrrFacilityBackupTunnelIngressLSRId = MibTableColumn((1, 3, 6, 1, 2, 1, 204, 1, 7, 1, 5), MplsLsrIdentifier())
if mibBuilder.loadTexts: mplsFrrFacilityBackupTunnelIngressLSRId.setReference('Section 6.1 of RFC 3812.')
if mibBuilder.loadTexts: mplsFrrFacilityBackupTunnelIngressLSRId.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityBackupTunnelIngressLSRId.setDescription('Uniquely identifies the mplsTunnelEntry third index for the TE tunnel LSP being protected on the interface as specified by mplsFrrFacilityProtectedIfIndex.')
mplsFrrFacilityBackupTunnelEgressLSRId = MibTableColumn((1, 3, 6, 1, 2, 1, 204, 1, 7, 1, 6), MplsLsrIdentifier())
if mibBuilder.loadTexts: mplsFrrFacilityBackupTunnelEgressLSRId.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityBackupTunnelEgressLSRId.setDescription('Uniquely identifies the mplsTunnelEntry fourth index for the TE tunnel LSP being protected on the interface as specified by mplsFrrFacilityProtectedIfIndex.')
mplsFrrFacilityDBNumProtectingTunnelOnIf = MibTableColumn((1, 3, 6, 1, 2, 1, 204, 1, 7, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrFacilityDBNumProtectingTunnelOnIf.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityDBNumProtectingTunnelOnIf.setDescription('The number of backup tunnels protecting the interface specified by mplsFrrFacilityProtectedIfIndex.')
mplsFrrFacilityDBNumProtectedLspOnIf = MibTableColumn((1, 3, 6, 1, 2, 1, 204, 1, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrFacilityDBNumProtectedLspOnIf.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityDBNumProtectedLspOnIf.setDescription('The number of LSPs currently being protected on the interface specified by mplsFrrFacilityProtectedIfIndex.')
mplsFrrFacilityDBNumProtectedTunnels = MibTableColumn((1, 3, 6, 1, 2, 1, 204, 1, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrFacilityDBNumProtectedTunnels.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityDBNumProtectedTunnels.setDescription('The number of tunnels protected on the interface specified by mplsFrrFacilityProtectedIfIndex.')
mplsFrrFacilityDBProtectingTunnelStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 204, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("ready", 2), ("partial", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrFacilityDBProtectingTunnelStatus.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityDBProtectingTunnelStatus.setDescription("Specifies the state of the protecting tunnel as specified by mplsFrrFacilityProtectingTunnelIndex. active - This tunnel's label has been placed in the LFIB and is ready to be applied to incoming packets. ready - This tunnel's label entry has been created but is not yet in the LFIB. partial - This tunnel's label entry has not been fully created.")
mplsFrrFacilityDBProtectingTunnelResvBw = MibTableColumn((1, 3, 6, 1, 2, 1, 204, 1, 7, 1, 11), MplsBitRate()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrFacilityDBProtectingTunnelResvBw.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityDBProtectingTunnelResvBw.setDescription("Specifies the amount of bandwidth in units of '1,000 bits per second', actually reserved by the protecting tunnel for facility backup purposes. This value is repeated here from the MPLS-TE-STD-MIB module because the tunnel entry will reveal the bandwidth reserved by the signaling protocol, which is typically 0 for backup tunnels so as to not over-book bandwidth. However, internal reservations are typically made on the PLR; thus, this value should be revealed here, as it is often different from mplsTunnelResourceMeanRate found in the MPLS-TE-STD-MIB module.")
mplsFrrFacilityInitialBackupTunnelInvoked = NotificationType((1, 3, 6, 1, 2, 1, 204, 0, 1)).setObjects(("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBNumProtectingTunnelOnIf"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBNumProtectedLspOnIf"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBNumProtectedTunnels"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBProtectingTunnelStatus"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBProtectingTunnelResvBw"))
if mibBuilder.loadTexts: mplsFrrFacilityInitialBackupTunnelInvoked.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityInitialBackupTunnelInvoked.setDescription('This notification is generated when a tunnel running over an interface as specified in the mplsFrrConstraintsTable is initially protected by the backup tunnel also specified in the mplsFrrConstraintsTable. In some implementations, there may be a difference between when the control plane triggers this notification and when the hardware is programmed to utilize the protection path. Due to the urgency of this operation, it is acceptable for the control plane to issue this notification either before or after it programs the hardware. In cases where it is the latter approach, the notification MUST be sent immediately after the data plane has been altered. This notification should not be generated for each subsequent tunnel that is backed up by the FRR feature on this LSR, as this may result in potential scaling issues with regard to LSR performance and network load. Note also that notifications MUST be generated in accordance with the mplsFrrNotificationsMaxRate.')
mplsFrrFacilityFinalTunnelRestored = NotificationType((1, 3, 6, 1, 2, 1, 204, 0, 2)).setObjects(("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBNumProtectingTunnelOnIf"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBNumProtectedLspOnIf"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBNumProtectedTunnels"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBProtectingTunnelStatus"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBProtectingTunnelResvBw"))
if mibBuilder.loadTexts: mplsFrrFacilityFinalTunnelRestored.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityFinalTunnelRestored.setDescription('This notification is generated when the final tunnel that is being protected by a backup tunnel as specified in the mplsFrrConstraintsTable is restored to normal operation. This notification should not be generated for each restored tunnel, as this may result in potential scaling issues with regard to LSR performance and network load. Note also that notifications MUST be generated in accordance with the mplsFrrNotificationsMaxRate.')
mplsFrrFacilityCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 204, 2, 1))
mplsFrrFacilityGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 204, 2, 2))
mplsFrrFacilityModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 204, 2, 1, 1)).setObjects(("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralScalarGroup"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralTunnelARHopGroup"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsGroup"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityScalarGroup"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBGroup"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrFacilityModuleFullCompliance = mplsFrrFacilityModuleFullCompliance.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityModuleFullCompliance.setDescription('Compliance statements for SNMP engines that support the MPLS-FRR-FACILITY-STD-MIB module.')
mplsFrrFacilityModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 204, 2, 1, 2)).setObjects(("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralScalarGroup"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralTunnelARHopGroup"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsGroup"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityScalarGroup"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBGroup"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrFacilityModuleReadOnlyCompliance = mplsFrrFacilityModuleReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityModuleReadOnlyCompliance.setDescription('Compliance statements for SNMP engines that support the MPLS-FRR-FACILITY-STD-MIB module.')
mplsFrrFacilityScalarGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 204, 2, 2, 1)).setObjects(("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrConfiguredInterfaces"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrActiveInterfaces"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrConfiguredBypassTunnels"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrActiveBypassTunnels"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityNotificationsEnabled"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityNotificationsMaxRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrFacilityScalarGroup = mplsFrrFacilityScalarGroup.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityScalarGroup.setDescription('Objects that are required to represent the FRR Facility Route Database information.')
mplsFrrFacilityDBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 204, 2, 2, 2)).setObjects(("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBNumProtectingTunnelOnIf"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBNumProtectedLspOnIf"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBNumProtectedTunnels"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBProtectingTunnelStatus"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityDBProtectingTunnelResvBw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrFacilityDBGroup = mplsFrrFacilityDBGroup.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityDBGroup.setDescription('Objects that are required to represent the FRR Facility Route Database information.')
mplsFrrFacilityNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 204, 2, 2, 3)).setObjects(("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityInitialBackupTunnelInvoked"), ("MPLS-FRR-FACILITY-STD-MIB", "mplsFrrFacilityFinalTunnelRestored"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrFacilityNotificationsGroup = mplsFrrFacilityNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: mplsFrrFacilityNotificationsGroup.setDescription('Objects that are required to represent FRR notifications.')
mibBuilder.exportSymbols("MPLS-FRR-FACILITY-STD-MIB", PYSNMP_MODULE_ID=mplsFrrFacilityMIB, mplsFrrFacilityNotificationsEnabled=mplsFrrFacilityNotificationsEnabled, mplsFrrConfiguredBypassTunnels=mplsFrrConfiguredBypassTunnels, mplsFrrFacilityObjects=mplsFrrFacilityObjects, mplsFrrFacilityDBNumProtectedLspOnIf=mplsFrrFacilityDBNumProtectedLspOnIf, mplsFrrFacilityModuleReadOnlyCompliance=mplsFrrFacilityModuleReadOnlyCompliance, mplsFrrFacilityNotificationsGroup=mplsFrrFacilityNotificationsGroup, mplsFrrFacilityDBNumProtectingTunnelOnIf=mplsFrrFacilityDBNumProtectingTunnelOnIf, mplsFrrFacilityMIB=mplsFrrFacilityMIB, mplsFrrFacilityInitialBackupTunnelInvoked=mplsFrrFacilityInitialBackupTunnelInvoked, mplsFrrFacilityConformance=mplsFrrFacilityConformance, mplsFrrFacilityNotificationsMaxRate=mplsFrrFacilityNotificationsMaxRate, mplsFrrFacilityFinalTunnelRestored=mplsFrrFacilityFinalTunnelRestored, mplsFrrFacilityModuleFullCompliance=mplsFrrFacilityModuleFullCompliance, mplsFrrActiveBypassTunnels=mplsFrrActiveBypassTunnels, mplsFrrFacilityBackupTunnelIndex=mplsFrrFacilityBackupTunnelIndex, mplsFrrFacilityBackupTunnelIngressLSRId=mplsFrrFacilityBackupTunnelIngressLSRId, mplsFrrFacilityBackupTunnelInstance=mplsFrrFacilityBackupTunnelInstance, mplsFrrFacilityDBProtectingTunnelStatus=mplsFrrFacilityDBProtectingTunnelStatus, mplsFrrFacilityDBProtectingTunnelResvBw=mplsFrrFacilityDBProtectingTunnelResvBw, mplsFrrFacilityNotifications=mplsFrrFacilityNotifications, mplsFrrFacilityGroups=mplsFrrFacilityGroups, mplsFrrFacilityDBTable=mplsFrrFacilityDBTable, mplsFrrFacilityDBEntry=mplsFrrFacilityDBEntry, mplsFrrFacilityBackupTunnelEgressLSRId=mplsFrrFacilityBackupTunnelEgressLSRId, mplsFrrActiveInterfaces=mplsFrrActiveInterfaces, mplsFrrFacilityDBNumProtectedTunnels=mplsFrrFacilityDBNumProtectedTunnels, mplsFrrFacilityProtectingTunnelIndex=mplsFrrFacilityProtectingTunnelIndex, mplsFrrFacilityProtectedIfIndex=mplsFrrFacilityProtectedIfIndex, mplsFrrFacilityCompliances=mplsFrrFacilityCompliances, mplsFrrFacilityDBGroup=mplsFrrFacilityDBGroup, mplsFrrFacilityScalarGroup=mplsFrrFacilityScalarGroup, mplsFrrConfiguredInterfaces=mplsFrrConfiguredInterfaces)
