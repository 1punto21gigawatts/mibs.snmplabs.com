#
# PySNMP MIB module SONUS-DS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONUS-DS3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, IpAddress, Gauge32, TimeTicks, iso, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, Integer32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "IpAddress", "Gauge32", "TimeTicks", "iso", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "Integer32", "ModuleIdentity", "NotificationType")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
sonusEventLevel, sonusSlotIndex, sonusEventDescription, sonusShelfIndex, sonusDs3Index, sonusPortIndex, sonusEventClass = mibBuilder.importSymbols("SONUS-COMMON-MIB", "sonusEventLevel", "sonusSlotIndex", "sonusEventDescription", "sonusShelfIndex", "sonusDs3Index", "sonusPortIndex", "sonusEventClass")
sonusCircuitMIBs, = mibBuilder.importSymbols("SONUS-SMI", "sonusCircuitMIBs")
SonusAdminAction, SonusServiceState, SonusAdminState, SonusName = mibBuilder.importSymbols("SONUS-TC", "SonusAdminAction", "SonusServiceState", "SonusAdminState", "SonusName")
sonusDsx3MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2))
if mibBuilder.loadTexts: sonusDsx3MIB.setLastUpdated('200102030000Z')
if mibBuilder.loadTexts: sonusDsx3MIB.setOrganization('Sonus Networks, Inc.')
if mibBuilder.loadTexts: sonusDsx3MIB.setContactInfo(' Customer Support Sonus Networks, Inc, 5 Carlisle Road Westford, MA 01886 USA Tel: 978-692-8999 Fax: 978-392-9118 E-mail: cs.snmp@sonusnet.com')
if mibBuilder.loadTexts: sonusDsx3MIB.setDescription('The MIB Module DS3 management.')
sonusDsx3MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1))
sonusDsx3Admn = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1))
sonusDsx3AdmnNextIndex = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 1))
sonusDsx3AdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2), )
if mibBuilder.loadTexts: sonusDsx3AdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnTable.setDescription('Table of Sonus Enterprise Configurations for all DS3s')
sonusDsx3AdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2, 1), ).setIndexNames((0, "SONUS-DS3-MIB", "sonusDsx3AdmnShelfIndex"), (0, "SONUS-DS3-MIB", "sonusDsx3AdmnSlotIndex"), (0, "SONUS-DS3-MIB", "sonusDsx3AdmnPortIndex"), (0, "SONUS-DS3-MIB", "sonusDsx3AdmnDs3Index"))
if mibBuilder.loadTexts: sonusDsx3AdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnEntry.setDescription('Entry in Table consisting of the all the Sonus Enterprise DS3 Configurations')
sonusDsx3AdmnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx3AdmnRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnRowStatus.setDescription('DS3, Needed for SNMP')
sonusDsx3AdmnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx3AdmnName.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnName.setDescription('Name of this DS3')
sonusDsx3AdmnShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3AdmnShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnShelfIndex.setDescription('Shelf index for this table')
sonusDsx3AdmnSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3AdmnSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnSlotIndex.setDescription('Slot index for this table')
sonusDsx3AdmnPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3AdmnPortIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnPortIndex.setDescription('Port index for this table')
sonusDsx3AdmnDs3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3AdmnDs3Index.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnDs3Index.setDescription('Ds3 Index into this table')
sonusDsx3AdmnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3AdmnIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnIfIndex.setDescription('Ds3 If Index. Same as the If index of the standard table')
sonusDsx3AdmnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2, 1, 8), SonusAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx3AdmnState.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnState.setDescription('State of DS3, Enabled/Disabled')
sonusDsx3AdmnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx3AdmnTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnTimeout.setDescription('Max time in minutes before dryup takes place')
sonusDsx3AdmnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2, 1, 10), SonusServiceState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx3AdmnMode.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnMode.setDescription('DS3 is in service or out of service.')
sonusDsx3AdmnAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2, 1, 11), SonusAdminAction().clone('dryUp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx3AdmnAction.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnAction.setDescription('Force out of service or wait for dryup')
sonusDsx3AdmnAvailDs1s = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2, 1, 12), Bits().clone(namedValues=NamedValues(("ds1x1", 0), ("ds1x2", 1), ("ds1x3", 2), ("ds1x4", 3), ("ds1x5", 4), ("ds1x6", 5), ("ds1x7", 6), ("ds1x8", 7), ("ds1x9", 8), ("ds1x10", 9), ("ds1x11", 10), ("ds1x12", 11), ("ds1x13", 12), ("ds1x14", 13), ("ds1x15", 14), ("ds1x16", 15), ("ds1x17", 16), ("ds1x18", 17), ("ds1x19", 18), ("ds1x20", 19), ("ds1x21", 20), ("ds1x22", 21), ("ds1x23", 22), ("ds1x24", 23), ("ds1x25", 24), ("ds1x26", 25), ("ds1x27", 26), ("ds1x28", 27)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx3AdmnAvailDs1s.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnAvailDs1s.setDescription('Bitstring map of Ds1s that are available on this DS3.')
sonusDsx3AdmnDs1ModeOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2, 1, 13), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx3AdmnDs1ModeOverride.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnDs1ModeOverride.setDescription("This flag controls whether the mode and state of the DS1's carried in the DS3 are modified when the mode and state of the DS3 is modified. If this flag is set to Enabled, the DS1 state and mode are not changed when the DS3 mode and state are changed.")
sonusDsx3AdmnInitCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2, 1, 14), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx3AdmnInitCounters.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnInitCounters.setDescription('Used to initialize all counters. Once enabled clears all T3 counters.')
sonusDsx3AdmnCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 1, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx3AdmnCircuitId.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdmnCircuitId.setDescription('The Circuit Id.')
sonusDsx3StatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2), )
if mibBuilder.loadTexts: sonusDsx3StatTable.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatTable.setDescription('Table of Sonus Enterprise status for all DS3s')
sonusDsx3StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1), ).setIndexNames((0, "SONUS-DS3-MIB", "sonusDsx3StatShelfIndex"), (0, "SONUS-DS3-MIB", "sonusDsx3StatSlotIndex"), (0, "SONUS-DS3-MIB", "sonusDsx3StatPortIndex"), (0, "SONUS-DS3-MIB", "sonusDsx3StatDs3Index"))
if mibBuilder.loadTexts: sonusDsx3StatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatEntry.setDescription('Entry in Table consisting of the all the Sonus Enterprise DS3 Status')
sonusDsx3StatShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3StatShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatShelfIndex.setDescription('Shelf index for this table')
sonusDsx3StatSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3StatSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatSlotIndex.setDescription('Slot index for this table')
sonusDsx3StatPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3StatPortIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatPortIndex.setDescription('Port index for this table')
sonusDsx3StatDs3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3StatDs3Index.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatDs3Index.setDescription('Ds3 Index into this table')
sonusDsx3StatValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3StatValidIntervals.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatValidIntervals.setDescription('Number of intervals worth of Performance Data that is valid')
sonusDsx3StatDs3LCV = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3StatDs3LCV.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatDs3LCV.setDescription('Total number of line code violations')
sonusDsx3StatDs3FERR = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3StatDs3FERR.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatDs3FERR.setDescription('Total number of framing errors')
sonusDsx3StatDs3EXZS = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3StatDs3EXZS.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatDs3EXZS.setDescription('Total number of Excessive zeroes violations')
sonusDsx3StatDs3PERR = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3StatDs3PERR.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatDs3PERR.setDescription('Total number of parity errors')
sonusDsx3StatDs3CPERR = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3StatDs3CPERR.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatDs3CPERR.setDescription('Total number of C-Bit parity errors')
sonusDsx3StatDs3FEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3StatDs3FEBE.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatDs3FEBE.setDescription('Total number of FEBE errors')
sonusDsx3StatDs3AIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3StatDs3AIS.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatDs3AIS.setDescription('Total number of AIS errors')
sonusDsx3StatDs3LOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3StatDs3LOS.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatDs3LOS.setDescription('Total number of Loss of signal errors')
sonusDsx3StatLineStatStr = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3StatLineStatStr.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatLineStatStr.setDescription('String display for DS3 line status')
sonusDsx3StatLoopbackStr = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3StatLoopbackStr.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatLoopbackStr.setDescription('String display for DS3 loopback status')
sonusDsx3StatOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("dryingUp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx3StatOperStatus.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3StatOperStatus.setDescription('The actual status of the DS3 interface. Interface is Up if it is administratively in service and there are no line failures or hardware failures. Interface is Down if it is administratively in service and there are line failures or hardware failures, or if it is administratively out of service. Interface is DryingUp if it is administratively out of service and is drying up (no new calls, still carrying in-progress calls).')
sonusDsx3MIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 2))
sonusDsx3MIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 2, 0))
sonusDsx3MIBNotificationsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 2, 1))
sonusDs3OutOfServiceReason = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("maintenance", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs3OutOfServiceReason.setStatus('current')
if mibBuilder.loadTexts: sonusDs3OutOfServiceReason.setDescription('The reason for DS3 going out of service')
sonusDs3OutOfServiceType = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("admin", 1), ("hwFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs3OutOfServiceType.setStatus('current')
if mibBuilder.loadTexts: sonusDs3OutOfServiceType.setDescription('The type of operation which caused DS3 to go out of service')
sonusDs3ThresholdType = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("currentLineCodeViolation", 1), ("currentPbitParity", 2), ("currentCbitParity", 3), ("currentSeverelyErroredFramingSecs", 4), ("currentLineErrorSeconds", 5), ("currentPbitParityErroredSeconds", 6), ("currentCbitParityErroredSeconds", 7), ("currentPbitSeverelyErroredSeconds", 8), ("currentLineSeverelyErroredSeconds", 9), ("currentUnavailableSeconds", 10), ("totalLineCodeViolation", 11), ("totalPbitParity", 12), ("totalCbitParity", 13), ("totalSeverelyErroredFramingSecs", 14), ("totalLineErrorSeconds", 15), ("totalPbitParityErroredSeconds", 16), ("totalCbitParityErroredSeconds", 17), ("totalPbitSeverelyErroredSeconds", 18), ("totalLineSeverelyErroredSeconds", 19), ("totalUnavailableSeconds", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs3ThresholdType.setStatus('current')
if mibBuilder.loadTexts: sonusDs3ThresholdType.setDescription('Type of threshold that was crossed which caused a threshold crossing trap')
sonusDs3LineState = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("green", 1), ("red", 2), ("rai", 3), ("ais", 4), ("hwfailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs3LineState.setStatus('current')
if mibBuilder.loadTexts: sonusDs3LineState.setDescription('The type of Alarm or failure which caused DS3 to go out of service')
sonusDs3AdmnState = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("deleted", 3), ("inservice", 4), ("dryingUp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs3AdmnState.setStatus('current')
if mibBuilder.loadTexts: sonusDs3AdmnState.setDescription('The administrative state of the DS3.')
sonusDsx3AdminChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 2, 0, 1)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-COMMON-MIB", "sonusDs3Index"), ("SONUS-DS3-MIB", "sonusDs3AdmnState"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusDsx3AdminChangeNotification.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3AdminChangeNotification.setDescription('A sonusDsx3AdminChangeNotification trap indicates the DS3 administration changes.')
sonusDsx3OutOfServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 2, 0, 2)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-COMMON-MIB", "sonusDs3Index"), ("SONUS-DS3-MIB", "sonusDs3OutOfServiceReason"), ("SONUS-DS3-MIB", "sonusDs3OutOfServiceType"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusDsx3OutOfServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3OutOfServiceNotification.setDescription('A sonusDsx3OutOfServiceNotification trap indicates that a DS3 went out of service. The reason indicates the reason why and type indicates the type of failure.')
sonusDsx3ThresholdCrossingNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 2, 0, 3)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-COMMON-MIB", "sonusDs3Index"), ("SONUS-DS3-MIB", "sonusDs3ThresholdType"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusDsx3ThresholdCrossingNotification.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3ThresholdCrossingNotification.setDescription('A sonusDsx3ThresholdCrossingNotification trap indicates that a DS3 threshold has been crossed. The type indicates the type of threshold.')
sonusDsx3LineStatusChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 2, 2, 0, 4)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-COMMON-MIB", "sonusDs3Index"), ("SONUS-DS3-MIB", "sonusDs3LineState"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusDsx3LineStatusChangeNotification.setStatus('current')
if mibBuilder.loadTexts: sonusDsx3LineStatusChangeNotification.setDescription('A sonusDsx3LineStatusChangeNotification trap indicates the DS3 state changes. It is used to notify DS3 Alarms states')
mibBuilder.exportSymbols("SONUS-DS3-MIB", sonusDsx3AdmnDs3Index=sonusDsx3AdmnDs3Index, sonusDsx3AdmnSlotIndex=sonusDsx3AdmnSlotIndex, sonusDsx3StatEntry=sonusDsx3StatEntry, sonusDs3OutOfServiceType=sonusDs3OutOfServiceType, sonusDsx3AdmnShelfIndex=sonusDsx3AdmnShelfIndex, sonusDsx3StatDs3LOS=sonusDsx3StatDs3LOS, sonusDsx3AdmnInitCounters=sonusDsx3AdmnInitCounters, sonusDsx3StatOperStatus=sonusDsx3StatOperStatus, sonusDsx3StatDs3AIS=sonusDsx3StatDs3AIS, sonusDsx3StatDs3LCV=sonusDsx3StatDs3LCV, sonusDsx3StatDs3FEBE=sonusDsx3StatDs3FEBE, sonusDsx3StatDs3PERR=sonusDsx3StatDs3PERR, sonusDsx3AdmnState=sonusDsx3AdmnState, sonusDsx3AdmnTable=sonusDsx3AdmnTable, sonusDsx3StatLoopbackStr=sonusDsx3StatLoopbackStr, sonusDsx3MIBNotifications=sonusDsx3MIBNotifications, sonusDsx3AdmnIfIndex=sonusDsx3AdmnIfIndex, sonusDsx3AdmnPortIndex=sonusDsx3AdmnPortIndex, sonusDsx3MIBNotificationsPrefix=sonusDsx3MIBNotificationsPrefix, sonusDsx3OutOfServiceNotification=sonusDsx3OutOfServiceNotification, sonusDsx3StatLineStatStr=sonusDsx3StatLineStatStr, sonusDsx3MIBObjects=sonusDsx3MIBObjects, sonusDsx3AdmnName=sonusDsx3AdmnName, sonusDsx3AdmnAvailDs1s=sonusDsx3AdmnAvailDs1s, sonusDsx3StatTable=sonusDsx3StatTable, sonusDsx3StatDs3Index=sonusDsx3StatDs3Index, sonusDsx3AdmnAction=sonusDsx3AdmnAction, sonusDsx3StatPortIndex=sonusDsx3StatPortIndex, PYSNMP_MODULE_ID=sonusDsx3MIB, sonusDsx3StatValidIntervals=sonusDsx3StatValidIntervals, sonusDsx3AdmnDs1ModeOverride=sonusDsx3AdmnDs1ModeOverride, sonusDs3ThresholdType=sonusDs3ThresholdType, sonusDsx3AdmnTimeout=sonusDsx3AdmnTimeout, sonusDs3OutOfServiceReason=sonusDs3OutOfServiceReason, sonusDsx3LineStatusChangeNotification=sonusDsx3LineStatusChangeNotification, sonusDsx3StatSlotIndex=sonusDsx3StatSlotIndex, sonusDsx3ThresholdCrossingNotification=sonusDsx3ThresholdCrossingNotification, sonusDsx3AdmnRowStatus=sonusDsx3AdmnRowStatus, sonusDsx3AdmnCircuitId=sonusDsx3AdmnCircuitId, sonusDsx3AdmnEntry=sonusDsx3AdmnEntry, sonusDsx3StatDs3FERR=sonusDsx3StatDs3FERR, sonusDs3LineState=sonusDs3LineState, sonusDsx3MIB=sonusDsx3MIB, sonusDsx3AdminChangeNotification=sonusDsx3AdminChangeNotification, sonusDsx3MIBNotificationsObjects=sonusDsx3MIBNotificationsObjects, sonusDsx3AdmnNextIndex=sonusDsx3AdmnNextIndex, sonusDsx3StatDs3CPERR=sonusDsx3StatDs3CPERR, sonusDsx3StatShelfIndex=sonusDsx3StatShelfIndex, sonusDs3AdmnState=sonusDs3AdmnState, sonusDsx3AdmnMode=sonusDsx3AdmnMode, sonusDsx3StatDs3EXZS=sonusDsx3StatDs3EXZS, sonusDsx3Admn=sonusDsx3Admn)
