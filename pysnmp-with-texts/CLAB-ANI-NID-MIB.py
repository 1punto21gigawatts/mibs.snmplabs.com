#
# PySNMP MIB module CLAB-ANI-NID-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CLAB-ANI-NID-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:24:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
clabCommonMibs, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabCommonMibs")
InetAddressPrefixLength, InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddress", "InetPortNumber", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, Unsigned32, Gauge32, ObjectIdentity, TimeTicks, Bits, MibIdentifier, iso, Integer32, ModuleIdentity, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "Unsigned32", "Gauge32", "ObjectIdentity", "TimeTicks", "Bits", "MibIdentifier", "iso", "Integer32", "ModuleIdentity", "IpAddress", "Counter64")
DateAndTime, RowStatus, DisplayString, MacAddress, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "RowStatus", "DisplayString", "MacAddress", "TextualConvention", "TruthValue")
clabAniNidMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 4, 8))
clabAniNidMib.setRevisions(('2016-11-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: clabAniNidMib.setRevisionsDescriptions(('Initial Version released at same time as CL-SP-NID-I01.',))
if mibBuilder.loadTexts: clabAniNidMib.setLastUpdated('201611290000Z')
if mibBuilder.loadTexts: clabAniNidMib.setOrganization('Cable Television Laboratories, Inc.')
if mibBuilder.loadTexts: clabAniNidMib.setContactInfo('Broadband Network Services Cable Television Laboratories, Inc. 858 Coal Creek Circle, Louisville, CO 80027, USA Phone: +1 303-661-9100 Email: mibs@cablelabs.com')
if mibBuilder.loadTexts: clabAniNidMib.setDescription('This MIB module contains the management for Network Interface Devices (NIDs). Copyright 2016 Cable Television Laboratories, Inc. All rights reserved.')
clabAniNidNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 8, 0))
clabAniNidMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1))
clabAniNidMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 8, 99))
clabAniNidCfgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 1))
clabAniNidStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 2))
clabAniNidCfgID = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabAniNidCfgID.setStatus('current')
if mibBuilder.loadTexts: clabAniNidCfgID.setDescription('Human Readable Identifier - Assigned by install technician.')
clabAniNidCfgPtpMcastMac = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwardable", 1), ("nonforwardable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabAniNidCfgPtpMcastMac.setStatus('current')
if mibBuilder.loadTexts: clabAniNidCfgPtpMcastMac.setDescription('For transmitting PTP packets, either the forwardable multicast MAC address (01-1B-19-00-00-00) or the non-forwardable multicast MAC address (01-80-C2-00-00-0E) must be used as the destination MAC address. The MAC address in use is selected on a per-port basis through the configuration. However, the non-forwardable multicast MAC address (01-80-C2-00-00-0E) will be used if no destination MAC is configured.')
clabAniNidCfgTelnetEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabAniNidCfgTelnetEnabled.setStatus('current')
if mibBuilder.loadTexts: clabAniNidCfgTelnetEnabled.setDescription('This object allows enabling or disabling Telnet access on the NID.')
clabAniNidCfgTftpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabAniNidCfgTftpEnabled.setStatus('current')
if mibBuilder.loadTexts: clabAniNidCfgTftpEnabled.setDescription('This object allows enabling or disabling TFTP access to/from the NID. The default is false (disabled)')
clabAniNidCfgClientAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("authenticated", 1), ("authenticationFailed", 2), ("noAvailableServers", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabAniNidCfgClientAuthStatus.setStatus('current')
if mibBuilder.loadTexts: clabAniNidCfgClientAuthStatus.setDescription('Current authentication status of the NID authentication client with respect to the AAA server.')
clabAniNidCfgAuthServerServiceType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("radius", 1), ("tacacs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabAniNidCfgAuthServerServiceType.setStatus('current')
if mibBuilder.loadTexts: clabAniNidCfgAuthServerServiceType.setDescription('Authentication protocol. Only one protocol may be active on a NID.')
clabAniNidCfgPrimaryServerIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 1, 7), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabAniNidCfgPrimaryServerIpAddressType.setStatus('current')
if mibBuilder.loadTexts: clabAniNidCfgPrimaryServerIpAddressType.setDescription('AAA primary server IP Address Type')
clabAniNidCfgPrimaryServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 1, 8), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabAniNidCfgPrimaryServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: clabAniNidCfgPrimaryServerIpAddress.setDescription('AAA primary server IP Address')
clabAniNidCfgPrimaryServerPort = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 1, 9), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabAniNidCfgPrimaryServerPort.setStatus('current')
if mibBuilder.loadTexts: clabAniNidCfgPrimaryServerPort.setDescription('AAA primary port number')
clabAniNidCfgSecondaryServerIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 1, 10), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabAniNidCfgSecondaryServerIpAddressType.setStatus('current')
if mibBuilder.loadTexts: clabAniNidCfgSecondaryServerIpAddressType.setDescription('AAA Secondary server IP Address Type')
clabAniNidCfgSecondaryServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 1, 11), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabAniNidCfgSecondaryServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: clabAniNidCfgSecondaryServerIpAddress.setDescription('AAA Secondary server IP Address')
clabAniNidCfgSecondaryServerPort = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 1, 12), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabAniNidCfgSecondaryServerPort.setStatus('current')
if mibBuilder.loadTexts: clabAniNidCfgSecondaryServerPort.setDescription('AAA secondary port number')
clabAniNidStatusAuthHistoryMaxTableSize = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 2, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabAniNidStatusAuthHistoryMaxTableSize.setStatus('current')
if mibBuilder.loadTexts: clabAniNidStatusAuthHistoryMaxTableSize.setDescription('Sets the maximum number of rows. If a new row is to be added (i.e., a new session attempt)and the addition would cause the table to exceed the maximam table size, the oldest entry must be first deleted then the new authentication attempt row is appended to the table (i.e., added as the last row).')
clabAniNidStatusAuthHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 2, 2), )
if mibBuilder.loadTexts: clabAniNidStatusAuthHistoryTable.setStatus('current')
if mibBuilder.loadTexts: clabAniNidStatusAuthHistoryTable.setDescription('This table reports each authentication attempt and result. Radius and TACACS servers available to authentication clients.')
clabAniNidStatusAuthHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 2, 2, 1), ).setIndexNames((0, "CLAB-ANI-NID-MIB", "clabAniNidStatusAuthHistoryInitiationTime"))
if mibBuilder.loadTexts: clabAniNidStatusAuthHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: clabAniNidStatusAuthHistoryEntry.setDescription('One entry per authentication attempt.')
clabAniNidStatusAuthHistoryInitiationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 2, 2, 1, 1), TimeTicks())
if mibBuilder.loadTexts: clabAniNidStatusAuthHistoryInitiationTime.setStatus('current')
if mibBuilder.loadTexts: clabAniNidStatusAuthHistoryInitiationTime.setDescription('Index value of the clabAniStatusNidHistoryServerTable.')
clabAniNidStatusAuthHistoryResults = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("success", 1), ("failedRc1", 2), ("failedRc2", 3), ("failedRc3", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabAniNidStatusAuthHistoryResults.setStatus('current')
if mibBuilder.loadTexts: clabAniNidStatusAuthHistoryResults.setDescription('Attempted authentication outcome. Failure reason codes follow: failed_rc1(2) - Unknown failed_rc2(3) - Server Not Available failed_rc3(4) - Unknown User .')
clabAniNidStatusAuthHistoryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabAniNidStatusAuthHistoryServer.setStatus('current')
if mibBuilder.loadTexts: clabAniNidStatusAuthHistoryServer.setDescription('Identifies whether primary or secondary server access was attempted. If the primary server rejected the session or was not available, the NID should attempt accessing the secondary server if defined.')
clabAniNidStatusReportCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 2, 3), )
if mibBuilder.loadTexts: clabAniNidStatusReportCircuitTable.setStatus('current')
if mibBuilder.loadTexts: clabAniNidStatusReportCircuitTable.setDescription('This table reports each circuit associated with this NID. This table and its contents are stored in non-volatile memory.')
clabAniNidStatusReportCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 2, 3, 1), ).setIndexNames((0, "CLAB-ANI-NID-MIB", "clabAniNidStatusReportCircuitIndex"))
if mibBuilder.loadTexts: clabAniNidStatusReportCircuitEntry.setStatus('current')
if mibBuilder.loadTexts: clabAniNidStatusReportCircuitEntry.setDescription('One entry per circuit.')
clabAniNidStatusReportCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabAniNidStatusReportCircuitIndex.setStatus('current')
if mibBuilder.loadTexts: clabAniNidStatusReportCircuitIndex.setDescription('Index value of the clabAniNidStatusCircuitReportTable.')
clabAniNidStatusReportCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 2, 3, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabAniNidStatusReportCircuitIdentifier.setStatus('current')
if mibBuilder.loadTexts: clabAniNidStatusReportCircuitIdentifier.setDescription('Service or circuit identifier')
clabAniNidStatusReportCircuitTargetIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 8, 1, 2, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabAniNidStatusReportCircuitTargetIdentifier.setStatus('current')
if mibBuilder.loadTexts: clabAniNidStatusReportCircuitTargetIdentifier.setDescription('Target identifier (TID)')
clabAniNidMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 8, 99, 1))
clabAniNidMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 8, 99, 2))
clabAniNidCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 4, 8, 99, 1, 1)).setObjects(("CLAB-ANI-NID-MIB", "clabAniNidGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clabAniNidCompliance = clabAniNidCompliance.setStatus('current')
if mibBuilder.loadTexts: clabAniNidCompliance.setDescription('The compliance statement for the NID device.')
clabAniNidGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 4, 8, 99, 2, 1)).setObjects(("CLAB-ANI-NID-MIB", "clabAniNidCfgID"), ("CLAB-ANI-NID-MIB", "clabAniNidCfgPtpMcastMac"), ("CLAB-ANI-NID-MIB", "clabAniNidCfgTelnetEnabled"), ("CLAB-ANI-NID-MIB", "clabAniNidCfgTftpEnabled"), ("CLAB-ANI-NID-MIB", "clabAniNidCfgClientAuthStatus"), ("CLAB-ANI-NID-MIB", "clabAniNidCfgAuthServerServiceType"), ("CLAB-ANI-NID-MIB", "clabAniNidCfgPrimaryServerIpAddressType"), ("CLAB-ANI-NID-MIB", "clabAniNidCfgPrimaryServerIpAddress"), ("CLAB-ANI-NID-MIB", "clabAniNidCfgPrimaryServerPort"), ("CLAB-ANI-NID-MIB", "clabAniNidCfgSecondaryServerIpAddressType"), ("CLAB-ANI-NID-MIB", "clabAniNidCfgSecondaryServerIpAddress"), ("CLAB-ANI-NID-MIB", "clabAniNidCfgSecondaryServerPort"), ("CLAB-ANI-NID-MIB", "clabAniNidStatusAuthHistoryMaxTableSize"), ("CLAB-ANI-NID-MIB", "clabAniNidStatusAuthHistoryResults"), ("CLAB-ANI-NID-MIB", "clabAniNidStatusAuthHistoryServer"), ("CLAB-ANI-NID-MIB", "clabAniNidStatusReportCircuitIndex"), ("CLAB-ANI-NID-MIB", "clabAniNidStatusReportCircuitIdentifier"), ("CLAB-ANI-NID-MIB", "clabAniNidStatusReportCircuitTargetIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clabAniNidGroup = clabAniNidGroup.setStatus('current')
if mibBuilder.loadTexts: clabAniNidGroup.setDescription('Objects implemented in the clabAniNidGroup.')
mibBuilder.exportSymbols("CLAB-ANI-NID-MIB", clabAniNidCfgSecondaryServerPort=clabAniNidCfgSecondaryServerPort, clabAniNidCompliance=clabAniNidCompliance, clabAniNidStatusReportCircuitEntry=clabAniNidStatusReportCircuitEntry, clabAniNidMibConformance=clabAniNidMibConformance, clabAniNidStatusAuthHistoryTable=clabAniNidStatusAuthHistoryTable, clabAniNidCfgSecondaryServerIpAddressType=clabAniNidCfgSecondaryServerIpAddressType, clabAniNidMibObjects=clabAniNidMibObjects, clabAniNidCfgClientAuthStatus=clabAniNidCfgClientAuthStatus, clabAniNidStatusObjects=clabAniNidStatusObjects, clabAniNidCfgAuthServerServiceType=clabAniNidCfgAuthServerServiceType, clabAniNidStatusAuthHistoryInitiationTime=clabAniNidStatusAuthHistoryInitiationTime, clabAniNidStatusAuthHistoryMaxTableSize=clabAniNidStatusAuthHistoryMaxTableSize, clabAniNidNotifications=clabAniNidNotifications, clabAniNidCfgSecondaryServerIpAddress=clabAniNidCfgSecondaryServerIpAddress, clabAniNidCfgPrimaryServerIpAddressType=clabAniNidCfgPrimaryServerIpAddressType, clabAniNidMib=clabAniNidMib, clabAniNidStatusAuthHistoryResults=clabAniNidStatusAuthHistoryResults, clabAniNidMibCompliances=clabAniNidMibCompliances, clabAniNidStatusAuthHistoryEntry=clabAniNidStatusAuthHistoryEntry, clabAniNidStatusReportCircuitTable=clabAniNidStatusReportCircuitTable, PYSNMP_MODULE_ID=clabAniNidMib, clabAniNidCfgPrimaryServerIpAddress=clabAniNidCfgPrimaryServerIpAddress, clabAniNidCfgObjects=clabAniNidCfgObjects, clabAniNidCfgTftpEnabled=clabAniNidCfgTftpEnabled, clabAniNidGroup=clabAniNidGroup, clabAniNidCfgPtpMcastMac=clabAniNidCfgPtpMcastMac, clabAniNidStatusAuthHistoryServer=clabAniNidStatusAuthHistoryServer, clabAniNidStatusReportCircuitIndex=clabAniNidStatusReportCircuitIndex, clabAniNidStatusReportCircuitIdentifier=clabAniNidStatusReportCircuitIdentifier, clabAniNidCfgPrimaryServerPort=clabAniNidCfgPrimaryServerPort, clabAniNidStatusReportCircuitTargetIdentifier=clabAniNidStatusReportCircuitTargetIdentifier, clabAniNidCfgTelnetEnabled=clabAniNidCfgTelnetEnabled, clabAniNidMibGroups=clabAniNidMibGroups, clabAniNidCfgID=clabAniNidCfgID)
