#
# PySNMP MIB module HP-ICF-DHCPv6-SNOOP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-DHCPv6-SNOOP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:33:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
VidList, = mibBuilder.importSymbols("HP-ICF-TC", "VidList")
hpicfSaviObjectsPortEntry, hpicfSaviObjectsBindingEntry = mibBuilder.importSymbols("HPICF-SAVI-MIB", "hpicfSaviObjectsPortEntry", "hpicfSaviObjectsBindingEntry")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, iso, Bits, NotificationType, TimeTicks, IpAddress, Counter32, Gauge32, ObjectIdentity, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "iso", "Bits", "NotificationType", "TimeTicks", "IpAddress", "Counter32", "Gauge32", "ObjectIdentity", "Counter64", "MibIdentifier")
TextualConvention, MacAddress, RowStatus, TruthValue, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "RowStatus", "TruthValue", "DateAndTime", "DisplayString")
hpicfDSnoopV6 = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102))
hpicfDSnoopV6.setRevisions(('2017-11-08 00:00', '2015-01-28 00:00', '2013-10-06 00:00', '2013-04-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfDSnoopV6.setRevisionsDescriptions(('Importing hpicfSaviObjectsBindingEntry and hpicfSaviObjectsPortEntry from HPICF-SAVI-MIB and augmenting them instead of saviObjectsBindingEntry and saviObjectsPortEntry. Updated hpicfDSnoopV6AuthorizedServerStatus mib to specify not supported row status states.', 'Added hpicfDsnoopV6DatabaseFTPort, hpicfDSnoopV6DatabaseSFTPUsername, hpicfDSnoopV6DatabaseSFTPPassword, hpicfDSnoopV6DatabaseValidateSFTPServer', 'Changed syntax type for hpicfDSnoopV6VlanEnable from OctetString to Vidlist.', 'Initial Version.',))
if mibBuilder.loadTexts: hpicfDSnoopV6.setLastUpdated('201711080000Z')
if mibBuilder.loadTexts: hpicfDSnoopV6.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfDSnoopV6.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfDSnoopV6.setDescription('This MIB module contains HP proprietary objects for managing DHCPV6 Snooping.')
hpicfDSnoopV6Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 0))
hpicfDSnoopV6Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1))
hpicfDSnoopV6Config = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1))
hpicfDSnoopV6GlobalCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 1))
hpicfDSnoopV6Enable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDSnoopV6Enable.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6Enable.setDescription('This object provides the administrative status of the DHCPv6 Snooping feature. This status must be enabled for DHCPv6 snooping to work.')
hpicfDSnoopV6VlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 1, 2), VidList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDSnoopV6VlanEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6VlanEnable.setDescription('This object contains vid map for vlans on which DHCPV6 Snooping is enabled. A bit that is on (equal to 1) indicates that DHCPV6 snooping is enabled on corresponding vlan .')
hpicfDSnoopV6DatabaseFile = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDSnoopV6DatabaseFile.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6DatabaseFile.setDescription('A location to store the lease database or to retrieve it after a reboot. The location must be given in the form of a Uniform Resource Locator (URL) as defined in RFC 2396. The permissible character sets and the encoding rules defined in RFC 2396 section 2 apply.')
hpicfDSnoopV6DatabaseWriteDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 86400))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDSnoopV6DatabaseWriteDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6DatabaseWriteDelay.setDescription(' The number of seconds to delay writing the DHCPv6 lease database file after a database change. This allows grouping multiple database changes into a single write. The default value is 300 seconds.')
hpicfDSnoopV6DatabaseWriteTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDSnoopV6DatabaseWriteTimeout.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6DatabaseWriteTimeout.setDescription('The number of seconds to wait for the database file transfer to finish. If file transfer is not over within this period, a file transfer failure message is displayed. To continue trying indefinitely, specify a value of 0. The default value is 300 seconds.')
hpicfDSnoopV6OutOfResourcesTrapCtrl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDSnoopV6OutOfResourcesTrapCtrl.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6OutOfResourcesTrapCtrl.setDescription(' This object provides the operational status of DSNOOPv6 out of resource control trap. The default value is enabled. This notification trap is sent when the number of bindings exceed the maximum limit of 8192 bindings. Configuration of this object requires SNMPv3 authentication.')
hpicfDSnoopV6ErrantReplyTrapCtrl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDSnoopV6ErrantReplyTrapCtrl.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6ErrantReplyTrapCtrl.setDescription('This object provides the operational status of DSNOOPv6 errant repy control trap. The default value is enabled. This notification trap is sent when a DHCPv6 reply packet is received on an untrusted port or from an un-authorized server. Configuration of this object requires SNMPv3 authentication.')
hpicfDSnoopV6DatabaseFTPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDSnoopV6DatabaseFTPort.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6DatabaseFTPort.setDescription('A location to store the port value of the FT Server. The default port value will be 69 for TFTP and 22 for SFTP.')
hpicfDSnoopV6DatabaseSFTPUsername = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 1, 9), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDSnoopV6DatabaseSFTPUsername.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6DatabaseSFTPUsername.setDescription('A location to store the Username of the SFTP Server. The default value of username is root.')
hpicfDSnoopV6DatabaseSFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 1, 10), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDSnoopV6DatabaseSFTPPassword.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6DatabaseSFTPPassword.setDescription('A location to store the Password of the SFTP Server.')
hpicfDSnoopV6DatabaseValidateSFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDSnoopV6DatabaseValidateSFTPServer.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6DatabaseValidateSFTPServer.setDescription('This object sets the validate-sftp-server flag. When enabled, the user must login to the SFTP server to verify and accept the public key of the server. When disabled, the public key is accepted automatically.')
hpicfDSnoopV6AuthorizedServerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 2), )
if mibBuilder.loadTexts: hpicfDSnoopV6AuthorizedServerTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6AuthorizedServerTable.setDescription('Table of authorized DHCP server addresses.')
hpicfDSnoopV6AuthorizedServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 2, 1), ).setIndexNames((0, "HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6AuthorizedServerAddrType"), (0, "HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6AuthorizedServerAddress"))
if mibBuilder.loadTexts: hpicfDSnoopV6AuthorizedServerEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6AuthorizedServerEntry.setDescription('A row in the table, containing the address of a single authorized DHCP server.')
hpicfDSnoopV6AuthorizedServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfDSnoopV6AuthorizedServerAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6AuthorizedServerAddrType.setDescription('The IP address type of authorized DHCPv6 server.')
hpicfDSnoopV6AuthorizedServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 2, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hpicfDSnoopV6AuthorizedServerAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6AuthorizedServerAddress.setDescription('The address of a known valid DHCP server. The type of address contained in this object is indicated by hpicfDSnoopV6AuthorizedServerAddrType. To allow a server packet to be forwarded to a client, it must be received on a trusted port from a server address in this table. If this table is empty, all addresses are trusted. Note that this feature compares the source address of the received DHCPv6 server packet against the addresses in this table. Therefore, this table must contain trusted server addresses and trusted DHCPv6 relays that a server packet may be relayed through.')
hpicfDSnoopV6AuthorizedServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDSnoopV6AuthorizedServerStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6AuthorizedServerStatus.setDescription("The status of this DHCP server address entry. Only 'active' entries are used when validating DHCP server packets. Row statuses createAndWait(5), notReady(3) and notInService(2) are not supported.")
hpicfDSnoopV6GlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 2))
hpicfDSnoopV6CSForwards = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6CSForwards.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6CSForwards.setDescription('Number of snooped DHCPv6 packets that were successfully forwarded from untrusted client ports towards trusted DHCPv6 server ports.')
hpicfDSnoopV6CSMACMismatches = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6CSMACMismatches.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6CSMACMismatches.setDescription('Number of snooped DHCPv6 client packets that were discarded due to MAC verification check failure.')
hpicfDSnoopV6CSBadReleases = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6CSBadReleases.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6CSBadReleases.setDescription('Number of snooped DHCPv6 client packets that were discarded because they were RELEASE packets received on a port different from the port that the address was leased to.')
hpicfDSnoopV6CSUntrustedDestPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6CSUntrustedDestPorts.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6CSUntrustedDestPorts.setDescription('Number of snooped DHCPv6 client unicast packets that were discarded because they were destined to untrusted ports.')
hpicfDSnoopV6SCForwards = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6SCForwards.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6SCForwards.setDescription('Number of snooped DHCPv6 packets that were successfully forwarded from trusted DHCPv6 server ports to untrusted client ports.')
hpicfDSnoopV6SCUntrustedPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6SCUntrustedPorts.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6SCUntrustedPorts.setDescription('Number of snooped DHCPv6 server packets that were dropped because they were received on untrusted ports.')
hpicfDSnoopV6SCRelayReplyUntrustedPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6SCRelayReplyUntrustedPorts.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6SCRelayReplyUntrustedPorts.setDescription('Number of relay reply packets that were dropped by the switch because they were received on untrusted ports.')
hpicfDSnoopV6SCUnauthorizedServers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6SCUnauthorizedServers.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6SCUnauthorizedServers.setDescription('Number of snooped DHCPv6 server packets that were discarded because they were received from unauthorized DHCPv6 server')
hpicfDSnoopV6DBFileWriteAttempts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6DBFileWriteAttempts.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6DBFileWriteAttempts.setDescription('Number of attempts that have been made to write the DHCPv6 lease database to a configured file location.')
hpicfDSnoopV6DBFileWriteFailures = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6DBFileWriteFailures.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6DBFileWriteFailures.setDescription('Number of times that an attempt to write the DHCPv6 lease database to a configured file location has failed.')
hpicfDSnoopV6DBFileReadStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notConfigured", 1), ("inProgress", 2), ("succeeded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6DBFileReadStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6DBFileReadStatus.setDescription(' This object indicates whether the DHCPv6 lease database from configured location is loaded successfully after the last reboot.')
hpicfDSnoopV6DBFileWriteStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", 1), ("delaying", 2), ("inProgress", 3), ("succeeded", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6DBFileWriteStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6DBFileWriteStatus.setDescription("This object indicates whether the DHCPv6 lease database is currently synchronized with the the configured file server. 'notConfigured' means that the switch is not configured with a server location. 'delaying' means the switch is waiting for the write delay to expire before writing the current database. 'inProgress' means that a lease database transfer is active. 'succeeded' means that all leases in our database have been written to the server. 'failed' means that the last attempt to write our lease database failed.")
hpicfDSnoopV6DBFileLastWriteTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 2, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6DBFileLastWriteTime.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6DBFileLastWriteTime.setDescription(' Time at which the switch last successfully wrote the lease database to the server. This object contains a value of all zeroes if lease database is not written since the last reboot.')
hpicfDSnoopV6MaxbindPktsDropped = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6MaxbindPktsDropped.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6MaxbindPktsDropped.setDescription('This object provides the total number of DHCPv6 snooping packets dropped by the switch. A switch drops the DHCPv6 snooping packets on a port when the port exceeds maximum binding limit configured on it.')
hpicfDSnoopV6ClearStatsOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 3))
hpicfDSnoopV6ClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDSnoopV6ClearStats.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6ClearStats.setDescription('This object clears the DSNOOPv6 statistics when set to TRUE. A write operation of FALSE leads to a no operation and a get request for this object always returns FALSE.')
hpicfDSnoopV6PortMaxBindingTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 3), )
if mibBuilder.loadTexts: hpicfDSnoopV6PortMaxBindingTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6PortMaxBindingTable.setDescription('This table contains the maximum binding information of port.')
hpicfDSnoopV6PortMaxBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 3, 1), )
hpicfSaviObjectsPortEntry.registerAugmentions(("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6PortMaxBindingEntry"))
hpicfDSnoopV6PortMaxBindingEntry.setIndexNames(*hpicfSaviObjectsPortEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfDSnoopV6PortMaxBindingEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6PortMaxBindingEntry.setDescription('The maximum number of bindings on the Port.')
hpicfDSnoopV6PortStaticBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6PortStaticBinding.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6PortStaticBinding.setDescription('This object indicates the static bindings configured on this port.')
hpicfDSnoopV6PortDynamicBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6PortDynamicBinding.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6PortDynamicBinding.setDescription('This object indicates the number of dynamic bindings on this port.')
hpicfDSnoopV6StaticBindingTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 4), )
if mibBuilder.loadTexts: hpicfDSnoopV6StaticBindingTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6StaticBindingTable.setDescription('This table contains the VLAN ID for binding entry.')
hpicfDSnoopV6StaticBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 4, 1), )
hpicfSaviObjectsBindingEntry.registerAugmentions(("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6StaticBindingEntry"))
hpicfDSnoopV6StaticBindingEntry.setIndexNames(*hpicfSaviObjectsBindingEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfDSnoopV6StaticBindingEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6StaticBindingEntry.setDescription('Extension of VLAN ID in hpicfSaviObjectsBindingTable.')
hpicfDSnoopV6BindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 4, 1, 1), VlanIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDSnoopV6BindingVlanId.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6BindingVlanId.setDescription('The VLAN on which this client is discovered.')
hpicfDSnoopV6BindingLLAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 4, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDSnoopV6BindingLLAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6BindingLLAddress.setDescription('The VLAN on which this client is discovered.')
hpicfDSnoopV6BindingSecVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 1, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDSnoopV6BindingSecVlan.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6BindingSecVlan.setDescription('The secondary VLAN on which this client is discovered. if binding is learned on primary or normal VLAN, this object will be zero. ')
hpicfDSnoopV6SourceBindingOutOfResources = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 0, 1)).setObjects(("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDsnoopV6SourceBindingPort"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDsnoopV6SourceBindingMacAddress"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDsnoopV6SourceBindingIpAddressType"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDsnoopV6SourceBindingIpAddress"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDsnoopV6SourceBindingVlan"))
if mibBuilder.loadTexts: hpicfDSnoopV6SourceBindingOutOfResources.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6SourceBindingOutOfResources.setDescription("This trap indicates that the number of bindings exceeded the maximum limit of 8192 bindings. This notification trap is controlled by the state of ' hpicfDSnoopV6OutOfResourcesTrapCtrl' object. Implementation of this trap is optional.")
hpicfDsnoopV6SourceBindingOutOfResourcesObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 0, 2))
hpicfDsnoopV6SourceBindingPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 0, 2, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDsnoopV6SourceBindingPort.setStatus('current')
if mibBuilder.loadTexts: hpicfDsnoopV6SourceBindingPort.setDescription('The port of failed binding entry. Maximum binding limit is reached.')
hpicfDsnoopV6SourceBindingMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 0, 2, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDsnoopV6SourceBindingMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDsnoopV6SourceBindingMacAddress.setDescription('The MAC address of failed binding entry. Maximum binding limit is reached.')
hpicfDsnoopV6SourceBindingIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 0, 2, 3), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDsnoopV6SourceBindingIpAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfDsnoopV6SourceBindingIpAddressType.setDescription('The IPv6 address type of failed binding entry. Maximum binding limit is reached.')
hpicfDsnoopV6SourceBindingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 0, 2, 4), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDsnoopV6SourceBindingIpAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDsnoopV6SourceBindingIpAddress.setDescription('The IPv6 address of failed binding entry. Maximum binding limit is reached.')
hpicfDsnoopV6SourceBindingVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 0, 2, 5), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDsnoopV6SourceBindingVlan.setStatus('current')
if mibBuilder.loadTexts: hpicfDsnoopV6SourceBindingVlan.setDescription('The VLAN of failed binding entry. Maximum binding limit is reached.')
hpicfDSnoopV6SourceBindingErrantReply = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 0, 3)).setObjects(("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6SourceBindingNotifyCount"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6SourceBindingErrantSrcMAC"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6SourceBindingErrantSrcIPType"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6SourceBindingErrantSrcIP"))
if mibBuilder.loadTexts: hpicfDSnoopV6SourceBindingErrantReply.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6SourceBindingErrantReply.setDescription("An hpicfDSnoopV6SourceBindingErrantReply notification signifies that the DHCPV6 snooping entity has detected and dropped an errant DHCPv6 reply packet. This notification trap is controlled by the state of 'hpicfDSnoopV6ErrantReplyTrapCtrl' object ")
hpicfDSnoopV6SourceBindingNotifyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 0, 4))
hpicfDSnoopV6SourceBindingNotifyCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 0, 4, 1), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDSnoopV6SourceBindingNotifyCount.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6SourceBindingNotifyCount.setDescription('A count of the DHCPV6 snooping notification sent from the DHCPv6 snooping entity to the SNMP entity. This count may be greater than the count of notifications actually transmitted by the SNMP entity due to rate limiting or configuration.')
hpicfDSnoopV6SourceBindingErrantSrcMAC = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 0, 4, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDSnoopV6SourceBindingErrantSrcMAC.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6SourceBindingErrantSrcMAC.setDescription('The MAC address received in the errant DHCPv6 reply packet.')
hpicfDSnoopV6SourceBindingErrantSrcIPType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 0, 4, 3), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDSnoopV6SourceBindingErrantSrcIPType.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6SourceBindingErrantSrcIPType.setDescription('The type of address reported in hpicfDhcpSnoopSourceBindingErrantSrcIP.')
hpicfDSnoopV6SourceBindingErrantSrcIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 0, 4, 4), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDSnoopV6SourceBindingErrantSrcIP.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6SourceBindingErrantSrcIP.setDescription('The IPv6 address received in the errant DHCPv6 reply packet.')
hpicfDSnoopV6Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 2))
hpicfDSnoopV6Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 2, 1))
hpicfDSnoopV6BaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 2, 1, 1)).setObjects(("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6Enable"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6VlanEnable"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6CSForwards"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6CSBadReleases"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6CSUntrustedDestPorts"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6CSMACMismatches"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6SCForwards"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6SCUnauthorizedServers"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6SCUntrustedPorts"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6SCRelayReplyUntrustedPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDSnoopV6BaseGroup = hpicfDSnoopV6BaseGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6BaseGroup.setDescription('A collection of objects for configuring and monitoring the base DHCPv6 snooping functionality.')
hpicfDSnoopV6ServersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 2, 1, 2)).setObjects(("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6AuthorizedServerStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDSnoopV6ServersGroup = hpicfDSnoopV6ServersGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6ServersGroup.setDescription('A collection of objects for configuring and monitoring DHCP snooping trusted servers.')
hpicfDSnoopV6DbaseFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 2, 1, 3)).setObjects(("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DatabaseFile"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DatabaseWriteDelay"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DatabaseWriteTimeout"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DBFileWriteAttempts"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DBFileWriteFailures"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DBFileReadStatus"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DBFileWriteStatus"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DBFileLastWriteTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDSnoopV6DbaseFileGroup = hpicfDSnoopV6DbaseFileGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDSnoopV6DbaseFileGroup.setDescription('A collection of objects for configuring and monitoring DHCP snooping database file management.')
hpicfDSnoopV6MaxBindingsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 2, 1, 4)).setObjects(("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6MaxbindPktsDropped"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6PortStaticBinding"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6PortDynamicBinding"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDSnoopV6MaxBindingsGroup = hpicfDSnoopV6MaxBindingsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6MaxBindingsGroup.setDescription('A collection of objects for monitoring the binding limits on a port.')
hpicfDSnoopV6StaticBindingsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 2, 1, 5)).setObjects(("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6BindingVlanId"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6BindingLLAddress"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6BindingSecVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDSnoopV6StaticBindingsGroup = hpicfDSnoopV6StaticBindingsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6StaticBindingsGroup.setDescription('A collection of objects used to configure static binding for a VLAN.')
hpicfDSnoopV6ClearStatsOptionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 2, 1, 6)).setObjects(("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6ClearStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDSnoopV6ClearStatsOptionsGroup = hpicfDSnoopV6ClearStatsOptionsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6ClearStatsOptionsGroup.setDescription('A collection of objects used to clear DSNOOPv6 statistics.')
hpicfDSnoopV6TrapObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 2, 1, 7)).setObjects(("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6SourceBindingNotifyCount"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6SourceBindingErrantSrcMAC"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6SourceBindingErrantSrcIPType"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6SourceBindingErrantSrcIP"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDsnoopV6SourceBindingPort"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDsnoopV6SourceBindingMacAddress"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDsnoopV6SourceBindingIpAddressType"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDsnoopV6SourceBindingIpAddress"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDsnoopV6SourceBindingVlan"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6OutOfResourcesTrapCtrl"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6ErrantReplyTrapCtrl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDSnoopV6TrapObjectsGroup = hpicfDSnoopV6TrapObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6TrapObjectsGroup.setDescription('A collection of objects used in the DSNOOPv6 notification.')
hpicfDSnoopV6TrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 2, 1, 8)).setObjects(("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6SourceBindingOutOfResources"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6SourceBindingErrantReply"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDSnoopV6TrapsGroup = hpicfDSnoopV6TrapsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6TrapsGroup.setDescription('A collection of trap objects that provide DSNOOPv6 notifications.')
hpicfDSnoopV6DbaseFileGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 2, 1, 9)).setObjects(("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DatabaseFile"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DatabaseWriteDelay"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DatabaseWriteTimeout"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DBFileWriteAttempts"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DBFileWriteFailures"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DBFileReadStatus"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DBFileWriteStatus"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DBFileLastWriteTime"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DatabaseFTPort"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DatabaseSFTPUsername"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DatabaseSFTPPassword"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DatabaseValidateSFTPServer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDSnoopV6DbaseFileGroup1 = hpicfDSnoopV6DbaseFileGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6DbaseFileGroup1.setDescription('A collection of objects for configuring and monitoring DHCP snooping database file management.')
hpicfDSnoopV6Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 2, 3))
hpicfDSnoopV6Compliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 2, 3, 1)).setObjects(("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6BaseGroup"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6ServersGroup"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DbaseFileGroup"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6MaxBindingsGroup"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6StaticBindingsGroup"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6ClearStatsOptionsGroup"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6TrapObjectsGroup"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6TrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDSnoopV6Compliance2 = hpicfDSnoopV6Compliance2.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDSnoopV6Compliance2.setDescription('The compliance statement for HP Routing switches that support DHCPv6 Snooping.')
hpicfDSnoopV6Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 102, 2, 3, 2)).setObjects(("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6BaseGroup"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6ServersGroup"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6MaxBindingsGroup"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6StaticBindingsGroup"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6ClearStatsOptionsGroup"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6TrapObjectsGroup"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6TrapsGroup"), ("HP-ICF-DHCPv6-SNOOP-MIB", "hpicfDSnoopV6DbaseFileGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDSnoopV6Compliance = hpicfDSnoopV6Compliance.setStatus('current')
if mibBuilder.loadTexts: hpicfDSnoopV6Compliance.setDescription('The compliance statement for HP Routing switches that support DHCPv6 Snooping.')
mibBuilder.exportSymbols("HP-ICF-DHCPv6-SNOOP-MIB", hpicfDSnoopV6SCForwards=hpicfDSnoopV6SCForwards, hpicfDSnoopV6ErrantReplyTrapCtrl=hpicfDSnoopV6ErrantReplyTrapCtrl, hpicfDSnoopV6StaticBindingTable=hpicfDSnoopV6StaticBindingTable, hpicfDSnoopV6Enable=hpicfDSnoopV6Enable, hpicfDSnoopV6DbaseFileGroup=hpicfDSnoopV6DbaseFileGroup, hpicfDSnoopV6AuthorizedServerAddress=hpicfDSnoopV6AuthorizedServerAddress, hpicfDSnoopV6CSMACMismatches=hpicfDSnoopV6CSMACMismatches, hpicfDSnoopV6SCUnauthorizedServers=hpicfDSnoopV6SCUnauthorizedServers, hpicfDSnoopV6SourceBindingErrantSrcMAC=hpicfDSnoopV6SourceBindingErrantSrcMAC, hpicfDSnoopV6Conformance=hpicfDSnoopV6Conformance, hpicfDSnoopV6DatabaseFile=hpicfDSnoopV6DatabaseFile, hpicfDSnoopV6MaxbindPktsDropped=hpicfDSnoopV6MaxbindPktsDropped, hpicfDSnoopV6Compliances=hpicfDSnoopV6Compliances, hpicfDSnoopV6AuthorizedServerTable=hpicfDSnoopV6AuthorizedServerTable, hpicfDSnoopV6SCRelayReplyUntrustedPorts=hpicfDSnoopV6SCRelayReplyUntrustedPorts, hpicfDSnoopV6PortStaticBinding=hpicfDSnoopV6PortStaticBinding, hpicfDSnoopV6SourceBindingErrantSrcIP=hpicfDSnoopV6SourceBindingErrantSrcIP, hpicfDSnoopV6PortMaxBindingEntry=hpicfDSnoopV6PortMaxBindingEntry, hpicfDSnoopV6Groups=hpicfDSnoopV6Groups, hpicfDsnoopV6SourceBindingMacAddress=hpicfDsnoopV6SourceBindingMacAddress, hpicfDsnoopV6SourceBindingPort=hpicfDsnoopV6SourceBindingPort, hpicfDSnoopV6BindingSecVlan=hpicfDSnoopV6BindingSecVlan, hpicfDSnoopV6ClearStatsOptions=hpicfDSnoopV6ClearStatsOptions, hpicfDSnoopV6SourceBindingErrantReply=hpicfDSnoopV6SourceBindingErrantReply, hpicfDSnoopV6PortMaxBindingTable=hpicfDSnoopV6PortMaxBindingTable, hpicfDSnoopV6=hpicfDSnoopV6, hpicfDSnoopV6GlobalCfg=hpicfDSnoopV6GlobalCfg, hpicfDSnoopV6GlobalStats=hpicfDSnoopV6GlobalStats, hpicfDSnoopV6ServersGroup=hpicfDSnoopV6ServersGroup, hpicfDSnoopV6Config=hpicfDSnoopV6Config, hpicfDSnoopV6DatabaseValidateSFTPServer=hpicfDSnoopV6DatabaseValidateSFTPServer, hpicfDSnoopV6DatabaseSFTPPassword=hpicfDSnoopV6DatabaseSFTPPassword, hpicfDSnoopV6DatabaseSFTPUsername=hpicfDSnoopV6DatabaseSFTPUsername, hpicfDSnoopV6StaticBindingEntry=hpicfDSnoopV6StaticBindingEntry, hpicfDSnoopV6SourceBindingNotifyObjects=hpicfDSnoopV6SourceBindingNotifyObjects, hpicfDSnoopV6PortDynamicBinding=hpicfDSnoopV6PortDynamicBinding, hpicfDSnoopV6Objects=hpicfDSnoopV6Objects, hpicfDSnoopV6BaseGroup=hpicfDSnoopV6BaseGroup, hpicfDSnoopV6StaticBindingsGroup=hpicfDSnoopV6StaticBindingsGroup, hpicfDSnoopV6AuthorizedServerEntry=hpicfDSnoopV6AuthorizedServerEntry, hpicfDSnoopV6VlanEnable=hpicfDSnoopV6VlanEnable, hpicfDSnoopV6Notifications=hpicfDSnoopV6Notifications, hpicfDSnoopV6ClearStats=hpicfDSnoopV6ClearStats, hpicfDSnoopV6ClearStatsOptionsGroup=hpicfDSnoopV6ClearStatsOptionsGroup, hpicfDSnoopV6DbaseFileGroup1=hpicfDSnoopV6DbaseFileGroup1, hpicfDSnoopV6SCUntrustedPorts=hpicfDSnoopV6SCUntrustedPorts, hpicfDSnoopV6BindingLLAddress=hpicfDSnoopV6BindingLLAddress, hpicfDSnoopV6TrapObjectsGroup=hpicfDSnoopV6TrapObjectsGroup, hpicfDsnoopV6SourceBindingIpAddress=hpicfDsnoopV6SourceBindingIpAddress, hpicfDSnoopV6Compliance2=hpicfDSnoopV6Compliance2, hpicfDSnoopV6DBFileWriteAttempts=hpicfDSnoopV6DBFileWriteAttempts, hpicfDSnoopV6SourceBindingOutOfResources=hpicfDSnoopV6SourceBindingOutOfResources, hpicfDSnoopV6CSForwards=hpicfDSnoopV6CSForwards, hpicfDSnoopV6MaxBindingsGroup=hpicfDSnoopV6MaxBindingsGroup, hpicfDSnoopV6CSUntrustedDestPorts=hpicfDSnoopV6CSUntrustedDestPorts, hpicfDSnoopV6SourceBindingNotifyCount=hpicfDSnoopV6SourceBindingNotifyCount, hpicfDSnoopV6DBFileWriteStatus=hpicfDSnoopV6DBFileWriteStatus, hpicfDsnoopV6SourceBindingVlan=hpicfDsnoopV6SourceBindingVlan, hpicfDsnoopV6SourceBindingOutOfResourcesObjects=hpicfDsnoopV6SourceBindingOutOfResourcesObjects, hpicfDSnoopV6DatabaseFTPort=hpicfDSnoopV6DatabaseFTPort, hpicfDSnoopV6DBFileLastWriteTime=hpicfDSnoopV6DBFileLastWriteTime, hpicfDSnoopV6AuthorizedServerStatus=hpicfDSnoopV6AuthorizedServerStatus, hpicfDSnoopV6Compliance=hpicfDSnoopV6Compliance, hpicfDSnoopV6DatabaseWriteTimeout=hpicfDSnoopV6DatabaseWriteTimeout, hpicfDSnoopV6AuthorizedServerAddrType=hpicfDSnoopV6AuthorizedServerAddrType, hpicfDSnoopV6DatabaseWriteDelay=hpicfDSnoopV6DatabaseWriteDelay, hpicfDSnoopV6CSBadReleases=hpicfDSnoopV6CSBadReleases, hpicfDSnoopV6DBFileWriteFailures=hpicfDSnoopV6DBFileWriteFailures, PYSNMP_MODULE_ID=hpicfDSnoopV6, hpicfDSnoopV6DBFileReadStatus=hpicfDSnoopV6DBFileReadStatus, hpicfDSnoopV6SourceBindingErrantSrcIPType=hpicfDSnoopV6SourceBindingErrantSrcIPType, hpicfDSnoopV6TrapsGroup=hpicfDSnoopV6TrapsGroup, hpicfDsnoopV6SourceBindingIpAddressType=hpicfDsnoopV6SourceBindingIpAddressType, hpicfDSnoopV6OutOfResourcesTrapCtrl=hpicfDSnoopV6OutOfResourcesTrapCtrl, hpicfDSnoopV6BindingVlanId=hpicfDSnoopV6BindingVlanId)
