#
# PySNMP MIB module HM2-PLATFORM-MULTICAST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-PLATFORM-MULTICAST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:31:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
HmEnabledStatus, hm2PlatformMibs = mibBuilder.importSymbols("HM2-TC-MIB", "HmEnabledStatus", "hm2PlatformMibs")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressPrefixLength")
mgmdHostCacheIfIndex, mgmdHostCacheAddressType, mgmdHostCacheAddress, mgmdHostInterfaceQuerierType, mgmdHostInterfaceIfIndex = mibBuilder.importSymbols("MGMD-STD-MIB", "mgmdHostCacheIfIndex", "mgmdHostCacheAddressType", "mgmdHostCacheAddress", "mgmdHostInterfaceQuerierType", "mgmdHostInterfaceIfIndex")
pimBsrCandidateBSREntry, = mibBuilder.importSymbols("PIM-BSR-MIB", "pimBsrCandidateBSREntry")
PimGroupMappingOriginType, = mibBuilder.importSymbols("PIM-STD-MIB", "PimGroupMappingOriginType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ModuleIdentity, NotificationType, Counter64, TimeTicks, Integer32, Counter32, IpAddress, iso, ObjectIdentity, Bits, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "NotificationType", "Counter64", "TimeTicks", "Integer32", "Counter32", "IpAddress", "iso", "ObjectIdentity", "Bits", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
hm2PlatformMulticast = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4))
hm2PlatformMulticast.setRevisions(('2013-07-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2PlatformMulticast.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2PlatformMulticast.setLastUpdated('201307250000Z')
if mibBuilder.loadTexts: hm2PlatformMulticast.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2PlatformMulticast.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2PlatformMulticast.setDescription('The Hirschmann Private Platform2 MIB for Layer3 Multicast. Copyright (C) 2013. All Rights Reserved.')
hm2AgentMulticastIGMPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 4, 1))
hm2AgentMulticastIGMPAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 4, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentMulticastIGMPAdminMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastIGMPAdminMode.setDescription('This enables or disables IGMP on the system.')
hm2AgentMulticastIGMPProxyOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 4, 1, 249), HmEnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentMulticastIGMPProxyOperStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastIGMPProxyOperStatus.setDescription('The operating status of IGMP proxy on this device.')
hm2AgentMulticastPIMSMConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 4, 3))
hm2AgentMulticastPIMSMAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 4, 3, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMAdminMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMAdminMode.setDescription('This enables or disables PIM Sparse Mode on the system.')
hm2AgentMulticastPIMSMGroupMappingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 4, 3, 249), )
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingTable.setDescription('The (conceptual) table listing BSR-specific information about PIM group mappings learned via C-RP advertisements or created locally using configurations.')
hm2AgentMulticastPIMSMGroupMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 4, 3, 249, 1), ).setIndexNames((0, "HM2-PLATFORM-MULTICAST-MIB", "hm2AgentMulticastPIMSMGroupMappingGrpAddrType"), (0, "HM2-PLATFORM-MULTICAST-MIB", "hm2AgentMulticastPIMSMGroupMappingGrpAddr"))
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingEntry.setDescription('An entry (conceptual row) in the hm2AgentMulticastPIMSMGroupMappingTable.')
hm2AgentMulticastPIMSMGroupMappingGrpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 3, 249, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingGrpAddrType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingGrpAddrType.setDescription('The Inet address type of the IP multicast group prefix.')
hm2AgentMulticastPIMSMGroupMappingGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 3, 249, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingGrpAddr.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingGrpAddr.setDescription('The IP multicast group address that, when combined with hm2AgentMulticastPIMSMGroupMappingGrpPrefixLen, gives the group prefix for this mapping. The InetAddressType is given by the hm2AgentMulticastPIMSMGroupMappingGrpAddrType object.')
hm2AgentMulticastPIMSMGroupMappingRPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 3, 249, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingRPAddrType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingRPAddrType.setDescription('The Inet address type of the RP address.')
hm2AgentMulticastPIMSMGroupMappingRPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 3, 249, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingRPAddr.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingRPAddr.setDescription('The IP address of the RP to be used for the given group. The InetAddressType is given by the hm2AgentMulticastPIMSMGroupMappingRPAddrType object.')
hm2AgentMulticastPIMSMGroupMappingOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 3, 249, 1, 5), PimGroupMappingOriginType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingOrigin.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingOrigin.setDescription('The mechanism by which the RP for the group was learned.')
hm2AgentMulticastPIMSMGroupMappingGrpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 3, 249, 1, 6), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(4, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingGrpPrefixLen.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingGrpPrefixLen.setDescription("The multicast group prefix length that, when combined with hm2AgentMulticastPIMSMGroupMappingGrpAddr, gives the group prefix for this mapping. If hm2AgentMulticastPIMSMGroupMappingGrpAddrType is 'ipv4' or 'ipv4z', this object must be in the range 4..32. If hm2AgentMulticastPIMSMGroupMappingGrpAddrType is 'ipv6' or 'ipv6z', this object must be in the range 8..128.")
hm2AgentMulticastPIMSMGroupMappingExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 3, 249, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingExpiryTime.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastPIMSMGroupMappingExpiryTime.setDescription('The minimum time remaining before this entry will be aged out. The value zero indicates that this entry will never be aged out.')
hm2AgentMulticastPIMDMConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 4, 4))
hm2AgentMulticastPIMDMAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 4, 4, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentMulticastPIMDMAdminMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastPIMDMAdminMode.setDescription('This enables or disables PIM Dense Mode on the system.')
hm2AgentMulticastPIMDMPruneAssertHoldtime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 4, 4, 248), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 64800)).clone(210)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentMulticastPIMDMPruneAssertHoldtime.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastPIMDMPruneAssertHoldtime.setDescription('The value inserted into the Holdtime field of a PIM-DM Prune message sent on any interface.')
hm2AgentMulticastRoutingConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 4, 5))
hm2AgentMulticastRoutingAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 4, 5, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentMulticastRoutingAdminMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastRoutingAdminMode.setDescription('This enables or disables Multicast Routing Mode on the system.')
hm2AgentMulticastSoftwareDSCP = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 4, 5, 248), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(48)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentMulticastSoftwareDSCP.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastSoftwareDSCP.setDescription('Configures the DSCP value that is written into multicast packets that are routed in software. If set to 64, the DSCP value of incoming packets is not changed.')
hm2AgentMulticastDVMRPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 4, 6))
hm2AgentMulticastDVMRPAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 4, 6, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentMulticastDVMRPAdminMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastDVMRPAdminMode.setDescription('This enables or disables DVMRP on the system.')
hm2AgentMulticastDVMRPRouteExpiryTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 4, 6, 248), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentMulticastDVMRPRouteExpiryTime.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastDVMRPRouteExpiryTime.setDescription('TBD.')
hm2AgentSnmpTrapFlagsConfigGroupMulticast = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 4, 7))
hm2AgentSnmpDVMRPTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 4, 7, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSnmpDVMRPTrapFlag.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSnmpDVMRPTrapFlag.setDescription('This enables or disables DVMRP Traps on the system.')
hm2AgentSnmpPIMTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 4, 7, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSnmpPIMTrapFlag.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSnmpPIMTrapFlag.setDescription('This enables or disables PIM Traps on the system.')
hm2AgentIpStaticMRouteTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 4, 8), )
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteTable.setDescription('The table listing the Static Multicast Route Entries.')
hm2AgentIpStaticMRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 4, 8, 1), ).setIndexNames((0, "HM2-PLATFORM-MULTICAST-MIB", "hm2AgentIpStaticMRouteSrcAddressType"), (0, "HM2-PLATFORM-MULTICAST-MIB", "hm2AgentIpStaticMRouteSrcIpAddr"), (0, "HM2-PLATFORM-MULTICAST-MIB", "hm2AgentIpStaticMRouteSrcNetMask"))
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteEntry.setDescription('Information about a table entry.')
hm2AgentIpStaticMRouteSrcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 8, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteSrcAddressType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteSrcAddressType.setDescription('The address type of this Multicast data source.')
hm2AgentIpStaticMRouteSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 8, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteSrcIpAddr.setDescription('The address of the Multicast data source.')
hm2AgentIpStaticMRouteSrcNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteSrcNetMask.setStatus('current')
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteSrcNetMask.setDescription('The network mask for the IP address of the Multicast data source.')
hm2AgentIpStaticMRouteRpfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 8, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteRpfIpAddr.setStatus('deprecated')
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteRpfIpAddr.setDescription('The RPF Address. This object has been deprecated, because it has no address type. It is replaced by hm2AgentIpStaticMRouteExtRpfIpAddr.')
hm2AgentIpStaticMRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 8, 1, 5), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteIfIndex.setDescription('The interface index is valid only for IPv6 and only if RPF address is link-local.')
hm2AgentIpStaticMRoutePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentIpStaticMRoutePreference.setStatus('current')
if mibBuilder.loadTexts: hm2AgentIpStaticMRoutePreference.setDescription('The preference of this route entry.')
hm2AgentIpStaticMRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 8, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteStatus.setDescription('The status of this row. The status object cannot be set to active(1) before a valid value has been written to hm2AgentIpStaticMRouteExtRpfIpAddr. All writeable objects in this entry can be modified when the status of this entry is active(1).')
hm2AgentIpStaticMRouteExtRpfIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 8, 1, 248), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteExtRpfIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteExtRpfIpAddrType.setDescription('The address type of the RPF Address.')
hm2AgentIpStaticMRouteExtRpfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 8, 1, 249), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteExtRpfIpAddr.setStatus('current')
if mibBuilder.loadTexts: hm2AgentIpStaticMRouteExtRpfIpAddr.setDescription('The RPF Address.')
hm2AgentPIMBsrCandidateConfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 4, 3, 4), )
if mibBuilder.loadTexts: hm2AgentPIMBsrCandidateConfTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPIMBsrCandidateConfTable.setDescription('Provides Candidate-BSR-Advertisements interval information.')
hm2AgentPIMBsrCandidateConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 4, 3, 4, 1), )
pimBsrCandidateBSREntry.registerAugmentions(("HM2-PLATFORM-MULTICAST-MIB", "hm2AgentPIMBsrCandidateConfEntry"))
hm2AgentPIMBsrCandidateConfEntry.setIndexNames(*pimBsrCandidateBSREntry.getIndexNames())
if mibBuilder.loadTexts: hm2AgentPIMBsrCandidateConfEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPIMBsrCandidateConfEntry.setDescription('Information about a table entry.')
pimBsrCandidateBSRAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 3, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pimBsrCandidateBSRAdvInterval.setStatus('current')
if mibBuilder.loadTexts: pimBsrCandidateBSRAdvInterval.setDescription('A Candidate BSR generates Candidate-BSR-Advertisements periodically. This object represents the time interval in seconds between two consecutive advertisements.')
hm2AgentMulticastMgmdExtConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 4, 250))
hm2AgentMulticastMgmdExtTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 4, 250, 10), )
if mibBuilder.loadTexts: hm2AgentMulticastMgmdExtTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastMgmdExtTable.setDescription('The (conceptual) table listing the upstream interface of the router. This is also known as proxy interface.')
hm2AgentMulticastMgmdExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 4, 250, 10, 1), ).setIndexNames((0, "MGMD-STD-MIB", "mgmdHostInterfaceIfIndex"), (0, "MGMD-STD-MIB", "mgmdHostInterfaceQuerierType"))
if mibBuilder.loadTexts: hm2AgentMulticastMgmdExtEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastMgmdExtEntry.setDescription('An entry (conceptual row) representing the upstream interface of the router.')
hm2AgentMulticastMgmdUnsolicitRprtInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 250, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 260)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentMulticastMgmdUnsolicitRprtInterval.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastMgmdUnsolicitRprtInterval.setDescription('Specify how often the system should send unsolicited reports to routers on the upstream interface.')
hm2AgentMulticastMgmdNumberOfGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 250, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentMulticastMgmdNumberOfGroups.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastMgmdNumberOfGroups.setDescription('Number of groups corresponding to the proxy interface.')
hm2AgentMulticastMgmdHostCacheExtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 4, 251))
hm2AgentMulticastMgmdHostCacheExtTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 4, 251, 10), )
if mibBuilder.loadTexts: hm2AgentMulticastMgmdHostCacheExtTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastMgmdHostCacheExtTable.setDescription('The (conceptual) table listing group addresses of the upstream interface of the router.')
hm2AgentMulticastMgmdHostCacheExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 4, 251, 10, 1), ).setIndexNames((0, "MGMD-STD-MIB", "mgmdHostCacheAddressType"), (0, "MGMD-STD-MIB", "mgmdHostCacheAddress"), (0, "MGMD-STD-MIB", "mgmdHostCacheIfIndex"))
if mibBuilder.loadTexts: hm2AgentMulticastMgmdHostCacheExtEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastMgmdHostCacheExtEntry.setDescription('An entry (conceptual row) representing a group of upstream interface of the router.')
hm2AgentMulticastMgmdHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 4, 251, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("non-member", 1), ("delay-member", 2), ("idle-member", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentMulticastMgmdHostStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastMgmdHostStatus.setDescription('A variable that describes the state of the host in relation with an IP multicast group.')
hm2AgentMulticastSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 4, 260))
hm2AgentMulticastProtocolEnableErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4, 260, 1))
if mibBuilder.loadTexts: hm2AgentMulticastProtocolEnableErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastProtocolEnableErrorReturn.setDescription('Cannot enable protocol x because protocol y is enabled.')
hm2AgentMulticastNullGroupErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4, 260, 2))
if mibBuilder.loadTexts: hm2AgentMulticastNullGroupErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastNullGroupErrorReturn.setDescription('The group address or the group address mask is zero.')
hm2AgentMulticastBoundaryRangeEntriesErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4, 260, 3))
if mibBuilder.loadTexts: hm2AgentMulticastBoundaryRangeEntriesErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastBoundaryRangeEntriesErrorReturn.setDescription('The group address is out of administratively scoped addresses range(239.x.x.x).')
hm2AgentMulticastHostEntriesErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4, 260, 4))
if mibBuilder.loadTexts: hm2AgentMulticastHostEntriesErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastHostEntriesErrorReturn.setDescription('The group address has host bits set.')
hm2AgentMgmdHostInvalidEntryErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4, 260, 5))
if mibBuilder.loadTexts: hm2AgentMgmdHostInvalidEntryErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMgmdHostInvalidEntryErrorReturn.setDescription('The entry cannot be deleted because is not valid.')
hm2AgentMulticastProtocolDeInitErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4, 260, 6))
if mibBuilder.loadTexts: hm2AgentMulticastProtocolDeInitErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastProtocolDeInitErrorReturn.setDescription('The multicast routing protocol is deinitializing. Please retry later.')
hm2AgentMulticastLocalAddressErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4, 260, 7))
if mibBuilder.loadTexts: hm2AgentMulticastLocalAddressErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastLocalAddressErrorReturn.setDescription('The IP address is not local.')
hm2AgentMulticastCandRPErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4, 260, 8))
if mibBuilder.loadTexts: hm2AgentMulticastCandRPErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastCandRPErrorReturn.setDescription('Candidate RP is already configured on another interface.')
hm2AgentMulticastUnicastValidationErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4, 260, 9))
if mibBuilder.loadTexts: hm2AgentMulticastUnicastValidationErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastUnicastValidationErrorReturn.setDescription('The IP address is out of unicast range.')
hm2AgentMulticastGroupValidationErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4, 260, 10))
if mibBuilder.loadTexts: hm2AgentMulticastGroupValidationErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastGroupValidationErrorReturn.setDescription('The group address is out of multicast range.')
hm2AgentMulticastSSMValidationErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4, 260, 11))
if mibBuilder.loadTexts: hm2AgentMulticastSSMValidationErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastSSMValidationErrorReturn.setDescription('The group address is in SSM range.')
hm2AgentMulticastStaticSourceErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4, 260, 12))
if mibBuilder.loadTexts: hm2AgentMulticastStaticSourceErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastStaticSourceErrorReturn.setDescription('Source address is a directly connected address.')
hm2AgentMulticastStaticRPFErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4, 260, 13))
if mibBuilder.loadTexts: hm2AgentMulticastStaticRPFErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastStaticRPFErrorReturn.setDescription('The RPF address is a local address.')
hm2AgentMulticastStaticHostErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4, 260, 14))
if mibBuilder.loadTexts: hm2AgentMulticastStaticHostErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastStaticHostErrorReturn.setDescription('The source IP address has the host bit set.')
hm2AgentMulticastCandRPPrimaryErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4, 260, 15))
if mibBuilder.loadTexts: hm2AgentMulticastCandRPPrimaryErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastCandRPPrimaryErrorReturn.setDescription('The candidate RP address must be a primary IP address.')
hm2AgentMulticastCandBSRPrimaryErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 4, 260, 16))
if mibBuilder.loadTexts: hm2AgentMulticastCandBSRPrimaryErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentMulticastCandBSRPrimaryErrorReturn.setDescription('The candidate BSR address must be a primary IP address.')
mibBuilder.exportSymbols("HM2-PLATFORM-MULTICAST-MIB", hm2AgentMulticastCandBSRPrimaryErrorReturn=hm2AgentMulticastCandBSRPrimaryErrorReturn, hm2AgentIpStaticMRouteRpfIpAddr=hm2AgentIpStaticMRouteRpfIpAddr, hm2AgentMulticastMgmdUnsolicitRprtInterval=hm2AgentMulticastMgmdUnsolicitRprtInterval, hm2AgentMulticastRoutingConfigGroup=hm2AgentMulticastRoutingConfigGroup, hm2AgentMulticastMgmdExtEntry=hm2AgentMulticastMgmdExtEntry, hm2AgentMulticastMgmdHostCacheExtGroup=hm2AgentMulticastMgmdHostCacheExtGroup, hm2AgentMulticastStaticRPFErrorReturn=hm2AgentMulticastStaticRPFErrorReturn, hm2AgentSnmpDVMRPTrapFlag=hm2AgentSnmpDVMRPTrapFlag, hm2AgentMgmdHostInvalidEntryErrorReturn=hm2AgentMgmdHostInvalidEntryErrorReturn, hm2AgentMulticastPIMDMAdminMode=hm2AgentMulticastPIMDMAdminMode, hm2AgentPIMBsrCandidateConfTable=hm2AgentPIMBsrCandidateConfTable, hm2AgentSnmpPIMTrapFlag=hm2AgentSnmpPIMTrapFlag, hm2AgentIpStaticMRouteTable=hm2AgentIpStaticMRouteTable, hm2AgentIpStaticMRouteExtRpfIpAddrType=hm2AgentIpStaticMRouteExtRpfIpAddrType, hm2AgentMulticastMgmdHostCacheExtEntry=hm2AgentMulticastMgmdHostCacheExtEntry, hm2AgentMulticastPIMSMGroupMappingRPAddrType=hm2AgentMulticastPIMSMGroupMappingRPAddrType, hm2AgentMulticastPIMSMGroupMappingOrigin=hm2AgentMulticastPIMSMGroupMappingOrigin, hm2AgentIpStaticMRouteSrcNetMask=hm2AgentIpStaticMRouteSrcNetMask, hm2AgentMulticastDVMRPRouteExpiryTime=hm2AgentMulticastDVMRPRouteExpiryTime, hm2AgentMulticastMgmdHostStatus=hm2AgentMulticastMgmdHostStatus, PYSNMP_MODULE_ID=hm2PlatformMulticast, hm2AgentMulticastProtocolEnableErrorReturn=hm2AgentMulticastProtocolEnableErrorReturn, hm2AgentMulticastPIMSMGroupMappingEntry=hm2AgentMulticastPIMSMGroupMappingEntry, hm2AgentMulticastPIMSMGroupMappingRPAddr=hm2AgentMulticastPIMSMGroupMappingRPAddr, hm2AgentIpStaticMRouteIfIndex=hm2AgentIpStaticMRouteIfIndex, hm2AgentMulticastRoutingAdminMode=hm2AgentMulticastRoutingAdminMode, hm2AgentMulticastMgmdNumberOfGroups=hm2AgentMulticastMgmdNumberOfGroups, hm2AgentMulticastCandRPErrorReturn=hm2AgentMulticastCandRPErrorReturn, hm2AgentMulticastPIMDMConfigGroup=hm2AgentMulticastPIMDMConfigGroup, hm2AgentMulticastPIMDMPruneAssertHoldtime=hm2AgentMulticastPIMDMPruneAssertHoldtime, hm2PlatformMulticast=hm2PlatformMulticast, pimBsrCandidateBSRAdvInterval=pimBsrCandidateBSRAdvInterval, hm2AgentMulticastMgmdExtTable=hm2AgentMulticastMgmdExtTable, hm2AgentMulticastDVMRPAdminMode=hm2AgentMulticastDVMRPAdminMode, hm2AgentMulticastStaticHostErrorReturn=hm2AgentMulticastStaticHostErrorReturn, hm2AgentIpStaticMRouteSrcIpAddr=hm2AgentIpStaticMRouteSrcIpAddr, hm2AgentMulticastPIMSMGroupMappingTable=hm2AgentMulticastPIMSMGroupMappingTable, hm2AgentIpStaticMRouteExtRpfIpAddr=hm2AgentIpStaticMRouteExtRpfIpAddr, hm2AgentMulticastMgmdExtConfigGroup=hm2AgentMulticastMgmdExtConfigGroup, hm2AgentMulticastSNMPExtensionGroup=hm2AgentMulticastSNMPExtensionGroup, hm2AgentMulticastProtocolDeInitErrorReturn=hm2AgentMulticastProtocolDeInitErrorReturn, hm2AgentMulticastIGMPAdminMode=hm2AgentMulticastIGMPAdminMode, hm2AgentMulticastPIMSMGroupMappingGrpAddr=hm2AgentMulticastPIMSMGroupMappingGrpAddr, hm2AgentMulticastGroupValidationErrorReturn=hm2AgentMulticastGroupValidationErrorReturn, hm2AgentSnmpTrapFlagsConfigGroupMulticast=hm2AgentSnmpTrapFlagsConfigGroupMulticast, hm2AgentIpStaticMRoutePreference=hm2AgentIpStaticMRoutePreference, hm2AgentMulticastPIMSMGroupMappingGrpPrefixLen=hm2AgentMulticastPIMSMGroupMappingGrpPrefixLen, hm2AgentMulticastBoundaryRangeEntriesErrorReturn=hm2AgentMulticastBoundaryRangeEntriesErrorReturn, hm2AgentMulticastPIMSMGroupMappingGrpAddrType=hm2AgentMulticastPIMSMGroupMappingGrpAddrType, hm2AgentMulticastUnicastValidationErrorReturn=hm2AgentMulticastUnicastValidationErrorReturn, hm2AgentIpStaticMRouteSrcAddressType=hm2AgentIpStaticMRouteSrcAddressType, hm2AgentMulticastDVMRPConfigGroup=hm2AgentMulticastDVMRPConfigGroup, hm2AgentIpStaticMRouteEntry=hm2AgentIpStaticMRouteEntry, hm2AgentMulticastLocalAddressErrorReturn=hm2AgentMulticastLocalAddressErrorReturn, hm2AgentMulticastSSMValidationErrorReturn=hm2AgentMulticastSSMValidationErrorReturn, hm2AgentMulticastPIMSMConfigGroup=hm2AgentMulticastPIMSMConfigGroup, hm2AgentMulticastHostEntriesErrorReturn=hm2AgentMulticastHostEntriesErrorReturn, hm2AgentMulticastStaticSourceErrorReturn=hm2AgentMulticastStaticSourceErrorReturn, hm2AgentMulticastPIMSMAdminMode=hm2AgentMulticastPIMSMAdminMode, hm2AgentMulticastNullGroupErrorReturn=hm2AgentMulticastNullGroupErrorReturn, hm2AgentMulticastIGMPConfigGroup=hm2AgentMulticastIGMPConfigGroup, hm2AgentMulticastPIMSMGroupMappingExpiryTime=hm2AgentMulticastPIMSMGroupMappingExpiryTime, hm2AgentIpStaticMRouteStatus=hm2AgentIpStaticMRouteStatus, hm2AgentPIMBsrCandidateConfEntry=hm2AgentPIMBsrCandidateConfEntry, hm2AgentMulticastCandRPPrimaryErrorReturn=hm2AgentMulticastCandRPPrimaryErrorReturn, hm2AgentMulticastIGMPProxyOperStatus=hm2AgentMulticastIGMPProxyOperStatus, hm2AgentMulticastMgmdHostCacheExtTable=hm2AgentMulticastMgmdHostCacheExtTable, hm2AgentMulticastSoftwareDSCP=hm2AgentMulticastSoftwareDSCP)
