#
# PySNMP MIB module OPTIX-SONET-TU-MIB-V2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OPTIX-SONET-TU-MIB-V2
# Produced by pysmi-0.3.4 at Wed May  1 14:35:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
optixProvisionSonet, = mibBuilder.importSymbols("OPTIX-OID-MIB", "optixProvisionSonet")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, Bits, ObjectIdentity, iso, TimeTicks, IpAddress, Integer32, Gauge32, Counter32, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "Bits", "ObjectIdentity", "iso", "TimeTicks", "IpAddress", "Integer32", "Gauge32", "Counter32", "NotificationType", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
optixsonetFacilityMgt = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2))
if mibBuilder.loadTexts: optixsonetFacilityMgt.setLastUpdated('200605232008Z')
if mibBuilder.loadTexts: optixsonetFacilityMgt.setOrganization('Your organization')
if mibBuilder.loadTexts: optixsonetFacilityMgt.setContactInfo('Your contact info')
if mibBuilder.loadTexts: optixsonetFacilityMgt.setDescription('Enter the description for this MIB module.')
class LpbkType(TextualConvention, Integer32):
    description = 'Enter the description for the LpbkType TEXTUAL-CONVENTION converted from type assignment.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))
    namedValues = NamedValues(("terminal", 1), ("facility", 2), ("crs", 3), ("ds1feac", 4), ("ds3feac", 5), ("fac2ni", 6), ("noloop", 255))

class IntfType(TextualConvention, Integer32):
    description = 'Enter the description for the IntfType TEXTUAL-CONVENTION converted from type assignment.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 10, 12, 13, 17, 65, 100, 254))
    namedValues = NamedValues(("ds1-asyn-vt1", 1), ("ds3-asyn-sts1", 10), ("ec", 12), ("ds3-tmux-ds1", 13), ("ds3-srv-ds1", 17), ("uas", 65), ("mix", 100), ("invalid", 254))

ds3PortAttribTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 1), )
if mibBuilder.loadTexts: ds3PortAttribTable.setStatus('current')
if mibBuilder.loadTexts: ds3PortAttribTable.setDescription('The DS3 facilities configuration Table')
ds3PortAttribEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 1, 1), ).setIndexNames((0, "OPTIX-SONET-TU-MIB-V2", "ds3PortIndexSlotId"), (0, "OPTIX-SONET-TU-MIB-V2", "ds3PortIndexPortId"))
if mibBuilder.loadTexts: ds3PortAttribEntry.setStatus('current')
if mibBuilder.loadTexts: ds3PortAttribEntry.setDescription('The DS3 facilities configuration entry')
ds3PortIndexSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3PortIndexSlotId.setStatus('current')
if mibBuilder.loadTexts: ds3PortIndexSlotId.setDescription('Slot number. This will indicate what is the slot of the object. ')
ds3PortIndexPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3PortIndexPortId.setStatus('current')
if mibBuilder.loadTexts: ds3PortIndexPortId.setDescription('Port Number. This will indicate what is the Port of the object. ')
ds3PortAttribReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254))).clone(namedValues=NamedValues(("high", 1), ("low", 2), ("invalid", 254)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3PortAttribReq.setStatus('current')
if mibBuilder.loadTexts: ds3PortAttribReq.setDescription('High or low receive equalizer.')
ds3PortAttribLbo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3PortAttribLbo.setStatus('current')
if mibBuilder.loadTexts: ds3PortAttribLbo.setDescription('Line build out. Line build out (DS3 port) values Value Description 1 Cable length range from 0 to 225 feet. 2 Cable length range from 226 to 450 feet. ')
ds3PortAttribLineCde = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 254))).clone(namedValues=NamedValues(("b3zs", 3), ("invalid", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3PortAttribLineCde.setStatus('current')
if mibBuilder.loadTexts: ds3PortAttribLineCde.setDescription('DS3 line code. Valid value is B3ZS.')
ds3PortAttribFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 255))).clone(namedValues=NamedValues(("cbit", 3), ("m23", 4), ("unframed", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3PortAttribFmt.setStatus('current')
if mibBuilder.loadTexts: ds3PortAttribFmt.setDescription('Frame format. Valid values are CBIT, M23 or UNFRAMED. For PDM3 unit, if the port type is DS3_ASYN_STS1, then <FMT> can be CBIT, M23 or UNFRAMED. If the port type is DS3_TMUX_DS1 or DS3_SRV_DS1, then the <FMT> only can be CBIT or M23.')
ds3PortAttribTACC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3PortAttribTACC.setStatus('current')
if mibBuilder.loadTexts: ds3PortAttribTACC.setDescription('Defines the DS3 port as a test access port with a selected unique TAP number.')
ds3PortAttribLof2ais = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("invalid", 254)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3PortAttribLof2ais.setStatus('current')
if mibBuilder.loadTexts: ds3PortAttribLof2ais.setDescription("The parameter is provisioned to determine whether or not to generate DS3 AIS for the DS3 LOF. The Valid value of this parameter is 'no' and 'yes'. PQT3/PQT3A/PQT3P/PQT3B units support this parameter. ")
ds3PortAttribSvtimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3PortAttribSvtimer.setStatus('current')
if mibBuilder.loadTexts: ds3PortAttribSvtimer.setDescription('Signal validation timer in minutes. Valid values are shown below. Value Description From 00-03 Signal validation timer in minutes. Only valid if auto in-service feature is supported. <SVTIMER> is a string, and format is: HH-MM. to 48-00 HH - Hour, it is an integer ranging from 0 to 48; MM - Minute, it is an integer ranging from 0 to 59. The longest time is 48 hours. Default is 00-03 (3 minutes). ')
ds3PortAttribPST = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3PortAttribPST.setStatus('current')
if mibBuilder.loadTexts: ds3PortAttribPST.setDescription('The primary state of the entity. Administrative State (PST) Definition IS Puts the entity in service. OOS Puts the entity out of service. ')
ds3PortAttribSST = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3PortAttribSST.setStatus('current')
if mibBuilder.loadTexts: ds3PortAttribSST.setDescription('The secondary state of the entity. Administrative State (PST) Definition. AINS Puts the entity in automatic in-service. MT Removes the entity from service for maintenance.')
ds3LoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 1, 1, 12), LpbkType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3LoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: ds3LoopbackStatus.setDescription('This variable represents the current state of the loopback on the DS3 interface. It contains information about loopbacks established by a manager and remotely from the far end. ')
ds3LoopbackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3LoopbackTimeout.setStatus('current')
if mibBuilder.loadTexts: ds3LoopbackTimeout.setDescription('The remnant time that loop-back will be released. ')
ds3RemoteALWFELPBK = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("invalid", 254)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3RemoteALWFELPBK.setStatus('current')
if mibBuilder.loadTexts: ds3RemoteALWFELPBK.setDescription('(Optional) Far-end loopback allowance attribute of the port. If it is enable, the automatic far-end loopbacks are allowed. It is either enable or disable. The system default is enable. The parameter type is ENABLE_DISABLE, which disables or enables an attribute.Automatic application of loopbacks originating from the far end can be initiated on the T3 ports of a PDM3 card. ')
ds1PortAttribTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2), )
if mibBuilder.loadTexts: ds1PortAttribTable.setStatus('current')
if mibBuilder.loadTexts: ds1PortAttribTable.setDescription('The DS1 facilities configuration Table')
ds1PortAttribEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2, 1), ).setIndexNames((0, "OPTIX-SONET-TU-MIB-V2", "ds1PortIndexSlotId"), (0, "OPTIX-SONET-TU-MIB-V2", "ds1PortIndexPortId"), (0, "OPTIX-SONET-TU-MIB-V2", "ds1PortIndexPath"))
if mibBuilder.loadTexts: ds1PortAttribEntry.setStatus('current')
if mibBuilder.loadTexts: ds1PortAttribEntry.setDescription('The DS1 facilities configuration entry')
ds1PortIndexSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1PortIndexSlotId.setStatus('current')
if mibBuilder.loadTexts: ds1PortIndexSlotId.setDescription('Slot number. This will indicate what is the slot of the object. ')
ds1PortIndexPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1PortIndexPortId.setStatus('current')
if mibBuilder.loadTexts: ds1PortIndexPortId.setDescription("Port Number. This will indicate what is the Port of the object.For the Transmux unit this is the DS3 port number.And for other Ds1 units, it's the Ds1 port Number. ")
ds1PortIndexPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1PortIndexPath.setStatus('current')
if mibBuilder.loadTexts: ds1PortIndexPath.setDescription('Ds1 identifier of the Transmux unit .For DS1 in a Transmux unit, it is equivalent to DS1 port number of its Transmux unit. For other Ds1 units, It will be zero. ')
ds1PortAttribLbo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1PortAttribLbo.setStatus('current')
if mibBuilder.loadTexts: ds1PortAttribLbo.setDescription('Line build out. Line build out (DS1 port) values Value Description 1 Cable length range from 0 to 131 feet. 2 Cable length range from 132 to 262 feet. 3 Cable length range from 263 to 393 feet. 4 Cable length range from 394 to 524 feet. 5 Cable length range from 525 to 655 feet. ')
ds1PortAttribLineCde = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2), ("invalid", 254)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1PortAttribLineCde.setStatus('current')
if mibBuilder.loadTexts: ds1PortAttribLineCde.setDescription('DS1 Line coding. Valid value is AMI or B8ZS. Default is B8ZS.')
ds1PortAttribFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("sf", 1), ("esf", 2), ("unframed", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1PortAttribFmt.setStatus('current')
if mibBuilder.loadTexts: ds1PortAttribFmt.setDescription('Frame format. Valid value is SF, ESF or UNFRAMED.')
ds1PortAttribTACC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1PortAttribTACC.setStatus('current')
if mibBuilder.loadTexts: ds1PortAttribTACC.setDescription('Defines the DS1/T1 port as a test access port with a selected unique TAP number. ')
ds1PortAttribLof2ais = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("invalid", 254)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1PortAttribLof2ais.setStatus('current')
if mibBuilder.loadTexts: ds1PortAttribLof2ais.setDescription('The parameter is provisioned to determine whether or not to generate DS1 AIS for the DS1 LOF')
ds1PortAttribSvtimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1PortAttribSvtimer.setStatus('current')
if mibBuilder.loadTexts: ds1PortAttribSvtimer.setDescription('Signal validation timer in minutes. Valid values are shown below. Value Description From 00-03 Signal validation timer in minutes. Only valid if auto in-service feature is supported. <SVTIMER> is a string, and format is: HH-MM. to 48-00 HH - Hour, it is an integer ranging from 0 to 48; MM - Minute, it is an integer ranging from 0 to 59. The longest time is 48 hours. Default is 00-03 (3 minutes). ')
ds1PortAttribPST = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1PortAttribPST.setStatus('current')
if mibBuilder.loadTexts: ds1PortAttribPST.setDescription('The primary state of the entity. Administrative State (PST) Definition IS Puts the entity in service. OOS Puts the entity out of service. ')
ds1PortAttribSST = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1PortAttribSST.setStatus('current')
if mibBuilder.loadTexts: ds1PortAttribSST.setDescription('The secondary state of the entity. Administrative State (PST) Definition. AINS Puts the entity in automatic in-service. MT Removes the entity from service for maintenance.')
ds1LoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2, 1, 12), LpbkType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1LoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: ds1LoopbackStatus.setDescription('This variable represents the current state of the loopback on the DS1 interface. It contains information about loopbacks established by a manager and remotely from the far end.')
ds1LoopbackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds1LoopbackTimeout.setStatus('current')
if mibBuilder.loadTexts: ds1LoopbackTimeout.setDescription('The remnant time that loop-back will be released. ')
ds1RemoteALWFELPBK = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 254))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("invalid", 254)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1RemoteALWFELPBK.setStatus('current')
if mibBuilder.loadTexts: ds1RemoteALWFELPBK.setDescription('(Optional) Far-end loopback allowance attribute of the port. If it is enable, the automatic far-end loopbacks are allowed. It is either enable or disable. The system default is enable. The parameter type is ENABLE_DISABLE, which disables or enables an attribute.Automatic application of loopbacks originating from the far end can be initiated on the T1 ports of a PLT1,PDT1,PDT1P card.It indicates that the port not support this parameter when the attribute is invalid. ')
ds1PortLpbkAutomaticTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 2, 1, 15), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds1PortLpbkAutomaticTime.setStatus('current')
if mibBuilder.loadTexts: ds1PortLpbkAutomaticTime.setDescription('Time-out ticks (1 minute). For the T1 port default value is 120 (2 hours). 0 means time-out function is disabling. Valid values are 0~9999.')
portTypeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 3), )
if mibBuilder.loadTexts: portTypeTable.setStatus('current')
if mibBuilder.loadTexts: portTypeTable.setDescription('Port type management table.')
portTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 3, 1), ).setIndexNames((0, "OPTIX-SONET-TU-MIB-V2", "portIndexSlotId"), (0, "OPTIX-SONET-TU-MIB-V2", "portIndexPortId"))
if mibBuilder.loadTexts: portTypeEntry.setStatus('current')
if mibBuilder.loadTexts: portTypeEntry.setDescription('Port type management entry.')
portIndexSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndexSlotId.setStatus('current')
if mibBuilder.loadTexts: portIndexSlotId.setDescription('Slot number. This will indicate what is the slot of the object. ')
portIndexPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndexPortId.setStatus('current')
if mibBuilder.loadTexts: portIndexPortId.setDescription('Port Number. This will indicate what is the Port of the object. ')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 3, 1, 3), IntfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portType.setStatus('current')
if mibBuilder.loadTexts: portType.setDescription('The AID unit port type.Valid values are shown below. INTFTYPE values Value Description DS3_ASYN_STS1 DS3 signal asynchronous mapped into STS1. Default for DS3 unit. DS3_TMUX_DS1 Multiplexing and de-multiplexing of DS1s to/from DS3. Default for Transmux unit (PDM3). DS1_ASYN_VT1 DS1 signal asynchronous mapped into VT1. Default for DS1 unit. DS3_SRV_DS1 Multiplexing and de-multiplexing of DS1s to/from DS3 as M13 server. EC1 EC1 signal mapped into STS1. PQT3A support EC1 service. UAS It indicates there is no use of the port. ')
optixsonetFacilityMgtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 4))
optixsonetFacilityMgtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 4, 1))
currentObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 4, 1, 1)).setObjects(("OPTIX-SONET-TU-MIB-V2", "ds3PortIndexSlotId"), ("OPTIX-SONET-TU-MIB-V2", "ds3PortIndexPortId"), ("OPTIX-SONET-TU-MIB-V2", "ds3PortAttribReq"), ("OPTIX-SONET-TU-MIB-V2", "ds3PortAttribLbo"), ("OPTIX-SONET-TU-MIB-V2", "ds3PortAttribLineCde"), ("OPTIX-SONET-TU-MIB-V2", "ds3PortAttribFmt"), ("OPTIX-SONET-TU-MIB-V2", "ds3PortAttribTACC"), ("OPTIX-SONET-TU-MIB-V2", "ds3PortAttribLof2ais"), ("OPTIX-SONET-TU-MIB-V2", "ds3PortAttribSvtimer"), ("OPTIX-SONET-TU-MIB-V2", "ds3PortAttribPST"), ("OPTIX-SONET-TU-MIB-V2", "ds3PortAttribSST"), ("OPTIX-SONET-TU-MIB-V2", "ds3LoopbackStatus"), ("OPTIX-SONET-TU-MIB-V2", "ds3LoopbackTimeout"), ("OPTIX-SONET-TU-MIB-V2", "ds3RemoteALWFELPBK"), ("OPTIX-SONET-TU-MIB-V2", "ds1PortIndexSlotId"), ("OPTIX-SONET-TU-MIB-V2", "ds1PortIndexPortId"), ("OPTIX-SONET-TU-MIB-V2", "ds1PortIndexPath"), ("OPTIX-SONET-TU-MIB-V2", "ds1PortAttribLbo"), ("OPTIX-SONET-TU-MIB-V2", "ds1PortAttribLineCde"), ("OPTIX-SONET-TU-MIB-V2", "ds1PortAttribFmt"), ("OPTIX-SONET-TU-MIB-V2", "ds1PortAttribTACC"), ("OPTIX-SONET-TU-MIB-V2", "ds1PortAttribLof2ais"), ("OPTIX-SONET-TU-MIB-V2", "ds1PortAttribSvtimer"), ("OPTIX-SONET-TU-MIB-V2", "ds1PortAttribPST"), ("OPTIX-SONET-TU-MIB-V2", "ds1PortAttribSST"), ("OPTIX-SONET-TU-MIB-V2", "ds1LoopbackStatus"), ("OPTIX-SONET-TU-MIB-V2", "ds1LoopbackTimeout"), ("OPTIX-SONET-TU-MIB-V2", "ds1RemoteALWFELPBK"), ("OPTIX-SONET-TU-MIB-V2", "ds1PortLpbkAutomaticTime"), ("OPTIX-SONET-TU-MIB-V2", "portIndexSlotId"), ("OPTIX-SONET-TU-MIB-V2", "portIndexPortId"), ("OPTIX-SONET-TU-MIB-V2", "portType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    currentObjectGroup = currentObjectGroup.setStatus('current')
if mibBuilder.loadTexts: currentObjectGroup.setDescription('Enter the description of the created OBJECT-GROUP.')
optixsonetFacilityMgtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 4, 2))
basicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 2, 25, 4, 20, 2, 4, 2, 1)).setObjects(("OPTIX-SONET-TU-MIB-V2", "currentObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    basicCompliance = basicCompliance.setStatus('current')
if mibBuilder.loadTexts: basicCompliance.setDescription('Enter the description of the created MODULE-COMPLIANCE.')
mibBuilder.exportSymbols("OPTIX-SONET-TU-MIB-V2", ds3PortAttribTACC=ds3PortAttribTACC, ds3LoopbackStatus=ds3LoopbackStatus, ds1PortAttribTACC=ds1PortAttribTACC, ds1PortAttribLineCde=ds1PortAttribLineCde, ds1LoopbackTimeout=ds1LoopbackTimeout, ds1PortAttribTable=ds1PortAttribTable, currentObjectGroup=currentObjectGroup, ds1PortAttribSST=ds1PortAttribSST, ds3PortAttribLof2ais=ds3PortAttribLof2ais, portTypeEntry=portTypeEntry, optixsonetFacilityMgtConformance=optixsonetFacilityMgtConformance, portTypeTable=portTypeTable, ds3PortAttribSST=ds3PortAttribSST, ds3PortIndexSlotId=ds3PortIndexSlotId, ds1PortAttribLof2ais=ds1PortAttribLof2ais, ds1PortIndexPath=ds1PortIndexPath, ds1PortAttribEntry=ds1PortAttribEntry, optixsonetFacilityMgtGroups=optixsonetFacilityMgtGroups, ds3PortAttribPST=ds3PortAttribPST, ds3PortAttribEntry=ds3PortAttribEntry, ds1PortIndexSlotId=ds1PortIndexSlotId, ds1RemoteALWFELPBK=ds1RemoteALWFELPBK, ds3PortAttribReq=ds3PortAttribReq, ds1PortIndexPortId=ds1PortIndexPortId, portIndexSlotId=portIndexSlotId, portType=portType, optixsonetFacilityMgt=optixsonetFacilityMgt, ds1PortAttribSvtimer=ds1PortAttribSvtimer, portIndexPortId=portIndexPortId, PYSNMP_MODULE_ID=optixsonetFacilityMgt, IntfType=IntfType, basicCompliance=basicCompliance, ds1LoopbackStatus=ds1LoopbackStatus, ds3PortAttribSvtimer=ds3PortAttribSvtimer, optixsonetFacilityMgtCompliances=optixsonetFacilityMgtCompliances, ds3PortAttribLbo=ds3PortAttribLbo, LpbkType=LpbkType, ds3LoopbackTimeout=ds3LoopbackTimeout, ds1PortLpbkAutomaticTime=ds1PortLpbkAutomaticTime, ds3RemoteALWFELPBK=ds3RemoteALWFELPBK, ds1PortAttribLbo=ds1PortAttribLbo, ds3PortAttribTable=ds3PortAttribTable, ds1PortAttribPST=ds1PortAttribPST, ds3PortIndexPortId=ds3PortIndexPortId, ds3PortAttribFmt=ds3PortAttribFmt, ds1PortAttribFmt=ds1PortAttribFmt, ds3PortAttribLineCde=ds3PortAttribLineCde)
