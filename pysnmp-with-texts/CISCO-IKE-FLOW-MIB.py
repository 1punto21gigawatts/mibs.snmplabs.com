#
# PySNMP MIB module CISCO-IKE-FLOW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IKE-FLOW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:01:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
cisgIpsSgTunIndex, cisgIpsSgProtocol, cisgIpsSgTunHistIndex, cisgIpsSgFailLocalAddress, cisgIpsSgFailRemoteAddress = mibBuilder.importSymbols("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunIndex", "cisgIpsSgProtocol", "cisgIpsSgTunHistIndex", "cisgIpsSgFailLocalAddress", "cisgIpsSgFailRemoteAddress")
CIPsecIkeNegoMode, CIPsecDiffHellmanGrp = mibBuilder.importSymbols("CISCO-IPSEC-TC", "CIPsecIkeNegoMode", "CIPsecDiffHellmanGrp")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
NotificationType, Unsigned32, iso, Bits, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, Counter64, TimeTicks, Gauge32, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "iso", "Bits", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "Counter64", "TimeTicks", "Gauge32", "Counter32", "ObjectIdentity")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
ciscoIkeFlowMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 429))
ciscoIkeFlowMIB.setRevisions(('2004-09-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIkeFlowMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: ciscoIkeFlowMIB.setLastUpdated('200409140000Z')
if mibBuilder.loadTexts: ciscoIkeFlowMIB.setOrganization('Cisco Systems')
if mibBuilder.loadTexts: ciscoIkeFlowMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ipsecmib@external.cisco.com')
if mibBuilder.loadTexts: ciscoIkeFlowMIB.setDescription("This is a MIB module for monitoring the structures and status of IPsec control flows based on Internet Key Exchange protocol. The MIB models standard aspects of the IKE protocol. Synopsis This MIB module models status, performance and failures of the IKEv1- and IKEv2-based signaling in IPsec, FC-SP(and similar) protocols. In practice, the security protocols such as IPsec, FC-SP and CTS use a signaling protocol such as IKE, KINK, or some such. A number of characteristics of these signaling protocols are generic. The generic attributes and status of signaling activity has been modeled in CISCO-IPSEC-SIGNALING-MIB. This MIB module augments CISCO-IPSEC-SIGNALING-MIB with IKE-specific MIB objects. (Signaling protocols are also referred to this document as 'Control Protocols', since they perform session control.) History of the MIB A precursor to this MIB was written by Tivoli and implemented in IBM Nways routers in 1999. That MIB instrumented both IKE(v1) and IPsec in a single module. During late 1999, Cisco adopted the MIB and together with Tivoli published the IPsec Flow Monitor MIB in IETF IPsec WG in draft-ietf-ipsec-flow-monitoring-mib-00.txt. In 2000, the MIB was Cisco-ized and implemented this draft as CISCO-IPSEC-FLOW-MONITOR-MIB in IOS and VPN3000 platforms. With the evolution of IKEv2, the MIB was modified and presented to the IPsec WG again in May 2003 in draft-ietf-ipsec-flow-monitoring-mib-02.txt. This version of the draft is a Cisco-ized version that culls out the IKE-specific aspects of the IPsec Flow Monitor MIB. Overview of MIB The MIB contains five major groups of objects which are used to manage the IKE protocol activity. These groups include the global statistics, IKE tunnel table, IKE History Group and a notification Group. The tunnel table and the history table have a sparse-table relationship with the corresponding tables in the CISCO-IPSEC-SIGNALING-MIB (details in the DESCRIPTION of the respective tables). Acronyms The following acronyms are used in this document: Flow, Tunnel: An ISAKMP SA can be regarded as representing a flow of ISAKMP/IKE traffic. Hence an ISAKMP is referred to as a 'Phase 1 Tunnel' in this document. IPsec: Secure IP Protocol ISAKMP: Internet Security Association and Key Management Protocol IKE: Internet Key Exchange Protocol MM: Main Mode - the process of setting up a Phase 1 SA to secure the exchanges required to setup Phase 2 SAs Phase 2 Tunnel: AN instance of a non-ISAKMP SA bundle in which all the SA share the same proxy identifiers (IDii,IDir) protect the same stream of application traffic. Such an SA bundle is termed a 'Phase 2 Tunnel'. Note that a Phase 2 tunnel may comprise different SA bundles and different number of SA bundles at different times (due to key refresh). QM: Quick Mode - the process of setting up Phase 2 Security Associations using a Phase 1 SA. SA: Security Association (ref: rfc2408). VPN: Virtual Private Network. ")
ciscoIkeFlowMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 429, 0))
ciscoIkeFlowMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 429, 1))
ciscoIkeFlowMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 429, 2))
cifIkeCurrentActivity = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1))
cifIkeHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2))
cifIkeNotifControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 3))
cifIkeGlobalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 1), )
if mibBuilder.loadTexts: cifIkeGlobalStatsTable.setStatus('current')
if mibBuilder.loadTexts: cifIkeGlobalStatsTable.setDescription(" The Phase-1 IKE Global Statistics Table. There is one entry in this table for each Phase-1 IKE, protocol('cpIkev1' and 'cpIkev2') implemented by the managed entity. For all the counter objects in the table below, initially when the IKE Tunnel becomes active and appears in this table, they would contain a value of zero. ")
cifIkeGlobalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgProtocol"))
if mibBuilder.loadTexts: cifIkeGlobalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cifIkeGlobalStatsEntry.setDescription(' Each entry contains the global statistics pertaining to the specific IKE protocol. ')
cifIkeGlobalInP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 1, 1, 1), Counter64()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeGlobalInP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: cifIkeGlobalInP2Exchgs.setDescription(' The total number of Phase-2 exchanges received by all currently and previously active Phase-1 Tunnels. ')
cifIkeGlobalInP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 1, 1, 2), Counter64()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeGlobalInP2ExchgInvalids.setStatus('current')
if mibBuilder.loadTexts: cifIkeGlobalInP2ExchgInvalids.setDescription(' The total number of Phase-2 exchanges which were received and found to be invalid by all currently and previously active Phase-1 Tunnels. ')
cifIkeGlobalInP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 1, 1, 3), Counter64()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeGlobalInP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: cifIkeGlobalInP2ExchgRejects.setDescription(' The total number of Phase-2 exchanges which were received and rejected by all currently and previously active Phase-1 Tunnels. ')
cifIkeGlobalOutP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 1, 1, 4), Counter64()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeGlobalOutP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: cifIkeGlobalOutP2Exchgs.setDescription(' The total number of Phase-2 exchanges which were sent by all currently and previously active IPsec Phase-1 Tunnels. ')
cifIkeGlobalOutP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 1, 1, 5), Counter64()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeGlobalOutP2ExchgInvalids.setStatus('current')
if mibBuilder.loadTexts: cifIkeGlobalOutP2ExchgInvalids.setDescription(' The total number of Phase-2 exchanges which were sent and found to be invalid by all currently and previously active Phase-1 Tunnels. ')
cifIkeGlobalOutP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 1, 1, 6), Counter64()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeGlobalOutP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: cifIkeGlobalOutP2ExchgRejects.setDescription(' The total number of Phase-2 exchanges which were sent and rejected by all currently and previously active Phase-1 IKE Tunnels. ')
cifIkeGlobalInXauths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 1, 1, 7), Counter64()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeGlobalInXauths.setStatus('current')
if mibBuilder.loadTexts: cifIkeGlobalInXauths.setDescription(' The number of times the extended authentication requests was received by the managed entity from a peer. ')
cifIkeGlobalInXauthFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 1, 1, 8), Counter64()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeGlobalInXauthFailures.setStatus('current')
if mibBuilder.loadTexts: cifIkeGlobalInXauthFailures.setDescription(' The number of times the extended authentication information supplied by an IKE peer was found to be invalid by the local entity. ')
cifIkeGlobalOutXauthFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 1, 1, 9), Counter64()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeGlobalOutXauthFailures.setStatus('current')
if mibBuilder.loadTexts: cifIkeGlobalOutXauthFailures.setDescription(' The number of times the extended authentication information supplied by the managed entity to an IKE peer was found to be invalid by the remote peer. ')
cifIkeGlobalInNewGrpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 1, 1, 10), Counter64()).setUnits('Negotiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeGlobalInNewGrpReqs.setStatus('current')
if mibBuilder.loadTexts: cifIkeGlobalInNewGrpReqs.setDescription(' The total number of New Group exchanges initiated remotely. ')
cifIkeGlobalOutNewGrpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 1, 1, 11), Counter64()).setUnits('Negotiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeGlobalOutNewGrpReqs.setStatus('current')
if mibBuilder.loadTexts: cifIkeGlobalOutNewGrpReqs.setDescription(' The total number of New Group exchanges initiated locally. ')
cifIkeGlobalInNewGrpRejectReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 1, 1, 12), Counter64()).setUnits('Negotiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeGlobalInNewGrpRejectReqs.setStatus('current')
if mibBuilder.loadTexts: cifIkeGlobalInNewGrpRejectReqs.setDescription(' The total number of New Group exchanges initiated remotely that ended in reject. ')
cifIkeGlobalOutNewGrpRejectReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 1, 1, 13), Counter64()).setUnits('Negotiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeGlobalOutNewGrpRejectReqs.setStatus('current')
if mibBuilder.loadTexts: cifIkeGlobalOutNewGrpRejectReqs.setDescription(' The total number of New Group exchanges initiated locally that ended in reject. ')
cifIkeTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3), )
if mibBuilder.loadTexts: cifIkeTunnelTable.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunnelTable.setDescription(' The Phase-1 Internet Key Exchange Tunnel Table. There is one entry in this table for each active IPsec Phase-1 IKE Tunnel. ')
cifIkeTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgProtocol"), (0, "CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunIndex"))
if mibBuilder.loadTexts: cifIkeTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunnelEntry.setDescription(" Each entry contains the attributes associated with an active Phase-1 IKE Tunnel. The rows in this table correspond 1-to-1 with a subset of the rows in cisgIpsSgTunnelTable, specifically the subset which represent Phase-1 IKE Tunnels. Hence, the value of the index 'cisgIpsSgProtocol' in this table is always 'cpIkev1' or 'cpIkev2'. For all the counter objects in the table below, initially when the Phase-1 IKE Tunnel becomes active and appears in this table, they would contain a value of zero. ")
cifIkeTunNegoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 1), CIPsecIkeNegoMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunNegoMode.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunNegoMode.setDescription(' The negotiation mode of the Phase-1 IKE Tunnel. ')
cifIkeTunDHGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 2), CIPsecDiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunDHGrp.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunDHGrp.setDescription(' The Diffie Hellman Group used in Phase-1 IKE negotiations. ')
cifIkeTunSaRefreshThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunSaRefreshThreshold.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunSaRefreshThreshold.setDescription(' The security association refresh threshold in seconds. If the tunnel does not refresh its security associations, the value of this MIB object is zero. ')
cifIkeTunTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 4), Counter32()).setUnits('QM Exchanges').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunTotalRefreshes.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunTotalRefreshes.setDescription(' The total number of security associations refreshes performed. If the tunnel does not refresh its security associations, the value of this MIB object is never incremented. ')
cifIkeTunInP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 5), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunInP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunInP2Exchgs.setDescription(' The total number of Phase-2 exchanges received by this Phase-1 IKE Tunnel. ')
cifIkeTunInP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 6), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunInP2ExchgInvalids.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunInP2ExchgInvalids.setDescription(' The total number of Phase-2 exchanges received and found to be invalid by this Phase-1 IKE Tunnel. ')
cifIkeTunInP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 7), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunInP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunInP2ExchgRejects.setDescription(' The total number of Phase-2 exchanges received and rejected by this Phase-1 Tunnel. ')
cifIkeTunInP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 8), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunInP2SaDelRequests.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunInP2SaDelRequests.setDescription(' The total number of Phase-2 security association delete requests received by this Phase-1 IKE Tunnel. ')
cifIkeTunOutP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 9), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunOutP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunOutP2Exchgs.setDescription(' The total number of Phase-2 exchanges sent by this Phase-1 IKE Tunnel. ')
cifIkeTunOutP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 10), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunOutP2ExchgInvalids.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunOutP2ExchgInvalids.setDescription(' The total number of Phase-2 exchanges sent and found to be invalid by this Phase-1 IKE Tunnel. ')
cifIkeTunOutP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 11), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunOutP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunOutP2ExchgRejects.setDescription(' The total number of Phase-2 exchanges sent and rejected by this Phase-1 IKE Tunnel. ')
cifIkeTunInNewGrpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 12), Counter32()).setUnits('Negotiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunInNewGrpReqs.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunInNewGrpReqs.setDescription(' The total number of New Group exchanges initiated remotely using this IKE tunnel. ')
cifIkeTunOutNewGrpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 13), Counter32()).setUnits('Negotiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunOutNewGrpReqs.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunOutNewGrpReqs.setDescription(' The total number of New Group exchanges initiated locally using this IKE tunnel. ')
cifIkeTunInNewGrpRejectedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 14), Counter32()).setUnits('Negotiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunInNewGrpRejectedReqs.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunInNewGrpRejectedReqs.setDescription(' The total number of New Group exchanges initiated remotely using this IKE tunnel that ended in reject. ')
cifIkeTunOutNewGrpRejectedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 15), Counter32()).setUnits('Negotiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunOutNewGrpRejectedReqs.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunOutNewGrpRejectedReqs.setDescription(' The total number of New Group exchanges initiated locally using this IKE tunnel that ended in reject. ')
cifIkeTunInConfigs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 16), Counter32()).setUnits('Mode Configuration Setting Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunInConfigs.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunInConfigs.setDescription(' The total number of Mode Configuration settings received (either CFG_REPLY or CFG_SET payloads) by the local entity on the ISAKMP SA represented by this IKE tunnel. ')
cifIkeTunOutConfigs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 17), Counter32()).setUnits('Mode Configuration Setting Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunOutConfigs.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunOutConfigs.setDescription(' The total number of Mode Configuration settings dispatched (either CFG_REPLY or CFG_SET payloads) by the local entity on the ISAKMP SA represented by this IKE tunnel. ')
cifIkeTunInConfigRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 18), Counter32()).setUnits('Mode Configuration Setting Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunInConfigRejects.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunInConfigRejects.setDescription(' The total number of Mode Configuration settings which were received (either CFG_REPLY or CFG_SET payloads) and rejected by this entity using the ISAKMP SA represented by this IKE tunnel. ')
cifIkeTunOutConfigRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 1, 3, 1, 19), Counter32()).setUnits('Mode Configuration Setting Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunOutConfigRejects.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunOutConfigRejects.setDescription(' The total number of Mode Configuration settings which were dispatched (either CFG_REPLY or CFG_SET payloads) by this entity and were rejected by the peer (client) using the ISAKMP SA represented by this IKE tunnel. ')
cifIkeTunnelHistTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1), )
if mibBuilder.loadTexts: cifIkeTunnelHistTable.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunnelHistTable.setDescription(" The Phase-1 Internet Key Exchange Tunnel history table. This table is conceptually a sliding window in which only the last 'N' entries are maintained, where 'N' is the value of the object 'cisgIpsSgHistTableSize' (defined in defined in CISCO-IPSEC-SIGNALING-MIB). If the value of 'cisgIpsSgHistTableSize' is 0, then this table will be empty. For all the counter objects in the table below, initially when the Tunnel entry appears in this table, they would contain a value of zero. ")
cifIkeTunnelHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgProtocol"), (0, "CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgTunHistIndex"))
if mibBuilder.loadTexts: cifIkeTunnelHistEntry.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunnelHistEntry.setDescription(" Each entry contains the attributes associated with a previously active Phase-1 IKE Tunnel. This table has a sparse table relationship with the generic Phase-1 Tunnel history table 'cisgIpsSgTunnelHistTable' defined in CISCO-IPSEC-SIGNALING-MIB. However, the value of the index column in this table will always be either 'cpIkev1' or 'cpIkev2'. ")
cifIkeTunHistNegoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 1), CIPsecIkeNegoMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistNegoMode.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistNegoMode.setDescription(' The negotiation mode of the Phase-1 IKE Tunnel. ')
cifIkeTunHistDHGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 2), CIPsecDiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistDHGrp.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistDHGrp.setDescription(' The Diffie Hellman Group used in Phase-1 IKE negotiations. ')
cifIkeTunHistTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 3), Counter32()).setUnits('QM Exchanges').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistTotalRefreshes.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistTotalRefreshes.setDescription(' The total number of security associations refreshes performed. ')
cifIkeTunHistTotalSas = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 4), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistTotalSas.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistTotalSas.setDescription(' The total number of security associations used during the life of the Phase-1 IKE Tunnel. ')
cifIkeTunHistInP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 5), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistInP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistInP2Exchgs.setDescription(' The total number of Phase-2 exchanges received by this Phase-1 IKE Tunnel. ')
cifIkeTunHistInP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 6), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistInP2ExchgInvalids.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistInP2ExchgInvalids.setDescription(' The total number of Phase-2 exchanges received on this tunnel that were found to contain references to unrecognized security parameters. ')
cifIkeTunHistInP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 7), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistInP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistInP2ExchgRejects.setDescription(' The total number of Phase-2 exchanges received on this tunnel that were validated but were rejected by the local policy. ')
cifIkeTunHistOutP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 8), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistOutP2Exchgs.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistOutP2Exchgs.setDescription(' The total number of Phase-2 security association delete requests received by this Phase-1 IKE Tunnel. ')
cifIkeTunHistOutP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 9), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistOutP2ExchgInvalids.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistOutP2ExchgInvalids.setDescription(' The total number of Phase-2 exchanges sent by this Phase-1 IKE Tunnel. ')
cifIkeTunHistOutP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 10), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistOutP2ExchgRejects.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistOutP2ExchgRejects.setDescription(' The total number of Phase-2 exchanges sent on this tunnel that were rejected by the peer, because it contained references to security parameters not recognized by the peer. ')
cifIkeTunHistInNewGrpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 11), Counter32()).setUnits('Negotiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistInNewGrpReqs.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistInNewGrpReqs.setDescription(' The total number of New Group exchanges initiated remotely using this IKE tunnel during its lifetime. ')
cifIkeTunHistOutNewGrpReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 12), Counter32()).setUnits('Negotiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistOutNewGrpReqs.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistOutNewGrpReqs.setDescription(' The total number of New Group exchanges initiated locally using this IKE tunnel during its lifetime. ')
cifIkeTunHistInNewGrpRejectReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 13), Counter32()).setUnits('Negotiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistInNewGrpRejectReqs.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistInNewGrpRejectReqs.setDescription(' The total number of New Group exchanges initiated remotely using this IKE tunnel during its lifetime that ended in reject. ')
cifIkeTunHistOutNewGrpRejectReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 14), Counter32()).setUnits('Negotiations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistOutNewGrpRejectReqs.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistOutNewGrpRejectReqs.setDescription(' The total number of New Group exchanges initiated locally using this IKE tunnel during its lifetime that ended in reject. ')
cifIkeTunHistInConfigs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 15), Counter32()).setUnits('Mode Configuration Setting Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistInConfigs.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistInConfigs.setDescription(' The total number of Mode Configuration settings received (either CFG_REPLY or CFG_SET payloads) by the local entity on the ISAKMP SA represented by this IKE tunnel. ')
cifIkeTunHistOutConfigs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 16), Counter32()).setUnits('Mode Configuration Setting Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistOutConfigs.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistOutConfigs.setDescription(' The total number of Mode Configuration settings dispatched (either CFG_REPLY or CFG_SET payloads) by the local entity on the ISAKMP SA represented by this IKE tunnel. ')
cifIkeTunHistInConfigsRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 17), Counter32()).setUnits('Mode Configuration Setting Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistInConfigsRejects.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistInConfigsRejects.setDescription(' The total number of Mode Configuration settings which were received (either CFG_REPLY or CFG_SET payloads) and rejected by this entity using the ISAKMP SA represented by this IKE tunnel. ')
cifIkeTunHistOutConfigsRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 2, 1, 1, 18), Counter32()).setUnits('Mode Configuration Setting Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cifIkeTunHistOutConfigsRejects.setStatus('current')
if mibBuilder.loadTexts: cifIkeTunHistOutConfigsRejects.setDescription(' The total number of Mode Configuration settings which were dispatched (either CFG_REPLY or CFG_SET payloads) by this entity and were rejected by the peer (client) using the ISAKMP SA represented by this IKE tunnel. ')
cifIkeNotifCntlInNewGrpRejected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cifIkeNotifCntlInNewGrpRejected.setStatus('current')
if mibBuilder.loadTexts: cifIkeNotifCntlInNewGrpRejected.setDescription(" The generation of the 'ciscoIkeFlowInNewGrpRejected' notification is enabled if and only if this object has the value 'true'. ")
cifIkeNotifCntlOutNewGrpRejected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 429, 1, 3, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cifIkeNotifCntlOutNewGrpRejected.setStatus('current')
if mibBuilder.loadTexts: cifIkeNotifCntlOutNewGrpRejected.setDescription(" The generation of the 'ciscoIkeFlowOutNewGrpRejected' notification is enabled if and only if this object has the value 'true'. ")
ciscoIkeFlowInNewGrpRejected = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 429, 0, 1)).setObjects(("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailLocalAddress"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailRemoteAddress"))
if mibBuilder.loadTexts: ciscoIkeFlowInNewGrpRejected.setStatus('current')
if mibBuilder.loadTexts: ciscoIkeFlowInNewGrpRejected.setDescription(" This notification is generated when the managed entity receives and rejects an incoming new group proposal from an IKE peer identified by 'cisgIpsSgFailRemoteAddress'. 'cisgIpsSgFailLocalAddress' identifies the address of the local peer. The ISAKMP context of the exchange can be obtained from the IKE tunnel index which is contained in the index of the varbind objects of this trap. ")
ciscoIkeFlowOutNewGrpRejected = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 429, 0, 2)).setObjects(("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailLocalAddress"), ("CISCO-IPSEC-SIGNALING-MIB", "cisgIpsSgFailRemoteAddress"))
if mibBuilder.loadTexts: ciscoIkeFlowOutNewGrpRejected.setStatus('current')
if mibBuilder.loadTexts: ciscoIkeFlowOutNewGrpRejected.setDescription(" This notification is generated when the managed entity issues a new group proposal to the remote peer identified by 'cisgIpsSgFailRemoteAddress' and the peer rejects the proposal. 'cisgIpsSgFailLocalAddress' identifies the address of the local peer. The ISAKMP context of the exchange can be obtained from the IKE tunnel index which is contained in the index of the varbind objects of this trap. ")
ciscoIkeFlowMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 429, 2, 1))
ciscoIkeFlowMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 429, 2, 2))
ciscoIkeFlowMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 429, 2, 1, 1)).setObjects(("CISCO-IKE-FLOW-MIB", "ciscoIkeFlowActivityGroup"), ("CISCO-IKE-FLOW-MIB", "cifIkeFlowNewGroupGroup"), ("CISCO-IKE-FLOW-MIB", "cifIkeFlowXauthGroup"), ("CISCO-IKE-FLOW-MIB", "cifIkeFlowModeConfigGroup"), ("CISCO-IKE-FLOW-MIB", "cifIkeFlowHistoryGroup"), ("CISCO-IKE-FLOW-MIB", "cifIkeFlowNewGroupHistoryGroup"), ("CISCO-IKE-FLOW-MIB", "cifIkeFlowModeConfigHistoryGroup"), ("CISCO-IKE-FLOW-MIB", "cifIkeFlowNotificationGroup"), ("CISCO-IKE-FLOW-MIB", "cifIkeFlowNotifCntlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIkeFlowMIBCompliance = ciscoIkeFlowMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoIkeFlowMIBCompliance.setDescription('The compliance statement for SNMP entities implementing this MIB.')
ciscoIkeFlowActivityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 429, 2, 2, 1)).setObjects(("CISCO-IKE-FLOW-MIB", "cifIkeGlobalInP2Exchgs"), ("CISCO-IKE-FLOW-MIB", "cifIkeGlobalInP2ExchgInvalids"), ("CISCO-IKE-FLOW-MIB", "cifIkeGlobalInP2ExchgRejects"), ("CISCO-IKE-FLOW-MIB", "cifIkeGlobalOutP2Exchgs"), ("CISCO-IKE-FLOW-MIB", "cifIkeGlobalOutP2ExchgInvalids"), ("CISCO-IKE-FLOW-MIB", "cifIkeGlobalOutP2ExchgRejects"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunNegoMode"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunDHGrp"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunSaRefreshThreshold"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunTotalRefreshes"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunInP2Exchgs"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunInP2ExchgInvalids"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunInP2ExchgRejects"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunInP2SaDelRequests"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunOutP2Exchgs"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunOutP2ExchgInvalids"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunOutP2ExchgRejects"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIkeFlowActivityGroup = ciscoIkeFlowActivityGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIkeFlowActivityGroup.setDescription(' This group consists of objects that track the current IKE protocol activity: 1) IKE Global Objects 2) IKE Tunnel table. ')
if mibBuilder.loadTexts: ciscoIkeFlowActivityGroup.setReference(' rfc2408, rfc2407; rfc2409 section 5.1, 5.2, 5.3 and 5.4. ')
cifIkeFlowNewGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 429, 2, 2, 2)).setObjects(("CISCO-IKE-FLOW-MIB", "cifIkeGlobalInNewGrpReqs"), ("CISCO-IKE-FLOW-MIB", "cifIkeGlobalOutNewGrpReqs"), ("CISCO-IKE-FLOW-MIB", "cifIkeGlobalInNewGrpRejectReqs"), ("CISCO-IKE-FLOW-MIB", "cifIkeGlobalOutNewGrpRejectReqs"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunInNewGrpReqs"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunOutNewGrpReqs"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunInNewGrpRejectedReqs"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunOutNewGrpRejectedReqs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cifIkeFlowNewGroupGroup = cifIkeFlowNewGroupGroup.setStatus('current')
if mibBuilder.loadTexts: cifIkeFlowNewGroupGroup.setDescription(' This group consists of: 1) Global metrics about new group negotiations 2) IKE Tunnel-wise new group metrics ')
if mibBuilder.loadTexts: cifIkeFlowNewGroupGroup.setReference(' rfc2408, rfc2407; rfc2409 section 5.6. ')
cifIkeFlowXauthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 429, 2, 2, 3)).setObjects(("CISCO-IKE-FLOW-MIB", "cifIkeGlobalInXauths"), ("CISCO-IKE-FLOW-MIB", "cifIkeGlobalInXauthFailures"), ("CISCO-IKE-FLOW-MIB", "cifIkeGlobalOutXauthFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cifIkeFlowXauthGroup = cifIkeFlowXauthGroup.setStatus('current')
if mibBuilder.loadTexts: cifIkeFlowXauthGroup.setDescription(' This group consists of metrics pertaining to IKE extended authentication. Devices that do not support Xauth need not implement this group. ')
cifIkeFlowModeConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 429, 2, 2, 4)).setObjects(("CISCO-IKE-FLOW-MIB", "cifIkeTunInConfigs"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunOutConfigs"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunInConfigRejects"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunOutConfigRejects"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cifIkeFlowModeConfigGroup = cifIkeFlowModeConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cifIkeFlowModeConfigGroup.setDescription(' This group consists of metrics pertaining to IKE extended authentication. Devices that do not support Xauth need not implement this group. ')
cifIkeFlowHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 429, 2, 2, 5)).setObjects(("CISCO-IKE-FLOW-MIB", "cifIkeTunHistNegoMode"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunHistDHGrp"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunHistTotalRefreshes"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunHistTotalSas"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunHistInP2Exchgs"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunHistInP2ExchgInvalids"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunHistInP2ExchgRejects"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunHistOutP2Exchgs"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunHistOutP2ExchgInvalids"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunHistOutP2ExchgRejects"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cifIkeFlowHistoryGroup = cifIkeFlowHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: cifIkeFlowHistoryGroup.setDescription(' This group consists of the core (mandatory) objects pertaining to maintaining history of Internet Key Exchange protocol activity. ')
cifIkeFlowNewGroupHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 429, 2, 2, 6)).setObjects(("CISCO-IKE-FLOW-MIB", "cifIkeTunHistInNewGrpReqs"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunHistOutNewGrpReqs"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunHistInNewGrpRejectReqs"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunHistOutNewGrpRejectReqs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cifIkeFlowNewGroupHistoryGroup = cifIkeFlowNewGroupHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: cifIkeFlowNewGroupHistoryGroup.setDescription(' This group consists of archive of new group activity pertaining to expired IKE Phase-1 tunnels. ')
cifIkeFlowModeConfigHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 429, 2, 2, 7)).setObjects(("CISCO-IKE-FLOW-MIB", "cifIkeTunHistInConfigs"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunHistOutConfigs"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunHistInConfigsRejects"), ("CISCO-IKE-FLOW-MIB", "cifIkeTunHistOutConfigsRejects"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cifIkeFlowModeConfigHistoryGroup = cifIkeFlowModeConfigHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: cifIkeFlowModeConfigHistoryGroup.setDescription(' This group consists of archive of mode config activity pertaining to expired IKE Phase-1 Tunnels. ')
cifIkeFlowNotifCntlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 429, 2, 2, 8)).setObjects(("CISCO-IKE-FLOW-MIB", "cifIkeNotifCntlInNewGrpRejected"), ("CISCO-IKE-FLOW-MIB", "cifIkeNotifCntlOutNewGrpRejected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cifIkeFlowNotifCntlGroup = cifIkeFlowNotifCntlGroup.setStatus('current')
if mibBuilder.loadTexts: cifIkeFlowNotifCntlGroup.setDescription(' This group of objects controls the sending of notifications pertaining to Phase-1 IKE operations. ')
cifIkeFlowNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 429, 2, 2, 9)).setObjects(("CISCO-IKE-FLOW-MIB", "ciscoIkeFlowInNewGrpRejected"), ("CISCO-IKE-FLOW-MIB", "ciscoIkeFlowOutNewGrpRejected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cifIkeFlowNotificationGroup = cifIkeFlowNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cifIkeFlowNotificationGroup.setDescription(' This group contains the notifications pertaining to Phase-1 IKE operations. ')
cifIkeFlowNotificationGroup.setReference(' rfc2408, rfc2407; rfc2409 section 5.1, 5.2, 5.3 and 5.4. ')
mibBuilder.exportSymbols("CISCO-IKE-FLOW-MIB", ciscoIkeFlowMIBConform=ciscoIkeFlowMIBConform, cifIkeTunInConfigRejects=cifIkeTunInConfigRejects, cifIkeTunOutP2ExchgInvalids=cifIkeTunOutP2ExchgInvalids, cifIkeTunOutNewGrpRejectedReqs=cifIkeTunOutNewGrpRejectedReqs, cifIkeFlowModeConfigGroup=cifIkeFlowModeConfigGroup, cifIkeNotifControl=cifIkeNotifControl, cifIkeGlobalInNewGrpReqs=cifIkeGlobalInNewGrpReqs, cifIkeGlobalOutP2Exchgs=cifIkeGlobalOutP2Exchgs, cifIkeFlowNotifCntlGroup=cifIkeFlowNotifCntlGroup, ciscoIkeFlowMIBGroups=ciscoIkeFlowMIBGroups, cifIkeTunOutConfigRejects=cifIkeTunOutConfigRejects, cifIkeTunInConfigs=cifIkeTunInConfigs, cifIkeTunInP2SaDelRequests=cifIkeTunInP2SaDelRequests, cifIkeTunHistInP2Exchgs=cifIkeTunHistInP2Exchgs, cifIkeTunOutP2ExchgRejects=cifIkeTunOutP2ExchgRejects, cifIkeTunInP2Exchgs=cifIkeTunInP2Exchgs, cifIkeGlobalInXauths=cifIkeGlobalInXauths, cifIkeTunHistOutP2Exchgs=cifIkeTunHistOutP2Exchgs, cifIkeTunInP2ExchgRejects=cifIkeTunInP2ExchgRejects, cifIkeTunHistTotalRefreshes=cifIkeTunHistTotalRefreshes, cifIkeTunOutP2Exchgs=cifIkeTunOutP2Exchgs, PYSNMP_MODULE_ID=ciscoIkeFlowMIB, ciscoIkeFlowOutNewGrpRejected=ciscoIkeFlowOutNewGrpRejected, ciscoIkeFlowMIBNotifs=ciscoIkeFlowMIBNotifs, cifIkeTunHistDHGrp=cifIkeTunHistDHGrp, ciscoIkeFlowMIBObjects=ciscoIkeFlowMIBObjects, ciscoIkeFlowActivityGroup=ciscoIkeFlowActivityGroup, cifIkeGlobalOutXauthFailures=cifIkeGlobalOutXauthFailures, cifIkeTunnelHistEntry=cifIkeTunnelHistEntry, cifIkeTunHistInNewGrpReqs=cifIkeTunHistInNewGrpReqs, cifIkeGlobalInP2ExchgInvalids=cifIkeGlobalInP2ExchgInvalids, cifIkeTunHistOutP2ExchgInvalids=cifIkeTunHistOutP2ExchgInvalids, cifIkeTunHistInConfigsRejects=cifIkeTunHistInConfigsRejects, cifIkeTunHistOutConfigsRejects=cifIkeTunHistOutConfigsRejects, cifIkeGlobalInP2Exchgs=cifIkeGlobalInP2Exchgs, cifIkeTunHistOutConfigs=cifIkeTunHistOutConfigs, cifIkeGlobalStatsEntry=cifIkeGlobalStatsEntry, cifIkeCurrentActivity=cifIkeCurrentActivity, cifIkeTunSaRefreshThreshold=cifIkeTunSaRefreshThreshold, cifIkeTunTotalRefreshes=cifIkeTunTotalRefreshes, cifIkeGlobalInXauthFailures=cifIkeGlobalInXauthFailures, cifIkeTunInNewGrpRejectedReqs=cifIkeTunInNewGrpRejectedReqs, cifIkeTunHistTotalSas=cifIkeTunHistTotalSas, cifIkeGlobalInP2ExchgRejects=cifIkeGlobalInP2ExchgRejects, cifIkeGlobalOutP2ExchgInvalids=cifIkeGlobalOutP2ExchgInvalids, cifIkeFlowNewGroupHistoryGroup=cifIkeFlowNewGroupHistoryGroup, cifIkeFlowModeConfigHistoryGroup=cifIkeFlowModeConfigHistoryGroup, cifIkeFlowHistoryGroup=cifIkeFlowHistoryGroup, cifIkeTunOutNewGrpReqs=cifIkeTunOutNewGrpReqs, cifIkeTunHistNegoMode=cifIkeTunHistNegoMode, cifIkeGlobalOutNewGrpReqs=cifIkeGlobalOutNewGrpReqs, cifIkeFlowNotificationGroup=cifIkeFlowNotificationGroup, cifIkeTunHistInP2ExchgInvalids=cifIkeTunHistInP2ExchgInvalids, cifIkeTunHistOutNewGrpReqs=cifIkeTunHistOutNewGrpReqs, cifIkeGlobalInNewGrpRejectReqs=cifIkeGlobalInNewGrpRejectReqs, cifIkeHistory=cifIkeHistory, cifIkeTunHistInP2ExchgRejects=cifIkeTunHistInP2ExchgRejects, ciscoIkeFlowMIBCompliance=ciscoIkeFlowMIBCompliance, cifIkeTunHistOutNewGrpRejectReqs=cifIkeTunHistOutNewGrpRejectReqs, cifIkeNotifCntlOutNewGrpRejected=cifIkeNotifCntlOutNewGrpRejected, cifIkeTunInP2ExchgInvalids=cifIkeTunInP2ExchgInvalids, cifIkeTunHistOutP2ExchgRejects=cifIkeTunHistOutP2ExchgRejects, cifIkeTunnelEntry=cifIkeTunnelEntry, cifIkeTunnelTable=cifIkeTunnelTable, cifIkeGlobalOutNewGrpRejectReqs=cifIkeGlobalOutNewGrpRejectReqs, cifIkeTunnelHistTable=cifIkeTunnelHistTable, ciscoIkeFlowInNewGrpRejected=ciscoIkeFlowInNewGrpRejected, cifIkeGlobalStatsTable=cifIkeGlobalStatsTable, cifIkeFlowNewGroupGroup=cifIkeFlowNewGroupGroup, ciscoIkeFlowMIB=ciscoIkeFlowMIB, cifIkeNotifCntlInNewGrpRejected=cifIkeNotifCntlInNewGrpRejected, ciscoIkeFlowMIBCompliances=ciscoIkeFlowMIBCompliances, cifIkeTunInNewGrpReqs=cifIkeTunInNewGrpReqs, cifIkeTunHistInConfigs=cifIkeTunHistInConfigs, cifIkeTunOutConfigs=cifIkeTunOutConfigs, cifIkeGlobalOutP2ExchgRejects=cifIkeGlobalOutP2ExchgRejects, cifIkeTunHistInNewGrpRejectReqs=cifIkeTunHistInNewGrpRejectReqs, cifIkeTunDHGrp=cifIkeTunDHGrp, cifIkeTunNegoMode=cifIkeTunNegoMode, cifIkeFlowXauthGroup=cifIkeFlowXauthGroup)
