#
# PySNMP MIB module CISCO-IETF-ISIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-ISIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:00:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
IndexIntegerNextFree, = mibBuilder.importSymbols("DIFFSERV-MIB", "IndexIntegerNextFree")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressPrefixLength")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, MibIdentifier, ModuleIdentity, TimeTicks, Counter32, iso, Counter64, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Counter32", "iso", "Counter64", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "IpAddress", "Gauge32")
DisplayString, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "TextualConvention")
ciscoIetfIsisMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 118))
ciscoIetfIsisMIB.setRevisions(('2005-08-16 12:00', '2005-02-08 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIetfIsisMIB.setRevisionsDescriptions(('Corrected DESCRIPTION clause for ciiAreaAddrTable, ciiAreaAddrEntry, ciiAreaAddr and for ciiSysLevelOverloadState based on similar definitions in draft-ietf-isis-wg-mib-18.txt.', 'Initial version.',))
if mibBuilder.loadTexts: ciscoIetfIsisMIB.setLastUpdated('200508161200Z')
if mibBuilder.loadTexts: ciscoIetfIsisMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIetfIsisMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-clns@cisco.com')
if mibBuilder.loadTexts: ciscoIetfIsisMIB.setDescription('This document describes a management information base for the IS-IS Routing protocol, as described in ISO 10589, when it is used to construct routing tables for IP networks, as described in RFC 1195. This MIB is entirely based upon the IETF draft draft-ietf-isis-wg-mib-16.')
ciscoIetfIsisMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 0))
ciscoIetfIsisMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 1))
ciscoIetfIsisMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 2))
ciiSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1))
ciiSysLevel = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 2))
ciiCirc = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3))
ciiCircLevelValues = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4))
ciiCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5))
ciiISAdj = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6))
ciiReachAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 7))
ciiIPReachAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8))
ciiLSPDataBase = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9))
ciiNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 10))
class CiiOSINSAddress(TextualConvention, OctetString):
    description = 'OSI Network Service Address, e.g. NSAP, SNPA, or Network Entity Title'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

class CiiSystemID(TextualConvention, OctetString):
    description = 'A system ID.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class CiiLinkStatePDUID(TextualConvention, OctetString):
    description = 'A Link State PDU Identifier.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), )
class CiiAdminState(TextualConvention, Integer32):
    description = 'Type used in enabling and disabling a row. Values match those in RFC 2863.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class CiiLSPBuffSize(TextualConvention, Integer32):
    description = 'Integer sub range for LSP size.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(512, 16000)

class CiiLevelState(TextualConvention, Integer32):
    description = 'States of the IS-IS protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("off", 1), ("on", 2), ("waiting", 3), ("overloaded", 4))

class CiiSupportedProtocol(TextualConvention, Integer32):
    description = 'Types of network protocol supported by Integrated IS-IS. The values for ISO8473 and IP are those registered for these protocols in ISO TR9577.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(129, 142, 204))
    namedValues = NamedValues(("iso8473", 129), ("ipV6", 142), ("ip", 204))

class CiiDefaultMetric(TextualConvention, Integer32):
    description = "Integer sub-range for default metric for single hop. ISO 10589 provides for 4 types of metric. Only the 'default' metric is used in practice."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 63)

class CiiWideMetric(TextualConvention, Unsigned32):
    description = 'Wide Metric for IS Neighbors. ISO 10589 provides a 6 bit metric. Traffic Engineering extensions provide 24 bit metrics.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 16777215)

class CiiFullMetric(TextualConvention, Unsigned32):
    description = 'Full Metric for IP Routes. Traffic Engineering extensions provide 32 bit metrics.'
    status = 'current'

class CiiMetricType(TextualConvention, Integer32):
    description = 'Is this an Internal or External Metric?'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("internal", 1), ("external", 2))

class CiiMetricStyle(TextualConvention, Integer32):
    description = 'Do we use 1195 style Metrics or wide metrics.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("narrow", 1), ("wide", 2), ("both", 3))

class CiiISLevel(TextualConvention, Integer32):
    description = 'Identifies a level.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("area", 1), ("domain", 2))

class CiiPDUHeader(TextualConvention, OctetString):
    description = 'A block to contain the header from a PDU.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

class CiiCircuitID(TextualConvention, OctetString):
    description = 'ID for a circuit.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(7, 7), )
class CiiISPriority(TextualConvention, Integer32):
    description = 'Integer sub-range for IS-IS priority.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 127)

class CiiUnsigned16TC(TextualConvention, Unsigned32):
    description = 'An Unsigned32 further restricted to 16 Bits. Note that the ASN.1 BER encoding may still require 24 Bits for some values.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class CiiUnsigned8TC(TextualConvention, Unsigned32):
    description = 'An Unsigned32 further restricted to 8 Bits. Note that the ASN.1 BER encoding may still require 16 Bits for some values.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 255)

ciiSysObject = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 1))
ciiSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unknown", 0), ("one", 1))).clone('one')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiSysVersion.setReference('{ISIS.aoi version (1)}')
if mibBuilder.loadTexts: ciiSysVersion.setStatus('current')
if mibBuilder.loadTexts: ciiSysVersion.setDescription('The version number of the IS-IS protocol that is implemented.')
ciiSysType = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2), ("level1L2IS", 3))).clone('level1L2IS')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysType.setReference('{ISIS.aoi iSType (2)}')
if mibBuilder.loadTexts: ciiSysType.setStatus('current')
if mibBuilder.loadTexts: ciiSysType.setDescription('At which levels is the Intermediate System running? This object follows the replaceOnlyWhileDisabled behavior.')
ciiSysID = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 1, 3), CiiSystemID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysID.setReference('{ISIS.aoi systemId (119)}')
if mibBuilder.loadTexts: ciiSysID.setStatus('current')
if mibBuilder.loadTexts: ciiSysID.setDescription('The ID for this Intermediate System. This value is appended to each of the area addresses to form the Network Entity Titles. The derivation of a value for this object is implementation-specific. Some implementations may automatically assign values and not permit an SNMP write, while others may require the value to be set manually.')
ciiSysMaxPathSplits = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysMaxPathSplits.setReference('{ISIS.aoi maximumPathSplits (3)}')
if mibBuilder.loadTexts: ciiSysMaxPathSplits.setStatus('current')
if mibBuilder.loadTexts: ciiSysMaxPathSplits.setDescription('Maximum number of paths with equal routing metric value which it is permitted to split between. This object follows the replaceOnlyWhileDisabled behavior.')
ciiSysMaxLSPGenInt = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65235)).clone(900)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysMaxLSPGenInt.setReference('{ISIS.aoi maximumLSPGenerationInterval (6)}')
if mibBuilder.loadTexts: ciiSysMaxLSPGenInt.setStatus('current')
if mibBuilder.loadTexts: ciiSysMaxLSPGenInt.setDescription('Maximum interval, in seconds, between generated LSPs by this Intermediate System. This object follows the resettingTimer behavior. The value must be greater than any value configured for ciiSysLevelMinLSPGenInt, and should be at least 300 seconds less than ciiSysMaxAge.')
ciiSysPollESHelloRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 1, 6), CiiUnsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysPollESHelloRate.setReference('{ISIS.aoi pollESHelloRate (13)}')
if mibBuilder.loadTexts: ciiSysPollESHelloRate.setStatus('current')
if mibBuilder.loadTexts: ciiSysPollESHelloRate.setDescription('The value, in seconds, to be used for the suggested ES configuration timer in ISH PDUs when soliciting the ES configuration.')
ciiSysWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 1, 7), CiiUnsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysWaitTime.setReference('{ISIS.aoi waitingTime (15)}')
if mibBuilder.loadTexts: ciiSysWaitTime.setStatus('current')
if mibBuilder.loadTexts: ciiSysWaitTime.setDescription("Number of seconds to delay in 'waiting' state before entering 'on' state. This object follows the resettingTimer behavior.")
ciiSysAdminState = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 1, 8), CiiAdminState().clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysAdminState.setStatus('current')
if mibBuilder.loadTexts: ciiSysAdminState.setDescription("The administrative state of this Intermediate System. Setting this object to the value 'on' when its current value is 'off' enables the Intermediate System.")
ciiSysL2toL1Leaking = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysL2toL1Leaking.setStatus('current')
if mibBuilder.loadTexts: ciiSysL2toL1Leaking.setDescription('If true, allow the router to leak L2 routes into L1.')
ciiSysMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 1, 10), CiiUnsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(350, 65535)).clone(1200)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysMaxAge.setStatus('current')
if mibBuilder.loadTexts: ciiSysMaxAge.setDescription('Value to place in RemainingLifeTime field of the LSPs we generate. This should be at least 300 seconds greater than ciiSysMaxLSPGenInt.')
ciiSysReceiveLSPBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 1, 11), CiiUnsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1492, 16000)).clone(1492)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysReceiveLSPBufferSize.setStatus('current')
if mibBuilder.loadTexts: ciiSysReceiveLSPBufferSize.setDescription('Size of the largest Buffer we are designed or configured to store. This should be at least as big as the maximum ciiSysLevelOrigLSPBuffSize supported by the system. If resources allow, we will store and flood LSPs larger than ciiSysReceiveLSPBufferSize, as this can help avoid problems in networks with different values for ciiSysLevelOrigLSPBuffSize.')
ciiManAreaAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 2), )
if mibBuilder.loadTexts: ciiManAreaAddrTable.setReference('{ISIS.aoi manualAreaAddresses (10)}')
if mibBuilder.loadTexts: ciiManAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: ciiManAreaAddrTable.setDescription('The set of manual area addresses configured on this Intermediate System.')
ciiManAreaAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiManAreaAddr"))
if mibBuilder.loadTexts: ciiManAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ciiManAreaAddrEntry.setDescription('Each entry contains one area address manually configured on this system')
ciiManAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 2, 1, 1), CiiOSINSAddress())
if mibBuilder.loadTexts: ciiManAreaAddr.setStatus('current')
if mibBuilder.loadTexts: ciiManAreaAddr.setDescription('A manually configured area address for this system. This object follows the index behavior. Note: an index for the entry {1, {49.0001} active} in this table would be the ordered pair (1, (0x03 0x49 0x00 0x01)), as the length of an Octet string is part of the OID.')
ciiManAreaAddrExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiManAreaAddrExistState.setStatus('current')
if mibBuilder.loadTexts: ciiManAreaAddrExistState.setDescription("The state of the ciiManAreaAddrEntry. This object follows the Row Status behavior. If the ciiSysAdminState for this Intermediate System is 'on', and an attempt is made to set this object to the value 'destroy' or 'notInService' when this is the only ciiManAreaAddrEntry in state 'active' for this Intermediate System should return inconsistentValue.")
ciiAreaAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 3), )
if mibBuilder.loadTexts: ciiAreaAddrTable.setReference('{ISIS.aoi areaAddresses (18)}')
if mibBuilder.loadTexts: ciiAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: ciiAreaAddrTable.setDescription('The union of the sets of area addresses reported in all Level 1 LSPs with fragment number zero generated by this Intermediate System, or received from other Intermediate Systems which are reachable via Level 1 routing.')
ciiAreaAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiAreaAddr"))
if mibBuilder.loadTexts: ciiAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ciiAreaAddrEntry.setDescription('Each entry contains one area address reported in a Level 1 LSP generated or received by this Intermediate System.')
ciiAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 3, 1, 1), CiiOSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiAreaAddr.setStatus('current')
if mibBuilder.loadTexts: ciiAreaAddr.setDescription('An area address reported in a Level 1 LSP.')
ciiSysProtSuppTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 4), )
if mibBuilder.loadTexts: ciiSysProtSuppTable.setStatus('current')
if mibBuilder.loadTexts: ciiSysProtSuppTable.setDescription('This table contains the manually configured set of protocols supported by this Intermediate System.')
ciiSysProtSuppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiSysProtSuppProtocol"))
if mibBuilder.loadTexts: ciiSysProtSuppEntry.setStatus('current')
if mibBuilder.loadTexts: ciiSysProtSuppEntry.setDescription('Each entry contains one protocol supported by this Intermediate System.')
ciiSysProtSuppProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 4, 1, 1), CiiSupportedProtocol())
if mibBuilder.loadTexts: ciiSysProtSuppProtocol.setStatus('current')
if mibBuilder.loadTexts: ciiSysProtSuppProtocol.setDescription('One supported protocol. This object follows the index behavior.')
ciiSysProtSuppExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiSysProtSuppExistState.setStatus('current')
if mibBuilder.loadTexts: ciiSysProtSuppExistState.setDescription('The state of the ciiSysProtSuppEntry. This object follows the RowStatus behavior.')
ciiSummAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 5), )
if mibBuilder.loadTexts: ciiSummAddrTable.setStatus('current')
if mibBuilder.loadTexts: ciiSummAddrTable.setDescription('The set of IP summary addresses to use in forming summary TLVs originated by this Intermediate System. An administrator may use a summary address to combine and modify IP Reachability announcements. If the Intermediate system can reach any subset of the summary address, the summary address will be announced instead, at the configured metric.')
ciiSummAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiSummAddressType"), (0, "CISCO-IETF-ISIS-MIB", "ciiSummAddress"), (0, "CISCO-IETF-ISIS-MIB", "ciiSummAddrPrefixLen"))
if mibBuilder.loadTexts: ciiSummAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ciiSummAddrEntry.setDescription('Each entry contains one IP summary address.')
ciiSummAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ciiSummAddressType.setStatus('current')
if mibBuilder.loadTexts: ciiSummAddressType.setDescription('The Type of IP address for this summary address. This object follows the index behavior.')
ciiSummAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 5, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: ciiSummAddress.setStatus('current')
if mibBuilder.loadTexts: ciiSummAddress.setDescription('The IP Address value for this summary address. This object follows the index behavior.')
ciiSummAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 5, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: ciiSummAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: ciiSummAddrPrefixLen.setDescription('The Length of the IP NetMask for this summary address.')
ciiSummAddrExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiSummAddrExistState.setStatus('current')
if mibBuilder.loadTexts: ciiSummAddrExistState.setDescription('The existence state of this summary address. This object follows the row status behavior.')
ciiSummAddrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 5, 1, 5), CiiDefaultMetric().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiSummAddrMetric.setStatus('current')
if mibBuilder.loadTexts: ciiSummAddrMetric.setDescription('The metric value to announce this summary address with in LSPs generated by this system.')
ciiSummAddrFullMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 5, 1, 6), CiiFullMetric().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiSummAddrFullMetric.setStatus('current')
if mibBuilder.loadTexts: ciiSummAddrFullMetric.setDescription('The wide metric value to announce this summary address with in LSPs generated by this system.')
ciiRedistributeAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 6), )
if mibBuilder.loadTexts: ciiRedistributeAddrTable.setStatus('current')
if mibBuilder.loadTexts: ciiRedistributeAddrTable.setDescription('This table provides criteria to decide if a route should be leaked from L2 to L1 when Domain Wide Prefix leaking is enabled. Addresses that match the summary mask in the table will be announced at L1 by routers when ciiSysL2toL1Leaking is enabled. Routes that fall into the ranges specified are announced as is, without being summarized. Routes that do not match a summary mask are not announced.')
ciiRedistributeAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiRedistributeAddrType"), (0, "CISCO-IETF-ISIS-MIB", "ciiRedistributeAddrAddress"), (0, "CISCO-IETF-ISIS-MIB", "ciiRedistributeAddrPrefixLen"))
if mibBuilder.loadTexts: ciiRedistributeAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ciiRedistributeAddrEntry.setDescription('Each entry contains one IP summary address to manage leaking L2 addresses into L1.')
ciiRedistributeAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ciiRedistributeAddrType.setStatus('current')
if mibBuilder.loadTexts: ciiRedistributeAddrType.setDescription('The Type of IP address for this summary address. This object follows the index behavior.')
ciiRedistributeAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 6, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: ciiRedistributeAddrAddress.setStatus('current')
if mibBuilder.loadTexts: ciiRedistributeAddrAddress.setDescription('The IP Address value for this summary address. This object follows the index behavior.')
ciiRedistributeAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 6, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: ciiRedistributeAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: ciiRedistributeAddrPrefixLen.setDescription('The Length of the IP NetMask for this summary address.')
ciiRedistributeAddrExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiRedistributeAddrExistState.setStatus('current')
if mibBuilder.loadTexts: ciiRedistributeAddrExistState.setDescription('The existence state of this summary address. This object follows the row status behavior.')
ciiRouterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 7), )
if mibBuilder.loadTexts: ciiRouterTable.setStatus('current')
if mibBuilder.loadTexts: ciiRouterTable.setDescription('The set of hostnames and router ID.')
ciiRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiRouterSysID"), (0, "CISCO-IETF-ISIS-MIB", "ciiRouterLevel"))
if mibBuilder.loadTexts: ciiRouterEntry.setStatus('current')
if mibBuilder.loadTexts: ciiRouterEntry.setDescription('Each entry tracks information about one peer at one level.')
ciiRouterSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 7, 1, 1), CiiSystemID())
if mibBuilder.loadTexts: ciiRouterSysID.setStatus('current')
if mibBuilder.loadTexts: ciiRouterSysID.setDescription('The System ID of the Router Peer.')
ciiRouterLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 7, 1, 2), CiiISLevel())
if mibBuilder.loadTexts: ciiRouterLevel.setStatus('current')
if mibBuilder.loadTexts: ciiRouterLevel.setDescription('The level of this Intermediate System.')
ciiRouterHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 7, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiRouterHostName.setStatus('current')
if mibBuilder.loadTexts: ciiRouterHostName.setDescription('The hostname listed in LSP, or zero-length string if none.')
ciiRouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 1, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiRouterID.setStatus('current')
if mibBuilder.loadTexts: ciiRouterID.setDescription('The Router ID of the Peer found in LSP, or zero if none.')
ciiSysLevelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 2, 1), )
if mibBuilder.loadTexts: ciiSysLevelTable.setStatus('current')
if mibBuilder.loadTexts: ciiSysLevelTable.setDescription('Level specific information about the System.')
ciiSysLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiSysLevelIndex"))
if mibBuilder.loadTexts: ciiSysLevelEntry.setStatus('current')
if mibBuilder.loadTexts: ciiSysLevelEntry.setDescription('Describe variables defined for Area or Domain.')
ciiSysLevelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2))))
if mibBuilder.loadTexts: ciiSysLevelIndex.setStatus('current')
if mibBuilder.loadTexts: ciiSysLevelIndex.setDescription('The level that this entry describes.')
ciiSysLevelOrigLSPBuffSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 2, 1, 1, 2), CiiLSPBuffSize().clone(1492)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysLevelOrigLSPBuffSize.setReference('{ISIS.aoi originatingL1LSPBufferSize (9)}')
if mibBuilder.loadTexts: ciiSysLevelOrigLSPBuffSize.setStatus('current')
if mibBuilder.loadTexts: ciiSysLevelOrigLSPBuffSize.setDescription('The maximum size of LSPs and SNPs originated by this Intermediate System at this level. This object follows the replaceOnlyWhileDisabled behavior.')
ciiSysLevelMinLSPGenInt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 2, 1, 1, 3), CiiUnsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysLevelMinLSPGenInt.setReference('{ISIS.aoi minimumLSPGenerationInterval (11)}')
if mibBuilder.loadTexts: ciiSysLevelMinLSPGenInt.setStatus('current')
if mibBuilder.loadTexts: ciiSysLevelMinLSPGenInt.setDescription('Minimum interval, in seconds, between successive generation of LSPs with the same LSPID at this level by this Intermediate System. This object follows the resettingTimer behavior.')
ciiSysLevelOverloadState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 2, 1, 1, 4), CiiLevelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiSysLevelOverloadState.setReference('{ISIS.aoi l1State (17)}')
if mibBuilder.loadTexts: ciiSysLevelOverloadState.setStatus('current')
if mibBuilder.loadTexts: ciiSysLevelOverloadState.setDescription("The state of the database at this level. The value 'off' indicates that IS-IS is not active at this level. The value 'on' indicates that IS-IS is active at this level, and not overloaded. The value 'waiting' indicates a database that is low on an essential resource, such as memory. The administrator may force the state to 'overloaded' by setting the object ciiSysLevelSetOverload. If the state is 'waiting' or 'overloaded', we originate LSPs with the Overload bit set.")
ciiSysLevelSetOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 2, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysLevelSetOverload.setStatus('current')
if mibBuilder.loadTexts: ciiSysLevelSetOverload.setDescription('Administratively set the overload bit for the level. The overload bit will continue to be set if the implementation runs out of memory, independent of this variable')
ciiSysLevelSetOverloadUntil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysLevelSetOverloadUntil.setStatus('current')
if mibBuilder.loadTexts: ciiSysLevelSetOverloadUntil.setDescription('If set, the overload bit should be set, and cleared after sysUpTime exceeds this value.')
ciiSysLevelMetricStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 2, 1, 1, 7), CiiMetricStyle().clone('narrow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysLevelMetricStyle.setStatus('current')
if mibBuilder.loadTexts: ciiSysLevelMetricStyle.setDescription('Which style of Metric do we generate in our LSPs at this level? This object follows the replaceOnlyWhileDisabled behavior.')
ciiSysLevelSPFConsiders = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 2, 1, 1, 8), CiiMetricStyle().clone('narrow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysLevelSPFConsiders.setStatus('current')
if mibBuilder.loadTexts: ciiSysLevelSPFConsiders.setDescription('Which style of Metric do we consider in our SPF computation at this level?')
ciiSysLevelTEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 2, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiSysLevelTEEnabled.setStatus('current')
if mibBuilder.loadTexts: ciiSysLevelTEEnabled.setDescription('Do we do Traffic Engineering at this level?')
ciiNextCircIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 1), IndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiNextCircIndex.setStatus('current')
if mibBuilder.loadTexts: ciiNextCircIndex.setDescription("This object is used to assign values to ciiCircIndex as described in 'Textual Conventions for SNMPv2'. The network manager reads this object, and then writes the value back as the ciiCircIndex in a SET that creates a new instance of ciiCircEntry. If the SET fails with the code 'inconsistentValue', then the process must be repeated; If the SET succeeds, then the object is incremented, and the new ciiCircEntry is created according to the manager's directions.")
ciiCircTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2), )
if mibBuilder.loadTexts: ciiCircTable.setStatus('current')
if mibBuilder.loadTexts: ciiCircTable.setDescription('The table of circuits used by this Intermediate System.')
ciiCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiCircIndex"))
if mibBuilder.loadTexts: ciiCircEntry.setStatus('current')
if mibBuilder.loadTexts: ciiCircEntry.setDescription('An ciiCircEntry exists for each circuit used by Integrated IS-IS on this system.')
ciiCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ciiCircIndex.setStatus('current')
if mibBuilder.loadTexts: ciiCircIndex.setDescription('The identifier of this circuit, unique within the Intermediate System. This object follows the index behavior. This is for SNMP Indexing purposes only and need not have any relation to any protocol value.')
ciiCircIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiCircIfIndex.setStatus('current')
if mibBuilder.loadTexts: ciiCircIfIndex.setDescription('The value of ifIndex for the interface to which this circuit corresponds. This object cannot be modified after creation')
ciiCircIfSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiCircIfSubIndex.setStatus('current')
if mibBuilder.loadTexts: ciiCircIfSubIndex.setDescription('A specifier for the part of the interface ifIndex to which this circuit corresponds, such as a DLCI or VPI/VCI. This object cannot be modified after creation')
ciiCircAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2, 1, 4), CiiAdminState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiCircAdminState.setStatus('current')
if mibBuilder.loadTexts: ciiCircAdminState.setDescription('The administrative state of the circuit. This object follows the CiiAdminState behavior.')
ciiCircExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiCircExistState.setStatus('current')
if mibBuilder.loadTexts: ciiCircExistState.setDescription("The existence state of this circuit. This object follows the RowStatus behavior. Setting the state to 'notInService' halts the generation and processing of IS-IS protocol PDUs on this circuit. Setting the state to 'destroy' will also erase any configuration associated with the circuit.")
ciiCircType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("broadcast", 1), ("ptToPt", 2), ("staticIn", 3), ("staticOut", 4), ("dA", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiCircType.setReference('{ISIS.aoi type (33)}')
if mibBuilder.loadTexts: ciiCircType.setStatus('current')
if mibBuilder.loadTexts: ciiCircType.setDescription('The type of the circuit. This object follows the replaceOnlyWhileDisabled behavior. The type specified must be compatible with the type of the interface defined by the value of ciiCircIfIndex.')
ciiCircExtDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiCircExtDomain.setReference('{ISIS.aoi externalDomain (46)}')
if mibBuilder.loadTexts: ciiCircExtDomain.setStatus('current')
if mibBuilder.loadTexts: ciiCircExtDomain.setDescription('If true, suppress normal transmission of and interpretation of Intra-domain IS-IS PDUs on this circuit.')
ciiCircLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level1L2", 3))).clone('level1L2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiCircLevel.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevel.setDescription('Indicates which type of packets will be sent and accepted on this circuit. The values used will be modified by the settings of ciiSysType. This object follows the replaceOnlyWhileDisabled behavior.')
ciiCircPassiveCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiCircPassiveCircuit.setStatus('current')
if mibBuilder.loadTexts: ciiCircPassiveCircuit.setDescription('Should we include this interface in LSPs, even if it is not running the IS-IS Protocol?')
ciiCircMeshGroupEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("blocked", 2), ("set", 3))).clone('inactive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiCircMeshGroupEnabled.setReference('{ RFC 2973 }')
if mibBuilder.loadTexts: ciiCircMeshGroupEnabled.setStatus('current')
if mibBuilder.loadTexts: ciiCircMeshGroupEnabled.setDescription('Is this port a member of a mesh group, or blocked? Circuits in the same mesh group act as a virtual multiaccess network. LSPs seen on one circuit in a mesh group will not be flooded to another circuit in the same mesh group.')
ciiCircMeshGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiCircMeshGroup.setReference('{ RFC 2973 }')
if mibBuilder.loadTexts: ciiCircMeshGroup.setStatus('current')
if mibBuilder.loadTexts: ciiCircMeshGroup.setDescription('Circuits in the same mesh group act as a virtual multiaccess network. LSPs seen on one circuit in a mesh group will not be flooded to another circuit in the same mesh group. If ciiCircMeshGroupEnabled is inactive or blocked, this value is ignored.')
ciiCircSmallHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiCircSmallHellos.setStatus('current')
if mibBuilder.loadTexts: ciiCircSmallHellos.setDescription("Can we send unpadded hellos on LAN circuits? 'false' means LAN Hellos must be padded. Implementations should allow the administrator to read this value. An implementation need not be able to support unpadded hellos to be conformant.")
ciiCircLastUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiCircLastUpTime.setStatus('current')
if mibBuilder.loadTexts: ciiCircLastUpTime.setDescription("If the circuit is enabled, the value of sysUpTime when ciiCircAdminState most recently entered the state 'on'. If the circuit is not 'on', the value of sysUpTime when the circuit last entered state 'on', 0 if the circuit has never been 'on'.")
ciiCirc3WayEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2, 1, 14), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiCirc3WayEnabled.setStatus('current')
if mibBuilder.loadTexts: ciiCirc3WayEnabled.setDescription('Is this circuit enabled to run 3Way handshake?')
ciiCircExtendedCircID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 3, 2, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiCircExtendedCircID.setStatus('current')
if mibBuilder.loadTexts: ciiCircExtendedCircID.setDescription('The value to be used as the extended circuit ID in 3Way handshake. This value is only used if ciiCirc3WayEnabled is true, and must be unique across all circuits on this IS.')
ciiCircLevelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4, 1), )
if mibBuilder.loadTexts: ciiCircLevelTable.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevelTable.setDescription('Level specific information about circuits used by IS-IS')
ciiCircLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiCircIndex"), (0, "CISCO-IETF-ISIS-MIB", "ciiCircLevelIndex"))
if mibBuilder.loadTexts: ciiCircLevelEntry.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevelEntry.setDescription('An ciiCircLevelEntry exists for each level on each circuit used by Integrated IS-IS on this system.')
ciiCircLevelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2))))
if mibBuilder.loadTexts: ciiCircLevelIndex.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevelIndex.setDescription('The level that this entry describes.')
ciiCircLevelMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4, 1, 1, 2), CiiDefaultMetric().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiCircLevelMetric.setReference('{ISIS.aoi l1DefaultMetric (35)}')
if mibBuilder.loadTexts: ciiCircLevelMetric.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevelMetric.setDescription('The metric value of this circuit for this level.')
ciiCircLevelWideMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4, 1, 1, 3), CiiWideMetric().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiCircLevelWideMetric.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevelWideMetric.setDescription('The wide metric value of this circuit for this level.')
ciiCircLevelISPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4, 1, 1, 4), CiiISPriority().clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiCircLevelISPriority.setReference('{ISIS.aoi l2IntermediateSystemPriority (73)}')
if mibBuilder.loadTexts: ciiCircLevelISPriority.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevelISPriority.setDescription('The priority for becoming LAN Designated Intermediate System at this level.')
ciiCircLevelIDOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiCircLevelIDOctet.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevelIDOctet.setDescription('A one byte identifier that can be used in protocol packets to identify a circuit. Values of ciiCircLevelIDOctet do not need to be unique. They are only required to differ on LANs where the Intermediate System is the Designated Intermediate System.')
ciiCircLevelID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4, 1, 1, 6), CiiCircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiCircLevelID.setReference('{ISIS.aoi ptPtCircuitID (51)}')
if mibBuilder.loadTexts: ciiCircLevelID.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevelID.setDescription('On a point to point circuit with a fully initialized adjacency to a peer IS, the value of this object is the circuit ID negotiated during adjacency initialization. On a point to point circuit without such an adjacency, the value is the concatenation of the local system ID and the one byte ciiCircLevelIDOctet for this circuit i.e. the value that would be proposed for the circuit ID. On other circuit types, the value returned is the zero length OCTET STRING.')
ciiCircLevelDesIS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4, 1, 1, 7), CiiCircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiCircLevelDesIS.setReference('{ISIS.aoi l2DesignatedIntermediateSystem (75)}')
if mibBuilder.loadTexts: ciiCircLevelDesIS.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevelDesIS.setDescription('The ID of the LAN Designated Intermediate System on this circuit at this level. If, for any reason, this system is not partaking in the relevant Designated Intermediate System election process, then the value returned is the zero length OCTET STRING.')
ciiCircLevelHelloMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiCircLevelHelloMultiplier.setReference('{ISIS.aoi iSISHelloTimer (45)}')
if mibBuilder.loadTexts: ciiCircLevelHelloMultiplier.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevelHelloMultiplier.setDescription('This value is multiplied by the corresponding HelloTimer and the result in seconds (rounded up) is used as the holding time in transmitted hellos, to be used by receivers of hello packets from this IS')
ciiCircLevelHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600000)).clone(3000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiCircLevelHelloTimer.setReference('{ISIS.aoi iSISHelloTimer (45)}')
if mibBuilder.loadTexts: ciiCircLevelHelloTimer.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevelHelloTimer.setDescription('Maximum period, in milliseconds, between IIH PDUs on multiaccess networks at this level for LANs. The value at L1 is used as the period between Hellos on L1L2 point to point circuits. Setting this value at level 2 on an L1L2 point to point circuit will result in an error of InconsistentValue. This object follows the resettingTimer behavior.')
ciiCircLevelDRHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiCircLevelDRHelloTimer.setReference('{ISIS.aoi iSISHelloTimer (45)}')
if mibBuilder.loadTexts: ciiCircLevelDRHelloTimer.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevelDRHelloTimer.setDescription('Period, in milliseconds, between Hello PDUs on multiaccess networks when this IS is the Designated Intermediate System. This object follows the resettingTimer behavior.')
ciiCircLevelLSPThrottle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4, 1, 1, 11), CiiUnsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiCircLevelLSPThrottle.setReference('{ISIS.aoi minimumBroadcastLSPTransmissionInterval (5)}')
if mibBuilder.loadTexts: ciiCircLevelLSPThrottle.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevelLSPThrottle.setDescription('Minimal interval of time, in milliseconds, between transmissions of LSPs on an interface at this level.')
ciiCircLevelMinLSPRetransInt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiCircLevelMinLSPRetransInt.setReference('{ISIS.aoi minimumLSPTransmissionInterval (5)}')
if mibBuilder.loadTexts: ciiCircLevelMinLSPRetransInt.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevelMinLSPRetransInt.setDescription('Minimum interval, in seconds, between re-transmission of an LSP at this level. This object follows the resettingTimer behavior. Note that ciiCircLevelLSPThrottle controls how fast we send back to back LSPs. This variable controls how fast we re-send the same LSP.')
ciiCircLevelCSNPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiCircLevelCSNPInterval.setReference('{ISIS.aoi completeSNPInterval (8)}')
if mibBuilder.loadTexts: ciiCircLevelCSNPInterval.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevelCSNPInterval.setDescription('Interval of time, in seconds, between periodic transmission of a complete set of CSNPs on multiaccess networks if this router is the designated router at this level. This object follows the resettingTimer behavior.')
ciiCircLevelPartSNPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(2)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciiCircLevelPartSNPInterval.setReference('{ISIS.aoi partialSNPInterval (14)}')
if mibBuilder.loadTexts: ciiCircLevelPartSNPInterval.setStatus('current')
if mibBuilder.loadTexts: ciiCircLevelPartSNPInterval.setDescription('Minimum interval in seconds between sending Partial Sequence Number PDUs at this level. This object follows the resettingTimer behavior.')
ciiSystemCounterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 1), )
if mibBuilder.loadTexts: ciiSystemCounterTable.setStatus('current')
if mibBuilder.loadTexts: ciiSystemCounterTable.setDescription('System wide counters for this Intermediate System.')
ciiSystemCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiSysStatLevel"))
if mibBuilder.loadTexts: ciiSystemCounterEntry.setStatus('current')
if mibBuilder.loadTexts: ciiSystemCounterEntry.setDescription('System-wide IS-IS counters.')
ciiSysStatLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2))))
if mibBuilder.loadTexts: ciiSysStatLevel.setStatus('current')
if mibBuilder.loadTexts: ciiSysStatLevel.setDescription('The level that this entry describes.')
ciiSysStatCorrLSPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 1, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiSysStatCorrLSPs.setReference('{ISIS.aoi corruptedLSPsDetected (19)}')
if mibBuilder.loadTexts: ciiSysStatCorrLSPs.setStatus('current')
if mibBuilder.loadTexts: ciiSysStatCorrLSPs.setDescription('Number of corrupted in-memory LSP frames detected. LSPs received from the wire with a bad checksum are silently dropped and not counted. LSPs received from the wire with parse errors are counted by ciiSysStatLSPErrors.')
ciiSysStatAuthTypeFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 1, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiSysStatAuthTypeFails.setStatus('current')
if mibBuilder.loadTexts: ciiSysStatAuthTypeFails.setDescription('The number of frames with authentication type mismatches recognized by this Intermediate System.')
ciiSysStatAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 1, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiSysStatAuthFails.setStatus('current')
if mibBuilder.loadTexts: ciiSysStatAuthFails.setDescription('The number of frames with authentication failures recognized by this Intermediate System.')
ciiSysStatLSPDbaseOloads = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiSysStatLSPDbaseOloads.setReference('{ISIS.aoi lSPL1DatabaseOverloads (20)}')
if mibBuilder.loadTexts: ciiSysStatLSPDbaseOloads.setStatus('current')
if mibBuilder.loadTexts: ciiSysStatLSPDbaseOloads.setDescription('Number of times the LSP database has become overloaded.')
ciiSysStatManAddrDropFromAreas = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiSysStatManAddrDropFromAreas.setReference('{ISIS.aoi manualAddressesDroppedFromArea (21)}')
if mibBuilder.loadTexts: ciiSysStatManAddrDropFromAreas.setStatus('current')
if mibBuilder.loadTexts: ciiSysStatManAddrDropFromAreas.setDescription('Number of times a manual address has been dropped from the area.')
ciiSysStatAttmptToExMaxSeqNums = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiSysStatAttmptToExMaxSeqNums.setReference('{ISIS.aoi attemptsToExceedmaximumSequenceNumber (22)}')
if mibBuilder.loadTexts: ciiSysStatAttmptToExMaxSeqNums.setStatus('current')
if mibBuilder.loadTexts: ciiSysStatAttmptToExMaxSeqNums.setDescription('Number of times the IS has attempted to exceed the maximum sequence number.')
ciiSysStatSeqNumSkips = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiSysStatSeqNumSkips.setReference('{ISIS.aoi sequenceNumberSkips (23)}')
if mibBuilder.loadTexts: ciiSysStatSeqNumSkips.setStatus('current')
if mibBuilder.loadTexts: ciiSysStatSeqNumSkips.setDescription('Number of times a sequence number skip has occurred.')
ciiSysStatOwnLSPPurges = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiSysStatOwnLSPPurges.setReference('{ISIS.aoi ownLSPPurges (24)}')
if mibBuilder.loadTexts: ciiSysStatOwnLSPPurges.setStatus('current')
if mibBuilder.loadTexts: ciiSysStatOwnLSPPurges.setDescription("Number of times a zero-aged copy of the system's own LSP is received from some other node.")
ciiSysStatIDFieldLenMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 1, 1, 10), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiSysStatIDFieldLenMismatches.setReference('{ISIS.aoi iDFieldLengthMismatches (25)}')
if mibBuilder.loadTexts: ciiSysStatIDFieldLenMismatches.setStatus('current')
if mibBuilder.loadTexts: ciiSysStatIDFieldLenMismatches.setDescription('Number of times a PDU is received with a different value for ID field length to that of the receiving system.')
ciiSysStatPartChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiSysStatPartChanges.setStatus('current')
if mibBuilder.loadTexts: ciiSysStatPartChanges.setDescription('Partition changes')
ciiSysStatSPFRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiSysStatSPFRuns.setStatus('current')
if mibBuilder.loadTexts: ciiSysStatSPFRuns.setDescription('Number of times we ran SPF at this level.')
ciiSysStatLSPErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 1, 1, 13), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiSysStatLSPErrors.setStatus('current')
if mibBuilder.loadTexts: ciiSysStatLSPErrors.setDescription('Number of LSP frames with errors we have received.')
ciiCircuitCounterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 2), )
if mibBuilder.loadTexts: ciiCircuitCounterTable.setStatus('current')
if mibBuilder.loadTexts: ciiCircuitCounterTable.setDescription('Circuit specific counters for this Intermediate System.')
ciiCircuitCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiCircIndex"), (0, "CISCO-IETF-ISIS-MIB", "ciiCircuitType"))
if mibBuilder.loadTexts: ciiCircuitCounterEntry.setStatus('current')
if mibBuilder.loadTexts: ciiCircuitCounterEntry.setDescription('An ciiCircuitCounterEntry exists for each circuit used by Integrated IS-IS on this system.')
ciiCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lanlevel1", 1), ("lanlevel2", 2), ("p2pcircuit", 3))))
if mibBuilder.loadTexts: ciiCircuitType.setStatus('current')
if mibBuilder.loadTexts: ciiCircuitType.setDescription('What type of circuit saw these counts? The point to point Hello PDU includes both L1 and L2, and ISs form a single adjacency on point to point links. Thus we combine counts on point to point links into one group.')
ciiCircAdjChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiCircAdjChanges.setReference('{ISIS.aoi changesInAdjacencyState (40)}')
if mibBuilder.loadTexts: ciiCircAdjChanges.setStatus('current')
if mibBuilder.loadTexts: ciiCircAdjChanges.setDescription('The number of times an adjacency state change has occurred on this circuit.')
ciiCircNumAdj = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiCircNumAdj.setReference('{ISIS.aoi changesInAdjacencyState (40)}')
if mibBuilder.loadTexts: ciiCircNumAdj.setStatus('current')
if mibBuilder.loadTexts: ciiCircNumAdj.setDescription('The number of adjacencies on this circuit.')
ciiCircInitFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiCircInitFails.setStatus('current')
if mibBuilder.loadTexts: ciiCircInitFails.setDescription('The number of times initialization of this circuit has failed. This counts events such as PPP NCP failures. Failures to form an adjacency are counted by ciiCircRejAdjs.')
ciiCircRejAdjs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiCircRejAdjs.setReference('{ISIS.aoi rejectedAdjacencies (42)}')
if mibBuilder.loadTexts: ciiCircRejAdjs.setStatus('current')
if mibBuilder.loadTexts: ciiCircRejAdjs.setDescription('The number of times an adjacency has been rejected on this circuit.')
ciiCircIDFieldLenMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 2, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiCircIDFieldLenMismatches.setReference('{ISIS.aoi iDFieldLengthMismatches (25)}')
if mibBuilder.loadTexts: ciiCircIDFieldLenMismatches.setStatus('current')
if mibBuilder.loadTexts: ciiCircIDFieldLenMismatches.setDescription('The number of times an IS-IS control PDU with an ID field length different to that for this system has been received.')
ciiCircMaxAreaAddrMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiCircMaxAreaAddrMismatches.setReference('{ISIS.aoi iDFieldLengthMismatches (25)}')
if mibBuilder.loadTexts: ciiCircMaxAreaAddrMismatches.setStatus('current')
if mibBuilder.loadTexts: ciiCircMaxAreaAddrMismatches.setDescription('The number of times an IS-IS control PDU with a max area address field different to that for this system has been received.')
ciiCircAuthTypeFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiCircAuthTypeFails.setStatus('current')
if mibBuilder.loadTexts: ciiCircAuthTypeFails.setDescription('The number of times an IS-IS control PDU with an auth type field different to that for this system has been received.')
ciiCircAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiCircAuthFails.setStatus('current')
if mibBuilder.loadTexts: ciiCircAuthFails.setDescription('The number of times an IS-IS control PDU with the correct auth type has failed to pass authentication validation.')
ciiCircLANDesISChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiCircLANDesISChanges.setStatus('current')
if mibBuilder.loadTexts: ciiCircLANDesISChanges.setDescription('The number of times the Designated IS has changed on this circuit at this level. If the circuit is point to point, this count is zero.')
ciiPacketCounterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 3), )
if mibBuilder.loadTexts: ciiPacketCounterTable.setStatus('current')
if mibBuilder.loadTexts: ciiPacketCounterTable.setDescription('Information about IS-IS protocol traffic at one level on one circuit in one direction')
ciiPacketCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 3, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiCircIndex"), (0, "CISCO-IETF-ISIS-MIB", "ciiPacketCountLevel"), (0, "CISCO-IETF-ISIS-MIB", "ciiPacketCountDirection"))
if mibBuilder.loadTexts: ciiPacketCounterEntry.setStatus('current')
if mibBuilder.loadTexts: ciiPacketCounterEntry.setDescription('Information about IS-IS protocol traffic at one level on one circuit in one direction')
ciiPacketCountLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2))))
if mibBuilder.loadTexts: ciiPacketCountLevel.setStatus('current')
if mibBuilder.loadTexts: ciiPacketCountLevel.setDescription('The level at which these PDU counts have been collected.')
ciiPacketCountDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sending", 1), ("receiving", 2))))
if mibBuilder.loadTexts: ciiPacketCountDirection.setStatus('current')
if mibBuilder.loadTexts: ciiPacketCountDirection.setDescription('Were we sending or receiving these PDUs?')
ciiPacketCountIIHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 3, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiPacketCountIIHellos.setReference('{ISIS.aoi iSISControlPDUsSent (43)}')
if mibBuilder.loadTexts: ciiPacketCountIIHellos.setStatus('current')
if mibBuilder.loadTexts: ciiPacketCountIIHellos.setDescription('The number of IS-IS Hello PDU frames seen in this direction at this level. Point-to-Point IIH PDUs are counted at the lowest enabled level: at L1 on L1 or L1L2 circuits, and at L2 otherwise.')
ciiPacketCountISHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 3, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiPacketCountISHellos.setStatus('current')
if mibBuilder.loadTexts: ciiPacketCountISHellos.setDescription('The number of ES-IS Hello PDU frames seen in this direction. ISH PDUs are counted at the lowest enabled level: at L1 on L1 or L1L2 circuits, and at L2 otherwise.')
ciiPacketCountESHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 3, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiPacketCountESHellos.setStatus('current')
if mibBuilder.loadTexts: ciiPacketCountESHellos.setDescription('The number of ES Hello PDU frames seen in this direction. ESH PDUs are counted at the lowest enabled level: at L1 on L1 or L1L2 circuits, and at L2 otherwise.')
ciiPacketCountLSPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 3, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiPacketCountLSPs.setReference('{ISIS.aoi iSISControlPDUsSent (43)}')
if mibBuilder.loadTexts: ciiPacketCountLSPs.setStatus('current')
if mibBuilder.loadTexts: ciiPacketCountLSPs.setDescription('The number of IS-IS LSP frames seen in this direction at this level.')
ciiPacketCountCSNPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 3, 1, 7), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiPacketCountCSNPs.setReference('{ISIS.aoi iSISControlPDUsSent (43)}')
if mibBuilder.loadTexts: ciiPacketCountCSNPs.setStatus('current')
if mibBuilder.loadTexts: ciiPacketCountCSNPs.setDescription('The number of IS-IS CSNP frames seen in this direction at this level.')
ciiPacketCountPSNPs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 3, 1, 8), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiPacketCountPSNPs.setReference('{ISIS.aoi iSISControlPDUsSent (43)}')
if mibBuilder.loadTexts: ciiPacketCountPSNPs.setStatus('current')
if mibBuilder.loadTexts: ciiPacketCountPSNPs.setDescription('The number of IS-IS PSNP frames seen in this direction at this level.')
ciiPacketCountUnknowns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 5, 3, 1, 9), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiPacketCountUnknowns.setReference('{ISIS.aoi iSISControlPDUsSent (43)}')
if mibBuilder.loadTexts: ciiPacketCountUnknowns.setStatus('current')
if mibBuilder.loadTexts: ciiPacketCountUnknowns.setDescription('The number of unknown IS-IS PDU frames seen at this level.')
ciiISAdjTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 1), )
if mibBuilder.loadTexts: ciiISAdjTable.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjTable.setDescription('The table of adjacencies to Intermediate Systems.')
ciiISAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiCircIndex"), (0, "CISCO-IETF-ISIS-MIB", "ciiISAdjIndex"))
if mibBuilder.loadTexts: ciiISAdjEntry.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjEntry.setDescription('Each entry corresponds to one adjacency to an Intermediate System on this system.')
ciiISAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: ciiISAdjIndex.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjIndex.setDescription('A unique value identifying the IS adjacency from all other such adjacencies on this circuit. This value is automatically assigned by the system when the adjacency is created.')
ciiISAdjState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("initializing", 2), ("up", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiISAdjState.setReference('{ISIS.aoi adjacencyState (78)}')
if mibBuilder.loadTexts: ciiISAdjState.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjState.setDescription('The state of the adjacency')
ciiISAdj3WayState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("up", 0), ("initializing", 1), ("down", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiISAdj3WayState.setReference('{ RFC 3373 }')
if mibBuilder.loadTexts: ciiISAdj3WayState.setStatus('current')
if mibBuilder.loadTexts: ciiISAdj3WayState.setDescription('The 3Way state of the adjacency. These are picked to match the historical on-the-wire representation of the 3Way state, and are not intended to match ciiISAdjState.')
ciiISAdjNeighSNPAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 1, 1, 4), CiiOSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiISAdjNeighSNPAAddress.setReference('{ISIS.aoi neighbourSNPAAddress (79)}')
if mibBuilder.loadTexts: ciiISAdjNeighSNPAAddress.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjNeighSNPAAddress.setDescription('The SNPA address of the neighboring system.')
ciiISAdjNeighSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("l1IntermediateSystem", 1), ("l2IntermediateSystem", 2), ("l1L2IntermediateSystem", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiISAdjNeighSysType.setReference('{ISIS.aoi neighbourSystemType (80)}')
if mibBuilder.loadTexts: ciiISAdjNeighSysType.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjNeighSysType.setDescription('The type of the neighboring system.')
ciiISAdjNeighSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 1, 1, 6), CiiSystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiISAdjNeighSysID.setReference('{ISIS.aoi neighbourSystemIds (83)}')
if mibBuilder.loadTexts: ciiISAdjNeighSysID.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjNeighSysID.setDescription('The system ID of the neighboring Intermediate System.')
ciiISAdjNbrExtendedCircID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiISAdjNbrExtendedCircID.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjNbrExtendedCircID.setDescription('The 4 byte Extended Circuit ID learned from the Neighbor during 3-way handshake, or 0.')
ciiISAdjUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level1and2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiISAdjUsage.setReference('{ISIS.aoi adjacencyUsage (82)}')
if mibBuilder.loadTexts: ciiISAdjUsage.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjUsage.setDescription('How is the adjacency used? On a point-to-point link, this might be level1and2, but on a LAN, the usage will be level1 on the adjacency between peers at L1, and level2 for the adjacency between peers at L2.')
ciiISAdjHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 1, 1, 9), CiiUnsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiISAdjHoldTimer.setReference('{ISIS.aoi holdingTimer (85)}')
if mibBuilder.loadTexts: ciiISAdjHoldTimer.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjHoldTimer.setDescription('The holding time in seconds for this adjacency. This value is based on received IIH PDUs and the elapsed time since receipt.')
ciiISAdjNeighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 1, 1, 10), CiiISPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiISAdjNeighPriority.setReference('{ISIS.aoi lANPriority (86)}')
if mibBuilder.loadTexts: ciiISAdjNeighPriority.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjNeighPriority.setDescription('Priority of the neighboring Intermediate System for becoming the Designated Intermediate System.')
ciiISAdjLastUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 1, 1, 11), TimeTicks()).setUnits('hundredths of a second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiISAdjLastUpTime.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjLastUpTime.setDescription("If the ciiISAdjState is in state 'up', the value of sysUpTime when the adjacency most recently entered the state 'up', or 0 if it has never been in state 'up'.")
ciiISAdjAreaAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 2), )
if mibBuilder.loadTexts: ciiISAdjAreaAddrTable.setReference('{ISIS.aoi areaAddressesOfNeighbour (84)}')
if mibBuilder.loadTexts: ciiISAdjAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjAreaAddrTable.setDescription('This table contains the set of Area Addresses of neighboring Intermediate Systems as reported in received IIH PDUs.')
ciiISAdjAreaAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 2, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiCircIndex"), (0, "CISCO-IETF-ISIS-MIB", "ciiISAdjIndex"), (0, "CISCO-IETF-ISIS-MIB", "ciiISAdjAreaAddrIndex"))
if mibBuilder.loadTexts: ciiISAdjAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjAreaAddrEntry.setDescription('Each entry contains one Area Address reported by a neighboring Intermediate System in its IIH PDUs.')
ciiISAdjAreaAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: ciiISAdjAreaAddrIndex.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjAreaAddrIndex.setDescription('An index for the areas associated with one neighbor. This provides a simple way to walk the table.')
ciiISAdjAreaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 2, 1, 2), CiiOSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiISAdjAreaAddress.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjAreaAddress.setDescription('One Area Address as reported in IIH PDUs received from the neighbor.')
ciiISAdjIPAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 3), )
if mibBuilder.loadTexts: ciiISAdjIPAddrTable.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjIPAddrTable.setDescription('This table contains the set of IP Addresses of neighboring Intermediate Systems as reported in received IIH PDUs.')
ciiISAdjIPAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 3, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiCircIndex"), (0, "CISCO-IETF-ISIS-MIB", "ciiISAdjIndex"), (0, "CISCO-IETF-ISIS-MIB", "ciiISAdjIPAddrIndex"))
if mibBuilder.loadTexts: ciiISAdjIPAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjIPAddrEntry.setDescription('Each entry contains one IP Address reported by a neighboring Intermediate System in its IIH PDUs.')
ciiISAdjIPAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: ciiISAdjIPAddrIndex.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjIPAddrIndex.setDescription('An index to this table which identifies the IP addresses to which this entry belongs.')
ciiISAdjIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiISAdjIPAddrType.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjIPAddrType.setDescription('The type of one IP Address as reported in IIH PDUs received from the neighbor.')
ciiISAdjIPAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 3, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiISAdjIPAddrAddress.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjIPAddrAddress.setDescription('One IP Address as reported in IIH PDUs received from the neighbor.')
ciiISAdjProtSuppTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 4), )
if mibBuilder.loadTexts: ciiISAdjProtSuppTable.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjProtSuppTable.setDescription('This table contains the set of protocols supported by neighboring Intermediate Systems as reported in received IIH PDUs.')
ciiISAdjProtSuppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 4, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiCircIndex"), (0, "CISCO-IETF-ISIS-MIB", "ciiISAdjIndex"), (0, "CISCO-IETF-ISIS-MIB", "ciiISAdjProtSuppProtocol"))
if mibBuilder.loadTexts: ciiISAdjProtSuppEntry.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjProtSuppEntry.setDescription('Each entry contains one protocol supported by a neighboring Intermediate System as reported in its IIH PDUs.')
ciiISAdjProtSuppProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 6, 4, 1, 1), CiiSupportedProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiISAdjProtSuppProtocol.setStatus('current')
if mibBuilder.loadTexts: ciiISAdjProtSuppProtocol.setDescription('One supported protocol as reported in IIH PDUs received from the neighbor.')
ciiRATable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 7, 1), )
if mibBuilder.loadTexts: ciiRATable.setStatus('current')
if mibBuilder.loadTexts: ciiRATable.setDescription('The table of Reachable Addresses to NSAPs or Address Prefixes.')
ciiRAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiCircIndex"), (0, "CISCO-IETF-ISIS-MIB", "ciiRAIndex"))
if mibBuilder.loadTexts: ciiRAEntry.setStatus('current')
if mibBuilder.loadTexts: ciiRAEntry.setDescription('Each entry defines a Reachable Address to a NSAP or Address Prefix.')
ciiRAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: ciiRAIndex.setStatus('current')
if mibBuilder.loadTexts: ciiRAIndex.setDescription('The identifier for this ciiRAEntry. This value must be unique amongst all Reachable Addresses on the same parent Circuit. This object follows the index and ManualOrAutomatic behaviors.')
ciiRAExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiRAExistState.setStatus('current')
if mibBuilder.loadTexts: ciiRAExistState.setDescription('The existence state of this Reachable Address. This object follows the ManualOrAutomatic behaviors.')
ciiRAAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 7, 1, 1, 3), CiiAdminState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiRAAdminState.setStatus('current')
if mibBuilder.loadTexts: ciiRAAdminState.setDescription('The administrative state of the Reachable Address. This object follows the CiiAdminState and ManualOrAutomatic behaviors.')
ciiRAAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 7, 1, 1, 4), CiiOSINSAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiRAAddrPrefix.setReference('{ISIS.aoi addressPrefix (98)}')
if mibBuilder.loadTexts: ciiRAAddrPrefix.setStatus('current')
if mibBuilder.loadTexts: ciiRAAddrPrefix.setDescription('The destination of this Reachable Address. This is an Address Prefix. This object follows the replaceOnlyWhileDisabled and ManualOrAutomatic behaviors.')
ciiRAMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("explicit", 2), ("extractIDI", 3), ("extractDSP", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiRAMapType.setReference('{ISO10589-ISIS.aoi mappingType (107)}')
if mibBuilder.loadTexts: ciiRAMapType.setStatus('current')
if mibBuilder.loadTexts: ciiRAMapType.setDescription('The type of mapping to be employed to ascertain the SNPA Address which should be used in forwarding PDUs for this Reachable Address prefix. This object follows the ManualOrAutomatic behavior. The following values of mapping type are defined: none: The mapping is null because the neighbor SNPA is implicit by nature of the subnetwork (e.g. a point-to-point linkage). explicit: The subnetwork addresses in the object ciiRASNPAAddress is to be used. extractIDI: The SNPA is embedded in the IDI of the destination NSAP Address. The mapping algorithm extracts the SNPA to be used according to the format and encoding rules of ISO8473/Add2. This SNPA extraction algorithm can be used in conjunction with Reachable Address prefixes from the X.121, F.69, E.163 and E.164 addressing subdomains. extractDSP: All, or a suffix, of the SNPA is embedded in the DSP of the destination address. This SNPA extraction algorithm extracts the embedded subnetwork addressing information by performing a logical AND of the ciiRASNPAMask object value with the destination address. The part of the SNPA extracted from the destination NSAP is appended to the ciiRASNPAPrefix object value to form the next hop subnetwork addressing information.')
ciiRAMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 7, 1, 1, 6), CiiDefaultMetric().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiRAMetric.setReference('{ISIS.aoi DefaultMetric (99)}')
if mibBuilder.loadTexts: ciiRAMetric.setStatus('current')
if mibBuilder.loadTexts: ciiRAMetric.setDescription('The metric value for reaching the specified prefix over this circuit. This object follows the ManualOrAutomatic behavior.')
ciiRAMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 7, 1, 1, 7), CiiMetricType().clone('internal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiRAMetricType.setReference('{ISIS.aoi DefaultMetricType (103)}')
if mibBuilder.loadTexts: ciiRAMetricType.setStatus('current')
if mibBuilder.loadTexts: ciiRAMetricType.setDescription('Indicates whether the metric is internal or external. This object follows the ManualOrAutomatic behavior.')
ciiRASNPAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 7, 1, 1, 8), CiiOSINSAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiRASNPAAddress.setReference('{ISIS.aoi sNPAAddresses (109)}')
if mibBuilder.loadTexts: ciiRASNPAAddress.setStatus('current')
if mibBuilder.loadTexts: ciiRASNPAAddress.setDescription('The SNPA Address to which a PDU may be forwarded in order to reach a destination which matches the address prefix of the Reachable Address. This object follows the ManualOrAutomatic behavior.')
ciiRASNPAMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 7, 1, 1, 9), CiiOSINSAddress().clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiRASNPAMask.setReference('{ISIS.aoi sNPAMask (122)}')
if mibBuilder.loadTexts: ciiRASNPAMask.setStatus('current')
if mibBuilder.loadTexts: ciiRASNPAMask.setDescription('A bit mask with 1 bits indicating the positions in the effective destination address from which embedded SNPA information is to be extracted. For the extraction the first octet of the ciiRASNPAMask object value is aligned with the first octet (AFI) of the NSAP Address. If the ciiRASNPAMask object value and NSAP Address are of different lengths, the shorter of the two is logically padded with zeros before performing the extraction. This object follows the ManualOrAutomatic behavior.')
ciiRASNPAPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 7, 1, 1, 10), CiiOSINSAddress().clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiRASNPAPrefix.setReference('{ISIS.aoi sNPAPrefix (123)}')
if mibBuilder.loadTexts: ciiRASNPAPrefix.setStatus('current')
if mibBuilder.loadTexts: ciiRASNPAPrefix.setDescription('A fixed SNPA prefix for use when the ciiRAMapType is extractDSP. The SNPA Address to use is formed by concatenating the fixed SNPA prefix with a variable SNPA part that is extracted from the effective destination address. For Reachable Address prefixes in which the entire SNPA is embedded in the DSP the SNPA Prefix shall be null. This object follows the ManualOrAutomatic behavior.')
ciiRAType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2))).clone('manual')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiRAType.setStatus('current')
if mibBuilder.loadTexts: ciiRAType.setDescription('The type of Reachable address. Those of type manual are created by the network manager. Those of type automatic are created through propagation of routing information from another routing protocol (eg. IDRP). ')
ciiIPRATable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8, 1), )
if mibBuilder.loadTexts: ciiIPRATable.setStatus('current')
if mibBuilder.loadTexts: ciiIPRATable.setDescription('The table of IP Reachable Addresses to networks, subnetworks or hosts either manually configured or learned from another protocol.')
ciiIPRAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8, 1, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiIPRADestType"), (0, "CISCO-IETF-ISIS-MIB", "ciiIPRADest"), (0, "CISCO-IETF-ISIS-MIB", "ciiIPRADestPrefixLen"), (0, "CISCO-IETF-ISIS-MIB", "ciiIPRANextHopIndex"))
if mibBuilder.loadTexts: ciiIPRAEntry.setStatus('current')
if mibBuilder.loadTexts: ciiIPRAEntry.setDescription('Each entry defines an IP Reachable Address to a network, subnetwork or host. Each IP Reachable Address may have multiple entries in the table, one for each equal cost path to the reachable address.')
ciiIPRADestType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ciiIPRADestType.setStatus('current')
if mibBuilder.loadTexts: ciiIPRADestType.setDescription('The type of this IP Reachable Address. This object follows the ManualOrAutomatic behavior.')
ciiIPRADest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8, 1, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: ciiIPRADest.setStatus('current')
if mibBuilder.loadTexts: ciiIPRADest.setDescription('The destination of this IP Reachable Address. This is either a network address, subnetwork address or host address. This object follows the ManualOrAutomatic behavior.')
ciiIPRADestPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8, 1, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: ciiIPRADestPrefixLen.setStatus('current')
if mibBuilder.loadTexts: ciiIPRADestPrefixLen.setDescription('The length of the IP Netmask for Reachability Address. This object follows the ManualOrAutomatic behavior.')
ciiIPRANextHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ciiIPRANextHopIndex.setStatus('current')
if mibBuilder.loadTexts: ciiIPRANextHopIndex.setDescription('Index of next hop. Used when there are multiple Equal Cost Multipath alternatives for the same destination.')
ciiIPRANextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8, 1, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPRANextHopType.setStatus('current')
if mibBuilder.loadTexts: ciiIPRANextHopType.setDescription('The type of the IP next hop address.')
ciiIPRANextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8, 1, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPRANextHop.setStatus('current')
if mibBuilder.loadTexts: ciiIPRANextHop.setDescription('The IP next hop to this destination.')
ciiIPRAType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPRAType.setStatus('current')
if mibBuilder.loadTexts: ciiIPRAType.setDescription('The type of this IP Reachable Address. Those of type manual are created by the network manager. Those of type automatic are created through propagation of routing information from another routing protocol. This object follows the ManualOrAutomatic behavior.')
ciiIPRAExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPRAExistState.setStatus('current')
if mibBuilder.loadTexts: ciiIPRAExistState.setDescription('The state of this IP Reachable Address. This object follows the ExistenceState and ManualOrAutomatic behaviors.')
ciiIPRAAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8, 1, 1, 9), CiiAdminState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPRAAdminState.setStatus('current')
if mibBuilder.loadTexts: ciiIPRAAdminState.setDescription('The administrative state of the IP Reachable Address. This object follows the CiiAdminState and ManualOrAutomatic behaviors.')
ciiIPRAMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8, 1, 1, 10), CiiDefaultMetric().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPRAMetric.setStatus('current')
if mibBuilder.loadTexts: ciiIPRAMetric.setDescription('The metric value for reaching the specified destination over this circuit. This object follows the ManualOrAutomatic behavior.')
ciiIPRAMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8, 1, 1, 11), CiiMetricType().clone('internal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPRAMetricType.setStatus('current')
if mibBuilder.loadTexts: ciiIPRAMetricType.setDescription('Indicates whether the metric is internal or external. This object follows the ManualOrAutomatic behavior.')
ciiIPRAFullMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8, 1, 1, 12), CiiFullMetric().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPRAFullMetric.setStatus('current')
if mibBuilder.loadTexts: ciiIPRAFullMetric.setDescription('The wide metric value for reaching the specified destination over this circuit. This object follows the ManualOrAutomatic behavior.')
ciiIPRASNPAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8, 1, 1, 13), CiiOSINSAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPRASNPAAddress.setStatus('current')
if mibBuilder.loadTexts: ciiIPRASNPAAddress.setDescription('The SNPA Address to which a PDU may be forwarded in order to reach a destination which matches this IP Reachable Address. This object follows the ManualOrAutomatic behavior.')
ciiIPRASourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("static", 1), ("direct", 2), ("ospfv2", 3), ("ospfv3", 4), ("isis", 5), ("rip", 6), ("igrp", 7), ("eigrp", 8), ("bgp", 9), ("other", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiIPRASourceType.setStatus('current')
if mibBuilder.loadTexts: ciiIPRASourceType.setDescription('The origin of this route.')
ciiLSPSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 1), )
if mibBuilder.loadTexts: ciiLSPSummaryTable.setStatus('current')
if mibBuilder.loadTexts: ciiLSPSummaryTable.setDescription('The table of LSP Headers.')
ciiLSPSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 1, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiLSPLevel"), (0, "CISCO-IETF-ISIS-MIB", "ciiLSPID"))
if mibBuilder.loadTexts: ciiLSPSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: ciiLSPSummaryEntry.setDescription('Each entry provides a summary describing an LSP currently stored in the system.')
ciiLSPLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 1, 1, 1), CiiISLevel())
if mibBuilder.loadTexts: ciiLSPLevel.setStatus('current')
if mibBuilder.loadTexts: ciiLSPLevel.setDescription('At which level does this LSP appear?')
ciiLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 1, 1, 2), CiiLinkStatePDUID())
if mibBuilder.loadTexts: ciiLSPID.setStatus('current')
if mibBuilder.loadTexts: ciiLSPID.setDescription('The 8 byte LSP ID, consisting of the SystemID, Circuit ID, and Fragment Number.')
ciiLSPSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiLSPSeq.setStatus('current')
if mibBuilder.loadTexts: ciiLSPSeq.setDescription('The sequence number for this LSP.')
ciiLSPZeroLife = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiLSPZeroLife.setStatus('current')
if mibBuilder.loadTexts: ciiLSPZeroLife.setDescription('Is this LSP being purged by this System?')
ciiLSPChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 1, 1, 5), CiiUnsigned16TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiLSPChecksum.setStatus('current')
if mibBuilder.loadTexts: ciiLSPChecksum.setDescription('The 16 bit Fletcher Checksum.')
ciiLSPLifetimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 1, 1, 6), CiiUnsigned16TC()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiLSPLifetimeRemain.setStatus('current')
if mibBuilder.loadTexts: ciiLSPLifetimeRemain.setDescription('The remaining lifetime in seconds for this LSP.')
ciiLSPPDULength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 1, 1, 7), CiiUnsigned16TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiLSPPDULength.setStatus('current')
if mibBuilder.loadTexts: ciiLSPPDULength.setDescription('The length of this LSP.')
ciiLSPAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 1, 1, 8), CiiUnsigned8TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiLSPAttributes.setStatus('current')
if mibBuilder.loadTexts: ciiLSPAttributes.setDescription('Flags carried by the LSP.')
ciiLSPTLVTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 2), )
if mibBuilder.loadTexts: ciiLSPTLVTable.setStatus('current')
if mibBuilder.loadTexts: ciiLSPTLVTable.setDescription('The contents of each LSP.')
ciiLSPTLVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 2, 1), ).setIndexNames((0, "CISCO-IETF-ISIS-MIB", "ciiLSPLevel"), (0, "CISCO-IETF-ISIS-MIB", "ciiLSPID"), (0, "CISCO-IETF-ISIS-MIB", "ciiLSPTLVIndex"))
if mibBuilder.loadTexts: ciiLSPTLVEntry.setStatus('current')
if mibBuilder.loadTexts: ciiLSPTLVEntry.setDescription('Each entry describes an LSP current stored in the system.')
ciiLSPTLVIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ciiLSPTLVIndex.setStatus('current')
if mibBuilder.loadTexts: ciiLSPTLVIndex.setDescription('The index of this TLV in the LSP. The first TLV has index 1 and the Nth TLV has an index of N.')
ciiLSPTLVSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiLSPTLVSeq.setStatus('current')
if mibBuilder.loadTexts: ciiLSPTLVSeq.setDescription('The sequence number for this LSP.')
ciiLSPTLVChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 2, 1, 3), CiiUnsigned16TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiLSPTLVChecksum.setStatus('current')
if mibBuilder.loadTexts: ciiLSPTLVChecksum.setDescription('The 16 bit Fletcher Checksum.')
ciiLSPTLVType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 2, 1, 4), CiiUnsigned8TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiLSPTLVType.setStatus('current')
if mibBuilder.loadTexts: ciiLSPTLVType.setDescription('The type of this TLV.')
ciiLSPTLVLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 2, 1, 5), CiiUnsigned8TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiLSPTLVLen.setStatus('current')
if mibBuilder.loadTexts: ciiLSPTLVLen.setDescription('The length of this TLV.')
ciiLSPTLVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 9, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiLSPTLVValue.setStatus('current')
if mibBuilder.loadTexts: ciiLSPTLVValue.setDescription('The value of this TLV.')
ciiNotificationEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 10, 1))
ciiPduLspId = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 10, 1, 1), CiiLinkStatePDUID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciiPduLspId.setStatus('current')
if mibBuilder.loadTexts: ciiPduLspId.setDescription('An Octet String that uniquely identifies a Link State PDU.')
ciiPduFragment = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 10, 1, 2), CiiPDUHeader()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciiPduFragment.setStatus('current')
if mibBuilder.loadTexts: ciiPduFragment.setDescription('Holds up to 64 initial bytes of a PDU that triggered the notification.')
ciiPduFieldLen = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 10, 1, 3), CiiUnsigned8TC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciiPduFieldLen.setStatus('current')
if mibBuilder.loadTexts: ciiPduFieldLen.setDescription('Holds the System ID length reported in PDU we received.')
ciiPduMaxAreaAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 10, 1, 4), CiiUnsigned8TC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciiPduMaxAreaAddress.setStatus('current')
if mibBuilder.loadTexts: ciiPduMaxAreaAddress.setDescription('Holds the Max Area Addresses reported in a PDU we received.')
ciiPduProtocolVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 10, 1, 5), CiiUnsigned8TC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciiPduProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: ciiPduProtocolVersion.setDescription('Holds the Protocol version reported in PDU we received.')
ciiPduLspSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciiPduLspSize.setStatus('current')
if mibBuilder.loadTexts: ciiPduLspSize.setDescription('Holds the size of LSP we received that is too big to forward.')
ciiPduOriginatingBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 10, 1, 7), CiiUnsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(0, 16000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciiPduOriginatingBufferSize.setStatus('current')
if mibBuilder.loadTexts: ciiPduOriginatingBufferSize.setDescription('Holds the size of ciiSysLevelOrigLSPBuffSize advertised by the peer in the originatingLSPBufferSize TLV.')
ciiPduProtocolsSupported = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciiPduProtocolsSupported.setStatus('current')
if mibBuilder.loadTexts: ciiPduProtocolsSupported.setDescription('The list of protocols supported by an adjacent system. This may be empty.')
ciiAdjState = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("initializing", 2), ("up", 3), ("failed", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciiAdjState.setStatus('current')
if mibBuilder.loadTexts: ciiAdjState.setDescription('The current state of an adjacency.')
ciiErrorOffset = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 10, 1, 10), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciiErrorOffset.setStatus('current')
if mibBuilder.loadTexts: ciiErrorOffset.setDescription('An offset to a problem in a PDU. If the problem is a malformed TLV, this points to the beginning of the TLV. If the problem is in the header, this points to the byte that is suspicious.')
ciiErrorTLVType = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciiErrorTLVType.setStatus('current')
if mibBuilder.loadTexts: ciiErrorTLVType.setDescription('The type for a malformed TLV.')
ciiNotifManualAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 10, 1, 12), CiiOSINSAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciiNotifManualAddress.setStatus('current')
if mibBuilder.loadTexts: ciiNotifManualAddress.setDescription('Manually configured area address used in this notification.')
ciiNotifIsLevelIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 118, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciiNotifIsLevelIndex.setStatus('current')
if mibBuilder.loadTexts: ciiNotifIsLevelIndex.setDescription('The index value used in this notification to indicate the system level.')
ciiDatabaseOverload = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 1)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"), ("CISCO-IETF-ISIS-MIB", "ciiSysLevelOverloadState"))
if mibBuilder.loadTexts: ciiDatabaseOverload.setStatus('current')
if mibBuilder.loadTexts: ciiDatabaseOverload.setDescription('This notification is generated when the system enters or leaves the Overload state. The number of times this has be generated and cleared is kept track of by ciiSysStatLSPDbaseOloads.')
ciiManualAddressDrops = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 2)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifManualAddress"))
if mibBuilder.loadTexts: ciiManualAddressDrops.setStatus('current')
if mibBuilder.loadTexts: ciiManualAddressDrops.setDescription('This notification is generated when one of the manual areaAddresses assigned to this system is ignored when computing routes. The object ciiNotifManualAddress describes the area that has been dropped. The number of times this event has been generated is counted by ciiSysStatManAddrDropFromAreas. This notification is edge triggered, and should not be regenerated until an address that was used in the previous computation has been dropped.')
ciiCorruptedLSPDetected = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 3)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduLspId"))
if mibBuilder.loadTexts: ciiCorruptedLSPDetected.setStatus('current')
if mibBuilder.loadTexts: ciiCorruptedLSPDetected.setDescription('This notification is generated when we find that an LSP that was stored in memory has become corrupted. The number of times this has been generated is counted by ciiSysStatCorrLSPs. We forward an LSP ID. We may have independent knowledge of the ID, but in some implementations there is a chance that the ID itself will be corrupted.')
ciiAttemptToExceedMaxSequence = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 4)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduLspId"))
if mibBuilder.loadTexts: ciiAttemptToExceedMaxSequence.setStatus('current')
if mibBuilder.loadTexts: ciiAttemptToExceedMaxSequence.setDescription('When the sequence number on an LSP we generate wraps the 32 bit sequence counter, we purge and wait to re-announce this information. This notification describes that event. Since these should not be generated rapidly, we generate an event each time this happens. While the first 6 bytes of the LSPID are ours, the other two contain useful information.')
ciiIDLenMismatch = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 5)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduFieldLen"), ("CISCO-IETF-ISIS-MIB", "ciiCircIfIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduFragment"))
if mibBuilder.loadTexts: ciiIDLenMismatch.setStatus('current')
if mibBuilder.loadTexts: ciiIDLenMismatch.setDescription('A notification sent when we receive a PDU with a different value of the System ID Length. This notification includes an index to identify the circuit where we saw the PDU and the header of the PDU which may help a network manager identify the source of the confusion. This should be an edge-triggered notification. We should not send a second notification about PDUs received on the same circuit.')
ciiMaxAreaAddressesMismatch = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 6)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduMaxAreaAddress"), ("CISCO-IETF-ISIS-MIB", "ciiCircIfIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduFragment"))
if mibBuilder.loadTexts: ciiMaxAreaAddressesMismatch.setStatus('current')
if mibBuilder.loadTexts: ciiMaxAreaAddressesMismatch.setDescription('A notification sent when we receive a PDU with a different value of the Maximum Area Addresses. This notification includes the header of the packet, which may help a network manager identify the source of the confusion. This should be an edge-triggered notification. We should not send a second notification about PDUs received from the same circuit.')
ciiOwnLSPPurge = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 7)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"), ("CISCO-IETF-ISIS-MIB", "ciiCircIfIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduLspId"))
if mibBuilder.loadTexts: ciiOwnLSPPurge.setStatus('current')
if mibBuilder.loadTexts: ciiOwnLSPPurge.setDescription('A notification sent when we receive a PDU with our systemID and zero age. This notification includes the circuit Index and router ID from the LSP, if available, which may help a network manager identify the source of the confusion.')
ciiSequenceNumberSkip = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 8)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"), ("CISCO-IETF-ISIS-MIB", "ciiCircIfIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduLspId"))
if mibBuilder.loadTexts: ciiSequenceNumberSkip.setStatus('current')
if mibBuilder.loadTexts: ciiSequenceNumberSkip.setDescription('When we receive an LSP with our System ID and different contents, we may need to reissue the LSP with a higher sequence number. We send this notification if we need to increase the sequence number by more than one. If two Intermediate Systems are configured with the same System ID, this notification will fire.')
ciiAuthenticationTypeFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 9)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"), ("CISCO-IETF-ISIS-MIB", "ciiCircIfIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduFragment"))
if mibBuilder.loadTexts: ciiAuthenticationTypeFailure.setStatus('current')
if mibBuilder.loadTexts: ciiAuthenticationTypeFailure.setDescription('A notification sent when we receive a PDU with the wrong authentication type field. This notification includes the header of the packet, which may help a network manager identify the source of the confusion. This should be an edge-triggered notification. We should not send a second notification about PDUs received from the same circuit.')
ciiAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 10)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"), ("CISCO-IETF-ISIS-MIB", "ciiCircIfIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduFragment"))
if mibBuilder.loadTexts: ciiAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: ciiAuthenticationFailure.setDescription('A notification sent when we receive a PDU with incorrect authentication information field. This notification includes the header of the packet, which may help a network manager identify the source of the confusion. This should be an edge-triggered notification. We should not send a second notification about PDUs received from the same circuit.')
ciiVersionSkew = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 11)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"), ("CISCO-IETF-ISIS-MIB", "ciiCircIfIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduProtocolVersion"), ("CISCO-IETF-ISIS-MIB", "ciiPduFragment"))
if mibBuilder.loadTexts: ciiVersionSkew.setStatus('current')
if mibBuilder.loadTexts: ciiVersionSkew.setDescription('A notification sent when we receive a Hello PDU from an IS running a different version of the protocol. This notification includes the header of the packet, which may help a network manager identify the source of the confusion. This should be an edge-triggered notification. We should not send a second notification about PDUs received from the same circuit.')
ciiAreaMismatch = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 12)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiCircIfIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduFragment"))
if mibBuilder.loadTexts: ciiAreaMismatch.setStatus('current')
if mibBuilder.loadTexts: ciiAreaMismatch.setDescription('A notification sent when we receive a Hello PDU from an IS which does not share any area address. This notification includes the header of the packet, which may help a network manager identify the source of the confusion. This should be an edge-triggered notification. We should not send a second notification about PDUs received from the same circuit.')
ciiRejectedAdjacency = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 13)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"), ("CISCO-IETF-ISIS-MIB", "ciiCircIfIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduFragment"))
if mibBuilder.loadTexts: ciiRejectedAdjacency.setStatus('current')
if mibBuilder.loadTexts: ciiRejectedAdjacency.setDescription('A notification sent when we receive a Hello PDU from an IS, but do not establish an adjacency for some reason. This should be an edge-triggered notification. We should not send a second notification about PDUs received from the circuit.')
ciiLSPTooLargeToPropagate = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 14)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"), ("CISCO-IETF-ISIS-MIB", "ciiCircIfIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduLspSize"), ("CISCO-IETF-ISIS-MIB", "ciiPduLspId"))
if mibBuilder.loadTexts: ciiLSPTooLargeToPropagate.setStatus('current')
if mibBuilder.loadTexts: ciiLSPTooLargeToPropagate.setDescription('A notification sent when we attempt to propagate an LSP which is larger than the dataLinkBlockSize for the circuit. This should be an edge-triggered notification. We should not send a second notification about PDUs received from the same circuit.')
ciiOrigLSPBuffSizeMismatch = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 15)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"), ("CISCO-IETF-ISIS-MIB", "ciiCircIfIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduLspId"), ("CISCO-IETF-ISIS-MIB", "ciiPduOriginatingBufferSize"))
if mibBuilder.loadTexts: ciiOrigLSPBuffSizeMismatch.setStatus('current')
if mibBuilder.loadTexts: ciiOrigLSPBuffSizeMismatch.setDescription('A notification sent when a Level 1 LSP or Level 2 LSP is received which is larger than the local value for ciiSysLevelOrigLSPBuffSize, or when an LSP is received containing the originatingLSPBufferSize option and the value in the PDU option field does not match the local value for ciiSysLevelOrigLSPBuffSize. We pass up the size from the option field or the size of the LSP that exceeds our configuration. This should be an edge-triggered notification. We should not send a second notification about PDUs received from the same circuit.')
ciiProtocolsSupportedMismatch = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 16)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"), ("CISCO-IETF-ISIS-MIB", "ciiCircIfIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduProtocolsSupported"), ("CISCO-IETF-ISIS-MIB", "ciiPduLspId"), ("CISCO-IETF-ISIS-MIB", "ciiPduFragment"))
if mibBuilder.loadTexts: ciiProtocolsSupportedMismatch.setStatus('current')
if mibBuilder.loadTexts: ciiProtocolsSupportedMismatch.setDescription('A notification sent when a non-pseudonode segment 0 LSP is received that has no matching protocols supported. This may be because the system does not generate the field, or because there are no common elements. The list of protocols supported should be included in the notification: it may be empty if the TLV is not supported, or if the TLV is empty. This should be an edge-triggered notification. We should not send a second notification about PDUs received from the same circuit.')
ciiAdjacencyChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 17)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"), ("CISCO-IETF-ISIS-MIB", "ciiCircIfIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduLspId"), ("CISCO-IETF-ISIS-MIB", "ciiAdjState"))
if mibBuilder.loadTexts: ciiAdjacencyChange.setStatus('current')
if mibBuilder.loadTexts: ciiAdjacencyChange.setDescription('A notification sent when an adjacency changes state, entering or leaving state up. The first 6 bytes of the ciiPduLspId are the SystemID of the adjacent IS. The ciiAdjState is the new state of the adjacency.')
ciiLSPErrorDetected = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 118, 0, 18)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduLspId"), ("CISCO-IETF-ISIS-MIB", "ciiCircIfIndex"), ("CISCO-IETF-ISIS-MIB", "ciiPduFragment"), ("CISCO-IETF-ISIS-MIB", "ciiErrorOffset"), ("CISCO-IETF-ISIS-MIB", "ciiErrorTLVType"))
if mibBuilder.loadTexts: ciiLSPErrorDetected.setStatus('current')
if mibBuilder.loadTexts: ciiLSPErrorDetected.setDescription('This notification is generated when we receive an LSP with a parse error. The ciiCircIfIndex holds in index of the circuit on which the PDU arrived. The ciiPduFragment holds start of the LSP, and the ciiErrorOffset points to the problem. If the problem is a mal-formed TLV, ciiErrorOffset points to start of the TLV and ciiErrorTLVType holds the value of the type. If the problem is with the LSP header, ciiErrorOffset points to the suspicious byte. The number of such LSPs is accumulated in ciiSysStatLSPErrors.')
ciscoIetfIsisMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 2, 1))
ciscoIetfIsisMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 118, 2, 2))
ciscoIetfIsisMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 118, 2, 2, 1)).setObjects(("CISCO-IETF-ISIS-MIB", "ciscoIetfIsisSystemGroup"), ("CISCO-IETF-ISIS-MIB", "ciscoIetfIsisCircuitGroup"), ("CISCO-IETF-ISIS-MIB", "ciscoIetfIsisISAdjGroup"), ("CISCO-IETF-ISIS-MIB", "ciscoIetfIsisNotifObjectGroup"), ("CISCO-IETF-ISIS-MIB", "ciscoIetfIsisNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfIsisMIBCompliance = ciscoIetfIsisMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfIsisMIBCompliance.setDescription('The compliance statement for agents that support the IS-IS MIB')
ciscoIetfIsisMIBAdvCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 118, 2, 2, 2)).setObjects(("CISCO-IETF-ISIS-MIB", "ciscoIetfIsisSystemGroup"), ("CISCO-IETF-ISIS-MIB", "ciscoIetfIsisCircuitGroup"), ("CISCO-IETF-ISIS-MIB", "ciscoIetfIsisISAdjGroup"), ("CISCO-IETF-ISIS-MIB", "ciscoIetfIsisNotifObjectGroup"), ("CISCO-IETF-ISIS-MIB", "ciscoIetfIsisNotificationGroup"), ("CISCO-IETF-ISIS-MIB", "ciscoIetfIsisISPDUCounterGroup"), ("CISCO-IETF-ISIS-MIB", "ciscoIetfIsisRATableGroup"), ("CISCO-IETF-ISIS-MIB", "ciscoIetfIsisISIPRADestGroup"), ("CISCO-IETF-ISIS-MIB", "ciscoIetfIsisLSPGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfIsisMIBAdvCompliance = ciscoIetfIsisMIBAdvCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfIsisMIBAdvCompliance.setDescription('The compliance statement for agents that support the IS-IS MIB')
ciscoIetfIsisSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 118, 2, 1, 1)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiSysVersion"), ("CISCO-IETF-ISIS-MIB", "ciiSysType"), ("CISCO-IETF-ISIS-MIB", "ciiSysID"), ("CISCO-IETF-ISIS-MIB", "ciiSysMaxPathSplits"), ("CISCO-IETF-ISIS-MIB", "ciiSysMaxLSPGenInt"), ("CISCO-IETF-ISIS-MIB", "ciiSysPollESHelloRate"), ("CISCO-IETF-ISIS-MIB", "ciiSysWaitTime"), ("CISCO-IETF-ISIS-MIB", "ciiSysAdminState"), ("CISCO-IETF-ISIS-MIB", "ciiSysL2toL1Leaking"), ("CISCO-IETF-ISIS-MIB", "ciiSysMaxAge"), ("CISCO-IETF-ISIS-MIB", "ciiSysLevelOrigLSPBuffSize"), ("CISCO-IETF-ISIS-MIB", "ciiSysLevelMinLSPGenInt"), ("CISCO-IETF-ISIS-MIB", "ciiSysLevelOverloadState"), ("CISCO-IETF-ISIS-MIB", "ciiSysLevelSetOverload"), ("CISCO-IETF-ISIS-MIB", "ciiSysLevelSetOverloadUntil"), ("CISCO-IETF-ISIS-MIB", "ciiSysLevelMetricStyle"), ("CISCO-IETF-ISIS-MIB", "ciiSysLevelSPFConsiders"), ("CISCO-IETF-ISIS-MIB", "ciiSysLevelTEEnabled"), ("CISCO-IETF-ISIS-MIB", "ciiSysReceiveLSPBufferSize"), ("CISCO-IETF-ISIS-MIB", "ciiManAreaAddrExistState"), ("CISCO-IETF-ISIS-MIB", "ciiAreaAddr"), ("CISCO-IETF-ISIS-MIB", "ciiSysProtSuppExistState"), ("CISCO-IETF-ISIS-MIB", "ciiSummAddrExistState"), ("CISCO-IETF-ISIS-MIB", "ciiSummAddrMetric"), ("CISCO-IETF-ISIS-MIB", "ciiSummAddrFullMetric"), ("CISCO-IETF-ISIS-MIB", "ciiRedistributeAddrExistState"), ("CISCO-IETF-ISIS-MIB", "ciiRouterHostName"), ("CISCO-IETF-ISIS-MIB", "ciiRouterID"), ("CISCO-IETF-ISIS-MIB", "ciiSysStatCorrLSPs"), ("CISCO-IETF-ISIS-MIB", "ciiSysStatLSPDbaseOloads"), ("CISCO-IETF-ISIS-MIB", "ciiSysStatManAddrDropFromAreas"), ("CISCO-IETF-ISIS-MIB", "ciiSysStatAttmptToExMaxSeqNums"), ("CISCO-IETF-ISIS-MIB", "ciiSysStatSeqNumSkips"), ("CISCO-IETF-ISIS-MIB", "ciiSysStatOwnLSPPurges"), ("CISCO-IETF-ISIS-MIB", "ciiSysStatIDFieldLenMismatches"), ("CISCO-IETF-ISIS-MIB", "ciiSysStatPartChanges"), ("CISCO-IETF-ISIS-MIB", "ciiSysStatSPFRuns"), ("CISCO-IETF-ISIS-MIB", "ciiSysStatAuthTypeFails"), ("CISCO-IETF-ISIS-MIB", "ciiSysStatAuthFails"), ("CISCO-IETF-ISIS-MIB", "ciiSysStatLSPErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfIsisSystemGroup = ciscoIetfIsisSystemGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfIsisSystemGroup.setDescription('The collections of objects used to manage an IS-IS router.')
ciscoIetfIsisCircuitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 118, 2, 1, 2)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiNextCircIndex"), ("CISCO-IETF-ISIS-MIB", "ciiCircIfSubIndex"), ("CISCO-IETF-ISIS-MIB", "ciiCircAdminState"), ("CISCO-IETF-ISIS-MIB", "ciiCircExistState"), ("CISCO-IETF-ISIS-MIB", "ciiCircType"), ("CISCO-IETF-ISIS-MIB", "ciiCircExtDomain"), ("CISCO-IETF-ISIS-MIB", "ciiCircAdjChanges"), ("CISCO-IETF-ISIS-MIB", "ciiCircNumAdj"), ("CISCO-IETF-ISIS-MIB", "ciiCircInitFails"), ("CISCO-IETF-ISIS-MIB", "ciiCircRejAdjs"), ("CISCO-IETF-ISIS-MIB", "ciiCircIDFieldLenMismatches"), ("CISCO-IETF-ISIS-MIB", "ciiCircMaxAreaAddrMismatches"), ("CISCO-IETF-ISIS-MIB", "ciiCircAuthTypeFails"), ("CISCO-IETF-ISIS-MIB", "ciiCircAuthFails"), ("CISCO-IETF-ISIS-MIB", "ciiCircLANDesISChanges"), ("CISCO-IETF-ISIS-MIB", "ciiCircLevel"), ("CISCO-IETF-ISIS-MIB", "ciiCircPassiveCircuit"), ("CISCO-IETF-ISIS-MIB", "ciiCircMeshGroupEnabled"), ("CISCO-IETF-ISIS-MIB", "ciiCircMeshGroup"), ("CISCO-IETF-ISIS-MIB", "ciiCircSmallHellos"), ("CISCO-IETF-ISIS-MIB", "ciiCircLastUpTime"), ("CISCO-IETF-ISIS-MIB", "ciiCirc3WayEnabled"), ("CISCO-IETF-ISIS-MIB", "ciiCircExtendedCircID"), ("CISCO-IETF-ISIS-MIB", "ciiCircIfIndex"), ("CISCO-IETF-ISIS-MIB", "ciiCircLevelMetric"), ("CISCO-IETF-ISIS-MIB", "ciiCircLevelWideMetric"), ("CISCO-IETF-ISIS-MIB", "ciiCircLevelISPriority"), ("CISCO-IETF-ISIS-MIB", "ciiCircLevelIDOctet"), ("CISCO-IETF-ISIS-MIB", "ciiCircLevelID"), ("CISCO-IETF-ISIS-MIB", "ciiCircLevelDesIS"), ("CISCO-IETF-ISIS-MIB", "ciiCircLevelHelloMultiplier"), ("CISCO-IETF-ISIS-MIB", "ciiCircLevelHelloTimer"), ("CISCO-IETF-ISIS-MIB", "ciiCircLevelDRHelloTimer"), ("CISCO-IETF-ISIS-MIB", "ciiCircLevelLSPThrottle"), ("CISCO-IETF-ISIS-MIB", "ciiCircLevelMinLSPRetransInt"), ("CISCO-IETF-ISIS-MIB", "ciiCircLevelCSNPInterval"), ("CISCO-IETF-ISIS-MIB", "ciiCircLevelPartSNPInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfIsisCircuitGroup = ciscoIetfIsisCircuitGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfIsisCircuitGroup.setDescription('The collection of objects used to describe in IS-IS Circuit.')
ciscoIetfIsisISAdjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 118, 2, 1, 3)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiISAdjState"), ("CISCO-IETF-ISIS-MIB", "ciiISAdj3WayState"), ("CISCO-IETF-ISIS-MIB", "ciiISAdjNeighSNPAAddress"), ("CISCO-IETF-ISIS-MIB", "ciiISAdjNeighSysType"), ("CISCO-IETF-ISIS-MIB", "ciiISAdjNeighSysID"), ("CISCO-IETF-ISIS-MIB", "ciiISAdjNbrExtendedCircID"), ("CISCO-IETF-ISIS-MIB", "ciiISAdjUsage"), ("CISCO-IETF-ISIS-MIB", "ciiISAdjHoldTimer"), ("CISCO-IETF-ISIS-MIB", "ciiISAdjNeighPriority"), ("CISCO-IETF-ISIS-MIB", "ciiISAdjLastUpTime"), ("CISCO-IETF-ISIS-MIB", "ciiISAdjAreaAddress"), ("CISCO-IETF-ISIS-MIB", "ciiISAdjIPAddrType"), ("CISCO-IETF-ISIS-MIB", "ciiISAdjIPAddrAddress"), ("CISCO-IETF-ISIS-MIB", "ciiISAdjProtSuppProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfIsisISAdjGroup = ciscoIetfIsisISAdjGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfIsisISAdjGroup.setDescription('The collections of objects used to manage an IS-IS Adjacency.')
ciscoIetfIsisNotifObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 118, 2, 1, 4)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiPduLspId"), ("CISCO-IETF-ISIS-MIB", "ciiPduFragment"), ("CISCO-IETF-ISIS-MIB", "ciiPduFieldLen"), ("CISCO-IETF-ISIS-MIB", "ciiPduMaxAreaAddress"), ("CISCO-IETF-ISIS-MIB", "ciiPduProtocolVersion"), ("CISCO-IETF-ISIS-MIB", "ciiPduLspSize"), ("CISCO-IETF-ISIS-MIB", "ciiPduOriginatingBufferSize"), ("CISCO-IETF-ISIS-MIB", "ciiPduProtocolsSupported"), ("CISCO-IETF-ISIS-MIB", "ciiAdjState"), ("CISCO-IETF-ISIS-MIB", "ciiErrorOffset"), ("CISCO-IETF-ISIS-MIB", "ciiErrorTLVType"), ("CISCO-IETF-ISIS-MIB", "ciiNotifManualAddress"), ("CISCO-IETF-ISIS-MIB", "ciiNotifIsLevelIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfIsisNotifObjectGroup = ciscoIetfIsisNotifObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfIsisNotifObjectGroup.setDescription('The objects used to record notification parameters.')
ciscoIetfIsisNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 118, 2, 1, 5)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiDatabaseOverload"), ("CISCO-IETF-ISIS-MIB", "ciiManualAddressDrops"), ("CISCO-IETF-ISIS-MIB", "ciiCorruptedLSPDetected"), ("CISCO-IETF-ISIS-MIB", "ciiAttemptToExceedMaxSequence"), ("CISCO-IETF-ISIS-MIB", "ciiIDLenMismatch"), ("CISCO-IETF-ISIS-MIB", "ciiMaxAreaAddressesMismatch"), ("CISCO-IETF-ISIS-MIB", "ciiOwnLSPPurge"), ("CISCO-IETF-ISIS-MIB", "ciiSequenceNumberSkip"), ("CISCO-IETF-ISIS-MIB", "ciiAuthenticationTypeFailure"), ("CISCO-IETF-ISIS-MIB", "ciiAuthenticationFailure"), ("CISCO-IETF-ISIS-MIB", "ciiVersionSkew"), ("CISCO-IETF-ISIS-MIB", "ciiAreaMismatch"), ("CISCO-IETF-ISIS-MIB", "ciiRejectedAdjacency"), ("CISCO-IETF-ISIS-MIB", "ciiLSPTooLargeToPropagate"), ("CISCO-IETF-ISIS-MIB", "ciiOrigLSPBuffSizeMismatch"), ("CISCO-IETF-ISIS-MIB", "ciiProtocolsSupportedMismatch"), ("CISCO-IETF-ISIS-MIB", "ciiAdjacencyChange"), ("CISCO-IETF-ISIS-MIB", "ciiLSPErrorDetected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfIsisNotificationGroup = ciscoIetfIsisNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfIsisNotificationGroup.setDescription('The collections of notifications sent by an IS.')
ciscoIetfIsisISPDUCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 118, 2, 1, 6)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiPacketCountIIHellos"), ("CISCO-IETF-ISIS-MIB", "ciiPacketCountISHellos"), ("CISCO-IETF-ISIS-MIB", "ciiPacketCountESHellos"), ("CISCO-IETF-ISIS-MIB", "ciiPacketCountLSPs"), ("CISCO-IETF-ISIS-MIB", "ciiPacketCountCSNPs"), ("CISCO-IETF-ISIS-MIB", "ciiPacketCountPSNPs"), ("CISCO-IETF-ISIS-MIB", "ciiPacketCountUnknowns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfIsisISPDUCounterGroup = ciscoIetfIsisISPDUCounterGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfIsisISPDUCounterGroup.setDescription('The collections of objects used to count protocol PDUs.')
ciscoIetfIsisRATableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 118, 2, 1, 7)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiRAExistState"), ("CISCO-IETF-ISIS-MIB", "ciiRAAdminState"), ("CISCO-IETF-ISIS-MIB", "ciiRAAddrPrefix"), ("CISCO-IETF-ISIS-MIB", "ciiRAMapType"), ("CISCO-IETF-ISIS-MIB", "ciiRAMetric"), ("CISCO-IETF-ISIS-MIB", "ciiRAMetricType"), ("CISCO-IETF-ISIS-MIB", "ciiRASNPAAddress"), ("CISCO-IETF-ISIS-MIB", "ciiRASNPAMask"), ("CISCO-IETF-ISIS-MIB", "ciiRASNPAPrefix"), ("CISCO-IETF-ISIS-MIB", "ciiRAType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfIsisRATableGroup = ciscoIetfIsisRATableGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfIsisRATableGroup.setDescription('The collections of objects used to manage the reachable NSAP prefixes.')
ciscoIetfIsisISIPRADestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 118, 2, 1, 8)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiIPRANextHopType"), ("CISCO-IETF-ISIS-MIB", "ciiIPRANextHop"), ("CISCO-IETF-ISIS-MIB", "ciiIPRAType"), ("CISCO-IETF-ISIS-MIB", "ciiIPRAExistState"), ("CISCO-IETF-ISIS-MIB", "ciiIPRAAdminState"), ("CISCO-IETF-ISIS-MIB", "ciiIPRAMetric"), ("CISCO-IETF-ISIS-MIB", "ciiIPRAFullMetric"), ("CISCO-IETF-ISIS-MIB", "ciiIPRAMetricType"), ("CISCO-IETF-ISIS-MIB", "ciiIPRASNPAAddress"), ("CISCO-IETF-ISIS-MIB", "ciiIPRASourceType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfIsisISIPRADestGroup = ciscoIetfIsisISIPRADestGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfIsisISIPRADestGroup.setDescription('The collections of objects used to manage configured IP addresses.')
ciscoIetfIsisLSPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 118, 2, 1, 9)).setObjects(("CISCO-IETF-ISIS-MIB", "ciiLSPSeq"), ("CISCO-IETF-ISIS-MIB", "ciiLSPZeroLife"), ("CISCO-IETF-ISIS-MIB", "ciiLSPChecksum"), ("CISCO-IETF-ISIS-MIB", "ciiLSPLifetimeRemain"), ("CISCO-IETF-ISIS-MIB", "ciiLSPPDULength"), ("CISCO-IETF-ISIS-MIB", "ciiLSPAttributes"), ("CISCO-IETF-ISIS-MIB", "ciiLSPTLVSeq"), ("CISCO-IETF-ISIS-MIB", "ciiLSPTLVChecksum"), ("CISCO-IETF-ISIS-MIB", "ciiLSPTLVType"), ("CISCO-IETF-ISIS-MIB", "ciiLSPTLVLen"), ("CISCO-IETF-ISIS-MIB", "ciiLSPTLVValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfIsisLSPGroup = ciscoIetfIsisLSPGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfIsisLSPGroup.setDescription('The collections of objects used to observe the LSP Data Base.')
mibBuilder.exportSymbols("CISCO-IETF-ISIS-MIB", ciiLSPTLVChecksum=ciiLSPTLVChecksum, ciiCircLevel=ciiCircLevel, ciiIPRASNPAAddress=ciiIPRASNPAAddress, CiiUnsigned8TC=CiiUnsigned8TC, ciiSummAddrFullMetric=ciiSummAddrFullMetric, ciiLSPTLVType=ciiLSPTLVType, ciiSummAddrEntry=ciiSummAddrEntry, ciiIPReachAddr=ciiIPReachAddr, CiiMetricType=CiiMetricType, ciiCircEntry=ciiCircEntry, ciiLSPAttributes=ciiLSPAttributes, ciiISAdjIndex=ciiISAdjIndex, ciiIPRADestType=ciiIPRADestType, ciiPacketCountUnknowns=ciiPacketCountUnknowns, ciiISAdjIPAddrAddress=ciiISAdjIPAddrAddress, ciiAreaAddrEntry=ciiAreaAddrEntry, CiiOSINSAddress=CiiOSINSAddress, ciiCircExtDomain=ciiCircExtDomain, ciiPacketCounterTable=ciiPacketCounterTable, ciiCircLevelHelloTimer=ciiCircLevelHelloTimer, ciiPacketCounterEntry=ciiPacketCounterEntry, CiiPDUHeader=CiiPDUHeader, ciiSysLevelIndex=ciiSysLevelIndex, ciiPacketCountESHellos=ciiPacketCountESHellos, ciiISAdjUsage=ciiISAdjUsage, ciiSysObject=ciiSysObject, ciiRouterSysID=ciiRouterSysID, ciiRAAddrPrefix=ciiRAAddrPrefix, ciiSysLevelOverloadState=ciiSysLevelOverloadState, ciiSysStatAttmptToExMaxSeqNums=ciiSysStatAttmptToExMaxSeqNums, ciiCircuitCounterTable=ciiCircuitCounterTable, ciiIPRAExistState=ciiIPRAExistState, ciiLSPTLVTable=ciiLSPTLVTable, ciiRAMapType=ciiRAMapType, ciscoIetfIsisMIBObjects=ciscoIetfIsisMIBObjects, ciiLSPZeroLife=ciiLSPZeroLife, ciiISAdjNeighSysID=ciiISAdjNeighSysID, ciiISAdjProtSuppTable=ciiISAdjProtSuppTable, ciiRedistributeAddrAddress=ciiRedistributeAddrAddress, ciiIPRANextHopType=ciiIPRANextHopType, ciiCircLevelValues=ciiCircLevelValues, ciiCircExistState=ciiCircExistState, CiiCircuitID=CiiCircuitID, ciiSystem=ciiSystem, ciiISAdjNbrExtendedCircID=ciiISAdjNbrExtendedCircID, ciiRAEntry=ciiRAEntry, ciiNotificationEntry=ciiNotificationEntry, ciiSysProtSuppEntry=ciiSysProtSuppEntry, ciiAreaAddrTable=ciiAreaAddrTable, ciiCirc3WayEnabled=ciiCirc3WayEnabled, ciiISAdjIPAddrTable=ciiISAdjIPAddrTable, ciiIPRADestPrefixLen=ciiIPRADestPrefixLen, ciiISAdjAreaAddress=ciiISAdjAreaAddress, ciiSysLevelTable=ciiSysLevelTable, ciiISAdjHoldTimer=ciiISAdjHoldTimer, ciiSysMaxAge=ciiSysMaxAge, ciiISAdjIPAddrIndex=ciiISAdjIPAddrIndex, ciiSysLevelEntry=ciiSysLevelEntry, ciiLSPPDULength=ciiLSPPDULength, ciiSysStatSPFRuns=ciiSysStatSPFRuns, ciiCircAuthFails=ciiCircAuthFails, ciiCircLevelLSPThrottle=ciiCircLevelLSPThrottle, ciiSysVersion=ciiSysVersion, ciiLSPID=ciiLSPID, ciiPduLspSize=ciiPduLspSize, CiiISPriority=CiiISPriority, ciscoIetfIsisLSPGroup=ciscoIetfIsisLSPGroup, ciiAuthenticationFailure=ciiAuthenticationFailure, ciiSysStatManAddrDropFromAreas=ciiSysStatManAddrDropFromAreas, ciscoIetfIsisMIBGroups=ciscoIetfIsisMIBGroups, ciiISAdjIPAddrEntry=ciiISAdjIPAddrEntry, ciiISAdj3WayState=ciiISAdj3WayState, ciiIPRANextHop=ciiIPRANextHop, ciscoIetfIsisISPDUCounterGroup=ciscoIetfIsisISPDUCounterGroup, ciiSysMaxLSPGenInt=ciiSysMaxLSPGenInt, ciiSysPollESHelloRate=ciiSysPollESHelloRate, ciiSysStatLSPErrors=ciiSysStatLSPErrors, ciiRAIndex=ciiRAIndex, ciiManAreaAddrTable=ciiManAreaAddrTable, ciiCirc=ciiCirc, ciiRASNPAMask=ciiRASNPAMask, CiiSystemID=CiiSystemID, ciiSummAddrTable=ciiSummAddrTable, ciiLSPSummaryEntry=ciiLSPSummaryEntry, ciscoIetfIsisNotificationGroup=ciscoIetfIsisNotificationGroup, ciiISAdjAreaAddrTable=ciiISAdjAreaAddrTable, ciiCircIDFieldLenMismatches=ciiCircIDFieldLenMismatches, ciiCircLevelCSNPInterval=ciiCircLevelCSNPInterval, ciiISAdjAreaAddrEntry=ciiISAdjAreaAddrEntry, ciiSysWaitTime=ciiSysWaitTime, ciiAttemptToExceedMaxSequence=ciiAttemptToExceedMaxSequence, ciiCircMeshGroup=ciiCircMeshGroup, ciiCircPassiveCircuit=ciiCircPassiveCircuit, ciiPacketCountDirection=ciiPacketCountDirection, ciiErrorTLVType=ciiErrorTLVType, ciscoIetfIsisMIBCompliance=ciscoIetfIsisMIBCompliance, ciiSysAdminState=ciiSysAdminState, ciiIPRATable=ciiIPRATable, ciiRAAdminState=ciiRAAdminState, ciiSequenceNumberSkip=ciiSequenceNumberSkip, CiiFullMetric=CiiFullMetric, ciiSystemCounterTable=ciiSystemCounterTable, ciiPduFieldLen=ciiPduFieldLen, ciscoIetfIsisCircuitGroup=ciscoIetfIsisCircuitGroup, ciiCircLevelMinLSPRetransInt=ciiCircLevelMinLSPRetransInt, ciiRAMetricType=ciiRAMetricType, ciiCircLastUpTime=ciiCircLastUpTime, ciiSysStatPartChanges=ciiSysStatPartChanges, ciiOwnLSPPurge=ciiOwnLSPPurge, ciiSysLevelMetricStyle=ciiSysLevelMetricStyle, ciiIPRAMetric=ciiIPRAMetric, ciiCircType=ciiCircType, ciiIPRAMetricType=ciiIPRAMetricType, CiiSupportedProtocol=CiiSupportedProtocol, ciiPduLspId=ciiPduLspId, ciiCircNumAdj=ciiCircNumAdj, ciiSysLevelTEEnabled=ciiSysLevelTEEnabled, ciiCircMaxAreaAddrMismatches=ciiCircMaxAreaAddrMismatches, ciiRAType=ciiRAType, CiiISLevel=CiiISLevel, ciiDatabaseOverload=ciiDatabaseOverload, CiiLSPBuffSize=CiiLSPBuffSize, ciscoIetfIsisMIBCompliances=ciscoIetfIsisMIBCompliances, ciiSysLevelSetOverload=ciiSysLevelSetOverload, ciiSysStatLSPDbaseOloads=ciiSysStatLSPDbaseOloads, ciiISAdjNeighSysType=ciiISAdjNeighSysType, ciiAreaMismatch=ciiAreaMismatch, ciiSysType=ciiSysType, ciiRAMetric=ciiRAMetric, ciiPacketCountLSPs=ciiPacketCountLSPs, ciiPduProtocolsSupported=ciiPduProtocolsSupported, ciiRedistributeAddrType=ciiRedistributeAddrType, ciiCircSmallHellos=ciiCircSmallHellos, ciiCircLevelWideMetric=ciiCircLevelWideMetric, ciscoIetfIsisSystemGroup=ciscoIetfIsisSystemGroup, ciiSysStatIDFieldLenMismatches=ciiSysStatIDFieldLenMismatches, CiiAdminState=CiiAdminState, PYSNMP_MODULE_ID=ciscoIetfIsisMIB, ciiSysProtSuppExistState=ciiSysProtSuppExistState, ciiCircTable=ciiCircTable, ciiCircLevelID=ciiCircLevelID, ciiCircuitType=ciiCircuitType, ciiISAdjIPAddrType=ciiISAdjIPAddrType, ciiCircLevelMetric=ciiCircLevelMetric, ciiISAdjNeighSNPAAddress=ciiISAdjNeighSNPAAddress, ciiNotifIsLevelIndex=ciiNotifIsLevelIndex, ciiProtocolsSupportedMismatch=ciiProtocolsSupportedMismatch, ciiManualAddressDrops=ciiManualAddressDrops, ciiCircLevelPartSNPInterval=ciiCircLevelPartSNPInterval, ciscoIetfIsisMIBAdvCompliance=ciscoIetfIsisMIBAdvCompliance, ciiCorruptedLSPDetected=ciiCorruptedLSPDetected, ciiISAdjTable=ciiISAdjTable, ciiIPRAFullMetric=ciiIPRAFullMetric, CiiDefaultMetric=CiiDefaultMetric, ciiManAreaAddr=ciiManAreaAddr, ciiISAdj=ciiISAdj, ciiManAreaAddrEntry=ciiManAreaAddrEntry, ciiCircMeshGroupEnabled=ciiCircMeshGroupEnabled, ciiCircLevelEntry=ciiCircLevelEntry, ciiSysLevel=ciiSysLevel, ciiPacketCountCSNPs=ciiPacketCountCSNPs, ciiIPRAType=ciiIPRAType, ciiOrigLSPBuffSizeMismatch=ciiOrigLSPBuffSizeMismatch, ciiSysStatAuthTypeFails=ciiSysStatAuthTypeFails, ciiRouterLevel=ciiRouterLevel, ciiPduMaxAreaAddress=ciiPduMaxAreaAddress, ciscoIetfIsisNotifObjectGroup=ciscoIetfIsisNotifObjectGroup, ciiISAdjState=ciiISAdjState, ciiLSPErrorDetected=ciiLSPErrorDetected, ciiRAExistState=ciiRAExistState, ciiSystemCounterEntry=ciiSystemCounterEntry, ciiCircLevelIndex=ciiCircLevelIndex, ciiSysMaxPathSplits=ciiSysMaxPathSplits, ciiSummAddressType=ciiSummAddressType, ciiCircLANDesISChanges=ciiCircLANDesISChanges, ciiRouterEntry=ciiRouterEntry, ciiCircuitCounterEntry=ciiCircuitCounterEntry, ciiSummAddress=ciiSummAddress, ciiPacketCountPSNPs=ciiPacketCountPSNPs, ciiNotifManualAddress=ciiNotifManualAddress, ciiMaxAreaAddressesMismatch=ciiMaxAreaAddressesMismatch, ciscoIetfIsisRATableGroup=ciscoIetfIsisRATableGroup, ciiAdjState=ciiAdjState, ciiSysStatCorrLSPs=ciiSysStatCorrLSPs, CiiLevelState=CiiLevelState, ciiRedistributeAddrExistState=ciiRedistributeAddrExistState, ciiSysStatOwnLSPPurges=ciiSysStatOwnLSPPurges, ciiSysLevelOrigLSPBuffSize=ciiSysLevelOrigLSPBuffSize, ciiCircLevelHelloMultiplier=ciiCircLevelHelloMultiplier, ciiSysReceiveLSPBufferSize=ciiSysReceiveLSPBufferSize, CiiUnsigned16TC=CiiUnsigned16TC, ciiLSPChecksum=ciiLSPChecksum, ciiRedistributeAddrEntry=ciiRedistributeAddrEntry, ciiCircAdminState=ciiCircAdminState, ciiErrorOffset=ciiErrorOffset, CiiMetricStyle=CiiMetricStyle, ciiNextCircIndex=ciiNextCircIndex, CiiLinkStatePDUID=CiiLinkStatePDUID, ciiRouterID=ciiRouterID, ciiSysLevelSPFConsiders=ciiSysLevelSPFConsiders, ciiAuthenticationTypeFailure=ciiAuthenticationTypeFailure, ciscoIetfIsisMIBConform=ciscoIetfIsisMIBConform, ciiNotification=ciiNotification, ciiCircLevelIDOctet=ciiCircLevelIDOctet, ciiVersionSkew=ciiVersionSkew, ciiCircLevelTable=ciiCircLevelTable, ciiCircLevelISPriority=ciiCircLevelISPriority, ciiSysStatAuthFails=ciiSysStatAuthFails, ciiISAdjEntry=ciiISAdjEntry, ciiISAdjAreaAddrIndex=ciiISAdjAreaAddrIndex, ciiSysProtSuppTable=ciiSysProtSuppTable, ciiRedistributeAddrTable=ciiRedistributeAddrTable, ciiCounters=ciiCounters, ciiRATable=ciiRATable, ciiPacketCountISHellos=ciiPacketCountISHellos, ciiLSPTLVSeq=ciiLSPTLVSeq, ciiCircExtendedCircID=ciiCircExtendedCircID, ciiPduFragment=ciiPduFragment, ciiCircLevelDesIS=ciiCircLevelDesIS, ciiLSPLevel=ciiLSPLevel, ciiRejectedAdjacency=ciiRejectedAdjacency, ciiRASNPAPrefix=ciiRASNPAPrefix, ciiManAreaAddrExistState=ciiManAreaAddrExistState, ciiRouterHostName=ciiRouterHostName, ciiCircIndex=ciiCircIndex, ciiCircIfIndex=ciiCircIfIndex, ciiCircIfSubIndex=ciiCircIfSubIndex, ciiISAdjNeighPriority=ciiISAdjNeighPriority, ciiIPRANextHopIndex=ciiIPRANextHopIndex, ciiLSPTLVEntry=ciiLSPTLVEntry, ciscoIetfIsisMIBNotifs=ciscoIetfIsisMIBNotifs, ciiSysL2toL1Leaking=ciiSysL2toL1Leaking, ciiIPRASourceType=ciiIPRASourceType, ciiLSPTLVValue=ciiLSPTLVValue, ciiAdjacencyChange=ciiAdjacencyChange, ciiCircAdjChanges=ciiCircAdjChanges, ciiSummAddrExistState=ciiSummAddrExistState, ciiSysLevelMinLSPGenInt=ciiSysLevelMinLSPGenInt, ciiISAdjProtSuppEntry=ciiISAdjProtSuppEntry, ciiLSPLifetimeRemain=ciiLSPLifetimeRemain, ciiLSPTLVIndex=ciiLSPTLVIndex, ciiIPRADest=ciiIPRADest, ciiLSPTLVLen=ciiLSPTLVLen, ciscoIetfIsisISIPRADestGroup=ciscoIetfIsisISIPRADestGroup, ciiSysLevelSetOverloadUntil=ciiSysLevelSetOverloadUntil, ciiReachAddr=ciiReachAddr, ciscoIetfIsisMIB=ciscoIetfIsisMIB, ciiCircAuthTypeFails=ciiCircAuthTypeFails, ciiCircRejAdjs=ciiCircRejAdjs, ciiIPRAEntry=ciiIPRAEntry, ciiCircInitFails=ciiCircInitFails, ciiSysID=ciiSysID, ciiSysStatSeqNumSkips=ciiSysStatSeqNumSkips, ciiPacketCountLevel=ciiPacketCountLevel)
mibBuilder.exportSymbols("CISCO-IETF-ISIS-MIB", ciscoIetfIsisISAdjGroup=ciscoIetfIsisISAdjGroup, ciiSummAddrMetric=ciiSummAddrMetric, ciiRedistributeAddrPrefixLen=ciiRedistributeAddrPrefixLen, ciiSysStatLevel=ciiSysStatLevel, ciiPacketCountIIHellos=ciiPacketCountIIHellos, ciiIPRAAdminState=ciiIPRAAdminState, ciiIDLenMismatch=ciiIDLenMismatch, ciiLSPDataBase=ciiLSPDataBase, CiiWideMetric=CiiWideMetric, ciiAreaAddr=ciiAreaAddr, ciiRouterTable=ciiRouterTable, ciiRASNPAAddress=ciiRASNPAAddress, ciiPduOriginatingBufferSize=ciiPduOriginatingBufferSize, ciiISAdjLastUpTime=ciiISAdjLastUpTime, ciiLSPSeq=ciiLSPSeq, ciiCircLevelDRHelloTimer=ciiCircLevelDRHelloTimer, ciiSummAddrPrefixLen=ciiSummAddrPrefixLen, ciiISAdjProtSuppProtocol=ciiISAdjProtSuppProtocol, ciiSysProtSuppProtocol=ciiSysProtSuppProtocol, ciiPduProtocolVersion=ciiPduProtocolVersion, ciiLSPTooLargeToPropagate=ciiLSPTooLargeToPropagate, ciiLSPSummaryTable=ciiLSPSummaryTable)
