#
# PySNMP MIB module AT-STACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AT-STACK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:30:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
modules, DisplayStringUnsized = mibBuilder.importSymbols("AT-SMI-MIB", "modules", "DisplayStringUnsized")
hostId, = mibBuilder.importSymbols("AT-SYSINFO-MIB", "hostId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Bits, Counter64, MibIdentifier, ModuleIdentity, Integer32, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, TimeTicks, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "Counter64", "MibIdentifier", "ModuleIdentity", "Integer32", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "TimeTicks", "Counter32", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
stack = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120))
stack.setRevisions(('2006-05-03 09:26',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: stack.setRevisionsDescriptions(('Initial Revision',))
if mibBuilder.loadTexts: stack.setLastUpdated('200605241222Z')
if mibBuilder.loadTexts: stack.setOrganization('Allied Telesis, Inc')
if mibBuilder.loadTexts: stack.setContactInfo('http://www.alliedtelesis.com')
if mibBuilder.loadTexts: stack.setDescription('This MIB file contains definitions of managed objects for the handling of stacking Allied Telesis switches. ')
stackId = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackId.setStatus('current')
if mibBuilder.loadTexts: stackId.setDescription('The stack ID variable identifies the given device as belonging to the stack with the given stack ID. The default stack ID is 1. To change the stack ID, stacking must be disabled. Once the stack ID is changed and stacking enabled again, the member joins an existing stack with the same stack ID or forms a new stack with its stack ID.')
stackSnmpHost = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackSnmpHost.setStatus('current')
if mibBuilder.loadTexts: stackSnmpHost.setDescription('The SNMP host variable specifies the host ID of the stack member that should responds to SNMP requests. It defaults to the lowest host ID that is active in the stack, and is re-evaluated whenever the stack membership changes. This ensures that the variable always has a value that corresponds to a valid stack member.')
stackStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackStatus.setStatus('current')
if mibBuilder.loadTexts: stackStatus.setDescription('The stack status variable specifies the current status of the stack module on the current SNMP host. The default is disabled (1).')
stackInterface = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackInterface.setStatus('current')
if mibBuilder.loadTexts: stackInterface.setDescription('The stack interface variable is used to specify the interface on the current SNMP host that should be used to send and receive stack messages. The default is none and can be replaced by an existing VLAN.')
stackAuth = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("plaintext", 1), ("md5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackAuth.setStatus('current')
if mibBuilder.loadTexts: stackAuth.setDescription('The stack authentication variable specifies whether stacking messages should be authenticated with the password given as the value of the stack password variable. By default, the authentication method is none (0). If plaintext (1) is specified, a cleartext password authenticates stacking messages. If MD5 (2) is specified, an encrypted password authenticates stacking protocol packets. The authentication type')
stackPassword = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 6), DisplayStringUnsized().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackPassword.setStatus('current')
if mibBuilder.loadTexts: stackPassword.setDescription('The stack password variable holds a text string that authenticates stack messages. By default, this variable holds an empty string. This must be changed before setting the stack authentication method to plaintext or MD5.')
counters = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 7))
debugErrors = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: debugErrors.setStatus('current')
if mibBuilder.loadTexts: debugErrors.setDescription('Stack debug errors.')
rxPkts = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPkts.setStatus('current')
if mibBuilder.loadTexts: rxPkts.setDescription('Stacking packets received.')
rxDiscards = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiscards.setStatus('current')
if mibBuilder.loadTexts: rxDiscards.setDescription('Stacking packets received and discarded.')
txPkts = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPkts.setStatus('current')
if mibBuilder.loadTexts: txPkts.setDescription('Stacking packets transmited.')
txFails = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txFails.setStatus('current')
if mibBuilder.loadTexts: txFails.setDescription('Stacking packets transmit failures.')
sdrCount = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdrCount.setStatus('current')
if mibBuilder.loadTexts: sdrCount.setDescription('Number of stacking records in database.')
stackMemberTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 8), )
if mibBuilder.loadTexts: stackMemberTable.setStatus('current')
if mibBuilder.loadTexts: stackMemberTable.setDescription('This table displays details about each of the stack members that are present in the stack to which the current SNMP host belongs. The details provided are the host ID, MAC address, designated and backup master, and state of each host.')
stackMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 8, 1), ).setIndexNames((0, "AT-SYSINFO-MIB", "hostId"))
if mibBuilder.loadTexts: stackMemberEntry.setStatus('current')
if mibBuilder.loadTexts: stackMemberEntry.setDescription('An entry in the ATR enterprise stackMemberTable table.')
memberHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memberHostId.setStatus('current')
if mibBuilder.loadTexts: memberHostId.setDescription('The host Id of this member.')
macAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddress.setStatus('current')
if mibBuilder.loadTexts: macAddress.setDescription('The MAC address of this member.')
dedicatedMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dedicatedMaster.setStatus('current')
if mibBuilder.loadTexts: dedicatedMaster.setDescription('Host Id of the dedicated master.')
backupDedicatedMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupDedicatedMaster.setStatus('current')
if mibBuilder.loadTexts: backupDedicatedMaster.setDescription('Host Id of the backup dedicated master.')
state = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 4, 4, 4, 120, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: state.setStatus('current')
if mibBuilder.loadTexts: state.setDescription('The state of this member.')
mibBuilder.exportSymbols("AT-STACK-MIB", state=state, stackSnmpHost=stackSnmpHost, rxDiscards=rxDiscards, stackMemberTable=stackMemberTable, stackPassword=stackPassword, counters=counters, txPkts=txPkts, txFails=txFails, backupDedicatedMaster=backupDedicatedMaster, debugErrors=debugErrors, stackMemberEntry=stackMemberEntry, stackInterface=stackInterface, rxPkts=rxPkts, stack=stack, memberHostId=memberHostId, PYSNMP_MODULE_ID=stack, macAddress=macAddress, stackAuth=stackAuth, stackStatus=stackStatus, stackId=stackId, dedicatedMaster=dedicatedMaster, sdrCount=sdrCount)
