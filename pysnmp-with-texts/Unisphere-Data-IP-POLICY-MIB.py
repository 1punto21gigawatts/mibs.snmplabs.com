#
# PySNMP MIB module Unisphere-Data-IP-POLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-IP-POLICY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:30:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, iso, Bits, Unsigned32, MibIdentifier, TimeTicks, NotificationType, IpAddress, Gauge32, ModuleIdentity, ObjectIdentity, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "Bits", "Unsigned32", "MibIdentifier", "TimeTicks", "NotificationType", "IpAddress", "Gauge32", "ModuleIdentity", "ObjectIdentity", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
usdIpPolicyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13))
usdIpPolicyMIB.setRevisions(('2002-01-03 15:06', '2000-07-20 00:00', '1998-11-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdIpPolicyMIB.setRevisionsDescriptions(('Expanded MIB to include following tables: UsdIpAspAccessListTable UsdIpPrefixListTable UsdIpPrefixTreeTable UsdIpCommunityListTable UsdIpExtCommunityListTable UsdIpRedistributeTable UsdIpRouteMapTable Expanded MIB to include a new textual convention: UsdIpPolicyExtendedCommunity', 'Added Named Access List support.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: usdIpPolicyMIB.setLastUpdated('200201031506Z')
if mibBuilder.loadTexts: usdIpPolicyMIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdIpPolicyMIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 Email: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdIpPolicyMIB.setDescription('The IP Policy MIB for the Unisphere Networks Inc. enterprise.')
class UsdIpPolicyName(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set. See SNMPv2-TC.DisplayString DESCRIPTION for a summary.'
    description = 'IP access list name. Represents textual information taken from the NVT ASCII character set.'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class UsdIpPolicyPolicy(TextualConvention, Integer32):
    description = 'The set of IP policy actions.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("permit", 0), ("deny", 1))

class UsdIpRedistributeProtocol(TextualConvention, Integer32):
    description = 'The set of protocols choices used to configure to/from settings in an IP Redistribution element.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("ipRedistrProtocolStatic", 1), ("ipRedistrProtocolBgp", 2), ("ipRedistrProtocolMBgp", 3), ("ipRedistrProtocolOspf", 4), ("ipRedistrProtocolIsis", 5), ("ipRedistrProtocolRip", 6), ("ipRedistrProtocolConnected", 7), ("ipRedistrProtocolDefaultRoute", 8), ("ipRedistrProtocolAccess", 9), ("ipRedistrProtocolAccessInternal", 10), ("ipRedistrProtocolDvmrp", 11))

class UsdIpPolicyAdminStatus(TextualConvention, Integer32):
    description = 'The administratively assigned management state for an IP route policy.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("ipPolicyAdminStateDisable", 0), ("ipPolicyAdminStateEnable", 1))

class UsdIpPolicyExtendedCommunity(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set.'
    description = 'The extended community specification. Represents textual information taken from the NVT ASCII character set. The format of the text string is defined by either one of these choices: In: ASN::nn where ASN is a 16 bit decimal number and nn is a 32 bit decimal number Or: IP-address::nn where IP-address is in dotted decimal format and nn is a 16 bit decimal number '
    status = 'current'
    displayHint = '22a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 22)

usdIpPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1))
usdIpAccessList = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1))
usdIpNamedAccessList = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2))
usdIpAspAccessList = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3))
usdIpPrefixList = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4))
usdIpPrefixTree = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5))
usdIpCommunityList = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6))
usdIpRedistributeList = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7))
usdIpRouteMapTree = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8))
usdIpAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1), )
if mibBuilder.loadTexts: usdIpAccessListTable.setStatus('current')
if mibBuilder.loadTexts: usdIpAccessListTable.setDescription("This table contains entries for elements of IP access lists. Entries belonging to the same access list are ordered, and comparisons to those entries are performed in that order until a match is detected. If no match is found, the default action is to 'deny'.")
usdIpAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1), ).setIndexNames((0, "Unisphere-Data-IP-POLICY-MIB", "usdIpAccessListId"), (0, "Unisphere-Data-IP-POLICY-MIB", "usdIpAccessListElemId"))
if mibBuilder.loadTexts: usdIpAccessListEntry.setStatus('current')
if mibBuilder.loadTexts: usdIpAccessListEntry.setDescription('Each entry describes the characteristics of an IP access list element.')
usdIpAccessListId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: usdIpAccessListId.setStatus('current')
if mibBuilder.loadTexts: usdIpAccessListId.setDescription('The number of the access list to which this entry belongs.')
usdIpAccessListElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)))
if mibBuilder.loadTexts: usdIpAccessListElemId.setStatus('current')
if mibBuilder.loadTexts: usdIpAccessListElemId.setDescription('The relative position of this entry within its access list. Access list entries are searched in this sequence (low to high values) until a match is found. NOTE: The value zero is reserved for use with SET operations to perform special-purpose table entry creations/deletions; see the DESCRIPTION of usdIpAccessListRowStatus for details. Get/GetNext/GetBulk retrievals never return an entry for which this object is zero-valued.')
usdIpAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAccessListRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdIpAccessListRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy Two configuration levels are defined, limited and full. EARLY IMPLEMENTATIONS MIGHT PROVIDE ONLY THE LIMITED LEVEL OF CONFIGURATION CAPABILITY. *** LIMITED ACCESS LIST CONFIGURATION LEVEL *** 1) RowStatus createAndGo/destroy operations directed to a target table entry for which usdIpAccessListElemId is ZERO, have the following special-purpose semantics: createAndGo Create an entry having the specified configuration and append it to the target list, i.e. assign it a value of usdIpAccessListElemId that is one greater than the current last element in the list. destroy Destroy the specified list and all of its constituent elements. 2) RowStatus createAndGo/destroy operations directed to a target table entry for which usdIpAccessListElemId is NONZERO are disallowed. *** FULL ACCESS LIST CONFIGURATION LEVEL *** Permit conventional RowStatus-based management of table entries having a nonzero value for usdIpAccessListElemId, IN ADDITION TO the special RowStatus semantics applied to entries having a zero value for usdIpAccessListElemId. To create an entry in this table, the following entry objects MUST be explicitly configured: usdIpAccessListRowStatus In addition, when creating an entry the following conditions must hold: The value of usdIpAccessListElemId is nonzero. Once created, element attributes cannot be modified except by a RowStatus destroy operation to delete the list element.')
usdIpAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 4), UsdIpPolicyPolicy().clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAccessListAction.setStatus('current')
if mibBuilder.loadTexts: usdIpAccessListAction.setDescription('Specifies the disposition of an item that matches the comparison criteria described by this entry.')
usdIpAccessListSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAccessListSrc.setStatus('current')
if mibBuilder.loadTexts: usdIpAccessListSrc.setDescription('A source IP address. A subject IP address is first masked with the value of usdIpAccessListSrcMask, then the result is compared to this value. Setting both this object and its corresponding mask to 0.0.0.0 acts as a wildcard, matching any source IP address.')
usdIpAccessListSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAccessListSrcMask.setStatus('current')
if mibBuilder.loadTexts: usdIpAccessListSrcMask.setDescription('The IP address mask to be applied to a subject source IP address before comparing it to usdIpAccessListSrc. Ones in the mask identify which bits in the subject IP address are significant for the comparison. To be considered valid, a nonzero value for this object must contain a single contiguous string of ones, beginning with the most significant bit of the mask.')
usdIpAccessListDst = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAccessListDst.setStatus('current')
if mibBuilder.loadTexts: usdIpAccessListDst.setDescription('A destination IP address. A subject IP address is first masked with the value of usdIpAccessListDstMask, then the result is compared to this value. Setting both this object and its corresponding mask to 0.0.0.0 acts as a wildcard, matching any destination IP address.')
usdIpAccessListDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAccessListDstMask.setStatus('current')
if mibBuilder.loadTexts: usdIpAccessListDstMask.setDescription('The IP address mask to be applied to a subject destination IP address before comparing it to usdIpAccessListDst. Ones in the mask identify which bits in the IP address are significant for the comparison. To be considered valid, a nonzero value for this object must contain a single contiguous string of ones, beginning with the most significant bit of the mask.')
usdIpAccessListProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAccessListProtocol.setStatus('current')
if mibBuilder.loadTexts: usdIpAccessListProtocol.setDescription('An IP Protocol value. Nonzero values match a specific IP Protocol value (e.g. 6 for TCP) carried in an IP packet; a value of zero acts as a wildcard, matching any IP Protocol.')
usdIpNamedAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1), )
if mibBuilder.loadTexts: usdIpNamedAccessListTable.setStatus('current')
if mibBuilder.loadTexts: usdIpNamedAccessListTable.setDescription("This table contains entries for elements of IP access lists. Entries belonging to the same access list are ordered, and comparisons to those entries are performed in that order until a match is detected. If no match is found, the default action is to 'deny'.")
usdIpNamedAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1), ).setIndexNames((0, "Unisphere-Data-IP-POLICY-MIB", "usdIpNamedAccessListName"), (0, "Unisphere-Data-IP-POLICY-MIB", "usdIpNamedAccessListElemId"))
if mibBuilder.loadTexts: usdIpNamedAccessListEntry.setStatus('current')
if mibBuilder.loadTexts: usdIpNamedAccessListEntry.setDescription('Each entry describes the characteristics of an IP access list element.')
usdIpNamedAccessListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 1), UsdIpPolicyName())
if mibBuilder.loadTexts: usdIpNamedAccessListName.setStatus('current')
if mibBuilder.loadTexts: usdIpNamedAccessListName.setDescription('The name of the access list to which this entry belongs.')
usdIpNamedAccessListElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)))
if mibBuilder.loadTexts: usdIpNamedAccessListElemId.setStatus('current')
if mibBuilder.loadTexts: usdIpNamedAccessListElemId.setDescription('The relative position of this entry within its access list. Access list entries are searched in this sequence (low to high values) until a match is found. NOTE: The value zero is reserved for use with SET operations to perform special-purpose table entry creations/deletions; see the DESCRIPTION of usdIpNamedAccessListRowStatus for details. Get/GetNext/GetBulk retrievals never return an entry for which this object is zero-valued.')
usdIpNamedAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpNamedAccessListRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdIpNamedAccessListRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy Two configuration levels are defined, limited and full. EARLY IMPLEMENTATIONS MIGHT PROVIDE ONLY THE LIMITED LEVEL OF CONFIGURATION CAPABILITY. *** LIMITED ACCESS LIST CONFIGURATION LEVEL *** 1) RowStatus createAndGo/destroy operations directed to a target table entry for which usdIpNamedAccessListElemId is ZERO, have the following special-purpose semantics: createAndGo Create an entry having the specified configuration and append it to the target list, i.e. assign it a value of usdIpNamedAccessListElemId that is one greater than the current last element in the list. destroy Destroy the specified list and all of its constituent elements. 2) RowStatus createAndGo/destroy operations directed to a target table entry for which usdIpNamedAccessListElemId is NONZERO are disallowed. *** FULL ACCESS LIST CONFIGURATION LEVEL *** Permit conventional RowStatus-based management of table entries having a nonzero value for usdIpNamedAccessListElemId, IN ADDITION TO the special RowStatus semantics applied to entries having a zero value for usdIpNamedAccessListElemId. To create an entry in this table, the following entry objects MUST be explicitly configured: usdIpNamedAccessListRowStatus In addition, when creating an entry the following conditions must hold: The value of usdIpNamedAccessListElemId is nonzero. Once created, element attributes cannot be modified except by a RowStatus destroy operation to delete the list element.')
usdIpNamedAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 4), UsdIpPolicyPolicy().clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpNamedAccessListAction.setStatus('current')
if mibBuilder.loadTexts: usdIpNamedAccessListAction.setDescription('Specifies the disposition of an item that matches the comparison criteria described by this entry.')
usdIpNamedAccessListSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpNamedAccessListSrc.setStatus('current')
if mibBuilder.loadTexts: usdIpNamedAccessListSrc.setDescription('A source IP address. A subject IP address is first masked with the value of usdIpNamedAccessListSrcMask, then the result is compared to this value. Setting both this object and its corresponding mask to 0.0.0.0 acts as a wildcard, matching any source IP address.')
usdIpNamedAccessListSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpNamedAccessListSrcMask.setStatus('current')
if mibBuilder.loadTexts: usdIpNamedAccessListSrcMask.setDescription('The IP address mask to be applied to a subject source IP address before comparing it to usdIpNamedAccessListSrc. Ones in the mask identify which bits in the subject IP address are significant for the comparison. To be considered valid, a nonzero value for this object must contain a single contiguous string of ones, beginning with the most significant bit of the mask.')
usdIpNamedAccessListDst = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpNamedAccessListDst.setStatus('current')
if mibBuilder.loadTexts: usdIpNamedAccessListDst.setDescription('A destination IP address. A subject IP address is first masked with the value of usdIpNamedAccessListDstMask, then the result is compared to this value. Setting both this object and its corresponding mask to 0.0.0.0 acts as a wildcard, matching any destination IP address.')
usdIpNamedAccessListDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpNamedAccessListDstMask.setStatus('current')
if mibBuilder.loadTexts: usdIpNamedAccessListDstMask.setDescription('The IP address mask to be applied to a subject destination IP address before comparing it to usdIpNamedAccessListDst. Ones in the mask identify which bits in the IP address are significant for the comparison. To be considered valid, a nonzero value for this object must contain a single contiguous string of ones, beginning with the most significant bit of the mask.')
usdIpNamedAccessListProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpNamedAccessListProtocol.setStatus('current')
if mibBuilder.loadTexts: usdIpNamedAccessListProtocol.setDescription('An IP Protocol value. Nonzero values match a specific IP Protocol value (e.g. 6 for TCP) carried in an IP packet; a value of zero acts as a wildcard, matching any IP Protocol.')
usdIpAspAccessTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3, 1), )
if mibBuilder.loadTexts: usdIpAspAccessTable.setStatus('current')
if mibBuilder.loadTexts: usdIpAspAccessTable.setDescription('This table contains entries for elements of IP AS-Path access entries.')
usdIpAspAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3, 1, 1), ).setIndexNames((0, "Unisphere-Data-IP-POLICY-MIB", "usdIpAspAccessName"), (0, "Unisphere-Data-IP-POLICY-MIB", "usdIpAspAccessElemId"))
if mibBuilder.loadTexts: usdIpAspAccessEntry.setStatus('current')
if mibBuilder.loadTexts: usdIpAspAccessEntry.setDescription('Each entry describes the characteristics of an IP AS-Path access element.')
usdIpAspAccessName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3, 1, 1, 1), UsdIpPolicyName())
if mibBuilder.loadTexts: usdIpAspAccessName.setStatus('current')
if mibBuilder.loadTexts: usdIpAspAccessName.setDescription('The name of the AS-Path Access List to which this entry belongs.')
usdIpAspAccessElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)))
if mibBuilder.loadTexts: usdIpAspAccessElemId.setStatus('current')
if mibBuilder.loadTexts: usdIpAspAccessElemId.setDescription('The element ID portion of the IP AS-Path for this entry.')
usdIpAspAccessCreatedInternally = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpAspAccessCreatedInternally.setStatus('current')
if mibBuilder.loadTexts: usdIpAspAccessCreatedInternally.setDescription('Indicated whether this entry was created internally by the system, or dynamically via a management interface. A true value for this object indicates that this entry was created internally; false indicates externally.')
usdIpAspAccessPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3, 1, 1, 4), UsdIpPolicyPolicy()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAspAccessPolicy.setStatus('current')
if mibBuilder.loadTexts: usdIpAspAccessPolicy.setDescription('Indicates the action to take for this AS-Path access list.')
usdIpAspAccessExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAspAccessExpression.setStatus('current')
if mibBuilder.loadTexts: usdIpAspAccessExpression.setDescription('The AS-Path access list expression for this entry.')
usdIpAspAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAspAccessRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdIpAspAccessRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdIpCommunityRowStatus In addition, when creating an entry the following conditions must hold: Once created, only certain attributes can be modified. What are they? FIXME JCS')
usdIpPrefixListTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1), )
if mibBuilder.loadTexts: usdIpPrefixListTable.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixListTable.setDescription("This table contains entries for elements of IP prefix lists. Entries belonging to the same prefix list are ordered, and comparisons to those entries are performed in that order until a match is detected. If no match is found, the default action is to 'deny'.")
usdIpPrefixListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1), ).setIndexNames((0, "Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixListName"), (0, "Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixListElemId"), (0, "Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixListIpAddress"), (0, "Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixListLength"))
if mibBuilder.loadTexts: usdIpPrefixListEntry.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixListEntry.setDescription('Each entry describes the characteristics of an IP prefix list element.')
usdIpPrefixListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 1), UsdIpPolicyName())
if mibBuilder.loadTexts: usdIpPrefixListName.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixListName.setDescription('The name of the prefix list to which this entry belongs.')
usdIpPrefixListElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)))
if mibBuilder.loadTexts: usdIpPrefixListElemId.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixListElemId.setDescription('The relative position of this entry within its prefix list. Access list entries are searched in this sequence (low to high values) until a match is found.')
usdIpPrefixListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: usdIpPrefixListIpAddress.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixListIpAddress.setDescription('The IP Address portion of the IP List value for this entry.')
usdIpPrefixListLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: usdIpPrefixListLength.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixListLength.setDescription('The length portion of the IP List value for this entry.')
usdIpPrefixListPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 5), UsdIpPolicyPolicy()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpPrefixListPolicy.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixListPolicy.setDescription('The IP Prefix list action to perform for this entry.')
usdIpPrefixListGeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpPrefixListGeValue.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixListGeValue.setDescription('The minimum prefix length to apply to address.')
usdIpPrefixListLeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpPrefixListLeValue.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixListLeValue.setDescription('The maximum prefix length to apply to address.')
usdIpPrefixListDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpPrefixListDescription.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixListDescription.setDescription('The administratively assigned description for this entry.')
usdIpPrefixListHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpPrefixListHitCount.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixListHitCount.setDescription('The number of hits for this entry.')
usdIpPrefixListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpPrefixListRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixListRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdIpPrefixListRowStatus In addition, when creating an entry the following conditions must hold: The value of usdIpPrefixListElemId is nonzero. Once created, only certain attributes can be modified.')
usdIpPrefixTreeTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1), )
if mibBuilder.loadTexts: usdIpPrefixTreeTable.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixTreeTable.setDescription("This table contains entries for elements of IP prefix trees. Entries belonging to the same prefix tree are ordered, and comparisons to those entries are performed in that order until a match is detected. If no match is found, the default action is to 'deny'.")
usdIpPrefixTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1, 1), ).setIndexNames((0, "Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixTreeName"), (0, "Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixTreeIpAddress"), (0, "Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixTreeLength"))
if mibBuilder.loadTexts: usdIpPrefixTreeEntry.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixTreeEntry.setDescription('Each entry describes the characteristics of an IP prefix tree element.')
usdIpPrefixTreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1, 1, 1), UsdIpPolicyName())
if mibBuilder.loadTexts: usdIpPrefixTreeName.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixTreeName.setDescription('The name of the prefix tree to which this entry belongs.')
usdIpPrefixTreeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: usdIpPrefixTreeIpAddress.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixTreeIpAddress.setDescription('The IP Address portion of the IP Prefix value for this entry.')
usdIpPrefixTreeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: usdIpPrefixTreeLength.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixTreeLength.setDescription('The length portion of the IP Prefix value for this entry.')
usdIpPrefixTreePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1, 1, 4), UsdIpPolicyPolicy()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpPrefixTreePolicy.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixTreePolicy.setDescription('The IP Prefix tree policy perform for this entry.')
usdIpPrefixTreeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpPrefixTreeDescription.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixTreeDescription.setDescription('The administratively assigned description for this entry.')
usdIpPrefixTreeHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpPrefixTreeHitCount.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixTreeHitCount.setDescription('The number of hits for this entry.')
usdIpPrefixTreeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpPrefixTreeRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixTreeRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdIpPrefixTreeRowStatus In addition, when creating an entry the following conditions must hold: The value of usdIpPrefixTreeIpAddress and usdIpPrefixTreeLength are nonzero. Once created, only certain attributes can be modified.')
usdIpCommunityListTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1), )
if mibBuilder.loadTexts: usdIpCommunityListTable.setStatus('current')
if mibBuilder.loadTexts: usdIpCommunityListTable.setDescription('This table contains entries for elements of IP Community Lists. Entries belonging to the same Community List are ordered. The table supports standard and extended community lists.')
usdIpCommunityListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1, 1), ).setIndexNames((0, "Unisphere-Data-IP-POLICY-MIB", "usdIpCommunityListName"), (0, "Unisphere-Data-IP-POLICY-MIB", "usdIpCommunityListElemId"))
if mibBuilder.loadTexts: usdIpCommunityListEntry.setStatus('current')
if mibBuilder.loadTexts: usdIpCommunityListEntry.setDescription('Each entry describes the characteristics of an IP Community List element.')
usdIpCommunityListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1, 1, 1), UsdIpPolicyName())
if mibBuilder.loadTexts: usdIpCommunityListName.setStatus('current')
if mibBuilder.loadTexts: usdIpCommunityListName.setDescription('The name of the Community List to which this entry belongs.')
usdIpCommunityListElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)))
if mibBuilder.loadTexts: usdIpCommunityListElemId.setStatus('current')
if mibBuilder.loadTexts: usdIpCommunityListElemId.setDescription('The IP Address portion of the IP Prefix value for this entry.')
usdIpCommunityListCreatedInternally = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpCommunityListCreatedInternally.setStatus('current')
if mibBuilder.loadTexts: usdIpCommunityListCreatedInternally.setDescription('Indicated whether this entry was created internally by the system, or dynamically via a management interface. A true value for this object indicates that this entry was created internally; false indicates externally.')
usdIpCommunityListExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpCommunityListExtended.setStatus('current')
if mibBuilder.loadTexts: usdIpCommunityListExtended.setDescription('Indicates whether this entry is a standard or extended Community List. True indicates extended, false indicates standard')
usdIpCommunityListPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1, 1, 5), UsdIpPolicyPolicy()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpCommunityListPolicy.setStatus('current')
if mibBuilder.loadTexts: usdIpCommunityListPolicy.setDescription('Indicates the policy action to perform for this list.')
usdIpCommunityListExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpCommunityListExpression.setStatus('current')
if mibBuilder.loadTexts: usdIpCommunityListExpression.setDescription('The community list expression for this entry.')
usdIpCommunityListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpCommunityListRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdIpCommunityListRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdIpCommunityRowStatus In addition, when creating an entry the following conditions must hold: Once created, only certain attributes can be modified. What are they? FIXME JCS')
usdIpExtCommunityListTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 2), )
if mibBuilder.loadTexts: usdIpExtCommunityListTable.setStatus('current')
if mibBuilder.loadTexts: usdIpExtCommunityListTable.setDescription('This table contains entries for Extended IP Community Lists. Entries belonging to the same Extended Community List are ordered.')
usdIpExtCommunityListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 2, 1), ).setIndexNames((0, "Unisphere-Data-IP-POLICY-MIB", "usdIpExtCommunityListName"), (0, "Unisphere-Data-IP-POLICY-MIB", "usdIpExtCommunityListElemId"))
if mibBuilder.loadTexts: usdIpExtCommunityListEntry.setStatus('current')
if mibBuilder.loadTexts: usdIpExtCommunityListEntry.setDescription('Each entry describes the characteristics of an Extended IP Community List element.')
usdIpExtCommunityListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 2, 1, 1), UsdIpPolicyName())
if mibBuilder.loadTexts: usdIpExtCommunityListName.setStatus('current')
if mibBuilder.loadTexts: usdIpExtCommunityListName.setDescription('The name of the Extended Community List to which this entry belongs.')
usdIpExtCommunityListElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)))
if mibBuilder.loadTexts: usdIpExtCommunityListElemId.setStatus('current')
if mibBuilder.loadTexts: usdIpExtCommunityListElemId.setDescription('The element ID value for this entry.')
usdIpExtCommunityListCreatedInternally = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpExtCommunityListCreatedInternally.setStatus('current')
if mibBuilder.loadTexts: usdIpExtCommunityListCreatedInternally.setDescription('Indicated whether this entry was created internally by the system, or dynamically via a management interface. A true value for this object indicates that this entry was created internally; false indicates externally.')
usdIpExtCommunityListPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 2, 1, 4), UsdIpPolicyPolicy()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpExtCommunityListPolicy.setStatus('current')
if mibBuilder.loadTexts: usdIpExtCommunityListPolicy.setDescription('Indicates')
usdIpExtCommunityListExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpExtCommunityListExpression.setStatus('current')
if mibBuilder.loadTexts: usdIpExtCommunityListExpression.setDescription('The extended community list expression for this entry.')
usdIpExtCommunityListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpExtCommunityListRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdIpExtCommunityListRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdIpExtCommunityRowStatus In addition, when creating an entry the following conditions must hold: The value of usdIpExtCommunityListElemId is included in this table as a key for future use. It must be the value zero. Once created, only certain attributes can be modified.')
usdIpDynRedistributeTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 1), )
if mibBuilder.loadTexts: usdIpDynRedistributeTable.setStatus('current')
if mibBuilder.loadTexts: usdIpDynRedistributeTable.setDescription('This table contains entries for elements of IP Dynamic Route Redistribution elements.')
usdIpDynRedistributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 1, 1), ).setIndexNames((0, "Unisphere-Data-IP-POLICY-MIB", "usdIpDynRedistributeToProtocol"))
if mibBuilder.loadTexts: usdIpDynRedistributeEntry.setStatus('current')
if mibBuilder.loadTexts: usdIpDynRedistributeEntry.setDescription('Each entry describes the characteristics of a dynamic IP Route Redistribute element.')
usdIpDynRedistributeToProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 1, 1, 1), UsdIpRedistributeProtocol())
if mibBuilder.loadTexts: usdIpDynRedistributeToProtocol.setStatus('current')
if mibBuilder.loadTexts: usdIpDynRedistributeToProtocol.setDescription('Identifies the protocol associated with this Dynamic Route Redistribution element that routes are redistributed to.')
usdIpDynRedistributeState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 1, 1, 2), UsdIpPolicyAdminStatus().clone('ipPolicyAdminStateEnable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpDynRedistributeState.setStatus('current')
if mibBuilder.loadTexts: usdIpDynRedistributeState.setDescription('Indicates the enable/disable state of this redistribution element.')
usdIpDynRedistributeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpDynRedistributeRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdIpDynRedistributeRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdIpDynRedistributeRowStatus Once created, only the usdIpDynRedistributeState object can be modified.')
usdIpRedistributeTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 2), )
if mibBuilder.loadTexts: usdIpRedistributeTable.setStatus('current')
if mibBuilder.loadTexts: usdIpRedistributeTable.setDescription('This table contains entries for elements of IP Route Redistribution elements.')
usdIpRedistributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 2, 1), ).setIndexNames((0, "Unisphere-Data-IP-POLICY-MIB", "usdIpRedistributeToProtocol"), (0, "Unisphere-Data-IP-POLICY-MIB", "usdIpRedistributeFromProtocol"))
if mibBuilder.loadTexts: usdIpRedistributeEntry.setStatus('current')
if mibBuilder.loadTexts: usdIpRedistributeEntry.setDescription('Each entry describes the characteristics of an IP Route Redistribution element.')
usdIpRedistributeToProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 2, 1, 1), UsdIpRedistributeProtocol())
if mibBuilder.loadTexts: usdIpRedistributeToProtocol.setStatus('current')
if mibBuilder.loadTexts: usdIpRedistributeToProtocol.setDescription('Identifies the protocol for this element that routes are redistributed to.')
usdIpRedistributeFromProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 2, 1, 2), UsdIpRedistributeProtocol())
if mibBuilder.loadTexts: usdIpRedistributeFromProtocol.setStatus('current')
if mibBuilder.loadTexts: usdIpRedistributeFromProtocol.setDescription('Identifies the protocol for this element that routes are redistributed from.')
usdIpRedistributeState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 2, 1, 3), UsdIpPolicyAdminStatus().clone('ipPolicyAdminStateEnable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpRedistributeState.setStatus('current')
if mibBuilder.loadTexts: usdIpRedistributeState.setDescription('Indicates the enable/disable state of this redistribution element.')
usdIpRedistributeRouteMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 2, 1, 4), UsdIpPolicyName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpRedistributeRouteMapName.setStatus('current')
if mibBuilder.loadTexts: usdIpRedistributeRouteMapName.setDescription('Identifies the IP route-map associated with this IP Route Redistribution element.')
usdIpRedistributeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpRedistributeRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdIpRedistributeRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdIpRedistributeRowStatus usdIpRedistributeRouteMapName Once created, only the usdIpRedistributeState object can be modified.')
usdIpRouteMapTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1), )
if mibBuilder.loadTexts: usdIpRouteMapTable.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteMapTable.setDescription('This table contains entries for elements of IP Route Maps.')
usdIpRouteMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1, 1), ).setIndexNames((0, "Unisphere-Data-IP-POLICY-MIB", "usdIpRouteMapName"), (0, "Unisphere-Data-IP-POLICY-MIB", "usdIpRouteMapSequenceNum"), (0, "Unisphere-Data-IP-POLICY-MIB", "usdIpRouteMapElemId"), (0, "Unisphere-Data-IP-POLICY-MIB", "usdIpRouteMapSubElemId"))
if mibBuilder.loadTexts: usdIpRouteMapEntry.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteMapEntry.setDescription('Each entry describes the characteristics of an IP Route Map element.')
usdIpRouteMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1, 1, 1), UsdIpPolicyName())
if mibBuilder.loadTexts: usdIpRouteMapName.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteMapName.setDescription('The name of the route map to which this entry belongs.')
usdIpRouteMapSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdIpRouteMapSequenceNum.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteMapSequenceNum.setDescription('The element ID value for this entry.')
usdIpRouteMapElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdIpRouteMapElemId.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteMapElemId.setDescription('The element ID to which this entry belongs.')
usdIpRouteMapSubElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdIpRouteMapSubElemId.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteMapSubElemId.setDescription('The sub-element ID to which this entry belongs.')
usdIpRouteMapCreatedInternally = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpRouteMapCreatedInternally.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteMapCreatedInternally.setDescription('Indicated whether this entry was created internally by the system, or dynamically via a management interface. A true value for this object indicates that this entry was created internally; false indicates externally.')
usdIpRouteMapPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1, 1, 6), UsdIpPolicyPolicy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpRouteMapPolicy.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteMapPolicy.setDescription('Indicates the policy action performed by this element.')
usdIpRouteMapDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpRouteMapDisplay.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteMapDisplay.setDescription('Textual information taken from the NVT ASCII character set (i.e. RFC1903 DisplayString), but with increased length. The information in this object is the series of set, match, and/or match & set clauses for this route map. It is assumed that the information conveyed in this object is used for display purposes and in general, is not parsed. The information in this string is a concatentation of routemap clauses configured via the systems non SNMP interface.')
usdIpPolicyConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4))
usdIpPolicyCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 1))
usdIpPolicyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2))
usdIpPolicyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 1, 1)).setObjects(("Unisphere-Data-IP-POLICY-MIB", "usdIpAccessListGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpPolicyCompliance = usdIpPolicyCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdIpPolicyCompliance.setDescription('An obsolete compliance statement for entities that implement the Unisphere IP Policy MIB. This statement became obsolete when support was added for the IP Named Access List.')
usdIpPolicyCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 1, 2)).setObjects(("Unisphere-Data-IP-POLICY-MIB", "usdIpAccessListGroup"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpNamedAccessListGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpPolicyCompliance2 = usdIpPolicyCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdIpPolicyCompliance2.setDescription('An obsolete compliance statement for entities that implement the Unisphere IP Policy MIB. This statement became obsolete when support was added for the IP ASP Access List, the IP Prefix List, the IP Prefix Tree, the IP Community List, the IP Extended Community List, IP Dynamic Route Redistribution, and the IP Route Map.')
usdIpPolicyCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 1, 3)).setObjects(("Unisphere-Data-IP-POLICY-MIB", "usdIpAccessListGroup"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpNamedAccessListGroup"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpAspAccessListGroup"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixListGroup"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixTreeGroup"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpCommunityListGroup"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpExtCommunityListGroup"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpRedistributeGroup"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpRouteMapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpPolicyCompliance3 = usdIpPolicyCompliance3.setStatus('current')
if mibBuilder.loadTexts: usdIpPolicyCompliance3.setDescription('The compliance statement for entities that implement the Unisphere IP Policy MIB.')
usdIpAccessListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 1)).setObjects(("Unisphere-Data-IP-POLICY-MIB", "usdIpAccessListRowStatus"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpAccessListAction"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpAccessListSrc"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpAccessListSrcMask"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpAccessListDst"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpAccessListDstMask"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpAccessListProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpAccessListGroup = usdIpAccessListGroup.setStatus('current')
if mibBuilder.loadTexts: usdIpAccessListGroup.setDescription('A collection of objects for managing IP access list capabilities in a Unisphere product.')
usdIpNamedAccessListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 2)).setObjects(("Unisphere-Data-IP-POLICY-MIB", "usdIpNamedAccessListRowStatus"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpNamedAccessListAction"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpNamedAccessListSrc"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpNamedAccessListSrcMask"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpNamedAccessListDst"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpNamedAccessListDstMask"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpNamedAccessListProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpNamedAccessListGroup = usdIpNamedAccessListGroup.setStatus('current')
if mibBuilder.loadTexts: usdIpNamedAccessListGroup.setDescription('A named collection of objects for managing IP access list capabilities in a Unisphere product.')
usdIpAspAccessListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 3)).setObjects(("Unisphere-Data-IP-POLICY-MIB", "usdIpAspAccessCreatedInternally"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpAspAccessPolicy"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpAspAccessExpression"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpAspAccessRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpAspAccessListGroup = usdIpAspAccessListGroup.setStatus('current')
if mibBuilder.loadTexts: usdIpAspAccessListGroup.setDescription('A named collection of objects for managing AS-Path access list capabilities in a Unisphere product.')
usdIpPrefixListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 4)).setObjects(("Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixListPolicy"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixListGeValue"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixListLeValue"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixListDescription"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixListHitCount"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpPrefixListGroup = usdIpPrefixListGroup.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixListGroup.setDescription('A named collection of objects for managing Prefix list capabilities in a Unisphere product.')
usdIpPrefixTreeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 5)).setObjects(("Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixTreePolicy"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixTreeDescription"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixTreeHitCount"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpPrefixTreeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpPrefixTreeGroup = usdIpPrefixTreeGroup.setStatus('current')
if mibBuilder.loadTexts: usdIpPrefixTreeGroup.setDescription('A named collection of objects for managing Prefix Tree capabilities in a Unisphere product.')
usdIpCommunityListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 6)).setObjects(("Unisphere-Data-IP-POLICY-MIB", "usdIpCommunityListCreatedInternally"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpCommunityListExtended"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpCommunityListPolicy"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpCommunityListExpression"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpCommunityListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpCommunityListGroup = usdIpCommunityListGroup.setStatus('current')
if mibBuilder.loadTexts: usdIpCommunityListGroup.setDescription('A named collection of objects for managing Community List capabilities in a Unisphere product.')
usdIpExtCommunityListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 7)).setObjects(("Unisphere-Data-IP-POLICY-MIB", "usdIpExtCommunityListCreatedInternally"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpExtCommunityListPolicy"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpExtCommunityListExpression"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpExtCommunityListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpExtCommunityListGroup = usdIpExtCommunityListGroup.setStatus('current')
if mibBuilder.loadTexts: usdIpExtCommunityListGroup.setDescription('A named collection of objects for managing Extended Community List capabilities in a Unisphere product.')
usdIpRedistributeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 8)).setObjects(("Unisphere-Data-IP-POLICY-MIB", "usdIpDynRedistributeState"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpDynRedistributeRowStatus"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpRedistributeState"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpRedistributeRouteMapName"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpRedistributeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpRedistributeGroup = usdIpRedistributeGroup.setStatus('current')
if mibBuilder.loadTexts: usdIpRedistributeGroup.setDescription('A collection of objects for managing IP route redistribution list capabilities in a Unisphere product.')
usdIpRouteMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 9)).setObjects(("Unisphere-Data-IP-POLICY-MIB", "usdIpRouteMapCreatedInternally"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpRouteMapPolicy"), ("Unisphere-Data-IP-POLICY-MIB", "usdIpRouteMapDisplay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpRouteMapGroup = usdIpRouteMapGroup.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteMapGroup.setDescription('A collection of objects for managing IP route map list capabilities in a Unisphere product.')
mibBuilder.exportSymbols("Unisphere-Data-IP-POLICY-MIB", usdIpAccessListEntry=usdIpAccessListEntry, usdIpAccessListId=usdIpAccessListId, usdIpPrefixListName=usdIpPrefixListName, usdIpCommunityListName=usdIpCommunityListName, usdIpPolicyGroups=usdIpPolicyGroups, UsdIpPolicyName=UsdIpPolicyName, usdIpPrefixListElemId=usdIpPrefixListElemId, usdIpAspAccessPolicy=usdIpAspAccessPolicy, usdIpCommunityListEntry=usdIpCommunityListEntry, usdIpRouteMapPolicy=usdIpRouteMapPolicy, UsdIpPolicyExtendedCommunity=UsdIpPolicyExtendedCommunity, usdIpPrefixListGroup=usdIpPrefixListGroup, usdIpRouteMapSequenceNum=usdIpRouteMapSequenceNum, usdIpPrefixListIpAddress=usdIpPrefixListIpAddress, usdIpRedistributeState=usdIpRedistributeState, usdIpCommunityListExpression=usdIpCommunityListExpression, usdIpAccessListDst=usdIpAccessListDst, usdIpPrefixTreeRowStatus=usdIpPrefixTreeRowStatus, PYSNMP_MODULE_ID=usdIpPolicyMIB, usdIpAspAccessEntry=usdIpAspAccessEntry, usdIpCommunityListRowStatus=usdIpCommunityListRowStatus, usdIpPrefixTreeGroup=usdIpPrefixTreeGroup, usdIpCommunityListExtended=usdIpCommunityListExtended, usdIpPrefixListDescription=usdIpPrefixListDescription, usdIpNamedAccessListElemId=usdIpNamedAccessListElemId, usdIpAspAccessCreatedInternally=usdIpAspAccessCreatedInternally, usdIpExtCommunityListElemId=usdIpExtCommunityListElemId, usdIpAccessListAction=usdIpAccessListAction, usdIpAccessListElemId=usdIpAccessListElemId, usdIpPolicyCompliance=usdIpPolicyCompliance, usdIpNamedAccessListName=usdIpNamedAccessListName, usdIpRouteMapEntry=usdIpRouteMapEntry, usdIpPrefixTree=usdIpPrefixTree, usdIpNamedAccessList=usdIpNamedAccessList, usdIpRedistributeFromProtocol=usdIpRedistributeFromProtocol, usdIpNamedAccessListSrc=usdIpNamedAccessListSrc, usdIpRedistributeToProtocol=usdIpRedistributeToProtocol, usdIpRouteMapSubElemId=usdIpRouteMapSubElemId, usdIpNamedAccessListDstMask=usdIpNamedAccessListDstMask, usdIpCommunityListElemId=usdIpCommunityListElemId, usdIpCommunityListCreatedInternally=usdIpCommunityListCreatedInternally, usdIpAspAccessExpression=usdIpAspAccessExpression, usdIpPrefixListPolicy=usdIpPrefixListPolicy, usdIpRouteMapName=usdIpRouteMapName, usdIpRouteMapDisplay=usdIpRouteMapDisplay, usdIpRouteMapGroup=usdIpRouteMapGroup, usdIpExtCommunityListName=usdIpExtCommunityListName, UsdIpPolicyPolicy=UsdIpPolicyPolicy, usdIpRouteMapTable=usdIpRouteMapTable, usdIpRedistributeGroup=usdIpRedistributeGroup, usdIpDynRedistributeEntry=usdIpDynRedistributeEntry, usdIpPrefixTreeLength=usdIpPrefixTreeLength, usdIpRedistributeList=usdIpRedistributeList, usdIpPrefixList=usdIpPrefixList, usdIpNamedAccessListProtocol=usdIpNamedAccessListProtocol, usdIpCommunityListPolicy=usdIpCommunityListPolicy, usdIpAccessListSrcMask=usdIpAccessListSrcMask, usdIpPolicyCompliances=usdIpPolicyCompliances, usdIpPrefixListEntry=usdIpPrefixListEntry, usdIpPrefixTreeHitCount=usdIpPrefixTreeHitCount, usdIpCommunityList=usdIpCommunityList, usdIpPolicyCompliance3=usdIpPolicyCompliance3, usdIpCommunityListGroup=usdIpCommunityListGroup, usdIpPrefixTreeIpAddress=usdIpPrefixTreeIpAddress, usdIpPolicyCompliance2=usdIpPolicyCompliance2, usdIpNamedAccessListEntry=usdIpNamedAccessListEntry, usdIpAspAccessListGroup=usdIpAspAccessListGroup, usdIpRedistributeRouteMapName=usdIpRedistributeRouteMapName, usdIpAccessList=usdIpAccessList, usdIpNamedAccessListTable=usdIpNamedAccessListTable, usdIpExtCommunityListExpression=usdIpExtCommunityListExpression, usdIpRouteMapTree=usdIpRouteMapTree, usdIpAccessListDstMask=usdIpAccessListDstMask, UsdIpPolicyAdminStatus=UsdIpPolicyAdminStatus, usdIpAspAccessElemId=usdIpAspAccessElemId, usdIpPrefixTreeName=usdIpPrefixTreeName, usdIpAccessListGroup=usdIpAccessListGroup, usdIpAspAccessRowStatus=usdIpAspAccessRowStatus, usdIpDynRedistributeToProtocol=usdIpDynRedistributeToProtocol, UsdIpRedistributeProtocol=UsdIpRedistributeProtocol, usdIpAspAccessTable=usdIpAspAccessTable, usdIpRouteMapElemId=usdIpRouteMapElemId, usdIpExtCommunityListEntry=usdIpExtCommunityListEntry, usdIpNamedAccessListAction=usdIpNamedAccessListAction, usdIpPolicyMIB=usdIpPolicyMIB, usdIpNamedAccessListSrcMask=usdIpNamedAccessListSrcMask, usdIpPrefixTreeTable=usdIpPrefixTreeTable, usdIpExtCommunityListRowStatus=usdIpExtCommunityListRowStatus, usdIpRedistributeRowStatus=usdIpRedistributeRowStatus, usdIpNamedAccessListGroup=usdIpNamedAccessListGroup, usdIpAccessListTable=usdIpAccessListTable, usdIpAspAccessName=usdIpAspAccessName, usdIpAspAccessList=usdIpAspAccessList, usdIpDynRedistributeRowStatus=usdIpDynRedistributeRowStatus, usdIpAccessListSrc=usdIpAccessListSrc, usdIpPrefixTreeEntry=usdIpPrefixTreeEntry, usdIpRedistributeEntry=usdIpRedistributeEntry, usdIpPolicyConformance=usdIpPolicyConformance, usdIpPrefixListLeValue=usdIpPrefixListLeValue, usdIpRouteMapCreatedInternally=usdIpRouteMapCreatedInternally, usdIpExtCommunityListTable=usdIpExtCommunityListTable, usdIpAccessListProtocol=usdIpAccessListProtocol, usdIpExtCommunityListCreatedInternally=usdIpExtCommunityListCreatedInternally, usdIpPrefixTreePolicy=usdIpPrefixTreePolicy, usdIpDynRedistributeTable=usdIpDynRedistributeTable, usdIpNamedAccessListDst=usdIpNamedAccessListDst, usdIpRedistributeTable=usdIpRedistributeTable, usdIpAccessListRowStatus=usdIpAccessListRowStatus, usdIpPolicyObjects=usdIpPolicyObjects, usdIpPrefixListHitCount=usdIpPrefixListHitCount, usdIpCommunityListTable=usdIpCommunityListTable, usdIpExtCommunityListGroup=usdIpExtCommunityListGroup, usdIpPrefixListTable=usdIpPrefixListTable, usdIpPrefixListGeValue=usdIpPrefixListGeValue, usdIpPrefixListRowStatus=usdIpPrefixListRowStatus, usdIpDynRedistributeState=usdIpDynRedistributeState, usdIpPrefixTreeDescription=usdIpPrefixTreeDescription, usdIpPrefixListLength=usdIpPrefixListLength, usdIpExtCommunityListPolicy=usdIpExtCommunityListPolicy, usdIpNamedAccessListRowStatus=usdIpNamedAccessListRowStatus)
