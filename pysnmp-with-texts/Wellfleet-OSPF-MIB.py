#
# PySNMP MIB module Wellfleet-OSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-OSPF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Unsigned32, NotificationType, IpAddress, TimeTicks, Counter64, ModuleIdentity, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "NotificationType", "IpAddress", "TimeTicks", "Counter64", "ModuleIdentity", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso", "Integer32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfOspfGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfOspfGroup")
wfOspfGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1))
wfOspfGeneralDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfGeneralDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfGeneralDelete.setDescription("'This value determines whether OSPF is configured'")
wfOspfGeneralDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfGeneralDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfGeneralDisable.setDescription("'The administrative status of OSPF in the router. The value 'enabled' denotes that the OSPF Process is active on at least one interface; 'disabled' disables it on all interfaces.'")
wfOspfGeneralState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfGeneralState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfGeneralState.setDescription("'The state of OSPF'")
wfOspfRouterId = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfRouterId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfRouterId.setDescription("'A 32-bit integer uniquely identifying the router in the Autonomous System. By convention, to ensure uniqueness, this should default to the value of one of the router's IP interface addresses.' REFERENCE 'OSPF Version 2, C.1 Global parameters'")
wfOspfVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVersionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVersionNumber.setDescription("'The current version number of the OSPF protocol is 2.' REFERENCE 'OSPF Version 2, Title'")
wfOspfAreaBdrRtrStatus = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfAreaBdrRtrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaBdrRtrStatus.setDescription("'A flag to note whether this router is an area border router.' REFERENCE 'OSPF Version 2, Section 3 Splitting the AS into Areas'")
wfOspfASBdrRtrStatus = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfASBdrRtrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfASBdrRtrStatus.setDescription("'A flag to note whether this router is an Autonomous System border router.' REFERENCE 'OSPF Version 2, Section 3.3 Classification of routers'")
wfOspfTOSSupport = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfTOSSupport.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfTOSSupport.setDescription("'The router's support for type-of-service routing.' REFERENCE 'OSPF Version 2, Appendix F.1.2 Optional TOS support'")
wfOspfSpfHoldDown = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfSpfHoldDown.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfSpfHoldDown.setDescription('Hold Down Timer for the SPF. The SPF will run at most once per hold down timer value. A value of 0 means no hold down.')
wfOspfSlotMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 10), Gauge32().clone(4294705152)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfSlotMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfSlotMask.setDescription('Slot mask for which slots OSPF is eligible to run on. The MSBit represents slot 1, the next most significant bit represents slot 2, and so on... Slots can be 1-14. Default is all slots on a BCN.')
wfOspfNewAseMetricSupport = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfNewAseMetricSupport.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNewAseMetricSupport.setDescription('A parameter to specify if the new style ASE metric support is enabled. The new metric is not compatible with the pre-8.0 ASE metrics. The new metric support should be disabled if the router is to interoperate with routers running a pre-8.0 OSPF version.')
wfOspfBackupDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfBackupDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupDisable.setDescription("This parameter enables or disables the backup OSPF soloist's backup link state database. When the parameter is set to disabled the OSPF backup soloist will not maintain a copy of the OSPF link state database.")
wfOspfPrimaryLogMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 13), Gauge32().clone(287)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfPrimaryLogMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfPrimaryLogMask.setDescription("A parameter to specify which OSPF log messages should be logged. This will only effect the Primary OSPF gate. Each bit represents a message as defined below. A 1 in that bit location means to log it and a 0 means not to put that log message in the log. Changing this value will NOT restart OSPF, but will take effct immediately(if there are any messages to be logged. bit 31 bit 0 +---------------------------------------+ | | +---------------------------------------+ bit0 Trace Messages bit1 INFO Level messages bit2 debug level messages bit3 OSPF interface state change messages bit4 Nbr state changes bit5 self-origination of LSA's bit6 receipt of new LSA's bit7 changes to OSPF`s Routing Table bit8 Bad LS requests, Ack's, or updates bit9 receipt of less recent LSA's bit10 receipt of more recent self-originated LSA's bit11 receipt of MAxAge LSA's (i.e. LSA's being flushed) bit12 - 31 reserved ")
wfOspfBackupLogMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfBackupLogMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupLogMask.setDescription("A parameter to specify which OSPF log messages should be logged. This will only effect the Backup OSPF gate. Each bit represents a message as defined below. A 1 in that bit location means to log it a 0 means not to put that log message in the log. Changing this value will NOT restart OSPF, but will take effct immediately(if there are any messages to be logged. bit 31 bit 0 +---------------------------------------+ | | +---------------------------------------+ bit0 Trace Messages bit1 INFO Level messages bit2 debug level messages bit3 OSPF interface state change messages bit4 Nbr state changes bit5 self-origination of LSA's bit6 receipt of new LSA's bit7 changes to OSPF`s Routing Table bit8 Bad LS requests, Ack's, or updates bit9 receipt of less recent LSA's bit10 receipt of more recent self-originated LSA's bit11 receipt of MAxAge LSA's (i.e. LSA's being flushed) bit12 - 31 reserved ")
wfOspfAseTagDefault = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("automatic", 2), ("proprietary", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAseTagDefault.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAseTagDefault.setDescription('This parameter indicates how ASE tags will be generated for those ASEs whose tags are not altered by an export route filter or announce route policy. default(1) indicates that a zero value is used. automatic(2) indicates that an automatic tag will be generated as specified in RFC 1403. proprietary(3) indicates that the wellfleet proprietary scheme will be used. In this case, the next hop is used for IGP routes and the neighbor AS is used for EGP routes.')
wfOspfPrimarySlot = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfPrimarySlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfPrimarySlot.setDescription('Slot on which OSPF Primary is running. Slots can be 1-14. Default is zero.')
wfOspfBackupSlot = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfBackupSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupSlot.setDescription('Slot on which OSPF Backup is running. Slots can be 1-14. Default is zero.')
wfOspfMaximumPath = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfMaximumPath.setStatus('obsolete')
if mibBuilder.loadTexts: wfOspfMaximumPath.setDescription('Maximum number of equal cost paths allowed for a network installed by OSPF.')
wfOspfSlotPriority = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfSlotPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfSlotPriority.setDescription('Comma-separated list of slots specifying the order in which slots should attempt to bring up OSPF soloist. They are listed in the decreasing order of priority. Slot with priority 0, i.e. the first entry in the list, is most likely to have OSPF soloist running on it.')
wfOspfLsdbCount = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbCount.setDescription('Running count of LSDB entries')
wfOspfMulticastExtensions = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfMulticastExtensions.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfMulticastExtensions.setDescription("A Bit Mask indicating whether the router is forwarding IP multicast (Class D) datagrams based on the algorithms defined in the Multi- cast Extensions to OSPF. Bit 0, if set, indicates that the router can forward IP multicast datagrams in the router's directly attached areas (called intra-area mul- ticast routing). Bit 1, if set, indicates that the router can forward IP multicast datagrams between OSPF areas (called inter-area multicast routing). Bit 2, if set, indicates that the router can forward IP multicast datagrams between Auto- nomous Systems (called inter-AS multicast rout- ing). Only certain combinations of bit settings are allowed, namely: 0 (no multicast forwarding is enabled), 1 (intra-area multicasting only), 3 (intra-area and inter-area multicasting), 5 (intra-area and inter-AS multicasting) and 7 (multicasting everywhere). By default, no mul- ticast forwarding is enabled.")
wfOspfMulticastDeterministic = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nondeterministic", 1), ("deterministicstrict", 2), ("deterministicloose", 3))).clone('nondeterministic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfMulticastDeterministic.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfMulticastDeterministic.setDescription('This controls whether or not the deterministic variation of the MOSPF Dijkstra is run or not')
wfOspfMulticastRoutePinning = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonpinned", 1), ("pinned", 2))).clone('nonpinned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfMulticastRoutePinning.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfMulticastRoutePinning.setDescription('This controls whether or not the route pinning variation of the MOSPF Dijkstra is run or not')
wfOspfOpaqueCapability = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfOpaqueCapability.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfOpaqueCapability.setDescription('This controls whether or not the router will accept and process OPAQUE LSAs')
wfOspfDeterministicMcastHoldDown = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfDeterministicMcastHoldDown.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDeterministicMcastHoldDown.setDescription('This controls whether or not the Hold Down feature for the Deterministic MOSPF is enabled. If it is enabled, a data flow does not go out of an interface even if it would when the feature is disabled, unless there is a reservation for the flow on the interface')
wfMospfEntryTimeoutValue = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 26), Integer32().clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMospfEntryTimeoutValue.setStatus('mandatory')
if mibBuilder.loadTexts: wfMospfEntryTimeoutValue.setDescription('The timer value for timing out MOSPF forward entries.')
wfOspfMaxQueuedMcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 27), Integer32().clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfMaxQueuedMcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfMaxQueuedMcastPkts.setDescription('This controls how many mcast packets can be queued on each slot for all flows before the building of mcast trees finishes. If it is not 0, the first a few data packets for a mcast flow are queued before the building of the mcast tree finishes. Otherwise, packets are quietly dropped before the tree is calculated.')
wfOspfMcastUseDynTTL = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfMcastUseDynTTL.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfMcastUseDynTTL.setDescription('This controls whether dynamic TTL threshold is used. Data forwarding is a little bit faster when it is NOT used. Dynamic TTL means the TTL threshold may be different per (source, group, downstream) tuple. See MOSPF spec, section 2.3.4.')
wfOspfRfc1583Compatibility = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfRfc1583Compatibility.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfRfc1583Compatibility.setDescription("Controls the preference rules used when choosing among multiple AS-external-LSAs advertising the same destination. When set to 'enabled', the preference rules remain those specified by RFC 1583. When set to 'disabled', the preference rules are those stated in RFC 2178, which prevent routing loops when AS- external-LSAs for the same destination have been originated from different areas.")
wfOspfASEMcastEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfASEMcastEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfASEMcastEnable.setDescription("This attribute indicates whether AS External routes are multicast capable. If enabled, the advertising ASBR sets the MC-bit in the ASE-LSAs for those routes, so that they can be used for multicast purpose. If an MOSPF router works as an ASBR to support IGMP Relay, it should has this attribute set to 'enabled'. By default, all external routes are multicast incapable. If it's known that an ASBR's external routes can only be used for unicast, this attribute must be set to 'disabled' on the ASBR. For example, if an ASBR has a BGP connection to an ISP but the routes learned via BGP can't be used for multicast because external multicast traffic should be injected by another router with a DVMRP tunnel to Mbone, this attribute on the ASBR should be set to 'disabled'.")
wfOspfNssaBorderRouter = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfNssaBorderRouter.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNssaBorderRouter.setDescription("`A flag to note whether this router NSSA border router'")
wfOspfLsaRefreshMax = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfLsaRefreshMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsaRefreshMax.setDescription("`Maximum number of consecutive refreshes of self-originated Summary and External LSAs before applying a configured delay. A value of zero implies that there is no maximum.'")
wfOspfLsaRefreshDelay = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfLsaRefreshDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsaRefreshDelay.setDescription("`Delay to apply between the maximum number of consecutive refreshes of self-originated Summary and External LSAs if a non-zero maximum is configured. The unit of delay is in seconds.'")
wfOspfAggrUseMaxCost = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAggrUseMaxCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAggrUseMaxCost.setDescription('When area range is configured, sum net lsa is generated depends on this mib attribute: enabled: Use Max Metric to aggregate networks. See RFC2328 3.5 IP subnetting support. disabled: Use Min Metric to aggregate networks. Bay Router pre-14.40 version does this way.')
wfOspfFwdAddrComp = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfFwdAddrComp.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfFwdAddrComp.setDescription('When enabled allows OSPF to comply with RFC1583 with respect to forwarding address changes. When disabled OSPF remains compatiable with pre-14.00rev1D code.')
wfOspfMtuUseCommonDefault = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfMtuUseCommonDefault.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfMtuUseCommonDefault.setDescription('when this parameter is enabled, OSPF will use the MTU size of ethernet, that is, 1500 in all the interfaces regardless of what IP passes onto OSPF if the wfOspfMtuSize at the interface is set to 1(= Default) or 2. If wfOspfMtuSize is greater than 2 then OSPF will use wfOspfMtuSize as the MTU size at the interface.')
wfOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2), )
if mibBuilder.loadTexts: wfOspfAreaTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaTable.setDescription("-- The OSPF Area Data Structure contains information -- regarding the various areas. The interfaces and -- virtual links are configured as part of these areas. -- Area 0.0.0.0, by definition, is the Backbone Area 'Information describing the configured parameters and cumulative statistics of the router's attached areas.' REFERENCE 'OSPF Version 2, Section 6 The Area Data Structure'")
wfOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1), ).setIndexNames((0, "Wellfleet-OSPF-MIB", "wfOspfAreaId"))
if mibBuilder.loadTexts: wfOspfAreaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaEntry.setDescription("'Information describing the configured parameters and cumulative statistics of one of the router's attached areas.'")
wfOspfAreaDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAreaDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaDelete.setDescription('This value determines if the OSPF router is configured with this area.')
wfOspfAreaDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAreaDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaDisable.setDescription('This value indicates the state of this area on the OSPF router.')
wfOspfAreaState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfAreaState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaState.setDescription('This value indicates the state of the OSPF Area.')
wfOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfAreaId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaId.setDescription("'A 32-bit integer uniquely identifying an area. Area ID 0.0.0.0 is used for the OSPF backbone.' REFERENCE 'OSPF Version 2, Appendix C.2 Area parameters'")
wfOspfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-password", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAuthType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAuthType.setDescription("'The authentication type specified for an area. Additional authentication types may be assigned locally on a per Area basis.' REFERENCE 'OSPF Version 2, Appendix E Authentication' -- none (0), -- simplePassword (1) -- reserved for future specification (2..255) -- reserved for AS specific values (> 255)")
wfOspfImportASExtern = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("importExternal", 1), ("importNoExternal", 2), ("importNssa", 3))).clone('importExternal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfImportASExtern.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfImportASExtern.setDescription("'The area's support for importing AS external link- state advertisements.' REFERENCE `OSPF NSSA Internet Draft, Appendix D: Configuration Parameters'")
wfOspfStubMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfStubMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfStubMetric.setDescription("'The metric value applied at the indicated type of service. By default, this equals the least metric at the type of service among the interfaces to other areas.'")
wfOspfImportSum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfImportSum.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfImportSum.setDescription("'The area's support for importing Summary advertisements into a stub area. This variable should not be set unless wfOspfImportASExtern is set to FALSE'")
wfOspfSpfCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfSpfCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfSpfCnt.setDescription('The number of times the OSPF SPF algorithm has been run for this area.')
wfOspfPtpSpecCostEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfPtpSpecCostEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfPtpSpecCostEnable.setDescription('This value indicates the formula used to calculate the cost for point to point links.')
wfOspfAreaNssaTranslateCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAreaNssaTranslateCfg.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaNssaTranslateCfg.setDescription("`Indicates whether or not an NSSA Border routes is configured to performing NSSA translation of type-7 LSAs into type-5 LSAs.' REFERENCE `OSPF NSSA Internet Draft, Appendix D: Configuration Parameters'")
wfOspfAreaNssaTranslateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("translating", 1), ("nottranslating", 2))).clone('nottranslating')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfAreaNssaTranslateStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaNssaTranslateStatus.setDescription("`Indicates whether or not an NSSA Border routes is performing NSSA translation of type-7 LSAs into type-5 LSAs.' REFERENCE `OSPF NSSA Internet Draft, Appendix D: Configuration Parameters'")
wfOspfAreaNssaOriginateDefaultRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAreaNssaOriginateDefaultRoute.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaNssaOriginateDefaultRoute.setDescription("`whether or not an Type-7 default is originated by the ASBR'")
wfOspfAreaNssaPropagateDefaultRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAreaNssaPropagateDefaultRoute.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaNssaPropagateDefaultRoute.setDescription("`Indicates whether or not the Type-7 default route LSA will have the propagate bit (P-bit) set. If the P-bit is set, the Type-7 default route LSA is translated into a Type-5 default route LSA and the Type-5 default route LSA is flooded into all non-stub areas. Otherwise the Type-7 default route LSA is not translated This parameter applies to NSSA internal ASBR only. For NSSA border ASBR, the P-bit is never set'")
wfOspfAreaNssaDefaultRoutePathType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2))).clone('type1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAreaNssaDefaultRoutePathType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaNssaDefaultRoutePathType.setDescription("`The path type applied to the type-7 default route' REFERENCE `OSPF NSSA Internet Draft, Appendix D: Configuration Parameters'")
wfMospfForwardTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 11), )
if mibBuilder.loadTexts: wfMospfForwardTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfMospfForwardTable.setDescription('')
wfMospfForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 11, 1), ).setIndexNames((0, "Wellfleet-OSPF-MIB", "wfMospfForwardGroup"), (0, "Wellfleet-OSPF-MIB", "wfMospfForwardSource"), (0, "Wellfleet-OSPF-MIB", "wfMospfForwardSourceMask"))
if mibBuilder.loadTexts: wfMospfForwardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfMospfForwardEntry.setDescription('A forwarding entry')
wfMospfForwardGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMospfForwardGroup.setStatus('mandatory')
if mibBuilder.loadTexts: wfMospfForwardGroup.setDescription('The destinatino group address of this entry')
wfMospfForwardSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 11, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMospfForwardSource.setStatus('mandatory')
if mibBuilder.loadTexts: wfMospfForwardSource.setDescription('The source IP address of this entry. It could be either a host, or a network, depending upon the value of wfMospfForwardSourceMask')
wfMospfForwardSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMospfForwardSourceMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfMospfForwardSourceMask.setDescription('The mask for the source of this entry.')
wfMospfForwardSourceNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMospfForwardSourceNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfMospfForwardSourceNetMask.setDescription('The mask for the network that the source is on.')
wfMospfForwardFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMospfForwardFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfMospfForwardFlag.setDescription('Flags associated with the entry. 0x10000000 (re)calculation of the entry not done yet 0x00000001 the entry is associated with a RSVP session')
wfMospfForwardUpstreamAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 11, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMospfForwardUpstreamAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfMospfForwardUpstreamAddress.setDescription('The IP address of the upstream intf for the entry.')
wfMospfForwardUpstreamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMospfForwardUpstreamIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfMospfForwardUpstreamIfIndex.setDescription('The circuit number of the upstream intf for the entry.')
wfMospfForwardBwBucketDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMospfForwardBwBucketDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfMospfForwardBwBucketDepth.setDescription('Depth parameter of the flow spec for the entry')
wfMospfForwardBwBucketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMospfForwardBwBucketRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfMospfForwardBwBucketRate.setDescription('Rate parameter of the flow spec for the entry')
wfMospfForwardAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMospfForwardAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfMospfForwardAge.setDescription('The number of seconds since this route was last updated or otherwise determined to be correct.')
wfMospfForwardDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 11, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMospfForwardDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: wfMospfForwardDownstream.setDescription('list of downstream intfs for this entry. Each one is in the format of (intf_addr (u_int32), intf_cct (u_int16), ttl (u_int16))')
wfOspfLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3), )
if mibBuilder.loadTexts: wfOspfLsdbTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbTable.setDescription("-- OSPF Link State Database -- The Link State Database contains the Link State -- Advertisements from throughout the areas that the -- device is attached to. 'The OSPF Process's Links State Database.' REFERENCE 'OSPF Version 2, Section 12 Link State Advertisements'")
wfOspfLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1), ).setIndexNames((0, "Wellfleet-OSPF-MIB", "wfOspfLsdbAreaId"), (0, "Wellfleet-OSPF-MIB", "wfOspfLsdbType"), (0, "Wellfleet-OSPF-MIB", "wfOspfLsdbLSID"), (0, "Wellfleet-OSPF-MIB", "wfOspfLsdbRouterId"))
if mibBuilder.loadTexts: wfOspfLsdbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbEntry.setDescription("'A single Link State Advertisement.'")
wfOspfLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbAreaId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbAreaId.setDescription("'The 32 bit identifier of the Area from which the LSA was received.' REFERENCE 'OSPF Version 2, Appendix C.2 Area parameters'")
wfOspfLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 15, 16))).clone(namedValues=NamedValues(("routerlink", 1), ("networklink", 2), ("summarylink", 3), ("assummarylink", 4), ("asexternallink", 5), ("multicastlink", 6), ("nssaasexternallink", 7), ("opaquelink", 15), ("resourcelink", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbType.setDescription("'The type of the link state advertisement. Each link state type has a separate advertisement format.' REFERENCE 'OSPF Version 2, Appendix A.4.1 The Link State Advertisement header' stubLink (0), routerLink (1), networkLink (2), summaryLink (3), asSummaryLink (4), asExternalLink (5), multicastlink (6), opaquelink (15), resourcelink (16)")
wfOspfLsdbLSID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbLSID.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbLSID.setDescription("'The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.' REFERENCE 'OSPF Version 2, Section 12.1.4 Link State ID'")
wfOspfLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbRouterId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbRouterId.setDescription("'The 32 bit number that uniquely identifies the originating router in the Autonomous System.' REFERENCE 'OSPF Version 2, Appendix C.1 Global parameters'")
wfOspfLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbSequence.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbSequence.setDescription("-- Note that the OSPF Sequence Number is a 32 bit signed -- integer. It starts with the value '80000001'h, -- or -'7FFFFFFF'h, and increments until '7FFFFFFF'h -- Thus, a typical sequence number will be very negative. 'The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.' REFERENCE 'OSPF Version 2, Section 12.1.6 LS sequence number'")
wfOspfLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbAge.setDescription("'This field is the age of the link state advertisement in seconds.' (OSPF_LSDBMINAGE = 0) REFERENCE 'OSPF Version 2, Section 12.1.1 LS age'")
wfOspfLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbChecksum.setDescription("'This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.' REFERENCE 'OSPF Version 2, Section 12.1.7 LS checksum'")
wfOspfLsdbMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbMetric.setDescription("'Metric from LSA, if applicable.'")
wfOspfLsdbAseForwardAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbAseForwardAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbAseForwardAddr.setDescription("'If an ASE, the forwarding address from the LSA.'")
wfOspfLsdbAseTag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbAseTag.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbAseTag.setDescription("'If an ASE, the External Route Tag from the LSA.'")
wfOspfLsdbAseType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbAseType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbAseType.setDescription("'If an ASE, the external metric type from the LSA.'")
wfOspfLsdbAdvLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbAdvLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbAdvLen.setDescription("'The length of entire Link State Advertisement, including its header.' REFERENCE 'OSPF Version 2, Section 12 Link State Advertisements'")
wfOspfLsdbAdv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 3, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfLsdbAdv.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfLsdbAdv.setDescription("'This field is the actual OSPF advertisement in hexadecimal format' ")
wfOspfBackupLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 10), )
if mibBuilder.loadTexts: wfOspfBackupLsdbTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupLsdbTable.setDescription("-- OSPF Backup Link State Database -- The Backup Link State Database contains the Link State -- Advertisements from throughout the areas that the -- device is attached to. 'The OSPF Process's Links State Database.' REFERENCE 'OSPF Version 2, Section 12 Link State Advertisements'")
wfOspfBackupLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 10, 1), ).setIndexNames((0, "Wellfleet-OSPF-MIB", "wfOspfBackupLsdbAreaId"), (0, "Wellfleet-OSPF-MIB", "wfOspfBackupLsdbType"), (0, "Wellfleet-OSPF-MIB", "wfOspfBackupLsdbLSID"), (0, "Wellfleet-OSPF-MIB", "wfOspfBackupLsdbRouterId"))
if mibBuilder.loadTexts: wfOspfBackupLsdbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupLsdbEntry.setDescription("'A single Link State Advertisement.'")
wfOspfBackupLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfBackupLsdbAreaId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupLsdbAreaId.setDescription("'The 32 bit identifier of the Area from which the LSA was received.' REFERENCE 'OSPF Version 2, Appendix C.2 Area parameters'")
wfOspfBackupLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("routerlink", 1), ("networklink", 2), ("summarylink", 3), ("assummarylink", 4), ("asexternallink", 5), ("nssaasexternallink", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfBackupLsdbType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupLsdbType.setDescription("'The type of the link state advertisement. Each link state type has a separate advertisement format.' REFERENCE 'OSPF Version 2, Appendix A.4.1 The Link State Advertisement header' stubLink (0), routerLink (1), networkLink (2), summaryLink (3), asSummaryLink (4), asExternalLink (5)")
wfOspfBackupLsdbLSID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfBackupLsdbLSID.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupLsdbLSID.setDescription("'The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.' REFERENCE 'OSPF Version 2, Section 12.1.4 Link State ID'")
wfOspfBackupLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 10, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfBackupLsdbRouterId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupLsdbRouterId.setDescription("'The 32 bit number that uniquely identifies the originating router in the Autonomous System.' REFERENCE 'OSPF Version 2, Appendix C.1 Global parameters'")
wfOspfBackupLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfBackupLsdbSequence.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupLsdbSequence.setDescription("-- Note that the OSPF Sequence Number is a 32 bit signed -- integer. It starts with the value '80000001'h, -- or -'7FFFFFFF'h, and increments until '7FFFFFFF'h -- Thus, a typical sequence number will be very negative. 'The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.' REFERENCE 'OSPF Version 2, Section 12.1.6 LS sequence number'")
wfOspfBackupLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfBackupLsdbAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupLsdbAge.setDescription("'This field is the age of the link state advertisement in seconds.' (OSPF_LSDBMINAGE = 0) REFERENCE 'OSPF Version 2, Section 12.1.1 LS age'")
wfOspfBackupLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfBackupLsdbChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupLsdbChecksum.setDescription("'This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.' REFERENCE 'OSPF Version 2, Section 12.1.7 LS checksum'")
wfOspfBackupLsdbMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfBackupLsdbMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupLsdbMetric.setDescription("'Metric from LSA, if applicable.'")
wfOspfBackupLsdbAseForwardAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 10, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfBackupLsdbAseForwardAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupLsdbAseForwardAddr.setDescription("'If an ASE, the forwarding address from the LSA.'")
wfOspfBackupLsdbAseTag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 10, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfBackupLsdbAseTag.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupLsdbAseTag.setDescription("'If an ASE, the External Route Tag from the LSA.'")
wfOspfBackupLsdbAseType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfBackupLsdbAseType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupLsdbAseType.setDescription("'If an ASE, the external metric type from the LSA.'")
wfOspfBackupLsdbAdvLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfBackupLsdbAdvLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupLsdbAdvLen.setDescription("'The length of entire Link State Advertisement, including its header.' REFERENCE 'OSPF Version 2, Section 12 Link State Advertisements'")
wfOspfBackupLsdbAdv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 10, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfBackupLsdbAdv.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfBackupLsdbAdv.setDescription("'This field is the actual OSPF advertisement in hexadecimal format'")
wfOspfAreaRangeTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4), )
if mibBuilder.loadTexts: wfOspfAreaRangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeTable.setDescription("'A range if IP addresses specified by an IP address/IP network mask pair. For example, class B address range of X.X.X.X with a network mask of 255.255.0.0 includes all IP addresses from X.X.0.0 to X.X.255.255' REFERENCE 'OSPF Version 2, Appendix C.2 Area parameters'")
wfOspfAreaRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4, 1), ).setIndexNames((0, "Wellfleet-OSPF-MIB", "wfOspfAreaRangeAreaID"), (0, "Wellfleet-OSPF-MIB", "wfOspfAreaRangeNet"))
if mibBuilder.loadTexts: wfOspfAreaRangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeEntry.setDescription('')
wfOspfAreaRangeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAreaRangeDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeDelete.setDescription('This value determines if an Area Range has been configured for the OSPF router.')
wfOspfAreaRangeDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAreaRangeDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeDisable.setDescription("'This variable displays the status of the entry. Setting it to 'DISBALED' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.'")
wfOspfAreaRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfAreaRangeState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeState.setDescription('The state of the OSPF Area Range.')
wfOspfAreaRangeAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfAreaRangeAreaID.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeAreaID.setDescription("'The Area the Address Range is to be found within.' REFERENCE 'OSPF Version 2, Appendix C.2 Area parameters'")
wfOspfAreaRangeNet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfAreaRangeNet.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeNet.setDescription("'The IP Address of the Net or Subnet indicated by the range.' REFERENCE 'OSPF Version 2, Appendix C.2 Area parameters'")
wfOspfAreaRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAreaRangeMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeMask.setDescription("'The Subnet Mask that pertains to the Net or Subnet.' REFERENCE 'OSPF Version 2, Appendix C.2 Area parameters'")
wfOspfAreaRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("advertise", 1), ("block", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAreaRangeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeStatus.setDescription("'Set to either Advertise or DoNotAdvertise. Routing information is condensed at area boundaries. External to the area, at most a single route is advertised for each address range. The route is advertised if and only if the addre range's Status is set to Advertise. Unadvertised ranges allow the existence of certain networks to be intentionally hidden from other areas. Status is set to Advertise by default.' REFERENCE 'OSPF Version 2, Appendix C.2'")
wfOspfAreaRangeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfAreaRangeMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAreaRangeMetric.setDescription("'The metric to advertise into other areas as the distance from the OSPF router to any network in the range. The default of 0 means to use the value calculated by OSPF.' REFERENCE 'OSPF Version 2, Appendix C.2'")
wfOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5), )
if mibBuilder.loadTexts: wfOspfIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfTable.setDescription("-- OSPF Interface Table -- The OSPF Interface Table augments the ifTable with OSPF -- specific information. 'The OSPF Interface Table describes the interfaces from the viewpoint of OSPF.' REFERENCE 'OSPF Version 2, Appendix C.3 Router interface parameters'")
wfOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1), ).setIndexNames((0, "Wellfleet-OSPF-MIB", "wfOspfIfIpAddress"), (0, "Wellfleet-OSPF-MIB", "wfOspfAddressLessIf"))
if mibBuilder.loadTexts: wfOspfIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfEntry.setDescription("'The OSPF Interface Entry describes one interface from the viewpoint of OSPF.'")
wfOspfIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfDelete.setDescription('This variable determines in an OSPF Interface has been configured on the router.')
wfOspfIfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfDisable.setDescription("'The OSPF interface's administrative status. The value 'enabled' denotes that neighbor relationships may be formed on the interface, and the interface will be advertised as an internal route to some area. The value 'disabled' denotes that the interface is external to OSPF.'")
wfOspfIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointtopoint", 4), ("designatedrouter", 5), ("backupdesignatedrouter", 6), ("otherdesignatedrouter", 7))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfState.setDescription("'The OSPF Interface State.' down (1), loopback (2), waiting (3), pointToPoint (4), designatedRouter (5), backupDesignatedRouter (6), otherDesignatedRouter (7)")
wfOspfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfIpAddress.setDescription("'The IP address of this OSPF interface.'")
wfOspfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfAddressLessIf.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfAddressLessIf.setDescription("'For the purpose of easing the instancing of addressed and addressless interfaces; This variable takes the value 0 on interfaces with IP Addresses, and the corresponding value of ifIndex for interfaces having no IP Address.'")
wfOspfIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfAreaId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfAreaId.setDescription("'A 32-bit integer uniquely identifying the area to which the interface connects. Area ID 0.0.0.0 is used for the OSPF backbone.' default { '00000000'H } -- 0.0.0.0")
wfOspfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointtopoint", 3), ("pmp", 4), ("ietf", 5), ("passive", 6))).clone('broadcast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfType.setDescription("'The OSPF interface type. By way of a default, this field may be intuited from the corresponding value of ifType. Broadcast LANs, such as Ethernet and IEEE 802.5, take the value 'broadcast'. Medias which allow multiple devices to be connected but don't support a broadcast mechanism, such as X.25, take the value 'nbma'. Point to Point protocols take the value of 'pointtopoint'. Non-fully meshed technologies would take the value of either 'ietf' or 'pmp'. Passive interface take the value of 'passive'. An example topology is a Frame Relay cloud that does not have a PVC between every device on the cloud. broadcast (1), nbma (2), pointToPoint (3) point to multipoint - proprietary (4) point to multipoint - standard (5) passive (6)")
wfOspfIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfRtrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfRtrPriority.setDescription("'The priority of this interface. Used in multi-access networks, this field is used in the designated router election algorithm. The value 0 signifies that the router is not eligible to become the designated router on this particular network. In the event of a tie in this value, routers will use their router id as a tie breaker.'")
wfOspfIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfTransitDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfTransitDelay.setDescription("'The estimated number of seconds it takes to transmit a link- state update packet over this interface.'")
wfOspfIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfRetransInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfRetransInterval.setDescription("'The number of seconds between link-state advertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database description and link-state request packets.'")
wfOspfIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfHelloInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfHelloInterval.setDescription("'The length of time, in seconds, between the Hello packets that the router sends on the interface. This value must be the same for all routers attached to a common network.'")
wfOspfIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfRtrDeadInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfRtrDeadInterval.setDescription("'The number of seconds that a router's Hello packets have not been seen before it's neighbors declare the router down. This should be some multiple of the Hello interval. This value must be the same for all routers attached to a common network.'")
wfOspfIfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfPollInterval.setDescription("'The larger time interval, in seconds, between the Hello packets sent to an inactive non-broadcast multi- access neighbor.'")
wfOspfIfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfDesignatedRouter.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfDesignatedRouter.setDescription("'The IP Address of the Designated Router.' default { '00000000'H } -- 0.0.0.0")
wfOspfIfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfBackupDesignatedRouter.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfBackupDesignatedRouter.setDescription("'The IP Address of the Backup Designated Router.' default { '00000000'H } -- 0.0.0.0")
wfOspfIfMetricCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfMetricCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfMetricCost.setDescription("'The cost of using this type of service on this interface. The default value of the TOS 0 Metric is 10^8 / ifSpeed. The value FFFF is distinguished to mean 'no route via this TOS'.'")
wfOspfIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfAuthKey.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfAuthKey.setDescription("'The Authentication Key. If the Area's Authorization Type is simplePassword, and the key length is shorter than 8 octets, the agent will left adjust and zero fill to 8 octets. When read, ospfIfAuthKey always returns an Octet String of length zero.' default { '0000000000000000'H } -- 0.0.0.0.0.0.0.0 REFERENCE 'OSPF Version 2, Section 9 The Interface Data Structure'")
wfOspfIfTxHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfTxHellos.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfTxHellos.setDescription('Number of OSPF Hello packets transmitted.')
wfOspfIfTxDBDescripts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfTxDBDescripts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfTxDBDescripts.setDescription('Number of OSPF DataBase Description packets transmitted.')
wfOspfIfTxLinkStateReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfTxLinkStateReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfTxLinkStateReqs.setDescription('Number of OSPF Link State Request packets transmitted.')
wfOspfIfTxLinkStateUpds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfTxLinkStateUpds.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfTxLinkStateUpds.setDescription('Number of OSPF Link State Update packets transmitted.')
wfOspfIfTxLinkStateAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfTxLinkStateAcks.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfTxLinkStateAcks.setDescription('Number of OSPF Link States Acknowledgements transmitted.')
wfOspfIfRxHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfRxHellos.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfRxHellos.setDescription('Number of OSPF Hello packets received.')
wfOspfIfRxDBDescripts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfRxDBDescripts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfRxDBDescripts.setDescription('Number of OSPF DataBase Description packets received.')
wfOspfIfRxLinkStateReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfRxLinkStateReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfRxLinkStateReqs.setDescription('Number of OSPF Link State Requests received.')
wfOspfIfRxLinkStateUpds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfRxLinkStateUpds.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfRxLinkStateUpds.setDescription('Number of OSPF Link State Updates received.')
wfOspfIfRxLinkStateAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfRxLinkStateAcks.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfRxLinkStateAcks.setDescription('Number of OSPF Link State Acknowledgements received.')
wfOspfIfDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfDrops.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfDrops.setDescription('Number of OSPF packets dropped because of invalid information in the packet.')
wfOspfMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfMtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfMtuSize.setDescription('Configure MTU size per OSPF interface This parameter has the following values/meanings: 1 - Use the MTU specified by IP 2 - Use the MTU of ethernet, regardless of what IP says > 2 - Use this value as the actual MTU. If the value is smaller than what OSPF needs as a minimum then the mtu specified by IP is used. For example, 3 would never be used as an MTU.')
wfOspfIfMulticastForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blocked", 1), ("multicast", 2), ("unicast", 3))).clone('multicast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfMulticastForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfMulticastForwarding.setDescription('The way multicasts should forwarded on this interface; not forwarded, forwarded as data link multicasts, or forwarded as data link uni- casts. Data link multicasting is not meaning- ful on point to point and NBMA interfaces, and setting ospfMulticastForwarding to 0 effective- ly disables all multicast forwarding.')
wfOspfIfOpaqueOn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfOpaqueOn.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfOpaqueOn.setDescription('This controls whether or not OPAQUE LSAs are to be flooded out this interface or not.')
wfOspfIfBwRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfBwRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfBwRate.setDescription('Available BW (token bucket rate) on the intf')
wfOspfIfBwDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfIfBwDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfBwDepth.setDescription('Available BW (token bucket depth) on the intf')
wfOspfIfMtuMismatchDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 5, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfIfMtuMismatchDetect.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfIfMtuMismatchDetect.setDescription("Controls the interpretation of the MTU field in the database description packet header. Per RFC 2178 the MTU indicates the largest size IP packet that an OSPF interface can receive. If the MTU is greater than that which the interface can receive the packet is ignored and thus, an adjacency is not formed. In RFC 1583 this field does not exist. The value 'enabled' denotes RFC 2178 processing of the MTU field. The value 'disabled' denotes RFC 1583 processing.")
wfOspfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6), )
if mibBuilder.loadTexts: wfOspfVirtIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfTable.setDescription("-- OSPF Virtual Interface Table -- The Virtual Interface Table describes the virtual -- links that the OSPF Process is configured to -- carry on. 'Information about this router's virtual interfaces.' REFERENCE 'OSPF Version 2, Appendix C.4 Virtual link parameters'")
wfOspfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1), ).setIndexNames((0, "Wellfleet-OSPF-MIB", "wfOspfVirtIfAreaID"), (0, "Wellfleet-OSPF-MIB", "wfOspfVirtIfNeighbor"))
if mibBuilder.loadTexts: wfOspfVirtIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfEntry.setDescription("'Information about a single Virtual Interface.'")
wfOspfVirtIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfVirtIfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfDelete.setDescription('')
wfOspfVirtIfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfVirtIfDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfDisable.setDescription("'This variable displays the validity or invalidity of the entry. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.'")
wfOspfVirtIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("down", 1), ("pointtopoint", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfState.setDescription("'OSPF virtual interface states.' down (1), -- these use the same encoding pointToPoint (4) -- as the ospfIfTable")
wfOspfVirtIfAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfAreaID.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfAreaID.setDescription("'The Transit Area that the Virtual Link traverses. By definition, this is not 0.0.0.0'")
wfOspfVirtIfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfNeighbor.setDescription("'The Router ID of the Virtual Neighbor.'")
wfOspfVirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfVirtIfTransitDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfTransitDelay.setDescription("'The estimated number of seconds it takes to transmit a link- state update packet over this interface.'")
wfOspfVirtIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfVirtIfRetransInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfRetransInterval.setDescription("'The number of seconds between link-state advertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database description and link-state request packets. This value should be well over the expected round-trip time.'")
wfOspfVirtIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfVirtIfHelloInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfHelloInterval.setDescription("'The length of time, in seconds, between the Hello packets that the router sends on the interface. This value must be the same for the virtual neighbor.'")
wfOspfVirtIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfVirtIfRtrDeadInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfRtrDeadInterval.setDescription("'The number of seconds that a router's Hello packets have not been seen before it's neighbors declare the router down. This should be some multiple of the Hello interval. This value must be the same for the virtual neighbor.'")
wfOspfVirtIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfVirtIfAuthKey.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfAuthKey.setDescription("'If Authentication Type is simplePassword, the device will left adjust and zero fill to 8 octets. When read, ospfVifAuthKey always returns a string of length zero.' REFERENCE 'OSPF Version 2, Section 9 The Interface Data Structure'")
wfOspfVirtIfTxHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfTxHellos.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfTxHellos.setDescription('Number of OSPF Hello packets transmitted on Virtual Interfaces.')
wfOspfVirtIfTxDBDescripts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfTxDBDescripts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfTxDBDescripts.setDescription('Number of OSPF DataBase Description packets transmitted on Virtual Interfaces.')
wfOspfVirtIfTxLinkStateReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfTxLinkStateReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfTxLinkStateReqs.setDescription('Number of OSPF Link State Request packets transmitted on Virtual Interfaces.')
wfOspfVirtIfTxLinkStateUpds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfTxLinkStateUpds.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfTxLinkStateUpds.setDescription('Number of OSPF Link State Update packets transmitted on Virtual Interfaces.')
wfOspfVirtIfTxLinkStateAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfTxLinkStateAcks.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfTxLinkStateAcks.setDescription('Number of OSPF Link State Acknowledgement packets transmitted on Virtual Interfaces.')
wfOspfVirtIfRxHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfRxHellos.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfRxHellos.setDescription('Number of OSPF Hello packets received on Virtual Interfaces.')
wfOspfVirtIfRxDBDescripts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfRxDBDescripts.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfRxDBDescripts.setDescription('Number of OSPF DataBase Description packets received on Virtual Interfaces.')
wfOspfVirtIfRxLinkStateReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfRxLinkStateReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfRxLinkStateReqs.setDescription('Number of OSPF Link State Request packets recieved on Virtual Interfaces.')
wfOspfVirtIfRxLinkStateUpds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfRxLinkStateUpds.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfRxLinkStateUpds.setDescription('Number of OSPF Link State Update packets received on Virtual Interfaces.')
wfOspfVirtIfRxLinkStateAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfRxLinkStateAcks.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfRxLinkStateAcks.setDescription('Number of OSPF Link State Acknowledgement packets received on Virtual Interfaces.')
wfOspfVirtIfDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtIfDrops.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtIfDrops.setDescription('Number of OSPF packets dropped on Virtual Interfaces.')
wfOspfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7), )
if mibBuilder.loadTexts: wfOspfNbrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrTable.setDescription("-- OSPF Neighbor Table -- The OSPF Neighbor Table describes all neighbors in -- the locality of the subject router. 'A table of non-virtual neighbor information.' REFERENCE 'OSPF Version 2, Section 10 The Neighbor Data Structure'")
wfOspfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1), ).setIndexNames((0, "Wellfleet-OSPF-MIB", "wfOspfNbrIpAddr"), (0, "Wellfleet-OSPF-MIB", "wfOspfNbrAddressLessIndex"))
if mibBuilder.loadTexts: wfOspfNbrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrEntry.setDescription("'The information regarding a single neighbor.' REFERENCE 'OSPF Version 2, Section 10 The Neighbor Data Structure'")
wfOspfNbrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfNbrDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrDelete.setDescription('This variable indicates the existence of a static OSPF neighbor.')
wfOspfNbrDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfNbrDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrDisable.setDescription("'This variable displays the status of the entry. Setting it to 'DISABLED' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.'")
wfOspfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoway", 4), ("exchangstart", 5), ("exchange", 6), ("loading", 7), ("full", 8))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfNbrState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrState.setDescription("'The State of the relationship with this Neighbor.' REFERENCE 'OSPF Version 2, Section 10.1 Neighbor States' down (1), attempt (2), init (3), twoWay (4), exchangeStart (5), exchange (6), loading (7), full (8)")
wfOspfNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfNbrIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrIpAddr.setDescription("'The IP address of this neighbor.'")
wfOspfNbrIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfNbrIfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrIfAddr.setDescription("'The Interface IP address for this neighbor.'")
wfOspfNbrAddressLessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfNbrAddressLessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrAddressLessIndex.setDescription("' On an interface having an IP Address, zero. On addressless interfaces, the corresponding value of ifIndex in the Internet Standard MIB. On row creation, this can be derived from the instance.'")
wfOspfNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfNbrRtrId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrRtrId.setDescription("'A 32-bit integer (represented as a type IpAddress) uniquely identifying the neighboring router in the Autonomous System.' default { '00000000'H } -- 0.0.0.0")
wfOspfNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfNbrOptions.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrOptions.setDescription("'A Bit Mask corresponding to the neighbor's options field. Bit 0, if set, indicates that the area accepts and operates on external information; if zero, it is a stub area. Bit 1, if set, indicates that the system will operate on Type of Service metrics other than TOS 0. If zero, the neighbor will ignore all metrics except the TOS 0 metric.' REFERENCE 'OSPF Version 2, Section 12.1.2 Options'")
wfOspfNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfNbrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrPriority.setDescription("'The priority of this neighbor in the designated router election algorithm. The value 0 signifies that the neighbor is not eligible to become the designated router on this particular network.' This is the user configurable/changeable neighbor's priority")
wfOspfNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfNbrEvents.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrEvents.setDescription("'The number of times this neighbor relationship has changed state, or an error has occurred.'")
wfOspfNbrLSRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfNbrLSRetransQLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNbrLSRetransQLen.setDescription("'The current length of the retransmission queue.'")
wfOspfCurNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfCurNbrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfCurNbrPriority.setDescription('This value represents the priority of the neighbor as indicated in received Hello packets. In most cases, this will be the same as wfOspfCfgNbrPriority. If they are different, it indicates a misconfiguration')
wfOspfVirtNbrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8), )
if mibBuilder.loadTexts: wfOspfVirtNbrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrTable.setDescription("-- WFOSPF Virtual Neighbor Table -- This table describes all virtual neighbors. -- Since Virtual Links are configured in the -- virtual interface table, this table is read-only. 'A table of virtual neighbor information.' REFERENCE 'OSPF Version 2, '")
wfOspfVirtNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8, 1), ).setIndexNames((0, "Wellfleet-OSPF-MIB", "wfOspfVirtNbrArea"), (0, "Wellfleet-OSPF-MIB", "wfOspfVirtNbrRtrId"))
if mibBuilder.loadTexts: wfOspfVirtNbrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrEntry.setDescription("'Virtual neighbor information.' REFERENCE 'OSPF Version 2, '")
wfOspfVirtNbrArea = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtNbrArea.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrArea.setDescription("'The Transit Area Identifier.'")
wfOspfVirtNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtNbrRtrId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrRtrId.setDescription("'A 32-bit integer uniquely identifying the neighboring router in the Autonomous System.'")
wfOspfVirtNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtNbrIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrIpAddr.setDescription("'The IP address this Virtual Neighbor is using.'")
wfOspfVirtNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtNbrOptions.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrOptions.setDescription("'A bit map corresponding to the neighbor's options field. Thus, Bit 1, if set, indicates that the neighbor supports Type of Service Routing; if zero, no metrics other than TOS 0 are in use by the neighbor.'")
wfOspfVirtNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoway", 4), ("exchangstart", 5), ("exchange", 6), ("loading", 7), ("full", 8))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtNbrState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrState.setDescription("'The state of the Virtual Neighbor Relationship.' down (1), attempt (2), init (3), twoWay (4), exchangeStart (5), exchange (6), loading (7), full (8)")
wfOspfVirtNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtNbrEvents.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrEvents.setDescription("'The number of times this virtual link has changed its state, or an error has occurred.'")
wfOspfVirtNbrLSRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 8, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfVirtNbrLSRetransQLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfVirtNbrLSRetransQLen.setDescription("'The current length of the retransmission queue.'")
wfOspfDynNbrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9), )
if mibBuilder.loadTexts: wfOspfDynNbrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrTable.setDescription("-- OSPF Dynamic Neighbor Table -- The OSPF Dynamic Neighbor Table describes all neighbors in -- the locality of the subject router learned during operation. 'A table of non-virtual neighbor information.' REFERENCE 'OSPF Version 2, Section 10 The Neighbor Data Structure'")
wfOspfDynNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1), ).setIndexNames((0, "Wellfleet-OSPF-MIB", "wfOspfDynNbrIpAddr"), (0, "Wellfleet-OSPF-MIB", "wfOspfDynNbrAddressLessIndex"))
if mibBuilder.loadTexts: wfOspfDynNbrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrEntry.setDescription("'The information regarding a single neighbor.' REFERENCE 'OSPF Version 2, Section 10 The Neighbor Data Structure'")
wfOspfDynNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoway", 4), ("exchangstart", 5), ("exchange", 6), ("loading", 7), ("full", 8))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrState.setDescription("'The State of the relationship with this Neighbor.' REFERENCE 'OSPF Version 2, Section 10.1 Neighbor States' down (1), attempt (2), init (3), twoWay (4), exchangeStart (5), exchange (6), loading (7), full (8)")
wfOspfDynNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrIpAddr.setDescription("'The IP address of this neighbor.'")
wfOspfDynNbrIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrIfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrIfAddr.setDescription("'The Interface IP address for this neighbor.'")
wfOspfDynNbrAddressLessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrAddressLessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrAddressLessIndex.setDescription("' On an interface having an IP Address, zero. On addressless interfaces, the corresponding value of ifIndex in the Internet Standard MIB. On row creation, this can be derived from the instance.'")
wfOspfDynNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrRtrId.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrRtrId.setDescription("'A 32-bit integer (represented as a type IpAddress) uniquely identifying the neighboring router in the Autonomous System.' default { '00000000'H } -- 0.0.0.0")
wfOspfDynNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrOptions.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrOptions.setDescription("'A Bit Mask corresponding to the neighbor's options field. Bit 0, if set, indicates that the area accepts and operates on external information; if zero, it is a stub area. Bit 1, if set, indicates that the system will operate on Type of Service metrics other than TOS 0. If zero, the neighbor will ignore all metrics except the TOS 0 metric.' REFERENCE 'OSPF Version 2, Section 12.1.2 Options'")
wfOspfDynNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrPriority.setDescription("'The priority of this neighbor in the designated router election algorithm. The value 0 signifies that the neighbor is not eligible to become the designated router on this particular network.'")
wfOspfDynNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrEvents.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrEvents.setDescription("'The number of times this neighbor relationship has changed state, or an error has occurred.'")
wfOspfDynNbrLSRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 9, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfDynNbrLSRetransQLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfDynNbrLSRetransQLen.setDescription("'The current length of the retransmission queue.'")
wfOspfNSSARangeTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 12), )
if mibBuilder.loadTexts: wfOspfNSSARangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNSSARangeTable.setDescription("-- OSPF NSSA Range Table -- The OSPF NSSA Range Table describes the Type-7 address -- ranges used in translation/aggregation of Type-7 LSAs -- into Type-5 LSAs. REFERENCE 'OSPF Internet Draft, Section 3.2 Type-7 Address Range'")
wfOspfNSSARangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 12, 1), ).setIndexNames((0, "Wellfleet-OSPF-MIB", "wfOspfNSSARangeNet"))
if mibBuilder.loadTexts: wfOspfNSSARangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNSSARangeEntry.setDescription('')
wfOspfNSSARangeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfNSSARangeDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNSSARangeDelete.setDescription('This value determines if an type-7 Range has been configured for the OSPF NSSA border router .')
wfOspfNSSARangeDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfNSSARangeDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNSSARangeDisable.setDescription("`This variable displays the status of the entry. Setting it to `DISBALED' has the effect of rendering it inoperative. '")
wfOspfNSSARangeNet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 12, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOspfNSSARangeNet.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNSSARangeNet.setDescription("`The IP Address of the Net or Subnet indicated by the range.' REFERENCE `OSPF NSSA Internet Draft, 3.2 type-7 address range'")
wfOspfNSSARangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 12, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfNSSARangeMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNSSARangeMask.setDescription("`The Subnet Mask that pertains to the Net or Subnet.' REFERENCE `OSPF NSSA Internet Draft, 3.2 type-7 address range'")
wfOspfNSSARangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("advertise", 1), ("block", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfNSSARangeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNSSARangeStatus.setDescription("`Set to either Advertise or DoNotAdvertise. Routing information is condensed at area boundaries. External to the area, at most a single route is advertised for each address range. The route is advertised if and only if the addre range's Status is set to Advertise. Unadvertised ranges allow the existence of certain networks to be intentionally hidden from other areas. Status is set to Advertise by default.' REFERENCE `OSPF NSSA Internet Draft, 3.2 type-7 address range'")
wfOspfNSSARangeExternRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 3, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOspfNSSARangeExternRouteTag.setStatus('mandatory')
if mibBuilder.loadTexts: wfOspfNSSARangeExternRouteTag.setDescription("`External route tag. This value is used in the aggregated type-5 LSA' REFERENCE `OSPF NSSA Internet Draft, 3.2 type-7 address range'")
mibBuilder.exportSymbols("Wellfleet-OSPF-MIB", wfOspfIfState=wfOspfIfState, wfOspfBackupLsdbAseTag=wfOspfBackupLsdbAseTag, wfOspfTOSSupport=wfOspfTOSSupport, wfOspfBackupLsdbLSID=wfOspfBackupLsdbLSID, wfOspfAreaId=wfOspfAreaId, wfOspfAreaRangeDisable=wfOspfAreaRangeDisable, wfOspfIfEntry=wfOspfIfEntry, wfOspfVirtIfTxLinkStateUpds=wfOspfVirtIfTxLinkStateUpds, wfOspfMaxQueuedMcastPkts=wfOspfMaxQueuedMcastPkts, wfOspfVirtNbrRtrId=wfOspfVirtNbrRtrId, wfOspfNSSARangeNet=wfOspfNSSARangeNet, wfOspfAreaDisable=wfOspfAreaDisable, wfOspfNbrIpAddr=wfOspfNbrIpAddr, wfOspfIfDelete=wfOspfIfDelete, wfMospfForwardSourceNetMask=wfMospfForwardSourceNetMask, wfOspfPrimaryLogMask=wfOspfPrimaryLogMask, wfOspfAreaDelete=wfOspfAreaDelete, wfOspfBackupLogMask=wfOspfBackupLogMask, wfOspfNSSARangeStatus=wfOspfNSSARangeStatus, wfOspfIfBwRate=wfOspfIfBwRate, wfOspfNbrPriority=wfOspfNbrPriority, wfOspfDynNbrState=wfOspfDynNbrState, wfOspfIfTxLinkStateUpds=wfOspfIfTxLinkStateUpds, wfOspfAreaState=wfOspfAreaState, wfOspfIfPollInterval=wfOspfIfPollInterval, wfOspfNSSARangeEntry=wfOspfNSSARangeEntry, wfOspfRfc1583Compatibility=wfOspfRfc1583Compatibility, wfOspfPtpSpecCostEnable=wfOspfPtpSpecCostEnable, wfOspfBackupLsdbAseType=wfOspfBackupLsdbAseType, wfOspfVirtIfState=wfOspfVirtIfState, wfOspfIfRxLinkStateAcks=wfOspfIfRxLinkStateAcks, wfOspfGeneralDelete=wfOspfGeneralDelete, wfOspfVirtIfEntry=wfOspfVirtIfEntry, wfOspfVirtNbrTable=wfOspfVirtNbrTable, wfOspfStubMetric=wfOspfStubMetric, wfOspfAreaRangeEntry=wfOspfAreaRangeEntry, wfOspfIfTable=wfOspfIfTable, wfOspfDynNbrEntry=wfOspfDynNbrEntry, wfOspfNbrRtrId=wfOspfNbrRtrId, wfOspfIfRtrPriority=wfOspfIfRtrPriority, wfOspfDynNbrRtrId=wfOspfDynNbrRtrId, wfOspfMcastUseDynTTL=wfOspfMcastUseDynTTL, wfOspfLsaRefreshDelay=wfOspfLsaRefreshDelay, wfMospfForwardUpstreamAddress=wfMospfForwardUpstreamAddress, wfOspfBackupLsdbAreaId=wfOspfBackupLsdbAreaId, wfOspfIfRxLinkStateReqs=wfOspfIfRxLinkStateReqs, wfOspfBackupLsdbMetric=wfOspfBackupLsdbMetric, wfOspfIfAreaId=wfOspfIfAreaId, wfOspfVirtIfRetransInterval=wfOspfVirtIfRetransInterval, wfOspfAreaTable=wfOspfAreaTable, wfOspfDynNbrIfAddr=wfOspfDynNbrIfAddr, wfOspfDynNbrLSRetransQLen=wfOspfDynNbrLSRetransQLen, wfOspfASEMcastEnable=wfOspfASEMcastEnable, wfOspfLsdbAge=wfOspfLsdbAge, wfOspfAggrUseMaxCost=wfOspfAggrUseMaxCost, wfMospfForwardEntry=wfMospfForwardEntry, wfOspfNSSARangeExternRouteTag=wfOspfNSSARangeExternRouteTag, wfOspfAreaRangeDelete=wfOspfAreaRangeDelete, wfOspfLsdbCount=wfOspfLsdbCount, wfOspfVirtIfTxLinkStateReqs=wfOspfVirtIfTxLinkStateReqs, wfOspfLsdbLSID=wfOspfLsdbLSID, wfOspfNbrIfAddr=wfOspfNbrIfAddr, wfOspfVirtIfRxDBDescripts=wfOspfVirtIfRxDBDescripts, wfMospfForwardFlag=wfMospfForwardFlag, wfOspfIfBwDepth=wfOspfIfBwDepth, wfOspfIfMetricCost=wfOspfIfMetricCost, wfOspfVirtNbrEntry=wfOspfVirtNbrEntry, wfOspfVirtNbrOptions=wfOspfVirtNbrOptions, wfOspfDeterministicMcastHoldDown=wfOspfDeterministicMcastHoldDown, wfMospfForwardSourceMask=wfMospfForwardSourceMask, wfOspfBackupLsdbAdv=wfOspfBackupLsdbAdv, wfOspfLsdbAreaId=wfOspfLsdbAreaId, wfOspfIfRxHellos=wfOspfIfRxHellos, wfOspfRouterId=wfOspfRouterId, wfOspfVirtNbrState=wfOspfVirtNbrState, wfOspfLsaRefreshMax=wfOspfLsaRefreshMax, wfOspfDynNbrOptions=wfOspfDynNbrOptions, wfOspfLsdbType=wfOspfLsdbType, wfOspfAreaBdrRtrStatus=wfOspfAreaBdrRtrStatus, wfOspfNbrDisable=wfOspfNbrDisable, wfOspfDynNbrPriority=wfOspfDynNbrPriority, wfOspfAreaRangeTable=wfOspfAreaRangeTable, wfOspfLsdbChecksum=wfOspfLsdbChecksum, wfOspfVirtIfRxLinkStateReqs=wfOspfVirtIfRxLinkStateReqs, wfOspfVirtIfHelloInterval=wfOspfVirtIfHelloInterval, wfOspfVirtIfRxHellos=wfOspfVirtIfRxHellos, wfOspfBackupLsdbAge=wfOspfBackupLsdbAge, wfOspfImportASExtern=wfOspfImportASExtern, wfOspfNbrEntry=wfOspfNbrEntry, wfOspfNbrEvents=wfOspfNbrEvents, wfOspfVirtIfNeighbor=wfOspfVirtIfNeighbor, wfOspfBackupLsdbAdvLen=wfOspfBackupLsdbAdvLen, wfOspfVirtNbrEvents=wfOspfVirtNbrEvents, wfOspfLsdbSequence=wfOspfLsdbSequence, wfOspfNbrTable=wfOspfNbrTable, wfOspfNbrDelete=wfOspfNbrDelete, wfOspfDynNbrIpAddr=wfOspfDynNbrIpAddr, wfOspfIfRxDBDescripts=wfOspfIfRxDBDescripts, wfOspfVirtIfRtrDeadInterval=wfOspfVirtIfRtrDeadInterval, wfOspfLsdbRouterId=wfOspfLsdbRouterId, wfOspfBackupLsdbChecksum=wfOspfBackupLsdbChecksum, wfOspfSlotPriority=wfOspfSlotPriority, wfOspfAreaNssaDefaultRoutePathType=wfOspfAreaNssaDefaultRoutePathType, wfOspfIfRxLinkStateUpds=wfOspfIfRxLinkStateUpds, wfOspfMulticastRoutePinning=wfOspfMulticastRoutePinning, wfOspfAreaNssaPropagateDefaultRoute=wfOspfAreaNssaPropagateDefaultRoute, wfOspfLsdbAseType=wfOspfLsdbAseType, wfOspfIfDisable=wfOspfIfDisable, wfOspfNbrLSRetransQLen=wfOspfNbrLSRetransQLen, wfOspfVirtNbrLSRetransQLen=wfOspfVirtNbrLSRetransQLen, wfOspfMulticastDeterministic=wfOspfMulticastDeterministic, wfOspfSpfHoldDown=wfOspfSpfHoldDown, wfOspfVirtIfRxLinkStateAcks=wfOspfVirtIfRxLinkStateAcks, wfOspfBackupSlot=wfOspfBackupSlot, wfOspfImportSum=wfOspfImportSum, wfOspfIfDesignatedRouter=wfOspfIfDesignatedRouter, wfOspfAreaNssaTranslateCfg=wfOspfAreaNssaTranslateCfg, wfOspfIfOpaqueOn=wfOspfIfOpaqueOn, wfOspfVirtIfTxDBDescripts=wfOspfVirtIfTxDBDescripts, wfOspfLsdbMetric=wfOspfLsdbMetric, wfOspfSlotMask=wfOspfSlotMask, wfOspfAseTagDefault=wfOspfAseTagDefault, wfOspfLsdbEntry=wfOspfLsdbEntry, wfOspfNSSARangeTable=wfOspfNSSARangeTable, wfOspfNbrState=wfOspfNbrState, wfOspfVirtNbrIpAddr=wfOspfVirtNbrIpAddr, wfOspfIfHelloInterval=wfOspfIfHelloInterval, wfOspfVirtIfAuthKey=wfOspfVirtIfAuthKey, wfOspfCurNbrPriority=wfOspfCurNbrPriority, wfOspfVirtNbrArea=wfOspfVirtNbrArea, wfMospfForwardBwBucketDepth=wfMospfForwardBwBucketDepth, wfOspfAreaRangeMask=wfOspfAreaRangeMask, wfOspfIfTxHellos=wfOspfIfTxHellos, wfOspfIfTxLinkStateAcks=wfOspfIfTxLinkStateAcks, wfOspfNSSARangeMask=wfOspfNSSARangeMask, wfOspfBackupLsdbType=wfOspfBackupLsdbType, wfOspfAddressLessIf=wfOspfAddressLessIf, wfOspfLsdbAdv=wfOspfLsdbAdv, wfOspfVirtIfDelete=wfOspfVirtIfDelete, wfMospfForwardGroup=wfMospfForwardGroup, wfOspfBackupDisable=wfOspfBackupDisable, wfOspfAreaRangeState=wfOspfAreaRangeState, wfMospfForwardSource=wfMospfForwardSource, wfOspfIfAuthKey=wfOspfIfAuthKey, wfOspfOpaqueCapability=wfOspfOpaqueCapability, wfOspfIfTxDBDescripts=wfOspfIfTxDBDescripts, wfOspfNbrOptions=wfOspfNbrOptions, wfOspfVirtIfRxLinkStateUpds=wfOspfVirtIfRxLinkStateUpds, wfMospfEntryTimeoutValue=wfMospfEntryTimeoutValue, wfOspfVirtIfTxHellos=wfOspfVirtIfTxHellos, wfOspfLsdbAdvLen=wfOspfLsdbAdvLen, wfOspfBackupLsdbRouterId=wfOspfBackupLsdbRouterId, wfOspfASBdrRtrStatus=wfOspfASBdrRtrStatus, wfOspfMtuUseCommonDefault=wfOspfMtuUseCommonDefault, wfOspfDynNbrTable=wfOspfDynNbrTable, wfOspfIfRtrDeadInterval=wfOspfIfRtrDeadInterval, wfOspfDynNbrEvents=wfOspfDynNbrEvents, wfOspfMtuSize=wfOspfMtuSize, wfOspfPrimarySlot=wfOspfPrimarySlot, wfMospfForwardDownstream=wfMospfForwardDownstream, wfOspfNbrAddressLessIndex=wfOspfNbrAddressLessIndex, wfOspfAreaRangeNet=wfOspfAreaRangeNet, wfOspfIfIpAddress=wfOspfIfIpAddress, wfOspfLsdbAseTag=wfOspfLsdbAseTag, wfOspfMaximumPath=wfOspfMaximumPath, wfOspfDynNbrAddressLessIndex=wfOspfDynNbrAddressLessIndex, wfOspfBackupLsdbTable=wfOspfBackupLsdbTable, wfOspfVirtIfDrops=wfOspfVirtIfDrops, wfOspfIfRetransInterval=wfOspfIfRetransInterval, wfOspfGeneralDisable=wfOspfGeneralDisable, wfOspfIfType=wfOspfIfType, wfOspfAreaEntry=wfOspfAreaEntry, wfOspfSpfCnt=wfOspfSpfCnt, wfOspfVirtIfTable=wfOspfVirtIfTable, wfOspfNewAseMetricSupport=wfOspfNewAseMetricSupport, wfOspfLsdbTable=wfOspfLsdbTable, wfOspfMulticastExtensions=wfOspfMulticastExtensions, wfMospfForwardTable=wfMospfForwardTable, wfOspfVirtIfDisable=wfOspfVirtIfDisable, wfOspfLsdbAseForwardAddr=wfOspfLsdbAseForwardAddr, wfOspfGeneralState=wfOspfGeneralState, wfOspfAreaNssaTranslateStatus=wfOspfAreaNssaTranslateStatus, wfOspfNSSARangeDisable=wfOspfNSSARangeDisable, wfOspfIfTransitDelay=wfOspfIfTransitDelay, wfOspfGeneralGroup=wfOspfGeneralGroup, wfOspfAreaRangeMetric=wfOspfAreaRangeMetric, wfOspfIfDrops=wfOspfIfDrops, wfOspfIfMulticastForwarding=wfOspfIfMulticastForwarding, wfOspfVirtIfTransitDelay=wfOspfVirtIfTransitDelay, wfOspfNssaBorderRouter=wfOspfNssaBorderRouter, wfOspfIfTxLinkStateReqs=wfOspfIfTxLinkStateReqs, wfOspfVirtIfTxLinkStateAcks=wfOspfVirtIfTxLinkStateAcks, wfOspfAreaRangeStatus=wfOspfAreaRangeStatus, wfMospfForwardUpstreamIfIndex=wfMospfForwardUpstreamIfIndex, wfOspfBackupLsdbSequence=wfOspfBackupLsdbSequence, wfMospfForwardAge=wfMospfForwardAge, wfOspfBackupLsdbAseForwardAddr=wfOspfBackupLsdbAseForwardAddr, wfOspfIfBackupDesignatedRouter=wfOspfIfBackupDesignatedRouter, wfOspfNSSARangeDelete=wfOspfNSSARangeDelete, wfOspfAreaNssaOriginateDefaultRoute=wfOspfAreaNssaOriginateDefaultRoute, wfOspfBackupLsdbEntry=wfOspfBackupLsdbEntry, wfOspfAreaRangeAreaID=wfOspfAreaRangeAreaID, wfOspfVirtIfAreaID=wfOspfVirtIfAreaID, wfOspfIfMtuMismatchDetect=wfOspfIfMtuMismatchDetect, wfMospfForwardBwBucketRate=wfMospfForwardBwBucketRate, wfOspfAuthType=wfOspfAuthType, wfOspfVersionNumber=wfOspfVersionNumber, wfOspfFwdAddrComp=wfOspfFwdAddrComp)
