#
# PySNMP MIB module CISCO-GGSN-SERVICE-AWARE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-GGSN-SERVICE-AWARE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:59:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
cGgsnNotifPdpImsi, cGgsnNotifPdpMsisdn = mibBuilder.importSymbols("CISCO-GGSN-MIB", "cGgsnNotifPdpImsi", "cGgsnNotifPdpMsisdn")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetPortNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, IpAddress, Counter64, ObjectIdentity, Unsigned32, Bits, NotificationType, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "IpAddress", "Counter64", "ObjectIdentity", "Unsigned32", "Bits", "NotificationType", "TimeTicks", "ModuleIdentity")
DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
cGgsnSAMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 497))
cGgsnSAMIB.setRevisions(('2010-08-06 00:00', '2009-12-16 00:00', '2009-09-17 00:00', '2008-12-10 00:00', '2006-05-04 17:00', '2005-10-11 09:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cGgsnSAMIB.setRevisionsDescriptions(("The following changes have been made. [1] Modified description for the following. cGgsnSADccaTriggerSgsnChange, cGgsnSADccaTriggerQosChange, cGgsnSADccaTriggerPlmnChange, cGgsnSADccaTriggerRatChange, cGgsnSADccaTriggerUserLocChange, cGgsnSADccaClci. [2] Added the enumeration 'none' to object cGgsnSADccaClci and changed its default value to 'none'.", 'Added new TEXTUAL-CONVENTION CGgsnCsgPathState. Added the following objects to cGgsnSACsgTable. cGgsnSACsgAaaAcctGroup, cGgsnSACsgPathState, cGgsnSACsgNumPdps. Added cggsnSACsgStatisticsTable and the following objects to the table. cGgsnSACsgStatsOutboundMsgs, cGgsnSACsgStatsOutboundOctets, cGgsnSACsgStatsInboundMsgs, cGgsnSACsgStatsInboundOctets, cGgsnSACsgStatsServiceAuthReqs, cGgsnSACsgStatsServiceAuthResps, cGgsnSACsgStatsServiceReAuthReqs, cGgsnSACsgStatsQuotaReturns, cGgsnSACsgStatsQuotaReturnReqs, cGgsnSACsgStatsQuotaReturnAccept, cGgsnSACsgStatsServiceStopMsgs, cGgsnSACsgStatsServiceStopReqs, cGgsnSACsgStatsQuotaPushMsgs, cGgsnSACsgStatsQuotaPushRsps, cGgsnSACsgStatsGtpAcks. deprecated the following objects cGgsnSACsgOutboundMsgs, cGgsnSACsgOutboundOctets, cGgsnSACsgInboundMsgs, cGgsnSACsgInboundOctets, cGgsnSACsgServiceAuthReqs, cGgsnSACsgServiceAuthResps, cGgsnSACsgServiceReAuthReqs, cGgsnSACsgQuotaReturns, cGgsnSACsgQuotaReturnReqs, cGgsnSACsgQuotaPushResps, cGgsnSACsgServiceStopMsgs, cGgsnSACsgServiceStopReqs, cGgsnSACsgQuotaPushMsgs, cGgsnSACsgQuotaPushRsps, cGgsnSACsgGtpAcks. Deprecated cGgsnSACsgStateUpNotif and cGgsnSACsgStateDownNotif. Added new notifications cGgsnSACsgR100StateUpNotif and cGgsnSACsgR100StateDownNotif and added below objects to the notifications cGgsnSANotifCsgName cGgsnSANotifCsgRealAddressType cGgsnSANotifCsgRealAddress cGgsnSANotifCsgVirtualAddrType cGgsnSANotifCsgVirtualAddress cGgsnSANotifCsgPort. Deprecated OBJECT-GROUPs cGgsnSAStatisticsGroup and cGgsnSANotifGroup. Added following OBJECT-GROUPs cGgsnSAConfigurationsGroupR100, cGgsnSAStatisticsGroupR100, cGgsnSANotifInfoGroupR100, cGgsnSANotifGroupR100. Created new MODULE-COMPLIANCE cGgsnSAMIBComplianceRev4.', 'Added cGgsnSAQuotaServerSvcMsgEnabled to cGgsnSAQuotaServerEntry. Added following OBJECT-GROUP cGgsnSAConfigurationsGroupSup1 Added MODULE-COMPLIANCE cGgsnSAMIBComplianceRev3, which deprecates cGgsnSAMIBComplianceRev2.', 'Added cGgsnSADccaTriggerUserLocChange to cGgsnSADccaProfileTable.', 'Added following objects to cGgsnSADccaProfileTable: cGgsnSADccaTriggerPlmnChange, cGgsnSADccaTriggerRatChange. Added following group to cGgsnSAMIBGroups: cGgsnSAExtConfigurationsGroup. Added following compliance to cGgsnSAMIBCompliances: cGgsnSAMIBComplianceRev1.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: cGgsnSAMIB.setLastUpdated('201008060000Z')
if mibBuilder.loadTexts: cGgsnSAMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: cGgsnSAMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-gprs@cisco.com')
if mibBuilder.loadTexts: cGgsnSAMIB.setDescription("This MIB module manages the service-aware feature of Gateway GPRS Support Node (GGSN). This MIB is an enhancement of the CISCO-GGSN-MIB. There needs to be a tight coupling between GGSN and CSG in order to realize the enhanced GGSN, which is capable of categorizing traffic flowing within a PDP context to different services. An enhanced version of Diameter Credit Control Application (DCCA) will be used for implementing real-time credit control of end users in the IPS framework. The GGSN will act as DCCA client and will interact with DCCA server for quota negotiation and usage reporting. The credit control request (CCR) message is used between DCCA-Client (DCCA-C) and DCCA-Server to request credit authorization for a given service. The credit control request has one mandatory AVP (Attribute Value Pair) called CCR. For a session based credit control several interrogation required, the first, intermediate and final. The first interrogation must be sent before the DCCA-C allows any service event to the user, CCR type is set to INITIAL in this case. When all the granted service units for one unit type are spent by the end user or the validity time is expired the DCCA-C must send a new credit control (CC) request to CC server, this is the intermediate interrogation and the CCR type AVP is set to the value UPDATE. When the end user terminates a service session the DCCA-C must send a final CCR request message to the CC server. The CCR type AVP is set to the FINAL or TERMINATION_REQUSET. CSG will be responsible for categorizing the traffic, quota management activities and usage reporting functions. GGSN will act as a quota server for CSG. A proprietary interface based on GTP' will be used between GGSN and CSG. Acronyms and terms: APN Access Point Name CCA Credit Control Answer CCR Credit Control Request CCFH Credit Control Failure Handling CDR Charging Data Record CLCI Closed Loop Charging Interface CSG Content Service Gateway DCCA Diameter Credit Control Application ETSI European Telecommunications Standards Institute GGSN Gateway GPRS Support Node GPRS General Packet Radio Service GSM Global System for Mobile communication GTP GPRS Tunneling Protocol MS Mobile Station MSISDN Mobile Station ISDN number PDP Packet Data Protocol PLMN Public Land Mobile Network SGSN Serving GPRS support Node SLB Server Load Balancing TFT Traffic Flow Template UMTS Universal Mobile Telecommunications System QS Quota Server UE User Equipment REFERENCE [1] GSM 03.60: Digital cellular telecommunications system (Phase 2+); General Packet Radio Service (GPRS); Service description; Stage 2. V7.1.0 [2] GSM 09.60: Digital cellular telecommunication system (Phase 2+); General Packet Radio Service (GPRS); GPRS Tunnelling Protocol (GTP) across Gn and Gp Interface. V7.3.0 [3] 3GPP; Technical Specification Group Services and System Aspects; QoS Concept and Architecture. 3G TS 23.107 v3.2.0. [4] 3GPP; Technical Specification Group Core Network; General Packet Radio Service(GPRS); GPRS Tunnelling Protocol (GTP) across Gn and Gp Interface (Release 1999). 3G TS 29.060 v3.5.0.")
class CGgsnCsgPathState(TextualConvention, Bits):
    description = 'This data type is used to specify the CSG Path State. CSG path indicates the link between GGSN and configured CSG. Values down/up indicates the state of the link.'
    status = 'current'
    namedValues = NamedValues(("down", 0), ("up", 1))

cGgsnSAMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 497, 1))
cGgsnSAStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1))
cGgsnSACsgStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1))
cGgsnSAQuotaServerStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2))
cGgsnSAServiceAwareStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3))
cGgsnSANotifMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 2))
cGgsnSAConfigurations = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3))
cGgsnSANotifInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 4))
cGgsnSACsgOutboundMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgOutboundMsgs.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgOutboundMsgs.setDescription('The aggregate number of echo request, echo response, and node alive messages sent. This object is deprecated and replaced by cGgsnSACsgStatsOutboundMsgs object.')
cGgsnSACsgOutboundOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 2), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgOutboundOctets.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgOutboundOctets.setDescription('The aggregate number of echo request, echo response, and node alive messages sent in terms of octets. This object is deprecated and replaced by cGgsnSACsgStatsOutboundOctets.')
cGgsnSACsgInboundMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgInboundMsgs.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgInboundMsgs.setDescription('The aggregate number of echo request, echo response, and node alive messages received. This object is deprecated and replaced by cGgsnSACsgStatsInboundMsgs object.')
cGgsnSACsgInboundOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 4), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgInboundOctets.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgInboundOctets.setDescription('The aggregate number of echo request, echo response, and node alive messages received in terms of octets. This object is deprecated and replaced by cGgsnSACsgStatsInboundOctets.')
cGgsnSACsgServiceAuthReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgServiceAuthReqs.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgServiceAuthReqs.setDescription('This object indicates the number of requests by the CSG for initial quota grant of a particular category. Currently, the CSG allows only synchronous quota grants (i.e., grants due to explicit requests from it). This object is deprecated and replaced by cGgsnSACsgStatsServiceAuthReqs object.')
cGgsnSACsgServiceAuthResps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgServiceAuthResps.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgServiceAuthResps.setDescription('This object indicates the number of responses given to the CSG for service authorization requests. This object is deprecated and replaced by cGgsnSACsgStatsServiceAuthResps.')
cGgsnSACsgServiceReAuthReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgServiceReAuthReqs.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgServiceReAuthReqs.setDescription('This object indicates the number of service re-authorization requests by the CSG for a category verification. This object is deprecated and replaced by cGgsnSACsgStatsServiceReAuthReqs.')
cGgsnSACsgQuotaReturns = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgQuotaReturns.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgQuotaReturns.setDescription('This object indicates the number of quota return messages by the CSG. The CSG sends quota return message when validity timer expires or there is no response message from the QS. On receipt of quota return message, QS returns the usage of a particular category. This object is deprecated and replaced by cGgsnSACsgStatsQuotaReturns object.')
cGgsnSACsgQuotaReturnReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgQuotaReturnReqs.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgQuotaReturnReqs.setDescription('This object indicates the number of quota return requests by the QS. QS may send this message to cause CSG to return unused quota for the target service. QS sends the quota return request when the validity timer expires, this in turn triggers the CCR update. The DCCA server grants quota in response to quota return request. This object is deprecated and replaced by cGgsnSACsgStatsQuotaReturnReqs.')
cGgsnSACsgQuotaPushResps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgQuotaPushResps.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgQuotaPushResps.setDescription('This object indicates the number of quota push responses by the CSG. The purpose of quota push response is mainly to convey session ID to QS, so that QS can save it for subsequent transactions it originates. This object is deprecated and replaced by cGgsnSACsgStatsQuotaReturnAccept object.')
cGgsnSACsgServiceStopMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgServiceStopMsgs.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgServiceStopMsgs.setDescription('This object indicates the number of service stop messages by the CSG. The following list summarizes the situations under which user is disconnected from the service: - When the CSG removes the user, by a RADIUS Accounting (stop) message, the CSG sends the service stop message for each service for which user had an active session. - When the idle timer on the CSG expires, it will send service stop for the category. - If the QS sends service stop request message. The CSG will report the usage and remaining quota. This object is deprecated and replaced by cGgsnSACsgStatsServiceStopMsgs object.')
cGgsnSACsgServiceStopReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgServiceStopReqs.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgServiceStopReqs.setDescription('This object indicates the number of service stop messages received by the CSG. If following a quota push message and update request from SGSN, GGSN sent a CCR update and received CCA update with terminate category, in this case GGSN will generate service stop request to CSG. This object is deprecated and replaced by cGgsnSACsgStatsServiceStopReqs object.')
cGgsnSACsgQuotaPushMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgQuotaPushMsgs.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgQuotaPushMsgs.setDescription('This object indicates the number of quota push messages sent by the GGSN. GGSN sends the quota push message in the following conditions: - When DCCA server returns non zero quota. - When category is blacklisted or unknown. - When retransmit (Tx) timer, associated with DCCA client, expires. - When credit control not required. This object is deprecated and replaced by cGgsnSACsgStatsQuotaPushMsgs object.')
cGgsnSACsgQuotaPushRsps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgQuotaPushRsps.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgQuotaPushRsps.setDescription("This object indicates the number of quota push responses by the CSG. The CSG respond to the quota push with the quota push response. The cause IE in the GTP' header indicates success/failure. The category whose quota is pushed must be statically configured on the CSG. If it is not configured, CSG sends the reject cause 255 in its quota push response. This object is deprecated and replaced by cGgsnSACsgStatsQuotaPushRsps object.")
cGgsnSACsgGtpAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgGtpAcks.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgGtpAcks.setDescription("This object indicates the number of GTP' level acknowledgements by the CSG for some requests from the QS (e.g., quota return request and service stop request). The acknowledgements do not contain the user index and service ID TLVs, which are helpful for category lookup. However, they contain the sequence number in the GTP' header that matches with that of the corresponding requests. This object is deprecated and replaced by cGgsnSACsgStatsGtpAcks object.")
cggsnSACsgStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16), )
if mibBuilder.loadTexts: cggsnSACsgStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: cggsnSACsgStatisticsTable.setDescription('This table contains the path statistics of each CSG Group on this GGSN.')
cGgsnSACsgStatsOutboundMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgStatsOutboundMsgs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgStatsOutboundMsgs.setDescription('The aggregate number of echo request, echo response, and node alive messages sent.')
cGgsnSACsgStatsOutboundOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16, 1, 2), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgStatsOutboundOctets.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgStatsOutboundOctets.setDescription('The aggregate number of echo request, echo response, and node alive messages sent in terms of octets.')
cGgsnSACsgStatsInboundMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgStatsInboundMsgs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgStatsInboundMsgs.setDescription('The aggregate number of echo request, echo response, and node alive messages received.')
cGgsnSACsgStatsInboundOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16, 1, 4), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgStatsInboundOctets.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgStatsInboundOctets.setDescription('The aggregate number of echo request, echo response, and node alive messages received in terms of octets.')
cGgsnSACsgStatsServiceAuthReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgStatsServiceAuthReqs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgStatsServiceAuthReqs.setDescription('This object indicates the number of requests by the CSG for initial quota grant of a particular category. Currently, the CSG allows only synchronous quota grants (i.e., grants due to explicit requests from it).')
cGgsnSACsgStatsServiceAuthResps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgStatsServiceAuthResps.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgStatsServiceAuthResps.setDescription('This object indicates the number of responses given to the CSG for service authorization requests.')
cGgsnSACsgStatsServiceReAuthReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgStatsServiceReAuthReqs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgStatsServiceReAuthReqs.setDescription('This object indicates the number of service re-authorization requests by the CSG for a category verification.')
cGgsnSACsgStatsQuotaReturns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgStatsQuotaReturns.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgStatsQuotaReturns.setDescription('This object indicates the number of quota return messages by the CSG. The CSG sends quota return message when validity timer expires or there is no response message from the QS. On receipt of quota return message, QS returns the usage of a particular category.')
cGgsnSACsgStatsQuotaReturnReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgStatsQuotaReturnReqs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgStatsQuotaReturnReqs.setDescription('This object indicates the number of quota return requests by the QS. QS may send this message to cause CSG to return unused quota for the target service. QS sends the quota return request when the validity timer expires, this in turn triggers the CCR update. The DCCA server grants quota in response to quota return request.')
cGgsnSACsgStatsQuotaReturnAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgStatsQuotaReturnAccept.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgStatsQuotaReturnAccept.setDescription('This object indicates the number of quota return responses by the CSG. The purpose of quota return response is mainly to convey session ID to QS, so that QS can save it for subsequent transactions it originates.')
cGgsnSACsgStatsServiceStopMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgStatsServiceStopMsgs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgStatsServiceStopMsgs.setDescription('This object indicates the number of service stop messages by the CSG to QS. The following list summarizes the situations under which user is disconnected from the service: - When the CSG removes the user, by a RADIUS Accounting (stop) message, the CSG sends the service stop message for each service for which user had an active session. - When the idle timer on the CSG expires, it will send service stop for the category. - If the QS sends service stop request message. The CSG will report the usage and remaining quota.')
cGgsnSACsgStatsServiceStopReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgStatsServiceStopReqs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgStatsServiceStopReqs.setDescription('This object indicates the number of service stop messages received by the CSG. If following a quota push message and update request from SGSN, GGSN sent a CCR update and received CCA update with terminate category, in this case GGSN will generate service stop request to CSG.')
cGgsnSACsgStatsQuotaPushMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgStatsQuotaPushMsgs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgStatsQuotaPushMsgs.setDescription('This object indicates the number of quota push messages sent by the GGSN. GGSN sends the quota push message in the following conditions: - When DCCA server returns non zero quota. - When category is blacklisted or unknown. - When retransmit (Tx) timer, associated with DCCA client, expires. - When credit control not required.')
cGgsnSACsgStatsQuotaPushRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgStatsQuotaPushRsps.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgStatsQuotaPushRsps.setDescription('This object indicates the number of quota push responses sent by the CSG. The CSG respond to the quota push message with the quota push response. The cause IE in the GTP header indicates success/failure. The category whose quota is pushed must be statically configured on the CSG. If it is not configured, CSG sends the reject cause 255 in its quota push response.')
cGgsnSACsgStatsGtpAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgStatsGtpAcks.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgStatsGtpAcks.setDescription("This object indicates the number of GTP's level acknowledgements by the CSG for some requests from the QS (e.g., quota return request and service stop request). The acknowledgements do not contain the user index and service ID TLVs, which are helpful for category lookup. However, they contain the sequence number in the GTP header that matches with that of the corresponding requests.")
cGgsnSAQsRcvdRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsRcvdRequests.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsRcvdRequests.setDescription('This object indicates the number of request messages received from the CSG. The counter is incremented when QS receives the messages as listed below: - User profile request. - Service authorization request. - Service re-authorization request. - Content authorization request.')
cGgsnSAQsRcvdResponses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsRcvdResponses.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsRcvdResponses.setDescription('This object indicates the number of responses received from the CSG for the corresponding requests.')
cGgsnSAQsSentRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsSentRequests.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsSentRequests.setDescription('This object indicates the number of request messages sent to the CSG. The counter is incremented for every request sent from the QS, like, - Quota return request - Service stop request - User disconnect request.')
cGgsnSAQsSentResponses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsSentResponses.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsSentResponses.setDescription('This object indicates number of responses sent, for the requests received from CSG. The counter is incremented when QS sends the response, like, - User profile response - Service authorization response - Content authorization response.')
cGgsnSAQsRcvdPathRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsRcvdPathRequests.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsRcvdPathRequests.setDescription('This object indicates the number of echo request and node alive request received from the CSG. Both CSG and QS use echoes to detect health of path between them. The CSG sends the real address while sending the request.')
cGgsnSAQsRcvdPathResponses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsRcvdPathResponses.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsRcvdPathResponses.setDescription('This object indicates the number of responses received for path management request messages from QS.')
cGgsnSAQsSentPathRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsSentPathRequests.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsSentPathRequests.setDescription('This object indicates the number of echo request messages sent by the QS, to check the health of the path between QS and CSG.')
cGgsnSAQsSentPathResponses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsSentPathResponses.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsSentPathResponses.setDescription('This object indicates the number of path responses sent by the QS. The QS sends the node alive response to the CSG for node alive request and it sends the response for the echo request made by CSG, with valid restart counter.')
cGgsnSAQsRcvdNegativeResponses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsRcvdNegativeResponses.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsRcvdNegativeResponses.setDescription("This object indicates the number of negative responses received from the CSG. The CSG sends negative GTP' acknowledgement and also the failure cause code in the quota push response.")
cGgsnSAQsRequestsUnreplied = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsRequestsUnreplied.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsRequestsUnreplied.setDescription('This object indicates the number of pending requests which are waiting for the response from CSG.')
cGgsnSAQsSeqnumFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsSeqnumFailures.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsSeqnumFailures.setDescription('This object indicates the number of messages received without proper sequence number. The QS uses different pool of sequence numbers for quota management and path management messages. To manage these sequence numbers, QS utilizes the service of sequence number manager. For quota management messages the sequence numbers start from 1 and increases till 65535 and then wraps around.')
cGgsnSAQsDroppedMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsDroppedMsgs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsDroppedMsgs.setDescription("This object indicates the number of dropped messages. The QS verifies the GTP' header content before queuing an inbound message to the QS process. If any field is bad, it will drop the message before queuing.")
cGgsnSAQsUnknownMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsUnknownMsgs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsUnknownMsgs.setDescription('This object indicates the number of unknown messages in the QS.')
cGgsnSAQsUnknownResponses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsUnknownResponses.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsUnknownResponses.setDescription('This object indicates the number of unknown responses received by the QS.')
cGgsnSAQsIEErrorMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsIEErrorMsgs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsIEErrorMsgs.setDescription('This object indicates the number of messages received with IE error.')
cGgsnSAQsBadSrcAddressMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsBadSrcAddressMsgs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsBadSrcAddressMsgs.setDescription('This object indicates the number of messages with bad source address.')
cGgsnSAQsVersionUnSupportedMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsVersionUnSupportedMsgs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsVersionUnSupportedMsgs.setDescription("This object indicates the number of messages with a higher version. The QS and CSG uses version '0' of GTP' for communication between them. If CSG sends message with higher version, QS will respond with the message 'version not supported'.")
cGgsnSAQsMandTlvMissingMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsMandTlvMissingMsgs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsMandTlvMissingMsgs.setDescription('This object indicates the number of messages sent by CSG with mandatory TLV missing. The message will be dropped.')
cGgsnSAQsMandTlvIncorrectMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsMandTlvIncorrectMsgs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsMandTlvIncorrectMsgs.setDescription('This object indicates the number of messages sent by the CSG with incorrect mandatory TLV.')
cGgsnSAQsInvalidMsgFormats = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsInvalidMsgFormats.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsInvalidMsgFormats.setDescription('This object indicates the number of messages sent by the CSG with TLV of unexpected length. The QS will drop the message.')
cGgsnSAQsNoResponseToMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAQsNoResponseToMsgs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQsNoResponseToMsgs.setDescription('This object indicates the number of messages sent from QS, for which there is no response from the CSG after n3/t3 retransmission.')
cGgsnSANumServiceAwareApns = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSANumServiceAwareApns.setStatus('current')
if mibBuilder.loadTexts: cGgsnSANumServiceAwareApns.setDescription('This object indicates the total number of service aware APNs.')
cGgsnSATotalGgsnEvents = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalGgsnEvents.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalGgsnEvents.setDescription('This object indicates the total number of GGSN events.')
cGgsnSATotalCsgEvents = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalCsgEvents.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalCsgEvents.setDescription('This object indicates the total number of CSG events.')
cGgsnSATotalDccaEvents = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalDccaEvents.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalDccaEvents.setDescription('This object indicates the total number of DCCA events.')
cGgsnSATotalCreatedCategories = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalCreatedCategories.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalCreatedCategories.setDescription('This object indicates the total number of categories that are created. Categories will not be statically configured in GGSN. GGSN learn about the categories for particular PDP session dynamically by DCCA server and CSG.')
cGgsnSATotalCreatedSyncObjs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalCreatedSyncObjs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalCreatedSyncObjs.setDescription('This object indicates the total number of synchronization objects that get created for each of the trigger, which keep track of the affected categories and their current state. The synchronization object contains: -Type of object -List of affected categories.')
cGgsnSACategoryFsmRtnErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACategoryFsmRtnErrors.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACategoryFsmRtnErrors.setDescription('This object indicates the number of errors, returned by category FSM.')
cGgsnSATotalServiceAuthMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalServiceAuthMsgs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalServiceAuthMsgs.setDescription('This object indicates the total number of service authorization messages sent by CSG.')
cGgsnSATotalServiceStopMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalServiceStopMsgs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalServiceStopMsgs.setDescription('This object indicates total number of service stop messages received.')
cGgsnSATotalQuotaGranted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalQuotaGranted.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalQuotaGranted.setDescription('This object indicates the total amount of quota granted.')
cGgsnSATotalBlackListCategories = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalBlackListCategories.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalBlackListCategories.setDescription('This object indicates the total number of categories which are blacklisted.')
cGgsnSATotalRAREvents = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalRAREvents.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalRAREvents.setDescription('This object indicates the total number of re-authorization (RAR) events.')
cGgsnSATotalDeletePdps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalDeletePdps.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalDeletePdps.setDescription('This object indicates the number PDPs which are deleted.')
cGgsnSAFinalConvertToPostpaidPdps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSAFinalConvertToPostpaidPdps.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAFinalConvertToPostpaidPdps.setDescription('This object indicates the number of prepaid PDPs which are converted to postpaid after reporting the final usage of the quota. The steps involved are: send quota return request to the CSG and if there is a synchronization object for Gn side trigger, send the update response and delete the sync object. Create a new sync object for this event. Make the category part of sync object.')
cGgsnSATotalGgsnFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalGgsnFailures.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalGgsnFailures.setDescription('This object indicates the total number of GGSN failures (i.e., when GGSN fails to communicate with CSG or fail to receive response from DCCA server).')
cGgsnSATotalCsgFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalCsgFailures.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalCsgFailures.setDescription('This object indicates the total number of CSG failures (i.e., failure in communication with QS).')
cGgsnSATotalDccaFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalDccaFailures.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalDccaFailures.setDescription('This object indicates the number of failures, in DCCA server.')
cGgsnSATotalDeletedCategories = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalDeletedCategories.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalDeletedCategories.setDescription('This object indicates the total number of categories, which are deleted from the list.')
cGgsnSATotalDeletedSyncObjects = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalDeletedSyncObjects.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalDeletedSyncObjects.setDescription('This object indicates the total number of synchronization objects which are deleted.')
cGgsnSATotalQuotaPushAcks = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalQuotaPushAcks.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalQuotaPushAcks.setDescription('This object indicates the total number of acknowledgements received for the quota push event.')
cGgsnSATotalServiceReAuthMsgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalServiceReAuthMsgs.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalServiceReAuthMsgs.setDescription('This object indicates the total number of service re-authorization messages sent by CSG.')
cGgsnSATotalQuotaReturns = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalQuotaReturns.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalQuotaReturns.setDescription('This object indicates the total number of quota return message sent by CSG.')
cGgsnSATotalTerminateCategories = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalTerminateCategories.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalTerminateCategories.setDescription('This object indicates the total number of categories which are terminated. The category is terminated, if: -PDP session is terminated -Category Termination event in CCA message -QHT expires for a category.')
cGgsnSATotalUnknownCategories = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalUnknownCategories.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalUnknownCategories.setDescription('This object indicates the total number of unknown categories.')
cGgsnSATotalRatingChanges = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalRatingChanges.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalRatingChanges.setDescription('This object indicates the total number of rating condition change events. Rating condition change is typically an update request from SGSN involving SGSN change or QOS change.')
cGgsnSATotalPostpaidConversions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalPostpaidConversions.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalPostpaidConversions.setDescription('This object indicates the total number of conversions, from prepaid to postpaid.')
cGgsnSATotalDummyQuotas = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalDummyQuotas.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalDummyQuotas.setDescription('This object indicates the total amount of dummy quota pushed to CSG.')
cGgsnSATotalPrepaidUsers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalPrepaidUsers.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalPrepaidUsers.setDescription('This object indicates the total number of prepaid users.')
cGgsnSATotalPostpaidUsers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSATotalPostpaidUsers.setStatus('current')
if mibBuilder.loadTexts: cGgsnSATotalPostpaidUsers.setDescription('This object indicates the total number of postpaid users.')
cGgsnSARejDccaFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSARejDccaFailures.setStatus('current')
if mibBuilder.loadTexts: cGgsnSARejDccaFailures.setDescription('This object indicates the total number of PDP sessions, which are rejected due to DCCA failure.')
cGgsnSARejCsgFailures = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 3, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSARejCsgFailures.setStatus('current')
if mibBuilder.loadTexts: cGgsnSARejCsgFailures.setDescription('This object indicates the total number of rejected PDPs due to CSG failure.')
cGgsnSACsgNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 2, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGgsnSACsgNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgNotifEnabled.setDescription("Indicates whether cGgsnSACsgR100StateUpNotif notification and cGgsnSACsgR100StateDownNotif notification will be sent when the path state between CSG and QS goes UP/DOWN. - 'true', it will enable the device to send a notification. - 'false', it will prevent the device from sending out a notification.")
cGgsnSADccaNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 2, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGgsnSADccaNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaNotifEnabled.setDescription("Indicates whether cGgsnSADccaEndUsrServDeniedNotif, cGgsnSADccaCreditLimReachedNotif, cGgsnSADccaUserUnknownNotif, cGgsnSADccaRatingFailed, cGgsnSADccaAuthRejectedNotif notifications will be sent when a notification is generated by the device. - 'true', it will enable the device to send a notification. - 'false', it will prevent the device from sending out a notification.")
cGgsnSAServiceAware = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGgsnSAServiceAware.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAServiceAware.setDescription("This object specifies the service-aware feature on GGSN. If this object is set to 'true', all service-aware features (e.g. quota-server, csg, dcca) can be seen. If this object is set to 'false', it will disable the GGSN service from the GPRS service.")
cGgsnSADccaProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 2), )
if mibBuilder.loadTexts: cGgsnSADccaProfileTable.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaProfileTable.setDescription('The table represents a list of DCCA profiles. The GPRS-DCCA-Client component is responsible for interfacing with the DCCA server. A DCCA profile defines the DCCA server group. The DCCA client specific configurations will be put in a DCCA profile table, and it is indexed by profile name. The agent can create/destroy/modify a profile as a result of actions from the local console. The table objects can be modified, when the RowStatus (cGgsnSADccaRowStatus) is active.')
cGgsnSADccaProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaProfileName"))
if mibBuilder.loadTexts: cGgsnSADccaProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaProfileEntry.setDescription('An entry contains DCCA profile, which interact with DCCA server for quota negotiation and usage reporting. The entries in this table are stored in NVRAM when the agent writes the configuration to memory before restart.')
cGgsnSADccaProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 2, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: cGgsnSADccaProfileName.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaProfileName.setDescription('This object specifies the DCCA profile name. The GGSN contacts the DCCA server, for online billing, if the DCCA profile name is set in charging profile.')
cGgsnSADccaAuthorization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSADccaAuthorization.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaAuthorization.setDescription("This object must be set to a valid value upon transition of the entry to the 'active' state. The object defines the authorization method list (given by AAA authorization) referencing the DIAMETER server group, which are defined in an AAA server group.")
cGgsnSADccaCcfh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("terminate", 1), ("retryTerminate", 2), ("continue", 3))).clone('terminate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSADccaCcfh.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaCcfh.setDescription("This object specifies the CCFH attribute. The CCFH value governs the behavior of credit control client in fault situations. When the response is not received from the DCCA server within the configured retransmit timer, handling is done based on the CCFH attribute for the session. - 'continue': The CCFH will allow the PDP context to continue and allow the traffic. - 'terminate': It will terminate the PDP context and the CC session. - 'retryTerminate': The DCCA client retries an alternate server and if 'fail-to send' condition occur, then PDP context will be terminated.")
cGgsnSADccaDestinationRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 2, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSADccaDestinationRealm.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaDestinationRealm.setDescription('Destination realm is to be sent within the CCR (Initial) request. This is the mandatory configuration while defining the row and can be changed when the row is still active. For subsequent CCRs, the original-realm AVP received in the last CCA is used as destination-realm.')
cGgsnSADccaSessionFailover = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSADccaSessionFailover.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaSessionFailover.setDescription("This object specifies whether session failover is supported or not. If this object is set to 'false', credit control session will never be moved to an alternate server. If this object is set to 'true', DCCA client will move the session to an alternate server.")
cGgsnSADccaTxTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 2, 1, 6), Unsigned32().clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSADccaTxTimeout.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaTxTimeout.setDescription('This object specifies the retransmit timer value for DCCA client. The retransmit timeout is to be used for CCR messages. The DCCA specification defines a retransmit timer (Tx) that is used by the client to supervise the communication with the server, because for pre-paid services, the end user expects the response from the network in a reasonable time, thus the DCCA client shall react faster than the underlying base protocol. When the retransmit timer elapses, the DCCA client will take an action on the PDP context depending on the current value of CCFH for that session. The retransmit timer is started with each CCR (initial) and CCR (update). Since multiple CCR (update) messages are possible, if one CCR (update) message is pending, a subsequent CCR (update) message restart the timer. When answer to all pending CCR (update) messages are received, the retransmit timer is stopped.')
cGgsnSADccaTriggerSgsnChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSADccaTriggerSgsnChange.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaTriggerSgsnChange.setDescription("This object takes effect only for generic DCCA implementation. For customer specific implementation it does not have any effect. - 'true': Then change in the SGSN is considered as trigger for quota re-authorization. - 'false': Change in SGSN will not cause quota re-authorization. Modifying this object will not take any effect on existing PDPs using this DCCA profile. Only new PDP contexts using the DCCA profile will be based on the new change.")
cGgsnSADccaTriggerQosChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSADccaTriggerQosChange.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaTriggerQosChange.setDescription("This object takes effect only for generic DCCA implementation. For customer specific implementation it does not have any effect. - 'true': QOS change is considered as trigger for quota re-authorization. - 'false': quota re-authorization will not take place when when there is change in QOS. Change in the trigger effect new PDP contexts.")
cGgsnSADccaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSADccaRowStatus.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaRowStatus.setDescription('This object is used to create a new row or delete an existing row in this table.')
cGgsnSADccaTriggerPlmnChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSADccaTriggerPlmnChange.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaTriggerPlmnChange.setDescription("The value of this object takes effect only when DCCA client is configured as standard specfic. - 'true': PLMN ID change is considered as trigger for quota re-authorization. - 'false': PLMN ID change is not considered as trigger for quota re-authorization. This trigger will have effect on new PDPs, which are created after enabling the trigger.")
cGgsnSADccaTriggerRatChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 2, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSADccaTriggerRatChange.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaTriggerRatChange.setDescription("The value of this object takes effect only when DCCA client is configured as standard specfic. - 'true': RAT change is considered as trigger for quota re-authorization. - 'false': RAT change is not considered as trigger for quota re-authorization. This trigger will have effect on new PDPs, which are created after enabling the trigger.")
cGgsnSADccaTriggerUserLocChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSADccaTriggerUserLocChange.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaTriggerUserLocChange.setDescription("The value of this object takes effect only when the object cGgsnSADcccClci is set to the value 'a3Gpp(1)' which indicates that the DCCA client is configured as standard specific. The value of the object cGgsnSADccaTriggerUserLocChange indicates whether a change in the geographical location of the MS is considered as a trigger for quota re-authorization. - 'true': User location change is considered as trigger for quota re-authorization. - 'false': User location change is not considered as trigger for quota re-authorization. This trigger will have effect on new PDPs, which are created after enabling the trigger.")
cGgsnSADccaClci = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("a3Gpp", 1), ("clci", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cGgsnSADccaClci.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaClci.setDescription("This object is introduced to make GGSN's DCCA implementation a customer specific. The objective of this configuration is for GPRS client to add some vodafone specific attributes to the request message. - 'none': DCCA implementation not specified. - 'clci': DCCA implementation is customer specific. - 'a3Gpp': DCCA implementation is standard specific.")
cGgsnSACsgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 4), )
if mibBuilder.loadTexts: cGgsnSACsgTable.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgTable.setDescription('The table contains the list of CSG groups indexed by the CSG group name. A pair of CSG instances works with the QS together, to achieve CSG redundancy. But only one of them is active, performing the packet forwarding functionality at any time. User information is replicated from the active to the standby. The pair appears as one virtual CSG to the rest of the network by using a virtual IP address on both of them. This virtual address is the address to be used for the CSG.')
cGgsnSACsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 4, 1), ).setIndexNames((0, "CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgGroupName"))
if mibBuilder.loadTexts: cGgsnSACsgEntry.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgEntry.setDescription('An entry represents the CSG group and the virtual address to reach the CSG.')
cggsnSACsgStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 1, 1, 16, 1), )
cGgsnSACsgEntry.registerAugmentions(("CISCO-GGSN-SERVICE-AWARE-MIB", "cggsnSACsgStatisticsEntry"))
cggsnSACsgStatisticsEntry.setIndexNames(*cGgsnSACsgEntry.getIndexNames())
if mibBuilder.loadTexts: cggsnSACsgStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: cggsnSACsgStatisticsEntry.setDescription('Entry for each CSG path statistics table.')
cGgsnSACsgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 4, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: cGgsnSACsgGroupName.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgGroupName.setDescription('This object identifies the CSG group. The name of CSG group is used by the QS to establish the path between CSG-QS.')
cGgsnSACsgRealAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 4, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSACsgRealAddressType.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgRealAddressType.setDescription('This object specifies the type of Internet address specified by cGgsnSACsgRealAddress1 and cGgsnSACsgRealAddress2.')
cGgsnSACsgRealAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 4, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSACsgRealAddress1.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgRealAddress1.setDescription('This object specifies the address of real CSG. The addrress associated with each CSG is called real address and the address associated with the CSG group is called virtual address. This is not an essential configuration for CSG and QS inter-working. But it will serve as an additional security check against the source of messages.')
cGgsnSACsgRealAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 4, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSACsgRealAddress2.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgRealAddress2.setDescription('This object configures the real address of the second real CSG. The type of the address for two real CSGs are specified by cGgsnSACsgRealAddressType.')
cGgsnSACsgVirtualAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 4, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSACsgVirtualAddressType.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgVirtualAddressType.setDescription('This object specifies the type of Internet address specified by cGgsnSACsgVirtualAddress.')
cGgsnSACsgVirtualAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 4, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSACsgVirtualAddress.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgVirtualAddress.setDescription('This object specifies the virtual address of the CSG group. QS will send all its requests to this address. The path between QS and CSG will come up after configuring this address. Hence it is very important configuration object for proper QS and CSG inter-working. The type of the address is specified by the object cGgsnSAVirtualAddressType.')
cGgsnSACsgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 4, 1, 7), InetPortNumber().clone(3386)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSACsgPort.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgPort.setDescription('This object is used to configure the port to which the CSG listens for QS traffic.')
cGgsnSACsgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 4, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSACsgRowStatus.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgRowStatus.setDescription('This object is used to create new row into the table or deletes the existing one.')
cGgsnSACsgAaaAcctGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 4, 1, 9), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSACsgAaaAcctGroup.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgAaaAcctGroup.setDescription("This object specifies the name of the AAA server group used for accounting. If there is no AAA accounting server group present then the value of this object will be an empty string. This object can be modified when the value of cGgsnSACsgRowStatus object is 'active'.")
cGgsnSACsgPathState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 4, 1, 10), CGgsnCsgPathState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgPathState.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgPathState.setDescription('This object indicates the CSG path state.')
cGgsnSACsgNumPdps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cGgsnSACsgNumPdps.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgNumPdps.setDescription('This object indicates the number of PDPs created for the entry.')
cGgsnSAQuotaServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 5), )
if mibBuilder.loadTexts: cGgsnSAQuotaServerTable.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQuotaServerTable.setDescription('This table contains the list of quota servers indexed by QS name. GGSN acts as a QS. The responsibilities of QS are: - Handle the incoming path management messages from the CSG. - Handle the incoming quota management messages from the CSG, and feed events and usage reports to the DCCA category instance FSM. - Provide interface to other modules to send quota management messages (requests and responses)to the CSG. An entry is created when user configures the quota server name.')
cGgsnSAQuotaServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 5, 1), ).setIndexNames((0, "CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQuotaServerName"))
if mibBuilder.loadTexts: cGgsnSAQuotaServerEntry.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQuotaServerEntry.setDescription('An entry represents the quota server name and interface details.')
cGgsnSAQuotaServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 5, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: cGgsnSAQuotaServerName.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQuotaServerName.setDescription('This object is used to identify the QS.')
cGgsnSAQuotaServerInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 5, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSAQuotaServerInterface.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQuotaServerInterface.setDescription("This object specifies the logical/virtual interface to be used by the QS with the interface name. The address on this interface become the QS's address. To communicate with the CSG, the QS use its own address which is different than the GGSN's own address on its virtual-template interface. This is very essential configuration for proper QS and CSG inter-working.")
cGgsnSAQuotaServerCsgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 5, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSAQuotaServerCsgGroup.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQuotaServerCsgGroup.setDescription('This object associates the QS configuration set to the CSG group, given by group-name. This object must be set for such association before both set of configurations can work together.')
cGgsnSAQuotaServerEchoInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 65535), )).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSAQuotaServerEchoInterval.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQuotaServerEchoInterval.setDescription('This object specifies the echo interval for QS path management. When the value is set to zero(0),it will disable the GGSN-QS originated echoes.')
cGgsnSAQuotaServerN3Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSAQuotaServerN3Requests.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQuotaServerN3Requests.setDescription('This object configures the number of retries for message transmission to CSG.')
cGgsnSAQuotaServerT3Response = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSAQuotaServerT3Response.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQuotaServerT3Response.setDescription('This object specifies the waiting time for a message in response from the CSG in seconds.')
cGgsnSAQuotaServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 5, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSAQuotaServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQuotaServerRowStatus.setDescription('This object creates new row into the table or deletes the existing one.')
cGgsnSAQuotaServerSvcMsgEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 3, 5, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cGgsnSAQuotaServerSvcMsgEnabled.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAQuotaServerSvcMsgEnabled.setDescription('This object enables the quota server interface to be capable of exchange service control messages.')
cGgsnSANotifCsgRealAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 4, 1), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cGgsnSANotifCsgRealAddressType.setStatus('current')
if mibBuilder.loadTexts: cGgsnSANotifCsgRealAddressType.setDescription('This object indicates the type of IP address, for real address of the CSG group.')
cGgsnSANotifCsgRealAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 4, 2), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cGgsnSANotifCsgRealAddress.setStatus('current')
if mibBuilder.loadTexts: cGgsnSANotifCsgRealAddress.setDescription('This object indicates the real IP address of the CSG group.')
cGgsnSANotifCsgVirtualAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 4, 3), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cGgsnSANotifCsgVirtualAddrType.setStatus('current')
if mibBuilder.loadTexts: cGgsnSANotifCsgVirtualAddrType.setDescription('This object indicates the type of IP address, for virtual address of the CSG group.')
cGgsnSANotifCsgVirtualAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 4, 4), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cGgsnSANotifCsgVirtualAddress.setStatus('current')
if mibBuilder.loadTexts: cGgsnSANotifCsgVirtualAddress.setDescription('This object indicates the virtual IP address of the CSG group.')
cGgsnSANotifCsgPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 4, 5), InetPortNumber().clone(3386)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cGgsnSANotifCsgPort.setStatus('current')
if mibBuilder.loadTexts: cGgsnSANotifCsgPort.setDescription('This object indicates the port number of the CSG group.')
cGgsnSANotifCsgName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 497, 1, 4, 6), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cGgsnSANotifCsgName.setStatus('current')
if mibBuilder.loadTexts: cGgsnSANotifCsgName.setDescription('This object indicates the CSG group name in cGgsnSACsgEntry.')
cGgsnSAMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 497, 2))
cGgsnSANotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 497, 2, 0))
cGgsnSACsgStateUpNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 497, 2, 0, 1)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgRealAddressType"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgRealAddress"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgVirtualAddrType"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgVirtualAddress"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgPort"))
if mibBuilder.loadTexts: cGgsnSACsgStateUpNotif.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgStateUpNotif.setDescription('This notification is generated when CSG state goes up. This notification is deprecated and replaced by cGgsnSACsgR100StateUpNotif.')
cGgsnSACsgStateDownNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 497, 2, 0, 2)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgRealAddressType"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgRealAddress"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgVirtualAddrType"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgVirtualAddress"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgPort"))
if mibBuilder.loadTexts: cGgsnSACsgStateDownNotif.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSACsgStateDownNotif.setDescription('This notification is generated when CSG state goes down. This notification is deprecated and replaced by cGgsnSACsgR100StateDownNotif.')
cGgsnSADccaEndUsrServDeniedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 497, 2, 0, 3)).setObjects(("CISCO-GGSN-MIB", "cGgsnNotifPdpImsi"), ("CISCO-GGSN-MIB", "cGgsnNotifPdpMsisdn"))
if mibBuilder.loadTexts: cGgsnSADccaEndUsrServDeniedNotif.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaEndUsrServDeniedNotif.setDescription('This notification is generated when the credit- control server denies the service request due to service restrictions. On reception of this notif on category level, the CLCI-C shall discard all future user traffic for that category on that PDP context and not attempt to ask for more quotas during the same PDP context.')
cGgsnSADccaCreditLimReachedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 497, 2, 0, 4)).setObjects(("CISCO-GGSN-MIB", "cGgsnNotifPdpImsi"), ("CISCO-GGSN-MIB", "cGgsnNotifPdpMsisdn"))
if mibBuilder.loadTexts: cGgsnSADccaCreditLimReachedNotif.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaCreditLimReachedNotif.setDescription("This notification is generated when the credit limit is reached. The credit-control server denies the service request since the end user's account could not cover the requested service. Client shall behave exactly as with cGgsnSADccaEndUsrServDeniedNotif.")
cGgsnSADccaUserUnknownNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 497, 2, 0, 5)).setObjects(("CISCO-GGSN-MIB", "cGgsnNotifPdpImsi"), ("CISCO-GGSN-MIB", "cGgsnNotifPdpMsisdn"))
if mibBuilder.loadTexts: cGgsnSADccaUserUnknownNotif.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaUserUnknownNotif.setDescription('This notification is generated when the specified end user is unknown in the credit-control server. Such permanent failures cause the client to enter the Idle state. The client shall reject or terminate the PDP context depending on whether the result code was received in a CCA (Initial) or CCA (Update).')
cGgsnSADccaRatingFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 497, 2, 0, 6)).setObjects(("CISCO-GGSN-MIB", "cGgsnNotifPdpImsi"), ("CISCO-GGSN-MIB", "cGgsnNotifPdpMsisdn"))
if mibBuilder.loadTexts: cGgsnSADccaRatingFailed.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaRatingFailed.setDescription('This notification is generated when the credit-control server cannot rate the service request, due to insufficient rating input, incorrect AVP combination or due to an AVP or an AVP value that is not recognized or supported in the rating.')
cGgsnSADccaAuthRejectedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 497, 2, 0, 7)).setObjects(("CISCO-GGSN-MIB", "cGgsnNotifPdpImsi"), ("CISCO-GGSN-MIB", "cGgsnNotifPdpMsisdn"))
if mibBuilder.loadTexts: cGgsnSADccaAuthRejectedNotif.setStatus('current')
if mibBuilder.loadTexts: cGgsnSADccaAuthRejectedNotif.setDescription('This notification is generated when credit-control server failed in authorization of end user. The PDP context is deleted and category is blacklisted.')
cGgsnSACsgR100StateUpNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 497, 2, 0, 8)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgName"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgRealAddressType"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgRealAddress"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgVirtualAddrType"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgVirtualAddress"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgPort"))
if mibBuilder.loadTexts: cGgsnSACsgR100StateUpNotif.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgR100StateUpNotif.setDescription('This notification is generated when CSG state goes up. The objects in the varbind list represents - cGgsnSANotifCsgName: CSG group Name. cGgsnSANotifCsgRealAddressType: Type of CSG group real IP address. cGgsnSANotifCsgRealAddress: Real IP address of the CSG group. cGgsnSANotifCsgVirtualAddrType: Type of CSG group virtual IP address. cGgsnSANotifCsgVirtualAddress: Virtual IP address of the CSG group. cGgsnSANotifCsgPort: CSG group port number.')
cGgsnSACsgR100StateDownNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 497, 2, 0, 9)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgName"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgRealAddressType"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgRealAddress"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgVirtualAddrType"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgVirtualAddress"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgPort"))
if mibBuilder.loadTexts: cGgsnSACsgR100StateDownNotif.setStatus('current')
if mibBuilder.loadTexts: cGgsnSACsgR100StateDownNotif.setDescription('This notification is generated when CSG state goes down. The objects in the varbind list represents - cGgsnSANotifCsgName: CSG group Name. cGgsnSANotifCsgRealAddressType: Type of CSG group real IP address. cGgsnSANotifCsgRealAddress: Real IP address of the CSG group. cGgsnSANotifCsgVirtualAddrType: Type of CSG group virtual IP address. cGgsnSANotifCsgVirtualAddress: Virtual IP address of the CSG group. cGgsnSANotifCsgPort: CSG group port number.')
cGgsnSAMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 497, 3))
cGgsnSAMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 1))
cGgsnSAMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 2))
cGgsnSAMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 1, 1)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAConfigurationsGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAStatisticsGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifInfoGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifMgmtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSAMIBCompliance = cGgsnSAMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSAMIBCompliance.setDescription('The compliance statements for entities which implement the CISCO GGSN SERVICE AWARE MIB. This is deprecated by cGgsnSAMIBComplianceRev1.')
cGgsnSAMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 1, 2)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAConfigurationsGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAExtConfigurationsGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAStatisticsGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifInfoGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifMgmtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSAMIBComplianceRev1 = cGgsnSAMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSAMIBComplianceRev1.setDescription('The compliance statements for entities which implement the CISCO GGSN SERVICE AWARE MIB. This is deprecated by cGgsnSAMIBComplianceRev2.')
cGgsnSAMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 1, 3)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAConfigurationsGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAExtConfigurationsGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAExtConfigurationsGroupSup1"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAStatisticsGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifInfoGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifMgmtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSAMIBComplianceRev2 = cGgsnSAMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSAMIBComplianceRev2.setDescription('The compliance statements for entities which implement the CISCO GGSN SERVICE AWARE MIB. This is deprecated by cGgsnSAMIBComplianceRev3.')
cGgsnSAMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 1, 4)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAConfigurationsGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAExtConfigurationsGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAExtConfigurationsGroupSup1"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAStatisticsGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifInfoGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifMgmtGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAConfigurationsGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSAMIBComplianceRev3 = cGgsnSAMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSAMIBComplianceRev3.setDescription('The compliance statements for entities which implement the CISCO GGSN SERVICE AWARE MIB. This is deprecated and superceded by cGgsnSAMIBComplianceRev4.')
cGgsnSAMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 1, 5)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAConfigurationsGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAExtConfigurationsGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAExtConfigurationsGroupSup1"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifInfoGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifMgmtGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAConfigurationsGroupSup1"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAConfigurationsGroupR100"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAStatisticsGroupR100"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifInfoGroupR100"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifGroupR100"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSAMIBComplianceRev4 = cGgsnSAMIBComplianceRev4.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAMIBComplianceRev4.setDescription('The compliance statements for entities which implement the CISCO GGSN SERVICE AWARE MIB.')
cGgsnSAConfigurationsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 2, 1)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaRowStatus"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaAuthorization"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaCcfh"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaDestinationRealm"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaSessionFailover"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaTxTimeout"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaTriggerSgsnChange"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaTriggerQosChange"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaClci"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAServiceAware"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgRowStatus"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgRealAddressType"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgRealAddress1"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgRealAddress2"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgVirtualAddressType"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgVirtualAddress"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgPort"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQuotaServerRowStatus"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQuotaServerInterface"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQuotaServerCsgGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQuotaServerEchoInterval"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQuotaServerN3Requests"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQuotaServerT3Response"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSAConfigurationsGroup = cGgsnSAConfigurationsGroup.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAConfigurationsGroup.setDescription('A collection of objects representing configurations on GGSN.')
cGgsnSAStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 2, 2)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgOutboundMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgOutboundOctets"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgInboundMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgInboundOctets"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgServiceAuthReqs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgServiceAuthResps"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgServiceReAuthReqs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgQuotaReturns"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgQuotaReturnReqs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgQuotaPushResps"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgServiceStopMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgServiceStopReqs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgQuotaPushMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgQuotaPushRsps"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgGtpAcks"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsRcvdRequests"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsRcvdResponses"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsSentRequests"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsSentResponses"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsRcvdPathRequests"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsRcvdPathResponses"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsSentPathRequests"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsSentPathResponses"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsRcvdNegativeResponses"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsRequestsUnreplied"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsSeqnumFailures"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsDroppedMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsUnknownMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsUnknownResponses"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsIEErrorMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsBadSrcAddressMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsVersionUnSupportedMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsMandTlvMissingMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsMandTlvIncorrectMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsInvalidMsgFormats"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsNoResponseToMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANumServiceAwareApns"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalGgsnEvents"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalCsgEvents"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalDccaEvents"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalCreatedCategories"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalCreatedSyncObjs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACategoryFsmRtnErrors"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalServiceAuthMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalServiceStopMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalQuotaGranted"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalBlackListCategories"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalRAREvents"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalDeletePdps"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAFinalConvertToPostpaidPdps"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalGgsnFailures"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalCsgFailures"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalDccaFailures"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalDeletedCategories"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalDeletedSyncObjects"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalQuotaPushAcks"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalServiceReAuthMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalQuotaReturns"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalTerminateCategories"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalUnknownCategories"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalRatingChanges"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalPostpaidConversions"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalDummyQuotas"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalPrepaidUsers"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalPostpaidUsers"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSARejDccaFailures"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSARejCsgFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSAStatisticsGroup = cGgsnSAStatisticsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSAStatisticsGroup.setDescription('A collection of objects related with statistics.')
cGgsnSANotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 2, 3)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStateUpNotif"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStateDownNotif"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaEndUsrServDeniedNotif"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaCreditLimReachedNotif"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaUserUnknownNotif"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaRatingFailed"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaAuthRejectedNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSANotifGroup = cGgsnSANotifGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cGgsnSANotifGroup.setDescription('A collection of Notifications.')
cGgsnSANotifInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 2, 4)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgRealAddressType"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgRealAddress"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgVirtualAddrType"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgVirtualAddress"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSANotifInfoGroup = cGgsnSANotifInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cGgsnSANotifInfoGroup.setDescription('A collection of objects representing the Notif info on GGSN.')
cGgsnSANotifMgmtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 2, 5)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgNotifEnabled"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSANotifMgmtGroup = cGgsnSANotifMgmtGroup.setStatus('current')
if mibBuilder.loadTexts: cGgsnSANotifMgmtGroup.setDescription('A collection of objects related with notification management on GGSN.')
cGgsnSAExtConfigurationsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 2, 6)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaTriggerPlmnChange"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaTriggerRatChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSAExtConfigurationsGroup = cGgsnSAExtConfigurationsGroup.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAExtConfigurationsGroup.setDescription('A collection of objects representing configurations on GGSN.')
cGgsnSAExtConfigurationsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 2, 7)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaTriggerUserLocChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSAExtConfigurationsGroupSup1 = cGgsnSAExtConfigurationsGroupSup1.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAExtConfigurationsGroupSup1.setDescription('A collection of objects representing configurations on GGSN.')
cGgsnSAConfigurationsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 2, 8)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQuotaServerSvcMsgEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSAConfigurationsGroupSup1 = cGgsnSAConfigurationsGroupSup1.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAConfigurationsGroupSup1.setDescription('This object group representing the supplementary group of cGgsnSAConfigurationsGroup.')
cGgsnSAConfigurationsGroupR100 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 2, 9)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgAaaAcctGroup"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgPathState"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgNumPdps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSAConfigurationsGroupR100 = cGgsnSAConfigurationsGroupR100.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAConfigurationsGroupR100.setDescription('A collection of Service Aware configuration objects added for GGSN R10.0.')
cGgsnSAStatisticsGroupR100 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 2, 10)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsRcvdRequests"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsRcvdResponses"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsSentRequests"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsSentResponses"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsRcvdPathRequests"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsRcvdPathResponses"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsSentPathRequests"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsSentPathResponses"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsRcvdNegativeResponses"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsRequestsUnreplied"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsSeqnumFailures"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsDroppedMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsUnknownMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsUnknownResponses"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsIEErrorMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsBadSrcAddressMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsVersionUnSupportedMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsMandTlvMissingMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsMandTlvIncorrectMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsInvalidMsgFormats"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAQsNoResponseToMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANumServiceAwareApns"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalGgsnEvents"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalCsgEvents"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalDccaEvents"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalCreatedCategories"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalCreatedSyncObjs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACategoryFsmRtnErrors"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalServiceAuthMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalServiceStopMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalQuotaGranted"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalBlackListCategories"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalRAREvents"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalDeletePdps"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSAFinalConvertToPostpaidPdps"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalGgsnFailures"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalCsgFailures"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalDccaFailures"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalDeletedCategories"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalDeletedSyncObjects"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalQuotaPushAcks"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalServiceReAuthMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalQuotaReturns"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalTerminateCategories"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalUnknownCategories"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalRatingChanges"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalPostpaidConversions"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalDummyQuotas"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalPrepaidUsers"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSATotalPostpaidUsers"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSARejDccaFailures"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSARejCsgFailures"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStatsOutboundMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStatsOutboundOctets"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStatsInboundMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStatsInboundOctets"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStatsServiceAuthReqs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStatsServiceAuthResps"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStatsServiceReAuthReqs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStatsQuotaReturns"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStatsQuotaReturnReqs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStatsQuotaReturnAccept"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStatsServiceStopMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStatsServiceStopReqs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStatsQuotaPushMsgs"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStatsQuotaPushRsps"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgStatsGtpAcks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSAStatisticsGroupR100 = cGgsnSAStatisticsGroupR100.setStatus('current')
if mibBuilder.loadTexts: cGgsnSAStatisticsGroupR100.setDescription('A collection of objects related with statistics for GGSN R10.0.')
cGgsnSANotifInfoGroupR100 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 2, 11)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSANotifCsgName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSANotifInfoGroupR100 = cGgsnSANotifInfoGroupR100.setStatus('current')
if mibBuilder.loadTexts: cGgsnSANotifInfoGroupR100.setDescription('A collection of objects representing the Notif info added for GGSN R10.0.')
cGgsnSANotifGroupR100 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 497, 3, 2, 12)).setObjects(("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaEndUsrServDeniedNotif"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaCreditLimReachedNotif"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaUserUnknownNotif"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaRatingFailed"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSADccaAuthRejectedNotif"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgR100StateUpNotif"), ("CISCO-GGSN-SERVICE-AWARE-MIB", "cGgsnSACsgR100StateDownNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cGgsnSANotifGroupR100 = cGgsnSANotifGroupR100.setStatus('current')
if mibBuilder.loadTexts: cGgsnSANotifGroupR100.setDescription('A collection of Notifications included in GGSN R10.0 release.')
mibBuilder.exportSymbols("CISCO-GGSN-SERVICE-AWARE-MIB", cGgsnSACsgNumPdps=cGgsnSACsgNumPdps, cGgsnSANotifications=cGgsnSANotifications, cGgsnSANotifCsgPort=cGgsnSANotifCsgPort, cGgsnSAQsVersionUnSupportedMsgs=cGgsnSAQsVersionUnSupportedMsgs, cGgsnSAQsInvalidMsgFormats=cGgsnSAQsInvalidMsgFormats, cGgsnSATotalQuotaGranted=cGgsnSATotalQuotaGranted, cGgsnSACsgInboundMsgs=cGgsnSACsgInboundMsgs, cGgsnSATotalDeletedCategories=cGgsnSATotalDeletedCategories, cGgsnSAQuotaServerRowStatus=cGgsnSAQuotaServerRowStatus, cGgsnSANotifCsgVirtualAddrType=cGgsnSANotifCsgVirtualAddrType, PYSNMP_MODULE_ID=cGgsnSAMIB, cGgsnSACsgStatsQuotaReturnReqs=cGgsnSACsgStatsQuotaReturnReqs, cGgsnSAQuotaServerName=cGgsnSAQuotaServerName, cGgsnSAServiceAwareStatistics=cGgsnSAServiceAwareStatistics, cGgsnSAStatisticsGroupR100=cGgsnSAStatisticsGroupR100, cGgsnSANotifCsgVirtualAddress=cGgsnSANotifCsgVirtualAddress, cGgsnSACsgStatsInboundOctets=cGgsnSACsgStatsInboundOctets, cGgsnSATotalServiceReAuthMsgs=cGgsnSATotalServiceReAuthMsgs, cGgsnSAQsSeqnumFailures=cGgsnSAQsSeqnumFailures, cGgsnSAFinalConvertToPostpaidPdps=cGgsnSAFinalConvertToPostpaidPdps, cGgsnSAQsRcvdRequests=cGgsnSAQsRcvdRequests, cGgsnSAMIBGroups=cGgsnSAMIBGroups, cGgsnSACsgRealAddress1=cGgsnSACsgRealAddress1, cGgsnSAStatistics=cGgsnSAStatistics, cGgsnSATotalBlackListCategories=cGgsnSATotalBlackListCategories, cGgsnSACsgStatsQuotaPushRsps=cGgsnSACsgStatsQuotaPushRsps, cGgsnSACsgStatsServiceStopReqs=cGgsnSACsgStatsServiceStopReqs, cGgsnSACsgStatsQuotaPushMsgs=cGgsnSACsgStatsQuotaPushMsgs, cGgsnSACategoryFsmRtnErrors=cGgsnSACategoryFsmRtnErrors, cGgsnSADccaTxTimeout=cGgsnSADccaTxTimeout, cGgsnSATotalServiceStopMsgs=cGgsnSATotalServiceStopMsgs, cGgsnSATotalUnknownCategories=cGgsnSATotalUnknownCategories, cGgsnSANotifCsgRealAddress=cGgsnSANotifCsgRealAddress, cGgsnSATotalPrepaidUsers=cGgsnSATotalPrepaidUsers, cGgsnSACsgStatsInboundMsgs=cGgsnSACsgStatsInboundMsgs, cGgsnSACsgVirtualAddress=cGgsnSACsgVirtualAddress, cGgsnSAQsUnknownMsgs=cGgsnSAQsUnknownMsgs, cGgsnSAQsRcvdResponses=cGgsnSAQsRcvdResponses, cGgsnSATotalCreatedCategories=cGgsnSATotalCreatedCategories, cGgsnSACsgOutboundMsgs=cGgsnSACsgOutboundMsgs, cGgsnSADccaAuthorization=cGgsnSADccaAuthorization, cGgsnSADccaEndUsrServDeniedNotif=cGgsnSADccaEndUsrServDeniedNotif, cGgsnSAStatisticsGroup=cGgsnSAStatisticsGroup, cGgsnSARejDccaFailures=cGgsnSARejDccaFailures, cGgsnSADccaProfileTable=cGgsnSADccaProfileTable, cGgsnSADccaSessionFailover=cGgsnSADccaSessionFailover, cGgsnSACsgPathState=cGgsnSACsgPathState, cGgsnSACsgStatsServiceAuthReqs=cGgsnSACsgStatsServiceAuthReqs, cGgsnSADccaRowStatus=cGgsnSADccaRowStatus, cGgsnSATotalDccaFailures=cGgsnSATotalDccaFailures, cGgsnSACsgServiceAuthReqs=cGgsnSACsgServiceAuthReqs, cGgsnSACsgVirtualAddressType=cGgsnSACsgVirtualAddressType, cGgsnSACsgGtpAcks=cGgsnSACsgGtpAcks, cGgsnSADccaDestinationRealm=cGgsnSADccaDestinationRealm, cGgsnSAQsSentRequests=cGgsnSAQsSentRequests, cGgsnSACsgStatsQuotaReturns=cGgsnSACsgStatsQuotaReturns, cGgsnSAConfigurations=cGgsnSAConfigurations, cGgsnSANotifMgmt=cGgsnSANotifMgmt, cGgsnSACsgQuotaPushMsgs=cGgsnSACsgQuotaPushMsgs, cGgsnSACsgOutboundOctets=cGgsnSACsgOutboundOctets, cGgsnSAQuotaServerSvcMsgEnabled=cGgsnSAQuotaServerSvcMsgEnabled, cGgsnSAQuotaServerTable=cGgsnSAQuotaServerTable, cGgsnSATotalPostpaidConversions=cGgsnSATotalPostpaidConversions, cGgsnSAExtConfigurationsGroupSup1=cGgsnSAExtConfigurationsGroupSup1, cGgsnSACsgQuotaPushRsps=cGgsnSACsgQuotaPushRsps, cGgsnSAQsSentPathRequests=cGgsnSAQsSentPathRequests, cGgsnSAQuotaServerInterface=cGgsnSAQuotaServerInterface, cGgsnSACsgStateUpNotif=cGgsnSACsgStateUpNotif, cGgsnSACsgServiceAuthResps=cGgsnSACsgServiceAuthResps, cGgsnSAMIBComplianceRev4=cGgsnSAMIBComplianceRev4, cGgsnSATotalDeletedSyncObjects=cGgsnSATotalDeletedSyncObjects, cGgsnSACsgStatsServiceAuthResps=cGgsnSACsgStatsServiceAuthResps, cGgsnSAConfigurationsGroup=cGgsnSAConfigurationsGroup, cGgsnSANotifMgmtGroup=cGgsnSANotifMgmtGroup, cGgsnSAMIBNotificationPrefix=cGgsnSAMIBNotificationPrefix, cGgsnSATotalRAREvents=cGgsnSATotalRAREvents, cGgsnSACsgQuotaReturns=cGgsnSACsgQuotaReturns, cGgsnSAServiceAware=cGgsnSAServiceAware, cGgsnSAMIBCompliances=cGgsnSAMIBCompliances, cGgsnSAQuotaServerT3Response=cGgsnSAQuotaServerT3Response, cGgsnSATotalQuotaPushAcks=cGgsnSATotalQuotaPushAcks, cGgsnSADccaClci=cGgsnSADccaClci, cGgsnSACsgStatsServiceReAuthReqs=cGgsnSACsgStatsServiceReAuthReqs, cGgsnSADccaAuthRejectedNotif=cGgsnSADccaAuthRejectedNotif, cGgsnSANotifInfoGroupR100=cGgsnSANotifInfoGroupR100, cGgsnSACsgRealAddress2=cGgsnSACsgRealAddress2, cGgsnSATotalCsgFailures=cGgsnSATotalCsgFailures, cGgsnSADccaTriggerPlmnChange=cGgsnSADccaTriggerPlmnChange, cGgsnSAMIBConformance=cGgsnSAMIBConformance, cGgsnSAQsMandTlvMissingMsgs=cGgsnSAQsMandTlvMissingMsgs, cGgsnSAConfigurationsGroupR100=cGgsnSAConfigurationsGroupR100, cGgsnSAQsRequestsUnreplied=cGgsnSAQsRequestsUnreplied, cGgsnSADccaProfileEntry=cGgsnSADccaProfileEntry, cGgsnSACsgStatistics=cGgsnSACsgStatistics, cGgsnSANotifInfoGroup=cGgsnSANotifInfoGroup, cGgsnSATotalCreatedSyncObjs=cGgsnSATotalCreatedSyncObjs, cggsnSACsgStatisticsEntry=cggsnSACsgStatisticsEntry, cGgsnSAQsUnknownResponses=cGgsnSAQsUnknownResponses, cGgsnSAQsBadSrcAddressMsgs=cGgsnSAQsBadSrcAddressMsgs, cGgsnSADccaCreditLimReachedNotif=cGgsnSADccaCreditLimReachedNotif, cGgsnSACsgInboundOctets=cGgsnSACsgInboundOctets, cGgsnSATotalDccaEvents=cGgsnSATotalDccaEvents, cGgsnSARejCsgFailures=cGgsnSARejCsgFailures, cGgsnSADccaNotifEnabled=cGgsnSADccaNotifEnabled, cggsnSACsgStatisticsTable=cggsnSACsgStatisticsTable, cGgsnSATotalPostpaidUsers=cGgsnSATotalPostpaidUsers, cGgsnSAQuotaServerN3Requests=cGgsnSAQuotaServerN3Requests, cGgsnSANotifInfo=cGgsnSANotifInfo, cGgsnSATotalServiceAuthMsgs=cGgsnSATotalServiceAuthMsgs, cGgsnSACsgEntry=cGgsnSACsgEntry, cGgsnSATotalQuotaReturns=cGgsnSATotalQuotaReturns, cGgsnSADccaTriggerRatChange=cGgsnSADccaTriggerRatChange, cGgsnSANotifGroupR100=cGgsnSANotifGroupR100, cGgsnSAQsIEErrorMsgs=cGgsnSAQsIEErrorMsgs, cGgsnSACsgQuotaReturnReqs=cGgsnSACsgQuotaReturnReqs, cGgsnSACsgStateDownNotif=cGgsnSACsgStateDownNotif, cGgsnSADccaUserUnknownNotif=cGgsnSADccaUserUnknownNotif, cGgsnSATotalDummyQuotas=cGgsnSATotalDummyQuotas, cGgsnSACsgServiceStopReqs=cGgsnSACsgServiceStopReqs, cGgsnSAMIBComplianceRev1=cGgsnSAMIBComplianceRev1, cGgsnSACsgServiceReAuthReqs=cGgsnSACsgServiceReAuthReqs, CGgsnCsgPathState=CGgsnCsgPathState, cGgsnSAQuotaServerEntry=cGgsnSAQuotaServerEntry, cGgsnSACsgPort=cGgsnSACsgPort, cGgsnSAQsRcvdNegativeResponses=cGgsnSAQsRcvdNegativeResponses, cGgsnSAQsMandTlvIncorrectMsgs=cGgsnSAQsMandTlvIncorrectMsgs, cGgsnSADccaTriggerSgsnChange=cGgsnSADccaTriggerSgsnChange, cGgsnSADccaRatingFailed=cGgsnSADccaRatingFailed, cGgsnSADccaTriggerUserLocChange=cGgsnSADccaTriggerUserLocChange, cGgsnSACsgStatsOutboundOctets=cGgsnSACsgStatsOutboundOctets, cGgsnSATotalTerminateCategories=cGgsnSATotalTerminateCategories, cGgsnSACsgAaaAcctGroup=cGgsnSACsgAaaAcctGroup, cGgsnSATotalGgsnFailures=cGgsnSATotalGgsnFailures, cGgsnSAConfigurationsGroupSup1=cGgsnSAConfigurationsGroupSup1, cGgsnSACsgStatsGtpAcks=cGgsnSACsgStatsGtpAcks, cGgsnSATotalDeletePdps=cGgsnSATotalDeletePdps, cGgsnSACsgR100StateDownNotif=cGgsnSACsgR100StateDownNotif, cGgsnSACsgR100StateUpNotif=cGgsnSACsgR100StateUpNotif, cGgsnSADccaCcfh=cGgsnSADccaCcfh, cGgsnSACsgStatsQuotaReturnAccept=cGgsnSACsgStatsQuotaReturnAccept, cGgsnSACsgRowStatus=cGgsnSACsgRowStatus, cGgsnSACsgQuotaPushResps=cGgsnSACsgQuotaPushResps, cGgsnSACsgRealAddressType=cGgsnSACsgRealAddressType, cGgsnSAQsRcvdPathResponses=cGgsnSAQsRcvdPathResponses, cGgsnSAQuotaServerEchoInterval=cGgsnSAQuotaServerEchoInterval, cGgsnSACsgServiceStopMsgs=cGgsnSACsgServiceStopMsgs, cGgsnSANotifCsgName=cGgsnSANotifCsgName, cGgsnSATotalGgsnEvents=cGgsnSATotalGgsnEvents, cGgsnSAMIBCompliance=cGgsnSAMIBCompliance, cGgsnSACsgStatsOutboundMsgs=cGgsnSACsgStatsOutboundMsgs, cGgsnSAQsSentResponses=cGgsnSAQsSentResponses, cGgsnSATotalRatingChanges=cGgsnSATotalRatingChanges, cGgsnSACsgGroupName=cGgsnSACsgGroupName, cGgsnSACsgNotifEnabled=cGgsnSACsgNotifEnabled, cGgsnSAMIBComplianceRev3=cGgsnSAMIBComplianceRev3, cGgsnSATotalCsgEvents=cGgsnSATotalCsgEvents, cGgsnSACsgTable=cGgsnSACsgTable, cGgsnSAMIB=cGgsnSAMIB, cGgsnSANotifCsgRealAddressType=cGgsnSANotifCsgRealAddressType, cGgsnSAQuotaServerCsgGroup=cGgsnSAQuotaServerCsgGroup, cGgsnSACsgStatsServiceStopMsgs=cGgsnSACsgStatsServiceStopMsgs, cGgsnSAQsSentPathResponses=cGgsnSAQsSentPathResponses, cGgsnSAMIBObjects=cGgsnSAMIBObjects, cGgsnSADccaTriggerQosChange=cGgsnSADccaTriggerQosChange, cGgsnSAQsDroppedMsgs=cGgsnSAQsDroppedMsgs, cGgsnSANumServiceAwareApns=cGgsnSANumServiceAwareApns, cGgsnSAQsNoResponseToMsgs=cGgsnSAQsNoResponseToMsgs, cGgsnSADccaProfileName=cGgsnSADccaProfileName, cGgsnSAMIBComplianceRev2=cGgsnSAMIBComplianceRev2, cGgsnSAQuotaServerStatistics=cGgsnSAQuotaServerStatistics, cGgsnSAExtConfigurationsGroup=cGgsnSAExtConfigurationsGroup, cGgsnSAQsRcvdPathRequests=cGgsnSAQsRcvdPathRequests, cGgsnSANotifGroup=cGgsnSANotifGroup)
