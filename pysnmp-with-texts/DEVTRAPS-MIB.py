#
# PySNMP MIB module DEVTRAPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DEVTRAPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:42:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
device, = mibBuilder.importSymbols("ANIROOT-MIB", "device")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibIdentifier, Unsigned32, TimeTicks, Bits, ModuleIdentity, iso, IpAddress, NotificationType, Integer32, Counter32, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "Unsigned32", "TimeTicks", "Bits", "ModuleIdentity", "iso", "IpAddress", "NotificationType", "Integer32", "Counter32", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
aniDevTrap = ModuleIdentity((1, 3, 6, 1, 4, 1, 4325, 2, 10))
if mibBuilder.loadTexts: aniDevTrap.setLastUpdated('0105091130Z')
if mibBuilder.loadTexts: aniDevTrap.setOrganization('Aperto Networks')
if mibBuilder.loadTexts: aniDevTrap.setContactInfo(' Postal: Aperto Networks Inc 1637 S Main Street Milpitas, California 95035 Tel: +1 408 719 9977 ')
if mibBuilder.loadTexts: aniDevTrap.setDescription('The trap group. ')
aniDevTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4325, 2, 10, 1))
aniDevTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0))
aniDevControlTrapGeneration = MibScalar((1, 3, 6, 1, 4, 1, 4325, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniDevControlTrapGeneration.setStatus('current')
if mibBuilder.loadTexts: aniDevControlTrapGeneration.setDescription('Enable or disable SNMP Trap Generation.')
aniDevTrapSuSyncAcquired = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 1))
if mibBuilder.loadTexts: aniDevTrapSuSyncAcquired.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapSuSyncAcquired.setDescription('This trap is generated by LKAD when SYNC is acquired. ')
aniDevTrapBsuSuUp = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 2))
if mibBuilder.loadTexts: aniDevTrapBsuSuUp.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapBsuSuUp.setDescription('This trap is sent out by BSU to report that SU is operational. ')
aniDevTrapBsuSuDown = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 3))
if mibBuilder.loadTexts: aniDevTrapBsuSuDown.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapBsuSuDown.setDescription('This trap is sent out by BSU to report that SU is down. ')
aniDevTrapSuBsuUp = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 4))
if mibBuilder.loadTexts: aniDevTrapSuBsuUp.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapSuBsuUp.setDescription('This trap is sent out by SU to report that BSU is operational. ')
aniDevTrapSuBsuDown = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 5))
if mibBuilder.loadTexts: aniDevTrapSuBsuDown.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapSuBsuDown.setDescription('This trap is sent out by SU to report that BSU is down. ')
aniDevTrapDhcpFailure = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 6))
if mibBuilder.loadTexts: aniDevTrapDhcpFailure.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapDhcpFailure.setDescription('This trap is generated when DHCP fails. ')
aniDevTrapConfigDownloadFailure = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 7))
if mibBuilder.loadTexts: aniDevTrapConfigDownloadFailure.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapConfigDownloadFailure.setDescription('This trap is generated when Config file download fails. ')
aniDevTrapRamTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 8))
if mibBuilder.loadTexts: aniDevTrapRamTooLow.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapRamTooLow.setDescription('This trap is sent out to indicate that the RAM is too low. ')
aniDevTrapRamNormal = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 9))
if mibBuilder.loadTexts: aniDevTrapRamNormal.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapRamNormal.setDescription('This trap is sent out to indicate that the RAM available is normal. This trap is sent out to indicate that the aniDevTrapRamTooLow alarm is cleared. ')
aniDevTrapModemPllNotLocked = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 10))
if mibBuilder.loadTexts: aniDevTrapModemPllNotLocked.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapModemPllNotLocked.setDescription('The Modem PLL (Phase Locked Loop) not locked trap. ')
aniDevTrapModemPllNotLockedClear = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 11))
if mibBuilder.loadTexts: aniDevTrapModemPllNotLockedClear.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapModemPllNotLockedClear.setDescription('The Modem PLL (Phase Locked Loop) not locked trap cleared. This trap is sent out to indicate that the aniDevTrapModemPllNotLocked alarm is cleared. ')
aniDevTrapRadioVoltReg = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 12))
if mibBuilder.loadTexts: aniDevTrapRadioVoltReg.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapRadioVoltReg.setDescription('This trap indicates a Radio Voltage Failure. It is sent out by both BSU and SU. ')
aniDevTrapRadioVoltRegClear = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 13))
if mibBuilder.loadTexts: aniDevTrapRadioVoltRegClear.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapRadioVoltRegClear.setDescription('This trap is sent out when aniDevTrapRadioVoltReg (Radio Voltage Failure) alarm is cleared. It is sent out by both BSU and SU. ')
aniDevTrapRadioSynthNotLocked = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 14))
if mibBuilder.loadTexts: aniDevTrapRadioSynthNotLocked.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapRadioSynthNotLocked.setDescription('This trap is generated when the Radio Synthesizer is not locked. It is sent out by BSU and SU. ')
aniDevTrapRadioSynthNotLockedClear = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 15))
if mibBuilder.loadTexts: aniDevTrapRadioSynthNotLockedClear.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapRadioSynthNotLockedClear.setDescription('This trap is sent out by BSU and SU to indicate that aniDevTrapRadioSynthNotLocked is cleared. ')
aniDevTrapBsuFanStatus = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 16))
if mibBuilder.loadTexts: aniDevTrapBsuFanStatus.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapBsuFanStatus.setDescription('This trap is sent out when a fan on BSU is not operational. ')
aniDevTrapBsuFanStatusClear = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 17))
if mibBuilder.loadTexts: aniDevTrapBsuFanStatusClear.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapBsuFanStatusClear.setDescription('This trap is sent to indicate that aniDevTrapBsuFanStatus is cleared, that is, the fan on BSU is operational again. ')
aniDevTrapBsuDc12vStatus = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 18))
if mibBuilder.loadTexts: aniDevTrapBsuDc12vStatus.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapBsuDc12vStatus.setDescription('This trap is generated when a 12V DC power failure occurs on the BSU. ')
aniDevTrapBsuDc12vStatusClear = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 19))
if mibBuilder.loadTexts: aniDevTrapBsuDc12vStatusClear.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapBsuDc12vStatusClear.setDescription('This trap indicates that aniDevTrapBsuDc12vStatus alarm on the BSU has been cleared. ')
aniDevTrapMssPllNotLocked = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 20))
if mibBuilder.loadTexts: aniDevTrapMssPllNotLocked.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapMssPllNotLocked.setDescription('The MSS PLL (Phase Locked Loop) not locked trap which is sent out by BSU. ')
aniDevTrapMssPllNotLockedClear = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 21))
if mibBuilder.loadTexts: aniDevTrapMssPllNotLockedClear.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapMssPllNotLockedClear.setDescription('This trap indicates that aniDevTrapMssPllNotLocked alarm on the BSU has been cleared. ')
aniDevTrapBsuTempTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 22))
if mibBuilder.loadTexts: aniDevTrapBsuTempTooLow.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapBsuTempTooLow.setDescription('This indicates that the temperature on the BSU is below the operating limits. A temperature sensor on the BSU checks the operating temperature of the system board. ')
aniDevTrapBsuTempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 23))
if mibBuilder.loadTexts: aniDevTrapBsuTempTooHigh.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapBsuTempTooHigh.setDescription('This indicates that the temperature on the BSU is above the operating limits. A temperature sensor on the BSU checks the operating temperature of the system board. ')
aniDevTrapBsuTempNormal = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 24))
if mibBuilder.loadTexts: aniDevTrapBsuTempNormal.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapBsuTempNormal.setDescription('This indicates that the temperature on the BSU is within the operating limits. It shows that either the aniDevTrapBsuTempTooLow or aniDevTrapBsuTempTooHigh alarm on the BSU has been cleared. ')
aniDevTrapFlashSpaceTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 25))
if mibBuilder.loadTexts: aniDevTrapFlashSpaceTooLow.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapFlashSpaceTooLow.setDescription('This trap is sent out when the disk space on file system is too low. It can be sent out by either BSU or SU. ')
aniDevTrapFlashSpaceNormal = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 26))
if mibBuilder.loadTexts: aniDevTrapFlashSpaceNormal.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapFlashSpaceNormal.setDescription('This trap is sent out when the disk space on file system is again normal. It can be sent out by either BSU or SU to clear the aniDevTrapFlashSpaceTooLow alarm. ')
aniDevTrapNvramCorrupted = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 27))
if mibBuilder.loadTexts: aniDevTrapNvramCorrupted.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapNvramCorrupted.setDescription('This trap is sent out when the NVRAM is corrupted. 64 kB of NVRAM is allocated from the first block of flash on both BSU and SU. A checksum is maintained whenever some value if stored in it. ')
aniDevTrapNvramCorruptionClear = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 28))
if mibBuilder.loadTexts: aniDevTrapNvramCorruptionClear.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapNvramCorruptionClear.setDescription('This trap indicates that aniDevTrapNvramCorrupted alarm has been cleared. ')
aniDevTrapFileSysCorrupted = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 29))
if mibBuilder.loadTexts: aniDevTrapFileSysCorrupted.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapFileSysCorrupted.setDescription('This trap indicates that the file system has been corrupted. It can be sent out by either BSU or SU. ')
aniDevTrapFileSysCorruptionClear = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 30))
if mibBuilder.loadTexts: aniDevTrapFileSysCorruptionClear.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapFileSysCorruptionClear.setDescription('This trap indicates that aniDevTrapFileSysCorrupted alarm has been cleared. It can be sent out by either BSU or SU. ')
aniDevTrapSmtpConnectFailure = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 31))
if mibBuilder.loadTexts: aniDevTrapSmtpConnectFailure.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapSmtpConnectFailure.setDescription('This trap is sent out when the connection to the SMTP server fails. It can be sent out by either BSU or SU. ')
aniDevTrapSmtpDisabled = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 32))
if mibBuilder.loadTexts: aniDevTrapSmtpDisabled.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapSmtpDisabled.setDescription('This trap is sent out when SMTP is disabled on the system (either BSU or SU). ')
aniDevTrapSwWatchdogReset = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 33))
if mibBuilder.loadTexts: aniDevTrapSwWatchdogReset.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapSwWatchdogReset.setDescription('This trap is sent out when SU is reset by the Software Watchdog. The Software Watchdog feature detects low memory and task suspended cases, sends out the trap and reboots the device. ')
aniDevTrapNatFailure = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 34))
if mibBuilder.loadTexts: aniDevTrapNatFailure.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapNatFailure.setDescription('This trap is sent out when NAT failure occurs. It is sent out by SU. ')
aniDevTrapCurrentImageCorrupted = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 35))
if mibBuilder.loadTexts: aniDevTrapCurrentImageCorrupted.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapCurrentImageCorrupted.setDescription('This trap is sent out to indicate that the current image is corrupted. It can be sent out by both BSU or SU. ')
aniDevTrapBsuSuFailedReg = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 36))
if mibBuilder.loadTexts: aniDevTrapBsuSuFailedReg.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapBsuSuFailedReg.setDescription('This trap is sent out when the BSU-SU registration fails. ')
aniDevTrapDefaultConfigFileNotFound = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 37))
if mibBuilder.loadTexts: aniDevTrapDefaultConfigFileNotFound.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapDefaultConfigFileNotFound.setDescription('This trap is sent out when the default configuration file is not found. It can be sent out by both BSU or SU. ')
aniDevTrapCurrentBsuState = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 38))
if mibBuilder.loadTexts: aniDevTrapCurrentBsuState.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapCurrentBsuState.setDescription('This trap shows the current BSU State. ')
aniDevTrapCurrentSuState = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 39))
if mibBuilder.loadTexts: aniDevTrapCurrentSuState.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapCurrentSuState.setDescription('This trap shows the current SU State. ')
aniDevTrapMemBufferTooLow = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 40))
if mibBuilder.loadTexts: aniDevTrapMemBufferTooLow.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapMemBufferTooLow.setDescription('This trap is sent out when the memory buffer is too low. It can be sent out by either BSU or SU. ')
aniDevTrapMemBufferNormal = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 41))
if mibBuilder.loadTexts: aniDevTrapMemBufferNormal.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapMemBufferNormal.setDescription('This trap is sent out when the memory buffer is again normal. It can be sent out by either BSU or SU to clear the aniDevMemBufferTooLow alarm. ')
aniDevTrapConfigFileVersionCheckFailure = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 42))
if mibBuilder.loadTexts: aniDevTrapConfigFileVersionCheckFailure.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapConfigFileVersionCheckFailure.setDescription('This trap is sent out when there is a problem in the version of the config file. It is sent out when either the version information is missing or if there is a mismatch in the version. ')
aniDevTrapDefaultFileVersionCheckFailure = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 43))
if mibBuilder.loadTexts: aniDevTrapDefaultFileVersionCheckFailure.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapDefaultFileVersionCheckFailure.setDescription('This trap is sent out when there is a problem in the version of the default file. It is sent out when either the version information is missing or if there is a mismatch in the version. ')
aniDevTrapConfigFileUploadFailure = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 44))
if mibBuilder.loadTexts: aniDevTrapConfigFileUploadFailure.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapConfigFileUploadFailure.setDescription('This trap is sent out when the upload of the config file fails. ')
aniDevTrapConfigFileUploadChecksumFailure = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 45))
if mibBuilder.loadTexts: aniDevTrapConfigFileUploadChecksumFailure.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapConfigFileUploadChecksumFailure.setDescription('This trap is sent out when there is a checksum error on the config file after the upload. ')
aniDevTrapRunningBaselineImage = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 46))
if mibBuilder.loadTexts: aniDevTrapRunningBaselineImage.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapRunningBaselineImage.setDescription('This trap is sent out when a baseline image is running. ')
aniDevTrapPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 48))
if mibBuilder.loadTexts: aniDevTrapPowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapPowerSupplyFailure.setDescription('This trap is sent out by the BSU when there is a power supply failure. ')
aniDevTrapPowerSupplyNormal = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 49))
if mibBuilder.loadTexts: aniDevTrapPowerSupplyNormal.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapPowerSupplyNormal.setDescription('This trap is sent out by the BSU when the power supply is normal again. It is sent out to indicate that the aniDevTrapPowerSupplyFailure alarm is cleared. ')
aniDevTrapRealtimeClockFailure = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 50))
if mibBuilder.loadTexts: aniDevTrapRealtimeClockFailure.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapRealtimeClockFailure.setDescription('This trap is sent out by the BSU when there is a real time clock failure. ')
aniDevTrapRealtimeClockNormal = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 51))
if mibBuilder.loadTexts: aniDevTrapRealtimeClockNormal.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapRealtimeClockNormal.setDescription('This trap is sent out by the BSU when the real time clock is normal again. It is sent out to indicate that the aniDevTrapRealtimeClockFailure alarm is cleared. ')
aniDevTrapModelNumFailure = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 53))
if mibBuilder.loadTexts: aniDevTrapModelNumFailure.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapModelNumFailure.setDescription('This trap is sent out when there is an error related to the model number. ')
aniDevTrapConfigParseFailure = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 55))
if mibBuilder.loadTexts: aniDevTrapConfigParseFailure.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapConfigParseFailure.setDescription('This trap is sent out when there is an error in the parsing of the configuration file. ')
aniDevUpdateInventory = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 56))
if mibBuilder.loadTexts: aniDevUpdateInventory.setStatus('current')
if mibBuilder.loadTexts: aniDevUpdateInventory.setDescription('This trap is sent out to notify configuration change in SU customer name. ')
aniDevTrapPppFailure = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 57))
if mibBuilder.loadTexts: aniDevTrapPppFailure.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapPppFailure.setDescription('This trap is sent out whenever PPP fails to establish a session. ')
aniDevTrapPppStatus = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 58))
if mibBuilder.loadTexts: aniDevTrapPppStatus.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapPppStatus.setDescription('This trap is sent whenever a PPP link goes up or down. ')
aniDevTrapFrequencyChange = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 59))
if mibBuilder.loadTexts: aniDevTrapFrequencyChange.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapFrequencyChange.setDescription('This trap is sent out whenever the channel frequency is changed on the BSU and SU while they are in the operational state. ')
aniDevTrapPPPoeSessionUp = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 62))
if mibBuilder.loadTexts: aniDevTrapPPPoeSessionUp.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapPPPoeSessionUp.setDescription('This trap is sent out whenever the when a PPPoE Session comes up. ')
aniDevTrapPPPoeOfferError = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 63))
if mibBuilder.loadTexts: aniDevTrapPPPoeOfferError.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapPPPoeOfferError.setDescription('This trap is sent out whenever the when no valid PPPoE Active Discovery Offer (PADO) is received in response to a PPPoE Active Discovery Initiation (PADI) packet or if no valid PPPoE Active Discovery Session-confirmation (PADS) is received in response to a PPPoE Active Discovery Request (PADR) packet. ')
aniDevTrapPPPoeSessionTerminate = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 64))
if mibBuilder.loadTexts: aniDevTrapPPPoeSessionTerminate.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapPPPoeSessionTerminate.setDescription('This trap is sent out when a PPPoE Session is terminated. ')
aniDevTrapEtherAutoNegotiate = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 65))
if mibBuilder.loadTexts: aniDevTrapEtherAutoNegotiate.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapEtherAutoNegotiate.setDescription('This trap is sent out when device go back to auto-negotiate mode. ')
aniDevTrapRadioInitError = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 66))
if mibBuilder.loadTexts: aniDevTrapRadioInitError.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapRadioInitError.setDescription("This trap is sent out when the radio can't be initialized. Under an error condition this event will be generated prior to SU becoming operational. ")
aniDevTrapMaxPowerError = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 67))
if mibBuilder.loadTexts: aniDevTrapMaxPowerError.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapMaxPowerError.setDescription("This trap is sent out when when the radio board can't reach maximum configured power. This can be caused by a combination of faulty (or very long) coaxial cable connecting IDU and ODU and/or extremely hot weather or just bad calibration data on the radio board. ")
aniDevTrapMaxPowerErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 68))
if mibBuilder.loadTexts: aniDevTrapMaxPowerErrorClear.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapMaxPowerErrorClear.setDescription('This trap is sent out when the event aniDevTrapMaxPowerError has been cleared. ')
aniDevTrapAgcTableNotCalibrated = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 69))
if mibBuilder.loadTexts: aniDevTrapAgcTableNotCalibrated.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapAgcTableNotCalibrated.setDescription("This trap is sent out when the AGC Table is not calibrated. SODU platform relies on accurate calibration of the receive gain throughout the entire receive chain. If the table is not correctly calibrated or gets corrupted in the field, the SODU will have to fall back on default receive power adjustment algorithm, which may be far from optimal. This problem doesn't stop an SODU from getting operational but the downstream link quality can suffer. ")
aniDevTrapFreqTableInvalidEntry = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 70))
if mibBuilder.loadTexts: aniDevTrapFreqTableInvalidEntry.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapFreqTableInvalidEntry.setDescription('This trap is sent out whenever the frequency table contains an invalid entry. ')
aniDevTrapHtmlUnzippedError = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 71))
if mibBuilder.loadTexts: aniDevTrapHtmlUnzippedError.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapHtmlUnzippedError.setDescription('This trap is sent out when html compressed zip files are either missing or corrupted. ')
aniDevTrapBootLineBackupUpdated = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 72))
if mibBuilder.loadTexts: aniDevTrapBootLineBackupUpdated.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapBootLineBackupUpdated.setDescription('This trap is sent out whenever the backup bootline parameters are updated to bring them in sync with the actual boot parameters. ')
aniDevTrapBootLineRestoredFromBackup = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 73))
if mibBuilder.loadTexts: aniDevTrapBootLineRestoredFromBackup.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapBootLineRestoredFromBackup.setDescription('This trap is sent out when the main bootline parameters are corrupted and the system has to fall back on backup boot parameters. ')
aniDevTrapNvramBackupUpdated = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 74))
if mibBuilder.loadTexts: aniDevTrapNvramBackupUpdated.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapNvramBackupUpdated.setDescription('This trap is sent out whenever the backup copy of NVRAM configuration parameters is updated to bring them in sync with the actual NVRAM configuration. ')
aniDevTrapNvramRestoredFromBackup = NotificationType((1, 3, 6, 1, 4, 1, 4325, 2, 10, 0, 75))
if mibBuilder.loadTexts: aniDevTrapNvramRestoredFromBackup.setStatus('current')
if mibBuilder.loadTexts: aniDevTrapNvramRestoredFromBackup.setDescription('This trap is sent out when the main NVRAM configuration data is corrupted and the system has to fall back on backup NVRAM configuration. ')
mibBuilder.exportSymbols("DEVTRAPS-MIB", aniDevTrapMaxPowerErrorClear=aniDevTrapMaxPowerErrorClear, aniDevTrapPppFailure=aniDevTrapPppFailure, aniDevTrapRadioInitError=aniDevTrapRadioInitError, aniDevTrapBsuDc12vStatus=aniDevTrapBsuDc12vStatus, PYSNMP_MODULE_ID=aniDevTrap, aniDevTrapSwWatchdogReset=aniDevTrapSwWatchdogReset, aniDevTrapPowerSupplyNormal=aniDevTrapPowerSupplyNormal, aniDevTrapBootLineRestoredFromBackup=aniDevTrapBootLineRestoredFromBackup, aniDevTrapConfigDownloadFailure=aniDevTrapConfigDownloadFailure, aniDevTrapSuBsuUp=aniDevTrapSuBsuUp, aniDevTrapPPPoeSessionTerminate=aniDevTrapPPPoeSessionTerminate, aniDevTrapSmtpDisabled=aniDevTrapSmtpDisabled, aniDevTrapCurrentBsuState=aniDevTrapCurrentBsuState, aniDevControlTrapGeneration=aniDevControlTrapGeneration, aniDevTrapMssPllNotLocked=aniDevTrapMssPllNotLocked, aniDevTrapMemBufferTooLow=aniDevTrapMemBufferTooLow, aniDevTrapMemBufferNormal=aniDevTrapMemBufferNormal, aniDevTrapRadioSynthNotLockedClear=aniDevTrapRadioSynthNotLockedClear, aniDevTrapHtmlUnzippedError=aniDevTrapHtmlUnzippedError, aniDevTrapDefaultConfigFileNotFound=aniDevTrapDefaultConfigFileNotFound, aniDevUpdateInventory=aniDevUpdateInventory, aniDevTrapRamTooLow=aniDevTrapRamTooLow, aniDevTraps=aniDevTraps, aniDevTrapPPPoeOfferError=aniDevTrapPPPoeOfferError, aniDevTrapBsuSuUp=aniDevTrapBsuSuUp, aniDevTrapBsuSuFailedReg=aniDevTrapBsuSuFailedReg, aniDevTrapBsuFanStatus=aniDevTrapBsuFanStatus, aniDevTrapBsuTempTooHigh=aniDevTrapBsuTempTooHigh, aniDevTrapBsuTempNormal=aniDevTrapBsuTempNormal, aniDevTrapRadioVoltRegClear=aniDevTrapRadioVoltRegClear, aniDevTrapRadioSynthNotLocked=aniDevTrapRadioSynthNotLocked, aniDevTrapFileSysCorrupted=aniDevTrapFileSysCorrupted, aniDevTrapSmtpConnectFailure=aniDevTrapSmtpConnectFailure, aniDevTrapNatFailure=aniDevTrapNatFailure, aniDevTrapModemPllNotLockedClear=aniDevTrapModemPllNotLockedClear, aniDevTrapPppStatus=aniDevTrapPppStatus, aniDevTrapFrequencyChange=aniDevTrapFrequencyChange, aniDevTrapFileSysCorruptionClear=aniDevTrapFileSysCorruptionClear, aniDevTrapEtherAutoNegotiate=aniDevTrapEtherAutoNegotiate, aniDevTrapControl=aniDevTrapControl, aniDevTrapBootLineBackupUpdated=aniDevTrapBootLineBackupUpdated, aniDevTrapNvramBackupUpdated=aniDevTrapNvramBackupUpdated, aniDevTrapConfigParseFailure=aniDevTrapConfigParseFailure, aniDevTrapPowerSupplyFailure=aniDevTrapPowerSupplyFailure, aniDevTrapModemPllNotLocked=aniDevTrapModemPllNotLocked, aniDevTrapSuBsuDown=aniDevTrapSuBsuDown, aniDevTrapRealtimeClockFailure=aniDevTrapRealtimeClockFailure, aniDevTrapModelNumFailure=aniDevTrapModelNumFailure, aniDevTrapRadioVoltReg=aniDevTrapRadioVoltReg, aniDevTrapFlashSpaceNormal=aniDevTrapFlashSpaceNormal, aniDevTrapBsuTempTooLow=aniDevTrapBsuTempTooLow, aniDevTrapBsuSuDown=aniDevTrapBsuSuDown, aniDevTrapConfigFileUploadChecksumFailure=aniDevTrapConfigFileUploadChecksumFailure, aniDevTrapRunningBaselineImage=aniDevTrapRunningBaselineImage, aniDevTrapFreqTableInvalidEntry=aniDevTrapFreqTableInvalidEntry, aniDevTrapNvramRestoredFromBackup=aniDevTrapNvramRestoredFromBackup, aniDevTrapCurrentImageCorrupted=aniDevTrapCurrentImageCorrupted, aniDevTrapMssPllNotLockedClear=aniDevTrapMssPllNotLockedClear, aniDevTrapAgcTableNotCalibrated=aniDevTrapAgcTableNotCalibrated, aniDevTrapCurrentSuState=aniDevTrapCurrentSuState, aniDevTrapBsuDc12vStatusClear=aniDevTrapBsuDc12vStatusClear, aniDevTrapFlashSpaceTooLow=aniDevTrapFlashSpaceTooLow, aniDevTrapNvramCorruptionClear=aniDevTrapNvramCorruptionClear, aniDevTrapDefaultFileVersionCheckFailure=aniDevTrapDefaultFileVersionCheckFailure, aniDevTrapMaxPowerError=aniDevTrapMaxPowerError, aniDevTrapRealtimeClockNormal=aniDevTrapRealtimeClockNormal, aniDevTrapSuSyncAcquired=aniDevTrapSuSyncAcquired, aniDevTrapBsuFanStatusClear=aniDevTrapBsuFanStatusClear, aniDevTrapNvramCorrupted=aniDevTrapNvramCorrupted, aniDevTrap=aniDevTrap, aniDevTrapConfigFileVersionCheckFailure=aniDevTrapConfigFileVersionCheckFailure, aniDevTrapPPPoeSessionUp=aniDevTrapPPPoeSessionUp, aniDevTrapConfigFileUploadFailure=aniDevTrapConfigFileUploadFailure, aniDevTrapDhcpFailure=aniDevTrapDhcpFailure, aniDevTrapRamNormal=aniDevTrapRamNormal)
