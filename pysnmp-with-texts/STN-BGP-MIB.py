#
# PySNMP MIB module STN-BGP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-BGP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:11:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
bgp4PathAttrEntry, = mibBuilder.importSymbols("BGP4-MIB", "bgp4PathAttrEntry")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, NotificationType, Unsigned32, Integer32, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Gauge32, TimeTicks, Counter64, ObjectIdentity, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "Unsigned32", "Integer32", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Gauge32", "TimeTicks", "Counter64", "ObjectIdentity", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
stnNotification, = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnNotification")
stnIpRouting, = mibBuilder.importSymbols("STN-IPROUTING-MIB", "stnIpRouting")
stnBgp = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5))
if mibBuilder.loadTexts: stnBgp.setLastUpdated('0004060000Z')
if mibBuilder.loadTexts: stnBgp.setOrganization('Spring Tide Networks')
if mibBuilder.loadTexts: stnBgp.setContactInfo(' Spring Tide Networks, Inc. Customer Service Postal: 3 Clock Tower Place Suite 200 Maynard, MA 01754 USA Tel: +1 978 298 2000 Email: custserv@springtidenet.com ')
if mibBuilder.loadTexts: stnBgp.setDescription('This MIB module describes managed objects of Spring Tide Networks BGP-4.')
stnBgpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1))
stnBgpRouteAttrTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 1), )
if mibBuilder.loadTexts: stnBgpRouteAttrTable.setStatus('current')
if mibBuilder.loadTexts: stnBgpRouteAttrTable.setDescription('A table of BGP route attribute sets.')
stnBgpRouteAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 1, 1), ).setIndexNames((0, "STN-BGP-MIB", "stnBgpRouteAttrId"))
if mibBuilder.loadTexts: stnBgpRouteAttrEntry.setStatus('current')
if mibBuilder.loadTexts: stnBgpRouteAttrEntry.setDescription('Information about a particular set of BGP attributes.')
stnBgpRouteAttrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgpRouteAttrId.setStatus('current')
if mibBuilder.loadTexts: stnBgpRouteAttrId.setDescription('A unique integer identifing this row in the table.')
stnBgpRouteAttrASPathSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgpRouteAttrASPathSegment.setStatus('current')
if mibBuilder.loadTexts: stnBgpRouteAttrASPathSegment.setDescription('The sequence of AS path segments. Each AS path segment is represented by a triple <type, length, value>. The type is a 1-octet field which has two possible values: 1 AS_SET: unordered set of ASs a route in the UPDATE message has traversed 2 AS_SEQUENCE: ordered set of ASs a route in the UPDATE message has traversed. The length is a 1-octet field containing the number of ASs in the value field. The value field contains one or more AS numbers, each AS is represented in the octet string as a pair of octets according to the following algorithm: first-byte-of-pair = ASNumber / 256; second-byte-of-pair = ASNumber & 255;')
stnBgpRouteAttrRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgpRouteAttrRefCount.setStatus('current')
if mibBuilder.loadTexts: stnBgpRouteAttrRefCount.setDescription('A number of BGP routes using this attibute set.')
stnBgpRouteAttrLocPref = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgpRouteAttrLocPref.setStatus('current')
if mibBuilder.loadTexts: stnBgpRouteAttrLocPref.setDescription("The originating BGP4 speaker's degree of preference for an advertised route. A value of -1 indicates the absence of this attribute.")
stnBgpRouteAttrMultiExitDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgpRouteAttrMultiExitDisc.setStatus('current')
if mibBuilder.loadTexts: stnBgpRouteAttrMultiExitDisc.setDescription('This metric is used to discriminate between multiple exit points to an adjacent autonomous system. A value of -1 indicates the absence of this attribute.')
stnBgpRouteAttrOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgpRouteAttrOrigin.setStatus('current')
if mibBuilder.loadTexts: stnBgpRouteAttrOrigin.setDescription('The ultimate origin of the path information.')
stnBgpRouteAttrNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgpRouteAttrNextHop.setStatus('current')
if mibBuilder.loadTexts: stnBgpRouteAttrNextHop.setDescription('The address of the border router that should be used for the destination network.')
stnBgpRouteAttrAtomicAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lessSpecificRouteNotSelected", 1), ("lessSpecificRouteSelected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgpRouteAttrAtomicAggregate.setStatus('current')
if mibBuilder.loadTexts: stnBgpRouteAttrAtomicAggregate.setDescription('Whether or not the local system has selected a less specific route without selecting a more specific route.')
stnBgpRouteAttrAggregatorAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgpRouteAttrAggregatorAS.setStatus('current')
if mibBuilder.loadTexts: stnBgpRouteAttrAggregatorAS.setDescription('The AS number of the last BGP4 speaker that performed route aggregation. A value of zero (0) indicates the absence of this attribute.')
stnBgpRouteAttrAggregatorAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgpRouteAttrAggregatorAddr.setStatus('current')
if mibBuilder.loadTexts: stnBgpRouteAttrAggregatorAddr.setDescription('The IP address of the last BGP4 speaker that performed route aggregation. A value of 0.0.0.0 indicates the absence of this attribute.')
stnBgpPrefixCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgpPrefixCount.setStatus('current')
if mibBuilder.loadTexts: stnBgpPrefixCount.setDescription('Number of distinct prefixes in the local RIB.')
stnBgpPathCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgpPathCount.setStatus('current')
if mibBuilder.loadTexts: stnBgpPathCount.setDescription('Number of paths in the local RIB.')
stnBgpSelectedPathCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgpSelectedPathCount.setStatus('current')
if mibBuilder.loadTexts: stnBgpSelectedPathCount.setDescription('Number of paths selected for route table installation.')
stnBgpPathAttributeCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgpPathAttributeCount.setStatus('current')
if mibBuilder.loadTexts: stnBgpPathAttributeCount.setDescription('Number of entries in the path attribute database.')
stnBgpPathAttributeTlvLength = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgpPathAttributeTlvLength.setStatus('current')
if mibBuilder.loadTexts: stnBgpPathAttributeTlvLength.setDescription('Total length of all TLVs in the path attribute database.')
stnBgp4PathAttrTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 7), )
if mibBuilder.loadTexts: stnBgp4PathAttrTable.setStatus('current')
if mibBuilder.loadTexts: stnBgp4PathAttrTable.setDescription('A table of BGP path attributes.')
stnBgp4PathAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 7, 1), )
bgp4PathAttrEntry.registerAugmentions(("STN-BGP-MIB", "stnBgp4PathAttrEntry"))
stnBgp4PathAttrEntry.setIndexNames(*bgp4PathAttrEntry.getIndexNames())
if mibBuilder.loadTexts: stnBgp4PathAttrEntry.setStatus('current')
if mibBuilder.loadTexts: stnBgp4PathAttrEntry.setDescription('Additional information about a bgp path to a network.')
stnBgp4PathAttrCommunities = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgp4PathAttrCommunities.setStatus('current')
if mibBuilder.loadTexts: stnBgp4PathAttrCommunities.setDescription('The sequence of community numbers. Each AS community number is a 4-octet long unsigned integer')
stnBgp4PathAttrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgp4PathAttrWeight.setStatus('current')
if mibBuilder.loadTexts: stnBgp4PathAttrWeight.setDescription('The weight of this path.')
stnBgp4PathAttrImported = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnBgp4PathAttrImported.setStatus('current')
if mibBuilder.loadTexts: stnBgp4PathAttrImported.setDescription('Variable indicates whether this path has been imported from the other portocol on this router.')
mibBuilder.exportSymbols("STN-BGP-MIB", stnBgpPrefixCount=stnBgpPrefixCount, stnBgpRouteAttrAggregatorAddr=stnBgpRouteAttrAggregatorAddr, stnBgpRouteAttrMultiExitDisc=stnBgpRouteAttrMultiExitDisc, stnBgp4PathAttrImported=stnBgp4PathAttrImported, stnBgp4PathAttrTable=stnBgp4PathAttrTable, stnBgpRouteAttrEntry=stnBgpRouteAttrEntry, stnBgp4PathAttrEntry=stnBgp4PathAttrEntry, stnBgp4PathAttrWeight=stnBgp4PathAttrWeight, stnBgpRouteAttrTable=stnBgpRouteAttrTable, stnBgpRouteAttrASPathSegment=stnBgpRouteAttrASPathSegment, stnBgpPathAttributeTlvLength=stnBgpPathAttributeTlvLength, stnBgpRouteAttrNextHop=stnBgpRouteAttrNextHop, stnBgpPathAttributeCount=stnBgpPathAttributeCount, stnBgpRouteAttrRefCount=stnBgpRouteAttrRefCount, stnBgpRouteAttrAggregatorAS=stnBgpRouteAttrAggregatorAS, stnBgp4PathAttrCommunities=stnBgp4PathAttrCommunities, stnBgpRouteAttrAtomicAggregate=stnBgpRouteAttrAtomicAggregate, stnBgp=stnBgp, stnBgpRouteAttrOrigin=stnBgpRouteAttrOrigin, stnBgpSelectedPathCount=stnBgpSelectedPathCount, stnBgpPathCount=stnBgpPathCount, PYSNMP_MODULE_ID=stnBgp, stnBgpRouteAttrId=stnBgpRouteAttrId, stnBgpRouteAttrLocPref=stnBgpRouteAttrLocPref, stnBgpObjects=stnBgpObjects)
