#
# PySNMP MIB module ASCEND-MIBIPXRT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBIPXRT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:27:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, Counter64, TimeTicks, Gauge32, iso, Integer32, IpAddress, ObjectIdentity, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "Counter64", "TimeTicks", "Gauge32", "iso", "Integer32", "IpAddress", "ObjectIdentity", "ModuleIdentity", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

mibipxRouteProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 89))
mibipxRouteProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 89, 1), )
if mibBuilder.loadTexts: mibipxRouteProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibipxRouteProfileTable.setDescription('A list of mibipxRouteProfile profile entries.')
mibipxRouteProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 89, 1, 1), ).setIndexNames((0, "ASCEND-MIBIPXRT-MIB", "ipxRouteProfile-Name"))
if mibBuilder.loadTexts: mibipxRouteProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibipxRouteProfileEntry.setDescription('A mibipxRouteProfile entry containing objects that maps to the parameters of mibipxRouteProfile profile.')
ipxRouteProfile_Index = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 89, 1, 1, 1), Integer32()).setLabel("ipxRouteProfile-Index").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteProfile_Index.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRouteProfile_Index.setDescription('PROFACCE index')
ipxRouteProfile_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 89, 1, 1, 2), DisplayString()).setLabel("ipxRouteProfile-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxRouteProfile_Name.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRouteProfile_Name.setDescription('SAP name of the server.')
ipxRouteProfile_ServerType = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 89, 1, 1, 3), DisplayString()).setLabel("ipxRouteProfile-ServerType").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteProfile_ServerType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRouteProfile_ServerType.setDescription('SAP type.')
ipxRouteProfile_DestNetwork = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 89, 1, 1, 4), DisplayString()).setLabel("ipxRouteProfile-DestNetwork").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteProfile_DestNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRouteProfile_DestNetwork.setDescription('The IPX network number of the destination network in 4 bytes.')
ipxRouteProfile_ServerNode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 89, 1, 1, 5), DisplayString()).setLabel("ipxRouteProfile-ServerNode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteProfile_ServerNode.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRouteProfile_ServerNode.setDescription('The node address of the server. For NetWare servers 3.0 and beyond, this is 1.')
ipxRouteProfile_ServerSocket = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 89, 1, 1, 6), DisplayString()).setLabel("ipxRouteProfile-ServerSocket").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteProfile_ServerSocket.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRouteProfile_ServerSocket.setDescription('The advertising socket number for the server.')
ipxRouteProfile_Hops = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 89, 1, 1, 7), Integer32()).setLabel("ipxRouteProfile-Hops").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteProfile_Hops.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRouteProfile_Hops.setDescription('The distance in hops to the network.')
ipxRouteProfile_Ticks = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 89, 1, 1, 8), Integer32()).setLabel("ipxRouteProfile-Ticks").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteProfile_Ticks.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRouteProfile_Ticks.setDescription('The distance in ticks to the network.')
ipxRouteProfile_ProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 89, 1, 1, 9), Integer32()).setLabel("ipxRouteProfile-ProfileNumber").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteProfile_ProfileNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRouteProfile_ProfileNumber.setDescription('The profile through which we reach the net.')
ipxRouteProfile_ProfileName = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 89, 1, 1, 10), DisplayString()).setLabel("ipxRouteProfile-ProfileName").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteProfile_ProfileName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRouteProfile_ProfileName.setDescription('The connection through which we reach the net.')
ipxRouteProfile_ActiveRoute = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 89, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("ipxRouteProfile-ActiveRoute").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteProfile_ActiveRoute.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRouteProfile_ActiveRoute.setDescription('TRUE if this route is active.Inactive routes are not placed in the routing tables.')
ipxRouteProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 89, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("ipxRouteProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxRouteProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: ipxRouteProfile_Action_o.setDescription('')
mibBuilder.exportSymbols("ASCEND-MIBIPXRT-MIB", ipxRouteProfile_Ticks=ipxRouteProfile_Ticks, ipxRouteProfile_Hops=ipxRouteProfile_Hops, ipxRouteProfile_ProfileNumber=ipxRouteProfile_ProfileNumber, ipxRouteProfile_DestNetwork=ipxRouteProfile_DestNetwork, ipxRouteProfile_Index=ipxRouteProfile_Index, ipxRouteProfile_ServerType=ipxRouteProfile_ServerType, ipxRouteProfile_ProfileName=ipxRouteProfile_ProfileName, ipxRouteProfile_ActiveRoute=ipxRouteProfile_ActiveRoute, mibipxRouteProfileEntry=mibipxRouteProfileEntry, mibipxRouteProfileTable=mibipxRouteProfileTable, DisplayString=DisplayString, ipxRouteProfile_Name=ipxRouteProfile_Name, ipxRouteProfile_ServerSocket=ipxRouteProfile_ServerSocket, ipxRouteProfile_Action_o=ipxRouteProfile_Action_o, ipxRouteProfile_ServerNode=ipxRouteProfile_ServerNode, mibipxRouteProfile=mibipxRouteProfile)
