#
# PySNMP MIB module CISCO-LWAPP-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:06:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
cLApDot11IfEntry, cLApDot11IfSlotId, cLApDot11IfType, cLApName, cLApSysMacAddress = mibBuilder.importSymbols("CISCO-LWAPP-AP-MIB", "cLApDot11IfEntry", "cLApDot11IfSlotId", "cLApDot11IfType", "cLApName", "cLApSysMacAddress")
cldcClientMacAddress, = mibBuilder.importSymbols("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress")
cLWlanIndex, cLWlanConfigEntry = mibBuilder.importSymbols("CISCO-LWAPP-WLAN-MIB", "cLWlanIndex", "cLWlanConfigEntry")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
TimeIntervalSec, = mibBuilder.importSymbols("CISCO-TC", "TimeIntervalSec")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
NotificationType, Unsigned32, Bits, IpAddress, Counter32, Counter64, ObjectIdentity, MibIdentifier, ModuleIdentity, Gauge32, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "Bits", "IpAddress", "Counter32", "Counter64", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Gauge32", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
ciscoLwappQosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 524))
ciscoLwappQosMIB.setRevisions(('2010-07-21 00:00', '2007-01-07 00:00', '2006-04-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappQosMIB.setRevisionsDescriptions(('Added the following groups: ciscoLwappQosMIBComplianceRev2, ciscoLwappQosDot11aConfigGroupSup2, ciscoLwappQosDot11bConfigGroupSup2, ciscoLwappQosDot11SipCacStatsGroup, ciscoLwappQosDot11SipConfigGroup, ciscoLwappQosDot11VoiceStatsGroup, ciscoLwappQosDot11VoiceConfigGroup, ciscoLwappQosConfigGroup, ciscoLwappQosDot11VoiceNotifGroup Deprecated ciscoLwappQosMIBComplianceRev1 and replaced it with ciscoLwappQosMIBComplianceRev2.', 'Added ciscoLwappQosDot11aConfigGroupSup1 and ciscoLwappQosDot11bConfigGroupSup1 objects.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappQosMIB.setLastUpdated('201007210000Z')
if mibBuilder.loadTexts: ciscoLwappQosMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappQosMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappQosMIB.setDescription('This MIB is intended to be implemented on all those devices operating as Central controllers, that terminate the Light Weight Access Point Protocol tunnel from Cisco Light-weight LWAPP Access Points. Information provided by this MIB is used to study the quality of service in the voice and video traffic on the WLAN. The relationship between CC and the LWAPP APs can be depicted as follows: +......+ +......+ +......+ + + + + + + + CC + + CC + + CC + + + + + + + +......+ +......+ +......+ .. . . .. . . . . . . . . . . . . . . . . . . +......+ +......+ +......+ +......+ + + + + + + + + + AP + + AP + + AP + + AP + + + + + + + + + +......+ +......+ +......+ +......+ . . . . . . . . . . . . . . . . . . . +......+ +......+ +......+ +......+ + + + + + + + + + MN + + MN + + MN + + MN + + + + + + + + + +......+ +......+ +......+ +......+ The LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends them to the controller to which it is logically connected. Gratuitous Probe Response (GPR) The Gratuitous Probe Response feature aids in conserving battery power of WLAN-enabled cell phones by providing a high rate packet on the order of tens of milliseconds such that these kind of phones can wake up and wait at predefined intervals, to reduce battery power. The GPR packet is transmitted from the AP at a predefined time interval. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the Central Controller. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Mobile Node and client are used interchangeably. TU A measurement of time in units of 1024 microseconds. User Priority ( UP ) Specifies a the priority rules in QOS for handling user priority. EDCA As defined in 802.11e standard, Enhanced distributed channel access(EDCA) parameter set element is used by the AP to establish policy, to change policy when accepting new clients, or to adapt to changes in offered load. REFERENCE [1] Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol')
ciscoLwappQosMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 524, 0))
ciscoLwappQosMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 524, 1))
ciscoLwappQosMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 524, 2))
cLQd11aCACConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 1))
cLQd11bCACConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 2))
cLQd11GprConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 3))
cLQd11CACStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4))
cLQEntConfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 5))
cLQd11VoiceStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 6))
cLQVoiceWlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 7))
cLQVoiceClient = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 8))
cLQd11SipCacConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 9))
cLQConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 10))
cLQd11aVoiceAdmCtrlSupport = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11aVoiceAdmCtrlSupport.setStatus('current')
if mibBuilder.loadTexts: cLQd11aVoiceAdmCtrlSupport.setDescription("This object is used to enable or disable admission control for voice traffic flowing through the 802.11a interfaces in the controller. When set to 'true', controller will reserve and manage max-bandwidth (cLQd11aVoiceMaxAdmBandwidth) and roaming-bandwidth (cLQd11aVoiceMaxRoamBandwidth) as per user configured values. When disabled, admission control will not be enforced. This may delay voice traffic depending on load on the WLAN.")
cLQd11aVoiceMaxAdmBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11aVoiceMaxAdmBandwidth.setStatus('current')
if mibBuilder.loadTexts: cLQd11aVoiceMaxAdmBandwidth.setDescription('This object denotes the maximum bandwidth that can be allocated by controller for voice traffic when admission control is enabled for for 802.11a interfaces in the controller. Please note that the write operation on this object will be successful only if the 802.11a network is not operational and the total value populated for this object for all the admission control attributes (voice, video) together does not exceed 100%.')
cLQd11aVoiceMaxRoamBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11aVoiceMaxRoamBandwidth.setStatus('current')
if mibBuilder.loadTexts: cLQd11aVoiceMaxRoamBandwidth.setDescription('This object represents the bandwidth relative to the maximum allocated bandwidth indicated by cLQd11aVoiceMaxAdmBandwidth, that can be allocated to roaming clients for voice traffic, when admission control is enabled for 802.11a interfaces in the controller. Please note that the write operation on this object will be successful only if the 802.11a network is disabled and not operational. The value configured through this object takes effect when the 802.11a network is enabled.')
cLQd11aVideoAdmCtrlSupport = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11aVideoAdmCtrlSupport.setStatus('current')
if mibBuilder.loadTexts: cLQd11aVideoAdmCtrlSupport.setDescription("This object is used to enable or disable admission control for video traffic flowing through the 802.11a interfaces in the controller. When set to 'true', controller will reserve and manage max-bandwidth (cLQd11aVideoMaxAdmBandwidth) and roaming-bandwidth (cLQd11aVideoMaxRoamBandwidth) as per user configured values. When disabled, admission control will not be enforced. This may delay video traffic depending on load on the WLAN.")
cLQd11aVideoMaxAdmBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11aVideoMaxAdmBandwidth.setStatus('current')
if mibBuilder.loadTexts: cLQd11aVideoMaxAdmBandwidth.setDescription('This object denotes the maximum bandwidth that can be allocated by controller for video traffic when admission control is enabled for 802.11a interfaces in the controller. When set to 0, all available bandwidth in 802.11a interfaces can be allocated to video traffic. Please note that the write operation on this object will be successful only if the 802.11a network is not operational and the total value populated for this object for all the admission control attributes (voice, video) together does not exceed 100%.')
cLQd11aVideoMaxRoamBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11aVideoMaxRoamBandwidth.setStatus('current')
if mibBuilder.loadTexts: cLQd11aVideoMaxRoamBandwidth.setDescription('This object represents the bandwidth relative to the maximum allocated bandwidth indicated by cLQd11aVideoMaxAdmBandwidth, that can be allocated to roaming clients for video traffic, when admission control is enabled for 802.11a interfaces in the controller. Please note that the write operation on this object will be successful only if the 802.11a network is disabled and not operational. The value configured through this object takes effect when the 802.11a network is enabled and operational.')
cLQd11bVoiceAdmCtrlSupport = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 2, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11bVoiceAdmCtrlSupport.setStatus('current')
if mibBuilder.loadTexts: cLQd11bVoiceAdmCtrlSupport.setDescription("This object is used to enable or disable admission control for voice traffic flowing through the 802.11b/g interfaces in the controller. When set to 'true', controller will reserve and manage max-bandwidth (cLQd11bVoiceMaxAdmBandwidth) and roaming-bandwidth (cLQd11bVoiceMaxRoamingBandwidth) as per user configured values. When disabled, admission control will not be enforced. This may delay voice traffic depending on load on the WLAN.")
cLQd11bVoiceMaxAdmBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11bVoiceMaxAdmBandwidth.setStatus('current')
if mibBuilder.loadTexts: cLQd11bVoiceMaxAdmBandwidth.setDescription('This object denotes the maximum bandwidth that can be allocated by controller for voice traffic when admission control is enabled for 802.11b/g interfaces in the controller. Please note that the write operation on this object will be successful only if the 802.11b/g network is not operational and the total value populated for this object for all the admission control attributes (voice, video) together does not exceed 100%.')
cLQd11bVoiceMaxRoamBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11bVoiceMaxRoamBandwidth.setStatus('current')
if mibBuilder.loadTexts: cLQd11bVoiceMaxRoamBandwidth.setDescription('This object represents the bandwidth relative to the maximum allocated bandwidth indicated by cLQd11bVoiceMaxAdmBandwidth, that can be allocated to roaming clients for voice traffic, when admission control is enabled for 802.11b interfaces in the controller. Please note that the write operation on this object will be successful only if the 802.11b/g network is not operational. The value configured through this object takes effect when the 802.11b/g network is enabled and operational.')
cLQd11bVideoAdmCtrlSupport = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 2, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11bVideoAdmCtrlSupport.setStatus('current')
if mibBuilder.loadTexts: cLQd11bVideoAdmCtrlSupport.setDescription("This object is used to enable or disable admission control for video traffic flowing through the 802.11b/g interfaces in the controller. When set to 'true', controller will reserve and manage max-bandwidth (cLQd11bVideoMaxAdmBandwidth) and roaming-bandwidth (cLQd11bVideoMaxRoamBandwidth) as per user configured values. When disabled, admission control will not be enforced. This may delay video traffic depending on load on the WLAN.")
cLQd11bVideoMaxAdmBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 2, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11bVideoMaxAdmBandwidth.setStatus('current')
if mibBuilder.loadTexts: cLQd11bVideoMaxAdmBandwidth.setDescription('This object denotes the maximum bandwidth that can be allocated by controller for video traffic when admission control is enabled for 802.11b/g interfaces in the controller. When set to 0, all available bandwidth in 802.11b/g interfaces can be allocated to video traffic. Please note that the write operation on this object will be successful only if the 802.11b/g network is not operational and the total value populated for this object for all the admission control attributes (voice, video) together does not exceed 100%.')
cLQd11bVideoMaxRoamBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 2, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11bVideoMaxRoamBandwidth.setStatus('current')
if mibBuilder.loadTexts: cLQd11bVideoMaxRoamBandwidth.setDescription('This objects represents the bandwidth relative to the maximum allocated bandwidth indicated by cLQd11bVideoMaxAdmBandwidth, that can be allocated to roaming clients for video traffic, when admission control is enabled for 802.11b interfaces in the controller. Please note that the write operation on this object will be successful only if the 802.11b/g network is not operational. The value configured through this object takes effect when the 802.11b/g network is enabled and operational.')
cLQd11aGprProbeInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(10)).setUnits('TU').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11aGprProbeInterval.setStatus('current')
if mibBuilder.loadTexts: cLQd11aGprProbeInterval.setDescription('This object is used to set GPR probe interval period to be used by all 802.11a interfaces in the controller, when the radios are advertising any WLAN with GPR support enabled. Please note that the write operation on this object will be successful only if the 802.11a network is not operational. The value configured through this object takes effect when the 802.11a network is enabled and operational.')
cLQd11aVoiceCtrl = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loadBased", 1), ("static", 2))).clone('loadBased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11aVoiceCtrl.setStatus('current')
if mibBuilder.loadTexts: cLQd11aVoiceCtrl.setDescription('When admission control is enabled these parameters can be modified. loadBased - controller will reserve and manage max-bandwidth and roaming-bandwidth based on the load on the WLAN. static - controller will reserve and manage max-bandwidth (cLQd11aVoiceMaxAdmBandwidth) and roaming-bandwidth (cLQd11aVoiceMaxRoamBandwidth) as per user configured values. When ACM is disabled, admission control will not be enforced. This may delay voice traffic depending on the traffic on the WLAN.')
cLQd11aExpeditedBw = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11aExpeditedBw.setStatus('current')
if mibBuilder.loadTexts: cLQd11aExpeditedBw.setDescription("This object specifies if expedited BW feature is enabled or not. A value of 'true' will ensure that the APs advertise the expedited BW support in their beacons and association responses. A value of 'false' will ensure that the APs do not advertise the expedited BW support in their beacons and association responses.")
cLQd11aEdcaProfile = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("wmmDefault", 1), ("svpVoice", 2), ("optimizedVoice", 3), ("optimizedVideoVoice", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11aEdcaProfile.setStatus('current')
if mibBuilder.loadTexts: cLQd11aEdcaProfile.setDescription('This object specifies the EDCA profile to be used in EDCA Parameter set element. See glossary for EDCA. wmmDefault - WMM default standard parameters. svpVoice - Spectralink voice priority parameters. optimizedVoice - parameters for voice optimization. optimizedVideoVoice - parameters for video and voice optimization.')
cLQd11aMacOptimization = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11aMacOptimization.setStatus('current')
if mibBuilder.loadTexts: cLQd11aMacOptimization.setDescription("This object specifies MAC enhancements for voice, resulting in improvement in number of voice calls serviced per access point. A value of 'true' enables MAC optimization. A value of 'false' disables MAC optimization.")
cLQd11aMaxCallLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11aMaxCallLimit.setStatus('current')
if mibBuilder.loadTexts: cLQd11aMaxCallLimit.setDescription('This object specifies the max number of CAC Voice Calls allowed on dot11a radio band. Value of zero denotes no limit.')
cLQd11bGprProbeInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 2, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(10)).setUnits('TU').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11bGprProbeInterval.setStatus('current')
if mibBuilder.loadTexts: cLQd11bGprProbeInterval.setDescription('This object is used to set GPR probe interval period to be used by all 802.11b/g interfaces in the controller, when the radios are advertising any WLAN with GPR support enabled. Please note that the write operation on this object will be successful only if the 802.11b/g network is not operational. The value configured through this object takes effect when the 802.11b/g network is enabled.')
cLQd11bVoiceCtrl = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loadBased", 1), ("static", 2))).clone('loadBased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11bVoiceCtrl.setStatus('current')
if mibBuilder.loadTexts: cLQd11bVoiceCtrl.setDescription('When admission control is enabled these parameters can be modified. loadBased - controller will reserve and manage max-bandwidth and roaming-bandwidth based on the load on the WLAN. static - controller will reserve and manage max-bandwidth (cLQd11bVoiceMaxAdmBandwidth) and roaming-bandwidth (cLQd11bVoiceMaxRoamBandwidth) as per user configured values. When ACM is disabled, admission control will not be enforced. This may delay voice traffic depending on the traffic on the WLAN.')
cLQd11bExpeditedBw = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 2, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11bExpeditedBw.setStatus('current')
if mibBuilder.loadTexts: cLQd11bExpeditedBw.setDescription("This object specifies if expedited BW feature is enabled or not. A value of 'true' will ensure that the APs advertise the expedited BW support in their beacons and association responses. A value of 'false' will ensure that the APs do not advertise the expedited BW support in their beacons and association responses.")
cLQd11bEdcaProfile = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("wmmDefault", 1), ("svpVoice", 2), ("optimizedVoice", 3), ("optimizedVideoVoice", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11bEdcaProfile.setStatus('current')
if mibBuilder.loadTexts: cLQd11bEdcaProfile.setDescription('This object specifies the EDCA profile to be used in EDCA Parameter set element. See glossary for EDCA. wmmDefault - WMM default standard parameters. svpVoice - Spectralink voice priority parameters. optimizedVoice - parameters for voice optimization. optimizedVideoVoice - parameters for video and voice optimization.')
cLQd11bMacOptimization = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 2, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11bMacOptimization.setStatus('current')
if mibBuilder.loadTexts: cLQd11bMacOptimization.setDescription("This object specifies MAC enhancements for voice, resulting in improvement in number of voice calls serviced per access point. A value of 'true' enables MAC optimization. A value of 'false' disables MAC optimization.")
cLQd11bMaxCallLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 2, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11bMaxCallLimit.setStatus('current')
if mibBuilder.loadTexts: cLQd11bMaxCallLimit.setDescription('This object specifies the max number of CAC Voice Calls allowed on dot11b radio band. Value of zero denotes no limit.')
cLQd11GprTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 3, 1), )
if mibBuilder.loadTexts: cLQd11GprTable.setStatus('current')
if mibBuilder.loadTexts: cLQd11GprTable.setDescription('This table populates the GPR configuration on the WLANs configured on this controller. There exists a row in this table for each WLAN configured through cLWlanConfigTable. A row is added is to this table by the agent when a WLAN is created by the user through an explicit management action initiated from a network management station. Similarly a row gets deleted automatically when the user deletes the particular WLAN.')
cLQd11GprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 3, 1, 1), )
cLWlanConfigEntry.registerAugmentions(("CISCO-LWAPP-QOS-MIB", "cLQd11GprEntry"))
cLQd11GprEntry.setIndexNames(*cLWlanConfigEntry.getIndexNames())
if mibBuilder.loadTexts: cLQd11GprEntry.setStatus('current')
if mibBuilder.loadTexts: cLQd11GprEntry.setDescription('Each entry represents a conceptual row in cLQd11GprTable and corresponds to the GPR configuration on a WLAN.')
cLQd11GprSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 3, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11GprSupport.setStatus('current')
if mibBuilder.loadTexts: cLQd11GprSupport.setDescription("If 'true', then the corresponding radios that advertise this WLAN, will send Gratuitous Probe Response. If 'false', then the corresponding radios that advertise this WLAN, will not send Gratuitous Probe Response.")
cLQd11CACStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1), )
if mibBuilder.loadTexts: cLQd11CACStatsTable.setStatus('current')
if mibBuilder.loadTexts: cLQd11CACStatsTable.setDescription('This table populates the call admission control metrics collected by observing the voice or video traffic on the dot11 interface of a particular AP. There exists a row in this table for each row corresponding to a dot11 interface found in cLApDot11IfTable. A row corresponding to a dot11 interface is added when an AP joins the controller. The row gets deleted when the AP dissociates from the controller.')
cLQd11CACStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1), )
cLApDot11IfEntry.registerAugmentions(("CISCO-LWAPP-QOS-MIB", "cLQd11CACStatsEntry"))
cLQd11CACStatsEntry.setIndexNames(*cLApDot11IfEntry.getIndexNames())
if mibBuilder.loadTexts: cLQd11CACStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cLQd11CACStatsEntry.setDescription('Each entry represents a conceptual row in CLQd11CACStatsTable and corresponds to the admission control statistics for a particular dot11 interface.')
cLQd11CacVoiceBwInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11CacVoiceBwInUse.setStatus('current')
if mibBuilder.loadTexts: cLQd11CacVoiceBwInUse.setDescription('This object indicates the voice bandwidth in use as a percentage of the bandwidth configured through cLQd11aVoiceMaxAdmBandwidth or cLQd11bVoiceMaxAdmBandwidth, depending on the type of this dot11 interface.')
cLQd11CacVideoBwInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11CacVideoBwInUse.setStatus('current')
if mibBuilder.loadTexts: cLQd11CacVideoBwInUse.setDescription('This object indicates the video bandwidth in use as a percentage of the bandwidth configured through cLQd11aVideoMaxAdmBandwidth or cLQd11bVideoMaxAdmBandwidth, depending on the type of this dot11 interface.')
cLQd11CacVoiceCallsInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11CacVoiceCallsInProgress.setStatus('current')
if mibBuilder.loadTexts: cLQd11CacVoiceCallsInProgress.setDescription('This object indicates the count of the number of voice calls currently in progress on this dot11 interface.')
cLQd11CacRoamVoiceCallsInProg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11CacRoamVoiceCallsInProg.setStatus('current')
if mibBuilder.loadTexts: cLQd11CacRoamVoiceCallsInProg.setDescription('This object indicates the count of the number of voice calls initiated from roaming clients currently in progress on this dot11 interface.')
cLQd11CacTotalVoiceCallsAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11CacTotalVoiceCallsAP.setStatus('current')
if mibBuilder.loadTexts: cLQd11CacTotalVoiceCallsAP.setDescription('This object indicates the count of the number of voice calls observed on this dot11 interface ever since this AP has joined the controller.')
cLQd11CacTotalRoamCallsAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11CacTotalRoamCallsAP.setStatus('current')
if mibBuilder.loadTexts: cLQd11CacTotalRoamCallsAP.setDescription('This object indicates the count of the number of voice and video calls initiated from roaming clients observed on this dot11 interface ever since this AP has joined the controller.')
cLQd11CacVoiceCallsRejectedAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11CacVoiceCallsRejectedAP.setStatus('current')
if mibBuilder.loadTexts: cLQd11CacVoiceCallsRejectedAP.setDescription('This object indicates the count of the number of voice calls observed as rejected on this dot11 interface, ever since this AP has joined the controller.')
cLQd11CacRoamCallsRejectedAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11CacRoamCallsRejectedAP.setStatus('current')
if mibBuilder.loadTexts: cLQd11CacRoamCallsRejectedAP.setDescription('This object indicates the count of the number of voice and video calls initiated from roaming clients observed as rejected on this dot11 interface, ever since this AP has joined the controller.')
cLQd11CacRejCallsInsufBw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11CacRejCallsInsufBw.setStatus('current')
if mibBuilder.loadTexts: cLQd11CacRejCallsInsufBw.setDescription('This object indicates the count of the number of calls observed as rejected on this dot11 interface due to insufficient bandwidth, ever since this AP has joined the controller.')
cLQd11CacRejCallsBadParams = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11CacRejCallsBadParams.setStatus('current')
if mibBuilder.loadTexts: cLQd11CacRejCallsBadParams.setDescription('This object indicates the count of the number of calls observed as rejected on this dot11 interface due to mismatch in call parameters, ever since this AP has joined the controller.')
cLQd11CacRejCallsPhyRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11CacRejCallsPhyRate.setStatus('current')
if mibBuilder.loadTexts: cLQd11CacRejCallsPhyRate.setDescription('This object indicates the count of the number of calls observed as rejected on this dot11 interface due to mismatch in 802.11 data rates, ever since this AP has joined the controller.')
cLQd11CacRejCallsQosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11CacRejCallsQosPolicy.setStatus('current')
if mibBuilder.loadTexts: cLQd11CacRejCallsQosPolicy.setDescription('This object indicates the count of the number of calls observed as rejected on this dot11 interface due to restrictions imposed by QOS policies, ever since this AP has joined the controller.')
cLQd11SipCacNonRoamCallsInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11SipCacNonRoamCallsInProgress.setStatus('current')
if mibBuilder.loadTexts: cLQd11SipCacNonRoamCallsInProgress.setDescription('This object indicates the number of non-roaming SIP calls currently in progress on this dot11 interface.')
cLQd11SipCacRoamCallsInProg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11SipCacRoamCallsInProg.setStatus('current')
if mibBuilder.loadTexts: cLQd11SipCacRoamCallsInProg.setDescription('This object indicates the number of SIP calls initiated from roaming clients currently in progress on this dot11 interface.')
cLQd11SipCacTotalNonRoamCallsAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11SipCacTotalNonRoamCallsAP.setStatus('current')
if mibBuilder.loadTexts: cLQd11SipCacTotalNonRoamCallsAP.setDescription('This object indicates the number of non-roaming SIP calls observed on this dot11 interface since this AP has joined the controller.')
cLQd11SipCacTotalRoamCallsAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11SipCacTotalRoamCallsAP.setStatus('current')
if mibBuilder.loadTexts: cLQd11SipCacTotalRoamCallsAP.setDescription('This object indicates the number of SIP calls initiated from roaming clients observed on this dot11 interface ever this AP has joined the controller.')
cLQd11SipCacNonRoamCallsRejectedInSuffBw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11SipCacNonRoamCallsRejectedInSuffBw.setStatus('current')
if mibBuilder.loadTexts: cLQd11SipCacNonRoamCallsRejectedInSuffBw.setDescription('This object indicates the number of non-roaming SIP calls observed as rejected on this dot11 interface due to insufficient bandwidth, since this AP has joined the controller.')
cLQd11SipCacRoamCallsRejectedInSuffBw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11SipCacRoamCallsRejectedInSuffBw.setStatus('current')
if mibBuilder.loadTexts: cLQd11SipCacRoamCallsRejectedInSuffBw.setDescription('This object indicates the number of SIP calls initiated from roaming clients observed as rejected on this dot11 interface due to insufficient bandwidth, since this AP has joined the controller.')
cLQd11SipCacNonRoamCallsRejectedMaxLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11SipCacNonRoamCallsRejectedMaxLimit.setStatus('current')
if mibBuilder.loadTexts: cLQd11SipCacNonRoamCallsRejectedMaxLimit.setDescription('This object indicates the number of non-roaming SIP calls observed as rejected on this dot11 interface due to maximum limit exceeded, since this AP has joined the controller.')
cLQd11SipCacRoamCallsRejectedMaxLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11SipCacRoamCallsRejectedMaxLimit.setStatus('current')
if mibBuilder.loadTexts: cLQd11SipCacRoamCallsRejectedMaxLimit.setDescription('This object indicates the number of roaming SIP calls observed as rejected on this dot11 interface due to maximum limit exceeded, since this AP has joined the controller.')
cLQd11SipCacRejCallsQosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11SipCacRejCallsQosPolicy.setStatus('current')
if mibBuilder.loadTexts: cLQd11SipCacRejCallsQosPolicy.setDescription('This object indicates the number of SIP calls observed as rejected on this dot11 interface due to restrictions imposed by QOS policies, ever since this AP has joined the controller.')
cLQd11VoiceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 6, 1), )
if mibBuilder.loadTexts: cLQd11VoiceStatsTable.setStatus('current')
if mibBuilder.loadTexts: cLQd11VoiceStatsTable.setDescription('This table represents the voice statistics calculated for each radio on an AP. An entry is automatically added by the controller when a voice call is successfully placed. Entry is deleted when AP disassociates the Controller.')
cLQd11VoiceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"))
if mibBuilder.loadTexts: cLQd11VoiceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cLQd11VoiceStatsEntry.setDescription('Each entry in this table provides voice related statistics for each radio on an AP. Entries are removed when the AP disassociates the controller.')
cLQd11VoiceCallCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 6, 1, 1, 1), Counter32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11VoiceCallCounts.setStatus('current')
if mibBuilder.loadTexts: cLQd11VoiceCallCounts.setDescription('This object indicates cumulative number of successful VOIP calls placed using this radio.')
cLQd11CacVoiceCallTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 6, 1, 1, 2), TimeIntervalSec()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQd11CacVoiceCallTimePeriod.setStatus('current')
if mibBuilder.loadTexts: cLQd11CacVoiceCallTimePeriod.setDescription('This object indicates cumulative call proceed time in seconds.')
cLQVoiceWlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 7, 1), )
if mibBuilder.loadTexts: cLQVoiceWlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLQVoiceWlanConfigTable.setDescription('This table contains per WLAN voice related configuration. There is a row in this table for every WLAN configured through cLWlanConfigTable. A row is added to this table by the agent when a WLAN is created by the user through an explicit management action initiated from a network management station. Similarly a row gets deleted automatically when the user deletes the particular WLAN.')
cLQVoiceWlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"))
if mibBuilder.loadTexts: cLQVoiceWlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLQVoiceWlanConfigEntry.setDescription('An entry containing information about voice configuration for a particular WLAN.')
cLQVoiceWlanConfigDetectVoipCallFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 7, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQVoiceWlanConfigDetectVoipCallFailure.setStatus('current')
if mibBuilder.loadTexts: cLQVoiceWlanConfigDetectVoipCallFailure.setDescription("If 'true', then the corresponding radios that advertise this WLAN, will snoop voice packets to detect call failure and report by sending trap. If 'false', then the corresponding radios that advertise this WLAN, will not detect call failure and hence will not send trap.")
cLQVoiceClientTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 8, 1), )
if mibBuilder.loadTexts: cLQVoiceClientTable.setStatus('current')
if mibBuilder.loadTexts: cLQVoiceClientTable.setDescription('This table contains voice related client properties. There exists a row in this table for each associated voice clients. A row is added to this table by the agent when a voice client gets associated. Similarly, a row gets deleted automatically when the voice client gets disassociated.')
cLQVoiceClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 8, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cLQVoiceClientEntry.setStatus('current')
if mibBuilder.loadTexts: cLQVoiceClientEntry.setDescription('An entry containing voice call management information for a particular client.')
cLQVoiceClientCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 8, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQVoiceClientCallingNumber.setStatus('current')
if mibBuilder.loadTexts: cLQVoiceClientCallingNumber.setDescription('This object indicates calling number of this voice client')
cLQVoiceClientLastCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 8, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQVoiceClientLastCalledNumber.setStatus('current')
if mibBuilder.loadTexts: cLQVoiceClientLastCalledNumber.setDescription('This object indicates last called number from this voice client')
cLQVoiceClientLastCallFailureReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606))).clone(namedValues=NamedValues(("unknown", 1), ("normalFailure", 2), ("roamFailure", 3), ("maxLimitExceeded", 4), ("badRequest", 400), ("unathorized", 401), ("paymentRequired", 402), ("forbidden", 403), ("notFound", 404), ("methodNotallowed", 405), ("notAcceptable", 406), ("proxyAuthenticationRequired", 407), ("requestTimeout", 408), ("conflict", 409), ("gone", 410), ("lengthRequired", 411), ("requestEntityTooLarge", 413), ("requestURITooLarge", 414), ("unsupportedMdediaType", 415), ("badExtension", 420), ("temporarilyNotAvailable", 480), ("callLegDoesNotExist", 481), ("loopDetected", 482), ("tooManyHops", 483), ("addressIncomplete", 484), ("ambiguous", 485), ("busy", 486), ("internalServerError", 500), ("notImplemented", 501), ("badGateway", 502), ("serviceUnavailable", 503), ("serverTimeout", 504), ("versionNotSupported", 505), ("busyEverywhere", 600), ("decline", 603), ("doesNotExistAnywhere", 604), ("sessionNotAcceptable", 606)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLQVoiceClientLastCallFailureReasonCode.setStatus('current')
if mibBuilder.loadTexts: cLQVoiceClientLastCallFailureReasonCode.setDescription("This object represents last VOIP failue reason code of this voice client. These reason codes are taken from SIP standards. unknown - Unknown error normalFailure - Call failed for insufficient bandwidth roamFailure - SIP call failed during roaming maxLimitExceeded - Maximum SIP call permissible limit was exceeded. badRequest - The request could not be understood due to malformed syntax. unathorized - The request requires user authentication. paymentRequired - Reserved for future. forbidden - The server understood the request, but is refusing to fulfill it. notFound - The server has definitive information that the user does not exist at the domain specified in the Request-URI. methodNotallowed - The method specified in the Request-Line is understood, but not allowed for the address identified by the Request-URI. notAcceptable - The resource identified by the request is only capable of generating response entities that have content characteristics not acceptable according to the Accept header field sent in the request. proxyAuthenticationRequired - This code is similar to 401 (Unauthorized), but indicates that the client MUST first authenticate itself with the proxy. requestTimeout - The server could not produce a response within a suitable amount of time, for example, if it could not determine the location of the user in time. conflict - This is used to indicate that the request could not be completed due to a conflict with the current state of the resource. gone - The requested resource is no longer available at the server and no forwarding address is known. lengthRequired - The server is refusing to process a request because the request entity-body is larger than the server is willing or able to process. requestEntityTooLarge - The server is refusing to process a request because the request entity-body is larger than the server is willing or able to process. requestURITooLarge - The server is refusing to service the request because the Request-URI is longer than the server is willing to interpret. unsupportedMediaType - The server is refusing to service the request because the message body of the request is in a format not supported by the server for the requested method. badExtension - The server did not understand the protocol extension specified in a Proxy-Require or Require header field. temporarilyNotAvailable - The callee's end system was contacted successfully but the callee is currently unavailable. callLegDoesNotExist - This status indicates that the UAS received a request that does not match any existing dialog or transaction. loopDetected - The server has detected a loop. tooManyHops - The server received a request that contains a Max-Forwards header field with the value zero. addressIncomplete - The server received a request with a Request-URI that was incomplete. ambiguous - The Request-URI was ambiguous. busy - The callee's end system was contacted successfully, but the callee is currently not willing or able to take additional calls at this end system. internalServerError - The server encountered an unexpected condition that prevented it from fulfilling the request. notImplemented - The server does not support the functionality required to fulfill the request. badGateway - The server, while acting as a gateway or proxy, received an invalid response from the downstream server it accessed in attempting to fulfill the request. serviceUnavailable - The server is temporarily unable to process the request due to a temporary overloading or maintenance of the server. serverTimeout - The server did not receive a timely response from an external server it accessed in attempting to process the request. versionNotSupported - The server does not support, or refuses to support, the SIP protocol version that was used in the request. busyEverywhere - The callee's end system was contacted successfully but the callee is busy and does not wish to take the call at this time. decline - The callee's machine was successfully contacted but the user explicitly does not wish to or cannot participate. doesNotExistAnywhere - The server has authoritative information that the user indicated in the Request-URI does not exist anywhere. sessionNotAcceptable - The user's agent was contacted successfully but some aspects of the session description such as the requested media, bandwidth, or addressing style were not acceptable.")
cLQd11SipCacConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 9, 1), )
if mibBuilder.loadTexts: cLQd11SipCacConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLQd11SipCacConfigTable.setDescription('This table contains the information about the SIP CAC configuration corresponding to the dot11 bands of the APs that have joined the controller. The parameters specify how the SIP call reserves CAC bandwidth.')
cLQd11SipCacConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 9, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApDot11IfType"))
if mibBuilder.loadTexts: cLQd11SipCacConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLQd11SipCacConfigEntry.setDescription('An entry containing SIP CAC configuration for a particular type of wireless interface.')
cLQd11SipCacConfigCodecType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("userDefined", 1), ("g711", 2), ("g729", 3))).clone('g711')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11SipCacConfigCodecType.setStatus('current')
if mibBuilder.loadTexts: cLQd11SipCacConfigCodecType.setDescription('This object specifies the configured codec for SIP Cac configuration of the dot11 band for the APs associated with this controller. Codec determines the bandwidth to be reserved for voice call. userDefined - User defines the bandwidth, cLQd11SipCacConfigBw has to be configured g711 - standard Codec G711 g729 - standard Codec G729')
cLQd11SipCacConfigBw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 9, 1, 1, 2), Unsigned32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11SipCacConfigBw.setStatus('current')
if mibBuilder.loadTexts: cLQd11SipCacConfigBw.setDescription("This object specifies the configured bandwidth in kbps for SIP CAC configuration of the dot11 band for the APs associated with this controller. This is configurable only if cLQd11SipCacConfigCodecType is 'userDefined'")
cLQd11SipCacConfigVoiceSampleSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 9, 1, 1, 3), Unsigned32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLQd11SipCacConfigVoiceSampleSize.setStatus('current')
if mibBuilder.loadTexts: cLQd11SipCacConfigVoiceSampleSize.setDescription('This object specifies the configured voice sample size in milliseconds for SIP Cac configuration of the dot11 band for the APs associated with this controller.')
ciscoLwappVoipCallFailureNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 524, 1, 10, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLwappVoipCallFailureNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappVoipCallFailureNotifEnabled.setDescription("The object to control the generation of ciscoLwappVoipCallFailureNotif notification. A value of 'true' indicates that the agent generates ciscoLwappVoipCallFailureNotif notification. A value of 'false' indicates that the agent doesn't generate ciscoLwappVoipCallFailureNotif notification.")
ciscoLwappVoipCallFailureNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 524, 0, 1)).setObjects(("CISCO-LWAPP-QOS-MIB", "cLQVoiceClientLastCallFailureReasonCode"), ("CISCO-LWAPP-QOS-MIB", "cLQVoiceClientCallingNumber"), ("CISCO-LWAPP-QOS-MIB", "cLQVoiceClientLastCalledNumber"), ("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfType"))
if mibBuilder.loadTexts: ciscoLwappVoipCallFailureNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappVoipCallFailureNotif.setDescription('This notification is generated when ever a VOIP call failure occurs.')
ciscoLwappQosMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 1))
ciscoLwappQosMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 2))
ciscoLwappQosMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 1, 1)).setObjects(("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11aConfigGroup"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11bConfigGroup"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11WlanConfigGroup"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11CacStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosMIBCompliance = ciscoLwappQosMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappQosMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappQosMIB module.')
ciscoLwappQosMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 1, 2)).setObjects(("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11aConfigGroup"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11bConfigGroup"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11WlanConfigGroup"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11CacStatsGroup"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11aConfigGroupSup1"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11bConfigGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosMIBComplianceRev1 = ciscoLwappQosMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappQosMIBComplianceRev1.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappQosMIB module.')
ciscoLwappQosMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 1, 3)).setObjects(("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11aConfigGroup"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11bConfigGroup"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11WlanConfigGroup"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11CacStatsGroup"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11aConfigGroupSup1"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11bConfigGroupSup1"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11aConfigGroupSup2"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11bConfigGroupSup2"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11SipCacStatsGroup"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11SipConfigGroup"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11VoiceStatsGroup"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11VoiceConfigGroup"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosDot11VoiceNotifGroup"), ("CISCO-LWAPP-QOS-MIB", "ciscoLwappQosConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosMIBComplianceRev2 = ciscoLwappQosMIBComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappQosMIBComplianceRev2.setDescription('Implementation of this group is mandatory only for the platforms which implement the ciscoLwappQosMIB module.')
ciscoLwappQosDot11aConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 2, 1)).setObjects(("CISCO-LWAPP-QOS-MIB", "cLQd11aVoiceAdmCtrlSupport"), ("CISCO-LWAPP-QOS-MIB", "cLQd11aVoiceMaxAdmBandwidth"), ("CISCO-LWAPP-QOS-MIB", "cLQd11aVoiceMaxRoamBandwidth"), ("CISCO-LWAPP-QOS-MIB", "cLQd11aVideoAdmCtrlSupport"), ("CISCO-LWAPP-QOS-MIB", "cLQd11aVideoMaxAdmBandwidth"), ("CISCO-LWAPP-QOS-MIB", "cLQd11aVideoMaxRoamBandwidth"), ("CISCO-LWAPP-QOS-MIB", "cLQd11aGprProbeInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosDot11aConfigGroup = ciscoLwappQosDot11aConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappQosDot11aConfigGroup.setDescription('This collection of objects represents the quality-of-service parameters 802.11a networks.')
ciscoLwappQosDot11bConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 2, 2)).setObjects(("CISCO-LWAPP-QOS-MIB", "cLQd11bVoiceAdmCtrlSupport"), ("CISCO-LWAPP-QOS-MIB", "cLQd11bVoiceMaxAdmBandwidth"), ("CISCO-LWAPP-QOS-MIB", "cLQd11bVoiceMaxRoamBandwidth"), ("CISCO-LWAPP-QOS-MIB", "cLQd11bVideoAdmCtrlSupport"), ("CISCO-LWAPP-QOS-MIB", "cLQd11bVideoMaxAdmBandwidth"), ("CISCO-LWAPP-QOS-MIB", "cLQd11bVideoMaxRoamBandwidth"), ("CISCO-LWAPP-QOS-MIB", "cLQd11bGprProbeInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosDot11bConfigGroup = ciscoLwappQosDot11bConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappQosDot11bConfigGroup.setDescription('This collection of objects represents the quality-of-service parameters 802.11b networks.')
ciscoLwappQosDot11WlanConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 2, 3)).setObjects(("CISCO-LWAPP-QOS-MIB", "cLQd11GprSupport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosDot11WlanConfigGroup = ciscoLwappQosDot11WlanConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappQosDot11WlanConfigGroup.setDescription('This collection of objects represents the quality-of-services parameters on a particular WLAN.')
ciscoLwappQosDot11CacStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 2, 4)).setObjects(("CISCO-LWAPP-QOS-MIB", "cLQd11CacVoiceBwInUse"), ("CISCO-LWAPP-QOS-MIB", "cLQd11CacVideoBwInUse"), ("CISCO-LWAPP-QOS-MIB", "cLQd11CacVoiceCallsInProgress"), ("CISCO-LWAPP-QOS-MIB", "cLQd11CacRoamVoiceCallsInProg"), ("CISCO-LWAPP-QOS-MIB", "cLQd11CacTotalVoiceCallsAP"), ("CISCO-LWAPP-QOS-MIB", "cLQd11CacTotalRoamCallsAP"), ("CISCO-LWAPP-QOS-MIB", "cLQd11CacVoiceCallsRejectedAP"), ("CISCO-LWAPP-QOS-MIB", "cLQd11CacRoamCallsRejectedAP"), ("CISCO-LWAPP-QOS-MIB", "cLQd11CacRejCallsInsufBw"), ("CISCO-LWAPP-QOS-MIB", "cLQd11CacRejCallsBadParams"), ("CISCO-LWAPP-QOS-MIB", "cLQd11CacRejCallsPhyRate"), ("CISCO-LWAPP-QOS-MIB", "cLQd11CacRejCallsQosPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosDot11CacStatsGroup = ciscoLwappQosDot11CacStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappQosDot11CacStatsGroup.setDescription('This collection of objects provide the call admission control statistics observed on the dot11 interfaces of an AP.')
ciscoLwappQosDot11aConfigGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 2, 5)).setObjects(("CISCO-LWAPP-QOS-MIB", "cLQd11aVoiceCtrl"), ("CISCO-LWAPP-QOS-MIB", "cLQd11aExpeditedBw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosDot11aConfigGroupSup1 = ciscoLwappQosDot11aConfigGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappQosDot11aConfigGroupSup1.setDescription('This collection of objects represents the quality-of-service parameters 802.11a networks.')
ciscoLwappQosDot11bConfigGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 2, 6)).setObjects(("CISCO-LWAPP-QOS-MIB", "cLQd11bVoiceCtrl"), ("CISCO-LWAPP-QOS-MIB", "cLQd11bExpeditedBw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosDot11bConfigGroupSup1 = ciscoLwappQosDot11bConfigGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappQosDot11bConfigGroupSup1.setDescription('This collection of objects represents the quality-of-service parameters 802.11b networks.')
ciscoLwappQosDot11aConfigGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 2, 7)).setObjects(("CISCO-LWAPP-QOS-MIB", "cLQd11aEdcaProfile"), ("CISCO-LWAPP-QOS-MIB", "cLQd11aMacOptimization"), ("CISCO-LWAPP-QOS-MIB", "cLQd11aMaxCallLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosDot11aConfigGroupSup2 = ciscoLwappQosDot11aConfigGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappQosDot11aConfigGroupSup2.setDescription('This collection of objects represents the quality-of-service parameters 802.11a networks.')
ciscoLwappQosDot11bConfigGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 2, 8)).setObjects(("CISCO-LWAPP-QOS-MIB", "cLQd11bEdcaProfile"), ("CISCO-LWAPP-QOS-MIB", "cLQd11bMacOptimization"), ("CISCO-LWAPP-QOS-MIB", "cLQd11bMaxCallLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosDot11bConfigGroupSup2 = ciscoLwappQosDot11bConfigGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappQosDot11bConfigGroupSup2.setDescription('This collection of objects represents the quality-of-service parameters 802.11b networks.')
ciscoLwappQosDot11SipCacStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 2, 9)).setObjects(("CISCO-LWAPP-QOS-MIB", "cLQd11SipCacNonRoamCallsInProgress"), ("CISCO-LWAPP-QOS-MIB", "cLQd11SipCacRoamCallsInProg"), ("CISCO-LWAPP-QOS-MIB", "cLQd11SipCacTotalNonRoamCallsAP"), ("CISCO-LWAPP-QOS-MIB", "cLQd11SipCacTotalRoamCallsAP"), ("CISCO-LWAPP-QOS-MIB", "cLQd11SipCacNonRoamCallsRejectedInSuffBw"), ("CISCO-LWAPP-QOS-MIB", "cLQd11SipCacRoamCallsRejectedInSuffBw"), ("CISCO-LWAPP-QOS-MIB", "cLQd11SipCacNonRoamCallsRejectedMaxLimit"), ("CISCO-LWAPP-QOS-MIB", "cLQd11SipCacRoamCallsRejectedMaxLimit"), ("CISCO-LWAPP-QOS-MIB", "cLQd11SipCacRejCallsQosPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosDot11SipCacStatsGroup = ciscoLwappQosDot11SipCacStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappQosDot11SipCacStatsGroup.setDescription('This collection of objects provide the SIP call admission control statistics observed on the dot11 interfaces of an AP.')
ciscoLwappQosDot11SipConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 2, 10)).setObjects(("CISCO-LWAPP-QOS-MIB", "cLQd11SipCacConfigCodecType"), ("CISCO-LWAPP-QOS-MIB", "cLQd11SipCacConfigBw"), ("CISCO-LWAPP-QOS-MIB", "cLQd11SipCacConfigVoiceSampleSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosDot11SipConfigGroup = ciscoLwappQosDot11SipConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappQosDot11SipConfigGroup.setDescription('This collection of objects represents the SIP call admission control configuration parameters.')
ciscoLwappQosDot11VoiceStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 2, 11)).setObjects(("CISCO-LWAPP-QOS-MIB", "cLQd11VoiceCallCounts"), ("CISCO-LWAPP-QOS-MIB", "cLQd11CacVoiceCallTimePeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosDot11VoiceStatsGroup = ciscoLwappQosDot11VoiceStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappQosDot11VoiceStatsGroup.setDescription('This collection of objects represents the Voice statistics parameters.')
ciscoLwappQosDot11VoiceConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 2, 12)).setObjects(("CISCO-LWAPP-QOS-MIB", "cLQVoiceWlanConfigDetectVoipCallFailure"), ("CISCO-LWAPP-QOS-MIB", "cLQVoiceClientCallingNumber"), ("CISCO-LWAPP-QOS-MIB", "cLQVoiceClientLastCalledNumber"), ("CISCO-LWAPP-QOS-MIB", "cLQVoiceClientLastCallFailureReasonCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosDot11VoiceConfigGroup = ciscoLwappQosDot11VoiceConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappQosDot11VoiceConfigGroup.setDescription('This collection of objects represents the Voice statistics parameters.')
ciscoLwappQosDot11VoiceNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 2, 13)).setObjects(("CISCO-LWAPP-QOS-MIB", "ciscoLwappVoipCallFailureNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosDot11VoiceNotifGroup = ciscoLwappQosDot11VoiceNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappQosDot11VoiceNotifGroup.setDescription('This collection of objects represents the Voice notification parameters.')
ciscoLwappQosConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 524, 2, 2, 14)).setObjects(("CISCO-LWAPP-QOS-MIB", "ciscoLwappVoipCallFailureNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappQosConfigGroup = ciscoLwappQosConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappQosConfigGroup.setDescription('This collection of objects represents the quality-of-service configuration parameters.')
mibBuilder.exportSymbols("CISCO-LWAPP-QOS-MIB", cLQVoiceWlanConfig=cLQVoiceWlanConfig, ciscoLwappQosDot11aConfigGroup=ciscoLwappQosDot11aConfigGroup, cLQd11bVideoMaxAdmBandwidth=cLQd11bVideoMaxAdmBandwidth, cLQd11bVoiceMaxAdmBandwidth=cLQd11bVoiceMaxAdmBandwidth, cLQd11aVideoMaxRoamBandwidth=cLQd11aVideoMaxRoamBandwidth, cLQVoiceClient=cLQVoiceClient, cLQd11SipCacNonRoamCallsInProgress=cLQd11SipCacNonRoamCallsInProgress, cLQd11SipCacRoamCallsRejectedMaxLimit=cLQd11SipCacRoamCallsRejectedMaxLimit, cLQd11SipCacConfigVoiceSampleSize=cLQd11SipCacConfigVoiceSampleSize, cLQd11CACStatsEntry=cLQd11CACStatsEntry, ciscoLwappQosDot11bConfigGroupSup2=ciscoLwappQosDot11bConfigGroupSup2, ciscoLwappQosDot11aConfigGroupSup2=ciscoLwappQosDot11aConfigGroupSup2, ciscoLwappQosDot11aConfigGroupSup1=ciscoLwappQosDot11aConfigGroupSup1, cLQd11bCACConfig=cLQd11bCACConfig, cLQd11bVideoAdmCtrlSupport=cLQd11bVideoAdmCtrlSupport, cLQVoiceClientCallingNumber=cLQVoiceClientCallingNumber, cLQd11SipCacTotalRoamCallsAP=cLQd11SipCacTotalRoamCallsAP, ciscoLwappQosMIBNotifs=ciscoLwappQosMIBNotifs, cLQd11SipCacTotalNonRoamCallsAP=cLQd11SipCacTotalNonRoamCallsAP, cLQd11GprEntry=cLQd11GprEntry, cLQVoiceClientLastCalledNumber=cLQVoiceClientLastCalledNumber, cLQVoiceWlanConfigEntry=cLQVoiceWlanConfigEntry, cLQd11CacVoiceCallsInProgress=cLQd11CacVoiceCallsInProgress, cLQd11bVideoMaxRoamBandwidth=cLQd11bVideoMaxRoamBandwidth, ciscoLwappQosDot11VoiceConfigGroup=ciscoLwappQosDot11VoiceConfigGroup, cLQd11GprConfig=cLQd11GprConfig, cLQVoiceClientTable=cLQVoiceClientTable, cLQd11CACStats=cLQd11CACStats, ciscoLwappQosMIBObjects=ciscoLwappQosMIBObjects, cLQd11CACStatsTable=cLQd11CACStatsTable, cLQd11GprSupport=cLQd11GprSupport, cLQVoiceWlanConfigTable=cLQVoiceWlanConfigTable, cLQd11CacTotalVoiceCallsAP=cLQd11CacTotalVoiceCallsAP, cLQd11VoiceStatsTable=cLQd11VoiceStatsTable, cLQd11bExpeditedBw=cLQd11bExpeditedBw, cLQd11SipCacConfigEntry=cLQd11SipCacConfigEntry, ciscoLwappQosMIBComplianceRev2=ciscoLwappQosMIBComplianceRev2, cLQd11SipCacRoamCallsInProg=cLQd11SipCacRoamCallsInProg, cLQd11bMacOptimization=cLQd11bMacOptimization, cLQd11SipCacConfigBw=cLQd11SipCacConfigBw, cLQd11aVoiceAdmCtrlSupport=cLQd11aVoiceAdmCtrlSupport, cLQEntConfConfig=cLQEntConfConfig, cLQd11VoiceStats=cLQd11VoiceStats, cLQd11bGprProbeInterval=cLQd11bGprProbeInterval, cLQd11SipCacRejCallsQosPolicy=cLQd11SipCacRejCallsQosPolicy, ciscoLwappQosDot11SipConfigGroup=ciscoLwappQosDot11SipConfigGroup, ciscoLwappQosDot11SipCacStatsGroup=ciscoLwappQosDot11SipCacStatsGroup, cLQVoiceClientLastCallFailureReasonCode=cLQVoiceClientLastCallFailureReasonCode, PYSNMP_MODULE_ID=ciscoLwappQosMIB, cLQd11bMaxCallLimit=cLQd11bMaxCallLimit, cLQd11CacVoiceCallsRejectedAP=cLQd11CacVoiceCallsRejectedAP, ciscoLwappVoipCallFailureNotif=ciscoLwappVoipCallFailureNotif, cLQVoiceClientEntry=cLQVoiceClientEntry, cLQd11GprTable=cLQd11GprTable, cLQd11CacTotalRoamCallsAP=cLQd11CacTotalRoamCallsAP, cLQd11bEdcaProfile=cLQd11bEdcaProfile, cLQVoiceWlanConfigDetectVoipCallFailure=cLQVoiceWlanConfigDetectVoipCallFailure, cLQd11CacRejCallsQosPolicy=cLQd11CacRejCallsQosPolicy, cLQd11SipCacConfig=cLQd11SipCacConfig, cLQd11VoiceCallCounts=cLQd11VoiceCallCounts, cLQd11aVoiceMaxRoamBandwidth=cLQd11aVoiceMaxRoamBandwidth, ciscoLwappQosDot11WlanConfigGroup=ciscoLwappQosDot11WlanConfigGroup, cLQd11aVoiceMaxAdmBandwidth=cLQd11aVoiceMaxAdmBandwidth, ciscoLwappVoipCallFailureNotifEnabled=ciscoLwappVoipCallFailureNotifEnabled, ciscoLwappQosDot11bConfigGroupSup1=ciscoLwappQosDot11bConfigGroupSup1, cLQd11bVoiceCtrl=cLQd11bVoiceCtrl, cLQd11CacRoamVoiceCallsInProg=cLQd11CacRoamVoiceCallsInProg, cLQd11aVideoMaxAdmBandwidth=cLQd11aVideoMaxAdmBandwidth, ciscoLwappQosMIB=ciscoLwappQosMIB, cLQConfigObjects=cLQConfigObjects, cLQd11CacVoiceBwInUse=cLQd11CacVoiceBwInUse, ciscoLwappQosMIBConform=ciscoLwappQosMIBConform, cLQd11CacRejCallsInsufBw=cLQd11CacRejCallsInsufBw, cLQd11aVoiceCtrl=cLQd11aVoiceCtrl, ciscoLwappQosDot11bConfigGroup=ciscoLwappQosDot11bConfigGroup, cLQd11SipCacConfigTable=cLQd11SipCacConfigTable, ciscoLwappQosConfigGroup=ciscoLwappQosConfigGroup, cLQd11aEdcaProfile=cLQd11aEdcaProfile, cLQd11CacRejCallsBadParams=cLQd11CacRejCallsBadParams, cLQd11SipCacNonRoamCallsRejectedMaxLimit=cLQd11SipCacNonRoamCallsRejectedMaxLimit, ciscoLwappQosDot11CacStatsGroup=ciscoLwappQosDot11CacStatsGroup, ciscoLwappQosMIBCompliance=ciscoLwappQosMIBCompliance, ciscoLwappQosMIBCompliances=ciscoLwappQosMIBCompliances, cLQd11aVideoAdmCtrlSupport=cLQd11aVideoAdmCtrlSupport, cLQd11aMacOptimization=cLQd11aMacOptimization, cLQd11CacRejCallsPhyRate=cLQd11CacRejCallsPhyRate, cLQd11CacRoamCallsRejectedAP=cLQd11CacRoamCallsRejectedAP, cLQd11SipCacNonRoamCallsRejectedInSuffBw=cLQd11SipCacNonRoamCallsRejectedInSuffBw, cLQd11aCACConfig=cLQd11aCACConfig, ciscoLwappQosDot11VoiceNotifGroup=ciscoLwappQosDot11VoiceNotifGroup, cLQd11aMaxCallLimit=cLQd11aMaxCallLimit, ciscoLwappQosMIBGroups=ciscoLwappQosMIBGroups, cLQd11aGprProbeInterval=cLQd11aGprProbeInterval, cLQd11VoiceStatsEntry=cLQd11VoiceStatsEntry, cLQd11bVoiceAdmCtrlSupport=cLQd11bVoiceAdmCtrlSupport, cLQd11bVoiceMaxRoamBandwidth=cLQd11bVoiceMaxRoamBandwidth, cLQd11CacVideoBwInUse=cLQd11CacVideoBwInUse, ciscoLwappQosDot11VoiceStatsGroup=ciscoLwappQosDot11VoiceStatsGroup, cLQd11aExpeditedBw=cLQd11aExpeditedBw, cLQd11SipCacRoamCallsRejectedInSuffBw=cLQd11SipCacRoamCallsRejectedInSuffBw, cLQd11CacVoiceCallTimePeriod=cLQd11CacVoiceCallTimePeriod, cLQd11SipCacConfigCodecType=cLQd11SipCacConfigCodecType, ciscoLwappQosMIBComplianceRev1=ciscoLwappQosMIBComplianceRev1)
