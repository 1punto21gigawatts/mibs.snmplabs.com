#
# PySNMP MIB module ADAPTECSCSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADAPTECSCSI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:13:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Counter32, Gauge32, ModuleIdentity, Unsigned32, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, MibIdentifier, TimeTicks, NotificationType, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter32", "Gauge32", "ModuleIdentity", "Unsigned32", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "MibIdentifier", "TimeTicks", "NotificationType", "IpAddress", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DmiCounter(Counter32):
    pass

class DmiInteger(Integer32):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiComponentIndex(Integer32):
    pass

adaptec = MibIdentifier((1, 3, 6, 1, 4, 1, 795))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2))
scsi = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 6))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 6, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: tComponentid.setDescription('This group defines the attributes common to all components. This group is required.')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 1, 1), ).setIndexNames((0, "ADAPTECSCSI-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: eComponentid.setDescription('')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a1Manufacturer.setDescription('Manufacturer of this system.')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
if mibBuilder.loadTexts: a1Product.setDescription('Product name for this system.')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
if mibBuilder.loadTexts: a1Version.setDescription('Version number of this system.')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a1SerialNumber.setDescription('Serial number for this system.')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 1, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
if mibBuilder.loadTexts: a1Installation.setDescription('The time and date for the last time this component was installed ')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vTheVerificationIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
if mibBuilder.loadTexts: a1Verify.setDescription('A code that provides a level of verification that the component is still installed and working.')
tOperationGroup = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 2), )
if mibBuilder.loadTexts: tOperationGroup.setStatus('mandatory')
if mibBuilder.loadTexts: tOperationGroup.setDescription('The Operation group controls the stystem. ')
eOperationGroup = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 2, 1), ).setIndexNames((0, "ADAPTECSCSI-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eOperationGroup.setStatus('mandatory')
if mibBuilder.loadTexts: eOperationGroup.setDescription('')
a2PollDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 2, 1, 1), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2PollDevices.setStatus('mandatory')
if mibBuilder.loadTexts: a2PollDevices.setDescription('Writing a non-zero value to this variable causes an immediate one time poll of all currently known devices. This variable will always return the value zero when it is read.')
a2ScanDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 2, 1, 2), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2ScanDevices.setStatus('mandatory')
if mibBuilder.loadTexts: a2ScanDevices.setDescription('Writing a non-zero value to this variable causes an immediate one time scan of the SCSI busses for all possible devices. This variable will always return the value zero when it is read.')
a2IndicationControl = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2IndicationControl.setStatus('mandatory')
if mibBuilder.loadTexts: a2IndicationControl.setDescription('Controls whether any indications are enabled')
tHostAdapterGroup = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 3), )
if mibBuilder.loadTexts: tHostAdapterGroup.setStatus('mandatory')
if mibBuilder.loadTexts: tHostAdapterGroup.setDescription('The Host Adapter Description group describes the logical Host Adapters installed in the system . ')
eHostAdapterGroup = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 3, 1), ).setIndexNames((0, "ADAPTECSCSI-MIB", "DmiComponentIndex"), (0, "ADAPTECSCSI-MIB", "a3HostAdapterIndex"))
if mibBuilder.loadTexts: eHostAdapterGroup.setStatus('mandatory')
if mibBuilder.loadTexts: eHostAdapterGroup.setDescription('')
a3HostAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3HostAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3HostAdapterIndex.setDescription('An index into the host adatper table')
a3HostAdapterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 3, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3HostAdapterDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a3HostAdapterDescription.setDescription('The description string returned from an SCSI Inquiry Command.')
a3HostAdapterVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 3, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3HostAdapterVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a3HostAdapterVersion.setDescription('The version string returned from an SCSI Inquiry Command.')
a3ChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 3, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ChannelCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ChannelCount.setDescription('The number of SCSI channels provided by this host adapter.')
a3Errorcontrolid = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 3, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Errorcontrolid.setStatus('mandatory')
if mibBuilder.loadTexts: a3Errorcontrolid.setDescription('Identifies the row in the errorControl table providing error control & status for this group.')
a3EventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vDiscovered", 0), ("vChanged", 1), ("vFailed", 2), ("vRecovered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3EventStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3EventStatus.setDescription('Identifies the reason an indication was sent.')
tLogicalUnitGroup = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4), )
if mibBuilder.loadTexts: tLogicalUnitGroup.setStatus('mandatory')
if mibBuilder.loadTexts: tLogicalUnitGroup.setDescription('The logical units attached to host adapters, ')
eLogicalUnitGroup = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4, 1), ).setIndexNames((0, "ADAPTECSCSI-MIB", "DmiComponentIndex"), (0, "ADAPTECSCSI-MIB", "a4HostAdapterIndex"), (0, "ADAPTECSCSI-MIB", "a4ScsiId"), (0, "ADAPTECSCSI-MIB", "a4LogicalUnitId"))
if mibBuilder.loadTexts: eLogicalUnitGroup.setStatus('mandatory')
if mibBuilder.loadTexts: eLogicalUnitGroup.setDescription('')
a4HostAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4HostAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a4HostAdapterIndex.setDescription('The index of the host adapter to which this Logical Unit is attached.')
a4ScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4ScsiId.setStatus('mandatory')
if mibBuilder.loadTexts: a4ScsiId.setDescription('The SCSI target ID of the Logical Unit')
a4LogicalUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4LogicalUnitId.setStatus('mandatory')
if mibBuilder.loadTexts: a4LogicalUnitId.setDescription('The ID of this Logical Unit.')
a4LogicalUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vDirectaccess", 1), ("vTape", 2), ("vPrinter", 3), ("vProcessor", 4), ("vWriteonce", 5), ("vCdrom", 6), ("vScanner", 7), ("vOpticalmemory", 8), ("vJukebox", 9), ("vComdevice", 10), ("vHostadapter", 11), ("vOther", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4LogicalUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: a4LogicalUnitType.setDescription('The type of this Logical Unit.')
a4LogicalUnitDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4LogicalUnitDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a4LogicalUnitDescription.setDescription('The description string returned from an SCSI Inquiry Command.')
a4Errorcontrolid = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Errorcontrolid.setStatus('mandatory')
if mibBuilder.loadTexts: a4Errorcontrolid.setDescription('Identifies the row in the errorControl table providing error control & status for this group.')
a4EventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vDiscovered", 0), ("vChanged", 1), ("vFailed", 2), ("vRecovered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4EventStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a4EventStatus.setDescription('Identifies the reason an indication was sent.')
tErrorcontrol = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5), )
if mibBuilder.loadTexts: tErrorcontrol.setStatus('mandatory')
if mibBuilder.loadTexts: tErrorcontrol.setDescription('Indication control and status for the parent group')
eErrorcontrol = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5, 1), ).setIndexNames((0, "ADAPTECSCSI-MIB", "DmiComponentIndex"), (0, "ADAPTECSCSI-MIB", "a5Selfid"))
if mibBuilder.loadTexts: eErrorcontrol.setStatus('mandatory')
if mibBuilder.loadTexts: eErrorcontrol.setDescription('')
a5Selfid = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Selfid.setStatus('mandatory')
if mibBuilder.loadTexts: a5Selfid.setDescription('Instance identifer. A unique number that identifies this row.')
a5Fatalcount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5, 1, 2), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Fatalcount.setStatus('mandatory')
if mibBuilder.loadTexts: a5Fatalcount.setDescription('Count of all fatal errors since system startup.')
a5Majorcount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5, 1, 3), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Majorcount.setStatus('mandatory')
if mibBuilder.loadTexts: a5Majorcount.setDescription('Count of all major errors since system startup.')
a5Warningcount = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5, 1, 4), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Warningcount.setStatus('mandatory')
if mibBuilder.loadTexts: a5Warningcount.setDescription('Count of all warning errors since system startup.')
a5Errstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vOk", 0), ("vWarning", 1), ("vMajor", 2), ("vFatal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Errstatus.setStatus('mandatory')
if mibBuilder.loadTexts: a5Errstatus.setDescription('current error status')
a5Errstatustype = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vPost", 0), ("vRuntime", 1), ("vDiagnosticTest", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Errstatustype.setStatus('mandatory')
if mibBuilder.loadTexts: a5Errstatustype.setDescription('Indicates the type of detection that set the current error status.')
a5Indicationcontrol = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a5Indicationcontrol.setStatus('mandatory')
if mibBuilder.loadTexts: a5Indicationcontrol.setDescription('Enables or disables generation of indications')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 99), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: tMiftomib.setDescription('This group defines attributes required for DMI to SNMP translati n.')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 99, 1), ).setIndexNames((0, "ADAPTECSCSI-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: eMiftomib.setDescription('')
a99MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 99, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibName.setStatus('mandatory')
if mibBuilder.loadTexts: a99MibName.setDescription('The MIB name that defines this MIF')
a99MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 99, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibOid.setStatus('mandatory')
if mibBuilder.loadTexts: a99MibOid.setDescription('The MIB Object Identifier that corresponds to this MIF')
a99DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 99, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a99DisableTrap.setStatus('mandatory')
if mibBuilder.loadTexts: a99DisableTrap.setDescription('This attribute can be changed to disable sending of traps from this component')
tTrapGroup = MibTable((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999), )
if mibBuilder.loadTexts: tTrapGroup.setStatus('mandatory')
if mibBuilder.loadTexts: tTrapGroup.setDescription('This group defines attributes needed for Trap definition. This group does not exist in MIF file')
eTrapGroup = MibTableRow((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1), ).setIndexNames((0, "ADAPTECSCSI-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eTrapGroup.setStatus('mandatory')
if mibBuilder.loadTexts: eTrapGroup.setDescription('')
a9999ErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorTime.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ErrorTime.setDescription('The Date & Time when the error occured')
a9999ErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ErrorStatus.setDescription('Error Status Code')
a9999ErrorGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ErrorGroupId.setDescription('Group ID of the errorControl Group')
a9999ErrorInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ErrorInstanceId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ErrorInstanceId.setDescription('Instance ID of the errorControl Group')
a9999ComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ComponentId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ComponentId.setDescription('Component ID of the component that caused this error')
a9999GroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999GroupId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999GroupId.setDescription('Group ID of the Group that caused this error')
a9999InstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999InstanceId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999InstanceId.setDescription('Instance ID of the Group that caused this error')
a9999VendorCode1 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorCode1.setStatus('mandatory')
if mibBuilder.loadTexts: a9999VendorCode1.setDescription('Vendor specific code 1')
a9999VendorCode2 = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorCode2.setStatus('mandatory')
if mibBuilder.loadTexts: a9999VendorCode2.setDescription('Vendor specific code 2')
a9999VendorText = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999VendorText.setStatus('mandatory')
if mibBuilder.loadTexts: a9999VendorText.setDescription('Vendor specific octet string info')
a9999ParentGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ParentGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ParentGroupId.setDescription('Group ID of parent of Group that caused this error')
a9999ParentInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9999ParentInstanceId.setStatus('mandatory')
if mibBuilder.loadTexts: a9999ParentInstanceId.setDescription('Instance ID of parent of Group that caused this error')
AdaptecEventError = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 6, 1, 9999, 1) + (0,1)).setObjects(("ADAPTECSCSI-MIB", "a9999ErrorTime"), ("ADAPTECSCSI-MIB", "a9999ErrorStatus"), ("ADAPTECSCSI-MIB", "a9999ErrorGroupId"), ("ADAPTECSCSI-MIB", "a9999ErrorInstanceId"), ("ADAPTECSCSI-MIB", "a9999ComponentId"), ("ADAPTECSCSI-MIB", "a9999GroupId"), ("ADAPTECSCSI-MIB", "a9999InstanceId"), ("ADAPTECSCSI-MIB", "a9999VendorCode1"), ("ADAPTECSCSI-MIB", "a9999VendorCode2"), ("ADAPTECSCSI-MIB", "a9999VendorText"), ("ADAPTECSCSI-MIB", "a9999ParentGroupId"), ("ADAPTECSCSI-MIB", "a9999ParentInstanceId"))
if mibBuilder.loadTexts: AdaptecEventError.setDescription('DMI Service Layer generated event for Adaptec Scsi')
mibBuilder.exportSymbols("ADAPTECSCSI-MIB", a1Verify=a1Verify, a9999ErrorGroupId=a9999ErrorGroupId, eErrorcontrol=eErrorcontrol, a5Errstatustype=a5Errstatustype, a5Indicationcontrol=a5Indicationcontrol, a9999InstanceId=a9999InstanceId, a4HostAdapterIndex=a4HostAdapterIndex, eOperationGroup=eOperationGroup, a5Errstatus=a5Errstatus, eComponentid=eComponentid, dmtfGroups=dmtfGroups, a5Selfid=a5Selfid, a9999GroupId=a9999GroupId, a4ScsiId=a4ScsiId, a3HostAdapterDescription=a3HostAdapterDescription, a4EventStatus=a4EventStatus, tMiftomib=tMiftomib, a1SerialNumber=a1SerialNumber, tHostAdapterGroup=tHostAdapterGroup, a5Warningcount=a5Warningcount, DmiComponentIndex=DmiComponentIndex, scsi=scsi, a9999ErrorTime=a9999ErrorTime, tOperationGroup=tOperationGroup, eLogicalUnitGroup=eLogicalUnitGroup, a2PollDevices=a2PollDevices, a9999ErrorInstanceId=a9999ErrorInstanceId, a9999VendorText=a9999VendorText, a99MibOid=a99MibOid, eHostAdapterGroup=eHostAdapterGroup, adaptec=adaptec, DmiCounter=DmiCounter, a3EventStatus=a3EventStatus, a2ScanDevices=a2ScanDevices, a1Manufacturer=a1Manufacturer, a4LogicalUnitId=a4LogicalUnitId, a99DisableTrap=a99DisableTrap, a1Version=a1Version, a3Errorcontrolid=a3Errorcontrolid, a9999ComponentId=a9999ComponentId, a9999ParentGroupId=a9999ParentGroupId, DmiInteger=DmiInteger, a4LogicalUnitDescription=a4LogicalUnitDescription, a2IndicationControl=a2IndicationControl, a4Errorcontrolid=a4Errorcontrolid, a5Majorcount=a5Majorcount, a9999VendorCode1=a9999VendorCode1, eTrapGroup=eTrapGroup, AdaptecEventError=AdaptecEventError, products=products, a3ChannelCount=a3ChannelCount, a9999ParentInstanceId=a9999ParentInstanceId, a3HostAdapterIndex=a3HostAdapterIndex, a1Product=a1Product, a1Installation=a1Installation, eMiftomib=eMiftomib, tErrorcontrol=tErrorcontrol, a99MibName=a99MibName, DmiDisplaystring=DmiDisplaystring, a4LogicalUnitType=a4LogicalUnitType, tComponentid=tComponentid, a5Fatalcount=a5Fatalcount, tTrapGroup=tTrapGroup, a9999VendorCode2=a9999VendorCode2, a3HostAdapterVersion=a3HostAdapterVersion, a9999ErrorStatus=a9999ErrorStatus, tLogicalUnitGroup=tLogicalUnitGroup)
