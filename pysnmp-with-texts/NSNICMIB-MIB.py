#
# PySNMP MIB module NSNICMIB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NSNICMIB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, TimeTicks, MibIdentifier, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, ObjectIdentity, Counter64, Unsigned32, Bits, Counter32, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "TimeTicks", "MibIdentifier", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Counter64", "Unsigned32", "Bits", "Counter32", "IpAddress", "iso")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
nicObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18))
nicDrvConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1))
nicStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2))
nicCustomStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 3))
nicErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4))
nicMiscellaneous = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 5))
nicFrameType = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 6))
nicParms = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7))
nicTokenRingStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8))
nicTokenRingErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9))
nicCommonParms = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1))
nicStarfighterParms = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2))
nicTwisterParms = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3))
nicMasterParms = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4))
nicShastaParms = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 5))
nicDrvConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1), )
if mibBuilder.loadTexts: nicDrvConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvConfigTable.setDescription('A list of Driver Configuration Information')
nicDrvConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1), ).setIndexNames((0, "NSNICMIB-MIB", "nicDrvConfigIndex"))
if mibBuilder.loadTexts: nicDrvConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvConfigEntry.setDescription('Driver Configuration Information Table Entry.')
nicDrvConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvConfigIndex.setDescription('Index into Driver Configuration Information Table.')
nicDrvcfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgName.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgName.setDescription('Driver Name. Never Changes')
nicDrvcfgDescript = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgDescript.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgDescript.setDescription('Driver description, does not change')
nicDrvcfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("hp-starfighter", 1), ("hp-twister", 2), ("hp-busmaster", 3), ("hp-shasta", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgType.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgType.setDescription('Type of NIC')
nicDrvcfgPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 5), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgPhyAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgPhyAddr.setDescription('Address at the protocol layer immediately below the network layer')
nicDrvcfgMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgMajor.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgMajor.setDescription('The major revision level of the driver')
nicDrvcfgMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgMinor.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgMinor.setDescription('The minor revision level of the driver')
nicDrvcfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgSlot.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgSlot.setDescription('Slot where the board is installed (EISA only)')
nicDrvcfgIOport0 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgIOport0.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgIOport0.setDescription('Primary Base IO port')
nicDrvcfgIOport1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgIOport1.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgIOport1.setDescription('Secondary Base IO port')
nicDrvcfgInterrupt0 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("unused", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgInterrupt0.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgInterrupt0.setDescription('The Primary IRQ number/interrupt vector')
nicDrvcfgInterrupt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("unused", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgInterrupt1.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgInterrupt1.setDescription('The Secondary IRQ number/interrupt vector')
nicDrvcfgDMA0 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("unused", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgDMA0.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgDMA0.setDescription('The Primary DMA channel if applicable')
nicDrvcfgDMA1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("unused", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgDMA1.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgDMA1.setDescription('The Secondary DMA channel if applicable')
nicDrvcfgMemory0 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgMemory0.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgMemory0.setDescription('Memory Mapped Address 0 if applicable')
nicDrvcfgMemory1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgMemory1.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgMemory1.setDescription('Memory Mapped Address 1 if applicable')
nicDrvcfgMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgMulticast.setDescription('Whether driver supports multicast addressing')
nicDrvcfgPromiscuous = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgPromiscuous.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgPromiscuous.setDescription('Whether driver is in promiscuous mode')
nicDrvcfgMaximumSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgMaximumSize.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgMaximumSize.setDescription("This is the ECB's maximum buffer size")
nicDrvcfgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgSpeed.setDescription('Driver transmission speed in Mbits')
nicDrvcfgTransportTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgTransportTime.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgTransportTime.setDescription('Time(in ticks) to transmit a 576-byte packet')
nicDrvcfgSendRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgSendRetries.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgSendRetries.setDescription('Number of retries for transmission before abort')
nicDrvcfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("non-100VG", 0), ("vg-100", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgMode.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgMode.setDescription('Mode of transmission, 100VG enabled or disabled')
nicDrvcfgBindFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgBindFrames.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgBindFrames.setDescription('Number of Frames types bound to this Driver')
nicDrvcfgAftGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgAftGroupId.setDescription('Adavanced Fault Tolerance(AFT) Group Id bound to this Adapter')
nicDrvcfgAftBusNo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftBusNo.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgAftBusNo.setDescription('PCI Bus Number bound to this Adapter')
nicDrvcfgAftBusDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftBusDeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgAftBusDeviceId.setDescription('PCI Bus Device Id bound to this Adapter')
nicDrvcfgAftPciVenodrId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftPciVenodrId.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgAftPciVenodrId.setDescription('PCI Vendor Id bound to this Adapter')
nicDrvcfgAftPciDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftPciDeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgAftPciDeviceId.setDescription('PCI Device Id bound to this Driver')
nicDrvcfgAftPciSubSysVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftPciSubSysVendorId.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgAftPciSubSysVendorId.setDescription('PCI Subsystem Vendor Id bound to this Adapter')
nicDrvcfgAftPciSubSysDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftPciSubSysDeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgAftPciSubSysDeviceId.setDescription('PCI Subsystem Device Id bound to this Adapter')
nicDrvcfgAftStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("standby", 0), ("active", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgAftStatus.setDescription('Adavanced Fault Tolerance(AFT) Status(Standby, Active or Failed) bound to this Adapter')
nicDrvcfgAftMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("secondary", 0), ("primary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftMode.setStatus('mandatory')
if mibBuilder.loadTexts: nicDrvcfgAftMode.setDescription('Adavanced Fault Tolerance(AFT) Mode (Primary or Secondary) bound this Adapter')
nicStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1), )
if mibBuilder.loadTexts: nicStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: nicStatisticsTable.setDescription('A List of Driver Generic Statistics')
nicStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1), ).setIndexNames((0, "NSNICMIB-MIB", "nicStatisticsIndex"))
if mibBuilder.loadTexts: nicStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nicStatisticsEntry.setDescription('An entry in the Generic Statistics Table.')
nicStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicStatisticsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nicStatisticsIndex.setDescription('Index into the Generic Statistics Table.')
nicTtlTxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTtlTxPacket.setStatus('mandatory')
if mibBuilder.loadTexts: nicTtlTxPacket.setDescription('Number of packets transmitted successfully')
nicDeltaTtlTxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDeltaTtlTxPacket.setStatus('mandatory')
if mibBuilder.loadTexts: nicDeltaTtlTxPacket.setDescription('Number of packets transmitted Between last read and current time')
nicTtlRxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTtlRxPacket.setStatus('mandatory')
if mibBuilder.loadTexts: nicTtlRxPacket.setDescription('Number of packets received successfully')
nicDeltaTtlRxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDeltaTtlRxPacket.setStatus('mandatory')
if mibBuilder.loadTexts: nicDeltaTtlRxPacket.setDescription('Number of packets received between last update and current time')
nicGetECBFails = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicGetECBFails.setStatus('mandatory')
if mibBuilder.loadTexts: nicGetECBFails.setDescription('Number of times an ECB request failed')
nicTxTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxTooBig.setStatus('mandatory')
if mibBuilder.loadTexts: nicTxTooBig.setDescription('Number of packets that are too big for transmission')
nicRxTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRxTooBig.setStatus('mandatory')
if mibBuilder.loadTexts: nicRxTooBig.setDescription('Number of packets that are too big for receive buffer')
nicRxOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRxOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: nicRxOverflow.setDescription('Number of missed packets')
nicTxMisc = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxMisc.setStatus('mandatory')
if mibBuilder.loadTexts: nicTxMisc.setDescription('Number of packets with fatal transmission errors that are not accounted for anywhere else')
nicRxMisc = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRxMisc.setStatus('mandatory')
if mibBuilder.loadTexts: nicRxMisc.setDescription('Number of packets with fatal receive errors that are not accounted for anywhere else')
nicRxCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRxCRC.setStatus('mandatory')
if mibBuilder.loadTexts: nicRxCRC.setDescription('Number of packets received with corrupt data')
nicTxOKByte = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxOKByte.setStatus('mandatory')
if mibBuilder.loadTexts: nicTxOKByte.setDescription('Number of bytes transmitted successfully')
nicDeltaTxOKByte = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDeltaTxOKByte.setStatus('mandatory')
if mibBuilder.loadTexts: nicDeltaTxOKByte.setDescription('Number of bytes transmitted between the last update and current time')
nicRxOKByte = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRxOKByte.setStatus('mandatory')
if mibBuilder.loadTexts: nicRxOKByte.setDescription('Number of bytes received successfully')
nicDeltaRxOKByte = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDeltaRxOKByte.setStatus('mandatory')
if mibBuilder.loadTexts: nicDeltaRxOKByte.setDescription('Number of bytes received between the last update and current time')
nicTxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxGroup.setStatus('mandatory')
if mibBuilder.loadTexts: nicTxGroup.setDescription('Number of packets transmitted with group addressing')
nicDeltaTxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDeltaTxGroup.setStatus('mandatory')
if mibBuilder.loadTexts: nicDeltaTxGroup.setDescription('Number of packets transmitted with group addressing between the last update and current time')
nicRxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRxGroup.setStatus('mandatory')
if mibBuilder.loadTexts: nicRxGroup.setDescription('Number of packets received with group addressing')
nicDeltaRxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDeltaRxGroup.setStatus('mandatory')
if mibBuilder.loadTexts: nicDeltaRxGroup.setDescription('Number of packets received with group addressing between the last update and current time')
nicAdapterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicAdapterReset.setStatus('mandatory')
if mibBuilder.loadTexts: nicAdapterReset.setDescription('Number of times the adapter reset due to internal errors')
nicQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicQDepth.setStatus('mandatory')
if mibBuilder.loadTexts: nicQDepth.setDescription('Number of transmit ECBs queued for the adapter')
nicRcvBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRcvBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: nicRcvBuffers.setDescription('Number of LSL receive buffers')
nicRcvBuffers75Pct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRcvBuffers75Pct.setStatus('mandatory')
if mibBuilder.loadTexts: nicRcvBuffers75Pct.setDescription('Number of LSL receive buffers that must be in use before buffers are regarded as getting low')
nicRcvBuffersCkOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRcvBuffersCkOut.setStatus('mandatory')
if mibBuilder.loadTexts: nicRcvBuffersCkOut.setDescription('Number of buffers in use')
nicRcvBuffersMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRcvBuffersMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: nicRcvBuffersMaxSize.setDescription('Size of data portion of the ECB in bytes')
nicNumCustCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicNumCustCounter.setStatus('mandatory')
if mibBuilder.loadTexts: nicNumCustCounter.setDescription('Number of Driver Custom Counters')
nicCustStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 3, 1), )
if mibBuilder.loadTexts: nicCustStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nicCustStatTable.setDescription('A list of Driver Custom Statistics')
nicCustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 3, 1, 1), ).setIndexNames((0, "NSNICMIB-MIB", "nicCustIndex"), (0, "NSNICMIB-MIB", "nicIndex"))
if mibBuilder.loadTexts: nicCustEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nicCustEntry.setDescription('An entry in the driver custom statistic table')
nicCustIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicCustIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nicCustIndex.setDescription('Index of list of lan adapters.')
nicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nicIndex.setDescription('Index into the list of driver custom statistics table')
nicCustCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicCustCounter.setStatus('mandatory')
if mibBuilder.loadTexts: nicCustCounter.setDescription('The counter for a custom statistic')
nicCustCounterString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicCustCounterString.setStatus('mandatory')
if mibBuilder.loadTexts: nicCustCounterString.setDescription('Name of the custom counter')
nicErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1), )
if mibBuilder.loadTexts: nicErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: nicErrorsTable.setDescription('A list of Driver Error Statistics.')
nicErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1), ).setIndexNames((0, "NSNICMIB-MIB", "nicErrorsIndex"))
if mibBuilder.loadTexts: nicErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nicErrorsEntry.setDescription('an entry in the driver errors statistics table.')
nicErrorsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicErrorsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nicErrorsIndex.setDescription('Index into the error statistics Table.')
nicTxOKSingleCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxOKSingleCollision.setStatus('mandatory')
if mibBuilder.loadTexts: nicTxOKSingleCollision.setDescription('Number of frames involved in a single collision that are subsequently transmitted successfully')
nicTxOKMultipleCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxOKMultipleCollision.setStatus('mandatory')
if mibBuilder.loadTexts: nicTxOKMultipleCollision.setDescription('Number of frames involved in more than one collision that are subsequently transmitted successfully')
nicTxOKDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxOKDeferred.setStatus('mandatory')
if mibBuilder.loadTexts: nicTxOKDeferred.setDescription('Number of frames whose transmission was delayed on the first attempt because media was busy')
nicTxAbortLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxAbortLateCollision.setStatus('mandatory')
if mibBuilder.loadTexts: nicTxAbortLateCollision.setDescription('Number of collisions detected later than 512 bit times into the tranmitted packet')
nicTxAbortExcessCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxAbortExcessCollision.setStatus('mandatory')
if mibBuilder.loadTexts: nicTxAbortExcessCollision.setDescription('Number of frames not transmitted successfully due to excessive collision')
nicTxAbortCarrierSense = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxAbortCarrierSense.setStatus('mandatory')
if mibBuilder.loadTexts: nicTxAbortCarrierSense.setDescription('Number of times the carrierSense variable was not asserted or was deasserted during transmission of a frame without collision')
nicTxAbortExcessiveDeferral = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxAbortExcessiveDeferral.setStatus('mandatory')
if mibBuilder.loadTexts: nicTxAbortExcessiveDeferral.setDescription('Number of frames deferred for an excessive period of time')
nicRxAbortFrameAlignment = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRxAbortFrameAlignment.setStatus('mandatory')
if mibBuilder.loadTexts: nicRxAbortFrameAlignment.setDescription('Number of frames that are not an integral number of octets in length and do not pass the FCS check')
nicHWRxMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicHWRxMismatch.setStatus('mandatory')
if mibBuilder.loadTexts: nicHWRxMismatch.setDescription('Number of packets received that did not pass the length consistency checks')
nicTtlTxErrPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTtlTxErrPacket.setStatus('mandatory')
if mibBuilder.loadTexts: nicTtlTxErrPacket.setDescription('Total Number of packets with transmission errors')
nicTtlRxErrPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTtlRxErrPacket.setStatus('mandatory')
if mibBuilder.loadTexts: nicTtlRxErrPacket.setDescription('Total Number of packets with receive errors')
nicNumBoards = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicNumBoards.setStatus('mandatory')
if mibBuilder.loadTexts: nicNumBoards.setDescription('Total number of adapters installed in the system')
nicAdapterType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicAdapterType.setStatus('mandatory')
if mibBuilder.loadTexts: nicAdapterType.setDescription('Type of adapter that the user is currently looking at')
nicFrameTypeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 6, 1), )
if mibBuilder.loadTexts: nicFrameTypeTable.setStatus('mandatory')
if mibBuilder.loadTexts: nicFrameTypeTable.setDescription('A list of Frame Types supported by the Driver')
nicFrameTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 6, 1, 1), ).setIndexNames((0, "NSNICMIB-MIB", "nicFrameTypeIndex"), (0, "NSNICMIB-MIB", "nicCardIndex"))
if mibBuilder.loadTexts: nicFrameTypeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nicFrameTypeEntry.setDescription('An entry in the driver Frame Type table')
nicFrameTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicFrameTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nicFrameTypeIndex.setDescription('Index into a list of supported frame types.')
nicCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nicCardIndex.setDescription('Index of list of lan adapters.')
nicFrameTypeString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicFrameTypeString.setStatus('mandatory')
if mibBuilder.loadTexts: nicFrameTypeString.setDescription('Name of the frame type such as Ethernet-802.2')
nicParmSampling = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmSampling.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmSampling.setDescription('User configurable data sampling time, default once per 5 seconds')
nicParmProcessing = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmProcessing.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmProcessing.setDescription('User configurable data processing time, default once per minute')
nicParmRxErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmRxErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmRxErrCount.setDescription('User configurable threshold for receive errors')
nicParmRxErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmRxErrDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmRxErrDelta.setDescription('User configurable threshold for receive errors between last update and current time')
nicParmRxErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmRxErrPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmRxErrPct.setDescription('User configurable threshold for receive errors, this is a relative count')
nicParmTxErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmTxErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmTxErrCount.setDescription('User configurable threshold for transmit errors')
nicParmTxErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmTxErrDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmTxErrDelta.setDescription('User configurable threshold for transmit errors between the last update and current time')
nicParmTxErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmTxErrPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmTxErrPct.setDescription('User configurable threshold for transmit errors, this is a relative count')
nicParmAdapterResetCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAdapterResetCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAdapterResetCount.setDescription('User configurable threshold for Adapter Reset errors')
nicParmAdapterResetDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAdapterResetDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAdapterResetDelta.setDescription('User configurable threshold for Adapter Reset errors between the last update and current time')
nicParmAdapterResetPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAdapterResetPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAdapterResetPct.setDescription('User configurable threshold for Adapter Reset errors, this is a relative count')
nicParmAlignmentCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAlignmentCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAlignmentCount.setDescription('User configurable threshold for Alignment errors')
nicParmAlignmentDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAlignmentDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAlignmentDelta.setDescription('User configurable threshold for Alignment errors between the last update and current time')
nicParmAlignmentPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAlignmentPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAlignmentPct.setDescription('User configurable threshold for Alignment errors, this is a relative count')
nicParmFrameTooLongCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrameTooLongCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmFrameTooLongCount.setDescription('User configurable threshold for Frame Too Long errors')
nicParmFrameTooLongDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrameTooLongDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmFrameTooLongDelta.setDescription('User configurable threshold for Frame Too Long errors between the last update and current time')
nicParmFrameTooLongPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrameTooLongPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmFrameTooLongPct.setDescription('User configurable threshold for Frame Too Long errors, this is a relative count')
nicParmHardwareMismatchCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmHardwareMismatchCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmHardwareMismatchCount.setDescription('User configurable threshold for Hardware Mismatch errors')
nicParmHardwareMismatchDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmHardwareMismatchDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmHardwareMismatchDelta.setDescription('User configurable threshold for Hardware Mismatch errors between the last update and current time')
nicParmHardwareMismatchPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmHardwareMismatchPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmHardwareMismatchPct.setDescription('User configurable threshold for Hardware Mismatch errors, this is a relative count')
nicParmLateCollisionCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLateCollisionCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmLateCollisionCount.setDescription('User configurable threshold for Late Collision errors')
nicParmLateCollisionDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLateCollisionDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmLateCollisionDelta.setDescription('User configurable threshold for Late Collision errors between the last update and current time')
nicParmLateCollisionPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLateCollisionPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmLateCollisionPct.setDescription('User configurable threshold for Late Collision errors, this is a relative count')
nicParmExcessCollisionCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmExcessCollisionCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmExcessCollisionCount.setDescription('User configurable threshold for Excessive Collision errors')
nicParmExcessCollisionDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmExcessCollisionDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmExcessCollisionDelta.setDescription('User configurable threshold for Excessive Collision errors between the last update and current time')
nicParmExcessCollisionPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmExcessCollisionPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmExcessCollisionPct.setDescription('User configurable threshold for Excess Collision errors, this is a relative count')
nicParmCarrierSenseCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmCarrierSenseCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmCarrierSenseCount.setDescription('User configurable threshold for Carrier Sense errors')
nicParmCarrierSenseDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmCarrierSenseDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmCarrierSenseDelta.setDescription('User configurable threshold for Carrier Sense errors between the last update and current time')
nicParmCarrierSensePct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmCarrierSensePct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmCarrierSensePct.setDescription('User configurable threshold for Carrier Sense errors, this is a relative count')
nicParmDeferralCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmDeferralCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmDeferralCount.setDescription('User configurable threshold for Deferral errors')
nicParmDeferralDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmDeferralDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmDeferralDelta.setDescription('User configurable threshold for Deferral errors between the last update and current time')
nicParmDeferralPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmDeferralPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmDeferralPct.setDescription('User configurable threshold for Deferral errors, this is a relative count')
nicParmNoECBCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmNoECBCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmNoECBCount.setDescription('User configurable threshold for Deferral errors')
nicParmNoECBDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmNoECBDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmNoECBDelta.setDescription('User configurable threshold for Deferral errors between the last update and current time')
nicParmNoECBPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmNoECBPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmNoECBPct.setDescription('User configurable threshold for Deferral errors, this is a relative count')
nicParmRxOverflowCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmRxOverflowCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmRxOverflowCount.setDescription('User configurable threshold for Deferral errors')
nicParmRxOverflowDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmRxOverflowDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmRxOverflowDelta.setDescription('User configurable threshold for Deferral errors between the last update and current time')
nicParmRxOverflowPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmRxOverflowPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmRxOverflowPct.setDescription('User configurable threshold for Deferral errors, this is a relative count')
nicParmUtilizationCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmUtilizationCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmUtilizationCount.setDescription('User configurable threshold for packets or bytes/second utilization')
nicParmAdapterType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAdapterType.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAdapterType.setDescription('User selected Adapter Type, will generate an alarm if there is a mismatch')
nicParmLineErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLineErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmLineErrCount.setDescription('User configurable threshold for Token Ring Line errors')
nicParmLineErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLineErrDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmLineErrDelta.setDescription('User configurable threshold for Token Ring Line errors between the last update and current time')
nicParmLineErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLineErrPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmLineErrPct.setDescription('User configurable threshold for Token Ring Line errors, this is a relative count')
nicParmLostFramesCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLostFramesCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmLostFramesCount.setDescription('User configurable threshold for Token Ring Lost Frames')
nicParmLostFramesDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLostFramesDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmLostFramesDelta.setDescription('User configurable threshold for Token Ring Lost Frames between the last update and current time')
nicParmLostFramesPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLostFramesPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmLostFramesPct.setDescription('User configurable threshold for Token Ring Lost Frames, this is a relative count')
nicParmBurstErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmBurstErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmBurstErrCount.setDescription('User configurable threshold for Token Ring Burst errors')
nicParmBurstErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmBurstErrDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmBurstErrDelta.setDescription('User configurable threshold for Token Ring Burst errors between the last update and current time')
nicParmBurstErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmBurstErrPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmBurstErrPct.setDescription('User configurable threshold for Token Ring Burst errors, this is a relative count')
nicParmACErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmACErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmACErrCount.setDescription('User configurable threshold for Token Ring A/C errors')
nicParmACErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmACErrDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmACErrDelta.setDescription('User configurable threshold for Token Ring A/C errors between the last update and current time')
nicParmACErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmACErrPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmACErrPct.setDescription('User configurable threshold for Token Ring A/C errors, this is a relative count')
nicParmAbortDelimitersCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAbortDelimitersCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAbortDelimitersCount.setDescription('User configurable threshold for Token Ring Abort Delimiters')
nicParmAbortDelimitersDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAbortDelimitersDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAbortDelimitersDelta.setDescription('User configurable threshold for Token Ring Abort Delimiters between the last update and current time')
nicParmAbortDelimitersPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAbortDelimitersPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAbortDelimitersPct.setDescription('User configurable threshold for Token Ring Abort Delimiters, this is a relative count')
nicParmFrameCopiedErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrameCopiedErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmFrameCopiedErrCount.setDescription('User configurable threshold for Token Ring Frame Copied errors')
nicParmFrameCopiedErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrameCopiedErrDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmFrameCopiedErrDelta.setDescription('User configurable threshold for Token Ring Frame Copied errors between the last update and current time')
nicParmFrameCopiedErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrameCopiedErrPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmFrameCopiedErrPct.setDescription('User configurable threshold for Token Ring Frame Copied errors, this is a relative count')
nicParmFrequencyErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrequencyErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmFrequencyErrCount.setDescription('User configurable threshold for Token Ring Frequency errors')
nicParmFrequencyErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrequencyErrDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmFrequencyErrDelta.setDescription('User configurable threshold for Token Ring Frequency errors between the last update and current time')
nicParmFrequencyErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrequencyErrPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmFrequencyErrPct.setDescription('User configurable threshold for Token Ring Frequency errors, this is a relative count')
nicParmTokenErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmTokenErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmTokenErrCount.setDescription('User configurable threshold for Token Ring Token errors')
nicParmTokenErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmTokenErrDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmTokenErrDelta.setDescription('User configurable threshold for Token Ring Token errors between the last update and current time')
nicParmTokenErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmTokenErrPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmTokenErrPct.setDescription('User configurable threshold for Token Ring Token errors, this is a relative count')
nicParmInternalErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 65), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmInternalErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmInternalErrCount.setDescription('User configurable threshold for Token Ring Internal errors')
nicParmInternalErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 66), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmInternalErrDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmInternalErrDelta.setDescription('User configurable threshold for Token Ring Internal errors between the last update and current time')
nicParmInternalErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmInternalErrPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmInternalErrPct.setDescription('User configurable threshold for Token Ring Internal errors, this is a relative count')
nicParmAftFailOverErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 68), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAftFailOverErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAftFailOverErrCount.setDescription('The active NIC in a redundant group has failed.The standby NIC has taken over.')
nicParmAftFailOverErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 69), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAftFailOverErrDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAftFailOverErrDelta.setDescription('The active NIC in a redundant group has failed.The standby NIC has taken over.')
nicParmAftRecoveryErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 70), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAftRecoveryErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAftRecoveryErrCount.setDescription('The previously failed NIC in a redundant group has become operational.')
nicParmAftRecoveryErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAftRecoveryErrDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAftRecoveryErrDelta.setDescription('The previously failed NIC in a redundant group has become operational.')
nicParmAftStandbyErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAftStandbyErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAftStandbyErrCount.setDescription('The standby NIC in a redundant group has failed.')
nicParmAftStandbyErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAftStandbyErrDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAftStandbyErrDelta.setDescription('The standby NIC in a redundant group has failed.')
nicParmAftGruoupFailErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 74), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAftGruoupFailErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAftGruoupFailErrCount.setDescription('All NICs (active and standby) in a redundant group have failed.')
nicParmAftGroupFailErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 75), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAftGroupFailErrDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicParmAftGroupFailErrDelta.setDescription('All NICs (active and standby) in a redundant group have failed.')
nicStarfighterParmTxFifoCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmTxFifoCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicStarfighterParmTxFifoCount.setDescription('User configurable threshold for transmit FIFO underrun errors')
nicStarfighterParmTxFifoDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmTxFifoDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicStarfighterParmTxFifoDelta.setDescription('User configurable threshold for transmit FIFO underrun errors between last update and current time')
nicStarfighterParmTxFifoPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmTxFifoPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicStarfighterParmTxFifoPct.setDescription('User configurable threshold for transmit FIFO underrun errors, this is a relative count')
nicStarfighterParmTxTimedOutCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmTxTimedOutCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicStarfighterParmTxTimedOutCount.setDescription('User configurable threshold for transmit timed out')
nicStarfighterParmTxTimedOutDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmTxTimedOutDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicStarfighterParmTxTimedOutDelta.setDescription('User configurable threshold for transmit timed out')
nicStarfighterParmTxTimedOutPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmTxTimedOutPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicStarfighterParmTxTimedOutPct.setDescription('User configurable threshold for transmit timed out, this is a relative count')
nicStarfighterParmRxFifoCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxFifoCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicStarfighterParmRxFifoCount.setDescription('User configurable threshold for receive FIFO overrun errors')
nicStarfighterParmRxFifoDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxFifoDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicStarfighterParmRxFifoDelta.setDescription('User configurable threshold for receive FIFO overrun errors between the last update and current time')
nicStarfighterParmRxFifoPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxFifoPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicStarfighterParmRxFifoPct.setDescription('User configurable threshold for receive FIFO overrun errors, this is a relative count')
nicStarfighterParmRxFalseInterruptCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxFalseInterruptCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicStarfighterParmRxFalseInterruptCount.setDescription('User configurable threshold for receiver false interrupts')
nicStarfighterParmRxFalseInterruptDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxFalseInterruptDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicStarfighterParmRxFalseInterruptDelta.setDescription('User configurable threshold for receiver false interrupts between the last update and current time')
nicStarfighterParmRxFalseInterruptPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxFalseInterruptPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicStarfighterParmRxFalseInterruptPct.setDescription('User configurable threshold for receive false interrupts, this is a relative count')
nicStarfighterParmRxPagingErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxPagingErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicStarfighterParmRxPagingErrCount.setDescription('User configurable threshold for receive paging errors')
nicStarfighterParmRxPagingErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxPagingErrDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicStarfighterParmRxPagingErrDelta.setDescription('User configurable threshold for receive paging errors between the last update and current time')
nicStarfighterParmRxPagingErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxPagingErrPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicStarfighterParmRxPagingErrPct.setDescription('User configurable threshold for receive paging errors, this is a relative count')
nicTwisterParmTxFifoCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmTxFifoCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmTxFifoCount.setDescription('User configurable threshold for transmit FIFO underrun errors')
nicTwisterParmTxFifoDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmTxFifoDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmTxFifoDelta.setDescription('User configurable threshold for transmit FIFO underrun errors between the last update and current time')
nicTwisterParmTxFifoPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmTxFifoPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmTxFifoPct.setDescription('User configurable threshold for transmit FIFO underrun errors, this is a relative count')
nicTwisterParmTxTimedOutCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmTxTimedOutCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmTxTimedOutCount.setDescription('User configurable threshold for transmit timed out')
nicTwisterParmTxTimedOutDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmTxTimedOutDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmTxTimedOutDelta.setDescription('User configurable threshold for transmit timed out between the last update and current time')
nicTwisterParmTxTimedOutPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmTxTimedOutPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmTxTimedOutPct.setDescription('User configurable threshold for transmit timed out, this is a relative count')
nicTwisterParmRxFifoCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxFifoCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmRxFifoCount.setDescription('User configurable threshold for receive FIFO overrun errors')
nicTwisterParmRxFifoDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxFifoDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmRxFifoDelta.setDescription('User configurable threshold for receive FIFO overrun errors between the last update and current time')
nicTwisterParmRxFifoPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxFifoPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmRxFifoPct.setDescription('User configurable threshold for receive FIFO overrun errors, this is a relative count')
nicTwisterParmRxFalseInterruptCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxFalseInterruptCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmRxFalseInterruptCount.setDescription('User configurable threshold for receiver false interrupts')
nicTwisterParmRxFalseInterruptDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxFalseInterruptDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmRxFalseInterruptDelta.setDescription('User configurable threshold for receiver false interrupts between the last update and current time')
nicTwisterParmRxFalseInterruptPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxFalseInterruptPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmRxFalseInterruptPct.setDescription('User configurable threshold for receive false interrupts, this is a relative count')
nicTwisterParmRxPagingErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxPagingErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmRxPagingErrCount.setDescription('User configurable threshold for receive paging errors')
nicTwisterParmRxPagingErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxPagingErrDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmRxPagingErrDelta.setDescription('User configurable threshold for receive paging errors between the last update and current time')
nicTwisterParmRxPagingErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxPagingErrPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmRxPagingErrPct.setDescription('User configurable threshold for receive paging errors, this is a relative count')
nicTwisterParmDMATimedOutCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmDMATimedOutCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmDMATimedOutCount.setDescription('User configurable threshold for number of times for DMA timed out')
nicTwisterParmDMATimedOutDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmDMATimedOutDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmDMATimedOutDelta.setDescription('User configurable threshold for number of times for DMA timed out between the last update and current time')
nicTwisterParmDMATimedOutPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmDMATimedOutPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicTwisterParmDMATimedOutPct.setDescription('User configurable threshold for number of times for DMA timed out, this is a relative count')
nicMasterParmTxNoResourcesCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmTxNoResourcesCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicMasterParmTxNoResourcesCount.setDescription('User configurable threshold for transmit PDA queue full')
nicMasterParmTxNoResourcesDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmTxNoResourcesDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicMasterParmTxNoResourcesDelta.setDescription('User configurable threshold for transmit PDA queue full between the last update and current time')
nicMasterParmTxNoResourcesPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmTxNoResourcesPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicMasterParmTxNoResourcesPct.setDescription('User configurable threshold for transmit PDA queue full, this is a relative count')
nicMasterParmTxExcessFragsCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmTxExcessFragsCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicMasterParmTxExcessFragsCount.setDescription('User configurable threshold for excessive transmit fragments')
nicMasterParmTxExcessFragsDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmTxExcessFragsDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicMasterParmTxExcessFragsDelta.setDescription('User configurable threshold for excessive transmit fragments between the last update and current time')
nicMasterParmTxExcessFragsPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmTxExcessFragsPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicMasterParmTxExcessFragsPct.setDescription('User configurable threshold for excessive transmit fragments, this is a relative count')
nicMasterParmRxLowCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmRxLowCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicMasterParmRxLowCount.setDescription('User configurable threshold for RCBs not allocated')
nicMasterParmRxLowDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmRxLowDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicMasterParmRxLowDelta.setDescription('User configurable threshold for RCBs not allocated between the last update and current time')
nicMasterParmRxLowPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmRxLowPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicMasterParmRxLowPct.setDescription('User configurable threshold for RCBs not allocated, this is a relative count')
nicMasterParmRxEmptyCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmRxEmptyCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicMasterParmRxEmptyCount.setDescription('User configurable threshold for no RCBs')
nicMasterParmRxEmptyDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmRxEmptyDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicMasterParmRxEmptyDelta.setDescription('User configurable threshold for no RCBs between the last update and current time')
nicMasterParmRxEmptyPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmRxEmptyPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicMasterParmRxEmptyPct.setDescription('User configurable threshold for no RCBs, this is a relative count')
nicShastaParmTxNoResourcesCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicShastaParmTxNoResourcesCount.setStatus('mandatory')
if mibBuilder.loadTexts: nicShastaParmTxNoResourcesCount.setDescription('User configurable threshold for transmit PDA queue full')
nicShastaParmTxNoResourcesDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicShastaParmTxNoResourcesDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nicShastaParmTxNoResourcesDelta.setDescription('User configurable threshold for transmit PDA queue full between the last update and current time')
nicShastaParmTxNoResourcesPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicShastaParmTxNoResourcesPct.setStatus('mandatory')
if mibBuilder.loadTexts: nicShastaParmTxNoResourcesPct.setDescription('User configurable threshold for transmit PDA queue full, this is a relative count')
nicTokenRingStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8, 1), )
if mibBuilder.loadTexts: nicTokenRingStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: nicTokenRingStatisticsTable.setDescription('A list of Token Ring statistics supported by the Driver')
nicTokenRingStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8, 1, 1), ).setIndexNames((0, "NSNICMIB-MIB", "nicTokenRingStatisticsIndex"))
if mibBuilder.loadTexts: nicTokenRingStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nicTokenRingStatisticsEntry.setDescription('An entry in the Token Ring statistics table')
nicTokenRingStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTokenRingStatisticsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nicTokenRingStatisticsIndex.setDescription('Index into a list of Token Ring Statistics.')
nicFunctionalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicFunctionalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nicFunctionalAddress.setDescription('The Token Ring functional address enabled for packet reception.')
nicGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nicGroupAddress.setDescription('The Token Ring group address enabled for packet reception.')
nicLastOpenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicLastOpenStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nicLastOpenStatus.setDescription('The last Token Ring NdisOpenAdapter error status. If the last open succeeded, this value will be zero.')
nicRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 0))).clone(namedValues=NamedValues(("harderror", 16384), ("softerror", 8192), ("transmitbeacon", 4096), ("lobewirefault", 2048), ("autoremovalerror", 1024), ("removereceived", 512), ("counteroverflow", 256), ("singlestation", 128), ("ringrecovery", 64), ("nostatus", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nicRingStatus.setDescription('The current Token Ring ring status.')
nicRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("opened", 1), ("closed", 2), ("opening", 3), ("closing", 4), ("openfailure", 5), ("ringfailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRingState.setStatus('mandatory')
if mibBuilder.loadTexts: nicRingState.setDescription('The Token Ring state of the driver with respect to entering the ring..')
nicTokenRingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1), )
if mibBuilder.loadTexts: nicTokenRingErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: nicTokenRingErrorsTable.setDescription('A list of Token Ring errors supported by the Driver')
nicTokenRingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1), ).setIndexNames((0, "NSNICMIB-MIB", "nicTokenRingErrorsIndex"))
if mibBuilder.loadTexts: nicTokenRingErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nicTokenRingErrorsEntry.setDescription('An entry in the Token Ring errors table')
nicTokenRingErrorsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTokenRingErrorsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nicTokenRingErrorsIndex.setDescription('Index into a list of Token Ring Errors.')
nicLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicLineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nicLineErrors.setDescription('The number of Token Ring frames with an invalid FCS or a code violation.')
nicLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicLostFrames.setStatus('mandatory')
if mibBuilder.loadTexts: nicLostFrames.setDescription('The number of Token Ring frames transmitted that have not circled the ring within the maximum ring latency.')
nicBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicBurstErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nicBurstErrors.setDescription('The number of Token Ring frames containing five half bits with no transition.')
nicACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicACErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nicACErrors.setDescription('The number of Token Ring frames with A/C errors.')
nicAbortDelimiters = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicAbortDelimiters.setStatus('mandatory')
if mibBuilder.loadTexts: nicAbortDelimiters.setDescription('The number of Token Ring abort delimiters transmitted.')
nicFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicFrameCopiedErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nicFrameCopiedErrors.setDescription('The number of Token Ring frames addressed to this card that another card on the ring has also copied.')
nicFrequencyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicFrequencyErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nicFrequencyErrors.setDescription('The number of Token Ring frequency errors on the ring.')
nicTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTokenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nicTokenErrors.setDescription('The number of times the card has been the active Token Ring monitor and has had to recreate.')
nicInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicInternalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nicInternalErrors.setDescription('The number of Token Ring internal errors the card has detected.')
mibBuilder.exportSymbols("NSNICMIB-MIB", nicGroupAddress=nicGroupAddress, nicErrorsEntry=nicErrorsEntry, nicParmDeferralPct=nicParmDeferralPct, nicParmAdapterType=nicParmAdapterType, nicDrvcfgInterrupt0=nicDrvcfgInterrupt0, nicDrvcfgTransportTime=nicDrvcfgTransportTime, nicIndex=nicIndex, nicMasterParmTxExcessFragsDelta=nicMasterParmTxExcessFragsDelta, nicDrvcfgDMA1=nicDrvcfgDMA1, nicTxAbortCarrierSense=nicTxAbortCarrierSense, nicDrvcfgType=nicDrvcfgType, nicDrvcfgDescript=nicDrvcfgDescript, nicRxMisc=nicRxMisc, nicRxGroup=nicRxGroup, nicCustIndex=nicCustIndex, nicParmBurstErrPct=nicParmBurstErrPct, nicParmFrequencyErrDelta=nicParmFrequencyErrDelta, nicParmRxOverflowDelta=nicParmRxOverflowDelta, nicCommonParms=nicCommonParms, nicStarfighterParmTxFifoDelta=nicStarfighterParmTxFifoDelta, nicRxCRC=nicRxCRC, nicTwisterParmRxFifoDelta=nicTwisterParmRxFifoDelta, nicTokenErrors=nicTokenErrors, nicTtlTxPacket=nicTtlTxPacket, nicParmRxErrPct=nicParmRxErrPct, nicParmHardwareMismatchCount=nicParmHardwareMismatchCount, nicParmLateCollisionCount=nicParmLateCollisionCount, nicGetECBFails=nicGetECBFails, nicInternalErrors=nicInternalErrors, nicParmTxErrPct=nicParmTxErrPct, nicMasterParmRxLowCount=nicMasterParmRxLowCount, nicParmHardwareMismatchDelta=nicParmHardwareMismatchDelta, nicDrvcfgIOport0=nicDrvcfgIOport0, nicTwisterParmRxFifoCount=nicTwisterParmRxFifoCount, nicDrvcfgMaximumSize=nicDrvcfgMaximumSize, nicParmProcessing=nicParmProcessing, nicParmTokenErrPct=nicParmTokenErrPct, nicTxTooBig=nicTxTooBig, nicFrameTypeTable=nicFrameTypeTable, nicParmInternalErrCount=nicParmInternalErrCount, nicTxAbortLateCollision=nicTxAbortLateCollision, nicParmAftFailOverErrDelta=nicParmAftFailOverErrDelta, nicDrvConfigTable=nicDrvConfigTable, nicTxOKSingleCollision=nicTxOKSingleCollision, nicTwisterParmTxTimedOutPct=nicTwisterParmTxTimedOutPct, nicDeltaTtlTxPacket=nicDeltaTtlTxPacket, nicAbortDelimiters=nicAbortDelimiters, nicParmFrameTooLongCount=nicParmFrameTooLongCount, nicDrvcfgAftStatus=nicDrvcfgAftStatus, nicRxAbortFrameAlignment=nicRxAbortFrameAlignment, nicParmCarrierSenseDelta=nicParmCarrierSenseDelta, nicTokenRingStatisticsIndex=nicTokenRingStatisticsIndex, nicParmAftGruoupFailErrCount=nicParmAftGruoupFailErrCount, nicQDepth=nicQDepth, nicMasterParmRxLowDelta=nicMasterParmRxLowDelta, nicDrvcfgMulticast=nicDrvcfgMulticast, nicTwisterParmRxPagingErrCount=nicTwisterParmRxPagingErrCount, nicStarfighterParmRxFalseInterruptPct=nicStarfighterParmRxFalseInterruptPct, nicStarfighterParmRxFifoCount=nicStarfighterParmRxFifoCount, nicTwisterParmRxPagingErrDelta=nicTwisterParmRxPagingErrDelta, hp=hp, nicCardIndex=nicCardIndex, nicParmRxErrDelta=nicParmRxErrDelta, nicStatistics=nicStatistics, nicAdapterType=nicAdapterType, nicTxMisc=nicTxMisc, nicTwisterParmDMATimedOutDelta=nicTwisterParmDMATimedOutDelta, nicDrvcfgAftBusNo=nicDrvcfgAftBusNo, nicMasterParmTxNoResourcesPct=nicMasterParmTxNoResourcesPct, nicRingStatus=nicRingStatus, nicFrameCopiedErrors=nicFrameCopiedErrors, nicParmAlignmentCount=nicParmAlignmentCount, nicParmACErrCount=nicParmACErrCount, nicParmUtilizationCount=nicParmUtilizationCount, nicDrvcfgPhyAddr=nicDrvcfgPhyAddr, nicParmDeferralCount=nicParmDeferralCount, nicParmBurstErrCount=nicParmBurstErrCount, nicDrvcfgMinor=nicDrvcfgMinor, nicStarfighterParmTxTimedOutDelta=nicStarfighterParmTxTimedOutDelta, nicMiscellaneous=nicMiscellaneous, nicDrvcfgMemory0=nicDrvcfgMemory0, nicParmAftRecoveryErrCount=nicParmAftRecoveryErrCount, nicDrvcfgSendRetries=nicDrvcfgSendRetries, nicTxOKMultipleCollision=nicTxOKMultipleCollision, nicMasterParmRxEmptyDelta=nicMasterParmRxEmptyDelta, nicParms=nicParms, nicShastaParms=nicShastaParms, nicRcvBuffersCkOut=nicRcvBuffersCkOut, nicParmExcessCollisionPct=nicParmExcessCollisionPct, nicParmACErrPct=nicParmACErrPct, nicLineErrors=nicLineErrors, nicFrameTypeIndex=nicFrameTypeIndex, nicTwisterParmTxTimedOutCount=nicTwisterParmTxTimedOutCount, nicDrvcfgAftPciSubSysDeviceId=nicDrvcfgAftPciSubSysDeviceId, nicShastaParmTxNoResourcesDelta=nicShastaParmTxNoResourcesDelta, nicTwisterParmDMATimedOutPct=nicTwisterParmDMATimedOutPct, nicTokenRingStatisticsEntry=nicTokenRingStatisticsEntry, nicDeltaTxGroup=nicDeltaTxGroup, nicParmRxOverflowPct=nicParmRxOverflowPct, nicTwisterParms=nicTwisterParms, nicDrvcfgAftPciDeviceId=nicDrvcfgAftPciDeviceId, nicTwisterParmRxFalseInterruptPct=nicTwisterParmRxFalseInterruptPct, nicParmLateCollisionDelta=nicParmLateCollisionDelta, nicTxAbortExcessCollision=nicTxAbortExcessCollision, nicParmFrameCopiedErrPct=nicParmFrameCopiedErrPct, nicDrvConfig=nicDrvConfig, nicParmExcessCollisionDelta=nicParmExcessCollisionDelta, nicParmInternalErrPct=nicParmInternalErrPct, nicDrvcfgName=nicDrvcfgName, nicParmAlignmentPct=nicParmAlignmentPct, nicParmLineErrCount=nicParmLineErrCount, nicTwisterParmRxFalseInterruptDelta=nicTwisterParmRxFalseInterruptDelta, nicFrameTypeEntry=nicFrameTypeEntry, nicParmAdapterResetCount=nicParmAdapterResetCount, nicParmFrequencyErrCount=nicParmFrequencyErrCount, nicTokenRingErrors=nicTokenRingErrors, nicStarfighterParmRxFifoDelta=nicStarfighterParmRxFifoDelta, nicParmTxErrCount=nicParmTxErrCount, nicStarfighterParmRxFifoPct=nicStarfighterParmRxFifoPct, nicTokenRingErrorsIndex=nicTokenRingErrorsIndex, nicMasterParmTxExcessFragsPct=nicMasterParmTxExcessFragsPct, nicShastaParmTxNoResourcesCount=nicShastaParmTxNoResourcesCount, nicRcvBuffers75Pct=nicRcvBuffers75Pct, nicCustCounter=nicCustCounter, nicParmAbortDelimitersPct=nicParmAbortDelimitersPct, nicACErrors=nicACErrors, nicNumBoards=nicNumBoards, nicMasterParmTxNoResourcesCount=nicMasterParmTxNoResourcesCount, nicCustomStats=nicCustomStats, nicParmInternalErrDelta=nicParmInternalErrDelta, hpnsa=hpnsa, nicParmAftFailOverErrCount=nicParmAftFailOverErrCount, nicTokenRingErrorsTable=nicTokenRingErrorsTable, nicParmAftStandbyErrCount=nicParmAftStandbyErrCount, nicStarfighterParmRxPagingErrCount=nicStarfighterParmRxPagingErrCount, nicParmFrameTooLongDelta=nicParmFrameTooLongDelta, nicDrvcfgBindFrames=nicDrvcfgBindFrames, nicParmFrameCopiedErrDelta=nicParmFrameCopiedErrDelta, nicParmTokenErrCount=nicParmTokenErrCount, nicDrvcfgDMA0=nicDrvcfgDMA0, nicHWRxMismatch=nicHWRxMismatch, nicAdapterReset=nicAdapterReset, nicCustCounterString=nicCustCounterString, nicParmAlignmentDelta=nicParmAlignmentDelta, nicParmAdapterResetDelta=nicParmAdapterResetDelta, nicParmHardwareMismatchPct=nicParmHardwareMismatchPct, nicDrvcfgAftPciVenodrId=nicDrvcfgAftPciVenodrId, nicStarfighterParmRxFalseInterruptDelta=nicStarfighterParmRxFalseInterruptDelta, nicMasterParmTxExcessFragsCount=nicMasterParmTxExcessFragsCount, nicTtlTxErrPacket=nicTtlTxErrPacket, nicParmFrameCopiedErrCount=nicParmFrameCopiedErrCount, nicDrvcfgAftPciSubSysVendorId=nicDrvcfgAftPciSubSysVendorId, nicParmCarrierSensePct=nicParmCarrierSensePct, nicRcvBuffersMaxSize=nicRcvBuffersMaxSize, nicParmTokenErrDelta=nicParmTokenErrDelta, nicTtlRxPacket=nicTtlRxPacket, nicParmFrequencyErrPct=nicParmFrequencyErrPct, nicParmExcessCollisionCount=nicParmExcessCollisionCount, nicErrors=nicErrors, nicDrvcfgSpeed=nicDrvcfgSpeed, nicParmRxOverflowCount=nicParmRxOverflowCount, nicMasterParmRxEmptyPct=nicMasterParmRxEmptyPct, nicRxTooBig=nicRxTooBig, nicParmCarrierSenseCount=nicParmCarrierSenseCount, nicTwisterParmTxFifoPct=nicTwisterParmTxFifoPct, nicBurstErrors=nicBurstErrors, nicMasterParmTxNoResourcesDelta=nicMasterParmTxNoResourcesDelta, nicDrvcfgSlot=nicDrvcfgSlot, nicLastOpenStatus=nicLastOpenStatus, nicParmBurstErrDelta=nicParmBurstErrDelta, nicParmLateCollisionPct=nicParmLateCollisionPct, nicTokenRingStatistics=nicTokenRingStatistics, nicTwisterParmTxTimedOutDelta=nicTwisterParmTxTimedOutDelta, nicCustEntry=nicCustEntry, nicTwisterParmTxFifoCount=nicTwisterParmTxFifoCount, nicMasterParms=nicMasterParms, nicParmLineErrDelta=nicParmLineErrDelta, nicFrameType=nicFrameType, nicDrvcfgMajor=nicDrvcfgMajor, nicDrvcfgAftGroupId=nicDrvcfgAftGroupId, nicStarfighterParmTxFifoCount=nicStarfighterParmTxFifoCount, nicTokenRingErrorsEntry=nicTokenRingErrorsEntry, nicLostFrames=nicLostFrames, nicFrequencyErrors=nicFrequencyErrors, nicParmLineErrPct=nicParmLineErrPct, nicDrvcfgPromiscuous=nicDrvcfgPromiscuous, nicTwisterParmRxPagingErrPct=nicTwisterParmRxPagingErrPct, nicParmAftStandbyErrDelta=nicParmAftStandbyErrDelta, nicParmAdapterResetPct=nicParmAdapterResetPct, nicFunctionalAddress=nicFunctionalAddress, nm=nm, nicTwisterParmDMATimedOutCount=nicTwisterParmDMATimedOutCount, nicTxOKByte=nicTxOKByte, nicDrvcfgInterrupt1=nicDrvcfgInterrupt1, nicParmSampling=nicParmSampling, nicTokenRingStatisticsTable=nicTokenRingStatisticsTable, nicDrvcfgMode=nicDrvcfgMode, nicErrorsTable=nicErrorsTable, nicParmLostFramesCount=nicParmLostFramesCount, nicRcvBuffers=nicRcvBuffers, nicNumCustCounter=nicNumCustCounter, nicFrameTypeString=nicFrameTypeString, nicObject=nicObject, nicCustStatTable=nicCustStatTable, nicStarfighterParmRxFalseInterruptCount=nicStarfighterParmRxFalseInterruptCount, nicStarfighterParms=nicStarfighterParms, nicStatisticsIndex=nicStatisticsIndex, nicDeltaTtlRxPacket=nicDeltaTtlRxPacket, nicParmAftRecoveryErrDelta=nicParmAftRecoveryErrDelta, nicStarfighterParmTxFifoPct=nicStarfighterParmTxFifoPct, nicParmNoECBPct=nicParmNoECBPct, nicParmAftGroupFailErrDelta=nicParmAftGroupFailErrDelta, nicRingState=nicRingState, nicDrvcfgAftMode=nicDrvcfgAftMode, nicStarfighterParmRxPagingErrPct=nicStarfighterParmRxPagingErrPct, nicParmRxErrCount=nicParmRxErrCount, nicErrorsIndex=nicErrorsIndex, nicParmNoECBDelta=nicParmNoECBDelta, nicParmACErrDelta=nicParmACErrDelta, nicStatisticsTable=nicStatisticsTable, nicParmTxErrDelta=nicParmTxErrDelta, nicParmFrameTooLongPct=nicParmFrameTooLongPct, nicTxAbortExcessiveDeferral=nicTxAbortExcessiveDeferral, nicParmAbortDelimitersDelta=nicParmAbortDelimitersDelta, nicDrvcfgMemory1=nicDrvcfgMemory1, nicParmAbortDelimitersCount=nicParmAbortDelimitersCount, nicStarfighterParmTxTimedOutCount=nicStarfighterParmTxTimedOutCount, nicRxOKByte=nicRxOKByte, nicDrvConfigIndex=nicDrvConfigIndex, nicParmLostFramesPct=nicParmLostFramesPct, nicDeltaRxGroup=nicDeltaRxGroup, nicTxOKDeferred=nicTxOKDeferred, nicStarfighterParmTxTimedOutPct=nicStarfighterParmTxTimedOutPct, nicDrvConfigEntry=nicDrvConfigEntry, nicTwisterParmRxFifoPct=nicTwisterParmRxFifoPct, nicRxOverflow=nicRxOverflow, nicMasterParmRxEmptyCount=nicMasterParmRxEmptyCount, nicDeltaRxOKByte=nicDeltaRxOKByte, nicDrvcfgAftBusDeviceId=nicDrvcfgAftBusDeviceId, nicParmNoECBCount=nicParmNoECBCount, nicTwisterParmRxFalseInterruptCount=nicTwisterParmRxFalseInterruptCount, nicTxGroup=nicTxGroup, nicParmDeferralDelta=nicParmDeferralDelta, nicShastaParmTxNoResourcesPct=nicShastaParmTxNoResourcesPct, nicTwisterParmTxFifoDelta=nicTwisterParmTxFifoDelta, nicDeltaTxOKByte=nicDeltaTxOKByte, nicMasterParmRxLowPct=nicMasterParmRxLowPct, nicTtlRxErrPacket=nicTtlRxErrPacket, nicParmLostFramesDelta=nicParmLostFramesDelta, nicDrvcfgIOport1=nicDrvcfgIOport1, nicStarfighterParmRxPagingErrDelta=nicStarfighterParmRxPagingErrDelta, nicStatisticsEntry=nicStatisticsEntry)
