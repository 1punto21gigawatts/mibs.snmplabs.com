#
# PySNMP MIB module TED-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TED-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:15:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
Float32TC, = mibBuilder.importSymbols("FLOAT-TC-MIB", "Float32TC")
IANAGmplsLSPEncodingTypeTC, IANAGmplsSwitchingTypeTC = mibBuilder.importSymbols("IANA-GMPLS-TC-MIB", "IANAGmplsLSPEncodingTypeTC", "IANAGmplsSwitchingTypeTC")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, IpAddress, transmission, TimeTicks, Counter64, Integer32, ObjectIdentity, MibIdentifier, Unsigned32, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "transmission", "TimeTicks", "Counter64", "Integer32", "ObjectIdentity", "MibIdentifier", "Unsigned32", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "Gauge32")
RowPointer, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "TextualConvention", "DisplayString")
tedMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 273))
tedMIB.setRevisions(('2012-12-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tedMIB.setRevisionsDescriptions(('Initial version. Published as RFC 6825.',))
if mibBuilder.loadTexts: tedMIB.setLastUpdated('201212210000Z')
if mibBuilder.loadTexts: tedMIB.setOrganization('IETF CCAMP Working Group.')
if mibBuilder.loadTexts: tedMIB.setContactInfo(' Tomohiro Otani Tm-otani@kddi.com Masanori Miyazawa ma-miyazawa@kddilabs.jp Thomas D. Nadeau tnadeau@juniper.net Kenji Kumaki ke-kumaki@kddi.com Comments and discussion to ccamp@ietf.org')
if mibBuilder.loadTexts: tedMIB.setDescription("This MIB module contains managed object definitions for TED in support of MPLS/GMPLS TE Database. Copyright (c) 2013 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info).")
class TedAreaIdTC(TextualConvention, OctetString):
    description = 'The area identifier of the IGP. If OSPF is used to advertise LSA, this represents an ospfArea. If IS-IS is used, this represents an area address.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

class TedRouterIdTC(TextualConvention, OctetString):
    description = 'The router identifier. If OSPF is used to advertise LSA, this represents a Router ID. If IS-IS is used, this represents a System ID.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 6)

class TedLinkIndexTC(TextualConvention, OctetString):
    description = 'The link identifier. If OSPF is used, this represents an ospfLsdbID. If IS-IS is used, this represents an isisLSPID. If a locally configured link is used, this object represents an arbitrary value, which is locally defined in a router.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

tedNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 273, 0))
tedObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 273, 1))
tedConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 273, 2))
tedTable = MibTable((1, 3, 6, 1, 2, 1, 10, 273, 1, 1), )
if mibBuilder.loadTexts: tedTable.setStatus('current')
if mibBuilder.loadTexts: tedTable.setDescription('This table indicates multiple TED information, which has been supported by RFC 3630 and RFC 5305.')
tedEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1), ).setIndexNames((0, "TED-MIB", "tedLocalRouterId"), (0, "TED-MIB", "tedRemoteRouterId"), (0, "TED-MIB", "tedLinkInformationSource"), (0, "TED-MIB", "tedLinkIndex"))
if mibBuilder.loadTexts: tedEntry.setStatus('current')
if mibBuilder.loadTexts: tedEntry.setDescription('This entry contains TED information commonly utilized in both MPLS and GMPLS.')
tedLinkInformationSource = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("locallyConfigured", 1), ("ospfv2", 2), ("ospfv3", 3), ("isis", 4), ("other", 5))))
if mibBuilder.loadTexts: tedLinkInformationSource.setStatus('current')
if mibBuilder.loadTexts: tedLinkInformationSource.setDescription('This object indicates the source of the information about the TE link.')
tedLocalRouterId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 2), TedRouterIdTC())
if mibBuilder.loadTexts: tedLocalRouterId.setReference('OSPF Version 2, RFC 2328, Appendix C.1 OSPF for IPv6, RFC 5340, Appendix C.1 ISO10589, Section 7.1')
if mibBuilder.loadTexts: tedLocalRouterId.setStatus('current')
if mibBuilder.loadTexts: tedLocalRouterId.setDescription('This object represents the Router ID of the router originating the LSA. If OSPF is used to advertise LSA, this represents a Router ID. If IS-IS is used, this represents a System ID. Otherwise, this represents zero.')
tedRemoteRouterId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 3), TedRouterIdTC())
if mibBuilder.loadTexts: tedRemoteRouterId.setReference('OSPF Version 2, RFC 2328, Appendix C.1 OSPF for IPv6, RFC 5340, Appendix C.1 ISO10589, Section 7.1')
if mibBuilder.loadTexts: tedRemoteRouterId.setStatus('current')
if mibBuilder.loadTexts: tedRemoteRouterId.setDescription('This object indicates the router at the remote end of the link from the originating router. If OSPF is used to advertise LSA, this represents a Link ID in the Link TLV. If IS-IS is used, this represents a neighbor System ID defined in RFC 5305. Otherwise, this represents zero.')
tedLinkIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 4), TedLinkIndexTC())
if mibBuilder.loadTexts: tedLinkIndex.setReference('OSPF Version 2, RFC 2328, Appendix A.4.1, OSPF for IPv6, RFC 5340, Appendix A.4.2 ISO10589, Section 9.8 ')
if mibBuilder.loadTexts: tedLinkIndex.setStatus('current')
if mibBuilder.loadTexts: tedLinkIndex.setDescription('This object indicates the link state identifier. If OSPF is used, this represents an ospfLsdbID. If IS-IS is used, this represents an isisLSPID. Otherwise, this represents a unique identifier within a node.')
tedLinkInformationData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedLinkInformationData.setStatus('current')
if mibBuilder.loadTexts: tedLinkInformationData.setDescription('If tedLinkInformationSource has the value unknown(0), this object MUST contain a value of zeroDotZero. If tedLinkInformationSource has the value locallyConfigured(1), an implementation can use this object to supply the identifier of the corresponding row entry in the teLinkTable of TE-LINK- STD-MIB (RFC 4220), the identifier of the corresponding row in a local proprietary TE link MIB module, or the value of zeroDotZero. If tedLinkInformationSource has the value ospfv2(2) and ospfv3(3), an implementation can use this object to supply the identifier of the corresponding row entry in the ospfLocalLsdbTable (OSPFv2-MIB) and the ospfv3AreaLsdbTable (OSPFv3-MIB), or the value of zeroDotZero. If tedLinkInformationSource has the value isis(4), an implementation can use this object to supply the identifier of the corresponding row entry in the isisAreaAddr of ISIS-MIB (RFC 4444), or the value of zeroDotZero. If tedLinkInformationSource has the value other(5), an implementation can use this object to supply the identifier of the corresponding row entry in the local proprietary MIB module, or the value of zeroDotZero.')
tedLinkState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedLinkState.setStatus('current')
if mibBuilder.loadTexts: tedLinkState.setDescription('This object represents the actual operational state of this TE link. For instance, if a row is created in the TED table, but the actual TE link is not available for some reason (e.g., when there is not yet a physical link or the link has been manually disabled), then the object would be down(2) state. In contrast, if a row is added and the TE link is available, this would be operationally up(1).')
tedAreaId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 7), TedAreaIdTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedAreaId.setReference('OSPF Version 2, RFC 2328, Appendix C.2 OSPF for IPv6, RFC 5340, Appendix C.2 ISO10589, Section 9.8')
if mibBuilder.loadTexts: tedAreaId.setStatus('current')
if mibBuilder.loadTexts: tedAreaId.setDescription('This object indicates the area identifier of the IGP. If OSPF is used to advertise LSA, this represents an ospfArea. If IS-IS is used, this represents an area address. Otherwise, this represents zero.')
tedLinkType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pointToPoint", 1), ("multiAccess", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedLinkType.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.5.1')
if mibBuilder.loadTexts: tedLinkType.setStatus('current')
if mibBuilder.loadTexts: tedLinkType.setDescription('This indicates the type of the link, such as point to point or multi-access.')
tedTeRouterIdAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedTeRouterIdAddrType.setStatus('current')
if mibBuilder.loadTexts: tedTeRouterIdAddrType.setDescription('This object indicates the TE-Router ID address type. Only values unknown(0), ipv4(1), or ipv6(2) are supported.')
tedTeRouterIdAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedTeRouterIdAddr.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.4.1 IS-IS extensions for TE, RFC 5305, Section 4.3')
if mibBuilder.loadTexts: tedTeRouterIdAddr.setStatus('current')
if mibBuilder.loadTexts: tedTeRouterIdAddr.setDescription('This object indicates the TE-Router ID.')
tedLinkIdAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 11), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedLinkIdAddrType.setStatus('current')
if mibBuilder.loadTexts: tedLinkIdAddrType.setDescription('This object indicates the address type of the TE Link ID. Only values unknown(0), ipv4(1), or ipv6(2) are supported.')
tedLinkIdAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedLinkIdAddr.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.5.2 IS-IS extensions for TE, RFC 5305, Section 4.3')
if mibBuilder.loadTexts: tedLinkIdAddr.setStatus('current')
if mibBuilder.loadTexts: tedLinkIdAddr.setDescription('This indicates the Router ID of the neighbor in the case of point-to-point links. This also indicates the interface address of the designated router in the case of multi-access links.')
tedMetric = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedMetric.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.5.5 IS-IS extensions for TE, RFC 5305, Section 3.7')
if mibBuilder.loadTexts: tedMetric.setStatus('current')
if mibBuilder.loadTexts: tedMetric.setDescription('This indicates the traffic engineering metric value of the TE link.')
tedMaxBandwidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 14), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedMaxBandwidth.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.5.6 IS-IS extensions for TE, RFC 5305, Section 3.4')
if mibBuilder.loadTexts: tedMaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: tedMaxBandwidth.setDescription('This indicates the maximum bandwidth that can be used on this link in this direction.')
tedMaxReservableBandwidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 15), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedMaxReservableBandwidth.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.5.7 IS-IS extensions for TE, RFC 5305, Section 3.5')
if mibBuilder.loadTexts: tedMaxReservableBandwidth.setStatus('current')
if mibBuilder.loadTexts: tedMaxReservableBandwidth.setDescription('This indicates the maximum bandwidth that may be reserved on this link in this direction.')
tedUnreservedBandwidthPri0 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 16), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedUnreservedBandwidthPri0.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.5.8 IS-IS extensions for TE, RFC 5305, Section 3.6')
if mibBuilder.loadTexts: tedUnreservedBandwidthPri0.setStatus('current')
if mibBuilder.loadTexts: tedUnreservedBandwidthPri0.setDescription('This indicates the amount of bandwidth not yet reserved at the priority 0.')
tedUnreservedBandwidthPri1 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 17), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedUnreservedBandwidthPri1.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.5.8 IS-IS extensions for TE, RFC 5305, Section 3.6')
if mibBuilder.loadTexts: tedUnreservedBandwidthPri1.setStatus('current')
if mibBuilder.loadTexts: tedUnreservedBandwidthPri1.setDescription('This indicates the amount of bandwidth not yet reserved at the priority 1.')
tedUnreservedBandwidthPri2 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 18), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedUnreservedBandwidthPri2.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.5.8 IS-IS extensions for TE, RFC 5305, Section 3.6')
if mibBuilder.loadTexts: tedUnreservedBandwidthPri2.setStatus('current')
if mibBuilder.loadTexts: tedUnreservedBandwidthPri2.setDescription('This indicates the amount of bandwidth not yet reserved at the priority 2.')
tedUnreservedBandwidthPri3 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 19), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedUnreservedBandwidthPri3.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.5.8 IS-IS extensions for TE, RFC 5305, Section 3.6')
if mibBuilder.loadTexts: tedUnreservedBandwidthPri3.setStatus('current')
if mibBuilder.loadTexts: tedUnreservedBandwidthPri3.setDescription('This indicates the amount of bandwidth not yet reserved at the priority 3.')
tedUnreservedBandwidthPri4 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 20), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedUnreservedBandwidthPri4.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.5.8 IS-IS extensions for TE, RFC 5305, Section 3.6')
if mibBuilder.loadTexts: tedUnreservedBandwidthPri4.setStatus('current')
if mibBuilder.loadTexts: tedUnreservedBandwidthPri4.setDescription('This indicates the amount of bandwidth not yet reserved at the priority 4.')
tedUnreservedBandwidthPri5 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 21), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedUnreservedBandwidthPri5.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.5.8 IS-IS extensions for TE, RFC 5305, Section 3.6')
if mibBuilder.loadTexts: tedUnreservedBandwidthPri5.setStatus('current')
if mibBuilder.loadTexts: tedUnreservedBandwidthPri5.setDescription('This indicates the amount of bandwidth not yet reserved at the priority 5.')
tedUnreservedBandwidthPri6 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 22), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedUnreservedBandwidthPri6.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.5.8 IS-IS extensions for TE, RFC 5305, 3.6')
if mibBuilder.loadTexts: tedUnreservedBandwidthPri6.setStatus('current')
if mibBuilder.loadTexts: tedUnreservedBandwidthPri6.setDescription('This indicates the amount of bandwidth not yet reserved at the priority 6.')
tedUnreservedBandwidthPri7 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 23), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedUnreservedBandwidthPri7.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.5.8 IS-IS extensions for TE, RFC 5305, Section 3.6')
if mibBuilder.loadTexts: tedUnreservedBandwidthPri7.setStatus('current')
if mibBuilder.loadTexts: tedUnreservedBandwidthPri7.setDescription('This indicates the amount of bandwidth not yet reserved at the priority 7.')
tedAdministrativeGroup = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedAdministrativeGroup.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.5.9 IS-IS extensions for TE, RFC 5305, Section 3.1')
if mibBuilder.loadTexts: tedAdministrativeGroup.setStatus('current')
if mibBuilder.loadTexts: tedAdministrativeGroup.setDescription('This indicates the Administrative Group to which the link belongs. Since the value is a bit mask, the link can belong to multiple groups. This is also called Resource Class/Color.')
tedLocalId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedLocalId.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.1 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.1')
if mibBuilder.loadTexts: tedLocalId.setStatus('current')
if mibBuilder.loadTexts: tedLocalId.setDescription('This indicates the Link Local Identifier of an unnumbered link.')
tedRemoteId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedRemoteId.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.1 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.1')
if mibBuilder.loadTexts: tedRemoteId.setStatus('current')
if mibBuilder.loadTexts: tedRemoteId.setDescription('This indicates the Link Remote Identifier of an unnumbered link.')
tedLinkProtectionType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 1, 1, 27), Bits().clone(namedValues=NamedValues(("extraTraffic", 0), ("unprotected", 1), ("shared", 2), ("dedicatedOneToOne", 3), ("dedicatedOnePlusOne", 4), ("enhanced", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedLinkProtectionType.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.2 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.2')
if mibBuilder.loadTexts: tedLinkProtectionType.setStatus('current')
if mibBuilder.loadTexts: tedLinkProtectionType.setDescription('This object indicates the protection type of the TE link.')
tedLocalIfAddrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 273, 1, 2), )
if mibBuilder.loadTexts: tedLocalIfAddrTable.setStatus('current')
if mibBuilder.loadTexts: tedLocalIfAddrTable.setDescription('This table contains the IP address information of a local TE link.')
tedLocalIfAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 273, 1, 2, 1), ).setIndexNames((0, "TED-MIB", "tedLinkIndex"), (0, "TED-MIB", "tedLocalIfAddr"))
if mibBuilder.loadTexts: tedLocalIfAddrEntry.setStatus('current')
if mibBuilder.loadTexts: tedLocalIfAddrEntry.setDescription('This entry contains the IP address information of the local TE link.')
tedLocalIfAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedLocalIfAddrType.setStatus('current')
if mibBuilder.loadTexts: tedLocalIfAddrType.setDescription('This object indicates the address type of the local TE link. Only values unknown(0), ipv4(1), or ipv6(2) have to be supported.')
tedLocalIfAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 2, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: tedLocalIfAddr.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.5.3, Traffic Engineering Extensions to OSPF Version 3, RFC 5329, Section 4.3 IS-IS extensions for TE, RFC 5305, Section 3.4')
if mibBuilder.loadTexts: tedLocalIfAddr.setStatus('current')
if mibBuilder.loadTexts: tedLocalIfAddr.setDescription('This object indicates the address of the local TE link.')
tedRemoteIfAddrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 273, 1, 3), )
if mibBuilder.loadTexts: tedRemoteIfAddrTable.setStatus('current')
if mibBuilder.loadTexts: tedRemoteIfAddrTable.setDescription('This table contains the IP address information of a remote TE link.')
tedRemoteIfAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 273, 1, 3, 1), ).setIndexNames((0, "TED-MIB", "tedLinkIndex"), (0, "TED-MIB", "tedRemoteIfAddr"))
if mibBuilder.loadTexts: tedRemoteIfAddrEntry.setStatus('current')
if mibBuilder.loadTexts: tedRemoteIfAddrEntry.setDescription('This entry contains the IP address information of the remote TE link.')
tedRemoteIfAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedRemoteIfAddrType.setStatus('current')
if mibBuilder.loadTexts: tedRemoteIfAddrType.setDescription('This object indicates the address type of the remote TE link.')
tedRemoteIfAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 3, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: tedRemoteIfAddr.setReference('Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630, Section 2.5.4, Traffic Engineering Extensions to OSPF Version3, RFC 5329, Section 4.4 IS-IS extensions for TE, RFC 5305, Section 3.3')
if mibBuilder.loadTexts: tedRemoteIfAddr.setStatus('current')
if mibBuilder.loadTexts: tedRemoteIfAddr.setDescription('This object indicates the address of the remote TE link.')
tedSwCapTable = MibTable((1, 3, 6, 1, 2, 1, 10, 273, 1, 4), )
if mibBuilder.loadTexts: tedSwCapTable.setStatus('current')
if mibBuilder.loadTexts: tedSwCapTable.setDescription('This table contains the GMPLS TED switching capability information.')
tedSwCapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 273, 1, 4, 1), ).setIndexNames((0, "TED-MIB", "tedLinkIndex"), (0, "TED-MIB", "tedSwCapIndex"))
if mibBuilder.loadTexts: tedSwCapEntry.setStatus('current')
if mibBuilder.loadTexts: tedSwCapEntry.setDescription('This entry relates each TE link with its GMPLS TE switching capability information. If the MIB module deals with only OSPF- TE information, the value of each object related with GMPLS TE extensions should be null.')
tedSwCapIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: tedSwCapIndex.setStatus('current')
if mibBuilder.loadTexts: tedSwCapIndex.setDescription('This index is utilized to identify multiple switching functions on a local or remote TE link according to definitions of textual conventions of GMPLS, RFC 4801.')
tedSwCapType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 4, 1, 2), IANAGmplsSwitchingTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedSwCapType.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.4 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.3')
if mibBuilder.loadTexts: tedSwCapType.setStatus('current')
if mibBuilder.loadTexts: tedSwCapType.setDescription('This object indicates the GMPLS switching capability assigned to the TE link according to definitions of textual conventions of GMPLS, RFC 4801.')
tedSwCapEncoding = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 4, 1, 3), IANAGmplsLSPEncodingTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedSwCapEncoding.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.4 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.3')
if mibBuilder.loadTexts: tedSwCapEncoding.setStatus('current')
if mibBuilder.loadTexts: tedSwCapEncoding.setDescription('This object indicates the GMPLS encoding type assigned to the TE link.')
tedSwCapMaxLspBandwidthPri0 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 4, 1, 4), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri0.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.4 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.3')
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri0.setStatus('current')
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri0.setDescription('This object indicates the maximum bandwidth of the TE link at the priority 0 for GMPLS LSP creation.')
tedSwCapMaxLspBandwidthPri1 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 4, 1, 5), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri1.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.4 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.3')
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri1.setStatus('current')
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri1.setDescription('This object indicates the maximum bandwidth of the TE link at the priority 1 for GMPLS LSP creation.')
tedSwCapMaxLspBandwidthPri2 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 4, 1, 6), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri2.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.4 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.3')
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri2.setStatus('current')
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri2.setDescription('This object indicates the maximum bandwidth of the TE link at the priority 2 for GMPLS LSP creation.')
tedSwCapMaxLspBandwidthPri3 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 4, 1, 7), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri3.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.4 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.3')
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri3.setStatus('current')
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri3.setDescription('This object indicates the maximum bandwidth of the TE link at the priority 3 for GMPLS LSP creation.')
tedSwCapMaxLspBandwidthPri4 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 4, 1, 8), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri4.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.4 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.3')
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri4.setStatus('current')
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri4.setDescription('This object indicates the maximum bandwidth of the TE link at the priority 4 for GMPLS LSP creation.')
tedSwCapMaxLspBandwidthPri5 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 4, 1, 9), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri5.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.4 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.3')
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri5.setStatus('current')
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri5.setDescription('This object indicates the maximum bandwidth of the TE link at the priority 5 for GMPLS LSP creation.')
tedSwCapMaxLspBandwidthPri6 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 4, 1, 10), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri6.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.4 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.3')
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri6.setStatus('current')
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri6.setDescription('This object indicates the maximum bandwidth of the TE link at the priority 6 for GMPLS LSP creation.')
tedSwCapMaxLspBandwidthPri7 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 4, 1, 11), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri7.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.4 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.3')
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri7.setStatus('current')
if mibBuilder.loadTexts: tedSwCapMaxLspBandwidthPri7.setDescription('This object indicates the maximum bandwidth of the TE link at the priority 7 for GMPLS LSP creation.')
tedSwCapMinLspBandwidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 4, 1, 12), Float32TC()).setUnits('Byte per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tedSwCapMinLspBandwidth.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.4 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.3')
if mibBuilder.loadTexts: tedSwCapMinLspBandwidth.setStatus('current')
if mibBuilder.loadTexts: tedSwCapMinLspBandwidth.setDescription('This object indicates the minimum bandwidth of the TE link for GMPLS LSP creation if the switching capability field is TDM, PSC-1, PSC-2, PSC-3, or PSC-4.')
tedSwCapIfMtu = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedSwCapIfMtu.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.4 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.3')
if mibBuilder.loadTexts: tedSwCapIfMtu.setStatus('current')
if mibBuilder.loadTexts: tedSwCapIfMtu.setDescription('This object indicates the MTU of the local or remote TE link.')
tedSwCapIndication = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("arbitrary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedSwCapIndication.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.4 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.3')
if mibBuilder.loadTexts: tedSwCapIndication.setStatus('current')
if mibBuilder.loadTexts: tedSwCapIndication.setDescription('This object indicates whether the interface supports Standard or Arbitrary SONET/SDH.')
tedSrlgTable = MibTable((1, 3, 6, 1, 2, 1, 10, 273, 1, 5), )
if mibBuilder.loadTexts: tedSrlgTable.setStatus('current')
if mibBuilder.loadTexts: tedSrlgTable.setDescription('This table contains the SRLG information of the TE link.')
tedSrlgEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 273, 1, 5, 1), ).setIndexNames((0, "TED-MIB", "tedLinkIndex"), (0, "TED-MIB", "tedSrlgIndex"))
if mibBuilder.loadTexts: tedSrlgEntry.setStatus('current')
if mibBuilder.loadTexts: tedSrlgEntry.setDescription('This entry relates each TE link with its SRLG information.')
tedSrlgIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: tedSrlgIndex.setReference('OSPF Extensions in support of GMPLS, RFC 4203, Section 1.3 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.4')
if mibBuilder.loadTexts: tedSrlgIndex.setStatus('current')
if mibBuilder.loadTexts: tedSrlgIndex.setDescription('This index is utilized to identify multiple SRLG values on a local or remote TE link. This object represents an arbitrary value, which is locally defined in a router.')
tedSrlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 273, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tedSrlg.setReference('OSPF Extensions in Support of GMPLS, RFC 4203, Section 1.3 IS-IS Extensions in Support of GMPLS, RFC 5307, Section 1.4')
if mibBuilder.loadTexts: tedSrlg.setStatus('current')
if mibBuilder.loadTexts: tedSrlg.setDescription('This object indicates the SRLG value assigned to a local or remote TE link.')
tedStatusChangeNotificationMaxRate = MibScalar((1, 3, 6, 1, 2, 1, 10, 273, 1, 6), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tedStatusChangeNotificationMaxRate.setStatus('current')
if mibBuilder.loadTexts: tedStatusChangeNotificationMaxRate.setDescription('A lot of notifications relating to the status change are expected to generate in a node, especially when a network failure occurs and might cause a performance degradation of the node itself. To avoid such a defect, this object provides the maximum number of notifications generated per minute. If events occur more rapidly, the implementation may simply fail to emit these notifications during that period, or may queue them until an appropriate time. A value of 0 means no throttling is applied and events may be notified at the rate at which they occur.')
tedCreatedDeletedNotificationMaxRate = MibScalar((1, 3, 6, 1, 2, 1, 10, 273, 1, 7), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tedCreatedDeletedNotificationMaxRate.setStatus('current')
if mibBuilder.loadTexts: tedCreatedDeletedNotificationMaxRate.setDescription('A lot of notifications relating to new registration in the TED table by receiving new TE link information or deletion of existing entries in the TED table are expected to generate in a node. This object provides the maximum number of notifications generated per minute.')
tedStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 10, 273, 0, 1)).setObjects(("TED-MIB", "tedLinkState"))
if mibBuilder.loadTexts: tedStatusChange.setStatus('current')
if mibBuilder.loadTexts: tedStatusChange.setDescription('This notification signifies that there has been change in the TE information of tedTable, tedLocalIfAddrTable, tedRemoteIfAddrTable, tedSwCapTable, and/or tedSrlgTable. For example, this should be generated when tedUnreservedBandwidth is changed to create or delete LSP using the registered TE link.')
tedEntryCreated = NotificationType((1, 3, 6, 1, 2, 1, 10, 273, 0, 2)).setObjects(("TED-MIB", "tedLinkState"))
if mibBuilder.loadTexts: tedEntryCreated.setStatus('current')
if mibBuilder.loadTexts: tedEntryCreated.setDescription('This notification signifies that there has been new registration in the TED table by receiving new TE link information. For example, this should be generated when a new index (tedLinkIndex) is registered in the TED table.')
tedEntryDeleted = NotificationType((1, 3, 6, 1, 2, 1, 10, 273, 0, 3)).setObjects(("TED-MIB", "tedLinkState"))
if mibBuilder.loadTexts: tedEntryDeleted.setStatus('current')
if mibBuilder.loadTexts: tedEntryDeleted.setDescription('This notification signifies that there has been deletion of an entry in the TED table. For example, this should be generated when one of the existing entries is deleted in the TED table.')
tedCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 273, 2, 1))
tedGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 273, 2, 2))
tedModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 273, 2, 1, 1)).setObjects(("TED-MIB", "tedMainGroup"), ("TED-MIB", "tedObjectsGroup"), ("TED-MIB", "tedNotificationGroup"), ("TED-MIB", "tedUnnumberedLinkGroup"), ("TED-MIB", "tedNumberedLinkGroup"), ("TED-MIB", "tedSwCapGroup"), ("TED-MIB", "tedSwCapMinLspBandwidthGroup"), ("TED-MIB", "tedSwCapIfMtuGroup"), ("TED-MIB", "tedSwCapIndicationGroup"), ("TED-MIB", "tedSrlgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tedModuleFullCompliance = tedModuleFullCompliance.setStatus('current')
if mibBuilder.loadTexts: tedModuleFullCompliance.setDescription('Compliance statement for agents provides full support for the TED MIB.')
tedModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 273, 2, 1, 2)).setObjects(("TED-MIB", "tedMainGroup"), ("TED-MIB", "tedUnnumberedLinkGroup"), ("TED-MIB", "tedNumberedLinkGroup"), ("TED-MIB", "tedSwCapGroup"), ("TED-MIB", "tedSwCapMinLspBandwidthGroup"), ("TED-MIB", "tedSwCapIfMtuGroup"), ("TED-MIB", "tedSwCapIndicationGroup"), ("TED-MIB", "tedSrlgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tedModuleReadOnlyCompliance = tedModuleReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: tedModuleReadOnlyCompliance.setDescription('Compliance requirement for implementations only provides read- only support for TED. Such devices can then be monitored but cannot be configured using this MIB module.')
tedMainGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 273, 2, 2, 1)).setObjects(("TED-MIB", "tedLinkState"), ("TED-MIB", "tedAreaId"), ("TED-MIB", "tedLinkType"), ("TED-MIB", "tedTeRouterIdAddrType"), ("TED-MIB", "tedTeRouterIdAddr"), ("TED-MIB", "tedLinkIdAddrType"), ("TED-MIB", "tedLinkIdAddr"), ("TED-MIB", "tedMetric"), ("TED-MIB", "tedMaxBandwidth"), ("TED-MIB", "tedMaxReservableBandwidth"), ("TED-MIB", "tedUnreservedBandwidthPri0"), ("TED-MIB", "tedUnreservedBandwidthPri1"), ("TED-MIB", "tedUnreservedBandwidthPri2"), ("TED-MIB", "tedUnreservedBandwidthPri3"), ("TED-MIB", "tedUnreservedBandwidthPri4"), ("TED-MIB", "tedUnreservedBandwidthPri5"), ("TED-MIB", "tedUnreservedBandwidthPri6"), ("TED-MIB", "tedUnreservedBandwidthPri7"), ("TED-MIB", "tedAdministrativeGroup"), ("TED-MIB", "tedLinkProtectionType"), ("TED-MIB", "tedLinkInformationData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tedMainGroup = tedMainGroup.setStatus('current')
if mibBuilder.loadTexts: tedMainGroup.setDescription('Collection of objects for TED management')
tedObjectsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 273, 2, 2, 2)).setObjects(("TED-MIB", "tedStatusChangeNotificationMaxRate"), ("TED-MIB", "tedCreatedDeletedNotificationMaxRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tedObjectsGroup = tedObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: tedObjectsGroup.setDescription('The objects needed to implement notification.')
tedNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 273, 2, 2, 3)).setObjects(("TED-MIB", "tedStatusChange"), ("TED-MIB", "tedEntryCreated"), ("TED-MIB", "tedEntryDeleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tedNotificationGroup = tedNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: tedNotificationGroup.setDescription('This group is mandatory for those implementations that can implement the notifications contained in this group.')
tedUnnumberedLinkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 273, 2, 2, 4)).setObjects(("TED-MIB", "tedLocalId"), ("TED-MIB", "tedRemoteId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tedUnnumberedLinkGroup = tedUnnumberedLinkGroup.setStatus('current')
if mibBuilder.loadTexts: tedUnnumberedLinkGroup.setDescription('The objects needed to implement the unnumbered links.')
tedNumberedLinkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 273, 2, 2, 5)).setObjects(("TED-MIB", "tedLocalIfAddrType"), ("TED-MIB", "tedRemoteIfAddrType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tedNumberedLinkGroup = tedNumberedLinkGroup.setStatus('current')
if mibBuilder.loadTexts: tedNumberedLinkGroup.setDescription('The objects needed to implement the numbered links.')
tedSwCapGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 273, 2, 2, 6)).setObjects(("TED-MIB", "tedSwCapType"), ("TED-MIB", "tedSwCapEncoding"), ("TED-MIB", "tedSwCapMaxLspBandwidthPri0"), ("TED-MIB", "tedSwCapMaxLspBandwidthPri1"), ("TED-MIB", "tedSwCapMaxLspBandwidthPri2"), ("TED-MIB", "tedSwCapMaxLspBandwidthPri3"), ("TED-MIB", "tedSwCapMaxLspBandwidthPri4"), ("TED-MIB", "tedSwCapMaxLspBandwidthPri5"), ("TED-MIB", "tedSwCapMaxLspBandwidthPri6"), ("TED-MIB", "tedSwCapMaxLspBandwidthPri7"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tedSwCapGroup = tedSwCapGroup.setStatus('current')
if mibBuilder.loadTexts: tedSwCapGroup.setDescription('The objects needed to implement the TE links with GMPLS TE switching capability information.')
tedSwCapMinLspBandwidthGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 273, 2, 2, 7)).setObjects(("TED-MIB", "tedSwCapMinLspBandwidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tedSwCapMinLspBandwidthGroup = tedSwCapMinLspBandwidthGroup.setStatus('current')
if mibBuilder.loadTexts: tedSwCapMinLspBandwidthGroup.setDescription('The objects needed to implement the minimum bandwidth of the TE link for GMPLS LSP creation.')
tedSwCapIfMtuGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 273, 2, 2, 8)).setObjects(("TED-MIB", "tedSwCapIfMtu"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tedSwCapIfMtuGroup = tedSwCapIfMtuGroup.setStatus('current')
if mibBuilder.loadTexts: tedSwCapIfMtuGroup.setDescription('The objects needed to implement the MTU information of the local or remote TE link.')
tedSwCapIndicationGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 273, 2, 2, 9)).setObjects(("TED-MIB", "tedSwCapIndication"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tedSwCapIndicationGroup = tedSwCapIndicationGroup.setStatus('current')
if mibBuilder.loadTexts: tedSwCapIndicationGroup.setDescription('The objects needed to implement the indication of whether the interface supports Standard or Arbitrary SONET/SDH.')
tedSrlgGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 273, 2, 2, 10)).setObjects(("TED-MIB", "tedSrlg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tedSrlgGroup = tedSrlgGroup.setStatus('current')
if mibBuilder.loadTexts: tedSrlgGroup.setDescription('The objects needed to implement multiple SRLG values with GMPLS TE information.')
mibBuilder.exportSymbols("TED-MIB", tedTeRouterIdAddr=tedTeRouterIdAddr, tedLinkIdAddrType=tedLinkIdAddrType, tedLinkInformationData=tedLinkInformationData, tedSwCapMinLspBandwidthGroup=tedSwCapMinLspBandwidthGroup, tedNotifications=tedNotifications, TedAreaIdTC=TedAreaIdTC, tedSwCapIfMtu=tedSwCapIfMtu, tedRemoteIfAddrType=tedRemoteIfAddrType, tedUnreservedBandwidthPri5=tedUnreservedBandwidthPri5, tedSrlgTable=tedSrlgTable, tedLinkIndex=tedLinkIndex, tedRemoteIfAddrTable=tedRemoteIfAddrTable, tedUnreservedBandwidthPri2=tedUnreservedBandwidthPri2, tedSwCapType=tedSwCapType, tedEntryDeleted=tedEntryDeleted, tedSrlgIndex=tedSrlgIndex, tedSrlg=tedSrlg, tedSwCapMaxLspBandwidthPri1=tedSwCapMaxLspBandwidthPri1, tedObjects=tedObjects, tedUnreservedBandwidthPri6=tedUnreservedBandwidthPri6, tedSwCapMaxLspBandwidthPri5=tedSwCapMaxLspBandwidthPri5, TedRouterIdTC=TedRouterIdTC, tedRemoteRouterId=tedRemoteRouterId, tedSwCapMaxLspBandwidthPri0=tedSwCapMaxLspBandwidthPri0, tedSrlgEntry=tedSrlgEntry, tedMaxBandwidth=tedMaxBandwidth, tedAdministrativeGroup=tedAdministrativeGroup, tedEntryCreated=tedEntryCreated, tedSwCapMaxLspBandwidthPri2=tedSwCapMaxLspBandwidthPri2, tedLocalIfAddrEntry=tedLocalIfAddrEntry, tedSwCapIfMtuGroup=tedSwCapIfMtuGroup, tedUnreservedBandwidthPri1=tedUnreservedBandwidthPri1, tedUnreservedBandwidthPri3=tedUnreservedBandwidthPri3, tedLinkState=tedLinkState, TedLinkIndexTC=TedLinkIndexTC, tedEntry=tedEntry, tedSwCapIndex=tedSwCapIndex, tedSwCapMaxLspBandwidthPri4=tedSwCapMaxLspBandwidthPri4, tedRemoteIfAddrEntry=tedRemoteIfAddrEntry, tedRemoteIfAddr=tedRemoteIfAddr, tedSwCapTable=tedSwCapTable, tedUnreservedBandwidthPri0=tedUnreservedBandwidthPri0, tedSrlgGroup=tedSrlgGroup, tedTeRouterIdAddrType=tedTeRouterIdAddrType, tedMaxReservableBandwidth=tedMaxReservableBandwidth, tedStatusChange=tedStatusChange, tedLinkInformationSource=tedLinkInformationSource, tedSwCapGroup=tedSwCapGroup, tedLinkType=tedLinkType, tedSwCapIndicationGroup=tedSwCapIndicationGroup, tedCreatedDeletedNotificationMaxRate=tedCreatedDeletedNotificationMaxRate, tedLocalRouterId=tedLocalRouterId, tedMIB=tedMIB, tedSwCapMaxLspBandwidthPri7=tedSwCapMaxLspBandwidthPri7, tedUnreservedBandwidthPri4=tedUnreservedBandwidthPri4, tedRemoteId=tedRemoteId, tedConformance=tedConformance, tedModuleFullCompliance=tedModuleFullCompliance, tedCompliances=tedCompliances, tedSwCapMaxLspBandwidthPri3=tedSwCapMaxLspBandwidthPri3, tedUnreservedBandwidthPri7=tedUnreservedBandwidthPri7, tedGroups=tedGroups, tedMetric=tedMetric, tedMainGroup=tedMainGroup, tedStatusChangeNotificationMaxRate=tedStatusChangeNotificationMaxRate, tedSwCapIndication=tedSwCapIndication, tedLocalIfAddrTable=tedLocalIfAddrTable, tedSwCapEntry=tedSwCapEntry, tedSwCapMaxLspBandwidthPri6=tedSwCapMaxLspBandwidthPri6, tedUnnumberedLinkGroup=tedUnnumberedLinkGroup, tedAreaId=tedAreaId, tedLinkIdAddr=tedLinkIdAddr, tedModuleReadOnlyCompliance=tedModuleReadOnlyCompliance, tedObjectsGroup=tedObjectsGroup, tedSwCapMinLspBandwidth=tedSwCapMinLspBandwidth, PYSNMP_MODULE_ID=tedMIB, tedSwCapEncoding=tedSwCapEncoding, tedLocalId=tedLocalId, tedLocalIfAddrType=tedLocalIfAddrType, tedNotificationGroup=tedNotificationGroup, tedLocalIfAddr=tedLocalIfAddr, tedTable=tedTable, tedNumberedLinkGroup=tedNumberedLinkGroup, tedLinkProtectionType=tedLinkProtectionType)
