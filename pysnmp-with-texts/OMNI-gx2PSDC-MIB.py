#
# PySNMP MIB module OMNI-gx2PSDC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2PSDC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:33:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
gx2Psdc, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Psdc")
gi, motproxies = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "gi", "motproxies")
trapNetworkElemAvailStatus, trapNetworkElemSerialNum, trapChangedValueDisplayString, trapNetworkElemAdminState, trapText, trapNetworkElemAlarmStatus, trapPerceivedSeverity, trapNETrapLastTrapTimeStamp, trapChangedObjectId, trapNetworkElemOperState, trapNetworkElemModelNumber, trapIdentifier, trapChangedValueInteger = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus", "trapNetworkElemSerialNum", "trapChangedValueDisplayString", "trapNetworkElemAdminState", "trapText", "trapNetworkElemAlarmStatus", "trapPerceivedSeverity", "trapNETrapLastTrapTimeStamp", "trapChangedObjectId", "trapNetworkElemOperState", "trapNetworkElemModelNumber", "trapIdentifier", "trapChangedValueInteger")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
MibIdentifier, Unsigned32, TimeTicks, IpAddress, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, ObjectIdentity, iso, NotificationType, NotificationType, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "TimeTicks", "IpAddress", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "ObjectIdentity", "iso", "NotificationType", "NotificationType", "Gauge32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Float(Counter32):
    pass

gx2PsdcDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 1))
gx2PsdcAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2), )
if mibBuilder.loadTexts: gx2PsdcAnalogTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2PsdcAnalogTable.setDescription('This table contains gx2Psdc specific parameters with nominal and current values.')
gx2PsdcAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1), ).setIndexNames((0, "OMNI-gx2PSDC-MIB", "gx2PsdcAnalogTableIndex"))
if mibBuilder.loadTexts: gx2PsdcAnalogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2PsdcAnalogEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2PsdcStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3), )
if mibBuilder.loadTexts: gx2PsdcStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2PsdcStatusTable.setDescription('This table contains gx2Psdc specific parameters with nominal and current values.')
gx2PsdcStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2), ).setIndexNames((0, "OMNI-gx2PSDC-MIB", "gx2PsdcStatusTableIndex"))
if mibBuilder.loadTexts: gx2PsdcStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2PsdcStatusEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2PsdcFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4), )
if mibBuilder.loadTexts: gx2PsdcFactoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2PsdcFactoryTable.setDescription('This table contains gx2Psdc specific parameters with nominal and current values.')
gx2PsdcFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3), ).setIndexNames((0, "OMNI-gx2PSDC-MIB", "gx2PsdcFactoryTableIndex"))
if mibBuilder.loadTexts: gx2PsdcFactoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2PsdcFactoryEntry.setDescription('This list contains Factory parameters and descriptions.')
gx2PsdcHoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 5), )
if mibBuilder.loadTexts: gx2PsdcHoldTimeTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2PsdcHoldTimeTable.setDescription('This table contains gx2Psdc specific parameters with nominal and current values.')
gx2PsdcHoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 5, 4), ).setIndexNames((0, "OMNI-gx2PSDC-MIB", "rxgx2PsdcHoldTimeTableIndex"), (0, "OMNI-gx2PSDC-MIB", "rxgx2PsdcHoldTimeSpecIndex"))
if mibBuilder.loadTexts: gx2PsdcHoldTimeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2PsdcHoldTimeEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2PsdcDigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 6), )
if mibBuilder.loadTexts: gx2PsdcDigitalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2PsdcDigitalTable.setDescription('This table contains gx2Psdc specific parameters with nominal and current values.')
gx2PsdcDigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 6, 5), ).setIndexNames((0, "OMNI-gx2PSDC-MIB", "gx2PsdcDigitalTableIndex"))
if mibBuilder.loadTexts: gx2PsdcDigitalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2PsdcDigitalEntry.setDescription('This list contains digital parameters and descriptions.')
gx2PsdcAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2PsdcAnalogTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2PsdcAnalogTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
pslabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabelFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: pslabelFanCurrent.setDescription('The value of this object provides the label of the Fan Current Analog parameter.')
psuomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuomFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: psuomFanCurrent.setDescription('The value of this object provides the Unit of Measure of the Fan Current Analog parameter.')
psmajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHighFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorHighFanCurrent.setDescription('The value of this object provides the Major High alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number')
psmajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLowFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorLowFanCurrent.setDescription('The value of this object provides the Major Low alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number')
psminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHighFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: psminorHighFanCurrent.setDescription('The value of this object provides the Minor High alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLowFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: psminorLowFanCurrent.setDescription('The value of this object provides the Minor Low alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
pscurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: pscurrentValueFanCurrent.setDescription('The value of this object provides the Current value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psstateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlagFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: psstateFlagFanCurrent.setDescription('The value of this object provides the state of the Fan Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable)')
psminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: psminValueFanCurrent.setDescription('The value of this object provides the minimum value the Fan Current Analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psmaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: psmaxValueFanCurrent.setDescription('The value of this object provides the maximum value the Fan Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psalarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmStateFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: psalarmStateFanCurrent.setDescription('The value of this object provides the curent alarm state of the Fan Current Analog parameter.')
pslabel12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabel12Volt.setStatus('optional')
if mibBuilder.loadTexts: pslabel12Volt.setDescription('The value of this object provides the label of the 12 Volt Analog parameter.')
psuom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuom12Volt.setStatus('optional')
if mibBuilder.loadTexts: psuom12Volt.setDescription('The value of this object provides the unit of measure of the 12 Volt Analog parameter.')
psmajorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHigh12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorHigh12Volt.setDescription('The value of this object provides the Major High alarm value of the 12 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psmajorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLow12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorLow12Volt.setDescription('The value of this object provides the Major Low alarm value of the 12 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHigh12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psminorHigh12Volt.setDescription('The value of this object provides the Minor High alarm value of the 12 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLow12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psminorLow12Volt.setDescription('The value of this object provides the Minor Low alarm value of the 12 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
pscurrentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: pscurrentValue12Volt.setDescription('The value of this object provides the Current value of the 12 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psstateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlag12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psstateFlag12Volt.setDescription('The value of this object provides the state of the 12 Volt Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable)')
psminValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psminValue12Volt.setDescription('The value of this object provides the minimum value the 12 Volt Analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psmaxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psmaxValue12Volt.setDescription('The value of this object provides the maximum value the 12 Volt Analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psalarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmState12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psalarmState12Volt.setDescription('The value of this object provides the curent alarm state of the 12 Volt Analog parameter.')
pslabel5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabel5Volt.setStatus('optional')
if mibBuilder.loadTexts: pslabel5Volt.setDescription('The value of this object provides the label of the Attenuator Setting Analog parameter.')
psuom5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuom5Volt.setStatus('optional')
if mibBuilder.loadTexts: psuom5Volt.setDescription('The value of this object provides the Unit of Measure of the 5 Volt Analog parameter.')
psmajorHigh5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHigh5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorHigh5Volt.setDescription('The value of this object provides the Major High alarm value of the 5 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psmajorLow5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLow5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorLow5Volt.setDescription('The value of this object provides the Major Low alarm value of the 5 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorHigh5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHigh5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psminorHigh5Volt.setDescription('The value of this object provides the Minor High alarm value of the 5 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorLow5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLow5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psminorLow5Volt.setDescription('The value of this object provides the Minor Low alarm value of the 5 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
pscurrentValue5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValue5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: pscurrentValue5Volt.setDescription('The value of this object provides the Current value of the 5 Volt Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psstateFlag5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlag5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psstateFlag5Volt.setDescription('The value of this object provides the state of the 5 Volt Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
psminValue5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValue5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psminValue5Volt.setDescription('The value of this object provides the minimum value the 5 Volt Analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psmaxValue5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValue5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psmaxValue5Volt.setDescription('The value of this object provides the maximum value the 5 Volt Analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psalarmState5Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmState5Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psalarmState5Volt.setDescription('The value of this object provides the curent alarm state of the 5 Volt Analog parameter. ')
pslabel3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabel3Volt.setStatus('optional')
if mibBuilder.loadTexts: pslabel3Volt.setDescription('The value of this object provides the label of the 3 Anode Volt Analog parameter.')
psuom3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuom3Volt.setStatus('optional')
if mibBuilder.loadTexts: psuom3Volt.setDescription('The value of this object provides the Unit of Measure of the 3.7V anode voltage analog parameter.')
psmajorHigh3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHigh3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorHigh3Volt.setDescription('The value of this object provides the Major High alarm value of the 3.7V anode voltage analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psmajorLow3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLow3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorLow3Volt.setDescription('The value of this object provides the Major Low alarm value of the 3.7V anode voltage analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorHigh3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHigh3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psminorHigh3Volt.setDescription('The value of this object provides the Minor High alarm value of the 3.7V anode voltage analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorLow3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLow3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psminorLow3Volt.setDescription('The value of this object provides the Minor Low alarm value of the 3.7V anode voltage analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
pscurrentValue3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValue3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: pscurrentValue3Volt.setDescription('The value of this object provides the Current value of the 3.7V anode voltage analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psstateFlag3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlag3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psstateFlag3Volt.setDescription('The value of this object provides the state of the 3 Volt Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable). ')
psminValue3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValue3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psminValue3Volt.setDescription('The value of this object provides the minimum value that the 3.7V anode voltage analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psmaxValue3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValue3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psmaxValue3Volt.setDescription('The value of this object provides the maximum value that the 3.7V anode voltage analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psalarmState3Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmState3Volt.setStatus('mandatory')
if mibBuilder.loadTexts: psalarmState3Volt.setDescription('The value of this object provides the curent alarm state of the 3.7V anode voltage analog parameter. ')
pslabelAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabelAmbientTemp.setStatus('optional')
if mibBuilder.loadTexts: pslabelAmbientTemp.setDescription('The value of this object provides the label of the Ambient Temperature Current Analog parameter.')
psuomAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuomAmbientTemp.setStatus('optional')
if mibBuilder.loadTexts: psuomAmbientTemp.setDescription('The value of this object provides the Unit of Measure of the Ambient Temperature Analog parameter.')
psmajorHighAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHighAmbientTemp.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorHighAmbientTemp.setDescription('The value of this object provides the Major High alarm value of the Ambient Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psmajorLowAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLowAmbientTemp.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorLowAmbientTemp.setDescription('The value of this object provides the Major Low alarm value of the Ambient Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorHighAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHighAmbientTemp.setStatus('mandatory')
if mibBuilder.loadTexts: psminorHighAmbientTemp.setDescription('The value of this object provides the Minor High alarm value of the Ambient Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorLowAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLowAmbientTemp.setStatus('mandatory')
if mibBuilder.loadTexts: psminorLowAmbientTemp.setDescription('The value of this object provides the Minor Low alarm value of the Ambient Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
pscurrentValueAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValueAmbientTemp.setStatus('mandatory')
if mibBuilder.loadTexts: pscurrentValueAmbientTemp.setDescription('The value of this object provides the Current value of the Ambient Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psstateFlagAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlagAmbientTemp.setStatus('mandatory')
if mibBuilder.loadTexts: psstateFlagAmbientTemp.setDescription('The value of this object provides the state of the Ambient Temperature Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
psminValueAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValueAmbientTemp.setStatus('mandatory')
if mibBuilder.loadTexts: psminValueAmbientTemp.setDescription('The value of this object provides the minimum value the Ambient Temperature Analog parameter can achive.')
psmaxValueAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValueAmbientTemp.setStatus('mandatory')
if mibBuilder.loadTexts: psmaxValueAmbientTemp.setDescription('The value of this object provides the maximum value the Ambient Temperature Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psalarmStateAmbientTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmStateAmbientTemp.setStatus('mandatory')
if mibBuilder.loadTexts: psalarmStateAmbientTemp.setDescription('The value of this object provides the curent alarm state of the Ambient Temperature Analog parameter. ')
pslabelMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabelMainTemp.setStatus('optional')
if mibBuilder.loadTexts: pslabelMainTemp.setDescription('The value of this object provides the label of the Main Board Temperature Analog parameter.')
psuomMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuomMainTemp.setStatus('optional')
if mibBuilder.loadTexts: psuomMainTemp.setDescription('The value of this object provides the Unit of Measure of the Main Board Temperature Analog parameter..')
psmajorHighMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHighMainTemp.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorHighMainTemp.setDescription('The value of this object provides the Major High alarm value of the Main Board Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psmajorLowMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLowMainTemp.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorLowMainTemp.setDescription('The value of this object provides the Major Low alarm value of the Main Board Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorHighMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHighMainTemp.setStatus('mandatory')
if mibBuilder.loadTexts: psminorHighMainTemp.setDescription('The value of this object provides the Minor High alarm value of the Main Board Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorLowMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLowMainTemp.setStatus('mandatory')
if mibBuilder.loadTexts: psminorLowMainTemp.setDescription('The value of this object provides the Minor Low alarm value of the Main Board Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
pscurrentValueMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValueMainTemp.setStatus('mandatory')
if mibBuilder.loadTexts: pscurrentValueMainTemp.setDescription('The value of this object provides the Current value of the Main Board Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psstateFlagMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlagMainTemp.setStatus('mandatory')
if mibBuilder.loadTexts: psstateFlagMainTemp.setDescription('The value of this object provides the state of the Main Board Temperature Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
psminValueMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValueMainTemp.setStatus('mandatory')
if mibBuilder.loadTexts: psminValueMainTemp.setDescription('The value of this object provides the minimum value the Main Board Temperature Analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psmaxValueMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValueMainTemp.setStatus('mandatory')
if mibBuilder.loadTexts: psmaxValueMainTemp.setDescription('The value of this object provides the maximum value the Main Board Temperature Analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psalarmStateMainTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmStateMainTemp.setStatus('mandatory')
if mibBuilder.loadTexts: psalarmStateMainTemp.setDescription('The value of this object provides the curent alarm state of the Main Board Temperature Analog parameter.')
pslabel12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabel12AnodeVolt.setStatus('optional')
if mibBuilder.loadTexts: pslabel12AnodeVolt.setDescription('The value of this object provides the label of the +12 Anode Voltage Analog parameter.')
psuom12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuom12AnodeVolt.setStatus('optional')
if mibBuilder.loadTexts: psuom12AnodeVolt.setDescription('The value of this object provides the Unit of Measure of the +12 Anode Voltage Analog parameter.')
psmajorHigh12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHigh12AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorHigh12AnodeVolt.setDescription('The value of this object provides the Major High alarm value of the +12V anode voltage analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psmajorLow12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLow12AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorLow12AnodeVolt.setDescription('The value of this object provides the Major Low alarm value of the +12V anode voltage analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorHigh12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHigh12AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psminorHigh12AnodeVolt.setDescription('The value of this object provides the Minor High alarm value of the +12V anode voltage analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorLow12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLow12AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psminorLow12AnodeVolt.setDescription('The value of this object provides the Minor Low alarm value of the +12V anode voltage analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
pscurrentValue12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValue12AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: pscurrentValue12AnodeVolt.setDescription('The value of this object provides the Current value of the +12V anode voltage analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psstateFlag12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlag12AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psstateFlag12AnodeVolt.setDescription('The value of this object provides the state of the +12V anode voltage analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
psminValue12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValue12AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psminValue12AnodeVolt.setDescription('The value of this object provides the minimum value the +12V anode voltage analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psmaxValue12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValue12AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psmaxValue12AnodeVolt.setDescription('The value of this object provides the maximum value the +12V anode voltage analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psalarmState12AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmState12AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psalarmState12AnodeVolt.setDescription('The value of this object provides the curent alarm state of the +12V anode voltage analog parameter.')
pslabel5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabel5AnodeVolt.setStatus('optional')
if mibBuilder.loadTexts: pslabel5AnodeVolt.setDescription('The value of this object provides the label of the Module Temperature Analog parameter.')
psuom5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuom5AnodeVolt.setStatus('optional')
if mibBuilder.loadTexts: psuom5AnodeVolt.setDescription('The value of this object provides the Unit of Measure of the 5 Anode Volt Analog parameter.')
psmajorHigh5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHigh5AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorHigh5AnodeVolt.setDescription('The value of this object provides the Major High alarm value of the 5V anode voltage analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psmajorLow5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLow5AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorLow5AnodeVolt.setDescription('The value of this object provides the Major Low alarm value of the 5V anode volt analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorHigh5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHigh5AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psminorHigh5AnodeVolt.setDescription('The value of this object provides the Minor High alarm value of the 5V anode volt analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorLow5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLow5AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psminorLow5AnodeVolt.setDescription('The value of this object provides the Minor Low alarm value of the 5V anode volt analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
pscurrentValue5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValue5AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: pscurrentValue5AnodeVolt.setDescription('The value of this object provides the Current value of the 5V anode volt analog parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psstateFlag5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlag5AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psstateFlag5AnodeVolt.setDescription('The value of this object provides the state of the 5 Anode Volt Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
psminValue5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValue5AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psminValue5AnodeVolt.setDescription('The value of this object provides the minimum value the 5V anode volt analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psmaxValue5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValue5AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psmaxValue5AnodeVolt.setDescription('The value of this object provides the maximum value the 5V anode volt analog parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psalarmState5AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmState5AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psalarmState5AnodeVolt.setDescription('The value of this object provides the curent alarm state of the 5V anode voltage analog parameter.')
pslabel3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabel3AnodeVolt.setStatus('optional')
if mibBuilder.loadTexts: pslabel3AnodeVolt.setDescription('The value of this object provides the label of the 3.7V anode voltage parameter.')
psuom3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psuom3AnodeVolt.setStatus('optional')
if mibBuilder.loadTexts: psuom3AnodeVolt.setDescription('The value of this object provides the Unit of Measure of the 3.7V anode voltage parameter.')
psmajorHigh3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorHigh3AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorHigh3AnodeVolt.setDescription('The value of this object provides the Major High alarm value for the 3.7V anode voltage parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psmajorLow3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmajorLow3AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psmajorLow3AnodeVolt.setDescription('The value of this object provides the Major Low alarm value for the 3.7V anode voltage parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorHigh3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorHigh3AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psminorHigh3AnodeVolt.setDescription('The value of this object provides the Minor High alarm value for the 3.7V anode voltage parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psminorLow3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminorLow3AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psminorLow3AnodeVolt.setDescription('The value of this object provides the Minor Low alarm value for the 3.7V anode voltage parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
pscurrentValue3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 96), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscurrentValue3AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: pscurrentValue3AnodeVolt.setDescription('The value of this object provides the Current value of the 3.7V anode voltage parameter. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psstateFlag3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateFlag3AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psstateFlag3AnodeVolt.setDescription('The value of this object provides the state of the 3.7V anode voltage parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
psminValue3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psminValue3AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psminValue3AnodeVolt.setDescription('The value of this object provides the minimum value that 3.7V anode voltage parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psmaxValue3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psmaxValue3AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psmaxValue3AnodeVolt.setDescription('The value of this object provides the maximum value that 3.7V anode voltage parameter can achieve. This value is a floating point number that is represented as an IEEE 32 Bit number.')
psalarmState3AnodeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psalarmState3AnodeVolt.setStatus('mandatory')
if mibBuilder.loadTexts: psalarmState3AnodeVolt.setDescription('The value of this object provides the curent alarm state of the 3.7V anode voltage parameter.')
gx2PsdcDigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2PsdcDigitalTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2PsdcDigitalTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
psdclabelNVfanAlrm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 6, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psdclabelNVfanAlrm.setStatus('optional')
if mibBuilder.loadTexts: psdclabelNVfanAlrm.setDescription('The value of this object provides the label of the RF Input Control Digital parameter.')
psdcenumNVfanAlrm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 6, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psdcenumNVfanAlrm.setStatus('optional')
if mibBuilder.loadTexts: psdcenumNVfanAlrm.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
psdcvalueNVfanAlrm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 6, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("unacknowledged", 2), ("acknowledged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psdcvalueNVfanAlrm.setStatus('mandatory')
if mibBuilder.loadTexts: psdcvalueNVfanAlrm.setDescription('The value of this object is the current value of the parameter.')
psdcstateflagNVfanAlrm = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 6, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psdcstateflagNVfanAlrm.setStatus('mandatory')
if mibBuilder.loadTexts: psdcstateflagNVfanAlrm.setDescription('The value of this object provides the state of the RF Input Control Digital parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
gx2PsdcStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2PsdcStatusTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2PsdcStatusTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
pslabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabelBoot.setStatus('optional')
if mibBuilder.loadTexts: pslabelBoot.setDescription('The value of this object provides the label of the Boot Status Status parameter.')
psvalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psvalueBoot.setStatus('mandatory')
if mibBuilder.loadTexts: psvalueBoot.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
psstateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateflagBoot.setStatus('mandatory')
if mibBuilder.loadTexts: psstateflagBoot.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
pslabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabelFlash.setStatus('optional')
if mibBuilder.loadTexts: pslabelFlash.setDescription('The value of this object provides the label of the Flash Status Status parameter.')
psvalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psvalueFlash.setStatus('mandatory')
if mibBuilder.loadTexts: psvalueFlash.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
psstateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateflagFlash.setStatus('mandatory')
if mibBuilder.loadTexts: psstateflagFlash.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
pslabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabelFactoryDataCRC.setStatus('optional')
if mibBuilder.loadTexts: pslabelFactoryDataCRC.setDescription('The value of this object provides the label of the Factory Data CRC Status parameter.')
psvalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psvalueFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: psvalueFactoryDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
psstateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateflagFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: psstateflagFactoryDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
pslabelPsdcDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabelPsdcDataCRC.setStatus('optional')
if mibBuilder.loadTexts: pslabelPsdcDataCRC.setDescription('The value of this object provides the label of the Laser Data CRC Status parameter.')
psvaluePsdcDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psvaluePsdcDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: psvaluePsdcDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
psstateflagPsdcDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateflagPsdcDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: psstateflagPsdcDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
pslabelPsdcHwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pslabelPsdcHwStatus.setStatus('optional')
if mibBuilder.loadTexts: pslabelPsdcHwStatus.setDescription('The value of this object provides the label of the Hw Status parameter.')
psvaluePsdcHwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psvaluePsdcHwStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psvaluePsdcHwStatus.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
psstateflagPsdcHwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psstateflagPsdcHwStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psstateflagPsdcHwStatus.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
gx2PsdcFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2PsdcFactoryTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2PsdcFactoryTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
psbootControlByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbootControlByteValue.setStatus('mandatory')
if mibBuilder.loadTexts: psbootControlByteValue.setDescription('The value of this object indicates which bank the firmware is currently being boot from. Boot Control Byte bit definition as follows : bit 0 : boot bit (0=boot from bank 0, 1=boot from bank 1) bit 1 : bank 0 status (0=bank is blank/bad, 1=bank is OK) bit 2 : bank 1 status (0=bank is blank/bad, 1=bank is OK) bits 3-7 : not used')
psbootStatusByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbootStatusByteValue.setStatus('mandatory')
if mibBuilder.loadTexts: psbootStatusByteValue.setDescription('This object indicates the status of the last boot Boot Status Byte bit definitions as follows: bit 0 : bank 0 status (0=bank is OK or not used, 1=bank failed boot) bit 1 : bank 1 status (0=bank is OK or not used, 1=bank failed boot) bit 2 : active bank (0=bank 0 active, 1=bank 1 active) bits 3-7: not used')
psbank1CRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbank1CRCValue.setStatus('mandatory')
if mibBuilder.loadTexts: psbank1CRCValue.setDescription('This object provides the CRC code of bank 0.')
psbank2CRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psbank2CRCValue.setStatus('mandatory')
if mibBuilder.loadTexts: psbank2CRCValue.setDescription('This object provides the CRC code of bank 1.')
psprgEEPROMByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psprgEEPROMByteValue.setStatus('mandatory')
if mibBuilder.loadTexts: psprgEEPROMByteValue.setDescription('This object indicates if the EEPROM has been programmed')
psfactoryCRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psfactoryCRCValue.setStatus('mandatory')
if mibBuilder.loadTexts: psfactoryCRCValue.setDescription('This object provides the CRC code for the Factory data.')
pscalculateCRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("na", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pscalculateCRCValue.setStatus('mandatory')
if mibBuilder.loadTexts: pscalculateCRCValue.setDescription('This object indicates which of the Emnums will have the CRC calculated. Calculate CRC command defintions as follows : 0x00 : recalculate factory data CRC 0x02 : recalculate alarm data CRC other values not defined')
pshourMeterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pshourMeterValue.setStatus('mandatory')
if mibBuilder.loadTexts: pshourMeterValue.setDescription('This object provides the hour meter reading of the module.')
psflashPrgCntAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psflashPrgCntAValue.setStatus('mandatory')
if mibBuilder.loadTexts: psflashPrgCntAValue.setDescription('This object provides the number of times Bank 1 flash has been programmed.')
psflashPrgCntBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psflashPrgCntBValue.setStatus('mandatory')
if mibBuilder.loadTexts: psflashPrgCntBValue.setDescription('This object provides the number of times Bank 1 flash has been programmed.')
psflashBankARevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psflashBankARevValue.setStatus('mandatory')
if mibBuilder.loadTexts: psflashBankARevValue.setDescription('This object provides the CRC code of bank 0. The value is best displayed in Hex format')
psflashBankBRevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 4, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psflashBankBRevValue.setStatus('mandatory')
if mibBuilder.loadTexts: psflashBankBRevValue.setDescription('This object provides the CRC code of bank 1. The value is best displayed in Hex format')
rxgx2PsdcHoldTimeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxgx2PsdcHoldTimeTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rxgx2PsdcHoldTimeTableIndex.setDescription('The value of this object is the index of the data object.')
rxgx2PsdcHoldTimeSpecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 5, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxgx2PsdcHoldTimeSpecIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rxgx2PsdcHoldTimeSpecIndex.setDescription('The value of this object identifies the index of the alarm object to be modified.')
rxgx2PsdcHoldTimeData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7, 5, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxgx2PsdcHoldTimeData.setStatus('mandatory')
if mibBuilder.loadTexts: rxgx2PsdcHoldTimeData.setDescription('The value of this object provides access to the hold timers used to suppress nose on analog objects. This object is a 32 bit object. Validation data is entered into bytes zero and one of the object. Bytes three and four are used to entering the hold time for the specified alarm object. The Hold timer data ranges from 0 to 1300 seconds. The index of this object corresponds to the alarm object to be modified. Alarm Hold timers correspond to the index of this object as follows: Index 1 = xxx, index 2 = xxxx, Index 3 = xxxx, The hold time is represented in seconds.')
trapPSDCConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSDCConfigChangeInteger.setDescription("This trap is issued if configuration of a single variable with integer type was changed (via ANY interface). TrapChangedValueInteger variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapPSDCConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSDCConfigChangeDisplayString.setDescription("This trap is issued if configuration of a single variable with DispalayString type was changed (via ANY interface). TrapChangedValueDisplayString variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapPSDCFanCurrent = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSDCFanCurrent.setDescription('This trap is issued when a Fan Current event has occurred.')
trapPSDC12Volt = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSDC12Volt.setDescription('This trap is issued when the 12 Volts is in an alarm condition.')
trapPSDC5Volt = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSDC5Volt.setDescription('This trap is issued when the 5 Voltage is in an alarm condition.')
trapPSDC3Volt = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSDC3Volt.setDescription('This trap is issued when the 3.7 Voltage is in an alarm condition.')
trapPSDCAmbientTemp = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSDCAmbientTemp.setDescription('This trap is issued when the Ambient Temperature is in an alarm condition.')
trapPSDCMainTemp = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSDCMainTemp.setDescription('This trap is issued when the Main Temperature is in an alarm condition.')
trapPSDC12AnodeVolt = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSDC12AnodeVolt.setDescription('This trap is issued when the 12 Anode Voltage is in an alarm condition.')
trapPSDC5AnodeVolt = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSDC5AnodeVolt.setDescription('This trap is issued when the 5 Anode Voltage is in an alarm condition.')
trapPSDC3AnodeVolt = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSDC3AnodeVolt.setDescription('This trap is issued when the 3 Anode Voltage is in an alarm condition.')
trapPSDCEEChksmAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSDCEEChksmAlarm.setDescription('This trap is issued when the Power Supply EEPROM Factory data CRC fails.')
trapPSDCFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSDCFlashAlarm.setDescription('This trap is issued when the embedded board flash has a problem.')
trapPSDCBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSDCBootAlarm.setDescription('This trap is issued when the Module Boot from either bank fails.')
trapPSDCAlarmReportingStatus = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSDCAlarmReportingStatus.setDescription('This trap is issued when the Alarm reporting is turned off.')
trapPSbrickType = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSbrickType.setDescription('This trap is issued when power supply brick type is not a valid type.')
trapPSsupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSsupplyFailure.setDescription('This trap is issued when power supply fail condition occurs. (+12V , +5.1V, or _3.7V anode voltage out of spec.)')
trapPSDCALARMChksmAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 7) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapPSDCALARMChksmAlarm.setDescription('This trap is issued when the Power Supply Alarm Data CRC check fails.')
mibBuilder.exportSymbols("OMNI-gx2PSDC-MIB", psstateflagPsdcDataCRC=psstateflagPsdcDataCRC, pscurrentValueMainTemp=pscurrentValueMainTemp, psstateFlagMainTemp=psstateFlagMainTemp, psminorHigh3Volt=psminorHigh3Volt, psstateflagFlash=psstateflagFlash, pscurrentValue12AnodeVolt=pscurrentValue12AnodeVolt, trapPSDCAlarmReportingStatus=trapPSDCAlarmReportingStatus, pslabel5AnodeVolt=pslabel5AnodeVolt, psalarmState5AnodeVolt=psalarmState5AnodeVolt, pslabelBoot=pslabelBoot, psalarmState3AnodeVolt=psalarmState3AnodeVolt, pscurrentValueAmbientTemp=pscurrentValueAmbientTemp, psmajorLowAmbientTemp=psmajorLowAmbientTemp, psmaxValueFanCurrent=psmaxValueFanCurrent, psminorLow5Volt=psminorLow5Volt, psvalueFlash=psvalueFlash, gx2PsdcDigitalEntry=gx2PsdcDigitalEntry, gx2PsdcAnalogTable=gx2PsdcAnalogTable, trapPSDC12AnodeVolt=trapPSDC12AnodeVolt, psdcstateflagNVfanAlrm=psdcstateflagNVfanAlrm, pslabelFlash=pslabelFlash, psmajorLow12Volt=psmajorLow12Volt, psstateFlag5Volt=psstateFlag5Volt, psstateflagFactoryDataCRC=psstateflagFactoryDataCRC, psstateFlag3Volt=psstateFlag3Volt, psstateflagPsdcHwStatus=psstateflagPsdcHwStatus, psminValueMainTemp=psminValueMainTemp, Float=Float, psmajorLow5AnodeVolt=psmajorLow5AnodeVolt, psdclabelNVfanAlrm=psdclabelNVfanAlrm, gx2PsdcFactoryTable=gx2PsdcFactoryTable, psuom5AnodeVolt=psuom5AnodeVolt, psminorHighMainTemp=psminorHighMainTemp, psstateFlag3AnodeVolt=psstateFlag3AnodeVolt, psvaluePsdcHwStatus=psvaluePsdcHwStatus, pslabelPsdcDataCRC=pslabelPsdcDataCRC, psdcvalueNVfanAlrm=psdcvalueNVfanAlrm, trapPSDC12Volt=trapPSDC12Volt, gx2PsdcAnalogEntry=gx2PsdcAnalogEntry, gx2PsdcStatusTable=gx2PsdcStatusTable, psvalueBoot=psvalueBoot, psalarmStateMainTemp=psalarmStateMainTemp, psalarmState3Volt=psalarmState3Volt, psstateFlag12AnodeVolt=psstateFlag12AnodeVolt, psbank1CRCValue=psbank1CRCValue, psdcenumNVfanAlrm=psdcenumNVfanAlrm, psflashPrgCntAValue=psflashPrgCntAValue, psminValue3AnodeVolt=psminValue3AnodeVolt, psvaluePsdcDataCRC=psvaluePsdcDataCRC, psminorHigh5Volt=psminorHigh5Volt, gx2PsdcDigitalTableIndex=gx2PsdcDigitalTableIndex, pslabelFactoryDataCRC=pslabelFactoryDataCRC, psmajorLow5Volt=psmajorLow5Volt, psminorHigh12AnodeVolt=psminorHigh12AnodeVolt, pscurrentValue5AnodeVolt=pscurrentValue5AnodeVolt, psminorHigh3AnodeVolt=psminorHigh3AnodeVolt, psmaxValue5Volt=psmaxValue5Volt, pslabel3AnodeVolt=pslabel3AnodeVolt, psalarmState12AnodeVolt=psalarmState12AnodeVolt, pslabel12AnodeVolt=pslabel12AnodeVolt, psuom12AnodeVolt=psuom12AnodeVolt, psmaxValue3Volt=psmaxValue3Volt, psuomMainTemp=psuomMainTemp, psmaxValueAmbientTemp=psmaxValueAmbientTemp, psalarmState5Volt=psalarmState5Volt, psmajorHighMainTemp=psmajorHighMainTemp, psbootControlByteValue=psbootControlByteValue, psuom5Volt=psuom5Volt, psmaxValue5AnodeVolt=psmaxValue5AnodeVolt, psminorHighFanCurrent=psminorHighFanCurrent, psmajorHigh12Volt=psmajorHigh12Volt, pscurrentValueFanCurrent=pscurrentValueFanCurrent, psminorHigh5AnodeVolt=psminorHigh5AnodeVolt, psbootStatusByteValue=psbootStatusByteValue, trapPSDCConfigChangeInteger=trapPSDCConfigChangeInteger, psminorLow5AnodeVolt=psminorLow5AnodeVolt, rxgx2PsdcHoldTimeTableIndex=rxgx2PsdcHoldTimeTableIndex, psminorLow12AnodeVolt=psminorLow12AnodeVolt, trapPSDCBootAlarm=trapPSDCBootAlarm, psfactoryCRCValue=psfactoryCRCValue, psminValue12Volt=psminValue12Volt, gx2PsdcDescriptor=gx2PsdcDescriptor, psmajorHigh3Volt=psmajorHigh3Volt, psalarmStateFanCurrent=psalarmStateFanCurrent, pscurrentValue3AnodeVolt=pscurrentValue3AnodeVolt, psflashBankBRevValue=psflashBankBRevValue, rxgx2PsdcHoldTimeSpecIndex=rxgx2PsdcHoldTimeSpecIndex, psstateFlag12Volt=psstateFlag12Volt, trapPSDC5AnodeVolt=trapPSDC5AnodeVolt, rxgx2PsdcHoldTimeData=rxgx2PsdcHoldTimeData, psmaxValueMainTemp=psmaxValueMainTemp, psmajorHighAmbientTemp=psmajorHighAmbientTemp, psstateFlagAmbientTemp=psstateFlagAmbientTemp, psalarmStateAmbientTemp=psalarmStateAmbientTemp, trapPSDCAmbientTemp=trapPSDCAmbientTemp, gx2PsdcStatusEntry=gx2PsdcStatusEntry, psmajorHigh12AnodeVolt=psmajorHigh12AnodeVolt, psstateflagBoot=psstateflagBoot, trapPSDCFlashAlarm=trapPSDCFlashAlarm, psminorLow12Volt=psminorLow12Volt, pscurrentValue12Volt=pscurrentValue12Volt, psminorLowFanCurrent=psminorLowFanCurrent, psmaxValue12Volt=psmaxValue12Volt, gx2PsdcHoldTimeEntry=gx2PsdcHoldTimeEntry, trapPSDCConfigChangeDisplayString=trapPSDCConfigChangeDisplayString, psbank2CRCValue=psbank2CRCValue, psuom12Volt=psuom12Volt, psminValueFanCurrent=psminValueFanCurrent, trapPSDC3AnodeVolt=trapPSDC3AnodeVolt, pslabel5Volt=pslabel5Volt, trapPSDCFanCurrent=trapPSDCFanCurrent, psmajorHigh3AnodeVolt=psmajorHigh3AnodeVolt, psminValue5Volt=psminValue5Volt, psmajorLow3AnodeVolt=psmajorLow3AnodeVolt, gx2PsdcStatusTableIndex=gx2PsdcStatusTableIndex, gx2PsdcFactoryEntry=gx2PsdcFactoryEntry, pslabel12Volt=pslabel12Volt, pscalculateCRCValue=pscalculateCRCValue, psminorHighAmbientTemp=psminorHighAmbientTemp, psmajorHigh5AnodeVolt=psmajorHigh5AnodeVolt, psmajorHigh5Volt=psmajorHigh5Volt, psmajorLow12AnodeVolt=psmajorLow12AnodeVolt, pshourMeterValue=pshourMeterValue, psstateFlagFanCurrent=psstateFlagFanCurrent, trapPSDCEEChksmAlarm=trapPSDCEEChksmAlarm, psminValue3Volt=psminValue3Volt, gx2PsdcFactoryTableIndex=gx2PsdcFactoryTableIndex, pslabelMainTemp=pslabelMainTemp, psmajorLowFanCurrent=psmajorLowFanCurrent, psminorHigh12Volt=psminorHigh12Volt, psminValueAmbientTemp=psminValueAmbientTemp, psstateFlag5AnodeVolt=psstateFlag5AnodeVolt, trapPSDCMainTemp=trapPSDCMainTemp, psmajorLow3Volt=psmajorLow3Volt, psminValue12AnodeVolt=psminValue12AnodeVolt, pscurrentValue3Volt=pscurrentValue3Volt, trapPSsupplyFailure=trapPSsupplyFailure, pslabel3Volt=pslabel3Volt, gx2PsdcHoldTimeTable=gx2PsdcHoldTimeTable, psminorLow3Volt=psminorLow3Volt, psprgEEPROMByteValue=psprgEEPROMByteValue, trapPSDC3Volt=trapPSDC3Volt, psflashPrgCntBValue=psflashPrgCntBValue, trapPSDCALARMChksmAlarm=trapPSDCALARMChksmAlarm, psflashBankARevValue=psflashBankARevValue, psuom3Volt=psuom3Volt, psuomFanCurrent=psuomFanCurrent, psminorLowAmbientTemp=psminorLowAmbientTemp, psmajorLowMainTemp=psmajorLowMainTemp, psmaxValue12AnodeVolt=psmaxValue12AnodeVolt, psminorLow3AnodeVolt=psminorLow3AnodeVolt, pslabelFanCurrent=pslabelFanCurrent, gx2PsdcDigitalTable=gx2PsdcDigitalTable, psuom3AnodeVolt=psuom3AnodeVolt, psmajorHighFanCurrent=psmajorHighFanCurrent, psvalueFactoryDataCRC=psvalueFactoryDataCRC, pscurrentValue5Volt=pscurrentValue5Volt, psminValue5AnodeVolt=psminValue5AnodeVolt, psmaxValue3AnodeVolt=psmaxValue3AnodeVolt, trapPSDC5Volt=trapPSDC5Volt, psminorLowMainTemp=psminorLowMainTemp, pslabelPsdcHwStatus=pslabelPsdcHwStatus, trapPSbrickType=trapPSbrickType, pslabelAmbientTemp=pslabelAmbientTemp, psalarmState12Volt=psalarmState12Volt, psuomAmbientTemp=psuomAmbientTemp, gx2PsdcAnalogTableIndex=gx2PsdcAnalogTableIndex)
