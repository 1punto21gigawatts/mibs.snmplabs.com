#
# PySNMP MIB module WWP-DNS-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-DNS-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, IpAddress, Counter64, Integer32, NotificationType, Gauge32, MibIdentifier, TimeTicks, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "IpAddress", "Counter64", "Integer32", "NotificationType", "Gauge32", "MibIdentifier", "TimeTicks", "ModuleIdentity", "iso")
TextualConvention, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "TruthValue")
wwpModules, = mibBuilder.importSymbols("WWP-SMI", "wwpModules")
wwpDnsClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 49))
wwpDnsClientMIB.setRevisions(('2003-03-19 10:12',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpDnsClientMIB.setRevisionsDescriptions(('Initial Creation',))
if mibBuilder.loadTexts: wwpDnsClientMIB.setLastUpdated('200303191012Z')
if mibBuilder.loadTexts: wwpDnsClientMIB.setOrganization(' World Wide Packets Inc')
if mibBuilder.loadTexts: wwpDnsClientMIB.setContactInfo(' Mib Meister Postal: World Wide Packets P.O. Box 950 Veradale, WA 99037 USA Phone: +1 509 242 9000 Email: mib.meister@worldwidepackets.com')
if mibBuilder.loadTexts: wwpDnsClientMIB.setDescription('A MIB module to manage dns client on the WWP products.')
wwpDnsClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 49, 1))
wwpDnsClient = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 49, 1, 1))
wwpDnsClientMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 49, 2))
wwpDnsClientMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 49, 2, 0))
wwpDnsClientMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 49, 3))
wwpDnsClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 49, 3, 1))
wwpDnsClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 49, 3, 2))
wwpDnsResolverEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 49, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpDnsResolverEnable.setStatus('current')
if mibBuilder.loadTexts: wwpDnsResolverEnable.setDescription('Specifies whether or not the DNS Resolver is enabled.')
wwpDnsDomainAdminName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 49, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpDnsDomainAdminName.setStatus('current')
if mibBuilder.loadTexts: wwpDnsDomainAdminName.setDescription('The configured DNS Domain Name.')
wwpDnsDomainOperName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 49, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpDnsDomainOperName.setStatus('current')
if mibBuilder.loadTexts: wwpDnsDomainOperName.setDescription('The operational DNS Domain Name. DNS Domain name can be obtained by DHCP, so the operational DNS Domain Name can be different from Admin DNS Domain Name.')
wwpDnsNameAdminServerTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 49, 1, 1, 4), )
if mibBuilder.loadTexts: wwpDnsNameAdminServerTable.setStatus('current')
if mibBuilder.loadTexts: wwpDnsNameAdminServerTable.setDescription('A table containing configured DNS Servers information.')
wwpDnsNameAdminServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 49, 1, 1, 4, 1), ).setIndexNames((0, "WWP-DNS-CLIENT-MIB", "wwpDnsAdminServerId"))
if mibBuilder.loadTexts: wwpDnsNameAdminServerEntry.setStatus('current')
if mibBuilder.loadTexts: wwpDnsNameAdminServerEntry.setDescription('Defines the information pertaining to a configured DNS Server.')
wwpDnsAdminServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 49, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpDnsAdminServerId.setStatus('current')
if mibBuilder.loadTexts: wwpDnsAdminServerId.setDescription('A unique identifier for the configured DNS Server.')
wwpDnsAdminServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 49, 1, 1, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpDnsAdminServerAddr.setStatus('current')
if mibBuilder.loadTexts: wwpDnsAdminServerAddr.setDescription('The Ip address for the configured DNS Server.')
wwpDnsAdminServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 49, 1, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpDnsAdminServerStatus.setStatus('current')
if mibBuilder.loadTexts: wwpDnsAdminServerStatus.setDescription("This object is used to create and delete rows in the wwpDnsServerTable. To create a new row the management station must set the object to 'CreateAndGo'.")
wwpDnsNameOperServerTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 49, 1, 1, 5), )
if mibBuilder.loadTexts: wwpDnsNameOperServerTable.setStatus('current')
if mibBuilder.loadTexts: wwpDnsNameOperServerTable.setDescription('A table containing operational DNS Servers information. DNS server list can also be obtained by DHCP, so the operational list of servers may not be same as admin list of servers.')
wwpDnsNameOperServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 49, 1, 1, 5, 1), ).setIndexNames((0, "WWP-DNS-CLIENT-MIB", "wwpDnsOperServerId"))
if mibBuilder.loadTexts: wwpDnsNameOperServerEntry.setStatus('current')
if mibBuilder.loadTexts: wwpDnsNameOperServerEntry.setDescription('Defines the information pertaining to a operational DNS Server.')
wwpDnsOperServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 49, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpDnsOperServerId.setStatus('current')
if mibBuilder.loadTexts: wwpDnsOperServerId.setDescription('A unique identifier for the operational DNS Server.')
wwpDnsOperServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 49, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpDnsOperServerAddr.setStatus('current')
if mibBuilder.loadTexts: wwpDnsOperServerAddr.setDescription('The Ip address for the operational DNS Server.')
mibBuilder.exportSymbols("WWP-DNS-CLIENT-MIB", wwpDnsClientMIBNotifications=wwpDnsClientMIBNotifications, wwpDnsClientMIBNotificationPrefix=wwpDnsClientMIBNotificationPrefix, wwpDnsClientMIBConformance=wwpDnsClientMIBConformance, wwpDnsClient=wwpDnsClient, wwpDnsOperServerId=wwpDnsOperServerId, wwpDnsNameOperServerEntry=wwpDnsNameOperServerEntry, wwpDnsAdminServerStatus=wwpDnsAdminServerStatus, wwpDnsClientMIBCompliances=wwpDnsClientMIBCompliances, wwpDnsClientMIBObjects=wwpDnsClientMIBObjects, wwpDnsResolverEnable=wwpDnsResolverEnable, wwpDnsClientMIBGroups=wwpDnsClientMIBGroups, wwpDnsNameAdminServerTable=wwpDnsNameAdminServerTable, wwpDnsDomainOperName=wwpDnsDomainOperName, wwpDnsNameOperServerTable=wwpDnsNameOperServerTable, wwpDnsDomainAdminName=wwpDnsDomainAdminName, wwpDnsClientMIB=wwpDnsClientMIB, PYSNMP_MODULE_ID=wwpDnsClientMIB, wwpDnsAdminServerAddr=wwpDnsAdminServerAddr, wwpDnsAdminServerId=wwpDnsAdminServerId, wwpDnsOperServerAddr=wwpDnsOperServerAddr, wwpDnsNameAdminServerEntry=wwpDnsNameAdminServerEntry)
