#
# PySNMP MIB module TPLINK-ROUTEMAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-ROUTEMAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:25:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, TimeTicks, Counter32, Counter64, NotificationType, Gauge32, IpAddress, ModuleIdentity, Bits, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "TimeTicks", "Counter32", "Counter64", "NotificationType", "Gauge32", "IpAddress", "ModuleIdentity", "Bits", "ObjectIdentity", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tplinkMgmt, = mibBuilder.importSymbols("TPLINK-MIB", "tplinkMgmt")
TPRowStatus, = mibBuilder.importSymbols("TPLINK-TC-MIB", "TPRowStatus")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class TPRouteMapMode(TextualConvention, Integer32):
    description = "The status column has two defined values: - `permit(1)' ; - `deny(2)' "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("permit", 1), ("deny", 2))

tplinkRouteMapMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 76))
tplinkRouteMapMIB.setRevisions(('2012-12-13 09:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tplinkRouteMapMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tplinkRouteMapMIB.setLastUpdated('201212130930Z')
if mibBuilder.loadTexts: tplinkRouteMapMIB.setOrganization('TPLINK')
if mibBuilder.loadTexts: tplinkRouteMapMIB.setContactInfo('www.tplink.com.cn')
if mibBuilder.loadTexts: tplinkRouteMapMIB.setDescription('Private MIB for route map configuration.')
tplinkRouteMapMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1))
tplinkRouteMapNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 76, 2))
tpIpPrefixConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 1))
tpIpPrefixConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 1, 1), )
if mibBuilder.loadTexts: tpIpPrefixConfigTable.setStatus('current')
if mibBuilder.loadTexts: tpIpPrefixConfigTable.setDescription('')
tpIpPrefixConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 1, 1, 1), ).setIndexNames((0, "TPLINK-ROUTEMAP-MIB", "tpIpPrefixName"), (0, "TPLINK-ROUTEMAP-MIB", "tpIpPrefixSeq"))
if mibBuilder.loadTexts: tpIpPrefixConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tpIpPrefixConfigEntry.setDescription('The item can be added or removed .')
tpIpPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpIpPrefixName.setStatus('current')
if mibBuilder.loadTexts: tpIpPrefixName.setDescription('Route map tag')
tpIpPrefixMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 1, 1, 1, 2), TPRouteMapMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpIpPrefixMode.setStatus('current')
if mibBuilder.loadTexts: tpIpPrefixMode.setDescription('Permit or deny set actions')
tpIpPrefixSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpIpPrefixSeq.setStatus('current')
if mibBuilder.loadTexts: tpIpPrefixSeq.setDescription('Sequence to insert to/delete from existing route-map entry')
tpNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpNetwork.setStatus('current')
if mibBuilder.loadTexts: tpNetwork.setDescription('The internet network address to match (e.g. 192.168.0.0/24).')
tpMaskGe = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMaskGe.setStatus('current')
if mibBuilder.loadTexts: tpMaskGe.setDescription('The minimum subnet mask length to match.')
tpMaskLe = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMaskLe.setStatus('current')
if mibBuilder.loadTexts: tpMaskLe.setDescription('The maximum subnet length to match.')
tpIpPrefixItemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 1, 1, 1, 7), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpIpPrefixItemStatus.setStatus('current')
if mibBuilder.loadTexts: tpIpPrefixItemStatus.setDescription('')
tpRouteMapConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2))
tpRouteMapConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 1), )
if mibBuilder.loadTexts: tpRouteMapConfigTable.setStatus('current')
if mibBuilder.loadTexts: tpRouteMapConfigTable.setDescription('')
tpRouteMapConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 1, 1), ).setIndexNames((0, "TPLINK-ROUTEMAP-MIB", "tpRouteMapName"), (0, "TPLINK-ROUTEMAP-MIB", "tpRuleId"))
if mibBuilder.loadTexts: tpRouteMapConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tpRouteMapConfigEntry.setDescription('The item can be added or removed .')
tpRouteMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpRouteMapName.setStatus('current')
if mibBuilder.loadTexts: tpRouteMapName.setDescription('Route map tag')
tpConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 1, 1, 2), TPRouteMapMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpConfigMode.setStatus('current')
if mibBuilder.loadTexts: tpConfigMode.setDescription('Permit or deny set actions')
tpRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpRuleId.setStatus('current')
if mibBuilder.loadTexts: tpRuleId.setDescription('Route map rule Id')
tpConfigItemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 1, 1, 4), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpConfigItemStatus.setStatus('current')
if mibBuilder.loadTexts: tpConfigItemStatus.setDescription('')
tpRouteMapMatchConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 2), )
if mibBuilder.loadTexts: tpRouteMapMatchConfigTable.setStatus('current')
if mibBuilder.loadTexts: tpRouteMapMatchConfigTable.setDescription('')
tpRouteMapMatchConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 2, 1), ).setIndexNames((0, "TPLINK-ROUTEMAP-MIB", "tpRouteMapName"), (0, "TPLINK-ROUTEMAP-MIB", "tpRuleId"))
if mibBuilder.loadTexts: tpRouteMapMatchConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tpRouteMapMatchConfigEntry.setDescription('The item can be added or removed .')
tpMatchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 2, 1, 1), TPRouteMapMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpMatchMode.setStatus('current')
if mibBuilder.loadTexts: tpMatchMode.setDescription('Permit or deny set actions')
tpSIPAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpSIPAcl.setStatus('current')
if mibBuilder.loadTexts: tpSIPAcl.setDescription('Route map source IP match condition defined by ACL.')
tpSIPPrefixList = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpSIPPrefixList.setStatus('current')
if mibBuilder.loadTexts: tpSIPPrefixList.setDescription('Route map source IP match condition defined by IP Prefix-List.')
tpDIPAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpDIPAcl.setStatus('current')
if mibBuilder.loadTexts: tpDIPAcl.setDescription('Route map destination IP match condition defined by ACL.')
tpDIPPrefixList = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpDIPPrefixList.setStatus('current')
if mibBuilder.loadTexts: tpDIPPrefixList.setDescription('Route map destination IP match condition defined by IP Prefix-List.')
tpNXPAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpNXPAcl.setStatus('current')
if mibBuilder.loadTexts: tpNXPAcl.setDescription('Route map nexthop IP match condition defined by ACL.')
tpNXPPrefixList = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpNXPPrefixList.setStatus('current')
if mibBuilder.loadTexts: tpNXPPrefixList.setDescription('Route map nexthop IP match condition defined by IP Prefix-List.')
tpMatchMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMatchMetric.setStatus('current')
if mibBuilder.loadTexts: tpMatchMetric.setDescription('Route map metric match condition.')
tpMatchItemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 2, 1, 9), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMatchItemStatus.setStatus('current')
if mibBuilder.loadTexts: tpMatchItemStatus.setDescription('')
tpRouteMapSetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 3), )
if mibBuilder.loadTexts: tpRouteMapSetConfigTable.setStatus('current')
if mibBuilder.loadTexts: tpRouteMapSetConfigTable.setDescription('')
tpRouteMapSetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 3, 1), ).setIndexNames((0, "TPLINK-ROUTEMAP-MIB", "tpRouteMapName"), (0, "TPLINK-ROUTEMAP-MIB", "tpRuleId"))
if mibBuilder.loadTexts: tpRouteMapSetConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tpRouteMapSetConfigEntry.setDescription('The item can be added or removed .')
tpSetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 3, 1, 1), TPRouteMapMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpSetMode.setStatus('current')
if mibBuilder.loadTexts: tpSetMode.setDescription('Permit or deny set actions')
tpSetMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpSetMetric.setStatus('current')
if mibBuilder.loadTexts: tpSetMetric.setDescription('Set metric for the matched')
tpSetNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpSetNexthop.setStatus('current')
if mibBuilder.loadTexts: tpSetNexthop.setDescription('Set nexthop for the matched')
tpSetItemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 2, 3, 1, 4), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpSetItemStatus.setStatus('current')
if mibBuilder.loadTexts: tpSetItemStatus.setDescription('')
tpRouteMapBindConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 3))
tpRouteMapBindConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 3, 1), )
if mibBuilder.loadTexts: tpRouteMapBindConfigTable.setStatus('current')
if mibBuilder.loadTexts: tpRouteMapBindConfigTable.setDescription('')
tpRouteMapBindConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 3, 1, 1), ).setIndexNames((0, "TPLINK-ROUTEMAP-MIB", "tpRouteMapBindName"), (0, "TPLINK-ROUTEMAP-MIB", "tpBindVid"))
if mibBuilder.loadTexts: tpRouteMapBindConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tpRouteMapBindConfigEntry.setDescription('The item can be added or removed .')
tpRouteMapBindName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpRouteMapBindName.setStatus('current')
if mibBuilder.loadTexts: tpRouteMapBindName.setDescription('Route map tag')
tpBindVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpBindVid.setStatus('current')
if mibBuilder.loadTexts: tpBindVid.setDescription('Route map binding vlan id')
tpBindItemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 76, 1, 3, 1, 1, 3), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpBindItemStatus.setStatus('current')
if mibBuilder.loadTexts: tpBindItemStatus.setDescription('')
mibBuilder.exportSymbols("TPLINK-ROUTEMAP-MIB", tpMatchItemStatus=tpMatchItemStatus, tplinkRouteMapMIBObjects=tplinkRouteMapMIBObjects, tpBindItemStatus=tpBindItemStatus, tpDIPAcl=tpDIPAcl, tpSetMode=tpSetMode, tpSetItemStatus=tpSetItemStatus, tpMaskLe=tpMaskLe, tpRouteMapBindConfig=tpRouteMapBindConfig, tpIpPrefixName=tpIpPrefixName, TPRouteMapMode=TPRouteMapMode, tpIpPrefixConfigTable=tpIpPrefixConfigTable, tpRouteMapName=tpRouteMapName, tpRouteMapConfigTable=tpRouteMapConfigTable, tpConfigMode=tpConfigMode, MacAddress=MacAddress, tpMatchMetric=tpMatchMetric, tpRouteMapBindName=tpRouteMapBindName, tpMatchMode=tpMatchMode, tpIpPrefixSeq=tpIpPrefixSeq, tpRouteMapBindConfigTable=tpRouteMapBindConfigTable, tpIpPrefixMode=tpIpPrefixMode, tpRouteMapBindConfigEntry=tpRouteMapBindConfigEntry, tpBindVid=tpBindVid, tpMaskGe=tpMaskGe, tplinkRouteMapMIB=tplinkRouteMapMIB, tpSetMetric=tpSetMetric, tpRouteMapSetConfigEntry=tpRouteMapSetConfigEntry, tpRouteMapMatchConfigTable=tpRouteMapMatchConfigTable, tpIpPrefixConfigEntry=tpIpPrefixConfigEntry, tpNetwork=tpNetwork, tpRouteMapSetConfigTable=tpRouteMapSetConfigTable, tpNXPPrefixList=tpNXPPrefixList, tpIpPrefixItemStatus=tpIpPrefixItemStatus, tpSIPAcl=tpSIPAcl, tpSIPPrefixList=tpSIPPrefixList, tpIpPrefixConfig=tpIpPrefixConfig, tpNXPAcl=tpNXPAcl, PYSNMP_MODULE_ID=tplinkRouteMapMIB, tpConfigItemStatus=tpConfigItemStatus, tpRuleId=tpRuleId, tpRouteMapConfigEntry=tpRouteMapConfigEntry, tpDIPPrefixList=tpDIPPrefixList, tpRouteMapConfig=tpRouteMapConfig, tpSetNexthop=tpSetNexthop, tplinkRouteMapNotifications=tplinkRouteMapNotifications, tpRouteMapMatchConfigEntry=tpRouteMapMatchConfigEntry)
