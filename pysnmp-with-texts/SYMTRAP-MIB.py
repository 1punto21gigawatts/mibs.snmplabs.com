#
# PySNMP MIB module SYMTRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYMTRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:14:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, Counter64, NotificationType, Unsigned32, Bits, Counter32, IpAddress, MibIdentifier, ModuleIdentity, ObjectIdentity, Gauge32, enterprises, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "Counter64", "NotificationType", "Unsigned32", "Bits", "Counter32", "IpAddress", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "Gauge32", "enterprises", "iso", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
symbios = MibIdentifier((1, 3, 6, 1, 4, 1, 1123))
coloradosprings = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3))
scsi = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1))
symc8xx = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2))
symTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2))
symTrapMajor = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symTrapMajor.setStatus('mandatory')
if mibBuilder.loadTexts: symTrapMajor.setDescription('The major revision level of the MIB. A change in the major revision level represents a major change in the architecture or functions of the MIB.')
symTrapMinor = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symTrapMinor.setStatus('mandatory')
if mibBuilder.loadTexts: symTrapMinor.setDescription('The minor revision level of the MIB. A change in the minor revision level may represent some minor additional support, no changes to any pre-existing information has occurred.')
managerName = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2, 501), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managerName.setStatus('mandatory')
if mibBuilder.loadTexts: managerName.setDescription('ASCII string description of SCSI Manager')
managerVersion = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2, 502), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managerVersion.setStatus('mandatory')
if mibBuilder.loadTexts: managerVersion.setDescription('SCSI Manager version')
controllerName = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2, 503), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerName.setStatus('mandatory')
if mibBuilder.loadTexts: controllerName.setDescription('ASCII String description of SCSI Controller')
scsiController = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2, 504), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiController.setStatus('mandatory')
if mibBuilder.loadTexts: scsiController.setDescription('The unique SCSI Controller Number')
scsiChannel = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2, 505), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiChannel.setStatus('mandatory')
if mibBuilder.loadTexts: scsiChannel.setDescription('SCSI Channel Number')
scsiTarget = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2, 506), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiTarget.setStatus('mandatory')
if mibBuilder.loadTexts: scsiTarget.setDescription('SCSI Target Identification number')
scsiLun = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2, 507), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLun.setStatus('mandatory')
if mibBuilder.loadTexts: scsiLun.setDescription('The LUN of the device')
vendorName = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2, 508), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vendorName.setStatus('mandatory')
if mibBuilder.loadTexts: vendorName.setDescription('The SCSI device Vendor information')
productName = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2, 509), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('mandatory')
if mibBuilder.loadTexts: productName.setDescription('The SCSI Product information')
controllerModel = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2, 510), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerModel.setStatus('mandatory')
if mibBuilder.loadTexts: controllerModel.setDescription('The controller model string. eg SYM875UI')
pciBusNumber = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2, 511), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pciBusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pciBusNumber.setDescription('The PCI Bus number')
scsiSmartData = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2, 512), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiSmartData.setStatus('mandatory')
if mibBuilder.loadTexts: scsiSmartData.setDescription('The SMART information from the sense buffer of the device')
errorType = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2, 513), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorType.setStatus('mandatory')
if mibBuilder.loadTexts: errorType.setDescription('The type of internal error')
symSCSI1 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2) + (0,101))
if mibBuilder.loadTexts: symSCSI1.setDescription('Symbios SCSI Agent is up.')
symSCSI2 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2) + (0,102))
if mibBuilder.loadTexts: symSCSI2.setDescription('Symbios SCSI Agent is down.')
symSCSI3 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2) + (0,108)).setObjects(("SYMTRAP-MIB", "scsiController"), ("SYMTRAP-MIB", "controllerName"), ("SYMTRAP-MIB", "managerName"))
if mibBuilder.loadTexts: symSCSI3.setDescription('The SCSI Controller# %d with ControllerName %s and ManagerName Id %s has been discovered')
symSCSI4 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2) + (0,109)).setObjects(("SYMTRAP-MIB", "scsiController"), ("SYMTRAP-MIB", "controllerName"), ("SYMTRAP-MIB", "managerName"))
if mibBuilder.loadTexts: symSCSI4.setDescription('The SCSI Controller# %d has been replaced by new ControllerName %s, ManagerName %s')
symSCSI5 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2) + (0,110)).setObjects(("SYMTRAP-MIB", "scsiController"))
if mibBuilder.loadTexts: symSCSI5.setDescription('The SCSI Controller# %d has Failed')
symSCSI6 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2) + (0,111)).setObjects(("SYMTRAP-MIB", "scsiController"))
if mibBuilder.loadTexts: symSCSI6.setDescription('SCSI Controller# %d recovered')
symSCSI8 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2) + (0,113)).setObjects(("SYMTRAP-MIB", "scsiController"), ("SYMTRAP-MIB", "scsiTarget"), ("SYMTRAP-MIB", "scsiLun"), ("SYMTRAP-MIB", "vendorName"), ("SYMTRAP-MIB", "productName"))
if mibBuilder.loadTexts: symSCSI8.setDescription('A new SCSI Device at Controller# %d, Target# %d, Lun# %d of Vendor: %s Product: %s has been discovered')
symSCSI10 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2) + (0,115)).setObjects(("SYMTRAP-MIB", "scsiController"), ("SYMTRAP-MIB", "scsiTarget"), ("SYMTRAP-MIB", "scsiLun"), ("SYMTRAP-MIB", "vendorName"), ("SYMTRAP-MIB", "productName"))
if mibBuilder.loadTexts: symSCSI10.setDescription('The SCSI Device at Controller# %d, Target# %d, Lun# %d has been replaced by Vendor %s and Product %s')
symSCSI7 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2) + (0,112)).setObjects(("SYMTRAP-MIB", "scsiController"), ("SYMTRAP-MIB", "scsiTarget"), ("SYMTRAP-MIB", "scsiLun"))
if mibBuilder.loadTexts: symSCSI7.setDescription('The SCSI Device at Controller# %d, Target# %d, Lun# %d has failed ')
symSCSI9 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2) + (0,114)).setObjects(("SYMTRAP-MIB", "scsiController"), ("SYMTRAP-MIB", "scsiTarget"), ("SYMTRAP-MIB", "scsiLun"))
if mibBuilder.loadTexts: symSCSI9.setDescription('The SCSI Device at Controller# %d, Target# %d, Lun# %d has recovered ')
symSCSI11 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2) + (0,116)).setObjects(("SYMTRAP-MIB", "scsiController"), ("SYMTRAP-MIB", "scsiTarget"), ("SYMTRAP-MIB", "scsiLun"), ("SYMTRAP-MIB", "vendorName"), ("SYMTRAP-MIB", "productName"), ("SYMTRAP-MIB", "scsiSmartData"))
if mibBuilder.loadTexts: symSCSI11.setDescription('The Device at Controller Index# %d , TargetID %d, Lun# %d, Vendor %s Product %s has a SMART notification with sense information %d')
symSCSI12 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 2) + (0,117)).setObjects(("SYMTRAP-MIB", "errorType"))
if mibBuilder.loadTexts: symSCSI12.setDescription('There was an internal Symbios error - Please restart the Symbios agent.')
mibBuilder.exportSymbols("SYMTRAP-MIB", pciBusNumber=pciBusNumber, vendorName=vendorName, managerVersion=managerVersion, symSCSI6=symSCSI6, symSCSI9=symSCSI9, errorType=errorType, symbios=symbios, symSCSI12=symSCSI12, symTrap=symTrap, scsiTarget=scsiTarget, symTrapMajor=symTrapMajor, symTrapMinor=symTrapMinor, scsiController=scsiController, symSCSI5=symSCSI5, scsiLun=scsiLun, controllerModel=controllerModel, symSCSI4=symSCSI4, controllerName=controllerName, scsiSmartData=scsiSmartData, symSCSI7=symSCSI7, symSCSI8=symSCSI8, scsiChannel=scsiChannel, managerName=managerName, symSCSI1=symSCSI1, coloradosprings=coloradosprings, scsi=scsi, symSCSI11=symSCSI11, symc8xx=symc8xx, symSCSI2=symSCSI2, symSCSI3=symSCSI3, productName=productName, symSCSI10=symSCSI10)
