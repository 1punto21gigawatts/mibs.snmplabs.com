#
# PySNMP MIB module TPLINK-IPADDR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-IPADDR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:24:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, iso, Counter32, Counter64, TimeTicks, IpAddress, Bits, Unsigned32, NotificationType, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "Counter32", "Counter64", "TimeTicks", "IpAddress", "Bits", "Unsigned32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tplinkMgmt, = mibBuilder.importSymbols("TPLINK-MIB", "tplinkMgmt")
TPRowStatus, = mibBuilder.importSymbols("TPLINK-TC-MIB", "TPRowStatus")
class TpInterfaceMode(TextualConvention, Integer32):
    description = "Ip address alloc-mode: -'none(0)', which indicate vlan interface has no ip address. -'manual(1)',vlan interface's ip address is manually assigned. -'dhcp(2)',vlan interface's ip address is allocated by DHCP protocol. -'bootp(3)',vlan interface's ip address is allocated by BOOTP protocol."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("manual", 1), ("dhcp", 2), ("bootp", 3))

class TpInterfaceMode2(TextualConvention, Integer32):
    description = "Ip address alloc-mode: -'none(0)', which indicate vlan interface has no ip address. -'manual(1)',vlan interface's ip address is manually assigned."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("manual", 1))

class TpPortLinkMode(TextualConvention, Integer32):
    description = 'Port link-mode: bridge(0) or route(1)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("bridge", 0), ("route", 1))

tplinkIpAddrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 6))
tplinkIpAddrMIB.setRevisions(('2012-12-13 09:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tplinkIpAddrMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tplinkIpAddrMIB.setLastUpdated('201212130930Z')
if mibBuilder.loadTexts: tplinkIpAddrMIB.setOrganization('TPLINK')
if mibBuilder.loadTexts: tplinkIpAddrMIB.setContactInfo('www.tplink.com.cn')
if mibBuilder.loadTexts: tplinkIpAddrMIB.setDescription('Private MIB for ip address configuration.')
tplinkIpAddrMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1))
tplinkIpAddrNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 6, 2))
tpInterfaceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1))
tpVlanInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 1), )
if mibBuilder.loadTexts: tpVlanInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: tpVlanInterfaceTable.setDescription('A list of VLAN interface entries. VLAN interface is a virtual interface which is working in the level 3, it is used to communicate between the VLAN in the level 3, and it is not a physical entity in the device. Each VLAN has a VLAN interface,and the VLAN interface can transmit the packets for the port which belong to this VLAN. In general,because the VLAN can isolate broadcast, each VLAN has a subnet address,and as a gateway of the subnet address, the VLAN interface can do the transmittance basic of IP address in level 3 for the packet which need to span the subnet address. ')
tpVlanInterfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 1, 1), ).setIndexNames((0, "TPLINK-IPADDR-MIB", "tpVlanInterfaceVlanId"), (0, "TPLINK-IPADDR-MIB", "tpVlanInterfaceIp"), (0, "TPLINK-IPADDR-MIB", "tpVlanInterfaceSecondary"))
if mibBuilder.loadTexts: tpVlanInterfaceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tpVlanInterfaceConfigEntry.setDescription(' The interface can be added or removed .')
tpVlanInterfaceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpVlanInterfaceVlanId.setStatus('current')
if mibBuilder.loadTexts: tpVlanInterfaceVlanId.setDescription('The id of the VLAN interface,and it must be in the 802.1Q VLAN of the ingress port.')
tpVlanInterfaceSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpVlanInterfaceSecondary.setStatus('current')
if mibBuilder.loadTexts: tpVlanInterfaceSecondary.setDescription('If the ip address is secondary IP.')
tpVlanInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 1, 1, 3), TpInterfaceMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpVlanInterfaceMode.setStatus('current')
if mibBuilder.loadTexts: tpVlanInterfaceMode.setDescription('The IP address alloc-mode of VLAN interface.')
tpVlanInterfaceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpVlanInterfaceIp.setStatus('current')
if mibBuilder.loadTexts: tpVlanInterfaceIp.setDescription('The IP address of the VLAN interface.')
tpVlanInterfaceMsk = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpVlanInterfaceMsk.setStatus('current')
if mibBuilder.loadTexts: tpVlanInterfaceMsk.setDescription('The IP mask of the VLAN interface.')
tpVlanInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpVlanInterfaceName.setStatus('current')
if mibBuilder.loadTexts: tpVlanInterfaceName.setDescription(' The name of the VLAN interface.')
tpVlanInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 1, 1, 7), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpVlanInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: tpVlanInterfaceStatus.setDescription(' The following values are states: these values may be used as follow: active(1),if the entry is being used. notInService(2),destory the entry. notReady(3),destory the entry. createAndGo(4),not being used createAndWait(5),creat a new entry destroy(6),destory the entry.')
tpLoopbackInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 2), )
if mibBuilder.loadTexts: tpLoopbackInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: tpLoopbackInterfaceTable.setDescription('A list of Loopback interface entries. Loopback interface is a virtual interface which purely software implemented, commonly used as router-id or network test. ')
tpLoopbackInterfaceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 2, 1), ).setIndexNames((0, "TPLINK-IPADDR-MIB", "tpLoopbackInterfaceId"), (0, "TPLINK-IPADDR-MIB", "tpLoopbackInterfaceIp"), (0, "TPLINK-IPADDR-MIB", "tpLoopbackInterfaceSecondary"))
if mibBuilder.loadTexts: tpLoopbackInterfaceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tpLoopbackInterfaceConfigEntry.setDescription(' The interface can be added or removed .')
tpLoopbackInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpLoopbackInterfaceId.setStatus('current')
if mibBuilder.loadTexts: tpLoopbackInterfaceId.setDescription('The id of the loopback interface (1-2147483647).')
tpLoopbackInterfaceSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpLoopbackInterfaceSecondary.setStatus('current')
if mibBuilder.loadTexts: tpLoopbackInterfaceSecondary.setDescription('If the ip address is secondary IP.')
tpLoopbackInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 2, 1, 3), TpInterfaceMode2()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpLoopbackInterfaceMode.setStatus('current')
if mibBuilder.loadTexts: tpLoopbackInterfaceMode.setDescription('The IP address alloc-mode of loopback interface.')
tpLoopbackInterfaceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpLoopbackInterfaceIp.setStatus('current')
if mibBuilder.loadTexts: tpLoopbackInterfaceIp.setDescription('The IP address of the loopback interface.')
tpLoopbackInterfaceMsk = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpLoopbackInterfaceMsk.setStatus('current')
if mibBuilder.loadTexts: tpLoopbackInterfaceMsk.setDescription('The IP mask of the loopback interface.')
tpLoopbackInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpLoopbackInterfaceName.setStatus('current')
if mibBuilder.loadTexts: tpLoopbackInterfaceName.setDescription(' The name of the loopback interface.')
tpLoopbackInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 2, 1, 7), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpLoopbackInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: tpLoopbackInterfaceStatus.setDescription(' Action status.')
tpRoutedPortTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 3), )
if mibBuilder.loadTexts: tpRoutedPortTable.setStatus('current')
if mibBuilder.loadTexts: tpRoutedPortTable.setDescription('A list of routed port. A routed port is special port mode which you can configure Layer 3 function like RIP, OSPF, while some Layer 2 function like speed, flow-control is also available. ')
tpRoutedPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TPLINK-IPADDR-MIB", "tpRoutedPortIp"), (0, "TPLINK-IPADDR-MIB", "tpRoutedPortSecondary"))
if mibBuilder.loadTexts: tpRoutedPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tpRoutedPortConfigEntry.setDescription(' The interface can be added or removed .')
tpRoutedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpRoutedPortId.setStatus('current')
if mibBuilder.loadTexts: tpRoutedPortId.setDescription('The port id.')
tpRoutedPortSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpRoutedPortSecondary.setStatus('current')
if mibBuilder.loadTexts: tpRoutedPortSecondary.setDescription('If the ip address is secondary IP.')
tpRoutedPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 3, 1, 3), TpInterfaceMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpRoutedPortMode.setStatus('current')
if mibBuilder.loadTexts: tpRoutedPortMode.setDescription('The IP address alloc-mode of the routed port.')
tpRoutedPortIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpRoutedPortIp.setStatus('current')
if mibBuilder.loadTexts: tpRoutedPortIp.setDescription('The IP address of the routed port.')
tpRoutedPortMsk = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 3, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpRoutedPortMsk.setStatus('current')
if mibBuilder.loadTexts: tpRoutedPortMsk.setDescription('The IP mask of the routed port.')
tpRoutedPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpRoutedPortName.setStatus('current')
if mibBuilder.loadTexts: tpRoutedPortName.setDescription(' The name of the routed port.')
tpRoutedPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 3, 1, 7), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpRoutedPortStatus.setStatus('current')
if mibBuilder.loadTexts: tpRoutedPortStatus.setDescription(' Action status.')
tpPortChannelTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 4), )
if mibBuilder.loadTexts: tpPortChannelTable.setStatus('current')
if mibBuilder.loadTexts: tpPortChannelTable.setDescription('A list of port-channel interface entries. ')
tpPortChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 4, 1), ).setIndexNames((0, "TPLINK-IPADDR-MIB", "tpPortChannelId"), (0, "TPLINK-IPADDR-MIB", "tpPortChannelIp"), (0, "TPLINK-IPADDR-MIB", "tpPortChannelSecondary"))
if mibBuilder.loadTexts: tpPortChannelConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tpPortChannelConfigEntry.setDescription(' The interface can be added or removed .')
tpPortChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpPortChannelId.setStatus('current')
if mibBuilder.loadTexts: tpPortChannelId.setDescription('The id of the port-channel interface.')
tpPortChannelSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpPortChannelSecondary.setStatus('current')
if mibBuilder.loadTexts: tpPortChannelSecondary.setDescription('If the ip address is secondary IP.')
tpPortChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 4, 1, 3), TpInterfaceMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpPortChannelMode.setStatus('current')
if mibBuilder.loadTexts: tpPortChannelMode.setDescription('The IP address alloc-mode of port-channel interface.')
tpPortChannelIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpPortChannelIp.setStatus('current')
if mibBuilder.loadTexts: tpPortChannelIp.setDescription('The IP address of the port-channel interface.')
tpPortChannelMsk = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 4, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpPortChannelMsk.setStatus('current')
if mibBuilder.loadTexts: tpPortChannelMsk.setDescription('The IP mask of the port-channel interface.')
tpPortChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpPortChannelName.setStatus('current')
if mibBuilder.loadTexts: tpPortChannelName.setDescription(' The name of the port-channel interface.')
tpPortChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 6, 1, 1, 4, 1, 7), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpPortChannelStatus.setStatus('current')
if mibBuilder.loadTexts: tpPortChannelStatus.setDescription(' The following values are states: these values may be used as follow: active(1),if the entry is being used. notInService(2),destory the entry. notReady(3),destory the entry. createAndGo(4),not being used createAndWait(5),creat a new entry destroy(6),destory the entry.')
mibBuilder.exportSymbols("TPLINK-IPADDR-MIB", tpLoopbackInterfaceSecondary=tpLoopbackInterfaceSecondary, tpPortChannelMsk=tpPortChannelMsk, tpRoutedPortTable=tpRoutedPortTable, tpPortChannelTable=tpPortChannelTable, TpPortLinkMode=TpPortLinkMode, tplinkIpAddrNotifications=tplinkIpAddrNotifications, tpVlanInterfaceMsk=tpVlanInterfaceMsk, tpPortChannelName=tpPortChannelName, tpLoopbackInterfaceId=tpLoopbackInterfaceId, tpPortChannelConfigEntry=tpPortChannelConfigEntry, tpInterfaceConfig=tpInterfaceConfig, tplinkIpAddrMIB=tplinkIpAddrMIB, tpRoutedPortSecondary=tpRoutedPortSecondary, tpRoutedPortStatus=tpRoutedPortStatus, tpRoutedPortMode=tpRoutedPortMode, tpLoopbackInterfaceMsk=tpLoopbackInterfaceMsk, tpPortChannelStatus=tpPortChannelStatus, tpVlanInterfaceName=tpVlanInterfaceName, tpVlanInterfaceSecondary=tpVlanInterfaceSecondary, tpVlanInterfaceTable=tpVlanInterfaceTable, tplinkIpAddrMIBObjects=tplinkIpAddrMIBObjects, tpLoopbackInterfaceConfigEntry=tpLoopbackInterfaceConfigEntry, tpLoopbackInterfaceTable=tpLoopbackInterfaceTable, tpLoopbackInterfaceMode=tpLoopbackInterfaceMode, tpVlanInterfaceIp=tpVlanInterfaceIp, TpInterfaceMode=TpInterfaceMode, tpLoopbackInterfaceName=tpLoopbackInterfaceName, tpVlanInterfaceVlanId=tpVlanInterfaceVlanId, tpVlanInterfaceStatus=tpVlanInterfaceStatus, tpLoopbackInterfaceIp=tpLoopbackInterfaceIp, tpLoopbackInterfaceStatus=tpLoopbackInterfaceStatus, tpVlanInterfaceConfigEntry=tpVlanInterfaceConfigEntry, TpInterfaceMode2=TpInterfaceMode2, tpPortChannelId=tpPortChannelId, tpVlanInterfaceMode=tpVlanInterfaceMode, tpRoutedPortConfigEntry=tpRoutedPortConfigEntry, tpPortChannelIp=tpPortChannelIp, tpRoutedPortIp=tpRoutedPortIp, PYSNMP_MODULE_ID=tplinkIpAddrMIB, tpPortChannelSecondary=tpPortChannelSecondary, tpRoutedPortName=tpRoutedPortName, tpRoutedPortId=tpRoutedPortId, tpPortChannelMode=tpPortChannelMode, tpRoutedPortMsk=tpRoutedPortMsk)
