#
# PySNMP MIB module ADTRAN-AOSCPU (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADTRAN-AOSCPU
# Produced by pysmi-0.3.4 at Wed May  1 11:14:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
adGenAOSConformance, adGenAOSCommon = mibBuilder.importSymbols("ADTRAN-AOS", "adGenAOSConformance", "adGenAOSCommon")
adIdentityShared, = mibBuilder.importSymbols("ADTRAN-MIB", "adIdentityShared")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, iso, Gauge32, Counter64, Counter32, NotificationType, Unsigned32, Integer32, Bits, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "iso", "Gauge32", "Counter64", "Counter32", "NotificationType", "Unsigned32", "Integer32", "Bits", "TimeTicks", "ObjectIdentity")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
adGenAOSCpuUtilMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 664, 6, 10000, 4))
adGenAOSCpuUtilMib.setRevisions(('2004-10-04 00:00', '2009-04-30 00:00', '2009-08-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: adGenAOSCpuUtilMib.setRevisionsDescriptions(('Initial version of this MIB module.', 'Added resource utilization OIDs for traps and tables.', 'Added sysName to adGenAOSResUtilThreshAlarm and adGenAOSResUtilThreshNormal.',))
if mibBuilder.loadTexts: adGenAOSCpuUtilMib.setLastUpdated('200904300000Z')
if mibBuilder.loadTexts: adGenAOSCpuUtilMib.setOrganization('ADTRAN, Inc.')
if mibBuilder.loadTexts: adGenAOSCpuUtilMib.setContactInfo('Technical Support Dept. Postal: ADTRAN, Inc. 901 Explorer Blvd. Huntsville, AL 35806 Tel: +1 800 726-8663 Fax: +1 256 963 6217 E-mail: support@adtran.com')
if mibBuilder.loadTexts: adGenAOSCpuUtilMib.setDescription('This MIB contains information regarding CPU utilization, Memory usage and system process status.')
adGenAOSCpuUtil = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4))
adGenAOSResUtilThreshTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 0))
if mibBuilder.loadTexts: adGenAOSResUtilThreshTraps.setStatus('current')
if mibBuilder.loadTexts: adGenAOSResUtilThreshTraps.setDescription("These traps indicate that a resource's utilization status has changed respective of a set threshold value. There are two types of traps, Alarm and Normal. The traps will return the adGenAOSResUtilThreshTable indices and the number of seconds since epoch as a timestamp indicating when the utilization status changed. The timestamp value is indicative of when the utilization status changed an not when the trap was sent.")
adGenAOSCurrentCpuUtil = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSCurrentCpuUtil.setStatus('current')
if mibBuilder.loadTexts: adGenAOSCurrentCpuUtil.setDescription('Average CPU utilization over the last second.')
adGenAOSClearUtilizationStats = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSClearUtilizationStats.setStatus('current')
if mibBuilder.loadTexts: adGenAOSClearUtilizationStats.setDescription('Set value to 1 to clear CPU utilization statistics.')
adGenAOS1MinCpuUtil = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOS1MinCpuUtil.setStatus('current')
if mibBuilder.loadTexts: adGenAOS1MinCpuUtil.setDescription('Average CPU utilization over the last minute.')
adGenAOS5MinCpuUtil = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOS5MinCpuUtil.setStatus('current')
if mibBuilder.loadTexts: adGenAOS5MinCpuUtil.setDescription('Average CPU utilization over the last 5 minutes.')
adGenAOSMaxCpuUtil = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSMaxCpuUtil.setStatus('current')
if mibBuilder.loadTexts: adGenAOSMaxCpuUtil.setDescription('Maximum CPU utilization since last system reboot or statistics reset.')
adGenAOSMemPool = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSMemPool.setStatus('current')
if mibBuilder.loadTexts: adGenAOSMemPool.setDescription('Total memory pool available.')
adGenAOSHeapSize = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSHeapSize.setStatus('current')
if mibBuilder.loadTexts: adGenAOSHeapSize.setDescription('Total Heap size. This is the amount of memory available after the code is decompressed and packet buffers are allocated.')
adGenAOSHeapFree = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSHeapFree.setStatus('current')
if mibBuilder.loadTexts: adGenAOSHeapFree.setDescription('Current amount of heap available for use.')
adGenAOSProcessTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 9), )
if mibBuilder.loadTexts: adGenAOSProcessTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSProcessTable.setDescription('A table reporting the current run state of all current processes.')
adGenAOSProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 9, 1), ).setIndexNames((0, "ADTRAN-AOSCPU", "adGenAOSProcID"))
if mibBuilder.loadTexts: adGenAOSProcessEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSProcessEntry.setDescription('Each entry in the list is a current system process.')
adGenAOSProcID = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: adGenAOSProcID.setStatus('current')
if mibBuilder.loadTexts: adGenAOSProcID.setDescription('Unique indentifier for the process.')
adGenAOSProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSProcName.setStatus('current')
if mibBuilder.loadTexts: adGenAOSProcName.setDescription('System process name.')
adGenAOSProcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSProcPriority.setStatus('current')
if mibBuilder.loadTexts: adGenAOSProcPriority.setDescription('Current system process priority.')
adGenAOSProcState = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("ready", 2), ("wait", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSProcState.setStatus('current')
if mibBuilder.loadTexts: adGenAOSProcState.setDescription('Current system process state.')
adGenAOSProcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 9, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSProcCount.setStatus('current')
if mibBuilder.loadTexts: adGenAOSProcCount.setDescription('Current number of times the process has been invoked.')
adGenAOSProcExecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 9, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSProcExecTime.setStatus('current')
if mibBuilder.loadTexts: adGenAOSProcExecTime.setDescription('Total amount of time spent executing this process. Result is in usec.')
adGenAOSProcRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 9, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSProcRunTime.setStatus('current')
if mibBuilder.loadTexts: adGenAOSProcRunTime.setDescription('Total amount of time spent executing this process. Result is in usec.')
adGenAOSProc1SecLd = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 9, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSProc1SecLd.setStatus('current')
if mibBuilder.loadTexts: adGenAOSProc1SecLd.setDescription('Percent system utilization for the process.')
adGenAOSResUtilThreshTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 10), )
if mibBuilder.loadTexts: adGenAOSResUtilThreshTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSResUtilThreshTable.setDescription('A table reporting the current resource utilization threshold traps with abilities to configure the traps. The table supports create and destroy. To prevent abuse, the table will not support row creation once 20 or more entries exist within the table.')
adGenAOSResUtilThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 10, 1), ).setIndexNames((0, "ADTRAN-AOSCPU", "adGenAOSResType"), (0, "ADTRAN-AOSCPU", "adGenAOSResUtilThresh"), (0, "ADTRAN-AOSCPU", "adGenAOSResUtilTimeInterval"))
if mibBuilder.loadTexts: adGenAOSResUtilThreshEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSResUtilThreshEntry.setDescription('Each entry in the table represents a current resource utilization threshold notification. The entry is composed of an enumerated integer representing the resource type, the numerical threshold and time interval settings. All entries are immutable and all columns are required for create.')
adGenAOSResType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cpu", 1), ("heap", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSResType.setStatus('current')
if mibBuilder.loadTexts: adGenAOSResType.setDescription('Indentifier specifying the resource type. Resource notes: (2) Heap - The heap resource will only display a time interval value of 1. Setting the value to a valid time interval value will always result in the inherent default value of 1. A heap notification will occur whenever the threshold is exceeded.')
adGenAOSResUtilThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 10, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSResUtilThresh.setStatus('current')
if mibBuilder.loadTexts: adGenAOSResUtilThresh.setDescription('The utilization threshold value expressed as a whole number percentage.')
adGenAOSResUtilTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 10, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSResUtilTimeInterval.setStatus('current')
if mibBuilder.loadTexts: adGenAOSResUtilTimeInterval.setDescription('Time interval in seconds for actual to exceed threshold.')
adGenAOSResUtilThreshRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSResUtilThreshRowStatus.setStatus('current')
if mibBuilder.loadTexts: adGenAOSResUtilThreshRowStatus.setDescription('RowStatus column for this table. Since each entry is immutable the only acceptable RowStatus values (for set) are createAndGo(4) and destroy(6). The only acceptable RowStatus value for get is active(1).')
adGenAOSResUtilThreshTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 11), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: adGenAOSResUtilThreshTimestamp.setStatus('current')
if mibBuilder.loadTexts: adGenAOSResUtilThreshTimestamp.setDescription('The time (seconds since epoch) that a resource utilization threshold trap condition occurred and not necessarily the when the trap was sent.')
adGenAOSResUtilThreshAlarm = NotificationType((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 0, 1)).setObjects(("ADTRAN-AOSCPU", "adGenAOSResType"), ("ADTRAN-AOSCPU", "adGenAOSResUtilThresh"), ("ADTRAN-AOSCPU", "adGenAOSResUtilTimeInterval"), ("ADTRAN-AOSCPU", "adGenAOSResUtilThreshTimestamp"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: adGenAOSResUtilThreshAlarm.setStatus('current')
if mibBuilder.loadTexts: adGenAOSResUtilThreshAlarm.setDescription('This trap indicates the resource utilization exceeded the set threshold value for the entirety of the set time interval. The specific resource utilization is specified via the indexes adGenAOSResType, adGenAOSResUtilThresh, and adGenAOSResUtilTimeInterval. The adGenAOSResUtilThreshTimestamp indicates when this condition occurred and not necessarily when the trap was sent. The sysName is the exact same as defined in SNMPv2-MIB.')
adGenAOSResUtilThreshNormal = NotificationType((1, 3, 6, 1, 4, 1, 664, 5, 53, 1, 4, 0, 2)).setObjects(("ADTRAN-AOSCPU", "adGenAOSResType"), ("ADTRAN-AOSCPU", "adGenAOSResUtilThresh"), ("ADTRAN-AOSCPU", "adGenAOSResUtilTimeInterval"), ("ADTRAN-AOSCPU", "adGenAOSResUtilThreshTimestamp"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: adGenAOSResUtilThreshNormal.setStatus('current')
if mibBuilder.loadTexts: adGenAOSResUtilThreshNormal.setDescription('This trap indicates the resource utilization has been in a normal (non-alarm) state for at least 5 seconds. This condition can only occur after the alarm state has been triggered. The specific resource utilization is specified via the indexes adGenAOSResType, adGenAOSResUtilThresh, and adGenAOSResUtilTimeInterval. The adGenAOSResUtilThreshTimestamp indicates when this condition occurred and not necessarily when the trap was sent.The sysName is the exact same as defined in SNMPv2-MIB.')
adGenAOSCpuConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 4))
adAOSCpuCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 4, 1))
adAOSCpuGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 4, 2))
adAOSCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 4, 1, 1)).setObjects(("ADTRAN-AOSCPU", "adGenAOSCpuGroup"), ("ADTRAN-AOSCPU", "adGenAOSProcessGroup"), ("ADTRAN-AOSCPU", "adGenAOSThresholdGroup"), ("ADTRAN-AOSCPU", "adGenAOSThresholdTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adAOSCompliance = adAOSCompliance.setStatus('current')
if mibBuilder.loadTexts: adAOSCompliance.setDescription('The compliance statement for SNMPv2 entities which implement the adAosCPU.mib')
adGenAOSCpuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 4, 2, 1)).setObjects(("ADTRAN-AOSCPU", "adGenAOSCurrentCpuUtil"), ("ADTRAN-AOSCPU", "adGenAOSClearUtilizationStats"), ("ADTRAN-AOSCPU", "adGenAOS1MinCpuUtil"), ("ADTRAN-AOSCPU", "adGenAOS5MinCpuUtil"), ("ADTRAN-AOSCPU", "adGenAOSMaxCpuUtil"), ("ADTRAN-AOSCPU", "adGenAOSMemPool"), ("ADTRAN-AOSCPU", "adGenAOSHeapSize"), ("ADTRAN-AOSCPU", "adGenAOSHeapFree"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSCpuGroup = adGenAOSCpuGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSCpuGroup.setDescription('The Unit SNMP Config Group.')
adGenAOSProcessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 4, 2, 2)).setObjects(("ADTRAN-AOSCPU", "adGenAOSProcName"), ("ADTRAN-AOSCPU", "adGenAOSProcPriority"), ("ADTRAN-AOSCPU", "adGenAOSProcState"), ("ADTRAN-AOSCPU", "adGenAOSProcCount"), ("ADTRAN-AOSCPU", "adGenAOSProcExecTime"), ("ADTRAN-AOSCPU", "adGenAOSProcRunTime"), ("ADTRAN-AOSCPU", "adGenAOSProc1SecLd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSProcessGroup = adGenAOSProcessGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSProcessGroup.setDescription('This group is used to report the status of current processes.')
adGenAOSThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 4, 2, 3)).setObjects(("ADTRAN-AOSCPU", "adGenAOSResType"), ("ADTRAN-AOSCPU", "adGenAOSResUtilThresh"), ("ADTRAN-AOSCPU", "adGenAOSResUtilTimeInterval"), ("ADTRAN-AOSCPU", "adGenAOSResUtilThreshRowStatus"), ("ADTRAN-AOSCPU", "adGenAOSResUtilThreshTimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSThresholdGroup = adGenAOSThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSThresholdGroup.setDescription('The threshold config group. Contains objects to set and get the threshold and time interval to trigger a trap.')
adGenAOSThresholdTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 4, 2, 4)).setObjects(("ADTRAN-AOSCPU", "adGenAOSResUtilThreshAlarm"), ("ADTRAN-AOSCPU", "adGenAOSResUtilThreshNormal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSThresholdTrapGroup = adGenAOSThresholdTrapGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSThresholdTrapGroup.setDescription('Traps which may be used to enhance event driven management of the CPU.')
mibBuilder.exportSymbols("ADTRAN-AOSCPU", adGenAOSProcID=adGenAOSProcID, adGenAOSHeapFree=adGenAOSHeapFree, PYSNMP_MODULE_ID=adGenAOSCpuUtilMib, adGenAOSMemPool=adGenAOSMemPool, adGenAOS1MinCpuUtil=adGenAOS1MinCpuUtil, adAOSCpuCompliances=adAOSCpuCompliances, adGenAOSProcessGroup=adGenAOSProcessGroup, adGenAOSCurrentCpuUtil=adGenAOSCurrentCpuUtil, adGenAOSProcessTable=adGenAOSProcessTable, adGenAOSResUtilThreshRowStatus=adGenAOSResUtilThreshRowStatus, adGenAOSResUtilTimeInterval=adGenAOSResUtilTimeInterval, adGenAOSThresholdGroup=adGenAOSThresholdGroup, adGenAOSClearUtilizationStats=adGenAOSClearUtilizationStats, adGenAOSProcRunTime=adGenAOSProcRunTime, adGenAOSProcCount=adGenAOSProcCount, adGenAOSProcName=adGenAOSProcName, adGenAOSCpuGroup=adGenAOSCpuGroup, adGenAOSProcState=adGenAOSProcState, adGenAOSMaxCpuUtil=adGenAOSMaxCpuUtil, adGenAOSProc1SecLd=adGenAOSProc1SecLd, adGenAOSResUtilThreshAlarm=adGenAOSResUtilThreshAlarm, adGenAOSHeapSize=adGenAOSHeapSize, adGenAOSThresholdTrapGroup=adGenAOSThresholdTrapGroup, adGenAOSCpuUtilMib=adGenAOSCpuUtilMib, adGenAOSProcessEntry=adGenAOSProcessEntry, adGenAOSResUtilThreshTable=adGenAOSResUtilThreshTable, adGenAOSCpuUtil=adGenAOSCpuUtil, adGenAOSResType=adGenAOSResType, adGenAOSResUtilThreshTimestamp=adGenAOSResUtilThreshTimestamp, adGenAOSResUtilThresh=adGenAOSResUtilThresh, adGenAOSProcPriority=adGenAOSProcPriority, adGenAOSResUtilThreshTraps=adGenAOSResUtilThreshTraps, adAOSCpuGroups=adAOSCpuGroups, adGenAOSCpuConformance=adGenAOSCpuConformance, adGenAOSProcExecTime=adGenAOSProcExecTime, adGenAOSResUtilThreshNormal=adGenAOSResUtilThreshNormal, adAOSCompliance=adAOSCompliance, adGenAOSResUtilThreshEntry=adGenAOSResUtilThreshEntry, adGenAOS5MinCpuUtil=adGenAOS5MinCpuUtil)
