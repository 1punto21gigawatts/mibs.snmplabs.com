#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-BusMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-BusMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:29:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
mscShelf, mscShelfCardIndex, mscShelfCard, mscShelfIndex = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelf", "mscShelfCardIndex", "mscShelfCard", "mscShelfIndex")
StorageType, RowStatus, Integer32, DisplayString, Unsigned32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "StorageType", "RowStatus", "Integer32", "DisplayString", "Unsigned32")
NonReplicated, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Counter64, TimeTicks, IpAddress, NotificationType, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, Counter32, iso, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "TimeTicks", "IpAddress", "NotificationType", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "Counter32", "iso", "Gauge32", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
busMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 144))
mscShelfCardBusTap = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2))
mscShelfCardBusTapRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 1), )
if mibBuilder.loadTexts: mscShelfCardBusTapRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapRowStatusTable.setDescription('This entry controls the addition and deletion of mscShelfCardBusTap components.')
mscShelfCardBusTapRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfCardIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfCardBusTapIndex"))
if mibBuilder.loadTexts: mscShelfCardBusTapRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapRowStatusEntry.setDescription('A single entry in the table represents a single mscShelfCardBusTap component.')
mscShelfCardBusTapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscShelfCardBusTap components. These components cannot be added nor deleted.')
mscShelfCardBusTapComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscShelfCardBusTapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapStorageType.setDescription('This variable represents the storage type value for the mscShelfCardBusTap tables.')
mscShelfCardBusTapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x", 0), ("y", 1))))
if mibBuilder.loadTexts: mscShelfCardBusTapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapIndex.setDescription('This variable represents the index for the mscShelfCardBusTap tables.')
mscShelfCardBusTapStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 10), )
if mibBuilder.loadTexts: mscShelfCardBusTapStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapStateTable.setDescription('This group contains the three OSI State attributes and the six OSI Status attributes. The descriptions generically indicate what each attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241- 7001-150, Passport Operations and Maintenance Guide.')
mscShelfCardBusTapStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfCardIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfCardBusTapIndex"))
if mibBuilder.loadTexts: mscShelfCardBusTapStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapStateEntry.setDescription('An entry in the mscShelfCardBusTapStateTable.')
mscShelfCardBusTapAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscShelfCardBusTapOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscShelfCardBusTapUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscShelfCardBusTapAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapAvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapAvailabilityStatus.setDescription('If supported by the component, this attribute indicates the OSI Availability status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value inTest indicates that the resource is undergoing a test procedure. If adminState is locked or shuttingDown, the normal users are precluded from using the resource and controlStatus is reservedForTest. Tests that do not exclude additional users can be present in any operational or administrative state but the reservedForTest condition should not be present. The value failed indicates that the component has an internal fault that prevents it from operating. The operationalState is disabled. The value dependency indicates that the component cannot operate because some other resource on which it depends is unavailable. The operationalState is disabled. The value powerOff indicates the resource requires power to be applied and it is not powered on. The operationalState is disabled. The value offLine indicates the resource requires a routine operation (either manual, automatic, or both) to be performed to place it on-line and make it available for use. The operationalState is disabled. The value offDuty indicates the resource is inactive in accordance with a predetermined time schedule. In the absence of other disabling conditions, the operationalState is enabled or disabled. The value degraded indicates the service provided by the component is degraded in some way, such as in speed or operating capacity. However, the resource remains available for service. The operationalState is enabled. The value notInstalled indicates the resource is not present. The operationalState is disabled. The value logFull is not used. Description of bits: inTest(0) failed(1) powerOff(2) offLine(3) offDuty(4) dependency(5) degraded(6) notInstalled(7) logFull(8)')
mscShelfCardBusTapProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapProceduralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapProceduralStatus.setDescription("If supported by the component, this attribute indicates the OSI Procedural status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value initializationRequired indicates (for a resource which doesn't initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState is disabled. The value notInitialized indicates (for a resource which does initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState may be enabled or disabled. The value initializing indicates that initialization has been initiated but is not yet complete. The operationalState may be enabled or disabled. The value reporting indicates the resource has completed some processing operation and is notifying the results. The operationalState is enabled. The value terminating indicates the component is in a termination phase. If the resource doesn't reinitialize autonomously, operationalState is disabled; otherwise it is enabled or disabled. Description of bits: initializationRequired(0) notInitialized(1) initializing(2) reporting(3) terminating(4)")
mscShelfCardBusTapControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapControlStatus.setDescription('If supported by the component, this attribute indicates the OSI Control status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value subjectToTest indicates the resource is available but tests may be conducted simultaneously at unpredictable times, which may cause it to exhibit unusual characteristics. The value partOfServicesLocked indicates that part of the service is restricted from users of a resource. The adminState is unlocked. The value reservedForTest indicates that the component is administratively unavailable because it is undergoing a test procedure. The adminState is locked. The value suspended indicates that the service has been administratively suspended. Description of bits: subjectToTest(0) partOfServicesLocked(1) reservedForTest(2) suspended(3)')
mscShelfCardBusTapAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapAlarmStatus.setDescription('If supported by the component, this attribute indicates the OSI Alarm status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value underRepair indicates the component is currently being repaired. The operationalState is enabled or disabled. The value critical indicates one or more critical alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value major indicates one or more major alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value minor indicates one or more minor alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value alarmOutstanding generically indicates that an alarm of some severity is outstanding against the component. Description of bits: underRepair(0) critical(1) major(2) minor(3) alarmOutstanding(4)')
mscShelfCardBusTapStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapStandbyStatus.setDescription('If supported by the component, this attribute indicates the OSI Standby status of the component. The value notSet indicates that either the attribute is not supported or that none of the status conditions described below are present. Note that this is a non-standard value, used because the original specification indicated this attribute was set-valued and thus, did not provide a value to indicate that none of the other three are applicable. The value hotStandby indicates that the resource is not providing service but will be immediately able to take over the role of the resource to be backed up, without initialization activity, and containing the same information as the resource to be backed up. The value coldStandby indicates the resource is a backup for another resource but will not be immediately able to take over the role of the backed up resource and will require some initialization activity. The value providingService indicates that this component, as a backup resource, is currently backing up another resource.')
mscShelfCardBusTapUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapUnknownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapUnknownStatus.setDescription('This attribute indicates the OSI Unknown status of the component. The value false indicates that all of the other OSI State and Status attribute values can be considered accurate. The value true indicates that the actual state of the component is not known for sure.')
mscShelfCardBusTapOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 11), )
if mibBuilder.loadTexts: mscShelfCardBusTapOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapOperTable.setDescription('This attribute group contains operational attributes of a bus tap. This information outlines what the bus tap is doing and why it is doing it, and is primarily intended for use in diagnosing the cause of a bus- related problem reported by the module.')
mscShelfCardBusTapOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfCardIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfCardBusTapIndex"))
if mibBuilder.loadTexts: mscShelfCardBusTapOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapOperEntry.setDescription('An entry in the mscShelfCardBusTapOperTable.')
mscShelfCardBusTapFailuresInEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 11, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapFailuresInEffect.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapFailuresInEffect.setDescription('This attribute records the hardware problems that prevent the bus tap from using the associated bus. It may contain any combination of the following values. selfTest: the bus tap has failed its self-test clockSignal: the bus tap is not receiving clock signals from the bus parityError: the bus tap has detected too many parity errors on the bus Description of bits: selfTest(0) clockSignal(1) parityError(2)')
mscShelfCardBusTapDependenciesInEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapDependenciesInEffect.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapDependenciesInEffect.setDescription('This attribute records the non-hardware problems that prevent the bus tap from using the associated bus. It may contain any combination of the following values. busLocked: the bus is locked busDisabled: the bus is disabled Description of bits: busLocked(0) busDisabled(1)')
mscShelfCardBusTapCardsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapCardsAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapCardsAvailable.setDescription("This attribute records the slot numbers of the cards that the bus tap considers available on the busthat is, the cards that have an operational bus tap connected to the bus. The value of this attribute is determined automatically by the bus tap by monitoring signals generated by each bus tap on the bus; it cannot be changed by the operator. Normally, every card in the module signals its availability on both buses; if a card does not signal its availability on a bus this indicates that the card is not present or that its bus tap has failed. By examining this attribute for both of a card's BusTap components, it is possible to determine which cards are present in the module and which buses each can use. Note: If failuresInEffect contains either selfTest or clockSignal the bus tap is unable to monitor the availability of the bus taps on the bus; cardsAvailable will indicate that no bus taps are available on the bus. Description of bits: n0(0) n1(1) n2(2) n3(3) n4(4) n5(5) n6(6) n7(7) n8(8) n9(9) n10(10) n11(11) n12(12) n13(13) n14(14) n15(15)")
mscShelfCardBusTapCardsTxTo = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapCardsTxTo.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapCardsTxTo.setDescription("This attribute records the slot numbers of the cards which the bus tap is currently configured to transmit cells to. This configuration is managed automatically, and cannot be changed by the operator. By examining this attribute for both of a card's BusTap components, it is possible to determine which bus (if any) the card uses when it needs to transmits cells to a specific card in the module. Description of bits: n0(0) n1(1) n2(2) n3(3) n4(4) n5(5) n6(6) n7(7) n8(8) n9(9) n10(10) n11(11) n12(12) n13(13) n14(14) n15(15)")
mscShelfCardBusTapErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 12), )
if mibBuilder.loadTexts: mscShelfCardBusTapErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapErrorsTable.setDescription('This attribute group records errors that the bus tap has detected since the card was last rebooted. This information is intended for use in detecting and diagnosing bus-related problems within a module.')
mscShelfCardBusTapErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfCardIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfCardBusTapIndex"))
if mibBuilder.loadTexts: mscShelfCardBusTapErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapErrorsEntry.setDescription('An entry in the mscShelfCardBusTapErrorsTable.')
mscShelfCardBusTapSelfTestErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapSelfTestErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapSelfTestErrorCode.setDescription('This attribute records the error code generated by the most recent self-test of the bus tap. The value zero indicates that the self-test was successful. A non-zero value indicates that the self-test failed, and is used by the service technician when a defective card is returned for repair.')
mscShelfCardBusTapClockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapClockErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapClockErrors.setDescription("This attribute records the number of times that the bus tap has detected a loss of the fundamental clock signal used by the bus. Each occurrence may result in the loss of one or more cells or frames. This type of event may occur during normal operation of the module, for example when switching from one of the bus's clock sources to the other; it may also be caused by a hardware fault. The attribute's value wraps around to zero when it exceeds the maximum permitted value.")
mscShelfCardBusTapEndOfCellErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapEndOfCellErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapEndOfCellErrors.setDescription("This attribute records the number of times that the bus tap has detected a loss of the end-of-cell timing signal used by the bus. Each occurrence may result in the loss of one or more cells or frames. This type of event may occur during normal operation of the module, for example switching the bus's clock source from one card to another; it may also be caused by a hardware fault. The attribute's value wraps around to zero when it exceeds the maximum permitted value.")
mscShelfCardBusTapParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapParityErrors.setDescription("This attribute records the number of times that the bus tap has detected a cell with invalid parity on the bus. Each occurrence may result in the loss of one or more cells or frames. This type of event may occur during normal operation of the module, for example when a card is inserted, removed, or reboots; it may also be caused by a hardware fault. The attribute's value wraps around to zero when it exceeds the maximum permitted value.")
mscShelfCardBusTapFrmCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapFrmCongestionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapFrmCongestionErrors.setDescription("This attribute records the number of times that the bus tap was unable to receive a frame from the bus because all of its bus receive channels were in use. Each occurrence results in the loss of the frame. This type of event may occur during normal operation of the module, for example when the module is operating in single bus mode; it may also be caused by a hardware fault. The attribute's value wraps around to zero when it exceeds the maximum permitted value.")
mscShelfCardBusTapFrmCollisionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapFrmCollisionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapFrmCollisionErrors.setDescription("This attribute records the number of times that the bus tap was unable to receive a frame from the bus because it did not receive the last cell of the frame before the first cell of the following frame from the same source. Each occurrence results in the loss of both frames. This type of event may occur during normal operation of the module, for example when a card reboots; it may also be caused by a hardware fault. The attribute's value wraps around to zero when it exceeds the maximum permitted value.")
mscShelfCardBusTapFrmTimeoutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapFrmTimeoutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapFrmTimeoutErrors.setDescription("This attribute records the number of times that the bus tap was unable to receive a frame from the bus because the delay between two successive cells in that frame exceeded the maximum allowable duration. Each occurrence results in the loss of the frame. This type of event may occur during normal operation of the module, for example when the module changes bus mode; it may also be caused by a hardware fault. The attribute's value wraps around to zero when it exceeds the maximum permitted value.")
mscShelfCardBusTapFrmDeliveryErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapFrmDeliveryErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapFrmDeliveryErrors.setDescription("This attribute records the number of times that the bus tap was unable to receive a frame from the bus because it was destined for a bus transmit queue; that is, the frame would have been immediately retransmitted over a bus. Each occurrence results in the loss of the frame. This type of event should never occur during normal operation of the module and indicates the occurrence of a hardware or software fault. The attribute's value wraps around to zero when it exceeds the maximum permitted value.")
mscShelfCardBusTapFrmSizeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 2, 2, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfCardBusTapFrmSizeErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfCardBusTapFrmSizeErrors.setDescription("This attribute records the number of times that the bus tap was unable to receive a frame from the bus because it required more than 255 blocks of shared memory. Each occurrence results in the loss of the frame. This type of event should never occur during normal operation of the module and indicates improper configuration of the card or the occurrence of a hardware or software fault. The attribute's value wraps around to zero when it exceeds the maximum permitted value.")
mscShelfBus = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3))
mscShelfBusRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 1), )
if mibBuilder.loadTexts: mscShelfBusRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusRowStatusTable.setDescription('This entry controls the addition and deletion of mscShelfBus components.')
mscShelfBusRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusIndex"))
if mibBuilder.loadTexts: mscShelfBusRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusRowStatusEntry.setDescription('A single entry in the table represents a single mscShelfBus component.')
mscShelfBusRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscShelfBus components. These components cannot be added nor deleted.')
mscShelfBusComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscShelfBusStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusStorageType.setDescription('This variable represents the storage type value for the mscShelfBus tables.')
mscShelfBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x", 0), ("y", 1))))
if mibBuilder.loadTexts: mscShelfBusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusIndex.setDescription('This variable represents the index for the mscShelfBus tables.')
mscShelfBusStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 10), )
if mibBuilder.loadTexts: mscShelfBusStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusStateTable.setDescription('This group contains the three OSI State attributes and the six OSI Status attributes. The descriptions generically indicate what each attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241- 7001-150, Passport Operations and Maintenance Guide.')
mscShelfBusStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusIndex"))
if mibBuilder.loadTexts: mscShelfBusStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusStateEntry.setDescription('An entry in the mscShelfBusStateTable.')
mscShelfBusAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscShelfBusOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscShelfBusUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscShelfBusAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusAvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusAvailabilityStatus.setDescription('If supported by the component, this attribute indicates the OSI Availability status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value inTest indicates that the resource is undergoing a test procedure. If adminState is locked or shuttingDown, the normal users are precluded from using the resource and controlStatus is reservedForTest. Tests that do not exclude additional users can be present in any operational or administrative state but the reservedForTest condition should not be present. The value failed indicates that the component has an internal fault that prevents it from operating. The operationalState is disabled. The value dependency indicates that the component cannot operate because some other resource on which it depends is unavailable. The operationalState is disabled. The value powerOff indicates the resource requires power to be applied and it is not powered on. The operationalState is disabled. The value offLine indicates the resource requires a routine operation (either manual, automatic, or both) to be performed to place it on-line and make it available for use. The operationalState is disabled. The value offDuty indicates the resource is inactive in accordance with a predetermined time schedule. In the absence of other disabling conditions, the operationalState is enabled or disabled. The value degraded indicates the service provided by the component is degraded in some way, such as in speed or operating capacity. However, the resource remains available for service. The operationalState is enabled. The value notInstalled indicates the resource is not present. The operationalState is disabled. The value logFull is not used. Description of bits: inTest(0) failed(1) powerOff(2) offLine(3) offDuty(4) dependency(5) degraded(6) notInstalled(7) logFull(8)')
mscShelfBusProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusProceduralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusProceduralStatus.setDescription("If supported by the component, this attribute indicates the OSI Procedural status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value initializationRequired indicates (for a resource which doesn't initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState is disabled. The value notInitialized indicates (for a resource which does initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState may be enabled or disabled. The value initializing indicates that initialization has been initiated but is not yet complete. The operationalState may be enabled or disabled. The value reporting indicates the resource has completed some processing operation and is notifying the results. The operationalState is enabled. The value terminating indicates the component is in a termination phase. If the resource doesn't reinitialize autonomously, operationalState is disabled; otherwise it is enabled or disabled. Description of bits: initializationRequired(0) notInitialized(1) initializing(2) reporting(3) terminating(4)")
mscShelfBusControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusControlStatus.setDescription('If supported by the component, this attribute indicates the OSI Control status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value subjectToTest indicates the resource is available but tests may be conducted simultaneously at unpredictable times, which may cause it to exhibit unusual characteristics. The value partOfServicesLocked indicates that part of the service is restricted from users of a resource. The adminState is unlocked. The value reservedForTest indicates that the component is administratively unavailable because it is undergoing a test procedure. The adminState is locked. The value suspended indicates that the service has been administratively suspended. Description of bits: subjectToTest(0) partOfServicesLocked(1) reservedForTest(2) suspended(3)')
mscShelfBusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusAlarmStatus.setDescription('If supported by the component, this attribute indicates the OSI Alarm status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value underRepair indicates the component is currently being repaired. The operationalState is enabled or disabled. The value critical indicates one or more critical alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value major indicates one or more major alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value minor indicates one or more minor alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value alarmOutstanding generically indicates that an alarm of some severity is outstanding against the component. Description of bits: underRepair(0) critical(1) major(2) minor(3) alarmOutstanding(4)')
mscShelfBusStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusStandbyStatus.setDescription('If supported by the component, this attribute indicates the OSI Standby status of the component. The value notSet indicates that either the attribute is not supported or that none of the status conditions described below are present. Note that this is a non-standard value, used because the original specification indicated this attribute was set-valued and thus, did not provide a value to indicate that none of the other three are applicable. The value hotStandby indicates that the resource is not providing service but will be immediately able to take over the role of the resource to be backed up, without initialization activity, and containing the same information as the resource to be backed up. The value coldStandby indicates the resource is a backup for another resource but will not be immediately able to take over the role of the backed up resource and will require some initialization activity. The value providingService indicates that this component, as a backup resource, is currently backing up another resource.')
mscShelfBusUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusUnknownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusUnknownStatus.setDescription('This attribute indicates the OSI Unknown status of the component. The value false indicates that all of the other OSI State and Status attribute values can be considered accurate. The value true indicates that the actual state of the component is not known for sure.')
mscShelfBusOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 11), )
if mibBuilder.loadTexts: mscShelfBusOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusOperTable.setDescription('This attribute group contains operational attributes of a bus.')
mscShelfBusOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusIndex"))
if mibBuilder.loadTexts: mscShelfBusOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusOperEntry.setDescription('An entry in the mscShelfBusOperTable.')
mscShelfBusClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("activeCP", 0), ("alternate", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusClockSource.setDescription('This attribute records the source of the fundamental clock signal and end-of-cell synchronization signal used by the bus. It contains one of the following values. activeCP: the card which is the active control processor (CP) is providing clock signals alternate: the card at the opposite end of the module from the active CP is providing clock signals')
mscShelfBusUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusUtilization.setDescription('This attribute records how much of the available bus bandwidth was actually used during the most recently sampled 1 second interval. The value is expressed as a percentage.')
mscShelfBusBusTapStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 246), )
if mibBuilder.loadTexts: mscShelfBusBusTapStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusBusTapStatusTable.setDescription('This attribute records the operability of each bus tap on the bus, as reported by the associated BusTap component; the entries are indexed by slot number of the card. Each entry contains one of the following values. ok: the bus tap is operational failed: the bus tap has failed none: the bus tap status is not availablethe associated BusTap component does not currently exist')
mscShelfBusBusTapStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 246, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusBusTapStatusIndex"))
if mibBuilder.loadTexts: mscShelfBusBusTapStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusBusTapStatusEntry.setDescription('An entry in the mscShelfBusBusTapStatusTable.')
mscShelfBusBusTapStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 246, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfBusBusTapStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusBusTapStatusIndex.setDescription('This variable represents the mscShelfBusBusTapStatusTable specific index for the mscShelfBusBusTapStatusTable.')
mscShelfBusBusTapStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 246, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("failed", 1), ("none", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusBusTapStatusValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusBusTapStatusValue.setDescription('This variable represents an individual value for the mscShelfBusBusTapStatusTable.')
mscShelfBusClockSourceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 247), )
if mibBuilder.loadTexts: mscShelfBusClockSourceStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusClockSourceStatusTable.setDescription("This vector attribute, indexed with activeCP or alternate, represents the state of the bus clock sources. It can be set to one of the following values: ok: all operational cards can receive signals from the clock source. failed: at least one operational card is unable to receive signals from the clock source. unknown: status of a clock source is unknown. To determine the status of the clock source, a test must be run. testInProgress: the clock source is currently being tested. notApplicable: the LP state of the clock source's card is down or not provisioned.")
mscShelfBusClockSourceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 247, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusClockSourceStatusIndex"))
if mibBuilder.loadTexts: mscShelfBusClockSourceStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusClockSourceStatusEntry.setDescription('An entry in the mscShelfBusClockSourceStatusTable.')
mscShelfBusClockSourceStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 247, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("activeCP", 0), ("alternate", 1))))
if mibBuilder.loadTexts: mscShelfBusClockSourceStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusClockSourceStatusIndex.setDescription('This variable represents the mscShelfBusClockSourceStatusTable specific index for the mscShelfBusClockSourceStatusTable.')
mscShelfBusClockSourceStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 247, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("failed", 1), ("unknown", 2), ("testInProgress", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusClockSourceStatusValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusClockSourceStatusValue.setDescription('This variable represents an individual value for the mscShelfBusClockSourceStatusTable.')
mscShelfBusTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2))
mscShelfBusTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 1), )
if mibBuilder.loadTexts: mscShelfBusTestRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestRowStatusTable.setDescription('This entry controls the addition and deletion of mscShelfBusTest components.')
mscShelfBusTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestIndex"))
if mibBuilder.loadTexts: mscShelfBusTestRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestRowStatusEntry.setDescription('A single entry in the table represents a single mscShelfBusTest component.')
mscShelfBusTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusTestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscShelfBusTest components. These components cannot be added nor deleted.')
mscShelfBusTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusTestComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscShelfBusTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusTestStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestStorageType.setDescription('This variable represents the storage type value for the mscShelfBusTest tables.')
mscShelfBusTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscShelfBusTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestIndex.setDescription('This variable represents the index for the mscShelfBusTest tables.')
mscShelfBusTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 10), )
if mibBuilder.loadTexts: mscShelfBusTestStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscShelfBusTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestIndex"))
if mibBuilder.loadTexts: mscShelfBusTestStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestStateEntry.setDescription('An entry in the mscShelfBusTestStateTable.')
mscShelfBusTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusTestAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscShelfBusTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusTestOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscShelfBusTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusTestUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscShelfBusTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 11), )
if mibBuilder.loadTexts: mscShelfBusTestSetupTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestSetupTable.setDescription('This attribute group contains the attributes that govern the operation of a bus test. These attributes cannot be changed while the bus test is running.')
mscShelfBusTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestIndex"))
if mibBuilder.loadTexts: mscShelfBusTestSetupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestSetupEntry.setDescription('An entry in the mscShelfBusTestSetupTable.')
mscShelfBusTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 43200)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscShelfBusTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestDuration.setDescription('This attribute specifies the maximum length of time that the bus test is allowed to run. The value is expressed in minutes. The maximum allowed value permits the bus test to be run for up to 30 days.')
mscShelfBusTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 12), )
if mibBuilder.loadTexts: mscShelfBusTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestResultsTable.setDescription('This attribute group contains the results of the bus test that is currently running; if no bus test is running, the attribute group contains the results of the most recently completed bus test. The attributes of the Results group are reset to their initial values whenever a bus test is started or any attribute in the Setup group is set.')
mscShelfBusTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestIndex"))
if mibBuilder.loadTexts: mscShelfBusTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestResultsEntry.setDescription('An entry in the mscShelfBusTestResultsTable.')
mscShelfBusTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 43200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusTestElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestElapsedTime.setDescription('This attribute records the length of time (in minutes) that the bus test has been running.')
mscShelfBusTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 43200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusTestTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestTimeRemaining.setDescription('This attribute records the maximum length of time (in minutes) that the bus test will continue to run before stopping.')
mscShelfBusTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("neverStarted", 0), ("testRunning", 1), ("testTimeExpired", 2), ("stoppedByOperator", 3), ("selfTestFailure", 4), ("clockSourceFailure", 5), ("broadcastFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusTestCauseOfTermination.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestCauseOfTermination.setDescription('This attribute records the reason the bus test ended. It contains one of the following values. neverStarted: the bus test has not been started testRunning: the bus test is currently running testTimeExpired: the bus test ran for the specified duration stoppedByOperator: a STOP command was issued selfTestFailure: a failure was detected during the bus tap self-test clockSourceFailure: a failure was detected during the test of the active control processor (CP) clock source broadcastFailure: a failure was detected during the broadcast test')
mscShelfBusTestTestsDone = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusTestTestsDone.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestTestsDone.setDescription('This attribute records the tests that have been performed during the bus test. It may contain zero or more of the following values. selfTest: the bus tap self-test has been performed clockSourceTest: the clock source test has been performed broadcastTest: the broadcast test has been performed pingTest: at least one ping test has been performed Description of bits: selfTest(0) clockSourceTest(1) broadcastTest(2) pingTest(3)')
mscShelfBusTestSelfTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 248), )
if mibBuilder.loadTexts: mscShelfBusTestSelfTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestSelfTestResultsTable.setDescription('This attribute records the results of the bus tap self-test, indexed by the slot number of the card containing the bus tap tested. Each entry contains one of the following values. +: the bus tap passed its self-test X: the bus tap failed its self-test .: the bus tap was not tested The bus test terminates automatically if a failure is detected.')
mscShelfBusTestSelfTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 248, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestSelfTestResultsIndex"))
if mibBuilder.loadTexts: mscShelfBusTestSelfTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestSelfTestResultsEntry.setDescription('An entry in the mscShelfBusTestSelfTestResultsTable.')
mscShelfBusTestSelfTestResultsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 248, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfBusTestSelfTestResultsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestSelfTestResultsIndex.setDescription('This variable represents the mscShelfBusTestSelfTestResultsTable specific index for the mscShelfBusTestSelfTestResultsTable.')
mscShelfBusTestSelfTestResultsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 248, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("x", 0), ("n1", 1), ("n2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusTestSelfTestResultsValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestSelfTestResultsValue.setDescription('This variable represents an individual value for the mscShelfBusTestSelfTestResultsTable.')
mscShelfBusTestClockSourceTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 249), )
if mibBuilder.loadTexts: mscShelfBusTestClockSourceTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestClockSourceTestResultsTable.setDescription('This attribute records the results of the clock source test, indexed by the clock source and the slot number of the card containing the bus tap tested. Each entry contains one of the following values. +: the bus tap was able to receive clock signals from the clock source X: the bus tap was unable to receive clock signals from the clock source .: the bus tap was not tested against the clock source The bus test terminates automatically if a failure is detected involving the active control processor (CP) clock source.')
mscShelfBusTestClockSourceTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 249, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestClockSourceTestResultsSourceIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestClockSourceTestResultsCardIndex"))
if mibBuilder.loadTexts: mscShelfBusTestClockSourceTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestClockSourceTestResultsEntry.setDescription('An entry in the mscShelfBusTestClockSourceTestResultsTable.')
mscShelfBusTestClockSourceTestResultsSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 249, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("activeCP", 0), ("alternate", 1))))
if mibBuilder.loadTexts: mscShelfBusTestClockSourceTestResultsSourceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestClockSourceTestResultsSourceIndex.setDescription('This variable represents the next to last index for the mscShelfBusTestClockSourceTestResultsTable.')
mscShelfBusTestClockSourceTestResultsCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 249, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfBusTestClockSourceTestResultsCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestClockSourceTestResultsCardIndex.setDescription('This variable represents the final index for the mscShelfBusTestClockSourceTestResultsTable.')
mscShelfBusTestClockSourceTestResultsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 249, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("x", 0), ("n1", 1), ("n2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusTestClockSourceTestResultsValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestClockSourceTestResultsValue.setDescription('This variable represents an individual value for the mscShelfBusTestClockSourceTestResultsTable.')
mscShelfBusTestBroadcastTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 250), )
if mibBuilder.loadTexts: mscShelfBusTestBroadcastTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestBroadcastTestResultsTable.setDescription('This attribute records the results of the broadcast test, indexed by the slot numbers of the cards containing the bus taps tested. Each entry contains one of the following values. +: a broadcast message was successfully sent from the transmitting bus tap to the receiving bus tap X: a broadcast message was not successfully sent from the transmitting bus tap to the receiving bus tap .: the associated pair of bus taps was not tested The bus test terminates automatically if a failure is detected.')
mscShelfBusTestBroadcastTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 250, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestBroadcastTestResultsTxCardIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestBroadcastTestResultsRxCardIndex"))
if mibBuilder.loadTexts: mscShelfBusTestBroadcastTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestBroadcastTestResultsEntry.setDescription('An entry in the mscShelfBusTestBroadcastTestResultsTable.')
mscShelfBusTestBroadcastTestResultsTxCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 250, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfBusTestBroadcastTestResultsTxCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestBroadcastTestResultsTxCardIndex.setDescription('This variable represents the next to last index for the mscShelfBusTestBroadcastTestResultsTable.')
mscShelfBusTestBroadcastTestResultsRxCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 250, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfBusTestBroadcastTestResultsRxCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestBroadcastTestResultsRxCardIndex.setDescription('This variable represents the final index for the mscShelfBusTestBroadcastTestResultsTable.')
mscShelfBusTestBroadcastTestResultsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 250, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("x", 0), ("n1", 1), ("n2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusTestBroadcastTestResultsValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestBroadcastTestResultsValue.setDescription('This variable represents an individual value for the mscShelfBusTestBroadcastTestResultsTable.')
mscShelfBusTestPingTestsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 251), )
if mibBuilder.loadTexts: mscShelfBusTestPingTestsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestPingTestsTable.setDescription('This attribute records the number of ping tests performed, indexed by the slot numbers of the cards containing the bus taps involved. Each test attempts to transmit a single low-priority frame from the transmitting bus tap to the receiving bus tap.')
mscShelfBusTestPingTestsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 251, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestPingTestsTxCardIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestPingTestsRxCardIndex"))
if mibBuilder.loadTexts: mscShelfBusTestPingTestsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestPingTestsEntry.setDescription('An entry in the mscShelfBusTestPingTestsTable.')
mscShelfBusTestPingTestsTxCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 251, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfBusTestPingTestsTxCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestPingTestsTxCardIndex.setDescription('This variable represents the next to last index for the mscShelfBusTestPingTestsTable.')
mscShelfBusTestPingTestsRxCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 251, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfBusTestPingTestsRxCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestPingTestsRxCardIndex.setDescription('This variable represents the final index for the mscShelfBusTestPingTestsTable.')
mscShelfBusTestPingTestsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 251, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusTestPingTestsValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestPingTestsValue.setDescription('This variable represents an individual value for the mscShelfBusTestPingTestsTable.')
mscShelfBusTestPingFailuresTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 252), )
if mibBuilder.loadTexts: mscShelfBusTestPingFailuresTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestPingFailuresTable.setDescription('This attribute records the number of ping test failures detected, indexed by the slot numbers of the cards containing the bus taps involved. Each failure represents a single low-priority frame that was not successfully transmitted from the transmitting bus tap to the receiving bus tap. The bus test does not terminate automatically if a failure is detected.')
mscShelfBusTestPingFailuresEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 252, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestPingFailuresTxCardIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfBusTestPingFailuresRxCardIndex"))
if mibBuilder.loadTexts: mscShelfBusTestPingFailuresEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestPingFailuresEntry.setDescription('An entry in the mscShelfBusTestPingFailuresTable.')
mscShelfBusTestPingFailuresTxCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 252, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfBusTestPingFailuresTxCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestPingFailuresTxCardIndex.setDescription('This variable represents the next to last index for the mscShelfBusTestPingFailuresTable.')
mscShelfBusTestPingFailuresRxCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 252, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscShelfBusTestPingFailuresRxCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestPingFailuresRxCardIndex.setDescription('This variable represents the final index for the mscShelfBusTestPingFailuresTable.')
mscShelfBusTestPingFailuresValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 3, 2, 252, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfBusTestPingFailuresValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfBusTestPingFailuresValue.setDescription('This variable represents an individual value for the mscShelfBusTestPingFailuresTable.')
mscShelfTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 4))
mscShelfTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 4, 1), )
if mibBuilder.loadTexts: mscShelfTestRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfTestRowStatusTable.setDescription('This entry controls the addition and deletion of mscShelfTest components.')
mscShelfTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfTestIndex"))
if mibBuilder.loadTexts: mscShelfTestRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfTestRowStatusEntry.setDescription('A single entry in the table represents a single mscShelfTest component.')
mscShelfTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfTestRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfTestRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscShelfTest components. These components cannot be added nor deleted.')
mscShelfTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfTestComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfTestComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscShelfTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfTestStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfTestStorageType.setDescription('This variable represents the storage type value for the mscShelfTest tables.')
mscShelfTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscShelfTestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfTestIndex.setDescription('This variable represents the index for the mscShelfTest tables.')
mscShelfTestProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 4, 10), )
if mibBuilder.loadTexts: mscShelfTestProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfTestProvTable.setDescription('This group contains provisionable attributes of the Test component.')
mscShelfTestProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfTestIndex"))
if mibBuilder.loadTexts: mscShelfTestProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfTestProvEntry.setDescription('An entry in the mscShelfTestProvTable.')
mscShelfTestAutomaticBusClockTest = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscShelfTestAutomaticBusClockTest.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfTestAutomaticBusClockTest.setDescription("This attribute specifies whether or not a bus clock source test is automatically executed after a clock source's LP state changes, and after failure or recovery of the active CP bus clock source. Since tests of an alternate bus clock source may cause a minor loss of traffic, the attribute is set to disabled by default. If set to enabled, a bus clock source test is automatically executed. If the status of the corresponding Shelf Bus clockSourceStatus is changed after the test, an alarm is issued if the status is one of the following: ok, failed, or unknown. If set to disabled, no bus clock source test is automatically executed. However, a test can be executed by the RUN command. If the status is changed after the test, an alarm is issued if the status is one of the following: ok, or failed.")
mscShelfTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 4, 11), )
if mibBuilder.loadTexts: mscShelfTestSetupTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfTestSetupTable.setDescription('This attribute group contains the attributes that govern the operation of a shelf test.')
mscShelfTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfTestIndex"))
if mibBuilder.loadTexts: mscShelfTestSetupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfTestSetupEntry.setDescription('An entry in the mscShelfTestSetupTable.')
mscShelfTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("busClock", 0))).clone('busClock')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscShelfTestType.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfTestType.setDescription('type The attribute determines the test to be executed when the RUN command is applied to the component. Note that running a busClock test may cause a minor loss of traffic.')
mscShelfTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 4, 12), )
if mibBuilder.loadTexts: mscShelfTestResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfTestResultsTable.setDescription('This attribute group contains the results of the Shelf Test that is currently running; if no test is running, the attribute group contains the results of the most recently completed Shelf Test. The attributes of the Results group are reset to their initial values whenever a corresponding Shelf Test is run or the corresponding attribute of the Setup group is set.')
mscShelfTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 4, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseShelfMIB", "mscShelfIndex"), (0, "Nortel-MsCarrier-MscPassport-BusMIB", "mscShelfTestIndex"))
if mibBuilder.loadTexts: mscShelfTestResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfTestResultsEntry.setDescription('An entry in the mscShelfTestResultsTable.')
mscShelfTestBusClockTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 13, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noTest", 0), ("fail", 1), ("pass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscShelfTestBusClockTestResult.setStatus('mandatory')
if mibBuilder.loadTexts: mscShelfTestBusClockTestResult.setDescription('busClockTestResult This attribute records the result of the bus clock manual test. The result can be one of the following values. pass : the test passed fail : the test failed noTest : the test was not executed when RUN command is issued, because the shelf was in single bus mode.')
busGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 144, 1))
busGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 144, 1, 1))
busGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 144, 1, 1, 3))
busGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 144, 1, 1, 3, 2))
busCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 144, 3))
busCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 144, 3, 1))
busCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 144, 3, 1, 3))
busCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 144, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-BusMIB", mscShelfCardBusTapCardsTxTo=mscShelfCardBusTapCardsTxTo, mscShelfTest=mscShelfTest, mscShelfCardBusTapStateTable=mscShelfCardBusTapStateTable, mscShelfCardBusTapStateEntry=mscShelfCardBusTapStateEntry, mscShelfBusOperationalState=mscShelfBusOperationalState, mscShelfBusRowStatusTable=mscShelfBusRowStatusTable, mscShelfBusTestPingFailuresValue=mscShelfBusTestPingFailuresValue, busGroupCA02=busGroupCA02, mscShelfBusTestClockSourceTestResultsEntry=mscShelfBusTestClockSourceTestResultsEntry, mscShelfCardBusTapIndex=mscShelfCardBusTapIndex, mscShelfBusTestStateEntry=mscShelfBusTestStateEntry, mscShelfCardBusTapOperationalState=mscShelfCardBusTapOperationalState, mscShelfBusTestUsageState=mscShelfBusTestUsageState, mscShelfCardBusTapUnknownStatus=mscShelfCardBusTapUnknownStatus, mscShelfBusTestPingFailuresRxCardIndex=mscShelfBusTestPingFailuresRxCardIndex, mscShelfBusTestPingFailuresEntry=mscShelfBusTestPingFailuresEntry, mscShelfTestRowStatus=mscShelfTestRowStatus, mscShelfBusUnknownStatus=mscShelfBusUnknownStatus, mscShelfBusClockSourceStatusValue=mscShelfBusClockSourceStatusValue, mscShelfBusTestRowStatus=mscShelfBusTestRowStatus, mscShelfCardBusTapErrorsTable=mscShelfCardBusTapErrorsTable, mscShelfBusTestPingFailuresTable=mscShelfBusTestPingFailuresTable, busCapabilitiesCA02A=busCapabilitiesCA02A, busGroupCA=busGroupCA, mscShelfCardBusTapProceduralStatus=mscShelfCardBusTapProceduralStatus, mscShelfBusBusTapStatusValue=mscShelfBusBusTapStatusValue, mscShelfTestBusClockTestResult=mscShelfTestBusClockTestResult, mscShelfBusTestSetupTable=mscShelfBusTestSetupTable, mscShelfBusTestClockSourceTestResultsValue=mscShelfBusTestClockSourceTestResultsValue, mscShelfBusTestOperationalState=mscShelfBusTestOperationalState, mscShelfBusTestPingTestsEntry=mscShelfBusTestPingTestsEntry, mscShelfBusTestSelfTestResultsTable=mscShelfBusTestSelfTestResultsTable, mscShelfBusClockSourceStatusIndex=mscShelfBusClockSourceStatusIndex, mscShelfBusTestBroadcastTestResultsEntry=mscShelfBusTestBroadcastTestResultsEntry, mscShelfBusTestClockSourceTestResultsCardIndex=mscShelfBusTestClockSourceTestResultsCardIndex, mscShelfBusTestBroadcastTestResultsTxCardIndex=mscShelfBusTestBroadcastTestResultsTxCardIndex, mscShelfBusTestSelfTestResultsValue=mscShelfBusTestSelfTestResultsValue, mscShelfCardBusTapRowStatusEntry=mscShelfCardBusTapRowStatusEntry, mscShelfCardBusTapParityErrors=mscShelfCardBusTapParityErrors, mscShelfCardBusTapControlStatus=mscShelfCardBusTapControlStatus, mscShelfBusTestClockSourceTestResultsTable=mscShelfBusTestClockSourceTestResultsTable, mscShelfBusTestPingTestsRxCardIndex=mscShelfBusTestPingTestsRxCardIndex, mscShelfCardBusTapEndOfCellErrors=mscShelfCardBusTapEndOfCellErrors, mscShelfBusTestPingTestsValue=mscShelfBusTestPingTestsValue, mscShelfBusClockSourceStatusTable=mscShelfBusClockSourceStatusTable, mscShelfCardBusTapOperTable=mscShelfCardBusTapOperTable, mscShelfBusAdminState=mscShelfBusAdminState, busGroupCA02A=busGroupCA02A, mscShelfBusTestPingFailuresTxCardIndex=mscShelfBusTestPingFailuresTxCardIndex, mscShelfTestRowStatusEntry=mscShelfTestRowStatusEntry, mscShelfBusTestBroadcastTestResultsValue=mscShelfBusTestBroadcastTestResultsValue, mscShelfBusTestPingTestsTable=mscShelfBusTestPingTestsTable, mscShelfTestProvEntry=mscShelfTestProvEntry, mscShelfBusRowStatus=mscShelfBusRowStatus, mscShelfCardBusTapAlarmStatus=mscShelfCardBusTapAlarmStatus, mscShelfCardBusTapFailuresInEffect=mscShelfCardBusTapFailuresInEffect, mscShelfBusBusTapStatusEntry=mscShelfBusBusTapStatusEntry, mscShelfBusTestSelfTestResultsEntry=mscShelfBusTestSelfTestResultsEntry, mscShelfBusTestSelfTestResultsIndex=mscShelfBusTestSelfTestResultsIndex, mscShelfBusStorageType=mscShelfBusStorageType, mscShelfCardBusTapStorageType=mscShelfCardBusTapStorageType, mscShelfBusTestRowStatusTable=mscShelfBusTestRowStatusTable, mscShelfBusTestComponentName=mscShelfBusTestComponentName, mscShelfCardBusTapComponentName=mscShelfCardBusTapComponentName, mscShelfBusUsageState=mscShelfBusUsageState, mscShelfBusOperTable=mscShelfBusOperTable, mscShelfBusTestResultsTable=mscShelfBusTestResultsTable, mscShelfTestResultsTable=mscShelfTestResultsTable, mscShelfTestAutomaticBusClockTest=mscShelfTestAutomaticBusClockTest, busCapabilitiesCA02=busCapabilitiesCA02, mscShelfBusTestTestsDone=mscShelfBusTestTestsDone, mscShelfCardBusTapRowStatusTable=mscShelfCardBusTapRowStatusTable, mscShelfCardBusTapAvailabilityStatus=mscShelfCardBusTapAvailabilityStatus, mscShelfBusOperEntry=mscShelfBusOperEntry, mscShelfCardBusTapStandbyStatus=mscShelfCardBusTapStandbyStatus, mscShelfCardBusTapCardsAvailable=mscShelfCardBusTapCardsAvailable, mscShelfBusTestBroadcastTestResultsRxCardIndex=mscShelfBusTestBroadcastTestResultsRxCardIndex, mscShelfBusRowStatusEntry=mscShelfBusRowStatusEntry, mscShelfCardBusTapSelfTestErrorCode=mscShelfCardBusTapSelfTestErrorCode, mscShelfTestSetupEntry=mscShelfTestSetupEntry, mscShelfBusTestElapsedTime=mscShelfBusTestElapsedTime, mscShelfCardBusTapClockErrors=mscShelfCardBusTapClockErrors, mscShelfBusTestClockSourceTestResultsSourceIndex=mscShelfBusTestClockSourceTestResultsSourceIndex, mscShelfCardBusTapDependenciesInEffect=mscShelfCardBusTapDependenciesInEffect, mscShelfTestSetupTable=mscShelfTestSetupTable, mscShelfCardBusTapFrmTimeoutErrors=mscShelfCardBusTapFrmTimeoutErrors, mscShelfBusUtilization=mscShelfBusUtilization, mscShelfCardBusTapFrmCollisionErrors=mscShelfCardBusTapFrmCollisionErrors, mscShelfBusTestTimeRemaining=mscShelfBusTestTimeRemaining, mscShelfCardBusTapFrmDeliveryErrors=mscShelfCardBusTapFrmDeliveryErrors, mscShelfCardBusTapAdminState=mscShelfCardBusTapAdminState, mscShelfBusBusTapStatusIndex=mscShelfBusBusTapStatusIndex, mscShelfBusTestAdminState=mscShelfBusTestAdminState, mscShelfBusTestCauseOfTermination=mscShelfBusTestCauseOfTermination, mscShelfTestRowStatusTable=mscShelfTestRowStatusTable, mscShelfBusClockSourceStatusEntry=mscShelfBusClockSourceStatusEntry, mscShelfTestComponentName=mscShelfTestComponentName, busGroup=busGroup, mscShelfBusComponentName=mscShelfBusComponentName, mscShelfBusIndex=mscShelfBusIndex, mscShelfTestResultsEntry=mscShelfTestResultsEntry, mscShelfBusStateTable=mscShelfBusStateTable, busCapabilities=busCapabilities, mscShelfBusProceduralStatus=mscShelfBusProceduralStatus, mscShelfTestIndex=mscShelfTestIndex, mscShelfBusTest=mscShelfBusTest, mscShelfBusControlStatus=mscShelfBusControlStatus, mscShelfBusTestBroadcastTestResultsTable=mscShelfBusTestBroadcastTestResultsTable, mscShelfTestStorageType=mscShelfTestStorageType, mscShelfBusTestStateTable=mscShelfBusTestStateTable, mscShelfCardBusTapFrmCongestionErrors=mscShelfCardBusTapFrmCongestionErrors, mscShelfCardBusTap=mscShelfCardBusTap, mscShelfCardBusTapOperEntry=mscShelfCardBusTapOperEntry, mscShelfBusTestResultsEntry=mscShelfBusTestResultsEntry, mscShelfCardBusTapErrorsEntry=mscShelfCardBusTapErrorsEntry, mscShelfTestProvTable=mscShelfTestProvTable, mscShelfBusStateEntry=mscShelfBusStateEntry, mscShelfBusClockSource=mscShelfBusClockSource, mscShelfBus=mscShelfBus, mscShelfBusTestRowStatusEntry=mscShelfBusTestRowStatusEntry, mscShelfBusTestStorageType=mscShelfBusTestStorageType, busMIB=busMIB, mscShelfBusTestIndex=mscShelfBusTestIndex, mscShelfTestType=mscShelfTestType, mscShelfBusAlarmStatus=mscShelfBusAlarmStatus, busCapabilitiesCA=busCapabilitiesCA, mscShelfBusBusTapStatusTable=mscShelfBusBusTapStatusTable, mscShelfBusTestSetupEntry=mscShelfBusTestSetupEntry, mscShelfBusStandbyStatus=mscShelfBusStandbyStatus, mscShelfCardBusTapUsageState=mscShelfCardBusTapUsageState, mscShelfBusTestPingTestsTxCardIndex=mscShelfBusTestPingTestsTxCardIndex, mscShelfBusAvailabilityStatus=mscShelfBusAvailabilityStatus, mscShelfBusTestDuration=mscShelfBusTestDuration, mscShelfCardBusTapRowStatus=mscShelfCardBusTapRowStatus, mscShelfCardBusTapFrmSizeErrors=mscShelfCardBusTapFrmSizeErrors)
