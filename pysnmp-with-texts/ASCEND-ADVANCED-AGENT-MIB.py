#
# PySNMP MIB module ASCEND-ADVANCED-AGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-ADVANCED-AGENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:26:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
advancedAgent, DisplayString = mibBuilder.importSymbols("ASCEND-MIB", "advancedAgent", "DisplayString")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, Unsigned32, Integer32, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Counter64, MibIdentifier, Counter32, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "Unsigned32", "Integer32", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Counter64", "MibIdentifier", "Counter32", "Gauge32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wanUseTrunkGroups = MibScalar((1, 3, 6, 1, 4, 1, 529, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-use", 1), ("use", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanUseTrunkGroups.setStatus('mandatory')
if mibBuilder.loadTexts: wanUseTrunkGroups.setDescription('System wide parameter dictating the use of trunk groups.')
wanLineTable = MibTable((1, 3, 6, 1, 4, 1, 529, 4, 21), )
if mibBuilder.loadTexts: wanLineTable.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineTable.setDescription('The wan line table.')
wanLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 4, 21, 1), ).setIndexNames((0, "ASCEND-ADVANCED-AGENT-MIB", "wanLineIfIndex"))
if mibBuilder.loadTexts: wanLineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineEntry.setDescription('An entry in the wan line table.')
wanLineIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineIfIndex.setDescription('This value for this object is equal to the value of ifIndex from the Interfaces table of MIB II (RFC 1213).')
wanLineName = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineName.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineName.setDescription('A textual name of the wanLine as assigned through the menu sytem.')
wanLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineType.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineType.setDescription("One of 'wanTypes'.")
wanLineChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineChannels.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannels.setDescription('The number of ds0 channels supported.')
wanLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ls-unknown", 1), ("ls-does-not-exist", 2), ("ls-disabled", 3), ("ls-no-physical", 4), ("ls-no-logical", 5), ("ls-point-to-point", 6), ("ls-multipoint-1", 7), ("ls-multipoint-2", 8), ("ls-loss-of-sync", 9), ("ls-yellow-alarm", 10), ("ls-ais-receive", 11), ("ls-no-d-channel", 12), ("ls-active", 13), ("ls-maintenance", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineState.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineState.setDescription('The state of the line.')
wanLineStateString = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineStateString.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineStateString.setDescription('A textual representation of the wanLineState as displayed by the menu sytem.')
wanLineActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineActiveChannels.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineActiveChannels.setDescription('The number of switched DS0 channels of the line. This variable counts the number of wanLineChannels on an enabled line with the wanLineChannelUsage of ds0-switched-channel(3) and with any following wanLineChannelState bs-clear-pending(8), bs-dialing(9), bs-ringing(10),and bs-connected(11) for all the entries in its wanLineChannelEntry table.')
wanLineUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("lu-unknown", 1), ("lu-unavailable", 2), ("lu-disabled", 3), ("lu-enabled", 4), ("lu-trunk", 5), ("lu-quiesced", 6), ("lu-drop-and-insert", 7), ("lu-t-online-user", 8), ("lu-t-online-zgr", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanLineUsage.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineUsage.setDescription('The usage of the line. SETting values are supported only for T1/E1 links. Only lu-disabled(3), lu-trunk(5), and lu-quiesced(6) for T1/PRI are currently supported for SETs.')
wanLineHuntGrpPhoneNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanLineHuntGrpPhoneNumber1.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineHuntGrpPhoneNumber1.setDescription('The hunt group phone number associated with the line. This entry is manually entered in the line configurations options.')
wanLineHuntGrpPhoneNumber2 = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanLineHuntGrpPhoneNumber2.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineHuntGrpPhoneNumber2.setDescription('The hunt group phone number associated with the line. This entry is manually entered in the line configurations options.')
wanLineHuntGrpPhoneNumber3 = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanLineHuntGrpPhoneNumber3.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineHuntGrpPhoneNumber3.setDescription('The hunt group phone number associated with the line. This entry is manually entered in the line configurations options.')
wanLineAvailableChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineAvailableChannels.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineAvailableChannels.setDescription('The number of DS0 channels of the line configured as Switched and available for making or accepting calls. This variable counts the number of wanLineChannels with the wanLineChannelState of bs-idle(7) for all the entries in its wanLineChannelEntry table.')
wanLineSwitchedChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineSwitchedChannels.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineSwitchedChannels.setDescription('The number of DS0 channels of the line configured as switched. This variable counts the number of wanLineChannels on an enabled line with the wanLineChannelUsage of ds0-switched-channel(3) and with wanLineChannelState not bs-disabled(18) for all the entries in its wanLineChannelEntry table.')
wanLineDisabledChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineDisabledChannels.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineDisabledChannels.setDescription('The number of disabled DS0 channels of the line. This variable counts the number of wanLineChannels with the wanLineChannelState of bs-disabled(18) and with any wanLineChannelUsage for all the entries in its wanLineChannelEntry table.')
wanLineNailedChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineNailedChannels.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineNailedChannels.setDescription('The number of DS0 channels of the line configured as nailed. This variable counts the number of wanLineChannels on an enabled line with the wanLineChannelUsage of ds0-clear-64(5) and with wanLineChannelState not bs-disabled(18) for all the entries in its wanLineChannelEntry table.')
wanLineOutOfServiceChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineOutOfServiceChannels.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineOutOfServiceChannels.setDescription('The number of out-of-service DS0 channels of the line. This variable counts the number of wanLineChannels on an enabled line with the wanLineChannelUsage of ds0-switched-channel and wanLineChannelState of bs-unavailable(2), bs-out-of-service(4), bs-maintenance(16) for all the entries in its wanLineChannelEntry table.')
wanLineNet2NetChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineNet2NetChannels.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineNet2NetChannels.setDescription('The number of NET2NET DS0 channels of the line. This variable counts the number of wanLineChannels on an enabled line with the wanLineChannelUsage of ds0-switched-channel and wanLineChannelState of bs-net2net-dialing, bs-net2net-ringing and bs-net2net-connected for all the entries in its wanLineChannelEntry table.')
wanLineDtptChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 21, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineDtptChannels.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineDtptChannels.setDescription('The number of DTPT DS0 channels of the line. This variable counts the number of wanLineChannels on an enabled line with the wanLineChannelUsage of ds0-switched-channel and wanLineChannelState of bs-dtpt-dialing, bs-dtpt-ringing and bs-dtpt-connected for all the entries in its wanLineChannelEntry table.')
wanLineChannelTable = MibTable((1, 3, 6, 1, 4, 1, 529, 4, 22), )
if mibBuilder.loadTexts: wanLineChannelTable.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannelTable.setDescription('The wan line table.')
wanLineChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 4, 22, 1), ).setIndexNames((0, "ASCEND-ADVANCED-AGENT-MIB", "wanLineChannelIfIndex"), (0, "ASCEND-ADVANCED-AGENT-MIB", "wanLineChannelIndex"))
if mibBuilder.loadTexts: wanLineChannelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannelEntry.setDescription('An entry in the wan line table.')
wanLineChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineChannelIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannelIfIndex.setDescription('This value for this object is equal to the value of ifIndex from the Interfaces table of MIB II (RFC 1213).')
wanLineChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineChannelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannelIndex.setDescription('The ds0 channel number with the line.')
wanLineChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("bs-unknown", 1), ("bs-unavailable", 2), ("bs-unused", 3), ("bs-out-of-service", 4), ("bs-nailed-up", 5), ("bs-held", 6), ("bs-idle", 7), ("bs-clear-pending", 8), ("bs-dialing", 9), ("bs-ringing", 10), ("bs-connected", 11), ("bs-signaling", 12), ("bs-cut-through", 13), ("bs-current-d", 14), ("bs-backup-d", 15), ("bs-maintenance", 16), ("bs-spc-up", 17), ("bs-disabled", 18), ("bs-dialing-net2net", 19), ("bs-ringing-net2net", 20), ("bs-connected-net2net", 21), ("bs-dialing-dtpt", 22), ("bs-ringing-dtpt", 23), ("bs-connected-dtpt", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineChannelState.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannelState.setDescription('The state of the ds0 channel.')
wanLineChannelStateString = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 22, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineChannelStateString.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannelStateString.setDescription('A textual representation of the wanLineChannelState as displayed by the menu sytem.')
wanLineChannelErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineChannelErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannelErrorCount.setDescription('The error count encountered on the channel.')
wanLineChannelUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ds0-unknown-channel", 1), ("ds0-unused-channel", 2), ("ds0-switched-channel", 3), ("ds0-cut-through", 4), ("ds0-clear-64", 5), ("ds0-pri-d-channel", 6), ("ds0-nfas-prime-d", 7), ("ds0-nfas-sec-d", 8), ("ds0-cas-channel", 9), ("ds0-spc-channel", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineChannelUsage.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannelUsage.setDescription('The usage for this ds0 channel.')
wanLineChannelTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 22, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineChannelTrunkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannelTrunkGroup.setDescription('The trunk group assigned to this channel. Note: This attribute returns 0 if wanUseTrunkGroup is set to do-not-use(1).')
wanLineChannelPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 22, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineChannelPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannelPhoneNumber.setDescription('The phone number of this channel. This is the number sent to the far end in an inverse multiplexed call when instructing the far end to add more bandwidth. The number should contain the minimum number of digits to identify the channel. If the channel is part of a hunt group, the phone number should be blank.')
wanLineChannelSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 22, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineChannelSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannelSlot.setDescription('A slot number for routing incoming calls associated with the channel. A slot-port number zero means calls arriving on this channel can be routed to any port.')
wanLineChannelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 22, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineChannelPort.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannelPort.setDescription('A port number for routing incoming calls associated with the channel. A slot-port number zero means calls arriving on this channel can be routed to any port.')
wanLineChannelNailedState = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 22, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-applicable", 1), ("nailed-held", 2), ("nailed-active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineChannelNailedState.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannelNailedState.setDescription('The nailed group associated with the channel.')
wanAvailableChannels = MibScalar((1, 3, 6, 1, 4, 1, 529, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanAvailableChannels.setStatus('mandatory')
if mibBuilder.loadTexts: wanAvailableChannels.setDescription('The sum of wanLineAvailableChannels for all lines.')
wanSwitchedChannels = MibScalar((1, 3, 6, 1, 4, 1, 529, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanSwitchedChannels.setStatus('mandatory')
if mibBuilder.loadTexts: wanSwitchedChannels.setDescription('The sum of wanLineSwitchedChannels for all lines.')
wanDisabledChannels = MibScalar((1, 3, 6, 1, 4, 1, 529, 4, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanDisabledChannels.setStatus('mandatory')
if mibBuilder.loadTexts: wanDisabledChannels.setDescription('The sum of wanLineDisabledChannels for all lines.')
wanActiveChannels = MibScalar((1, 3, 6, 1, 4, 1, 529, 4, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanActiveChannels.setStatus('mandatory')
if mibBuilder.loadTexts: wanActiveChannels.setDescription('The sum of wanLineActiveChannels for all lines.')
wanNailedChannels = MibScalar((1, 3, 6, 1, 4, 1, 529, 4, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanNailedChannels.setStatus('mandatory')
if mibBuilder.loadTexts: wanNailedChannels.setDescription('The sum of wanLineNailedChannels for all lines.')
wanOutOfServiceChannels = MibScalar((1, 3, 6, 1, 4, 1, 529, 4, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanOutOfServiceChannels.setStatus('mandatory')
if mibBuilder.loadTexts: wanOutOfServiceChannels.setDescription('The sum of wanLineOutOfChannels for all lines.')
wanLineChannelUsageTable = MibTable((1, 3, 6, 1, 4, 1, 529, 4, 29), )
if mibBuilder.loadTexts: wanLineChannelUsageTable.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannelUsageTable.setDescription('Table of channel state summaries per line type.')
wanLineChannelUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 4, 29, 1), ).setIndexNames((0, "ASCEND-ADVANCED-AGENT-MIB", "wanLineUsage"), (0, "ASCEND-ADVANCED-AGENT-MIB", "wanLineChannelState"))
if mibBuilder.loadTexts: wanLineChannelUsageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannelUsageEntry.setDescription('An entry in the channel state summary table for the given wanLineUsage and wanLineChannelState.')
wanLineChannelUsageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanLineChannelUsageCount.setStatus('mandatory')
if mibBuilder.loadTexts: wanLineChannelUsageCount.setDescription('The count of channels in the selected wanLineChannelState for the selected wanLineUsage.')
mibBuilder.exportSymbols("ASCEND-ADVANCED-AGENT-MIB", wanLineHuntGrpPhoneNumber1=wanLineHuntGrpPhoneNumber1, wanAvailableChannels=wanAvailableChannels, wanLineChannelUsageEntry=wanLineChannelUsageEntry, wanLineChannelErrorCount=wanLineChannelErrorCount, wanLineChannels=wanLineChannels, wanLineOutOfServiceChannels=wanLineOutOfServiceChannels, wanLineHuntGrpPhoneNumber2=wanLineHuntGrpPhoneNumber2, wanLineChannelUsageCount=wanLineChannelUsageCount, wanLineDisabledChannels=wanLineDisabledChannels, wanLineChannelTable=wanLineChannelTable, wanLineHuntGrpPhoneNumber3=wanLineHuntGrpPhoneNumber3, wanLineChannelUsage=wanLineChannelUsage, wanLineChannelSlot=wanLineChannelSlot, wanLineAvailableChannels=wanLineAvailableChannels, wanLineChannelIndex=wanLineChannelIndex, wanLineNailedChannels=wanLineNailedChannels, wanActiveChannels=wanActiveChannels, wanLineChannelState=wanLineChannelState, wanLineChannelIfIndex=wanLineChannelIfIndex, wanDisabledChannels=wanDisabledChannels, wanLineChannelStateString=wanLineChannelStateString, wanLineEntry=wanLineEntry, wanLineIfIndex=wanLineIfIndex, wanLineState=wanLineState, wanLineChannelEntry=wanLineChannelEntry, wanLineStateString=wanLineStateString, wanLineSwitchedChannels=wanLineSwitchedChannels, wanNailedChannels=wanNailedChannels, wanLineChannelPort=wanLineChannelPort, wanLineTable=wanLineTable, wanOutOfServiceChannels=wanOutOfServiceChannels, wanLineActiveChannels=wanLineActiveChannels, wanLineChannelTrunkGroup=wanLineChannelTrunkGroup, wanLineChannelNailedState=wanLineChannelNailedState, wanUseTrunkGroups=wanUseTrunkGroups, wanLineChannelUsageTable=wanLineChannelUsageTable, wanLineNet2NetChannels=wanLineNet2NetChannels, wanLineChannelPhoneNumber=wanLineChannelPhoneNumber, wanLineName=wanLineName, wanLineUsage=wanLineUsage, wanLineDtptChannels=wanLineDtptChannels, wanSwitchedChannels=wanSwitchedChannels, wanLineType=wanLineType)
