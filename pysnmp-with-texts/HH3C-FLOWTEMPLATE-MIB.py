#
# PySNMP MIB module HH3C-FLOWTEMPLATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-FLOWTEMPLATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:27:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Unsigned32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity, ModuleIdentity, Integer32, TimeTicks, iso, Gauge32, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity", "ModuleIdentity", "Integer32", "TimeTicks", "iso", "Gauge32", "Bits", "NotificationType")
TextualConvention, MacAddress, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "RowStatus", "DisplayString")
hh3cFlowTemplate = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 64))
if mibBuilder.loadTexts: hh3cFlowTemplate.setLastUpdated('200511241320Z')
if mibBuilder.loadTexts: hh3cFlowTemplate.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cFlowTemplate.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cFlowTemplate.setDescription('H3C flow template management information base.')
hh3cFlowTemplateMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1))
hh3cFTConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1))
hh3cFTGroupNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFTGroupNextIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cFTGroupNextIndex.setDescription("This object contains an appropriate value to be used for hh3cFTGroupIndex when creating rows in the hh3cFTGroupTable. If it is 2147483647, it denotes that hh3cFTGroupTable can't create any instance. ")
hh3cFTGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 2), )
if mibBuilder.loadTexts: hh3cFTGroupTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFTGroupTable.setDescription("A table of flow template group. A flow template group, which is applied to interface, must use hh3cFTGroupTable to create a instance and hh3cFTBasicGroupTable or hh3cFTExtendGroupTable to configure flow template's need item. A basic flow template must use hh3cFTBasicGroupTable to configure some basic flow template's need item, such as: address, protocol, priority. A extend flow template must use hh3cFTExtendGroupTable to configure packet's type and offset and length. ")
hh3cFTGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 2, 1), ).setIndexNames((0, "HH3C-FLOWTEMPLATE-MIB", "hh3cFTGroupIndex"))
if mibBuilder.loadTexts: hh3cFTGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFTGroupEntry.setDescription('Flow template group information.')
hh3cFTGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cFTGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cFTGroupIndex.setDescription('Flow template group index.')
hh3cFTGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFTGroupName.setStatus('current')
if mibBuilder.loadTexts: hh3cFTGroupName.setDescription('Flow template group name.')
hh3cFTGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("extend", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFTGroupType.setStatus('current')
if mibBuilder.loadTexts: hh3cFTGroupType.setDescription('Type of flow template.')
hh3cFTGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFTGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cFTGroupRowStatus.setDescription('RowStatus.')
hh3cFTBasicGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 3), )
if mibBuilder.loadTexts: hh3cFTBasicGroupTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFTBasicGroupTable.setDescription('A table of basic flow template group.')
hh3cFTBasicGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 3, 1), ).setIndexNames((0, "HH3C-FLOWTEMPLATE-MIB", "hh3cFTGroupIndex"))
if mibBuilder.loadTexts: hh3cFTBasicGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFTBasicGroupEntry.setDescription('Basic flow template group information.')
hh3cFTBasicGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 3, 1, 1), Bits().clone(namedValues=NamedValues(("sourceIpv4Address", 0), ("destIPv4Address", 1), ("sourceIPv6Address", 2), ("destIPv6Address", 3), ("sourceMacAddress", 4), ("destMacAddress", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFTBasicGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: hh3cFTBasicGroupAddressType.setDescription("Type of MAC and IP address. This is a bit-map of possible conditions. The various bit positions are: sourceIpv4Address source IPv4's address destIPv4Address destination IPv4's address sourceIPv6Address source IPv6 address destIPv6Address destination IPv6 address sourceMacAddress source MAC address destMacAddress destination MAC address ")
hh3cFTBasicGroupPriorityType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 3, 1, 2), Bits().clone(namedValues=NamedValues(("vlanID", 0), ("cos", 1), ("topVlanID", 2), ("topCos", 3), ("fragment", 4), ("tcpFlag", 5), ("tos", 6), ("dscp", 7), ("ipprecedence", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFTBasicGroupPriorityType.setStatus('current')
if mibBuilder.loadTexts: hh3cFTBasicGroupPriorityType.setDescription('Type of priority. This is a bit-map of possible conditions. The various bit positions are: vlanID VlanID cos 802.1p priority topVlanID VlanID of top layer topCos 802.1p priority of top layer fragment fragment tcpFlag TCP flag tos type of service dscp DSCP ipprecedence IP precedence ')
hh3cFTBasicGroupProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 3, 1, 3), Bits().clone(namedValues=NamedValues(("l2Potocol", 0), ("ipv4L3Protocol", 1), ("ipv6L3Protocol", 2), ("icmpProtocolType", 3), ("icmpProtocolCode", 4), ("icmpv6ProtocolType", 5), ("icmpv6ProtocolCode", 6), ("sourceL4Port", 7), ("destL4Port", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFTBasicGroupProtocolType.setStatus('current')
if mibBuilder.loadTexts: hh3cFTBasicGroupProtocolType.setDescription('Type of protocol. This is a bit-map of possible conditions. The various bit positions are: l2Potocol layer 2 protocol ipv4L3Protocol layer 3 protocol of IPv4 ipv6L3Protocol layer 3 protocol of IPv6 icmpProtocolType Type of ICMP protocol of IPv4 icmpProtocolCode Code of ICMP protocol of IPv4 icmpv6ProtocolType Type of ICMP protocol of IPv6 icmpv6ProtocolCode Code of ICMP protocol of IPv6 sourceL4Port port of layer 4 of source destL4Port port of layer 4 of destination ')
hh3cFTBasicGroupSMacWildCard = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 3, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFTBasicGroupSMacWildCard.setStatus('current')
if mibBuilder.loadTexts: hh3cFTBasicGroupSMacWildCard.setDescription('Source MAC address field in Ethernet packet head.')
hh3cFTBasicGroupDMacWildCard = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 3, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFTBasicGroupDMacWildCard.setStatus('current')
if mibBuilder.loadTexts: hh3cFTBasicGroupDMacWildCard.setDescription('Destination MAC address field in Ethernet packet head.')
hh3cFTBasicGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFTBasicGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cFTBasicGroupRowStatus.setDescription('RowStatus.')
hh3cFTExtendGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 4), )
if mibBuilder.loadTexts: hh3cFTExtendGroupTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFTExtendGroupTable.setDescription('A table of extend flow template group information.')
hh3cFTExtendGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 4, 1), ).setIndexNames((0, "HH3C-FLOWTEMPLATE-MIB", "hh3cFTGroupIndex"), (0, "HH3C-FLOWTEMPLATE-MIB", "hh3cFTExtendGroupOffsetType"))
if mibBuilder.loadTexts: hh3cFTExtendGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFTExtendGroupEntry.setDescription('Extend flow template group information entry.')
hh3cFTExtendGroupOffsetType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("start", 1), ("mpls", 2), ("l2", 3), ("l4", 4), ("l5", 5), ("ipv4", 6), ("ipv6", 7))))
if mibBuilder.loadTexts: hh3cFTExtendGroupOffsetType.setStatus('current')
if mibBuilder.loadTexts: hh3cFTExtendGroupOffsetType.setDescription('Offset type of the packet. start Offset from the start of the packet mpls Offset from the head of MPLS l2 Offset from the head of the L2 frame l4 Offset from the head of L4 packet l5 Offset from the head of the L5 packet ipv4 Offset from the head of the IPv4 packet ipv6 Offset from the head of the IPv6 packet ')
hh3cFTExtendGroupOffsetMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFTExtendGroupOffsetMaxValue.setStatus('current')
if mibBuilder.loadTexts: hh3cFTExtendGroupOffsetMaxValue.setDescription('The max value of offset.')
hh3cFTExtendGroupLengthMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFTExtendGroupLengthMaxValue.setStatus('current')
if mibBuilder.loadTexts: hh3cFTExtendGroupLengthMaxValue.setDescription('The max value of length.')
hh3cFTExtendGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFTExtendGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cFTExtendGroupRowStatus.setDescription('RowStatus.')
hh3cFTApplyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 2))
hh3cFTIfApplyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 2, 1), )
if mibBuilder.loadTexts: hh3cFTIfApplyTable.setStatus('current')
if mibBuilder.loadTexts: hh3cFTIfApplyTable.setDescription("A table of any interface with flowtemplate. A flow template, which will be applied interface, is an instance at hh3cFTGroupTable and hh3cFTBasicGroupTable or hh3cFTExtendGroupTable. A basic flow template is an instance at hh3cFTGroupTable and hh3cFTBasicGroupTable, and the instance's RowStatus must be 'active' at each table. A extend flow template is an instance at hh3cFTGroupTable and hh3cFTExtendGroupTable, and the instance's RowStatus must be 'active' at each table. ")
hh3cFTIfApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-FLOWTEMPLATE-MIB", "hh3cFTGroupIndex"))
if mibBuilder.loadTexts: hh3cFTIfApplyEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cFTIfApplyEntry.setDescription('Any interface with flowtemplate information.')
hh3cFTIfApplyGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFTIfApplyGroupName.setStatus('current')
if mibBuilder.loadTexts: hh3cFTIfApplyGroupName.setDescription('The name of flow template.')
hh3cFTIfApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 64, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFTIfApplyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cFTIfApplyRowStatus.setDescription('RowStatus.')
mibBuilder.exportSymbols("HH3C-FLOWTEMPLATE-MIB", hh3cFTGroupTable=hh3cFTGroupTable, hh3cFTBasicGroupTable=hh3cFTBasicGroupTable, hh3cFTGroupName=hh3cFTGroupName, hh3cFTIfApplyGroupName=hh3cFTIfApplyGroupName, hh3cFTGroupType=hh3cFTGroupType, hh3cFTExtendGroupOffsetType=hh3cFTExtendGroupOffsetType, hh3cFTExtendGroupTable=hh3cFTExtendGroupTable, hh3cFTIfApplyTable=hh3cFTIfApplyTable, hh3cFTGroupIndex=hh3cFTGroupIndex, hh3cFTGroupRowStatus=hh3cFTGroupRowStatus, hh3cFTBasicGroupProtocolType=hh3cFTBasicGroupProtocolType, hh3cFTGroupNextIndex=hh3cFTGroupNextIndex, hh3cFTBasicGroupSMacWildCard=hh3cFTBasicGroupSMacWildCard, hh3cFTExtendGroupOffsetMaxValue=hh3cFTExtendGroupOffsetMaxValue, hh3cFTBasicGroupRowStatus=hh3cFTBasicGroupRowStatus, hh3cFTExtendGroupEntry=hh3cFTExtendGroupEntry, hh3cFTBasicGroupDMacWildCard=hh3cFTBasicGroupDMacWildCard, hh3cFTIfApplyRowStatus=hh3cFTIfApplyRowStatus, hh3cFlowTemplateMibObject=hh3cFlowTemplateMibObject, PYSNMP_MODULE_ID=hh3cFlowTemplate, hh3cFTBasicGroupPriorityType=hh3cFTBasicGroupPriorityType, hh3cFTGroupEntry=hh3cFTGroupEntry, hh3cFTApplyGroup=hh3cFTApplyGroup, hh3cFTExtendGroupRowStatus=hh3cFTExtendGroupRowStatus, hh3cFTBasicGroupEntry=hh3cFTBasicGroupEntry, hh3cFlowTemplate=hh3cFlowTemplate, hh3cFTConfigGroup=hh3cFTConfigGroup, hh3cFTIfApplyEntry=hh3cFTIfApplyEntry, hh3cFTExtendGroupLengthMaxValue=hh3cFTExtendGroupLengthMaxValue, hh3cFTBasicGroupAddressType=hh3cFTBasicGroupAddressType)
