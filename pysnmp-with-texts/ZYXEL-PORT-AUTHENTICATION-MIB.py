#
# PySNMP MIB module ZYXEL-PORT-AUTHENTICATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-PORT-AUTHENTICATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:51:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, IpAddress, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, MibIdentifier, iso, Counter64, Gauge32, TimeTicks, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "MibIdentifier", "iso", "Counter64", "Gauge32", "TimeTicks", "Counter32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelPortAuthentication = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 62))
if mibBuilder.loadTexts: zyxelPortAuthentication.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelPortAuthentication.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelPortAuthentication.setContactInfo('')
if mibBuilder.loadTexts: zyxelPortAuthentication.setDescription('The subtree for port authentication')
zyxelPortAuthenticationSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 62, 1))
zyPortAuthenticationState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 62, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortAuthenticationState.setStatus('current')
if mibBuilder.loadTexts: zyPortAuthenticationState.setDescription('Enable/Disable 802.1x port authentication for the switch.')
zyxelPortAuthenticationPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 62, 1, 2), )
if mibBuilder.loadTexts: zyxelPortAuthenticationPortTable.setStatus('current')
if mibBuilder.loadTexts: zyxelPortAuthenticationPortTable.setDescription('The table contains port authentication configuration')
zyxelPortAuthenticationPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 62, 1, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelPortAuthenticationPortEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelPortAuthenticationPortEntry.setDescription('An entry contains port authentication configuration.')
zyPortAuthenticationPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 62, 1, 2, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortAuthenticationPortState.setStatus('current')
if mibBuilder.loadTexts: zyPortAuthenticationPortState.setDescription('Enable/Disable 802.1x port authentication on the port. You must first allow 802.1x authentication on the Switch before configuring it on each port. ')
zyPortReAuthenticationPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 62, 1, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortReAuthenticationPortState.setStatus('current')
if mibBuilder.loadTexts: zyPortReAuthenticationPortState.setDescription('Enable/Disable 802.1x port re-authentication on the port. Specify if a subscriber has to periodically re-enter his or her username and password to stay connected to the port.')
zyPortReAuthenticationPortTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 62, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortReAuthenticationPortTimer.setStatus('current')
if mibBuilder.loadTexts: zyPortReAuthenticationPortTimer.setDescription('Specify the length of time required to pass before a client has to re-enter his or her username and password to stay connected to the port. ')
zyPortAuthenticationPortQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 62, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortAuthenticationPortQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: zyPortAuthenticationPortQuietPeriod.setDescription('Specify the number of seconds the port remains in the HELD state and rejects further authentication requests from the connected client after a failed authentication exchange. ')
zyPortAuthenticationPortTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 62, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortAuthenticationPortTxPeriod.setStatus('current')
if mibBuilder.loadTexts: zyPortAuthenticationPortTxPeriod.setDescription("Specify the number of seconds the Switch waits for client's response before re-sending an identity request to the client. ")
zyPortAuthenticationPortSupplicantTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 62, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortAuthenticationPortSupplicantTimeout.setStatus('current')
if mibBuilder.loadTexts: zyPortAuthenticationPortSupplicantTimeout.setDescription("Specify the number of seconds the Switch waits for client's response to a challenge request before sending another request. ")
zyPortAuthenticationPortMaxRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 62, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortAuthenticationPortMaxRequest.setStatus('current')
if mibBuilder.loadTexts: zyPortAuthenticationPortMaxRequest.setDescription('Specify the number of times the Switch tries to authenticate client(s) before sending unresponsive ports to the Guest VLAN. This is set to 2 by default. That is, the Switch attempts to authenticate a client twice. If the client does not respond to the first authentication request, the Switch tries again. If the client still does not respond to the second request, the Switch sends the client to the Guest VLAN. The client needs to send a new request to be authenticated by the Switch again. ')
zyPortAuthenticationPortGuestVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 62, 1, 2, 1, 8), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortAuthenticationPortGuestVlanState.setStatus('current')
if mibBuilder.loadTexts: zyPortAuthenticationPortGuestVlanState.setDescription('Enable/Disable Guest VLAN on the port. Clients that fail authentication are placed in the guest VLAN and can receive limited services. ')
zyPortAuthenticationPortGuestVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 62, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortAuthenticationPortGuestVlan.setStatus('current')
if mibBuilder.loadTexts: zyPortAuthenticationPortGuestVlan.setDescription('Enter the number that identifies the guest VLAN. Make sure this is a VLAN recognized in your network. A guest VLAN is a pre-configured VLAN on the Switch that allows non-authenticated users to access limited network resources through the Switch. You must also enable IEEE 802.1x authentication on the Switch and the associated ports. ')
zyPortAuthenticationPortGuestVlanHostMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 62, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("multiHost", 0), ("multiSecure", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortAuthenticationPortGuestVlanHostMode.setStatus('current')
if mibBuilder.loadTexts: zyPortAuthenticationPortGuestVlanHostMode.setDescription('Specify how the Switch authenticates users when more than one user connect to the port (using a hub). Select Multi-Host to authenticate only the first user that connects to this port. If the first user enters the correct credential, any other users are allowed to access the port without authentication. If the first user fails to enter the correct credential, they are all put in the guest VLAN. Once the first user who did authentication logs out or disconnects from the port, rest of the users are blocked until a user does the authentication process again. Select Multi-Secure to authenticate each user that connects to this port. ')
zyPortAuthenticationPortGuestVlanHostModeMultiSecureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 62, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortAuthenticationPortGuestVlanHostModeMultiSecureNumber.setStatus('current')
if mibBuilder.loadTexts: zyPortAuthenticationPortGuestVlanHostModeMultiSecureNumber.setDescription('If you set Host-mode to Multi-Secure, specify the maximum number of users that the Switch will authenticate on this port. ')
mibBuilder.exportSymbols("ZYXEL-PORT-AUTHENTICATION-MIB", zyPortReAuthenticationPortState=zyPortReAuthenticationPortState, zyPortAuthenticationPortTxPeriod=zyPortAuthenticationPortTxPeriod, zyPortAuthenticationPortGuestVlan=zyPortAuthenticationPortGuestVlan, zyPortAuthenticationPortGuestVlanHostMode=zyPortAuthenticationPortGuestVlanHostMode, PYSNMP_MODULE_ID=zyxelPortAuthentication, zyxelPortAuthenticationPortEntry=zyxelPortAuthenticationPortEntry, zyPortAuthenticationPortMaxRequest=zyPortAuthenticationPortMaxRequest, zyPortAuthenticationPortGuestVlanState=zyPortAuthenticationPortGuestVlanState, zyxelPortAuthenticationPortTable=zyxelPortAuthenticationPortTable, zyPortAuthenticationPortSupplicantTimeout=zyPortAuthenticationPortSupplicantTimeout, zyxelPortAuthenticationSetup=zyxelPortAuthenticationSetup, zyPortAuthenticationPortQuietPeriod=zyPortAuthenticationPortQuietPeriod, zyPortAuthenticationPortGuestVlanHostModeMultiSecureNumber=zyPortAuthenticationPortGuestVlanHostModeMultiSecureNumber, zyxelPortAuthentication=zyxelPortAuthentication, zyPortReAuthenticationPortTimer=zyPortReAuthenticationPortTimer, zyPortAuthenticationState=zyPortAuthenticationState, zyPortAuthenticationPortState=zyPortAuthenticationPortState)
