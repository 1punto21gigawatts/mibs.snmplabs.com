#
# PySNMP MIB module REDSTONE-HDLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REDSTONE-HDLC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:55:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
rsMgmt, = mibBuilder.importSymbols("REDSTONE-SMI", "rsMgmt")
RsNextIfIndex, = mibBuilder.importSymbols("REDSTONE-TC", "RsNextIfIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, Integer32, iso, ModuleIdentity, Bits, Counter64, MibIdentifier, NotificationType, Unsigned32, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Integer32", "iso", "ModuleIdentity", "Bits", "Counter64", "MibIdentifier", "NotificationType", "Unsigned32", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
rsHdlcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2773, 2, 9))
rsHdlcMIB.setRevisions(('1999-07-28 00:00', '1999-07-14 00:00', '1998-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsHdlcMIB.setRevisionsDescriptions(('Removed DEFVALs for rsHdlcIfMru and rsHdlcIfMtu. Defaults are chosen according to type of underlying interface.', 'Added rsHdlcIfDataPolarity and updated corresponding compliances.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: rsHdlcMIB.setLastUpdated('9907280000Z')
if mibBuilder.loadTexts: rsHdlcMIB.setOrganization('Redstone Communications, Inc.')
if mibBuilder.loadTexts: rsHdlcMIB.setContactInfo(' Redstone Communications, Inc. 5 Carlisle Road Westford MA 01886 USA Tel: +1-978-692-1999 Email: mib@redstonecom.com ')
if mibBuilder.loadTexts: rsHdlcMIB.setDescription('The HDLC MIB for the Redstone Communications Inc. enterprise.')
rsHdlcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 9, 1))
rsHdlcNextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 9, 1, 1), RsNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsHdlcNextIfIndex.setStatus('current')
if mibBuilder.loadTexts: rsHdlcNextIfIndex.setDescription('Coordinate ifIndex value allocation for entries in rsHdlcIfTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously. ')
rsHdlcIfTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 9, 1, 2), )
if mibBuilder.loadTexts: rsHdlcIfTable.setStatus('current')
if mibBuilder.loadTexts: rsHdlcIfTable.setDescription('This table contains entries for HDLC interfaces present in the system.')
rsHdlcIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 9, 1, 2, 1), ).setIndexNames((0, "REDSTONE-HDLC-MIB", "rsHdlcIfIndex"))
if mibBuilder.loadTexts: rsHdlcIfEntry.setStatus('current')
if mibBuilder.loadTexts: rsHdlcIfEntry.setDescription('Each entry describes the characteristics of an HDLC interface. Creating/deleting entries in this table causes corresponding entries for be created /deleted in ifTable/ifXTable/rsIfTable.')
rsHdlcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 9, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rsHdlcIfIndex.setStatus('current')
if mibBuilder.loadTexts: rsHdlcIfIndex.setDescription('The ifIndex of the HDLC interface. When creating entries in this table, suitable values for this object are determined by reading rsHdlcNextIfIndex.')
rsHdlcIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 9, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsHdlcIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: rsHdlcIfRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: rsHdlcIfRowStatus rsHdlcIfLowerIfIndex In addition, when creating an entry the following conditions must hold: A value for rsHdlcIfIndex must have been determined previously, by reading rsHdlcNextIfIndex. The interface identified by rsHdlcIfLowerIfIndex must exist. A corresponding entry in ifTable/ifXTable/rsIfTable is created/destroyed as a result of creating/destroying an entry in this table. ')
rsHdlcIfLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 9, 1, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsHdlcIfLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: rsHdlcIfLowerIfIndex.setDescription('The ifIndex of an interface over which this HDLC interface is to be layered. A value of zero indicates no layering. An implementation may choose to require that a nonzero value be configured at entry creation.')
rsHdlcIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 9, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65533))).setUnits('octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsHdlcIfMtu.setStatus('current')
if mibBuilder.loadTexts: rsHdlcIfMtu.setDescription('The Maximum Transmission Unit this interface is permitted to transmit. At creation, if a value for this object is not specified, a suitable default will be chosen for the type of lower interface on which this interface is stacked. This setting plus 2 bytes for HDLC address/control plus the length in bytes of the HDLC CRC cannot exceed 65535. The maximum value for this object reflects the largest possible value when no CRC is used; technology constraints of a particular implementation may further limit the upper bound value.')
rsHdlcIfMru = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 9, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65533))).setUnits('octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsHdlcIfMru.setStatus('current')
if mibBuilder.loadTexts: rsHdlcIfMru.setDescription('The Maximum Receive Unit this interface is permitted to receive. At creation, if a value for this object is not specified, a suitable default will be chosen for the type of lower interface on which this interface is stacked. This setting plus 2 bytes for HDLC address/control plus the length in bytes of the HDLC CRC cannot exceed 65535. The maximum value for this object reflects the largest possible value when no CRC is used; technology constraints of a particular implementation may further limit the upper bound value.')
rsHdlcIfCrcSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 9, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("crc16", 1), ("crc32", 2))).clone('crc16')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsHdlcIfCrcSize.setStatus('current')
if mibBuilder.loadTexts: rsHdlcIfCrcSize.setDescription('Selects CRC size: none, 16 bits, or 32 bits.')
rsHdlcIfDataPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 9, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("inverted", 1))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsHdlcIfDataPolarity.setStatus('current')
if mibBuilder.loadTexts: rsHdlcIfDataPolarity.setDescription("Polarity of data transmitted on this HDLC interface. Inverted data is used for certain line coding configurations to ensure sufficient one's density for timing recovery by the remote end.")
rsHdlcConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 9, 4))
rsHdlcCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 9, 4, 1))
rsHdlcGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 9, 4, 2))
rsHdlcCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2773, 2, 9, 4, 1, 1)).setObjects(("REDSTONE-HDLC-MIB", "rsHdlcGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsHdlcCompliance = rsHdlcCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: rsHdlcCompliance.setDescription('The compliance statement for entities which implement the Redstone HDLC MIB.')
rsHdlcCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2773, 2, 9, 4, 1, 2)).setObjects(("REDSTONE-HDLC-MIB", "rsHdlcGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsHdlcCompliance2 = rsHdlcCompliance2.setStatus('current')
if mibBuilder.loadTexts: rsHdlcCompliance2.setDescription('The compliance statement for entities which implement the Redstone HDLC MIB.')
rsHdlcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 9, 4, 2, 1)).setObjects(("REDSTONE-HDLC-MIB", "rsHdlcNextIfIndex"), ("REDSTONE-HDLC-MIB", "rsHdlcIfRowStatus"), ("REDSTONE-HDLC-MIB", "rsHdlcIfLowerIfIndex"), ("REDSTONE-HDLC-MIB", "rsHdlcIfMtu"), ("REDSTONE-HDLC-MIB", "rsHdlcIfMru"), ("REDSTONE-HDLC-MIB", "rsHdlcIfCrcSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsHdlcGroup = rsHdlcGroup.setStatus('obsolete')
if mibBuilder.loadTexts: rsHdlcGroup.setDescription('A collection of objects providing management of HDLC interfaces in a Redstone product.')
rsHdlcGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 9, 4, 2, 2)).setObjects(("REDSTONE-HDLC-MIB", "rsHdlcNextIfIndex"), ("REDSTONE-HDLC-MIB", "rsHdlcIfRowStatus"), ("REDSTONE-HDLC-MIB", "rsHdlcIfLowerIfIndex"), ("REDSTONE-HDLC-MIB", "rsHdlcIfMtu"), ("REDSTONE-HDLC-MIB", "rsHdlcIfMru"), ("REDSTONE-HDLC-MIB", "rsHdlcIfCrcSize"), ("REDSTONE-HDLC-MIB", "rsHdlcIfDataPolarity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsHdlcGroup2 = rsHdlcGroup2.setStatus('current')
if mibBuilder.loadTexts: rsHdlcGroup2.setDescription('A collection of objects providing management of HDLC interfaces in a Redstone product.')
mibBuilder.exportSymbols("REDSTONE-HDLC-MIB", rsHdlcIfDataPolarity=rsHdlcIfDataPolarity, rsHdlcIfLowerIfIndex=rsHdlcIfLowerIfIndex, rsHdlcIfCrcSize=rsHdlcIfCrcSize, rsHdlcIfTable=rsHdlcIfTable, rsHdlcGroup2=rsHdlcGroup2, rsHdlcIfRowStatus=rsHdlcIfRowStatus, rsHdlcIfIndex=rsHdlcIfIndex, rsHdlcIfMtu=rsHdlcIfMtu, rsHdlcObjects=rsHdlcObjects, rsHdlcCompliances=rsHdlcCompliances, rsHdlcNextIfIndex=rsHdlcNextIfIndex, rsHdlcCompliance2=rsHdlcCompliance2, rsHdlcCompliance=rsHdlcCompliance, rsHdlcMIB=rsHdlcMIB, rsHdlcConformance=rsHdlcConformance, rsHdlcGroups=rsHdlcGroups, rsHdlcIfEntry=rsHdlcIfEntry, rsHdlcGroup=rsHdlcGroup, rsHdlcIfMru=rsHdlcIfMru, PYSNMP_MODULE_ID=rsHdlcMIB)
