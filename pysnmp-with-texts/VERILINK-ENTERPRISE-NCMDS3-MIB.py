#
# PySNMP MIB module VERILINK-ENTERPRISE-NCMDS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERILINK-ENTERPRISE-NCMDS3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:33:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, ModuleIdentity, Bits, iso, MibIdentifier, Gauge32, TimeTicks, Unsigned32, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "ModuleIdentity", "Bits", "iso", "MibIdentifier", "Gauge32", "TimeTicks", "Unsigned32", "Counter32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ncm_ds3, = mibBuilder.importSymbols("VERILINK-ENTERPRISE-NCMALARM-MIB", "ncm-ds3")
ncmhdmDs3PortTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000), )
if mibBuilder.loadTexts: ncmhdmDs3PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3PortTable.setDescription('The HDM DS3 Port table.')
ncmhdmDs3PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmDs3PortNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmDs3PortIndex"))
if mibBuilder.loadTexts: ncmhdmDs3PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3PortEntry.setDescription('An entry in the dsu information table.')
ncmhdmDs3PortNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3PortNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3PortNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmhdmDs3PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3PortIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a dsx1LineIndex object instance.')
ncmhdmDs3PerfControl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3PerfControl.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3PerfControl.setDescription('Performance Control Enabled/Disabled.')
ncmhdmDs3LBOSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nORMAL-CABLE", 1), ("lONG-CABLE", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3LBOSelection.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3LBOSelection.setDescription('Select the length of DS3 cable to be Normal (0-255 feet) or Long cable (225-450 feet).')
ncmhdmDs3DataRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("only-NearEnd", 1), ("both-NearEndORFarEnd", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3DataRateMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3DataRateMode.setDescription('Data Rate Mode.')
ncmhdmDs3Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3Rate.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3Rate.setDescription('the date rate fro ds3 .')
ncmhdmDs3LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("dsx3M13", 2), ("dSX3CBitParity", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3LineType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3LineType.setDescription('Line Type.')
ncmhdmDs3LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("dSX3CB3ZS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3LineCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3LineCode.setDescription('Line Code.')
ncmhdmDs3AISCBit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("aISCBit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3AISCBit.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3AISCBit.setDescription('AISCBit.')
ncmhdmDs3EquipCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3EquipCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3EquipCode.setDescription('This is the Far End Equipment Identification code that describes the specific piece of equipment. It is sent within the Path Identification Message.')
ncmhdmDs3LocationIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3LocationIDCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3LocationIDCode.setDescription('This is the Far End Location Identification code that describes the specific location of the equipment. It is sent within the Path Identification Message.')
ncmhdmDs3FrameIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3FrameIDCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3FrameIDCode.setDescription('This is the Far End Frame Identification code that identifies where the equipment is located within a building at a given location. It is sent within the Path Identification Message.')
ncmhdmDs3UnitCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3UnitCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3UnitCode.setDescription('This is the Far End code that identifies the equipment location within a bay. It is sent within the Path Identification Message.')
ncmhdmDs3FacilityIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3FacilityIDCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3FacilityIDCode.setDescription('This code identifies a specific Far End DS3 path. It is sent within the Path Identification Message.')
ncmhdmDs3PortIdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3PortIdCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3PortIdCode.setDescription('Port ID.')
ncmhdmDs3CircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3CircuitID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3CircuitID.setDescription('Circuit ID.')
ncmhdmDs3GenIDCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3GenIDCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3GenIDCode.setDescription('Test Signal Generator ID.')
ncmhdmDs3Inband = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9000, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3Inband.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3Inband.setDescription('Inband signalling control.')
ncmhdmHssi1PortTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001), )
if mibBuilder.loadTexts: ncmhdmHssi1PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmHssi1PortTable.setDescription('The HDM HSSI Port table.')
ncmhdmHssi1PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmDs3Hssi1NIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmHssi1PortIndex"))
if mibBuilder.loadTexts: ncmhdmHssi1PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmHssi1PortEntry.setDescription('An entry in the dsu information table.')
ncmhdmDs3Hssi1NIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3Hssi1NIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3Hssi1NIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmhdmHssi1PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmHssi1PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmHssi1PortIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a dsx1LineIndex object instance.')
ncmhdmHssi1ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aUTOMATIC", 1), ("mANUAL", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmHssi1ConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmHssi1ConfigMode.setDescription('Set the Hssi Port to be automatic configuration or manual configuration. ')
ncmhdmHssi1PortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oUT-OF-SERVICE", 1), ("iN-SERVICE", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmHssi1PortConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmHssi1PortConfig.setDescription('Configure System - In-Service or Out of Service.')
ncmhdmHssi1TestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmHssi1TestMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmHssi1TestMode.setDescription('Report status of the test mode of HSSI port.')
ncmhdmHssi1DataRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("only-NearEnd", 1), ("both-NearEndORFarEnd", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmHssi1DataRateMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmHssi1DataRateMode.setDescription('Data Rate Mode for the Hssi Ports .')
ncmhdmHssi1HssiRate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmHssi1HssiRate.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmHssi1HssiRate.setDescription('Data Rate in # of T1.')
ncmhdmHssi1CircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9001, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmHssi1CircuitID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmHssi1CircuitID.setDescription('This is the Circuit ID for the Hssi port.')
ncmhdmHssiStatTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002), )
if mibBuilder.loadTexts: ncmhdmHssiStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmHssiStatTable.setDescription('The HDM HSSI Stats.')
ncmhdmHssiStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmHssiStatNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmHssiStatIndex"))
if mibBuilder.loadTexts: ncmhdmHssiStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmHssiStatEntry.setDescription('An entry in the Hssi ds3 stats table.')
ncmhdmHssiStatNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmHssiStatNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmHssiStatNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmhdmHssiStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmHssiStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmHssiStatIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a dsx1LineIndex object instance.')
ncmhdmStatDCEReady = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmStatDCEReady.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmStatDCEReady.setDescription('Hssi Port DCE Ready OFF/ON. ')
ncmhdmStatDTEReady = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmStatDTEReady.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmStatDTEReady.setDescription('Hssi Port DTE Ready OFF/ON. ')
ncmhdmStatLpbkA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmStatLpbkA.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmStatLpbkA.setDescription('Hssi Port - Loopback A OFF/ON.')
ncmhdmStatLpbkB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmStatLpbkB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmStatLpbkB.setDescription('Hssi Port - Loopback B OFF/ON.')
ncmhdmStatTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmStatTestMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmStatTestMode.setDescription('Hssi Port Test Mode OFF/ON.')
ncmhdmStatPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oUT-OF-SERVICE", 1), ("iN-SERVICE", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmStatPortState.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmStatPortState.setDescription('Hssi Port - In-Service or Out of Service.')
ncmhdmStatCIMType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(44, 59, 63))).clone(namedValues=NamedValues(("cim-2080", 44), ("cdm-2080", 59), ("cdm-2182", 63)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmStatCIMType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmStatCIMType.setDescription('Ds3 Cim Type.')
ncmhdmStatDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9002, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmStatDiagStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmStatDiagStatus.setDescription('Hssi User Equipment Loopback OFF/ON.')
ncmhdmCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003), )
if mibBuilder.loadTexts: ncmhdmCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentTable.setDescription('The DS3/E3 Current table.')
ncmhdmCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmCurrentNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmCurrentIndex"))
if mibBuilder.loadTexts: ncmhdmCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentEntry.setDescription('An entry in the DS3/E3 Current table.')
ncmhdmCurrentNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmhdmCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentIndex.setDescription('The index value which uniquely identifies the DS3/E3 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an ncmhdmLineIndex object instance.')
ncmhdmCurrentCRC4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentCRC4Status.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentCRC4Status.setDescription('Current CRC4 Status.')
ncmhdmCurrentTimeStampSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentTimeStampSecs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentTimeStampSecs.setDescription('Current Time in seconds.')
ncmhdmCurrentTimeStampMSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentTimeStampMSecs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentTimeStampMSecs.setDescription('Current Time in milliseconds.')
ncmhdmCurrentSecsElaps = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentSecsElaps.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentSecsElaps.setDescription('Seconds elapsed in the current interval.')
ncmhdmCurrentFarEndCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentFarEndCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentFarEndCCV.setDescription('The counter associated with the number of Far End C-bit Code Violations, in the current 15 minute interval.')
ncmhdmCurrentFarEndCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentFarEndCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentFarEndCES.setDescription('The counter associated with the number of Far End C-bit Errored Seconds, in the current 15 minute interval.')
ncmhdmCurrentFarEndCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentFarEndCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentFarEndCSES.setDescription('The counter associated with the number of Far End C-bit Severely Errored Seconds, in the current 15 minute interval.')
ncmhdmCurrentFarEndLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentFarEndLUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentFarEndLUAS.setDescription('Far End Line Unavailable Seconds. The counter associated with the number of Seconds the Far End DS3 interface was Out Of Service in the current 15 minute interval.')
ncmhdmCurrentLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentLCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentLCV.setDescription('The counter associated with the number of Line Code Violations, a bipolar or excesive zero violation, in the current 15 minute interval.')
ncmhdmCurrentLES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentLES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentLES.setDescription('Line Errored Second Total. The counter associated with the number of Seconds of in which one or more LCV occurred in the current 15 minute interval.')
ncmhdmCurrentLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentLSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentLSESs.setDescription('The counter associated with the number of Line Severely Errored Seconds (LSES) in the current 15 minute interval.')
ncmhdmCurrentPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentPCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentPCV.setDescription('The counter associated with the number of Parity Code Violations (locally calculated P-bits disagree with those received), in the current 15 minute interval.')
ncmhdmCurrentPES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentPES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentPES.setDescription('The counter associated with the number of Seconds having at least one Parity Code Violation, in the current 15 minute interval.')
ncmhdmCurrentPSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentPSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentPSES.setDescription('The counter associated with the number of Seconds having 44 or more Parity Code Violations, in the current 15 minute interval.')
ncmhdmCurrentCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentCCV.setDescription('The counter associated with the number of C-bit Code Violations, in the current 15 minute interval.')
ncmhdmCurrentCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentCES.setDescription('The counter associated with the number of C-bit Errored Seconds, in the current 15 minute interval.')
ncmhdmCurrentCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentCSES.setDescription('The counter associated with the number of C-bit Severely Errored Seconds, in the current 15 minute interval.')
ncmhdmCurrentSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentSEFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentSEFS.setDescription('The counter associated with the number of seconds in which one or more Out of Frame occurred in the current 15 minute interval.')
ncmhdmCurrentAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentAISS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentAISS.setDescription('The counter associated with the number of Seconds in which one or more incoming AIS was detected in the current 15 minute interval.')
ncmhdmCurrentOOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentOOSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentOOSSs.setDescription('The counter associated with the number of Seconds the DS3 interface was Out Of Service in the current 15 minute interval.')
ncmhdmCurrentLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentLOSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentLOSSs.setDescription('The counter associated with the number of Seconds Of system Loss Of Signal (LOS) in the current 15 minute interval.')
ncmhdmCurrentLOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9003, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmCurrentLOFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmCurrentLOFSs.setDescription('The counter associated with the number of Seconds Of system Loss Of Frame (LOF) in the current 15 minute interval.')
ncmhdmIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004), )
if mibBuilder.loadTexts: ncmhdmIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalTable.setDescription('The DS3/E3 Interval table.')
ncmhdmIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmIntervalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmIntervalIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmIntervalNumber"))
if mibBuilder.loadTexts: ncmhdmIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalEntry.setDescription('An entry in the DS3/E3 Interval table.')
ncmhdmIntervalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmhdmIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalIndex.setDescription('The index value which uniquely identifies the DS3/E3 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an ncmhdmLineIndex object instance.')
ncmhdmIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes inter- val (assuming that all 96 intervals are valid).')
ncmhdmIntervalFarEndCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalFarEndCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalFarEndCCV.setDescription('The counter associated with the number of Far End C-bit Code Violations, in the previous 15 minute interval.')
ncmhdmIntervalFarEndCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalFarEndCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalFarEndCES.setDescription('The counter associated with the number of Far End C-bit Errored Seconds, in the current 15 minute interval.')
ncmhdmIntervalFarEndCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalFarEndCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalFarEndCSES.setDescription('The counter associated with the number of Far End C-bit Severely Errored Seconds, in the current 15 minute interval.')
ncmhdmIntervalFarEndLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalFarEndLUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalFarEndLUAS.setDescription('Far End Line Unavailable Seconds. The counter associated with the number of Seconds the Far End DS3 interface was Out Of Service in the current 15 minute interval.')
ncmhdmIntervalLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalLCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalLCV.setDescription('The counter associated with the number of Line Code Violations, a bipolar or excesive zero violation, in the current 15 minute interval.')
ncmhdmIntervalLES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalLES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalLES.setDescription('Line Errored Second Total. The counter associated with the number of Seconds of in which one or more LCV occurred in the current 15 minute interval.')
ncmhdmIntervalLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalLSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalLSESs.setDescription('The counter associated with the number of Line Severely Errored Seconds (LSES) in the current 15 minute interval.')
ncmhdmIntervalPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalPCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalPCV.setDescription('The counter associated with the number of Parity Code Violations (locally calculated P-bits disagree with those received), in the current 15 minute interval.')
ncmhdmIntervalPES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalPES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalPES.setDescription('The counter associated with the number of Seconds having at least one Parity Code Violation, in the current 15 minute interval.')
ncmhdmIntervalPSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalPSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalPSES.setDescription('The counter associated with the number of Seconds having 44 or more Parity Code Violations, in the current 15 minute interval.')
ncmhdmIntervalCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalCCV.setDescription('The counter associated with the number of C-bit Code Violations, in the current 15 minute interval.')
ncmhdmIntervalCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalCES.setDescription('The counter associated with the number of C-bit Errored Seconds, in the current 15 minute interval.')
ncmhdmIntervalCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalCSES.setDescription('The counter associated with the number of C-bit Severely Errored Seconds, in the current 15 minute interval.')
ncmhdmIntervalSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalSEFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalSEFS.setDescription('The counter associated with the number of seconds in which one or more Out of Frame occurred in the current 15 minute interval.')
ncmhdmIntervalAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalAISS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalAISS.setDescription('The counter associated with the number of Seconds in which one or more incoming AIS was detected in the current 15 minute interval.')
ncmhdmIntervalOOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalOOSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalOOSSs.setDescription('The counter associated with the number of Seconds the DS3 interface was Out Of Service in the current 15 minute interval.')
ncmhdmIntervalLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalLOSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalLOSSs.setDescription('The counter associated with the number of Seconds Of system Loss Of Signal (LOS) in the current 15 minute interval.')
ncmhdmIntervalLOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9004, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmIntervalLOFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmIntervalLOFSs.setDescription('The counter associated with the number of Seconds Of system Loss Of Frame (LOF) in the current 15 minute interval.')
ncmhdmTotalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005), )
if mibBuilder.loadTexts: ncmhdmTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalTable.setDescription('The DS3/E3 Total table.')
ncmhdmTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmTotalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmTotalIndex"))
if mibBuilder.loadTexts: ncmhdmTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalEntry.setDescription('An entry in the DS3/E3 Total table.')
ncmhdmTotalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmhdmTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalIndex.setDescription('The index value which uniquely identifies the DS3/E3 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an ncmhdmLineIndex object instance.')
ncmhdmTotalCRC4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalCRC4Status.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalCRC4Status.setDescription('CRC4 Status.')
ncmhdmTotalValidInterv = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalValidInterv.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalValidInterv.setDescription('The number of valid intervals.')
ncmhdmTotalFarEndCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalFarEndCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalFarEndCCV.setDescription('The counter associated with the number of Far End C-bit Code Violations, in the last 24 hour interval.')
ncmhdmTotalFarEndCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalFarEndCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalFarEndCES.setDescription('The counter associated with the number of Far End C-bit Errored Seconds, in the last 24 hour interval.')
ncmhdmTotalFarEndCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalFarEndCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalFarEndCSES.setDescription('The counter associated with the number of Far End C-bit Severely Errored Seconds, in the last 24 hour interval.')
ncmhdmTotalFarEndLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalFarEndLUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalFarEndLUAS.setDescription('Far End Line Unavailable Seconds. The counter associated with the number of Seconds the Far End DS3 interface was Out Of Service in the last 24 hour interval.')
ncmhdmTotalLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalLCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalLCV.setDescription('The counter associated with the number of Line Code Violations, a bipolar or excesive zero violation, in the last 24 hour interval.')
ncmhdmTotalLES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalLES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalLES.setDescription('Line Errored Second Total. The counter associated with the number of Seconds of in which one or more LCV occurred in the last 24 hour interval.')
ncmhdmTotalLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalLSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalLSESs.setDescription('The counter associated with the number of Seconds Of Line Severely Errored Seconds (LSES) in the last 24 hour interval.')
ncmhdmTotalPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalPCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalPCV.setDescription('The counter associated with the number of Parity Code Violations (locally calculated P-bits disagree with those received), in the last 24 hour interval.')
ncmhdmTotalPES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalPES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalPES.setDescription('The counter associated with the number of Seconds having at least one Parity Code Violation, in the last 24 hour interval.')
ncmhdmTotalPSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalPSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalPSES.setDescription('The counter associated with the number of Seconds having 44 or more Parity Code Violations, in the last 24 hour interval.')
ncmhdmTotalCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalCCV.setDescription('The counter associated with the number of C-bit Code Violations, in the last 24 hour interval.')
ncmhdmTotalCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalCES.setDescription('The counter associated with the number of C-bit Errored Seconds, in the last 24 hour interval.')
ncmhdmTotalCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalCSES.setDescription('The counter associated with the number of C-bit Severely Errored Seconds, in the last 24 hour interval.')
ncmhdmTotalSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalSEFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalSEFS.setDescription('The counter associated with the number of seconds in which one or more Out of Frame occurred in the last 24 hour interval.')
ncmhdmTotalAISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalAISS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalAISS.setDescription('The counter associated with the number of Seconds in which one or more incoming AIS was detected in the last 24 hour interval.')
ncmhdmTotalOOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalOOSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalOOSSs.setDescription('The counter associated with the number of Seconds the DS3 interface was Out Of Service in the last 24 hour interval.')
ncmhdmTotalLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalLOSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalLOSSs.setDescription('The counter associated with the number of Seconds Of system Loss Of Signal (LOS) in the last 24 hour interval.')
ncmhdmTotalLOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9005, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTotalLOFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTotalLOFSs.setDescription('The counter associated with the number of Seconds Of system Loss Of Frame (LOF) in the last 24 hour interval.')
ncmDs3PerformanceSnapShotTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006), )
if mibBuilder.loadTexts: ncmDs3PerformanceSnapShotTable.setStatus('mandatory')
ncmDs3PerformanceSnapShotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmDs3SnapShotNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmDs3SnapShotIndex"))
if mibBuilder.loadTexts: ncmDs3PerformanceSnapShotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDs3PerformanceSnapShotEntry.setDescription('An entry in the Ds3 Performance Snap Shot Entry table.')
ncmDs3SnapShotNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDs3SnapShotNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDs3SnapShotNIDIndex.setDescription('The object specifies the node id index of the node.')
ncmDs3SnapShotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDs3SnapShotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDs3SnapShotIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a LineIndex object instance.')
ncmDs3SnapShotCRC4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDs3SnapShotCRC4Status.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDs3SnapShotCRC4Status.setDescription('CRC4 Status.')
ncmDs3SnapShot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDs3SnapShot.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDs3SnapShot.setDescription('The variable specifies the option to initiate snap shot command.')
ncmDs3TimeStampSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDs3TimeStampSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDs3TimeStampSec.setDescription('The variable specifies the Time Stamp in Seconds .')
ncmDs3TimeStampMilliSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDs3TimeStampMilliSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDs3TimeStampMilliSec.setDescription('The variable specifies the Time Stamp in milli Seconds .')
ncmDs3SnapShotSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDs3SnapShotSecs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDs3SnapShotSecs.setDescription('The variable specifies number of seconds in the current interval.')
ncmDs3ResetPerfReg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9006, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDs3ResetPerfReg.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDs3ResetPerfReg.setDescription('Reset Performance Monitoring registers.')
ncmhdmTCAQtrTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007), )
if mibBuilder.loadTexts: ncmhdmTCAQtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrTable.setDescription('The quarter hour Alert Threshold Table.')
ncmhdmTCAQtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmTCAQtrNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmTCAQtrIndex"))
if mibBuilder.loadTexts: ncmhdmTCAQtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrEntry.setDescription('An entry in the DS3/E3 table.')
ncmhdmTCAQtrNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTCAQtrNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmhdmTCAQtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTCAQtrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrIndex.setDescription('The index value which uniquely identifies the alert crossing threshold interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an plcpLineIndex object instance.')
ncmhdmTCAQtrDs3FarEndCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3FarEndCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3FarEndCCV.setDescription('The performance alert threshold for DS3 layer Far End C-bit Code Violation in 1/4 hour boundary.')
ncmhdmTCAQtrDs3FarEndCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3FarEndCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3FarEndCES.setDescription('The performance alert threshold for DS3 Far End C-bit Errored Seconds, in 1/4 hour boundary.')
ncmhdmTCAQtrDs3FarEndCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3FarEndCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3FarEndCSES.setDescription('The performance alert threshold for DS3 Far End C-bit Severely Errored Seconds, in 1/4 hour boundary.')
ncmhdmTCAQtrDs3FarEndLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3FarEndLUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3FarEndLUAS.setDescription('The performance alert threshold for DS3 layer Far End Line Unavailable Seconds in 1/4 hour boundary.')
ncmhdmTCAQtrDs3LCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LCV.setDescription('The performance alert threshold for DS3 layer Line code Violation in 1/4 hour boundary.')
ncmhdmTCAQtrDs3LES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LES.setDescription('The performance alert threshold for DS3 layer Line Errored Second in 1/4 hour boundary.')
ncmhdmTCAQtrDs3LSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LSESs.setDescription('The performance alert threshold for DS3 layer Line Severely Errored Second in 1/4 hour boundary.')
ncmhdmTCAQtrDs3PCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3PCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3PCV.setDescription('The performance alert threshold for DS3 layer Parity Code Violation in 1/4 hour boundary.')
ncmhdmTCAQtrDs3PES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3PES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3PES.setDescription('The performance alert threshold for DS3 layer Parity Errored Second in 1/4 hour boundary.')
ncmhdmTCAQtrDs3PSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3PSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3PSES.setDescription('The performance alert threshold for DS3 layer Parity Severely Errored Second in 1/4 hour boundary.')
ncmhdmTCAQtrDs3CCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3CCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3CCV.setDescription('The performance alert threshold for DS3 layer C-bit Code Violation in 1/4 hour boundary.')
ncmhdmTCAQtrDs3CES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3CES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3CES.setDescription('The performance alert threshold for DS3 Far End C-bit Errored Seconds, layer Errored Second in 1/4 hour boundary.')
ncmhdmTCAQtrDs3CSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3CSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3CSES.setDescription('The performance alert threshold for DS3 layer C-bit Severely Errored Second in 1/4 hour boundary.')
ncmhdmTCAQtrDs3SEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3SEFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3SEFS.setDescription('The performance alert threshold for DS3 layer Severely Errored Framing Seconds in 1/4 hour boundary.')
ncmhdmTCAQtrDs3AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3AISS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3AISS.setDescription('The performance alert threshold for DS3 layer Alarm Indication Signal Second in 1/4 hour boundary.')
ncmhdmTCAQtrDs3LUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LUASs.setDescription('The performance alert threshold for DS3 layer Unavailable Second in 1/4 hour boundary.')
ncmhdmTCAQtrDs3LOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LOSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LOSSs.setDescription('The performance alert threshold for DS3 Loss of Signal (LOS) Seconds in 1/4 hour boundary.')
ncmhdmTCAQtrDs3LOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9007, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LOFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCAQtrDs3LOFSs.setDescription('The performance alert threshold for DS3 Loss of Frame (LOF) Seconds in 1/4 hour boundary.')
ncmhdmTCADayTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008), )
if mibBuilder.loadTexts: ncmhdmTCADayTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayTable.setDescription('The 24 hour Alert Threshold Table.')
ncmhdmTCADayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmTCADayNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmTCADayIndex"))
if mibBuilder.loadTexts: ncmhdmTCADayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayEntry.setDescription('An entry in the 24 hour Alert Threshold Table.')
ncmhdmTCADayNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTCADayNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmhdmTCADayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTCADayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayIndex.setDescription('The index value which uniquely identifies the alert crossing threshold interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an plcpLineIndex object instance.')
ncmhdmTCADayDs3FarEndCCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3FarEndCCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3FarEndCCV.setDescription('The performance alert threshold for DS3 layer Far End C-bit Code Violation in 24 hour boundary.')
ncmhdmTCADayDs3FarEndCES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3FarEndCES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3FarEndCES.setDescription('The performance alert threshold for DS3 Far End C-bit Errored Seconds, in 24 hour boundary.')
ncmhdmTCADayDs3FarEndCSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3FarEndCSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3FarEndCSES.setDescription('The performance alert threshold for DS3 Far End C-bit Severely Errored Seconds, in 24 hour boundary.')
ncmhdmTCADayDs3FarEndLUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3FarEndLUAS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3FarEndLUAS.setDescription('The performance alert threshold for DS3 layer Far End Line Unavailable Seconds in 24 hour boundary.')
ncmhdmTCADayDs3LCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3LCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3LCV.setDescription('The performance alert threshold for DS3 layer Line code Violation in 24 hour boundary.')
ncmhdmTCADayDs3LES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3LES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3LES.setDescription('The performance alert threshold for DS3 layer Line Errored Second in 24 hour boundary.')
ncmhdmTCADayDs3LSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3LSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3LSESs.setDescription('The performance alert threshold for DS3 layer Line Severely Errored Second in 24 hour boundary.')
ncmhdmTCADayDs3PCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3PCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3PCV.setDescription('The performance alert threshold for DS3 layer Parity Code Violation in 24 hour boundary.')
ncmhdmTCADayDs3PES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3PES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3PES.setDescription('The performance alert threshold for DS3 layer Parity Errored Second in 24 hour boundary.')
ncmhdmTCADayDs3PSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3PSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3PSES.setDescription('The performance alert threshold for DS3 layer Parity Severely Errored Second in 24 hour boundary.')
ncmhdmTCADayDs3CCV = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3CCV.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3CCV.setDescription('The performance alert threshold for DS3 layer C-bit Code Violation in 24 hour boundary.')
ncmhdmTCADayDs3CES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3CES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3CES.setDescription('The performance alert threshold for DS3 C-bit Errored Seconds, in 24 hour boundary.')
ncmhdmTCADayDs3CSES = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3CSES.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3CSES.setDescription('The performance alert threshold for DS3 C-bit Severely Errored Seconds, in 24 hour boundary.')
ncmhdmTCADayDs3SEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3SEFS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3SEFS.setDescription('The performance alert threshold for DS3 layer Severely Errored Framing Seconds in 24 hour boundary.')
ncmhdmTCADayDs3AISS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3AISS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3AISS.setDescription('The performance alert threshold for DS3 layer Alarm Indication Signal Second in 24 hour boundary.')
ncmhdmTCADayDs3LUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3LUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3LUASs.setDescription('The performance alert threshold for DS3 layer Unavailable Second in 24 hour boundary.')
ncmhdmTCADayDs3LOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3LOSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3LOSSs.setDescription('The performance alert threshold for DS3 Loss of Signal (LOS) Seconds in 24 hour boundary.')
ncmhdmTCADayDs3LOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9008, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTCADayDs3LOFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTCADayDs3LOFSs.setDescription('The performance alert threshold for DS3 Loss of Frame (LOF) Seconds in 24 hour boundary.')
ncmhdmTxAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009), )
if mibBuilder.loadTexts: ncmhdmTxAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTxAlarmTable.setDescription('DS3 Transmit alarm Table.')
ncmhdmTxAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmTxAlarmNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmTxAlarmIndex"))
if mibBuilder.loadTexts: ncmhdmTxAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTxAlarmEntry.setDescription('An entry in the DS3/E3 Transmit Alarm table.')
ncmhdmTxAlarmNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTxAlarmNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTxAlarmNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmhdmTxAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmTxAlarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTxAlarmIndex.setDescription('The index value which uniquely identifies the Transmit Alarm interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an Dsx3LineIndex object instance.')
ncmhdmTxYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eNABLE", 1), ("dISABLE", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTxYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTxYellowAlarm.setDescription('Transmit the near-end yellow alarm.')
ncmhdmTxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eNABLE", 1), ("dISABLE", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTxAIS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTxAIS.setDescription('Transmit the near-end AIS alarm.')
ncmhdmTxIdleSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eNABLE", 1), ("dISABLE", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTxIdleSignal.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTxIdleSignal.setDescription('Transmit the near-end Idle alarm.')
ncmhdmTxFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eNABLE", 1), ("dISABLE", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTxFEBE.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTxFEBE.setDescription('Near end unit transmits the FEBE alarm.')
ncmhdmTxFEACAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9009, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("nO-FEAC-Alarm-enabled", 1), ("eqptFailureSA-Alarm", 2), ("lOSHBER-Alarm", 3), ("oOF-Alarm", 4), ("aISReceived-Alarm", 5), ("idleReceived-Alarm", 6), ("eqptFailureNSA-Alarm", 7), ("commonEqptFailureNSA-Alarm", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmTxFEACAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmTxFEACAlarm.setDescription('This object describes which, if any, FEAC Alarm is enabled. ')
ncmhdmDs3StatTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010), )
if mibBuilder.loadTexts: ncmhdmDs3StatTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3StatTable.setDescription('The HDM Ds3 Stats.')
ncmhdmDs3StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmDs3StatNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmDs3StatIndex"))
if mibBuilder.loadTexts: ncmhdmDs3StatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3StatEntry.setDescription('An entry in the ds3 stats table.')
ncmhdmDs3StatNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3StatNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmhdmDs3StatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3StatIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a dsx1LineIndex object instance.')
ncmhdmDs3StatAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatAIS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3StatAIS.setDescription('Port Status AIS off/on.')
ncmhdmDs3StatIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatIdle.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3StatIdle.setDescription('port Status Idle off/on.')
ncmhdmDs3StatYellowAlm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatYellowAlm.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3StatYellowAlm.setDescription('Port Status Yellow Alarm off/on.')
ncmhdmDs3StatFrameLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatFrameLoss.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3StatFrameLoss.setDescription('off/on.')
ncmhdmDs3StatSigLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatSigLoss.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3StatSigLoss.setDescription('Port Status Signal Loss off/on.')
ncmhdmDs3StatPLCPYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatPLCPYellow.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3StatPLCPYellow.setDescription('Port Status PLCP Yellow Alarm off/on.')
ncmhdmDs3StatPLCPFrmLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatPLCPFrmLoss.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3StatPLCPFrmLoss.setDescription('Port Status PLCP Frame Loss off/on.')
ncmhdmDs3StatPLCPOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oFF", 1), ("oN", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3StatPLCPOOF.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3StatPLCPOOF.setDescription('Port Status PLCP Out of Frame off/on.')
ncmhdmDs3LpbkLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3LpbkLocal.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3LpbkLocal.setDescription('Local Loopback enabled/disabled.')
ncmhdmDs3LpbkPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3LpbkPayload.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3LpbkPayload.setDescription('Payload Loopback enabled/disabled.')
ncmhdmDs3LpbkFEAC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3LpbkFEAC.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3LpbkFEAC.setDescription('FEAC Loopback enabled/disabled.')
ncmhdmDs3LpbkFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9010, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmDs3LpbkFarEnd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3LpbkFarEnd.setDescription('Far end Loopback enabled/disabled.')
ncmhdmds3LPBKTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9011), )
if mibBuilder.loadTexts: ncmhdmds3LPBKTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmds3LPBKTable.setDescription('The DS3/E3 Current table.')
ncmhdmds3LPBKEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9011, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmLPBKNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDS3-MIB", "ncmhdmds3LPBKIndex"))
if mibBuilder.loadTexts: ncmhdmds3LPBKEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmds3LPBKEntry.setDescription('An entry in the DS3 Loopback table.')
ncmhdmLPBKNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9011, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmLPBKNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmLPBKNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmhdmds3LPBKIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9011, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmhdmds3LPBKIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmds3LPBKIndex.setDescription('The index value which uniquely identifies the DS3/E3 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an ncmhdmLineIndex object instance.')
ncmhdmDs3LPBKActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3036, 9011, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("no-Loopback", 1), ("dS3-Internal-Activate", 2), ("dS3-Internal-De-activate", 3), ("dS3-Payload-Activate", 4), ("dS3-Payload-De-activate", 5), ("hSSI-A-Activate", 6), ("hSSI-A-De-activate", 7), ("hSSI-B-Activate", 8), ("hSSI-B-De-activate", 9), ("fEAC-Activate", 10), ("fEAC-De-activate", 11), ("far-End-Lpbk-Activate", 12), ("far-End-Lpbk-De-activate", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmhdmDs3LPBKActivation.setStatus('mandatory')
if mibBuilder.loadTexts: ncmhdmDs3LPBKActivation.setDescription('Ds3 Loopback enabled/disabled, and Ds3 Loopback Type.')
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMDS3-MIB", ncmhdmIntervalFarEndCES=ncmhdmIntervalFarEndCES, ncmhdmHssi1DataRateMode=ncmhdmHssi1DataRateMode, ncmhdmTCAQtrDs3LES=ncmhdmTCAQtrDs3LES, ncmhdmTxYellowAlarm=ncmhdmTxYellowAlarm, ncmhdmTotalLOSSs=ncmhdmTotalLOSSs, ncmhdmTCAQtrDs3PES=ncmhdmTCAQtrDs3PES, ncmhdmIntervalNumber=ncmhdmIntervalNumber, ncmhdmDs3StatIdle=ncmhdmDs3StatIdle, ncmhdmDs3StatFrameLoss=ncmhdmDs3StatFrameLoss, ncmhdmDs3StatPLCPFrmLoss=ncmhdmDs3StatPLCPFrmLoss, ncmhdmIntervalLES=ncmhdmIntervalLES, ncmhdmTCADayDs3FarEndCSES=ncmhdmTCADayDs3FarEndCSES, ncmDs3ResetPerfReg=ncmDs3ResetPerfReg, ncmDs3TimeStampSec=ncmDs3TimeStampSec, ncmhdmTxAlarmNIDIndex=ncmhdmTxAlarmNIDIndex, ncmhdmStatTestMode=ncmhdmStatTestMode, ncmhdmStatDTEReady=ncmhdmStatDTEReady, ncmhdmTCADayEntry=ncmhdmTCADayEntry, ncmhdmDs3PortIdCode=ncmhdmDs3PortIdCode, ncmhdmTCADayDs3LUASs=ncmhdmTCADayDs3LUASs, ncmhdmDs3GenIDCode=ncmhdmDs3GenIDCode, ncmDs3SnapShotIndex=ncmDs3SnapShotIndex, ncmhdmDs3StatNIDIndex=ncmhdmDs3StatNIDIndex, ncmhdmDs3Rate=ncmhdmDs3Rate, ncmhdmTotalIndex=ncmhdmTotalIndex, ncmhdmIntervalIndex=ncmhdmIntervalIndex, ncmhdmTxAIS=ncmhdmTxAIS, ncmhdmTCADayDs3LOSSs=ncmhdmTCADayDs3LOSSs, ncmhdmTCAQtrDs3FarEndLUAS=ncmhdmTCAQtrDs3FarEndLUAS, ncmhdmDs3PerfControl=ncmhdmDs3PerfControl, ncmhdmTCADayDs3SEFS=ncmhdmTCADayDs3SEFS, ncmhdmDs3FrameIDCode=ncmhdmDs3FrameIDCode, ncmhdmIntervalPCV=ncmhdmIntervalPCV, ncmhdmDs3LineType=ncmhdmDs3LineType, ncmhdmDs3LocationIDCode=ncmhdmDs3LocationIDCode, ncmhdmHssi1PortIndex=ncmhdmHssi1PortIndex, ncmhdmIntervalEntry=ncmhdmIntervalEntry, ncmhdmTCADayTable=ncmhdmTCADayTable, ncmhdmDs3StatPLCPOOF=ncmhdmDs3StatPLCPOOF, ncmhdmCurrentOOSSs=ncmhdmCurrentOOSSs, ncmhdmTCADayDs3CSES=ncmhdmTCADayDs3CSES, ncmhdmDs3LpbkLocal=ncmhdmDs3LpbkLocal, ncmhdmTotalSEFS=ncmhdmTotalSEFS, ncmhdmIntervalAISS=ncmhdmIntervalAISS, ncmhdmCurrentTimeStampMSecs=ncmhdmCurrentTimeStampMSecs, ncmhdmTotalLSESs=ncmhdmTotalLSESs, ncmDs3TimeStampMilliSec=ncmDs3TimeStampMilliSec, ncmhdmHssi1HssiRate=ncmhdmHssi1HssiRate, ncmhdmHssi1PortConfig=ncmhdmHssi1PortConfig, ncmhdmIntervalCES=ncmhdmIntervalCES, ncmhdmTotalFarEndCCV=ncmhdmTotalFarEndCCV, ncmhdmCurrentLCV=ncmhdmCurrentLCV, ncmhdmIntervalLSESs=ncmhdmIntervalLSESs, ncmhdmCurrentLOFSs=ncmhdmCurrentLOFSs, ncmhdmTCADayIndex=ncmhdmTCADayIndex, ncmhdmCurrentPCV=ncmhdmCurrentPCV, ncmhdmIntervalCSES=ncmhdmIntervalCSES, ncmhdmTCADayDs3CES=ncmhdmTCADayDs3CES, ncmhdmTotalLES=ncmhdmTotalLES, ncmhdmCurrentFarEndCES=ncmhdmCurrentFarEndCES, ncmhdmTCAQtrDs3SEFS=ncmhdmTCAQtrDs3SEFS, ncmhdmHssi1PortEntry=ncmhdmHssi1PortEntry, ncmhdmTCAQtrDs3LOFSs=ncmhdmTCAQtrDs3LOFSs, ncmhdmHssiStatEntry=ncmhdmHssiStatEntry, ncmhdmTCAQtrDs3LCV=ncmhdmTCAQtrDs3LCV, ncmhdmTCAQtrDs3CES=ncmhdmTCAQtrDs3CES, ncmhdmCurrentFarEndCSES=ncmhdmCurrentFarEndCSES, ncmhdmCurrentCES=ncmhdmCurrentCES, ncmhdmIntervalCCV=ncmhdmIntervalCCV, ncmhdmIntervalLOFSs=ncmhdmIntervalLOFSs, ncmhdmTotalCSES=ncmhdmTotalCSES, ncmhdmIntervalFarEndLUAS=ncmhdmIntervalFarEndLUAS, ncmhdmTCADayDs3PCV=ncmhdmTCADayDs3PCV, ncmhdmIntervalOOSSs=ncmhdmIntervalOOSSs, ncmhdmStatLpbkA=ncmhdmStatLpbkA, ncmhdmTCAQtrDs3LUASs=ncmhdmTCAQtrDs3LUASs, ncmhdmDs3PortEntry=ncmhdmDs3PortEntry, ncmhdmTCAQtrDs3AISS=ncmhdmTCAQtrDs3AISS, ncmhdmTCAQtrDs3CCV=ncmhdmTCAQtrDs3CCV, ncmhdmTxAlarmEntry=ncmhdmTxAlarmEntry, ncmhdmTotalNIDIndex=ncmhdmTotalNIDIndex, ncmhdmTotalCRC4Status=ncmhdmTotalCRC4Status, ncmhdmDs3StatTable=ncmhdmDs3StatTable, ncmhdmCurrentTimeStampSecs=ncmhdmCurrentTimeStampSecs, ncmhdmHssiStatTable=ncmhdmHssiStatTable, ncmhdmCurrentCRC4Status=ncmhdmCurrentCRC4Status, ncmhdmStatDiagStatus=ncmhdmStatDiagStatus, ncmhdmTotalCCV=ncmhdmTotalCCV, ncmhdmLPBKNIDIndex=ncmhdmLPBKNIDIndex, ncmhdmTotalLCV=ncmhdmTotalLCV, ncmhdmTCADayDs3FarEndLUAS=ncmhdmTCADayDs3FarEndLUAS, ncmhdmHssi1ConfigMode=ncmhdmHssi1ConfigMode, ncmhdmDs3StatPLCPYellow=ncmhdmDs3StatPLCPYellow, ncmhdmDs3Hssi1NIDIndex=ncmhdmDs3Hssi1NIDIndex, ncmhdmCurrentLSESs=ncmhdmCurrentLSESs, ncmhdmIntervalLCV=ncmhdmIntervalLCV, ncmhdmTxFEBE=ncmhdmTxFEBE, ncmhdmTCAQtrEntry=ncmhdmTCAQtrEntry, ncmhdmTotalValidInterv=ncmhdmTotalValidInterv, ncmhdmDs3AISCBit=ncmhdmDs3AISCBit, ncmhdmDs3StatAIS=ncmhdmDs3StatAIS, ncmhdmDs3CircuitID=ncmhdmDs3CircuitID, ncmhdmIntervalPSES=ncmhdmIntervalPSES, ncmhdmDs3LpbkPayload=ncmhdmDs3LpbkPayload, ncmhdmCurrentCCV=ncmhdmCurrentCCV, ncmhdmTCADayDs3AISS=ncmhdmTCADayDs3AISS, ncmhdmTCAQtrDs3FarEndCES=ncmhdmTCAQtrDs3FarEndCES, ncmhdmCurrentIndex=ncmhdmCurrentIndex, ncmhdmIntervalFarEndCCV=ncmhdmIntervalFarEndCCV, ncmhdmTCAQtrNIDIndex=ncmhdmTCAQtrNIDIndex, ncmhdmCurrentFarEndCCV=ncmhdmCurrentFarEndCCV, ncmhdmCurrentTable=ncmhdmCurrentTable, ncmhdmTCADayDs3PES=ncmhdmTCADayDs3PES, ncmhdmTCADayDs3LSESs=ncmhdmTCADayDs3LSESs, ncmDs3SnapShotNIDIndex=ncmDs3SnapShotNIDIndex, ncmhdmTCAQtrDs3LOSSs=ncmhdmTCAQtrDs3LOSSs, ncmhdmHssi1PortTable=ncmhdmHssi1PortTable, ncmhdmIntervalSEFS=ncmhdmIntervalSEFS, ncmhdmTCADayDs3CCV=ncmhdmTCADayDs3CCV, ncmhdmDs3StatEntry=ncmhdmDs3StatEntry, ncmhdmDs3LineCode=ncmhdmDs3LineCode, ncmhdmCurrentAISS=ncmhdmCurrentAISS, ncmhdmHssi1CircuitID=ncmhdmHssi1CircuitID, ncmhdmTotalFarEndCES=ncmhdmTotalFarEndCES, ncmhdmCurrentPSES=ncmhdmCurrentPSES, ncmhdmDs3LpbkFEAC=ncmhdmDs3LpbkFEAC, ncmDs3PerformanceSnapShotTable=ncmDs3PerformanceSnapShotTable, ncmhdmTCAQtrDs3PCV=ncmhdmTCAQtrDs3PCV, ncmDs3SnapShotCRC4Status=ncmDs3SnapShotCRC4Status, ncmhdmTCADayDs3LCV=ncmhdmTCADayDs3LCV, ncmhdmIntervalFarEndCSES=ncmhdmIntervalFarEndCSES, ncmhdmDs3StatIndex=ncmhdmDs3StatIndex, ncmhdmTCAQtrDs3FarEndCCV=ncmhdmTCAQtrDs3FarEndCCV, ncmhdmTCADayDs3FarEndCES=ncmhdmTCADayDs3FarEndCES, ncmhdmTCAQtrIndex=ncmhdmTCAQtrIndex, ncmhdmTotalOOSSs=ncmhdmTotalOOSSs, ncmhdmTotalPES=ncmhdmTotalPES, ncmhdmTotalFarEndLUAS=ncmhdmTotalFarEndLUAS, ncmhdmStatDCEReady=ncmhdmStatDCEReady, ncmhdmTxAlarmTable=ncmhdmTxAlarmTable, ncmhdmTCADayDs3FarEndCCV=ncmhdmTCADayDs3FarEndCCV, ncmhdmStatPortState=ncmhdmStatPortState, ncmhdmStatCIMType=ncmhdmStatCIMType, ncmhdmIntervalPES=ncmhdmIntervalPES, ncmhdmDs3PortTable=ncmhdmDs3PortTable, ncmhdmDs3LpbkFarEnd=ncmhdmDs3LpbkFarEnd, ncmhdmTotalCES=ncmhdmTotalCES, ncmhdmTotalEntry=ncmhdmTotalEntry, ncmhdmTotalPSES=ncmhdmTotalPSES, ncmhdmTxFEACAlarm=ncmhdmTxFEACAlarm, ncmhdmTCAQtrDs3PSES=ncmhdmTCAQtrDs3PSES, ncmhdmCurrentSEFS=ncmhdmCurrentSEFS, ncmhdmTotalLOFSs=ncmhdmTotalLOFSs, ncmhdmHssi1TestMode=ncmhdmHssi1TestMode, ncmhdmTCADayDs3LOFSs=ncmhdmTCADayDs3LOFSs, ncmhdmCurrentEntry=ncmhdmCurrentEntry, ncmhdmTCAQtrDs3LSESs=ncmhdmTCAQtrDs3LSESs, ncmhdmTxAlarmIndex=ncmhdmTxAlarmIndex, ncmhdmIntervalLOSSs=ncmhdmIntervalLOSSs, ncmhdmCurrentPES=ncmhdmCurrentPES, ncmhdmTotalTable=ncmhdmTotalTable, ncmhdmDs3LPBKActivation=ncmhdmDs3LPBKActivation, ncmhdmDs3LBOSelection=ncmhdmDs3LBOSelection, ncmhdmDs3DataRateMode=ncmhdmDs3DataRateMode, ncmhdmTCAQtrDs3FarEndCSES=ncmhdmTCAQtrDs3FarEndCSES, ncmhdmCurrentNIDIndex=ncmhdmCurrentNIDIndex, ncmhdmDs3StatSigLoss=ncmhdmDs3StatSigLoss, ncmhdmTotalAISS=ncmhdmTotalAISS, ncmDs3SnapShot=ncmDs3SnapShot, ncmhdmTCADayNIDIndex=ncmhdmTCADayNIDIndex, ncmhdmCurrentSecsElaps=ncmhdmCurrentSecsElaps, ncmhdmHssiStatNIDIndex=ncmhdmHssiStatNIDIndex, ncmhdmTxIdleSignal=ncmhdmTxIdleSignal, ncmhdmCurrentFarEndLUAS=ncmhdmCurrentFarEndLUAS, ncmhdmTotalPCV=ncmhdmTotalPCV, ncmhdmCurrentLES=ncmhdmCurrentLES, ncmhdmTCAQtrTable=ncmhdmTCAQtrTable, ncmhdmDs3StatYellowAlm=ncmhdmDs3StatYellowAlm, ncmhdmDs3EquipCode=ncmhdmDs3EquipCode, ncmhdmCurrentLOSSs=ncmhdmCurrentLOSSs, ncmhdmTCADayDs3LES=ncmhdmTCADayDs3LES, ncmDs3PerformanceSnapShotEntry=ncmDs3PerformanceSnapShotEntry, ncmhdmds3LPBKIndex=ncmhdmds3LPBKIndex, ncmhdmHssiStatIndex=ncmhdmHssiStatIndex, ncmhdmIntervalTable=ncmhdmIntervalTable, ncmhdmDs3UnitCode=ncmhdmDs3UnitCode, ncmhdmCurrentCSES=ncmhdmCurrentCSES, ncmhdmStatLpbkB=ncmhdmStatLpbkB, ncmhdmDs3PortIndex=ncmhdmDs3PortIndex, ncmDs3SnapShotSecs=ncmDs3SnapShotSecs, ncmhdmDs3Inband=ncmhdmDs3Inband, ncmhdmDs3PortNIDIndex=ncmhdmDs3PortNIDIndex, ncmhdmTotalFarEndCSES=ncmhdmTotalFarEndCSES, ncmhdmDs3FacilityIDCode=ncmhdmDs3FacilityIDCode, ncmhdmIntervalNIDIndex=ncmhdmIntervalNIDIndex, ncmhdmTCADayDs3PSES=ncmhdmTCADayDs3PSES, ncmhdmds3LPBKTable=ncmhdmds3LPBKTable, ncmhdmTCAQtrDs3CSES=ncmhdmTCAQtrDs3CSES, ncmhdmds3LPBKEntry=ncmhdmds3LPBKEntry)
