#
# PySNMP MIB module JUNIPER-LSYSSP-POLICYWCNT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-LSYSSP-POLICYWCNT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:00:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
jnxLsysSpPolicywcnt, = mibBuilder.importSymbols("JUNIPER-LSYS-SECURITYPROFILE-MIB", "jnxLsysSpPolicywcnt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, Counter32, ObjectIdentity, MibIdentifier, IpAddress, Integer32, Gauge32, ModuleIdentity, Counter64, TimeTicks, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "Counter32", "ObjectIdentity", "MibIdentifier", "IpAddress", "Integer32", "Gauge32", "ModuleIdentity", "Counter64", "TimeTicks", "NotificationType", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxLsysSpPolicywcntMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1))
if mibBuilder.loadTexts: jnxLsysSpPolicywcntMIB.setLastUpdated('201005191644Z')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntMIB.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntMIB.setDescription('This module defines the policy-with-count-specific MIB for Juniper Enterprise Logical-System (LSYS) security profiles. Juniper documentation is recommended as the reference. The LSYS security profile provides various static and dynamic resource management by observing resource quota limits. Security policy-with-count resource is the focus in this MIB. ')
jnxLsysSpPolicywcntObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 1))
jnxLsysSpPolicywcntSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 2))
jnxLsysSpPolicywcntTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 1, 1), )
if mibBuilder.loadTexts: jnxLsysSpPolicywcntTable.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntTable.setDescription('LSYSPROFILE policy-with-count objects for policy-with-count resource consumption per LSYS.')
jnxLsysSpPolicywcntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 1, 1, 1), ).setIndexNames((1, "JUNIPER-LSYSSP-POLICYWCNT-MIB", "jnxLsysSpPolicywcntLsysName"))
if mibBuilder.loadTexts: jnxLsysSpPolicywcntEntry.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntEntry.setDescription('An entry in policy-with-count resource table.')
jnxLsysSpPolicywcntLsysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: jnxLsysSpPolicywcntLsysName.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntLsysName.setDescription('The name of the logical system for which policy-with-count resource information is retrieved. ')
jnxLsysSpPolicywcntProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntProfileName.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntProfileName.setDescription('The security profile name string for the LSYS.')
jnxLsysSpPolicywcntUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntUsage.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntUsage.setDescription('The current resource usage count for the LSYS.')
jnxLsysSpPolicywcntReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntReserved.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntReserved.setDescription('The reserved resource count for the LSYS.')
jnxLsysSpPolicywcntMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntMaximum.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntMaximum.setDescription('The maximum allowed resource usage count for the LSYS.')
jnxLsysSpPolicywcntUsedAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntUsedAmount.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntUsedAmount.setDescription('The policy-with-count resource consumption over all LSYS.')
jnxLsysSpPolicywcntMaxQuota = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntMaxQuota.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntMaxQuota.setDescription('The policy-with-count resource maximum quota for the whole device for all LSYS.')
jnxLsysSpPolicywcntAvailableAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntAvailableAmount.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntAvailableAmount.setDescription('The policy-with-count resource available in the whole device.')
jnxLsysSpPolicywcntHeaviestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntHeaviestUsage.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntHeaviestUsage.setDescription('The most amount of policy-with-count resource consumed of a LSYS.')
jnxLsysSpPolicywcntHeaviestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntHeaviestUser.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntHeaviestUser.setDescription('The LSYS name that consume the most policy-with-count resource.')
jnxLsysSpPolicywcntLightestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntLightestUsage.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntLightestUsage.setDescription('The least amount of policy-with-count resource consumed of a LSYS.')
jnxLsysSpPolicywcntLightestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 4, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpPolicywcntLightestUser.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpPolicywcntLightestUser.setDescription('The LSYS name that consume the least policy-with-count resource.')
mibBuilder.exportSymbols("JUNIPER-LSYSSP-POLICYWCNT-MIB", jnxLsysSpPolicywcntTable=jnxLsysSpPolicywcntTable, jnxLsysSpPolicywcntUsage=jnxLsysSpPolicywcntUsage, jnxLsysSpPolicywcntLsysName=jnxLsysSpPolicywcntLsysName, jnxLsysSpPolicywcntMaxQuota=jnxLsysSpPolicywcntMaxQuota, jnxLsysSpPolicywcntEntry=jnxLsysSpPolicywcntEntry, jnxLsysSpPolicywcntSummary=jnxLsysSpPolicywcntSummary, jnxLsysSpPolicywcntObjects=jnxLsysSpPolicywcntObjects, jnxLsysSpPolicywcntUsedAmount=jnxLsysSpPolicywcntUsedAmount, PYSNMP_MODULE_ID=jnxLsysSpPolicywcntMIB, jnxLsysSpPolicywcntMaximum=jnxLsysSpPolicywcntMaximum, jnxLsysSpPolicywcntMIB=jnxLsysSpPolicywcntMIB, jnxLsysSpPolicywcntLightestUsage=jnxLsysSpPolicywcntLightestUsage, jnxLsysSpPolicywcntHeaviestUsage=jnxLsysSpPolicywcntHeaviestUsage, jnxLsysSpPolicywcntReserved=jnxLsysSpPolicywcntReserved, jnxLsysSpPolicywcntHeaviestUser=jnxLsysSpPolicywcntHeaviestUser, jnxLsysSpPolicywcntAvailableAmount=jnxLsysSpPolicywcntAvailableAmount, jnxLsysSpPolicywcntProfileName=jnxLsysSpPolicywcntProfileName, jnxLsysSpPolicywcntLightestUser=jnxLsysSpPolicywcntLightestUser)
