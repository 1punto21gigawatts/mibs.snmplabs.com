#
# PySNMP MIB module INTEL-PPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-PPP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter32, Unsigned32, Gauge32, iso, Bits, TimeTicks, Counter64, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "Unsigned32", "Gauge32", "iso", "Bits", "TimeTicks", "Counter64", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ppp = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 23))
pppLink = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 23, 1))
class PppProtocolState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqsent", 7), ("ackrcvd", 8), ("acksent", 9), ("opened", 10), ("disabled", 11))

pppLinkProtoStateTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 1), )
if mibBuilder.loadTexts: pppLinkProtoStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateTable.setDescription('Table containing protocol states and link type (standard, multilink slave or multilink master).')
pppLinkProtoStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 1, 1), ).setIndexNames((0, "INTEL-PPP-MIB", "pppLinkProtoStateIfIndex"))
if mibBuilder.loadTexts: pppLinkProtoStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateEntry.setDescription('')
pppLinkProtoStateIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateIfIndex.setDescription('Interface index.')
pppLinkProtoStatePppLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("multilinkmaster", 2), ("multilinkslave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStatePppLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStatePppLinkType.setDescription('PPP Link type.')
pppLinkProtoStateLcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 1, 1, 3), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateLcpState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateLcpState.setDescription('LCP (Link Control Protocol) state.')
pppLinkProtoStateIpcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 1, 1, 4), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateIpcpState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateIpcpState.setDescription('IPCP (Ip Control Protocol) state. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkProtoStateIpxcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 1, 1, 5), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateIpxcpState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateIpxcpState.setDescription('IPXCP (Ipx Control Protocol) state. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkProtoStateBcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 1, 1, 6), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateBcpState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateBcpState.setDescription('BCP (Bridging Control Protocol) state. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkProtoStateCcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 1, 1, 7), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateCcpState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateCcpState.setDescription('CCP (Compression Control Protocol) state. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkProtoStateEcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 1, 1, 8), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateEcpState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateEcpState.setDescription('ECP (Encryption Control Protocol) state. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkProtoStateBacpState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 1, 1, 9), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateBacpState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateBacpState.setDescription('BACP (Bandwidth Allocation Control Protocol) state. Only used for multilink master links (pppLinkProtoStatePppLinkType = multilinkmaster).')
pppLinkLcpTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 2), )
if mibBuilder.loadTexts: pppLinkLcpTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkLcpTable.setDescription('LCP (Link Control Protocol) information table. Values are first valid when protocol has state OPENED. Not used for multilink master links (pppLinkProtoStatePppLinkType = multilinkmaster).')
pppLinkLcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 2, 1), ).setIndexNames((0, "INTEL-PPP-MIB", "pppLinkLcpIfIndex"))
if mibBuilder.loadTexts: pppLinkLcpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkLcpEntry.setDescription('')
pppLinkLcpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLcpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkLcpIfIndex.setDescription('Interface index')
pppLinkLcpMRUInc = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLcpMRUInc.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkLcpMRUInc.setDescription('Local Maximum Receive Unit')
pppLinkLcpMRUOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLcpMRUOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkLcpMRUOut.setDescription('Remote Maximum Receive Unit')
pppLinkLcpACCMapInc = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLcpACCMapInc.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkLcpACCMapInc.setDescription('Local to peer ACCM map')
pppLinkLcpACCMapOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLcpACCMapOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkLcpACCMapOut.setDescription('Peer to local ACCM map')
pppLinkProtocolCompressionInc = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtocolCompressionInc.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtocolCompressionInc.setDescription('Local to remote protocol field compression')
pppLinkProtocolCompressionOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtocolCompressionOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtocolCompressionOut.setDescription('Remote to local protocol field compression')
pppLinkACCompressionInc = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkACCompressionInc.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkACCompressionInc.setDescription('Local to remote address and control field compression')
pppLinkACCompressionOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkACCompressionOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkACCompressionOut.setDescription('Remote to local address and control field compression')
pppLinkMagicNumberInc = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMagicNumberInc.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMagicNumberInc.setDescription('Local magic number')
pppLinkMagicNumberOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMagicNumberOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMagicNumberOut.setDescription('Remote magic number')
pppLinkLinkDiscriminatorInc = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLinkDiscriminatorInc.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkLinkDiscriminatorInc.setDescription('Local link discriminator')
pppLinkLinkDiscriminatorOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLinkDiscriminatorOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkLinkDiscriminatorOut.setDescription('Remote link discriminator')
pppLinkBcpTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 3), )
if mibBuilder.loadTexts: pppLinkBcpTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBcpTable.setDescription('BCP (Bridging Control Protocol) information table. Values are first valid when protocol has state OPENED. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkBcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 3, 1), ).setIndexNames((0, "INTEL-PPP-MIB", "pppLinkBcpIfIndex"))
if mibBuilder.loadTexts: pppLinkBcpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBcpEntry.setDescription('')
pppLinkBcpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBcpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBcpIfIndex.setDescription('Interface index')
pppLinkBcpMACTypeInc = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("ethernet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBcpMACTypeInc.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBcpMACTypeInc.setDescription('Frame type (incoming)')
pppLinkBcpMACTypeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("ethernet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBcpMACTypeOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBcpMACTypeOut.setDescription('Frame type (outgoing)')
pppLinkBcpBridgingProtInc = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("spanningtree", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBcpBridgingProtInc.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBcpBridgingProtInc.setDescription('Bridging protocol used (incoming).')
pppLinkBcpBridgingProtOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("spanningtree", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBcpBridgingProtOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBcpBridgingProtOut.setDescription('Bridging protocol used (outgoing).')
pppLinkCcpTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 4), )
if mibBuilder.loadTexts: pppLinkCcpTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCcpTable.setDescription('CCP (Compression Control Protocol) information table. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkCcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 4, 1), ).setIndexNames((0, "INTEL-PPP-MIB", "pppLinkCcpIfIndex"))
if mibBuilder.loadTexts: pppLinkCcpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCcpEntry.setDescription('')
pppLinkCcpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCcpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCcpIfIndex.setDescription('Interface index.')
pppLinkCcpHistorySizeIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCcpHistorySizeIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCcpHistorySizeIncoming.setDescription('Number of compression histories (incoming).')
pppLinkCcpHistorySizeOutgoing = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCcpHistorySizeOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCcpHistorySizeOutgoing.setDescription('Number of compression histories (outgoing).')
pppLinkCcpCheckTypeIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sequenceno", 2), ("extms", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCcpCheckTypeIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCcpCheckTypeIncoming.setDescription('How compression history synchronization is handled (incoming).')
pppLinkCcpCheckTypeOutgoing = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sequenceno", 2), ("extms", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCcpCheckTypeOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCcpCheckTypeOutgoing.setDescription('How compression history synchronization is handled.')
pppLinkEcpTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 5), )
if mibBuilder.loadTexts: pppLinkEcpTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpTable.setDescription('ECP (Encryption Control Protocol) information table. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkEcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 5, 1), ).setIndexNames((0, "INTEL-PPP-MIB", "pppLinkEcpIfIndex"))
if mibBuilder.loadTexts: pppLinkEcpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpEntry.setDescription('')
pppLinkEcpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpIfIndex.setDescription('Interface index')
pppLinkEcpResetRequestsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpResetRequestsRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpResetRequestsRx.setDescription('Number of encryption history reset requests received.')
pppLinkEcpResetRequestsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpResetRequestsTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpResetRequestsTx.setDescription('Number of encryption history reset requests sent.')
pppLinkEcpResetAcksRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpResetAcksRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpResetAcksRx.setDescription('Number of encryption history reset acknowledgments received.')
pppLinkEcpResetAcksTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpResetAcksTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpResetAcksTx.setDescription('Number of encryption history reset acknowledgments sent.')
pppLinkEcpRxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpRxDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpRxDiscarded.setDescription('Number of packets discarded due to lack of synchronization, buffer lacks or packet errors.')
pppLinkEcpTxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpTxDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpTxDiscarded.setDescription('Number of packets discarded due to buffer lacks or transmit queue overflows')
pppLinkEcpReceiverState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpReceiverState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpReceiverState.setDescription('State of receiver. Error state means waiting for reset acknowledgment')
pppLinkCompTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6), )
if mibBuilder.loadTexts: pppLinkCompTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompTable.setDescription('Compression information table. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkCompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1), ).setIndexNames((0, "INTEL-PPP-MIB", "pppLinkCompIfIndex"))
if mibBuilder.loadTexts: pppLinkCompEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEntry.setDescription('')
pppLinkCompIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompIfIndex.setDescription('Interface index.')
pppLinkCompDecoderBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderBytesIn.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderBytesIn.setDescription('Total number of bytes received by the decoder (lower 32 bits).')
pppLinkCompDecoderDecompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderDecompBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderDecompBytesOut.setDescription('Decompressed bytes from the decoder (lower 32 bits).')
pppLinkCompDecoderUncompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderUncompBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderUncompBytesOut.setDescription('Uncompressed bytes received by the decoder (lower 32 bits).')
pppLinkCompDecoderCompPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderCompPacketsIn.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderCompPacketsIn.setDescription('Compressed packets received by the decoder.')
pppLinkCompDecoderUncompPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderUncompPacketsIn.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderUncompPacketsIn.setDescription('Uncompressed packets received by the decoder.')
pppLinkCompDecoderDecompQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderDecompQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderDecompQueueLength.setDescription('Number of packets waiting to be decompressed.')
pppLinkCompDecoderCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderCompressionRatio.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderCompressionRatio.setDescription('Receive compression ratio (multiplied by 100).')
pppLinkCompDecoderResetRequestTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderResetRequestTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderResetRequestTx.setDescription('The number of times the decoder requested re-initialization og the compression history.')
pppLinkCompDecoderResetAcksRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderResetAcksRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderResetAcksRx.setDescription('The number of acknowledgments to reset requests received by the router.')
pppLinkCompDecoderRxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderRxDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderRxDiscarded.setDescription('Number of packets discarded by the decoder due to buffer lacks or synchronization problems.')
pppLinkCompDecoderState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderState.setDescription('State of decoder. Error state means waiting for reset acknowledgment')
pppLinkCompEncoderBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderBytesIn.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderBytesIn.setDescription('Total number of bytes received by the encoder (lower 32 bits).')
pppLinkCompEncoderCompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderCompBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderCompBytesOut.setDescription('Number of compressed bytes leaving the encoder (lower 32 bits).')
pppLinkCompEncoderUncompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderUncompBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderUncompBytesOut.setDescription('Number of uncompressed bytes leaving the encoder (lower 32 bits).')
pppLinkCompEncoderCompPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderCompPacketsOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderCompPacketsOut.setDescription('Number of compressed packets leaving the encoder.')
pppLinkCompEncoderUncompPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderUncompPacketsOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderUncompPacketsOut.setDescription('Number of uncompressed packets leaving the encoder.')
pppLinkCompEncoderCompQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderCompQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderCompQueueLength.setDescription('Number of packets waiting to be compressed.')
pppLinkCompEncoderCompressionRation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderCompressionRation.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderCompressionRation.setDescription('Transmit compression ratio (multiplied by 100).')
pppLinkCompEncoderResetRequestRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderResetRequestRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderResetRequestRx.setDescription('The number of times the remote end requested re-initialization og the compression history.')
pppLinkCompEncoderResetAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderResetAckTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderResetAckTx.setDescription('The number of acknowledgments to reset requests transmitted by the router.')
pppLinkCompEncoderTxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderTxDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderTxDiscarded.setDescription('Number of packets discarded by the encoder due to buffer lacks or transmit queue overflows.')
pppLinkCompDecoderBytesInUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderBytesInUpper.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderBytesInUpper.setDescription('Total number of bytes received by the decoder (upper 32 bits).')
pppLinkCompDecoderDecompBytesOutUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderDecompBytesOutUpper.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderDecompBytesOutUpper.setDescription('Decompressed bytes from the decoder (upper 32 bits).')
pppLinkCompDecoderUncompBytesOutUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderUncompBytesOutUpper.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderUncompBytesOutUpper.setDescription('Uncompressed bytes received by the decoder (upper 32 bits).')
pppLinkCompEncoderBytesInUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderBytesInUpper.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderBytesInUpper.setDescription('Total number of bytes received by the encoder (upper 32 bits).')
pppLinkCompEncoderCompBytesOutUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderCompBytesOutUpper.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderCompBytesOutUpper.setDescription('Number of compressed bytes leaving the encoder (upper 32 bits).')
pppLinkCompEncoderUncompBytesOutUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderUncompBytesOutUpper.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderUncompBytesOutUpper.setDescription('Number of uncompressed bytes leaving the encoder (upper 32 bits).')
pppLinkChapTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 7), )
if mibBuilder.loadTexts: pppLinkChapTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapTable.setDescription('Table containing CHAP information. Not used for multilink master links (pppLinkProtoStatePppLinkType = multilinkmaster).')
pppLinkChapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 7, 1), ).setIndexNames((0, "INTEL-PPP-MIB", "pppLinkChapIfIndex"))
if mibBuilder.loadTexts: pppLinkChapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapEntry.setDescription('')
pppLinkChapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapIfIndex.setDescription('Interface index.')
pppLinkChapIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapIncoming.setDescription('Is this router authenticated by the remote end using CHAP.')
pppLinkChapOutgoing = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapOutgoing.setDescription('Is the remote router authenticated using CHAP.')
pppLinkChapChallengeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapChallengeRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapChallengeRx.setDescription('Authentication challenges received from remote end')
pppLinkChapChallengeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapChallengeTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapChallengeTx.setDescription('Authentication challenges transmitted to remote end')
pppLinkChapResponseRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapResponseRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapResponseRx.setDescription('Authentication responses received from remote end.')
pppLinkChapResponseTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapResponseTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapResponseTx.setDescription('Authentication responses transmitted to remote end.')
pppLinkChapSuccesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapSuccesRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapSuccesRx.setDescription('Number of authentication succes replies received from remote end.')
pppLinkChapSuccesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapSuccesTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapSuccesTx.setDescription('Number of authentication succes replies transmitted to remote end.')
pppLinkChapFailureRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapFailureRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapFailureRx.setDescription('Number of authentication failure replies received from remote end.')
pppLinkChapFailureTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapFailureTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapFailureTx.setDescription('Number of authentication failure replies transmitted to remote end.')
pppLinkPapTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 8), )
if mibBuilder.loadTexts: pppLinkPapTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapTable.setDescription('Table containing CHAP information. Not used for multilink master links (pppLinkProtoStatePppLinkType = multilinkmaster).')
pppLinkPapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 8, 1), ).setIndexNames((0, "INTEL-PPP-MIB", "pppLinkPapIfIndex"))
if mibBuilder.loadTexts: pppLinkPapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapEntry.setDescription('')
pppLinkPapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapIfIndex.setDescription('Interface index.')
pppLinkPapIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapIncoming.setDescription('Is this router authenticated by the remote end using PAP.')
pppLinkPapOutgoing = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapOutgoing.setDescription('Is the remote router authenticated using PAP.')
pppLinkPapAuthReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthReqRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapAuthReqRx.setDescription('Number of authentication requests received from remote end.')
pppLinkPapAuthReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthReqTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapAuthReqTx.setDescription('Number of authentication requests transmitted to remote end.')
pppLinkPapAuthAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthAckRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapAuthAckRx.setDescription('Number of authentication succes replies received from remote end.')
pppLinkPapAuthAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthAckTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapAuthAckTx.setDescription('Number of authentication succes replies transmitted to remote end.')
pppLinkPapAuthNackRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthNackRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapAuthNackRx.setDescription('Number of authentication succes replies transmitted to remote end.')
pppLinkPapAuthNackTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthNackTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapAuthNackTx.setDescription('Number of authentication failure replies received from remote end.')
pppLinkMlMasterTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 9), )
if mibBuilder.loadTexts: pppLinkMlMasterTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterTable.setDescription('Table containing multilink master information. Only used when pppLinkProtoStatePppLinkType = multilinkmaster.')
pppLinkMlMasterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 9, 1), ).setIndexNames((0, "INTEL-PPP-MIB", "pppLinkMlMasterIfIndex"))
if mibBuilder.loadTexts: pppLinkMlMasterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterEntry.setDescription('')
pppLinkMlMasterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterIfIndex.setDescription('Interface index.')
pppLinkMlMasterSlaveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterSlaveCount.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterSlaveCount.setDescription('Number of slave links in multilink bundle.')
pppLinkMlMasterTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterTxUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterTxUtilization.setDescription('Transmit utilization of current bundle measured in percent.')
pppLinkMlMasterRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterRxUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterRxUtilization.setDescription('Receive utilization of current bundle measured in percent.')
pppLinkMlMasterSlavesForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterSlavesForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterSlavesForwarding.setDescription('Number of forwarding slave links in bundle.')
pppLinkMlMasterLinkAddThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterLinkAddThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterLinkAddThreshold.setDescription('Link Add Threshold (in percent)')
pppLinkMlMasterSamplingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterSamplingTime.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterSamplingTime.setDescription('Sampling time for utilization calculation.')
pppLinkMlMasterSlavesWithBOD = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterSlavesWithBOD.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterSlavesWithBOD.setDescription('Slaves with BOD in bundle')
pppLinkMlMasterMeasuringMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("rx", 2), ("tx", 3), ("all", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterMeasuringMode.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterMeasuringMode.setDescription('Utilization measurings mode')
pppLinkMlSlaveTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 10), )
if mibBuilder.loadTexts: pppLinkMlSlaveTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlSlaveTable.setDescription('Table containing multilink slave information. Only used when pppLinkProtoStatePppLinkType = multilinkslave.')
pppLinkMlSlaveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 10, 1), ).setIndexNames((0, "INTEL-PPP-MIB", "pppLinkMlSlaveIfIndex"))
if mibBuilder.loadTexts: pppLinkMlSlaveEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlSlaveEntry.setDescription('')
pppLinkMlSlaveIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlSlaveIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlSlaveIfIndex.setDescription('Interface index.')
pppLinkMlSlaveBodEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlSlaveBodEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlSlaveBodEnabled.setDescription('Bandwidth on demand enabled for this slave link.')
pppLinkMlSlaveMasterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlSlaveMasterIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlSlaveMasterIfIndex.setDescription('Interface index of the corresponding master link.')
pppLinkBacpTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11), )
if mibBuilder.loadTexts: pppLinkBacpTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpTable.setDescription('Table containing BACP/BAP information. Only used when pppLinkProtoStatePppLinkType = multilinkmaster and BACP has been opened.')
pppLinkBacpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1), ).setIndexNames((0, "INTEL-PPP-MIB", "pppLinkBacpIfIndex"))
if mibBuilder.loadTexts: pppLinkBacpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpEntry.setDescription('')
pppLinkBacpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpIfIndex.setDescription('Interface index.')
pppLinkBacpMagicInc = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpMagicInc.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpMagicInc.setDescription('Local BACP magic number')
pppLinkBacpMagicOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpMagicOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpMagicOut.setDescription('Remote BACP magic number')
pppLinkBacpCallReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpCallReqTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpCallReqTx.setDescription('Number of BAP call requests transmitted.')
pppLinkBacpCallReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpCallReqRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpCallReqRx.setDescription('Number of BAP call requests received.')
pppLinkBacpCallRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpCallRespTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpCallRespTx.setDescription('Number of BAP call responses transmitted.')
pppLinkBacpCallRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpCallRespRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpCallRespRx.setDescription('Number of BAP call responses received.')
pppLinkBacpCallbackReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpCallbackReqTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpCallbackReqTx.setDescription('Number of BAP call-back requests transmitted.')
pppLinkBacpCallbackReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpCallbackReqRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpCallbackReqRx.setDescription('Number of BAP call-back requests received.')
pppLinkBacpCallbackRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpCallbackRespTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpCallbackRespTx.setDescription('Number of BAP call-back responses transmitted.')
pppLinkBacpCallbackRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpCallbackRespRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpCallbackRespRx.setDescription('Number of BAP call-back responses received.')
pppLinkBacpLinkDropReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpLinkDropReqTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpLinkDropReqTx.setDescription('Number of BAP link drop requests transmitted.')
pppLinkBacpLinkDropReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpLinkDropReqRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpLinkDropReqRx.setDescription('Number of BAP link drop requests received.')
pppLinkBacpLinkDropRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpLinkDropRespTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpLinkDropRespTx.setDescription('Number of BAP link drop responses transmitted.')
pppLinkBacpLinkDropRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpLinkDropRespRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpLinkDropRespRx.setDescription('Number of BAP link drop responses received.')
pppLinkBacpCallStatusIndTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpCallStatusIndTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpCallStatusIndTx.setDescription('Number of BAP call status indications transmitted.')
pppLinkBacpCallStatusIndRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpCallStatusIndRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpCallStatusIndRx.setDescription('Number of BAP call status indications received.')
pppLinkBacpCallStatusRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpCallStatusRespTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpCallStatusRespTx.setDescription('Number of BAP call status responses transmitted.')
pppLinkBacpCallStatusRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpCallStatusRespRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpCallStatusRespRx.setDescription('Number of BAP call status responses received.')
pppLinkBacpNoFreeSlavesFound = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpNoFreeSlavesFound.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpNoFreeSlavesFound.setDescription('No free slave links found to handle BAP request.')
pppLinkBacpMaxBundleSizeRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpMaxBundleSizeRejects.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpMaxBundleSizeRejects.setDescription('Not possible to handle BAP request for more bandwidth due to max bundle size has been reached.')
pppLinkBacpChannelLackDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpChannelLackDisconnects.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpChannelLackDisconnects.setDescription('Disconnects due to lack of channels.')
pppLinkBacpOldProtocolIdsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 11, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBacpOldProtocolIdsUsed.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBacpOldProtocolIdsUsed.setDescription("Using old BACP id's to support remote device.")
pppLinkIpcpTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 12), )
if mibBuilder.loadTexts: pppLinkIpcpTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkIpcpTable.setDescription('IPCP (IP Control Protocol) information table. Values are first valid when protocol has state OPENED. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkIpcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 12, 1), ).setIndexNames((0, "INTEL-PPP-MIB", "pppLinkIpcpIfIndex"))
if mibBuilder.loadTexts: pppLinkIpcpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkIpcpEntry.setDescription('')
pppLinkIpcpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkIpcpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkIpcpIfIndex.setDescription('Interface index')
pppLinkIpcpIpAddressLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkIpcpIpAddressLocal.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkIpcpIpAddressLocal.setDescription('Local IP address.')
pppLinkIpcpIpAddressRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 23, 1, 12, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkIpcpIpAddressRemote.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkIpcpIpAddressRemote.setDescription('Remote IP Address')
mibBuilder.exportSymbols("INTEL-PPP-MIB", pppLinkPapTable=pppLinkPapTable, pppLinkCompDecoderUncompPacketsIn=pppLinkCompDecoderUncompPacketsIn, pppLinkCompEncoderCompBytesOut=pppLinkCompEncoderCompBytesOut, pppLinkBcpBridgingProtOut=pppLinkBcpBridgingProtOut, pppLinkCompDecoderUncompBytesOutUpper=pppLinkCompDecoderUncompBytesOutUpper, pppLinkMlMasterIfIndex=pppLinkMlMasterIfIndex, pppLinkBacpCallRespTx=pppLinkBacpCallRespTx, pppLinkBacpLinkDropReqRx=pppLinkBacpLinkDropReqRx, pppLinkMlMasterSlavesWithBOD=pppLinkMlMasterSlavesWithBOD, pppLinkLinkDiscriminatorInc=pppLinkLinkDiscriminatorInc, pppLinkACCompressionInc=pppLinkACCompressionInc, pppLinkBacpMagicInc=pppLinkBacpMagicInc, pppLinkBcpMACTypeOut=pppLinkBcpMACTypeOut, pppLinkCompDecoderBytesInUpper=pppLinkCompDecoderBytesInUpper, pppLinkChapChallengeTx=pppLinkChapChallengeTx, pppLinkMlMasterTxUtilization=pppLinkMlMasterTxUtilization, pppLinkLcpIfIndex=pppLinkLcpIfIndex, PppProtocolState=PppProtocolState, pppLinkBacpCallReqTx=pppLinkBacpCallReqTx, pppLinkMlSlaveMasterIfIndex=pppLinkMlSlaveMasterIfIndex, pppLinkCompEncoderResetRequestRx=pppLinkCompEncoderResetRequestRx, pppLinkCompDecoderBytesIn=pppLinkCompDecoderBytesIn, pppLinkChapEntry=pppLinkChapEntry, pppLinkIpcpIpAddressRemote=pppLinkIpcpIpAddressRemote, pppLinkProtoStateEcpState=pppLinkProtoStateEcpState, pppLinkProtoStateTable=pppLinkProtoStateTable, pppLinkMlMasterSlavesForwarding=pppLinkMlMasterSlavesForwarding, pppLinkChapIncoming=pppLinkChapIncoming, pppLinkProtoStateIfIndex=pppLinkProtoStateIfIndex, pppLinkCcpCheckTypeIncoming=pppLinkCcpCheckTypeIncoming, pppLinkCcpCheckTypeOutgoing=pppLinkCcpCheckTypeOutgoing, pppLinkCompEntry=pppLinkCompEntry, pppLinkMlSlaveIfIndex=pppLinkMlSlaveIfIndex, pppLinkMlMasterSlaveCount=pppLinkMlMasterSlaveCount, pppLinkCompIfIndex=pppLinkCompIfIndex, pppLinkBacpEntry=pppLinkBacpEntry, pppLinkMlSlaveTable=pppLinkMlSlaveTable, pppLinkLcpTable=pppLinkLcpTable, pppLinkBcpEntry=pppLinkBcpEntry, pppLinkChapSuccesRx=pppLinkChapSuccesRx, pppLinkPapAuthAckRx=pppLinkPapAuthAckRx, pppLinkMlMasterMeasuringMode=pppLinkMlMasterMeasuringMode, pppLinkBacpLinkDropReqTx=pppLinkBacpLinkDropReqTx, pppLinkBacpLinkDropRespRx=pppLinkBacpLinkDropRespRx, pppLinkCompDecoderResetAcksRx=pppLinkCompDecoderResetAcksRx, pppLinkIpcpEntry=pppLinkIpcpEntry, pppLinkBacpCallbackReqRx=pppLinkBacpCallbackReqRx, pppLinkBacpOldProtocolIdsUsed=pppLinkBacpOldProtocolIdsUsed, pppLinkLcpACCMapInc=pppLinkLcpACCMapInc, pppLinkChapSuccesTx=pppLinkChapSuccesTx, pppLinkCompDecoderRxDiscarded=pppLinkCompDecoderRxDiscarded, pppLinkCompEncoderCompQueueLength=pppLinkCompEncoderCompQueueLength, pppLinkLcpEntry=pppLinkLcpEntry, pppLinkMagicNumberInc=pppLinkMagicNumberInc, pppLinkCcpHistorySizeOutgoing=pppLinkCcpHistorySizeOutgoing, pppLinkBacpChannelLackDisconnects=pppLinkBacpChannelLackDisconnects, pppLinkCcpIfIndex=pppLinkCcpIfIndex, pppLinkMlMasterLinkAddThreshold=pppLinkMlMasterLinkAddThreshold, pppLinkEcpIfIndex=pppLinkEcpIfIndex, pppLinkIpcpIpAddressLocal=pppLinkIpcpIpAddressLocal, pppLinkCompDecoderUncompBytesOut=pppLinkCompDecoderUncompBytesOut, pppLinkIpcpIfIndex=pppLinkIpcpIfIndex, pppLinkLcpMRUInc=pppLinkLcpMRUInc, pppLinkProtocolCompressionOut=pppLinkProtocolCompressionOut, pppLinkProtoStateEntry=pppLinkProtoStateEntry, pppLinkACCompressionOut=pppLinkACCompressionOut, pppLinkBcpMACTypeInc=pppLinkBcpMACTypeInc, pppLinkCompTable=pppLinkCompTable, pppLinkCompDecoderCompressionRatio=pppLinkCompDecoderCompressionRatio, pppLinkBcpIfIndex=pppLinkBcpIfIndex, pppLinkChapIfIndex=pppLinkChapIfIndex, pppLinkLcpACCMapOut=pppLinkLcpACCMapOut, pppLinkCcpTable=pppLinkCcpTable, pppLinkPapEntry=pppLinkPapEntry, pppLinkBacpCallStatusRespRx=pppLinkBacpCallStatusRespRx, pppLinkChapOutgoing=pppLinkChapOutgoing, ppp=ppp, pppLinkBacpLinkDropRespTx=pppLinkBacpLinkDropRespTx, pppLinkChapTable=pppLinkChapTable, pppLinkCompDecoderDecompQueueLength=pppLinkCompDecoderDecompQueueLength, pppLinkCompEncoderBytesIn=pppLinkCompEncoderBytesIn, pppLinkProtoStateIpcpState=pppLinkProtoStateIpcpState, pppLinkProtoStateIpxcpState=pppLinkProtoStateIpxcpState, pppLinkBacpCallbackRespRx=pppLinkBacpCallbackRespRx, pppLinkMlSlaveEntry=pppLinkMlSlaveEntry, pppLinkBacpTable=pppLinkBacpTable, pppLinkPapAuthReqTx=pppLinkPapAuthReqTx, pppLinkEcpReceiverState=pppLinkEcpReceiverState, pppLink=pppLink, pppLinkEcpEntry=pppLinkEcpEntry, pppLinkMlMasterRxUtilization=pppLinkMlMasterRxUtilization, pppLinkProtoStateCcpState=pppLinkProtoStateCcpState, pppLinkBcpBridgingProtInc=pppLinkBcpBridgingProtInc, pppLinkEcpTable=pppLinkEcpTable, pppLinkChapFailureRx=pppLinkChapFailureRx, pppLinkCompEncoderUncompBytesOut=pppLinkCompEncoderUncompBytesOut, pppLinkBacpCallStatusIndTx=pppLinkBacpCallStatusIndTx, pppLinkCompDecoderDecompBytesOut=pppLinkCompDecoderDecompBytesOut, pppLinkPapAuthNackRx=pppLinkPapAuthNackRx, pppLinkProtoStatePppLinkType=pppLinkProtoStatePppLinkType, pppLinkEcpTxDiscarded=pppLinkEcpTxDiscarded, pppLinkBacpMaxBundleSizeRejects=pppLinkBacpMaxBundleSizeRejects, pppLinkChapFailureTx=pppLinkChapFailureTx, pppLinkBacpMagicOut=pppLinkBacpMagicOut, pppLinkProtocolCompressionInc=pppLinkProtocolCompressionInc, pppLinkProtoStateBacpState=pppLinkProtoStateBacpState, pppLinkMlMasterTable=pppLinkMlMasterTable, pppLinkBacpCallStatusIndRx=pppLinkBacpCallStatusIndRx, pppLinkCompEncoderResetAckTx=pppLinkCompEncoderResetAckTx, pppLinkEcpResetRequestsRx=pppLinkEcpResetRequestsRx, pppLinkPapAuthAckTx=pppLinkPapAuthAckTx, pppLinkCompEncoderUncompBytesOutUpper=pppLinkCompEncoderUncompBytesOutUpper, pppLinkCompEncoderCompBytesOutUpper=pppLinkCompEncoderCompBytesOutUpper, pppLinkChapChallengeRx=pppLinkChapChallengeRx, pppLinkEcpResetAcksTx=pppLinkEcpResetAcksTx, pppLinkIpcpTable=pppLinkIpcpTable, pppLinkPapOutgoing=pppLinkPapOutgoing, pppLinkBacpCallbackReqTx=pppLinkBacpCallbackReqTx, pppLinkChapResponseTx=pppLinkChapResponseTx, pppLinkCcpEntry=pppLinkCcpEntry, pppLinkCcpHistorySizeIncoming=pppLinkCcpHistorySizeIncoming, pppLinkPapAuthReqRx=pppLinkPapAuthReqRx, pppLinkEcpRxDiscarded=pppLinkEcpRxDiscarded, pppLinkPapAuthNackTx=pppLinkPapAuthNackTx, pppLinkCompEncoderTxDiscarded=pppLinkCompEncoderTxDiscarded, pppLinkBacpCallbackRespTx=pppLinkBacpCallbackRespTx, pppLinkBacpIfIndex=pppLinkBacpIfIndex, pppLinkCompDecoderCompPacketsIn=pppLinkCompDecoderCompPacketsIn, pppLinkPapIfIndex=pppLinkPapIfIndex, pppLinkBacpNoFreeSlavesFound=pppLinkBacpNoFreeSlavesFound, pppLinkBcpTable=pppLinkBcpTable, pppLinkCompEncoderUncompPacketsOut=pppLinkCompEncoderUncompPacketsOut, pppLinkCompDecoderDecompBytesOutUpper=pppLinkCompDecoderDecompBytesOutUpper, pppLinkProtoStateLcpState=pppLinkProtoStateLcpState, pppLinkMlSlaveBodEnabled=pppLinkMlSlaveBodEnabled, pppLinkLinkDiscriminatorOut=pppLinkLinkDiscriminatorOut, pppLinkCompEncoderCompressionRation=pppLinkCompEncoderCompressionRation, pppLinkCompEncoderBytesInUpper=pppLinkCompEncoderBytesInUpper, pppLinkMagicNumberOut=pppLinkMagicNumberOut, pppLinkEcpResetAcksRx=pppLinkEcpResetAcksRx, pppLinkLcpMRUOut=pppLinkLcpMRUOut, pppLinkBacpCallStatusRespTx=pppLinkBacpCallStatusRespTx, pppLinkCompDecoderState=pppLinkCompDecoderState, pppLinkProtoStateBcpState=pppLinkProtoStateBcpState, pppLinkChapResponseRx=pppLinkChapResponseRx, pppLinkMlMasterSamplingTime=pppLinkMlMasterSamplingTime, pppLinkPapIncoming=pppLinkPapIncoming, pppLinkCompEncoderCompPacketsOut=pppLinkCompEncoderCompPacketsOut, pppLinkMlMasterEntry=pppLinkMlMasterEntry, pppLinkEcpResetRequestsTx=pppLinkEcpResetRequestsTx, pppLinkBacpCallRespRx=pppLinkBacpCallRespRx, pppLinkBacpCallReqRx=pppLinkBacpCallReqRx, pppLinkCompDecoderResetRequestTx=pppLinkCompDecoderResetRequestTx)
