#
# PySNMP MIB module XEDIA-ADDRPOOL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XEDIA-ADDRPOOL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, Integer32, Gauge32, NotificationType, Counter32, MibIdentifier, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ModuleIdentity, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "Gauge32", "NotificationType", "Counter32", "MibIdentifier", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "ModuleIdentity", "iso", "Bits")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
xediaMibs, = mibBuilder.importSymbols("XEDIA-REG", "xediaMibs")
xediaAddrPoolMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 838, 3, 43))
if mibBuilder.loadTexts: xediaAddrPoolMIB.setLastUpdated('0001272155Z')
if mibBuilder.loadTexts: xediaAddrPoolMIB.setOrganization('Xedia Corp.')
if mibBuilder.loadTexts: xediaAddrPoolMIB.setContactInfo('support@xedia.com')
if mibBuilder.loadTexts: xediaAddrPoolMIB.setDescription("This module defines objects for management of Xedia's IP Address Pool.")
addrPoolObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 43, 1))
addrPoolConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 43, 2))
addrPoolConfigTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 43, 1, 1), )
if mibBuilder.loadTexts: addrPoolConfigTable.setStatus('current')
if mibBuilder.loadTexts: addrPoolConfigTable.setDescription('The Addr Pool configuration table.')
addrPoolConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 43, 1, 1, 1), ).setIndexNames((0, "XEDIA-ADDRPOOL-MIB", "addrPoolConfigIdentifier"))
if mibBuilder.loadTexts: addrPoolConfigEntry.setStatus('current')
if mibBuilder.loadTexts: addrPoolConfigEntry.setDescription('An Addr Pool configuration entry. An entry in this table corresponds to a pool of ip addresses.')
addrPoolConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 43, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: addrPoolConfigIdentifier.setStatus('current')
if mibBuilder.loadTexts: addrPoolConfigIdentifier.setDescription("The identifier is a domain name which can be matched against the user domain as received in the PPP user authentication information. For example if a local PPP layer was connected to a downlink of this Layer 2 Dial layer, and it's remote PPP peer requested that an address be assigned to it, the local PPP could request this address from the Layer 2 Dial layer, which would allocate it from a subnet defined in this table.")
addrPoolConfigNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 43, 1, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: addrPoolConfigNetwork.setStatus('current')
if mibBuilder.loadTexts: addrPoolConfigNetwork.setDescription('Network from which ip addresses can be allocated and assigned to remote PPP peers.')
addrPoolConfigMask = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 43, 1, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: addrPoolConfigMask.setStatus('current')
if mibBuilder.loadTexts: addrPoolConfigMask.setDescription('The subnet mask for addrPoolConfigNetwork')
addrPoolConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 43, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: addrPoolConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: addrPoolConfigRowStatus.setDescription('The status of this Pool entry.')
addrPoolAllocationTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 43, 1, 2), )
if mibBuilder.loadTexts: addrPoolAllocationTable.setStatus('current')
if mibBuilder.loadTexts: addrPoolAllocationTable.setDescription('The Addr Pool allocation table.')
addrPoolAllocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 43, 1, 2, 1), ).setIndexNames((0, "XEDIA-ADDRPOOL-MIB", "addrPoolAllocationNameIdentifier"), (0, "XEDIA-ADDRPOOL-MIB", "addrPoolAllocationIpAddress"))
if mibBuilder.loadTexts: addrPoolAllocationEntry.setStatus('current')
if mibBuilder.loadTexts: addrPoolAllocationEntry.setDescription('An Addr Pool allocation entry. An entry in this table corresponds to a pool of ip addresses.')
addrPoolAllocationNameIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 43, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: addrPoolAllocationNameIdentifier.setStatus('current')
if mibBuilder.loadTexts: addrPoolAllocationNameIdentifier.setDescription('The identifier is a domain name.')
addrPoolAllocationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 43, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: addrPoolAllocationIpAddress.setStatus('current')
if mibBuilder.loadTexts: addrPoolAllocationIpAddress.setDescription('An ip address allocated from this address pool.')
addrPoolAllocationUserLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 43, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addrPoolAllocationUserLayer.setStatus('current')
if mibBuilder.loadTexts: addrPoolAllocationUserLayer.setDescription('The name of the local connected layer to which the address was allocated.')
addrPoolAllocationRemoteUser = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 43, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addrPoolAllocationRemoteUser.setStatus('current')
if mibBuilder.loadTexts: addrPoolAllocationRemoteUser.setDescription('The name of the remote user to which the address was allocated.')
addrPoolCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 43, 2, 1))
addrPoolGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 43, 2, 2))
addrPoolCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 838, 3, 43, 2, 1, 1)).setObjects(("XEDIA-ADDRPOOL-MIB", "addrPoolConfigGroup"), ("XEDIA-ADDRPOOL-MIB", "addrPoolAllocationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    addrPoolCompliance = addrPoolCompliance.setStatus('current')
if mibBuilder.loadTexts: addrPoolCompliance.setDescription('The compliance statement for all agents that support this MIB. A compliant agent implements all objects defined in this MIB.')
addrPoolConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 43, 2, 2, 1)).setObjects(("XEDIA-ADDRPOOL-MIB", "addrPoolConfigNetwork"), ("XEDIA-ADDRPOOL-MIB", "addrPoolConfigMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    addrPoolConfigGroup = addrPoolConfigGroup.setStatus('current')
if mibBuilder.loadTexts: addrPoolConfigGroup.setDescription('A collection of objects providing configuration of address pools.')
addrPoolAllocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 43, 2, 2, 2)).setObjects(("XEDIA-ADDRPOOL-MIB", "addrPoolAllocationUserLayer"), ("XEDIA-ADDRPOOL-MIB", "addrPoolAllocationRemoteUser"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    addrPoolAllocationGroup = addrPoolAllocationGroup.setStatus('current')
if mibBuilder.loadTexts: addrPoolAllocationGroup.setDescription('A collection of objects providing status of address pools.')
mibBuilder.exportSymbols("XEDIA-ADDRPOOL-MIB", addrPoolAllocationIpAddress=addrPoolAllocationIpAddress, addrPoolAllocationUserLayer=addrPoolAllocationUserLayer, addrPoolGroups=addrPoolGroups, addrPoolConfigGroup=addrPoolConfigGroup, addrPoolAllocationTable=addrPoolAllocationTable, addrPoolAllocationNameIdentifier=addrPoolAllocationNameIdentifier, PYSNMP_MODULE_ID=xediaAddrPoolMIB, addrPoolConfigTable=addrPoolConfigTable, addrPoolConfigEntry=addrPoolConfigEntry, addrPoolAllocationEntry=addrPoolAllocationEntry, addrPoolCompliance=addrPoolCompliance, addrPoolConfigNetwork=addrPoolConfigNetwork, addrPoolObjects=addrPoolObjects, addrPoolCompliances=addrPoolCompliances, addrPoolAllocationRemoteUser=addrPoolAllocationRemoteUser, xediaAddrPoolMIB=xediaAddrPoolMIB, addrPoolConfigMask=addrPoolConfigMask, addrPoolConformance=addrPoolConformance, addrPoolConfigIdentifier=addrPoolConfigIdentifier, addrPoolConfigRowStatus=addrPoolConfigRowStatus, addrPoolAllocationGroup=addrPoolAllocationGroup)
