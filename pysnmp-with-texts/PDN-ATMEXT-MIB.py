#
# PySNMP MIB module PDN-ATMEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-ATMEXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:38:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
atmVpCrossConnectAdminStatus, atmTrafficDescrParamEntry, aal5VccEntry, atmVcCrossConnectAdminStatus, atmInterfaceConfEntry = mibBuilder.importSymbols("ATM-MIB", "atmVpCrossConnectAdminStatus", "atmTrafficDescrParamEntry", "aal5VccEntry", "atmVcCrossConnectAdminStatus", "atmInterfaceConfEntry")
ifOperStatus, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifOperStatus", "ifIndex")
pdnAtm, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdnAtm")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Counter64, IpAddress, TimeTicks, Gauge32, Bits, iso, ObjectIdentity, Counter32, Unsigned32, MibIdentifier, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "IpAddress", "TimeTicks", "Gauge32", "Bits", "iso", "ObjectIdentity", "Counter32", "Unsigned32", "MibIdentifier", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
pdnAtmExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5))
pdnAtmExtMIB.setRevisions(('2003-05-15 00:00', '2003-05-11 00:00', '1970-01-01 00:00', '2003-03-31 00:00', '2002-03-27 00:00', '2000-12-29 00:00', '2000-12-01 00:00', '2000-07-06 00:00', '2000-04-28 00:00', '2000-03-11 00:00', '2000-02-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pdnAtmExtMIB.setRevisionsDescriptions(('P. Easwar o Changed object name pdnAtmTrafficRateShape to pdnAtmTrafficShaping', 'P. Easwar o Added Two New Traffic Descriptor Types o pdnAtmNoClpTaggingNoScrCdvtMdcr o pdnAtmNoClpNoScrCdvtMdcr', 'P. Easwar o Added pdnAtmTrafficRateShape.', 'C. Sikes o Added pdnAal5VccExtTable.', 'J. Pinto o Added pdnAtmIfConfExtRateShape', 'P. Easwar o modified the following traps (name/description) o pdnAtmIfConfExtLineRateAlarmSet o pdnAtmIfConfExtLineRateAlarmClear ...to the following o pdnAtmIfConfExtEgressLineRateAlarmSet o pdnAtmIfConfExtEgressLineRateAlarmClear o added the following traps o pdnAtmIfConfExtIngressLineRateAlarmSet o pdnAtmIfConfExtIngressLineRateAlarmClear o deleted the following traps o pdnAtmCACGauranteeFailed o pdnAtmCACGauranteeRestored', 'R. Steinberger o Added pdnAtmCACGauranteeFailed and pdnAtmCACGauranteeRestored. ', 'P. Easwar o added the following traps o pdnAtmIfConfExtLineRateAlarmSet o pdnAtmIfConfExtLineRateAlarmClear o pdnAtmIfConfExtVplNoBandwidthAvail o pdnAtmIfConfExtVclNoBandwidthAvail o changed the description of the following objects o pdnAtmIfConfExtVbrRtBandwidthUtil o pdnAtmIfConfExtVbrNrtBandwidthUtil o removed the DEFVAL clause from the following objects o pdnAtmIfConfExtVbrRtBandwidthUtil o pdnAtmIfConfExtVbrNrtBandwidthUtil', 'J. Strain o added the following objects to pdnAtmIfConfExtTable o pdnAtmIfConfExtBandwidthUtilCbrReserved o pdnAtmIfConfExtBandwidthUtilCbrAssigned o pdnAtmIfConfExtBandwidthUtilVbrRtReserved o pdnAtmIfConfExtBandwidthUtilVbrRtAssigned o pdnAtmIfConfExtBandwidthUtilVbrNrtReserved o pdnAtmIfConfExtBandwidthUtilVbrNrtAssigned o pdnAtmIfConfExtBandwidthUtilUbrReserved o pdnAtmIfConfExtBandwidthUtilUbrAssigned', 'P. Easwar o added pdnAtmIfConfExtUnknownCellThreshold and pdnAtmIfConfExtOcdEventThreshold', 'P. Easwar o Initial Release',))
if mibBuilder.loadTexts: pdnAtmExtMIB.setLastUpdated('200303310000Z')
if mibBuilder.loadTexts: pdnAtmExtMIB.setOrganization('Paradyne Networks MIB Working Group')
if mibBuilder.loadTexts: pdnAtmExtMIB.setContactInfo('Paradyne Networks 331 Newman Springs Road Red Bank, NJ 07701 www.paradyne.com General Comments to: mibwg_team@eng.paradyne.com')
if mibBuilder.loadTexts: pdnAtmExtMIB.setDescription('This MIB Module extends the ATM-MIB defined in rfc2515')
pdnAtmExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1))
pdnAtmExtMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 2))
pdnAtmExtMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 2, 0))
pdnAtmExtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 3))
pdnAtmExtMIBTrafficDescriptorTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 4))
pdnAtmNoClpTaggingNoScrCdvtMdcr = ObjectIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 4, 1))
if mibBuilder.loadTexts: pdnAtmNoClpTaggingNoScrCdvtMdcr.setStatus('current')
if mibBuilder.loadTexts: pdnAtmNoClpTaggingNoScrCdvtMdcr.setDescription('This Traffic Descriptor type is for no CLP with tagging and no Sustained Cell Rate. The Use of the Parameter Vector for this type: Parameter 1: Peak Cell Rate in cells/second CLP=0+1 traffic Parameter 2: CDVT in tenths of a microsecond Parameter 3: Minimum Desired Cell Rate in cells/second (&lt;= PCR) Parameter 4: Tolerance To the MDCR Commitment (&gt;= 1/MDCR) in milliseconds Parameter 5: not used This Traffic Descriptor type is applicable to connections following the UBR.2 conformance definition')
if mibBuilder.loadTexts: pdnAtmNoClpTaggingNoScrCdvtMdcr.setReference('ATM Forum, ATM User-Network Interface, Version 3.0 (UNI 3.0) Specification, 1994. ATM Forum, ATM User-Network Interface, Version 3.1 (UNI 3.1) Specification November 1994. ATM Forum, Traffic Management Specification, Version 4.0, af-tm-0056.000, June 1996. ATM Forum, Traffic Management Specification, Version 4.1, af-tm-0121.000, March 1999. ATM Forum, Addendum to Traffic Management Specification, Version 4.1, for an optional Minimum Desired Cell Rate (MDCR), af-tm-0150.000, July 2000.')
pdnAtmNoClpNoScrCdvtMdcr = ObjectIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 4, 2))
if mibBuilder.loadTexts: pdnAtmNoClpNoScrCdvtMdcr.setStatus('current')
if mibBuilder.loadTexts: pdnAtmNoClpNoScrCdvtMdcr.setDescription('This Traffic Descriptor type is for no CLP and no Sustained Cell Rate. The Use of the Parameter Vector for this type: Parameter 1: Peak Cell Rate in cells/second CLP=0+1 traffic Parameter 2: CDVT in tenths of a microsecond Parameter 3: Minimum Desired Cell Rate in cells/second (&lt;= PCR) Parameter 4: Tolerance To the MDCR Commitment (&gt;= 1/MDCR) in milliseconds Parameter 5: not used This Traffic Descriptor type is applicable to connections following the UBR.1 conformance definition')
if mibBuilder.loadTexts: pdnAtmNoClpNoScrCdvtMdcr.setReference('ATM Forum, ATM User-Network Interface, Version 3.0 (UNI 3.0) Specification, 1994. ATM Forum, ATM User-Network Interface, Version 3.1 (UNI 3.1) Specification November 1994. ATM Forum, Traffic Management Specification, Version 4.0, af-tm-0056.000, June 1996. ATM Forum, Traffic Management Specification, Version 4.1, af-tm-0121.000, March 1999. ATM Forum, Addendum to Traffic Management Specification, Version 4.1, for an optional Minimum Desired Cell Rate (MDCR), af-tm-0150.000, July 2000.')
pdnAtmIfConfExtTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 1), )
if mibBuilder.loadTexts: pdnAtmIfConfExtTable.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtTable.setDescription('The Paradyne Extension to the atmInterfaceConfTable of the ATM-MIB.')
pdnAtmIfConfExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 1, 1), )
atmInterfaceConfEntry.registerAugmentions(("PDN-ATMEXT-MIB", "pdnAtmIfConfExtEntry"))
pdnAtmIfConfExtEntry.setIndexNames(*atmInterfaceConfEntry.getIndexNames())
if mibBuilder.loadTexts: pdnAtmIfConfExtEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtEntry.setDescription('An entry in the Paradyne Extension to the atmInterfaceConfTable of the ATM-MIB.')
pdnAtmIfConfExtVbrRtBandwidthUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAtmIfConfExtVbrRtBandwidthUtil.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtVbrRtBandwidthUtil.setDescription('The bandwidth utilization for realtime vbr type traffic expressed as a percentage.')
pdnAtmIfConfExtVbrNrtBandwidthUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAtmIfConfExtVbrNrtBandwidthUtil.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtVbrNrtBandwidthUtil.setDescription('The bandwidth utilization for non-realtime VBR type traffic expressed as a percentage.')
pdnAtmIfConfExtHecErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 1, 1, 3), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAtmIfConfExtHecErrorThreshold.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtHecErrorThreshold.setDescription('The value of this object represents the threshold value for the number of uncrorrectable HEC errors in a 15 minutes interval. An SNMP link Up/Down trap would be generated if the number of uncorrectable HEC errors in a 15 minutes interval exceeds this threshold. The valid range of this object is 0 to 1000. A value of 0 will cause a trap to be sent on each occurrence of a HEC error. A value of -9999 disables the threshold check. The default value for this object is 100. ')
pdnAtmIfConfExtUnknownCellThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 1, 1, 4), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAtmIfConfExtUnknownCellThreshold.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtUnknownCellThreshold.setDescription('The value of this object represents the threshold value for the number of unknown cells in a 15 minutes interval. An SNMP trap would be generated if the number of unknown cell in a 15 minutes interval exceeds this threshold. The valid range of this object is 0 to 1000. A value of 0 will cause a trap to be sent on each occurrence of an unknown cell. A value of -9999 disables the threshold check. The default value for this object is 10')
pdnAtmIfConfExtOcdEventThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAtmIfConfExtOcdEventThreshold.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtOcdEventThreshold.setDescription('The value of this object represents the threshold value for the number of Out of Cell Delineation(OCD) events in a 15 minutes interval. An SNMP trap would be generated if the number of OCD events in a 15 minutes interval exceeds this threshold. The valid range of this object is 0 to 1000. A value of 0 will cause a trap to be sent on each occurrence of a HEC error. A value of -9999 disables the threshold check. The default value for this object is 0')
pdnAtmIfConfExtBandwidthUtilCbrReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAtmIfConfExtBandwidthUtilCbrReserved.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtBandwidthUtilCbrReserved.setDescription('This object specifies the percent of the interface bandwidth to be allocated to the CBR traffic class.')
pdnAtmIfConfExtBandwidthUtilCbrAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmIfConfExtBandwidthUtilCbrAssigned.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtBandwidthUtilCbrAssigned.setDescription('This object specifies the percent of bandwidth utilization (sometimes reffered to as over subscription) the connection Addmission Control algorithm has already allowed for the CBR class of service.')
pdnAtmIfConfExtBandwidthUtilVbrRtReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAtmIfConfExtBandwidthUtilVbrRtReserved.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtBandwidthUtilVbrRtReserved.setDescription('This object specifies the percent of the interface bandwidth to be allocated to the VBR-rt traffic class.')
pdnAtmIfConfExtBandwidthUtilVbrRtAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmIfConfExtBandwidthUtilVbrRtAssigned.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtBandwidthUtilVbrRtAssigned.setDescription('This object specifies the percent of bandwidth utilization (sometimes reffered to as over subscription) the connection Addmission Control algorithm has already allowed for the VBR-rt class of service.')
pdnAtmIfConfExtBandwidthUtilVbrNrtReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAtmIfConfExtBandwidthUtilVbrNrtReserved.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtBandwidthUtilVbrNrtReserved.setDescription('This object specifies the percent of the interface bandwidth to be allocated to the VBR-nrt traffic class.')
pdnAtmIfConfExtBandwidthUtilVbrNrtAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmIfConfExtBandwidthUtilVbrNrtAssigned.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtBandwidthUtilVbrNrtAssigned.setDescription('This object specifies the percent of bandwidth utilization (sometimes reffered to as over subscription) the connection Addmission Control algorithm has already allowed for the VBR-nrt class of service.')
pdnAtmIfConfExtBandwidthUtilUbrReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAtmIfConfExtBandwidthUtilUbrReserved.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtBandwidthUtilUbrReserved.setDescription('This object specifies the percent of the interface bandwidth to be allocated to the UBR traffic class.')
pdnAtmIfConfExtBandwidthUtilUbrAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmIfConfExtBandwidthUtilUbrAssigned.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtBandwidthUtilUbrAssigned.setDescription('This object specifies the percent of bandwidth utilization (sometimes reffered to as over subscription) the connection Addmission Control algorithm has already allowed for the UBR class of service.')
pdnAtmIfConfExtRateShape = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 46080))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAtmIfConfExtRateShape.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtRateShape.setDescription('This object is used to specify rate shaping on this interface. The valid range of this object is 512 to 46080 [512K..46Mbps] with increments of 64K. The default value will be set depending on the interface.')
pdnAtmTrafficDescrParamExtTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 2), )
if mibBuilder.loadTexts: pdnAtmTrafficDescrParamExtTable.setStatus('current')
if mibBuilder.loadTexts: pdnAtmTrafficDescrParamExtTable.setDescription('The Paradyne Extension to the atmTrafficDescrParamTable of the ATM-MIB.')
pdnAtmTrafficDescrParamExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 2, 1), )
atmTrafficDescrParamEntry.registerAugmentions(("PDN-ATMEXT-MIB", "pdnAtmTrafficDescrParamExtEntry"))
pdnAtmTrafficDescrParamExtEntry.setIndexNames(*atmTrafficDescrParamEntry.getIndexNames())
if mibBuilder.loadTexts: pdnAtmTrafficDescrParamExtEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAtmTrafficDescrParamExtEntry.setDescription('An entry in the Paradyne Extension to the atmTrafficDescrParamTable of the ATM-MIB.')
pdnAtmTrafficDescrParamName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnAtmTrafficDescrParamName.setStatus('current')
if mibBuilder.loadTexts: pdnAtmTrafficDescrParamName.setDescription('The value of this Object identifies the traffic descriptor by a by a name.')
pdnAtmTrafficPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 2, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnAtmTrafficPolicing.setStatus('current')
if mibBuilder.loadTexts: pdnAtmTrafficPolicing.setDescription('The value of this Object determines whether or not the vcl/vpl to which this traffic descriptor is bound will be policed')
pdnAtmTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 2, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pdnAtmTrafficShaping.setStatus('current')
if mibBuilder.loadTexts: pdnAtmTrafficShaping.setDescription('The value of this Object determines whether or not the vcl/vpl to which this traffic descriptor is bound will be rate shaped to the specified traffic contract')
pdnAal5VccExtTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 3), )
if mibBuilder.loadTexts: pdnAal5VccExtTable.setStatus('current')
if mibBuilder.loadTexts: pdnAal5VccExtTable.setDescription('The Paradyne Extension to the aal5VccTable in the ATM-MIB.')
pdnAal5VccExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 3, 1), )
aal5VccEntry.registerAugmentions(("PDN-ATMEXT-MIB", "pdnAal5VccExtEntry"))
pdnAal5VccExtEntry.setIndexNames(*aal5VccEntry.getIndexNames())
if mibBuilder.loadTexts: pdnAal5VccExtEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAal5VccExtEntry.setDescription('An entry in the Paradyne Extension to the aal5VccTable. in the ATM-MIB.')
pdnAal5VccExtOutPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAal5VccExtOutPDUs.setStatus('current')
if mibBuilder.loadTexts: pdnAal5VccExtOutPDUs.setDescription('The total number of AAL5 CPCS PDUs transmitted on the interface associated with an AAL5 entry.')
pdnAal5VccExtInPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAal5VccExtInPDUs.setStatus('current')
if mibBuilder.loadTexts: pdnAal5VccExtInPDUs.setDescription('This total number of AAL5 CPCS PDUs transmitted on the interface associated with an AAL5 entry.')
pdnAtmIfConfExtExcessInvalidCellsAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 2, 0, 1)).setObjects(("IF-MIB", "ifOperStatus"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtUnknownCellThreshold"))
if mibBuilder.loadTexts: pdnAtmIfConfExtExcessInvalidCellsAlarm.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtExcessInvalidCellsAlarm.setDescription('This alarm indicates that the number of cells with uncorrectable HEC erros has exceeded the used defined the threshold. ')
pdnAtmIfConfExtEgressLineRateAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 2, 0, 2)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pdnAtmIfConfExtEgressLineRateAlarmSet.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtEgressLineRateAlarmSet.setDescription('This alarm indicates that the line rate of the specified interface has dropped below a value which violates the traffic contracts of the admitted connections in the egress (transmit) direction')
pdnAtmIfConfExtEgressLineRateAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 2, 0, 102)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pdnAtmIfConfExtEgressLineRateAlarmClear.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtEgressLineRateAlarmClear.setDescription('This alarm indicates that the line rate of the specified interface has risen above a value which would no longer violate the traffic contracts of the admitted connections in the egress (transmit) direction')
pdnAtmIfConfExtVplNoBandwidthAvail = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 2, 0, 3)).setObjects(("ATM-MIB", "atmVpCrossConnectAdminStatus"))
if mibBuilder.loadTexts: pdnAtmIfConfExtVplNoBandwidthAvail.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtVplNoBandwidthAvail.setDescription('This alarm indicates that the traffic contract(s) associated with the Virtual Path (VP) Cross Connect cannot be satisfied by the ATM switch. It is left upto the implementation to decide whether or not the VP cross connect will be admitted')
pdnAtmIfConfExtVclNoBandwidthAvail = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 2, 0, 4)).setObjects(("ATM-MIB", "atmVcCrossConnectAdminStatus"))
if mibBuilder.loadTexts: pdnAtmIfConfExtVclNoBandwidthAvail.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtVclNoBandwidthAvail.setDescription('This alarm indicates that the traffic contract(s) associated with the Virtual Channel (VC) Cross Connect cannot be satisfied by the ATM switch. It is left upto the implementation to decide whether or not the VC cross connect will be admitted')
pdnAtmIfConfExtIngressLineRateAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 2, 0, 5)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pdnAtmIfConfExtIngressLineRateAlarmSet.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtIngressLineRateAlarmSet.setDescription('This alarm indicates that the line rate of the specified interface has dropped below a value which violates the traffic contracts of the admitted connections in the ingress (receive) direction')
pdnAtmIfConfExtIngressLineRateAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 2, 0, 105)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pdnAtmIfConfExtIngressLineRateAlarmClear.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtIngressLineRateAlarmClear.setDescription('This alarm indicates that the line rate of the specified interface has risen above a value which would no longer violate the traffic contracts of the admitted connections in the ingress (receive) direction')
pdnAtmExtMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 3, 1))
pdnAtmExtMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 3, 2))
pdnAtmIfConfExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 3, 2, 1)).setObjects(("PDN-ATMEXT-MIB", "pdnAtmIfConfExtVbrRtBandwidthUtil"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtVbrNrtBandwidthUtil"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtHecErrorThreshold"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtUnknownCellThreshold"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtOcdEventThreshold"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtBandwidthUtilCbrReserved"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtBandwidthUtilCbrAssigned"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtBandwidthUtilVbrRtReserved"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtBandwidthUtilVbrRtAssigned"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtBandwidthUtilVbrNrtReserved"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtBandwidthUtilVbrNrtAssigned"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtBandwidthUtilUbrReserved"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtBandwidthUtilUbrAssigned"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtRateShape"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmIfConfExtGroup = pdnAtmIfConfExtGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAtmIfConfExtGroup.setDescription('Objects grouped for the pdnAtmIfConfExtTable.')
pdnAtmTrafficDescrParamExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 3, 2, 2)).setObjects(("PDN-ATMEXT-MIB", "pdnAtmTrafficDescrParamName"), ("PDN-ATMEXT-MIB", "pdnAtmTrafficPolicing"), ("PDN-ATMEXT-MIB", "pdnAtmTrafficShaping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmTrafficDescrParamExtGroup = pdnAtmTrafficDescrParamExtGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAtmTrafficDescrParamExtGroup.setDescription('Objects grouped for the pdnAtmTrafficDescrParamExtTable.')
pdnAal5VccExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 3, 2, 3)).setObjects(("PDN-ATMEXT-MIB", "pdnAal5VccExtInPDUs"), ("PDN-ATMEXT-MIB", "pdnAal5VccExtOutPDUs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAal5VccExtGroup = pdnAal5VccExtGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAal5VccExtGroup.setDescription('Objects grouped for the pdnAal5VccExtTable.')
pdnAtmExtNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 5, 3, 2, 4)).setObjects(("PDN-ATMEXT-MIB", "pdnAtmIfConfExtExcessInvalidCellsAlarm"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtEgressLineRateAlarmSet"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtEgressLineRateAlarmClear"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtVplNoBandwidthAvail"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtVclNoBandwidthAvail"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtIngressLineRateAlarmSet"), ("PDN-ATMEXT-MIB", "pdnAtmIfConfExtIngressLineRateAlarmClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmExtNotificationGroup = pdnAtmExtNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAtmExtNotificationGroup.setDescription('Objects grouped for Notification defined in this MIB.')
mibBuilder.exportSymbols("PDN-ATMEXT-MIB", pdnAtmIfConfExtVclNoBandwidthAvail=pdnAtmIfConfExtVclNoBandwidthAvail, pdnAtmTrafficDescrParamName=pdnAtmTrafficDescrParamName, pdnAtmIfConfExtBandwidthUtilVbrRtReserved=pdnAtmIfConfExtBandwidthUtilVbrRtReserved, pdnAtmExtNotificationGroup=pdnAtmExtNotificationGroup, pdnAal5VccExtEntry=pdnAal5VccExtEntry, pdnAtmIfConfExtBandwidthUtilUbrAssigned=pdnAtmIfConfExtBandwidthUtilUbrAssigned, pdnAtmIfConfExtBandwidthUtilVbrNrtAssigned=pdnAtmIfConfExtBandwidthUtilVbrNrtAssigned, pdnAtmIfConfExtVbrRtBandwidthUtil=pdnAtmIfConfExtVbrRtBandwidthUtil, pdnAtmIfConfExtBandwidthUtilCbrReserved=pdnAtmIfConfExtBandwidthUtilCbrReserved, pdnAtmIfConfExtBandwidthUtilVbrRtAssigned=pdnAtmIfConfExtBandwidthUtilVbrRtAssigned, pdnAtmExtMIBTraps=pdnAtmExtMIBTraps, pdnAtmIfConfExtBandwidthUtilCbrAssigned=pdnAtmIfConfExtBandwidthUtilCbrAssigned, pdnAtmIfConfExtExcessInvalidCellsAlarm=pdnAtmIfConfExtExcessInvalidCellsAlarm, pdnAal5VccExtTable=pdnAal5VccExtTable, pdnAtmExtMIB=pdnAtmExtMIB, pdnAtmTrafficShaping=pdnAtmTrafficShaping, pdnAtmIfConfExtEgressLineRateAlarmSet=pdnAtmIfConfExtEgressLineRateAlarmSet, pdnAtmIfConfExtVbrNrtBandwidthUtil=pdnAtmIfConfExtVbrNrtBandwidthUtil, pdnAtmIfConfExtEntry=pdnAtmIfConfExtEntry, pdnAtmIfConfExtIngressLineRateAlarmSet=pdnAtmIfConfExtIngressLineRateAlarmSet, PYSNMP_MODULE_ID=pdnAtmExtMIB, pdnAtmIfConfExtVplNoBandwidthAvail=pdnAtmIfConfExtVplNoBandwidthAvail, pdnAal5VccExtInPDUs=pdnAal5VccExtInPDUs, pdnAtmIfConfExtEgressLineRateAlarmClear=pdnAtmIfConfExtEgressLineRateAlarmClear, pdnAtmTrafficDescrParamExtGroup=pdnAtmTrafficDescrParamExtGroup, pdnAtmExtMIBObjects=pdnAtmExtMIBObjects, pdnAtmIfConfExtHecErrorThreshold=pdnAtmIfConfExtHecErrorThreshold, pdnAtmNoClpTaggingNoScrCdvtMdcr=pdnAtmNoClpTaggingNoScrCdvtMdcr, pdnAal5VccExtGroup=pdnAal5VccExtGroup, pdnAtmIfConfExtRateShape=pdnAtmIfConfExtRateShape, pdnAtmExtMIBConformance=pdnAtmExtMIBConformance, pdnAtmIfConfExtBandwidthUtilVbrNrtReserved=pdnAtmIfConfExtBandwidthUtilVbrNrtReserved, pdnAtmTrafficDescrParamExtEntry=pdnAtmTrafficDescrParamExtEntry, pdnAtmNoClpNoScrCdvtMdcr=pdnAtmNoClpNoScrCdvtMdcr, pdnAtmTrafficPolicing=pdnAtmTrafficPolicing, pdnAtmIfConfExtIngressLineRateAlarmClear=pdnAtmIfConfExtIngressLineRateAlarmClear, pdnAtmTrafficDescrParamExtTable=pdnAtmTrafficDescrParamExtTable, pdnAtmIfConfExtUnknownCellThreshold=pdnAtmIfConfExtUnknownCellThreshold, pdnAtmIfConfExtGroup=pdnAtmIfConfExtGroup, pdnAtmExtMIBTrapPrefix=pdnAtmExtMIBTrapPrefix, pdnAtmExtMIBTrafficDescriptorTypes=pdnAtmExtMIBTrafficDescriptorTypes, pdnAal5VccExtOutPDUs=pdnAal5VccExtOutPDUs, pdnAtmIfConfExtBandwidthUtilUbrReserved=pdnAtmIfConfExtBandwidthUtilUbrReserved, pdnAtmExtMibCompliances=pdnAtmExtMibCompliances, pdnAtmIfConfExtOcdEventThreshold=pdnAtmIfConfExtOcdEventThreshold, pdnAtmExtMibGroups=pdnAtmExtMibGroups, pdnAtmIfConfExtTable=pdnAtmIfConfExtTable)
