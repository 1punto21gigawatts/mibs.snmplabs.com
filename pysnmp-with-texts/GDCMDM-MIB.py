#
# PySNMP MIB module GDCMDM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCMDM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:19:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, IpAddress, Gauge32, MibIdentifier, TimeTicks, Unsigned32, Integer32, Bits, iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, enterprises, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Gauge32", "MibIdentifier", "TimeTicks", "Unsigned32", "Integer32", "Bits", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "enterprises", "ObjectIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
mdm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 4))
mdmNetworkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 1), )
if mibBuilder.loadTexts: mdmNetworkConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNetworkConfigTable.setDescription('The GDC VFAST modem network configuration table.')
mdmNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 1, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmNetworkIndex"))
if mibBuilder.loadTexts: mdmNetworkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNetworkEntry.setDescription('A listing of GDC VFAST modem network options.')
mdmNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmNetworkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNetworkIndex.setDescription('A unique index for the Network Table.')
mdmNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switchedNetwork", 1), ("privateLine2Wire", 2), ("privateLine4Wire", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmNetworkType.setStatus('mandatory')
if mibBuilder.loadTexts: mdmNetworkType.setDescription('Command to option the VF line type mode of operation.')
mdmSNTxType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("permissive", 1), ("programmable", 2), ("adjustable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmSNTxType.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSNTxType.setDescription('Command used to select either Permissive or Programable Switched Network Transmit Level. This object is Country Code dependent')
mdmSNTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmSNTxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSNTxLevel.setDescription('Command to select(force) the Switched Network Transmit Level when modem is optioned for adjustable. This object is Country Code dependent')
mdmSNHandshakeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("gdcVfastAuto", 1), ("gdcVfastOnly", 2), ("v32bisAuto", 3), ("v32bisOnly", 4), ("v32Auto", 5), ("v32Only", 6), ("v22bis", 7), ("v22Only", 8), ("bell212", 9), ("bell103", 10), ("v21", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmSNHandshakeMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSNHandshakeMode.setDescription('Available handshake modes. This object is Country Code dependent.')
mdmDTEConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 2), )
if mibBuilder.loadTexts: mdmDTEConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDTEConfigTable.setDescription('The GDC VFAST modem Data Terminal Equipment configuration table.')
mdmDTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 2, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmDTEIndex"))
if mibBuilder.loadTexts: mdmDTEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDTEntry.setDescription('A listing of GDC VFAST modem DTE options.')
mdmDTEIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDTEIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDTEIndex.setDescription('A unique index for the DTE Table.')
mdmDTESpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("autobaud", 1), ("lastAT", 2), ("bps300", 3), ("bps1200", 4), ("bps2400", 5), ("bps4800", 6), ("bps7200", 7), ("bps9600", 8), ("bps12000", 9), ("bps14400", 10), ("bps16800", 11), ("bps19200", 12), ("bps21600", 13), ("bps24000", 14), ("bps26400", 15), ("bps28800", 16), ("bps38400", 17), ("bps57600", 18), ("bps76800", 19), ("bps115200", 20), ("bps128000", 21)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDTESpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDTESpeed.setDescription('This option selects DTE bit Rate.')
mdmCPMResp = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("autobaud", 1), ("lastConnectSpeed", 2), ("bps300", 3), ("bps1200", 4), ("bps2400", 5), ("bps4800", 6), ("bps7200", 7), ("bps9600", 8), ("bps12000", 9), ("bps14400", 10), ("bps16800", 11), ("bps19200", 12), ("bps21600", 13), ("bps24000", 14), ("bps26400", 15), ("bps28800", 16), ("bps38400", 17), ("bps57600", 18), ("bps76800", 19), ("bps115200", 20), ("bps128000", 21)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCPMResp.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCPMResp.setDescription('Selects the response rate of the Call Progress Monitor.')
mdmCharLength = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("data6Stop1", 1), ("data7Stop1", 2), ("data7ParityStop1", 3), ("data8Stop1", 4), ("data7ParityStop2", 5), ("data8ParityStop1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCharLength.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCharLength.setDescription('DTE charater length and format options of the DTE asynchronous data.')
mdmParity = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("even", 1), ("space", 2), ("odd", 3), ("mark", 4), ("auto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmParity.setStatus('mandatory')
if mibBuilder.loadTexts: mdmParity.setDescription('Parity of the async data when the character length option selects parity.')
mdmOverspeed = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nominal", 1), ("extended", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmOverspeed.setStatus('mandatory')
if mibBuilder.loadTexts: mdmOverspeed.setDescription('Option to set DTE async overspeed data tolerated by the modem. Extended = 2.5%. Nominal = 1.25%.')
mdmFlowCntrl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("xonXoffSig", 2), ("cts", 3), ("rtsCts", 4), ("xonXoff", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmFlowCntrl.setStatus('mandatory')
if mibBuilder.loadTexts: mdmFlowCntrl.setDescription('Options to set the modem DTE flow control. disable Disables all flow control. xonXoffSig Enables XON/XOFF signaling between modem and DTE. cts Enables the modem to flow control the DTE via CTS. rtsCts This option operates the same as CTS option as well as allowing RTS to flow control the modem as a ready to receive signal. xonOff Allows the modem to XON/XOFF the DTE yet ignore these signals when sent by the DTE (unidirectional flow control).')
mdmTermEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTermEcho.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTermEcho.setDescription('Option to control the modem echo to the DTE.')
mdmDCDCntrl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceOn", 1), ("real", 2), ("forceOnToggleDisc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDCDCntrl.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDCDCntrl.setDescription('Option the EIA DCD mode of operation. ForceOn DCD always ON. Real DCD will follow CCITT specifications. ForceOnToggleDisc DCD is On but toggle on disconnect as a signaling to the front end.')
mdmCTSCntrl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cmdOnDataRTS", 1), ("cmdOnDataReal", 2), ("realCCITT", 3), ("forceOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCTSCntrl.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCTSCntrl.setDescription('Option the EIA CTS mode of operation. cmdOnDataRTS On during command mode, during data mode will follow RTS. cmdOnDataReal On during command mode, during data mode will follow CCITT specifications. realCCITT It follows CCITT specifications always. ForceON On all the times. ')
mdmDTRTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("forceon", 1), ("offInCmdMode", 2), ("offDisc", 3), ("offDiscRecallUser", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDTRTrans.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDTRTrans.setDescription('Option the modem to respond to loss of DTR. forceon Modem ignore DTR transitions. offInCmdMode Upon transition detection modem will enter command mode. offDisc Upon transition detection modem will disconnect. offDiscRecalUser Upon transition detection modem will disconect and recall the selected User configuration. This object is Country Code dependent.')
mdmDSRCntrl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("onUntilDisc", 1), ("normal", 2), ("followDCD", 3), ("forceOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDSRCntrl.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDSRCntrl.setDescription('Option the EIA DSR mode of operation. onUntilDisc Selects DSR to remain On and glitch Off for disconnect. Normal Causes DSR to be real. followDCD Selects DSR to follow carrier detect. forceOn Selects DSR forced On in all modes.')
mdmDSRCntrlAL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onAnaloop", 1), ("offAnaloop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDSRCntrlAL.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDSRCntrlAL.setDescription('Option the EIA DSR operation during analoop. onAnaloop DSR will turn ON when in analoop offAnaloop DSR is forced Off when in Analoop.')
mdmTXClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("receiverwrap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTXClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTXClockSource.setDescription('Selects the source for TX clock generation. internal The modem uses the internally generated clock source. external The modem uses the DTE clock as a source receiverwrap The modem receiver derived timing clock to be used in the transmitter.')
mdmRTSCTSDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmRTSCTSDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRTSCTSDelay.setDescription('Selects the delay time between RTS coming on and CTS being turned on (.001 sec).')
mdmCarriageReturnCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCarriageReturnCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCarriageReturnCharacter.setDescription('Select the ascii character to be used as the carriage return.')
mdmCharacterAbortDialing = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCharacterAbortDialing.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCharacterAbortDialing.setDescription('Enable/disable the option to abort dialing if a DTE character is detected.')
mdmDelayDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDelayDTR.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDelayDTR.setDescription('Selects the delay time(in Seconds) between making data mode and raising the DTR lead. It is dependent on the mode of operation. When configured for &M0 this register is used to debounce the DTR signal. The default value is five hundredths of a second (0.05second). When configured for &M1 and in data mode, this register sets the time available to the operator to switch the EIA cable from asynchronous equipment to synchronous equipment. When the timer expires, this register is used to debounce the DTR signal as in &M0 mode. The default value is five seconds.')
mdmEscapeCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmEscapeCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEscapeCharacter.setDescription("Select the ascii character to be used as the 'escape to command mode' character.")
mdmLineFeedCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLineFeedCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLineFeedCharacter.setDescription('Select the ascii character to be used as the Line Feed character.')
mdmHangUpDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmHangUpDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHangUpDelay.setDescription('Select the delay time(in Sec) between the modem detecting a command to hang up the line and the disconnect operation.')
mdmEscapeCharacterGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmEscapeCharacterGuardTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEscapeCharacterGuardTime.setDescription('This is the timer the modem will use when determining a valid escape sequence. Select the delay time(in 1/50 Sec). When a valid escape sequence is detected the modem will transfer from the data to command mode.')
mdmOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asyncDataMode", 1), ("asyncCmdsyncData", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmOperatingMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmOperatingMode.setDescription('Option to set the type of data transfer in data mode. asyncDataMode modem operates in async mode during command or data mode. async CmdsyncData In command mode the modem uses async data. In data mode operates in synchronous mode.')
mdmBackSpaceCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmBackSpaceCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: mdmBackSpaceCharacter.setDescription('Select the ascii character to be used as the Back Space character.')
mdmModemConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 3), )
if mibBuilder.loadTexts: mdmModemConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemConfigTable.setDescription('The GDC VFAST modem configuration table.')
mdmModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 3, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmModemIndex"))
if mibBuilder.loadTexts: mdmModemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemEntry.setDescription('A listing of GDC VFAST modem options.')
mdmModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemIndex.setDescription('A unique index for the Modem Option Table.')
mdmRingsToAns = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmRingsToAns.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRingsToAns.setDescription('Selects the number of rings received before the modem Auto Answer. This object is Country Code dependent')
mdmFallFwrdBack = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmFallFwrdBack.setStatus('mandatory')
if mibBuilder.loadTexts: mdmFallFwrdBack.setDescription('Command the modem to enable/disable rate negotiation during a retrain.')
mdmTrellis = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTrellis.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTrellis.setDescription('Enable/disable Trellis negotiation during a handshake.')
mdmSQRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("sQThree", 2), ("sQForever", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmSQRetrain.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSQRetrain.setDescription('Command to option Signal Quality Retrains.')
mdmLongSpaceDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLongSpaceDisc.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLongSpaceDisc.setDescription('Command to enable/disable Long Space Disconnect. enable The modem will transmit 4 seconds of continuous space (BREAK) when ever a disconnect request is detected. If the modem receives more than 1.5 seconds of continuous space (BREAK) while on-line, it will hang up.')
mdmMakeBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("onLossDTR", 2), ("inAL", 3), ("inALorLossRTSorDTR", 4), ("onLossRTS", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmMakeBusy.setStatus('mandatory')
if mibBuilder.loadTexts: mdmMakeBusy.setDescription('Command to option the switched network make busy function disable Does not make busy. onLossDTR Make busy on loss of DTR. inAL Make busy during analoop. inALorLossRTSorDTR Make busy in analoop, loss of RTS or DTR. This object is Country Code dependent')
mdmRDLOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmRDLOptions.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRDLOptions.setDescription('Command to enable/disable Remote Digital Loopback Instigation. disable The modem ignores the inband request to initiate a remote digital loopback. enable The modem accept the inband request to initiated a remote digital loopback.')
mdmTestTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTestTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTestTimer.setDescription('Command to limit any diagnostic test in 10 second intervals. When the value is zero the test runs forever.')
mdmDTETestCntrl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDTETestCntrl.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDTETestCntrl.setDescription('Command to enable/disable diagnostic tests from DTE interface.')
mdmDCDLossDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDCDLossDisc.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDCDLossDisc.setDescription('Command to set the time (0.1sec) between loss of carrier detected and a modem disconnect. This object is Country Code dependent.')
mdmCDRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCDRespTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCDRespTime.setDescription('Command to set the time (in Sec) a carrier signal must be present for the modem to recognize it. This object is Country Code dependent.')
mdmAnswerOriginate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("answerIfRingDetect", 1), ("forceAnswer", 2), ("autoAnswerInOriginate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAnswerOriginate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmAnswerOriginate.setDescription('Command to set the handshake band. answerIfRingDetect Upon detecting a ring the modem will handshake in the answer mode. forceAnswer The modem will be force to handshake in the answer mode. autoAnswerInOriginate When the modem detect a ring it will answer in the originate mode.')
mdmWaitForDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmWaitForDCD.setStatus('mandatory')
if mibBuilder.loadTexts: mdmWaitForDCD.setDescription('This object is used to store the carrier wait time. This is the time which the modem will wait after the dial has been completed until the modem senses carrier detect. It is also used for the dial command modifiers W wait for dial tone before dialing and @ wait for quiet answer before dialing. It also sets the amount of time the modem will wait for ringback when originating a call. This object is Country Code dependent.')
mdmDialerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 4), )
if mibBuilder.loadTexts: mdmDialerConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDialerConfigTable.setDescription('The GDC VFAST dialer configuration table.')
mdmDialerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 4, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmDialerIndex"))
if mibBuilder.loadTexts: mdmDialerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDialerEntry.setDescription('A listing of GDC VFAST modem dialer options.')
mdmDialerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDialerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDialerIndex.setDescription('A unique index for the Dialer Table.')
mdmCPMMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("basic", 1), ("extendedNoCPM", 2), ("extendedDialtone", 3), ("extendedBusy", 4), ("extendedFullCPM", 5), ("extendedFullCPMRingback", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCPMMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCPMMonitor.setDescription('Command used to option the Call Progress Monitor operation. This object is Country Code dependent. basic The modem will blind dial and will only send a CONNECT message for all established links. All CPM is disabled. extendedNoCPM This command is the same as basic with the exception of the connect messages. The modem will send the appropiate connect response of CONNECT followed by the connected speed. extendedDialTone This command is the same as extendedNoCPM command but without blind dialing. The modem will send the NO DIALTONE message if dial tone is not detected. extendedBusy This command forces the modem to blind dial. The modem will not respond with the NO DIALTONE message while all other CPM responses are enabled. extendedFullCPM This command enables all CPM response codes and monitoring, except rinback detection. extendedFullCPMRingback This command enables all CPM response codes and monitoring, and includes ringback detection. This object is Country Code dependent.')
mdmParserSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("at", 1), ("v25async", 2), ("v25HDLC", 3), ("v25bisync", 4), ("noparser", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmParserSelection.setStatus('mandatory')
if mibBuilder.loadTexts: mdmParserSelection.setDescription('Command used to select the DTE parser. The following parsers are available: AT, v25async, v25HDLC, v25bisync, and no parser')
mdmDTRDial = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("disable", 1), ("cellNumber0", 2), ("cellNumber1", 3), ("cellNumber2", 4), ("cellNumber3", 5), ("cellNumber4", 6), ("cellNumber5", 7), ("cellNumber6", 8), ("cellNumber7", 9), ("cellNumber8", 10), ("cellNumber9", 11), ("talkData", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDTRDial.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDTRDial.setDescription('This command sets the modem operation upon detecting an Off to On transition on DTR. disable Transition is ignored. cellNumber0 Dial number stored in cell 0. cellNumber1 Dial number stored in cell 1. cellNumber2 Dial number stored in cell 2. cellNumber3 Dial number stored in cell 3. cellNumber4 Dial number stored in cell 4. cellNumber5 Dial number stored in cell 5. cellNumber6 Dial number stored in cell 6. cellNumber7 Dial number stored in cell 7. cellNumber8 Dial number stored in cell 8. cellNumber9 Dial number stored in cell 9. talkData Starts a handshake.')
mdmDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pulse", 1), ("dtmf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDialType.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDialType.setDescription('This command selects the type of dial. Pulse or DTMF dial. This object is Country Code dependent')
mdmResponseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("enableInOriginate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmResponseMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmResponseMode.setDescription('This Command controls when to send responses. enabled Requests the non-quiet mode, that is, to transmit result codes to the DTE as appropriate. disabled Request the quiet mode which tells the modem not to send any result codes to the DTE. enableInOriginate Disables Call Progress Monitor responses in the answer mode only. This mode is entered on detection of ring signal.')
mdmResponseType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("numeric", 1), ("alpha", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmResponseType.setStatus('mandatory')
if mibBuilder.loadTexts: mdmResponseType.setDescription('This command controls the type of responses. numeric modem responses are in numeric code. alpha modem responses are in alphabetical format.')
mdmPauseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmPauseTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPauseTime.setDescription('This command selects the time for pause characters in the dial string. This object is Country Code dependent.')
mdmWaitForDialtoneTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmWaitForDialtoneTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmWaitForDialtoneTime.setDescription('This command selects the time for the modem to be looking for dialtone before disconnecting. This object is Country Code dependent')
mdmProtocolConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 5), )
if mibBuilder.loadTexts: mdmProtocolConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProtocolConfigTable.setDescription('The GDC VFAST modem Protocol configuration table.')
mdmProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 5, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmProtocolIndex"))
if mibBuilder.loadTexts: mdmProtocolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProtocolEntry.setDescription('A listing of GDC VFAST modem Protocol options.')
mdmProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 5, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmProtocolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProtocolIndex.setDescription('A unique index for the DTE Table.')
mdmCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("txpathonly", 3), ("rxpathonly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCompression.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCompression.setDescription('This command controls the Compression operation when operating in asynchronous mode. disabled No compression available. enabled Compression available in both directions. txpathonly Compression available in the transmitter path only when in V.42bis. In MNP 5 data compression is enabled in both directions. rxpathonly Compression available in the receiver path only when in V.42bis. In MNP 5 data compression is enabled in both directions.')
mdmAsyncProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wire", 1), ("direct", 2), ("mnpreliable", 3), ("autoreliable", 4), ("v42reliable", 5), ("reliableLAPMorMNP", 6), ("v13", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAsyncProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: mdmAsyncProtocol.setDescription('This command controls the Protocols available at the handshake. wire Options the modem to run in wire mode; copying characters from VF port to the DTE port and vice versa. direct Options the modem to run in direct mode; where the DTE and the VF speeds must match, and there is no speed buffering. Direct mode is V.14 asynchronous mode. mnpreliable This option limits error correction to MNP links only or hang up. autoreliable Options the mode to run in autoreliable mode, and the modem will negotiate V.42 or alternate links. With no link, the modem will enter wire mode (speed buffering). v42reliable This option limits error correction to a V.42 (LAPM) link or hang up. reliableLAPMorMNP This option will attempt either a V.42 (LAPM) or MNP link and if either link fails, the modem will hang up. V.13 This option selects V.13 simulated controlled carrier.')
mdmFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("unidirectional", 3), ("bidirectional", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: mdmFlowControl.setDescription('This command controls the flow control type between the modem and the DTE available at the handshake. disabled Disables modem to modem flow control. enabled Enables bidirectional modem flow control based on XON/XOFF signaling. These signals are detected, acted on and optionally deleted from the data stream. Unidirectional provides unidirectional flow control where a modem may send XON/XOFF signals to the remote modem, yet ignore and pass through any these VF received signals to its DTE. bidirectional Acts the same as enabled with the addition of the XON/XOFF pass through option being enabled.')
mdmBreakHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("expediteDest", 1), ("expediteNonDest", 2), ("nonExpediteNonDest", 3), ("ignored", 4), ("timedNonExpediteNonDest", 5), ("timedNonExpediteNonDest2", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmBreakHandling.setStatus('mandatory')
if mibBuilder.loadTexts: mdmBreakHandling.setDescription('This command controls the operation of breaks. expediteDest This option will immediately transmit a break character for a fix time (300 msec) and destroy any currently bufered data. expediteNonDest This option is the same as expediteDest except all buffered data will be save. nonExpediteNonDest This option will transmit a fixed time break character in sequence with the rest of the data. ignore Ignores all break received from the DTE. timedNonExoediteNonDest This option transmits break characters in sequence with the rest of the data for the duration the DTE is transmitting this character. timedNonExpediteNonDest2 Same as above.')
mdmConnAndLinkMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("separateMessages", 1), ("bothAfterLink", 2), ("microcomCompatible", 3), ("connectAfterLink", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmConnAndLinkMessages.setStatus('mandatory')
if mibBuilder.loadTexts: mdmConnAndLinkMessages.setDescription('This command controls when to send the protocol messages. separateMessages This options the modem to send the standard GDC conect message upon reaching data mode plus V.42 message after the link negotiation. The connect message displays VF line speed. bothAfterLink With this option the connect and link messages are send after link negotiation. microcomCompatible This option is the same as bothAfterLink except adds a /RELIABLE at the end of the message when a V.42 error corrected link has been establish. connectAfterLink This option sends only the connect message after the link negotiation. The message will indicate the VF rate for V.13 and V.14 connections and the DTE rate for all other connections.')
mdmErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noBuffer", 1), ("bufferRxData", 2), ("fallbackWithFallbackChar", 3), ("fallbackV14Buffer", 4), ("fallbackV14WithFallbackChar", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmErrorCorrection.setStatus('mandatory')
if mibBuilder.loadTexts: mdmErrorCorrection.setDescription('This command controls how the data is handled when running a protocol. noBuffer This option discards all data coming in from the modem until the receiver modem sends a PROTOCOL: NONE message to the DTE at which time data will be passed through. bufferRxData This option will buffer received data (up to 200 characters) until the PROTOCOL: NONE message is sent. The buffered data will be passed through to the DTE. The modem will fall back to wire mode if more than 200 characters have been received prior to establishing an error correction link. fallbackWithFallbackChar This command discards all incoming data until two consecutive fallback characters are detected at which point the receiver modem falls back to wire mode. One fallback character is passed through to its DTE as data. fallbackV14Buffer This option acts the same as bufferRxData except with no link it falls back to V.14 (direct)mode. fallbackV14WithFallbackChar This option acts as fallbackWithFallbackChar except it also falls back to V.14 (direct) mode.')
mdmV13Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bidirectional", 1), ("txEnable", 2), ("rxEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmV13Mode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmV13Mode.setDescription('This command controls the V13 function. bidirectional Selects bidirectional V.13 simulated controlled carrier. txEnable Selects V.13 Tx side enabled. rxEnable Selects V.13 RX side enabled.')
mdmSyncProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalsync", 1), ("v13sync", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmSyncProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSyncProtocol.setDescription('This command controls the type of sync protocol. normalsync Selects normal synchronous mode. v13sync Selects synchronous V13 mode.')
mdmFrameRetransLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmFrameRetransLimit.setStatus('mandatory')
if mibBuilder.loadTexts: mdmFrameRetransLimit.setDescription('This command limits the number of times the modem will retransmit a frame while in an error correction connection.')
mdmPrivateLineConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 6), )
if mibBuilder.loadTexts: mdmPrivateLineConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPrivateLineConfigTable.setDescription('The GDC VFAST modem Private Line configuration table.')
mdmPrivateLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 6, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmPrivateLineIndex"))
if mibBuilder.loadTexts: mdmPrivateLineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPrivateLineEntry.setDescription('A listing of GDC VFAST Private Line configurations options.')
mdmPrivateLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPrivateLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPrivateLineIndex.setDescription('A unique index for the Private Line Configurations Table.')
mdmPrivateLineTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("dBm0", 1), ("dBm1", 2), ("dBm2", 3), ("dBm3", 4), ("dBm4", 5), ("dBm5", 6), ("dBm6", 7), ("dBm7", 8), ("dBm8", 9), ("dBm9", 10), ("dBm10", 11), ("dBm11", 12), ("dBm12", 13), ("dBm13", 14), ("dBm14", 15), ("dBm15", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmPrivateLineTxLevel.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPrivateLineTxLevel.setDescription('This command selects the transmit level during Private Line operation. This object is Country Code dependent')
mdmPrivateLineHandshakeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gdcVfastonly", 1), ("v32bisonly", 2), ("v32only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmPrivateLineHandshakeMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPrivateLineHandshakeMode.setDescription('This command selects the Private Line Handshake modes')
mdmAutoDialRestoral = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enableWithEndOfSession", 2), ("enableWithoutEndOfSession", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAutoDialRestoral.setStatus('mandatory')
if mibBuilder.loadTexts: mdmAutoDialRestoral.setDescription('This command selects the options for Auto Dial Restoral when the modem is in private line mode. disabled No Auto Dial Restoral allowed. enableWithEndOfSession Enable Auto Dial Restoral with line failure indicator. enableWithoutEnOfSession Enable Auto Dial Restoral without line failure indicator.')
mdmPrivateLineDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmPrivateLineDownTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPrivateLineDownTime.setDescription('This command selects for how long the Private Line must be lost before going to Dial Back Up mode')
mdmDBUtoPLLookbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDBUtoPLLookbackTime.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDBUtoPLLookbackTime.setDescription('This command selects the time for how often the modem must lookback for Private Line restoral. The units are in 10 minutes. Valid range from 0 to 255. When the value 0 is selected this option is disabled.')
mdmAlarmScanTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 7), )
if mibBuilder.loadTexts: mdmAlarmScanTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmAlarmScanTable.setDescription('The GDC VFAST alarm Scan Table.')
mdmAlarmScanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 7, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmAlarmScanIndex"))
if mibBuilder.loadTexts: mdmAlarmScanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmAlarmScanEntry.setDescription('An entry in the GDC VFAST alarm table.')
mdmAlarmScanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 7, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmAlarmScanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmAlarmScanIndex.setDescription('This object is the identifier of the VFAST alarm table.')
mdmAlarmScan = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmAlarmScan.setStatus('mandatory')
if mibBuilder.loadTexts: mdmAlarmScan.setDescription('Reads the alarm scan. There are 8 bytes. byte 1 bit 4 (bit 1.4) No DTR signal bit 2.0 No TXD Transitions bit 2.2 No RXD Transitions bit 2.3 Modem Fallback bit 2.6 Modem on Dial Back Up bit 3.2 Power Up bit 4.0 Poor Signal Quality bit 5.3 DCD Loss bit 6.0-6 no alarms bit 7.0 Modem Configuration Checksum Error bit 7.1 Call Failed bit 7.2 Call Length Exceeded Maximum Allowed bit 7.3 Retrain Count Exceeded Threshold bit 7.4 Ring No Answer bit 7.5 Remote Configuration session active bit 7.6 Test timeout bit 8.0-6 no alarms')
mdmResetSelfPowerBit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mdmResetSelfPowerBit.setStatus('mandatory')
if mibBuilder.loadTexts: mdmResetSelfPowerBit.setDescription('This resets the modem power up alarm.')
mdmMaskAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 8), )
if mibBuilder.loadTexts: mdmMaskAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmMaskAlarmTable.setDescription('The GDC VFAST alarm Mask Table.')
mdmMaskAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 8, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmMaskAlarmIndex"))
if mibBuilder.loadTexts: mdmMaskAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmMaskAlarmEntry.setDescription('An entry in the GDC VFAST alarm mask table.')
mdmMaskAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 8, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmMaskAlarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmMaskAlarmIndex.setDescription('This object is the index of the VFAST alarm mask table.')
mdmDTRLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mask", 1), ("unmask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDTRLoss.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDTRLoss.setDescription('Mask for loss of DTR alarm.')
mdmFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mask", 1), ("unmask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmFallback.setStatus('mandatory')
if mibBuilder.loadTexts: mdmFallback.setDescription('Mask for fallback alarm.')
mdmRxdTran = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mask", 1), ("unmask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmRxdTran.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRxdTran.setDescription('Mask for Receive data transitions alarm.')
mdmTxdTran = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mask", 1), ("unmask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTxdTran.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTxdTran.setDescription('Mask for transmit data transitions alarm.')
mdmDCDLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mask", 1), ("unmask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDCDLoss.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDCDLoss.setDescription('Mask for loss of DCD alarm.')
mdmRingNoAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mask", 1), ("unmask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmRingNoAnswer.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRingNoAnswer.setDescription('Mask for Rings no Answer alarm.')
mdmRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mask", 1), ("unmask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmRetrain.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRetrain.setDescription('Mask for Retrains count exceeded alarm.')
mdmCallLength = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mask", 1), ("unmask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCallLength.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCallLength.setDescription('Mask for Call Length exceeded alarm.')
mdmCallFail = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mask", 1), ("unmask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCallFail.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCallFail.setDescription('Mask for Call Failed alarm.')
mdmConfigErr = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mask", 1), ("unmask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmConfigErr.setStatus('mandatory')
if mibBuilder.loadTexts: mdmConfigErr.setDescription('Mask for Configuration checksum error alarm.')
mdmSignalQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mask", 1), ("unmask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmSignalQuality.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSignalQuality.setDescription('Mask for Poor Signal Quality alarm.')
mdmOnDBU = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mask", 1), ("unmask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmOnDBU.setStatus('mandatory')
if mibBuilder.loadTexts: mdmOnDBU.setDescription('Mask for On Dial Backup alarm.')
mdmRemoteConfigMask = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mask", 1), ("unmask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmRemoteConfigMask.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRemoteConfigMask.setDescription('Mask for Remote Configuration.')
mdmTestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mask", 1), ("unmask", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTestTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTestTimeout.setDescription('Mask for Test timeout.')
mdmThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 9), )
if mibBuilder.loadTexts: mdmThresholdsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmThresholdsTable.setDescription('The GDC VFAST Alarm Thresholds Table.')
mdmThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 9, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmThresholdsIndex"))
if mibBuilder.loadTexts: mdmThresholdsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmThresholdsEntry.setDescription('An entry in the GDC VFAST Alarm Thresholds table.')
mdmThresholdsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 9, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmThresholdsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmThresholdsIndex.setDescription('This object is the identifier of the Thresholds table.')
mdmCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 9, 1, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCallDuration.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCallDuration.setDescription('This option selects the call duration threshold for alarm.')
mdmRetrainThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmRetrainThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRetrainThreshold.setDescription('This option selects the number of retrains threshold for alarm.')
mdmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 10), )
if mibBuilder.loadTexts: mdmStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmStatusTable.setDescription('The GDC VFAST Status Table.')
mdmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 10, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmStatusIndex"))
if mibBuilder.loadTexts: mdmStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmStatusEntry.setDescription('An entry in the GDC VFAST Status table.')
mdmStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 10, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmStatusIndex.setDescription('This object is the identifier of the VFAST Status table.')
mdmPLLookbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPLLookbackStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPLLookbackStatus.setDescription(' Shows the status of Private Line lookback. ')
mdmAutoDialRestoralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmAutoDialRestoralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mdmAutoDialRestoralStatus.setDescription(' Shows the status of Auto Dial Restoral. ')
mdmTXDtransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notransition", 1), ("transition", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTXDtransitions.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTXDtransitions.setDescription(' EIA Status of TXD data transitions. ')
mdmRXDtransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notransition", 1), ("transition", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRXDtransitions.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRXDtransitions.setDescription(' EIA Status of RXD data transitions. ')
mdmRTStransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notransition", 1), ("transition", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRTStransitions.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRTStransitions.setDescription(' EIA Status of Request to Send transitions. ')
mdmDTRtransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notransition", 1), ("transition", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDTRtransitions.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDTRtransitions.setDescription(' EIA Status of Data Terminal Ready transitions. ')
mdmDCDtransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notransition", 1), ("transition", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDCDtransitions.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDCDtransitions.setDescription(' EIA Status of Carrier Detect transitions. ')
mdmTXCLKtransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notransition", 1), ("transition", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTXCLKtransitions.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTXCLKtransitions.setDescription(' EIA Status Transmit Clock transitions. ')
mdmDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDTR.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDTR.setDescription(' EIA Status of Data Terminal Ready. ')
mdmCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCTS.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCTS.setDescription(' EIA Status of Clear to Send. ')
mdmDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDSR.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDSR.setDescription(' EIA Status of Data Set Ready. ')
mdmDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDCD.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDCD.setDescription(' EIA Status of Carrier Detect. ')
mdmSQM = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmSQM.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSQM.setDescription(' EIA Status of Signal Quality. ')
mdmRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRTS.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRTS.setDescription(' EIA Status of Request to Send. ')
mdmSwitchedPrivate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchedNetwork", 1), ("privateLine", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmSwitchedPrivate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSwitchedPrivate.setDescription('Switched Network or Private Line configuration setting.')
mdmControlTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 11), )
if mibBuilder.loadTexts: mdmControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmControlTable.setDescription('The GDC VFAST Control Table.')
mdmControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 11, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmControlIndex"))
if mibBuilder.loadTexts: mdmControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmControlEntry.setDescription('An entry in the GDC VFAST Control table.')
mdmControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 11, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmControlIndex.setDescription('This object is the identifier of the VFAST Control table.')
mdmSoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mdmSoftReset.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSoftReset.setDescription('Forces a soft reset on the modem. Not applicable when the modem is in Remote Configuration session.')
mdmFrontPanel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmFrontPanel.setStatus('mandatory')
if mibBuilder.loadTexts: mdmFrontPanel.setDescription('This command controls the functionality of the front panel Switches.')
mdmMakeClearBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onHook", 1), ("offHook", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmMakeClearBusy.setStatus('mandatory')
if mibBuilder.loadTexts: mdmMakeClearBusy.setDescription('Command used to control the Offhook relay to make busy or clear the VF line. Not applicable when the modem is in Remote Configuration session.')
mdmPLTalkData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("data", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mdmPLTalkData.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPLTalkData.setDescription('Object is used to force the modem to the idle or data state while configured for Private line. Idle, allows the modem to activate the private line option. Data, forces the modem to retrain.')
mdmWhatAreYouTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 12), )
if mibBuilder.loadTexts: mdmWhatAreYouTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmWhatAreYouTable.setDescription('The GDC VFAST What Are You Table.')
mdmWhatAreYouEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 12, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmWhatAreYouIndex"))
if mibBuilder.loadTexts: mdmWhatAreYouEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmWhatAreYouEntry.setDescription('An entry in the GDC VFAST What Are You table.')
mdmWhatAreYouIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 12, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmWhatAreYouIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmWhatAreYouIndex.setDescription('This object is the identifier of the VFAST What Are You table.')
mdmVFCard = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 82, 127))).clone(namedValues=NamedValues(("domestic", 1), ("cardA", 65), ("cardB", 66), ("cardC", 67), ("cardD", 68), ("cardE", 69), ("cardF", 70), ("cardG", 71), ("cardH", 72), ("cardJ", 74), ("cardK", 75), ("cardL", 76), ("cardM", 77), ("cardN", 78), ("cardP", 80), ("cardR", 82), ("noCard", 127)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmVFCard.setStatus('mandatory')
if mibBuilder.loadTexts: mdmVFCard.setDescription('This function returns the value the VF card attached to the modem.')
mdmDTECard = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v35", 1), ("eia530", 2), ("eia232", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDTECard.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDTECard.setDescription('This function returns the type of DTE card attached to the modem.')
mdmProductCode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(23))).clone(namedValues=NamedValues(("dmsVfast", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmProductCode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmProductCode.setDescription('This identifies what type of device this is.')
mdmCodeRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 12, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCodeRev.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCodeRev.setDescription('This function returns the firmware code level. example 01 - A- 02 - B-')
mdmBootRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 12, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmBootRev.setStatus('mandatory')
if mibBuilder.loadTexts: mdmBootRev.setDescription('This function returns the boot firmware level. example 01 - A- 02 - B-')
mdmCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 12, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCountryCode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCountryCode.setDescription('This function returns the country code number in three bytes. Each byte is the hex value of an decimal number. Example hex 30,30,31 is the country code of USA 001 30,34,34 is the country code of UK 044 ')
mdmDiagnosticTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 13), )
if mibBuilder.loadTexts: mdmDiagnosticTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiagnosticTable.setDescription('The GDC VFAST diagnostics table. Not applicable when the modem is in Remote Configuration session.')
mdmDiagnosticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 13, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmDiagnosticIndex"))
if mibBuilder.loadTexts: mdmDiagnosticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiagnosticEntry.setDescription('A listing of GDC VFAST diagnostic tests')
mdmDiagnosticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 13, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDiagnosticIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiagnosticIndex.setDescription('A unique index for the Diagnostic Table.')
mdmDiagnosticTest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("terminateTest", 1), ("analoop", 2), ("analoopSelfTest", 3), ("remoteDigitalLoop", 4), ("remoteDigitalLoopSelfTest", 5), ("selfTest", 6), ("digitalLoop", 7)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mdmDiagnosticTest.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiagnosticTest.setDescription('This function selects the test. Not applicable when the modem is in Remote Configuration session.')
mdmDiagnosticResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDiagnosticResults.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiagnosticResults.setDescription('This function reads the test results in bit errors.')
mdmDiagnosticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 68, 96, 97))).clone(namedValues=NamedValues(("rmtDigLpHsk", 1), ("inboundRmtDigLp", 2), ("rmtDigLp", 4), ("localDigLp", 8), ("analoopHsk", 16), ("analoop", 32), ("selftest", 64), ("rmtDigLpSelftest", 68), ("analoopSelftest", 96), ("notInTest", 97)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDiagnosticStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiagnosticStatus.setDescription(' Diagnostic status of which test is running. Not applicable when the modem is in Remote Configuration session.')
mdmTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8, 16, 17))).clone(namedValues=NamedValues(("canNotBeDone", 4), ("terminated", 8), ("timedout", 16), ("noPrevStatus", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTestStatus.setDescription(" Test Status canNotBeDone - means test can not be done at this time terminated - means the test was terminated, could be terminated via the front panel timedout - the modem's test timer expired noPrevStatus - means that no status is currently available Not applicable when the modem is in Remote Configuration session.")
mdmTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 13, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTestDuration.setDescription(' Time of modem in test, counted in timeticks. Not applicable when the modem is in Remote Configuration session.')
mdmDialingFunctionTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 14), )
if mibBuilder.loadTexts: mdmDialingFunctionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDialingFunctionTable.setDescription('The GDC VFAST modem dialing function table.')
mdmDialingFunctionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 14, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmDialFunctionIndex"))
if mibBuilder.loadTexts: mdmDialingFunctionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDialingFunctionEntry.setDescription('A listing of GDC VFAST modem dialing function parameters.')
mdmDialFunctionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 14, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDialFunctionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDialFunctionIndex.setDescription('A unique index for the Dialing Function Table.')
mdmManualDial = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mdmManualDial.setStatus('mandatory')
if mibBuilder.loadTexts: mdmManualDial.setDescription('Command to instruct the modem to dial the following number, n. Not applicable when modem in remote configuration session.')
mdmTerminateCall = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("goOnhook", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mdmTerminateCall.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTerminateCall.setDescription('Command to instruct the mode to disconnect the call and go to idle.')
mdmDialStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 33))).clone(namedValues=NamedValues(("disconnect", 1), ("idle", 2), ("dial", 4), ("training", 8), ("retrain", 16), ("data", 32), ("inTest", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDialStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDialStatus.setDescription(" Dial Status information 'inTest' means the modem is currently in a test mode.")
mdmCallProgressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10, 16, 17, 18, 19, 32, 64, 128, 256, 257, 258, 259, 260))).clone(namedValues=NamedValues(("ringback", 1), ("incomingRing", 2), ("busy", 4), ("noAnswer", 8), ("ringAndNoAnswer", 10), ("noCarrier", 16), ("ringbackNoCarrier", 17), ("ringNoCarrier", 18), ("ringNoCarrier2", 19), ("noDialtone", 32), ("noLoopCurrent", 64), ("unobtainableNumber", 128), ("connect", 256), ("connectRingback", 257), ("connectIncomingRing", 258), ("connectIncomingRing2", 259), ("noPrevStatus", 260)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCallProgressStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCallProgressStatus.setDescription(' Call Progress Status ')
mdmDialingCellsFunctionTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 15), )
if mibBuilder.loadTexts: mdmDialingCellsFunctionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDialingCellsFunctionTable.setDescription('The GDC VFAST modem dialing cells function table.')
mdmDialingCellsFunctionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 15, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmDialCellFunctionIndex"), (0, "GDCMDM-MIB", "mdmCellNumber"))
if mibBuilder.loadTexts: mdmDialingCellsFunctionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDialingCellsFunctionEntry.setDescription('A listing of GDC VFAST modem dialing cells function parameters.')
mdmDialCellFunctionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 15, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDialCellFunctionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDialCellFunctionIndex.setDescription('A unique index for the Dialing Function Table. Not applicable when modem in remote configuration session.')
mdmCellNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCellNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCellNumber.setDescription('Command to instruct the modem to attempt dialing the phone number stored in Cell n. Not applicable when modem in remote configuration session.')
mdmDial = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("goDial", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mdmDial.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDial.setDescription(' Command modem to dial. Not applicable when modem in remote configuration session.')
mdmCellPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCellPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCellPhoneNumber.setDescription(' Command to cause the modem to display the phone number stored in any of the 10 dial cell locations (0-9).')
mdmTerminateCellCall = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("goOnhook", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mdmTerminateCellCall.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTerminateCellCall.setDescription(' Command to instruct the mode to disconnect the call and go to idle.')
mdmMaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 16), )
if mibBuilder.loadTexts: mdmMaintenanceTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmMaintenanceTable.setDescription('The GDC VFAST Maintenance Table.')
mdmMaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 16, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmMaintenanceIndex"))
if mibBuilder.loadTexts: mdmMaintenanceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmMaintenanceEntry.setDescription('An entry in the GDC VFAST Maintenance table.')
mdmMaintenanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 16, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmMaintenanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmMaintenanceIndex.setDescription('A unique index for the Maintenance Index Table.')
mdmSaveRecallConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("recallFactoryDefault0", 1), ("recallFactoryDefault1", 2), ("recallFactoryDefault2", 3), ("recallFactoryDefault3", 4), ("recallUserProfile0", 5), ("recallUserProfile1", 6), ("recallUserProfile2", 7), ("recallUserProfile3", 8), ("saveUserProfile0", 9), ("saveUserProfile1", 10), ("saveUserProfile2", 11), ("saveUserProfile3", 12)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mdmSaveRecallConfig.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSaveRecallConfig.setDescription('This command allows the user to load or save factory or user profile configurations into the modem.')
mdmConfigCksum = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 16, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmConfigCksum.setStatus('mandatory')
if mibBuilder.loadTexts: mdmConfigCksum.setDescription('Reads the configuration checksum of the modem.')
mdmPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 16, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mdmPassword.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPassword.setDescription('This function sets the modem password. The maximum number of digits in the password must be equal or less than 10. If no password is entered the password is non-functional.')
mdmSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 16, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSerialNumber.setDescription('Network element serial number')
mdmPowerUpProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("zero", 1), ("one", 2), ("two", 3), ("three", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmPowerUpProfile.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPowerUpProfile.setDescription('Command to select 1 of 4 custom modem configurations at power up.')
mdmPasswordOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enablehandshake", 2), ("enableonline", 3), ("enable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmPasswordOperation.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPasswordOperation.setDescription('This object identifies the Password Operation. The GDC proprietary handshake password validation operation and the on line (entered by the remote user) password validation operation can be enabled or disabled globally or selectively. disabled - password operations disabled enablehandshake - enable the handshake password operation enableonline - enable the answering modem to locally validate the remote user entered password enable - enable both handshake and online password operations Not applicable when the modem is in Remote Configuration session.')
mdmStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 17), )
if mibBuilder.loadTexts: mdmStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmStatisticsTable.setDescription('The GDC VFAST Statistics Table.')
mdmStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 17, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmStatisticsIndex"))
if mibBuilder.loadTexts: mdmStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmStatisticsEntry.setDescription('An entry in the GDC VFAST Statistics table.')
mdmStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 17, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmStatisticsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmStatisticsIndex.setDescription('This object is the identifier of the VFAST Statistics table.')
mdmDCERate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("bps300", 2), ("bps1200", 3), ("bps2400", 4), ("bps4800", 5), ("bps7200", 6), ("bps9600", 7), ("bps12000", 8), ("bps14400", 9), ("bps16800", 10), ("bps19200", 11), ("bps21600", 12), ("bps24000", 13), ("bps26400", 14), ("bps28800", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDCERate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDCERate.setDescription('This object identifies the DCE speed that the modem is operating.')
mdmCallDurationStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 17, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCallDurationStat.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCallDurationStat.setDescription(' This function reads the duration of the last or current Switched Network connection in timeticks. ')
mdmRetrainCount = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRetrainCount.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRetrainCount.setDescription(' This function reads the number of retrains.')
mdmFallbackCount = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmFallbackCount.setStatus('mandatory')
if mibBuilder.loadTexts: mdmFallbackCount.setDescription(' This function reads the number of times that the modem falls back.')
mdmFallforwardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 17, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmFallforwardCount.setStatus('mandatory')
if mibBuilder.loadTexts: mdmFallforwardCount.setDescription(' This function reads the number of times that the modem falls forward.')
mdmRxSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 17, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRxSignalLevel.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRxSignalLevel.setDescription(' This function reads the input signal level in dB.')
mdmSignaltoNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 17, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmSignaltoNoiseRatio.setStatus('mandatory')
if mibBuilder.loadTexts: mdmSignaltoNoiseRatio.setDescription(' This function reads the signal to noise ratio in dB.')
mdmAnswerOriginateStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("originate", 1), ("answer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmAnswerOriginateStat.setStatus('mandatory')
if mibBuilder.loadTexts: mdmAnswerOriginateStat.setDescription(' This function reads the band that the modem is operating in data mode.')
mdmDiscReason = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("usertimeout", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDiscReason.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDiscReason.setDescription('This function reads the reason why the modem has disconnected. usertimeout - user timed out while entering prompted information.')
mdmCompressionEfficiency = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 17, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCompressionEfficiency.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCompressionEfficiency.setDescription("The number of bytes transferred into the compression encoder divided by the number of bytes transferred out of the encoder, multiplied by 100 for either the current or last call. If a data compression protocol is not in use, this value shall be '100'.")
mdmThruput = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 17, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmThruput.setStatus('mandatory')
if mibBuilder.loadTexts: mdmThruput.setDescription('The data thruput rate is the number of bytes received from the DCE and then sent to the DTE per second.')
mdmRemoteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 4, 18), )
if mibBuilder.loadTexts: mdmRemoteConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRemoteConfigTable.setDescription('The GDC VFAST Remote Configuration Table.')
mdmRemoteConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 4, 18, 1), ).setIndexNames((0, "GDCMDM-MIB", "mdmRemoteConfigIndex"))
if mibBuilder.loadTexts: mdmRemoteConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRemoteConfigEntry.setDescription('An entry in the GDC VFAST Remote Config table.')
mdmRemoteConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 18, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRemoteConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRemoteConfigIndex.setDescription('This object is the identifier of the VFAST Remote Configuration table.')
mdmRemoteConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enableDTE", 2), ("enableDMS", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmRemoteConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRemoteConfiguration.setDescription('This object options the Remote configuration for the local unit before dial.')
mdmEndRemoteConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noUpdate", 1), ("update", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mdmEndRemoteConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: mdmEndRemoteConfiguration.setDescription(' This option tells the far end unit to disconnect and update the options or not that have been changed during the remote configuration session.')
mdmPasswordRemoteConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 4, 18, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mdmPasswordRemoteConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPasswordRemoteConfiguration.setDescription(' This option stores the Remote Configuration Password. When a password is stored in the answer modem it must be matched during the handshake by the originating modem. If the password matching fails, the answer modem will drop the connection. Not applicable when the modem is in Remote Configuration session.')
mdmMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 498, 4, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mdmMIBVersion.setDescription('The version number of the MIB, to allow products to know which MIB is being supported. The version number will be x.yzT where x is a major revision (1-9), y is a minor revision(0-9), z is a typo revision (0-9) and T indicates the MIB is still a test revision(A-Z). When a release is complete no T should exist.')
mdmCallStatsTrap = NotificationType((1, 3, 6, 1, 4, 1, 498, 4) + (0,1)).setObjects(("GDCMDM-MIB", "mdmDCERate"), ("GDCMDM-MIB", "mdmRetrainCount"), ("GDCMDM-MIB", "mdmFallbackCount"), ("GDCMDM-MIB", "mdmFallforwardCount"), ("GDCMDM-MIB", "mdmRxSignalLevel"), ("GDCMDM-MIB", "mdmSignaltoNoiseRatio"), ("GDCMDM-MIB", "mdmAnswerOriginateStat"), ("GDCMDM-MIB", "mdmCallDurationStat"), ("GDCMDM-MIB", "mdmDiscReason"), ("GDCMDM-MIB", "mdmCompressionEfficiency"), ("GDCMDM-MIB", "mdmThruput"))
if mibBuilder.loadTexts: mdmCallStatsTrap.setDescription('This is the Call Statistics Trap. When a V.F 28.8 modem disconnects from a call after data has passed, it will send call statistics information. ')
mibBuilder.exportSymbols("GDCMDM-MIB", mdmProtocolConfigTable=mdmProtocolConfigTable, mdmConnAndLinkMessages=mdmConnAndLinkMessages, mdmRemoteConfigIndex=mdmRemoteConfigIndex, mdmDialCellFunctionIndex=mdmDialCellFunctionIndex, mdmRemoteConfigTable=mdmRemoteConfigTable, mdmProductCode=mdmProductCode, mdmSNTxLevel=mdmSNTxLevel, mdmPrivateLineHandshakeMode=mdmPrivateLineHandshakeMode, mdmTerminateCall=mdmTerminateCall, mdmConfigCksum=mdmConfigCksum, mdmDiagnosticResults=mdmDiagnosticResults, mdmThruput=mdmThruput, mdmRxdTran=mdmRxdTran, mdmCodeRev=mdmCodeRev, mdmPrivateLineIndex=mdmPrivateLineIndex, mdmAutoDialRestoralStatus=mdmAutoDialRestoralStatus, mdmCallDurationStat=mdmCallDurationStat, mdmCellNumber=mdmCellNumber, gdc=gdc, mdmDTR=mdmDTR, mdmDialerIndex=mdmDialerIndex, mdmCompressionEfficiency=mdmCompressionEfficiency, mdmCountryCode=mdmCountryCode, mdmRetrainCount=mdmRetrainCount, mdmTerminateCellCall=mdmTerminateCellCall, mdmDSRCntrl=mdmDSRCntrl, mdmDTRLoss=mdmDTRLoss, mdmFallbackCount=mdmFallbackCount, mdmDSRCntrlAL=mdmDSRCntrlAL, mdmDTEntry=mdmDTEntry, mdmDialingFunctionEntry=mdmDialingFunctionEntry, mdmMaskAlarmIndex=mdmMaskAlarmIndex, mdmRetrainThreshold=mdmRetrainThreshold, mdmMIBVersion=mdmMIBVersion, mdmMakeBusy=mdmMakeBusy, mdmControlEntry=mdmControlEntry, mdmDiagnosticTable=mdmDiagnosticTable, mdmCTS=mdmCTS, mdmControlTable=mdmControlTable, mdm=mdm, mdmEscapeCharacterGuardTime=mdmEscapeCharacterGuardTime, mdmMakeClearBusy=mdmMakeClearBusy, mdmMaintenanceTable=mdmMaintenanceTable, mdmFallforwardCount=mdmFallforwardCount, mdmRetrain=mdmRetrain, mdmRDLOptions=mdmRDLOptions, mdmStatusEntry=mdmStatusEntry, mdmModemEntry=mdmModemEntry, mdmCPMResp=mdmCPMResp, mdmDialerEntry=mdmDialerEntry, mdmSQM=mdmSQM, mdmCharacterAbortDialing=mdmCharacterAbortDialing, mdmAutoDialRestoral=mdmAutoDialRestoral, mdmTrellis=mdmTrellis, mdmTestTimeout=mdmTestTimeout, mdmTestTimer=mdmTestTimer, mdmDSR=mdmDSR, mdmStatisticsEntry=mdmStatisticsEntry, mdmOperatingMode=mdmOperatingMode, mdmThresholdsTable=mdmThresholdsTable, mdmResetSelfPowerBit=mdmResetSelfPowerBit, mdmAlarmScanIndex=mdmAlarmScanIndex, mdmFrameRetransLimit=mdmFrameRetransLimit, mdmAlarmScan=mdmAlarmScan, mdmRXDtransitions=mdmRXDtransitions, mdmNetworkIndex=mdmNetworkIndex, mdmTermEcho=mdmTermEcho, mdmDelayDTR=mdmDelayDTR, mdmDialerConfigTable=mdmDialerConfigTable, mdmPrivateLineConfigTable=mdmPrivateLineConfigTable, mdmWaitForDialtoneTime=mdmWaitForDialtoneTime, mdmCompression=mdmCompression, mdmMaintenanceEntry=mdmMaintenanceEntry, mdmDCDLossDisc=mdmDCDLossDisc, mdmFallFwrdBack=mdmFallFwrdBack, mdmFrontPanel=mdmFrontPanel, mdmSyncProtocol=mdmSyncProtocol, mdmCallLength=mdmCallLength, mdmSignalQuality=mdmSignalQuality, mdmNetworkType=mdmNetworkType, mdmPowerUpProfile=mdmPowerUpProfile, mdmStatisticsIndex=mdmStatisticsIndex, mdmV13Mode=mdmV13Mode, mdmTestStatus=mdmTestStatus, mdmSNTxType=mdmSNTxType, mdmSignaltoNoiseRatio=mdmSignaltoNoiseRatio, mdmModemIndex=mdmModemIndex, mdmLongSpaceDisc=mdmLongSpaceDisc, mdmProtocolEntry=mdmProtocolEntry, mdmDTESpeed=mdmDTESpeed, mdmTXClockSource=mdmTXClockSource, mdmMaskAlarmTable=mdmMaskAlarmTable, mdmCallStatsTrap=mdmCallStatsTrap, mdmDialType=mdmDialType, mdmWhatAreYouIndex=mdmWhatAreYouIndex, mdmDCD=mdmDCD, mdmSwitchedPrivate=mdmSwitchedPrivate, mdmCTSCntrl=mdmCTSCntrl, mdmRemoteConfigMask=mdmRemoteConfigMask, mdmAnswerOriginateStat=mdmAnswerOriginateStat, mdmDial=mdmDial, mdmCellPhoneNumber=mdmCellPhoneNumber, mdmDTRTrans=mdmDTRTrans, mdmDiagnosticEntry=mdmDiagnosticEntry, mdmModemConfigTable=mdmModemConfigTable, mdmDialStatus=mdmDialStatus, mdmDTECard=mdmDTECard, mdmNetworkConfigTable=mdmNetworkConfigTable, mdmDiagnosticIndex=mdmDiagnosticIndex, mdmDialFunctionIndex=mdmDialFunctionIndex, mdmAsyncProtocol=mdmAsyncProtocol, mdmCallFail=mdmCallFail, mdmDBUtoPLLookbackTime=mdmDBUtoPLLookbackTime, mdmPasswordOperation=mdmPasswordOperation, mdmDiagnosticStatus=mdmDiagnosticStatus, mdmDTETestCntrl=mdmDTETestCntrl, mdmRemoteConfigEntry=mdmRemoteConfigEntry, mdmCarriageReturnCharacter=mdmCarriageReturnCharacter, mdmRxSignalLevel=mdmRxSignalLevel, mdmParity=mdmParity, mdmOverspeed=mdmOverspeed, mdmPrivateLineTxLevel=mdmPrivateLineTxLevel, mdmControlIndex=mdmControlIndex, mdmCharLength=mdmCharLength, mdmThresholdsIndex=mdmThresholdsIndex, mdmCDRespTime=mdmCDRespTime, mdmSoftReset=mdmSoftReset, mdmSNHandshakeMode=mdmSNHandshakeMode, mdmRTSCTSDelay=mdmRTSCTSDelay, mdmRTStransitions=mdmRTStransitions, mdmAnswerOriginate=mdmAnswerOriginate, mdmPLLookbackStatus=mdmPLLookbackStatus, mdmRTS=mdmRTS, mdmDiscReason=mdmDiscReason, mdmPrivateLineEntry=mdmPrivateLineEntry, mdmDialingFunctionTable=mdmDialingFunctionTable, mdmRingsToAns=mdmRingsToAns, mdmStatusTable=mdmStatusTable, mdmTestDuration=mdmTestDuration, mdmDTEConfigTable=mdmDTEConfigTable, mdmDCERate=mdmDCERate, mdmResponseType=mdmResponseType, mdmPasswordRemoteConfiguration=mdmPasswordRemoteConfiguration, mdmFlowControl=mdmFlowControl, mdmEndRemoteConfiguration=mdmEndRemoteConfiguration, mdmCallProgressStatus=mdmCallProgressStatus, mdmDCDLoss=mdmDCDLoss, mdmOnDBU=mdmOnDBU, mdmAlarmScanTable=mdmAlarmScanTable, mdmDiagnosticTest=mdmDiagnosticTest, mdmManualDial=mdmManualDial, mdmHangUpDelay=mdmHangUpDelay, mdmCPMMonitor=mdmCPMMonitor, mdmTXCLKtransitions=mdmTXCLKtransitions, mdmPLTalkData=mdmPLTalkData, mdmVFCard=mdmVFCard, mdmAlarmScanEntry=mdmAlarmScanEntry, mdmDialingCellsFunctionTable=mdmDialingCellsFunctionTable, mdmWaitForDCD=mdmWaitForDCD, mdmDialingCellsFunctionEntry=mdmDialingCellsFunctionEntry, mdmPassword=mdmPassword, mdmDCDCntrl=mdmDCDCntrl, mdmBackSpaceCharacter=mdmBackSpaceCharacter, mdmThresholdsEntry=mdmThresholdsEntry, mdmNetworkEntry=mdmNetworkEntry, mdmErrorCorrection=mdmErrorCorrection, mdmWhatAreYouTable=mdmWhatAreYouTable, mdmSerialNumber=mdmSerialNumber, mdmRemoteConfiguration=mdmRemoteConfiguration, mdmBreakHandling=mdmBreakHandling, mdmSQRetrain=mdmSQRetrain, mdmFlowCntrl=mdmFlowCntrl, mdmWhatAreYouEntry=mdmWhatAreYouEntry, mdmMaskAlarmEntry=mdmMaskAlarmEntry, mdmDTRtransitions=mdmDTRtransitions, mdmPrivateLineDownTime=mdmPrivateLineDownTime, mdmDTRDial=mdmDTRDial, mdmTXDtransitions=mdmTXDtransitions, mdmDTEIndex=mdmDTEIndex, mdmMaintenanceIndex=mdmMaintenanceIndex, mdmStatisticsTable=mdmStatisticsTable, mdmParserSelection=mdmParserSelection, mdmCallDuration=mdmCallDuration, mdmResponseMode=mdmResponseMode, mdmConfigErr=mdmConfigErr, mdmSaveRecallConfig=mdmSaveRecallConfig, mdmTxdTran=mdmTxdTran, mdmStatusIndex=mdmStatusIndex, mdmProtocolIndex=mdmProtocolIndex, mdmBootRev=mdmBootRev, mdmEscapeCharacter=mdmEscapeCharacter, mdmRingNoAnswer=mdmRingNoAnswer, mdmDCDtransitions=mdmDCDtransitions, mdmLineFeedCharacter=mdmLineFeedCharacter, mdmFallback=mdmFallback, mdmPauseTime=mdmPauseTime)
