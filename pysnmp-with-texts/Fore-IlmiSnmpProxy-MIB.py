#
# PySNMP MIB module Fore-IlmiSnmpProxy-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-IlmiSnmpProxy-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ilmisnmp, = mibBuilder.importSymbols("Fore-Common-MIB", "ilmisnmp")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Bits, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, ModuleIdentity, iso, ObjectIdentity, Counter64, Unsigned32, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "ModuleIdentity", "iso", "ObjectIdentity", "Counter64", "Unsigned32", "NotificationType", "Integer32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
foreIlmiSnmpProxyModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 1, 10, 1))
if mibBuilder.loadTexts: foreIlmiSnmpProxyModule.setLastUpdated('9609120000Z')
if mibBuilder.loadTexts: foreIlmiSnmpProxyModule.setOrganization('FORE')
if mibBuilder.loadTexts: foreIlmiSnmpProxyModule.setContactInfo(' Postal: FORE Systems Inc. 1000 FORE Drive Warrendale, PA 15086-7502 Tel: +1 724 742 6900 Email: nm_mibs@fore.com Web: http://www.fore.com')
if mibBuilder.loadTexts: foreIlmiSnmpProxyModule.setDescription('This MIB module defines the FORE Systems specific SNMP Proxy information for the ILMI VCI. It provides for an ISP table. Each table entry contains the information necessary for a device to complete an SNMP request over the ILMI VCI specified. Each table entry also contains information as to the status of the request and the values returned in response by the connected device.')
ispTable = MibTable((1, 3, 6, 1, 4, 1, 326, 1, 10, 2), )
if mibBuilder.loadTexts: ispTable.setStatus('current')
if mibBuilder.loadTexts: ispTable.setDescription('A table of SNMP requests to be made over the ILMI VCI.')
ispEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 1, 10, 2, 1), ).setIndexNames((0, "Fore-IlmiSnmpProxy-MIB", "ispPort"), (0, "Fore-IlmiSnmpProxy-MIB", "ispVPI"), (0, "Fore-IlmiSnmpProxy-MIB", "ispIndex"))
if mibBuilder.loadTexts: ispEntry.setStatus('current')
if mibBuilder.loadTexts: ispEntry.setDescription('A table entry consisting of one SNMP request.')
ispPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 10, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: ispPort.setStatus('current')
if mibBuilder.loadTexts: ispPort.setDescription('The port index of the ILMI instance to use for SNMP requests.')
ispVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 10, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: ispVPI.setStatus('current')
if mibBuilder.loadTexts: ispVPI.setDescription('The VPI of the ILMI instance to use for SNMP requests.')
ispIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 10, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: ispIndex.setStatus('current')
if mibBuilder.loadTexts: ispIndex.setDescription('A unique index used to differentiate SNMP requests.')
ispOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("get", 1), ("getnext", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispOperation.setStatus('current')
if mibBuilder.loadTexts: ispOperation.setDescription('Whether the SNMP request is a get or getnext. This MIB does not support set requests at this time')
ispOID = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 10, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispOID.setStatus('current')
if mibBuilder.loadTexts: ispOID.setDescription('The OID for the SNMP request.')
ispConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doOnce", 1), ("doEveryIlmiRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispConfStatus.setStatus('current')
if mibBuilder.loadTexts: ispConfStatus.setDescription('When to perform the SNMP request.')
ispOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2), ("success", 3), ("failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ispOperStatus.setStatus('current')
if mibBuilder.loadTexts: ispOperStatus.setDescription('The state of the request at the current time. Idle denotes that the request has not been made. InProgress denotes that the request is currently being made. Success denotes that the last request was successful and ispRespOID and ispValue are valid. Failure denotes that the last request was not successful.')
ispCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 10, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispCommunityName.setStatus('current')
if mibBuilder.loadTexts: ispCommunityName.setDescription('The community string for the SNMP request.')
ispRespOID = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 10, 2, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ispRespOID.setStatus('current')
if mibBuilder.loadTexts: ispRespOID.setDescription('The OID in the response packet of the SNMP request. This is only valid if ispOperStatus has a value of success.')
ispValue = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 10, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ispValue.setStatus('current')
if mibBuilder.loadTexts: ispValue.setDescription('The value returned by a get, or getnext. This is encoded in ASCII format and is only valid if ispOperStatus has a value of success.')
ispRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 1, 10, 2, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispRowStatus.setStatus('current')
if mibBuilder.loadTexts: ispRowStatus.setDescription('The status of this entry.')
ispNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 326, 1, 10, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ispNextIndex.setStatus('current')
if mibBuilder.loadTexts: ispNextIndex.setDescription('The next free ispIndex in the ispTable.')
mibBuilder.exportSymbols("Fore-IlmiSnmpProxy-MIB", ispIndex=ispIndex, ispOperation=ispOperation, ispTable=ispTable, ispCommunityName=ispCommunityName, PYSNMP_MODULE_ID=foreIlmiSnmpProxyModule, ispRowStatus=ispRowStatus, ispNextIndex=ispNextIndex, ispPort=ispPort, ispOperStatus=ispOperStatus, ispVPI=ispVPI, ispOID=ispOID, ispValue=ispValue, foreIlmiSnmpProxyModule=foreIlmiSnmpProxyModule, ispRespOID=ispRespOID, ispConfStatus=ispConfStatus, ispEntry=ispEntry)
