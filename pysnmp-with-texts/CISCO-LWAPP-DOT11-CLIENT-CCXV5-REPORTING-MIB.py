#
# PySNMP MIB module CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:05:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
CiscoLwappDot11ClientTxPowerMode, CiscoLwappDot11ClientCredentialType, CiscoLwappDot11ClientPowerSaveMode, CiscoLwappDot11ClientRadioType, CiscoLwappDot11ClientSSId, CiscoLwappDot11ClientReqStatus, CiscoLwappDot11ClientAuthMethod, CiscoLwappDot11ClientKeyMgmtMethod, CiscoLwappDot11ClientEncryptionMethod, CiscoLwappDot11ClientEAPMethod = mibBuilder.importSymbols("CISCO-LWAPP-DOT11-CLIENT-CCX-TC-MIB", "CiscoLwappDot11ClientTxPowerMode", "CiscoLwappDot11ClientCredentialType", "CiscoLwappDot11ClientPowerSaveMode", "CiscoLwappDot11ClientRadioType", "CiscoLwappDot11ClientSSId", "CiscoLwappDot11ClientReqStatus", "CiscoLwappDot11ClientAuthMethod", "CiscoLwappDot11ClientKeyMgmtMethod", "CiscoLwappDot11ClientEncryptionMethod", "CiscoLwappDot11ClientEAPMethod")
cldcClientMacAddress, ciscoLwappDot11ClientCcxMIBObjects = mibBuilder.importSymbols("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress", "ciscoLwappDot11ClientCcxMIBObjects")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CvE164Address, = mibBuilder.importSymbols("CISCO-TC", "CvE164Address")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, Gauge32, Counter64, ModuleIdentity, Bits, IpAddress, Integer32, iso, TimeTicks, Counter32, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "Gauge32", "Counter64", "ModuleIdentity", "Bits", "IpAddress", "Integer32", "iso", "TimeTicks", "Counter32", "MibIdentifier", "NotificationType")
TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString")
ciscoLwappDot11ClientCCXv5ReportingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4))
ciscoLwappDot11ClientCCXv5ReportingMIB.setRevisions(('2006-12-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappDot11ClientCCXv5ReportingMIB.setRevisionsDescriptions(('Initial version of this mib module.',))
if mibBuilder.loadTexts: ciscoLwappDot11ClientCCXv5ReportingMIB.setLastUpdated('200612040000Z')
if mibBuilder.loadTexts: ciscoLwappDot11ClientCCXv5ReportingMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappDot11ClientCCXv5ReportingMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappDot11ClientCCXv5ReportingMIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol tunnel from Light-weight LWAPP Access Points. This MIB provides configuration and status information about the CCXv5 clients that the controller is aware of. This configuration and status information pertaining to the client is termed as Client Reporting. Client Reporting is a mechanism used by a client and AP for the purpose of exchanging client information. Once a client has associated with the network, the associated AP may send the client a Client Report Request frame at any time. This frame identifies what type of information is desired from the client. For all CCXv5 clients, client reporting is organized into 4 major categories: Client Profile Information Client Manufacturer Information Client Operational Parameter Information Client Capability Information Client Profile is for retrieving information about the configuration on the client. Manufacturer Information is for retreiving data about the wireless adaptor in use. Operating parameters is for retrieving the details of the clients current operational modes Client Capabilities is for retrieving information about the client's capabilities. This mib defines the attributes for all of the above 4 categories. GLOSSARY Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the Central Controller. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Mobile Node, Mobile Station(Ms) and client are used interchangeably. REFERENCE [1] Part 11 Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol. [3] Cisco Compatible Extensions for WLAN Devices Version 5.0.11")
ciscoLwappDot11ClientCCXv5ReportingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1))
ciscoLwappDot11ClientCCXv5ReportingMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 2))
ciscoClientCcxManuReporting = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1))
ciscoClientCcxOperReporting = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2))
ciscoClientCcxProfileReporting = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3))
ciscoClientCcxCapabilityReporting = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4))
cldccManufacturerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 1), )
if mibBuilder.loadTexts: cldccManufacturerInfoTable.setStatus('current')
if mibBuilder.loadTexts: cldccManufacturerInfoTable.setDescription('This table contains information about the Manufacturer Information for each client. An entry is added to this table automatically when a CCX version 5 or higher client associates to an AP managed by the controller. Similarly, the entry is removed from the controller when the client disassociates from the AP. While a client is associated, if a management station wishes to retrieve the manufacturer information from the client again, it can do so by setting the cldccManufacturerInfoStatus to initiate (1).')
cldccManufacturerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cldccManufacturerInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cldccManufacturerInfoEntry.setDescription('There is an entry in the table for each client identified by the client mac address.')
cldccManufacturerInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 1, 1, 1), CiscoLwappDot11ClientReqStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldccManufacturerInfoStatus.setStatus('current')
if mibBuilder.loadTexts: cldccManufacturerInfoStatus.setDescription('This field indicates the status of current request. To trigger a request to the client to get the manufacturer information, this attribute is set to initiate(1). Once the request is triggered, the agent will set the value to inProgress(2). Based on the progress of the request, this is later updated to sucess(3), failure(4) or requestNotProcessedByClient(5). If a request has not been triggered explicitly by setting this attribute to initiate, then this field returns the status of the last request.')
cldccManufacturerInfoOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccManufacturerInfoOUI.setStatus('current')
if mibBuilder.loadTexts: cldccManufacturerInfoOUI.setDescription('This field contains the IEEE assigned organizational unique identifier, i.e. the first 3 bytes of the MAC address of the wireless network connected device.')
cldccManufacturerInfoID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccManufacturerInfoID.setStatus('current')
if mibBuilder.loadTexts: cldccManufacturerInfoID.setDescription('This field contains the manufacturer identifier of the wireless network adaptor.')
cldccManufacturerInfoModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccManufacturerInfoModel.setStatus('current')
if mibBuilder.loadTexts: cldccManufacturerInfoModel.setDescription('This field contains a string identifying the model of the wireless network adaptor')
cldccManufacturerInfoSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccManufacturerInfoSerialNum.setStatus('current')
if mibBuilder.loadTexts: cldccManufacturerInfoSerialNum.setDescription('This field contains a string identifying the serial number of the wireless network adaptor.')
cldccManufacturerInfoRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccManufacturerInfoRadioType.setStatus('current')
if mibBuilder.loadTexts: cldccManufacturerInfoRadioType.setDescription('This is the radio type of the client.')
cldccManufacturerInfoMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccManufacturerInfoMacAddress.setStatus('current')
if mibBuilder.loadTexts: cldccManufacturerInfoMacAddress.setDescription('This field contains the mac address assigned to the client.')
cldccManufacturerInfoAntennaType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("omniDirectionalCollinear", 0), ("omniDirectionalDiversity", 1), ("omniDirectionalOther", 2), ("directionalYagi", 3), ("directionalPanel", 4), ("directionalSector", 5), ("directionalOther", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccManufacturerInfoAntennaType.setStatus('current')
if mibBuilder.loadTexts: cldccManufacturerInfoAntennaType.setDescription('This field specifies the type of antenna connected to the wireless network adaptor. The different possible values are: omniDirectionalCollinear - this is a collinear omni-directional antenna. An omni directional antenna is an antenna system which radiates power uniformly in all directions. omniDirectionalDiversity - this is a diversity omni-directional antenna. omniDirectionalOther - this is an omni-directional antenna which is not collinear or diversity. directionalYagi - this indicates Yagi directional antenna. directionalPanel - this specifies a directional Panel type antenna. directionalSector - this indicates a directional Sector type antenna. directionalOther - this indicates a directional antenna which is not Yagi, Panel or Sector type. unknown - this indicates that the antenna type is unknown. ')
cldccManufacturerInfoAntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccManufacturerInfoAntennaGain.setStatus('current')
if mibBuilder.loadTexts: cldccManufacturerInfoAntennaGain.setDescription('This field contains the peak gain in dbi of the antenna for directional antennas and the average gain in dBi for omni-directional antennas connected to the wireless network adaptor. The gain is in multiples of 0.5 dBm. An integer value 4 means 4 x 0.5 = 2 dBm of gain.')
cldccManuRxSensTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 2), )
if mibBuilder.loadTexts: cldccManuRxSensTable.setStatus('current')
if mibBuilder.loadTexts: cldccManuRxSensTable.setDescription('This table contains information about the recevier sensitivity per radio for each client.')
cldccManuRxSensEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccManuRxSensRadioIndex"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccManuRxSensRadioDataRateIndex"))
if mibBuilder.loadTexts: cldccManuRxSensEntry.setStatus('current')
if mibBuilder.loadTexts: cldccManuRxSensEntry.setDescription('There is an entry in the table for each DNS Server configured on the client.')
cldccManuRxSensRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldccManuRxSensRadioIndex.setStatus('current')
if mibBuilder.loadTexts: cldccManuRxSensRadioIndex.setDescription('This field contains a sequence number for the radios configured on a client.')
cldccManuRxSensRadioDataRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cldccManuRxSensRadioDataRateIndex.setStatus('current')
if mibBuilder.loadTexts: cldccManuRxSensRadioDataRateIndex.setDescription('This field contains a sequence number for the data rates radios configured on a client.')
cldccManuRxSensRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 2, 1, 3), CiscoLwappDot11ClientRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccManuRxSensRadioType.setStatus('current')
if mibBuilder.loadTexts: cldccManuRxSensRadioType.setDescription('This field indicates the radio type for the radio')
cldccManuRxSensRadioDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccManuRxSensRadioDataRate.setStatus('current')
if mibBuilder.loadTexts: cldccManuRxSensRadioDataRate.setDescription('This field contains the data rate for a particular radio configured on a client.')
cldccManuRxSensMinRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccManuRxSensMinRssi.setStatus('current')
if mibBuilder.loadTexts: cldccManuRxSensMinRssi.setDescription('This field contains the min rssi for a data rate for a particular radio configured on a client.')
cldccManuRxSensMaxRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccManuRxSensMaxRssi.setStatus('current')
if mibBuilder.loadTexts: cldccManuRxSensMaxRssi.setDescription('This field contains the max rssi for a data rate for a particular radio configured on a client.')
cldccCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 1), )
if mibBuilder.loadTexts: cldccCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityTable.setDescription('This table contains information about the capabilities for each client. An entry is added to this table automatically when a CCX version 5 or higher client associates to an AP managed by the controller. Similarly, the entry is removed from the controller when the client disassociates from the AP. While a client is associated, if a management station wishes to retrieve the capability information from the client again, it can do so by setting the cldccCapabilityStatus to initiate (1).')
cldccCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cldccCapabilityEntry.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityEntry.setDescription('There is an entry in the table for each entry identified by the client mac address.')
cldccCapabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 1, 1, 1), CiscoLwappDot11ClientReqStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldccCapabilityStatus.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityStatus.setDescription('This field indicates the status of current request. To trigger a request to the client to get the capability information, this attribute is set to initiate(1). Once the request is triggered, the agent will set the value to inProgress(2). Based on the progress of the request, this is later updated to sucess(3), failure(4) or requestNotProcessedByClient(5). If a request has not been triggered explicitly by setting this attribute to initiate, then this field returns the status of the last request.')
cldccCapabilityRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccCapabilityRadioType.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityRadioType.setDescription('This is the radio type of the client. This reports all of the radio types of which the wireless network adaptor is capable ')
cldccServiceCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccServiceCapability.setStatus('current')
if mibBuilder.loadTexts: cldccServiceCapability.setDescription('This field is a bit field that indicates the type of services available when using the wireless network adaptor. A bit value of 1 indicates that the service is supported and a bit value of 0 means either the service is not supported or it is unknown if the service is supported. The different types of services are: voice, uni-directional video, bi-directional video and GPS location services.')
cldccCapabilityChannelsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 2), )
if mibBuilder.loadTexts: cldccCapabilityChannelsTable.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityChannelsTable.setDescription('This table contains information about the recevier sensitivity per radio for each client.')
cldccCapabilityChannelsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccCapabilityRadioIndex"))
if mibBuilder.loadTexts: cldccCapabilityChannelsEntry.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityChannelsEntry.setDescription('There is an entry in the table for each radio configured on the client.')
cldccCapabilityRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldccCapabilityRadioIndex.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityRadioIndex.setDescription('This field contains a sequence number for the radios configured on a client.')
cldccCapabilityChRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 2, 1, 2), CiscoLwappDot11ClientRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccCapabilityChRadioType.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityChRadioType.setDescription('This field indicates the radio type for the radio')
cldccCapabilityRadioChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccCapabilityRadioChannels.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityRadioChannels.setDescription('This field contains a list of 1 or more comma separated radio channel numbers that this client is capable of communicating on.')
cldccCapabilityTxPowerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 3), )
if mibBuilder.loadTexts: cldccCapabilityTxPowerTable.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityTxPowerTable.setDescription('This table contains information about the Tx power mode values for each client for which the transmit power mode (as indicated by cldccCapabilityTxPowerMode) is fixed. An entry is added to this table automatically when a CCX version 5 or higher client associates to an AP managed by the controller and its power mode is fixed. Similarly, the entry is removed from the controller when the client disassociates from the AP.')
cldccCapabilityTxPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccCapabilityTxPowerIndex"))
if mibBuilder.loadTexts: cldccCapabilityTxPowerEntry.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityTxPowerEntry.setDescription("There is an entry in the table for each of the client Tx Power values if the client's power mode is fixed. Each entry is identified by the client mac address and an index for the power value.")
cldccCapabilityTxPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldccCapabilityTxPowerIndex.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityTxPowerIndex.setDescription('This is an index for the different Tx power values that a client is capable of supporting.')
cldccCapabilityTxPowerRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 3, 1, 2), CiscoLwappDot11ClientRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccCapabilityTxPowerRadioType.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityTxPowerRadioType.setDescription('This field indicates the radio type of the client.')
cldccCapabilityTxPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fixed", 0), ("automatic", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccCapabilityTxPowerMode.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityTxPowerMode.setDescription('This field identifies the transmit power mode of the client STA. The Tx Power mode can be either fixed or automatic. Tx Power Mode values for the client can be retrieved from the cldccCapabilityTxPowerTable if the power mode is fixed. If the power mode is automatic, then there are no entries in the cldccCapabilityTxPowerTable for this client.')
cldccCapabilityTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccCapabilityTxPower.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityTxPower.setDescription('This field contains the Tx power levels supported by a client.')
cldccCapabilityDataRateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 4), )
if mibBuilder.loadTexts: cldccCapabilityDataRateTable.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityDataRateTable.setDescription('This table contains information about the Tx power mode values for each client for which the transmit power mode (as indicated by cldccCapabilityTxPowerMode) is fixed. An entry is added to this table automatically when a CCX version 5 or higher client associates to an AP managed by the controller and its power mode is fixed. Similarly, the entry is removed from the controller when the client disassociates from the AP.')
cldccCapabilityDataRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccCapabilityDataRateIndex"))
if mibBuilder.loadTexts: cldccCapabilityDataRateEntry.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityDataRateEntry.setDescription("There is an entry in the table for each of the client Tx Power values if the client's power mode is fixed. Each entry is identified by the client mac address and an index for the power value.")
cldccCapabilityDataRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldccCapabilityDataRateIndex.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityDataRateIndex.setDescription('This is an index for the different data rate values that a client is capable of supporting.')
cldccCapabilityDataRateRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 4, 1, 2), CiscoLwappDot11ClientRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccCapabilityDataRateRadioType.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityDataRateRadioType.setDescription('This field indicates the radio type for the radio')
cldccCapabilityDataRates = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 4, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccCapabilityDataRates.setStatus('current')
if mibBuilder.loadTexts: cldccCapabilityDataRates.setDescription('This field contains the data rates for a particular radio.')
cldccOperParamsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1), )
if mibBuilder.loadTexts: cldccOperParamsTable.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsTable.setDescription('This table contains information about the operational parameters for each client. An entry is added to this table automatically when a CCX version 5 or higher client associates to an AP managed by the controller. Similarly, the entry is removed from the controller when the client disassociates from the AP. At any point in time, while a client is associated, if a management station wishes to retrieve the current operational information from the client, it should do so by setting the cldccOperParamsStatus to initiate (1).')
cldccOperParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cldccOperParamsEntry.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsEntry.setDescription('There is an entry in the table for each client identified by the client mac address.')
cldccOperParamsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 1), CiscoLwappDot11ClientReqStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldccOperParamsStatus.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsStatus.setDescription('This field indicates the status of current request. To trigger a request to the client to get the operational information, this attribute is set to initiate(1). Once the request is triggered, the agent will set the value to inProgress(2). Based on the progress of the request, this is later updated to sucess(3), failure(4) or requestNotProcessedByClient(5). If a request has not been triggered explicitly by setting this attribute to initiate, then this field returns the status of the last request.')
cldccOperParamsRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsRadioType.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsRadioType.setDescription('This field indicates the radio type of the client.')
cldccOperParamsSSId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 7), CiscoLwappDot11ClientSSId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsSSId.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsSSId.setDescription('This field specifies the SSId being used by the client.')
cldccOperParamsDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsDeviceName.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsDeviceName.setDescription('This field contains the device name assigned to the wireless network adaptor by the operating system, e.g., WLAN Connection 1.')
cldccOperParamsDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 255))).clone(namedValues=NamedValues(("laptop", 0), ("pc", 1), ("pda", 2), ("dot11MobilePhone", 3), ("dualModePhone", 4), ("wgb", 5), ("scanner", 6), ("tabletPc", 7), ("printer", 8), ("projector", 9), ("videoConfSystem", 10), ("camera", 11), ("gamingSystem", 12), ("dot11DeskPhone", 13), ("cashRegister", 14), ("radioTag", 15), ("rfidSensor", 16), ("server", 17), ("appSpecific", 18), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsDeviceType.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsDeviceType.setDescription('This field indicates what type of device is the client. The different types of devices are: laptop - the client machine is a laptop pc - the client machine is a PC pda - this indicates a Personal Digital Assistant dot11MobilePhone - this indicates an 802.11 mobile phone dualModePhone - this indicates a dual mode phone wgb - this indicates a work group bridge scanner - this indicates a scanner tabletPc - this indicates a tablet type of PC printer - this indicates a printer projector - this indicates a projector videoConfSystem - this indicates a Videe Conferencing System camera - this indicates a camera gamingSystem - this indicates a gaming system dot11DeskPhone - this indicates an 802.11 desk phone cashRegister - this indicates a cash register radioTag - this indicates a radio tag rfidSensor - this indicates a radio sensor server - this indicates a server type of device appSpecific - this indicates that the device is application specific unknown - this indicates that the client type is unknown.')
cldccOperParamsOSId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsOSId.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsOSId.setDescription('This field identifies the operating system using the wireless network adaptor.')
cldccOperParamsOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsOSVersion.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsOSVersion.setDescription('This field identifies the version of operating system using the wireless network adaptor.')
cldccOperParamsIpAddressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsIpAddressMode.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsIpAddressMode.setDescription('This field indicates how the ip address was assigned to the client - ie. was the address assigned statically or via dhcp.')
cldccOperParamsIpv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsIpv4Address.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsIpv4Address.setDescription('This field identifies the ipv4 address assigned to the client.')
cldccOperParamsIpv4SubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsIpv4SubnetMask.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsIpv4SubnetMask.setDescription('This field identifies the ipv4 subnet mask assigned to the client.')
cldccOperParamsIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsIpv6Address.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsIpv6Address.setDescription('This field contains the ip v6 address assigned to the client.')
cldccOperParamsIpv6SubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsIpv6SubnetMask.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsIpv6SubnetMask.setDescription('This field contains the mask for the ip address assigned to the client.')
cldccOperParamsDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsDefaultGateway.setDescription('This field specifies the default gateway chosen for the client.')
cldccOperParamsEntPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 18), CvE164Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsEntPhone.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsEntPhone.setDescription('This field specifies the enterprise phone number for the client.')
cldccOperParamsCellPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 19), CvE164Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsCellPhone.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsCellPhone.setDescription('This field specifies the cell phone number for the client.')
cldccOperParamsFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsFirmwareVersion.setDescription('This field contains the string identifying the version of firmware currently installed on the client. ')
cldccOperParamsDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsDriverVersion.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsDriverVersion.setDescription('This field contains the string identifying the driver version of firmware currently installed on the client. ')
cldccOperParamsPowerSaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 22), CiscoLwappDot11ClientPowerSaveMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsPowerSaveMode.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsPowerSaveMode.setDescription('This is the type of power save mode configured on the client.')
cldccOperParamsAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 23), CiscoLwappDot11ClientAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsAuthMethod.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsAuthMethod.setDescription('This field indicates the authentication method currently used by the client.')
cldccOperParamsKeyMgmtMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 25), CiscoLwappDot11ClientKeyMgmtMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsKeyMgmtMethod.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsKeyMgmtMethod.setDescription('This field indicates the key management method currently used by the client.')
cldccOperParamsEncrMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 26), CiscoLwappDot11ClientEncryptionMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsEncrMethod.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsEncrMethod.setDescription('This field indicates the encryption method currently used by the client.')
cldccOperParamsDot1xSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsDot1xSecurity.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsDot1xSecurity.setDescription('This field indicates the 802.1x security parameters currently configured for the client.')
cldccOperParamsSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsSysName.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsSysName.setDescription('This field contains the name of the client device. This field contains the system name assigned by the operating system to the host device incorporating the wireless network adaptor, e.g., linux-box or XP-laptop-37')
cldccOperParamsLocalization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsLocalization.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsLocalization.setDescription('This field contains the localization information of the client device.')
cldccOperParamsDNSTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 2), )
if mibBuilder.loadTexts: cldccOperParamsDNSTable.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsDNSTable.setDescription("This table contains information about the DNS Servers currently configured for each client. Entries are added to this table automatically once the associated client's operational parameters are retrieved using the cldccOperParamsTable. Entries are removed automatically when the client is disassociated.")
cldccOperParamsDNSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccOperParamsDNSServerIndex"))
if mibBuilder.loadTexts: cldccOperParamsDNSEntry.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsDNSEntry.setDescription('There is an entry in the table for each DNS Server configured on the client.')
cldccOperParamsDNSServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldccOperParamsDNSServerIndex.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsDNSServerIndex.setDescription('This field contains a sequence number for the DNS servers configured on a client.')
cldccOperParamsDNSServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsDNSServerAddress.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsDNSServerAddress.setDescription('This field contains the ip address of a DNS server')
cldccOperParamsWINSTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 3), )
if mibBuilder.loadTexts: cldccOperParamsWINSTable.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsWINSTable.setDescription("This table contains information about the WINS Servers currently configured for each client. Entries are added to this table automatically once the associated client's operational parameters are retrieved using the cldccOperParamsTable. Entries are removed automatically when the client is disassociated.")
cldccOperParamsWINSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccOperParamsWINSServerIndex"))
if mibBuilder.loadTexts: cldccOperParamsWINSEntry.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsWINSEntry.setDescription('There is an entry in the table for each WINS Server configured on the client.')
cldccOperParamsWINSServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldccOperParamsWINSServerIndex.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsWINSServerIndex.setDescription('This field contains a sequence number for the WINS servers configured on a client.')
cldccOperParamsWINSServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperParamsWINSServerAddress.setStatus('current')
if mibBuilder.loadTexts: cldccOperParamsWINSServerAddress.setDescription('This field contains the ip address of a WINS server configured for the client.')
cldccOperChannelsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 4), )
if mibBuilder.loadTexts: cldccOperChannelsTable.setStatus('current')
if mibBuilder.loadTexts: cldccOperChannelsTable.setDescription('This table contains information about the recevier sensitivity per radio for each client.')
cldccOperChannelsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccOperRadioIndex"))
if mibBuilder.loadTexts: cldccOperChannelsEntry.setStatus('current')
if mibBuilder.loadTexts: cldccOperChannelsEntry.setDescription('There is an entry in the table for each radio configured on the client.')
cldccOperRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldccOperRadioIndex.setStatus('current')
if mibBuilder.loadTexts: cldccOperRadioIndex.setDescription('This field contains a sequence number for the radios configured on a client.')
cldccOperRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 4, 1, 2), CiscoLwappDot11ClientRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperRadioType.setStatus('current')
if mibBuilder.loadTexts: cldccOperRadioType.setDescription('This field indicates the radio type for the radio')
cldccOperRadioChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperRadioChannels.setStatus('current')
if mibBuilder.loadTexts: cldccOperRadioChannels.setDescription('This field contains a list of 1 or more comma separated radio channel numbers that this client is communicating on.')
cldccOperTxPowerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 5), )
if mibBuilder.loadTexts: cldccOperTxPowerTable.setStatus('current')
if mibBuilder.loadTexts: cldccOperTxPowerTable.setDescription('This table contains information about the Tx power mode values for each client for which the transmit power mode (as indicated by cldccCapabilityTxPowerMode) is fixed. An entry is added to this table automatically when a CCX version 5 or higher client associates to an AP managed by the controller and its power mode is fixed. Similarly, the entry is removed from the controller when the client disassociates from the AP.')
cldccOperTxPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccOperTxPowerIndex"))
if mibBuilder.loadTexts: cldccOperTxPowerEntry.setStatus('current')
if mibBuilder.loadTexts: cldccOperTxPowerEntry.setDescription("There is an entry in the table for each of the client Tx Power values if the client's power mode is fixed. Each entry is identified by the client mac address and an index for the power value.")
cldccOperTxPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldccOperTxPowerIndex.setStatus('current')
if mibBuilder.loadTexts: cldccOperTxPowerIndex.setDescription('This is an index for the different Tx power values that a client is capable of supporting.')
cldccOperTxPowerRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 5, 1, 2), CiscoLwappDot11ClientRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperTxPowerRadioType.setStatus('current')
if mibBuilder.loadTexts: cldccOperTxPowerRadioType.setDescription('This field indicates the radio type for the radio')
cldccOperTxPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fixed", 0), ("automatic", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperTxPowerMode.setStatus('current')
if mibBuilder.loadTexts: cldccOperTxPowerMode.setDescription('This field identifies the transmit power mode of the client STA. The Tx Power mode can be either fixed or automatic. Tx Power Mode values for the client can be retrieved from the cldccCapabilityTxPowerTable if the power mode is fixed. If the power mode is automatic, then there are no entries in the cldccCapabilityTxPowerTable for this client.')
cldccOperTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperTxPower.setStatus('current')
if mibBuilder.loadTexts: cldccOperTxPower.setDescription('This field contains the Tx power levels supported by a client.')
cldccOperDataRateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 6), )
if mibBuilder.loadTexts: cldccOperDataRateTable.setStatus('current')
if mibBuilder.loadTexts: cldccOperDataRateTable.setDescription('This table contains information about the Tx power mode values for each client for which the transmit power mode (as indicated by cldccCapabilityTxPowerMode) is fixed. An entry is added to this table automatically when a CCX version 5 or higher client associates to an AP managed by the controller and its power mode is fixed. Similarly, the entry is removed from the controller when the client disassociates from the AP.')
cldccOperDataRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 6, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccOperDataRateIndex"))
if mibBuilder.loadTexts: cldccOperDataRateEntry.setStatus('current')
if mibBuilder.loadTexts: cldccOperDataRateEntry.setDescription("There is an entry in the table for each of the client Tx Power values if the client's power mode is fixed. Each entry is identified by the client mac address and an index for the power value.")
cldccOperDataRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldccOperDataRateIndex.setStatus('current')
if mibBuilder.loadTexts: cldccOperDataRateIndex.setDescription('This is an index for the different data rate values that a client is capable of supporting.')
cldccOperDataRateRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 6, 1, 2), CiscoLwappDot11ClientRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperDataRateRadioType.setStatus('current')
if mibBuilder.loadTexts: cldccOperDataRateRadioType.setDescription('This field indicates the radio type for the radio')
cldccOperDataRates = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccOperDataRates.setStatus('current')
if mibBuilder.loadTexts: cldccOperDataRates.setDescription('This field contains the data rates for a particular radio.')
cldccProfileReqTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 1), )
if mibBuilder.loadTexts: cldccProfileReqTable.setStatus('current')
if mibBuilder.loadTexts: cldccProfileReqTable.setDescription('For each CCX Version 5 or higher, this table contains information about the number of profiles configured on the client and the current profile. An entry is added to this table automatically when a CCX version 5 or higher client associates to an AP managed by the controller. Similarly, the entry is removed from the controller when the client disassociates from the AP. At any point in time, while a client is associated, if a management station wishes to retrieve the current profile information from the client, it should do so by setting the cldccProfileReqReportingStatus to initiate (1).')
cldccProfileReqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cldccProfileReqEntry.setStatus('current')
if mibBuilder.loadTexts: cldccProfileReqEntry.setDescription('There is an entry in the table for each client identified by client mac address.')
cldccProfileReqNumProfiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileReqNumProfiles.setStatus('current')
if mibBuilder.loadTexts: cldccProfileReqNumProfiles.setDescription('This is the number of profiles that have been configured on the client.')
cldccProfileReqCurrentProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileReqCurrentProfile.setStatus('current')
if mibBuilder.loadTexts: cldccProfileReqCurrentProfile.setDescription('This is the name of the profile which is currently active on the client. Details of this profile can be fetched from the clProfileTable.')
cldccProfileReqReportingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 1, 1, 3), CiscoLwappDot11ClientReqStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldccProfileReqReportingStatus.setStatus('current')
if mibBuilder.loadTexts: cldccProfileReqReportingStatus.setDescription('This field indicates the status of profile request. To trigger a request to the client to get the profile information, this attribute is set to initiate(1). Once the request is triggered, the agent will set the value to inProgress(2). Based on the progress of the request, this is later updated to sucess(3), failure(4) or requestNotProcessedByClient(5). If a request has not been triggered explicitly by setting this attribute to initiate, then this field returns the status of the last request. For individual profile details look at the clProfile table.')
cldccProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 2), )
if mibBuilder.loadTexts: cldccProfileTable.setStatus('current')
if mibBuilder.loadTexts: cldccProfileTable.setDescription("This table contains information about the profiles configured on the client. Entries are added to this table automatically once the associated client's profile parameters are retrieved using the cldccProfileReqTable. Entries are removed automatically when the client is disassociated.")
cldccProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccProfileIndex"))
if mibBuilder.loadTexts: cldccProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cldccProfileEntry.setDescription('There is an entry in the table for each profile identified by the profile number configured on each client.')
cldccProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldccProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cldccProfileIndex.setDescription('This field contains a profile number for the profile configured on a client. This is the index of the profile.')
cldccProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileName.setStatus('current')
if mibBuilder.loadTexts: cldccProfileName.setDescription('This is the name of the profile.')
cldccProfileSSId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 2, 1, 4), CiscoLwappDot11ClientSSId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileSSId.setStatus('current')
if mibBuilder.loadTexts: cldccProfileSSId.setDescription('This is the Service Set Identifier for this profile.')
cldccProfileAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 2, 1, 5), CiscoLwappDot11ClientAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileAuthMethod.setStatus('current')
if mibBuilder.loadTexts: cldccProfileAuthMethod.setDescription('This is the authentication method used by this profile.')
cldccProfileKeyMgmtMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 2, 1, 6), CiscoLwappDot11ClientKeyMgmtMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileKeyMgmtMethod.setStatus('current')
if mibBuilder.loadTexts: cldccProfileKeyMgmtMethod.setDescription('This is the key management method used by this profile.')
cldccProfileEncrMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 2, 1, 7), CiscoLwappDot11ClientEncryptionMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileEncrMethod.setStatus('current')
if mibBuilder.loadTexts: cldccProfileEncrMethod.setDescription('This is the encryption method used by this profile.')
cldccProfileDot1xSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileDot1xSecurity.setStatus('current')
if mibBuilder.loadTexts: cldccProfileDot1xSecurity.setDescription('This indicates how the credentials are configured for this profile.')
cldccProfilePowerSaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 2, 1, 9), CiscoLwappDot11ClientPowerSaveMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfilePowerSaveMode.setStatus('current')
if mibBuilder.loadTexts: cldccProfilePowerSaveMode.setDescription('This is the type of power save mode configured on the wireless network adaptor for this profile.')
cldccProfileRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileRadioType.setStatus('current')
if mibBuilder.loadTexts: cldccProfileRadioType.setDescription('This is the radio type configured for this profile.')
cldccProfileProprietaryOptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileProprietaryOptionName.setStatus('current')
if mibBuilder.loadTexts: cldccProfileProprietaryOptionName.setDescription('This field contains an optional proprietary option used by the client.')
cldccProfileProprietaryOptionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileProprietaryOptionValue.setStatus('current')
if mibBuilder.loadTexts: cldccProfileProprietaryOptionValue.setDescription('This field contains the value of the optional proprietary option used by the client.')
cldccProfileAPTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 3), )
if mibBuilder.loadTexts: cldccProfileAPTable.setStatus('current')
if mibBuilder.loadTexts: cldccProfileAPTable.setDescription("This table contains information about the preferred APs for a profile configured on the client. Entries are added to this table automatically once the associated client's profile parameters are retrieved using the cldccProfileReqTable. Entries are removed automatically when the client is disassociated.")
cldccProfileAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccProfileIndex"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccProfilePreferredAPIndex"))
if mibBuilder.loadTexts: cldccProfileAPEntry.setStatus('current')
if mibBuilder.loadTexts: cldccProfileAPEntry.setDescription("For each of a client's profiles, there could be multiple preferred APs configured. So, each preferred AP is identified by client mac, profile number and AP number.")
cldccProfilePreferredAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldccProfilePreferredAPIndex.setStatus('current')
if mibBuilder.loadTexts: cldccProfilePreferredAPIndex.setDescription('This is a sequence number for the preferred AP.')
cldccProfilePreferredAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfilePreferredAP.setStatus('current')
if mibBuilder.loadTexts: cldccProfilePreferredAP.setDescription('This is the BSSID of any preferred access point to be used by the wireless network adaptor.')
cldccProfileTxPowerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 4), )
if mibBuilder.loadTexts: cldccProfileTxPowerTable.setStatus('current')
if mibBuilder.loadTexts: cldccProfileTxPowerTable.setDescription("This table contains information about the Tx power values for each client for each of the profiles. Entries are added to this table automatically once the associated client's profile parameters are retrieved using the cldccProfileReqTable. Entries are removed automatically when the client is disassociated.")
cldccProfileTxPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 4, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccProfileIndex"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccProfileTxPowerIndex"))
if mibBuilder.loadTexts: cldccProfileTxPowerEntry.setStatus('current')
if mibBuilder.loadTexts: cldccProfileTxPowerEntry.setDescription("For each of a client's profiles, there could be multiple Tx power values configured. So, each power value is identified by client mac, profile number and power index.")
cldccProfileTxPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldccProfileTxPowerIndex.setStatus('current')
if mibBuilder.loadTexts: cldccProfileTxPowerIndex.setDescription('This is an index for the different Tx power values that a profile on the client is capable of supporting.')
cldccProfileTxPowerRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 4, 1, 2), CiscoLwappDot11ClientRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileTxPowerRadioType.setStatus('current')
if mibBuilder.loadTexts: cldccProfileTxPowerRadioType.setDescription('This field indicates the radio type for the radio')
cldccProfileTxPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fixed", 0), ("automatic", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileTxPowerMode.setStatus('current')
if mibBuilder.loadTexts: cldccProfileTxPowerMode.setDescription('This field identifies the transmit power mode of the client STA. The Tx Power mode can be either fixed or automatic. Tx Power Mode values for the client can be retrieved from the cldccCapabilityTxPowerTable if the power mode is fixed. If the power mode is automatic, then there are no entries in the cldccCapabilityTxPowerTable for this client.')
cldccProfileTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileTxPower.setStatus('current')
if mibBuilder.loadTexts: cldccProfileTxPower.setDescription('This field contains the Tx power levels supported by a client.')
cldccProfileChannelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 5), )
if mibBuilder.loadTexts: cldccProfileChannelTable.setStatus('current')
if mibBuilder.loadTexts: cldccProfileChannelTable.setDescription('This table contains information about the radio channels for a profile configured on the client.')
cldccProfileChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 5, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccProfileIndex"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccProfileChannelIndex"))
if mibBuilder.loadTexts: cldccProfileChannelEntry.setStatus('current')
if mibBuilder.loadTexts: cldccProfileChannelEntry.setDescription('There is an entry in the table for each profile identified by the profile number.')
cldccProfileChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldccProfileChannelIndex.setStatus('current')
if mibBuilder.loadTexts: cldccProfileChannelIndex.setDescription('This is a sequence number for the radio types.')
cldccProfileChRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 5, 1, 2), CiscoLwappDot11ClientRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileChRadioType.setStatus('current')
if mibBuilder.loadTexts: cldccProfileChRadioType.setDescription('These are the radio type for the profile.')
cldccProfileChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileChannels.setStatus('current')
if mibBuilder.loadTexts: cldccProfileChannels.setDescription('This field contains a list of 1 or more comma separated radio channel numbers that this profile is configured to communicate on.')
cldccProfileDataRateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 6), )
if mibBuilder.loadTexts: cldccProfileDataRateTable.setStatus('current')
if mibBuilder.loadTexts: cldccProfileDataRateTable.setDescription('This table contains information about the Tx power mode values for each client for which the transmit power mode (as indicated by cldccProfileTxPowerMode) is fixed. An entry is added to this table automatically when a CCX version 5 or higher client associates to an AP managed by the controller and its power mode is fixed. Similarly, the entry is removed from the controller when the client disassociates from the AP.')
cldccProfileDataRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 6, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccProfileIndex"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccProfileDataRateIndex"))
if mibBuilder.loadTexts: cldccProfileDataRateEntry.setStatus('current')
if mibBuilder.loadTexts: cldccProfileDataRateEntry.setDescription("There is an entry in the table for each of the client Tx Power values if the client's power mode is fixed. Each entry is identified by the client mac address and an index for the power value.")
cldccProfileDataRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldccProfileDataRateIndex.setStatus('current')
if mibBuilder.loadTexts: cldccProfileDataRateIndex.setDescription('This is an index for the different data rate values that a client is capable of supporting.')
cldccProfileDataRateRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 6, 1, 2), CiscoLwappDot11ClientRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileDataRateRadioType.setStatus('current')
if mibBuilder.loadTexts: cldccProfileDataRateRadioType.setDescription('This field indicates the radio type for the radio')
cldccProfileDataRates = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileDataRates.setStatus('current')
if mibBuilder.loadTexts: cldccProfileDataRates.setDescription('This field contains the data rates for a particular radio.')
cldccProfileRadioOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 7), )
if mibBuilder.loadTexts: cldccProfileRadioOptionsTable.setStatus('current')
if mibBuilder.loadTexts: cldccProfileRadioOptionsTable.setDescription('This table contains information about the radio options of the profiles configured on the client.')
cldccProfileRadioOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 7, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccProfileIndex"), (0, "CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", "cldccProfileRadioOptionIndex"))
if mibBuilder.loadTexts: cldccProfileRadioOptionsEntry.setStatus('current')
if mibBuilder.loadTexts: cldccProfileRadioOptionsEntry.setDescription('There is an entry in the table for each radio per profile identified by the profile number and radio channel.')
cldccProfileRadioOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)))
if mibBuilder.loadTexts: cldccProfileRadioOptionIndex.setStatus('current')
if mibBuilder.loadTexts: cldccProfileRadioOptionIndex.setDescription('This is the radio type index configured for this radio for profile.')
cldccProfileRadioOptionsRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 7, 1, 2), CiscoLwappDot11ClientRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileRadioOptionsRadioType.setStatus('current')
if mibBuilder.loadTexts: cldccProfileRadioOptionsRadioType.setDescription('This field indicates the radio type for the radio')
cldccProfilePreambleType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("short", 0), ("long", 1), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfilePreambleType.setStatus('current')
if mibBuilder.loadTexts: cldccProfilePreambleType.setDescription('This is the radio preamble type configured for this radio for profile.')
cldccProfileCCAMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("energyDetect", 0), ("carrierDetect", 1), ("energyCarrierDetect", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileCCAMethod.setStatus('current')
if mibBuilder.loadTexts: cldccProfileCCAMethod.setDescription('This field identifies the clear channel assessment method configured for this profile.')
cldccProfileDataRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileDataRetries.setStatus('current')
if mibBuilder.loadTexts: cldccProfileDataRetries.setDescription('This field identifies the max number of data retries for the wireless network adaptor.')
cldccProfileFragmentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 4, 1, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccProfileFragmentThreshold.setStatus('current')
if mibBuilder.loadTexts: cldccProfileFragmentThreshold.setDescription('This field identifies the fragment threshold for the wireless network adaptor.')
mibBuilder.exportSymbols("CISCO-LWAPP-DOT11-CLIENT-CCXV5-REPORTING-MIB", ciscoLwappDot11ClientCCXv5ReportingMIBConform=ciscoLwappDot11ClientCCXv5ReportingMIBConform, cldccCapabilityTxPowerTable=cldccCapabilityTxPowerTable, cldccOperParamsWINSTable=cldccOperParamsWINSTable, cldccOperParamsWINSServerIndex=cldccOperParamsWINSServerIndex, cldccManufacturerInfoAntennaGain=cldccManufacturerInfoAntennaGain, cldccOperParamsIpv4Address=cldccOperParamsIpv4Address, cldccOperParamsIpv6Address=cldccOperParamsIpv6Address, cldccOperTxPowerTable=cldccOperTxPowerTable, ciscoClientCcxOperReporting=ciscoClientCcxOperReporting, cldccOperParamsRadioType=cldccOperParamsRadioType, cldccOperChannelsTable=cldccOperChannelsTable, cldccProfileAuthMethod=cldccProfileAuthMethod, cldccOperParamsDNSTable=cldccOperParamsDNSTable, ciscoClientCcxManuReporting=ciscoClientCcxManuReporting, cldccOperParamsDeviceType=cldccOperParamsDeviceType, cldccOperTxPowerEntry=cldccOperTxPowerEntry, cldccProfileTxPowerIndex=cldccProfileTxPowerIndex, cldccProfileChRadioType=cldccProfileChRadioType, cldccOperParamsPowerSaveMode=cldccOperParamsPowerSaveMode, cldccOperDataRateRadioType=cldccOperDataRateRadioType, cldccOperTxPowerIndex=cldccOperTxPowerIndex, cldccOperParamsSSId=cldccOperParamsSSId, cldccProfileSSId=cldccProfileSSId, cldccManuRxSensMaxRssi=cldccManuRxSensMaxRssi, cldccOperRadioIndex=cldccOperRadioIndex, cldccOperParamsIpAddressMode=cldccOperParamsIpAddressMode, cldccOperChannelsEntry=cldccOperChannelsEntry, cldccManufacturerInfoAntennaType=cldccManufacturerInfoAntennaType, cldccManufacturerInfoID=cldccManufacturerInfoID, cldccOperParamsLocalization=cldccOperParamsLocalization, cldccCapabilityTxPowerEntry=cldccCapabilityTxPowerEntry, cldccProfileReqCurrentProfile=cldccProfileReqCurrentProfile, cldccOperParamsDot1xSecurity=cldccOperParamsDot1xSecurity, cldccCapabilityDataRates=cldccCapabilityDataRates, cldccCapabilityDataRateRadioType=cldccCapabilityDataRateRadioType, PYSNMP_MODULE_ID=ciscoLwappDot11ClientCCXv5ReportingMIB, cldccCapabilityRadioType=cldccCapabilityRadioType, cldccOperParamsKeyMgmtMethod=cldccOperParamsKeyMgmtMethod, cldccProfileAPEntry=cldccProfileAPEntry, cldccServiceCapability=cldccServiceCapability, cldccManuRxSensRadioDataRate=cldccManuRxSensRadioDataRate, cldccManuRxSensRadioIndex=cldccManuRxSensRadioIndex, cldccOperParamsOSId=cldccOperParamsOSId, cldccManuRxSensRadioDataRateIndex=cldccManuRxSensRadioDataRateIndex, cldccManuRxSensRadioType=cldccManuRxSensRadioType, cldccCapabilityTxPowerMode=cldccCapabilityTxPowerMode, cldccOperParamsDNSServerIndex=cldccOperParamsDNSServerIndex, cldccOperParamsEntPhone=cldccOperParamsEntPhone, cldccProfileDataRateRadioType=cldccProfileDataRateRadioType, cldccProfileReqEntry=cldccProfileReqEntry, cldccManufacturerInfoRadioType=cldccManufacturerInfoRadioType, cldccCapabilityStatus=cldccCapabilityStatus, cldccManufacturerInfoStatus=cldccManufacturerInfoStatus, cldccOperParamsEncrMethod=cldccOperParamsEncrMethod, cldccOperParamsDNSEntry=cldccOperParamsDNSEntry, cldccProfileKeyMgmtMethod=cldccProfileKeyMgmtMethod, cldccCapabilityTxPowerRadioType=cldccCapabilityTxPowerRadioType, cldccProfileEncrMethod=cldccProfileEncrMethod, ciscoClientCcxCapabilityReporting=ciscoClientCcxCapabilityReporting, cldccCapabilityDataRateIndex=cldccCapabilityDataRateIndex, cldccProfileChannelTable=cldccProfileChannelTable, cldccProfileTxPowerEntry=cldccProfileTxPowerEntry, cldccProfileAPTable=cldccProfileAPTable, cldccProfileRadioOptionsRadioType=cldccProfileRadioOptionsRadioType, ciscoLwappDot11ClientCCXv5ReportingMIBObjects=ciscoLwappDot11ClientCCXv5ReportingMIBObjects, cldccOperParamsDriverVersion=cldccOperParamsDriverVersion, cldccOperDataRates=cldccOperDataRates, cldccOperRadioType=cldccOperRadioType, cldccProfileChannelEntry=cldccProfileChannelEntry, cldccProfileRadioOptionsEntry=cldccProfileRadioOptionsEntry, ciscoClientCcxProfileReporting=ciscoClientCcxProfileReporting, cldccOperTxPower=cldccOperTxPower, cldccProfileReqReportingStatus=cldccProfileReqReportingStatus, cldccProfileTxPower=cldccProfileTxPower, cldccProfileIndex=cldccProfileIndex, cldccProfilePreferredAP=cldccProfilePreferredAP, cldccCapabilityChannelsEntry=cldccCapabilityChannelsEntry, cldccCapabilityDataRateEntry=cldccCapabilityDataRateEntry, cldccOperParamsFirmwareVersion=cldccOperParamsFirmwareVersion, cldccProfileProprietaryOptionValue=cldccProfileProprietaryOptionValue, cldccOperParamsIpv4SubnetMask=cldccOperParamsIpv4SubnetMask, cldccOperParamsWINSServerAddress=cldccOperParamsWINSServerAddress, cldccProfileRadioType=cldccProfileRadioType, cldccManuRxSensEntry=cldccManuRxSensEntry, cldccOperDataRateEntry=cldccOperDataRateEntry, cldccProfileTxPowerRadioType=cldccProfileTxPowerRadioType, cldccProfileChannels=cldccProfileChannels, cldccOperParamsDNSServerAddress=cldccOperParamsDNSServerAddress, ciscoLwappDot11ClientCCXv5ReportingMIB=ciscoLwappDot11ClientCCXv5ReportingMIB, cldccProfileProprietaryOptionName=cldccProfileProprietaryOptionName, cldccOperParamsWINSEntry=cldccOperParamsWINSEntry, cldccCapabilityTxPower=cldccCapabilityTxPower, cldccOperDataRateTable=cldccOperDataRateTable, cldccCapabilityRadioChannels=cldccCapabilityRadioChannels, cldccOperParamsTable=cldccOperParamsTable, cldccManufacturerInfoMacAddress=cldccManufacturerInfoMacAddress, cldccProfileRadioOptionsTable=cldccProfileRadioOptionsTable, cldccProfilePreferredAPIndex=cldccProfilePreferredAPIndex, cldccManufacturerInfoOUI=cldccManufacturerInfoOUI, cldccManuRxSensTable=cldccManuRxSensTable, cldccCapabilityTable=cldccCapabilityTable, cldccOperParamsEntry=cldccOperParamsEntry, cldccOperParamsAuthMethod=cldccOperParamsAuthMethod, cldccManufacturerInfoModel=cldccManufacturerInfoModel, cldccManuRxSensMinRssi=cldccManuRxSensMinRssi, cldccOperRadioChannels=cldccOperRadioChannels, cldccCapabilityDataRateTable=cldccCapabilityDataRateTable, cldccProfilePreambleType=cldccProfilePreambleType, cldccProfileRadioOptionIndex=cldccProfileRadioOptionIndex, cldccManufacturerInfoSerialNum=cldccManufacturerInfoSerialNum, cldccOperParamsDefaultGateway=cldccOperParamsDefaultGateway, cldccCapabilityRadioIndex=cldccCapabilityRadioIndex, cldccOperParamsDeviceName=cldccOperParamsDeviceName, cldccProfileName=cldccProfileName, cldccOperTxPowerMode=cldccOperTxPowerMode, cldccCapabilityChannelsTable=cldccCapabilityChannelsTable, cldccProfileDataRates=cldccProfileDataRates, cldccCapabilityEntry=cldccCapabilityEntry, cldccOperParamsIpv6SubnetMask=cldccOperParamsIpv6SubnetMask, cldccOperParamsSysName=cldccOperParamsSysName, cldccProfileDataRateEntry=cldccProfileDataRateEntry, cldccManufacturerInfoTable=cldccManufacturerInfoTable, cldccProfileFragmentThreshold=cldccProfileFragmentThreshold, cldccOperTxPowerRadioType=cldccOperTxPowerRadioType, cldccProfilePowerSaveMode=cldccProfilePowerSaveMode, cldccCapabilityTxPowerIndex=cldccCapabilityTxPowerIndex, cldccProfileTable=cldccProfileTable, cldccProfileDot1xSecurity=cldccProfileDot1xSecurity, cldccProfileReqTable=cldccProfileReqTable, cldccProfileDataRateTable=cldccProfileDataRateTable, cldccManufacturerInfoEntry=cldccManufacturerInfoEntry, cldccOperDataRateIndex=cldccOperDataRateIndex, cldccProfileDataRateIndex=cldccProfileDataRateIndex, cldccProfileReqNumProfiles=cldccProfileReqNumProfiles, cldccProfileChannelIndex=cldccProfileChannelIndex, cldccOperParamsOSVersion=cldccOperParamsOSVersion, cldccProfileTxPowerMode=cldccProfileTxPowerMode, cldccProfileTxPowerTable=cldccProfileTxPowerTable, cldccOperParamsStatus=cldccOperParamsStatus, cldccProfileDataRetries=cldccProfileDataRetries, cldccCapabilityChRadioType=cldccCapabilityChRadioType, cldccOperParamsCellPhone=cldccOperParamsCellPhone, cldccProfileEntry=cldccProfileEntry, cldccProfileCCAMethod=cldccProfileCCAMethod)
