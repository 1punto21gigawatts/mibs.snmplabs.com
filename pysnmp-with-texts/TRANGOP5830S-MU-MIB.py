#
# PySNMP MIB module TRANGOP5830S-MU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRANGOP5830S-MU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:26:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, Bits, Unsigned32, ObjectIdentity, Counter64, Gauge32, enterprises, ModuleIdentity, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "Bits", "Unsigned32", "ObjectIdentity", "Counter64", "Gauge32", "enterprises", "ModuleIdentity", "Integer32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

trango = MibIdentifier((1, 3, 6, 1, 4, 1, 5454))
tbw = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1))
p5830smu = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22))
musys = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1))
murf = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2))
ru = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 3))
trapconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 4))
mibinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 5))
muversion = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 1))
muswitches = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 8))
mutraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 9))
muipconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 13))
murftable = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4))
muism = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 5))
muunii = MibIdentifier((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 6))
muversionHW = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: muversionHW.setStatus('mandatory')
if mibBuilder.loadTexts: muversionHW.setDescription('Hardware version.')
muversionFW = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muversionFW.setStatus('mandatory')
if mibBuilder.loadTexts: muversionFW.setDescription('Main firmware version. Format: <code version>H<hardware version>D<date>.')
muversionFPGA = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: muversionFPGA.setStatus('mandatory')
if mibBuilder.loadTexts: muversionFPGA.setDescription('FPGA firmware version.')
muversionFWChecksum = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: muversionFWChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: muversionFWChecksum.setDescription('Master unit firmware checksum.')
muversionFPGAChecksum = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: muversionFPGAChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: muversionFPGAChecksum.setDescription('Master unit FPGA checksum.')
musysDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: musysDeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: musysDeviceId.setDescription('Master unit device Id. Each master unit in a cluster shall have unique ID.')
musysDefOpMode = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 0))).clone(namedValues=NamedValues(("on", 16), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: musysDefOpMode.setStatus('mandatory')
if mibBuilder.loadTexts: musysDefOpMode.setDescription('The operation mode (on or off) the master unit is on after reboot/power cycle.')
musysCurOpMode = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 0))).clone(namedValues=NamedValues(("on", 16), ("off", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: musysCurOpMode.setStatus('mandatory')
if mibBuilder.loadTexts: musysCurOpMode.setDescription("Master unit's current operation mode.")
musysActivateOpmode = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deactivated", 0), ("activated", 1))).clone('deactivated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: musysActivateOpmode.setStatus('mandatory')
if mibBuilder.loadTexts: musysActivateOpmode.setDescription('Engage master unit to on operation mode.')
musysReadCommStr = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: musysReadCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: musysReadCommStr.setDescription('SNMP agent read community string. It is used for authentication purpose.')
musysWriteCommStr = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: musysWriteCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: musysWriteCommStr.setDescription('SNMP agent write community string. It is used for authentication purpose.')
muswitchesBlockBroadcastMulticast = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("passed", 0), ("blocked", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muswitchesBlockBroadcastMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: muswitchesBlockBroadcastMulticast.setDescription('This switch enables or disables the blocking of Ethernet control packet except ICMP and ARP to reduce the amount of uneccessary overhead introduced to the wireless link.')
muswitchesHTTPD = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muswitchesHTTPD.setStatus('mandatory')
if mibBuilder.loadTexts: muswitchesHTTPD.setDescription('When it is turned on, then the master unit is accessible for configuring via web browser (e.g. IE or Nescape).')
muswitchesAutoPowerLevelRemoteUnit = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muswitchesAutoPowerLevelRemoteUnit.setStatus('mandatory')
if mibBuilder.loadTexts: muswitchesAutoPowerLevelRemoteUnit.setDescription('When it is turned on, then the master unit will command the remote unit to do power leveling.')
mutrafficEthInOctets = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mutrafficEthInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: mutrafficEthInOctets.setDescription('Number of payload octets received on Ethernet port.')
mutrafficEthOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mutrafficEthOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: mutrafficEthOutOctets.setDescription('Number of payload octets transmitted on Ethernet port.')
mutrafficRfInOctets = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mutrafficRfInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: mutrafficRfInOctets.setDescription("Number of octets of remote's payload received from RF port.")
mutrafficRfOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mutrafficRfOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: mutrafficRfOutOctets.setDescription("Number of octets of remote's payload transmitted to RF port.")
musysTemperature = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: musysTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: musysTemperature.setDescription("Current master unit's temperature value (in Celsius).")
musysUpdateFlashAndActivate = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: musysUpdateFlashAndActivate.setStatus('mandatory')
if mibBuilder.loadTexts: musysUpdateFlashAndActivate.setDescription('Save system setting values to Flash and activate the settings.')
musysReboot = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deactivated", 0), ("activated", 1))).clone('deactivated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: musysReboot.setStatus('mandatory')
if mibBuilder.loadTexts: musysReboot.setDescription('Reboot the master unit.')
muipconfigIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 13, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muipconfigIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: muipconfigIpAddress.setDescription('New IP address. It will be saved to non-volatile memory and activated in 5 secs.')
muipconfigSubnet = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 13, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muipconfigSubnet.setStatus('mandatory')
if mibBuilder.loadTexts: muipconfigSubnet.setDescription('New Subnet mask. It will be saved to non-volatile memory and activated in 5 secs.')
muipconfigDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 1, 13, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muipconfigDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: muipconfigDefaultGateway.setDescription('New Default gateway. It will be saved to non-volatile memory and activated in 5 secs.')
murfRSSI = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: murfRSSI.setStatus('mandatory')
if mibBuilder.loadTexts: murfRSSI.setDescription('Remote unit RSSI (in dBm).')
murfActiveChannel = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murfActiveChannel.setStatus('mandatory')
if mibBuilder.loadTexts: murfActiveChannel.setDescription('It specifies the current channel number the master unit operates on.')
murfActivePolarization = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murfActivePolarization.setStatus('mandatory')
if mibBuilder.loadTexts: murfActivePolarization.setDescription('It specifies the current polarization the master unit operates on.')
murftableChannel1 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel1.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel1.setDescription('RF channel 1 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel2 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel2.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel2.setDescription('RF channel 2 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel3 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel3.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel3.setDescription('RF channel 3 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel4 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel4.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel4.setDescription('RF channel 4 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel5 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel5.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel5.setDescription('RF channel 5 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel6 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel6.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel6.setDescription('RF channel 6 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel7 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel7.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel7.setDescription('RF channel 7 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel8 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel8.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel8.setDescription('RF channel 8 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel9 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel9.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel9.setDescription('RF channel 9 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel10 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel10.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel10.setDescription('RF channel 10 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel11 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel11.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel11.setDescription('RF channel 11 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel12 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel12.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel12.setDescription('RF channel 12 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel13 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel13.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel13.setDescription('RF channel 13 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel14 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel14.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel14.setDescription('RF channel 14 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel15 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel15.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel15.setDescription('RF channel 15 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel16 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel16.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel16.setDescription('RF channel 16 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel17 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel17.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel17.setDescription('RF channel 17 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel18 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel18.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel18.setDescription('RF channel 18 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel19 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel19.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel19.setDescription('RF channel 19 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel20 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel20.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel20.setDescription('RF channel 20 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel21 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel21.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel21.setDescription('RF channel 21 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel22 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel22.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel22.setDescription('RF channel 22 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel23 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel23.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel23.setDescription('RF channel 23 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel24 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel24.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel24.setDescription('RF channel 24 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel25 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel25.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel25.setDescription('RF channel 25 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel26 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel26.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel26.setDescription('RF channel 26 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel27 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel27.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel27.setDescription('RF channel 27 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel28 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel28.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel28.setDescription('RF channel 28 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel29 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel29.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel29.setDescription('RF channel 29 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
murftableChannel30 = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 4, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5260, 5340), ValueRangeConstraint(5736, 5836), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: murftableChannel30.setStatus('mandatory')
if mibBuilder.loadTexts: murftableChannel30.setDescription('RF channel 30 frequency (in MHz). It allows you to create your own channel instead of the manufacturing defaults in the master unit. Keep in mind that channel width is 20MHz, and the frequency specified here is the center frequency. Frequency (5260MHz - 5340MHz) is only applicable to M5830S/P5830S radio.')
muismTxPowerMax = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muismTxPowerMax.setStatus('mandatory')
if mibBuilder.loadTexts: muismTxPowerMax.setDescription('The maximum ISM Tx power value can be set (in dBm).')
muismTxPowerMin = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muismTxPowerMin.setStatus('mandatory')
if mibBuilder.loadTexts: muismTxPowerMin.setDescription('The minimum ISM Tx power value can be set (in dBm).')
muismTxPower = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muismTxPower.setStatus('mandatory')
if mibBuilder.loadTexts: muismTxPower.setDescription('ISM RF tx power (in dBm). It specifies the power output of the radio, excluding the antenna gain. Check parameters muismTxPowerMax and masterismTxPowerMin for power setting range.')
muismRxThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-90, -90), ValueRangeConstraint(-85, -85), ValueRangeConstraint(-80, -80), ValueRangeConstraint(-75, -75), ValueRangeConstraint(-70, -70), ValueRangeConstraint(-65, -65), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muismRxThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: muismRxThreshold.setDescription("ISM RF rx threshold (in dBm). It specifies the receiver sensitivity of the master. By default, the radio's sensitivity is -82dBm. The higher the threshold is, the less sensitive the radio will be. In M5800S, the value -90 represents the rfrxthreshold is disabled.")
muismTargetRSSI = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-85, -45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muismTargetRSSI.setStatus('mandatory')
if mibBuilder.loadTexts: muismTargetRSSI.setDescription("ISM RF RSSI (in dBm). It specifies the target RSSI from the remote unit to the master unit. Based on this parameter, the master unit can power level the remote unit so that it receives same level of signal strength from the remote unit, regardless far or near. Note that when you set the Target RSSI from the remote unit, you need to consider master unit's RF Rx Threshold value. The Target RSSI from the remote unit must be 5dB higher than the RF Rx Threshold. When the RF Rx Threshold is disabled, the setting of the Target RSSI from remote unit shall be no less than -75dBm.")
muuniiTxPowerMax = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muuniiTxPowerMax.setStatus('mandatory')
if mibBuilder.loadTexts: muuniiTxPowerMax.setDescription('This object is only applicable to M5830S/P5830S radio. The maximum UNII Tx power value can be set (in dBm).')
muuniiTxPowerMin = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muuniiTxPowerMin.setStatus('mandatory')
if mibBuilder.loadTexts: muuniiTxPowerMin.setDescription('This object is only applicable to M5830S/P5830S radio. The minimum UNII Tx power value can be set (in dBm).')
muuniiTxPower = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muuniiTxPower.setStatus('mandatory')
if mibBuilder.loadTexts: muuniiTxPower.setDescription('This object is only applicable to M5830S/P5830S radio. UNII RF tx power (in dBm). It specifies the power output of the radio, excluding the antenna gain. Check parameters apuniiTxPowerMax and apuniiTxPowerMin for power setting range.')
muuniiRxThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-90, -90), ValueRangeConstraint(-85, -85), ValueRangeConstraint(-80, -80), ValueRangeConstraint(-75, -75), ValueRangeConstraint(-70, -70), ValueRangeConstraint(-65, -65), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muuniiRxThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: muuniiRxThreshold.setDescription('This object is only applicable to M5830S/P5830S radio. UNII RF rx threshold (in dBm). It specifies the receiver sensitivity of the master.')
muuniiTargetRSSI = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 2, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-85, -45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muuniiTargetRSSI.setStatus('mandatory')
if mibBuilder.loadTexts: muuniiTargetRSSI.setDescription("This object is only applicable to M5830S/P5830S radio. UNII RF target RSSI (in dBm). It specifies the target RSSI from remote unit to the master unit. Based on this parameter, the master can power level the remote unit so that it receives same level of signal strength from the remote unit, regardless far or near. Note that when you set the Target RSSI from the remote unit, you need to consider remote unit's RF Rx Threshold value. The Target RSSI from the remote unit must be 5dB higher than the RF Rx Threshold.")
ruDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruDeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: ruDeviceId.setDescription('Remote unit device ID.')
ruUpstreamMIR = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruUpstreamMIR.setStatus('mandatory')
if mibBuilder.loadTexts: ruUpstreamMIR.setDescription('It is the Maximum Information Rate (in Kbps) the master unit allocates to remote unit.')
remoteDownstreamMIR = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(9999)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteDownstreamMIR.setStatus('mandatory')
if mibBuilder.loadTexts: remoteDownstreamMIR.setDescription('It is the Maximum Information Rate (in Kbps) the master unit allocates to the remote unit.')
ruPowerLvl = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deactivated", 0), ("activated", 1))).clone('deactivated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruPowerLvl.setStatus('mandatory')
if mibBuilder.loadTexts: ruPowerLvl.setDescription('It is a feature that is typically found in more elaborate mobile systems such as cellular CDMA networks. Using this feature, the remote unit have its RF power output adjusted until its signal strength received in the master unit is roughly the same.')
ruReboot = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deactivated", 0), ("activated", 1))).clone('deactivated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruReboot.setStatus('mandatory')
if mibBuilder.loadTexts: ruReboot.setDescription('Master unit issues reboot command to remote unit.')
ruAssociation = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("associated", 1), ("notAssociated", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: ruAssociation.setDescription('Remote unit association status.')
ruDistance = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruDistance.setStatus('mandatory')
if mibBuilder.loadTexts: ruDistance.setDescription('Distance of remote unit (in mile).')
trapconfigDest1IPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapconfigDest1IPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: trapconfigDest1IPAddress.setDescription('Trap destination 1 IP address.')
trapconfigDest2IPAddress = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapconfigDest2IPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: trapconfigDest2IPAddress.setDescription('Trap destination 2 IP address.')
mibinfoVersion = MibScalar((1, 3, 6, 1, 4, 1, 5454, 1, 22, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibinfoVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mibinfoVersion.setDescription('Trango master unit MIB Version.')
mibBuilder.exportSymbols("TRANGOP5830S-MU-MIB", musysTemperature=musysTemperature, muversionFWChecksum=muversionFWChecksum, muswitchesBlockBroadcastMulticast=muswitchesBlockBroadcastMulticast, murftable=murftable, murftableChannel22=murftableChannel22, murftableChannel12=murftableChannel12, murftableChannel18=murftableChannel18, tbw=tbw, muswitches=muswitches, murftableChannel6=murftableChannel6, muismRxThreshold=muismRxThreshold, muismTxPowerMax=muismTxPowerMax, musysWriteCommStr=musysWriteCommStr, murf=murf, muuniiTxPower=muuniiTxPower, muversionFW=muversionFW, mutrafficRfOutOctets=mutrafficRfOutOctets, muuniiRxThreshold=muuniiRxThreshold, murfActivePolarization=murfActivePolarization, murftableChannel21=murftableChannel21, trapconfigDest2IPAddress=trapconfigDest2IPAddress, musysDefOpMode=musysDefOpMode, musysActivateOpmode=musysActivateOpmode, muswitchesHTTPD=muswitchesHTTPD, mutrafficEthInOctets=mutrafficEthInOctets, murfActiveChannel=murfActiveChannel, DisplayString=DisplayString, murftableChannel11=murftableChannel11, musysDeviceId=musysDeviceId, murftableChannel26=murftableChannel26, mutraffic=mutraffic, muipconfigSubnet=muipconfigSubnet, murftableChannel2=murftableChannel2, murftableChannel13=murftableChannel13, ruPowerLvl=ruPowerLvl, murftableChannel14=murftableChannel14, musysCurOpMode=musysCurOpMode, murftableChannel7=murftableChannel7, murftableChannel5=murftableChannel5, musysReadCommStr=musysReadCommStr, mutrafficEthOutOctets=mutrafficEthOutOctets, muversionHW=muversionHW, remoteDownstreamMIR=remoteDownstreamMIR, murftableChannel30=murftableChannel30, muipconfig=muipconfig, trapconfigDest1IPAddress=trapconfigDest1IPAddress, murftableChannel25=murftableChannel25, murftableChannel17=murftableChannel17, murftableChannel16=murftableChannel16, muipconfigIpAddress=muipconfigIpAddress, muism=muism, muswitchesAutoPowerLevelRemoteUnit=muswitchesAutoPowerLevelRemoteUnit, muismTxPowerMin=muismTxPowerMin, trango=trango, murftableChannel10=murftableChannel10, muversion=muversion, murftableChannel8=murftableChannel8, murfRSSI=murfRSSI, muversionFPGA=muversionFPGA, mibinfo=mibinfo, ru=ru, murftableChannel23=murftableChannel23, muversionFPGAChecksum=muversionFPGAChecksum, muismTxPower=muismTxPower, murftableChannel27=murftableChannel27, murftableChannel15=murftableChannel15, murftableChannel9=murftableChannel9, murftableChannel3=murftableChannel3, musysUpdateFlashAndActivate=musysUpdateFlashAndActivate, murftableChannel19=murftableChannel19, murftableChannel29=murftableChannel29, murftableChannel4=murftableChannel4, ruUpstreamMIR=ruUpstreamMIR, muuniiTxPowerMax=muuniiTxPowerMax, muuniiTargetRSSI=muuniiTargetRSSI, ruDeviceId=ruDeviceId, muismTargetRSSI=muismTargetRSSI, p5830smu=p5830smu, murftableChannel1=murftableChannel1, muuniiTxPowerMin=muuniiTxPowerMin, trapconfig=trapconfig, musys=musys, murftableChannel28=murftableChannel28, ruAssociation=ruAssociation, mutrafficRfInOctets=mutrafficRfInOctets, mibinfoVersion=mibinfoVersion, murftableChannel24=murftableChannel24, muipconfigDefaultGateway=muipconfigDefaultGateway, muunii=muunii, ruReboot=ruReboot, musysReboot=musysReboot, ruDistance=ruDistance, murftableChannel20=murftableChannel20)
