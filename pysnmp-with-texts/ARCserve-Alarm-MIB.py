#
# PySNMP MIB module ARCserve-Alarm-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ARCserve-Alarm-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:24:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, NotificationType, NotificationType, Integer32, TimeTicks, IpAddress, MibIdentifier, ObjectIdentity, Gauge32, ModuleIdentity, iso, Unsigned32, enterprises, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "NotificationType", "NotificationType", "Integer32", "TimeTicks", "IpAddress", "MibIdentifier", "ObjectIdentity", "Gauge32", "ModuleIdentity", "iso", "Unsigned32", "enterprises", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cheyenne = MibIdentifier((1, 3, 6, 1, 4, 1, 46))
arcServe = MibIdentifier((1, 3, 6, 1, 4, 1, 46, 877))
arcServeRev = MibIdentifier((1, 3, 6, 1, 4, 1, 46, 877, 1))
arcServeevMajor = MibScalar((1, 3, 6, 1, 4, 1, 46, 877, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arcServeevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: arcServeevMajor.setDescription('The major revision level of ARCserve (left of the decimal). Used for presence checking.')
arcServeRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 46, 877, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arcServeRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: arcServeRevMinor.setDescription('The minor revision level of ARCserve (right of the decimal).')
arcServeParmsTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 46, 877, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arcServeParmsTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: arcServeParmsTrapEnable.setDescription('Indicates whether agent should or should not send traps.')
arcServeParmsPollTime = MibScalar((1, 3, 6, 1, 4, 1, 46, 877, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 2592000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arcServeParmsPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: arcServeParmsPollTime.setDescription('Seconds between checking for traps.')
arcServeServerName = MibScalar((1, 3, 6, 1, 4, 1, 46, 877, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arcServeServerName.setStatus('mandatory')
if mibBuilder.loadTexts: arcServeServerName.setDescription('ARCserve server which generated trap.')
arcServetrapdesc = MibScalar((1, 3, 6, 1, 4, 1, 46, 877, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arcServetrapdesc.setStatus('optional')
if mibBuilder.loadTexts: arcServetrapdesc.setDescription('A description of a specific Cheyenne trap')
arcServetrapHigh = NotificationType((1, 3, 6, 1, 4, 1, 46, 877) + (0,1)).setObjects(("ARCserve-Alarm-MIB", "arcServeServerName"), ("ARCserve-Alarm-MIB", "arcServetrapdesc"))
if mibBuilder.loadTexts: arcServetrapHigh.setDescription('ARCserve Critical Trap A Critical trap has been generated by ARCserve. Refer to the trap summary information for a detailed description of this trap. A critical trap normally indicates a serious error has occurred.')
arcServetrapMed = NotificationType((1, 3, 6, 1, 4, 1, 46, 877) + (0,2)).setObjects(("ARCserve-Alarm-MIB", "arcServeServerName"), ("ARCserve-Alarm-MIB", "arcServetrapdesc"))
if mibBuilder.loadTexts: arcServetrapMed.setDescription('ARCserve Minor Trap A minor trap has been generated by ARCserve. Minor traps are used by ARCserve to warn the user of unusual, but not fatal incidents. Review the message summary to determine if this trap should concern you.')
arcServetrapLow = NotificationType((1, 3, 6, 1, 4, 1, 46, 877) + (0,3)).setObjects(("ARCserve-Alarm-MIB", "arcServeServerName"), ("ARCserve-Alarm-MIB", "arcServetrapdesc"))
if mibBuilder.loadTexts: arcServetrapLow.setDescription('ARCserve Informational Trap An ARCserve informational trap has been generated by ARCserve.')
arcServetrap4 = NotificationType((1, 3, 6, 1, 4, 1, 46, 877) + (0,4)).setObjects(("ARCserve-Alarm-MIB", "arcServeServerName"), ("ARCserve-Alarm-MIB", "arcServetrapdesc"))
if mibBuilder.loadTexts: arcServetrap4.setDescription("Failed to locate job list service. This trap signifies that ARCserve was unable to locate it's NetWare queue or Windows NT/UNIX Job list. This problem can be caused in NetWare by Bindery or Directory Services corruption or by the deletion of the ARCserve queue.")
arcServetrap5 = NotificationType((1, 3, 6, 1, 4, 1, 46, 877) + (0,5)).setObjects(("ARCserve-Alarm-MIB", "arcServeServerName"), ("ARCserve-Alarm-MIB", "arcServetrapdesc"))
if mibBuilder.loadTexts: arcServetrap5.setDescription('Failed to retrieve job from Job List Service. This trap signifies that ARCserve cannot process jobs. Under NetWare, this is normally due to a Bindery or Directory Services corruption. Please verify that ARCserve was completely installed and that your Bindery/Directory is not corrupted.')
arcServetrap6 = NotificationType((1, 3, 6, 1, 4, 1, 46, 877) + (0,7)).setObjects(("ARCserve-Alarm-MIB", "arcServeServerName"), ("ARCserve-Alarm-MIB", "arcServetrapdesc"))
if mibBuilder.loadTexts: arcServetrap6.setDescription('Failed to allocate memory. This trap signifies that ARCserve was unable to allocate memory. More server memory may be required if this message occurs on a regular basis. This message is not normally fatal, unless repeated attempts for memory fail.')
arcServetrap7 = NotificationType((1, 3, 6, 1, 4, 1, 46, 877) + (0,8)).setObjects(("ARCserve-Alarm-MIB", "arcServeServerName"), ("ARCserve-Alarm-MIB", "arcServetrapdesc"))
if mibBuilder.loadTexts: arcServetrap7.setDescription('Server is low on memory, cannot start jobs. This trap signifies that server is so low on memory that jobs cannot be processed. Shutdown any unnecessary modules to obtain additional memory so that jobs can be processed. Jobs will be processed when sufficeint memory has been restored on the server.')
arcServetrap8 = NotificationType((1, 3, 6, 1, 4, 1, 46, 877) + (0,9)).setObjects(("ARCserve-Alarm-MIB", "arcServeServerName"), ("ARCserve-Alarm-MIB", "arcServetrapdesc"))
if mibBuilder.loadTexts: arcServetrap8.setDescription('Same license found on another server. This trap signifies that another server has the same license as the server which generated the server. You must install different licenses on each ARCserve server.')
arcServetrap9 = NotificationType((1, 3, 6, 1, 4, 1, 46, 877) + (0,9)).setObjects(("ARCserve-Alarm-MIB", "arcServeServerName"), ("ARCserve-Alarm-MIB", "arcServetrapdesc"))
if mibBuilder.loadTexts: arcServetrap9.setDescription('Failed to format tape. This trap signifies that ARCserve was unable to format a tape. This could be caused by hardware or media failure. Verify tape drive has been cleaned and all cable connections. This message can also occur when an invalid board driver has been loaded.')
arcServetrap10 = NotificationType((1, 3, 6, 1, 4, 1, 46, 877) + (0,10)).setObjects(("ARCserve-Alarm-MIB", "arcServeServerName"), ("ARCserve-Alarm-MIB", "arcServetrapdesc"))
if mibBuilder.loadTexts: arcServetrap10.setDescription('Failed to read tape header. This trap signifies a hardware or device failure when trying to read the tape header. Verify that the tape is an ARCserve formatted tape. Also verify that the tape drive has been cleaned and all cables are properly connected. This message can also be displayed when an invalid board driver has been loaded.')
arcServetrap11 = NotificationType((1, 3, 6, 1, 4, 1, 46, 877) + (0,11)).setObjects(("ARCserve-Alarm-MIB", "arcServeServerName"), ("ARCserve-Alarm-MIB", "arcServetrapdesc"))
if mibBuilder.loadTexts: arcServetrap11.setDescription('Failed to access tape. This trap signifies that ARCserve was unable to access the the tape. Also verify that the tape drive has been cleaned and all cables are properly connected. This message can also be displayed when an invalid board driver has been loaded.')
arcServetrap12 = NotificationType((1, 3, 6, 1, 4, 1, 46, 877) + (0,12)).setObjects(("ARCserve-Alarm-MIB", "arcServeServerName"), ("ARCserve-Alarm-MIB", "arcServetrapdesc"))
if mibBuilder.loadTexts: arcServetrap12.setDescription('Backup Operation Cancelled. This trap indicates that the backup job has been cancelled. This is normally due to an operator cancelling/deleting a job from the ARCserve job list.')
arcServetrap13 = NotificationType((1, 3, 6, 1, 4, 1, 46, 877) + (0,13)).setObjects(("ARCserve-Alarm-MIB", "arcServeServerName"), ("ARCserve-Alarm-MIB", "arcServetrapdesc"))
if mibBuilder.loadTexts: arcServetrap13.setDescription('Backup Operation Successful This trap signifies that the backup operation completed successfully.')
arcServetrap14 = NotificationType((1, 3, 6, 1, 4, 1, 46, 877) + (0,14)).setObjects(("ARCserve-Alarm-MIB", "arcServeServerName"), ("ARCserve-Alarm-MIB", "arcServetrapdesc"))
if mibBuilder.loadTexts: arcServetrap14.setDescription('Backup Operation Incomplete This trap signifies that the backup operation completed with warnings. Refer to the activity log to determine if important nodes selected for backup have been missed.')
arcServetrap15 = NotificationType((1, 3, 6, 1, 4, 1, 46, 877) + (0,15)).setObjects(("ARCserve-Alarm-MIB", "arcServeServerName"), ("ARCserve-Alarm-MIB", "arcServetrapdesc"))
if mibBuilder.loadTexts: arcServetrap15.setDescription('Backup Operation Failed This trap signifies that backup operation failed. This message indicates that the backup encountered serious processing errors. Refer to the activity log for a description of the problems en- countered which caused the backup failed.')
mibBuilder.exportSymbols("ARCserve-Alarm-MIB", cheyenne=cheyenne, arcServeRev=arcServeRev, arcServeParmsPollTime=arcServeParmsPollTime, arcServetrapHigh=arcServetrapHigh, arcServetrap5=arcServetrap5, arcServetrap10=arcServetrap10, arcServeRevMinor=arcServeRevMinor, arcServetrap14=arcServetrap14, arcServetrap11=arcServetrap11, arcServetrap7=arcServetrap7, arcServetrap13=arcServetrap13, arcServetrap12=arcServetrap12, arcServetrap6=arcServetrap6, arcServeParmsTrapEnable=arcServeParmsTrapEnable, arcServetrapdesc=arcServetrapdesc, arcServetrap8=arcServetrap8, arcServetrap4=arcServetrap4, arcServetrapLow=arcServetrapLow, arcServetrapMed=arcServetrapMed, arcServetrap15=arcServetrap15, arcServetrap9=arcServetrap9, arcServeevMajor=arcServeevMajor, arcServe=arcServe, arcServeServerName=arcServeServerName)
