#
# PySNMP MIB module JUNIPER-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:01:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressPrefixLength, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddress", "InetAddressType")
jnxExVlan, = mibBuilder.importSymbols("JUNIPER-EX-SMI", "jnxExVlan")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, TimeTicks, Integer32, IpAddress, ModuleIdentity, Bits, MibIdentifier, Unsigned32, iso, ObjectIdentity, Counter32, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Integer32", "IpAddress", "ModuleIdentity", "Bits", "MibIdentifier", "Unsigned32", "iso", "ObjectIdentity", "Counter32", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, MacAddress, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "TruthValue", "DisplayString")
jnxVlanMIBObjects = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1))
jnxVlanMIBObjects.setRevisions(('2009-01-09 00:00', '2009-01-20 00:00', '2010-09-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxVlanMIBObjects.setRevisionsDescriptions(('Marked the deprecated Objects of jnxVlanTable, jnxVlanInterfaceTable and jnxVlanPortGroupTable as Obsolete.', 'Added new Object jnxExVlanTag to represent Vlan Tag information for each Vlan.', 'Added new Objects jnxExVlanPortTagness and jnxExVlanPortAccessMode as part of jnxExVlanPortGroupTable.',))
if mibBuilder.loadTexts: jnxVlanMIBObjects.setLastUpdated('200901090000Z')
if mibBuilder.loadTexts: jnxVlanMIBObjects.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxVlanMIBObjects.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxVlanMIBObjects.setDescription("This module contains definitions for management information for pre-standards IEEE 802.1Q VLANs and their association with a Lan Emulation Client (lec). Devices implementing these pre-standards maintain port groupings and associated filters used to form a 'virtual bridge'.")
jnxVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1), )
if mibBuilder.loadTexts: jnxVlanTable.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanTable.setDescription('A table of VLAN names and characteristics.')
jnxVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1), ).setIndexNames((1, "JUNIPER-VLAN-MIB", "jnxVlanName"))
if mibBuilder.loadTexts: jnxVlanEntry.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanEntry.setDescription('A table entry containing VLAN names and characteristics.')
jnxVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: jnxVlanName.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanName.setDescription('Vlan name is the textual name and this is the identifier that the user of a configuration utility will use.')
jnxVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanID.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanID.setDescription('This is the locally significant ID that is used internally by this device to reference this VLAN.')
jnxVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanType.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanType.setDescription('The valn type can be static (1) Dynamic(2)')
jnxVlanPortGroupInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanPortGroupInstance.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanPortGroupInstance.setDescription('jnxVlanPortGroupInstance is the index that identifies that the sub tree in the jnxVlanPortGroupTable helps to retrieve the group of ports in this VLAN.')
jnxVlanMacListInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanMacListInstance.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanMacListInstance.setDescription('jnxVlanMacListInstance is the index , if this is a MAC-based VLAN which identifies the sub tree to retrieve the list of MAC address to allow into this VLAN. If this is not a MAC-based VLAN then the value is 0')
jnxVlanInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2), )
if mibBuilder.loadTexts: jnxVlanInterfaceTable.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanInterfaceTable.setDescription('A table of VLAN names and characteristics in layer 3.')
jnxVlanInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1), ).setIndexNames((1, "JUNIPER-VLAN-MIB", "jnxVlanName"))
if mibBuilder.loadTexts: jnxVlanInterfaceEntry.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanInterfaceEntry.setDescription('A table entry containing VLAN names and characteristics in layer 3.')
jnxVlanInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 1), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanInterfaceIpAddress.setDescription('This specifies the IPAddress of this interface. ')
jnxVlanInterfaceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceProtocol.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanInterfaceProtocol.setDescription('This specifies the protocol for ipv4.')
jnxVlanInterfaceSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceSubNetMask.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanInterfaceSubNetMask.setDescription('This specifies the subnet mask address of the vlan .')
jnxVlanInterfaceBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceBroadcastAddress.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanInterfaceBroadcastAddress.setDescription('This specifies the broadcast address of the vlan.')
jnxVlanInterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceDescription.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanInterfaceDescription.setDescription('jnxvlanInterfaceDescription provides the description for the vlan.')
jnxVlanInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceAdminStatus.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanInterfaceAdminStatus.setDescription('This takes care of administration status of the vlan')
jnxVlanInterfaceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanInterfaceOperStatus.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanInterfaceOperStatus.setDescription('This specifies the operational status of the vlan')
jnxVlanSnmpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 2, 1, 8), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanSnmpIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanSnmpIfIndex.setDescription('This specifies the SNMP IF Index .')
jnxVlanPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 3), )
if mibBuilder.loadTexts: jnxVlanPortGroupTable.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanPortGroupTable.setDescription('A table of port groupings.')
jnxVlanPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 3, 1), ).setIndexNames((0, "JUNIPER-VLAN-MIB", "jnxVlanPortGroupIndex"), (0, "JUNIPER-VLAN-MIB", "jnxVlanPort"))
if mibBuilder.loadTexts: jnxVlanPortGroupEntry.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanPortGroupEntry.setDescription('A table entry containing a port number')
jnxVlanPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: jnxVlanPortGroupIndex.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanPortGroupIndex.setDescription('Index used so that there can be many different port groups')
jnxVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: jnxVlanPort.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanPort.setDescription('The vlanPort specifies the port in the vlan.By adding a port here, that port will now be part of any VLAN(s) that this port group is associated with.')
jnxVlanPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoActive", 1), ("allowed", 2), ("allowedActive", 3), ("allowedNotAvail", 4), ("notAssociated", 5))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanPortStatus.setStatus('obsolete')
if mibBuilder.loadTexts: jnxVlanPortStatus.setDescription("The status of this port relative to the VLAN that points at this port group.[1.autoactive , 2.allowed, 3.allowedActive 4.allowedNotAvail, 5.notAssociated] autoActive : Means that the port is part of this VLAN because the switch automatically added it. allowed : Means that the port has been configured so that if all other criteria (if any) are met, this port is allowed to be in this VLAN. allowedActive : Means the same as allowed plus the fact that there is a device attached to this port and participating in the VLAN. allowedNotAvail: This value is only needed for devices that don't allow a port to be in more than one VLAN at a time. This value means that this port also exists in some other VLAN(s) and is active in another VLAN. Therefore this port is not available to be used in this VLAN. notAssociated : Means that the Port Group is not currently associated with any VLAN.")
jnxVlanMacListTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 4), )
if mibBuilder.loadTexts: jnxVlanMacListTable.setStatus('current')
if mibBuilder.loadTexts: jnxVlanMacListTable.setDescription('jnxVlanMacListTable is the table of MAC Lists. ')
jnxVlanMacListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 4, 1), ).setIndexNames((0, "JUNIPER-VLAN-MIB", "jnxVlanMacListIndex"))
if mibBuilder.loadTexts: jnxVlanMacListEntry.setStatus('current')
if mibBuilder.loadTexts: jnxVlanMacListEntry.setDescription('A table entry containing MAC Addresses')
jnxVlanMacListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: jnxVlanMacListIndex.setStatus('current')
if mibBuilder.loadTexts: jnxVlanMacListIndex.setDescription('jnxVlanMacListIndex can be used beacuse there can be many different MAC Lists')
jnxVlanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVlanMacAddress.setStatus('current')
if mibBuilder.loadTexts: jnxVlanMacAddress.setDescription('jnxVlanMacAddress is the MAC Address that belongs to this group.')
jnxExVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5), )
if mibBuilder.loadTexts: jnxExVlanTable.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanTable.setDescription('A table of VLAN names and characteristics.')
jnxExVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1), ).setIndexNames((0, "JUNIPER-VLAN-MIB", "jnxExVlanID"))
if mibBuilder.loadTexts: jnxExVlanEntry.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanEntry.setDescription('A table entry containing VLAN names and characteristics.')
jnxExVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: jnxExVlanID.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanID.setDescription('This is the locally significant ID that is used internally by this device to reference this VLAN.')
jnxExVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanName.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanName.setDescription('Vlan name is the textual name.')
jnxExVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanType.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanType.setDescription('The vlan type can be static (1) Dynamic(2)')
jnxExVlanPortGroupInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanPortGroupInstance.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanPortGroupInstance.setDescription('jnxExVlanPortGroupInstance is the index that identifies that the sub tree in the jnxVlanPortGroupTable helps to retrieve the group of ports in this VLAN.')
jnxExVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanTag.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanTag.setDescription('jnxExVlanTag gives the Vlan Tag details for each Vlan.')
jnxExVlanInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6), )
if mibBuilder.loadTexts: jnxExVlanInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanInterfaceTable.setDescription('A table of VLAN names and characteristics in layer 3.')
jnxExVlanInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1), ).setIndexNames((0, "JUNIPER-VLAN-MIB", "jnxExVlanID"))
if mibBuilder.loadTexts: jnxExVlanInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanInterfaceEntry.setDescription('A table entry containing VLAN names and characteristics in layer 3.')
jnxExVlanInterfaceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceProtocol.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanInterfaceProtocol.setDescription('This specifies the protocol for ipv4.')
jnxExVlanInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanInterfaceIpAddress.setDescription('This specifies the IPAddress of this interface. ')
jnxExVlanInterfacePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 3), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfacePrefixLength.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanInterfacePrefixLength.setDescription('This specifies the length of subnet mask address of the vlan .')
jnxExVlanInterfaceBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceBroadcastAddress.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanInterfaceBroadcastAddress.setDescription('This specifies the broadcast address of the vlan.')
jnxExVlanInterfaceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceDescription.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanInterfaceDescription.setDescription('jnxExvlanInterfaceDescription provides the description for the vlan.')
jnxExVlanInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanInterfaceAdminStatus.setDescription('This takes care of administration status of the vlan')
jnxExVlanInterfaceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanInterfaceOperStatus.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanInterfaceOperStatus.setDescription('This specifies the operational status of the vlan')
jnxExVlanSnmpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 6, 1, 8), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanSnmpIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanSnmpIfIndex.setDescription('This specifies the SNMP IF Index .')
jnxExVlanPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7), )
if mibBuilder.loadTexts: jnxExVlanPortGroupTable.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanPortGroupTable.setDescription('A table of port groupings.')
jnxExVlanPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1), ).setIndexNames((0, "JUNIPER-VLAN-MIB", "jnxExVlanPortGroupIndex"), (0, "JUNIPER-VLAN-MIB", "jnxExVlanPort"))
if mibBuilder.loadTexts: jnxExVlanPortGroupEntry.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanPortGroupEntry.setDescription('A table entry containing a port number')
jnxExVlanPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: jnxExVlanPortGroupIndex.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanPortGroupIndex.setDescription('Index used so that there can be many different port groups')
jnxExVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: jnxExVlanPort.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanPort.setDescription('The vlanPort specifies the port in the vlan.By adding a port here, that port will now be part of any VLAN(s) that this port group is associated with.')
jnxExVlanPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoActive", 1), ("allowed", 2), ("allowedActive", 3), ("allowedNotAvail", 4), ("notAssociated", 5))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanPortStatus.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanPortStatus.setDescription("The status of this port relative to the VLAN that points at this port group.[1.autoactive , 2.allowed, 3.allowedActive 4.allowedNotAvail, 5.notAssociated] autoActive : Means that the port is part of this VLAN because the switch automatically added it. allowed : Means that the port has been configured so that if all other criteria (if any) are met, this port is allowed to be in this VLAN. allowedActive : Means the same as allowed plus the fact that there is a device attached to this port and participating in the VLAN. allowedNotAvail: This value is only needed for devices that don't allow a port to be in more than one VLAN at a time. This value means that this port also exists in some other VLAN(s) and is active in another VLAN. Therefore this port is not available to be used in this VLAN. notAssociated : Means that the Port Group is not currently associated with any VLAN.")
jnxExVlanPortTagness = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanPortTagness.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanPortTagness.setDescription('The VlanPortTaqness gives whether the Port is tagged or untagged.')
jnxExVlanPortAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 5, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExVlanPortAccessMode.setStatus('current')
if mibBuilder.loadTexts: jnxExVlanPortAccessMode.setDescription('The VlanPortAccessMode gives whether the Port is Access or Trunk.')
mibBuilder.exportSymbols("JUNIPER-VLAN-MIB", jnxExVlanInterfaceTable=jnxExVlanInterfaceTable, jnxExVlanPortStatus=jnxExVlanPortStatus, jnxVlanInterfaceProtocol=jnxVlanInterfaceProtocol, jnxVlanInterfaceAdminStatus=jnxVlanInterfaceAdminStatus, jnxExVlanPortGroupTable=jnxExVlanPortGroupTable, jnxExVlanInterfaceProtocol=jnxExVlanInterfaceProtocol, jnxVlanMacListInstance=jnxVlanMacListInstance, PYSNMP_MODULE_ID=jnxVlanMIBObjects, jnxVlanInterfaceEntry=jnxVlanInterfaceEntry, jnxExVlanInterfaceEntry=jnxExVlanInterfaceEntry, jnxVlanName=jnxVlanName, jnxVlanPortGroupEntry=jnxVlanPortGroupEntry, jnxVlanInterfaceSubNetMask=jnxVlanInterfaceSubNetMask, jnxExVlanPort=jnxExVlanPort, jnxExVlanPortTagness=jnxExVlanPortTagness, jnxVlanPortGroupTable=jnxVlanPortGroupTable, jnxVlanType=jnxVlanType, jnxVlanInterfaceIpAddress=jnxVlanInterfaceIpAddress, jnxExVlanPortGroupInstance=jnxExVlanPortGroupInstance, jnxExVlanID=jnxExVlanID, jnxVlanPortGroupIndex=jnxVlanPortGroupIndex, jnxExVlanName=jnxExVlanName, jnxExVlanInterfaceAdminStatus=jnxExVlanInterfaceAdminStatus, jnxVlanPortStatus=jnxVlanPortStatus, jnxExVlanInterfaceDescription=jnxExVlanInterfaceDescription, jnxVlanMacListTable=jnxVlanMacListTable, jnxExVlanInterfaceOperStatus=jnxExVlanInterfaceOperStatus, jnxVlanEntry=jnxVlanEntry, jnxVlanMacListEntry=jnxVlanMacListEntry, jnxVlanMacListIndex=jnxVlanMacListIndex, jnxVlanInterfaceOperStatus=jnxVlanInterfaceOperStatus, jnxVlanPort=jnxVlanPort, jnxExVlanSnmpIfIndex=jnxExVlanSnmpIfIndex, jnxVlanMIBObjects=jnxVlanMIBObjects, jnxExVlanTable=jnxExVlanTable, jnxVlanInterfaceTable=jnxVlanInterfaceTable, jnxVlanInterfaceDescription=jnxVlanInterfaceDescription, jnxVlanID=jnxVlanID, jnxExVlanInterfaceIpAddress=jnxExVlanInterfaceIpAddress, jnxVlanPortGroupInstance=jnxVlanPortGroupInstance, jnxVlanTable=jnxVlanTable, jnxExVlanInterfaceBroadcastAddress=jnxExVlanInterfaceBroadcastAddress, jnxVlanInterfaceBroadcastAddress=jnxVlanInterfaceBroadcastAddress, jnxExVlanTag=jnxExVlanTag, jnxExVlanPortGroupIndex=jnxExVlanPortGroupIndex, jnxExVlanPortGroupEntry=jnxExVlanPortGroupEntry, jnxExVlanEntry=jnxExVlanEntry, jnxExVlanInterfacePrefixLength=jnxExVlanInterfacePrefixLength, jnxExVlanType=jnxExVlanType, jnxVlanMacAddress=jnxVlanMacAddress, jnxExVlanPortAccessMode=jnxExVlanPortAccessMode, jnxVlanSnmpIfIndex=jnxVlanSnmpIfIndex)
