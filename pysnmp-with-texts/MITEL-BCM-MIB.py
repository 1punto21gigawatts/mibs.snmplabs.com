#
# PySNMP MIB module MITEL-BCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MITEL-BCM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:13:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
mitelPropTransmission, = mibBuilder.importSymbols("MITEL-MIB", "mitelPropTransmission")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, ObjectIdentity, IpAddress, Unsigned32, Counter32, TimeTicks, iso, NotificationType, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "IpAddress", "Unsigned32", "Counter32", "TimeTicks", "iso", "NotificationType", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "Bits")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
mitelBCM = ModuleIdentity((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1))
mitelBCM.setRevisions(('2009-03-17 00:00', '2006-01-10 00:00', '2005-10-04 01:00', '2005-10-03 01:00', '2005-09-30 01:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mitelBCM.setRevisionsDescriptions(('Added new BCM chip to the enumeration. Also updated copyright.', 'Applied stronger lint and made corrections. Also updated copyright.', 'Integrated in change requests and added mitelBCMChipCount.', 'Added Compliance and Conformance statements.', 'Created.',))
if mibBuilder.loadTexts: mitelBCM.setLastUpdated('200903170000Z')
if mibBuilder.loadTexts: mitelBCM.setOrganization('MITEL Networks Corporation')
if mibBuilder.loadTexts: mitelBCM.setContactInfo('Standards Group, Postal: MITEL Networks Corporation 350 Legget Drive, PO Box 13089 Kanata, Ontario Canada K2K 2W7 Tel: +1 613 592 2122 Fax: +1 613 592 4784 E-mail: std@mitel.com')
if mibBuilder.loadTexts: mitelBCM.setDescription('The MITEL Broadcom Switch MIB module. This MIB module is defined to specifically provide additional statistical information for the Broadcom Switch subsystem.')
mitelBCMObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 1))
mitelBCMConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 2))
mitelBCMPortTable = MibTable((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 1, 1), )
if mibBuilder.loadTexts: mitelBCMPortTable.setStatus('current')
if mibBuilder.loadTexts: mitelBCMPortTable.setDescription('Table defining statistical information about each port of a Broadcom Switch sub-system.')
mitelBCMPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 1, 1, 1), ).setIndexNames((0, "MITEL-BCM-MIB", "mitelBCMPortIndex"))
if mibBuilder.loadTexts: mitelBCMPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: mitelBCMPortTableEntry.setDescription('A row defining a single BCM Port table entry.')
mitelBCMPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelBCMPortIndex.setStatus('current')
if mibBuilder.loadTexts: mitelBCMPortIndex.setDescription('The interface identifier for this switch port. Usually corresponds to ifIndex in the ifTable.')
mitelBCMPortRxSAChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelBCMPortRxSAChanges.setStatus('current')
if mibBuilder.loadTexts: mitelBCMPortRxSAChanges.setDescription('The number of times the source address (SA) of good received packets has changed. A count greater than one generally indicates the port is connected to a repeater based network.')
mitelBCMPortRxLastSA = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 1, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelBCMPortRxLastSA.setStatus('current')
if mibBuilder.loadTexts: mitelBCMPortRxLastSA.setDescription('The last received source address on this port.')
mitelBCMChipCount = MibScalar((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelBCMChipCount.setStatus('current')
if mibBuilder.loadTexts: mitelBCMChipCount.setDescription('The number of BCM ethernet chips in the system.')
mitelBCMChipTable = MibTable((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 1, 3), )
if mibBuilder.loadTexts: mitelBCMChipTable.setStatus('current')
if mibBuilder.loadTexts: mitelBCMChipTable.setDescription('Table defining characteristic information about each Broadcom Switch chip in the system.')
mitelBCMChipTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 1, 3, 1), ).setIndexNames((0, "MITEL-BCM-MIB", "mitelBCMChipIndex"))
if mibBuilder.loadTexts: mitelBCMChipTableEntry.setStatus('current')
if mibBuilder.loadTexts: mitelBCMChipTableEntry.setDescription('A row defining a single Broadcom (BCM) Chip table entry.')
mitelBCMChipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelBCMChipIndex.setStatus('current')
if mibBuilder.loadTexts: mitelBCMChipIndex.setDescription('The identifier for this switch chip.')
mitelBCMChipBIST = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 1, 3, 1, 2), Bits().clone(namedValues=NamedValues(("bcRam", 0), ("ipDbm", 1), ("mRam", 2), ("gmRam", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelBCMChipBIST.setStatus('current')
if mibBuilder.loadTexts: mitelBCMChipBIST.setDescription('The status of the BCM ethernet chip built-in-self-test (BIST). BCRAM(0) bit 2^0 - Buffer control RAM (only in BCM5380M) IPDBM(1) bit 2^1 - Internal packet data buffer memory MRAM(2) bit 2^2 - MIB RAM (only in BCM5380M) GMRAM(3) bit 2^3 - Gigabit MIB RAM (only in BCM5380M) If the bit is set, then that sub-system has failed.')
mitelBCMChipRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelBCMChipRev.setStatus('current')
if mibBuilder.loadTexts: mitelBCMChipRev.setDescription('The BCM ethernet chip revision ID.')
mitelBCMChipType = MibTableColumn((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bcm5380m", 1), ("bcm5325e", 2), ("bcm5324m", 3), ("bcmOther", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mitelBCMChipType.setStatus('current')
if mibBuilder.loadTexts: mitelBCMChipType.setDescription('The BCM ethernet chip type.')
mitelBCMCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 2, 1))
mitelBCMGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 2, 2))
mitelBCMSwitchCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 2, 1, 1)).setObjects(("MITEL-BCM-MIB", "mitelBCMPortGroup"), ("MITEL-BCM-MIB", "mitelBCMChipGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mitelBCMSwitchCompliance = mitelBCMSwitchCompliance.setStatus('current')
if mibBuilder.loadTexts: mitelBCMSwitchCompliance.setDescription('The compliance statement for mitel nodes that include a BCM switch sub-system.')
mitelBCMPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 2, 2, 1)).setObjects(("MITEL-BCM-MIB", "mitelBCMPortIndex"), ("MITEL-BCM-MIB", "mitelBCMPortRxSAChanges"), ("MITEL-BCM-MIB", "mitelBCMPortRxLastSA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mitelBCMPortGroup = mitelBCMPortGroup.setStatus('current')
if mibBuilder.loadTexts: mitelBCMPortGroup.setDescription('A collection of objects that provide statistical infrormation about BCM switch ports.')
mitelBCMChipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1027, 4, 2, 1, 2, 2, 2)).setObjects(("MITEL-BCM-MIB", "mitelBCMChipCount"), ("MITEL-BCM-MIB", "mitelBCMChipIndex"), ("MITEL-BCM-MIB", "mitelBCMChipBIST"), ("MITEL-BCM-MIB", "mitelBCMChipRev"), ("MITEL-BCM-MIB", "mitelBCMChipType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mitelBCMChipGroup = mitelBCMChipGroup.setStatus('current')
if mibBuilder.loadTexts: mitelBCMChipGroup.setDescription('A collection of objects that provide infrormation about BCM switch Chips.')
mibBuilder.exportSymbols("MITEL-BCM-MIB", mitelBCMCompliances=mitelBCMCompliances, mitelBCMSwitchCompliance=mitelBCMSwitchCompliance, mitelBCMChipTableEntry=mitelBCMChipTableEntry, mitelBCMChipRev=mitelBCMChipRev, mitelBCMChipCount=mitelBCMChipCount, mitelBCMPortTable=mitelBCMPortTable, PYSNMP_MODULE_ID=mitelBCM, mitelBCMChipType=mitelBCMChipType, mitelBCMGroups=mitelBCMGroups, mitelBCMPortRxSAChanges=mitelBCMPortRxSAChanges, mitelBCMChipIndex=mitelBCMChipIndex, mitelBCMPortIndex=mitelBCMPortIndex, mitelBCMChipTable=mitelBCMChipTable, mitelBCMObjects=mitelBCMObjects, mitelBCMChipBIST=mitelBCMChipBIST, mitelBCMPortGroup=mitelBCMPortGroup, mitelBCMPortRxLastSA=mitelBCMPortRxLastSA, mitelBCM=mitelBCM, mitelBCMPortTableEntry=mitelBCMPortTableEntry, mitelBCMConformance=mitelBCMConformance, mitelBCMChipGroup=mitelBCMChipGroup)
