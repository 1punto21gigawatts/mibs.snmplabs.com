#
# PySNMP MIB module PNNI-MOB-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PNNI-MOB-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:41:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
pnniNodeEntry, PnniNodeIndex, PnniLevel, pnniIfEntry, PnniPeerGroupId, PnniNodeId, pnniNodeIndex, PnniAtmAddr = mibBuilder.importSymbols("PNNI-MIB", "pnniNodeEntry", "PnniNodeIndex", "PnniLevel", "pnniIfEntry", "PnniPeerGroupId", "PnniNodeId", "pnniNodeIndex", "PnniAtmAddr")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, IpAddress, TimeTicks, Unsigned32, Counter64, Bits, Counter32, NotificationType, enterprises, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "IpAddress", "TimeTicks", "Unsigned32", "Counter64", "Bits", "Counter32", "NotificationType", "enterprises", "iso")
TextualConvention, TimeStamp, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "TruthValue", "DisplayString")
pnniMobExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 353, 5, 4, 2))
pnniMobExtMIB.setRevisions(('1999-02-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pnniMobExtMIB.setRevisionsDescriptions(('Initial version of the MIB module for managing PNNI routing extensions for the support of mobile networks.',))
if mibBuilder.loadTexts: pnniMobExtMIB.setLastUpdated('9902120000Z')
if mibBuilder.loadTexts: pnniMobExtMIB.setOrganization('The ATM Forum')
if mibBuilder.loadTexts: pnniMobExtMIB.setContactInfo('The ATM Forum 2570 West El Camino Real, Suite 304 Mountain View, CA 94040-1313 USA Phone: +1 415-949-6700 Fax: +1 415-949-6705 info@atmforum.com')
if mibBuilder.loadTexts: pnniMobExtMIB.setDescription('The MIB module for managing the ATM Forum extensions of PNNI routing for mobile networks.')
atmForum = MibIdentifier((1, 3, 6, 1, 4, 1, 353))
atmForumNetworkManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5))
atmfPnni = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 4))
pnniMobExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1))
class PnniOnhlIndex(TextualConvention, Integer32):
    description = 'An index that identifies an outside nodal hierarchy list in the managed mobile system. The distinguished value zero indicates the null instance or no instance.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

pnniMobExtBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 1))
pnniMobExtVersion = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unsupported", 1), ("version1point0", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMobExtVersion.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.1')
if mibBuilder.loadTexts: pnniMobExtVersion.setStatus('current')
if mibBuilder.loadTexts: pnniMobExtVersion.setDescription('The version of the PNNI Addendum for mobility extensions that the software in this switching system is capable of executing.')
pnniMobileSwitchGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2))
pnniMSMobileIfTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 1), )
if mibBuilder.loadTexts: pnniMSMobileIfTable.setReference('ATM Forum PNNI Addendum for mobility extensions section 1.1')
if mibBuilder.loadTexts: pnniMSMobileIfTable.setStatus('current')
if mibBuilder.loadTexts: pnniMSMobileIfTable.setDescription('Contains the attributes necessary to configure PNNI interfaces on a mobile switching system')
pnniMSMobileIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 1, 1), )
if mibBuilder.loadTexts: pnniMSMobileIfEntry.setReference('ATM Forum PNNI Addendum for mobility extensions section 1.1')
pnniIfEntry.registerAugmentions(("PNNI-MOB-EXT-MIB", "pnniMSMobileIfEntry"))
pnniMSMobileIfEntry.setIndexNames(*pnniIfEntry.getIndexNames())
if mibBuilder.loadTexts: pnniMSMobileIfEntry.setStatus('current')
if mibBuilder.loadTexts: pnniMSMobileIfEntry.setDescription('Contains the attributes necessary to configure PNNI interfaces on a mobile switching system ')
pnniIfMobilityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniIfMobilityEnabled.setReference('ATM Forum PNNI Addendum for mobility extensions section 1.1')
if mibBuilder.loadTexts: pnniIfMobilityEnabled.setStatus('current')
if mibBuilder.loadTexts: pnniIfMobilityEnabled.setDescription('Indicates whether this interface is configured as a PNNI mobility enabled interface or not. When the interface is configured as mobility enabled, the mobile switch considers the nodal hierarchy list received from this interface as a candidate for the decision process.')
pnniMSMobileLgnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 2))
pnniMobileLgnIndex = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 2, 1), PnniNodeIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMobileLgnIndex.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2')
if mibBuilder.loadTexts: pnniMobileLgnIndex.setStatus('current')
if mibBuilder.loadTexts: pnniMobileLgnIndex.setDescription("Indicates the node index of the mobile logical group node on this switching system. The mobile logical group node can be either active, or yet to become operational. This attribute contains always the index to an entry in the pnniNodeTable. The distinguished value zero indicates the null instance or no instance in the pnniMobileLgnIndex. It indicates that no mobile logical group node has been configured on this switching system. The mobile logical node cannot be the lowest level node in the switching system. This object must reference the highest configured node (i.e. the highest level node that can become operational). If the node has a value of 'up' for its pnniOperStatus, the pnniPeerGroupId and pnniNodeLevel have relevant values, that must be considered as READ-ONLY. If the node has a value of 'down' for its pnniOperStatus, the values of pnniPeerGroupId and pnniNodeLevel are not relevant.")
pnniMobileLgnMinLevel = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 2, 2), PnniLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMobileLgnMinLevel.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2')
if mibBuilder.loadTexts: pnniMobileLgnMinLevel.setStatus('current')
if mibBuilder.loadTexts: pnniMobileLgnMinLevel.setDescription('This value indicates the lowest level at which the mobile logical group node can join a host peer group. This value is read-only to reflect that it is dependent on the configuration of the local nodes in this switching system. The value is equal to the value of the level indicator of the child node of this mobile logical group node minus 1.')
pnniMobileLgnMaxLevel = MibScalar((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 2, 3), PnniLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMobileLgnMaxLevel.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2')
if mibBuilder.loadTexts: pnniMobileLgnMaxLevel.setStatus('current')
if mibBuilder.loadTexts: pnniMobileLgnMaxLevel.setDescription('This value indicates the highest level at which the mobile logical group node is allowed to join a host peer group. If the value of this attribute is larger (i.e. the level is lower) than the value of pnniMobileLgnMinLevel, the mobile logical group node is not able to join any host peer group.')
pnniMSOnhlTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 3), )
if mibBuilder.loadTexts: pnniMSOnhlTable.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2')
if mibBuilder.loadTexts: pnniMSOnhlTable.setStatus('current')
if mibBuilder.loadTexts: pnniMSOnhlTable.setDescription('A table of the outside nodal hierarchy lists present in this switching system.')
pnniMSOnhlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 3, 1), ).setIndexNames((0, "PNNI-MOB-EXT-MIB", "pnniOnhlIndex"), (0, "PNNI-MOB-EXT-MIB", "pnniOnhlLevel"))
if mibBuilder.loadTexts: pnniMSOnhlEntry.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2')
if mibBuilder.loadTexts: pnniMSOnhlEntry.setStatus('current')
if mibBuilder.loadTexts: pnniMSOnhlEntry.setDescription('An entry in this table that contains attributes describing one level of an outside nodal hierarchy list')
pnniOnhlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 3, 1, 1), PnniOnhlIndex())
if mibBuilder.loadTexts: pnniOnhlIndex.setStatus('current')
if mibBuilder.loadTexts: pnniOnhlIndex.setDescription('A value assigned to an outside nodal hierarchy list in this switching system that uniquely identifies it in the MIB.')
pnniOnhlLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 3, 1, 2), PnniLevel())
if mibBuilder.loadTexts: pnniOnhlLevel.setStatus('current')
if mibBuilder.loadTexts: pnniOnhlLevel.setDescription('A level included in this outside nodal hierarchy list.')
pnniOnhlPeerGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 3, 1, 3), PnniPeerGroupId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniOnhlPeerGroupId.setReference('ATM Forum PNNI Addendum for mobility extensions section 3.2')
if mibBuilder.loadTexts: pnniOnhlPeerGroupId.setStatus('current')
if mibBuilder.loadTexts: pnniOnhlPeerGroupId.setDescription('The peer group id advertised by another switching system at this level of its nodal hierarchy list.')
pnniOnhlNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 3, 1, 4), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniOnhlNodeId.setReference('ATM Forum PNNI Addendum for mobility extensions section 3.2')
if mibBuilder.loadTexts: pnniOnhlNodeId.setStatus('current')
if mibBuilder.loadTexts: pnniOnhlNodeId.setDescription('The node id advertised by another switching system at this level of its nodal hierarchy list.')
pnniOnhlAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 3, 1, 5), PnniAtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniOnhlAtmAddr.setReference('ATM Forum PNNI Addendum for mobility extensions section 3.2')
if mibBuilder.loadTexts: pnniOnhlAtmAddr.setStatus('current')
if mibBuilder.loadTexts: pnniOnhlAtmAddr.setDescription('The atm address advertised by another switching system at this level of its nodal hierarchy list.')
pnniMSNodeTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 4), )
if mibBuilder.loadTexts: pnniMSNodeTable.setReference('ATM Forum PNNI Addendum for mobility extensions section 2')
if mibBuilder.loadTexts: pnniMSNodeTable.setStatus('current')
if mibBuilder.loadTexts: pnniMSNodeTable.setDescription('The pnniMSNodeTable collects attributes that affect the decision process executed by each node local to this switching system. This table is an augmentation of the pnniNodeTable.')
pnniMSNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 4, 1), )
if mibBuilder.loadTexts: pnniMSNodeEntry.setReference('ATM Forum PNNI Addendum for mobility extensions section 2')
pnniNodeEntry.registerAugmentions(("PNNI-MOB-EXT-MIB", "pnniMSNodeEntry"))
pnniMSNodeEntry.setIndexNames(*pnniNodeEntry.getIndexNames())
if mibBuilder.loadTexts: pnniMSNodeEntry.setStatus('current')
if mibBuilder.loadTexts: pnniMSNodeEntry.setDescription('An entry in the table, containing information about the decision process associated to the logical node in this switching system')
pnniOutputOnhlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 4, 1, 1), PnniOnhlIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniOutputOnhlIndex.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2')
if mibBuilder.loadTexts: pnniOutputOnhlIndex.setStatus('current')
if mibBuilder.loadTexts: pnniOutputOnhlIndex.setDescription('Indicates the local index in the pnniMSOnhlTable of the outside nodal hierarchy list resulting from the last decision process. If the decision process has never run, or if no outside nodal hierarchy list was chosen, this attribute is set to the null value (0)')
pnniOutputOnhlTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 4, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniOutputOnhlTimeStamp.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2')
if mibBuilder.loadTexts: pnniOutputOnhlTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pnniOutputOnhlTimeStamp.setDescription('Indicates the time at which the current outside nodal hierarchy list resulting from the decision process was selected as output onhl. This time is not reset each time that the pnniDecisionProcessTimeStamp is reset. The condition for a reset is that the outside nodal hierarchy list resulting from the decision process is different from the previous one.')
pnniDecisionProcessTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniDecisionProcessTimeStamp.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2')
if mibBuilder.loadTexts: pnniDecisionProcessTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pnniDecisionProcessTimeStamp.setDescription('Indicates the last time that the decision process was executed by this node.')
pnniDecisionProcessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniDecisionProcessCount.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2')
if mibBuilder.loadTexts: pnniDecisionProcessCount.setStatus('current')
if mibBuilder.loadTexts: pnniDecisionProcessCount.setDescription('The number of times that the decision process has been executed by this node.')
pnniMSInputOnhlTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 5), )
if mibBuilder.loadTexts: pnniMSInputOnhlTable.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2')
if mibBuilder.loadTexts: pnniMSInputOnhlTable.setStatus('current')
if mibBuilder.loadTexts: pnniMSInputOnhlTable.setDescription('The pnniMSInputOnhlTable collects attributes on a per node basis for each outside nodal hierarchy list that is an input to the decision process.')
pnniMSInputOnhlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 5, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "PNNI-MOB-EXT-MIB", "pnniOnhlIndex"))
if mibBuilder.loadTexts: pnniMSInputOnhlEntry.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2')
if mibBuilder.loadTexts: pnniMSInputOnhlEntry.setStatus('current')
if mibBuilder.loadTexts: pnniMSInputOnhlEntry.setDescription('An entry to the table containing attributes about an outside nodal hierarchy list which belongs to the input pool of a decision process. Only outside nodal hierarchy lists that are valid candidates for the decision process are part of the input pool.')
pnniInputOnhlTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 5, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniInputOnhlTimeStamp.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2')
if mibBuilder.loadTexts: pnniInputOnhlTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pnniInputOnhlTimeStamp.setDescription('Indicates the time at which the outside nodal hierarchy list was inserted into the input pool of this nodal decision process.')
pnniInputOnhlSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("mobileInterface", 1), ("nodalInformationGroup", 2), ("localNode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniInputOnhlSourceType.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2')
if mibBuilder.loadTexts: pnniInputOnhlSourceType.setStatus('current')
if mibBuilder.loadTexts: pnniInputOnhlSourceType.setDescription("The type of the source that originated the outside nodal hierarchy list. If the outside nodal hierarchy list is a copy of a nodal hierarchy list received from a mobile interface, this attribute contains the value 'mobileInterface'. If the outside nodal hierarchy list was extracted from a nodal information group of an external node (i.e. not on this switching system), this attribute contains the value 'nodalInformationGroup'. If the outside nodal hierarchy list is passed from a child node (i.e on the same switching system), this attribute contains the value 'localNode'.")
pnniInputOnhlNodeIdSource = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 5, 1, 3), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniInputOnhlNodeIdSource.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2')
if mibBuilder.loadTexts: pnniInputOnhlNodeIdSource.setStatus('current')
if mibBuilder.loadTexts: pnniInputOnhlNodeIdSource.setDescription("The node id of the node which was the source of this outside nodal hierarchy list. If pnniInputOnhlSourceType has a value of 'mobileInterface', this attribute contains the node id of the border node that advertised the nodal hierarchy list. If pnniInputOnhlSourceType has a value of 'nodalInformationGroup' , this attribute contains the node id of the node that generated the nodal information group. If pnniInputOnhlSourceType has a value of 'localNode', inside of the switching system, this attribute contains the node id of the local node. If pnniInputOnhlSourceType has none of the above mentioned values, this attribute has a value of 0.")
pnniInputOnhlMobileIfSource = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 5, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniInputOnhlMobileIfSource.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2')
if mibBuilder.loadTexts: pnniInputOnhlMobileIfSource.setStatus('current')
if mibBuilder.loadTexts: pnniInputOnhlMobileIfSource.setDescription("If pnniInputOnhlSourceType has the value of 'mobileInterface', this attributes contains the index in the pnniIfTable of the mobile interface from which the outside nodal hierarchy list was generated. For all other values of pnniInputOnhlSourceType, this attribute has a value of 0.")
pnniInputOnhlNodeIndexSource = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 2, 5, 1, 5), PnniNodeIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniInputOnhlNodeIndexSource.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2')
if mibBuilder.loadTexts: pnniInputOnhlNodeIndexSource.setStatus('current')
if mibBuilder.loadTexts: pnniInputOnhlNodeIndexSource.setDescription("If pnniInputOnhlSourceType has the value of 'localNode', this attribute contains the index in the pnniNodeTable of the child node that selected this outside nodal hierarchy list as the output nodal hierarchy list. For all other values of pnniInputOnhlSourceType, this attribute has a value of 0.")
pnniAccessPointGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 3))
pnniAPMobileIfTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 3, 1), )
if mibBuilder.loadTexts: pnniAPMobileIfTable.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2.2.')
if mibBuilder.loadTexts: pnniAPMobileIfTable.setStatus('current')
if mibBuilder.loadTexts: pnniAPMobileIfTable.setDescription('Contains the attributes necessary to configure PNNI interfaces on an access point switching system ')
pnniAPMobileIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 3, 1, 1), )
if mibBuilder.loadTexts: pnniAPMobileIfEntry.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2.2')
pnniIfEntry.registerAugmentions(("PNNI-MOB-EXT-MIB", "pnniAPMobileIfEntry"))
pnniAPMobileIfEntry.setIndexNames(*pnniIfEntry.getIndexNames())
if mibBuilder.loadTexts: pnniAPMobileIfEntry.setStatus('current')
if mibBuilder.loadTexts: pnniAPMobileIfEntry.setDescription(' Contains the attributes necessary to configure PNNI interfaces on an access point switching system ')
pnniAPMobileIfNhlLevelFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 1, 3, 1, 1, 1), PnniLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniAPMobileIfNhlLevelFilter.setReference('ATM Forum PNNI Addendum for mobility extensions section 2.2.2')
if mibBuilder.loadTexts: pnniAPMobileIfNhlLevelFilter.setStatus('current')
if mibBuilder.loadTexts: pnniAPMobileIfNhlLevelFilter.setDescription('This attribute is used to apply a mask on the nodal hierarchy list advertised in HELLO protocol on this specific interface. The value of this attribute specifies the highest level of the PNNI hierarchy advertised in the nodal hierarchy list. In other words, any entry of the nodal hierarchy list that has a value for the level smaller than the value of this attribute is not advertised. A value of zero indicates that no filter is applied')
pnniMobExtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 2))
pnniMobExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 2, 1))
pnniMobExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 2, 2))
pnniMobExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 2, 1, 1)).setObjects(("PNNI-MOB-EXT-MIB", "pnniMobExtMinGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pnniMobExtMIBCompliance = pnniMobExtMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: pnniMobExtMIBCompliance.setDescription('The compliance statement for entities which implement the PNNI mobility extensions MIB. Groups of the PNNI mobility extensions objects required for using these extensions are identified by the suffix MinGroup. Groups of PNNI mobile extensions objects required for management of a mobile switch are identified by the suffix MSGroup. Groups of optional PNNI mobility extensions objects for the management of an access point switch are identified by the suffix APOptionalGroup.')
pnniMobExtMinGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 2, 2, 1)).setObjects(("PNNI-MOB-EXT-MIB", "pnniMobExtVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pnniMobExtMinGroup = pnniMobExtMinGroup.setStatus('current')
if mibBuilder.loadTexts: pnniMobExtMinGroup.setDescription('A collection of mobility extensions objects required for using the extensions in a switching system.')
pnniIfMSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 2, 2, 2)).setObjects(("PNNI-MOB-EXT-MIB", "pnniIfMobilityEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pnniIfMSGroup = pnniIfMSGroup.setStatus('current')
if mibBuilder.loadTexts: pnniIfMSGroup.setDescription('A collection of per interface, mobility related PNNI mobility extensions objects required for the management of mobile switch.')
pnniMobileLgnMSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 2, 2, 3)).setObjects(("PNNI-MOB-EXT-MIB", "pnniMobileLgnIndex"), ("PNNI-MOB-EXT-MIB", "pnniMobileLgnMinLevel"), ("PNNI-MOB-EXT-MIB", "pnniMobileLgnMaxLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pnniMobileLgnMSGroup = pnniMobileLgnMSGroup.setStatus('current')
if mibBuilder.loadTexts: pnniMobileLgnMSGroup.setDescription('A collection of mobile LGN related PNNI mobility extensions objects required for the management of mobile switch.')
pnniOnhlMSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 2, 2, 4)).setObjects(("PNNI-MOB-EXT-MIB", "pnniOnhlNodeId"), ("PNNI-MOB-EXT-MIB", "pnniOnhlAtmAddr"), ("PNNI-MOB-EXT-MIB", "pnniOnhlPeerGroupId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pnniOnhlMSGroup = pnniOnhlMSGroup.setStatus('current')
if mibBuilder.loadTexts: pnniOnhlMSGroup.setDescription('A collection of onhl related PNNI mobility extensions objects required for the management of a mobile switch.')
pnniNodeMSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 2, 2, 5)).setObjects(("PNNI-MOB-EXT-MIB", "pnniOutputOnhlIndex"), ("PNNI-MOB-EXT-MIB", "pnniOutputOnhlTimeStamp"), ("PNNI-MOB-EXT-MIB", "pnniDecisionProcessTimeStamp"), ("PNNI-MOB-EXT-MIB", "pnniDecisionProcessCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pnniNodeMSGroup = pnniNodeMSGroup.setStatus('current')
if mibBuilder.loadTexts: pnniNodeMSGroup.setDescription('A collection of per node decision process related PNNI mobility extensions objects required for management of a mobile switch.')
pnniInputOnhlMSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 2, 2, 6)).setObjects(("PNNI-MOB-EXT-MIB", "pnniInputOnhlTimeStamp"), ("PNNI-MOB-EXT-MIB", "pnniInputOnhlSourceType"), ("PNNI-MOB-EXT-MIB", "pnniInputOnhlNodeIdSource"), ("PNNI-MOB-EXT-MIB", "pnniInputOnhlMobileIfSource"), ("PNNI-MOB-EXT-MIB", "pnniInputOnhlNodeIndexSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pnniInputOnhlMSGroup = pnniInputOnhlMSGroup.setStatus('current')
if mibBuilder.loadTexts: pnniInputOnhlMSGroup.setDescription('A collection of per node input onhl related PNNI mobility extensions objects required for the management of a mobile switch.')
pnniMobileIfAPOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 4, 2, 2, 2, 7)).setObjects(("PNNI-MOB-EXT-MIB", "pnniAPMobileIfNhlLevelFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pnniMobileIfAPOptionalGroup = pnniMobileIfAPOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: pnniMobileIfAPOptionalGroup.setDescription('A collection of optional, per PNNI interface, NHL filters related PNNI mobility extensions objects for management of an access point switching system.')
mibBuilder.exportSymbols("PNNI-MOB-EXT-MIB", pnniMSOnhlTable=pnniMSOnhlTable, pnniOutputOnhlIndex=pnniOutputOnhlIndex, pnniMobExtMIB=pnniMobExtMIB, pnniMobExtVersion=pnniMobExtVersion, pnniAPMobileIfNhlLevelFilter=pnniAPMobileIfNhlLevelFilter, pnniMobExtMIBObjects=pnniMobExtMIBObjects, atmForum=atmForum, pnniOnhlLevel=pnniOnhlLevel, pnniIfMobilityEnabled=pnniIfMobilityEnabled, atmForumNetworkManagement=atmForumNetworkManagement, pnniDecisionProcessCount=pnniDecisionProcessCount, pnniMobileLgnMaxLevel=pnniMobileLgnMaxLevel, pnniDecisionProcessTimeStamp=pnniDecisionProcessTimeStamp, pnniNodeMSGroup=pnniNodeMSGroup, pnniMobExtBaseGroup=pnniMobExtBaseGroup, pnniInputOnhlNodeIdSource=pnniInputOnhlNodeIdSource, pnniMobileLgnIndex=pnniMobileLgnIndex, pnniMobileLgnMinLevel=pnniMobileLgnMinLevel, pnniInputOnhlMobileIfSource=pnniInputOnhlMobileIfSource, pnniMSInputOnhlTable=pnniMSInputOnhlTable, pnniMobExtMIBGroups=pnniMobExtMIBGroups, pnniOnhlPeerGroupId=pnniOnhlPeerGroupId, pnniAccessPointGroup=pnniAccessPointGroup, pnniAPMobileIfTable=pnniAPMobileIfTable, pnniMobExtMinGroup=pnniMobExtMinGroup, pnniMobileLgnMSGroup=pnniMobileLgnMSGroup, pnniOnhlNodeId=pnniOnhlNodeId, pnniOnhlAtmAddr=pnniOnhlAtmAddr, pnniInputOnhlMSGroup=pnniInputOnhlMSGroup, pnniInputOnhlSourceType=pnniInputOnhlSourceType, pnniMSNodeTable=pnniMSNodeTable, pnniMSOnhlEntry=pnniMSOnhlEntry, PnniOnhlIndex=PnniOnhlIndex, pnniInputOnhlTimeStamp=pnniInputOnhlTimeStamp, pnniMSMobileIfEntry=pnniMSMobileIfEntry, pnniMobileSwitchGroup=pnniMobileSwitchGroup, atmfPnni=atmfPnni, PYSNMP_MODULE_ID=pnniMobExtMIB, pnniMSInputOnhlEntry=pnniMSInputOnhlEntry, pnniAPMobileIfEntry=pnniAPMobileIfEntry, pnniIfMSGroup=pnniIfMSGroup, pnniMobileIfAPOptionalGroup=pnniMobileIfAPOptionalGroup, pnniOnhlIndex=pnniOnhlIndex, pnniOutputOnhlTimeStamp=pnniOutputOnhlTimeStamp, pnniMobExtMIBCompliance=pnniMobExtMIBCompliance, pnniMobExtMIBCompliances=pnniMobExtMIBCompliances, pnniMSNodeEntry=pnniMSNodeEntry, pnniInputOnhlNodeIndexSource=pnniInputOnhlNodeIndexSource, pnniMobExtMIBConformance=pnniMobExtMIBConformance, pnniMSMobileLgnGroup=pnniMSMobileLgnGroup, pnniOnhlMSGroup=pnniOnhlMSGroup, pnniMSMobileIfTable=pnniMSMobileIfTable)
