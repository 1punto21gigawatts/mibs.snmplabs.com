#
# PySNMP MIB module Zhone (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Zhone
# Produced by pysmi-0.3.4 at Wed May  1 12:27:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, enterprises, Unsigned32, Integer32, Counter64, Gauge32, NotificationType, MibIdentifier, Counter32, ModuleIdentity, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "enterprises", "Unsigned32", "Integer32", "Counter64", "Gauge32", "NotificationType", "MibIdentifier", "Counter32", "ModuleIdentity", "iso", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
zhone = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504))
zhone.setRevisions(('2011-12-05 16:58', '2011-05-06 00:20', '2010-02-19 10:51', '2009-05-27 02:08', '2008-01-23 11:46', '2007-11-09 13:05', '2007-10-16 10:26', '2007-02-17 13:43', '2006-06-09 12:48', '2005-12-01 14:20', '2004-10-13 14:40', '2004-10-08 11:15', '2004-08-11 15:42', '2004-01-30 13:34', '2003-10-28 11:03', '2003-07-17 14:29', '2002-03-04 15:34', '2001-10-09 12:07', '2000-09-28 16:32', '2000-12-18 16:32', '2000-12-20 17:20', '2001-02-07 17:11', '2001-02-22 11:35', '2001-04-10 14:35', '2001-05-15 10:32', '2001-06-26 17:06', '2001-06-28 13:33', '2001-07-31 08:51', '2001-08-29 16:56', '2001-08-31 15:33',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhone.setRevisionsDescriptions(('Add 1588 Precision Timing Module.', 'IEEE 802.1 related mibs.', 'V01.01.27 - Added zhoneRmonMibModule.', 'V01.01.26 - Added zhoneIua.', 'add zhoneInterfaceConfig', 'V01.01.24 - Added zhoneSFF.', 'V01.01.23 - Add zhoneWdm.', 'V01.01.22 - Add zhoneRadius.', 'V01.01.21 - Add zhoneVdsl Add efmOamMIB from ZOI 89562 Add efmCuMIB from ZOI 89562', 'V01.01.20 - Add zhoneBonding.', 'V01.01.19 - Added a new entry for pktcIetfSigMib', 'V01.01.18 - Added zhoneSs7 and zhoneClass5', 'V01.01.17 - Added zhoneCes', 'V01.01.17 - Added zhoneIsdn', 'V01.01.16 - Added zhoneVideo.', 'V01.01.15 - Added zhoneVoiceStats to zhoneGeneric.', 'V01.01.14 - Added zhoneExperimental branch for Sonet APS.', 'V01.01.13 - Add Bridge group under communication protocols.', 'V01.01.01 - Added zhoneRegWtn for registration of Zhone Wireless Transport Node. Added zhoneWtx for RF interfaces on Zhone Wireless Transport Node.', 'V01.01.02 - Added zhoneSonet for Zhone SONET MIB used for Sechtor 100 and BAN products.', 'V01.01.03 - Added sechtor100 under zhoneSechtor for Sechtor 100 MIB.', 'V01.01.04 - Added zhonePpp under zhoneCommunicationProtocols for the PPP MIBs.', 'V01.01.05 - Add Ds3 Medium Extension Table.', 'V01.01.06 - Add zhoneIma Module definition', 'V01.01.07 - Make wireless component names uniformly wtn and radio.', 'V01.01.08 - Added Malc Product Family', 'V01.01.09 - fix 17 slot limit problem', 'V01.01.10 - Add ZMS Product Family', 'V01.01.11 - Add zhoneZAP object to zhoneGeneric structure.', 'V01.01.12 - Add sechtor300 group under sechtor',))
if mibBuilder.loadTexts: zhone.setLastUpdated('201112052000Z')
if mibBuilder.loadTexts: zhone.setOrganization('Zhone Technologies')
if mibBuilder.loadTexts: zhone.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: zhone.setDescription('This is the Zhone Information MIB for all entries that are used across all Zhone platforms.')
zhoneRegistrations = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 1))
if mibBuilder.loadTexts: zhoneRegistrations.setStatus('current')
if mibBuilder.loadTexts: zhoneRegistrations.setDescription('Sub-tree for registrations. See the Zhone registrations MIB for the actual tree.')
zhoneRegPls = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 1, 1))
if mibBuilder.loadTexts: zhoneRegPls.setStatus('current')
if mibBuilder.loadTexts: zhoneRegPls.setDescription('PLS product registrations')
zhoneRegCpe = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 1, 2))
if mibBuilder.loadTexts: zhoneRegCpe.setStatus('current')
if mibBuilder.loadTexts: zhoneRegCpe.setDescription('Zhone CPE equipment product registrations.')
zhoneRegMux = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 1, 3))
if mibBuilder.loadTexts: zhoneRegMux.setStatus('current')
if mibBuilder.loadTexts: zhoneRegMux.setDescription('Zhone Mux Product Registrations.')
zhoneRegSechtor = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 1, 4))
if mibBuilder.loadTexts: zhoneRegSechtor.setStatus('current')
if mibBuilder.loadTexts: zhoneRegSechtor.setDescription('Zhone Sechtor Product Registrations.')
zhoneRegWtn = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 1, 5))
if mibBuilder.loadTexts: zhoneRegWtn.setStatus('current')
if mibBuilder.loadTexts: zhoneRegWtn.setDescription('Zhone Wireless Transport Product Registrations.')
zhoneRegMalc = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 1, 6))
if mibBuilder.loadTexts: zhoneRegMalc.setStatus('current')
if mibBuilder.loadTexts: zhoneRegMalc.setDescription('Multiple Access Loop Concentrator product registrations')
zhoneProduct = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 2))
if mibBuilder.loadTexts: zhoneProduct.setStatus('current')
if mibBuilder.loadTexts: zhoneProduct.setDescription('Products hierarchy for the Zhone enterprise')
zhonePls = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 1))
if mibBuilder.loadTexts: zhonePls.setStatus('current')
if mibBuilder.loadTexts: zhonePls.setDescription('PLS product specific MIB hierarchy.')
zhoneZedge = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 2))
if mibBuilder.loadTexts: zhoneZedge.setStatus('current')
if mibBuilder.loadTexts: zhoneZedge.setDescription('Zedge product specific MIB hierarchy.')
zhoneZplex = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 3))
if mibBuilder.loadTexts: zhoneZplex.setStatus('current')
if mibBuilder.loadTexts: zhoneZplex.setDescription('Z-Plex product specific MIB hierarchy.')
zhoneSechtor = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 4))
if mibBuilder.loadTexts: zhoneSechtor.setStatus('current')
if mibBuilder.loadTexts: zhoneSechtor.setDescription('Sechtor product specific MIB hierarchy.')
sechtor100 = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1))
if mibBuilder.loadTexts: sechtor100.setStatus('current')
if mibBuilder.loadTexts: sechtor100.setDescription('MIB module for Sechtor 100 product.')
sechtor300 = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 4, 2))
if mibBuilder.loadTexts: sechtor300.setStatus('current')
if mibBuilder.loadTexts: sechtor300.setDescription('MIB module for Sechtor 300/ArcaDacs 100 product.')
zhoneWtn = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 5))
if mibBuilder.loadTexts: zhoneWtn.setStatus('current')
if mibBuilder.loadTexts: zhoneWtn.setDescription('Wireless Transport product specific MIB hierarchy.')
zhoneMalc = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 6))
if mibBuilder.loadTexts: zhoneMalc.setStatus('current')
if mibBuilder.loadTexts: zhoneMalc.setDescription('Multiple Access Loop Concentrator product specific MIB hierarchy.')
zhoneZmsProduct = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 7))
if mibBuilder.loadTexts: zhoneZmsProduct.setStatus('current')
if mibBuilder.loadTexts: zhoneZmsProduct.setDescription('ZMS Product Family mib hierarchy.')
zhoneGeneric = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3))
if mibBuilder.loadTexts: zhoneGeneric.setStatus('current')
if mibBuilder.loadTexts: zhoneGeneric.setDescription('This hierarchy defines MIB entities for system level information as opposed to information valid only on a specific card type or protocol. MIBs in this hierarchy may or may not be implemented on a specific Zhone platform but are not specific to only one product. Those MIBs will be in the Zhone product MIB hierarchy.')
zhoneSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 1))
if mibBuilder.loadTexts: zhoneSystem.setStatus('current')
if mibBuilder.loadTexts: zhoneSystem.setDescription('Zhone parameters that apply to the complete system as opposed to just one card. This augments the standard system MIB.')
zhoneShelf = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 2))
if mibBuilder.loadTexts: zhoneShelf.setStatus('current')
if mibBuilder.loadTexts: zhoneShelf.setDescription('The Zhone Shelf MIB contains information specific to a single shelf.')
zhoneCard = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 3))
if mibBuilder.loadTexts: zhoneCard.setStatus('current')
if mibBuilder.loadTexts: zhoneCard.setDescription('The Zhone unit MIB containing generic information for a card based entity. This would cover cards in the case of the BAN and a system in the case of single cpu systems.')
zhoneSubscriber = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 4))
if mibBuilder.loadTexts: zhoneSubscriber.setStatus('current')
if mibBuilder.loadTexts: zhoneSubscriber.setDescription('Subscriber information. This contains all data associated with a subscriber instance. It will contain voice, data, and video information.')
zhoneInterfaceTranslation = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 5))
if mibBuilder.loadTexts: zhoneInterfaceTranslation.setStatus('current')
if mibBuilder.loadTexts: zhoneInterfaceTranslation.setDescription('The interface translation MIB is the Zhone specific mapping of a physical interface to an ifTable entry and vice versa. ')
zhoneInterfaceGroup = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 6))
if mibBuilder.loadTexts: zhoneInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneInterfaceGroup.setDescription('The Interface Group is the Zhone specific mapping of two lines to a common group. The group represents their primary/secondary relationship and determines their group behavior during line switching due to failure or maintainance operations.')
zhoneMasterAgent = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 7))
if mibBuilder.loadTexts: zhoneMasterAgent.setStatus('current')
if mibBuilder.loadTexts: zhoneMasterAgent.setDescription('Zhone Master Agent implementation.')
zhoneTrapModules = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 8))
if mibBuilder.loadTexts: zhoneTrapModules.setStatus('current')
if mibBuilder.loadTexts: zhoneTrapModules.setDescription("This provides a grouping for miscellaneous Traps. This space should only be used by modules that don't have a MIB associated with them.")
zhoneGenWtn = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 9))
if mibBuilder.loadTexts: zhoneGenWtn.setStatus('current')
if mibBuilder.loadTexts: zhoneGenWtn.setDescription('Zhone Wireless Transport generic Mib group.')
zhoneZAP = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 10))
if mibBuilder.loadTexts: zhoneZAP.setStatus('current')
if mibBuilder.loadTexts: zhoneZAP.setDescription('Zhone Wireless Transport generic Mib group.')
zhoneVoiceStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 11))
if mibBuilder.loadTexts: zhoneVoiceStats.setStatus('current')
if mibBuilder.loadTexts: zhoneVoiceStats.setDescription('Voice Call Statistics. This Object contains all instances associated with voice calls statistics.')
zhoneSFF = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 12))
if mibBuilder.loadTexts: zhoneSFF.setStatus('current')
if mibBuilder.loadTexts: zhoneSFF.setDescription('Small Form Factor (SFF) Pluggable and Fixed for both 1Gb (SFP) and 10Gb (XFP) modules.')
zhoneInterfaceConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 13))
if mibBuilder.loadTexts: zhoneInterfaceConfig.setStatus('current')
if mibBuilder.loadTexts: zhoneInterfaceConfig.setDescription('The Zhone Interface Config table is a mechanism to be able to configure a group of physical ifIndex to the same parameters.')
zhoneCommunicationProtocols = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4))
if mibBuilder.loadTexts: zhoneCommunicationProtocols.setStatus('current')
if mibBuilder.loadTexts: zhoneCommunicationProtocols.setDescription('This MIB hierarchy defines the communication protocol specific MIBs (e.g. IP) that are Zhone proprietary. They may or may not be implemented on a specific Zhone product based upon what functionality is supported on that product.')
zhoneIp = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1))
if mibBuilder.loadTexts: zhoneIp.setStatus('current')
if mibBuilder.loadTexts: zhoneIp.setDescription('IP related Zhone MIBs.')
zhoneAtm = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 2))
if mibBuilder.loadTexts: zhoneAtm.setStatus('current')
if mibBuilder.loadTexts: zhoneAtm.setDescription('ATM related Zhone MIBs.')
zhoneVoice = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 3))
if mibBuilder.loadTexts: zhoneVoice.setStatus('current')
if mibBuilder.loadTexts: zhoneVoice.setDescription('Voice related Zhone MIBs.')
zhoneVoip = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 4))
if mibBuilder.loadTexts: zhoneVoip.setStatus('current')
if mibBuilder.loadTexts: zhoneVoip.setDescription('Voice over IP related Zhone MIBs.')
zhonePpp = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 5))
if mibBuilder.loadTexts: zhonePpp.setStatus('current')
if mibBuilder.loadTexts: zhonePpp.setDescription('PPP related Zhone MIBs.')
zhoneIma = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 6))
if mibBuilder.loadTexts: zhoneIma.setStatus('current')
if mibBuilder.loadTexts: zhoneIma.setDescription('IMA related Zhone MIBs.')
zhoneBridge = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 7))
if mibBuilder.loadTexts: zhoneBridge.setStatus('current')
if mibBuilder.loadTexts: zhoneBridge.setDescription('Ip Bridge related Zhone MIBs.')
zhoneVideo = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 8))
if mibBuilder.loadTexts: zhoneVideo.setStatus('current')
if mibBuilder.loadTexts: zhoneVideo.setDescription('Video related Zhone MIBs.')
zhoneIsdn = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 9))
if mibBuilder.loadTexts: zhoneIsdn.setStatus('current')
if mibBuilder.loadTexts: zhoneIsdn.setDescription('ISDN related Zhone MIBs.')
zhoneCes = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 10))
if mibBuilder.loadTexts: zhoneCes.setStatus('current')
if mibBuilder.loadTexts: zhoneCes.setDescription('Circuit Emulation Service related (CES) Zhone MIBs.')
zhoneSs7 = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 11))
if mibBuilder.loadTexts: zhoneSs7.setStatus('current')
if mibBuilder.loadTexts: zhoneSs7.setDescription('SS7 related MIBs.')
zhoneClass5 = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 12))
if mibBuilder.loadTexts: zhoneClass5.setStatus('current')
if mibBuilder.loadTexts: zhoneClass5.setDescription('Class-5 switch related MIBs.')
zhoneBonding = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 13))
if mibBuilder.loadTexts: zhoneBonding.setStatus('current')
if mibBuilder.loadTexts: zhoneBonding.setDescription('Zhone Bonding protocols, including EFM, N2N and MLPPP.')
zhoneRadius = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 14))
if mibBuilder.loadTexts: zhoneRadius.setStatus('current')
if mibBuilder.loadTexts: zhoneRadius.setDescription('Zhone RADIUS protocols including both client and server.')
zhoneIua = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 15))
if mibBuilder.loadTexts: zhoneIua.setStatus('current')
if mibBuilder.loadTexts: zhoneIua.setDescription('IUA/SCTP related Zhone MIBs')
zhone802Dot1Mibs = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 16))
if mibBuilder.loadTexts: zhone802Dot1Mibs.setStatus('current')
if mibBuilder.loadTexts: zhone802Dot1Mibs.setDescription('IEEE 802.1 related mibs.')
zhonePtp = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 17))
if mibBuilder.loadTexts: zhonePtp.setStatus('current')
if mibBuilder.loadTexts: zhonePtp.setDescription("MIB elements for Zhone's implementation of the IEEE Precision Timing Protocol.")
zhonePhysical = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5))
if mibBuilder.loadTexts: zhonePhysical.setStatus('current')
if mibBuilder.loadTexts: zhonePhysical.setDescription('This MIB hierarchy contains Zhone proprietary MIBs for implementing different physical interfaces.')
zhoneEnet = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 1))
if mibBuilder.loadTexts: zhoneEnet.setStatus('current')
if mibBuilder.loadTexts: zhoneEnet.setDescription('Ethernet related Zhone MIBs.')
zhoneDsx = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 2))
if mibBuilder.loadTexts: zhoneDsx.setStatus('current')
if mibBuilder.loadTexts: zhoneDsx.setDescription('DS3/DS1 related Zhone MIBs.')
zhoneOcx = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 3))
if mibBuilder.loadTexts: zhoneOcx.setStatus('current')
if mibBuilder.loadTexts: zhoneOcx.setDescription('OC3/OC12 related Zhone MIBs.')
zhoneDsl = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 4))
if mibBuilder.loadTexts: zhoneDsl.setStatus('current')
if mibBuilder.loadTexts: zhoneDsl.setDescription('DSL related Zhone MIBs.')
zhoneConsole = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 5))
if mibBuilder.loadTexts: zhoneConsole.setStatus('current')
if mibBuilder.loadTexts: zhoneConsole.setDescription('Zhone MIBs required for implementing the console interface. The RS-232 MIB was not implemented due to the fact this was much more complex than what was required for this simple interface.')
zhoneRadio = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 8))
if mibBuilder.loadTexts: zhoneRadio.setStatus('current')
if mibBuilder.loadTexts: zhoneRadio.setDescription('Zhone MIBs for radio interfaces used in the Zhone Wireless Transport Node.')
zhoneSonet = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 9))
if mibBuilder.loadTexts: zhoneSonet.setStatus('current')
if mibBuilder.loadTexts: zhoneSonet.setDescription('Zhone SONET MIB used in the Zhone Sechtor 100 and BAN products.')
zhoneDs3Ext = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 10))
if mibBuilder.loadTexts: zhoneDs3Ext.setStatus('current')
if mibBuilder.loadTexts: zhoneDs3Ext.setDescription('Zhone Ds3Ext MIB used in the Zhone BAN product.')
zhoneLineTypes = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 11))
if mibBuilder.loadTexts: zhoneLineTypes.setStatus('current')
if mibBuilder.loadTexts: zhoneLineTypes.setDescription('Zhone custom physical line and port configurations.')
zhoneApon = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 12))
if mibBuilder.loadTexts: zhoneApon.setStatus('current')
if mibBuilder.loadTexts: zhoneApon.setDescription('ATM-PON related Zhone MIBs.')
zhoneVdsl = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 13))
if mibBuilder.loadTexts: zhoneVdsl.setStatus('current')
if mibBuilder.loadTexts: zhoneVdsl.setDescription('VDSL2 related Zhone MIBs.')
zhoneGpon = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 14))
if mibBuilder.loadTexts: zhoneGpon.setStatus('current')
if mibBuilder.loadTexts: zhoneGpon.setDescription('Description.')
zhoneWdm = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 15))
if mibBuilder.loadTexts: zhoneWdm.setStatus('current')
if mibBuilder.loadTexts: zhoneWdm.setDescription('Wave Division Multiplexing related Zhone MIBs.')
zhoneCpe = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 16))
if mibBuilder.loadTexts: zhoneCpe.setStatus('current')
if mibBuilder.loadTexts: zhoneCpe.setDescription('CPE profiles for Voip and Pseudo wire.')
zhoneModules = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 6))
if mibBuilder.loadTexts: zhoneModules.setStatus('current')
if mibBuilder.loadTexts: zhoneModules.setDescription('Sub-tree used for Module-Identity declarations.')
zhoneShelfSlotTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 7), )
if mibBuilder.loadTexts: zhoneShelfSlotTable.setStatus('current')
if mibBuilder.loadTexts: zhoneShelfSlotTable.setDescription('The shelf/slot table is included to provide the table entries zhoneShelfIndex and zhoneSlotIndex allowing these indexes to be imported and used globally.')
zhoneShelfSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 7, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "Zhone", "zhoneSlotIndex"))
if mibBuilder.loadTexts: zhoneShelfSlotEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneShelfSlotEntry.setDescription('Entry for the shelf/slot index table.')
zhoneShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneShelfIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneShelfIndex.setDescription('The global shelf index. This index can be used by tables that index by shelf and slot eliminating the need for shelf and slot columns in the table.')
zhoneSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSlotIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneSlotIndex.setDescription('The global slot index. This index can be used by tables that index by shelf and slot eliminating the need to include shelf and slot columns in the table.')
zhoneCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 9))
zhoneGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 9, 1))
zhoneShelfSlotGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 9, 1, 1)).setObjects(("Zhone", "zhoneShelfIndex"), ("Zhone", "zhoneSlotIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneShelfSlotGroup = zhoneShelfSlotGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneShelfSlotGroup.setDescription('Group which contains the standard objects for addressing shelf and slot values on Zhone products')
zhoneCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 9, 2))
zhoneShelfSlotCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5504, 9, 2, 1)).setObjects(("Zhone", "zhoneShelfSlotGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneShelfSlotCompliance = zhoneShelfSlotCompliance.setStatus('current')
if mibBuilder.loadTexts: zhoneShelfSlotCompliance.setDescription('The compliance statement for SNMP entities which manage Zhone Devices.')
zhoneExperimental = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 10))
if mibBuilder.loadTexts: zhoneExperimental.setStatus('current')
if mibBuilder.loadTexts: zhoneExperimental.setDescription('Zhone Experimental Mibs.')
ietfDrafts = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 10, 1))
if mibBuilder.loadTexts: ietfDrafts.setStatus('current')
if mibBuilder.loadTexts: ietfDrafts.setDescription('IETF Draft Mibs currently under review.')
apsMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 10, 1, 1))
if mibBuilder.loadTexts: apsMIB.setStatus('current')
if mibBuilder.loadTexts: apsMIB.setDescription('SONET Linear APS architectures taken from draft-ietf-atommib-sonetaps-mib-05.txt.')
sipTC = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 10, 1, 2))
if mibBuilder.loadTexts: sipTC.setStatus('current')
if mibBuilder.loadTexts: sipTC.setDescription('SIP (Session Initiated Protocol) taken from draft-ietf-sip-mib-05.txt.')
sipCommonMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 10, 1, 3))
if mibBuilder.loadTexts: sipCommonMIB.setStatus('current')
if mibBuilder.loadTexts: sipCommonMIB.setDescription('SIP (Session Initiated Protocol) taken from draft-ietf-sip-mib-05.txt.')
sipUAMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 10, 1, 4))
if mibBuilder.loadTexts: sipUAMIB.setStatus('current')
if mibBuilder.loadTexts: sipUAMIB.setDescription('SIP (Session Initiated Protocol) taken from draft-ietf-sip-mib-05.txt.')
pktcIetfSigMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 10, 1, 5))
if mibBuilder.loadTexts: pktcIetfSigMib.setStatus('current')
if mibBuilder.loadTexts: pktcIetfSigMib.setDescription('Endpoint signaling mib taken from draft-ietf-ipcdn-signaling-06.txt.')
efmOamMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 10, 1, 6))
if mibBuilder.loadTexts: efmOamMIB.setStatus('current')
if mibBuilder.loadTexts: efmOamMIB.setDescription('EFM Oam mib taken from draft-ietf-hubmib-efm-mib-03.txt.')
efmCuMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 10, 1, 7))
if mibBuilder.loadTexts: efmCuMIB.setStatus('current')
if mibBuilder.loadTexts: efmCuMIB.setDescription('EFM Cu mib taken from draft-ietf-hubmib-efm-mib-04.txt.')
pwTcStdMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 10, 1, 8))
if mibBuilder.loadTexts: pwTcStdMIB.setStatus('current')
if mibBuilder.loadTexts: pwTcStdMIB.setDescription('This MIB module defines TEXTUAL CONVENTIONs for concepts used in Pseudo Wire Edge-to-Edge networks.')
ianaPwe3MIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 10, 1, 9))
if mibBuilder.loadTexts: ianaPwe3MIB.setStatus('current')
if mibBuilder.loadTexts: ianaPwe3MIB.setDescription('This MIB module defines the IANAPwTypeTC and IANAPwPsnTypeTC textual conventions for use in PWE3 MIB modules.')
pwStdMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 10, 1, 10))
if mibBuilder.loadTexts: pwStdMIB.setStatus('current')
if mibBuilder.loadTexts: pwStdMIB.setDescription("This MIB module contains managed object definitions for pseudowire operation as in Bryant, S. and P. Pate, 'Pseudo Wire Emulation Edge-to-Edge (PWE3) Architecture' [RFC3985].")
pwTDMMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 10, 1, 11))
if mibBuilder.loadTexts: pwTDMMIB.setStatus('current')
if mibBuilder.loadTexts: pwTDMMIB.setDescription('This MIB contains managed object definitions for encapsulating TDM (T1,E1, T3, E3, NxDS0) as pseudo-wires over packet-switching networks (PSN).')
zhoneRmonMibModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 10, 1, 12))
if mibBuilder.loadTexts: zhoneRmonMibModule.setStatus('current')
if mibBuilder.loadTexts: zhoneRmonMibModule.setDescription('This MIB contains objects similar to rfc2819 RMON-2. The etherStatsEntry index has been modified to be an ifIndex value. There is also added support for various Broadcom supported stats. ')
zhoneDrafts = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 10, 2))
if mibBuilder.loadTexts: zhoneDrafts.setStatus('current')
if mibBuilder.loadTexts: zhoneDrafts.setDescription('Zhone proprietary draft MIBs.')
mibBuilder.exportSymbols("Zhone", apsMIB=apsMIB, zhoneShelfIndex=zhoneShelfIndex, zhoneRegPls=zhoneRegPls, zhoneSystem=zhoneSystem, sipCommonMIB=sipCommonMIB, zhoneRegCpe=zhoneRegCpe, zhoneGenWtn=zhoneGenWtn, sipUAMIB=sipUAMIB, zhoneDs3Ext=zhoneDs3Ext, zhoneDrafts=zhoneDrafts, zhoneExperimental=zhoneExperimental, zhoneWtn=zhoneWtn, efmCuMIB=efmCuMIB, pktcIetfSigMib=pktcIetfSigMib, zhonePtp=zhonePtp, zhoneRegWtn=zhoneRegWtn, zhoneProduct=zhoneProduct, pwTcStdMIB=pwTcStdMIB, zhoneIma=zhoneIma, zhoneBonding=zhoneBonding, zhoneAtm=zhoneAtm, zhoneRegSechtor=zhoneRegSechtor, zhoneWdm=zhoneWdm, zhoneVoice=zhoneVoice, zhoneVoip=zhoneVoip, zhoneZplex=zhoneZplex, zhoneRadio=zhoneRadio, zhoneGroups=zhoneGroups, zhoneIp=zhoneIp, sipTC=sipTC, zhoneIsdn=zhoneIsdn, zhoneRegistrations=zhoneRegistrations, zhoneMalc=zhoneMalc, zhoneEnet=zhoneEnet, zhoneRadius=zhoneRadius, zhoneSubscriber=zhoneSubscriber, zhoneSonet=zhoneSonet, zhoneSs7=zhoneSs7, zhoneSFF=zhoneSFF, zhoneSechtor=zhoneSechtor, zhonePls=zhonePls, zhoneShelf=zhoneShelf, pwTDMMIB=pwTDMMIB, zhoneCard=zhoneCard, zhoneVideo=zhoneVideo, zhoneLineTypes=zhoneLineTypes, zhoneShelfSlotEntry=zhoneShelfSlotEntry, zhoneModules=zhoneModules, pwStdMIB=pwStdMIB, zhoneRmonMibModule=zhoneRmonMibModule, sechtor100=sechtor100, zhoneZedge=zhoneZedge, zhoneInterfaceConfig=zhoneInterfaceConfig, zhoneShelfSlotTable=zhoneShelfSlotTable, zhoneRegMalc=zhoneRegMalc, zhoneMasterAgent=zhoneMasterAgent, zhoneCes=zhoneCes, zhoneShelfSlotGroup=zhoneShelfSlotGroup, zhoneShelfSlotCompliance=zhoneShelfSlotCompliance, zhoneInterfaceGroup=zhoneInterfaceGroup, zhoneInterfaceTranslation=zhoneInterfaceTranslation, zhoneVoiceStats=zhoneVoiceStats, zhoneBridge=zhoneBridge, zhone=zhone, efmOamMIB=efmOamMIB, zhoneRegMux=zhoneRegMux, zhoneTrapModules=zhoneTrapModules, zhoneIua=zhoneIua, zhoneSlotIndex=zhoneSlotIndex, zhoneCompliances=zhoneCompliances, ianaPwe3MIB=ianaPwe3MIB, zhoneDsl=zhoneDsl, zhonePpp=zhonePpp, ietfDrafts=ietfDrafts, zhoneCommunicationProtocols=zhoneCommunicationProtocols, zhoneVdsl=zhoneVdsl, zhoneGpon=zhoneGpon, zhoneZAP=zhoneZAP, zhoneOcx=zhoneOcx, zhoneGeneric=zhoneGeneric, PYSNMP_MODULE_ID=zhone, zhoneClass5=zhoneClass5, zhoneZmsProduct=zhoneZmsProduct, zhoneCpe=zhoneCpe, zhoneApon=zhoneApon, zhone802Dot1Mibs=zhone802Dot1Mibs, zhoneDsx=zhoneDsx, zhonePhysical=zhonePhysical, sechtor300=sechtor300, zhoneConsole=zhoneConsole, zhoneCompliance=zhoneCompliance)
