#
# PySNMP MIB module JUNIPER-MOBILITY-CHARGING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-MOBILITY-CHARGING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:00:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
jnxMobileGatewayPgwGgsn, = mibBuilder.importSymbols("JUNIPER-MBG-SMI", "jnxMobileGatewayPgwGgsn")
jnxMbgGwName, jnxMbgGwIndex = mibBuilder.importSymbols("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName", "jnxMbgGwIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, Counter64, TimeTicks, ModuleIdentity, Unsigned32, NotificationType, MibIdentifier, iso, IpAddress, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "Counter64", "TimeTicks", "ModuleIdentity", "Unsigned32", "NotificationType", "MibIdentifier", "iso", "IpAddress", "Gauge32", "Counter32")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
jnxMbgPgwChargingMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3))
jnxMbgPgwChargingMib.setRevisions(('2010-06-15 14:30', '2011-10-10 14:30', '2012-03-16 14:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxMbgPgwChargingMib.setRevisionsDescriptions(('Initial version.', 'CGF group and CGF tables index keys has changed to gateway id and profile id. Gateway id and gateway name has added to all the traps.', 'GGSN/PGW Charging global statistics table has added.',))
if mibBuilder.loadTexts: jnxMbgPgwChargingMib.setLastUpdated('201006151430Z')
if mibBuilder.loadTexts: jnxMbgPgwChargingMib.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxMbgPgwChargingMib.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxMbgPgwChargingMib.setDescription('This is Juniper Networks implementation of Mobility Charging MIB for PGW (Packet Data Networks Gateway ) in 3GPP LTE network and the Gateway GPRS Support Node (GGSN) in the 3GPP 3G Network.')
jnxMbgPgwCgNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0))
jnxMbgPgwChargingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1))
jnxMbgPgwCgLcStorageStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 1))
jnxMbgPgwCgCgfGroupsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 2), )
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGroupsStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGroupsStatsTable.setDescription('A table listing the stats for all (Charging Gateway Function) CGF Groups configured on the PGW.')
jnxMbgPgwCgNotificationVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3))
jnxMbgPgwCgCgfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4), )
if mibBuilder.loadTexts: jnxMbgPgwCgCgfStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfStatsTable.setDescription('A table listing the statistics for all CGF configured on the PGW.')
jnxMbgPgwCgLpsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 5), )
if mibBuilder.loadTexts: jnxMbgPgwCgLpsStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgLpsStatsTable.setDescription('A table listing the stats for all Local persistent storage stats configured on the PGW.')
jnxMbgPgwCgTspStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 6), )
if mibBuilder.loadTexts: jnxMbgPgwCgTspStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgTspStatsTable.setDescription('A table listing the stats for all (Charging Gateway Function) CGF Groups configured on the PGW.')
jnxMbgPgwCgPeerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7), )
if mibBuilder.loadTexts: jnxMbgPgwCgPeerStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerStatsTable.setDescription('A table listing the statistics for all CGF configured on the PGW.')
jnxMbgPgwCgGlobalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 8), )
if mibBuilder.loadTexts: jnxMbgPgwCgGlobalStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgGlobalStatsTable.setDescription('A table listing the charging global statistics of the PGW.')
jnxMbgPgwCgFilesOnLcStorage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgFilesOnLcStorage.setStatus('obsolete')
if mibBuilder.loadTexts: jnxMbgPgwCgFilesOnLcStorage.setDescription('The number of Files containing Charging Data Records (CDRs) present on the Local Storage Device.Incremented when a file containing CDRs is closed on the Local storage device Decremented when sftp is done and a file is removed from the Local storage device')
jnxMbgPgwCgLcStorageAvailSpace = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 1, 2), Counter64()).setUnits('MBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgLcStorageAvailSpace.setStatus('obsolete')
if mibBuilder.loadTexts: jnxMbgPgwCgLcStorageAvailSpace.setDescription('The space available on the Local Storage Device in MB.')
jnxMbgPgwCgLpsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 5, 1), ).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"))
if mibBuilder.loadTexts: jnxMbgPgwCgLpsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgLpsStatsEntry.setDescription('A conceptual row listing the statistics for each LPS configured on the PGW.')
jnxMbgPgwCgLpsFilesOnLcStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgLpsFilesOnLcStorage.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgLpsFilesOnLcStorage.setDescription('The number of Files containing Charging Data Records (CDRs) present on the Local Storage Device.Incremented when a file containing CDRs is closed on the Local storage device Decremented when sftp is done and a file is removed from the Local storage device')
jnxMbgPgwCgLpsStorageAvailSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 5, 1, 2), Gauge32()).setUnits('MBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgLpsStorageAvailSpace.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgLpsStorageAvailSpace.setDescription('The space available on the Local Storage Device in MB.')
jnxMbgPgwCgCgfGroupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 2, 1), ).setIndexNames((0, "JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgCgfGrpProfName"))
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGroupStatsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGroupStatsEntry.setDescription('A conceptual row listing the statistics for each CGF Server configured on the PGW.')
jnxMbgPgwCgCgfGrpProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpProfName.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpProfName.setDescription('A string that uniquely identifies the CGF group profile.')
jnxMbgPgwCgCgfGrpDRTReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpDRTReqTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpDRTReqTx.setDescription('Total number of the DRT (Detailed Record Time) request transmitted for the CGF group')
jnxMbgPgwCgCgfGrpDRTReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpDRTReqRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpDRTReqRx.setDescription('Total number of the DRT request received for the CGF group')
jnxMbgPgwCgCgfGrpDRTReqTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpDRTReqTmout.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpDRTReqTmout.setDescription('Total number of the DRT request timeouts happend for the CGF group')
jnxMbgPgwCgCgfGrpDRTSucRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpDRTSucRspRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpDRTSucRspRx.setDescription(' Total number of the DRT success responses received')
jnxMbgPgwCgCgfGrpDRTErrRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpDRTErrRspRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpDRTErrRspRx.setDescription('Total number of the DRT error responses received for the CGF group')
jnxMbgPgwCgCgfGrpRediReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpRediReqRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpRediReqRx.setDescription('Total number of the redirection responses received for the CGF group')
jnxMbgPgwCgCgfGrpRediRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpRediRspTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpRediRspTx.setDescription('Total number of the redirection responses transmitted for the CGF group')
jnxMbgPgwCgCgfGrpSwitchovers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpSwitchovers.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpSwitchovers.setDescription(' Total number of the switch overs on the CGF group')
jnxMbgPgwCgCgfGrpBatchReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpBatchReqTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpBatchReqTx.setDescription(' Total number of the batch req transmitted for the CGF group')
jnxMbgPgwCgCgfGrpBatchRspErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpBatchRspErrors.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpBatchRspErrors.setDescription(' Tatal number of the batch response errors for the CGF group')
jnxMbgPgwCgCgfGrpBatchCDRsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpBatchCDRsTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGrpBatchCDRsTx.setDescription(' Total number of the batch CDRs transmitted for the CGF group')
jnxMbgPgwCgCgfGroupTotalWFA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGroupTotalWFA.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfGroupTotalWFA.setDescription(' Total WFA available for the CGF group')
jnxMbgPgwCgTspStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 6, 1), ).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), (0, "JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgTspProfId"))
if mibBuilder.loadTexts: jnxMbgPgwCgTspStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgTspStatsEntry.setDescription('A conceptual row listing the statistics for each CGF Server configured on the PGW.')
jnxMbgPgwCgTspProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: jnxMbgPgwCgTspProfId.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgTspProfId.setDescription('This will identify the CGF Group profile id uniquely and used as secondary key for CGF group table')
jnxMbgPgwCgTspDRTReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgTspDRTReqTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgTspDRTReqTx.setDescription('Total number of the DRT (Detailed Record Time) request transmitted for the CGF group')
jnxMbgPgwCgTspDRTReqTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgTspDRTReqTmout.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgTspDRTReqTmout.setDescription('Total number of the DRT request timeouts happend for the CGF group')
jnxMbgPgwCgTspDRTSucRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgTspDRTSucRspRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgTspDRTSucRspRx.setDescription(' Total number of the DRT success responses received')
jnxMbgPgwCgTspDRTErrRspRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgTspDRTErrRspRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgTspDRTErrRspRx.setDescription('Total number of the DRT error responses received for the CGF group')
jnxMbgPgwCgTspRediReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgTspRediReqRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgTspRediReqRx.setDescription('Total number of the redirection responses received for the CGF group')
jnxMbgPgwCgTspRediRspTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgTspRediRspTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgTspRediRspTx.setDescription('Total number of the redirection responses transmitted for the CGF group')
jnxMbgPgwCgTspSwitchovers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgTspSwitchovers.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgTspSwitchovers.setDescription(' Total number of the switch overs on the CGF group')
jnxMbgPgwCgTspBatchReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgTspBatchReqTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgTspBatchReqTx.setDescription(' Total number of the batch req transmitted for the CGF group')
jnxMbgPgwCgTspBatchRspErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgTspBatchRspErrors.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgTspBatchRspErrors.setDescription(' Tatal number of the batch response errors for the CGF group')
jnxMbgPgwCgTspBatchCDRsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgTspBatchCDRsTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgTspBatchCDRsTx.setDescription(' Total number of the batch CDRs transmitted for the CGF group')
jnxMbgPgwCgTspTotalWFA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgTspTotalWFA.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgTspTotalWFA.setDescription(' Total WFA available for the CGF group')
jnxMbgPgwCgTspProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 6, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgTspProfName.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgTspProfName.setDescription('A string that uniquely identifies the TSP Profile.')
jnxMbgPgwCgCgfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1), ).setIndexNames((0, "JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgCgfIndex"))
if mibBuilder.loadTexts: jnxMbgPgwCgCgfStatsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfStatsEntry.setDescription('A conceptual row listing the statistics for each CGF Server configured on the PGW.')
jnxMbgPgwCgCgfProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: jnxMbgPgwCgCgfProfName.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfProfName.setDescription('A string that uniquely identifies the CGF Profile.')
jnxMbgPgwCgCgfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)))
if mibBuilder.loadTexts: jnxMbgPgwCgCgfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfIndex.setDescription('A number representing each CGF Server whose statistics is being generated.')
jnxMbgPgwCgCgfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfIpAddress.setDescription('CGF Server IP-address.')
jnxMbgPgwCgCgfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfStatus.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfStatus.setDescription('This indicates the state of the CGF Server i.e UP or DOWN.')
jnxMbgPgwCgCgfUpDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 5), Counter64()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfUpDuration.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfUpDuration.setDescription('Total duration in minutes for which the CGF Server was in UP State.')
jnxMbgPgwCgCgfDownDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 6), Counter64()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfDownDuration.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfDownDuration.setDescription('Total duration in minutes for which the CGF Server was in DOWN State.')
jnxMbgPgwCgCgfEchoReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfEchoReqTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfEchoReqTx.setDescription('Total number of Echo Requests transmitted to the CGF Server.')
jnxMbgPgwCgCgfEchoReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfEchoReqRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfEchoReqRx.setDescription('Total number of Echo Requests received from the CGF Server.')
jnxMbgPgwCgCgfEchoReqTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfEchoReqTmout.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfEchoReqTmout.setDescription('Total number of Echo Requests to the CGF Server that timed out.')
jnxMbgPgwCgCgfEchoRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfEchoRespTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfEchoRespTx.setDescription('Total number of Echo Responses transmitted to the CGF Server.')
jnxMbgPgwCgCgfEchoRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfEchoRespRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfEchoRespRx.setDescription('Total number of Echo Responses received from the CGF Server.')
jnxMbgPgwCgCgfVerUnsuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfVerUnsuppTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfVerUnsuppTx.setDescription('Total number of Version Unsupported messages transmitted to the CGF Server.')
jnxMbgPgwCgCgfVerUnsuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfVerUnsuppRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfVerUnsuppRx.setDescription('Total number of Version Unsupported messages received from the CGF Server.')
jnxMbgPgwCgCgfNodeAliveReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfNodeAliveReqTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfNodeAliveReqTx.setDescription('Total number of Node Alive Requests transmitted to the CGF Server.')
jnxMbgPgwCgCgfNodeAliveReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfNodeAliveReqRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfNodeAliveReqRx.setDescription('Total number of Node Alive Requests received from the CGF Server.')
jnxMbgPgwCgCgfNodeAliveReqTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfNodeAliveReqTmout.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfNodeAliveReqTmout.setDescription('Total number of Node Alive Requests to the CGF Server that timed out.')
jnxMbgPgwCgCgfNodeAliveRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfNodeAliveRespTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfNodeAliveRespTx.setDescription('Total number of Node Alive Responses transmitted to the CGF Server.')
jnxMbgPgwCgCgfNodeAliveRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfNodeAliveRespRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfNodeAliveRespRx.setDescription('Total number of Node Alive Responses received from the CGF Server.')
jnxMbgPgwCgCgfRedirectReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfRedirectReqRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfRedirectReqRx.setDescription('Total number of Redirect Requests received from the CGF Server.')
jnxMbgPgwCgCgfRedirectRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfRedirectRespTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfRedirectRespTx.setDescription('Total number of Redirect Responses transmitted to the CGF Server.')
jnxMbgPgwCgCgfDRTReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfDRTReqTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfDRTReqTx.setDescription('Total number of Data Record Transfer Requests transmitted to the CGF Server.This includes the retransmission counts also.')
jnxMbgPgwCgCgfDRTReqTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfDRTReqTmout.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfDRTReqTmout.setDescription('Total number of Data Record Transfer Requests to the CGF Server that timed out after the configured number of retries.')
jnxMbgPgwCgCgfDRTSuccRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfDRTSuccRespRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfDRTSuccRespRx.setDescription('Total number of Data Record Transfer Responses indicating success received from the CGF Server.')
jnxMbgPgwCgCgfDRTErrRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfDRTErrRespRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfDRTErrRespRx.setDescription('Total number of Data Record Transfer Responses indicating error received from the CGF Server.')
jnxMbgPgwCgCgfCdrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfCdrTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfCdrTx.setDescription('Total number of Call Data Records (CDRs) transmitted to the CGF Server.')
jnxMbgPgwCgCgfDRTRTTMean = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 26), Counter64()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfDRTRTTMean.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfDRTRTTMean.setDescription('Mean Round Trip Time of the Data Record Transfer Request and Response to and from the CGF Server in seconds. This is calculated from the average of the minimum and maximum round trip times of the Data Record Transfer Request. This is applicable for CGF Servers which are connected via UDP protocol.')
jnxMbgPgwCgCgfDRTRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 27), Counter64()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfDRTRTTMin.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfDRTRTTMin.setDescription('Minimum Round Trip Time of the Data Record Transfer Request and Response to and from the CGF Server in seconds. This is applicable for CGF Servers which are connected via UDP protocol.')
jnxMbgPgwCgCgfDRTRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 28), Counter64()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfDRTRTTMax.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfDRTRTTMax.setDescription('Maximum Round Trip Time of the Data Record Transfer Request and Response to and from the CGF Server in seconds.This is applicable for CGF Servers which are connected via UDP protocol.')
jnxMbgPgwCgCgfTransToDownState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfTransToDownState.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfTransToDownState.setDescription('Total number of transitions of the CGF Server to the DOWN state.')
jnxMbgPgwCgCgfContainers = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 4, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCgfContainers.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCgfContainers.setDescription('Total number of closed containers to the CGF Server.')
jnxMbgPgwCgPeerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1), ).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"), (0, "JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgPeerIndex"))
if mibBuilder.loadTexts: jnxMbgPgwCgPeerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerStatsEntry.setDescription('A conceptual row listing the statistics for each CGF Server configured on the PGW.')
jnxMbgPgwCgPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: jnxMbgPgwCgPeerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerIndex.setDescription('A number representing each CGF Server whose statistics is being generated.')
jnxMbgPgwCgPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerIpAddress.setDescription('CGF Server IP-address.')
jnxMbgPgwCgPeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerStatus.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerStatus.setDescription('This indicates the state of the CGF Server i.e UP or DOWN.')
jnxMbgPgwCgPeerEchoReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerEchoReqTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerEchoReqTx.setDescription('Total number of Echo Requests transmitted to the CGF Server.')
jnxMbgPgwCgPeerEchoReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerEchoReqRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerEchoReqRx.setDescription('Total number of Echo Requests received from the CGF Server.')
jnxMbgPgwCgPeerEchoReqTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerEchoReqTmout.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerEchoReqTmout.setDescription('Total number of Echo Requests to the CGF Server that timed out.')
jnxMbgPgwCgPeerEchoRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerEchoRespTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerEchoRespTx.setDescription('Total number of Echo Responses transmitted to the CGF Server.')
jnxMbgPgwCgPeerEchoRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerEchoRespRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerEchoRespRx.setDescription('Total number of Echo Responses received from the CGF Server.')
jnxMbgPgwCgPeerVerUnsuppTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerVerUnsuppTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerVerUnsuppTx.setDescription('Total number of Version Unsupported messages transmitted to the CGF Server.')
jnxMbgPgwCgPeerVerUnsuppRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerVerUnsuppRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerVerUnsuppRx.setDescription('Total number of Version Unsupported messages received from the CGF Server.')
jnxMbgPgwCgPeerNodeAliveReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerNodeAliveReqRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerNodeAliveReqRx.setDescription('Total number of Node Alive Requests received from the CGF Server.')
jnxMbgPgwCgPeerNodeAliveRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerNodeAliveRespTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerNodeAliveRespTx.setDescription('Total number of Node Alive Responses transmitted to the CGF Server.')
jnxMbgPgwCgPeerRedirectReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerRedirectReqRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerRedirectReqRx.setDescription('Total number of Redirect Requests received from the CGF Server.')
jnxMbgPgwCgPeerRedirectRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerRedirectRespTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerRedirectRespTx.setDescription('Total number of Redirect Responses transmitted to the CGF Server.')
jnxMbgPgwCgPeerDRTReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerDRTReqTx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerDRTReqTx.setDescription('Total number of Data Record Transfer Requests transmitted to the CGF Server.This includes the retransmission counts also.')
jnxMbgPgwCgPeerDRTSuccRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerDRTSuccRespRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerDRTSuccRespRx.setDescription('Total number of Data Record Transfer Responses indicating success received from the CGF Server.')
jnxMbgPgwCgPeerDRTErrRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerDRTErrRespRx.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerDRTErrRespRx.setDescription('Total number of Data Record Transfer Responses indicating error received from the CGF Server.')
jnxMbgPgwCgPeerProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 7, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerProfileName.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerProfileName.setDescription('A string that uniquely identifies the CGF Peer Profile.')
jnxMbgPgwCgGlobalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 8, 1), ).setIndexNames((0, "JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwIndex"))
if mibBuilder.loadTexts: jnxMbgPgwCgGlobalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgGlobalStatsEntry.setDescription('A conceptual row listing the statistics for each PGW charging global statistics.')
jnxMbgPgwCgCdrSendErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCdrSendErrors.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCdrSendErrors.setDescription('Total number of CDR send errors to charging module')
jnxMbgPgwCgCdrEncodeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCdrEncodeErrors.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCdrEncodeErrors.setDescription('Total number of CDR (charging data record) encoding errors.')
jnxMbgPgwCgCdrAllocFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCdrAllocFailures.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCdrAllocFailures.setDescription('Total number of CDR memory allocation failures.')
jnxMbgPgwCgContFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgContFailures.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgContFailures.setDescription('Total number of container failures.')
jnxMbgPgwCgCmBearersCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCmBearersCreated.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCmBearersCreated.setDescription('Total number bearers created.')
jnxMbgPgwCgCmBearersDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMbgPgwCgCmBearersDeleted.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCmBearersDeleted.setDescription('Total number of bearers deleted.')
jnxMbgPgwCgServerName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgPgwCgServerName.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgServerName.setDescription('A string that uniquely identifies the CGF server name.')
jnxMbgPgwCgServicePicName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgPgwCgServicePicName.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgServicePicName.setDescription('This identifies the session-pic, in the form ms-a/b/0, where <a> is the slot and <b> could be either 0 or 1.')
jnxMbgPgwCgCDRDest = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cdrcgf", 1), ("cdrbackup", 2), ("cdrnobackup", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgPgwCgCDRDest.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCDRDest.setDescription('This indicates any transisitions in the state of the CGF. Value 1 indicates one of the CGF for the Group came up. Redirecting CDRs to the Active CGF. Value 2 indicates last active CGF for the Group went down. CDRs being written to backup Local storage device. Value 3 indicates last active CGF for the Group went down. Backup Local storage device not configured.')
jnxMbgPgwCgActiveCgfIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3, 4), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgPgwCgActiveCgfIpAddr.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgActiveCgfIpAddr.setDescription('CGF Server IP-address.')
jnxMbgPgwCgTSPName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgPgwCgTSPName.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgPgwCgTSPName.setDescription('A string that uniquely identifies the Transport Profile.')
jnxMbgPgwCgMemLimit = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("memfulldisconnectnew", 1), ("memfulldisconnectnewrslvd", 2), ("memfulldisconnectexistnew", 3), ("memfulldisconnectexistnewrslvd", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgPgwCgMemLimit.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgMemLimit.setDescription('This indicates any transisitions in the state of the CGF. Value 1 indicates System has reached Level 1 critical memory threshold. Action - Check the CGF server connections. If local storage is enabled, please ftp the charging records immediately. If local storage is not enabled, please enable it so the charging records can be stored in local persistent storage. Risk - No new sessions will be allowed. Value 2 indicates System reaching Level 1 critical memory threshold condition has been resolved. Value 3 indicates System has reached Level 2 critical memory threshold. Action - Check the CGF server connections. If local storage is enabled, please ftp the charging records immediately. If local storage is not enabled, please enable it so the charging records can be stored in local persistent storage. Risk - New and existing sessions will be not be allowed. Value 4 indicates System reaching Level 2 critical memory threshold condition has been resolved.')
jnxMbgPgwCgLcsSpace = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("localstoragememlevel1", 1), ("localstoragememlevel2", 2), ("localstoragememlevel3", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgPgwCgLcsSpace.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgLcsSpace.setDescription('Water marking for the local storage levels in charged of RE.')
jnxMbgPgwCgLcsUtil = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3, 8), Gauge32()).setUnits('percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgPgwCgLcsUtil.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgLcsUtil.setDescription('The percentage of the total of Local Storage Space by one the Charged on RE')
jnxMbgPgwCgAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raised", 1), ("cleared", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgPgwCgAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgAlarmStatus.setDescription('Value 1 indicates that the Alarm for a particular condition is present. Value 2 indicates that the Alarm for a particular condition is absent.')
jnxMbgPgwCgProfileName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgPgwCgProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgPgwCgProfileName.setDescription('A string that identifies a charging profile .')
jnxMbgPgwCgPrevMMState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgPgwCgPrevMMState.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPrevMMState.setDescription('A string that indicates the maintenance-mode state .')
jnxMbgPgwCgNewMMState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgPgwCgNewMMState.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgNewMMState.setDescription('A string that indicates the maintenance-mode state .')
jnxMbgPgwCgTProfileName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3, 13), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgPgwCgTProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgPgwCgTProfileName.setDescription('A string that identifies a charging profile .')
jnxMbgPgwCgTPrevMMState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3, 14), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgPgwCgTPrevMMState.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgPgwCgTPrevMMState.setDescription('A string that indicates the maintenance-mode state .')
jnxMbgPgwCgTNewMMState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgPgwCgTNewMMState.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgPgwCgTNewMMState.setDescription('A string that indicates the maintenance-mode state .')
jnxMbgPgwCgPeerProfName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 1, 3, 16), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxMbgPgwCgPeerProfName.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgPeerProfName.setDescription('A string that uniquely identifies the CGF Profile.')
jnxMbgPgwCgGtpGWUpNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 1)).setObjects(("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgServerName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgServicePicName"))
if mibBuilder.loadTexts: jnxMbgPgwCgGtpGWUpNotif.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgPgwCgGtpGWUpNotif.setDescription('This notification signifies that the specified server has been marked alive. The ServerName identifies the server and the SPIdentfier identifies the session-pic which originated this notification.')
jnxMbgPgwCgGtpGWDownNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 2)).setObjects(("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgServerName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgServicePicName"))
if mibBuilder.loadTexts: jnxMbgPgwCgGtpGWDownNotif.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgPgwCgGtpGWDownNotif.setDescription('This notification signifies that the specified server has been marked dead. The ServerName identifies the server and the SPIdentfier identifies the session-pic which originated this notification.')
jnxMbgPgwCgCDRDestNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 3)).setObjects(("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgCDRDest"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgTSPName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgActiveCgfIpAddr"))
if mibBuilder.loadTexts: jnxMbgPgwCgCDRDestNotif.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgPgwCgCDRDestNotif.setDescription('This signifies change in the destination of the CDRs (Charging Data Record)')
jnxMbgPgwCgMemThresNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 4)).setObjects(("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgAlarmStatus"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgMemLimit"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgTSPName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgServicePicName"))
if mibBuilder.loadTexts: jnxMbgPgwCgMemThresNotif.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgPgwCgMemThresNotif.setDescription('This signifies the internal memory unavalability in the system.')
jnxMbgPgwCgLcsThresNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 5)).setObjects(("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgLcsSpace"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgLcsUtil"))
if mibBuilder.loadTexts: jnxMbgPgwCgLcsThresNotif.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgPgwCgLcsThresNotif.setDescription('This signifies the memory unavailability in the local storage in the system.')
jnxMbgPgwCgServiceUpNotif = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 6)).setObjects(("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgServicePicName"))
if mibBuilder.loadTexts: jnxMbgPgwCgServiceUpNotif.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgPgwCgServiceUpNotif.setDescription('This signifies the Charging daemon is UP on the SP.')
jnxMbgPgwCgMMStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 7)).setObjects(("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgProfileName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgPrevMMState"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgNewMMState"))
if mibBuilder.loadTexts: jnxMbgPgwCgMMStateChange.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgPgwCgMMStateChange.setDescription('This indicates that the given charging profile underwent a change in the maintenance-mode.')
jnxMbgPgwCgTMMStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 8)).setObjects(("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgTProfileName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgTPrevMMState"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgTNewMMState"))
if mibBuilder.loadTexts: jnxMbgPgwCgTMMStateChange.setStatus('deprecated')
if mibBuilder.loadTexts: jnxMbgPgwCgTMMStateChange.setDescription('This indicates that the given transport profile underwent a change in the maintenance-mode.')
jnxMbgPgwCgGtpGWUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 9)).setObjects(("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgServerName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgServicePicName"))
if mibBuilder.loadTexts: jnxMbgPgwCgGtpGWUpNotify.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgGtpGWUpNotify.setDescription('This notification signifies that the specified server has been marked alive. The ServerName identifies the server and the SPIdentfier identifies the session-pic which originated this notification.')
jnxMbgPgwCgGtpGWDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 10)).setObjects(("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgServerName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgServicePicName"))
if mibBuilder.loadTexts: jnxMbgPgwCgGtpGWDownNotify.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgGtpGWDownNotify.setDescription('This notification signifies that the specified server has been marked dead. The ServerName identifies the server and the SPIdentfier identifies the session-pic which originated this notification.')
jnxMbgPgwCgCDRDestNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 11)).setObjects(("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgCDRDest"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgPeerProfName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgActiveCgfIpAddr"))
if mibBuilder.loadTexts: jnxMbgPgwCgCDRDestNotify.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgCDRDestNotify.setDescription('This signifies change in the destination of the CDRs (Charging Data Record)')
jnxMbgPgwCgServiceUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 12)).setObjects(("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgServicePicName"))
if mibBuilder.loadTexts: jnxMbgPgwCgServiceUpNotify.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgServiceUpNotify.setDescription('This signifies the Charging daemon is UP on the SP.')
jnxMbgPgwCgMMStateChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 13)).setObjects(("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgPeerProfName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgPrevMMState"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgNewMMState"))
if mibBuilder.loadTexts: jnxMbgPgwCgMMStateChangeNotify.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgMMStateChangeNotify.setDescription('This indicates that the given charging profile underwent a change in the maintenance-mode.')
jnxMbgPgwCgTMMStateChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 14)).setObjects(("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgPeerProfName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgPrevMMState"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgNewMMState"))
if mibBuilder.loadTexts: jnxMbgPgwCgTMMStateChangeNotify.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgTMMStateChangeNotify.setDescription('This indicates that the given transport profile underwent a change in the maintenance-mode.')
jnxMbgPgwCgMemHighThresNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 15)).setObjects(("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgPeerProfName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgServicePicName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgMemLimit"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgAlarmStatus"))
if mibBuilder.loadTexts: jnxMbgPgwCgMemHighThresNotify.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgMemHighThresNotify.setDescription('This trap indicates the alarm status on the node associated with the utilization of inernal memory space for charging records. This alarm is sent outwhen the utilization exceeds or falls below configured high threshold value. Thealarm status (Active/Clear)is indicated by the jnxMbgPgwCgAlarmStatus variable.')
jnxMbgPgwCgMemMediumThresNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 16)).setObjects(("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgPeerProfName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgServicePicName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgMemLimit"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgAlarmStatus"))
if mibBuilder.loadTexts: jnxMbgPgwCgMemMediumThresNotify.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgMemMediumThresNotify.setDescription('This trap indicates the alarm status on the node associated with the utilization of inernal memory space for charging records. This alarm is sent outwhen the utilization exceeds or falls below configured medium threshold value. The alarm status (Active/Clear)is indicated by the jnxMbgPgwCgAlarmStatus variable.')
jnxMbgPgwCgMemLowThresNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 17)).setObjects(("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgPeerProfName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgServicePicName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgMemLimit"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgAlarmStatus"))
if mibBuilder.loadTexts: jnxMbgPgwCgMemLowThresNotify.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgMemLowThresNotify.setDescription('This trap indicates the alarm status on the node associated with the utilization of inernal memory space for charging records. This alarm is sent outwhen the utilization exceeds or falls below configured low threshold value. The alarm status (Active/Clear)is indicated by the jnxMbgPgwCgAlarmStatus variable.')
jnxMbgPgwCgLcsThresHighNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 18)).setObjects(("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgAlarmStatus"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgLcsUtil"))
if mibBuilder.loadTexts: jnxMbgPgwCgLcsThresHighNotify.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgLcsThresHighNotify.setDescription('This trap indicates the alarm status on the node associated with the utilization of local storage space for charging records. This alarm is sent out when the utilization exceeds or falls below configured high threshold of available disk space. The alarm status (Active/Clear)is indicated by the jnxMbgPgwCgAlarmStatus variable.')
jnxMbgPgwCgLcsThresMediumNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 19)).setObjects(("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgAlarmStatus"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgLcsUtil"))
if mibBuilder.loadTexts: jnxMbgPgwCgLcsThresMediumNotify.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgLcsThresMediumNotify.setDescription('This trap indicates the alarm status on the node associated with the utilization of local storage space for charging records. This alarm is sent out when the utilization exceeds or falls below configured medium threshold of available disk space. The alarm status (Active/Clear)is indicated by the jnxMbgPgwCgAlarmStatus variable.')
jnxMbgPgwCgLcsThresLowNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 66, 1, 3, 0, 20)).setObjects(("JUNIPER-MOBILE-GATEWAYS", "jnxMbgGwName"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgAlarmStatus"), ("JUNIPER-MOBILITY-CHARGING-MIB", "jnxMbgPgwCgLcsUtil"))
if mibBuilder.loadTexts: jnxMbgPgwCgLcsThresLowNotify.setStatus('current')
if mibBuilder.loadTexts: jnxMbgPgwCgLcsThresLowNotify.setDescription('This trap indicates the alarm status on the node associated with the utilization of local storage space for charging records. This alarm is sent out when the utilization exceeds or falls below configured low threshold of available disk space. The alarm status (Active/Clear)is indicated by the jnxMbgPgwCgAlarmStatus variable.')
mibBuilder.exportSymbols("JUNIPER-MOBILITY-CHARGING-MIB", jnxMbgPgwCgTMMStateChangeNotify=jnxMbgPgwCgTMMStateChangeNotify, jnxMbgPgwCgCgfIndex=jnxMbgPgwCgCgfIndex, jnxMbgPgwCgCgfUpDuration=jnxMbgPgwCgCgfUpDuration, jnxMbgPgwCgServerName=jnxMbgPgwCgServerName, jnxMbgPgwCgCDRDest=jnxMbgPgwCgCDRDest, jnxMbgPgwCgCgfStatus=jnxMbgPgwCgCgfStatus, jnxMbgPgwCgCgfEchoReqTmout=jnxMbgPgwCgCgfEchoReqTmout, jnxMbgPgwCgTspSwitchovers=jnxMbgPgwCgTspSwitchovers, jnxMbgPgwCgCgfStatsTable=jnxMbgPgwCgCgfStatsTable, jnxMbgPgwCgCdrSendErrors=jnxMbgPgwCgCdrSendErrors, jnxMbgPgwCgCgfGroupTotalWFA=jnxMbgPgwCgCgfGroupTotalWFA, jnxMbgPgwCgNewMMState=jnxMbgPgwCgNewMMState, jnxMbgPgwCgCgfEchoReqRx=jnxMbgPgwCgCgfEchoReqRx, jnxMbgPgwCgPeerStatsTable=jnxMbgPgwCgPeerStatsTable, jnxMbgPgwCgCgfNodeAliveReqTx=jnxMbgPgwCgCgfNodeAliveReqTx, jnxMbgPgwCgCgfDRTSuccRespRx=jnxMbgPgwCgCgfDRTSuccRespRx, jnxMbgPgwCgGtpGWDownNotif=jnxMbgPgwCgGtpGWDownNotif, jnxMbgPgwCgPeerIndex=jnxMbgPgwCgPeerIndex, jnxMbgPgwCgCgfGrpBatchCDRsTx=jnxMbgPgwCgCgfGrpBatchCDRsTx, jnxMbgPgwCgTspRediRspTx=jnxMbgPgwCgTspRediRspTx, jnxMbgPgwCgCgfEchoRespTx=jnxMbgPgwCgCgfEchoRespTx, jnxMbgPgwCgPeerEchoReqTmout=jnxMbgPgwCgPeerEchoReqTmout, jnxMbgPgwCgServiceUpNotify=jnxMbgPgwCgServiceUpNotify, jnxMbgPgwCgTspBatchCDRsTx=jnxMbgPgwCgTspBatchCDRsTx, jnxMbgPgwCgGlobalStatsTable=jnxMbgPgwCgGlobalStatsTable, jnxMbgPgwCgNotificationVars=jnxMbgPgwCgNotificationVars, jnxMbgPgwCgTspProfId=jnxMbgPgwCgTspProfId, jnxMbgPgwCgCgfCdrTx=jnxMbgPgwCgCgfCdrTx, jnxMbgPgwCgPeerRedirectReqRx=jnxMbgPgwCgPeerRedirectReqRx, jnxMbgPgwCgLpsStatsEntry=jnxMbgPgwCgLpsStatsEntry, jnxMbgPgwCgGtpGWUpNotify=jnxMbgPgwCgGtpGWUpNotify, jnxMbgPgwCgPeerVerUnsuppRx=jnxMbgPgwCgPeerVerUnsuppRx, jnxMbgPgwCgPeerProfileName=jnxMbgPgwCgPeerProfileName, jnxMbgPgwCgPeerDRTErrRespRx=jnxMbgPgwCgPeerDRTErrRespRx, jnxMbgPgwCgCgfIpAddress=jnxMbgPgwCgCgfIpAddress, jnxMbgPgwCgCgfGrpDRTSucRspRx=jnxMbgPgwCgCgfGrpDRTSucRspRx, jnxMbgPgwCgPeerDRTReqTx=jnxMbgPgwCgPeerDRTReqTx, jnxMbgPgwCgTspDRTReqTx=jnxMbgPgwCgTspDRTReqTx, jnxMbgPgwCgCgfNodeAliveReqRx=jnxMbgPgwCgCgfNodeAliveReqRx, jnxMbgPgwCgCgfDRTReqTmout=jnxMbgPgwCgCgfDRTReqTmout, jnxMbgPgwCgCgfProfName=jnxMbgPgwCgCgfProfName, jnxMbgPgwCgServiceUpNotif=jnxMbgPgwCgServiceUpNotif, jnxMbgPgwCgCgfRedirectRespTx=jnxMbgPgwCgCgfRedirectRespTx, jnxMbgPgwCgGlobalStatsEntry=jnxMbgPgwCgGlobalStatsEntry, jnxMbgPgwCgContFailures=jnxMbgPgwCgContFailures, jnxMbgPgwCgCgfRedirectReqRx=jnxMbgPgwCgCgfRedirectReqRx, jnxMbgPgwCgCgfDRTRTTMin=jnxMbgPgwCgCgfDRTRTTMin, jnxMbgPgwCgActiveCgfIpAddr=jnxMbgPgwCgActiveCgfIpAddr, jnxMbgPgwCgCgfEchoRespRx=jnxMbgPgwCgCgfEchoRespRx, jnxMbgPgwCgCmBearersDeleted=jnxMbgPgwCgCmBearersDeleted, jnxMbgPgwCgFilesOnLcStorage=jnxMbgPgwCgFilesOnLcStorage, jnxMbgPgwCgGtpGWDownNotify=jnxMbgPgwCgGtpGWDownNotify, jnxMbgPgwCgPeerStatus=jnxMbgPgwCgPeerStatus, jnxMbgPgwCgPrevMMState=jnxMbgPgwCgPrevMMState, jnxMbgPgwCgPeerStatsEntry=jnxMbgPgwCgPeerStatsEntry, jnxMbgPgwCgTProfileName=jnxMbgPgwCgTProfileName, jnxMbgPgwCgPeerProfName=jnxMbgPgwCgPeerProfName, jnxMbgPgwCgCdrEncodeErrors=jnxMbgPgwCgCdrEncodeErrors, jnxMbgPgwCgCgfGrpDRTReqTx=jnxMbgPgwCgCgfGrpDRTReqTx, jnxMbgPgwCgTSPName=jnxMbgPgwCgTSPName, jnxMbgPgwCgTspDRTReqTmout=jnxMbgPgwCgTspDRTReqTmout, jnxMbgPgwCgLpsStorageAvailSpace=jnxMbgPgwCgLpsStorageAvailSpace, jnxMbgPgwCgCgfGroupStatsEntry=jnxMbgPgwCgCgfGroupStatsEntry, jnxMbgPgwCgCgfStatsEntry=jnxMbgPgwCgCgfStatsEntry, jnxMbgPgwCgPeerDRTSuccRespRx=jnxMbgPgwCgPeerDRTSuccRespRx, jnxMbgPgwCgLcsThresHighNotify=jnxMbgPgwCgLcsThresHighNotify, jnxMbgPgwCgProfileName=jnxMbgPgwCgProfileName, jnxMbgPgwCgLcStorageAvailSpace=jnxMbgPgwCgLcStorageAvailSpace, jnxMbgPgwCgCgfDRTReqTx=jnxMbgPgwCgCgfDRTReqTx, jnxMbgPgwCgGtpGWUpNotif=jnxMbgPgwCgGtpGWUpNotif, jnxMbgPgwCgPeerEchoRespRx=jnxMbgPgwCgPeerEchoRespRx, jnxMbgPgwCgCgfGrpDRTErrRspRx=jnxMbgPgwCgCgfGrpDRTErrRspRx, jnxMbgPgwCgCgfVerUnsuppRx=jnxMbgPgwCgCgfVerUnsuppRx, jnxMbgPgwCgTMMStateChange=jnxMbgPgwCgTMMStateChange, jnxMbgPgwCgPeerNodeAliveReqRx=jnxMbgPgwCgPeerNodeAliveReqRx, jnxMbgPgwCgCgfGrpBatchRspErrors=jnxMbgPgwCgCgfGrpBatchRspErrors, jnxMbgPgwCgTspBatchRspErrors=jnxMbgPgwCgTspBatchRspErrors, jnxMbgPgwChargingMib=jnxMbgPgwChargingMib, jnxMbgPgwCgCgfGrpDRTReqRx=jnxMbgPgwCgCgfGrpDRTReqRx, jnxMbgPgwCgMemLowThresNotify=jnxMbgPgwCgMemLowThresNotify, jnxMbgPgwCgMemLimit=jnxMbgPgwCgMemLimit, jnxMbgPgwCgCgfGrpRediReqRx=jnxMbgPgwCgCgfGrpRediReqRx, jnxMbgPgwCgPeerRedirectRespTx=jnxMbgPgwCgPeerRedirectRespTx, jnxMbgPgwCgPeerEchoRespTx=jnxMbgPgwCgPeerEchoRespTx, jnxMbgPgwCgTNewMMState=jnxMbgPgwCgTNewMMState, jnxMbgPgwCgLcsSpace=jnxMbgPgwCgLcsSpace, jnxMbgPgwCgCgfGrpRediRspTx=jnxMbgPgwCgCgfGrpRediRspTx, jnxMbgPgwCgCgfDRTRTTMean=jnxMbgPgwCgCgfDRTRTTMean, jnxMbgPgwCgAlarmStatus=jnxMbgPgwCgAlarmStatus, jnxMbgPgwCgMemHighThresNotify=jnxMbgPgwCgMemHighThresNotify, jnxMbgPgwCgLpsStatsTable=jnxMbgPgwCgLpsStatsTable, jnxMbgPgwCgCgfGrpProfName=jnxMbgPgwCgCgfGrpProfName, jnxMbgPgwCgCgfVerUnsuppTx=jnxMbgPgwCgCgfVerUnsuppTx, jnxMbgPgwCgTspStatsTable=jnxMbgPgwCgTspStatsTable, jnxMbgPgwCgTspTotalWFA=jnxMbgPgwCgTspTotalWFA, jnxMbgPgwCgLcsThresNotif=jnxMbgPgwCgLcsThresNotif, jnxMbgPgwCgCgfEchoReqTx=jnxMbgPgwCgCgfEchoReqTx, jnxMbgPgwCgPeerEchoReqTx=jnxMbgPgwCgPeerEchoReqTx, jnxMbgPgwCgCDRDestNotif=jnxMbgPgwCgCDRDestNotif, jnxMbgPgwCgMemThresNotif=jnxMbgPgwCgMemThresNotif, jnxMbgPgwCgTspProfName=jnxMbgPgwCgTspProfName, jnxMbgPgwCgLpsFilesOnLcStorage=jnxMbgPgwCgLpsFilesOnLcStorage, jnxMbgPgwCgCdrAllocFailures=jnxMbgPgwCgCdrAllocFailures, jnxMbgPgwCgCgfNodeAliveRespTx=jnxMbgPgwCgCgfNodeAliveRespTx, jnxMbgPgwCgCgfGrpDRTReqTmout=jnxMbgPgwCgCgfGrpDRTReqTmout, jnxMbgPgwCgTPrevMMState=jnxMbgPgwCgTPrevMMState, jnxMbgPgwCgMemMediumThresNotify=jnxMbgPgwCgMemMediumThresNotify, jnxMbgPgwCgLcStorageStats=jnxMbgPgwCgLcStorageStats, jnxMbgPgwCgTspStatsEntry=jnxMbgPgwCgTspStatsEntry, jnxMbgPgwCgLcsThresMediumNotify=jnxMbgPgwCgLcsThresMediumNotify, jnxMbgPgwCgCgfContainers=jnxMbgPgwCgCgfContainers, jnxMbgPgwCgTspDRTErrRspRx=jnxMbgPgwCgTspDRTErrRspRx, jnxMbgPgwCgPeerNodeAliveRespTx=jnxMbgPgwCgPeerNodeAliveRespTx, jnxMbgPgwCgCgfNodeAliveRespRx=jnxMbgPgwCgCgfNodeAliveRespRx, jnxMbgPgwCgCgfDRTRTTMax=jnxMbgPgwCgCgfDRTRTTMax, jnxMbgPgwCgCgfGrpSwitchovers=jnxMbgPgwCgCgfGrpSwitchovers, PYSNMP_MODULE_ID=jnxMbgPgwChargingMib, jnxMbgPgwCgNotifications=jnxMbgPgwCgNotifications, jnxMbgPgwCgCgfTransToDownState=jnxMbgPgwCgCgfTransToDownState, jnxMbgPgwCgCgfGroupsStatsTable=jnxMbgPgwCgCgfGroupsStatsTable, jnxMbgPgwCgServicePicName=jnxMbgPgwCgServicePicName, jnxMbgPgwCgLcsThresLowNotify=jnxMbgPgwCgLcsThresLowNotify, jnxMbgPgwCgCgfGrpBatchReqTx=jnxMbgPgwCgCgfGrpBatchReqTx, jnxMbgPgwCgMMStateChangeNotify=jnxMbgPgwCgMMStateChangeNotify, jnxMbgPgwCgCgfDRTErrRespRx=jnxMbgPgwCgCgfDRTErrRespRx, jnxMbgPgwCgCDRDestNotify=jnxMbgPgwCgCDRDestNotify, jnxMbgPgwCgTspRediReqRx=jnxMbgPgwCgTspRediReqRx, jnxMbgPgwCgPeerIpAddress=jnxMbgPgwCgPeerIpAddress, jnxMbgPgwCgPeerVerUnsuppTx=jnxMbgPgwCgPeerVerUnsuppTx, jnxMbgPgwCgLcsUtil=jnxMbgPgwCgLcsUtil, jnxMbgPgwCgMMStateChange=jnxMbgPgwCgMMStateChange, jnxMbgPgwCgTspBatchReqTx=jnxMbgPgwCgTspBatchReqTx, jnxMbgPgwCgPeerEchoReqRx=jnxMbgPgwCgPeerEchoReqRx, jnxMbgPgwCgCgfDownDuration=jnxMbgPgwCgCgfDownDuration, jnxMbgPgwCgCmBearersCreated=jnxMbgPgwCgCmBearersCreated, jnxMbgPgwCgTspDRTSucRspRx=jnxMbgPgwCgTspDRTSucRspRx, jnxMbgPgwChargingObjects=jnxMbgPgwChargingObjects, jnxMbgPgwCgCgfNodeAliveReqTmout=jnxMbgPgwCgCgfNodeAliveReqTmout)
