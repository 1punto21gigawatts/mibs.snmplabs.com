#
# PySNMP MIB module REPEATER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REPEATER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:56:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, Integer32, IpAddress, iso, Bits, ModuleIdentity, Unsigned32, Counter32, TimeTicks, ObjectIdentity, Counter64, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "Integer32", "IpAddress", "iso", "Bits", "ModuleIdentity", "Unsigned32", "Counter32", "TimeTicks", "ObjectIdentity", "Counter64", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cabletron = MibIdentifier((1, 3, 6, 1, 4, 1, 52))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4))
ctron = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1))
ctphysical = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1))
repeater = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1))
repeaterRev4 = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4))
rptr = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1))
rptrMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1))
rptrMgmtName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrMgmtName.setStatus('mandatory')
if mibBuilder.loadTexts: rptrMgmtName.setDescription('The ASCII name assigned to this network.')
rptrMgmtPortCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: rptrMgmtPortCount.setDescription('Total number of ports residing on this lan segment.')
rptrMgmtPortsEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrMgmtPortsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrMgmtPortsEnable.setDescription('Setting this object to Enable will cause all the ports residing in this network segment to be enabled. Setting this object to noEnable will have no effect. When read this object will always return noEnable.')
rptrMgmtPortsOn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtPortsOn.setStatus('mandatory')
if mibBuilder.loadTexts: rptrMgmtPortsOn.setDescription('Get the total number of ON ports in this network.')
rptrMgmtPortsOper = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtPortsOper.setStatus('mandatory')
if mibBuilder.loadTexts: rptrMgmtPortsOper.setDescription('Get the number of operational ports in this network.')
rptrMgmtBoardMap = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtBoardMap.setStatus('mandatory')
if mibBuilder.loadTexts: rptrMgmtBoardMap.setDescription('Get a map of the chassis slots occupied by the boards in this network.')
rptrMgmtInterfaceNum = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtInterfaceNum.setStatus('mandatory')
if mibBuilder.loadTexts: rptrMgmtInterfaceNum.setDescription('Get the MIBII interface number of this network. A return of zero will mean this network is not associated with a MIBII interface.')
rptrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2))
rptrPktStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1))
rptrPktStatsPackets = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsPackets.setDescription("Get this repeater's total received packets.")
rptrPktStatsBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsBytes.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsBytes.setDescription("Get this repeater's total received bytes.")
rptrPktStatsColls = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsColls.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsColls.setDescription("Get this repeater's total collisions.")
rptrPktStatsErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsErrors.setDescription("Get this repeater's total errors.")
rptrPktStatsAlign = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsAlign.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsAlign.setDescription("Get this repeater's total frame alignment errors.")
rptrPktStatsCRC = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsCRC.setDescription("Get this repeater's total CRC errors.")
rptrPktStatsOOW = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsOOW.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsOOW.setDescription("Get this repeater's total out-of-window collisions.")
rptrPktStatsNoRsc = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsNoRsc.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsNoRsc.setDescription('This counter is the number of packets on this network that the hardware has processed that the management has either not seen yet, in the case of an active network, or has missed missed all together, in the case of a once active network.')
rptrProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2))
rptrProtocolsOSI = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsOSI.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsOSI.setDescription("Get this repeater's total received OSI packets.")
rptrProtocolsNovell = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsNovell.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsNovell.setDescription("Get this repeater's total received Novell packets.")
rptrProtocolsBanyan = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsBanyan.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsBanyan.setDescription("Get this repeater's total received Banyan packets.")
rptrProtocolsDECNet = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsDECNet.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsDECNet.setDescription("Get this repeater's total received DECNet packets.")
rptrProtocolsXNS = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsXNS.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsXNS.setDescription("Get this repeater's total received XNS packets.")
rptrProtocolsIP = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsIP.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsIP.setDescription("Get this repeater's total received TCP/IP packets.")
rptrProtocolsCtron = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsCtron.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsCtron.setDescription("Get this repeater's total received CTRON Management packets.")
rptrProtocolsAppletalk = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsAppletalk.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsAppletalk.setDescription("Get this repeater's total received Appletalk packets.")
rptrProtocolsOther = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsOther.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsOther.setDescription("Get this repeater's total received unknown protocol packets.")
rptrFrameSizes = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3))
rptrFrameSzRunt = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSzRunt.setStatus('mandatory')
if mibBuilder.loadTexts: rptrFrameSzRunt.setDescription("Get this repeater's total received packets of size less than 64 bytes.")
rptrFrameSz64To127 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz64To127.setStatus('mandatory')
if mibBuilder.loadTexts: rptrFrameSz64To127.setDescription("Get this repeater's total received packets of size between 64 and 127 bytes.")
rptrFrameSz128To255 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz128To255.setStatus('mandatory')
if mibBuilder.loadTexts: rptrFrameSz128To255.setDescription("Get this repeater's total received packets of size between 128 and 255 bytes.")
rptrFrameSz256To511 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz256To511.setStatus('mandatory')
if mibBuilder.loadTexts: rptrFrameSz256To511.setDescription("Get this repeater's total received packets of size between 256 and 511 bytes.")
rptrFrameSz512To1023 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz512To1023.setStatus('mandatory')
if mibBuilder.loadTexts: rptrFrameSz512To1023.setDescription("Get this repeater's total received packets of size between 512 and 1023 bytes.")
rptrFrameSz1024To1518 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz1024To1518.setStatus('mandatory')
if mibBuilder.loadTexts: rptrFrameSz1024To1518.setDescription("Get this repeater's total received packets of size between 1024 and 1518 bytes.")
rptrFrameSzGiant = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSzGiant.setStatus('mandatory')
if mibBuilder.loadTexts: rptrFrameSzGiant.setDescription("Get this repeater's total received packets of size greater than 1518 bytes.")
rptrAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3))
rptrAlarmsTrafEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsTrafEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsTrafEnable.setDescription('Get returns whether traffic alarms are enabled/disabled. Set allows for enabling/disabling of traffic alarms.')
rptrAlarmsTrafThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsTrafThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsTrafThreshold.setDescription('Get/Set packet threshold within the timebase that will cause an alarm.')
rptrAlarmsCollEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsCollEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsCollEnable.setDescription('Get returns whether collision alarms are enabled/disabled. Set allows for enabling/disabling of collision alarms.')
rptrAlarmsCollThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsCollThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsCollThreshold.setDescription('Get/Set the number of collisions per good packet within the timebase that will cause an alarm.')
rptrAlarmsErrEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsErrEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsErrEnable.setDescription('Get returns whether error alarms are enabled/disabled. Set allows for enabling/disabling of error alarms.')
rptrAlarmsErrThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsErrThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsErrThreshold.setDescription('Get/Set the percentage of errors per good packet within the timebase that will cause an alarm.')
rptrAlarmsErrSource = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsErrSource.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsErrSource.setDescription('Get/Set a bit encoded map of which errors to include in the error sum, as follows: CRC_errors - Bit 0 - Least Significant Bit runts - Bit 1 OOW_colls - Bit 2 align_errs - Bit 3 No_resource - Bit 4 Giants - Bit 5')
rptrAlarmsAlarmTimebase = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsAlarmTimebase.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsAlarmTimebase.setDescription('Get/Set alarm timebase.')
rptrRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4))
rptrRedund = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1))
rptrRedundReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundReset.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundReset.setDescription('If this object is set to Reset it will cause a reset of the redundancy object to occur. Setting this object to NoReset will do nothing. This object will always be read as NoReset.')
rptrRedundPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPollInterval.setDescription('Get/Set the number of seconds between polls for redundancy.')
rptrRedundTestTOD = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundTestTOD.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundTestTOD.setDescription('Get/Set the time of day at which the redundant circuits will be tested. The format of the time string is hh:mm:ss.')
rptrRedundPerformTest = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTest", 1), ("test", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundPerformTest.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPerformTest.setDescription('If this object is set to Test it will cause a test of the redundant circuits to be performed. Setting this object to NoTest will have no effect. When read this object will always return NoTest.')
rptrRedundMaxCrcts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundMaxCrcts.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundMaxCrcts.setDescription('Returns the maximum number of circuits which may exist on this network.')
rptrRedundCrctTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2), )
if mibBuilder.loadTexts: rptrRedundCrctTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctTable.setDescription('A list of redundant circuit objects for this repeater.')
rptrRedundCrctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrRedundCrctId"))
if mibBuilder.loadTexts: rptrRedundCrctEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctEntry.setDescription('A list of objects for a particular redundant circuit.')
rptrRedundCrctId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundCrctId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctId.setDescription('Returns the index for a member circuit in the table of redundant circuits.')
rptrRedundCrctName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctName.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctName.setDescription('Get/Set the name of the indicated circuit.')
rptrRedundCrctRetrys = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctRetrys.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctRetrys.setDescription('Get/Set the the number of unanswered polls allowed for the circuit.')
rptrRedundCrctNumBPs = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundCrctNumBPs.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctNumBPs.setDescription('Get the number of board/port combinations associated with the circuit.')
rptrRedundCrctNumAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundCrctNumAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctNumAddr.setDescription('Get the number of IP Addresses associated with the circuit.')
rptrRedundCrctAddAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctAddAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctAddAddr.setDescription('Add an IP Address to the polling list for the indicated circuit.')
rptrRedundCrctDelAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctDelAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctDelAddr.setDescription('Delete an IP Address from the polling list of the indicated circuit.')
rptrRedundCrctEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctEnable.setDescription('If this object is set to Enable, the circuit is enabled. If this object is set to Disable, the circuit is disbabled. When read, this object returns the state of the object based on the last request made.')
rptrRedundCrctReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctReset.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctReset.setDescription("If this object is set to Reset, the circuit is reset. All of the circuit's associated boards and ports are returned to NOT_USED, any associated IP Addresses are purged from the circuit's address list, the name is cleared, and the retry count is reset to a default value. Setting this object to NoReset has no effect. When read, NoReset is always returned.")
rptrRedundPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3), )
if mibBuilder.loadTexts: rptrRedundPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPortTable.setDescription('A list of redundant port objects for this repeater.')
rptrRedundPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrRedundPortId"), (0, "REPEATER-MIB", "rptrRedundPortCrctId"))
if mibBuilder.loadTexts: rptrRedundPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPortEntry.setDescription('A redundant port entry containing objects pertaining to a particular redundant port.')
rptrRedundPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPortId.setDescription('A unique value identifying an element in a sequence of member ports which belong to a circuit in the table of redundant circuits. This value is not a port number; rather it is a value which goes from 1 to the maximum number of ports which may be included in a redundant circuit.')
rptrRedundPortCrctId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortCrctId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPortCrctId.setDescription('A unique value identifying a member circuit in the table of redundant circuits. This value is similar to rptrRedundCrctId.')
rptrRedundPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPortNum.setDescription('Returns the port number of a member port belonging to a redundant circuit.')
rptrRedundPortBoardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortBoardNum.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPortBoardNum.setDescription('Returns the board number of a member port belonging to a redundant circuit.')
rptrRedundPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 1), ("primary", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortType.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPortType.setDescription('Return the state of a port associated with the indicated circuit.')
rptrRedundAddrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4), )
if mibBuilder.loadTexts: rptrRedundAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundAddrTable.setDescription('')
rptrRedundAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrRedundAddrId"), (0, "REPEATER-MIB", "rptrRedundAddrCrctId"))
if mibBuilder.loadTexts: rptrRedundAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundAddrEntry.setDescription('')
rptrRedundAddrId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundAddrId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundAddrId.setDescription('A unique value identifying an element in a sequence of member IP Addresses which belong to a circuit in the table of redundant circuits. This value goes from 1 to the maximum number of IP Addresses which may be included in a redundant circuit.')
rptrRedundAddrCrctId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundAddrCrctId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundAddrCrctId.setDescription('A unique value identifying a member circuit in the table of redundant circuits. This value is similar to rptrRedundCrctId.')
rptrRedundAddrIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundAddrIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundAddrIPAddr.setDescription('Returns an IP Address associated with the indicated circuit.')
rptrSourceAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5))
rptrSrcAddrListTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 1), )
if mibBuilder.loadTexts: rptrSrcAddrListTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrListTable.setDescription('')
rptrSrcAddrListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 1, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrSrcAddrListId"))
if mibBuilder.loadTexts: rptrSrcAddrListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrListEntry.setDescription('')
rptrSrcAddrListId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrListId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrListId.setDescription('Returns an index into a table of source address seen by this repeater.')
rptrSrcAddrAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrAddressList.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrAddressList.setDescription('Returns a source address seen by this repeater.')
rptrSrcAddrSrcTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2), )
if mibBuilder.loadTexts: rptrSrcAddrSrcTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrSrcTable.setDescription('')
rptrSrcAddrSrcTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrSrcAddrSrcTableEntryId"))
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntry.setDescription('')
rptrSrcAddrSrcTableEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryId.setDescription("Returns the source address to which this table's information pertains.")
rptrSrcAddrSrcTableEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryPort.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryPort.setDescription('Returns the port# of the port that sourced the source address.')
rptrSrcAddrSrcTableEntryPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryPortGroup.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryPortGroup.setDescription('Returns the port group# of the port that sourced the source address.')
rptrSrcAddrMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3))
rptrSrcAddrMgmtSrcAgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSrcAddrMgmtSrcAgeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrMgmtSrcAgeInterval.setDescription('Get/Set source addressing ageing interval.')
rptrSrcAddrMgmtPortLock = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSrcAddrMgmtPortLock.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrMgmtPortLock.setDescription('Setting this object to Lock will activate the network port security lock.')
rptrSrcAddrMgmtActiveUsers = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrMgmtActiveUsers.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrMgmtActiveUsers.setDescription('Get the number of active users on this network.')
rptrPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2))
rptrPortGrpMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1), )
if mibBuilder.loadTexts: rptrPortGrpMgmtTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtTable.setDescription('')
rptrPortGrpMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortGrpMgmtGrpId"))
if mibBuilder.loadTexts: rptrPortGrpMgmtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtEntry.setDescription('')
rptrPortGrpMgmtGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortGrpMgmtName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpMgmtName.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtName.setDescription('Gets/Sets a name for the specified port group.')
rptrPortGrpMgmtPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtPortCount.setDescription('Get total number of ports contained on the board.')
rptrPortGrpMgmtPortsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsEnable.setDescription('Setting this object to Enable will cause all the ports residing in this network segment to be enabled. Setting this object to noEnable will have no effect. When read this object will always return noEnable.')
rptrPortGrpMgmtPortsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsOn.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsOn.setDescription('Get total number of ON ports on the board.')
rptrPortGrpMgmtPortsOper = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsOper.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsOper.setDescription('Get total number of operational ports on the board.')
rptrPortGrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2))
rptrPortGrpPktStatsTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1), )
if mibBuilder.loadTexts: rptrPortGrpPktStatsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsTbl.setDescription('')
rptrPortGrpPktStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortGrpPktStatsId"))
if mibBuilder.loadTexts: rptrPortGrpPktStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsEntry.setDescription('')
rptrPortGrpPktStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortGrpPktStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsPkts.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsPkts.setDescription("Return this port group's total received packets.")
rptrPortGrpPktStatsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsBytes.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsBytes.setDescription("Return this port group's total received bytes.")
rptrPortGrpPktStatsColls = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsColls.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsColls.setDescription("Return this port group's total collisions.")
rptrPortGrpPktStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsErrors.setDescription("Return this port group's total errors.")
rptrPortGrpPktStatsAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsAlign.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsAlign.setDescription("Return this port group's total frame alignment errors.")
rptrPortGrpPktStatsCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsCRC.setDescription("Return this port group's total CRC errors.")
rptrPortGrpPktStatsOOW = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsOOW.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsOOW.setDescription("Return this port group's total out-of-window collisions.")
rptrPortGrpProtocolTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2), )
if mibBuilder.loadTexts: rptrPortGrpProtocolTbl.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolTbl.setDescription('')
rptrPortGrpProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortGrpProtocolId"))
if mibBuilder.loadTexts: rptrPortGrpProtocolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolEntry.setDescription('')
rptrPortGrpProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortGrpProtocolOSI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolOSI.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolOSI.setDescription("Return this port group's total received OSI packets.")
rptrPortGrpProtocolNovell = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolNovell.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolNovell.setDescription("Return this port group's total received Novell packets.")
rptrPortGrpProtocolBanyan = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolBanyan.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolBanyan.setDescription("Return this port group's total received Banyan packets.")
rptrPortGrpProtocolDECNet = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolDECNet.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolDECNet.setDescription("Return this port group's total received DECNet packets.")
rptrPortGrpProtocolXNS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolXNS.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolXNS.setDescription("Return this port group's total received XNS packets.")
rptrPortGrpProtocolIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolIP.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolIP.setDescription("Return this port group's total received TCP/IP packets.")
rptrPortGrpProtocolCtron = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolCtron.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolCtron.setDescription("Return this port group's total received CTRON Management packets.")
rptrPortGrpProtocolAppletalk = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolAppletalk.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolAppletalk.setDescription("Return this port group's total received Appletalk packets.")
rptrPortGrpProtocolOther = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolOther.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolOther.setDescription("Return this port group's total received unknown protocol packets.")
rptrPortGrpFrameSzTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3), )
if mibBuilder.loadTexts: rptrPortGrpFrameSzTbl.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSzTbl.setDescription('')
rptrPortGrpFrameSzEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortGrpFrameSzId"))
if mibBuilder.loadTexts: rptrPortGrpFrameSzEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSzEntry.setDescription('')
rptrPortGrpFrameSzId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSzId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSzId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortGrpFrameSzRunt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSzRunt.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSzRunt.setDescription("Return this port group's total received packets of size less than 64 bytes.")
rptrPortGrpFrameSz64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz64To127.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSz64To127.setDescription("Return this port group's total received packets of size between 64 and 127 bytes.")
rptrPortGrpFrameSz128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz128To255.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSz128To255.setDescription("Return this port group's total received packets of size between 128 and 255 bytes.")
rptrPortGrpFrameSz256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz256To511.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSz256To511.setDescription("Return this port group's total received packets of size between 256 and 511 bytes.")
rptrPortGrpFrameSz512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz512To1023.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSz512To1023.setDescription("Return this port group's total received packets of size between 512 and 1023 bytes.")
rptrPortGrpFrameSz1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz1024To1518.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSz1024To1518.setDescription("Return this port group's total received packets of size between 1024 and 1518 bytes.")
rptrPortGrpFrameSzGiant = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSzGiant.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSzGiant.setDescription("Return this port group's total received packets of size greater than 1518 bytes.")
rptrPortGrpAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3), )
if mibBuilder.loadTexts: rptrPortGrpAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmTable.setDescription('')
rptrPortGrpAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortGrpAlarmId"))
if mibBuilder.loadTexts: rptrPortGrpAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmEntry.setDescription('')
rptrPortGrpAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpAlarmId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortGrpAlarmTrafEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafEnable.setDescription('Get returns whether traffic alarms are enabled/disabled. Set allows for enabling/disabling of traffic alarms.')
rptrPortGrpAlarmTrafThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafThreshold.setDescription('Get/Set packet threshold within the timebase that will cause an alarm.')
rptrPortGrpAlarmTrafGrpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafGrpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafGrpDisable.setDescription('Set will permit a port group to be disabled on a traffic alarm condition. Get will show whether the port group disabling is allowed or not.')
rptrPortGrpAlarmCollEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmCollEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmCollEnable.setDescription('Get returns whether collision alarms are enabled/disabled. Set allows for enabling/disabling of collision alarms')
rptrPortGrpAlarmCollThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmCollThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmCollThreshold.setDescription('Get/Set the number of collisions per good packet within the timebase that will cause an alarm.')
rptrPortGrpAlarmCollBdDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmCollBdDisable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmCollBdDisable.setDescription('Set will permit a board to be disabled on a collision alarm condition. Get will show whether the board disabling is allowed or not.')
rptrPortGrpAlarmErrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmErrEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmErrEnable.setDescription('Get returns whether error alarms are enabled/disabled. Set allows for enabling/disabling of error alarms')
rptrPortGrpAlarmErrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmErrThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmErrThreshold.setDescription('Get/Set the percentage of errors per good packet within the timebase that will cause an alarm.')
rptrPortGrpAlarmErrSource = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmErrSource.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmErrSource.setDescription('Get/Set a bit encoded map of which errors to include in the error sum, as follows: CRC_errors - Bit 0 - Least Significant Bit runts - Bit 1 OOW_colls - Bit 2 align_errs - Bit 3 undefined - Bit 4 Giants - Bit 5')
rptrPortGrpAlarmErrGrpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmErrGrpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmErrGrpDisable.setDescription('Set will permit a port group to be disabled on an error alarm condition. Get will show whether the port group disabling is allowed or not.')
rptrPortGrpSrcAddrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 4), )
if mibBuilder.loadTexts: rptrPortGrpSrcAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSrcAddrTable.setDescription('')
rptrPortGrpSrcAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 4, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortGrpSrcAddrId"))
if mibBuilder.loadTexts: rptrPortGrpSrcAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSrcAddrEntry.setDescription('')
rptrPortGrpSrcAddrId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpSrcAddrId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSrcAddrId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortGrpSrcAddrActiveUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpSrcAddrActiveUsers.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSrcAddrActiveUsers.setDescription('Returns the total number of active users seen by this port group.')
rptrPort = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3))
rptrPortMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1), )
if mibBuilder.loadTexts: rptrPortMgmtTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortMgmtTable.setDescription('')
rptrPortMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortMgmtPortId"), (0, "REPEATER-MIB", "rptrPortMgmtPortGrpId"))
if mibBuilder.loadTexts: rptrPortMgmtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortMgmtEntry.setDescription('')
rptrPortMgmtPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortMgmtPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortMgmtPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortMgmtPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortMgmtPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortMgmtPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortMgmtName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortMgmtName.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortMgmtName.setDescription('Sets/Gets an ASCII name assigned to this port.')
rptrPortMgmtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortMgmtAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortMgmtAdminState.setDescription('Setting this object to Enable will cause port to be enabled. Setting this object to Disable will cause the port to be disabled. When read this object will return the state of the object per the last request.')
rptrPortMgmtOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notOperational", 1), ("operational", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortMgmtOperState.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortMgmtOperState.setDescription('Get port operational status.')
prtrPortMgmtPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtrPortMgmtPortType.setStatus('mandatory')
if mibBuilder.loadTexts: prtrPortMgmtPortType.setDescription('Uniquely defines the repeater port type. A authoritative identification for a port type. By convention, this value is alocated within the SMI enterprises subtree (1.3.6.1.4.1), and provides an easy and unambiguous means to determine the type of repeater port.')
rptrPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2))
rptrPortPktStatsTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1), )
if mibBuilder.loadTexts: rptrPortPktStatsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsTbl.setDescription('')
rptrPortPktStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortPktStatsPortId"), (0, "REPEATER-MIB", "rptrPortPktStatsPortGrpId"))
if mibBuilder.loadTexts: rptrPortPktStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsEntry.setDescription('')
rptrPortPktStatsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortPktStatsPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortPktStatsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsPackets.setDescription("Get this port's total received packets.")
rptrPortPktStatsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsBytes.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsBytes.setDescription("Get this port's total received bytes.")
rptrPortPktStatsColls = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsColls.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsColls.setDescription("Get this port's total collisions.")
rptrPortPktStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsErrors.setDescription("Get this port's total errors.")
rptrPortPktStatsAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsAlign.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsAlign.setDescription("Get this port's total frame alignment errors.")
rptrPortPktStatsCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsCRC.setDescription("Get this port's total CRC errors.")
rptrPortPktStatsOOW = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsOOW.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsOOW.setDescription("Get this port's total out-of-window collisions.")
rptrPortProtocolTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2), )
if mibBuilder.loadTexts: rptrPortProtocolTbl.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolTbl.setDescription('')
rptrPortProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortProtocolPortId"), (0, "REPEATER-MIB", "rptrPortProtocolPortGrpId"))
if mibBuilder.loadTexts: rptrPortProtocolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolEntry.setDescription('')
rptrPortProtocolPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortProtocolPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortProtocolOSI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolOSI.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolOSI.setDescription("Get this port's total received OSI protocol packets.")
rptrPortProtocolNovell = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolNovell.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolNovell.setDescription("Get this port's total received Novell protocol packets.")
rptrPortProtocolBanyan = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolBanyan.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolBanyan.setDescription("Get this port's total received Banyan protocol packets.")
rptrPortProtocolDECNet = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolDECNet.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolDECNet.setDescription("Get this port's total received DECNet protocol packets.")
rptrPortProtocolXNS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolXNS.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolXNS.setDescription("Get this port's total received XNS protocol packets.")
rptrPortProtocolIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolIP.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolIP.setDescription("Get this port's total received TCP/IP protocol packets.")
rptrPortProtocolCtron = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolCtron.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolCtron.setDescription("Get this port's total received CTRON Management protocol packets.")
rptrPortProtocolAppletalk = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolAppletalk.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolAppletalk.setDescription("Get this port's total received Appletalk protocol packets.")
rptrPortProtocolOther = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolOther.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolOther.setDescription("Get this port's total received unknown protocol packets.")
rptrPortFrameSzTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3), )
if mibBuilder.loadTexts: rptrPortFrameSzTbl.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSzTbl.setDescription('Description goes here.')
rptrPortFrameSzEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortFrameSzPortId"), (0, "REPEATER-MIB", "rptrPortFrameSzPortGrpId"))
if mibBuilder.loadTexts: rptrPortFrameSzEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSzEntry.setDescription('Description goes here.')
rptrPortFrameSzPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSzPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSzPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortFrameSzPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSzPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSzPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortFrameSzRunt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSzRunt.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSzRunt.setDescription("Get this port's total received packets of size less than 64 bytes.")
rptrPortFrameSz64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz64To127.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSz64To127.setDescription("Get this port's total received packets of size between 64 and 127 bytes.")
rptrPortFrameSz128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz128To255.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSz128To255.setDescription("Get this port's total received packets of size between 128 and 255 bytes.")
rptrPortFrameSz256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz256To511.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSz256To511.setDescription("Get this port's total received packets of size between 256 and 511 bytes.")
rptrPortFrameSz512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz512To1023.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSz512To1023.setDescription("Get this port's total received packets of size between 512 and 1023 bytes.")
rptrPortFrameSz1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz1024To1518.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSz1024To1518.setDescription("Get this port's total received packets of size between 1024 and 1518 bytes.")
rptrPortFrameSzGiant = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSzGiant.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSzGiant.setDescription("Get this port's total received packets of size greater than 1518 bytes.")
rptrPortAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3), )
if mibBuilder.loadTexts: rptrPortAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmTable.setDescription('')
rptrPortAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortAlarmPortId"), (0, "REPEATER-MIB", "rptrPortAlarmPortGrpId"))
if mibBuilder.loadTexts: rptrPortAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmEntry.setDescription('')
rptrPortAlarmPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortAlarmPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortAlarmPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortAlarmPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortAlarmTrafEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmTrafEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmTrafEnable.setDescription('Get returns whether traffic alarms are enabled/disabled. Set allows for enabling/disabling of traffic alarms.')
rptrPortAlarmTrafThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmTrafThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmTrafThreshold.setDescription('Get/Set packet threshold within the timebase that will cause an alarm.')
rptrPortAlarmTrafPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmTrafPortDisable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmTrafPortDisable.setDescription('Set will permit a port to be disabled on a traffic alarm condition. Get will show whether the port disabling is allowed or not.')
rptrPortAlarmCollEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmCollEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmCollEnable.setDescription('Get returns whether collision alarms are enabled/disabled. Set allows for enabling/disabling of collision alarms.')
rptrPortAlarmCollThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmCollThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmCollThreshold.setDescription('Get/Set the number of collisions per good packet within the timebase that will cause an alarm.')
rptrPortAlarmCollPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmCollPortDisable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmCollPortDisable.setDescription('Set will permit a port to be disabled on a collision alarm condition. Get will show whether the port disabling is allowed or not.')
rptrPortAlarmErrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmErrEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmErrEnable.setDescription('Get returns whether error alarms are enabled/disabled. Set allows for enabling/disabling of error alarms')
rptrPortAlarmErrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmErrThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmErrThreshold.setDescription('Get/Set the percentage of errors per good packet within the timebase that will cause an alarm.')
rptrPortAlarmErrSource = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmErrSource.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmErrSource.setDescription('Get/Set a bit encoded map of which errors to include in the error sum, as follows: CRC_errors - Bit 0 - Least Significant Bit runts - Bit 1 OOW_colls - Bit 2 align_errs - Bit 3 undefined - Bit 4 Giants - Bit 5')
rptrPortAlarmErrPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmErrPortDisable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmErrPortDisable.setDescription('Set will permit a port to be disabled on an error alarm condition. Get will show whether the port disabling is allowed or not.')
rptrPortRedundTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4), )
if mibBuilder.loadTexts: rptrPortRedundTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortRedundTable.setDescription('')
rptrPortRedundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortRedundPortId"), (0, "REPEATER-MIB", "rptrPortRedundPortGrpId"))
if mibBuilder.loadTexts: rptrPortRedundEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortRedundEntry.setDescription('')
rptrPortRedundPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortRedundPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortRedundPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortRedundPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortRedundPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortRedundPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortRedundCrctNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortRedundCrctNum.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortRedundCrctNum.setDescription('Get/Set redundant circuit number of redundant circuit that port is or is to be associated with.')
rptrPortRedundType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 1), ("primary", 2), ("backup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortRedundType.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortRedundType.setDescription('Get/Set redundant port type.')
rptrPortRedundStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortRedundStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortRedundStatus.setDescription('Get/Set redundant port status.')
rptrPortSrcAddrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5), )
if mibBuilder.loadTexts: rptrPortSrcAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrTable.setDescription('')
rptrPortSrcAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortSrcAddrPortId"), (0, "REPEATER-MIB", "rptrPortSrcAddrPortGrpId"))
if mibBuilder.loadTexts: rptrPortSrcAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrEntry.setDescription('')
rptrPortSrcAddrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortSrcAddrPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortSrcAddrTopoState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("station", 1), ("trunk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrTopoState.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrTopoState.setDescription('Returns the topological state of the port.')
rptrPortSrcAddrForceTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noForce", 1), ("force", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSrcAddrForceTrunk.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrForceTrunk.setDescription('When this object is set to Force it causes the port to be placed into a Trunk topological state whether the network traffic would warrant such a state or not. When this object is set to NoForce it allows the port to assume the topological state it would naturally assume based on the network activity acrossed it. When read this object reports the current setting.')
rptrPortSrcAddrActiveUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrActiveUsers.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrActiveUsers.setDescription('Returns the total number of active users seen by this port.')
rptrPortSrcAddrListTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6), )
if mibBuilder.loadTexts: rptrPortSrcAddrListTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrListTable.setDescription('')
rptrPortSrcAddrListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortSrcAddrListId"), (0, "REPEATER-MIB", "rptrPortSrcAddrListPortId"), (0, "REPEATER-MIB", "rptrPortSrcAddrListPortGrpId"))
if mibBuilder.loadTexts: rptrPortSrcAddrListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrListEntry.setDescription('')
rptrPortSrcAddrListId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrListId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrListId.setDescription('Returns an index associated with the number of address to be returned.')
rptrPortSrcAddrListPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrListPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrListPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortSrcAddrListPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrListPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrListPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortSrcAddrAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrAddressList.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrAddressList.setDescription('Returns a source address seen on this port.')
rptrPortHardwareTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7), )
if mibBuilder.loadTexts: rptrPortHardwareTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHardwareTable.setDescription('')
rptrPortHardwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1), ).setIndexNames((0, "REPEATER-MIB", "rptrPortHardwarePortId"), (0, "REPEATER-MIB", "rptrPortHardwarePortGrpId"))
if mibBuilder.loadTexts: rptrPortHardwareEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHardwareEntry.setDescription('')
rptrPortHardwarePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHardwarePortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHardwarePortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortHardwarePortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHardwarePortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHardwarePortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortHardwareSegStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSegmented", 1), ("segmented", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHardwareSegStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHardwareSegStatus.setDescription('Returns port segmentation status.')
rptrPortHardwareLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notLinked", 1), ("linked", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHardwareLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHardwareLinkStatus.setDescription('Returns port link status.')
mibBuilder.exportSymbols("REPEATER-MIB", rptrPortProtocolOSI=rptrPortProtocolOSI, rptrPortFrameSzGiant=rptrPortFrameSzGiant, rptrRedundPortType=rptrRedundPortType, rptrPortSrcAddrListTable=rptrPortSrcAddrListTable, rptrSrcAddrMgmtPortLock=rptrSrcAddrMgmtPortLock, rptrPortPktStatsEntry=rptrPortPktStatsEntry, rptrPortFrameSzEntry=rptrPortFrameSzEntry, rptrProtocolsXNS=rptrProtocolsXNS, rptrProtocolsAppletalk=rptrProtocolsAppletalk, rptrAlarms=rptrAlarms, rptrPortGrpSrcAddrId=rptrPortGrpSrcAddrId, rptrPortGrpSrcAddrActiveUsers=rptrPortGrpSrcAddrActiveUsers, rptrMgmt=rptrMgmt, rptrPortGrpAlarmId=rptrPortGrpAlarmId, rptrSrcAddrMgmt=rptrSrcAddrMgmt, rptrPortSrcAddrActiveUsers=rptrPortSrcAddrActiveUsers, rptrPortProtocolPortGrpId=rptrPortProtocolPortGrpId, rptrProtocolsBanyan=rptrProtocolsBanyan, rptrPortGrpProtocolEntry=rptrPortGrpProtocolEntry, rptrRedundPortBoardNum=rptrRedundPortBoardNum, rptrRedundCrctNumAddr=rptrRedundCrctNumAddr, rptrSrcAddrListTable=rptrSrcAddrListTable, rptrRedundCrctTable=rptrRedundCrctTable, rptrPortGrpFrameSzGiant=rptrPortGrpFrameSzGiant, rptrPortAlarmTrafPortDisable=rptrPortAlarmTrafPortDisable, rptrProtocolsIP=rptrProtocolsIP, rptrPortGrpProtocolTbl=rptrPortGrpProtocolTbl, rptrPortSrcAddrTable=rptrPortSrcAddrTable, rptrPortGrpMgmtPortsOper=rptrPortGrpMgmtPortsOper, rptrRedundCrctRetrys=rptrRedundCrctRetrys, rptrPortGrpPktStatsCRC=rptrPortGrpPktStatsCRC, rptrPortGrpPktStatsEntry=rptrPortGrpPktStatsEntry, rptrPortFrameSz128To255=rptrPortFrameSz128To255, rptrPortGrpFrameSz1024To1518=rptrPortGrpFrameSz1024To1518, rptrRedundMaxCrcts=rptrRedundMaxCrcts, rptrAlarmsTrafThreshold=rptrAlarmsTrafThreshold, rptrRedundPortNum=rptrRedundPortNum, rptrPortGrpMgmtPortsOn=rptrPortGrpMgmtPortsOn, rptrRedundPerformTest=rptrRedundPerformTest, rptrRedundPollInterval=rptrRedundPollInterval, rptrPortRedundCrctNum=rptrPortRedundCrctNum, rptrPortGrpPktStatsColls=rptrPortGrpPktStatsColls, rptrPortAlarmEntry=rptrPortAlarmEntry, rptrPortGrpFrameSz64To127=rptrPortGrpFrameSz64To127, rptrPortGrpAlarmErrThreshold=rptrPortGrpAlarmErrThreshold, rptrPortPktStatsPortGrpId=rptrPortPktStatsPortGrpId, rptrSrcAddrAddressList=rptrSrcAddrAddressList, rptrPortGrpMgmtTable=rptrPortGrpMgmtTable, rptrPortSrcAddrForceTrunk=rptrPortSrcAddrForceTrunk, rptrPortProtocolIP=rptrPortProtocolIP, rptrPortHardwareSegStatus=rptrPortHardwareSegStatus, rptrPktStatsBytes=rptrPktStatsBytes, rptrSrcAddrMgmtSrcAgeInterval=rptrSrcAddrMgmtSrcAgeInterval, rptrPortAlarmErrEnable=rptrPortAlarmErrEnable, rptrAlarmsErrSource=rptrAlarmsErrSource, rptrPortGrpAlarmErrEnable=rptrPortGrpAlarmErrEnable, rptrPortPktStatsAlign=rptrPortPktStatsAlign, rptrRedundPortTable=rptrRedundPortTable, rptrFrameSz256To511=rptrFrameSz256To511, rptrPortProtocolAppletalk=rptrPortProtocolAppletalk, rptrPortSrcAddrListEntry=rptrPortSrcAddrListEntry, rptrPortGrpPktStatsErrors=rptrPortGrpPktStatsErrors, rptrPortPktStatsTbl=rptrPortPktStatsTbl, rptrPortFrameSzTbl=rptrPortFrameSzTbl, rptrPortGrpFrameSzTbl=rptrPortGrpFrameSzTbl, rptrPortGrpFrameSz512To1023=rptrPortGrpFrameSz512To1023, rptrFrameSz64To127=rptrFrameSz64To127, rptrFrameSz1024To1518=rptrFrameSz1024To1518, rptrRedundCrctName=rptrRedundCrctName, rptrPortGrpAlarmTable=rptrPortGrpAlarmTable, rptrSrcAddrListId=rptrSrcAddrListId, rptrPortProtocolCtron=rptrPortProtocolCtron, rptrPortAlarmCollThreshold=rptrPortAlarmCollThreshold, rptrAlarmsErrThreshold=rptrAlarmsErrThreshold, rptrRedundCrctEnable=rptrRedundCrctEnable, rptrPortGrpProtocolXNS=rptrPortGrpProtocolXNS, rptrPortMgmtName=rptrPortMgmtName, rptrPortProtocolOther=rptrPortProtocolOther, rptrSrcAddrSrcTableEntryPort=rptrSrcAddrSrcTableEntryPort, rptrPortSrcAddrAddressList=rptrPortSrcAddrAddressList, rptrRedund=rptrRedund, rptrSrcAddrSrcTableEntry=rptrSrcAddrSrcTableEntry, rptrPortFrameSz1024To1518=rptrPortFrameSz1024To1518, rptrPortHardwareEntry=rptrPortHardwareEntry, rptrPortGrpAlarmTrafGrpDisable=rptrPortGrpAlarmTrafGrpDisable, rptrPortGrpProtocolIP=rptrPortGrpProtocolIP, rptrRedundCrctDelAddr=rptrRedundCrctDelAddr, rptrPortAlarmTrafThreshold=rptrPortAlarmTrafThreshold, rptrPortGrpStats=rptrPortGrpStats, rptrMgmtPortsEnable=rptrMgmtPortsEnable, rptrPortPktStatsCRC=rptrPortPktStatsCRC, cabletron=cabletron, rptr=rptr, rptrPortGrpPktStatsBytes=rptrPortGrpPktStatsBytes, rptrPortGrpFrameSzEntry=rptrPortGrpFrameSzEntry, rptrPortGrpAlarmCollEnable=rptrPortGrpAlarmCollEnable, rptrRedundAddrId=rptrRedundAddrId, rptrPortFrameSz512To1023=rptrPortFrameSz512To1023, rptrPortAlarmErrPortDisable=rptrPortAlarmErrPortDisable, rptrPortHardwareTable=rptrPortHardwareTable, rptrPortGrpFrameSzRunt=rptrPortGrpFrameSzRunt, rptrPortProtocolNovell=rptrPortProtocolNovell, rptrPortGrpSrcAddrEntry=rptrPortGrpSrcAddrEntry, rptrStats=rptrStats, rptrRedundAddrTable=rptrRedundAddrTable, rptrAlarmsAlarmTimebase=rptrAlarmsAlarmTimebase, rptrPortAlarmPortId=rptrPortAlarmPortId, rptrPortAlarmPortGrpId=rptrPortAlarmPortGrpId, rptrSrcAddrListEntry=rptrSrcAddrListEntry, rptrPortGrpProtocolOSI=rptrPortGrpProtocolOSI, rptrPortGrpProtocolOther=rptrPortGrpProtocolOther, rptrPortStats=rptrPortStats, ctron=ctron, rptrPktStatsColls=rptrPktStatsColls, rptrPortGrpFrameSzId=rptrPortGrpFrameSzId, rptrPortAlarmTable=rptrPortAlarmTable, rptrPortGrpMgmtPortCount=rptrPortGrpMgmtPortCount, rptrRedundPortCrctId=rptrRedundPortCrctId, rptrPortGrpProtocolCtron=rptrPortGrpProtocolCtron, rptrPktStatsNoRsc=rptrPktStatsNoRsc, rptrPortFrameSz64To127=rptrPortFrameSz64To127, rptrPktStatsAlign=rptrPktStatsAlign, rptrAlarmsErrEnable=rptrAlarmsErrEnable, rptrPortGrpMgmtEntry=rptrPortGrpMgmtEntry, rptrRedundPortId=rptrRedundPortId, rptrPortGrpProtocolNovell=rptrPortGrpProtocolNovell, rptrPortPktStatsColls=rptrPortPktStatsColls, rptrPortGrpSrcAddrTable=rptrPortGrpSrcAddrTable, rptrPortGrpPktStatsAlign=rptrPortGrpPktStatsAlign, rptrPortGrpProtocolAppletalk=rptrPortGrpProtocolAppletalk, rptrRedundCrctId=rptrRedundCrctId, rptrPortGrpAlarmErrGrpDisable=rptrPortGrpAlarmErrGrpDisable, rptrRedundCrctNumBPs=rptrRedundCrctNumBPs, rptrPktStatsPackets=rptrPktStatsPackets, rptrPortHardwarePortGrpId=rptrPortHardwarePortGrpId, rptrPortProtocolDECNet=rptrPortProtocolDECNet, rptrPortGrpProtocolId=rptrPortGrpProtocolId, rptrSrcAddrMgmtActiveUsers=rptrSrcAddrMgmtActiveUsers, rptrPortPktStatsOOW=rptrPortPktStatsOOW, rptrRedundCrctEntry=rptrRedundCrctEntry, rptrPortHardwarePortId=rptrPortHardwarePortId, rptrPortPktStatsPackets=rptrPortPktStatsPackets, rptrPortGrpPktStatsId=rptrPortGrpPktStatsId, rptrPortGrpProtocolDECNet=rptrPortGrpProtocolDECNet, rptrRedundAddrEntry=rptrRedundAddrEntry, rptrPortPktStatsPortId=rptrPortPktStatsPortId, rptrAlarmsCollThreshold=rptrAlarmsCollThreshold, rptrProtocolsOSI=rptrProtocolsOSI, rptrPortProtocolTbl=rptrPortProtocolTbl, rptrPort=rptrPort, rptrSrcAddrSrcTableEntryId=rptrSrcAddrSrcTableEntryId, rptrPortRedundEntry=rptrPortRedundEntry, rptrPortGrpFrameSz256To511=rptrPortGrpFrameSz256To511, rptrPortRedundPortId=rptrPortRedundPortId, rptrPortMgmtTable=rptrPortMgmtTable, rptrPortGrpFrameSz128To255=rptrPortGrpFrameSz128To255, rptrPortMgmtPortId=rptrPortMgmtPortId, rptrPortProtocolPortId=rptrPortProtocolPortId, rptrRedundancy=rptrRedundancy, rptrPortSrcAddrListPortGrpId=rptrPortSrcAddrListPortGrpId, rptrPortFrameSzRunt=rptrPortFrameSzRunt, rptrRedundReset=rptrRedundReset, rptrSrcAddrSrcTableEntryPortGroup=rptrSrcAddrSrcTableEntryPortGroup, rptrPktStatsErrors=rptrPktStatsErrors, rptrPortProtocolBanyan=rptrPortProtocolBanyan, rptrFrameSzGiant=rptrFrameSzGiant, rptrPortHardwareLinkStatus=rptrPortHardwareLinkStatus, rptrSourceAddress=rptrSourceAddress, rptrPortAlarmTrafEnable=rptrPortAlarmTrafEnable, rptrFrameSizes=rptrFrameSizes, rptrMgmtPortCount=rptrMgmtPortCount, rptrSrcAddrSrcTable=rptrSrcAddrSrcTable, rptrPortRedundStatus=rptrPortRedundStatus, rptrProtocolsCtron=rptrProtocolsCtron, rptrPortFrameSz256To511=rptrPortFrameSz256To511, rptrPktStatsOOW=rptrPktStatsOOW, rptrPktStatsCRC=rptrPktStatsCRC, rptrFrameSz128To255=rptrFrameSz128To255, rptrAlarmsCollEnable=rptrAlarmsCollEnable, rptrRedundCrctAddAddr=rptrRedundCrctAddAddr, rptrPortMgmtOperState=rptrPortMgmtOperState, rptrPortRedundPortGrpId=rptrPortRedundPortGrpId, rptrPortGrpAlarmErrSource=rptrPortGrpAlarmErrSource, rptrPortSrcAddrPortId=rptrPortSrcAddrPortId, rptrPortPktStatsErrors=rptrPortPktStatsErrors, rptrPortGrpPktStatsPkts=rptrPortGrpPktStatsPkts, rptrPortGrpAlarmCollBdDisable=rptrPortGrpAlarmCollBdDisable, ctphysical=ctphysical, rptrPortPktStatsBytes=rptrPortPktStatsBytes, rptrPortAlarmErrSource=rptrPortAlarmErrSource, rptrPortGrpAlarmTrafThreshold=rptrPortGrpAlarmTrafThreshold, rptrPortMgmtAdminState=rptrPortMgmtAdminState, rptrMgmtBoardMap=rptrMgmtBoardMap, repeaterRev4=repeaterRev4, rptrPortSrcAddrEntry=rptrPortSrcAddrEntry, rptrRedundAddrCrctId=rptrRedundAddrCrctId, rptrMgmtPortsOn=rptrMgmtPortsOn, rptrProtocolsNovell=rptrProtocolsNovell, rptrPortMgmtEntry=rptrPortMgmtEntry, rptrPortSrcAddrPortGrpId=rptrPortSrcAddrPortGrpId, rptrPortProtocolXNS=rptrPortProtocolXNS, rptrPortProtocolEntry=rptrPortProtocolEntry, rptrPortSrcAddrListId=rptrPortSrcAddrListId, rptrPortGrpAlarmTrafEnable=rptrPortGrpAlarmTrafEnable, rptrRedundAddrIPAddr=rptrRedundAddrIPAddr, rptrPortGrpPktStatsTbl=rptrPortGrpPktStatsTbl, rptrPortGroup=rptrPortGroup, rptrPortSrcAddrTopoState=rptrPortSrcAddrTopoState, rptrMgmtPortsOper=rptrMgmtPortsOper, rptrPortFrameSzPortId=rptrPortFrameSzPortId, rptrPortGrpAlarmEntry=rptrPortGrpAlarmEntry, prtrPortMgmtPortType=prtrPortMgmtPortType, rptrMgmtInterfaceNum=rptrMgmtInterfaceNum, rptrPortRedundTable=rptrPortRedundTable, mibs=mibs, rptrRedundCrctReset=rptrRedundCrctReset, rptrPortFrameSzPortGrpId=rptrPortFrameSzPortGrpId, rptrPortGrpProtocolBanyan=rptrPortGrpProtocolBanyan, rptrPortAlarmCollEnable=rptrPortAlarmCollEnable, rptrMgmtName=rptrMgmtName, rptrFrameSzRunt=rptrFrameSzRunt, rptrPktStats=rptrPktStats, repeater=repeater, rptrPortSrcAddrListPortId=rptrPortSrcAddrListPortId, rptrPortGrpMgmtPortsEnable=rptrPortGrpMgmtPortsEnable, rptrRedundTestTOD=rptrRedundTestTOD, rptrPortGrpMgmtName=rptrPortGrpMgmtName, rptrAlarmsTrafEnable=rptrAlarmsTrafEnable, rptrPortAlarmCollPortDisable=rptrPortAlarmCollPortDisable, rptrPortAlarmErrThreshold=rptrPortAlarmErrThreshold, rptrPortGrpAlarmCollThreshold=rptrPortGrpAlarmCollThreshold, rptrProtocols=rptrProtocols, rptrProtocolsDECNet=rptrProtocolsDECNet, rptrFrameSz512To1023=rptrFrameSz512To1023, rptrPortGrpPktStatsOOW=rptrPortGrpPktStatsOOW, rptrProtocolsOther=rptrProtocolsOther, rptrPortRedundType=rptrPortRedundType, rptrPortMgmtPortGrpId=rptrPortMgmtPortGrpId, rptrPortGrpMgmtGrpId=rptrPortGrpMgmtGrpId, rptrRedundPortEntry=rptrRedundPortEntry)
