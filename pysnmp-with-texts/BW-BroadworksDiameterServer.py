#
# PySNMP MIB module BW-BroadworksDiameterServer (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BW-BroadworksDiameterServer
# Produced by pysmi-0.3.4 at Wed May  1 11:42:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, Counter64, Bits, IpAddress, Gauge32, ModuleIdentity, TimeTicks, iso, MibIdentifier, Counter32, enterprises, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "Counter64", "Bits", "IpAddress", "Gauge32", "ModuleIdentity", "TimeTicks", "iso", "MibIdentifier", "Counter32", "enterprises", "NotificationType", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
broadsoft = ModuleIdentity((1, 3, 6, 1, 4, 1, 6431))
broadsoft.setRevisions(('2006-01-26 00:01',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: broadsoft.setRevisionsDescriptions(('',))
if mibBuilder.loadTexts: broadsoft.setLastUpdated('200705230000Z')
if mibBuilder.loadTexts: broadsoft.setOrganization('BroadSoft, Inc')
if mibBuilder.loadTexts: broadsoft.setContactInfo('BroadSoft, Inc 220 Perry Parkway Gaithersburg, MD 20877 301-977-9440')
if mibBuilder.loadTexts: broadsoft.setDescription('This MIB contains the performance measurements related to the BroadWorks Diameter Server interconnect process.')
broadworks = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1))
diameterFrontNode = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 10))
protocolsModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1))
managementModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 10, 2))
dsBaseProtocolStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1))
bwDiameterFrontNodeRequestsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeRequestsOut.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeRequestsOut.setDescription('Number of Diameter requests transmitted. This counter is incremented whenever a Diameter request is transmitted.')
bwDiameterFrontNodeRequestsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeRequestsIn.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeRequestsIn.setDescription('Number of Diameter requests received.This counter is incremented whenever a Diameter request is received.')
bwDiameterFrontNodeResponsesOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeResponsesOut.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeResponsesOut.setDescription('Number of Diameter answers transmitted. This counter is incremented whenever a Diameter answer is transmitted.')
bwDiameterFrontNodeResponsesIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeResponsesIn.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeResponsesIn.setDescription('Number of Diameter answers received. This counter is incremented whenever a Diameter answer is received.')
bwDiameterFrontNodeDWRsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeDWRsOut.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeDWRsOut.setDescription('Number of Device-Watchdog-Requests transmitted. This counter is incremented whenever a Device-Watchdog-Request is transmitted.')
bwDiameterFrontNodeDWRsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeDWRsIn.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeDWRsIn.setDescription('Number of Device-Watchdog-Requests received. This counter is incremented whenever a Device-Watchdog-Request is received.')
bwDiameterFrontNodeDWAsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeDWAsOut.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeDWAsOut.setDescription('Number of Device-Watchdog-Answers transmitted. This counter is incremented whenever a Device-Watchdog-Answer is transmitted.')
bwDiameterFrontNodeDWAsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeDWAsIn.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeDWAsIn.setDescription('Number of Device-Watchdog-Answers received. This counter is incremented whenever a Device-Watchdog-Answer is received.')
bwDiameterFrontNodeCERsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeCERsOut.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeCERsOut.setDescription('Number of Capabilities-Exchange-Requests transmitted. This counter is incremented whenever a Capabilities-Exchange-Request is transmitted.')
bwDiameterFrontNodeCERsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeCERsIn.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeCERsIn.setDescription('Number of Capabilities-Exchange-Requests received. This counter is incremented whenever a Capabilities-Exchange-Request is received.')
bwDiameterFrontNodeCEAsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeCEAsOut.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeCEAsOut.setDescription('Number of Capabilities-Exchange-Answers transmitted. This counter is incremented whenever a Capabilities-Exchange-Answer is transmitted.')
bwDiameterFrontNodeCEAsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeCEAsIn.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeCEAsIn.setDescription('Number of Capabilities-Exchange-Answers received. This counter is incremented whenever a Capabilities-Exchange-Answers is received.')
bwDiameterFrontNodeDPRsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeDPRsOut.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeDPRsOut.setDescription('Number of Disconnect-Peer-Requests transmitted. This counter is incremented whenever a Disconnect-Peer-Request is transmitted.')
bwDiameterFrontNodeDPRsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeDPRsIn.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeDPRsIn.setDescription('Number of Disconnect-Peer-Requests received. This counter is incremented whenever a Disconnect-Peer-Request is received.')
bwDiameterFrontNodeDPAsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeDPAsOut.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeDPAsOut.setDescription('Number of Disconnect-Peer-Answers transmitted. This counter is incremented whenever a Disconnect-Peer-Answer is transmitted.')
bwDiameterFrontNodeDPAsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeDPAsIn.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeDPAsIn.setDescription('Number of Disconnect-Peer-Answers received. This counter is incremented whenever a Disconnect-Peer-Answer is received.')
bwDiameterFrontNodeSTRsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeSTRsOut.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeSTRsOut.setDescription('Number of Session-Termination-Requests transmitted. This counter is incremented whenever a Session-Termination-Requests is transmitted.')
bwDiameterFrontNodeSTRsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeSTRsIn.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeSTRsIn.setDescription('Number of Session-Termination-Requests received. This counter is incremented whenever a Session-Termination-Requests is received.')
bwDiameterFrontNodeSTAsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeSTAsOut.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeSTAsOut.setDescription('Number of Session-Termination-Answers transmitted. This counter is incremented whenever a Session-Termination-Answers is transmitted.')
bwDiameterFrontNodeSTAsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeSTAsIn.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeSTAsIn.setDescription('Number of Session-Termination-Answers received. This counter is incremented whenever a Session-Termination-Answers is received.')
bwDiameterFrontNodeASRsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeASRsOut.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeASRsOut.setDescription('Number of Abort-Session-Requests transmitted. This counter is incremented whenever a Abort-Session-Requests is transmitted.')
bwDiameterFrontNodeASRsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeASRsIn.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeASRsIn.setDescription('Number of Abort-Session-Requests received. This counter is incremented whenever a Abort-Session-Requests is received.')
bwDiameterFrontNodeASAsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeASAsOut.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeASAsOut.setDescription('Number of Abort-Session-Answers transmitted. This counter is incremented whenever a Abort-Session-Answers is transmitted.')
bwDiameterFrontNodeASAsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwDiameterFrontNodeASAsIn.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeASAsIn.setDescription('Number of Abort-Session-Answers received. This counter is incremented whenever a Abort-Session-Answers is received.')
bwDiameterFrontNodeResetAllCounters = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 10, 2, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwDiameterFrontNodeResetAllCounters.setStatus('current')
if mibBuilder.loadTexts: bwDiameterFrontNodeResetAllCounters.setDescription('When set to a value other than 0, all counters in the Diameter Front Node are reset to 0.')
mibBuilder.exportSymbols("BW-BroadworksDiameterServer", diameterFrontNode=diameterFrontNode, bwDiameterFrontNodeASRsIn=bwDiameterFrontNodeASRsIn, broadsoft=broadsoft, bwDiameterFrontNodeCERsOut=bwDiameterFrontNodeCERsOut, bwDiameterFrontNodeSTAsIn=bwDiameterFrontNodeSTAsIn, bwDiameterFrontNodeCEAsIn=bwDiameterFrontNodeCEAsIn, managementModule=managementModule, bwDiameterFrontNodeDWRsIn=bwDiameterFrontNodeDWRsIn, bwDiameterFrontNodeDPRsOut=bwDiameterFrontNodeDPRsOut, bwDiameterFrontNodeRequestsIn=bwDiameterFrontNodeRequestsIn, broadworks=broadworks, bwDiameterFrontNodeCEAsOut=bwDiameterFrontNodeCEAsOut, bwDiameterFrontNodeDPAsOut=bwDiameterFrontNodeDPAsOut, bwDiameterFrontNodeResponsesIn=bwDiameterFrontNodeResponsesIn, bwDiameterFrontNodeRequestsOut=bwDiameterFrontNodeRequestsOut, bwDiameterFrontNodeCERsIn=bwDiameterFrontNodeCERsIn, bwDiameterFrontNodeDWAsIn=bwDiameterFrontNodeDWAsIn, bwDiameterFrontNodeDPAsIn=bwDiameterFrontNodeDPAsIn, bwDiameterFrontNodeResponsesOut=bwDiameterFrontNodeResponsesOut, PYSNMP_MODULE_ID=broadsoft, bwDiameterFrontNodeASRsOut=bwDiameterFrontNodeASRsOut, bwDiameterFrontNodeSTRsIn=bwDiameterFrontNodeSTRsIn, bwDiameterFrontNodeASAsOut=bwDiameterFrontNodeASAsOut, dsBaseProtocolStats=dsBaseProtocolStats, bwDiameterFrontNodeDWAsOut=bwDiameterFrontNodeDWAsOut, bwDiameterFrontNodeSTRsOut=bwDiameterFrontNodeSTRsOut, bwDiameterFrontNodeSTAsOut=bwDiameterFrontNodeSTAsOut, bwDiameterFrontNodeDWRsOut=bwDiameterFrontNodeDWRsOut, bwDiameterFrontNodeASAsIn=bwDiameterFrontNodeASAsIn, bwDiameterFrontNodeDPRsIn=bwDiameterFrontNodeDPRsIn, bwDiameterFrontNodeResetAllCounters=bwDiameterFrontNodeResetAllCounters, protocolsModule=protocolsModule)
