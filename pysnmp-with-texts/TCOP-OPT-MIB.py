#
# PySNMP MIB module TCOP-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TCOP-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:15:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, ObjectIdentity, TimeTicks, Unsigned32, MibIdentifier, Bits, Integer32, Counter64, ModuleIdentity, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "ObjectIdentity", "TimeTicks", "Unsigned32", "MibIdentifier", "Bits", "Integer32", "Counter64", "ModuleIdentity", "iso", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class Counter16(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class DisplayString(OctetString):
    pass

cdx6500PPCTTCOPPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23), )
if mibBuilder.loadTexts: cdx6500PPCTTCOPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTTCOPPortTable.setDescription('This table contains TCOP Port configuration parameters.')
cdx6500PPCTTCOPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1), ).setIndexNames((0, "TCOP-OPT-MIB", "cdx6500TCOPCfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTTCOPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTTCOPPortEntry.setDescription('Each PortEntry contains the configuration parameters for one TCOP port.')
cdx6500TCOPCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgPortNumber.setDescription('Port number of the port being used by TCOP.')
cdx6500TCOPCfgSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("hsc3", 1), ("gnet", 2), ("uts", 3), ("slc", 4), ("ac100", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgSubtype.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgSubtype.setDescription('Select the sub-type for the synchronous protocol running on this port. hsc3 - Transparent Hitachi type gnet - Transparent GNET type. uts - Transparent Uniscope type. slc - Synchronous Link Control. ac100 - AC100.')
cdx6500TCOPCfgClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("int", 1), ("ext", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgClockSource.setDescription('int - internal clock source ext - external clock source on pins 18 and 24.')
cdx6500TCOPCfgClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 80000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgClockSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgClockSpeed.setDescription('This is the port speed in bits per second, when clock source = int.')
cdx6500TCOPCfgContention = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hdx", 1), ("fdx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgContention.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgContention.setDescription('Specifies the line contention. hdx - Half duplex, DCD toggles fdx - Full duplex, DCD is always high.')
cdx6500TCOPCfgCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("ebcdic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgCodeType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgCodeType.setDescription('Either of ascii or ebcdic code set is used.')
cdx6500TCOPCfgReceiveByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgReceiveByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgReceiveByteCount.setDescription('Specifies the number of bytes collected from the line before data is forwarded to the network. A minimum byte count constraint is imposed for port speed intervals as shown in the following pairs of (port speed in bps, minimum byte count): (19200 to 80000, 127); (9600 to 19200, 64); (4800 to 9600, 32); (2400 to 4800, 16); (below 2400, 8).')
cdx6500TCOPCfgCallControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgCallControl.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgCallControl.setDescription('none - port will generate a call auto - Autocalling enabled.')
cdx6500TCOPCfgAutoCallMnem = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgAutoCallMnem.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgAutoCallMnem.setDescription('This mnemonic name is used for Auto calling.')
cdx6500TCOPCfgAutoCallTO = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgAutoCallTO.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgAutoCallTO.setDescription('Specifies the time in seconds between call attempts when autocalling.')
cdx6500TCOPCfgMaxAutoCallTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgMaxAutoCallTries.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgMaxAutoCallTries.setDescription('Specifies the maximum number of times the TCOP port will attempt to call. A value of 0 will allow unlimited number of attempts.')
cdx6500TCOPCfgPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgPortAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgPortAddress.setDescription('The BCD address specified here is inserted in the calling address field when the TCOP port makes a call.')
cdx6500TCOPCfgProtocolID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgProtocolID.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgProtocolID.setDescription('The protocol identifier specified here is inserted into a call packet or checked against the identifier of an incoming call.')
cdx6500TCOPCfgEnableBill = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgEnableBill.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgEnableBill.setDescription('This controls whether billing (accounting) records will be created for calls on this TCOP port.')
cdx6500TCOPCfgRestrictConn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgRestrictConn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgRestrictConn.setDescription('Specifies the destination of all calls routed to from this port, regardless of route selection table entries. For example, to route calls to port 1, use P1. To route calls to port 2, station 4, use P2S4. To route call to X25 port 2, enter X25-2. Blank this field to disable this functionality.')
cdx6500TCOPCfgRXQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgRXQueue.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgRXQueue.setDescription('Specifies the maximum number of received messages to be queued. This parameter is effective only when sub-type = gnet.')
cdx6500TCOPCfgTXQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgTXQueue.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgTXQueue.setDescription('Specifies the maximum number of transmit messages to be queued. This parameter is effective only when sub-type = gnet.')
cdx6500TCOPCfgQueueOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("resetConnection", 1), ("dropMessage", 2), ("flushQueue", 3), ("eotMessage", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgQueueOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgQueueOverflow.setDescription('Specifies the action to be taken if the receive message queue overflows. This parameter is effective only when sub-type = gnet. resetConnection - Reset connections dropMessage - Drop the message causing overflow flushQueue - Flush the queue eotMessage - Flush the queue when receiving message terminated with EOT.')
cdx6500TCOPCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(27))).clone(namedValues=NamedValues(("tcop", 27)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgPortType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgPortType.setDescription('The Port Type of the port.')
cdx6500TCOPCfgDataTransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hdx", 1), ("fdx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgDataTransmission.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgDataTransmission.setDescription('This determines the mode of data transfer. hdx - Indicates half duplex data transfer. fdx - Indicates full duplex data transfer.')
cdx6500TCOPCfgElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgElectricalInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgElectricalInterfaceType.setDescription('Specify the Electrical Interface Type: V.24 - V.24 Electrical Interface Type V.35 - V.35 Electrical Interface Type V.36 - V.36 Electrical Interface Type X.21 - X.21 Electrical Interface Type NONE - Electrically disabled')
cdx6500TCOPCfgV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgV24ElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgV24ElectricalInterfaceOption.setDescription('Specify the Pin 22 option: RI - V.24 uses Pin 22 for Ring Indicator output signal TM - V.24 uses Pin 22 for Test Mode input signal')
cdx6500TCOPCfgHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 23, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPCfgHighSpeedElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPCfgHighSpeedElectricalInterfaceOption.setDescription('Specify the cable type: NONE - V.35/V.36/X.21 DCE with straight through cable XOVER - V.35/V.36/X.21 DCE with crossover adapter cable')
cdx6500PPSTTCOPPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24), )
if mibBuilder.loadTexts: cdx6500PPSTTCOPPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTTCOPPortTable.setDescription('This table holds statistics items for TCOP ports.')
cdx6500PPSTTCOPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1), ).setIndexNames((0, "TCOP-OPT-MIB", "cdx6500TCOPStatPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTTCOPPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTTCOPPortEntry.setDescription('This entry holds the statistics items for one TCOP port.')
cdx6500TCOPStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortNumber.setDescription('The port number for this TCOP entry.')
cdx6500TCOPStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(27))).clone(namedValues=NamedValues(("tcop", 27)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortType.setDescription('The configured value of the Port Type.')
cdx6500TCOPStatPortSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("hsc3", 1), ("gnet", 2), ("uts", 3), ("slc", 4), ("alc", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortSubtype.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortSubtype.setDescription('Access protocol for this port. hsc3 - Transparent Hitachi type gnet - Transparent GNET type. uts - Transparent Uniscope type. slc - Synchronous Link Control. ac100 - AC100.')
cdx6500TCOPStatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortStatus.setDescription('Status of this port: Up : Port is enabled Down : Port is Inactive Disabled : Port is disabled.')
cdx6500TCOPStatPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("discPhase", 1), ("callingPhase", 2), ("calledPhase", 3), ("connected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortState.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortState.setDescription('Current port state: discPhase - Disconnect phase, no call in place callingPhase - Port has initiated Autocall calledPhase - Port has received a call request connected - Connection has been established.')
cdx6500TCOPStatPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortSpeed.setDescription('The measured port speed in bits per second.')
cdx6500TCOPStatPortUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortUtilIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortUtilIn.setDescription('Percentage of port bandwidth in use.')
cdx6500TCOPStatPortUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortUtilOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortUtilOut.setDescription('Percentage of port bandwidth in use.')
cdx6500TCOPStatPortOverrunErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 9), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortOverrunErrs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortOverrunErrs.setDescription('Total number of overrun errors counted by the I/O driver since the last node or statistics reset.')
cdx6500TCOPStatPortUnderrunErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 10), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortUnderrunErrs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortUnderrunErrs.setDescription('Total number of underrun errors counted by the I/O driver since the last node or statistics reset.')
cdx6500TCOPStatPortBCCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 11), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortBCCErrs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortBCCErrs.setDescription('Total number of CRC errors counted by the I/O driver since the last node or statistics reset.')
cdx6500TCOPStatPortParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 12), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortParityErrs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortParityErrs.setDescription('Total number of parity errors counted by the I/O driver since the last node or statistics reset.')
cdx6500TCOPStatPortInChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortInChars.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortInChars.setDescription('Number of characters received since last node, port or statistics reset.')
cdx6500TCOPStatPortOutChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortOutChars.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortOutChars.setDescription('Number of characters sent since last node, port or statistics reset.')
cdx6500TCOPStatPortInCharsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortInCharsRate.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortInCharsRate.setDescription('Average number of characters received per second since last node, port or statistics reset.')
cdx6500TCOPStatPortOutCharsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortOutCharsRate.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortOutCharsRate.setDescription('Average number of characters sent per second since last node, port or statistics reset.')
cdx6500TCOPStatPortInMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortInMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortInMessages.setDescription('Number of messages received since last node, port or statistics reset.')
cdx6500TCOPStatPortOutMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortOutMessages.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortOutMessages.setDescription('Number of messages sent since last node, port or statistics reset.')
cdx6500TCOPStatPortInMessagesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortInMessagesRate.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortInMessagesRate.setDescription('Average number of messages received per second since last node, port or statistics reset.')
cdx6500TCOPStatPortOutMessagesRate = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortOutMessagesRate.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortOutMessagesRate.setDescription('Average number of messages sent per second since last node, port or statistics reset.')
cdx6500TCOPStatPortInPktsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortInPktsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortInPktsQueued.setDescription('Number of received packets which are currently queued.')
cdx6500TCOPStatPortOutPktsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortOutPktsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortOutPktsQueued.setDescription('Number of packets currently queued which are to be sent.')
cdx6500TCOPStatPortMaxInQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortMaxInQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortMaxInQueueLength.setDescription('The maximum queue length reached for incoming packets since the last reset.')
cdx6500TCOPStatPortMaxOutQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortMaxOutQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortMaxOutQueueLength.setDescription('The maximum queue length reached since the last reset, for packets to be sent.')
cdx6500TCOPStatPortPktQueueFlushCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatPortPktQueueFlushCount.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatPortPktQueueFlushCount.setDescription('The number of times the receive queue is flushed.')
cdx6500TCOPStatAutoCallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallStatus.setDescription('Current status of the autocall.')
cdx6500TCOPStatAutoCallNextAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallNextAttempt.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallNextAttempt.setDescription('Time in seconds until next autocall attempt.')
cdx6500TCOPStatAutoCallAttemptCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallAttemptCount.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallAttemptCount.setDescription('Number of autocall attempts.')
cdx6500TCOPStatAutoCallLastClearCause = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("dte", 1), ("np", 2), ("occ", 3), ("nc", 4), ("inv", 5), ("na", 6), ("err", 7), ("rpe", 8), ("der", 9), ("rna", 10), ("roo", 11), ("icd", 12), ("fsn", 13), ("ctp", 14), ("sha", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastClearCause.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastClearCause.setDescription('Last autocall clear cause code dte - Cleared by other end np - Destination not obtainable occ - Called number busy nc - Network congested inv - Invalid facility requested na - Access barred err - Local procedure error rpe - Remote procedure error der - Called number out of order rna - Reverse charging not accepted roo - RPOA out of order icd - Incompatible destination fsn - Fast select acceptance not subscribed ctp - Control port intervention sha - Ship absent.')
cdx6500TCOPStatAutoCallLastClearDiagnosis = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46))).clone(namedValues=NamedValues(("none", 1), ("bps", 2), ("bpr", 3), ("ptinv", 4), ("pna", 5), ("psh", 6), ("pln", 7), ("tout", 8), ("tcli", 9), ("nocs", 10), ("nofc", 11), ("nofp", 12), ("cald", 13), ("cali", 14), ("invfl", 15), ("icb", 16), ("nolcn", 17), ("cco", 18), ("dupl", 19), ("nadl", 20), ("nfcl", 21), ("nfce", 22), ("trp", 23), ("clin", 24), ("cldn", 25), ("ncil", 26), ("ccpo", 27), ("csld", 28), ("cshe", 29), ("finl", 30), ("rin3", 31), ("disc", 32), ("dm", 33), ("sabm", 34), ("frmr", 35), ("invnr", 36), ("unsf", 37), ("ucmd", 38), ("uresp", 39), ("gtcap", 40), ("t1to", 41), ("frlen", 42), ("aderr", 43), ("spbo", 44), ("dpbo", 45), ("srr", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastClearDiagnosis.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastClearDiagnosis.setDescription('Last clear diagnostic code none - No more information bps - Invalid P(S) bpr - Invalid P(R) ptinv - Packet type invalid pna - Packet not allowed psh - Packet too short pln - Packet too long tout - Timer expired tcli - Timer expired for clear indication nocs - Call set-up problem nofc - Facility/registration code not allowed nofp - Facility/registration parameter not allowed cald - Bad called address cali - Bad calling address invfl - Invalid facilities length icb - Incoming call barred nolcn - No logical channel available cco - Call collision occurred dupl - Duplicate facility requested nadl - Non-zero address length nfcl - Non-zero facility length nfce - Facility not found when expected trp - Temporary routing problem clin - Call limit reached on intermediate node cldn - Call limit reached on destination node ncil - No logical channel available on internode link ccpo - Call cleared by Control Port operator csld - Call setup looping detected cshe - Call setup hop count exceeded finl - Failure on intermediate node link rin3 - Restart received at level 3 disc - DISC received at level 2 dm - DM received at level 2 sabm - SABM received at level 2 frmr - FRMR received at level 2 invnr - Invalid N(R) unsf - Unsolicited F bit received ucmd - Unknown command received uresp - Unknown response received gtcap - I field too long t1to - T1/N2 timeout frlen - Received frame of incorrect size aderr - Address error spbo - Source port is in Busy Out state dpbo - Destination port is in Busy Out state srr - Session reconnection rejected.')
cdx6500TCOPStatAutoCallLastInCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastInCalledAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastInCalledAddress.setDescription('X25 called address in BCD format of last inbound call.')
cdx6500TCOPStatAutoCallLastInCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastInCallingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastInCallingAddress.setDescription('X25 calling address in BCD format of last inbound call.')
cdx6500TCOPStatAutoCallLastInCallFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastInCallFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastInCallFacilities.setDescription('X25 facilities of inbound call.')
cdx6500TCOPStatAutoCallLastInCallCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastInCallCUD.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastInCallCUD.setDescription('X25 Call User Data of inbound call.')
cdx6500TCOPStatAutoCallLastOutCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastOutCalledAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastOutCalledAddress.setDescription('X25 called address in BCD format of last outbound call.')
cdx6500TCOPStatAutoCallLastOutCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastOutCallingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastOutCallingAddress.setDescription('X25 calling address in BCD format of last outbound call.')
cdx6500TCOPStatAutoCallLastOutCallFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastOutCallFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastOutCallFacilities.setDescription('X25 facilities of outbound call.')
cdx6500TCOPStatAutoCallLastOutCallCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 24, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastOutCallCUD.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TCOPStatAutoCallLastOutCallCUD.setDescription('X25 Call User Data of outbound call.')
mibBuilder.exportSymbols("TCOP-OPT-MIB", cdx6500TCOPStatAutoCallLastOutCalledAddress=cdx6500TCOPStatAutoCallLastOutCalledAddress, codex=codex, DisplayString=DisplayString, cdxProductSpecific=cdxProductSpecific, cdx6500=cdx6500, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500TCOPStatPortInChars=cdx6500TCOPStatPortInChars, cdx6500TCOPStatPortInCharsRate=cdx6500TCOPStatPortInCharsRate, cdx6500TCOPStatPortUnderrunErrs=cdx6500TCOPStatPortUnderrunErrs, cdx6500TCOPStatPortSubtype=cdx6500TCOPStatPortSubtype, cdx6500TCOPCfgAutoCallMnem=cdx6500TCOPCfgAutoCallMnem, cdx6500TCOPStatAutoCallLastInCallingAddress=cdx6500TCOPStatAutoCallLastInCallingAddress, cdx6500Statistics=cdx6500Statistics, cdx6500TCOPStatPortNumber=cdx6500TCOPStatPortNumber, cdx6500TCOPStatPortUtilOut=cdx6500TCOPStatPortUtilOut, cdx6500TCOPCfgCallControl=cdx6500TCOPCfgCallControl, cdx6500TCOPStatAutoCallLastOutCallFacilities=cdx6500TCOPStatAutoCallLastOutCallFacilities, cdx6500TCOPCfgAutoCallTO=cdx6500TCOPCfgAutoCallTO, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500TCOPStatPortParityErrs=cdx6500TCOPStatPortParityErrs, cdx6500TCOPStatPortOutChars=cdx6500TCOPStatPortOutChars, cdx6500TCOPStatPortState=cdx6500TCOPStatPortState, cdx6500TCOPCfgElectricalInterfaceType=cdx6500TCOPCfgElectricalInterfaceType, cdx6500TCOPStatAutoCallAttemptCount=cdx6500TCOPStatAutoCallAttemptCount, cdx6500TCOPStatPortBCCErrs=cdx6500TCOPStatPortBCCErrs, cdx6500TCOPCfgPortAddress=cdx6500TCOPCfgPortAddress, cdx6500TCOPStatPortMaxInQueueLength=cdx6500TCOPStatPortMaxInQueueLength, cdx6500TCOPStatAutoCallLastOutCallingAddress=cdx6500TCOPStatAutoCallLastOutCallingAddress, cdx6500TCOPCfgMaxAutoCallTries=cdx6500TCOPCfgMaxAutoCallTries, cdx6500PPCTTCOPPortEntry=cdx6500PPCTTCOPPortEntry, cdx6500TCOPStatPortOutCharsRate=cdx6500TCOPStatPortOutCharsRate, cdx6500TCOPStatAutoCallLastOutCallCUD=cdx6500TCOPStatAutoCallLastOutCallCUD, cdx6500TCOPStatPortPktQueueFlushCount=cdx6500TCOPStatPortPktQueueFlushCount, cdx6500TCOPCfgEnableBill=cdx6500TCOPCfgEnableBill, cdx6500TCOPCfgRestrictConn=cdx6500TCOPCfgRestrictConn, cdx6500TCOPCfgQueueOverflow=cdx6500TCOPCfgQueueOverflow, cdx6500TCOPCfgV24ElectricalInterfaceOption=cdx6500TCOPCfgV24ElectricalInterfaceOption, cdx6500PPCTTCOPPortTable=cdx6500PPCTTCOPPortTable, cdx6500TCOPStatAutoCallLastInCalledAddress=cdx6500TCOPStatAutoCallLastInCalledAddress, cdx6500TCOPStatPortUtilIn=cdx6500TCOPStatPortUtilIn, cdx6500TCOPStatPortOverrunErrs=cdx6500TCOPStatPortOverrunErrs, cdx6500TCOPStatPortOutMessages=cdx6500TCOPStatPortOutMessages, cdx6500TCOPCfgPortType=cdx6500TCOPCfgPortType, cdx6500TCOPCfgHighSpeedElectricalInterfaceOption=cdx6500TCOPCfgHighSpeedElectricalInterfaceOption, cdx6500PPSTTCOPPortTable=cdx6500PPSTTCOPPortTable, cdx6500TCOPCfgContention=cdx6500TCOPCfgContention, cdx6500TCOPCfgTXQueue=cdx6500TCOPCfgTXQueue, cdx6500TCOPStatPortOutPktsQueued=cdx6500TCOPStatPortOutPktsQueued, cdx6500TCOPCfgClockSpeed=cdx6500TCOPCfgClockSpeed, cdx6500Configuration=cdx6500Configuration, cdx6500TCOPStatPortInMessagesRate=cdx6500TCOPStatPortInMessagesRate, cdx6500TCOPStatAutoCallStatus=cdx6500TCOPStatAutoCallStatus, cdx6500TCOPCfgDataTransmission=cdx6500TCOPCfgDataTransmission, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500TCOPStatAutoCallLastClearCause=cdx6500TCOPStatAutoCallLastClearCause, cdx6500TCOPStatPortInMessages=cdx6500TCOPStatPortInMessages, cdx6500TCOPStatAutoCallNextAttempt=cdx6500TCOPStatAutoCallNextAttempt, cdx6500TCOPStatPortInPktsQueued=cdx6500TCOPStatPortInPktsQueued, cdx6500TCOPStatPortSpeed=cdx6500TCOPStatPortSpeed, cdx6500TCOPCfgCodeType=cdx6500TCOPCfgCodeType, cdx6500TCOPCfgReceiveByteCount=cdx6500TCOPCfgReceiveByteCount, cdx6500TCOPStatAutoCallLastInCallFacilities=cdx6500TCOPStatAutoCallLastInCallFacilities, cdx6500TCOPCfgRXQueue=cdx6500TCOPCfgRXQueue, cdx6500TCOPCfgProtocolID=cdx6500TCOPCfgProtocolID, cdx6500TCOPStatAutoCallLastInCallCUD=cdx6500TCOPStatAutoCallLastInCallCUD, Counter16=Counter16, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500TCOPCfgSubtype=cdx6500TCOPCfgSubtype, cdx6500TCOPStatPortType=cdx6500TCOPStatPortType, cdx6500Controls=cdx6500Controls, cdx6500TCOPCfgPortNumber=cdx6500TCOPCfgPortNumber, cdx6500TCOPCfgClockSource=cdx6500TCOPCfgClockSource, cdx6500TCOPStatPortStatus=cdx6500TCOPStatPortStatus, cdx6500TCOPStatAutoCallLastClearDiagnosis=cdx6500TCOPStatAutoCallLastClearDiagnosis, cdx6500TCOPStatPortMaxOutQueueLength=cdx6500TCOPStatPortMaxOutQueueLength, cdx6500PPSTTCOPPortEntry=cdx6500PPSTTCOPPortEntry, cdx6500TCOPStatPortOutMessagesRate=cdx6500TCOPStatPortOutMessagesRate)
