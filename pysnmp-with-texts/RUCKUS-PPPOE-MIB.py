#
# PySNMP MIB module RUCKUS-PPPOE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RUCKUS-PPPOE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:58:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ruckusCommonPPPOEModule, = mibBuilder.importSymbols("RUCKUS-ROOT-MIB", "ruckusCommonPPPOEModule")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, Gauge32, Counter32, ModuleIdentity, ObjectIdentity, TimeTicks, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, MibIdentifier, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Counter32", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "MibIdentifier", "Unsigned32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ruckusPPPOEMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25053, 1, 1, 8, 1))
if mibBuilder.loadTexts: ruckusPPPOEMIB.setLastUpdated('201010150800Z')
if mibBuilder.loadTexts: ruckusPPPOEMIB.setOrganization('Ruckus Wireless, Inc')
if mibBuilder.loadTexts: ruckusPPPOEMIB.setContactInfo('Ruckus Wireless Inc. Postal: 880 W Maude Ave Sunnyvale, CA 94085 USA EMail: support@ruckuswireless.com Phone: +1-650-265-4200.')
if mibBuilder.loadTexts: ruckusPPPOEMIB.setDescription('Ruckus PPPoE mib objects.')
ruckusPPPOEObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 8, 1, 1))
ruckusPPPOEInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 8, 1, 1, 1))
ruckusPPPOEEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 8, 1, 2))
ruckusPPPOEUserName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 8, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusPPPOEUserName.setStatus('current')
if mibBuilder.loadTexts: ruckusPPPOEUserName.setDescription('Specifies PPPoE user name. But it will not be effective unless you set apply(1) to ruckusPPPOEApply.')
ruckusPPPOEPassword = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 8, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusPPPOEPassword.setStatus('current')
if mibBuilder.loadTexts: ruckusPPPOEPassword.setDescription('Specifies PPPoE password. But it will not be effective unless you set apply(1) to ruckusPPPOEApply.')
ruckusPPPOEConnectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("notConnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusPPPOEConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusPPPOEConnectionStatus.setDescription('Specifies PPPoE connection status. Return up(1) if connection is up, down(2) if connection is down, disabled(3) if PPPoE is disabled.')
ruckusPPPOEConnection = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connect", 1), ("disConnect", 2), ("ok", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusPPPOEConnection.setStatus('current')
if mibBuilder.loadTexts: ruckusPPPOEConnection.setDescription('Set connect(1) to connect or re-connect and disConnect(2) to PPPoE server. On read, return enabled(3) if PPPoE is enabled, or disabled(4) if PPPoE is disabled.')
ruckusPPPOEIfindex = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 8, 1, 1, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusPPPOEIfindex.setStatus('current')
if mibBuilder.loadTexts: ruckusPPPOEIfindex.setDescription('Specifies the interface index, in the ifTable.')
ruckusPPPOEApply = MibScalar((1, 3, 6, 1, 4, 1, 25053, 1, 1, 8, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("apply", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusPPPOEApply.setStatus('current')
if mibBuilder.loadTexts: ruckusPPPOEApply.setDescription("Set apply(1) to apply the change of username and password for PPPoE . Firstly, set the mib nodes : ruckusPPPOEUserName and ruckusPPPOEPassword . Secondly, set apply(1) to enable this PPPOE's username and password . For read, only return 0.")
mibBuilder.exportSymbols("RUCKUS-PPPOE-MIB", ruckusPPPOEObjects=ruckusPPPOEObjects, ruckusPPPOEInfo=ruckusPPPOEInfo, ruckusPPPOEConnectionStatus=ruckusPPPOEConnectionStatus, ruckusPPPOEEvents=ruckusPPPOEEvents, ruckusPPPOEUserName=ruckusPPPOEUserName, PYSNMP_MODULE_ID=ruckusPPPOEMIB, ruckusPPPOEIfindex=ruckusPPPOEIfindex, ruckusPPPOEPassword=ruckusPPPOEPassword, ruckusPPPOEApply=ruckusPPPOEApply, ruckusPPPOEMIB=ruckusPPPOEMIB, ruckusPPPOEConnection=ruckusPPPOEConnection)
