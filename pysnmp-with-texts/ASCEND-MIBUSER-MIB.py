#
# PySNMP MIB module ASCEND-MIBUSER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBUSER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:28:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Gauge32, Counter32, MibIdentifier, Integer32, IpAddress, NotificationType, Bits, Counter64, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Gauge32", "Counter32", "MibIdentifier", "Integer32", "IpAddress", "NotificationType", "Bits", "Counter64", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

mibuserProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 134))
mibuserProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 134, 1), )
if mibBuilder.loadTexts: mibuserProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibuserProfileTable.setDescription('A list of mibuserProfile profile entries.')
mibuserProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1), ).setIndexNames((0, "ASCEND-MIBUSER-MIB", "userProfile-Name"))
if mibBuilder.loadTexts: mibuserProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibuserProfileEntry.setDescription('A mibuserProfile entry containing objects that maps to the parameters of mibuserProfile profile.')
userProfile_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 1), DisplayString()).setLabel("userProfile-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: userProfile_Name.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_Name.setDescription('The name of the host that is asking for validation.')
userProfile_Password = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 2), DisplayString()).setLabel("userProfile-Password").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_Password.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_Password.setDescription('The password of the host that is asking for validation.')
userProfile_ActiveEnabled = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("userProfile-ActiveEnabled").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_ActiveEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_ActiveEnabled.setDescription('TRUE if this user account is enabled for use.')
userProfile_AllowTermserv = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("userProfile-AllowTermserv").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_AllowTermserv.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_AllowTermserv.setDescription('TRUE if this user may use teminal server commands.')
userProfile_AllowSystem = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("userProfile-AllowSystem").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_AllowSystem.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_AllowSystem.setDescription('TRUE if this user may use system commands.')
userProfile_AllowDiagnostic = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("userProfile-AllowDiagnostic").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_AllowDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_AllowDiagnostic.setDescription('TRUE if this user may use diagnostic commands.')
userProfile_AllowUpdate = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("userProfile-AllowUpdate").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_AllowUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_AllowUpdate.setDescription('TRUE if this user may use update commands.')
userProfile_AllowPassword = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("userProfile-AllowPassword").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_AllowPassword.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_AllowPassword.setDescription('TRUE if this user may user may view password fields.')
userProfile_AllowCode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("userProfile-AllowCode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_AllowCode.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_AllowCode.setDescription('TRUE if this user may upload code the the unit.')
userProfile_IdleLogout = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 10), Integer32()).setLabel("userProfile-IdleLogout").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_IdleLogout.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_IdleLogout.setDescription('When non-zero, the user will be logged out after this many minutes with no keyboard activity.')
userProfile_Prompt = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 11), DisplayString()).setLabel("userProfile-Prompt").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_Prompt.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_Prompt.setDescription("The prompt displayed to the user. The value '*' is substituted with the user's name.")
userProfile_DefaultStatus = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("userProfile-DefaultStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_DefaultStatus.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_DefaultStatus.setDescription('When TRUE, the status screen is displayed by default.')
userProfile_TopStatus = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("generalInfo", 1), ("logWindow", 2), ("lineStatus", 3), ("atmvccStatus", 4)))).setLabel("userProfile-TopStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_TopStatus.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_TopStatus.setDescription('The default content of the upper configurable status window.')
userProfile_BottomStatus = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("generalInfo", 1), ("logWindow", 2), ("lineStatus", 3), ("atmvccStatus", 4)))).setLabel("userProfile-BottomStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_BottomStatus.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_BottomStatus.setDescription('The default content of the lower configurable status window.')
userProfile_LeftStatus = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sessionList", 1), ("connectionList", 2), ("callstatsList", 3)))).setLabel("userProfile-LeftStatus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_LeftStatus.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_LeftStatus.setDescription('The default content of the left configurable status window.')
userProfile_ScreenWidth = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 16), Integer32()).setLabel("userProfile-ScreenWidth").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_ScreenWidth.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_ScreenWidth.setDescription("The total width of the user's terminal window (default = 80 chars).")
userProfile_ScreenLength = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 17), Integer32()).setLabel("userProfile-ScreenLength").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_ScreenLength.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_ScreenLength.setDescription("The total height of the user's terminal window (default = 24 lines).")
userProfile_StatusLength = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 18), Integer32()).setLabel("userProfile-StatusLength").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_StatusLength.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_StatusLength.setDescription('The number of lines of screen-length used by status (default = 18 lines, counting dividers).')
userProfile_UseScrollRegions = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("userProfile-UseScrollRegions").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_UseScrollRegions.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_UseScrollRegions.setDescription('If TRUE, VT100 scroll region commands will be used to reduce screen redraws when the status screen is being displayed.')
userProfile_LogDisplayLevel = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("emergency", 2), ("alert", 3), ("critical", 4), ("error", 5), ("warning", 6), ("notice", 7), ("info", 8), ("debug", 9)))).setLabel("userProfile-LogDisplayLevel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_LogDisplayLevel.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_LogDisplayLevel.setDescription('Determines the level of log message to display immediately to the user.')
userProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 134, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("userProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: userProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: userProfile_Action_o.setDescription('')
mibBuilder.exportSymbols("ASCEND-MIBUSER-MIB", userProfile_ActiveEnabled=userProfile_ActiveEnabled, userProfile_LogDisplayLevel=userProfile_LogDisplayLevel, userProfile_StatusLength=userProfile_StatusLength, userProfile_BottomStatus=userProfile_BottomStatus, userProfile_Action_o=userProfile_Action_o, mibuserProfile=mibuserProfile, userProfile_AllowTermserv=userProfile_AllowTermserv, userProfile_Name=userProfile_Name, userProfile_AllowDiagnostic=userProfile_AllowDiagnostic, userProfile_AllowUpdate=userProfile_AllowUpdate, mibuserProfileEntry=mibuserProfileEntry, userProfile_ScreenWidth=userProfile_ScreenWidth, userProfile_UseScrollRegions=userProfile_UseScrollRegions, userProfile_Password=userProfile_Password, userProfile_AllowPassword=userProfile_AllowPassword, DisplayString=DisplayString, userProfile_DefaultStatus=userProfile_DefaultStatus, userProfile_LeftStatus=userProfile_LeftStatus, userProfile_AllowSystem=userProfile_AllowSystem, userProfile_AllowCode=userProfile_AllowCode, userProfile_IdleLogout=userProfile_IdleLogout, userProfile_ScreenLength=userProfile_ScreenLength, userProfile_Prompt=userProfile_Prompt, mibuserProfileTable=mibuserProfileTable, userProfile_TopStatus=userProfile_TopStatus)
