#
# PySNMP MIB module NNC-ATM-STATISTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NNC-ATM-STATISTICS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:22:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
atmVclVci, atmVclVpi, atmVplVpi = mibBuilder.importSymbols("ATM-MIB", "atmVclVci", "atmVclVpi", "atmVplVpi")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NncExtRelIntvlNumberType, NncExtIntvlStateType, NncExtAbsIntvlNumberType = mibBuilder.importSymbols("NNC-INTERVAL-STATISTICS-TC-MIB", "NncExtRelIntvlNumberType", "NncExtIntvlStateType", "NncExtAbsIntvlNumberType")
NncExtCounter64, nncExtensions = mibBuilder.importSymbols("NNCGNI0001-SMI", "NncExtCounter64", "nncExtensions")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, Unsigned32, Counter32, Bits, NotificationType, IpAddress, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Counter64, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "Counter32", "Bits", "NotificationType", "IpAddress", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Counter64", "Gauge32", "Integer32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
nncAtmStatistics = ModuleIdentity((1, 3, 6, 1, 4, 1, 123, 3, 29))
if mibBuilder.loadTexts: nncAtmStatistics.setLastUpdated('9807210330Z')
if mibBuilder.loadTexts: nncAtmStatistics.setOrganization('Newbridge Networks Corporation')
if mibBuilder.loadTexts: nncAtmStatistics.setContactInfo('Newbridge Networks Corporation Postal: 600 March Road Kanata, Ontario Canada K2K 2E6 Phone: +1 613 591 3600 Fax: +1 613 591 3680')
if mibBuilder.loadTexts: nncAtmStatistics.setDescription(" This module contains definitions for performance monitoring of the ATM layer and it's circuits. This MIB module contains the following tables: ATM VPL 15 Minute Current Table ATM VPL 15 Minute Interval Table ATM VPL 1 Hour Current Table ATM VPL 1 Hour Interval Table ATM VPL Stat Table ATM VPL Stat Counter Table ATM VCL 15 Minute Current Table ATM VCL 15 Minute Interval Table ATM VCL 1 Hour Current Table ATM VCL 1 Hour Interval Table ATM VCL Stat Table ATM VCL Stat Counter Table nncDepthOfHistoricalStrata These tables are heavily influenced by the definition of VPL/VCL described in rfc1695, and by the statistic table definitions described for Sonet in rfc1595. The number of intervals supported is dependent upon resource availibility on any given product, but should nominally be 32. To avoid building in massive amounts of storage, some products may adopt a bulk collection scheme. Intervals: Statistics on the performance of VPL/VCLs are collected over a historical stratum of up to a maximum of M intervals. The value of M is a function of a product's storage capability. The intervals can be either 15 minutes or 1 hour and are aligned to the quarter or one hour, respectively, of a wall clock. The current interval spans back to the last 15 minute or 1 hour tick on the wall clock. Continuing along the timeline from that point is the most recently completed interval and has an index of 1. The previous interval has an index of 2 and so on. Note that the oldest interval may be incomplete since the statistic collection may have been enabled offset to the quarter or one hour tick. t 0 -1i -2i -3i ===========|===========|===========|===========|=========== current N = 1 N = 2 N = 3 N = 4 ... N = M interval Counters: The following is understood for each counter in this MIB: - OAM cells are included in counts - idle and unassigned cells are not counted - valid cells are those that have passed HEC and have assigned VPI/VCI - admitted cells have a connection This module also contains definitions for performance monitoring of Virtual Path Aggregation (VPA) - also known as VCC to VPC Traffic Aggregation - and implemented as Shaped Trunk Group. Only egress VPA statistics are provided. The following tables have been added : ATM VPA Short (15 minutes) Current Table ATM VPA Short (15 Minutes) Interval Table ATM VPA Long (1 Hour) Current Table ATM VPA Long (1 Hour) Interval Table Intervals: two 15-minute intervals are provided : current and previous two 1-hour intervals are provided : current and previous. ")
nncAtmStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 29, 1))
nncAtmStatisticsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 29, 2))
nncAtmStatisticsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 29, 3))
nncAtmStatisticsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 29, 4))
nncVpl15MinCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 1), )
if mibBuilder.loadTexts: nncVpl15MinCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinCurrentTable.setDescription('The nncVpl15MinCurrentTable contains objects for monitoring the performance of a VPL during the current 15 minute interval.')
nncVpl15MinCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: nncVpl15MinCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinCurrentEntry.setDescription('An entry in the 15 minute current statistics table. Each conceptual row contains current statistics for a particular VPL.')
nncVpl15MinCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 1, 1, 1), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change. ')
nncVpl15MinCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 1, 1, 2), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncVpl15MinCurrentClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 1, 1, 3), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinCurrentClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinCurrentClp0And1InCells.setDescription('Number of valid cells admitted at ingress on the VPL with CLP=0 or 1, including those with header errors corrected. This counter is formed after the UPC function.')
nncVpl15MinCurrentClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 1, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinCurrentClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinCurrentClp0InCells.setDescription('Number of valid cells admitted at ingress on the VPL with CLP=0, including those with header errors corrected.')
nncVpl15MinCurrentDiscardClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 1, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinCurrentDiscardClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinCurrentDiscardClp0And1InCells.setDescription('Number of valid cells with CLP=1 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVpl15MinCurrentDiscardClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 1, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinCurrentDiscardClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinCurrentDiscardClp0InCells.setDescription('Number of valid cells with CLP=0 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVpl15MinCurrentTaggedInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 1, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinCurrentTaggedInCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinCurrentTaggedInCells.setDescription('Number of valid cells admitted at ingress with CLP=0, with CLP set to 1 by ingress traffic policing, including those with header errors corrected.')
nncVpl15MinCurrentClp0And1OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 1, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinCurrentClp0And1OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinCurrentClp0And1OutCells.setDescription('Number of valid cells transmitted at egress on the VPL with CLP=0 or 1.')
nncVpl15MinCurrentClp0OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 1, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinCurrentClp0OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinCurrentClp0OutCells.setDescription('Number of valid cells transmitted at egress on the VPL with CLP=0.')
nncVpl15MinIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 2), )
if mibBuilder.loadTexts: nncVpl15MinIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinIntervalTable.setDescription('The nncVpl15MinIntervalTable contains objects for monitoring the performance of a virtual path link over a historical stratum of M 15 minute intervals. ')
nncVpl15MinIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "NNC-ATM-STATISTICS-MIB", "nncVpl15MinIntervalNumber"))
if mibBuilder.loadTexts: nncVpl15MinIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinIntervalEntry.setDescription('An entry in the 15 minute interval statistics table. Each conceptual row contains statistics for a particular VPL and interval.')
nncVpl15MinIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 2, 1, 1), NncExtRelIntvlNumberType())
if mibBuilder.loadTexts: nncVpl15MinIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinIntervalNumber.setDescription('The interval number (N) of the statistics in this row.')
nncVpl15MinIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 2, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change. ')
nncVpl15MinIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 2, 1, 3), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncVpl15MinIntervalClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 2, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinIntervalClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinIntervalClp0And1InCells.setDescription('Number of valid cells admitted at ingress on the VPL with CLP=0 or 1, including those with header errors corrected. This counter is formed after the UPC function.')
nncVpl15MinIntervalClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 2, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinIntervalClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinIntervalClp0InCells.setDescription('Number of valid cells admitted at ingress on the VPL with CLP=0, including those with header errors corrected.')
nncVpl15MinIntervalDiscardClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 2, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinIntervalDiscardClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinIntervalDiscardClp0And1InCells.setDescription('Number of valid cells with CLP=1 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVpl15MinIntervalDiscardClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 2, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinIntervalDiscardClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinIntervalDiscardClp0InCells.setDescription('Number of valid cells with CLP=0 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVpl15MinIntervalTaggedInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 2, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinIntervalTaggedInCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinIntervalTaggedInCells.setDescription('Number of valid cells admitted at ingress with CLP=0, with CLP set to 1 by ingress traffic policing, including those with header errors corrected.')
nncVpl15MinIntervalClp0And1OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 2, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinIntervalClp0And1OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinIntervalClp0And1OutCells.setDescription('Number of valid cells transmitted at egress on the VPL with CLP=0 or 1.')
nncVpl15MinIntervalClp0OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 2, 1, 10), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl15MinIntervalClp0OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinIntervalClp0OutCells.setDescription('Number of valid cells transmitted at egress on the VPL with CLP=0.')
nncVpl1HourCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 3), )
if mibBuilder.loadTexts: nncVpl1HourCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourCurrentTable.setDescription('The nncVpl1HourCurrentTable contains objects for monitoring the performance of a VPL during the current 1 hour interval. ')
nncVpl1HourCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: nncVpl1HourCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourCurrentEntry.setDescription('An entry in the 1 hour current statistics table. Each conceptual row contains current statistics for a particular VPL. By default, 1 Hour statistics are not gathered. In order to enable gathering of these statistics, a row must be created. The semantics of nncVpl1HourCurrentRowStatus is the same as the definition of RowStatus in rfc1443 with the following constraints. 1. Creation is done in one step, that is, by setting the nncVpl1HourCurrentRowStatus column to createAndGo. Setting the column to createAndWait will return wrongValue. 2. The VPI specified in the instance must be an endpoint that is currently used in a VPL otherwise the agent will return return inconsistentValue and no row is created. 3. If the maximum number of rows (an agent limitation) has been reached, resourceUnavailable is returned and no row is created. 4. Creation of a current row will also enable the corresponding interval table whose rows will be created when intervals are completed. 5. Statistics collection is disabled by setting the column to destroy. This will also remove all corresponding rows in the interval table. ')
nncVpl1HourCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 3, 1, 1), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change. ')
nncVpl1HourCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 3, 1, 2), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncVpl1HourCurrentClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 3, 1, 3), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourCurrentClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourCurrentClp0And1InCells.setDescription('Number of valid cells admitted at ingress on the VPL with CLP=0 or 1, including those with header errors corrected. This counter is formed after the UPC function.')
nncVpl1HourCurrentClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 3, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourCurrentClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourCurrentClp0InCells.setDescription('Number of valid cells admitted at ingress on the VPL with CLP=0, including those with header errors corrected.')
nncVpl1HourCurrentDiscardClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 3, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourCurrentDiscardClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourCurrentDiscardClp0And1InCells.setDescription('Number of valid cells with CLP=1 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVpl1HourCurrentDiscardClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 3, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourCurrentDiscardClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourCurrentDiscardClp0InCells.setDescription('Number of valid cells with CLP=0 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVpl1HourCurrentTaggedInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 3, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourCurrentTaggedInCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourCurrentTaggedInCells.setDescription('Number of valid cells admitted at ingress with CLP=0, with CLP set to 1 by ingress traffic policing, including those with header errors corrected.')
nncVpl1HourCurrentClp0And1OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 3, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourCurrentClp0And1OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourCurrentClp0And1OutCells.setDescription('Number of valid cells transmitted at egress on the VPL with CLP=0 or 1.')
nncVpl1HourCurrentClp0OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 3, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourCurrentClp0OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourCurrentClp0OutCells.setDescription('Number of valid cells transmitted at egress on the VPL with CLP=0.')
nncVpl1HourCurrentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 3, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nncVpl1HourCurrentRowStatus.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourCurrentRowStatus.setDescription('This object is used to create and delete rows in this table. The following sets are invalid: createAndWait, active, and notInService. Such sets will return wrongValue. ')
nncVpl1HourIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 4), )
if mibBuilder.loadTexts: nncVpl1HourIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourIntervalTable.setDescription('The nncVpl1HourIntervalTable contains objects for monitoring the performance of a virtual path link over a historical stratum of M 1 hour intervals. ')
nncVpl1HourIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "NNC-ATM-STATISTICS-MIB", "nncVpl1HourIntervalNumber"))
if mibBuilder.loadTexts: nncVpl1HourIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourIntervalEntry.setDescription('An entry in the 1 hour interval statistics table. Each conceptual row contains statistics for a particular VPL and interval. These rows are automatically created if there is a corresponding entry in the 1 hour current table. ')
nncVpl1HourIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 4, 1, 1), NncExtRelIntvlNumberType())
if mibBuilder.loadTexts: nncVpl1HourIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourIntervalNumber.setDescription('The interval number (N) of the statistics in this row.')
nncVpl1HourIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 4, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change. ')
nncVpl1HourIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 4, 1, 3), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncVpl1HourIntervalClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 4, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourIntervalClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourIntervalClp0And1InCells.setDescription('Number of valid cells admitted at ingress on the VPL with CLP=0 or 1, including those with header errors corrected. This counter is formed after the UPC function.')
nncVpl1HourIntervalClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 4, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourIntervalClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourIntervalClp0InCells.setDescription('Number of valid cells admitted at ingress on the VPL with CLP=0, including those with header errors corrected.')
nncVpl1HourIntervalDiscardClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 4, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourIntervalDiscardClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourIntervalDiscardClp0And1InCells.setDescription('Number of valid cells with CLP=1 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVpl1HourIntervalDiscardClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 4, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourIntervalDiscardClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourIntervalDiscardClp0InCells.setDescription('Number of valid cells with CLP=0 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVpl1HourIntervalTaggedInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 4, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourIntervalTaggedInCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourIntervalTaggedInCells.setDescription('Number of valid cells admitted at ingress with CLP=0, with CLP set to 1 by ingress traffic policing, including those with header errors corrected.')
nncVpl1HourIntervalClp0And1OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 4, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourIntervalClp0And1OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourIntervalClp0And1OutCells.setDescription('Number of valid cells transmitted at egress on the VPL with CLP=0 or 1.')
nncVpl1HourIntervalClp0OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 4, 1, 10), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpl1HourIntervalClp0OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourIntervalClp0OutCells.setDescription('Number of valid cells transmitted at egress on the VPL with CLP=0.')
nncVplStatTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 10), )
if mibBuilder.loadTexts: nncVplStatTable.setStatus('current')
if mibBuilder.loadTexts: nncVplStatTable.setDescription('The nncVplStatTable contains objects for monitoring the accumulated performance of a VPL since measurement started on the VPL.')
nncVplStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: nncVplStatEntry.setStatus('current')
if mibBuilder.loadTexts: nncVplStatEntry.setDescription('An entry in the Vpl Stat table. Each conceptual row contains accumulated statistics for a particular VPL.')
nncVplStatClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 10, 1, 1), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVplStatClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVplStatClp0And1InCells.setDescription('Number of valid cells admitted at ingress on the VPL with CLP=0 or 1, including those with header errors corrected. This counter is formed after the UPC function.')
nncVplStatClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 10, 1, 2), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVplStatClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVplStatClp0InCells.setDescription('Number of valid cells admitted at ingress on the VPL with CLP=0, including those with header errors corrected.')
nncVplStatDiscardClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 10, 1, 3), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVplStatDiscardClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVplStatDiscardClp0And1InCells.setDescription('Number of valid cells with CLP=1 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVplStatDiscardClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 10, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVplStatDiscardClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVplStatDiscardClp0InCells.setDescription('Number of valid cells with CLP=0 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVplStatTaggedInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 10, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVplStatTaggedInCells.setStatus('current')
if mibBuilder.loadTexts: nncVplStatTaggedInCells.setDescription('Number of valid cells admitted at ingress with CLP=0, with CLP set to 1 by ingress traffic policing, including those with header errors corrected.')
nncVplStatClp0And1OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 10, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVplStatClp0And1OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVplStatClp0And1OutCells.setDescription('Number of valid cells transmitted at egress on the VPL with CLP=0 or 1.')
nncVplStatClp0OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 10, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVplStatClp0OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVplStatClp0OutCells.setDescription('Number of valid cells transmitted at egress on the VPL with CLP=0.')
nncVcl15MinCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 5), )
if mibBuilder.loadTexts: nncVcl15MinCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinCurrentTable.setDescription('The nncVcl15MinCurrentTable contains objects for monitoring the performance of a VCL during the current 15 minute interval.')
nncVcl15MinCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: nncVcl15MinCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinCurrentEntry.setDescription('An entry in the 15 minute current statistics table. Each conceptual row contains current statistics for a particular VCL.')
nncVcl15MinCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 5, 1, 1), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change. ')
nncVcl15MinCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 5, 1, 2), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncVcl15MinCurrentClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 5, 1, 3), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinCurrentClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinCurrentClp0And1InCells.setDescription('Number of valid cells admitted at ingress on the VCL with CLP=0 or 1, including those with header errors corrected. This counter is formed after the UPC function.')
nncVcl15MinCurrentClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 5, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinCurrentClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinCurrentClp0InCells.setDescription('Number of valid cells admitted at ingress on the VCL with CLP=0, including those with header errors corrected.')
nncVcl15MinCurrentDiscardClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 5, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinCurrentDiscardClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinCurrentDiscardClp0And1InCells.setDescription('Number of valid cells with CLP=1 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVcl15MinCurrentDiscardClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 5, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinCurrentDiscardClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinCurrentDiscardClp0InCells.setDescription('Number of valid cells with CLP=0 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVcl15MinCurrentTaggedInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 5, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinCurrentTaggedInCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinCurrentTaggedInCells.setDescription('Number of valid cells admitted at ingress with CLP=0, with CLP set to 1 by ingress traffic policing, including those with header errors corrected.')
nncVcl15MinCurrentClp0And1OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 5, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinCurrentClp0And1OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinCurrentClp0And1OutCells.setDescription('Number of valid cells transmitted at egress on the VCL with CLP=0 or 1.')
nncVcl15MinCurrentClp0OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 5, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinCurrentClp0OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinCurrentClp0OutCells.setDescription('Number of valid cells transmitted at egress on the VCL with CLP=0.')
nncVcl15MinIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 6), )
if mibBuilder.loadTexts: nncVcl15MinIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinIntervalTable.setDescription('The nncVcl15MinIntervalTable contains objects for monitoring the performance of a virtual channel link over a historical stratum of M 15 minute intervals. ')
nncVcl15MinIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "NNC-ATM-STATISTICS-MIB", "nncVcl15MinIntervalNumber"))
if mibBuilder.loadTexts: nncVcl15MinIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinIntervalEntry.setDescription('An entry in the 15 minute interval statistics table. Each conceptual row contains statistics for a particular VCL and interval.')
nncVcl15MinIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 6, 1, 1), NncExtRelIntvlNumberType())
if mibBuilder.loadTexts: nncVcl15MinIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinIntervalNumber.setDescription('The interval number (N) of the statistics in this row.')
nncVcl15MinIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 6, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change. ')
nncVcl15MinIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 6, 1, 3), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncVcl15MinIntervalClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 6, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinIntervalClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinIntervalClp0And1InCells.setDescription('Number of valid cells admitted at ingress on the VCL with CLP=0 or 1, including those with header errors corrected. This counter is formed after the UPC function.')
nncVcl15MinIntervalClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 6, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinIntervalClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinIntervalClp0InCells.setDescription('Number of valid cells admitted at ingress on the VCL with CLP=0, including those with header errors corrected.')
nncVcl15MinIntervalDiscardClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 6, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinIntervalDiscardClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinIntervalDiscardClp0And1InCells.setDescription('Number of valid cells with CLP=1 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVcl15MinIntervalDiscardClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 6, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinIntervalDiscardClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinIntervalDiscardClp0InCells.setDescription('Number of valid cells with CLP=0 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVcl15MinIntervalTaggedInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 6, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinIntervalTaggedInCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinIntervalTaggedInCells.setDescription('Number of valid cells admitted at ingress with CLP=0, with CLP set to 1 by ingress traffic policing, including those with header errors corrected.')
nncVcl15MinIntervalClp0And1OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 6, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinIntervalClp0And1OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinIntervalClp0And1OutCells.setDescription('Number of valid cells transmitted at egress on the VCL with CLP=0 or 1.')
nncVcl15MinIntervalClp0OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 6, 1, 10), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl15MinIntervalClp0OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinIntervalClp0OutCells.setDescription('Number of valid cells transmitted at egress on the VCL with CLP=0.')
nncVcl1HourCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 7), )
if mibBuilder.loadTexts: nncVcl1HourCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourCurrentTable.setDescription('The nncVcl1HourCurrentTable contains objects for monitoring the performance of a VCL during the current 1 hour interval. ')
nncVcl1HourCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: nncVcl1HourCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourCurrentEntry.setDescription('An entry in the 1 hour current statistics table. Each conceptual row contains current statistics for a particular VCL. By default, 1 Hour statistics are not gathered. In order to enable gathering of these statistics, a row must be created. The semantics of nncVcl1HourCurrentRowStatus is the same as the definition of RowStatus in rfc1443 with the following constraints. 1. Creation is done in one step, that is, by setting the nncVcl1HourCurrentRowStatus column to createAndGo. Setting the column to createAndWait will return wrongValue. 2. The VCI specified in the instance must be an endpoint that is currently used in a VCL otherwise the agent will return return inconsistentValue and no row is created. 3. If the maximum number of rows (an agent limitation) has been reached, resourceUnavailable is returned and no row is created. 4. Creation of a current row will also enable the corresponding interval table whose rows will be created when intervals are completed. 5. Statistics collection is disabled by setting the column to destroy. This will also remove all corresponding rows in the interval table. ')
nncVcl1HourCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 7, 1, 1), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change. ')
nncVcl1HourCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 7, 1, 2), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncVcl1HourCurrentClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 7, 1, 3), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourCurrentClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourCurrentClp0And1InCells.setDescription('Number of valid cells admitted at ingress on the VCL with CLP=0 or 1, including those with header errors corrected. This counter is formed after the UPC function.')
nncVcl1HourCurrentClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 7, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourCurrentClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourCurrentClp0InCells.setDescription('Number of valid cells admitted at ingress on the VCL with CLP=0, including those with header errors corrected.')
nncVcl1HourCurrentDiscardClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 7, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourCurrentDiscardClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourCurrentDiscardClp0And1InCells.setDescription('Number of valid cells with CLP=1 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVcl1HourCurrentDiscardClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 7, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourCurrentDiscardClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourCurrentDiscardClp0InCells.setDescription('Number of valid cells with CLP=0 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVcl1HourCurrentTaggedInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 7, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourCurrentTaggedInCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourCurrentTaggedInCells.setDescription('Number of valid cells admitted at ingress with CLP=0, with CLP set to 1 by ingress traffic policing, including those with header errors corrected.')
nncVcl1HourCurrentClp0And1OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 7, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourCurrentClp0And1OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourCurrentClp0And1OutCells.setDescription('Number of valid cells transmitted at egress on the VCL with CLP=0 or 1.')
nncVcl1HourCurrentClp0OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 7, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourCurrentClp0OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourCurrentClp0OutCells.setDescription('Number of valid cells transmitted at egress on the VCL with CLP=0.')
nncVcl1HourCurrentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 7, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nncVcl1HourCurrentRowStatus.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourCurrentRowStatus.setDescription('This object is used to create and delete rows in this table. The following sets are invalid: createAndWait, active, and notInService. Such sets will return wrongValue. ')
nncVcl1HourIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 8), )
if mibBuilder.loadTexts: nncVcl1HourIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourIntervalTable.setDescription('The nncVcl1HourIntervalTable contains objects for monitoring the performance of a virtual Channel link over a historical stratum of M 1 hour intervals. ')
nncVcl1HourIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "NNC-ATM-STATISTICS-MIB", "nncVcl1HourIntervalNumber"))
if mibBuilder.loadTexts: nncVcl1HourIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourIntervalEntry.setDescription('An entry in the 1 hour interval statistics table. Each conceptual row contains statistics for a particular VCL and interval. These rows are automatically created if there is a corresponding entry in the 1 hour current table. ')
nncVcl1HourIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 8, 1, 1), NncExtRelIntvlNumberType())
if mibBuilder.loadTexts: nncVcl1HourIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourIntervalNumber.setDescription('The interval number (N) of the statistics in this row.')
nncVcl1HourIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 8, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourIntervalState.setDescription('The state of the interval represented by this row. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change. ')
nncVcl1HourIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 8, 1, 3), NncExtAbsIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncVcl1HourIntervalClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 8, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourIntervalClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourIntervalClp0And1InCells.setDescription('Number of valid cells admitted at ingress on the VCL with CLP=0 or 1, including those with header errors corrected. This counter is formed after the UPC function.')
nncVcl1HourIntervalClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 8, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourIntervalClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourIntervalClp0InCells.setDescription('Number of valid cells admitted at ingress on the VCL with CLP=0, including those with header errors corrected.')
nncVcl1HourIntervalDiscardClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 8, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourIntervalDiscardClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourIntervalDiscardClp0And1InCells.setDescription('Number of valid cells with CLP=1 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVcl1HourIntervalDiscardClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 8, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourIntervalDiscardClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourIntervalDiscardClp0InCells.setDescription('Number of valid cells with CLP=0 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVcl1HourIntervalTaggedInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 8, 1, 8), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourIntervalTaggedInCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourIntervalTaggedInCells.setDescription('Number of valid cells admitted at ingress with CLP=0, with CLP set to 1 by ingress traffic policing, including those with header errors corrected.')
nncVcl1HourIntervalClp0And1OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 8, 1, 9), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourIntervalClp0And1OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourIntervalClp0And1OutCells.setDescription('Number of valid cells transmitted at egress on the VCL with CLP=0 or 1.')
nncVcl1HourIntervalClp0OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 8, 1, 10), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVcl1HourIntervalClp0OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourIntervalClp0OutCells.setDescription('Number of valid cells transmitted at egress on the VCL with CLP=0.')
nncVclStatTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 11), )
if mibBuilder.loadTexts: nncVclStatTable.setStatus('current')
if mibBuilder.loadTexts: nncVclStatTable.setDescription('The nncVclStatTable contains objects for monitoring the accumulated performance of a VCL since measurement started on the VCL.')
nncVclStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: nncVclStatEntry.setStatus('current')
if mibBuilder.loadTexts: nncVclStatEntry.setDescription('An entry in the Stat table. Each conceptual row contains accumulated statistics for a particular VCL.')
nncVclStatClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 11, 1, 1), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVclStatClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVclStatClp0And1InCells.setDescription('Number of valid cells admitted at ingress on the VCL with CLP=0 or 1, including those with header errors corrected. This counter is formed after the UPC function.')
nncVclStatClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 11, 1, 2), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVclStatClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVclStatClp0InCells.setDescription('Number of valid cells admitted at ingress on the VCL with CLP=0, including those with header errors corrected.')
nncVclStatDiscardClp0And1InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 11, 1, 3), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVclStatDiscardClp0And1InCells.setStatus('current')
if mibBuilder.loadTexts: nncVclStatDiscardClp0And1InCells.setDescription('Number of valid cells with CLP=1 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVclStatDiscardClp0InCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 11, 1, 4), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVclStatDiscardClp0InCells.setStatus('current')
if mibBuilder.loadTexts: nncVclStatDiscardClp0InCells.setDescription('Number of valid cells with CLP=0 discarded at ingress by ingress traffic policing, including those with header errors corrected.')
nncVclStatTaggedInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 11, 1, 5), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVclStatTaggedInCells.setStatus('current')
if mibBuilder.loadTexts: nncVclStatTaggedInCells.setDescription('Number of valid cells admitted at ingress with CLP=0, with CLP set to 1 by ingress traffic policing, including those with header errors corrected.')
nncVclStatClp0And1OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 11, 1, 6), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVclStatClp0And1OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVclStatClp0And1OutCells.setDescription('Number of valid cells transmitted at egress on the VPL with CLP=0 or 1.')
nncVclStatClp0OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 11, 1, 7), NncExtCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVclStatClp0OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVclStatClp0OutCells.setDescription('Number of valid cells transmitted at egress on the VPL with CLP=0.')
nncAtmVplStatCounterTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 12), )
if mibBuilder.loadTexts: nncAtmVplStatCounterTable.setStatus('current')
if mibBuilder.loadTexts: nncAtmVplStatCounterTable.setDescription(' This table supplies the maximum interval numbers for valid data for Atm Vpl End Points in the nncVpl15MinIntervalTable and nncVpl1HourIntervaltable.')
nncAtmVplStatCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "NNC-ATM-STATISTICS-MIB", "nncAtmVplStatCounterIndex"))
if mibBuilder.loadTexts: nncAtmVplStatCounterEntry.setStatus('current')
if mibBuilder.loadTexts: nncAtmVplStatCounterEntry.setDescription(' An Entry in nncAtmVplStatCounterTable. ')
nncAtmVplStatCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hourly", 1), ("daily", 2), ("monthly", 3), ("interval", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmVplStatCounterIndex.setStatus('current')
if mibBuilder.loadTexts: nncAtmVplStatCounterIndex.setDescription(' This index specifies the type of interval available. 1 = hourly 2 = daily (not used) 3 = monthly (not used) 4 = 15 minute interval stats.')
nncAtmVplStatCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmVplStatCounterValue.setStatus('current')
if mibBuilder.loadTexts: nncAtmVplStatCounterValue.setDescription(' This values represents the maximum interval number for valid data for Atm Vpl End Points. This number is based on the type of interval being reported.')
nncAtmVclStatCounterTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 13), )
if mibBuilder.loadTexts: nncAtmVclStatCounterTable.setStatus('current')
if mibBuilder.loadTexts: nncAtmVclStatCounterTable.setDescription(' This table supplies the maximum interval numbers for valid data for Atm Vcl End Points in the nncVcl15MinIntervalTable and nncVcl1HourIntervaltable.')
nncAtmVclStatCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "NNC-ATM-STATISTICS-MIB", "nncAtmVclStatCounterIndex"))
if mibBuilder.loadTexts: nncAtmVclStatCounterEntry.setStatus('current')
if mibBuilder.loadTexts: nncAtmVclStatCounterEntry.setDescription(' An Entry in nncAtmVclStatCounterTable. ')
nncAtmVclStatCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hourly", 1), ("daily", 2), ("monthly", 3), ("interval", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmVclStatCounterIndex.setStatus('current')
if mibBuilder.loadTexts: nncAtmVclStatCounterIndex.setDescription(' This index specifies the type of interval available. 1 = hourly 2 = daily (not used) 3 = monthly (not used) 4 = 15 minute interval stats.')
nncAtmVclStatCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAtmVclStatCounterValue.setStatus('current')
if mibBuilder.loadTexts: nncAtmVclStatCounterValue.setDescription(' This values represents the maximum interval number for valid data for Atm Vcl End Points. This number is based on the type of interval being reported.')
nncVpa15MinCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 15), )
if mibBuilder.loadTexts: nncVpa15MinCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinCurrentTable.setDescription('The nncVpa15MinCurrentTable contains objects for monitoring the performance of a VPA during the current 15 minute interval.')
nncVpa15MinCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 15, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: nncVpa15MinCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinCurrentEntry.setDescription('An entry in the 15 minute current statistics table. Each conceptual row contains current statistics for a particular VPA')
nncVpa15MinCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 15, 1, 1), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa15MinCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change. ')
nncVpa15MinCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa15MinCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncVpa15MinCurrentClp0And1OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 15, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa15MinCurrentClp0And1OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinCurrentClp0And1OutCells.setDescription('Total CLP0 and CLP1 cells transmitted on all constituent VCs of a particular VPA')
nncVpa15MinCurrentDiscardClp0And1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 15, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa15MinCurrentDiscardClp0And1Cells.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinCurrentDiscardClp0And1Cells.setDescription('Total CLP0 and CLP1 cells discarded due to congestion on all constituent VCs of a particular VPA')
nncVpa15MinCurrentDiscardClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 15, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa15MinCurrentDiscardClp0Cells.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinCurrentDiscardClp0Cells.setDescription('Total CLP0 cells discarded due to congestion on all constituent VCs of a particular VPA')
nncVpa15MinIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 16), )
if mibBuilder.loadTexts: nncVpa15MinIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinIntervalTable.setDescription('The nncVpa15MinIntervalTable contains objects for monitoring the performance of a VPA during the 15 minute interval.')
nncVpa15MinIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "NNC-ATM-STATISTICS-MIB", "nncVpa15MinIntervalNumber"))
if mibBuilder.loadTexts: nncVpa15MinIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinIntervalEntry.setDescription('An entry in the 15 minute current statistics table. Each conceptual row contains current statistics for a particular VPA')
nncVpa15MinIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 16, 1, 1), Integer32())
if mibBuilder.loadTexts: nncVpa15MinIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinIntervalNumber.setDescription('The interval number (N) of the statistics in this row.')
nncVpa15MinIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 16, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa15MinIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinIntervalState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change. ')
nncVpa15MinIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa15MinIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncVpa15MinIntervalClp0And1OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 16, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa15MinIntervalClp0And1OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinIntervalClp0And1OutCells.setDescription('Total CLP0 and CLP1 cells transmitted on all constituent VCs of a particular VPA')
nncVpa15MinIntervalDiscardClp0And1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 16, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa15MinIntervalDiscardClp0And1Cells.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinIntervalDiscardClp0And1Cells.setDescription('Total CLP0 and CLP1 cells discarded due to congestion on all constituent VCs of a particular VPA')
nncVpa15MinIntervalDiscardClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 16, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa15MinIntervalDiscardClp0Cells.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinIntervalDiscardClp0Cells.setDescription('Total CLP0 cells discarded due to congestion on all constituent VCs of a particular VPA')
nncVpa1HourCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 17), )
if mibBuilder.loadTexts: nncVpa1HourCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourCurrentTable.setDescription('The nncVpa1HourCurrentTable contains objects for monitoring the performance of a VPA during the current 1 hour interval.')
nncVpa1HourCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: nncVpa1HourCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourCurrentEntry.setDescription('An entry in the 1 hour current statistics table. Each conceptual row contains current statistics for a particular VPA')
nncVpa1HourCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 17, 1, 1), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa1HourCurrentState.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourCurrentState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change. ')
nncVpa1HourCurrentAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa1HourCurrentAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourCurrentAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncVpa1HourCurrentClp0And1OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 17, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa1HourCurrentClp0And1OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourCurrentClp0And1OutCells.setDescription('Total CLP0 and CLP1 cells transmitted on all constituent VCs of a particular VPA')
nncVpa1HourCurrentDiscardClp0And1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 17, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa1HourCurrentDiscardClp0And1Cells.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourCurrentDiscardClp0And1Cells.setDescription('Total CLP0 and CLP1 cells discarded due to congestion on all constituent VCs of a particular VPA')
nncVpa1HourCurrentDiscardClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 17, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa1HourCurrentDiscardClp0Cells.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourCurrentDiscardClp0Cells.setDescription('Total CLP0 cells discarded due to congestion on all constituent VCs of a particular VPA')
nncVpa1HourIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 18), )
if mibBuilder.loadTexts: nncVpa1HourIntervalTable.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourIntervalTable.setDescription('The nncVpa1HourIntervalTable contains objects for monitoring the performance of a VPA during the 1 hour interval.')
nncVpa1HourIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "NNC-ATM-STATISTICS-MIB", "nncVpa1HourIntervalNumber"))
if mibBuilder.loadTexts: nncVpa1HourIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourIntervalEntry.setDescription('An entry in the 1hour current statistics table. Each conceptual row contains current statistics for a particular VPA')
nncVpa1HourIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 18, 1, 1), Integer32())
if mibBuilder.loadTexts: nncVpa1HourIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourIntervalNumber.setDescription('The interval number (N) of the statistics in this row.')
nncVpa1HourIntervalState = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 18, 1, 2), NncExtIntvlStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa1HourIntervalState.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourIntervalState.setDescription('The state of the current interval. The object provides a status for those entries which have been reset by the user, or have been subject to a wall clock time change. ')
nncVpa1HourIntervalAbsoluteIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa1HourIntervalAbsoluteIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourIntervalAbsoluteIntervalNumber.setDescription('The absolute interval number of this interval.')
nncVpa1HourIntervalClp0And1OutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 18, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa1HourIntervalClp0And1OutCells.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourIntervalClp0And1OutCells.setDescription('Total CLP0 and CLP1 cells transmitted on all constituent VCs of a particular VPA')
nncVpa1HourIntervalDiscardClp0And1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 18, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa1HourIntervalDiscardClp0And1Cells.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourIntervalDiscardClp0And1Cells.setDescription('Total CLP0 and CLP1 cells discarded due to congestion on all constituent VCs of a particular VPA')
nncVpa1HourIntervalDiscardClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 18, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncVpa1HourIntervalDiscardClp0Cells.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourIntervalDiscardClp0Cells.setDescription('Total CLP0 cells discarded due to congestion on all constituent VCs of a particular VPA')
nncDepthOf15MinHistoricalStrata = MibScalar((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 9), NncExtRelIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncDepthOf15MinHistoricalStrata.setStatus('current')
if mibBuilder.loadTexts: nncDepthOf15MinHistoricalStrata.setDescription('The depth of the historical strata of 15min interval tables in this module.')
nncDepthOf1HourHistoricalStrata = MibScalar((1, 3, 6, 1, 4, 1, 123, 3, 29, 1, 14), NncExtRelIntvlNumberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncDepthOf1HourHistoricalStrata.setStatus('current')
if mibBuilder.loadTexts: nncDepthOf1HourHistoricalStrata.setDescription('The depth of the historical strata of 1 hour interval tables in this module.')
nncVpl15MinCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 1)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVpl15MinCurrentAbsoluteIntervalNumber"), ("NNC-ATM-STATISTICS-MIB", "nncVpl15MinCurrentClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl15MinCurrentClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl15MinCurrentDiscardClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl15MinCurrentDiscardClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl15MinCurrentTaggedInCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl15MinCurrentClp0And1OutCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl15MinCurrentClp0OutCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVpl15MinCurrentGroup = nncVpl15MinCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinCurrentGroup.setDescription('A collection of objects providing 15 Min current statistics for a VPI endpoint')
nncVpl15MinIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 2)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVpl15MinIntervalAbsoluteIntervalNumber"), ("NNC-ATM-STATISTICS-MIB", "nncVpl15MinIntervalClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl15MinIntervalClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl15MinIntervalDiscardClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl15MinIntervalDiscardClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl15MinIntervalTaggedInCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl15MinIntervalClp0And1OutCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl15MinIntervalClp0OutCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVpl15MinIntervalGroup = nncVpl15MinIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncVpl15MinIntervalGroup.setDescription('A collection of objects providing 15 Min interval statistics for a VPI endpoint')
nncVpl1HourCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 3)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVpl1HourCurrentAbsoluteIntervalNumber"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourCurrentClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourCurrentClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourCurrentDiscardClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourCurrentDiscardClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourCurrentTaggedInCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourCurrentClp0And1OutCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourCurrentClp0OutCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourCurrentRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVpl1HourCurrentGroup = nncVpl1HourCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourCurrentGroup.setDescription('A collection of objects providing 1 Hour current statistics for a VPI endpoint')
nncVpl1HourIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 4)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVpl1HourIntervalAbsoluteIntervalNumber"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourIntervalClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourIntervalClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourIntervalDiscardClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourIntervalDiscardClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourIntervalTaggedInCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourIntervalClp0And1OutCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourIntervalClp0OutCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVpl1HourIntervalGroup = nncVpl1HourIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncVpl1HourIntervalGroup.setDescription('A collection of objects providing 1 Hour interval statistics for a VPI endpoint')
nncVplStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 9)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVplStatClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVplStatClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVplStatDiscardClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVplStatDiscardClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVplStatTaggedInCells"), ("NNC-ATM-STATISTICS-MIB", "nncVplStatClp0And1OutCells"), ("NNC-ATM-STATISTICS-MIB", "nncVplStatClp0OutCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVplStatGroup = nncVplStatGroup.setStatus('current')
if mibBuilder.loadTexts: nncVplStatGroup.setDescription('A collection of objects providing cumulative statistics for a VPI endpoint')
nncVcl15MinCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 5)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVcl15MinCurrentState"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinCurrentAbsoluteIntervalNumber"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinCurrentClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinCurrentClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinCurrentDiscardClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinCurrentDiscardClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinCurrentTaggedInCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinCurrentClp0And1OutCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinCurrentClp0OutCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVcl15MinCurrentGroup = nncVcl15MinCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinCurrentGroup.setDescription('A collection of objects providing 15 Min current statistics for a VCI endpoint')
nncVcl15MinIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 6)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVcl15MinIntervalAbsoluteIntervalNumber"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinIntervalClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinIntervalClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinIntervalDiscardClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinIntervalDiscardClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinIntervalTaggedInCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinIntervalClp0And1OutCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinIntervalClp0OutCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVcl15MinIntervalGroup = nncVcl15MinIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncVcl15MinIntervalGroup.setDescription('A collection of objects providing 15 Min interval statistics for a VCI endpoint')
nncVcl1HourCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 7)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVcl1HourCurrentState"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourCurrentAbsoluteIntervalNumber"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourCurrentClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourCurrentClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourCurrentDiscardClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourCurrentDiscardClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourCurrentTaggedInCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourCurrentClp0And1OutCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourCurrentClp0OutCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourCurrentRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVcl1HourCurrentGroup = nncVcl1HourCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourCurrentGroup.setDescription('A collection of objects providing 1 Hour current statistics for a VCI endpoint')
nncVcl1HourIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 8)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVcl1HourIntervalAbsoluteIntervalNumber"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourIntervalClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourIntervalClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourIntervalDiscardClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourIntervalDiscardClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourIntervalTaggedInCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourIntervalClp0And1OutCells"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourIntervalClp0OutCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVcl1HourIntervalGroup = nncVcl1HourIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncVcl1HourIntervalGroup.setDescription('A collection of objects providing 1 Hour interval statistics for a VCI endpoint')
nncVclStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 10)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVclStatClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVclStatClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVclStatDiscardClp0And1InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVclStatDiscardClp0InCells"), ("NNC-ATM-STATISTICS-MIB", "nncVclStatTaggedInCells"), ("NNC-ATM-STATISTICS-MIB", "nncVclStatClp0And1OutCells"), ("NNC-ATM-STATISTICS-MIB", "nncVclStatClp0OutCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVclStatGroup = nncVclStatGroup.setStatus('current')
if mibBuilder.loadTexts: nncVclStatGroup.setDescription('A collection of objects providing cumulative statistics for a VCI endpoint')
nncVplIntervalStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 11)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVpl15MinCurrentState"), ("NNC-ATM-STATISTICS-MIB", "nncVpl15MinIntervalState"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourCurrentState"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourIntervalState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVplIntervalStateGroup = nncVplIntervalStateGroup.setStatus('current')
if mibBuilder.loadTexts: nncVplIntervalStateGroup.setDescription('A collection of objects providing the state of intervals in the VPL current and interval tables.')
nncVclIntervalStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 12)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVcl15MinCurrentState"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinIntervalState"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourCurrentState"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourIntervalState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVclIntervalStateGroup = nncVclIntervalStateGroup.setStatus('current')
if mibBuilder.loadTexts: nncVclIntervalStateGroup.setDescription('A collection of objects providing the state of intervals in the VCL current and interval tables.')
nncVplStatCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 13)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncAtmVplStatCounterIndex"), ("NNC-ATM-STATISTICS-MIB", "nncAtmVplStatCounterValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVplStatCounterGroup = nncVplStatCounterGroup.setStatus('current')
if mibBuilder.loadTexts: nncVplStatCounterGroup.setDescription('A collection of objects providing the count of valid intervals in the VPL interval tables.')
nncVclStatCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 14)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncAtmVclStatCounterIndex"), ("NNC-ATM-STATISTICS-MIB", "nncAtmVclStatCounterValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVclStatCounterGroup = nncVclStatCounterGroup.setStatus('current')
if mibBuilder.loadTexts: nncVclStatCounterGroup.setDescription('A collection of objects providing the count of valid intervals in the VCL interval tables.')
nncDepthOfHistoricalStrataGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 15)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncDepthOf15MinHistoricalStrata"), ("NNC-ATM-STATISTICS-MIB", "nncDepthOf1HourHistoricalStrata"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncDepthOfHistoricalStrataGroup = nncDepthOfHistoricalStrataGroup.setStatus('current')
if mibBuilder.loadTexts: nncDepthOfHistoricalStrataGroup.setDescription('A collection of objects providing the number of intervals supported in the interval tables.')
nncVpa15MinCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 16)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVpa15MinCurrentState"), ("NNC-ATM-STATISTICS-MIB", "nncVpa15MinCurrentAbsoluteIntervalNumber"), ("NNC-ATM-STATISTICS-MIB", "nncVpa15MinCurrentClp0And1OutCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpa15MinCurrentDiscardClp0And1Cells"), ("NNC-ATM-STATISTICS-MIB", "nncVpa15MinCurrentDiscardClp0Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVpa15MinCurrentGroup = nncVpa15MinCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinCurrentGroup.setDescription('A collection of objects providing 15 Min current statistics for a VP Aggregation')
nncVpa15MinIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 17)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVpa15MinIntervalNumber"), ("NNC-ATM-STATISTICS-MIB", "nncVpa15MinIntervalState"), ("NNC-ATM-STATISTICS-MIB", "nncVpa15MinIntervalAbsoluteIntervalNumber"), ("NNC-ATM-STATISTICS-MIB", "nncVpa15MinIntervalClp0And1OutCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpa15MinIntervalDiscardClp0And1Cells"), ("NNC-ATM-STATISTICS-MIB", "nncVpa15MinIntervalDiscardClp0Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVpa15MinIntervalGroup = nncVpa15MinIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncVpa15MinIntervalGroup.setDescription('A collection of objects providing 15 Min interval statistics for a VP Aggregation')
nncVpa1HourCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 18)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVpa1HourCurrentState"), ("NNC-ATM-STATISTICS-MIB", "nncVpa1HourCurrentAbsoluteIntervalNumber"), ("NNC-ATM-STATISTICS-MIB", "nncVpa1HourCurrentClp0And1OutCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpa1HourCurrentDiscardClp0And1Cells"), ("NNC-ATM-STATISTICS-MIB", "nncVpa1HourCurrentDiscardClp0Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVpa1HourCurrentGroup = nncVpa1HourCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourCurrentGroup.setDescription('A collection of objects providing 1 hour current statistics for a VP Aggregation')
nncVpa1HourIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 29, 3, 19)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVpa1HourIntervalNumber"), ("NNC-ATM-STATISTICS-MIB", "nncVpa1HourIntervalState"), ("NNC-ATM-STATISTICS-MIB", "nncVpa1HourIntervalAbsoluteIntervalNumber"), ("NNC-ATM-STATISTICS-MIB", "nncVpa1HourIntervalClp0And1OutCells"), ("NNC-ATM-STATISTICS-MIB", "nncVpa1HourIntervalDiscardClp0And1Cells"), ("NNC-ATM-STATISTICS-MIB", "nncVpa1HourIntervalDiscardClp0Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncVpa1HourIntervalGroup = nncVpa1HourIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: nncVpa1HourIntervalGroup.setDescription('A collection of objects providing 1 hour interval statistics for a VP Aggregation')
nncAtmStatisticsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 29, 4, 1)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVpl15MinCurrentGroup"), ("NNC-ATM-STATISTICS-MIB", "nncVpl1HourCurrentGroup"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinCurrentGroup"), ("NNC-ATM-STATISTICS-MIB", "nncVcl1HourCurrentGroup"), ("NNC-ATM-STATISTICS-MIB", "nncVplIntervalStateGroup"), ("NNC-ATM-STATISTICS-MIB", "nncVclIntervalStateGroup"), ("NNC-ATM-STATISTICS-MIB", "nncVpa15MinCurrentGroup"), ("NNC-ATM-STATISTICS-MIB", "nncVpa15MinIntervalGroup"), ("NNC-ATM-STATISTICS-MIB", "nncVpa1HourCurrentGroup"), ("NNC-ATM-STATISTICS-MIB", "nncVpa1HourIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncAtmStatisticsCompliance = nncAtmStatisticsCompliance.setStatus('current')
if mibBuilder.loadTexts: nncAtmStatisticsCompliance.setDescription('The compliance statement for Newbridge SNMP entities which have Vpl/Vcl endpoints and VPA')
nncAtmStatisticsServiceCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 29, 4, 2)).setObjects(("NNC-ATM-STATISTICS-MIB", "nncVpl15MinIntervalGroup"), ("NNC-ATM-STATISTICS-MIB", "nncVcl15MinIntervalGroup"), ("NNC-ATM-STATISTICS-MIB", "nncVplStatCounterGroup"), ("NNC-ATM-STATISTICS-MIB", "nncVclStatCounterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncAtmStatisticsServiceCompliance = nncAtmStatisticsServiceCompliance.setStatus('current')
if mibBuilder.loadTexts: nncAtmStatisticsServiceCompliance.setDescription('The compliance statement for Newbridge SNMP Service-level entities which report on Vpl/Vcl endpoints')
mibBuilder.exportSymbols("NNC-ATM-STATISTICS-MIB", nncVpl15MinIntervalTaggedInCells=nncVpl15MinIntervalTaggedInCells, nncVcl1HourCurrentRowStatus=nncVcl1HourCurrentRowStatus, nncVplStatGroup=nncVplStatGroup, nncVcl1HourIntervalDiscardClp0And1InCells=nncVcl1HourIntervalDiscardClp0And1InCells, nncAtmVclStatCounterValue=nncAtmVclStatCounterValue, nncVcl15MinIntervalNumber=nncVcl15MinIntervalNumber, nncVcl1HourIntervalTable=nncVcl1HourIntervalTable, nncVpl1HourCurrentGroup=nncVpl1HourCurrentGroup, nncVcl15MinIntervalEntry=nncVcl15MinIntervalEntry, nncAtmStatisticsServiceCompliance=nncAtmStatisticsServiceCompliance, nncVcl15MinCurrentClp0OutCells=nncVcl15MinCurrentClp0OutCells, nncVpl15MinIntervalDiscardClp0InCells=nncVpl15MinIntervalDiscardClp0InCells, nncVpl1HourIntervalTaggedInCells=nncVpl1HourIntervalTaggedInCells, nncVpl1HourIntervalClp0OutCells=nncVpl1HourIntervalClp0OutCells, nncVpa15MinIntervalState=nncVpa15MinIntervalState, nncDepthOf15MinHistoricalStrata=nncDepthOf15MinHistoricalStrata, nncVcl1HourCurrentGroup=nncVcl1HourCurrentGroup, nncVplStatCounterGroup=nncVplStatCounterGroup, nncVpl15MinIntervalState=nncVpl15MinIntervalState, nncVcl1HourCurrentState=nncVcl1HourCurrentState, nncAtmVclStatCounterTable=nncAtmVclStatCounterTable, nncAtmVclStatCounterIndex=nncAtmVclStatCounterIndex, nncVcl15MinIntervalDiscardClp0InCells=nncVcl15MinIntervalDiscardClp0InCells, nncVcl15MinIntervalTaggedInCells=nncVcl15MinIntervalTaggedInCells, nncVclStatClp0OutCells=nncVclStatClp0OutCells, PYSNMP_MODULE_ID=nncAtmStatistics, nncVplStatClp0And1OutCells=nncVplStatClp0And1OutCells, nncVclStatEntry=nncVclStatEntry, nncVpa15MinCurrentEntry=nncVpa15MinCurrentEntry, nncVpl1HourCurrentDiscardClp0And1InCells=nncVpl1HourCurrentDiscardClp0And1InCells, nncVpl1HourIntervalClp0And1OutCells=nncVpl1HourIntervalClp0And1OutCells, nncVpa1HourIntervalTable=nncVpa1HourIntervalTable, nncVclStatCounterGroup=nncVclStatCounterGroup, nncVplIntervalStateGroup=nncVplIntervalStateGroup, nncDepthOf1HourHistoricalStrata=nncDepthOf1HourHistoricalStrata, nncVclStatClp0InCells=nncVclStatClp0InCells, nncVpa15MinCurrentAbsoluteIntervalNumber=nncVpa15MinCurrentAbsoluteIntervalNumber, nncVpa15MinCurrentDiscardClp0Cells=nncVpa15MinCurrentDiscardClp0Cells, nncVpl1HourIntervalAbsoluteIntervalNumber=nncVpl1HourIntervalAbsoluteIntervalNumber, nncVpa15MinCurrentTable=nncVpa15MinCurrentTable, nncVcl1HourCurrentClp0OutCells=nncVcl1HourCurrentClp0OutCells, nncVpl15MinCurrentClp0And1InCells=nncVpl15MinCurrentClp0And1InCells, nncVpa15MinIntervalNumber=nncVpa15MinIntervalNumber, nncVplStatTable=nncVplStatTable, nncVcl1HourIntervalTaggedInCells=nncVcl1HourIntervalTaggedInCells, nncVpl1HourCurrentClp0And1InCells=nncVpl1HourCurrentClp0And1InCells, nncVpa1HourCurrentTable=nncVpa1HourCurrentTable, nncVpa1HourIntervalDiscardClp0Cells=nncVpa1HourIntervalDiscardClp0Cells, nncAtmVclStatCounterEntry=nncAtmVclStatCounterEntry, nncVpl15MinCurrentTable=nncVpl15MinCurrentTable, nncVcl1HourIntervalState=nncVcl1HourIntervalState, nncAtmStatisticsTraps=nncAtmStatisticsTraps, nncVcl1HourIntervalAbsoluteIntervalNumber=nncVcl1HourIntervalAbsoluteIntervalNumber, nncAtmStatistics=nncAtmStatistics, nncVplStatDiscardClp0InCells=nncVplStatDiscardClp0InCells, nncVplStatTaggedInCells=nncVplStatTaggedInCells, nncVpa15MinIntervalTable=nncVpa15MinIntervalTable, nncVcl1HourCurrentDiscardClp0And1InCells=nncVcl1HourCurrentDiscardClp0And1InCells, nncVpa1HourCurrentClp0And1OutCells=nncVpa1HourCurrentClp0And1OutCells, nncVcl1HourCurrentClp0InCells=nncVcl1HourCurrentClp0InCells, nncVpl1HourIntervalTable=nncVpl1HourIntervalTable, nncVcl15MinCurrentGroup=nncVcl15MinCurrentGroup, nncVpl15MinCurrentDiscardClp0And1InCells=nncVpl15MinCurrentDiscardClp0And1InCells, nncVcl15MinCurrentClp0And1OutCells=nncVcl15MinCurrentClp0And1OutCells, nncVcl15MinCurrentClp0And1InCells=nncVcl15MinCurrentClp0And1InCells, nncVpa15MinIntervalDiscardClp0And1Cells=nncVpa15MinIntervalDiscardClp0And1Cells, nncVpa1HourCurrentDiscardClp0And1Cells=nncVpa1HourCurrentDiscardClp0And1Cells, nncVpl1HourCurrentTaggedInCells=nncVpl1HourCurrentTaggedInCells, nncVclStatGroup=nncVclStatGroup, nncVpl15MinIntervalClp0And1InCells=nncVpl15MinIntervalClp0And1InCells, nncDepthOfHistoricalStrataGroup=nncDepthOfHistoricalStrataGroup, nncAtmStatisticsGroups=nncAtmStatisticsGroups, nncVpa15MinIntervalClp0And1OutCells=nncVpa15MinIntervalClp0And1OutCells, nncVcl1HourCurrentTable=nncVcl1HourCurrentTable, nncVpl15MinCurrentClp0InCells=nncVpl15MinCurrentClp0InCells, nncVplStatClp0OutCells=nncVplStatClp0OutCells, nncVpl15MinCurrentClp0And1OutCells=nncVpl15MinCurrentClp0And1OutCells, nncVpl15MinIntervalClp0OutCells=nncVpl15MinIntervalClp0OutCells, nncVcl15MinIntervalDiscardClp0And1InCells=nncVcl15MinIntervalDiscardClp0And1InCells, nncVcl1HourCurrentTaggedInCells=nncVcl1HourCurrentTaggedInCells, nncVcl15MinIntervalClp0OutCells=nncVcl15MinIntervalClp0OutCells, nncVcl1HourIntervalDiscardClp0InCells=nncVcl1HourIntervalDiscardClp0InCells, nncVpa15MinCurrentGroup=nncVpa15MinCurrentGroup, nncVpl1HourIntervalClp0InCells=nncVpl1HourIntervalClp0InCells, nncVpl15MinIntervalEntry=nncVpl15MinIntervalEntry, nncVclStatDiscardClp0And1InCells=nncVclStatDiscardClp0And1InCells, nncAtmVplStatCounterEntry=nncAtmVplStatCounterEntry, nncVclIntervalStateGroup=nncVclIntervalStateGroup, nncVclStatDiscardClp0InCells=nncVclStatDiscardClp0InCells, nncVpa1HourCurrentDiscardClp0Cells=nncVpa1HourCurrentDiscardClp0Cells, nncVcl1HourIntervalClp0And1OutCells=nncVcl1HourIntervalClp0And1OutCells, nncAtmVplStatCounterValue=nncAtmVplStatCounterValue, nncVpl1HourIntervalNumber=nncVpl1HourIntervalNumber, nncVpl1HourIntervalDiscardClp0InCells=nncVpl1HourIntervalDiscardClp0InCells, nncVpa15MinIntervalGroup=nncVpa15MinIntervalGroup, nncVpa1HourIntervalState=nncVpa1HourIntervalState, nncVpa15MinCurrentClp0And1OutCells=nncVpa15MinCurrentClp0And1OutCells, nncVpa15MinCurrentDiscardClp0And1Cells=nncVpa15MinCurrentDiscardClp0And1Cells, nncVpl1HourCurrentClp0OutCells=nncVpl1HourCurrentClp0OutCells, nncVpl1HourCurrentRowStatus=nncVpl1HourCurrentRowStatus, nncAtmStatisticsObjects=nncAtmStatisticsObjects, nncVcl15MinIntervalGroup=nncVcl15MinIntervalGroup, nncVcl1HourCurrentDiscardClp0InCells=nncVcl1HourCurrentDiscardClp0InCells, nncVpl15MinCurrentAbsoluteIntervalNumber=nncVpl15MinCurrentAbsoluteIntervalNumber, nncVpa15MinIntervalAbsoluteIntervalNumber=nncVpa15MinIntervalAbsoluteIntervalNumber, nncVpa1HourCurrentState=nncVpa1HourCurrentState, nncVcl15MinIntervalTable=nncVcl15MinIntervalTable, nncVcl15MinCurrentState=nncVcl15MinCurrentState, nncVplStatDiscardClp0And1InCells=nncVplStatDiscardClp0And1InCells, nncVpa1HourIntervalEntry=nncVpa1HourIntervalEntry, nncVcl1HourIntervalGroup=nncVcl1HourIntervalGroup, nncVcl15MinIntervalClp0And1OutCells=nncVcl15MinIntervalClp0And1OutCells, nncVplStatClp0InCells=nncVplStatClp0InCells, nncVclStatClp0And1OutCells=nncVclStatClp0And1OutCells, nncVpa1HourIntervalGroup=nncVpa1HourIntervalGroup, nncVpa1HourCurrentGroup=nncVpa1HourCurrentGroup, nncVpl15MinIntervalClp0And1OutCells=nncVpl15MinIntervalClp0And1OutCells, nncVpa1HourIntervalAbsoluteIntervalNumber=nncVpa1HourIntervalAbsoluteIntervalNumber, nncVcl15MinCurrentTaggedInCells=nncVcl15MinCurrentTaggedInCells, nncVcl1HourIntervalEntry=nncVcl1HourIntervalEntry, nncAtmStatisticsCompliances=nncAtmStatisticsCompliances, nncVpl1HourIntervalDiscardClp0And1InCells=nncVpl1HourIntervalDiscardClp0And1InCells, nncAtmVplStatCounterTable=nncAtmVplStatCounterTable, nncVcl15MinCurrentAbsoluteIntervalNumber=nncVcl15MinCurrentAbsoluteIntervalNumber, nncVpl15MinCurrentDiscardClp0InCells=nncVpl15MinCurrentDiscardClp0InCells, nncVcl1HourCurrentEntry=nncVcl1HourCurrentEntry, nncVpa15MinCurrentState=nncVpa15MinCurrentState, nncVpl15MinIntervalGroup=nncVpl15MinIntervalGroup, nncVpl15MinCurrentEntry=nncVpl15MinCurrentEntry, nncVpl1HourCurrentClp0InCells=nncVpl1HourCurrentClp0InCells, nncVpl1HourCurrentAbsoluteIntervalNumber=nncVpl1HourCurrentAbsoluteIntervalNumber, nncVpl15MinIntervalClp0InCells=nncVpl15MinIntervalClp0InCells, nncVcl1HourIntervalClp0And1InCells=nncVcl1HourIntervalClp0And1InCells, nncVclStatTable=nncVclStatTable, nncVpa15MinIntervalEntry=nncVpa15MinIntervalEntry, nncVcl15MinIntervalClp0And1InCells=nncVcl15MinIntervalClp0And1InCells, nncVpl15MinCurrentState=nncVpl15MinCurrentState, nncVpl1HourCurrentDiscardClp0InCells=nncVpl1HourCurrentDiscardClp0InCells, nncVcl1HourIntervalClp0OutCells=nncVcl1HourIntervalClp0OutCells, nncVpl1HourCurrentClp0And1OutCells=nncVpl1HourCurrentClp0And1OutCells, nncVpl15MinCurrentClp0OutCells=nncVpl15MinCurrentClp0OutCells, nncVpl15MinIntervalAbsoluteIntervalNumber=nncVpl15MinIntervalAbsoluteIntervalNumber, nncVpl15MinIntervalNumber=nncVpl15MinIntervalNumber, nncVpl1HourCurrentEntry=nncVpl1HourCurrentEntry, nncVplStatEntry=nncVplStatEntry, nncVcl15MinIntervalAbsoluteIntervalNumber=nncVcl15MinIntervalAbsoluteIntervalNumber, nncVcl15MinCurrentDiscardClp0InCells=nncVcl15MinCurrentDiscardClp0InCells, nncVclStatClp0And1InCells=nncVclStatClp0And1InCells, nncVpa1HourIntervalNumber=nncVpa1HourIntervalNumber, nncVpa1HourCurrentAbsoluteIntervalNumber=nncVpa1HourCurrentAbsoluteIntervalNumber, nncVcl1HourCurrentClp0And1InCells=nncVcl1HourCurrentClp0And1InCells, nncVcl15MinCurrentClp0InCells=nncVcl15MinCurrentClp0InCells, nncVplStatClp0And1InCells=nncVplStatClp0And1InCells, nncVpl1HourIntervalEntry=nncVpl1HourIntervalEntry, nncVcl15MinCurrentTable=nncVcl15MinCurrentTable, nncVpl15MinCurrentGroup=nncVpl15MinCurrentGroup, nncVpa1HourIntervalClp0And1OutCells=nncVpa1HourIntervalClp0And1OutCells, nncAtmVplStatCounterIndex=nncAtmVplStatCounterIndex, nncVcl1HourCurrentClp0And1OutCells=nncVcl1HourCurrentClp0And1OutCells, nncVpl15MinIntervalTable=nncVpl15MinIntervalTable, nncVpl1HourIntervalState=nncVpl1HourIntervalState, nncVpl1HourIntervalGroup=nncVpl1HourIntervalGroup, nncVcl15MinCurrentDiscardClp0And1InCells=nncVcl15MinCurrentDiscardClp0And1InCells, nncVcl15MinIntervalState=nncVcl15MinIntervalState, nncVcl15MinIntervalClp0InCells=nncVcl15MinIntervalClp0InCells, nncVcl1HourIntervalNumber=nncVcl1HourIntervalNumber, nncVcl1HourIntervalClp0InCells=nncVcl1HourIntervalClp0InCells, nncVpl1HourIntervalClp0And1InCells=nncVpl1HourIntervalClp0And1InCells, nncVcl1HourCurrentAbsoluteIntervalNumber=nncVcl1HourCurrentAbsoluteIntervalNumber, nncVcl15MinCurrentEntry=nncVcl15MinCurrentEntry, nncAtmStatisticsCompliance=nncAtmStatisticsCompliance, nncVpl1HourCurrentTable=nncVpl1HourCurrentTable, nncVpl15MinCurrentTaggedInCells=nncVpl15MinCurrentTaggedInCells, nncVpa1HourCurrentEntry=nncVpa1HourCurrentEntry, nncVpl15MinIntervalDiscardClp0And1InCells=nncVpl15MinIntervalDiscardClp0And1InCells, nncVpl1HourCurrentState=nncVpl1HourCurrentState, nncVclStatTaggedInCells=nncVclStatTaggedInCells, nncVpa15MinIntervalDiscardClp0Cells=nncVpa15MinIntervalDiscardClp0Cells, nncVpa1HourIntervalDiscardClp0And1Cells=nncVpa1HourIntervalDiscardClp0And1Cells)
