#
# PySNMP MIB module Wellfleet-BISYNC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-BISYNC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, Unsigned32, Counter32, MibIdentifier, Integer32, TimeTicks, Bits, ObjectIdentity, Gauge32, iso, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "Unsigned32", "Counter32", "MibIdentifier", "Integer32", "TimeTicks", "Bits", "ObjectIdentity", "Gauge32", "iso", "ModuleIdentity", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfBisyncGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfBisyncGroup")
wfBisyncTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1), )
if mibBuilder.loadTexts: wfBisyncTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncTable.setDescription('* BISYNC line record *')
wfBisyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1), ).setIndexNames((0, "Wellfleet-BISYNC-MIB", "wfBisyncSlot"), (0, "Wellfleet-BISYNC-MIB", "wfBisyncConnector"))
if mibBuilder.loadTexts: wfBisyncEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncEntry.setDescription('An entry in the BISYNC table')
wfBisyncDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBisyncDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncDelete.setDescription('Create/Delete parameter')
wfBisyncDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBisyncDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncDisable.setDescription('Enable/Disable parameter')
wfBisyncCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBisyncCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncCct.setDescription('CCT number for this line instance')
wfBisyncMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4568)).clone(1580)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBisyncMtu.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncMtu.setDescription('MTU parameter, this is buffer size for BISYNC media, fixed')
wfBisyncMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("raisedtr", 2), ("v25bis", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBisyncMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncMediaType.setDescription('Media type selection is provided via this parameter')
wfBisyncCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rs232", 1), ("rs422", 2), ("v35", 3), ("x21", 4))).clone('rs232')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBisyncCableType.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncCableType.setDescription('Type of Cable attached to the Bisync port - this is needed for V.25bis and Raise DTR to properly communicate with the modem')
wfBisyncClkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBisyncClkSource.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncClkSource.setDescription('Tx/Rx clock source is either internally or external generated.')
wfBisyncClkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1200, 2401, 4807, 7204, 9615, 19230))).clone(namedValues=NamedValues(("clk1200b", 1200), ("clk2400b", 2401), ("clk4800b", 4807), ("clk7200b", 7204), ("clk9600b", 9615), ("clk19200b", 19230))).clone('clk9600b')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBisyncClkSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncClkSpeed.setDescription('Tx/Rx clock speed. This speed selection is valid when either internal or external clocking is selected. In some cases, router software uses this attribute for route selection. If Priority Queuing is configured, it chooses queue depths based on this attribute. If internal clocking is selected, this attribute effects hardware initialization. If external clocking is selected, this attribute should be set to the speed that most closely corresponds to the speed of the external clock.')
wfBisyncService = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dlsw", 1), ("tunneling", 2))).clone('tunneling')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBisyncService.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncService.setDescription('Service Type selection is provided via this parameter. The supported services can be selected per interface.')
wfBisyncCfgTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBisyncCfgTxQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncCfgTxQueueLength.setDescription('Configured Transmit Queue Length. Values other than zero over-ride the router selected values. A value of zero has a special meaning. Zero causes router based default values to be used. Values larger than the compiled ring size are truncated to the compiled ring size. ')
wfBisyncCfgRxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBisyncCfgRxQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncCfgRxQueueLength.setDescription('Configured Receive Queue Length. Values other than zero over-ride the router selected values. A value of zero has a special meaning. Zero causes router based default values to be used. Values larger than the compiled ring size are truncated to the compiled ring size. ')
wfBisyncCharMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ebcdic", 1), ("ascii", 2))).clone('ebcdic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBisyncCharMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncCharMode.setDescription('Control Character Mode - ASCII/EBCDIC')
wfBisyncLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBisyncLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncLineNumber.setDescription('line number for this line instance')
wfBisyncRtsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBisyncRtsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncRtsEnable.setDescription('The RTS parameter enables/disables detection of RTS signals on the interface. Normal default mode is running without RTS enabled')
wfBisyncExternalClkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 19200)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBisyncExternalClkSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncExternalClkSpeed.setDescription('External Clock Speed. If external clocking is configured, this attribute should be set to the clock speed of the externally supplied clock. Depending on the protocols configured in the interface, this value may control internal decision making in the router. In soe cases, router software uses this attribute for route selection. If Priority Queueing is configured, it chooses queue depths based on this attribute. This attribute has no effect when Internal Clocking is configured.')
wfBisyncModule = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncModule.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncModule.setDescription('Module number for ASN platform, filled in by driver. For non-ASN platforms, this attribute will not be used ')
wfBisyncActualConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncActualConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncActualConnector.setDescription('Actual Connector Number for ASN platform, filled in by driver. For non-ASN platforms, this attribute will not be used.')
wfBisyncConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncConnector.setDescription("Instance ID Connector, filled in by driver. For the ASN this attribute is an encoded value and is equal to 'module'*10 + 'connector'. Where 'module' is defined in attribute mm and 'connector' is defined in attribute cc of this table. For non-ASN platforms this attribute is the physical connector number on the slot.")
wfBisyncSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncSlot.setDescription('Instance ID Slot, filled in by driver')
wfBisyncActiveCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncActiveCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncActiveCct.setDescription('Active CCT number for this line instance')
wfBisyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 20))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("dsrwait", 4), ("notpresent", 20))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncState.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncState.setDescription('Line Driver state variable, Not Present, DSR Wait, Init, Down, Up')
wfBisyncLastState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 20))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("dsrwait", 4), ("notpresent", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncLastState.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncLastState.setDescription('The state which the driver was in prior to the most recent re-initiali- zation.')
wfBisyncRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncRxOctets.setDescription('Number of octets received without error')
wfBisyncTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncTxOctets.setDescription('Number of octets transmitted without error')
wfBisyncRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncRxFrames.setDescription('Number of frames received without error')
wfBisyncTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncTxFrames.setDescription('Number of frames transmitted without error')
wfBisyncRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncRxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncRxErrors.setDescription('Number of receive errors')
wfBisyncTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncTxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncTxErrors.setDescription('Number of transmission errors')
wfBisyncTxLackRescs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncTxLackRescs.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncTxLackRescs.setDescription("Number of frames clipped in driver's transmit routine due to transmit congestion.")
wfBisyncTxUnderFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncTxUnderFlows.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncTxUnderFlows.setDescription('Number of transmission underflows, device FIFO went empty before next DMA request was granted.')
wfBisyncRxOverFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncRxOverFlows.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncRxOverFlows.setDescription('Number of receive overflows, device FIFO overflowed before next DMA cycle granted. No buffer resources available.')
wfBisyncRxBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncRxBadFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncRxBadFrames.setDescription('Number of bad receive frames, caused by FCS errors or non octet aligned.')
wfBisyncRxRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncRxRunts.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncRxRunts.setDescription('Number of runt frames received')
wfBisyncTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncTxQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncTxQueueLength.setDescription('Current Transmit Queue Length.')
wfBisyncRxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncRxQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncRxQueueLength.setDescription('Current Receive Queue Length.')
wfBisyncRxReplenMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncRxReplenMisses.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncRxReplenMisses.setDescription('Number of packet buffer misses while attempting to replenish driver receive ring.')
wfBisyncLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 37), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncLastChange.setDescription("The value of the SysUptime at the time the interface entered it's current operational state (UP state). SysUpTime is defined as the time (in hundredths of a second) since the network management portion of the system was last re-initialized. Usually the time since boot.")
wfBisyncOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncOutQLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncOutQLen.setDescription('The instantaneous current length of the output packet queue')
wfBisyncRxLackRescsChar = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncRxLackRescsChar.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncRxLackRescsChar.setDescription('Number of Rx characters dropped due to lack of buffer resources')
wfBisyncIsrBCZero = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncIsrBCZero.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncIsrBCZero.setDescription('Number of interrupts with byte count zero')
wfBisyncIsrBCSix = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncIsrBCSix.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncIsrBCSix.setDescription('Number of interrupts with byte count six or more')
wfBisyncIsrBCInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncIsrBCInvalid.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncIsrBCInvalid.setDescription('Number of interrupts with an unexpected message byte')
wfBisyncIsrBCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncIsrBCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncIsrBCErrors.setDescription('Number of interrupt errors')
wfBisyncLocalConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncLocalConnectionState.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncLocalConnectionState.setDescription('The state of the cable at the router end.')
wfBisyncRemoteConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("devicestreaming", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBisyncRemoteConnectionState.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncRemoteConnectionState.setDescription('The state of the cable at the controller end.')
wfBisyncAdditionalSyncPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 27, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBisyncAdditionalSyncPairs.setStatus('mandatory')
if mibBuilder.loadTexts: wfBisyncAdditionalSyncPairs.setDescription('The number of pairs of sync characters, in addition to the first pair, to send between frames. ')
mibBuilder.exportSymbols("Wellfleet-BISYNC-MIB", wfBisyncCharMode=wfBisyncCharMode, wfBisyncActualConnector=wfBisyncActualConnector, wfBisyncRxRunts=wfBisyncRxRunts, wfBisyncIsrBCErrors=wfBisyncIsrBCErrors, wfBisyncIsrBCInvalid=wfBisyncIsrBCInvalid, wfBisyncAdditionalSyncPairs=wfBisyncAdditionalSyncPairs, wfBisyncService=wfBisyncService, wfBisyncCableType=wfBisyncCableType, wfBisyncTxOctets=wfBisyncTxOctets, wfBisyncRxFrames=wfBisyncRxFrames, wfBisyncRxReplenMisses=wfBisyncRxReplenMisses, wfBisyncDelete=wfBisyncDelete, wfBisyncEntry=wfBisyncEntry, wfBisyncIsrBCSix=wfBisyncIsrBCSix, wfBisyncModule=wfBisyncModule, wfBisyncRxQueueLength=wfBisyncRxQueueLength, wfBisyncTxFrames=wfBisyncTxFrames, wfBisyncTxQueueLength=wfBisyncTxQueueLength, wfBisyncClkSource=wfBisyncClkSource, wfBisyncCfgRxQueueLength=wfBisyncCfgRxQueueLength, wfBisyncDisable=wfBisyncDisable, wfBisyncClkSpeed=wfBisyncClkSpeed, wfBisyncLastState=wfBisyncLastState, wfBisyncIsrBCZero=wfBisyncIsrBCZero, wfBisyncRxErrors=wfBisyncRxErrors, wfBisyncRxBadFrames=wfBisyncRxBadFrames, wfBisyncCct=wfBisyncCct, wfBisyncConnector=wfBisyncConnector, wfBisyncCfgTxQueueLength=wfBisyncCfgTxQueueLength, wfBisyncSlot=wfBisyncSlot, wfBisyncLastChange=wfBisyncLastChange, wfBisyncTxLackRescs=wfBisyncTxLackRescs, wfBisyncMtu=wfBisyncMtu, wfBisyncRxOverFlows=wfBisyncRxOverFlows, wfBisyncRxOctets=wfBisyncRxOctets, wfBisyncRemoteConnectionState=wfBisyncRemoteConnectionState, wfBisyncExternalClkSpeed=wfBisyncExternalClkSpeed, wfBisyncOutQLen=wfBisyncOutQLen, wfBisyncMediaType=wfBisyncMediaType, wfBisyncRtsEnable=wfBisyncRtsEnable, wfBisyncActiveCct=wfBisyncActiveCct, wfBisyncLineNumber=wfBisyncLineNumber, wfBisyncTxUnderFlows=wfBisyncTxUnderFlows, wfBisyncRxLackRescsChar=wfBisyncRxLackRescsChar, wfBisyncLocalConnectionState=wfBisyncLocalConnectionState, wfBisyncTable=wfBisyncTable, wfBisyncTxErrors=wfBisyncTxErrors, wfBisyncState=wfBisyncState)
