#
# PySNMP MIB module CISCO-SRST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SRST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:12:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CvE164Address, CountryCode = mibBuilder.importSymbols("CISCO-TC", "CvE164Address", "CountryCode")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, IpAddress, Counter64, iso, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, ModuleIdentity, MibIdentifier, Bits, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "Counter64", "iso", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Bits", "Unsigned32", "Gauge32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
ciscoSrstMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 441))
ciscoSrstMIB.setRevisions(('2007-02-27 00:00', '2005-06-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSrstMIB.setRevisionsDescriptions(("[1] Default value for csrstTransferSystem is changed from 'blind' to 'fullConsult'. [2] Added csrstUserLocaleInfoRev1 which is the revised version for csrstUserLocaleInfo. It can support 5 user locale at the same time. [3] csrstConfGroup is deprecated and revised with csrstConfGroupRev1. [4] ciscoSrstMIBCompliance is deprecated and revised with ciscoSrstMIBComplianceRev1.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSrstMIB.setLastUpdated('200702270000Z')
if mibBuilder.loadTexts: ciscoSrstMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSrstMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ccme-srst@cisco.com')
if mibBuilder.loadTexts: ciscoSrstMIB.setDescription('This MIB allows management of Cisco Survivable Remote Site Telephony (SRST) feature in Cisco IOS. SRST is an optional software feature that provides Cisco CallManager with fallback support for Cisco IP phones attached to a Cisco router on a local network. The CISCO-CCME-MIB provides management of Cisco CallManager Express (CCME) feature in Cisco IOS. CCME is an optional software feature that enables Cisco routers to deliver IP telephony services for small office environment. Ephone, ephoneDN, button association tables are common to both CCME and SRST MIBs and are defined in CISCO-CCME-MIB. Ephone specific notifications which are common to CCME and SRST are also defined in CISCO-CCME-MIB.')
ciscoSrstMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 441, 0))
ciscoSrstMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 441, 1))
ciscoSrstMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 441, 2))
class SrstOperType(TextualConvention, Integer32):
    description = 'Operational SRST states. Valid values are : active(1) SRST is active inactive(2) SRST is inactive '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("inactive", 2))

csrstGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 1))
csrstConf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2))
csrstActiveStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 3))
csrstSipConf = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4))
csrstEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstEnabled.setStatus('current')
if mibBuilder.loadTexts: csrstEnabled.setDescription('Cisco SRST support is enabled or disabled. When enabled, the router is in fallback mode to provide call-handling support to IP phones. If disabled, all of the objects in this group have no significance.')
csrstVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstVersion.setStatus('current')
if mibBuilder.loadTexts: csrstVersion.setDescription('Cisco SRST version.')
csrstIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstIPAddressType.setStatus('current')
if mibBuilder.loadTexts: csrstIPAddressType.setDescription("Internet address type governing the address type format for one or more InetAddress objects in this MIB. The associated InetAddress objects' description will refer back to this type object as appropriate. ")
csrstIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstIPAddress.setStatus('current')
if mibBuilder.loadTexts: csrstIPAddress.setDescription('Cisco SRST IP address for the router to receive messages from IP phones, typically one of the addresses of an Ethernet port of the router. The type of IP address used here is indicated by the csrstSysIPAddressType object. ')
csrstPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 5), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(2000, 9999)).clone(2000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstPortNumber.setStatus('current')
if mibBuilder.loadTexts: csrstPortNumber.setDescription('This object indicates the TCP port number to use for Skinny Client Control Protocol (SCCP) and is range limited. This port also indicates through which IP phones communicate with SRST. ')
csrstMaxConferences = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstMaxConferences.setStatus('current')
if mibBuilder.loadTexts: csrstMaxConferences.setDescription('Maximum number of simultaneous three-party conference calls configured on the router. Range is IOS version and platform dependent. With SRST Version 3.0 onwards, the following are the maximum values for each platform - Cisco 1751, Cisco 1760, Cisco 2600, Cisco 3640 - 8 conferences. Cisco 3660, Cisco 3725, Cisco 3745 - 16 conferences. Default is half the maximum number of simultaneous three-party conferences for each platform.')
csrstMaxEphones = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstMaxEphones.setStatus('current')
if mibBuilder.loadTexts: csrstMaxEphones.setDescription('Maximum number of Cisco IP phones configured on the SRST router. Range is IOS version and platform dependent. ')
csrstMaxDN = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstMaxDN.setStatus('current')
if mibBuilder.loadTexts: csrstMaxDN.setDescription('Maximum number of IP phones extensions (ephone-dns) or directory number configured on this SRST router. Range is IOS version and platform dependent. Default is 0.')
csrstSipPhoneUnRegThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csrstSipPhoneUnRegThreshold.setStatus('current')
if mibBuilder.loadTexts: csrstSipPhoneUnRegThreshold.setDescription('This object indicates a threshold for the number of SIP phones unregistered to SRST. This threshold is changeable by the NMS user. ')
csrstCallFwdNoAnswer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 10), CvE164Address().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstCallFwdNoAnswer.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: csrstCallFwdNoAnswer.setStatus('current')
if mibBuilder.loadTexts: csrstCallFwdNoAnswer.setDescription('Cisco SRST call forwarding number when a Cisco IP phone is not answered. This directory number is a fully qualified E.164 number.')
csrstCallFwdNoAnswerTo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 11), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstCallFwdNoAnswerTo.setStatus('current')
if mibBuilder.loadTexts: csrstCallFwdNoAnswerTo.setDescription('Timeout in seconds if a Cisco IP phone is not answered, Cisco SRST will call forward to another directory number. ')
csrstCallFwdBusy = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 12), CvE164Address().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstCallFwdBusy.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: csrstCallFwdBusy.setStatus('current')
if mibBuilder.loadTexts: csrstCallFwdBusy.setDescription('Cisco SRST call forwarding number when a Cisco IP phone is busy. This directory number is a fully qualified E.164 number.')
csrstMohFilename = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstMohFilename.setStatus('current')
if mibBuilder.loadTexts: csrstMohFilename.setDescription('Cisco SRST Music-On-Hold is enabled with file on flash, or disabled without a file on flash. MOH is enabled by default.')
csrstMohMulticastAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 14), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstMohMulticastAddrType.setStatus('current')
if mibBuilder.loadTexts: csrstMohMulticastAddrType.setDescription("Internet address type governing the address type format for one or more InetAddress objects in this MIB. The associated InetAddress objects' description will refer back to this type object as appropriate. ")
csrstMohMulticastAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstMohMulticastAddr.setStatus('current')
if mibBuilder.loadTexts: csrstMohMulticastAddr.setDescription('This object indicates Cisco SRST Music-On-Hold Multicast IP address. When configured, this feature enables continuous IP multicast output of MOH from a Flash MOH file. This object has no significance if MOH is not configured. Default is the csrstIPAddress object for Cisco SRST. The type of IP address used here is indicated by the csrstMohMulticastAddrType object. ')
csrstMohMulticastPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 16), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(2000, 9999)).clone(2000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstMohMulticastPort.setStatus('current')
if mibBuilder.loadTexts: csrstMohMulticastPort.setDescription('This object indicates Cisco SRST Music-On-Hold Multicast TCP port which is range limited. When configured, this feature enables continuous IP multicast output of MOH from a Flash MOH file. This object has no significance if MOH is not configured. ')
csrstVoiceMailNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 17), CvE164Address().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstVoiceMailNumber.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: csrstVoiceMailNumber.setStatus('current')
if mibBuilder.loadTexts: csrstVoiceMailNumber.setDescription("Cisco SRST voice mail number that is speed-dialed when the messages button on a Cisco IP phone is pressed. This voice mail number is a fully qualified E.164 number. If voice-mail number is not configured, this object will have a string length of 2 with the value '**'. ")
csrstSystemMessagePrimary = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSystemMessagePrimary.setStatus('current')
if mibBuilder.loadTexts: csrstSystemMessagePrimary.setDescription("Cisco SRST system static text message that is displayed on Cisco IP phone during fallback. Length of text string is less than 32 characters. Default message is 'CM Fallback Service Operating'. ")
csrstSystemMessageSecondary = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSystemMessageSecondary.setStatus('current')
if mibBuilder.loadTexts: csrstSystemMessageSecondary.setDescription("Cisco SRST system message that is displayed on Cisco IP phone that does not support static text message and have a limited display space during fallback. Length of text string is less than 20 characters. Default messages is 'CM Fallback Service'. ")
csrstScriptName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstScriptName.setStatus('current')
if mibBuilder.loadTexts: csrstScriptName.setDescription('Cisco SRST session-level IVR application script. This application can be written written in Tool Command Language (TCL) and is applied to all Cisco IP phone lines served by the SRST router. If no application script name is configured, the default built-in IOS application will be applied to all phone lines served by the SRST router and this object will be a zero-length string.')
csrstSecondaryDialTone = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 21), CvE164Address().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSecondaryDialTone.setStatus('current')
if mibBuilder.loadTexts: csrstSecondaryDialTone.setDescription('Cisco SRST secondary dial tone digits. When a Cisco IP phone user dials a PSTN access prefix, defined by the secondary dial tone digits, the secondary dial tone is enabled. ')
csrstTransferSystem = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("blind", 1), ("fullBlind", 2), ("fullConsult", 3), ("localConsult", 4))).clone('fullConsult')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstTransferSystem.setReference('ITU-T H.450.2 Call Transfers')
if mibBuilder.loadTexts: csrstTransferSystem.setStatus('current')
if mibBuilder.loadTexts: csrstTransferSystem.setDescription('Cisco SRST call transfer method using the ITU-T H.450.2 standard. Default setting is blind. blind - Calls are transferred without consultation using a single phone line and the Cisco proprietary method. fullBlind - Calls are transferred without consultation using H.450.2 standard methods. fullConsult - Calls are transferred using H.450.2 with consultation using the second phone line if available, or the calls fall back to full-blind if the second line is unavailable. localConsult - Calls are transferred with local consultation using the second phone line if available, or the calls fall back to blind for non- local consultation or transfer target. This mode is intended for use primarily in Voice over Frame Relay (VoFR) networks. ')
csrstUserLocaleInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 23), CountryCode().clone('US')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstUserLocaleInfo.setStatus('deprecated')
if mibBuilder.loadTexts: csrstUserLocaleInfo.setDescription('Cisco SRST language for displays on Cisco IP phone by country. Deprecated and superseded by csrstUserLocaleInfoRev1, as current implementation supports 5 user locales at the same time. ')
csrstDateFormat = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mmddyy", 1), ("ddmmyy", 2), ("yyddmm", 3), ("yymmdd", 4))).clone('mmddyy')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstDateFormat.setStatus('current')
if mibBuilder.loadTexts: csrstDateFormat.setDescription('Date display format on Cisco IP phones in the Cisco SRST system. ')
csrstTimeFormat = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twelveHour", 1), ("twentyFourHour", 2))).clone('twelveHour')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstTimeFormat.setStatus('current')
if mibBuilder.loadTexts: csrstTimeFormat.setDescription('Time dispay format on Cisco IP phones in the Cisco SRST system. 1 - 12 hour clock. 2 - 24 hour clock. ')
csrstInterdigitTo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 26), Unsigned32().clone(10)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstInterdigitTo.setStatus('current')
if mibBuilder.loadTexts: csrstInterdigitTo.setDescription('Cisco SRST interdigit timeout duration in seconds for Cisco IP phones. ')
csrstBusyTo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 27), Unsigned32().clone(10)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstBusyTo.setStatus('current')
if mibBuilder.loadTexts: csrstBusyTo.setDescription('Cisco SRST time in seconds before disconnect when destination is busy, without call-forwarding. ')
csrstAlertTo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 28), Unsigned32().clone(180)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstAlertTo.setStatus('current')
if mibBuilder.loadTexts: csrstAlertTo.setDescription('Cisco SRST time in seconds before disconnect when call is not answered, without call-forwarding. ')
csrstXlateCalledNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstXlateCalledNumber.setStatus('current')
if mibBuilder.loadTexts: csrstXlateCalledNumber.setDescription('This object indicates the tag of a corresponding translation rule, which utilizes the number-translation mechanism of the IOS to translate a called number on the Cisco SRST router. ')
csrstXlateCallingNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstXlateCallingNumber.setStatus('current')
if mibBuilder.loadTexts: csrstXlateCallingNumber.setDescription('This object indicates the tag of a corresponding translation rule, which utilizes the number-translation mechanism of the IOS to translate a calling number on the Cisco SRST router.')
csrstAliasTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 31), )
if mibBuilder.loadTexts: csrstAliasTable.setStatus('current')
if mibBuilder.loadTexts: csrstAliasTable.setDescription('A list of alias pattern configured on this SRST router. ')
csrstAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 31, 1), ).setIndexNames((0, "CISCO-SRST-MIB", "csrstAliasIndex"))
if mibBuilder.loadTexts: csrstAliasEntry.setStatus('current')
if mibBuilder.loadTexts: csrstAliasEntry.setDescription('Information about a configured alias pattern. There is an entry in this table for each alias pattern configured on this device.')
csrstAliasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 31, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csrstAliasIndex.setStatus('current')
if mibBuilder.loadTexts: csrstAliasIndex.setDescription('An index in sequential order that indicates an alias pattern configured on this SRST router. ')
csrstAliasTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 31, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstAliasTag.setStatus('current')
if mibBuilder.loadTexts: csrstAliasTag.setDescription('A unique sequence number that indicates a particular alias pattern configured on this SRST router. ')
csrstAliasNumPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 31, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstAliasNumPattern.setStatus('current')
if mibBuilder.loadTexts: csrstAliasNumPattern.setDescription('This object indicates the pattern to match the incoming telephone number. It may include wildcards. ')
csrstAliasAltNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 31, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstAliasAltNumber.setStatus('current')
if mibBuilder.loadTexts: csrstAliasAltNumber.setDescription('This object indicates the alternate tele- phone number to route incoming calls to match the number pattern. This has to be a valid extension for an IP phone actively registered on the SRST router. ')
csrstAliasPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 31, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstAliasPreference.setStatus('current')
if mibBuilder.loadTexts: csrstAliasPreference.setDescription('This object indicates the preference value of the associated dial-peer. A value of 0 has the highest preference. ')
csrstAliasHuntStopEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 31, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstAliasHuntStopEnabled.setStatus('current')
if mibBuilder.loadTexts: csrstAliasHuntStopEnabled.setDescription('This object specifies that if hunt stop is enabled, after the caller tried the alternate number according to the alias pattern, it will stop call hunting. If hunt stop is disabled, it will rollover to another directory number if available. ')
csrstAccessCodeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 32), )
if mibBuilder.loadTexts: csrstAccessCodeTable.setStatus('current')
if mibBuilder.loadTexts: csrstAccessCodeTable.setDescription('A list of access-code to trunk lines configured on this SRST router. ')
csrstAccessCodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 32, 1), ).setIndexNames((0, "CISCO-SRST-MIB", "csrstAccessCodeType"))
if mibBuilder.loadTexts: csrstAccessCodeEntry.setStatus('current')
if mibBuilder.loadTexts: csrstAccessCodeEntry.setDescription('Information about a configured access-code to trunk lines. There is an entry in this table for each access configured on this device.')
csrstAccessCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fxo", 1), ("em", 2), ("bri", 3), ("pri", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstAccessCodeType.setStatus('current')
if mibBuilder.loadTexts: csrstAccessCodeType.setDescription('This object indicates the type of trunk line to which the access-code is applied to. The type of trunk lines can be fxo, e&m, bri, and pri. fxo - Enables a foreign exchange office (FXO) interface. em - Enables an analog ear and mouth (E&M) interface. bri - Enables a BRI interface. pri - Enables a PRI interface. ')
csrstAccessCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 32, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstAccessCode.setStatus('current')
if mibBuilder.loadTexts: csrstAccessCode.setDescription('This object indicates the access-code to be applied to the corresponding trunk line by creating dial-peers. ')
csrstAccessCodeDIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 32, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstAccessCodeDIDEnabled.setStatus('current')
if mibBuilder.loadTexts: csrstAccessCodeDIDEnabled.setDescription('This object indicates the direct-inward- dial on a POTS dial-peer is enabled or disabled. ')
csrstLimitDNTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 33), )
if mibBuilder.loadTexts: csrstLimitDNTable.setStatus('current')
if mibBuilder.loadTexts: csrstLimitDNTable.setDescription('A list of configured limit-dn avail- able to each Cisco IP phone type on this SRST router. ')
csrstLimitDNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 33, 1), ).setIndexNames((0, "CISCO-SRST-MIB", "csrstLimitDNType"))
if mibBuilder.loadTexts: csrstLimitDNEntry.setStatus('current')
if mibBuilder.loadTexts: csrstLimitDNEntry.setDescription('Information about a configured limit-dn. There is an entry in this table for each limit-dn configured for a Cisco phone type on this device. ')
csrstLimitDNType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 33, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ipPhone7910", 1), ("ipPhone7935", 2), ("ipPhone7940", 3), ("ipPhone7960", 4), ("ipPhone7970", 5), ("ipPhone7936", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstLimitDNType.setStatus('current')
if mibBuilder.loadTexts: csrstLimitDNType.setDescription('This object indicates the type of IP phone to which the limit-dn is applied to. ')
csrstLimitDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 33, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstLimitDN.setStatus('current')
if mibBuilder.loadTexts: csrstLimitDN.setDescription('This object indicates the maximum number of directory numbers available to each type of IP phone. The current range of maximum lines setting is from 1 to 34. The default is 34. DEFVAL { 34 } ')
csrstNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 34), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csrstNotificationEnabled.setStatus('current')
if mibBuilder.loadTexts: csrstNotificationEnabled.setDescription('This variable indicates whether this system produces the SRST notifications. A false value will prevent SRST notifications from being generated by this system. ')
csrstUserLocaleInfoRev1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 2, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(14, 64)).clone('US/US/US/US/US')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstUserLocaleInfoRev1.setStatus('current')
if mibBuilder.loadTexts: csrstUserLocaleInfoRev1.setDescription("Cisco SRST language for displays on Cisco IP phone by country. Every set of character separated by a forward slash ('/') represents one user-locale whose value may be any one of the following languages or one configured by the user. At the same time 5 user locales can be configured. --------------------------- | DE Germany | | DK Denmark | | ES Spain | | FR France | | IT Italy | | JP Japan | | NL Netherlands | | NO Norway | | PT Portugal | | RU Russian Federation | | SE Sweden | | US United States | --------------------------- Example: if csrstUserLocaleInfoRev1 returns 'DE/US/SE/FR/RU' then : UserLocale 1 = DE UserLocale 2 = US UserLocale 3 = SE UserLocale 4 = FR UserLocale 5 = RU ")
csrstSysNotifSeverity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 2, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clear", 1), ("minor", 2), ("major", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csrstSysNotifSeverity.setStatus('current')
if mibBuilder.loadTexts: csrstSysNotifSeverity.setDescription("The internally-defined severity of the particular alarm condition, associated with the most recent SNMP notification. A subsequent event in which the alarm condition changes from its failed state back to a 'normal' state has a severity of 'clear'. This severity-level value is supplied with each SRST specific notification. ")
csrstSysNotifReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 2, 2, 2, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csrstSysNotifReason.setStatus('current')
if mibBuilder.loadTexts: csrstSysNotifReason.setDescription('The internally-defined failure cause of the particular alarm condition, associated with the most recent system notification. ')
csrstState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 3, 1), SrstOperType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstState.setStatus('current')
if mibBuilder.loadTexts: csrstState.setDescription('This object indicates the current state of Cisco SRST feature on this router. Active - At least one IP or SIP phone is registered Inactive - Cisco SRST has no IP or SIP phones registered This object has no significance if csrstEnabled object is disabled. ')
csrstSipPhoneCurrentRegistered = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipPhoneCurrentRegistered.setStatus('current')
if mibBuilder.loadTexts: csrstSipPhoneCurrentRegistered.setDescription('Total number of SIP phones currently registered to the SRST router. ')
csrstSipCallLegs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipCallLegs.setStatus('current')
if mibBuilder.loadTexts: csrstSipCallLegs.setDescription('Total number of SIP call legs routed through the SRST router since going active. This includes incoming and outgoing calls. ')
csrstTotalUpTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 3, 4), Counter32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstTotalUpTime.setStatus('current')
if mibBuilder.loadTexts: csrstTotalUpTime.setDescription('Accumulated total number of minutes that router is active in SRST mode. ')
csrstSipRegSrvExpMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 86400)).clone(3600)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipRegSrvExpMax.setStatus('current')
if mibBuilder.loadTexts: csrstSipRegSrvExpMax.setDescription('This object indicates the maximum expiration time for the SIP Registrar Server to timeout on a registration. ')
csrstSipRegSrvExpMin = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(60)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipRegSrvExpMin.setStatus('current')
if mibBuilder.loadTexts: csrstSipRegSrvExpMin.setDescription('This object indicates the minimum expiration time for the SIP Registrar Server to timeout on a registration. ')
csrstSipIp2IpGlobalEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipIp2IpGlobalEnabled.setStatus('current')
if mibBuilder.loadTexts: csrstSipIp2IpGlobalEnabled.setDescription('This object indicates whether voip calls are re-directed ip to ip globally. ')
csrstSipSend300MultSupport = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bestMatch", 1), ("longestMatch", 2))).clone('longestMatch')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipSend300MultSupport.setStatus('current')
if mibBuilder.loadTexts: csrstSipSend300MultSupport.setDescription('This object indicates whether the redirect contact order is best or longest match. This applies globally for SIP. bestMatch - Uses the current system configuration to set the order of contacts. longestMatch - Sets the contact order by using the destination pattern longest match first, and then the second longest match, the third longest match, etc.. ')
csrstSipVoRegPoolTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 5), )
if mibBuilder.loadTexts: csrstSipVoRegPoolTable.setStatus('current')
if mibBuilder.loadTexts: csrstSipVoRegPoolTable.setDescription('This table contains general information about the configured voice register pool for SIP endpoints (dial-peers) on this SRST router. ')
csrstSipVoRegPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 5, 1), ).setIndexNames((0, "CISCO-SRST-MIB", "csrstSipVoRegPoolTag"))
if mibBuilder.loadTexts: csrstSipVoRegPoolEntry.setStatus('current')
if mibBuilder.loadTexts: csrstSipVoRegPoolEntry.setDescription('Information about a configured voice register pool for SIP dial-peers. There is an entry in this table for each voice register pool configured on this device. ')
csrstSipVoRegPoolTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csrstSipVoRegPoolTag.setStatus('current')
if mibBuilder.loadTexts: csrstSipVoRegPoolTag.setDescription('A unique identifier tag configured for a voice register pool entry. ')
csrstSipNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipNetId.setStatus('current')
if mibBuilder.loadTexts: csrstSipNetId.setDescription('This object indicates the network ident- ification information of the SIP voice register pool configured on this router. This object can be the network Id, IP address, or MAC address. ')
csrstSipVoRegPoolIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 5, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipVoRegPoolIpAddrType.setStatus('current')
if mibBuilder.loadTexts: csrstSipVoRegPoolIpAddrType.setDescription("Internet address type governing the address type format for one or more InetAddress objects in this MIB. The associated InetAddress objects' description will refer back to this type object as appropriate. ")
csrstSipNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 5, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipNetMask.setStatus('current')
if mibBuilder.loadTexts: csrstSipNetMask.setDescription('This object indicates the IP subnet configured for the SIP voice register pool. The type of IP subnet used here is indicated by the csrstSipVoRegPoolIpAddrType object. ')
csrstSipProxySrvIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 5, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipProxySrvIpAddr.setStatus('current')
if mibBuilder.loadTexts: csrstSipProxySrvIpAddr.setDescription('This object indicates the IP address of the proxy server configured for the SIP voice register pool. The type of IP address used here is indicated by the csrstSipVoRegPoolIpAddrType object. ')
csrstSipProxySrvPref = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipProxySrvPref.setStatus('current')
if mibBuilder.loadTexts: csrstSipProxySrvPref.setDescription('This object indicates the preference order for creating the VoIP dial peers in the voice register pool. Setting the preference enables the desired dial peer to be selected when multiple dial peers within a hunt group are matched for a dial string. A value of 0 has the highest preference. ')
csrstSipProxySrvMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("icmp", 1), ("rtr", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipProxySrvMonitor.setStatus('current')
if mibBuilder.loadTexts: csrstSipProxySrvMonitor.setDescription('Cisco SIP SRST monitoring protocol of the proxy server configured for the SIP voice register pool. This monitoring protocol can be ICMP ping or RTR probes. ')
csrstSipProxySrvAltIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 5, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipProxySrvAltIpAddr.setStatus('current')
if mibBuilder.loadTexts: csrstSipProxySrvAltIpAddr.setDescription('Cisco SIP SRST monitoring of an alternate IP address other than the proxy configured for the SIP voice register pool. The type of IP address used here is indicated by the csrstSipVoRegPoolIpAddrType object. ')
csrstSipDefaultPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipDefaultPreference.setStatus('current')
if mibBuilder.loadTexts: csrstSipDefaultPreference.setDescription('This object indicates the default preference of the proxy dial-peers created in the voice register pool. If csrstSipProxySrvPref object is not set, the default preference is applied to the dial-peers created. A value of 0 has the highest preference. ')
csrstSipVoRegPoolAppl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 5, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipVoRegPoolAppl.setStatus('current')
if mibBuilder.loadTexts: csrstSipVoRegPoolAppl.setDescription('Application for the SIP dial-peers configured under voice register pool. ')
csrstSipVoRegNumberListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 6), )
if mibBuilder.loadTexts: csrstSipVoRegNumberListTable.setStatus('current')
if mibBuilder.loadTexts: csrstSipVoRegNumberListTable.setDescription('This table contains information about the configured number list for the corresponding voice register pool on this SIP SRST router. ')
csrstSipVoRegNumberListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 6, 1), ).setIndexNames((0, "CISCO-SRST-MIB", "csrstSipVoRegPoolTag"), (0, "CISCO-SRST-MIB", "csrstSipVoRegNumberListIndex"))
if mibBuilder.loadTexts: csrstSipVoRegNumberListEntry.setStatus('current')
if mibBuilder.loadTexts: csrstSipVoRegNumberListEntry.setDescription('Information about a configured number list for the corresponding voice register pool. There is an entry in this table for each number list configured on this device. ')
csrstSipVoRegNumberListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csrstSipVoRegNumberListIndex.setStatus('current')
if mibBuilder.loadTexts: csrstSipVoRegNumberListIndex.setDescription('A unique sequence number that indicates a number list configured for the corresponding voice register pool on this SRST router. ')
csrstSipVoRegNumberListTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipVoRegNumberListTag.setStatus('current')
if mibBuilder.loadTexts: csrstSipVoRegNumberListTag.setDescription('This object indicates the particular index of the number list configured for the corresponding voice register pool. ')
csrstSipVoRegNumberPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 6, 1, 3), CvE164Address().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipVoRegNumberPattern.setReference('ITU-T E.164, Q.931 chapter 4.5.10')
if mibBuilder.loadTexts: csrstSipVoRegNumberPattern.setStatus('current')
if mibBuilder.loadTexts: csrstSipVoRegNumberPattern.setDescription('This object indicates the number pattern that the registrar permits to handle the register message from the SIP phone. This number pattern is a fully qualified E.164 number.')
csrstSipVoRegNumberPref = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipVoRegNumberPref.setStatus('current')
if mibBuilder.loadTexts: csrstSipVoRegNumberPref.setDescription('This object indicates the preference of the number pattern configured for the corresponding voice register pool. ')
csrstSipVoRegNumberHuntstopEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 6, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipVoRegNumberHuntstopEnabled.setStatus('current')
if mibBuilder.loadTexts: csrstSipVoRegNumberHuntstopEnabled.setDescription('This object indicates huntstop is enabled (true) or disabled (false) for the number pattern configured for the corresponding voice register pool. If enabled, the incoming call will stop hunting if the dial-peer is busy. If disabled, the incoming call will hunt further for dial-peers. ')
csrstSipEndpointTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 7), )
if mibBuilder.loadTexts: csrstSipEndpointTable.setStatus('current')
if mibBuilder.loadTexts: csrstSipEndpointTable.setDescription('This table contains general information about the configured SIP dial-peers (endpoints) on this SIP SRST router. ')
csrstSipEndpointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 7, 1), ).setIndexNames((0, "CISCO-SRST-MIB", "csrstSipEndpointTag"))
if mibBuilder.loadTexts: csrstSipEndpointEntry.setStatus('current')
if mibBuilder.loadTexts: csrstSipEndpointEntry.setDescription('Information about a created SIP endpoint. There is an entry in this table for each SIP endpoint (dial-peer) configured on this device.')
csrstSipEndpointTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csrstSipEndpointTag.setStatus('current')
if mibBuilder.loadTexts: csrstSipEndpointTag.setDescription('A unique sequence number that indicates a SIP endpoint configured on this SRST router. ')
csrstSipVoRegPoolEdptTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipVoRegPoolEdptTag.setStatus('current')
if mibBuilder.loadTexts: csrstSipVoRegPoolEdptTag.setDescription('This object indicates the voice register pool tag from which the corresponding SIP endpoint (dial-peer) is created. ')
csrstSipEndpointIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 7, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipEndpointIpAddrType.setStatus('current')
if mibBuilder.loadTexts: csrstSipEndpointIpAddrType.setDescription("Internet address type governing the address type format for one or more InetAddress objects in this MIB. The associated InetAddress objects' description will refer back to this type object as appropriate. ")
csrstSipEndpointIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 7, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipEndpointIpAddress.setStatus('current')
if mibBuilder.loadTexts: csrstSipEndpointIpAddress.setDescription('This object indicates the SIP endpoint IP address configured on this router. The type of IP address used here is indicated by the csrstSipEndpointIpAddrType object. ')
csrstSipEndpointDN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 441, 1, 4, 7, 1, 5), CvE164Address().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csrstSipEndpointDN.setStatus('current')
if mibBuilder.loadTexts: csrstSipEndpointDN.setDescription("This object indicates the SIP phone's DN or line number assigned to the SIP endpoint. ")
csrstStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 441, 0, 1)).setObjects(("CISCO-SRST-MIB", "csrstSysNotifSeverity"), ("CISCO-SRST-MIB", "csrstState"), ("CISCO-SRST-MIB", "csrstSysNotifReason"))
if mibBuilder.loadTexts: csrstStateChange.setStatus('current')
if mibBuilder.loadTexts: csrstStateChange.setDescription('An SRST up or down state change notification is generated. This indicates one or more phones is registered to the SRST router or none is registered. ')
csrstFailNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 441, 0, 2)).setObjects(("CISCO-SRST-MIB", "csrstSysNotifSeverity"), ("CISCO-SRST-MIB", "csrstSysNotifReason"))
if mibBuilder.loadTexts: csrstFailNotif.setStatus('current')
if mibBuilder.loadTexts: csrstFailNotif.setDescription('A failure notification is generated when the SRST router encounters a catastrophic failure. ')
csrstSipPhoneUnRegThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 441, 0, 3)).setObjects(("CISCO-SRST-MIB", "csrstSipPhoneUnRegThreshold"), ("CISCO-SRST-MIB", "csrstSipPhoneCurrentRegistered"))
if mibBuilder.loadTexts: csrstSipPhoneUnRegThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: csrstSipPhoneUnRegThresholdExceed.setDescription('A SIP phone unregistration notification is generated when the number of SIP phone unregistrations have exceeded the threshold. The number of currently registered SIP phones is provided here by csrstSipPhoneCurrentRegistered object as a reference such that if csrstSipPhoneCurrentRegistered falls below csrstSipPhoneUnRegThreshold, a notification will be generated to indicate that the number of unregistered SIP phones has crossed the threshold. ')
csrstSipPhoneRegFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 441, 0, 4)).setObjects(("CISCO-SRST-MIB", "csrstSipEndpointIpAddress"))
if mibBuilder.loadTexts: csrstSipPhoneRegFailed.setStatus('current')
if mibBuilder.loadTexts: csrstSipPhoneRegFailed.setDescription('A SIP phone fail registration notification is generated when the SIP phone fails to register. ')
csrstConferenceFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 441, 0, 5)).setObjects(("CISCO-SRST-MIB", "csrstMaxConferences"))
if mibBuilder.loadTexts: csrstConferenceFailed.setStatus('current')
if mibBuilder.loadTexts: csrstConferenceFailed.setDescription('A conference failure notification is generated when the maximum number of conferences are exceeded. ')
ciscoSrstMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 441, 2, 1))
ciscoSrstMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 441, 2, 2))
ciscoSrstMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 441, 2, 1, 1)).setObjects(("CISCO-SRST-MIB", "csrstConfGroup"), ("CISCO-SRST-MIB", "csrstNotifInfoGroup"), ("CISCO-SRST-MIB", "csrstSipConfGroup"), ("CISCO-SRST-MIB", "csrstActiveStatsGroup"), ("CISCO-SRST-MIB", "csrstMIBNotifsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSrstMIBCompliance = ciscoSrstMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSrstMIBCompliance.setDescription('The compliance statement for the Cisco Survivable Remote Site Telephony (SRST) MIB. ')
ciscoSrstMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 441, 2, 1, 2)).setObjects(("CISCO-SRST-MIB", "csrstNotifInfoGroup"), ("CISCO-SRST-MIB", "csrstSipConfGroup"), ("CISCO-SRST-MIB", "csrstActiveStatsGroup"), ("CISCO-SRST-MIB", "csrstMIBNotifsGroup"), ("CISCO-SRST-MIB", "csrstConfGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSrstMIBComplianceRev1 = ciscoSrstMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoSrstMIBComplianceRev1.setDescription('The compliance statement for the Cisco Survivable Remote Site Telephony (SRST) MIB. ')
csrstConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 441, 2, 2, 1)).setObjects(("CISCO-SRST-MIB", "csrstEnabled"), ("CISCO-SRST-MIB", "csrstVersion"), ("CISCO-SRST-MIB", "csrstIPAddressType"), ("CISCO-SRST-MIB", "csrstIPAddress"), ("CISCO-SRST-MIB", "csrstPortNumber"), ("CISCO-SRST-MIB", "csrstMaxConferences"), ("CISCO-SRST-MIB", "csrstMaxEphones"), ("CISCO-SRST-MIB", "csrstMaxDN"), ("CISCO-SRST-MIB", "csrstSipPhoneUnRegThreshold"), ("CISCO-SRST-MIB", "csrstCallFwdNoAnswer"), ("CISCO-SRST-MIB", "csrstCallFwdNoAnswerTo"), ("CISCO-SRST-MIB", "csrstCallFwdBusy"), ("CISCO-SRST-MIB", "csrstMohFilename"), ("CISCO-SRST-MIB", "csrstMohMulticastAddrType"), ("CISCO-SRST-MIB", "csrstMohMulticastAddr"), ("CISCO-SRST-MIB", "csrstMohMulticastPort"), ("CISCO-SRST-MIB", "csrstVoiceMailNumber"), ("CISCO-SRST-MIB", "csrstSystemMessagePrimary"), ("CISCO-SRST-MIB", "csrstSystemMessageSecondary"), ("CISCO-SRST-MIB", "csrstScriptName"), ("CISCO-SRST-MIB", "csrstSecondaryDialTone"), ("CISCO-SRST-MIB", "csrstTransferSystem"), ("CISCO-SRST-MIB", "csrstUserLocaleInfo"), ("CISCO-SRST-MIB", "csrstDateFormat"), ("CISCO-SRST-MIB", "csrstTimeFormat"), ("CISCO-SRST-MIB", "csrstInterdigitTo"), ("CISCO-SRST-MIB", "csrstBusyTo"), ("CISCO-SRST-MIB", "csrstAlertTo"), ("CISCO-SRST-MIB", "csrstXlateCalledNumber"), ("CISCO-SRST-MIB", "csrstXlateCallingNumber"), ("CISCO-SRST-MIB", "csrstAliasTag"), ("CISCO-SRST-MIB", "csrstAliasNumPattern"), ("CISCO-SRST-MIB", "csrstAliasAltNumber"), ("CISCO-SRST-MIB", "csrstAliasPreference"), ("CISCO-SRST-MIB", "csrstAliasHuntStopEnabled"), ("CISCO-SRST-MIB", "csrstAccessCodeType"), ("CISCO-SRST-MIB", "csrstAccessCode"), ("CISCO-SRST-MIB", "csrstAccessCodeDIDEnabled"), ("CISCO-SRST-MIB", "csrstLimitDNType"), ("CISCO-SRST-MIB", "csrstLimitDN"), ("CISCO-SRST-MIB", "csrstNotificationEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csrstConfGroup = csrstConfGroup.setStatus('deprecated')
if mibBuilder.loadTexts: csrstConfGroup.setDescription('A collection of objects which are used to show the current running configuration of Cisco SRST feature. ')
csrstNotifInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 441, 2, 2, 2)).setObjects(("CISCO-SRST-MIB", "csrstSysNotifSeverity"), ("CISCO-SRST-MIB", "csrstSysNotifReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csrstNotifInfoGroup = csrstNotifInfoGroup.setStatus('current')
if mibBuilder.loadTexts: csrstNotifInfoGroup.setDescription('A collection of objects which are used to show the severity and reason of a notifi- cation. ')
csrstActiveStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 441, 2, 2, 3)).setObjects(("CISCO-SRST-MIB", "csrstState"), ("CISCO-SRST-MIB", "csrstSipPhoneCurrentRegistered"), ("CISCO-SRST-MIB", "csrstSipCallLegs"), ("CISCO-SRST-MIB", "csrstTotalUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csrstActiveStatsGroup = csrstActiveStatsGroup.setStatus('current')
if mibBuilder.loadTexts: csrstActiveStatsGroup.setDescription('A collection of objects which are used to show the activity status of Cisco SRST or SIP SRST feature. ')
csrstSipConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 441, 2, 2, 4)).setObjects(("CISCO-SRST-MIB", "csrstSipRegSrvExpMax"), ("CISCO-SRST-MIB", "csrstSipRegSrvExpMin"), ("CISCO-SRST-MIB", "csrstSipIp2IpGlobalEnabled"), ("CISCO-SRST-MIB", "csrstSipSend300MultSupport"), ("CISCO-SRST-MIB", "csrstSipNetId"), ("CISCO-SRST-MIB", "csrstSipVoRegPoolIpAddrType"), ("CISCO-SRST-MIB", "csrstSipNetMask"), ("CISCO-SRST-MIB", "csrstSipProxySrvIpAddr"), ("CISCO-SRST-MIB", "csrstSipProxySrvPref"), ("CISCO-SRST-MIB", "csrstSipProxySrvMonitor"), ("CISCO-SRST-MIB", "csrstSipProxySrvAltIpAddr"), ("CISCO-SRST-MIB", "csrstSipDefaultPreference"), ("CISCO-SRST-MIB", "csrstSipVoRegPoolAppl"), ("CISCO-SRST-MIB", "csrstSipVoRegNumberListTag"), ("CISCO-SRST-MIB", "csrstSipVoRegNumberPattern"), ("CISCO-SRST-MIB", "csrstSipVoRegNumberPref"), ("CISCO-SRST-MIB", "csrstSipVoRegNumberHuntstopEnabled"), ("CISCO-SRST-MIB", "csrstSipVoRegPoolEdptTag"), ("CISCO-SRST-MIB", "csrstSipEndpointIpAddrType"), ("CISCO-SRST-MIB", "csrstSipEndpointIpAddress"), ("CISCO-SRST-MIB", "csrstSipEndpointDN"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csrstSipConfGroup = csrstSipConfGroup.setStatus('current')
if mibBuilder.loadTexts: csrstSipConfGroup.setDescription('A collection of objects which are used to show the current running configuration of Cisco SIP SRST feature. ')
csrstMIBNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 441, 2, 2, 5)).setObjects(("CISCO-SRST-MIB", "csrstStateChange"), ("CISCO-SRST-MIB", "csrstFailNotif"), ("CISCO-SRST-MIB", "csrstSipPhoneUnRegThresholdExceed"), ("CISCO-SRST-MIB", "csrstSipPhoneRegFailed"), ("CISCO-SRST-MIB", "csrstConferenceFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csrstMIBNotifsGroup = csrstMIBNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: csrstMIBNotifsGroup.setDescription('A collection of notifications for Cisco SRST or SIP SRST feature. ')
csrstConfGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 441, 2, 2, 6)).setObjects(("CISCO-SRST-MIB", "csrstEnabled"), ("CISCO-SRST-MIB", "csrstVersion"), ("CISCO-SRST-MIB", "csrstIPAddressType"), ("CISCO-SRST-MIB", "csrstIPAddress"), ("CISCO-SRST-MIB", "csrstPortNumber"), ("CISCO-SRST-MIB", "csrstMaxConferences"), ("CISCO-SRST-MIB", "csrstMaxEphones"), ("CISCO-SRST-MIB", "csrstMaxDN"), ("CISCO-SRST-MIB", "csrstSipPhoneUnRegThreshold"), ("CISCO-SRST-MIB", "csrstCallFwdNoAnswer"), ("CISCO-SRST-MIB", "csrstCallFwdNoAnswerTo"), ("CISCO-SRST-MIB", "csrstCallFwdBusy"), ("CISCO-SRST-MIB", "csrstMohFilename"), ("CISCO-SRST-MIB", "csrstMohMulticastAddrType"), ("CISCO-SRST-MIB", "csrstMohMulticastAddr"), ("CISCO-SRST-MIB", "csrstMohMulticastPort"), ("CISCO-SRST-MIB", "csrstVoiceMailNumber"), ("CISCO-SRST-MIB", "csrstSystemMessagePrimary"), ("CISCO-SRST-MIB", "csrstSystemMessageSecondary"), ("CISCO-SRST-MIB", "csrstScriptName"), ("CISCO-SRST-MIB", "csrstSecondaryDialTone"), ("CISCO-SRST-MIB", "csrstTransferSystem"), ("CISCO-SRST-MIB", "csrstDateFormat"), ("CISCO-SRST-MIB", "csrstTimeFormat"), ("CISCO-SRST-MIB", "csrstInterdigitTo"), ("CISCO-SRST-MIB", "csrstBusyTo"), ("CISCO-SRST-MIB", "csrstAlertTo"), ("CISCO-SRST-MIB", "csrstXlateCalledNumber"), ("CISCO-SRST-MIB", "csrstXlateCallingNumber"), ("CISCO-SRST-MIB", "csrstAliasTag"), ("CISCO-SRST-MIB", "csrstAliasNumPattern"), ("CISCO-SRST-MIB", "csrstAliasAltNumber"), ("CISCO-SRST-MIB", "csrstAliasPreference"), ("CISCO-SRST-MIB", "csrstAliasHuntStopEnabled"), ("CISCO-SRST-MIB", "csrstAccessCodeType"), ("CISCO-SRST-MIB", "csrstAccessCode"), ("CISCO-SRST-MIB", "csrstAccessCodeDIDEnabled"), ("CISCO-SRST-MIB", "csrstLimitDNType"), ("CISCO-SRST-MIB", "csrstLimitDN"), ("CISCO-SRST-MIB", "csrstNotificationEnabled"), ("CISCO-SRST-MIB", "csrstUserLocaleInfoRev1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csrstConfGroupRev1 = csrstConfGroupRev1.setStatus('current')
if mibBuilder.loadTexts: csrstConfGroupRev1.setDescription('A collection of objects which are used to show the current running configuration of Cisco SRST feature. ')
mibBuilder.exportSymbols("CISCO-SRST-MIB", ciscoSrstMIBNotifications=ciscoSrstMIBNotifications, csrstBusyTo=csrstBusyTo, csrstXlateCalledNumber=csrstXlateCalledNumber, csrstSysNotifSeverity=csrstSysNotifSeverity, csrstConfGroupRev1=csrstConfGroupRev1, csrstSipEndpointEntry=csrstSipEndpointEntry, csrstAliasNumPattern=csrstAliasNumPattern, csrstMohMulticastPort=csrstMohMulticastPort, csrstMaxEphones=csrstMaxEphones, csrstTotalUpTime=csrstTotalUpTime, csrstMaxDN=csrstMaxDN, csrstSipVoRegNumberHuntstopEnabled=csrstSipVoRegNumberHuntstopEnabled, csrstMIBNotifsGroup=csrstMIBNotifsGroup, csrstVersion=csrstVersion, csrstSipEndpointIpAddrType=csrstSipEndpointIpAddrType, csrstSipRegSrvExpMin=csrstSipRegSrvExpMin, csrstSipVoRegNumberPref=csrstSipVoRegNumberPref, csrstLimitDNEntry=csrstLimitDNEntry, csrstAliasHuntStopEnabled=csrstAliasHuntStopEnabled, csrstTransferSystem=csrstTransferSystem, ciscoSrstMIBObjects=ciscoSrstMIBObjects, csrstEnabled=csrstEnabled, csrstAccessCodeDIDEnabled=csrstAccessCodeDIDEnabled, ciscoSrstMIBGroups=ciscoSrstMIBGroups, csrstSipPhoneUnRegThreshold=csrstSipPhoneUnRegThreshold, csrstPortNumber=csrstPortNumber, csrstCallFwdBusy=csrstCallFwdBusy, csrstGlobal=csrstGlobal, csrstActiveStatsGroup=csrstActiveStatsGroup, csrstSipPhoneUnRegThresholdExceed=csrstSipPhoneUnRegThresholdExceed, csrstIPAddressType=csrstIPAddressType, csrstAccessCodeTable=csrstAccessCodeTable, csrstSipPhoneCurrentRegistered=csrstSipPhoneCurrentRegistered, SrstOperType=SrstOperType, csrstSipVoRegPoolEntry=csrstSipVoRegPoolEntry, csrstState=csrstState, csrstNotifInfoGroup=csrstNotifInfoGroup, csrstInterdigitTo=csrstInterdigitTo, csrstAccessCodeType=csrstAccessCodeType, csrstSipEndpointIpAddress=csrstSipEndpointIpAddress, csrstIPAddress=csrstIPAddress, csrstAlertTo=csrstAlertTo, csrstSipConfGroup=csrstSipConfGroup, csrstSipConf=csrstSipConf, csrstStateChange=csrstStateChange, csrstSysNotifReason=csrstSysNotifReason, csrstSipCallLegs=csrstSipCallLegs, csrstSecondaryDialTone=csrstSecondaryDialTone, csrstSipSend300MultSupport=csrstSipSend300MultSupport, csrstSipVoRegNumberListTable=csrstSipVoRegNumberListTable, csrstSipPhoneRegFailed=csrstSipPhoneRegFailed, csrstSipVoRegPoolEdptTag=csrstSipVoRegPoolEdptTag, csrstSipEndpointTable=csrstSipEndpointTable, csrstSipProxySrvIpAddr=csrstSipProxySrvIpAddr, csrstUserLocaleInfoRev1=csrstUserLocaleInfoRev1, csrstAliasAltNumber=csrstAliasAltNumber, csrstSipVoRegPoolIpAddrType=csrstSipVoRegPoolIpAddrType, csrstAliasIndex=csrstAliasIndex, csrstSipEndpointDN=csrstSipEndpointDN, csrstSipProxySrvAltIpAddr=csrstSipProxySrvAltIpAddr, csrstSipVoRegPoolTable=csrstSipVoRegPoolTable, csrstActiveStats=csrstActiveStats, csrstConf=csrstConf, ciscoSrstMIBConformance=ciscoSrstMIBConformance, csrstVoiceMailNumber=csrstVoiceMailNumber, csrstSipProxySrvPref=csrstSipProxySrvPref, csrstSipRegSrvExpMax=csrstSipRegSrvExpMax, ciscoSrstMIBCompliances=ciscoSrstMIBCompliances, csrstDateFormat=csrstDateFormat, ciscoSrstMIBCompliance=ciscoSrstMIBCompliance, csrstSipNetMask=csrstSipNetMask, csrstConfGroup=csrstConfGroup, csrstSystemMessageSecondary=csrstSystemMessageSecondary, csrstLimitDNTable=csrstLimitDNTable, csrstSipVoRegNumberListEntry=csrstSipVoRegNumberListEntry, csrstCallFwdNoAnswer=csrstCallFwdNoAnswer, csrstAliasTable=csrstAliasTable, csrstScriptName=csrstScriptName, csrstAliasEntry=csrstAliasEntry, csrstMohMulticastAddrType=csrstMohMulticastAddrType, csrstMohFilename=csrstMohFilename, csrstSipProxySrvMonitor=csrstSipProxySrvMonitor, csrstSipVoRegNumberListIndex=csrstSipVoRegNumberListIndex, ciscoSrstMIBComplianceRev1=ciscoSrstMIBComplianceRev1, csrstMaxConferences=csrstMaxConferences, csrstLimitDNType=csrstLimitDNType, csrstSystemMessagePrimary=csrstSystemMessagePrimary, csrstSipIp2IpGlobalEnabled=csrstSipIp2IpGlobalEnabled, csrstAccessCode=csrstAccessCode, ciscoSrstMIB=ciscoSrstMIB, csrstAliasTag=csrstAliasTag, csrstConferenceFailed=csrstConferenceFailed, csrstSipEndpointTag=csrstSipEndpointTag, csrstAccessCodeEntry=csrstAccessCodeEntry, csrstXlateCallingNumber=csrstXlateCallingNumber, csrstMohMulticastAddr=csrstMohMulticastAddr, csrstSipVoRegPoolAppl=csrstSipVoRegPoolAppl, csrstSipVoRegPoolTag=csrstSipVoRegPoolTag, csrstFailNotif=csrstFailNotif, csrstAliasPreference=csrstAliasPreference, csrstSipVoRegNumberPattern=csrstSipVoRegNumberPattern, csrstLimitDN=csrstLimitDN, csrstSipNetId=csrstSipNetId, csrstSipDefaultPreference=csrstSipDefaultPreference, csrstCallFwdNoAnswerTo=csrstCallFwdNoAnswerTo, csrstUserLocaleInfo=csrstUserLocaleInfo, csrstTimeFormat=csrstTimeFormat, csrstNotificationEnabled=csrstNotificationEnabled, csrstSipVoRegNumberListTag=csrstSipVoRegNumberListTag, PYSNMP_MODULE_ID=ciscoSrstMIB)
