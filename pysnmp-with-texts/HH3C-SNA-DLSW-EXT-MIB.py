#
# PySNMP MIB module HH3C-SNA-DLSW-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-SNA-DLSW-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:29:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
dlswTConnConfigEntry, LFSize, dlswTConnTcpConfigEntry, TAddress, MacAddressNC, dlswTConnOperEntry = mibBuilder.importSymbols("DLSW-MIB", "dlswTConnConfigEntry", "LFSize", "dlswTConnTcpConfigEntry", "TAddress", "MacAddressNC", "dlswTConnOperEntry")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Counter64, ModuleIdentity, iso, TimeTicks, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, IpAddress, Unsigned32, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "ModuleIdentity", "iso", "TimeTicks", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "IpAddress", "Unsigned32", "Bits", "Gauge32")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
hh3cDlswExt = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 62))
hh3cDlswExt.setRevisions(('2005-07-20 19:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cDlswExt.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: hh3cDlswExt.setLastUpdated('200507201900Z')
if mibBuilder.loadTexts: hh3cDlswExt.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cDlswExt.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cDlswExt.setDescription('The MIB module for management of H3C specific Data Link Switching protocol enhancements. DLSw is described in RFC 1795, RFC 2024 and RFC2166.')
hh3cDlswExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1))
hh3cdeNode = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1))
hh3cdeTConn = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2))
hh3cdeBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3))
hh3cdeQllc = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4))
hh3cdeSdlc = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5))
hh3cdeLlc2 = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6))
hh3cdeReachableCache = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7))
hh3cdeEthernetBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8))
hh3cdeNodeVendorID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeVendorID.setReference('DLSW: Switch-to-Switch Protocol RFC 1795.')
if mibBuilder.loadTexts: hh3cdeNodeVendorID.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeVendorID.setDescription("The value identifies the manufacturer's IEEE-assigned Organizationally Unique Identifier (OUI) of this DLSw. This information is reported in DLSw Capabilities Exchange.")
hh3cdeNodeIpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeIpAddrType.setDescription('The type of ip address: IPv4 or IPv6.')
hh3cdeNodeLocalAddr = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 3), InetAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeLocalAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeLocalAddr.setDescription('Local peer ip address. This ip address must have been configured for a port on the router. If no local peer ip address is configured, then this object will be the empty string.')
hh3cdeNodePriority = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 5), ValueRangeConstraint(65535, 65535), )).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodePriority.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodePriority.setDescription('Peer priority advertised to remote peers in the DLSw Capabilities Exchange. If an end station can reach through more than one peer, the priority of each peer will be considered when a circuit is established. A lower priority indicates that peer will be the preferred choice if there are more than one path to the destination. A value of 65535 indicates the value is meaningless.')
hh3cdeNodeInitPacingWindow = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(65535, 65535), )).clone(40)).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeInitPacingWindow.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeInitPacingWindow.setDescription('Initial pacing window size. This is the starting size of the pacing window. DLSw uses an adaptive pacing flow control algorithm that automatically adjusts to congestion levels in the network. Pacing windows are used to control how many packets may be sent to a peer before acknowlegement. A value of 65535 indicates the value is meaningless.')
hh3cdeNodeMaxPacingWindow = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 2000), ValueRangeConstraint(65535, 65535), )).clone(50)).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeMaxPacingWindow.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeMaxPacingWindow.setDescription('Maximum pacing window size. This is the largest size that the pacing window will grow to. DLSw uses an adaptive pacing flow control algorithm that automatically adjusts to congestion levels in the network. Pacing windows are used to control how many packets may be sent to a peer before acknowlegement.')
hh3cdeNodeKeepAliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2000), ValueRangeConstraint(65535, 65535), )).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeKeepAliveInterval.setDescription('Default remote peer keepalive interval in seconds. The keepalive parameter refers to how often DLSw peers send peer keep alives to each other. These periodic messages allow DLSw to keep track of the state of all peers. If set to zero, no keepalives are sent. A value of 65535 indicates the value is meaningless.')
hh3cdeNodePermitDynamic = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 65535))).clone(namedValues=NamedValues(("permitDynamic", 1), ("forbidDynamic", 2), ("unknown", 65535))).clone('forbidDynamic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodePermitDynamic.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodePermitDynamic.setDescription('To accept connections from non-configured remote peer when permitDynamic is specified.')
hh3cdeNodeConnTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeConnTimeout.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeConnTimeout.setDescription('Define connected state timer.')
hh3cdeNodeLocalPendTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeLocalPendTimeout.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeLocalPendTimeout.setDescription('Define connected state timer.')
hh3cdeNodeRemotePendTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeRemotePendTimeout.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeRemotePendTimeout.setDescription('Define connected state timer.')
hh3cdeNodeSnaCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeSnaCacheTimeout.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeSnaCacheTimeout.setDescription('Define connected state timer.')
hh3cdeNodeExplorerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeExplorerTimeout.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeExplorerTimeout.setDescription('Define explorer timer.')
hh3cdeNodeExplorerWaitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeExplorerWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeExplorerWaitTimeout.setDescription('Define explorer waiting timer.')
hh3cdeNodeConfigSapList = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="FF000000000000000000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeConfigSapList.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeConfigSapList.setDescription('The SAP list indicates which SAPs are allowed. Only SAPs with even numbers are represented, in the form of the most significant bit of the first octet representing the SAP 0, the next most significant bit representing the SAP 2, to the least significant bit of the last octet representing the SAP 254. Data link switching is allowed for those SAPs which have one in its corresponding bit, not allowed otherwise. The whole SAP list has to be changed together. Changing the SAP list affects only new circuit establishments and has no effect on established circuits. This list can be used to restrict specific partners from knowing about all the SAPs used by DLSw on all its interfaces (these are represented in hh3cdeIfSapList for each interface). For instance, one may want to run NetBIOS with some partners but not others. If a node supports sending run-time capabilities exchange messages, changes to this object should cause that action. When to start the run-time capabilities exchange is implementation-specific. The DEFVAL below indicates support for SAPs 0, 2, 4, 6, 8, A, C and E.')
hh3cdeNodeMaxTransmission = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeMaxTransmission.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeMaxTransmission.setDescription('The maximum retry times for TCP packet. Default value is 5.')
hh3cdeNodeMulticastStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeMulticastStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeMulticastStatus.setDescription('Multicast support status. It is disabled by default.')
hh3cdeNodeMulticastAddress = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 18), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeMulticastAddress.setDescription('Multicast address. Default is 224.0.10.0. When the hh3cdeNodeMulticastStatus is disabled, the multicast address is reset to 0.0.0.0.')
hh3cdeNodeResetTcpAll = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeResetTcpAll.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeResetTcpAll.setDescription('Reset all TCP circuit switch. Any return value is meaningless.')
hh3cdeNodeStCapTcpNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeStCapTcpNum.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeStCapTcpNum.setDescription('Tcp number reported in DLSw Capabilities Exchange.')
hh3cdeNodeTcpQueueMax = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 1, 21), Integer32().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cdeNodeTcpQueueMax.setStatus('current')
if mibBuilder.loadTexts: hh3cdeNodeTcpQueueMax.setDescription('The max length of TCP queue.')
hh3cdeTConnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1), )
if mibBuilder.loadTexts: hh3cdeTConnConfigTable.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnConfigTable.setDescription('This table defines the peer transport connections that will be initiated or accepted by this DLSw. This table augments dlswTConnConfigTable.')
hh3cdeTConnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1, 1), )
dlswTConnConfigEntry.registerAugmentions(("HH3C-SNA-DLSW-EXT-MIB", "hh3cdeTConnConfigEntry"))
hh3cdeTConnConfigEntry.setIndexNames(*dlswTConnConfigEntry.getIndexNames())
if mibBuilder.loadTexts: hh3cdeTConnConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnConfigEntry.setDescription('A list of objects that define specific configuration for a DLSw peer transport connection.')
hh3cdeTConnConfigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeTConnConfigVersion.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnConfigVersion.setDescription("This value identifies which version (first octet) and release (second octet) of the DLSw standard is supported by this partner DLSw. This information is obtained from a DLSw Capabilities Exchange message received from the partner DLSw. A string of zero length is returned before a Capabilities Exchange message is received, or if one is never received. A conceptual row with a hh3cdeTConnOperState of 'connected' but a zero length partner version indicates that the partner is a non-standard DLSw partner. If an implementation chooses to keep hh3cdeTConnOperEntrys in the 'disconnected' state, this value should remain unchanged.")
hh3cdeTConnConfigPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeTConnConfigPriority.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnConfigPriority.setDescription('The priority for remote peer.')
hh3cdeTConnConfigLfSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1, 1, 3), LFSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeTConnConfigLfSize.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnConfigLfSize.setDescription('The largest frame size.')
hh3cdeTConnConfigKeepaliveIntval = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1200)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeTConnConfigKeepaliveIntval.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnConfigKeepaliveIntval.setDescription('The keepalive interval value.')
hh3cdeTConnConfigBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeTConnConfigBackup.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnConfigBackup.setDescription('The current remote peer is configured as the backup of another configured remote peer.')
hh3cdeTConnConfigBackupTAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1, 1, 6), TAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeTConnConfigBackupTAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnConfigBackupTAddr.setDescription('It is the ip address of a configured remote peer of which the current remote peer is configrued as backup.')
hh3cdeTConnConfigBackupLinger = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(5)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeTConnConfigBackupLinger.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnConfigBackupLinger.setDescription('Backup peer linger.')
hh3cdeTConnOperTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2), )
if mibBuilder.loadTexts: hh3cdeTConnOperTable.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnOperTable.setDescription('A list of peer transport connections. Each connected peer will create a conceptual row in the table. When the peer disconnects, the row will be deleted from the table. This table augments dlswTConnOperTable.')
hh3cdeTConnOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1), )
dlswTConnOperEntry.registerAugmentions(("HH3C-SNA-DLSW-EXT-MIB", "hh3cdeTConnOperEntry"))
hh3cdeTConnOperEntry.setIndexNames(*dlswTConnOperEntry.getIndexNames())
if mibBuilder.loadTexts: hh3cdeTConnOperEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnOperEntry.setDescription('A list of objects that contain spefific operational information for a DLSw peer transport connection.')
hh3cdeTConnOperPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("configured", 1), ("learningDynamic", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperPeerType.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnOperPeerType.setDescription("The current remote peer is configured when the value is 'configured'.")
hh3cdeTConnOperVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperVendorID.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnOperVendorID.setDescription("The value identifies the manufacturer's IEEE-assigned Organizationally Unique Identifier (OUI) of remote peer.")
hh3cdeTConnOperVersionString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperVersionString.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnOperVersionString.setDescription('Version information of remote peer. The length up to 512 bytes.')
hh3cdeTConnOperUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperUpTime.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnOperUpTime.setDescription("The amount of time (in seconds) since this transport connection last entered the 'connected' state.")
hh3cdeTConnOperMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 5), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnOperMulticastAddress.setDescription('When remote peer supports DLSw2.0, this node identifies its multicast address.')
hh3cdeTConnOperStCapTcpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperStCapTcpNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnOperStCapTcpNumber.setDescription('Number of tcp supported when capabilities exchanging.')
hh3cdeTConnOperRecvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperRecvPkts.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnOperRecvPkts.setDescription('The number of Switch-to-Switch Protocol (SSP) messages received on this tcp transport connection.')
hh3cdeTConnOperSendPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperSendPkts.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnOperSendPkts.setDescription('The number of SSP messages sent on this tcp transport connection.')
hh3cdeTConnOperDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeTConnOperDropPkts.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnOperDropPkts.setDescription('The number of SSP messages dropped on this tcp transport connection.')
hh3cdeTConnTcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 3), )
if mibBuilder.loadTexts: hh3cdeTConnTcpConfigTable.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnTcpConfigTable.setDescription('This table defines the TCP transport connections that will be either initiated by or accepted by this DSLw. It augments the entries in dlswTConnConfigTable whose domain is dlswTCPDomain. In other words for each conceptual row in the dlswTConnConfigTable, if the dlswTConnConfigTDomain is dlswTCPDomain, that conceptual row will be augmented by this table. dlswTCPDomain, dlswTConnConfigTable, and dlswTConnConfigTDomain are all imported from DLSW-MIB (RFC 2024). This table augments dlswTConnTcpConfigTable.')
hh3cdeTConnTcpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 3, 1), )
dlswTConnTcpConfigEntry.registerAugmentions(("HH3C-SNA-DLSW-EXT-MIB", "hh3cdeTConnTcpConfigEntry"))
hh3cdeTConnTcpConfigEntry.setIndexNames(*dlswTConnTcpConfigEntry.getIndexNames())
if mibBuilder.loadTexts: hh3cdeTConnTcpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnTcpConfigEntry.setDescription('A list of objects that define specific configuration for a DLSw peer transport connection within the dlswTCPDomain. dlswTCPDomain is imported from DLSW-MIB (RFC 2024).')
hh3cdeTConnTcpConfigQueueMax = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 2000)).clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeTConnTcpConfigQueueMax.setStatus('current')
if mibBuilder.loadTexts: hh3cdeTConnTcpConfigQueueMax.setDescription('Maximum output TCP queue size for this remote peer. For DLSw over TCP encapsulation, packets may be queued due to congestion of the TCP network. This variable is used to set the output queue maximum of the underlying TCP connection for the peer represented by the conceptual row.')
hh3cdeBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3, 1), )
if mibBuilder.loadTexts: hh3cdeBridgeTable.setStatus('current')
if mibBuilder.loadTexts: hh3cdeBridgeTable.setDescription('A list of bridge group which is serving for DLSw.')
hh3cdeBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3, 1, 1), ).setIndexNames((0, "HH3C-SNA-DLSW-EXT-MIB", "hh3cdeBridgeNumIndex"))
if mibBuilder.loadTexts: hh3cdeBridgeEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cdeBridgeEntry.setDescription('A list of bridge information.')
hh3cdeBridgeNumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hh3cdeBridgeNumIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cdeBridgeNumIndex.setDescription('This value identifies the bridge number.')
hh3cdeBridgeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeBridgeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cdeBridgeRowStatus.setDescription('RowStatus.')
hh3cdeBridgeIfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3, 2), )
if mibBuilder.loadTexts: hh3cdeBridgeIfTable.setStatus('current')
if mibBuilder.loadTexts: hh3cdeBridgeIfTable.setDescription('The list of interface on which DLSw is active.')
hh3cdeBridgeIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cdeBridgeIfEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cdeBridgeIfEntry.setDescription('The list of bridge interface information.')
hh3cdeBridgeIfBrgGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeBridgeIfBrgGrp.setStatus('current')
if mibBuilder.loadTexts: hh3cdeBridgeIfBrgGrp.setDescription('This value identifies the bridge number attached to the interface.')
hh3cdeBridgeIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeBridgeIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cdeBridgeIfRowStatus.setDescription('RowStatus.')
hh3cdeQllcTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4, 1), )
if mibBuilder.loadTexts: hh3cdeQllcTable.setStatus('current')
if mibBuilder.loadTexts: hh3cdeQllcTable.setDescription('The table defines attributes related for those QLLC that participate in data link switching.')
hh3cdeQllcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cdeQllcEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cdeQllcEntry.setDescription('The ifIndex belongs to the interface which link protocol is x.25.')
hh3cQllcX121Address = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQllcX121Address.setStatus('current')
if mibBuilder.loadTexts: hh3cQllcX121Address.setDescription('X.121 address.')
hh3cQllcLocalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4, 1, 1, 2), MacAddressNC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQllcLocalMac.setStatus('current')
if mibBuilder.loadTexts: hh3cQllcLocalMac.setDescription('The virtual MAC address used to represent the QLLC-attached link station to the rest of the DLSw network.')
hh3cQllcLocalSap = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQllcLocalSap.setStatus('current')
if mibBuilder.loadTexts: hh3cQllcLocalSap.setDescription('The SAP used to represent this link station.')
hh3cQllcRemoteMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4, 1, 1, 4), MacAddressNC().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQllcRemoteMac.setStatus('current')
if mibBuilder.loadTexts: hh3cQllcRemoteMac.setDescription('The MAC address to which DLSw should attempt to connect this link station. If this information is not available, a length of zero for this object should be returned.')
hh3cQllcRemoteSap = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4, 1, 1, 5), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 1), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQllcRemoteSap.setStatus('current')
if mibBuilder.loadTexts: hh3cQllcRemoteSap.setDescription('The SAP of the remote station to which this link station should be connected. If this information is not available, a length of zero for this object should be returned.')
hh3cQllcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 4, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQllcRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cQllcRowStatus.setDescription('RowStatus.')
hh3cdeSdlcPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1), )
if mibBuilder.loadTexts: hh3cdeSdlcPortTable.setStatus('current')
if mibBuilder.loadTexts: hh3cdeSdlcPortTable.setDescription('The table defines parameters for the interfaces whose link protocol is SDLC.')
hh3cdeSdlcPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cdeSdlcPortEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cdeSdlcPortEntry.setDescription('Sdlc port entry.')
hh3cdeSdlcPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("seconday", 2), ("norole", 3))).clone('norole')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortRole.setStatus('current')
if mibBuilder.loadTexts: hh3cdeSdlcPortRole.setDescription('The SDLC role of interface.')
hh3cdeSdlcPortSendWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortSendWindow.setStatus('current')
if mibBuilder.loadTexts: hh3cdeSdlcPortSendWindow.setDescription('Size of local send window.')
hh3cdeSdlcPortModulo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 128))).clone(namedValues=NamedValues(("m8", 8), ("m128", 128))).clone('m8')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortModulo.setStatus('current')
if mibBuilder.loadTexts: hh3cdeSdlcPortModulo.setDescription('Size of modulus.')
hh3cdeSdlcPortMaxPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17600)).clone(265)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortMaxPdu.setStatus('current')
if mibBuilder.loadTexts: hh3cdeSdlcPortMaxPdu.setDescription('Maximum bytes for incoming frames.')
hh3cdeSdlcPortMaxSendQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 255)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortMaxSendQueue.setStatus('current')
if mibBuilder.loadTexts: hh3cdeSdlcPortMaxSendQueue.setDescription('Size of hold queue.')
hh3cdeSdlcPortMaxTransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortMaxTransmission.setStatus('current')
if mibBuilder.loadTexts: hh3cdeSdlcPortMaxTransmission.setDescription('Number of times to retry an operation.')
hh3cdeSdlcPortSimultaneousEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortSimultaneousEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cdeSdlcPortSimultaneousEnable.setDescription('Activate SDLC two-way simultaneous mode.')
hh3cdeSdlcPortTimerACK = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(3000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortTimerACK.setStatus('current')
if mibBuilder.loadTexts: hh3cdeSdlcPortTimerACK.setDescription('Time to wait for a reply to a frame.')
hh3cdeSdlcPortTimerLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(500)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortTimerLifeTime.setStatus('current')
if mibBuilder.loadTexts: hh3cdeSdlcPortTimerLifeTime.setDescription('Time to wait for a reply used by secondary station.')
hh3cdeSdlcPortTimerPollPause = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortTimerPollPause.setStatus('current')
if mibBuilder.loadTexts: hh3cdeSdlcPortTimerPollPause.setDescription('Time between polls for each secondary SDLC station.')
hh3cdeSdlcPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 5, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeSdlcPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cdeSdlcPortRowStatus.setDescription('RowStatus.')
hh3cdeLlc2PortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1), )
if mibBuilder.loadTexts: hh3cdeLlc2PortTable.setStatus('current')
if mibBuilder.loadTexts: hh3cdeLlc2PortTable.setDescription('This table defines parameters for the Ethernet interface.')
hh3cdeLlc2PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cdeLlc2PortEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cdeLlc2PortEntry.setDescription('LLC2 port entry.')
hh3cdeLlc2PortMaxAck = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortMaxAck.setStatus('current')
if mibBuilder.loadTexts: hh3cdeLlc2PortMaxAck.setDescription('Maximum of I-frames received before ACK.')
hh3cdeLlc2PortMaxPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1700)).clone(1493)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortMaxPdu.setStatus('current')
if mibBuilder.loadTexts: hh3cdeLlc2PortMaxPdu.setDescription('Maximum of LLC2 pdu length.')
hh3cdeLlc2PortMaxSendQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 200)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortMaxSendQueue.setStatus('current')
if mibBuilder.loadTexts: hh3cdeLlc2PortMaxSendQueue.setDescription('Queue for sending llc2 I-frames.')
hh3cdeLlc2PortMaxTransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortMaxTransmission.setStatus('current')
if mibBuilder.loadTexts: hh3cdeLlc2PortMaxTransmission.setDescription('Retry times of operations.')
hh3cdeLlc2PortModulo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 128))).clone(namedValues=NamedValues(("m8", 8), ("m128", 128))).clone('m128')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortModulo.setStatus('current')
if mibBuilder.loadTexts: hh3cdeLlc2PortModulo.setDescription('Modulus of LLC2.')
hh3cdeLlc2PortReceiveWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortReceiveWindow.setStatus('current')
if mibBuilder.loadTexts: hh3cdeLlc2PortReceiveWindow.setDescription('Maximum number of I-frames to send before received ACK.')
hh3cdeLlc2PortTimerAck = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(200)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerAck.setStatus('current')
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerAck.setDescription('Waiting for ACK time after sending an I-frame.')
hh3cdeLlc2PortTimerAckDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(100)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerAckDelay.setStatus('current')
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerAckDelay.setDescription('Maximum time allows I-frames incoming without replay ACK.')
hh3cdeLlc2PortTimerDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(100)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerDetect.setStatus('current')
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerDetect.setDescription('Detect the link status.')
hh3cdeLlc2PortTimerBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(300)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerBusy.setStatus('current')
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerBusy.setDescription('Waiting time while other LLC2 station is in busy state.')
hh3cdeLlc2PortTimerPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(5000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerPoll.setStatus('current')
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerPoll.setDescription('Waiting time after a P frame is sent.')
hh3cdeLlc2PortTimerReject = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(500)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerReject.setStatus('current')
if mibBuilder.loadTexts: hh3cdeLlc2PortTimerReject.setDescription('Waiting time after a REJ frame is sent.')
hh3cdeLlc2PortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 6, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeLlc2PortRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cdeLlc2PortRowStatus.setDescription('RowStatus.')
hh3cdeRchCacheStat = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 1))
hh3cdeRchCacheMaxIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeRchCacheMaxIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cdeRchCacheMaxIndex.setDescription('Maximum of hh3cdeRchCacheIndex.')
hh3cdeRchCacheNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeRchCacheNextIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cdeRchCacheNextIndex.setDescription('The next value of hh3cdeRchCacheIndex to be assigned by the agent. A retrieval of this object atomically reserves the returned value for use by the manager to create a row in hh3cdeRchCacheTable. This makes it possible for the agent to control the index space of the MAC address cache, yet allows the manager to administratively create new rows.')
hh3cdeRchCacheTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3), )
if mibBuilder.loadTexts: hh3cdeRchCacheTable.setStatus('current')
if mibBuilder.loadTexts: hh3cdeRchCacheTable.setDescription('Reachable cache table.')
hh3cdeRchCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3, 1), ).setIndexNames((0, "HH3C-SNA-DLSW-EXT-MIB", "hh3cdeRchCacheIndex"))
if mibBuilder.loadTexts: hh3cdeRchCacheEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cdeRchCacheEntry.setDescription('Reachable cache entry.')
hh3cdeRchCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cdeRchCacheIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cdeRchCacheIndex.setDescription('Index of reachable cache entry.')
hh3cdeRchCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("found", 1), ("verify", 2), ("noCacheInfo", 3), ("exploring", 4), ("waiting", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeRchCacheStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cdeRchCacheStatus.setDescription('Current status of reachable cache entry.')
hh3cdeRchCacheRemainTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeRchCacheRemainTime.setStatus('current')
if mibBuilder.loadTexts: hh3cdeRchCacheRemainTime.setDescription('Remain time of reachable cache entry.')
hh3cdeRchCacheMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3, 1, 4), MacAddressNC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeRchCacheMac.setStatus('current')
if mibBuilder.loadTexts: hh3cdeRchCacheMac.setDescription('MAC address of reachable cache entry.')
hh3cdeRchCacheRemoteIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeRchCacheRemoteIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hh3cdeRchCacheRemoteIpAddrType.setDescription('Remote peer ip address type.')
hh3cdeRchCacheRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeRchCacheRemoteIp.setStatus('current')
if mibBuilder.loadTexts: hh3cdeRchCacheRemoteIp.setDescription('Remote peer ip address of reachable cache entry.')
hh3cdeRchCacheRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 7, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeRchCacheRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cdeRchCacheRowStatus.setDescription('RowStatus.')
hh3cdeEBMacMapStat = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 1))
hh3cdeEBMacMapMaxIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeEBMacMapMaxIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cdeEBMacMapMaxIndex.setDescription('Maximum of hh3cdeEBMacMapIndex.')
hh3cdeEBMacMapNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cdeEBMacMapNextIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cdeEBMacMapNextIndex.setDescription('The next value of hh3cdeEBMacMapIndex to be assigned by the agent. A retrieval of this object atomically reserves the returned value for use by the manager to create a row in hh3cdeEBMacMapTable. This makes it possible for the agent to control the index space of the MAC mapping tables, yet allows the manager to administratively create new rows.')
hh3cdeEBIfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 3), )
if mibBuilder.loadTexts: hh3cdeEBIfTable.setStatus('current')
if mibBuilder.loadTexts: hh3cdeEBIfTable.setDescription('Information of interface which works for DLSw Ethernet redundancy.')
hh3cdeEBIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cdeEBIfEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cdeEBIfEntry.setDescription('Parameters defined for DLSw Ethernet redundancy interface.')
hh3cdeEBMulticastMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 3, 1, 1), MacAddressNC().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeEBMulticastMac.setStatus('current')
if mibBuilder.loadTexts: hh3cdeEBMulticastMac.setDescription("Multicast MAC address configured for the Ethernet redundancy of dlsw module. When Ethernet redundancy is inactive, its value is '000000000000'H. To active Ethernet redundancy, give it a valid multicast MAC address.")
hh3cdeEBPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeEBPriority.setStatus('current')
if mibBuilder.loadTexts: hh3cdeEBPriority.setDescription('Priority configured for the Ethernet redundancy of DLSw module.')
hh3cdeEBtimer = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000)).clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeEBtimer.setStatus('current')
if mibBuilder.loadTexts: hh3cdeEBtimer.setDescription('Timer for the Ethernet redundancy of DLSw module.')
hh3cdeEBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeEBRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cdeEBRowStatus.setDescription('RowStatus.')
hh3cdeEBMacMapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 4), )
if mibBuilder.loadTexts: hh3cdeEBMacMapTable.setStatus('current')
if mibBuilder.loadTexts: hh3cdeEBMacMapTable.setDescription('MAC address mapping table.')
hh3cdeEBMacMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-SNA-DLSW-EXT-MIB", "hh3cdeEBMacMapIndex"))
if mibBuilder.loadTexts: hh3cdeEBMacMapEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cdeEBMacMapEntry.setDescription('MAC address mapping entry.')
hh3cdeEBMacMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cdeEBMacMapIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cdeEBMacMapIndex.setDescription('Index of MAC address mapping entry.')
hh3cdeEBMacMapLocalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 4, 1, 2), MacAddressNC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeEBMacMapLocalMac.setStatus('current')
if mibBuilder.loadTexts: hh3cdeEBMacMapLocalMac.setDescription('Local MAC address in MAC address mapping. When creating a new conceptual row, hh3cdeEBMacMapLocalMac and hh3cdeEBMacMapRemoteMac should be set simultaneously.')
hh3cdeEBMacMapRemoteMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 4, 1, 3), MacAddressNC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeEBMacMapRemoteMac.setStatus('current')
if mibBuilder.loadTexts: hh3cdeEBMacMapRemoteMac.setDescription('Remote MAC address of MAC address mapping. When creating a new conceptual row, hh3cdeEBMacMapLocalMac and hh3cdeEBMacMapRemoteMac should be set simultaneously.')
hh3cdeEBMacMapNeighbour = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 4, 1, 4), MacAddressNC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeEBMacMapNeighbour.setStatus('current')
if mibBuilder.loadTexts: hh3cdeEBMacMapNeighbour.setDescription('Neighbour of MAC address mapping.')
hh3cdeEBMacMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 62, 1, 8, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cdeEBMacMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cdeEBMacMapRowStatus.setDescription('Status of MAC address mapping entry.')
mibBuilder.exportSymbols("HH3C-SNA-DLSW-EXT-MIB", hh3cdeLlc2PortTimerReject=hh3cdeLlc2PortTimerReject, hh3cdeSdlcPortRowStatus=hh3cdeSdlcPortRowStatus, hh3cdeRchCacheRowStatus=hh3cdeRchCacheRowStatus, hh3cdeRchCacheTable=hh3cdeRchCacheTable, hh3cdeTConnConfigLfSize=hh3cdeTConnConfigLfSize, hh3cdeRchCacheIndex=hh3cdeRchCacheIndex, hh3cdeTConnOperMulticastAddress=hh3cdeTConnOperMulticastAddress, hh3cdeEBMacMapRowStatus=hh3cdeEBMacMapRowStatus, hh3cdeEBMacMapNeighbour=hh3cdeEBMacMapNeighbour, hh3cdeEBRowStatus=hh3cdeEBRowStatus, hh3cdeTConnConfigPriority=hh3cdeTConnConfigPriority, hh3cdeTConnOperDropPkts=hh3cdeTConnOperDropPkts, hh3cdeNodeConfigSapList=hh3cdeNodeConfigSapList, hh3cdeEBMacMapNextIndex=hh3cdeEBMacMapNextIndex, hh3cdeTConnOperRecvPkts=hh3cdeTConnOperRecvPkts, hh3cdeTConnTcpConfigQueueMax=hh3cdeTConnTcpConfigQueueMax, hh3cdeNodePermitDynamic=hh3cdeNodePermitDynamic, hh3cdeEBMacMapLocalMac=hh3cdeEBMacMapLocalMac, hh3cDlswExtMIBObjects=hh3cDlswExtMIBObjects, hh3cdeSdlcPortTimerPollPause=hh3cdeSdlcPortTimerPollPause, hh3cdeLlc2PortTimerAck=hh3cdeLlc2PortTimerAck, hh3cdeTConnTcpConfigTable=hh3cdeTConnTcpConfigTable, hh3cQllcRowStatus=hh3cQllcRowStatus, hh3cdeTConnConfigBackupLinger=hh3cdeTConnConfigBackupLinger, hh3cdeNodeIpAddrType=hh3cdeNodeIpAddrType, hh3cdeTConnOperStCapTcpNumber=hh3cdeTConnOperStCapTcpNumber, hh3cdeTConnConfigKeepaliveIntval=hh3cdeTConnConfigKeepaliveIntval, hh3cdeRchCacheEntry=hh3cdeRchCacheEntry, hh3cQllcRemoteSap=hh3cQllcRemoteSap, hh3cdeTConnOperUpTime=hh3cdeTConnOperUpTime, hh3cdeBridgeIfEntry=hh3cdeBridgeIfEntry, hh3cdeEBMacMapEntry=hh3cdeEBMacMapEntry, hh3cdeNode=hh3cdeNode, hh3cdeSdlcPortTable=hh3cdeSdlcPortTable, hh3cdeTConnTcpConfigEntry=hh3cdeTConnTcpConfigEntry, hh3cdeSdlcPortSendWindow=hh3cdeSdlcPortSendWindow, hh3cdeLlc2PortTimerDetect=hh3cdeLlc2PortTimerDetect, hh3cdeTConnOperVersionString=hh3cdeTConnOperVersionString, hh3cdeNodeLocalAddr=hh3cdeNodeLocalAddr, hh3cdeRchCacheRemoteIpAddrType=hh3cdeRchCacheRemoteIpAddrType, hh3cdeNodeMaxTransmission=hh3cdeNodeMaxTransmission, hh3cdeQllcTable=hh3cdeQllcTable, hh3cdeNodeMaxPacingWindow=hh3cdeNodeMaxPacingWindow, hh3cdeSdlcPortTimerLifeTime=hh3cdeSdlcPortTimerLifeTime, hh3cdeBridgeIfBrgGrp=hh3cdeBridgeIfBrgGrp, hh3cdeBridgeIfRowStatus=hh3cdeBridgeIfRowStatus, hh3cdeQllc=hh3cdeQllc, hh3cdeEthernetBackup=hh3cdeEthernetBackup, hh3cdeBridgeRowStatus=hh3cdeBridgeRowStatus, hh3cQllcLocalMac=hh3cQllcLocalMac, hh3cdeEBMulticastMac=hh3cdeEBMulticastMac, hh3cdeEBtimer=hh3cdeEBtimer, hh3cdeTConnOperSendPkts=hh3cdeTConnOperSendPkts, hh3cdeTConnConfigBackupTAddr=hh3cdeTConnConfigBackupTAddr, hh3cdeNodeSnaCacheTimeout=hh3cdeNodeSnaCacheTimeout, hh3cdeTConnOperVendorID=hh3cdeTConnOperVendorID, hh3cdeTConnConfigEntry=hh3cdeTConnConfigEntry, hh3cdeSdlcPortModulo=hh3cdeSdlcPortModulo, hh3cdeNodeTcpQueueMax=hh3cdeNodeTcpQueueMax, hh3cdeEBMacMapTable=hh3cdeEBMacMapTable, PYSNMP_MODULE_ID=hh3cDlswExt, hh3cQllcRemoteMac=hh3cQllcRemoteMac, hh3cdeRchCacheNextIndex=hh3cdeRchCacheNextIndex, hh3cdeTConnOperTable=hh3cdeTConnOperTable, hh3cdeLlc2PortMaxSendQueue=hh3cdeLlc2PortMaxSendQueue, hh3cdeRchCacheMac=hh3cdeRchCacheMac, hh3cdeEBIfEntry=hh3cdeEBIfEntry, hh3cdeSdlcPortSimultaneousEnable=hh3cdeSdlcPortSimultaneousEnable, hh3cdeTConnConfigTable=hh3cdeTConnConfigTable, hh3cdeRchCacheRemainTime=hh3cdeRchCacheRemainTime, hh3cdeEBMacMapStat=hh3cdeEBMacMapStat, hh3cdeTConnConfigVersion=hh3cdeTConnConfigVersion, hh3cdeLlc2PortTimerAckDelay=hh3cdeLlc2PortTimerAckDelay, hh3cdeNodeRemotePendTimeout=hh3cdeNodeRemotePendTimeout, hh3cdeSdlcPortRole=hh3cdeSdlcPortRole, hh3cQllcX121Address=hh3cQllcX121Address, hh3cdeLlc2PortEntry=hh3cdeLlc2PortEntry, hh3cdeNodeStCapTcpNum=hh3cdeNodeStCapTcpNum, hh3cdeTConn=hh3cdeTConn, hh3cdeNodeKeepAliveInterval=hh3cdeNodeKeepAliveInterval, hh3cdeNodeResetTcpAll=hh3cdeNodeResetTcpAll, hh3cdeReachableCache=hh3cdeReachableCache, hh3cdeLlc2=hh3cdeLlc2, hh3cdeNodeExplorerTimeout=hh3cdeNodeExplorerTimeout, hh3cdeRchCacheRemoteIp=hh3cdeRchCacheRemoteIp, hh3cdeNodeLocalPendTimeout=hh3cdeNodeLocalPendTimeout, hh3cdeBridgeEntry=hh3cdeBridgeEntry, hh3cdeSdlcPortEntry=hh3cdeSdlcPortEntry, hh3cdeBridgeIfTable=hh3cdeBridgeIfTable, hh3cdeNodePriority=hh3cdeNodePriority, hh3cdeTConnConfigBackup=hh3cdeTConnConfigBackup, hh3cdeEBMacMapIndex=hh3cdeEBMacMapIndex, hh3cdeNodeMulticastStatus=hh3cdeNodeMulticastStatus, hh3cdeNodeInitPacingWindow=hh3cdeNodeInitPacingWindow, hh3cdeNodeExplorerWaitTimeout=hh3cdeNodeExplorerWaitTimeout, hh3cdeLlc2PortTimerPoll=hh3cdeLlc2PortTimerPoll, hh3cdeEBMacMapMaxIndex=hh3cdeEBMacMapMaxIndex, hh3cQllcLocalSap=hh3cQllcLocalSap, hh3cdeBridge=hh3cdeBridge, hh3cdeSdlc=hh3cdeSdlc, hh3cdeRchCacheMaxIndex=hh3cdeRchCacheMaxIndex, hh3cdeLlc2PortRowStatus=hh3cdeLlc2PortRowStatus, hh3cdeSdlcPortMaxTransmission=hh3cdeSdlcPortMaxTransmission, hh3cdeEBPriority=hh3cdeEBPriority, hh3cdeSdlcPortMaxSendQueue=hh3cdeSdlcPortMaxSendQueue, hh3cdeNodeVendorID=hh3cdeNodeVendorID, hh3cdeLlc2PortTable=hh3cdeLlc2PortTable, hh3cdeLlc2PortModulo=hh3cdeLlc2PortModulo, hh3cdeNodeMulticastAddress=hh3cdeNodeMulticastAddress, hh3cdeSdlcPortMaxPdu=hh3cdeSdlcPortMaxPdu, hh3cdeSdlcPortTimerACK=hh3cdeSdlcPortTimerACK, hh3cdeEBIfTable=hh3cdeEBIfTable, hh3cdeEBMacMapRemoteMac=hh3cdeEBMacMapRemoteMac, hh3cdeNodeConnTimeout=hh3cdeNodeConnTimeout, hh3cdeRchCacheStat=hh3cdeRchCacheStat, hh3cDlswExt=hh3cDlswExt, hh3cdeLlc2PortMaxTransmission=hh3cdeLlc2PortMaxTransmission, hh3cdeTConnOperPeerType=hh3cdeTConnOperPeerType, hh3cdeLlc2PortTimerBusy=hh3cdeLlc2PortTimerBusy, hh3cdeTConnOperEntry=hh3cdeTConnOperEntry, hh3cdeQllcEntry=hh3cdeQllcEntry, hh3cdeLlc2PortMaxPdu=hh3cdeLlc2PortMaxPdu, hh3cdeLlc2PortReceiveWindow=hh3cdeLlc2PortReceiveWindow, hh3cdeBridgeTable=hh3cdeBridgeTable, hh3cdeRchCacheStatus=hh3cdeRchCacheStatus, hh3cdeBridgeNumIndex=hh3cdeBridgeNumIndex, hh3cdeLlc2PortMaxAck=hh3cdeLlc2PortMaxAck)
