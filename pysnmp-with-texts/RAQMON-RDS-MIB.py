#
# PySNMP MIB module RAQMON-RDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RAQMON-RDS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:52:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
Dscp, = mibBuilder.importSymbols("DIFFSERV-DSCP-TC", "Dscp")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
rmon, = mibBuilder.importSymbols("RMON-MIB", "rmon")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, Counter32, Bits, iso, NotificationType, TimeTicks, Counter64, ObjectIdentity, Gauge32, IpAddress, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "Bits", "iso", "NotificationType", "TimeTicks", "Counter64", "ObjectIdentity", "Gauge32", "IpAddress", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
TextualConvention, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString")
raqmonDsMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 16, 32))
raqmonDsMIB.setRevisions(('2006-10-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: raqmonDsMIB.setRevisionsDescriptions(('Initial version, published as RFC 4712.',))
if mibBuilder.loadTexts: raqmonDsMIB.setLastUpdated('200610100000Z')
if mibBuilder.loadTexts: raqmonDsMIB.setOrganization('RMON Working Group')
if mibBuilder.loadTexts: raqmonDsMIB.setContactInfo('WG EMail: rmonmib@ietf.org Subscribe: rmonmib-request@ietf.org MIB Editor: Eugene Golovinsky Postal: BMC Software, Inc. 2101 CityWest Boulevard, Houston, TX, 77094 USA Tel: +713-918-1816 Email: egolovin@bmc.com ')
if mibBuilder.loadTexts: raqmonDsMIB.setDescription('This is the RAQMON Data Source notification MIB Module. It provides a mapping of RAQMON PDUs to SNMP notifications. Ds stands for data source. Note that all of the object types defined in this module are accessible-for-notify and would consequently not be available to a browser using simple Get, GetNext, or GetBulk requests. Copyright (c) The Internet Society (2006). This version of this MIB module is part of RFC 4712; See the RFC itself for full legal notices.')
raqmonDsNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 32, 0))
raqmonDsMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 32, 1))
raqmonDsConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 32, 2))
raqmonDsNotificationTable = MibTable((1, 3, 6, 1, 2, 1, 16, 32, 1, 1), )
if mibBuilder.loadTexts: raqmonDsNotificationTable.setStatus('current')
if mibBuilder.loadTexts: raqmonDsNotificationTable.setDescription('This conceptual table provides the SNMP mapping of the RAQMON BASIC PDU. It is indexed by the RAQMON Data Source, sub-session, and address of the peer entity. Note that there is no concern about the indexation of this table exceeding the limits defined by RFC 2578 Section 3.5. According to [RFC4710], Section 5.1, only IPv4 and IPv6 addresses can be reported as participant addresses.')
raqmonDsNotificationEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1), ).setIndexNames((0, "RAQMON-RDS-MIB", "raqmonDsDSRC"), (0, "RAQMON-RDS-MIB", "raqmonDsRCN"), (0, "RAQMON-RDS-MIB", "raqmonDsPeerAddrType"), (0, "RAQMON-RDS-MIB", "raqmonDsPeerAddr"))
if mibBuilder.loadTexts: raqmonDsNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: raqmonDsNotificationEntry.setDescription('The entry (row) is not retrievable and is not kept by RDSs. It serves data organization purposes only.')
raqmonDsDSRC = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: raqmonDsDSRC.setStatus('current')
if mibBuilder.loadTexts: raqmonDsDSRC.setDescription('Data Source identifier represents a unique session descriptor that points to a specific session between communicating entities. Identifiers unique for sessions conducted between two entities are generated by the communicating entities. Zero is a valid value, with no special semantics.')
raqmonDsRCN = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: raqmonDsRCN.setStatus('current')
if mibBuilder.loadTexts: raqmonDsRCN.setDescription('The Record Count Number indicates a sub-session within a communication session. A maximum number of 16 sub-sessions are supported; this limitation is dictated by reasons of compatibility with other transport protocols.')
raqmonDsPeerAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 3), InetAddressType())
if mibBuilder.loadTexts: raqmonDsPeerAddrType.setReference('Section 5.2 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: raqmonDsPeerAddrType.setDescription('The type of the Internet address of the peer participant for this session.')
raqmonDsPeerAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 4), InetAddress())
if mibBuilder.loadTexts: raqmonDsPeerAddr.setReference('Section 5.2 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsPeerAddr.setStatus('current')
if mibBuilder.loadTexts: raqmonDsPeerAddr.setDescription('The Internet Address of the peer participant for this session.')
raqmonDsAppName = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 5), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsAppName.setReference('Section 5.28 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsAppName.setStatus('current')
if mibBuilder.loadTexts: raqmonDsAppName.setDescription("This is a text string giving the name and possibly the version of the application associated with that session, e.g., 'XYZ VoIP Agent 1.2'.")
raqmonDsDataSourceDevicePort = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 6), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsDataSourceDevicePort.setReference('Section 5.5 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsDataSourceDevicePort.setStatus('current')
if mibBuilder.loadTexts: raqmonDsDataSourceDevicePort.setDescription('The port number from which data for this session was sent by the Data Source device.')
raqmonDsReceiverDevicePort = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 7), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsReceiverDevicePort.setReference('Section 5.6 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsReceiverDevicePort.setStatus('current')
if mibBuilder.loadTexts: raqmonDsReceiverDevicePort.setDescription('The port number where the data for this session was received.')
raqmonDsSessionSetupDateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 8), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsSessionSetupDateTime.setReference('Section 5.7 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsSessionSetupDateTime.setStatus('current')
if mibBuilder.loadTexts: raqmonDsSessionSetupDateTime.setDescription('The time when session was initiated.')
raqmonDsSessionSetupDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsSessionSetupDelay.setReference('Section 5.8 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsSessionSetupDelay.setStatus('current')
if mibBuilder.loadTexts: raqmonDsSessionSetupDelay.setDescription('Session setup time.')
raqmonDsSessionDuration = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 10), Unsigned32()).setUnits('seconds').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsSessionDuration.setReference('Section 5.9 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsSessionDuration.setStatus('current')
if mibBuilder.loadTexts: raqmonDsSessionDuration.setDescription('Session duration, including setup time. The SYNTAX of this object allows expression of the duration of sessions that do not exceed 4660 hours and 20 minutes.')
raqmonDsSessionSetupStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 11), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsSessionSetupStatus.setReference('Section 5.10 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsSessionSetupStatus.setStatus('current')
if mibBuilder.loadTexts: raqmonDsSessionSetupStatus.setDescription('Describes appropriate communication session states, e.g., Call Established successfully, RSVP reservation failed, etc.')
raqmonDsRoundTripEndToEndNetDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 12), Unsigned32()).setUnits('milliseconds').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsRoundTripEndToEndNetDelay.setReference('Section 5.11 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsRoundTripEndToEndNetDelay.setStatus('current')
if mibBuilder.loadTexts: raqmonDsRoundTripEndToEndNetDelay.setDescription('Most recent available information about the round-trip end-to-end network delay.')
raqmonDsOneWayEndToEndNetDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 13), Unsigned32()).setUnits('milliseconds').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsOneWayEndToEndNetDelay.setReference('Section 5.12 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsOneWayEndToEndNetDelay.setStatus('current')
if mibBuilder.loadTexts: raqmonDsOneWayEndToEndNetDelay.setDescription('Most recent available information about the one-way end-to-end network delay.')
raqmonDsApplicationDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsApplicationDelay.setReference('Section 5.13 of [RFC4710')
if mibBuilder.loadTexts: raqmonDsApplicationDelay.setStatus('current')
if mibBuilder.loadTexts: raqmonDsApplicationDelay.setDescription('Most recent available information about the application delay.')
raqmonDsInterArrivalJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsInterArrivalJitter.setReference('Section 5.14 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsInterArrivalJitter.setStatus('current')
if mibBuilder.loadTexts: raqmonDsInterArrivalJitter.setDescription('An estimate of the inter-arrival jitter.')
raqmonDsIPPacketDelayVariation = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsIPPacketDelayVariation.setReference('Section 5.15 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsIPPacketDelayVariation.setStatus('current')
if mibBuilder.loadTexts: raqmonDsIPPacketDelayVariation.setDescription('An estimate of the inter-arrival delay variation.')
raqmonDsTotalPacketsReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 17), Counter32()).setUnits('packets').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsTotalPacketsReceived.setReference('Section 5.16 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsTotalPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: raqmonDsTotalPacketsReceived.setDescription('The number of packets transmitted within a communication session by the receiver since the start of the session.')
raqmonDsTotalPacketsSent = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 18), Counter32()).setUnits('packets').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsTotalPacketsSent.setReference('Section 5.17 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsTotalPacketsSent.setStatus('current')
if mibBuilder.loadTexts: raqmonDsTotalPacketsSent.setDescription('The number of packets transmitted within a communication session by the sender since the start of the session.')
raqmonDsTotalOctetsReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 19), Counter32()).setUnits('octets').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsTotalOctetsReceived.setReference('Section 5.18 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsTotalOctetsReceived.setStatus('current')
if mibBuilder.loadTexts: raqmonDsTotalOctetsReceived.setDescription('The total number of payload octets (i.e., not including header or padding octets) transmitted in packets by the receiver within a communication session since the start of the session.')
raqmonDsTotalOctetsSent = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 20), Counter32()).setUnits('octets').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsTotalOctetsSent.setReference('Section 5.19 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsTotalOctetsSent.setStatus('current')
if mibBuilder.loadTexts: raqmonDsTotalOctetsSent.setDescription('The number of payload octets (i.e., not including headers or padding) transmitted in packets by the sender within a communication sub-session since the start of the session.')
raqmonDsCumulativePacketLoss = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 21), Counter32()).setUnits('packets').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsCumulativePacketLoss.setReference('Section 5.20 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsCumulativePacketLoss.setStatus('current')
if mibBuilder.loadTexts: raqmonDsCumulativePacketLoss.setDescription('The number of packets from this session whose loss had been detected since the start of the session.')
raqmonDsPacketLossFraction = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage of packets sent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsPacketLossFraction.setReference('Section 5.21 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsPacketLossFraction.setStatus('current')
if mibBuilder.loadTexts: raqmonDsPacketLossFraction.setDescription('The percentage of lost packets with respect to the overall packets sent. This is defined to be 100 times the number of packets lost divided by the number of packets expected.')
raqmonDsCumulativeDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 23), Counter32()).setUnits('packets').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsCumulativeDiscards.setReference('Section 5.22 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsCumulativeDiscards.setStatus('current')
if mibBuilder.loadTexts: raqmonDsCumulativeDiscards.setDescription('The number of packet discards detected since the start of the session.')
raqmonDsDiscardsFraction = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage of packets sent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsDiscardsFraction.setReference('Section 5.23 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsDiscardsFraction.setStatus('current')
if mibBuilder.loadTexts: raqmonDsDiscardsFraction.setDescription('The percentage of discards with respect to the overall packets sent. This is defined to be 100 times the number of discards divided by the number of packets expected.')
raqmonDsSourcePayloadType = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsSourcePayloadType.setReference('RFC 1890, Section 5.24 of [RFC4710] ')
if mibBuilder.loadTexts: raqmonDsSourcePayloadType.setStatus('current')
if mibBuilder.loadTexts: raqmonDsSourcePayloadType.setDescription('The payload type of the packet sent by this RDS.')
raqmonDsReceiverPayloadType = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsReceiverPayloadType.setReference('RFC 1890, Section 5.25 of [RFC4710] ')
if mibBuilder.loadTexts: raqmonDsReceiverPayloadType.setStatus('current')
if mibBuilder.loadTexts: raqmonDsReceiverPayloadType.setDescription('The payload type of the packet received by this RDS.')
raqmonDsSourceLayer2Priority = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsSourceLayer2Priority.setReference('Section 5.26 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsSourceLayer2Priority.setStatus('current')
if mibBuilder.loadTexts: raqmonDsSourceLayer2Priority.setDescription('Source Layer 2 priority used by the data source to send packets to the receiver by this data source during this communication session.')
raqmonDsSourceDscp = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 28), Dscp()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsSourceDscp.setReference('Section 5.27 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsSourceDscp.setStatus('current')
if mibBuilder.loadTexts: raqmonDsSourceDscp.setDescription('Layer 3 TOS/DSCP values used by the Data Source to prioritize traffic sent.')
raqmonDsDestinationLayer2Priority = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsDestinationLayer2Priority.setReference('Section 5.28 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsDestinationLayer2Priority.setStatus('current')
if mibBuilder.loadTexts: raqmonDsDestinationLayer2Priority.setDescription('Destination Layer 2 priority. This is the priority used by the peer communicating entity to send packets to the data source.')
raqmonDsDestinationDscp = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 30), Dscp()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsDestinationDscp.setReference('Section 5.29 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsDestinationDscp.setStatus('current')
if mibBuilder.loadTexts: raqmonDsDestinationDscp.setDescription('Layer 3 TOS/DSCP values used by the peer communicating entity to prioritize traffic sent to the source.')
raqmonDsCpuUtilization = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsCpuUtilization.setReference('Section 5.30 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsCpuUtilization.setStatus('current')
if mibBuilder.loadTexts: raqmonDsCpuUtilization.setDescription('Latest available information about the total CPU utilization.')
raqmonDsMemoryUtilization = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 32, 1, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: raqmonDsMemoryUtilization.setReference('Section 5.31 of [RFC4710]')
if mibBuilder.loadTexts: raqmonDsMemoryUtilization.setStatus('current')
if mibBuilder.loadTexts: raqmonDsMemoryUtilization.setDescription('Latest available information about the total memory utilization.')
raqmonDsStaticNotification = NotificationType((1, 3, 6, 1, 2, 1, 16, 32, 0, 1)).setObjects(("RAQMON-RDS-MIB", "raqmonDsAppName"))
if mibBuilder.loadTexts: raqmonDsStaticNotification.setStatus('current')
if mibBuilder.loadTexts: raqmonDsStaticNotification.setDescription('This notification maps the static parameters in the BASIC RAQMON PDU onto an SNMP transport. This notification is expected to be sent once per session, or when a new sub-session is initiated. The following objects MAY be carried by the raqmonDsStaticNotification: raqmonDsDataSourceDevicePort, raqmonDsReceiverDevicePort, raqmonDsSessionSetupDateTime, raqmonDsSessionSetupDelay, raqmonDsSessionDuration, raqmonDsSourcePayloadType, raqmonDsReceiverPayloadType, raqmonDsSourceLayer2Priority, raqmonDsSourceDscp, raqmonDsDestinationLayer2Priority, raqmonDsDestinationDscp It is RECOMMENDED to keep the size of a notification within the MTU size limits in order to avoid fragmentation.')
raqmonDsDynamicNotification = NotificationType((1, 3, 6, 1, 2, 1, 16, 32, 0, 2)).setObjects(("RAQMON-RDS-MIB", "raqmonDsTotalPacketsReceived"))
if mibBuilder.loadTexts: raqmonDsDynamicNotification.setStatus('current')
if mibBuilder.loadTexts: raqmonDsDynamicNotification.setDescription('This notification maps the dynamic parameters in the BASIC RAQMON PDU onto an SNMP transport. The following objects MAY be carried by the raqmonDsDynamicNotification: raqmonDsRoundTripEndToEndNetDelay, raqmonDsOneWayEndToEndNetDelay, raqmonDsApplicationDelay, raqmonDsInterArrivalJitter, raqmonDsIPPacketDelayVariation, raqmonDsTotalPacketsSent, raqmonDsTotalOctetsReceived, raqmonDsTotalOctetsSent, raqmonDsCumulativePacketLoss, raqmonDsPacketLossFraction, raqmonDsCumulativeDiscards, raqmonDsDiscardsFraction, raqmonDsCpuUtilization, raqmonDsMemoryUtilization It is RECOMMENDED to keep the size of a notification within the MTU size limits in order to avoid fragmentation.')
raqmonDsByeNotification = NotificationType((1, 3, 6, 1, 2, 1, 16, 32, 0, 3)).setObjects(("RAQMON-RDS-MIB", "raqmonDsAppName"))
if mibBuilder.loadTexts: raqmonDsByeNotification.setStatus('current')
if mibBuilder.loadTexts: raqmonDsByeNotification.setDescription('The BYE Notification. This Notification is the equivalent of the RAQMON NULL PDU, which signals the end of a RAQMON session.')
raqmonDsCompliance = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 32, 2, 1))
raqmonDsGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 32, 2, 2))
raqmonDsBasicCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 16, 32, 2, 1, 1)).setObjects(("RAQMON-RDS-MIB", "raqmonDsNotificationGroup"), ("RAQMON-RDS-MIB", "raqmonDsPayloadGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    raqmonDsBasicCompliance = raqmonDsBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: raqmonDsBasicCompliance.setDescription('The compliance statement for SNMP entities that implement this MIB module. There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which we have the following compliance requirements, expressed in OBJECT clause form in this description clause: -- OBJECT raqmonDsPeerAddrType -- SYNTAX InetAddressType { ipv4(1), ipv6(2) } -- DESCRIPTION -- This MIB requires support for only global IPv4 -- and IPv6 address types. -- -- OBJECT raqmonDsPeerAddr -- SYNTAX InetAddress (SIZE(4|16)) -- DESCRIPTION -- This MIB requires support for only global IPv4 -- and IPv6 address types. -- ')
raqmonDsNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 16, 32, 2, 2, 1)).setObjects(("RAQMON-RDS-MIB", "raqmonDsStaticNotification"), ("RAQMON-RDS-MIB", "raqmonDsDynamicNotification"), ("RAQMON-RDS-MIB", "raqmonDsByeNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    raqmonDsNotificationGroup = raqmonDsNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: raqmonDsNotificationGroup.setDescription('Standard RAQMON Data Source Notification group.')
raqmonDsPayloadGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 16, 32, 2, 2, 2)).setObjects(("RAQMON-RDS-MIB", "raqmonDsAppName"), ("RAQMON-RDS-MIB", "raqmonDsDataSourceDevicePort"), ("RAQMON-RDS-MIB", "raqmonDsReceiverDevicePort"), ("RAQMON-RDS-MIB", "raqmonDsSessionSetupDateTime"), ("RAQMON-RDS-MIB", "raqmonDsSessionSetupDelay"), ("RAQMON-RDS-MIB", "raqmonDsSessionDuration"), ("RAQMON-RDS-MIB", "raqmonDsSessionSetupStatus"), ("RAQMON-RDS-MIB", "raqmonDsRoundTripEndToEndNetDelay"), ("RAQMON-RDS-MIB", "raqmonDsOneWayEndToEndNetDelay"), ("RAQMON-RDS-MIB", "raqmonDsApplicationDelay"), ("RAQMON-RDS-MIB", "raqmonDsInterArrivalJitter"), ("RAQMON-RDS-MIB", "raqmonDsIPPacketDelayVariation"), ("RAQMON-RDS-MIB", "raqmonDsTotalPacketsReceived"), ("RAQMON-RDS-MIB", "raqmonDsTotalPacketsSent"), ("RAQMON-RDS-MIB", "raqmonDsTotalOctetsReceived"), ("RAQMON-RDS-MIB", "raqmonDsTotalOctetsSent"), ("RAQMON-RDS-MIB", "raqmonDsCumulativePacketLoss"), ("RAQMON-RDS-MIB", "raqmonDsPacketLossFraction"), ("RAQMON-RDS-MIB", "raqmonDsCumulativeDiscards"), ("RAQMON-RDS-MIB", "raqmonDsDiscardsFraction"), ("RAQMON-RDS-MIB", "raqmonDsSourcePayloadType"), ("RAQMON-RDS-MIB", "raqmonDsReceiverPayloadType"), ("RAQMON-RDS-MIB", "raqmonDsSourceLayer2Priority"), ("RAQMON-RDS-MIB", "raqmonDsSourceDscp"), ("RAQMON-RDS-MIB", "raqmonDsDestinationLayer2Priority"), ("RAQMON-RDS-MIB", "raqmonDsDestinationDscp"), ("RAQMON-RDS-MIB", "raqmonDsCpuUtilization"), ("RAQMON-RDS-MIB", "raqmonDsMemoryUtilization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    raqmonDsPayloadGroup = raqmonDsPayloadGroup.setStatus('current')
if mibBuilder.loadTexts: raqmonDsPayloadGroup.setDescription('Standard RAQMON Data Source payload MIB objects group.')
mibBuilder.exportSymbols("RAQMON-RDS-MIB", raqmonDsAppName=raqmonDsAppName, raqmonDsSourcePayloadType=raqmonDsSourcePayloadType, raqmonDsCompliance=raqmonDsCompliance, raqmonDsSessionSetupDateTime=raqmonDsSessionSetupDateTime, raqmonDsIPPacketDelayVariation=raqmonDsIPPacketDelayVariation, raqmonDsDSRC=raqmonDsDSRC, raqmonDsRoundTripEndToEndNetDelay=raqmonDsRoundTripEndToEndNetDelay, raqmonDsMIBObjects=raqmonDsMIBObjects, raqmonDsSessionSetupStatus=raqmonDsSessionSetupStatus, raqmonDsDataSourceDevicePort=raqmonDsDataSourceDevicePort, raqmonDsInterArrivalJitter=raqmonDsInterArrivalJitter, raqmonDsTotalOctetsSent=raqmonDsTotalOctetsSent, raqmonDsCumulativeDiscards=raqmonDsCumulativeDiscards, raqmonDsDestinationDscp=raqmonDsDestinationDscp, raqmonDsCpuUtilization=raqmonDsCpuUtilization, raqmonDsGroups=raqmonDsGroups, raqmonDsDiscardsFraction=raqmonDsDiscardsFraction, raqmonDsBasicCompliance=raqmonDsBasicCompliance, raqmonDsSourceDscp=raqmonDsSourceDscp, raqmonDsDestinationLayer2Priority=raqmonDsDestinationLayer2Priority, raqmonDsNotifications=raqmonDsNotifications, raqmonDsMIB=raqmonDsMIB, raqmonDsTotalPacketsReceived=raqmonDsTotalPacketsReceived, raqmonDsPayloadGroup=raqmonDsPayloadGroup, raqmonDsByeNotification=raqmonDsByeNotification, raqmonDsDynamicNotification=raqmonDsDynamicNotification, raqmonDsStaticNotification=raqmonDsStaticNotification, raqmonDsPeerAddr=raqmonDsPeerAddr, raqmonDsConformance=raqmonDsConformance, raqmonDsNotificationGroup=raqmonDsNotificationGroup, raqmonDsRCN=raqmonDsRCN, raqmonDsSourceLayer2Priority=raqmonDsSourceLayer2Priority, raqmonDsApplicationDelay=raqmonDsApplicationDelay, raqmonDsOneWayEndToEndNetDelay=raqmonDsOneWayEndToEndNetDelay, raqmonDsNotificationEntry=raqmonDsNotificationEntry, raqmonDsTotalOctetsReceived=raqmonDsTotalOctetsReceived, raqmonDsNotificationTable=raqmonDsNotificationTable, raqmonDsSessionDuration=raqmonDsSessionDuration, PYSNMP_MODULE_ID=raqmonDsMIB, raqmonDsMemoryUtilization=raqmonDsMemoryUtilization, raqmonDsCumulativePacketLoss=raqmonDsCumulativePacketLoss, raqmonDsReceiverDevicePort=raqmonDsReceiverDevicePort, raqmonDsSessionSetupDelay=raqmonDsSessionSetupDelay, raqmonDsPacketLossFraction=raqmonDsPacketLossFraction, raqmonDsTotalPacketsSent=raqmonDsTotalPacketsSent, raqmonDsPeerAddrType=raqmonDsPeerAddrType, raqmonDsReceiverPayloadType=raqmonDsReceiverPayloadType)
