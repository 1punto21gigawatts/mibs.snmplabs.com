#
# PySNMP MIB module INNOMINATE-LLDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INNOMINATE-LLDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:53:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, Integer32, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Counter64, ObjectIdentity, ModuleIdentity, Bits, Counter32, MibIdentifier, NotificationType, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Counter64", "ObjectIdentity", "ModuleIdentity", "Bits", "Counter32", "MibIdentifier", "NotificationType", "iso", "Unsigned32")
TextualConvention, TimeStamp, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString", "TruthValue")
innominateLldpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 15450, 3, 7))
innominateLldpMIB.setRevisions(('2005-08-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: innominateLldpMIB.setRevisionsDescriptions(('Published as is.',))
if mibBuilder.loadTexts: innominateLldpMIB.setLastUpdated('200508240000Z')
if mibBuilder.loadTexts: innominateLldpMIB.setOrganization('Innominate Security Technologies AG')
if mibBuilder.loadTexts: innominateLldpMIB.setContactInfo('Martin Dickopp')
if mibBuilder.loadTexts: innominateLldpMIB.setDescription('This MIB contains the proprietary extensions to the LLDP standard.')
class TimeFilter(TextualConvention, TimeTicks):
    description = "To be used for the index to a table. Allows an application to download only those rows changed since a particular time. A row is considered changed if the value of any object in the row changes or if the row is created or deleted. When sysUpTime is equal to zero, this table shall be empty. One entry exists for each past value of sysUpTime, except that the whole table is purged should sysUpTime wrap. As this basic row is updated new conceptual rows are created (which still share the now updated object values with all other instances). The number of instances which are created is determined by the value of sysUpTime at which the basic row was last updated. One instance will exist for each value of sysUpTime at the last update time for the row. A new timeMark instance is created for each new sysUpTime value. Each new conceptual row will be associated with the timeMark instance which was created at the value of sysUpTime with which the conceptual row is to be associated. By definition all conceptual rows were updated at or after time zero and so at least one conceptual row (associated with timeMark.0) must exist for each underlying (basic) row. See the appendix for further discussion of this variable. Consider the following fooTable: fooTable ... INDEX { fooTimeMark, fooIndex } FooEntry { fooTimeMark TimeFilter fooIndex INTEGER, fooCounts Counter } Should there be two basic rows in this table (fooIndex == 1, fooIndex == 2) and row 1 was updated most recently at time 6, while row 2 was updated most recently at time 8, and both rows had been updated on several earlier occasions such that the current values were 5 and 9 respectively then the following fooCounts instances would exist. fooCounts.0.1 5 fooCounts.0.2 9 fooCounts.1.1 5 fooCounts.1.2 9 fooCounts.2.1 5 fooCounts.2.2 9 fooCounts.3.1 5 fooCounts.3.2 9 fooCounts.4.1 5 fooCounts.4.2 9 fooCounts.5.1 5 fooCounts.5.2 9 fooCounts.6.1 5 fooCounts.6.2 9 fooCounts.7.2 9 -- note that row 1 doesn't exist for fooCounts.8.2 9 -- times 7 and 8"
    status = 'current'

innominateLLDPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 3, 7, 1))
innominateLLDPStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 3, 7, 2))
innominateLLDPAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 15450, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: innominateLLDPAdminStatus.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPAdminStatus.setDescription('DURABLE: Enables/disables the IEEE802.1AB functionality on this device. If disabled(2), the LLDP protocol is inactive, but the LLDP MIBs can be accessed.')
innominateLLDPInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 3, 7, 1, 2), )
if mibBuilder.loadTexts: innominateLLDPInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPInterfaceTable.setDescription('This table contains variables for each interface of the switch.')
innominateLLDPIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 3, 7, 1, 2, 1), ).setIndexNames((0, "INNOMINATE-LLDP-MIB", "innominateLLDPIfaceGroupID"), (0, "INNOMINATE-LLDP-MIB", "innominateLLDPIfaceID"))
if mibBuilder.loadTexts: innominateLLDPIfEntry.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPIfEntry.setDescription('')
innominateLLDPIfaceGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 3, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: innominateLLDPIfaceGroupID.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPIfaceGroupID.setDescription('Index to identify an interface card. This value is never greater than innominateSysGroupCapacity.')
innominateLLDPIfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 3, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: innominateLLDPIfaceID.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPIfaceID.setDescription('Index to identify an interface within an interface card.')
innominateLLDPIfaceHirmaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 3, 7, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txOnly", 1), ("rxOnly", 2), ("txAndRx", 3), ("disabled", 4))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: innominateLLDPIfaceHirmaMode.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPIfaceHirmaMode.setDescription('Configure Hirschmann LLDP on this physical port. If an IEEE802.1AB capable device not manufactured by Hirschmann is connected to a port, innominateLLDPIfaceHirmaMode should be set to disabled (4) for this port.')
innominateLLDPIfaceFDBMode = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 3, 7, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lldpOnly", 1), ("macOnly", 2), ("both", 3), ("autoDetect", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: innominateLLDPIfaceFDBMode.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPIfaceFDBMode.setDescription("If configured to lldpOnly(1), only received LLDP messages will be used to populate the LLDP-MIB's remTable. If configured to macOnly(2), learned mac addresses out of the switch's forwarding database (FDB) will be used to populate the LLDP-MIB's remTable. If configured to both(3), both received LLDP messages and learned mac addresses out of the switch's forwarding database (FDB) will be used to populate the LLDP-MIB's remTable. If configured to autoDetect(4) and LLDP messages are received on this port, this mode will behave like lldpOnly(1), otherwise it will behave like macOnly(2).")
innominateLLDPIfaceMaxNeighbors = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 3, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: innominateLLDPIfaceMaxNeighbors.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPIfaceMaxNeighbors.setDescription('Configure Hirschmann LLDP on this physical port. This value limits the number of entries in the remTable for this port.')
innominateLLDPStatsIfTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 3, 7, 2, 1), )
if mibBuilder.loadTexts: innominateLLDPStatsIfTable.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPStatsIfTable.setDescription('This table contains variables for each interface of the switch.')
innominateLLDPStatsIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 3, 7, 2, 1, 1), ).setIndexNames((0, "INNOMINATE-LLDP-MIB", "innominateLLDPStatsIfaceGroupID"), (0, "INNOMINATE-LLDP-MIB", "innominateLLDPStatsIfaceID"))
if mibBuilder.loadTexts: innominateLLDPStatsIfEntry.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPStatsIfEntry.setDescription('')
innominateLLDPStatsIfaceGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 3, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: innominateLLDPStatsIfaceGroupID.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPStatsIfaceGroupID.setDescription('Index to identify an interface card. This value is never greater than innominateSysGroupCapacity.')
innominateLLDPStatsIfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 3, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: innominateLLDPStatsIfaceID.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPStatsIfaceID.setDescription('Index to identify an interface within an interface card.')
innominateLLDPStatsIfaceTotalFDBEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 3, 7, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: innominateLLDPStatsIfaceTotalFDBEntryCount.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPStatsIfaceTotalFDBEntryCount.setDescription('The total number of learned entries in the forwarding database (FDB) for this port.')
innominateLLDPStatsIfaceTotalEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 3, 7, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: innominateLLDPStatsIfaceTotalEntryCount.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPStatsIfaceTotalEntryCount.setDescription("The total number of remote connections in the LLDP MIB's remTable for this port.")
innominateLLDPStatsIfaceIEEEEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 3, 7, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: innominateLLDPStatsIfaceIEEEEntryCount.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPStatsIfaceIEEEEntryCount.setDescription("The number of remote connections in the LLDP MIB's remTable for this port that were detected because an LLDP message from an IEEE source was received.")
innominateLLDPStatsIfaceHirmaEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 3, 7, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: innominateLLDPStatsIfaceHirmaEntryCount.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPStatsIfaceHirmaEntryCount.setDescription("The number of remote connections in the LLDP MIB's remTable for this port that were detected because an LLDP message from an Hirschmann source was received.")
innominateLLDPStatsIfaceFDBEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 3, 7, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: innominateLLDPStatsIfaceFDBEntryCount.setStatus('current')
if mibBuilder.loadTexts: innominateLLDPStatsIfaceFDBEntryCount.setDescription("The number of remote connections in the LLDP MIB's remTable for this port that were detected in the forwarding database (FDB) for this port.")
mibBuilder.exportSymbols("INNOMINATE-LLDP-MIB", innominateLLDPIfaceFDBMode=innominateLLDPIfaceFDBMode, TimeFilter=TimeFilter, innominateLLDPIfaceGroupID=innominateLLDPIfaceGroupID, innominateLLDPStatsIfaceHirmaEntryCount=innominateLLDPStatsIfaceHirmaEntryCount, innominateLLDPInterfaceTable=innominateLLDPInterfaceTable, innominateLLDPIfaceHirmaMode=innominateLLDPIfaceHirmaMode, innominateLldpMIB=innominateLldpMIB, innominateLLDPStatsIfaceID=innominateLLDPStatsIfaceID, PYSNMP_MODULE_ID=innominateLldpMIB, innominateLLDPStatsIfaceIEEEEntryCount=innominateLLDPStatsIfaceIEEEEntryCount, innominateLLDPStatsIfaceFDBEntryCount=innominateLLDPStatsIfaceFDBEntryCount, innominateLLDPStatsIfaceTotalFDBEntryCount=innominateLLDPStatsIfaceTotalFDBEntryCount, innominateLLDPStatsIfTable=innominateLLDPStatsIfTable, innominateLLDPIfEntry=innominateLLDPIfEntry, innominateLLDPStatsIfaceGroupID=innominateLLDPStatsIfaceGroupID, innominateLLDPStatsIfEntry=innominateLLDPStatsIfEntry, innominateLLDPConfig=innominateLLDPConfig, innominateLLDPAdminStatus=innominateLLDPAdminStatus, innominateLLDPStatsIfaceTotalEntryCount=innominateLLDPStatsIfaceTotalEntryCount, innominateLLDPIfaceMaxNeighbors=innominateLLDPIfaceMaxNeighbors, innominateLLDPIfaceID=innominateLLDPIfaceID, innominateLLDPStatistics=innominateLLDPStatistics)
