#
# PySNMP MIB module HUAWEI-NAT-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-NAT-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, Gauge32, ModuleIdentity, Counter64, ObjectIdentity, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Counter32, iso, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Gauge32", "ModuleIdentity", "Counter64", "ObjectIdentity", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Counter32", "iso", "Integer32", "TimeTicks")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
hwNatExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226))
if mibBuilder.loadTexts: hwNatExtMIB.setLastUpdated('200911022030Z')
if mibBuilder.loadTexts: hwNatExtMIB.setOrganization('Huawei Technologies Co., Ltd. ')
if mibBuilder.loadTexts: hwNatExtMIB.setContactInfo(' NanJing Institute,Huawei Technologies Co.,Ltd. HuiHong Mansion,No.91 BaiXia Rd. NanJing, P.R. of China Zipcode:210001 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwNatExtMIB.setDescription('The MIB contains objects of S9300 NAT features , referencing the RFC4004.')
class NATProtocolType(TextualConvention, Integer32):
    description = 'A list of protocols that are affected by NAT. Inclusion of values is not intended to imply that those protocols need be supported.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("icmp", 2), ("udp", 3), ("tcp", 4))

class NATFilterMode(TextualConvention, Integer32):
    description = 'The mode of NAT filter.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("endPointIndependent", 1), ("endPointDependent", 2), ("endPointPortDependent", 3))

hwNatExtMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 1))
hwNatPacketDiscard = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 1, 1)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatExtIfName"))
if mibBuilder.loadTexts: hwNatPacketDiscard.setStatus('current')
if mibBuilder.loadTexts: hwNatPacketDiscard.setDescription('This notification is generated when IP packets are discarded by the NAT function; e.g., due to lack of mapping space when NAT is out of addresses or ports.')
hwNatExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2))
hwNatBind = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1))
hwNatAddrBindNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrBindNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrBindNumberOfEntries.setDescription('This object maintains a count of the number of entries that currently exist in the hwNatAddrBindTable.')
hwNatAddrBindTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 2), )
if mibBuilder.loadTexts: hwNatAddrBindTable.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrBindTable.setDescription('This table holds information about the currently active NAT BINDs.')
hwNatAddrBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HUAWEI-NAT-EXT-MIB", "hwNatAddrBindQueryVrfName"), (0, "HUAWEI-NAT-EXT-MIB", "hwNatAddrBindQueryAddr"), (0, "HUAWEI-NAT-EXT-MIB", "hwNatAddrBindType"))
if mibBuilder.loadTexts: hwNatAddrBindEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrBindEntry.setDescription('Each entry in the NAT BIND table holds information about a NAT BIND that is currently active.')
hwNatAddrBindQueryVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwNatAddrBindQueryVrfName.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrBindQueryVrfName.setDescription('Vrf name for the hwNatAddrQueryAddr.')
hwNatAddrBindQueryAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwNatAddrBindQueryAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrBindQueryAddr.setDescription('This object represents the query ip address, which can be local address or global address, depending on the value of hwNatAddrBindType.')
hwNatAddrBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("natOutbound", 1), ("natServer", 2), ("staticNatLocalToGlobal", 3), ("staticNatGlobalToLocal", 4))))
if mibBuilder.loadTexts: hwNatAddrBindType.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrBindType.setDescription('This object represents the type of the BIND.')
hwNatAddrBindMappedVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrBindMappedVrfName.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrBindMappedVrfName.setDescription('Vrf name for the hwNatAddrBindMappedAddr.')
hwNatAddrBindMappedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrBindMappedAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrBindMappedAddr.setDescription('This object represents the ip address that maps to the hwNatAddrBindQueryAddr.')
hwNatAddrBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrBindId.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrBindId.setDescription('This object represents a BIND id that is dynamically assigned to each BIND by a NAT enabled device. Each BIND is represented by a unique BIND id across both, the Address Bind and Address-Port Bind tables.')
hwNatAddrBindSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrBindSessionCount.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrBindSessionCount.setDescription('Number of sessions currently using this BIND.')
hwNatAddrBindCurrentIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrBindCurrentIdleTime.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrBindCurrentIdleTime.setDescription('At any given instance of time, this object indicates the time that this BIND has been idle with no sessions attached to it. The value represented by this object is of relevance only when the value of Maximum Idle time (hwNatConfMaxBindIdleTime) is non-zero.')
hwNatAddrBindInTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrBindInTranslate.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrBindInTranslate.setDescription('The number of inbound packets that were translated as per this BIND entry.')
hwNatAddrBindOutTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrBindOutTranslate.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrBindOutTranslate.setDescription('The number of outbound packets that were translated as per this BIND entry.')
hwNatAddrPortBindNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrPortBindNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPortBindNumberOfEntries.setDescription('This object maintains a count of the number of entries that currently exist in the hwNatAddrPortBindTable.')
hwNatAddrPortBindTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 4), )
if mibBuilder.loadTexts: hwNatAddrPortBindTable.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPortBindTable.setDescription('This table holds information about the currently active NAPT BINDs.')
hwNatAddrPortBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HUAWEI-NAT-EXT-MIB", "hwNatAddrPortBindQueryVrfName"), (0, "HUAWEI-NAT-EXT-MIB", "hwNatAddrPortBindQueryAddr"), (0, "HUAWEI-NAT-EXT-MIB", "hwNatAddrPortBindQueryProtocol"), (0, "HUAWEI-NAT-EXT-MIB", "hwNatAddrPortBindQueryPort"), (0, "HUAWEI-NAT-EXT-MIB", "hwNatAddrPortBindType"))
if mibBuilder.loadTexts: hwNatAddrPortBindEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPortBindEntry.setDescription('Each entry in the this table holds information a NAPT BIND that is currently active.')
hwNatAddrPortBindQueryVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwNatAddrPortBindQueryVrfName.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPortBindQueryVrfName.setDescription('Vrf name for the hwNatAddrPortBindQueryAddr.')
hwNatAddrPortBindQueryAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwNatAddrPortBindQueryAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPortBindQueryAddr.setDescription('This object represents the query ip address, which can be local address or global address, depending on the value of hwNatAddrBindType.')
hwNatAddrPortBindQueryProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hwNatAddrPortBindQueryProtocol.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPortBindQueryProtocol.setDescription('This object specifies a protocol identifier.')
hwNatAddrPortBindQueryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hwNatAddrPortBindQueryPort.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPortBindQueryPort.setDescription('This object represents the query port number, which can be local port number or global port number, depending on the value of hwNatAddrPortBindType..')
hwNatAddrPortBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("natOutbound", 1), ("natServer", 2), ("staticPatLocalToGlobal", 3), ("staticPatGlobalToLocal", 4))))
if mibBuilder.loadTexts: hwNatAddrPortBindType.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPortBindType.setDescription('This object represents the type of the BIND. ')
hwNatAddrPortBindMappedVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrPortBindMappedVrfName.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPortBindMappedVrfName.setDescription('Vrf name for the hwNatAddrPortBindMappedAddr.')
hwNatAddrPortBindMappedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 4, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrPortBindMappedAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPortBindMappedAddr.setDescription('This object represents the address maps to the hwNatAddrPortBindQueryAddr.')
hwNatAddrPortBindMappedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrPortBindMappedPort.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPortBindMappedPort.setDescription('This object represents the port number that, in conjunction with hwNatAddrPortBindMappedAddr, maps to the hwNatAddrPortBindQueryPort .')
hwNatAddrPortBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrPortBindId.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPortBindId.setDescription('This object represents a BIND id that is dynamically assigned to each BIND by a NAT enabled device. Each BIND is represented by a unique BIND id across both, the Address Bind and Address-Port Bind tables.')
hwNatAddrPortBindSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 4, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrPortBindSessionCount.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPortBindSessionCount.setDescription('Number of sessions currently using this BIND.')
hwNatAddrPortBindCurrentIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 4, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrPortBindCurrentIdleTime.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPortBindCurrentIdleTime.setDescription('At any given instance of time, this object indicates the time that this BIND has been idle with no sessions attached to it. The value represented by this object is of relevance only when the value of Maximum Idle time (hwNatConfMaxBindIdleTime) is non-zero.')
hwNatAddrPortBindInTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrPortBindInTranslate.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPortBindInTranslate.setDescription('The number of inbound packets that were translated as per this BIND entry.')
hwNatAddrPortBindOutTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrPortBindOutTranslate.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPortBindOutTranslate.setDescription('The number of outbound packets that were translated as per this BIND entry.')
hwNatExtIfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 5), )
if mibBuilder.loadTexts: hwNatExtIfTable.setStatus('current')
if mibBuilder.loadTexts: hwNatExtIfTable.setDescription('This table holds information about the currently active interfaces.')
hwNatExtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 5, 1), ).setIndexNames((0, "HUAWEI-NAT-EXT-MIB", "hwNatExtIfName"))
if mibBuilder.loadTexts: hwNatExtIfEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatExtIfEntry.setDescription('Each entry in the this table holds information about an interface that is currently active.')
hwNatExtIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 1, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatExtIfName.setStatus('current')
if mibBuilder.loadTexts: hwNatExtIfName.setDescription('This object represents the name of an interface.')
hwNatStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 2))
hwNatProtocolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 2, 1), )
if mibBuilder.loadTexts: hwNatProtocolStatsTable.setStatus('current')
if mibBuilder.loadTexts: hwNatProtocolStatsTable.setDescription('The (conceptual) table containing per protocol NAT statistics.')
hwNatProtocolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 2, 1, 1), ).setIndexNames((0, "HUAWEI-NAT-EXT-MIB", "hwNatProtocolStatsName"))
if mibBuilder.loadTexts: hwNatProtocolStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatProtocolStatsEntry.setDescription('An entry (conceptual row) containing NAT statistics pertaining to a particular protocol.')
hwNatProtocolStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 2, 1, 1, 1), NATProtocolType())
if mibBuilder.loadTexts: hwNatProtocolStatsName.setStatus('current')
if mibBuilder.loadTexts: hwNatProtocolStatsName.setDescription('This object represents the protocol pertaining to which statistics are reported.')
hwNatProtocolStatsInTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatProtocolStatsInTranslate.setStatus('current')
if mibBuilder.loadTexts: hwNatProtocolStatsInTranslate.setDescription('The number of inbound packets, pertaining to the protocol identified by hwNatProtocolStatsName, that underwent NAT.')
hwNatProtocolStatsOutTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatProtocolStatsOutTranslate.setStatus('current')
if mibBuilder.loadTexts: hwNatProtocolStatsOutTranslate.setDescription('The number of outbound packets, pertaining to the protocol identified by hwNatProtocolStatsName, that underwent NAT.')
hwNatProtocolStatsRejectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatProtocolStatsRejectCount.setStatus('current')
if mibBuilder.loadTexts: hwNatProtocolStatsRejectCount.setDescription('The number of packets, pertaining to the protocol identified by hwNatProtocolStatsName, that had to be rejected/dropped due to lack of resources. These rejections could be due to session timeout, resource unavailability etc.')
hwNatInterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 2, 2), )
if mibBuilder.loadTexts: hwNatInterfaceStatsTable.setStatus('current')
if mibBuilder.loadTexts: hwNatInterfaceStatsTable.setDescription('This table augments the hwNatInterfaceTable and provides statistics information pertaining to the specified interface.')
hwNatInterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hwNatInterfaceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatInterfaceStatsEntry.setDescription('Each entry of the hwNatInterfaceStatsTable represents stats pertaining to one interface, which is identified by its InterfaceIndex.')
hwNatInterfacePktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatInterfacePktsIn.setStatus('current')
if mibBuilder.loadTexts: hwNatInterfacePktsIn.setDescription('Number of packets received on this interface that were translated.')
hwNatInterfacePktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatInterfacePktsOut.setStatus('current')
if mibBuilder.loadTexts: hwNatInterfacePktsOut.setDescription('Number of translated packets that were sent out this interface.')
hwNATSessionCntTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 2, 3), )
if mibBuilder.loadTexts: hwNATSessionCntTable.setStatus('current')
if mibBuilder.loadTexts: hwNATSessionCntTable.setDescription('A table for showing nat session table number.')
hwNATSessionCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 2, 3, 1), ).setIndexNames((0, "HUAWEI-NAT-EXT-MIB", "hwNATSlotIndex"))
if mibBuilder.loadTexts: hwNATSessionCntEntry.setStatus('current')
if mibBuilder.loadTexts: hwNATSessionCntEntry.setDescription('A entry for showing nat session table number.')
hwNATSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNATSlotIndex.setStatus('current')
if mibBuilder.loadTexts: hwNATSlotIndex.setDescription(' Slot index that identifies the physical position of a spu board that support NAT. ')
hwNATSessionCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNATSessionCnt.setStatus('current')
if mibBuilder.loadTexts: hwNATSessionCnt.setDescription('NAT session number of the selected slot')
hwNatAddrPool = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 3))
hwNatAddrPoolNumOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 3, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrPoolNumOfEntries.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPoolNumOfEntries.setDescription('This object maintains a count of the number of entries that currently exist in the hwNatAddrPoolTable.')
hwNatAddrPoolTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 3, 2), )
if mibBuilder.loadTexts: hwNatAddrPoolTable.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPoolTable.setDescription('Table of NAT address pool instances.')
hwNatAddrPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 3, 2, 1), ).setIndexNames((0, "HUAWEI-NAT-EXT-MIB", "hwNatAddrPoolIndex"))
if mibBuilder.loadTexts: hwNatAddrPoolEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPoolEntry.setDescription('An entry in the table, containing information about a NAT address pool.')
hwNatAddrPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)))
if mibBuilder.loadTexts: hwNatAddrPoolIndex.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPoolIndex.setDescription('Index of the NAT address pool.')
hwNatAddrPoolStartAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrPoolStartAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPoolStartAddr.setDescription('Start IP address of the NAT address pool.')
hwNatAddrPoolEndAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrPoolEndAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPoolEndAddr.setDescription('End IP address of the NAT address pool.')
hwNatAddrPoolRefTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 3, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrPoolRefTimes.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPoolRefTimes.setDescription('Number of times the NAT address pool is referenced.')
hwNatAddrPoolRefType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAddrPoolRefType.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPoolRefType.setDescription('Mode of referencing the NAT address pool. It contains NOPAT(1) , PAT(2) and EasyIP(3)')
hwNatDnsMap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 4))
hwNatDnsMapNumOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatDnsMapNumOfEntries.setStatus('current')
if mibBuilder.loadTexts: hwNatDnsMapNumOfEntries.setDescription('This object maintains a count of the number of entries that currently exist in the hwNatDnsMapTable.')
hwNatDnsMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 4, 2), )
if mibBuilder.loadTexts: hwNatDnsMapTable.setStatus('current')
if mibBuilder.loadTexts: hwNatDnsMapTable.setDescription('Table of instances of DNS mapping.')
hwNatDnsMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 4, 2, 1), ).setIndexNames((0, "HUAWEI-NAT-EXT-MIB", "hwNatDnsMapIndex"))
if mibBuilder.loadTexts: hwNatDnsMapEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatDnsMapEntry.setDescription('An entry in the table, containing information about a DNS mapping.')
hwNatDnsMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwNatDnsMapIndex.setStatus('current')
if mibBuilder.loadTexts: hwNatDnsMapIndex.setDescription('Index of the DNS mapping.')
hwNatDnsMapDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatDnsMapDomainName.setStatus('current')
if mibBuilder.loadTexts: hwNatDnsMapDomainName.setDescription('Domain name of the DNS mapping.')
hwNatDnsMapIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 4, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatDnsMapIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatDnsMapIpAddr.setDescription('IP address provided for external access.')
hwNatDnsMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatDnsMapPort.setStatus('current')
if mibBuilder.loadTexts: hwNatDnsMapPort.setDescription('Port number of the service provided for external access.')
hwNatDnsMapProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatDnsMapProtocol.setStatus('current')
if mibBuilder.loadTexts: hwNatDnsMapProtocol.setDescription('Type of the protocol carried over IP.')
hwNatOutbound = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 5))
hwNatOutboundNumOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatOutboundNumOfEntries.setStatus('current')
if mibBuilder.loadTexts: hwNatOutboundNumOfEntries.setDescription('This object maintains a count of the number of entries that currently exist in the hwNatOutboundTable.')
hwNatOutboundTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 5, 2), )
if mibBuilder.loadTexts: hwNatOutboundTable.setStatus('current')
if mibBuilder.loadTexts: hwNatOutboundTable.setDescription('Table of outbound NAT instances.')
hwNatOutboundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 5, 2, 1), ).setIndexNames((0, "HUAWEI-NAT-EXT-MIB", "hwNatOutboundIndex"))
if mibBuilder.loadTexts: hwNatOutboundEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatOutboundEntry.setDescription('An entry in the table, containing information about a outbound NAT.')
hwNatOutboundIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: hwNatOutboundIndex.setStatus('current')
if mibBuilder.loadTexts: hwNatOutboundIndex.setDescription('Index of the outbound NAT entry. ')
hwNatOutboundInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 5, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatOutboundInterface.setStatus('current')
if mibBuilder.loadTexts: hwNatOutboundInterface.setDescription('IfIndex of the interface that configured with the outbound NAT. ')
hwNatOutboundAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 5, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2000, 3999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatOutboundAclNum.setStatus('current')
if mibBuilder.loadTexts: hwNatOutboundAclNum.setDescription('Basic or advanced ACL that is in use.')
hwNatOutboundAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 5, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatOutboundAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatOutboundAddr.setDescription('IP address of the NAT address pool or interface.')
hwNatOutboundPat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatOutboundPat.setStatus('current')
if mibBuilder.loadTexts: hwNatOutboundPat.setDescription('This object represents type of the translated IP, NOPAT(1) or PAT(2).')
hwNatOutboundEasyIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 5, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatOutboundEasyIp.setStatus('current')
if mibBuilder.loadTexts: hwNatOutboundEasyIp.setDescription('Whether type of the translated IP address is EasyIP.')
hwNatOverlapMap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 6))
hwNatOverlapMapNumOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatOverlapMapNumOfEntries.setStatus('current')
if mibBuilder.loadTexts: hwNatOverlapMapNumOfEntries.setDescription('This object maintains a count of the number of entries that currently exist in the hwNatOverlapMapTable.')
hwNatOverlapMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 6, 2), )
if mibBuilder.loadTexts: hwNatOverlapMapTable.setStatus('current')
if mibBuilder.loadTexts: hwNatOverlapMapTable.setDescription('Table of instances of overlap NAT that mapping between an overlapped address pool and a temporary address pool.')
hwNatOverlapMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 6, 2, 1), ).setIndexNames((0, "HUAWEI-NAT-EXT-MIB", "hwNatOverlapMapIndex"))
if mibBuilder.loadTexts: hwNatOverlapMapEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatOverlapMapEntry.setDescription('An entry in the table, containing information about a overlap mapping.')
hwNatOverlapMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 6, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwNatOverlapMapIndex.setStatus('current')
if mibBuilder.loadTexts: hwNatOverlapMapIndex.setDescription('Index of the mapping between the overlapped address pool and the temporary address pool.')
hwNatOverlapMapLapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 6, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatOverlapMapLapAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatOverlapMapLapAddr.setDescription('Start IP address of the overlapped address pool.')
hwNatOverlapMapTmpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 6, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatOverlapMapTmpAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatOverlapMapTmpAddr.setDescription('Start IP address of the temporary address pool.')
hwNatOverlapMapPoolLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 6, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatOverlapMapPoolLen.setStatus('current')
if mibBuilder.loadTexts: hwNatOverlapMapPoolLen.setDescription('Length of the address pool.')
hwNatOverlapMapVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 6, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatOverlapMapVpnName.setStatus('current')
if mibBuilder.loadTexts: hwNatOverlapMapVpnName.setDescription('Index of the VPN instance of the private network.')
hwNatServer = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 7))
hwNatServerNumOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatServerNumOfEntries.setStatus('current')
if mibBuilder.loadTexts: hwNatServerNumOfEntries.setDescription('This object maintains a count of the number of entries that currently exist in the hwNatServerTable.')
hwNatServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 7, 2), )
if mibBuilder.loadTexts: hwNatServerTable.setStatus('current')
if mibBuilder.loadTexts: hwNatServerTable.setDescription('Table of NAT server instances.')
hwNatServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 7, 2, 1), ).setIndexNames((0, "HUAWEI-NAT-EXT-MIB", "hwNatServerIndex"))
if mibBuilder.loadTexts: hwNatServerEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatServerEntry.setDescription('An entry in the table, containing information about a NAT server.')
hwNatServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 7, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwNatServerIndex.setStatus('current')
if mibBuilder.loadTexts: hwNatServerIndex.setDescription('An index that uniquely identifies an entry in the NAT server table.')
hwNatServerInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 7, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatServerInterface.setStatus('current')
if mibBuilder.loadTexts: hwNatServerInterface.setDescription('Interface Name of the NAT server.')
hwNatServerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatServerProtocol.setStatus('current')
if mibBuilder.loadTexts: hwNatServerProtocol.setDescription('Protocol type of the NAT server.')
hwNatServerGlobalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 7, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatServerGlobalAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatServerGlobalAddr.setDescription('Public address of the NAT server.')
hwNatServerGlobalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 7, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatServerGlobalPort.setStatus('current')
if mibBuilder.loadTexts: hwNatServerGlobalPort.setDescription('Public port number of the NAT server.')
hwNatServerInsideAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 7, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatServerInsideAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatServerInsideAddr.setDescription('Private address of the NAT server.')
hwNatServerInsidePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 7, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatServerInsidePort.setStatus('current')
if mibBuilder.loadTexts: hwNatServerInsidePort.setDescription('Private port number of the NAT server.')
hwNatServerVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 7, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatServerVpnName.setStatus('current')
if mibBuilder.loadTexts: hwNatServerVpnName.setDescription('VPN instance name of the NAT server.')
hwNatStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 8))
hwNatStaticNumOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatStaticNumOfEntries.setStatus('current')
if mibBuilder.loadTexts: hwNatStaticNumOfEntries.setDescription('This object maintains a count of the number of entries that currently exist in the hwNatStaticTable.')
hwNatStaticTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 8, 2), )
if mibBuilder.loadTexts: hwNatStaticTable.setStatus('current')
if mibBuilder.loadTexts: hwNatStaticTable.setDescription('Table of static NAT instances.')
hwNatStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 8, 2, 1), ).setIndexNames((0, "HUAWEI-NAT-EXT-MIB", "hwNatStaticIndex"))
if mibBuilder.loadTexts: hwNatStaticEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatStaticEntry.setDescription('An entry in the table, containing information about a static NAT.')
hwNatStaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 8, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwNatStaticIndex.setStatus('current')
if mibBuilder.loadTexts: hwNatStaticIndex.setDescription('An index that uniquely identifies an entry in the static NAT table.')
hwNatStaticInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 8, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatStaticInterface.setStatus('current')
if mibBuilder.loadTexts: hwNatStaticInterface.setDescription('Interface Name of the static NAT.')
hwNatStaticProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatStaticProtocol.setStatus('current')
if mibBuilder.loadTexts: hwNatStaticProtocol.setDescription('Protocol type of the static NAT.')
hwNatStaticGlobalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 8, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatStaticGlobalAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatStaticGlobalAddr.setDescription('Public address of the static NAT.')
hwNatStaticGlobalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 8, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatStaticGlobalPort.setStatus('current')
if mibBuilder.loadTexts: hwNatStaticGlobalPort.setDescription('Public port number of the static NAT.')
hwNatStaticInsideAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 8, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatStaticInsideAddr.setStatus('current')
if mibBuilder.loadTexts: hwNatStaticInsideAddr.setDescription('Private address of the static NAT.')
hwNatStaticInsidePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 8, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatStaticInsidePort.setStatus('current')
if mibBuilder.loadTexts: hwNatStaticInsidePort.setDescription('Private port number of the static NAT.')
hwNatStaticVpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 8, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatStaticVpnName.setStatus('current')
if mibBuilder.loadTexts: hwNatStaticVpnName.setDescription('VPN instance name of the static NAT.')
hwNatStaticNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 8, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatStaticNetMask.setStatus('current')
if mibBuilder.loadTexts: hwNatStaticNetMask.setDescription('Network mask of the static NAT.')
hwNatAlg = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 9))
hwNatAlgFtp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 9, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAlgFtp.setStatus('current')
if mibBuilder.loadTexts: hwNatAlgFtp.setDescription('Whether the FTP NAT ALG is enabled. ')
hwNatAlgDns = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 9, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAlgDns.setStatus('current')
if mibBuilder.loadTexts: hwNatAlgDns.setDescription('Whether the DNS NAT ALG is enabled. ')
hwNatAlgSip = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 9, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAlgSip.setStatus('current')
if mibBuilder.loadTexts: hwNatAlgSip.setDescription('Whether the Sip NAT ALG is enabled. ')
hwNatAlgRtsp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 9, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatAlgRtsp.setStatus('current')
if mibBuilder.loadTexts: hwNatAlgRtsp.setDescription('Whether the Rtsp NAT ALG is enabled. ')
hwNatFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 10))
hwNatFilterMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 10, 1), NATFilterMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatFilterMode.setStatus('current')
if mibBuilder.loadTexts: hwNatFilterMode.setDescription('The mode of NAT filter. ')
hwNatPortMap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 11))
hwNatPortMapSipPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 11, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatPortMapSipPort.setStatus('current')
if mibBuilder.loadTexts: hwNatPortMapSipPort.setDescription('Port number for Sip port-mapping . ')
hwNatPortMapSipAcl = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 11, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2000, 2999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatPortMapSipAcl.setStatus('current')
if mibBuilder.loadTexts: hwNatPortMapSipAcl.setDescription('ACL number for Sip port-mapping . ')
hwNatPortMapRtspPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 11, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatPortMapRtspPort.setStatus('current')
if mibBuilder.loadTexts: hwNatPortMapRtspPort.setDescription('Port number for Rtsp port-mapping . ')
hwNatPortMapRtspAcl = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 11, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2000, 2999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatPortMapRtspAcl.setStatus('current')
if mibBuilder.loadTexts: hwNatPortMapRtspAcl.setDescription('ACL number for Rtsp port-mapping . ')
hwNatProtoAgingTime = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 12))
hwNatSipAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 12, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatSipAgingTime.setStatus('current')
if mibBuilder.loadTexts: hwNatSipAgingTime.setDescription('Aging time for Sip stream. ')
hwNatSipMediaAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 12, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatSipMediaAgingTime.setStatus('current')
if mibBuilder.loadTexts: hwNatSipMediaAgingTime.setDescription('Aging time for Sip media stream. ')
hwNatRtspAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 12, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatRtspAgingTime.setStatus('current')
if mibBuilder.loadTexts: hwNatRtspAgingTime.setDescription('Aging time for Rtsp stream. ')
hwNatRtspMediaAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 12, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatRtspMediaAgingTime.setStatus('current')
if mibBuilder.loadTexts: hwNatRtspMediaAgingTime.setDescription('Aging time for Rtsp media stream. ')
hwNatMap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 13))
hwNatMapNumOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 13, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatMapNumOfEntries.setStatus('current')
if mibBuilder.loadTexts: hwNatMapNumOfEntries.setDescription('This object maintains a count of the number of entries that currently exist in the hwNatMapTable.')
hwNatMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 13, 2), )
if mibBuilder.loadTexts: hwNatMapTable.setStatus('current')
if mibBuilder.loadTexts: hwNatMapTable.setDescription('Table of static NAT instances.')
hwNatMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 13, 2, 1), ).setIndexNames((0, "HUAWEI-NAT-EXT-MIB", "hwNatMapIndex"))
if mibBuilder.loadTexts: hwNatMapEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatMapEntry.setDescription('An entry in the table, containing information about a Nat map.')
hwNatMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 13, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hwNatMapIndex.setStatus('current')
if mibBuilder.loadTexts: hwNatMapIndex.setDescription('An index that uniquely identifies an entry in the Nat map table.')
hwNatMapProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 13, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatMapProtocol.setStatus('current')
if mibBuilder.loadTexts: hwNatMapProtocol.setDescription('The protocol of nat map entry. The value is TCP or UDP.')
hwNatMapDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 2, 13, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatMapDestPort.setStatus('current')
if mibBuilder.loadTexts: hwNatMapDestPort.setDescription('The port number of nat map entry.')
hwNatExtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4))
hwNatExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 1))
hwNatExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 1, 1)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatBindGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatExtMIBCompliance = hwNatExtMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hwNatExtMIBCompliance.setDescription('The compliance statement for devices running NAT.')
hwNatExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 2))
hwNatNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 2, 1)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatPacketDiscard"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatNotificationGroup = hwNatNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatNotificationGroup.setDescription('A collection of notifications generated by devices supporting this MIB.')
hwNatBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 2, 2)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatAddrBindNumberOfEntries"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrBindId"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrBindSessionCount"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrBindCurrentIdleTime"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrBindInTranslate"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrBindOutTranslate"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrPortBindNumberOfEntries"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrPortBindId"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrPortBindSessionCount"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrPortBindCurrentIdleTime"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrPortBindInTranslate"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrPortBindOutTranslate"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrBindMappedAddr"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrBindMappedVrfName"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrPortBindMappedPort"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrPortBindMappedAddr"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrPortBindMappedVrfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatBindGroup = hwNatBindGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatBindGroup.setDescription('A collection of BIND-related objects required to support management of devices supporting NAT.')
hwNatStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 2, 3)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatProtocolStatsInTranslate"), ("HUAWEI-NAT-EXT-MIB", "hwNatProtocolStatsOutTranslate"), ("HUAWEI-NAT-EXT-MIB", "hwNatProtocolStatsRejectCount"), ("HUAWEI-NAT-EXT-MIB", "hwNatInterfacePktsIn"), ("HUAWEI-NAT-EXT-MIB", "hwNatInterfacePktsOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatStatsGroup = hwNatStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatStatsGroup.setDescription('A collection of NAT statistics related objects required to support troubleshooting/monitoring NAT operation.')
hwNatExtIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 2, 4)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatExtIfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatExtIfGroup = hwNatExtIfGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatExtIfGroup.setDescription('Description.')
hwNatAddrPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 2, 5)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatAddrPoolNumOfEntries"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrPoolStartAddr"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrPoolEndAddr"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrPoolRefTimes"), ("HUAWEI-NAT-EXT-MIB", "hwNatAddrPoolRefType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatAddrPoolGroup = hwNatAddrPoolGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatAddrPoolGroup.setDescription('This is a NAT address pool group.')
hwNatDnsMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 2, 6)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatDnsMapNumOfEntries"), ("HUAWEI-NAT-EXT-MIB", "hwNatDnsMapDomainName"), ("HUAWEI-NAT-EXT-MIB", "hwNatDnsMapIpAddr"), ("HUAWEI-NAT-EXT-MIB", "hwNatDnsMapPort"), ("HUAWEI-NAT-EXT-MIB", "hwNatDnsMapProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatDnsMapGroup = hwNatDnsMapGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatDnsMapGroup.setDescription('This is a NAT DNS mapping group.')
hwNatOutboundGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 2, 7)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatOutboundNumOfEntries"), ("HUAWEI-NAT-EXT-MIB", "hwNatOutboundInterface"), ("HUAWEI-NAT-EXT-MIB", "hwNatOutboundAclNum"), ("HUAWEI-NAT-EXT-MIB", "hwNatOutboundAddr"), ("HUAWEI-NAT-EXT-MIB", "hwNatOutboundPat"), ("HUAWEI-NAT-EXT-MIB", "hwNatOutboundEasyIp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatOutboundGroup = hwNatOutboundGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatOutboundGroup.setDescription('This is a outbound NAT group.')
hwNatOverlapMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 2, 8)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatOverlapMapNumOfEntries"), ("HUAWEI-NAT-EXT-MIB", "hwNatOverlapMapLapAddr"), ("HUAWEI-NAT-EXT-MIB", "hwNatOverlapMapTmpAddr"), ("HUAWEI-NAT-EXT-MIB", "hwNatOverlapMapPoolLen"), ("HUAWEI-NAT-EXT-MIB", "hwNatOverlapMapVpnName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatOverlapMapGroup = hwNatOverlapMapGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatOverlapMapGroup.setDescription('This is a overlap mapping group.')
hwNatServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 2, 9)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatServerNumOfEntries"), ("HUAWEI-NAT-EXT-MIB", "hwNatServerInterface"), ("HUAWEI-NAT-EXT-MIB", "hwNatServerProtocol"), ("HUAWEI-NAT-EXT-MIB", "hwNatServerGlobalAddr"), ("HUAWEI-NAT-EXT-MIB", "hwNatServerGlobalPort"), ("HUAWEI-NAT-EXT-MIB", "hwNatServerInsideAddr"), ("HUAWEI-NAT-EXT-MIB", "hwNatServerInsidePort"), ("HUAWEI-NAT-EXT-MIB", "hwNatServerVpnName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatServerGroup = hwNatServerGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatServerGroup.setDescription('This is a NAT server group.')
hwNatStaticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 2, 10)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatStaticNumOfEntries"), ("HUAWEI-NAT-EXT-MIB", "hwNatStaticInterface"), ("HUAWEI-NAT-EXT-MIB", "hwNatStaticProtocol"), ("HUAWEI-NAT-EXT-MIB", "hwNatStaticGlobalAddr"), ("HUAWEI-NAT-EXT-MIB", "hwNatStaticGlobalPort"), ("HUAWEI-NAT-EXT-MIB", "hwNatStaticInsideAddr"), ("HUAWEI-NAT-EXT-MIB", "hwNatStaticInsidePort"), ("HUAWEI-NAT-EXT-MIB", "hwNatStaticVpnName"), ("HUAWEI-NAT-EXT-MIB", "hwNatStaticNetMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatStaticGroup = hwNatStaticGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatStaticGroup.setDescription('This is a static NAT group.')
hwNatAlgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 2, 11)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatAlgFtp"), ("HUAWEI-NAT-EXT-MIB", "hwNatAlgDns"), ("HUAWEI-NAT-EXT-MIB", "hwNatAlgSip"), ("HUAWEI-NAT-EXT-MIB", "hwNatAlgRtsp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatAlgGroup = hwNatAlgGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatAlgGroup.setDescription('This is a NAT ALG group.')
hwNatFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 2, 12)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatFilterMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatFilterGroup = hwNatFilterGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatFilterGroup.setDescription('This is a NAT Filter group.')
hwNatPortMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 2, 13)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatPortMapSipPort"), ("HUAWEI-NAT-EXT-MIB", "hwNatPortMapSipAcl"), ("HUAWEI-NAT-EXT-MIB", "hwNatPortMapRtspPort"), ("HUAWEI-NAT-EXT-MIB", "hwNatPortMapRtspAcl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatPortMapGroup = hwNatPortMapGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatPortMapGroup.setDescription('This is the nat portmap group.')
hwNatAgingTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 2, 14)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatSipAgingTime"), ("HUAWEI-NAT-EXT-MIB", "hwNatSipMediaAgingTime"), ("HUAWEI-NAT-EXT-MIB", "hwNatRtspAgingTime"), ("HUAWEI-NAT-EXT-MIB", "hwNatRtspMediaAgingTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatAgingTimeGroup = hwNatAgingTimeGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatAgingTimeGroup.setDescription('This is the nat Aging time group.')
hwNatMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 226, 4, 2, 15)).setObjects(("HUAWEI-NAT-EXT-MIB", "hwNatMapNumOfEntries"), ("HUAWEI-NAT-EXT-MIB", "hwNatMapProtocol"), ("HUAWEI-NAT-EXT-MIB", "hwNatMapDestPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatMapGroup = hwNatMapGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatMapGroup.setDescription('This is the nat map group.')
mibBuilder.exportSymbols("HUAWEI-NAT-EXT-MIB", hwNatDnsMapNumOfEntries=hwNatDnsMapNumOfEntries, hwNatOverlapMapVpnName=hwNatOverlapMapVpnName, hwNatAddrPortBindInTranslate=hwNatAddrPortBindInTranslate, hwNatAddrPortBindType=hwNatAddrPortBindType, hwNatDnsMapEntry=hwNatDnsMapEntry, hwNatAddrBindId=hwNatAddrBindId, hwNatAddrPortBindId=hwNatAddrPortBindId, hwNatAddrPoolRefType=hwNatAddrPoolRefType, hwNatProtocolStatsTable=hwNatProtocolStatsTable, hwNatPortMapRtspPort=hwNatPortMapRtspPort, hwNatAddrPoolRefTimes=hwNatAddrPoolRefTimes, hwNatAddrPoolNumOfEntries=hwNatAddrPoolNumOfEntries, hwNatOverlapMapPoolLen=hwNatOverlapMapPoolLen, hwNatStaticNetMask=hwNatStaticNetMask, hwNatBindGroup=hwNatBindGroup, hwNatOutboundGroup=hwNatOutboundGroup, hwNatBind=hwNatBind, hwNatAddrPoolGroup=hwNatAddrPoolGroup, hwNatAddrPoolEndAddr=hwNatAddrPoolEndAddr, hwNatProtocolStatsOutTranslate=hwNatProtocolStatsOutTranslate, hwNatInterfaceStatsTable=hwNatInterfaceStatsTable, hwNatNotificationGroup=hwNatNotificationGroup, hwNatAlgDns=hwNatAlgDns, hwNATSessionCntTable=hwNATSessionCntTable, hwNatAddrBindMappedVrfName=hwNatAddrBindMappedVrfName, hwNatProtocolStatsInTranslate=hwNatProtocolStatsInTranslate, hwNatOutboundAddr=hwNatOutboundAddr, hwNatAddrBindTable=hwNatAddrBindTable, hwNatAddrBindCurrentIdleTime=hwNatAddrBindCurrentIdleTime, hwNatAddrBindQueryAddr=hwNatAddrBindQueryAddr, hwNatAddrPortBindCurrentIdleTime=hwNatAddrPortBindCurrentIdleTime, hwNatServerInsidePort=hwNatServerInsidePort, hwNatPortMapSipPort=hwNatPortMapSipPort, hwNatFilterMode=hwNatFilterMode, hwNatServerGroup=hwNatServerGroup, hwNatExtMIBGroups=hwNatExtMIBGroups, hwNatOutboundAclNum=hwNatOutboundAclNum, hwNatOverlapMapEntry=hwNatOverlapMapEntry, hwNatServerVpnName=hwNatServerVpnName, hwNatAgingTimeGroup=hwNatAgingTimeGroup, hwNatPortMapRtspAcl=hwNatPortMapRtspAcl, hwNatProtocolStatsEntry=hwNatProtocolStatsEntry, hwNATSessionCnt=hwNATSessionCnt, hwNatAddrBindInTranslate=hwNatAddrBindInTranslate, hwNatRtspAgingTime=hwNatRtspAgingTime, hwNatAddrBindSessionCount=hwNatAddrBindSessionCount, hwNatDnsMapDomainName=hwNatDnsMapDomainName, hwNatServer=hwNatServer, hwNatStaticTable=hwNatStaticTable, hwNatStaticProtocol=hwNatStaticProtocol, hwNatOverlapMapGroup=hwNatOverlapMapGroup, hwNatMapProtocol=hwNatMapProtocol, hwNatStaticInterface=hwNatStaticInterface, hwNatAlgFtp=hwNatAlgFtp, hwNatOutboundNumOfEntries=hwNatOutboundNumOfEntries, hwNatStaticInsidePort=hwNatStaticInsidePort, hwNatExtIfEntry=hwNatExtIfEntry, hwNatExtMIBConformance=hwNatExtMIBConformance, hwNatServerProtocol=hwNatServerProtocol, hwNatPortMapSipAcl=hwNatPortMapSipAcl, hwNatAlg=hwNatAlg, hwNatStatic=hwNatStatic, hwNatAddrPortBindTable=hwNatAddrPortBindTable, hwNatOverlapMapTable=hwNatOverlapMapTable, hwNatAddrBindEntry=hwNatAddrBindEntry, hwNatFilterGroup=hwNatFilterGroup, hwNatAddrPortBindMappedVrfName=hwNatAddrPortBindMappedVrfName, hwNatStatistics=hwNatStatistics, hwNatMapEntry=hwNatMapEntry, hwNatStaticEntry=hwNatStaticEntry, hwNatOutboundTable=hwNatOutboundTable, hwNatAddrPortBindQueryAddr=hwNatAddrPortBindQueryAddr, hwNatMapGroup=hwNatMapGroup, hwNatPortMap=hwNatPortMap, hwNatAddrPortBindQueryVrfName=hwNatAddrPortBindQueryVrfName, hwNatAddrPortBindMappedPort=hwNatAddrPortBindMappedPort, hwNatServerGlobalPort=hwNatServerGlobalPort, hwNatServerInterface=hwNatServerInterface, hwNatProtoAgingTime=hwNatProtoAgingTime, hwNatAddrBindQueryVrfName=hwNatAddrBindQueryVrfName, hwNatOverlapMapLapAddr=hwNatOverlapMapLapAddr, hwNatStaticGroup=hwNatStaticGroup, hwNatSipMediaAgingTime=hwNatSipMediaAgingTime, hwNatOverlapMapTmpAddr=hwNatOverlapMapTmpAddr, hwNatMap=hwNatMap, hwNatAddrPoolIndex=hwNatAddrPoolIndex, hwNatPortMapGroup=hwNatPortMapGroup, hwNatRtspMediaAgingTime=hwNatRtspMediaAgingTime, hwNatDnsMapIndex=hwNatDnsMapIndex, PYSNMP_MODULE_ID=hwNatExtMIB, hwNatAddrPortBindEntry=hwNatAddrPortBindEntry, hwNatFilter=hwNatFilter, hwNatStaticVpnName=hwNatStaticVpnName, hwNatOutboundInterface=hwNatOutboundInterface, hwNatAddrPool=hwNatAddrPool, hwNatAddrPortBindNumberOfEntries=hwNatAddrPortBindNumberOfEntries, hwNatStaticGlobalPort=hwNatStaticGlobalPort, hwNatAddrBindOutTranslate=hwNatAddrBindOutTranslate, hwNatStaticNumOfEntries=hwNatStaticNumOfEntries, hwNatServerNumOfEntries=hwNatServerNumOfEntries, hwNatSipAgingTime=hwNatSipAgingTime, hwNatAddrPortBindQueryProtocol=hwNatAddrPortBindQueryProtocol, hwNatExtIfTable=hwNatExtIfTable, hwNatOutboundPat=hwNatOutboundPat, hwNatMapDestPort=hwNatMapDestPort, hwNatExtMIBCompliances=hwNatExtMIBCompliances, hwNatAddrBindMappedAddr=hwNatAddrBindMappedAddr, hwNatExtMIBObjects=hwNatExtMIBObjects, hwNatAlgRtsp=hwNatAlgRtsp, NATProtocolType=NATProtocolType, hwNatOutboundEasyIp=hwNatOutboundEasyIp, hwNatAddrBindType=hwNatAddrBindType, hwNatOverlapMapIndex=hwNatOverlapMapIndex, hwNatInterfacePktsOut=hwNatInterfacePktsOut, hwNatDnsMapProtocol=hwNatDnsMapProtocol, hwNatStaticIndex=hwNatStaticIndex, hwNatExtMIBCompliance=hwNatExtMIBCompliance, hwNatDnsMapPort=hwNatDnsMapPort, hwNatServerIndex=hwNatServerIndex, hwNatProtocolStatsRejectCount=hwNatProtocolStatsRejectCount, hwNatAddrPoolStartAddr=hwNatAddrPoolStartAddr, hwNatDnsMapGroup=hwNatDnsMapGroup, hwNatAddrBindNumberOfEntries=hwNatAddrBindNumberOfEntries, hwNatOutboundEntry=hwNatOutboundEntry, hwNatInterfaceStatsEntry=hwNatInterfaceStatsEntry, hwNatDnsMapTable=hwNatDnsMapTable, hwNatExtMIBNotifications=hwNatExtMIBNotifications, hwNatDnsMap=hwNatDnsMap, hwNatStaticInsideAddr=hwNatStaticInsideAddr, NATFilterMode=NATFilterMode, hwNATSlotIndex=hwNATSlotIndex, hwNatMapTable=hwNatMapTable, hwNatAddrPortBindMappedAddr=hwNatAddrPortBindMappedAddr, hwNatAddrPortBindSessionCount=hwNatAddrPortBindSessionCount, hwNatOverlapMap=hwNatOverlapMap, hwNatAlgGroup=hwNatAlgGroup, hwNatServerEntry=hwNatServerEntry, hwNatAddrPoolEntry=hwNatAddrPoolEntry, hwNatAddrPoolTable=hwNatAddrPoolTable, hwNatAlgSip=hwNatAlgSip, hwNatServerTable=hwNatServerTable, hwNatServerInsideAddr=hwNatServerInsideAddr, hwNatMapIndex=hwNatMapIndex, hwNatAddrPortBindQueryPort=hwNatAddrPortBindQueryPort, hwNatProtocolStatsName=hwNatProtocolStatsName, hwNatOutbound=hwNatOutbound, hwNatStaticGlobalAddr=hwNatStaticGlobalAddr, hwNatMapNumOfEntries=hwNatMapNumOfEntries, hwNatDnsMapIpAddr=hwNatDnsMapIpAddr, hwNatExtIfGroup=hwNatExtIfGroup, hwNatExtIfName=hwNatExtIfName, hwNatPacketDiscard=hwNatPacketDiscard, hwNATSessionCntEntry=hwNATSessionCntEntry, hwNatOverlapMapNumOfEntries=hwNatOverlapMapNumOfEntries, hwNatStatsGroup=hwNatStatsGroup, hwNatExtMIB=hwNatExtMIB, hwNatOutboundIndex=hwNatOutboundIndex, hwNatServerGlobalAddr=hwNatServerGlobalAddr, hwNatAddrPortBindOutTranslate=hwNatAddrPortBindOutTranslate, hwNatInterfacePktsIn=hwNatInterfacePktsIn)
