#
# PySNMP MIB module VERILINK-ENTERPRISE-NCMGENERIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERILINK-ENTERPRISE-NCMGENERIC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:33:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, TimeTicks, Counter32, Counter64, Unsigned32, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, ObjectIdentity, iso, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Counter32", "Counter64", "Unsigned32", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "ObjectIdentity", "iso", "NotificationType", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ncm_generic, = mibBuilder.importSymbols("VERILINK-ENTERPRISE-NCMALARM-MIB", "ncm-generic")
ncmNodeCurrTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1001), )
if mibBuilder.loadTexts: ncmNodeCurrTable.setStatus('mandatory')
ncmNodeCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmNodeCurrIndex"))
if mibBuilder.loadTexts: ncmNodeCurrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmNodeCurrEntry.setDescription('An entry in the ncmNode Current table for selecting the active node in operation.')
ncmNodeCurrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1001, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNodeCurrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmNodeCurrIndex.setDescription('This variable indicates the node id value inside the array containing all called nodes.')
ncmNodeCurrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1001, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNodeCurrAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ncmNodeCurrAddress.setDescription('This variable indicates the ncmNode Current Address.')
ncmActiveNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1001, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmActiveNodeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmActiveNodeStatus.setDescription('This variable indicates what is the current node of the network that is being managed; when this object is set, another node table will be activated and treat as active.')
ncmNodeInfoTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002), )
if mibBuilder.loadTexts: ncmNodeInfoTable.setStatus('mandatory')
ncmNodeInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmNodeIndex"))
if mibBuilder.loadTexts: ncmNodeInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmNodeInfoEntry.setDescription('An entry in the ncmNode Info table.')
ncmNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmNodeIndex.setDescription('This variable indicates the node id value of the node.')
ncmNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ncmNodeAddress.setDescription('This variable indicates the ncmNode Address.')
ncmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncmTime.setDescription('The time (in the hh:mm:sec) format for the card.')
ncmDate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDate.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDate.setDescription('The date (in mm:dd:yy) format for the card.')
ncmNodeShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNodeShelf.setStatus('mandatory')
if mibBuilder.loadTexts: ncmNodeShelf.setDescription('The variable indicates the bit mapping of shelf number associated with the node the bit 1 if equipped and 0 if not equipped. i.e. ncmShelf 0 = bit 0')
ncmNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNodeID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmNodeID.setDescription('The variable indicates the node id that uniquely identifies a node.')
ncmControllerEqID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmControllerEqID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmControllerEqID.setDescription('The variable indicates the Equipment Id of the Controller.')
ncmShelfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1003), )
if mibBuilder.loadTexts: ncmShelfInfoTable.setStatus('mandatory')
ncmShelfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1003, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmShelfNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmShelfIndex"))
if mibBuilder.loadTexts: ncmShelfInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmShelfInfoEntry.setDescription('An entry in the ncmShelf Info table.')
ncmShelfNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1003, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmShelfNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1003, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmShelfIndex.setDescription('This object is the identifier of an Interface on a managed device. If there is an ifEntry that is directly associated with this and only this DS1 interface, it should have the same value as ifIndex. Otherwise, the value exceeds ifNumber, and is a unique identifier following this rule: inside interfaces (e.g., equipment side) with even numbers and outside interfaces (e.g., network side) with odd numbers.')
ncmShelfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1003, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmShelfNumber.setDescription('This variable indicates the number of the shelf.')
ncmShelfHardware = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1003, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10, 52, 54))).clone(namedValues=NamedValues(("uninstalled", 1), ("duallineshelf", 2), ("multilineshelf", 3), ("nb-2200lineshelf", 4), ("nb-2200-4ilineshelf", 10), ("nb-2200qlineshelf", 52), ("nb-2200-4iqlineshelf", 54)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfHardware.setStatus('mandatory')
if mibBuilder.loadTexts: ncmShelfHardware.setDescription('This variable indicates the shelf hardware type.')
ncmNumberofCards = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1003, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNumberofCards.setStatus('mandatory')
if mibBuilder.loadTexts: ncmNumberofCards.setDescription('This variable indicates the total number of cards in the shelf.')
ncmListCardsInShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1003, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListCardsInShelf.setStatus('mandatory')
if mibBuilder.loadTexts: ncmListCardsInShelf.setDescription('This variable indicates the cards present in the shelf. For Example 1,3,5 if the cards 1,3 and 5 are present.')
ncmCardInfoTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1004), )
if mibBuilder.loadTexts: ncmCardInfoTable.setStatus('mandatory')
ncmCardInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1004, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmCardNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmCardIndex"))
if mibBuilder.loadTexts: ncmCardInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardInfoEntry.setDescription('An entry in the ncmCard Info table.')
ncmCardNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1004, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCardNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1004, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardIndex.setDescription('This object is the identifier of an Interface on a managed device. If there is an ifEntry that is directly associated with this and only this DS1 interface, it should have the same value as ifIndex. Otherwise, the value exceeds ifNumber, and is a unique identifier following this rule: inside interfaces (e.g., equipment side) with even numbers and outside interfaces (e.g., network side) with odd numbers.')
ncmFirmwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1004, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(48, 64, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 77, 80, 81, 82, 83, 85, 86, 87, 88, 96, 97, 98, 112, 113, 114, 115, 116, 117, 119))).clone(namedValues=NamedValues(("card-sigma-sam", 48), ("card-sigma-sam-1", 64), ("card-sigma-csu", 49), ("card-sigma-dsu", 50), ("card-sigma-ddsu", 51), ("card-sigma-tu", 52), ("card-sigma-smds", 53), ("card-sigma-idc-sam", 54), ("card-sigma-idc", 55), ("card-ct1-sam", 56), ("card-ct1-csu", 57), ("card-ct1-dsu", 58), ("card-ct1-tu", 60), ("card-sigma-dsu-dds", 61), ("card-sigma-dsu-dsu", 62), ("card-sigma-aps", 63), ("card-sigma-vcu", 77), ("e1-ace-firmware", 80), ("t1-ace-firmware", 81), ("quad-T1-ace-firmware", 82), ("quad-E1-ace-firmware", 83), ("imux-tabs-firmware", 85), ("ace-dual-t1-firmware", 86), ("ace-dual-e1-firmware", 87), ("ds3-cdsu-firmware", 88), ("ncm-t1-firmware", 96), ("card-sigma-diu-2144", 97), ("card-sigma-dsu-2131", 98), ("ace-fw-isdn-T1", 112), ("ace-fw-isdn-E1", 113), ("quad-fw-isdn-T1", 114), ("quad-fw-isdn-E1", 115), ("dual-port-ds3", 116), ("m13-2113-firmware", 117), ("imux-2164-firmware", 119)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmFirmwareType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmFirmwareType.setDescription('This variable indicates the firmware type for cards.')
ncmCimType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1004, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 22, 32, 33, 34, 35, 36, 56, 37, 48, 49, 50, 51, 52, 62, 64, 65, 82, 83, 88, 89, 90, 255))).clone(namedValues=NamedValues(("cim-2001-e1", 16), ("cim-2002-e1", 17), ("cim-2003-e1", 18), ("cim-2004-e1", 19), ("cim-2005-e1", 20), ("cim-2006-e1", 21), ("cim-nim-2000", 22), ("cim-2101-t1", 32), ("cim-2102-t1", 33), ("cim-2164", 34), ("cim-2168", 35), ("cim-2162", 36), ("cim-2061", 56), ("cim-2065", 37), ("cim-hssi", 48), ("cim-v35", 49), ("cim-eia530A", 50), ("cim-eia530", 51), ("cim-rs449", 52), ("cim-hsm-2113", 62), ("cim-vcu-4W", 64), ("cim-vcu-2W", 65), ("cim-dim-2435", 82), ("cim-dim-2530", 83), ("cim-dim-2035", 88), ("cim-dim-2449", 89), ("cim-dim-2232", 90), ("cim-uninstall", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCimType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCimType.setDescription('This variable indicates the cim type for the cards.')
ncmClearCardInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1004, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmClearCardInfo.setStatus('mandatory')
if mibBuilder.loadTexts: ncmClearCardInfo.setDescription('This variable indicates the option to clear the ncmCard Configuration in EEProm.')
ncmShelfSyncSourceTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005), )
if mibBuilder.loadTexts: ncmShelfSyncSourceTable.setStatus('mandatory')
ncmShelfSyncSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmShelfSyncNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmShelfSyncSourceIndex"))
if mibBuilder.loadTexts: ncmShelfSyncSourceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmShelfSyncSourceEntry.setDescription('An entry in the ncm Shelf Sync Source Time table.')
ncmShelfSyncNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfSyncNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmShelfSyncNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmShelfSyncSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfSyncSourceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmShelfSyncSourceIndex.setDescription('This object is the identifier of an Interface on a managed device. If there is an ifEntry that is directly associated with this and only this DS1 interface, it should have the same value as ifIndex. Otherwise, the value exceeds ifNumber, and is a unique identifier following this rule: inside interfaces (e.g., equipment side) with even numbers and outside interfaces (e.g., network side) with odd numbers.')
ncmSourceOneShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceOneShelfNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceOneShelfNum.setDescription('This variable indicates the source one shelf number.')
ncmSourceOneCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceOneCardNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceOneCardNum.setDescription('This variable indicates the source one card number.')
ncmSourceOneClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("ncmdata-port1", 9), ("ncmdata-port2", 10), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceOneClockRef.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceOneClockRef.setDescription('This variable indicates the source one clock reference.')
ncmAutoRestore1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAutoRestore1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAutoRestore1.setDescription('This variable indicates the source one auto restore.')
ncmSourceTwoShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceTwoShelfNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceTwoShelfNum.setDescription('This variable indicates the source two shelf number.')
ncmSourceTwoCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceTwoCardNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceTwoCardNum.setDescription('This variable indicates the source two card number.')
ncmSourceTwoClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("ncmdata-port1", 9), ("ncmdata-port2", 10), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceTwoClockRef.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceTwoClockRef.setDescription('This variable indicates the source two clock reference.')
ncmAutoRestore2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAutoRestore2.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAutoRestore2.setDescription('This variable indicates the source two auto restore.')
ncmSourceThreeShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceThreeShelfNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceThreeShelfNum.setDescription('This variable indicates the source three shelf number.')
ncmSourceThreeCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceThreeCardNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceThreeCardNum.setDescription('This variable indicates the source three card number.')
ncmSourceThreeClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("ncmdata-port1", 9), ("ncmdata-port2", 10), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceThreeClockRef.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceThreeClockRef.setDescription('This variable indicates the source three clock reference.')
ncmAutoRestore3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAutoRestore3.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAutoRestore3.setDescription('This variable indicates the source three auto restore.')
ncmShelfCurrentSyncSource = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source1", 1), ("source2", 2), ("source3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmShelfCurrentSyncSource.setStatus('mandatory')
if mibBuilder.loadTexts: ncmShelfCurrentSyncSource.setDescription('This variable indicates the current sync source.')
ncmCardSyncSourceTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006), )
if mibBuilder.loadTexts: ncmCardSyncSourceTable.setStatus('mandatory')
ncmCardSyncSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmCardSyncNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmCardSyncSourceIndex"))
if mibBuilder.loadTexts: ncmCardSyncSourceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardSyncSourceEntry.setDescription('An entry in the ncmCard Sync ncmSource Time table.')
ncmCardSyncNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCardSyncNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardSyncNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmCardSyncSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCardSyncSourceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardSyncSourceIndex.setDescription('This object is the identifier of an Interface on a managed device. If there is an ifEntry that is directly associated with this and only this DS1 interface, it should have the same value as ifIndex. Otherwise, the value exceeds ifNumber, and is a unique identifier following this rule: inside interfaces (e.g., equipment side) with even numbers and outside interfaces (e.g., network side) with odd numbers.')
ncmCardReceiveClockFromShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardReceiveClockFromShelf.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardReceiveClockFromShelf.setDescription('This variable indicates receive sync clock from the shelf for the card .')
ncmCardSourceOneShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceOneShelfNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardSourceOneShelfNum.setDescription('This variable indicates the source one shelf number.')
ncmCardSourceOneCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceOneCardNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardSourceOneCardNum.setDescription('This variable indicates the source one card number.')
ncmCardSourceOneClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("data-port1", 9), ("data-port2", 10), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceOneClockRef.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardSourceOneClockRef.setDescription('This variable indicates the source one clock reference.')
ncmCardAutoRestore1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardAutoRestore1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardAutoRestore1.setDescription('This variable indicates the source one auto restore.')
ncmCardSourceTwoShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceTwoShelfNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardSourceTwoShelfNum.setDescription('This variable indicates the source two shelf number.')
ncmCardSourceTwoCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceTwoCardNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardSourceTwoCardNum.setDescription('This variable indicates the source two card number.')
ncmCardSourceTwoClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("data-port1", 9), ("data-port2", 10), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceTwoClockRef.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardSourceTwoClockRef.setDescription('This variable indicates the source two clock reference.')
ncmCardAutoRestore2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardAutoRestore2.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardAutoRestore2.setDescription('This variable indicates the source two auto restore.')
ncmCardSourceThreeShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceThreeShelfNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardSourceThreeShelfNum.setDescription('This variable indicates the source three shelf number.')
ncmCardSourceThreeCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceThreeCardNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardSourceThreeCardNum.setDescription('This variable indicates the source three card number.')
ncmCardSourceThreeClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("data-port1", 9), ("data-port2", 10), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceThreeClockRef.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardSourceThreeClockRef.setDescription('This variable indicates the source three clock reference.')
ncmCardAutoRestore3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardAutoRestore3.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardAutoRestore3.setDescription('This variable indicates the source three auto restore.')
ncmCardCurrentSyncSource = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source1", 1), ("source2", 2), ("source3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardCurrentSyncSource.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardCurrentSyncSource.setDescription('This variable indicates the current sync ncm source.')
ncmIDPromTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007), )
if mibBuilder.loadTexts: ncmIDPromTable.setStatus('mandatory')
ncmIDPromEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmIDPromNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmIDPromIndex"))
if mibBuilder.loadTexts: ncmIDPromEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmIDPromEntry.setDescription('An entry in the ncm ID Prom Table.')
ncmIDPromNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmIDPromNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmIDPromNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmIDPromIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmIDPromIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmIDPromIndex.setDescription('This object is the identifier of an Interface on a managed device. If there is an ifEntry that is directly associated with this and only this DS1 interface, it should have the same value as ifIndex. Otherwise, the value exceeds ifNumber, and is a unique identifier following this rule: inside interfaces (e.g., equipment side) with even numbers and outside interfaces (e.g., network side) with odd numbers.')
ncmCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ace-card", 1), ("quad-card-for-imux", 2), ("dual-csu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCardType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardType.setDescription('This variable indicates the ncmCard type of the card.')
ncmCardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCardRevision.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardRevision.setDescription('This variable indicates the revision number for the card.')
ncmCardDate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCardDate.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardDate.setDescription('This variable indicates the date (mm-dd-yy) for the card.')
ncmCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCardSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCardSerialNumber.setDescription('This variable indicates the Serial Number for the card.')
ncmManufacturePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmManufacturePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmManufacturePartNumber.setDescription('This variable indicates the Manufacture Part Number for the card.')
ncmVendorCageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmVendorCageCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmVendorCageCode.setDescription('This variable indicates the Vendor Cage Code for the card.')
ncmIDCimType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 32, 33, 34, 35, 36, 56, 37, 22, 255))).clone(namedValues=NamedValues(("cIM29004", 16), ("cIM29005", 17), ("cIM29006", 18), ("cIM29007", 19), ("cIM29008", 20), ("cIM29009", 21), ("cIM29010", 32), ("cIM29011", 33), ("cIM-2164", 34), ("cIM-2168", 35), ("cIM29003", 36), ("cIM29002", 56), ("cIM29001", 37), ("nIM2000", 22), ("cIM-UNINSTALLED", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmIDCimType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmIDCimType.setDescription('This variable indicates the cim Type for the card.')
ncmCimRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCimRevision.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCimRevision.setDescription('This variable indicates the revision number for the cim of the card.')
ncmCimDate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCimDate.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCimDate.setDescription('This variable indicates the date (mm-dd-yy) of the cim for the card.')
ncmCimSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCimSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCimSerialNumber.setDescription('This variable indicates the Serial Number for the card.')
ncmCimManufacturePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCimManufacturePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCimManufacturePartNumber.setDescription('This variable indicates the Manufacture Part Number for the card.')
ncmCimVendorCageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCimVendorCageCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCimVendorCageCode.setDescription('This variable indicates the Vendor Cage Code for the card.')
ncmE1PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008), )
if mibBuilder.loadTexts: ncmE1PortConfigTable.setStatus('mandatory')
ncmE1PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1ConfigNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1PortLineIndex"))
if mibBuilder.loadTexts: ncmE1PortConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortConfigEntry.setDescription('An entry in the E1 Port Configuration table.')
ncmE1ConfigNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1ConfigNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1ConfigNIDIndex.setDescription('This object is the identifier of the node id index.')
ncmE1PortLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmE1PortCRC4 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortCRC4.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortCRC4.setDescription('This variable indicates whether the CRC4 for the port is Enabled or Disabled.')
ncmE1PortCarrierFailureAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortCarrierFailureAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortCarrierFailureAlarm.setDescription('This variable indicates whether the Carrier Failure ncmAlarm is Enabled or Disabled.')
ncmE1PortFaseAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortFaseAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortFaseAlarm.setDescription('This variable indicates whether the Fase ncmAlarm is Major or Minor Category.')
ncmE1PortInbandISDNEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disablebothinbandisdn", 1), ("enableinband", 2), ("enableisdn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortInbandISDNEnableDisable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortInbandISDNEnableDisable.setDescription('This variable indicates the Inband, ISDN enable and disable options.')
ncmE1PortRepeaterLoopbackTimeoutEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortRepeaterLoopbackTimeoutEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortRepeaterLoopbackTimeoutEnable.setDescription('This variable indicates the option to enable the repeater loopback timeout.')
ncmE1PortFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cAS", 1), ("cCS", 2), ("thirty-one-Ch", 3), ("g703", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortFraming.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortFraming.setDescription('This variable indicates the framing for E1 Port.')
ncmE1PortRepeaterLoopbackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortRepeaterLoopbackTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortRepeaterLoopbackTimeout.setDescription('This variable indicates the repeater loopback timeout in seconds for the card.')
ncmE1PortCarrierFailureAlarmDeclareTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortCarrierFailureAlarmDeclareTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortCarrierFailureAlarmDeclareTime.setDescription('This variable indicates the carrier failure alarm declare time in seconds for the card.')
ncmE1PortServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("out-of-service", 1), ("in-service", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortServiceState.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortServiceState.setDescription('This variable indicates service state of the port.')
ncmE1PortIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortIdlePattern.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortIdlePattern.setDescription('This variable indicates the idle pattern for the card.')
ncmE1TimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TimeSlot.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TimeSlot.setDescription('This variable indicates the Time slot used for the given port directly from the hardware cross point switch for example slot 1-10, if slots 1 to 10 is used or 1,3,4 if slots 1,3 and 4 are used.')
ncmE1TimeSlotSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1TimeSlotSelect.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TimeSlotSelect.setDescription('This variable indicates the number which is choosed for the inband/isdn timeslot.')
ncmE1PortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009), )
if mibBuilder.loadTexts: ncmE1PortStatusTable.setStatus('mandatory')
ncmE1PortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1PortStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1PortStatusIndex"))
if mibBuilder.loadTexts: ncmE1PortStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortStatusEntry.setDescription('An entry in the E1 Port Status Table.')
ncmE1PortStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortStatusNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortStatusNIDIndex.setDescription('This object identifies the node id index.')
ncmE1PortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortStatusIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmE1PortCRC4Error = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortCRC4Error.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortCRC4Error.setDescription('This variable indicates the occurance of CRC4 error.')
ncmE1PortFramingSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortFramingSlip.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortFramingSlip.setDescription('This variable indicates the occurance of framing slip error.')
ncmE1PortRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortRAI.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortRAI.setDescription('This variable indicates the occurance of RAI.')
ncmE1PortLOFA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLOFA.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortLOFA.setDescription('This variable indicates the occurance of LOFA.')
ncmE1PortAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortAIS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortAIS.setDescription('This variable indicates the occurance of AIS.')
ncmE1PortLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLOS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortLOS.setDescription('This variable indicates the occurance of LOS.')
ncmE1PortBPVThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortBPVThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortBPVThresholdExceeded.setDescription('This variable indicates whether BPV threshold is exceeded or not.')
ncmE1BlockErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1BlockErrorCounter.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1BlockErrorCounter.setDescription('This variable indicates the Block Error Counter.')
ncmE1CodeViolationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("count-HDB3", 1), ("count-FEBE", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CodeViolationMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CodeViolationMode.setDescription('This variable indicates whether HDB3 or FEBE should be counted.')
ncmE1CurrentHDB3ORFEBEErrorCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentHDB3ORFEBEErrorCounts.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentHDB3ORFEBEErrorCounts.setDescription('This variable indicates the Current HDB3/FEBE error counts.')
ncmE1CurrentFrameErrorCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentFrameErrorCounts.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentFrameErrorCounts.setDescription('This variable indicates the current Frame Error counts.')
ncmE1CurrentCRC4ErrorCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentCRC4ErrorCounts.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentCRC4ErrorCounts.setDescription('This variable indicates the current crc4 Error counts.')
ncmE1ResetPerfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1ResetPerfCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1ResetPerfCount.setDescription('Reset E1 Performance Counters.')
ncmE1PortSendRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortSendRAI.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortSendRAI.setDescription('This variable indicates whether the E1 Port Send RAI is enable or disable.')
ncmE1PortSendAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortSendAIS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortSendAIS.setDescription('This variable indicates whether the E1 Port Send AIS is enable or disable.')
ncmE1PortRFA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortRFA.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortRFA.setDescription('This variable indicates whether the E1 Port RFA is on or off.')
ncmE1PortBERThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortBERThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortBERThresholdExceeded.setDescription('This variable indicates whether BER threshold is exceeded or not.')
ncmE1PortLLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortLLB.setDescription('This variable indicates whether LLB is on or off.')
ncmE1PortPLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortPLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortPLB.setDescription('This variable indicates whether PLB is on or off.')
ncmE1PortLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLOC.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortLOC.setDescription('This variable indicates whether LOC is on or off.')
ncmE1PortTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("three-24", 2), ("qRSS", 3), ("two-n-20-1", 4), ("one-in-8", 5), ("two-n-15-1", 6), ("all-zeros", 7), ("fifty-octets", 8), ("all-ones", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortTestPattern.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortTestPattern.setDescription('This variable indicates the test patern in progress: 1 = none 2 = 3/24 3 = QRSS 4 = 2n20-1 5 = 1 in 8 6 = 2N15 - 1 7 = All Zeros 8 = 55 Octets 9 = all ones ')
ncmE1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010), )
if mibBuilder.loadTexts: ncmE1CurrentTable.setStatus('mandatory')
ncmE1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1CurrentNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1CurrentIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1CurrentEndType"))
if mibBuilder.loadTexts: ncmE1CurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentEntry.setDescription('An entry in the ncm E1 Current table.')
ncmE1CurrentNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentNIDIndex.setDescription('This object identifies the node id of the node.')
ncmE1CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interf as identified by the same value as a LineIndex object instance.')
ncmE1CurrentEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentEndType.setDescription('The variable specifies the End Type.')
ncmE1CRC4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CRC4Status.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CRC4Status.setDescription('The variable specifies the CRC4 Status.')
ncmE1Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1Timestamp.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1Timestamp.setDescription('The variable specifies the timestamp in seconds.')
ncmE1Timestamp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1Timestamp1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1Timestamp1.setDescription('The variable specifies the timestamp in milliseconds.')
ncmE1CurrentIntervalSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentIntervalSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentIntervalSec.setDescription('The variable specifies the current interval in seconds.')
ncmE1CurrentASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentASs.setDescription('The number of Availabe Seconds, encountered by a DS1 interface in the current 15 minute interval.')
ncmE1CurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentUASs.setDescription('The number of Out of Unavailable Seconds encountered by a DS1 interface in the current 15 minute interval.')
ncmE1CurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentESs.setDescription('The number of Errored Seconds encountered by a DS1 interface in the current 15 minute interval.')
ncmE1CurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentSESs.setDescription('The number of Severely Errored Seconds encountered by a DS1 interface in the current 15 minute interval.')
ncmE1CurrentFAE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentFAE.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentFAE.setDescription('The number of Frame Alignment Error in Seconds encountered by a DS1 interface in the current 15 minute interval.')
ncmE1CurrentBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentBBE.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentBBE.setDescription('The number of Background Block Error encountered by a DS1 interface in the current 15 minute interval.')
ncmE1CurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentSEFSs.setDescription('The number of Severly Error Framing seconds encountered by a DS1 interface in the current 15 minute interval.')
ncmE1CurrentAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentAISSs.setDescription('The number of ncmAlarm Indication Signal seconds encountered by a DS1 interface in the current 15 minute interval.')
ncmE1CurrentLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentLOSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentLOSSs.setDescription('The number of Loss of Signal seconds encountered by a DS1 interface in the current 15 minute interval.')
ncmE1CurrentLOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentLOFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentLOFSs.setDescription('The number of Loss of Signal seconds encountered by a DS1 interface in the current 15 minute interval.')
ncmE1CurrentOOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentOOFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentOOFSs.setDescription('The number of Out Of Frame seconds encountered by a DS1 interface in the current 15 minute interval.')
ncmE1CurrentCVPath = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentCVPath.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentCVPath.setDescription('The number of Code Violation Path encountered by a DS1 interface in the current 15 minute interval.')
ncmE1CurrentCVLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentCVLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentCVLine.setDescription('The number of Code Violation Line encountered by a DS1 interface in the current 15 minute interval.')
ncmE1CurrentESsLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentESsLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentESsLine.setDescription('The number of Errored Seconds Line encountered by a DS1 interface in the current 15 minute interval.')
ncmE1CurrentSESsLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentSESsLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentSESsLine.setDescription('The number of Severely Errored Seconds Line encountered by a DS1 interface in the current 15 minute interval.')
ncmE1CurrentFECPath = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentFECPath.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentFECPath.setDescription('The number of Failure Event Count Path encountered by a DS1 interface in the current 15 minute interval.')
ncmE1CurrentFECLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentFECLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CurrentFECLine.setDescription('The number of Failure Event Count Line encountered by a DS1 interface in the current 15 minute interval.')
ncmE1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011), )
if mibBuilder.loadTexts: ncmE1IntervalTable.setStatus('mandatory')
ncmE1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1IntervalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1IntervalIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1IntervalEndType"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1IntervalNumber"))
if mibBuilder.loadTexts: ncmE1IntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalEntry.setDescription('An entry in the E1 Interval table.')
ncmE1IntervalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalNIDIndex.setDescription('The object specifies the node id index.')
ncmE1IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value as a LineIndex object instance.')
ncmE1IntervalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalEndType.setDescription('The variable specifies the End Type.')
ncmE1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes interval (assuming that all 96 intervals are valid).')
ncmE1IntervalASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalASs.setDescription('The number of Available Seconds encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmE1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalUASs.setDescription('The number of Unavailable Seconds encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmE1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalESs.setDescription('The number of Error Seconds encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmE1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalSESs.setDescription('The number of Severe Error Seconds encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmE1IntervalFAE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalFAE.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalFAE.setDescription('The number of Frame Alignment Errors encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmE1IntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalBBE.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalBBE.setDescription('The number of Background Block Errors encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmE1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalSEFSs.setDescription('The number of Severly Error Framing seconds encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmE1IntervalAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalAISSs.setDescription('The number of ncmAlarm Indication Signal seconds encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmE1IntervalLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalLOSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalLOSSs.setDescription('The number of Loss of Signal seconds encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmE1IntervalLOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalLOFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalLOFSs.setDescription('The number of Loss of Signal seconds encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmE1IntervalOOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalOOFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalOOFSs.setDescription('The number of Out Of Frame seconds encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmE1IntervalCVPath = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalCVPath.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalCVPath.setDescription('The number of Code Violation Path encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals. This object only has significance for QUAD cards.')
ncmE1IntervalCVLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalCVLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalCVLine.setDescription('The number of Code Violation Line encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals. This object only has significance for QUAD cards.')
ncmE1IntervalESsLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalESsLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalESsLine.setDescription('The number of Errored Seconds Line encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmE1IntervalSESsLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalSESsLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalSESsLine.setDescription('The number of Severely Errored Seconds Line encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmE1IntervalFECPath = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalFECPath.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalFECPath.setDescription('The number of Failure Event Count Path encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmE1IntervalFECLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalFECLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1IntervalFECLine.setDescription('The number of Failure Event Count Line encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmE1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012), )
if mibBuilder.loadTexts: ncmE1TotalTable.setStatus('mandatory')
ncmE1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1TotalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1TotalIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1TotalEndType"))
if mibBuilder.loadTexts: ncmE1TotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalEntry.setDescription('An entry in the Total Entry table.')
ncmE1TotalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalNIDIndex.setDescription('The object specifies the node id index of the node.')
ncmE1TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interf as identified by the same value as a LineIndex object instance.')
ncmE1TotalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalEndType.setDescription('The variable specifies the End Type.')
ncmE1NumberOfValidInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1NumberOfValidInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1NumberOfValidInterval.setDescription('The number of previous intervals for which valid data was collected. The value will be 96 unless the interface was brought on-line within the last 24 hours, in which case the value will be the number of complete 15 minute intervals the since interface has been online.')
ncmE1TotalASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalASs.setDescription('The number of Available Seconds encountered by a DS1 interface in the previous 24 hour interval.')
ncmE1TotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalUASs.setDescription('The number of Unavailable Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmE1TotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalESs.setDescription('The number of Error Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmE1TotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalSESs.setDescription('The number of Severly Errored Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmE1TotalFAE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalFAE.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalFAE.setDescription('The number of Frame Alignment Signal errors encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmE1TotalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalBBE.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalBBE.setDescription('The number of Background Block Errors encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmE1TotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalSEFSs.setDescription('The number of Severly Error Framing seconds encountered by a DS1 interface in 24 hour in- terval.')
ncmE1TotalAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalAISSs.setDescription('The number of ncmAlarm Indication Signal seconds encountered by a DS1 interface in the 24 hour in- terval.')
ncmE1TotalLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalLOSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalLOSSs.setDescription('The number of Loss of Signal seconds encountered by a DS1 interface in the 24 hour in- terval.')
ncmE1TotalLOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalLOFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalLOFSs.setDescription('The number of Loss of Signal seconds encountered by a DS1 interface in the 24 hour in- terval.')
ncmE1TotalOOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalOOFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalOOFSs.setDescription('The number of Out Of Frame seconds encountered by a DS1 interface in the 24 hour in- terval.')
ncmE1TotalCVPath = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalCVPath.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalCVPath.setDescription('The number of Code Violation Path encountered by a DS1 interface in the 24 hour in- terval.')
ncmE1TotalCVLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalCVLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalCVLine.setDescription('The number of Code Violation Line encountered by a DS1 interface in the 24 hour in- terval.')
ncmE1TotalESsLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalESsLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalESsLine.setDescription('The number of Errored Seconds Line encountered by a DS1 interface in the 24 hour in- terval.')
ncmE1TotalSESsLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalSESsLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalSESsLine.setDescription('The number of Severely Errored Seconds Line encountered by a DS1 interface in the 24 hour in- terval.')
ncmE1TotalFECPath = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalFECPath.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalFECPath.setDescription('The number of Failure Event Count Path encountered by a DS1 interface in the 24 hour in- terval.')
ncmE1TotalFECLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalFECLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TotalFECLine.setDescription('The number of Failure Event Count Line encountered by a DS1 interface in the 24 hour in- terval.')
ncmE1PrevTotalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013), )
if mibBuilder.loadTexts: ncmE1PrevTotalTable.setStatus('mandatory')
ncmE1PrevTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1PrevTotalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1PrevTotalIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1PrevTotalEndType"))
if mibBuilder.loadTexts: ncmE1PrevTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalEntry.setDescription('An entry in the Previous day total table.')
ncmE1PrevTotalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalNIDIndex.setDescription('The object specifies the node id index of the node.')
ncmE1PrevTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interf as identified by the same value as a LineIndex object instance.')
ncmE1PrevTotalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalEndType.setDescription('The variable specifies the End Type .')
ncmE1PrevTotalASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalASs.setDescription('The number of Available Seconds encountered by a DS1 interface in the previous 24 hour interval.')
ncmE1PrevTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalUASs.setDescription('The number of Unavailable Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmE1PrevTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalESs.setDescription('The number of Error Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmE1PrevTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalSESs.setDescription('The number of Severly Errored Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmE1PrevTotalFAE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalFAE.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalFAE.setDescription('The number of Frame Alignment Signal errors encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmE1PrevTotalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalBBE.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalBBE.setDescription('The number of Background Block Errors encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmE1PrevTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalSEFSs.setDescription('The number of Severly Error Framing seconds encountered by a DS1 interface in the prev 24 hour in- terval.')
ncmE1PrevTotalAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalAISSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalAISSs.setDescription('The number of ncmAlarm Indication Signal seconds encountered by a DS1 interface in the prev 24 hour in- terval.')
ncmE1PrevTotalLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalLOSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalLOSSs.setDescription('The number of Loss of Signal seconds encountered by a DS1 interface in the prev 24 hour in- terval.')
ncmE1PrevTotalLOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalLOFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalLOFSs.setDescription('The number of Loss of Signal seconds encountered by a DS1 interface in the prev 24 hour in- terval.')
ncmE1PrevTotalOOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalOOFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalOOFSs.setDescription('The number of Out Of Frame seconds encountered by a DS1 interface in the prev 24 hour in- terval.')
ncmE1PrevTotalCVPath = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalCVPath.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalCVPath.setDescription('The number of Code Violation Path encountered by a DS1 interface in the prev 24 hour in- terval.')
ncmE1PrevTotalCVLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalCVLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalCVLine.setDescription('The number of Code Violation Line encountered by a DS1 interface in the prev 24 hour in- terval.')
ncmE1PrevTotalESsLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalESsLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalESsLine.setDescription('The number of Errored Seconds Line encountered by a DS1 interface in the prev 24 hour in- terval.')
ncmE1PrevTotalSESsLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalSESsLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalSESsLine.setDescription('The number of Severely Errored Seconds Line encountered by a DS1 interface in the prev 24 hour in- terval.')
ncmE1PrevTotalFECPath = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalFECPath.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalFECPath.setDescription('The number of Failure Event Count Path encountered by a DS1 interface in the prev 24 hour in- terval.')
ncmE1PrevTotalFECLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalFECLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PrevTotalFECLine.setDescription('The number of Failure Event Count Line encountered by a DS1 interface in the prev 24 hour in- terval.')
ncmE1PerformanceSnapShotTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014), )
if mibBuilder.loadTexts: ncmE1PerformanceSnapShotTable.setStatus('mandatory')
ncmE1PerformanceSnapShotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1SnapShotNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1SnapShotIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1SnapShotEndType"))
if mibBuilder.loadTexts: ncmE1PerformanceSnapShotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PerformanceSnapShotEntry.setDescription('An entry in the E1 Performance Snap Shot Entry table.')
ncmE1SnapShotNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1SnapShotNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1SnapShotNIDIndex.setDescription('The object specifies the node id index of the node.')
ncmE1SnapShotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1SnapShotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1SnapShotIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a LineIndex object instance.')
ncmE1SnapShotEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1SnapShotEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1SnapShotEndType.setDescription('The variable specifies the End Type .')
ncmE1SnapShot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1SnapShot.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1SnapShot.setDescription('The variable specifies the option to intiate snap shot command.')
ncmE1TimeStampSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TimeStampSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TimeStampSec.setDescription('The variable specifies the Time Stamp in Seconds .')
ncmE1TimeMilliSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TimeMilliSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1TimeMilliSec.setDescription('The variable specifies the Time Stamp in milli Seconds .')
ncmE1SecInCurrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1SecInCurrInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1SecInCurrInterval.setDescription('The variable specifies the Seconds in the Current Interval.')
ncmE1ResetPerfReg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1ResetPerfReg.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1ResetPerfReg.setDescription('Reset Performance Monitoring registers.')
ncmE1PortLatchedStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015), )
if mibBuilder.loadTexts: ncmE1PortLatchedStatusTable.setStatus('mandatory')
ncmE1PortLatchedStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1PortLatchedStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1PortLatchedStatusIndex"))
if mibBuilder.loadTexts: ncmE1PortLatchedStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortLatchedStatusEntry.setDescription('An entry in the ncm E1 Port Latched Status Table.')
ncmE1PortLatchedStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedStatusNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortLatchedStatusNIDIndex.setDescription('The object specifies the node id index of the node.')
ncmE1PortLatchedStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortLatchedStatusIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmE1PortLatchedCRC4Error = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedCRC4Error.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortLatchedCRC4Error.setDescription('This variable indicates the occurance Latched status of CRC4 error.')
ncmE1PortLatchedFramingSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedFramingSlip.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortLatchedFramingSlip.setDescription('This variable indicates the occurance Latched status of framing slip error.')
ncmE1PortLatchedRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedRAI.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortLatchedRAI.setDescription('This variable indicates the occurance Latched status of RAI.')
ncmE1PortLatchedLOFA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedLOFA.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortLatchedLOFA.setDescription('This variable indicates the occurance Latched status of LOFA.')
ncmE1PortLatchedAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedAIS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortLatchedAIS.setDescription('This variable indicates the occurance Latched status of AIS.')
ncmE1PortLatchedLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedLOS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortLatchedLOS.setDescription('This variable indicates the occurance Latched Status of LOS.')
ncmE1PortLatchedBPVThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedBPVThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1PortLatchedBPVThresholdExceeded.setDescription('This variable indicates whether BPV threshold is exceeded or not in Latched state.')
ncmE1ThresholdStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016), )
if mibBuilder.loadTexts: ncmE1ThresholdStatusTable.setStatus('mandatory')
ncmE1ThresholdStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1ThresholdStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1ThresholdStatusIndex"))
if mibBuilder.loadTexts: ncmE1ThresholdStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1ThresholdStatusEntry.setDescription('An entry in the E1 Threshold Status Table.')
ncmE1ThresholdStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1ThresholdStatusNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1ThresholdStatusNIDIndex.setDescription('The object specifies the node id index of the node.')
ncmE1ThresholdStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1ThresholdStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1ThresholdStatusIndex.setDescription('This object is the identifier of an Interface on a managed device. If there is an ifEntry that is directly associated with this and only this DS1 interface, it should have the same value as ifIndex. Otherwise, the value exceeds ifNumber, and is a unique identifier following this rule: inside interfaces (e.g., equipment side) with even numbers and outside interfaces (e.g., network side) with odd numbers.')
ncmE1CRCThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CRCThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CRCThreshold.setDescription('This variable indicates the CRC Error Threshold value .')
ncmE1CRCExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CRCExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1CRCExceeded.setDescription('This variable indicates whether the CRC Error has exceeded the Threshold value or not.')
ncmE1SESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1SESThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1SESThreshold.setDescription('This variable indicates the SES Error Threshold value .')
ncmE1SESExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1SESExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1SESExceeded.setDescription('This variable indicates whether the SES Error has exceeded the Threshold value or not.')
ncmE1UASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1UASThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1UASThreshold.setDescription('This variable indicates the UAS Error Threshold value .')
ncmE1UASExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1UASExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1UASExceeded.setDescription('This variable indicates whether the UAS Error has exceeded the Threshold value or not.')
ncmE1BPVThresholdst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1BPVThresholdst.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1BPVThresholdst.setDescription('This variable indicates the BPV Error Threshold value .')
ncmE1BPVExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1BPVExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1BPVExceeded.setDescription('This variable indicates whether the BPV Error has exceeded the Threshold value or not.')
ncmE1BERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1BERThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1BERThreshold.setDescription('This variable indicates the BPV Error Threshold value .')
ncmE1BERExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1BERExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1BERExceeded.setDescription('This variable indicates whether the BER Error has exceeded the Threshold value or not.')
ncmE1RestoreState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("out-of-servcie", 1), ("in-servcie", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1RestoreState.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1RestoreState.setDescription('This variable indicates the Restore State of Threshold ')
ncmE1LineRestoreSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1LineRestoreSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1LineRestoreSec.setDescription('This variable indicates the number of seconds until the line restores.')
ncmT1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017), )
if mibBuilder.loadTexts: ncmT1ConfigTable.setStatus('mandatory')
ncmT1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1ConfigNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1LineIndex"))
if mibBuilder.loadTexts: ncmT1ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ConfigEntry.setDescription('An entry in the ncm T1 Configuration table.')
ncmT1ConfigNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ConfigNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ConfigNIDIndex.setDescription('This object is the identifier of the node id index.')
ncmT1LineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1LineIndex.setDescription('This object is the identifier of an Interface on a managed device. If there is an ifEntry that is directly associated with this and only this DS1 interface, it should have the same value as ifIndex. Otherwise, the value exceeds ifNumber, and is a unique identifier following this rule: inside interfaces (e.g., equipment side) with even numbers and outside interfaces (e.g., network side) with odd numbers.')
ncmT1CRC6 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1CRC6.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CRC6.setDescription('This variable indicates Whether CRC6 is enabled or not')
ncmT1FramingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sF", 1), ("eSF", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1FramingFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1FramingFormat.setDescription('This variable indicates the variety of Line implementing this circuit. The type of circuit affects the number of bits per second that the circuit can reasonably carry, as well as the interpretation of the usage and error statistics. The values, in sequence, describe: TITLE: SPECIFICATION: ESF Extended SuperFrame DS1 SF Super Frame')
ncmT1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aMI", 1), ("b8ZS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1LineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1LineCoding.setDescription('This variable describes the variety of Zero Code Suppression used on the link, which in turn affects a number of its characteristics. B8ZS refers to the use of a specified pat- tern of normal bits and bipolar violations which are used to replace a sequence of eight zero bits. AMI refers to a mode wherein no zero code suppression is present and the line encoding does not solve the problem directly. In this application, the higher layer must provide data which meets or exceeds the pulse density re- quirements, such as inverting HDLC data.')
ncmT1FramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cAS-BR", 1), ("cAS-CC", 2), ("cCS", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1FramingType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1FramingType.setDescription('This variable indicates the framing type in this T1 port, i.e., CAS-BR, CAS-CC, CCS')
ncmT1FDL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1FDL.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1FDL.setDescription('The variable specifies the Disable/Enable of the fdl State.')
ncmT1InbandISDNEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disablebothinbandisdn", 1), ("enableinband", 2), ("enableisdn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1InbandISDNEnableDisable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1InbandISDNEnableDisable.setDescription('This variable indicates the Inband, ISDN enable and disable options.')
ncmT1EnableNetLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1EnableNetLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1EnableNetLoopback.setDescription('The variable specifies the Disable/Enable of the Network intiated Loopback.')
ncmT1EnableNetOnesDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1EnableNetOnesDensity.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1EnableNetOnesDensity.setDescription("The variable specifies the Disable/Enable of the Network One's Density.")
ncmT1DensityPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("d80Zeros", 1), ("d15Zeros", 2), ("d12d5c80Zero", 3), ("tR-62411", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1DensityPattern.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1DensityPattern.setDescription("This variable indicates what type of density network is being sent on the port or line by the device. It only has significance only when object ncmT1EnableNetOnesDensity is enabled. The values mean : 'D80Zeros' refers to send a request for network one's density of 80 zeroes density pattern. 'D15Zeros' refers to send a request for network one's density of 15 zeroes density pattern. 'D12d5c80Zero'refers to send a request for 12.5% and 80 zeroes network one's density pattern. 'TR-62411' refers to sending a request for TR6241 network density pattern.")
ncmT1EnableRepeaterLpbkTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1EnableRepeaterLpbkTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1EnableRepeaterLpbkTimeout.setDescription('The variable specifies whether repeater loopback is enabled or not.')
ncmT1RepeaterLoopbackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1RepeaterLoopbackTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1RepeaterLoopbackTimeout.setDescription('The variable specifies the timeout value in seconds for repeater loopback.')
ncmT1UserAlarmDeclareTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1UserAlarmDeclareTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1UserAlarmDeclareTime.setDescription('The variable specifies the User ncmAlarm declaration Time in seconds.')
ncmT1State = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("out-of-service", 1), ("in-service", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1State.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1State.setDescription('The variable specifies whether port state is in service or not.')
ncmT1NetworkLBOEQLIZ = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bldLn-0db-FT-0-133", 1), ("bldLnNeg7d5db-FT-133-266", 2), ("bldLnNeg15db-FT-266-399", 3), ("bldLnNeg22d5-FT-399-533", 4), ("fT-533-655", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1NetworkLBOEQLIZ.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1NetworkLBOEQLIZ.setDescription('This variable indicates either (1) for long haul -- the db rate at which the line or port using, i.e., is 0 , -7.5db, -15db or -22.5db.[pvt]; or (2) for short haul -- the equalization at which the line or port using, i.e., is 0~133, 133~266, 266~399, 399~533 533~655 ft., which is only applicable in port 3 & 4 of dual csu card.')
ncmT1TimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TimeSlot.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TimeSlot.setDescription('This variable represents the timeslots used for the given port directly from the hardware crosspoint switch for example 1-10 if slot 1 to 10 are selected and 1,3,5 if 1,3 and 5 are selected.')
ncmT1TimeSlotSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1TimeSlotSelect.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TimeSlotSelect.setDescription('This variable indicates the number which is choosed for the inband/isdn timeslot.')
ncmT1PortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018), )
if mibBuilder.loadTexts: ncmT1PortStatusTable.setStatus('mandatory')
ncmT1PortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1PortStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1PortStatusIndex"))
if mibBuilder.loadTexts: ncmT1PortStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortStatusEntry.setDescription('An entry in the ncm T1 Port Status Table.')
ncmT1PortStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortStatusNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortStatusNIDIndex.setDescription('This object identifies the node id index.')
ncmT1PortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortStatusIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmT1PortCRC6Error = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortCRC6Error.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortCRC6Error.setDescription('This variable indicates the occurance of CRC6 error.')
ncmT1PortFramingSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortFramingSlip.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortFramingSlip.setDescription('This variable indicates the occurance of framing slip error.')
ncmT1PortRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortRAI.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortRAI.setDescription('This variable indicates the occurance of RAI.')
ncmT1PortLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortLOF.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortLOF.setDescription('This variable indicates the occurance of LOF.')
ncmT1PortAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortAIS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortAIS.setDescription('This variable indicates the occurance of AIS.')
ncmT1PortLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortLOS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortLOS.setDescription('This variable indicates the occurance of LOS.')
ncmT1PortBPVThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortBPVThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortBPVThresholdExceeded.setDescription('This variable indicates whether BPV threshold is exceeded or not.')
ncmT1BlockErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1BlockErrorCounter.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1BlockErrorCounter.setDescription('This variable indicates the Block Error Counter .')
ncmT1BERExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1BERExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1BERExceeded.setDescription('This variable indicates BER excceded or not ')
ncmT1PortSendRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortSendRAI.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortSendRAI.setDescription('This variable indicates whether send RAI is on or off ')
ncmT1PortSendAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortSendAIS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortSendAIS.setDescription('This variable indicates whether send AIS is on or off ')
ncmT1PortCGA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortCGA.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortCGA.setDescription('This variable indicates whether CGA is on or off ')
ncmT1PortLLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortLLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortLLB.setDescription('This variable indicates whether LLB is on or off ')
ncmT1PortPLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortPLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortPLB.setDescription('This variable indicates whether PLB is on or off ')
ncmT1PortLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortLOC.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortLOC.setDescription('This variable indicates whether LOC is on or off ')
ncmT1PortTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("three-24", 2), ("qRSS", 3), ("two-n-20-1", 4), ("one-in-8", 5), ("two-n-15-1", 6), ("all-zeros", 7), ("fifty-octets", 8), ("all-ones", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortTestPattern.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PortTestPattern.setDescription('This variable indicates the test patern in progress: 1 = none 2 = 3/24 3 = QRSS 4 = 2n20-1 5 = 1 in 8 6 = 2N15 - 1 7 = All Zeros 8 = 55 Octets 9 = all ones ')
ncmT1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019), )
if mibBuilder.loadTexts: ncmT1CurrentTable.setStatus('mandatory')
ncmT1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1CurrentNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1CurrentIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1CurrentEndType"))
if mibBuilder.loadTexts: ncmT1CurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentEntry.setDescription('An entry in the ncm T1 Current table.')
ncmT1CurrentNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentNIDIndex.setDescription('This object identifies the node id of the node.')
ncmT1CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentIndex.setDescription('The index value which uniquely identifies the interf to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value as a LineIndex object instance.')
ncmT1CurrentEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentEndType.setDescription('The variable specifies the End Type .')
ncmT1Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1Timestamp.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1Timestamp.setDescription('The variable specifies the Timestamp in seconds .')
ncmT1Timestamp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1Timestamp1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1Timestamp1.setDescription('The variable specifies the Timestamp in millieseconds .')
ncmT1CurrentIntervalSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentIntervalSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentIntervalSec.setDescription('The variable specifies the Current Interval seconds .')
ncmT1CurrentASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentASs.setDescription('The number of Availabe Seconds, encountered by a DS1 interface in the current 15 minute inter- val.')
ncmT1CurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentUASs.setDescription('The number of Out of Unavailable Seconds encountered by a DS1 interface in the current 15 minute in- terval.')
ncmT1CurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentESs.setDescription('The number of Errored Seconds encountered by a DS1 interface in the current 15 minute in- terval.')
ncmT1CurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentBESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentBESs.setDescription('The number of Bursty Errored Seconds encountered by a DS1 interface in the current 15 minute in- terval.')
ncmT1CurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentSESs.setDescription('The number of Severely Errored Seconds encountered by a DS1 interface in the current 15 minute in- terval.')
ncmT1CurrentSEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentSEFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentSEFs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in the current 15 minute in-terval.')
ncmT1CurrentLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentLOSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentLOSs.setDescription('The number of Loss of Signal Seconds encountered by a DS1 interface in the current 15 minute in- terval.')
ncmT1CurrentAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentAISs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentAISs.setDescription('The number of ncmAlarm Indication Signal Seconds encountered by a DS1 interface in the current 15 minute in-terval.')
ncmT1CurrentLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentLOFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentLOFs.setDescription('The number of Loss Of Frame Seconds encountered by a DS1 interface in the current 15 minute in- terval.')
ncmT1CurrentOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentOOFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentOOFs.setDescription('The number of Out Of Frame Seconds encountered by a DS1 interface in the current 15 minute in- terval.')
ncmT1CurrentESsTypeA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentESsTypeA.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentESsTypeA.setDescription('The number of Errored seconds of type A encountered by a DS1 interface in the current 15 minute in- terval.')
ncmT1CurrentSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentSASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentSASs.setDescription('The number of SEF/AIS encountered by a DS1 interface in the current 15 minute in- terval.')
ncmT1CurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentCSSs.setDescription('The number of controlled slip seconds encountered by a DS1 interface in the current 15 minute in- terval.')
ncmT1CurrentLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentLOFC.setDescription('The number of Loss of frame counts encountered by a DS1 interface in the current 15 minute in- terval.')
ncmT1CurrentFrameErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentFrameErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentFrameErrCount.setDescription('The number of Framing Error Count encountered by a DS1 interface in the current 15 minute in- terval.')
ncmT1CurrentErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentErrorFreeSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentErrorFreeSec.setDescription('The number of Error Free Seconds encountered by a DS1 interface in the current 15 minute in- terval.')
ncmT1CurrentDegradedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentDegradedMin.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrentDegradedMin.setDescription('The number of Degraded Minutes encountered by a DS1 interface in the current 15 minute in- terval.')
ncmT1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020), )
if mibBuilder.loadTexts: ncmT1IntervalTable.setStatus('mandatory')
ncmT1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1IntervalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1IntervalIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1IntervalEndType"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1IntervalNumber"))
if mibBuilder.loadTexts: ncmT1IntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalEntry.setDescription('An entry in the ncm T1 Interval table.')
ncmT1IntervalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalNIDIndex.setDescription('The object specifies the node id index.')
ncmT1IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a LineIndex object instance.')
ncmT1IntervalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalEndType.setDescription('The variable specifies the End Type .')
ncmT1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes inter- val (assuming that all 96 intervals are valid).')
ncmT1IntervalASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalASs.setDescription('The number of Available Seconds encountered by a DS1 interface in one of the previous 96, indi- vidual 15 minute, intervals.')
ncmT1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalUASs.setDescription('The number of Unavailable Seconds encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmT1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalESs.setDescription('The number of Error Seconds encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmT1IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalBESs.setDescription('The number of Bursty Error Seconds encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmT1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalSESs.setDescription('The number of Severe Error Seconds encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmT1IntervalSEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalSEFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalSEFs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmT1IntervalLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalLOSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalLOSs.setDescription('The number of Loss of Signal Seconds encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmT1IntervalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalAISs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalAISs.setDescription('The number of ncmAlarm Indication Signal Seconds encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmT1IntervalLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalLOFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalLOFs.setDescription('The number of Loss Of Frame Seconds encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmT1IntervalOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalOOFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalOOFs.setDescription('The number of Out Of Frame Seconds encoun- tered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
ncmT1IntervalESsTypeA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalESsTypeA.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalESsTypeA.setDescription('The number of Errored seconds of type A encountered by a DS1 interface in one of the previous 96, individual 15 minute interval.')
ncmT1IntervalSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalSASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalSASs.setDescription('The number of SEF/AIS encountered by a DS1 interface in one of the previous 96, individual 15 minute interval.')
ncmT1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalCSSs.setDescription('The number of controlled slip seconds encountered by a DS1 interface in one of the previous 96, individual 15 minute interval.')
ncmT1IntervalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalLOFC.setDescription('The number of Loss of frame counts encountered by a DS1 interface in one of the previous 96, individual 15 minute interval.')
ncmT1IntervalFrameErr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalFrameErr.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalFrameErr.setDescription('The number of Framing Error Count encountered by a DS1 interface in one of the previous 96, individual 15 minute interval.')
ncmT1IntervalErrFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalErrFreeSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalErrFreeSec.setDescription('The number of Error Free Seconds encountered by a DS1 interface in one of the previous 96, individual 15 minute interval.')
ncmT1IntervalDegradMin = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalDegradMin.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1IntervalDegradMin.setDescription('The number of Degraded Minutes encountered by a DS1 interface in one of the previous 96, individual 15 minute interval.')
ncmT1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021), )
if mibBuilder.loadTexts: ncmT1TotalTable.setStatus('mandatory')
ncmT1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1TotalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1TotalIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1TotalEndType"))
if mibBuilder.loadTexts: ncmT1TotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalEntry.setDescription('An entry in the DS1 Total Loss table.')
ncmT1TotalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalNIDIndex.setDescription('The object specifies the node id index of the node.')
ncmT1TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a LineIndex object instance.')
ncmT1TotalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalEndType.setDescription('The variable specifies the End Type .')
ncmT1NumberOfValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1NumberOfValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1NumberOfValidIntervals.setDescription('The number of previous intervals for which valid data was collected. The value will be 96 unless the interface was brought on-line within the last 24 hours, in which case the value will be the number of complete 15 minute intervals the since interface has been online.')
ncmT1TotalASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalASs.setDescription('The number of Available Seconds encountered by a DS1 interface in the previous 24 hour interval.')
ncmT1TotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalUASs.setDescription('The number of Unavailable Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1TotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalESs.setDescription('The number of Unavailable Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1TotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalBESs.setDescription('The number of Unavailable Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1TotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalSESs.setDescription('The number of Severly errored Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1TotalSEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalSEFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalSEFs.setDescription('The number of Severly Errored frame Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1TotalLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalLOSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalLOSs.setDescription('The number of Loss Of Signal Errors encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1TotalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalAISs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalAISs.setDescription('The number of ncmAlarm Indication Signal Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1TotalLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalLOFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalLOFs.setDescription('The number of Loss Of Frame Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1TotalOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalOOFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalOOFs.setDescription('The number of Out Of Frame Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1TotalESsTypeA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalESsTypeA.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalESsTypeA.setDescription('The number of Errored seconds of type A encountered by a DS1 interface in the previous 24 hour in terval.')
ncmT1TotalSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalSASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalSASs.setDescription('The number of SEF/AIS encountered by a DS1 interface in the previous 24 hour in- terval.')
ncmT1TotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalCSSs.setDescription('The number of controlled slip seconds encountered by a DS1 interface in the previous 24 hour in- terval.')
ncmT1TotalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalLOFC.setDescription('The number of Loss of frame counts encountered by a DS1 interface in the previous 24 hour in- terval.')
ncmT1TotalFrameErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalFrameErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalFrameErrCount.setDescription('The number of Framing Error Count encountered by a DS1 interface in the previous 24 hour in- terval.')
ncmT1TotalErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalErrorFreeSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalErrorFreeSec.setDescription('The number of Error free seconds encountered by a DS1 interface in the previous 24 hour in- terval.')
ncmT1TotalDegradedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalDegradedMin.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TotalDegradedMin.setDescription('The number of Degraded Minutes encountered by a DS1 interface in the previous 24 hour in- terval.')
ncmT1PrevTotalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022), )
if mibBuilder.loadTexts: ncmT1PrevTotalTable.setStatus('mandatory')
ncmT1PrevTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1PrevTotalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1PrevTotalIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1PrevTotalEndType"))
if mibBuilder.loadTexts: ncmT1PrevTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalEntry.setDescription('An entry in the DS1 Total Loss table.')
ncmT1PrevTotalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalNIDIndex.setDescription('The object specifies the node id index of the node.')
ncmT1PrevTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a LineIndex object instance.')
ncmT1PrevTotalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalEndType.setDescription('The variable specifies the End Type .')
ncmT1PrevTotalASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalASs.setDescription('The number of Available Seconds encountered by a DS1 interface in the previous 24 hour interval.')
ncmT1PrevTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalUASs.setDescription('The number of Unavailable Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1PrevTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalESs.setDescription('The number of Unavailable Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1PrevTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalBESs.setDescription('The number of Unavailable Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1PrevTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalSESs.setDescription('The number of Severly Errored Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1PrevTotalSEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalSEFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalSEFs.setDescription('The number of Severly Errored frame Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1PrevTotalLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalLOSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalLOSs.setDescription('The number of Loss Of Signal Errors encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1PrevTotalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalAISs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalAISs.setDescription('The number of ncmAlarm Indication Signal Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1PrevTotalLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalLOFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalLOFs.setDescription('The number of Loss Of Frame Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1PrevTotalOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalOOFs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalOOFs.setDescription('The number of Out Of Frame Seconds encoun- tered by a DS1 interface in the previous 24 hour interval.')
ncmT1PrevTotalESsTypeA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalESsTypeA.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalESsTypeA.setDescription('The number of Errored seconds of type A encountered by a DS1 interface in the previous 24 hour in- terval.')
ncmT1PrevTotalSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalSASs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalSASs.setDescription('The number of SEF/AIS encountered by a DS1 interface in the previous 24 hour in- terval.')
ncmT1PrevTotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalCSSs.setDescription('The number of controlled slip seconds encountered by a DS1 interface in the previous in- terval.')
ncmT1PrevTotalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalLOFC.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalLOFC.setDescription('The number of Loss of frame counts encountered by a DS1 interface in the previous in- terval.')
ncmT1PrevTotalFrameErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalFrameErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalFrameErrCount.setDescription('The number of Framing Error Count encountered by a DS1 interface in the previous in- terval.')
ncmT1PrevTotalErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalErrorFreeSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalErrorFreeSec.setDescription('The number of Error free seconds encountered by a DS1 interface in the previous in- terval.')
ncmT1PrevTotalDegradedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalDegradedMin.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PrevTotalDegradedMin.setDescription('The number of Degraded Minutes encountered by a DS1 interface in the previous in- terval.')
ncmT1PreformanceSnapShotTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023), )
if mibBuilder.loadTexts: ncmT1PreformanceSnapShotTable.setStatus('mandatory')
ncmT1PreformanceSnapShotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1SnapShotNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1SnapShotIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1SnapShotEndType"))
if mibBuilder.loadTexts: ncmT1PreformanceSnapShotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PreformanceSnapShotEntry.setDescription('An entry in the T1 Performance Snap Shot Entry table.')
ncmT1SnapShotNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1SnapShotNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1SnapShotNIDIndex.setDescription('The object specifies the node id index of the node.')
ncmT1SnapShotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1SnapShotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1SnapShotIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applica- ble. The interface identified by a particular value of this index is the same interface as identified by the same value as a LineIndex object instance.')
ncmT1SnapShotEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1SnapShotEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1SnapShotEndType.setDescription('The variable specifies the End Type .')
ncmT1SnapShot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1SnapShot.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1SnapShot.setDescription('The variable specifies the option to intiate snap shot command.')
ncmT1TimeStampSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TimeStampSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TimeStampSec.setDescription('The variable specifies the Time Stamp in Seconds .')
ncmT1TimeStampMilliSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TimeStampMilliSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1TimeStampMilliSec.setDescription('The variable specifies the Time Stamp in milli Seconds .')
ncmT1CurrIntervalSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrIntervalSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1CurrIntervalSec.setDescription('The variable specifies the current interval in Seconds .')
ncmT1ResetPerfReg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1ResetPerfReg.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ResetPerfReg.setDescription('Reset Performance Monitoring registers.')
ncmAdvancedT1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024), )
if mibBuilder.loadTexts: ncmAdvancedT1ConfigTable.setStatus('mandatory')
ncmAdvancedT1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmAdvancedT1NIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmAdvancedT1LineIndex"))
if mibBuilder.loadTexts: ncmAdvancedT1ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAdvancedT1ConfigEntry.setDescription('An entry in the Advanced T1 Configuration table .')
ncmAdvancedT1NIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAdvancedT1NIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAdvancedT1NIDIndex.setDescription('The object specifies the node id of the node.')
ncmAdvancedT1LineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAdvancedT1LineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAdvancedT1LineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmadvfdlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("terminated", 1), ("pass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmadvfdlMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmadvfdlMode.setDescription('The variable specifies the fdl mode which is bit 0 of fdl Parameter1.')
ncmadvfdlStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("type-54016", 1), ("type-T1-403", 2), ("type-both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmadvfdlStandard.setStatus('mandatory')
if mibBuilder.loadTexts: ncmadvfdlStandard.setDescription('The variable specifies the fdl standard which is bits 1 and bit 2 of fdl Parameter1.')
ncmadvfdlPerformanceReport = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("user", 2), ("telco", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmadvfdlPerformanceReport.setStatus('mandatory')
if mibBuilder.loadTexts: ncmadvfdlPerformanceReport.setDescription('The variable specifies the fdl standard which is bits 3 and bit 4 of fdl Parameter1.')
ncmadvfdlLBEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmadvfdlLBEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmadvfdlLBEnable.setDescription('The variable specifies the Disable/Enable of the fdl Loopback which is bit 0 of the fdl-loop')
ncmadvfdlLLBT1BOPMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmadvfdlLLBT1BOPMsg.setStatus('mandatory')
if mibBuilder.loadTexts: ncmadvfdlLLBT1BOPMsg.setDescription('The variable specifies the Disable/Enable of the send/receive of the LLB T1.403 BOP Messages. It is the bit 1 of the fdl-loop.')
ncmadvfdlPLBT1BOPMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmadvfdlPLBT1BOPMsg.setStatus('mandatory')
if mibBuilder.loadTexts: ncmadvfdlPLBT1BOPMsg.setDescription('The variable specifies the Disable/Enable of the send/receive of the PLB T1.403 BOP Messages. It is the bit 2 of the fdl-loop')
ncmadvfdlIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all-ones", 1), ("flags", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmadvfdlIdlePattern.setStatus('mandatory')
if mibBuilder.loadTexts: ncmadvfdlIdlePattern.setDescription('The variable specifies the fdl idle pattern which is bit 0 of fdl Parameter2.')
ncmadvfdlMonitoringCsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("polling", 1), ("no-polling", 2), ("unsolicited-messages", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmadvfdlMonitoringCsuType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmadvfdlMonitoringCsuType.setDescription('The variable specifies the fdl standard which is bits 1 and bit 2 of fdl Parameter2.')
ncmT1LatchedStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025), )
if mibBuilder.loadTexts: ncmT1LatchedStatusTable.setStatus('mandatory')
ncmT1LatchedStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1LatchedStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1LatchedStatusIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1LatchedStatusEndType"))
if mibBuilder.loadTexts: ncmT1LatchedStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1LatchedStatusEntry.setDescription('An entry in the DS1 Port Latched Status Table.')
ncmT1LatchedStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1LatchedStatusNIDIndex.setDescription('The object specifies the node id of the node.')
ncmT1LatchedStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1LatchedStatusIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmT1LatchedStatusEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1LatchedStatusEndType.setDescription('The variable specifies the End Type .')
ncmT1LatchedStatusCRC6Error = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusCRC6Error.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1LatchedStatusCRC6Error.setDescription('This variable indicates the occurance of CRC6 error of the port latched status.')
ncmT1LatchedStatusFramingSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusFramingSlip.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1LatchedStatusFramingSlip.setDescription('This variable indicates the occurance of framing slip error of the port latched status.')
ncmT1LatchedStatusRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusRAI.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1LatchedStatusRAI.setDescription('This variable indicates the occurance Latched status of RAI for T1 port.')
ncmT1LatchedStatusLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusLOF.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1LatchedStatusLOF.setDescription('This variable indicates the occurance Latched status of LOF of T1 port.')
ncmT1LatchedStatusAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusAIS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1LatchedStatusAIS.setDescription('This variable indicates the occurance T1 port Latched status of AIS.')
ncmT1LatchedStatusLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusLOS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1LatchedStatusLOS.setDescription('This variable indicates the occurance Latched Status of LOS for T1 port.')
ncmT1LatchedStatusBPVThreExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusBPVThreExcd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1LatchedStatusBPVThreExcd.setDescription('This variable indicates the BPV Threshold Exceeded of T1 port Latched Status.')
ncmT1LatchedStatusBERExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusBERExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1LatchedStatusBERExceeded.setDescription('This variable indicates the BER Exceeded of T1 port Latched Status.')
ncmT1ThresholdStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026), )
if mibBuilder.loadTexts: ncmT1ThresholdStatusTable.setStatus('mandatory')
ncmT1ThresholdStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1ThresholdStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1ThresholdStatusIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1ThresholdStatusEndType"))
if mibBuilder.loadTexts: ncmT1ThresholdStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ThresholdStatusEntry.setDescription('An entry in the DS1 Port Threshold Status Table.')
ncmT1ThresholdStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdStatusNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ThresholdStatusNIDIndex.setDescription('The object specifies the node id of the node.')
ncmT1ThresholdStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ThresholdStatusIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmT1ThresholdStatusEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdStatusEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ThresholdStatusEndType.setDescription('The variable specifies the End Type .')
ncmT1ThresholdRestoreState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("out-of-service", 1), ("in-service", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdRestoreState.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ThresholdRestoreState.setDescription('This variable indicates the restore state of T1 port threshold status.')
ncmT1ThresholdSecLineRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdSecLineRestore.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ThresholdSecLineRestore.setDescription('This variable indicates the number of second until line restores(if restore mode is AUTO) of T1 port threshold Status.')
ncmT1ThresholdBERExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdBERExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ThresholdBERExceeded.setDescription('This variable indicates BER exceeded or not of T1 Threshold Status.')
ncmT1ThresholdBERCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdBERCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ThresholdBERCount.setDescription('This variable indicates the BER Count(reserved - always 0) of T1 port threshold Status.')
ncmT1ThresholdSESExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdSESExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ThresholdSESExceeded.setDescription('This variable indicates SES exceeded or not of T1 Threshold Status.')
ncmT1ThresholdSESCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdSESCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ThresholdSESCount.setDescription('This variable indicates the SES Count of T1 port threshold Status.')
ncmT1ThresholdUASExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdUASExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ThresholdUASExceeded.setDescription('This variable indicates UAS exceeded or not of T1 Threshold Status.')
ncmT1ThresholdUASCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdUASCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ThresholdUASCount.setDescription('This variable indicates the UAS Count of T1 port threshold Status.')
ncmT1ThresholdCRCExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdCRCExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ThresholdCRCExceeded.setDescription('This variable indicates CRC exceeded or not of T1 Threshold Status.')
ncmT1ThresholdCRCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdCRCCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ThresholdCRCCount.setDescription('This variable indicates the CRC Count of T1 port threshold Status.')
ncmT1ThresholdBPVExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdBPVExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ThresholdBPVExceeded.setDescription('This variable indicates BPV exceeded or not of T1 Threshold Status.')
ncmT1ThresholdBPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdBPVCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ThresholdBPVCount.setDescription('This variable indicates the BPV Count of T1 port threshold Status.')
ncmT1PerformanceCountersTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027), )
if mibBuilder.loadTexts: ncmT1PerformanceCountersTable.setStatus('mandatory')
ncmT1PerformanceCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1PerfCountNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1PerfCountIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1PerfCountEndType"))
if mibBuilder.loadTexts: ncmT1PerformanceCountersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PerformanceCountersEntry.setDescription('An entry in the ncm T1 Performance Counters Entry table.')
ncmT1PerfCountNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PerfCountNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PerfCountNIDIndex.setDescription('The object specifies the node id index of the node.')
ncmT1PerfCountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PerfCountIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PerfCountIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmT1PerfCountEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PerfCountEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PerfCountEndType.setDescription('The variable specifies the End Type of T1 Performance Counter.')
ncmT1PerfCountFrameMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("d4", 1), ("esf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PerfCountFrameMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PerfCountFrameMode.setDescription('The variable specifies the Framing Mode of T1 Performance Counter.')
ncmT1PerfCountCurESFErrEvt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PerfCountCurESFErrEvt.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PerfCountCurESFErrEvt.setDescription('This variable specifies the Current ESF events of T1 Performance Counter. This object has no significance for QUAD cards.')
ncmT1PerfCountCurBPVErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PerfCountCurBPVErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PerfCountCurBPVErrCnt.setDescription('This variable specifies the Current BPV counts of T1 Performance Counter. This object has no significance for QUAD cards.')
ncmT1PerfCountCurFrameErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PerfCountCurFrameErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PerfCountCurFrameErrCnt.setDescription('This variable specifies the Current Frame Error counts of T1 Performance Counter. This object has no significance for QUAD cards.')
ncmT1PerfCountCurCRC6Error = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PerfCountCurCRC6Error.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1PerfCountCurCRC6Error.setDescription('This variable specifies the Current CRC-6 errors of T1 Performance Counter. This object has no significance for QUAD cards.')
ncmT1ResetPerfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1ResetPerfCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmT1ResetPerfCount.setDescription('Reset ncm T1 Performance Counters.')
ncmDataPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028), )
if mibBuilder.loadTexts: ncmDataPortConfigTable.setStatus('mandatory')
ncmDataPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmDataPortConfigNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmDataPortConfigIndex"))
if mibBuilder.loadTexts: ncmDataPortConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortConfigEntry.setDescription('An entry in the ncmData Port Configuration Entry table.')
ncmDataPortConfigNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortConfigNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortConfigNIDIndex.setDescription('The object specifies the node id of the node.')
ncmDataPortConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortConfigIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmDataPortConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortConfigMode.setDescription('The variable specifies the data port mode whether it is configured as DTE/DCE.')
ncmDataPortConfigLineIndicate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active-low", 1), ("active-high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortConfigLineIndicate.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortConfigLineIndicate.setDescription('The variable specifies the control line indicator for X.21 only, set to 0 if line is low while set to 1 if line is high.')
ncmDataPortLineStatusCDCC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortLineStatusCDCC.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortLineStatusCDCC.setDescription('The variable specifies the bit 0 status of control line; where 0=low, 1=high; Status is CD/DTR if Mode = DTE while is CC/DSR if Mode = DCE')
ncmDataPortLineStatusCACB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortLineStatusCACB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortLineStatusCACB.setDescription('The variable specifies the bit 1 status of control line; where 0=low, 1=high; Status is CA/RTS if Mode = DTE while is CB/CTS if Mode = DCE')
ncmDataPortLineStatusLLCJ = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortLineStatusLLCJ.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortLineStatusLLCJ.setDescription('The variable specifies the bit 2 status of control line; where 0=low, 1=high; Status is LL if Mode = DTE while is CJ/DCD if Mode = DCE')
ncmDataPortLineStatusRLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortLineStatusRLTM.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortLineStatusRLTM.setDescription('The variable specifies the bit 2 status of control line; where 0=low, 1=high; Status is RL if Mode = DTE while is TM if Mode = DCE')
ncmDataPortConfigLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortConfigLOS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortConfigLOS.setDescription('The variable specifies the bit 7 status of control line; where 0=disable, 1=enable; Status is LOS Mode')
ncmDataPortConfigServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-in-service", 1), ("in-service", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortConfigServiceState.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortConfigServiceState.setDescription('The variable specifies the service state of this data port.')
ncmDataPortConfigClkOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("st", 1), ("invertedst", 2), ("tt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortConfigClkOpt.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortConfigClkOpt.setDescription('The variable specifies the clocking option of this data port.')
ncmDataPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029), )
if mibBuilder.loadTexts: ncmDataPortStatusTable.setStatus('mandatory')
ncmDataPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmDataPortStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmDataPortStatusIndex"))
if mibBuilder.loadTexts: ncmDataPortStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortStatusEntry.setDescription('An entry in the ncmData Port Status Entry table.')
ncmDataPortStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortStatusNIDIndex.setDescription('The object specifies the node id of the node.')
ncmDataPortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortStatusIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmDataPortStatusMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortStatusMode.setDescription('The variable specifies the data port mode whether it is configured as DCE/DCE.')
ncmDataPortStatusLineIndicate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active-low", 1), ("active-high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusLineIndicate.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortStatusLineIndicate.setDescription('The variable specifies the control line indicator for X.21 only, set to 0 if line is low while set to 1 if line is high.')
ncmDataPortStatusLineCDCC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusLineCDCC.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortStatusLineCDCC.setDescription('The variable specifies the bit 0 status of control line; where 0=low, 1=high; Status is CD/DTR if Mode = DTE while is CC/DSR if Mode = DCE')
ncmDataPortStatusLineCACB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusLineCACB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortStatusLineCACB.setDescription('The variable specifies the bit 1 status of control line; where 0=low, 1=high; Status is CA/RTS if Mode = DTE while is CB/CTS if Mode = DCE')
ncmDataPortStatusLineLLCJ = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusLineLLCJ.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortStatusLineLLCJ.setDescription('The variable specifies the bit 2 status of control line; where 0=low, 1=high; Status is LL if Mode = DTE while is CJ/DCD if Mode = DCE')
ncmDataPortStatusLineRLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusLineRLTM.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortStatusLineRLTM.setDescription('The variable specifies the bit 3 status of control line; where 0=low, 1=high; Status is RL if Mode = DTE while is TM if Mode = DCE')
ncmDataPortStatusLineLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusLineLOS.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortStatusLineLOS.setDescription('The variable specifies the bit 7 status of control line; where 0=disable, 1=enable; Status is LOS Mode')
ncmDataPortStatusServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-in-service", 1), ("in-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusServiceState.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortStatusServiceState.setDescription('The variable specifies the service state of this data port.')
ncmDataPortStatusCimType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 32, 33, 34, 56, 255))).clone(namedValues=NamedValues(("cim-2000-E1", 16), ("cim-2002-E1", 17), ("cim-2003-E1", 18), ("cim-2004-E1", 19), ("cim-2005-E1", 20), ("cim-2006-E1", 21), ("cim-2101-T1", 32), ("cim-2102-T1", 33), ("cim-2164-T1", 34), ("cim-2061-E1", 56), ("cim-UNINSTALLED", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusCimType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortStatusCimType.setDescription('The variable specifies the connector interface module type of this data port.')
ncmDataPortStatusLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortStatusLoopback.setDescription('The variable specifies the loopback diagnostic status of this data port.')
ncmDataPortTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("d3-in-D24", 2), ("qrss", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortTestPattern.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortTestPattern.setDescription('The variable specifies the test pattern in progress of this data port.')
ncmDataPortTstPatErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortTstPatErrCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDataPortTstPatErrCount.setDescription('This variable indicates the Test Pattern Error Count.')
ncmALARMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030), )
if mibBuilder.loadTexts: ncmALARMConfigTable.setStatus('mandatory')
ncmALARMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmAlarmConfigNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmAlarmConfigIndex"))
if mibBuilder.loadTexts: ncmALARMConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmALARMConfigEntry.setDescription('An entry in the ncmAlarm Configure table.')
ncmAlarmConfigNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAlarmConfigNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlarmConfigNIDIndex.setDescription('The object specifies the node id of the node.')
ncmAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAlarmConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlarmConfigIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmAlmCfgDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgDomain.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlmCfgDomain.setDescription('The variable specifies the Domain the alarm came from.')
ncmAlmCfgSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlmCfgSrcAddr.setDescription('The variable specifies the Address where the alarm came from.')
ncmAlmCfgCard = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgCard.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlmCfgCard.setDescription('The variable specifies the card in a specified shelf.')
ncmAlmCfgShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgShelf.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlmCfgShelf.setDescription('The variable specifies the particular shelf.')
ncmAlmCfgE1T1Port1EnableAlmRpt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgE1T1Port1EnableAlmRpt.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlmCfgE1T1Port1EnableAlmRpt.setDescription('The variable Enable/Disable the alarm reporting of the Port #1 for E1/T1 by specifying the bit 0; 1=yes, 0=no.')
ncmAlmCfgE1T1Port2EnableAlmRpt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgE1T1Port2EnableAlmRpt.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlmCfgE1T1Port2EnableAlmRpt.setDescription('The variable Enable/Disable the alarm reporting of the Port #2 for E1/T1 by specifying the bit 1; 1=yes, 0=no.')
ncmAlmCfgE1T1Port3EnableAlmRpt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgE1T1Port3EnableAlmRpt.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlmCfgE1T1Port3EnableAlmRpt.setDescription('The variable Enable/Disable the alarm reporting of the Port #3 for E1/T1 by specifying the bit 0; 1=yes, 0=no.')
ncmAlmCfgE1T1Port4EnableAlmRpt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgE1T1Port4EnableAlmRpt.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlmCfgE1T1Port4EnableAlmRpt.setDescription('The variable Enable/Disable the alarm reporting of the Port #4 for E1/T1 by specifying the bit 1; 1=yes, 0=no.')
ncmAlmCfgDataPort1EnableAlmRpt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgDataPort1EnableAlmRpt.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlmCfgDataPort1EnableAlmRpt.setDescription('The variable Enable/Disable the alarm reporting of the Port #1 for ncmData by specifying the bit 0; 1=yes, 0=no. This object has no significance in QUAD cards.')
ncmAlmCfgDataPort2EnableAlmRpt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgDataPort2EnableAlmRpt.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlmCfgDataPort2EnableAlmRpt.setDescription('The variable Enable/Disable the alarm reporting of the Port #2 for ncmData by specifying the bit 1; 1=yes, 0=no. This object has no significance in QUAD cards.')
ncmAlmCfgEnableCardAlmRpt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgEnableCardAlmRpt.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlmCfgEnableCardAlmRpt.setDescription('The variable Enable/Disable the alarm reporting for this card.')
ncmAlmCfgDeclareTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgDeclareTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlmCfgDeclareTime.setDescription('The variable specifies the alarm declaration time (in seconds).')
ncmCURRENTAlarmMsgTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1031), )
if mibBuilder.loadTexts: ncmCURRENTAlarmMsgTable.setStatus('mandatory')
ncmCURRENTAlarmMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1031, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmCurrAlarmMsgNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmCurrAlarmMsgIndex"))
if mibBuilder.loadTexts: ncmCURRENTAlarmMsgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCURRENTAlarmMsgEntry.setDescription('An entry in the Current ncm Alarm Message table.')
ncmCurrAlarmMsgNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1031, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCurrAlarmMsgNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCurrAlarmMsgNIDIndex.setDescription('The object specifies the node id of the node.')
ncmCurrAlarmMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1031, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCurrAlarmMsgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCurrAlarmMsgIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmCurrAlarmMsgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1031, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCurrAlarmMsgNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCurrAlarmMsgNumber.setDescription('A number between 1 and 15, where 1 is the latest alarm and 15 is the most recent alarm captured inside the data base.')
ncmCurrAlarmMsgEquipID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1031, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCurrAlarmMsgEquipID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCurrAlarmMsgEquipID.setDescription('The object specifies the Equipment ID of the card.')
ncmPrevAlarmMsgTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032), )
if mibBuilder.loadTexts: ncmPrevAlarmMsgTable.setStatus('mandatory')
ncmPrevAlarmMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmPrevAlarmMsgNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmPrevAlarmMsgIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmPrevAlarmMsgNumber"))
if mibBuilder.loadTexts: ncmPrevAlarmMsgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPrevAlarmMsgEntry.setDescription('An entry in the Enhanced ncmAlarm Configure table.')
ncmPrevAlarmMsgNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPrevAlarmMsgNIDIndex.setDescription('The object specifies the node id of the node.')
ncmPrevAlarmMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPrevAlarmMsgIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmPrevAlarmMsgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPrevAlarmMsgNumber.setDescription('A number between 1 and 15, where 1 is the latest alarm and 15 is the most recent alarm captured inside the data base.')
ncmPrevAlarmMsgTimeStampSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgTimeStampSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPrevAlarmMsgTimeStampSec.setDescription('The variable specifies the Time Stamp in Seconds.')
ncmPrevAlarmMsgTimeStampms = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgTimeStampms.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPrevAlarmMsgTimeStampms.setDescription('The variable specifies the Time Stamp in milli Seconds.')
ncmPrevAlarmMsgAlarmCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgAlarmCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPrevAlarmMsgAlarmCode.setDescription('The variable specifies the ncm Alarm Code of the card.')
ncmPrevAlarmMsgAlarmInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgAlarmInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPrevAlarmMsgAlarmInstance.setDescription('The object specifies the ncm Alarm Instance.')
ncmPrevAlarmMsgObjType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17))).clone(namedValues=NamedValues(("e1-PortID", 1), ("dataPort", 2), ("circuit", 3), ("power", 4), ("clkRef", 5), ("timeBus", 6), ("refBus", 7), ("notUsed", 8), ("software", 9), ("equipment", 10), ("t1-PortID", 11), ("dS3-Port", 16), ("hssi-Port", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgObjType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPrevAlarmMsgObjType.setDescription('The variable specifies the Object Type of the ncmAlarm refer.')
ncmPrevAlarmMsgSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("informational", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPrevAlarmMsgSeverity.setDescription('The variable specifies the severity of the ncm Alarm.')
ncmEnhanAlmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033), )
if mibBuilder.loadTexts: ncmEnhanAlmCfgTable.setStatus('mandatory')
ncmEnhanAlmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmEnhanAlmCfgNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmEnhanAlmCfgIndex"))
if mibBuilder.loadTexts: ncmEnhanAlmCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmEnhanAlmCfgEntry.setDescription('An entry in the Enhanced ncm Alarm Configure table.')
ncmEnhanAlmCfgNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmEnhanAlmCfgNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmEnhanAlmCfgNIDIndex.setDescription('The object specifies the node id of the node.')
ncmEnhanAlmCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmEnhanAlmCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmEnhanAlmCfgIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmEnhanAlmCfgCRCThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgCRCThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmEnhanAlmCfgCRCThreshold.setDescription('The variable specifies the consecutive CRC error threshold of the port; 0 is to disable this error threshold and 1~31 is to enable also specify a particular value for this threshold.')
ncmEnhanAlmCfgSESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgSESThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmEnhanAlmCfgSESThreshold.setDescription('The variable specifies the severly errored seconds threshold of the port; 0 is to disable this error threshold and 1~100 is to enable also specify a particular value for this threshold.')
ncmEnhanAlmCfgUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgUASThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmEnhanAlmCfgUASThreshold.setDescription('The variable specifies the unavailable seconds threshold of the port; 0 is to disable this error threshold and 1~100 is to enable also specify a particular value for this threshold.')
ncmEnhanAlmCfgBERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disable", 1), ("d10E-4", 2), ("d10E-5", 3), ("d10E-6", 4), ("d10E-7", 5), ("d10E-8", 6), ("d10E-9", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgBERThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmEnhanAlmCfgBERThreshold.setDescription('The variable specifies the bit error rate threshold of the port; the value = 10 Exponential to the power minus n.')
ncmEnhanAlmCfgBPVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgBPVThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmEnhanAlmCfgBPVThreshold.setDescription('The object specifies the BPV threshold the port.')
ncmEnhanAlmCfgLineRestoral = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("automatic", 2), ("manual", 3), ("time-of-day", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgLineRestoral.setStatus('mandatory')
if mibBuilder.loadTexts: ncmEnhanAlmCfgLineRestoral.setDescription('The variable specifies the Line Restoral mode of the port.')
ncmEnhanAlmCfgTODHour = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgTODHour.setStatus('mandatory')
if mibBuilder.loadTexts: ncmEnhanAlmCfgTODHour.setDescription('The object specifies the Time of day hour the port; this is the hours to restore line if line restore is TOD.')
ncmEnhanAlmCfgTODMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgTODMinute.setStatus('mandatory')
if mibBuilder.loadTexts: ncmEnhanAlmCfgTODMinute.setDescription('The object specifies the Time of day minute the port; this is the minutes to restore line if line restore is TOD.')
ncmEnhanAlmCfgLinRestEvalPer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgLinRestEvalPer.setStatus('mandatory')
if mibBuilder.loadTexts: ncmEnhanAlmCfgLinRestEvalPer.setDescription('The object specifies the Line Restoral evaulation period (seconds) of the port.')
ncmLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1034), )
if mibBuilder.loadTexts: ncmLoopbackTable.setStatus('mandatory')
ncmLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1034, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmLpbkNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmLpbkLineIndex"))
if mibBuilder.loadTexts: ncmLoopbackEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLoopbackEntry.setDescription('An entry in the Loopback Table.')
ncmLpbkNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1034, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLpbkNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLpbkNIDIndex.setDescription('The object specifies the node id of the node.')
ncmLpbkLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1034, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLpbkLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLpbkLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmSetAllOnes = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1034, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSetAllOnes.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSetAllOnes.setDescription('The variable Enable/Disable the set all ones loopback option.')
ncmTimeoutLOCSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1034, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmTimeoutLOCSec.setStatus('mandatory')
if mibBuilder.loadTexts: ncmTimeoutLOCSec.setDescription('The object specifies the number of seconds to loop for LOC. 0 for infinite.')
ncmRemoteLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1034, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmRemoteLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmRemoteLB.setDescription('This object specify whether the loopback is remote or local.')
ncmActivateDeactLBType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1034, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10000, 1, 2, 4, 8, 16, 32, 64, 128, 10016, 10032, 10064, 10128))).clone(namedValues=NamedValues(("deactivate", 10000), ("lineLoop", 1), ("payloadLoop", 2), ("localLoopbk", 4), ("dPLoop", 8), ("act-LLBBOP", 16), ("act-PLBBOP", 32), ("aCT-SIX-TWO-FOUR-ONE-ONE-INBAND", 64), ("aCT-FT1-LOOP-CODE", 128), ("deact-LLBBOP", 10016), ("deact-PLBBOP", 10032), ("deact-SIX-TWO-FOUR-ONE-ONE-INBAND", 10064), ("deact-FT1-LOOP-CODE", 10128)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmActivateDeactLBType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmActivateDeactLBType.setDescription("This variable represents the loopback confi- guration of the DS1 interface. Agents support- ing read/write access should return badValue in response to a requested loopback state that the interface does not support. The values mean: PayloadLoop The received signal at this interf is looped through the device. Typically the received signal is looped back for re- transmission after it has passed through the device's framing function. LineLoop The received signal at this interface does not go through the device (minimum pene- tration) but is looped back out. LocalLoopbk This variable indicates whether the local loopback is enabled or disabled on the port or line by the device. DPLoop This variable indicates whether the ncmData Port loopback is enabled or disabled by the device. Remark: Only ACE-T1/ACE-E1 cards use this loopbk type for port# 3 & 4; while the QUAD-T1/ QUAD-E1 don't support this loopback type. Act-LLBBOP This variable indicates to activate the LLBBOP. Act-PLBBOP This variable indicates to activate the PLBBOP. Deact-LLBBOP This variable indicates to deactivate the LLBBOP. Deact-PLBBOP This variable indicates to deactivate the PLBBOP. Deact-SIX-TWO-FOUR-ONE-ONE-INBAND This variable indicates to deactivate 62411 Inband Deact-FT1-LOOP-CODE This variable indicates to deactivate FT1 Loop Code When one of this object is chosen and received by the agent, this loopback type is send to the target platform to activate the loopback action; while the object value = 0 is received the loopback action will be deactivated by the loopback type stored inside the port status.")
ncmTestPatternTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1035), )
if mibBuilder.loadTexts: ncmTestPatternTable.setStatus('mandatory')
ncmTestPatternEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1035, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmTstpattNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmTstpattLineIndex"))
if mibBuilder.loadTexts: ncmTestPatternEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmTestPatternEntry.setDescription('An entry in the Test Pattern Table.')
ncmTstpattNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1035, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmTstpattNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmTstpattNIDIndex.setDescription('The object specifies the node id of the node.')
ncmTstpattLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1035, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmTstpattLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmTstpattLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmTstpattTestPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1035, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmTstpattTestPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: ncmTstpattTestPeriod.setDescription('The object specifies the number of seconds to test; 0 for infinite.')
ncmStartStopTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1035, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("stop", 100), ("three-In-Twentyfour", 1), ("qrss", 2), ("two-N-Twenty-One", 3), ("one-In-Eight", 4), ("two-N-Fifteen-One", 5), ("all-Zeroes", 6), ("fiftyfive-Octets", 7), ("all-Ones", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmStartStopTestPattern.setStatus('mandatory')
if mibBuilder.loadTexts: ncmStartStopTestPattern.setDescription("When one of this object is chosen and received by the agent, this test pattern is send to the target platform to start the diagnostic action; while object value = 0, it will stop the test pattern by the pattern is stored inside the port status. Remark: Only ACE-T1/ACE-E1 cards use the QRSS test pattern for data port# 3 & 4; while the QUAD-T1/QUAD-E1 don't support this test pattern.")
ncmResetTestCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1035, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmResetTestCounter.setStatus('mandatory')
if mibBuilder.loadTexts: ncmResetTestCounter.setDescription('This object reset the test counter in the diagnostic.')
ncmCircuitInfoTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036), )
if mibBuilder.loadTexts: ncmCircuitInfoTable.setStatus('mandatory')
ncmCircuitInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmCircuitInfoNIDIndex"))
if mibBuilder.loadTexts: ncmCircuitInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoEntry.setDescription('An entry in the circuitBuilder Table for adding, editing, deleting, activate, deactivate and get the detail information of a particular circuit.')
ncmCircuitInfoNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCircuitInfoNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmCircuitInfoCircName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoCircName.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoCircName.setDescription('This object allocates & indicates the circuit name for sending the add/edit/delete/activate/deactivate/get detail info circuit request to the circuitbuilder.')
ncmCircuitInfoCircPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ccb-CPRIO-LOW", 1), ("ccb-CPRIO-NRML", 2), ("ccb-CPRIO-HIGH", 3), ("ccb-CPRIO-CRIT", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoCircPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoCircPriority.setDescription('This object allocates & indicates the circuit priority for sending the add/edit/get detail info circuit request to the circuitbuilder.')
ncmCircuitInfoCircType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ccb-CTYPE-RESERVED", 1), ("ccb-CTYPE-PERMANENT", 2), ("ccb-CTYPE-SWITCHED", 3), ("ccb-CTYPE-PRIMARY", 4), ("ccb-CTYPE-BACKUP", 5), ("ccb-CTYPE-BACKUP-ND", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoCircType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoCircType.setDescription('This object allocates & indicates the circuit type for sending the add/edit/get detail info circuit request to the circuitbuilder.')
ncmCircuitInfoCircMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ccb-CMODE-NX56-DATA", 1), ("ccb-CMODE-NX64-DATA", 2), ("ccb-CMODE-SIG-VOICE", 3), ("ccb-CMODE-NSIG-VOICE", 4), ("ccb-CMODE-RESERVED", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoCircMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoCircMode.setDescription('This object allocates & indicates the circuit mode for sending the add/edit/get detail info circuit request to the circuitbuilder.')
ncmCircuitInfoSrcPortSite = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoSrcPortSite.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoSrcPortSite.setDescription('This object allocates & indicates the shelf and slot combination of the source port for sending the add/edit/get detail info circuit request to the circuitbuilder.')
ncmCircuitInfoSrcCardEquipID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 112, 113, 116, 96))).clone(namedValues=NamedValues(("card-SIGMA-VCU", 77), ("ace-FW-E1", 80), ("ace-FW-T1", 81), ("ace-FW-QUAD-T1", 82), ("ace-FW-QUAD-E1", 83), ("ace-Reserved", 84), ("tabs-IMUX", 85), ("ace-FW-DUAL-T1", 86), ("ace-FW-DUAL-E1", 87), ("fw-DS3-CDSU", 88), ("fw-DS3-CDSU-CHANNEL", 89), ("ace-FW-ISDN-T1", 112), ("ace-FW-ISDN-E1", 113), ("fw-DS3-DUDS3", 116), ("fw-NCM", 96)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoSrcCardEquipID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoSrcCardEquipID.setDescription('This object allocates & indicates the card equipment id of the source port for sending the add/edit/get detail info circuit request to the circuitbuilder.')
ncmCircuitInfoSrcPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ccb-NET-PORT-1", 1), ("ccb-NET-PORT-2", 2), ("ccb-NET-PORT-3", 3), ("ccb-NET-PORT-4", 4), ("ccb-DATA-PORT-1", 5), ("ccb-DATA-PORT-2", 6), ("ccb-TAC-NET-PORT", 7), ("ccb-TAC-EQP-PORT", 8), ("ccb-UNKNOWN-PORT", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoSrcPortID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoSrcPortID.setDescription('This object allocates & indicates the port identity of the source port for sending the add/edit/get detail info circuit request to the circuitbuilder.')
ncmCircuitInfoSrcTimeslotmap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoSrcTimeslotmap.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoSrcTimeslotmap.setDescription('This object allocates & indicates the timeslot map allocated for the source port for sending the add/edit/get detail info circuit request to the circuitbuilder.')
ncmCircuitInfoDstPortSite = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoDstPortSite.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoDstPortSite.setDescription('This object allocates & indicates the shelf and slot combination of the destination port for sending the add/edit/get detail info circuit request to the circuitbuilder.')
ncmCircuitInfoDstCardEquipID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 112, 113, 116, 96))).clone(namedValues=NamedValues(("card-SIGMA-VCU", 77), ("ace-FW-E1", 80), ("ace-FW-T1", 81), ("ace-FW-QUAD-T1", 82), ("ace-FW-QUAD-E1", 83), ("ace-Reserved", 84), ("tabs-IMUX", 85), ("ace-FW-DUAL-T1", 86), ("ace-FW-DUAL-E1", 87), ("fw-DS3-CDSU", 88), ("fw-DS3-CDSU-CHANNEL", 89), ("ace-FW-ISDN-T1", 112), ("ace-FW-ISDN-E1", 113), ("fw-DS3-DUDS3", 116), ("fw-NCM", 96)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoDstCardEquipID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoDstCardEquipID.setDescription('This object allocates & indicates the card equipment id of the destination port for sending the add/edit/get detail info circuit request to the circuitbuilder.')
ncmCircuitInfoDstPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ccb-NET-PORT-1", 1), ("ccb-NET-PORT-2", 2), ("ccb-NET-PORT-3", 3), ("ccb-NET-PORT-4", 4), ("ccb-DATA-PORT-1", 5), ("ccb-DATA-PORT-2", 6), ("ccb-TAC-NET-PORT", 7), ("ccb-TAC-EQP-PORT", 8), ("ccb-UNKNOWN-PORT", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoDstPortID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoDstPortID.setDescription('This object allocates & indicates the port identity of the destination port for sending the add/edit/get detail info circuit request to the circuitbuilder.')
ncmCircuitInfoDstTimeslotmap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoDstTimeslotmap.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoDstTimeslotmap.setDescription('This object allocates & indicates the timeslot map allocated for the destination port for sending the add/edit/get detail info circuit request to the circuitbuilder.')
ncmCircuitInfoBackPlaneBusID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ccb-BKPL-BUS-A1", 1), ("ccb-BKPL-BUS-A2", 2), ("ccb-BKPL-BUS-A3", 3), ("ccb-BKPL-BUS-A4", 4), ("ccb-BKPL-BUS-A5", 5), ("ccb-BKPL-BUS-A6", 6), ("ccb-BKPL-BUS-A7", 7), ("ccb-BKPL-BUS-A8", 8), ("ccb-BKPL-BUS-B", 9), ("ccb-BKPL-BUS-C", 10), ("ccb-BKPL-BUS-NONE", 11), ("ccb-BKPL-BUS-AUTO", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoBackPlaneBusID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoBackPlaneBusID.setDescription('This object allocates & indicates the backplane bus ID for sending the add/edit/get detail info circuit request to the circuitbuilder.')
ncmCircuitInfoAssoCircName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoAssoCircName.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoAssoCircName.setDescription('This object allocates & indicates the Assoicate circuit name for sending the add/edit/get detail info circuit request to the circuitbuilder.')
ncmCircuitInfoAction = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("add", 1), ("edit", 2), ("delete", 3), ("activate", 4), ("deactivate", 5), ("getdetailinfo", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoAction.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircuitInfoAction.setDescription('The object send the corresponding acp command to execute the specified circuit action with all necessary parameters setup properly.')
ncmAddEditActDeactCircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44))).clone(namedValues=NamedValues(("ccb-BUILD-SUCCESS", 1), ("ccb-BUILD-NO-PORT-BW", 2), ("ccb-BUILD-CKT-EXIST", 3), ("ccb-BUILD-INVALID-DATA", 4), ("ccb-BUILD-PROM-FAILURE", 5), ("ccb-BUILD-NO-BUS-BW", 6), ("ccb-BUILD-NO-PEER-CARD", 7), ("ccb-BUILD-PEER-NO-PORT-BW", 8), ("ccb-BUILD-PEER-CKT-EXIST", 9), ("ccb-BUILD-PEER-INVALID-DATA", 10), ("ccb-BUILD-PEER-PROM-FAILURE", 11), ("ccb-BUILD-PEER-NO-BUS-BW", 12), ("ccb-BUILD-CIRCDBASE-OVRFLOW", 13), ("ccb-BUILD-CKT-NOT-EXIST", 14), ("ccb-BUILD-PORT-SETUP-FAIL", 15), ("ccb-BUILD-CKT-INACTIVE", 16), ("ccb-BUILD-NOT-ACT-CIRC", 17), ("ccb-BUILD-SCHECK-OK", 21), ("ccb-BUILD-SCHECK-BAD-CARD", 22), ("ccb-BUILD-SCHECK-BAD-CTYPE", 23), ("ccb-BUILD-SCHECK-BAD-CMODE", 24), ("ccb-BUILD-SCHECK-DIFF-ncmSHELF", 25), ("ccb-BUILD-SCHECK-DIFF-TSNUM", 26), ("ccb-BUILD-SCHECK-BAD-BUS", 27), ("ccb-BUILD-DCHECK-OK", 31), ("ccb-BUILD-DCHECK-MISSCARD", 32), ("ccb-BUILD-DCHECK-DIFFCARD", 33), ("ccb-BUILD-DCHECK-BUS-TS-CNFL", 34), ("ccb-BUILD-DCHECK-BUS-DRV-CNFL", 35), ("ccb-BUILD-DCHECK-PORT-CNFL", 36), ("ccb-BUILD-DBKCHECK-NO-PRICIRC", 41), ("ccb-BUILD-DBKCHECK-NO-BKPCIRC", 42), ("ccb-BUILD-DBKCHECK-NO-SHRPORT", 43), ("ccb-BUILD-DBKCHECK-NO-PRIPORT", 44)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAddEditActDeactCircuitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAddEditActDeactCircuitStatus.setDescription('This variable indicates the status as the result of add/edit/Activate/Deactivate circuit.')
ncmDeleteCircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ccb-DELETE-SUCCESS", 1), ("ccb-DELETE-PROM-FAILURE", 2), ("ccb-DELETE-CANT-FIND", 3), ("ccb-DELETE-NO-PEER-CARD", 4), ("ccb-DELETE-PEER-PROM-FAILURE", 5), ("ccb-DELETE-PEER-CANT-FIND", 6), ("ccb-DELETE-CKT-NOT-EXIST", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDeleteCircuitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDeleteCircuitStatus.setDescription('This variable indicates the status as the result of delete circuit.')
ncmGetDetailCircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ccb-CSTAT-SPARE", 1), ("ccb-CSTAT-EDITING", 2), ("ccb-CSTAT-ACTIVE", 3), ("ccb-CSTAT-INACTIVE", 4), ("ccb-CSTAT-PREEMPTED", 5), ("ccb-CSTAT-BROKEN", 6), ("ccb-CSTAT-LINE-ERR", 7), ("ccb-CSTAT-BACKUPPED", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmGetDetailCircuitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmGetDetailCircuitStatus.setDescription('This variable indicates the status of the get circuit detail information.')
ncmPortTimeslotAllocTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1037), )
if mibBuilder.loadTexts: ncmPortTimeslotAllocTable.setStatus('mandatory')
ncmPortTimeslotAllocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1037, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmPortTimeslotAllocNIDIndex"))
if mibBuilder.loadTexts: ncmPortTimeslotAllocEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPortTimeslotAllocEntry.setDescription('An entry in the Port Timeslot Allocation table for ncmCircuit Build.')
ncmPortTimeslotAllocNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1037, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPortTimeslotAllocNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPortTimeslotAllocNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmPortTimeslotCardSite = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1037, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPortTimeslotCardSite.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPortTimeslotCardSite.setDescription('This variable indicates the shelf and slot combination number of the device.')
ncmPortTimeslotCardEquipID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1037, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 112, 113, 116, 96))).clone(namedValues=NamedValues(("card-SIGMA-VCU", 77), ("ace-FW-E1", 80), ("ace-FW-T1", 81), ("ace-FW-QUAD-T1", 82), ("ace-FW-QUAD-E1", 83), ("ace-Reserved", 84), ("tabs-IMUX", 85), ("ace-FW-DUAL-T1", 86), ("ace-FW-DUAL-E1", 87), ("fw-DS3-CDSU", 88), ("fw-DS3-CDSU-CHANNEL", 89), ("ace-FW-ISDN-T1", 112), ("ace-FW-ISDN-E1", 113), ("fw-DS3-DUDS3", 116), ("fw-NCM", 96)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPortTimeslotCardEquipID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPortTimeslotCardEquipID.setDescription('This variable indicates the card equipment id of the target.')
ncmPortTimeslotPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1037, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ccb-NET-PORT-1", 1), ("ccb-NET-PORT-2", 2), ("ccb-NET-PORT-3", 3), ("ccb-NET-PORT-4", 4), ("ccb-DATA-PORT-1", 5), ("ccb-DATA-PORT-2", 6), ("ccb-TAC-NET-PORT", 7), ("ccb-TAC-EQP-PORT", 8), ("ccb-UNKNOWN-PORT", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPortTimeslotPortID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPortTimeslotPortID.setDescription('This variable indicates the port identity of the interface.')
ncmPortAllocTimeSlotMap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1037, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPortAllocTimeSlotMap.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPortAllocTimeSlotMap.setDescription('The variable indicates the timeslot map allocated for the port by sending the corresponding acp command to execute the Get Action.')
ncmDialBkUpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038), )
if mibBuilder.loadTexts: ncmDialBkUpInfoTable.setStatus('mandatory')
ncmDialBkUpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmDialBkUpInfoNIDIndex"))
if mibBuilder.loadTexts: ncmDialBkUpInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDialBkUpInfoEntry.setDescription('An entry in the retrieval of dial-backup parameter table for ncmCircuit Build.')
ncmDialBkUpInfoNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDialBkUpInfoNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDialBkUpInfoNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmDialBkUpReqCircName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDialBkUpReqCircName.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDialBkUpReqCircName.setDescription('This variable indicates the circuit name for request dial-backup parameter and retrieve from the circuitbuilder.')
ncmPrimaryCircName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPrimaryCircName.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPrimaryCircName.setDescription('This variable indicates the primary circuit name for request and retrieve from the circuitbuilder as a parameter of dial-backup.')
ncmBackupCircName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmBackupCircName.setStatus('mandatory')
if mibBuilder.loadTexts: ncmBackupCircName.setDescription('This variable indicates the backup circuit name for request and retrieve from the circuitbuilder as a parameter of dial-backup.')
ncmCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCallReferenceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCallReferenceNumber.setDescription('The variable indicates the call reference number of the dial-backup.')
ncmCirSrcPortErrsetupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("ccb-DBKP-ALM-AIS-CTS", 1), ("ccb-DBKP-ALM-YEL-DSR", 2), ("ccb-DBKP-ALM-LOS-DCD", 4), ("ccb-DBKP-ALM-LOF", 8), ("ccb-DBKP-ALM-UAS", 16), ("ccb-DBKP-ALM-SES", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCirSrcPortErrsetupMask.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCirSrcPortErrsetupMask.setDescription('The variable indicates the bitmap to setup the mask for circuit source port error of the dial-backup; ncmAlarm Mask ALM-AIS, ALM-YEL and ALM-LOS are defined for t1 port; whilst ALM-CTS, ALM-DSR and ALM-DCD are defined for data port.')
ncmCirDstPortErrsetupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("ccb-DBKP-ALM-AIS-CTS", 1), ("ccb-DBKP-ALM-YEL-DSR", 2), ("ccb-DBKP-ALM-LOS-DCD", 4), ("ccb-DBKP-ALM-LOF", 8), ("ccb-DBKP-ALM-UAS", 16), ("ccb-DBKP-ALM-SES", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCirDstPortErrsetupMask.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCirDstPortErrsetupMask.setDescription('The variable indicates the bitmap to setup the mask for circuit destination port error of the dial-backup; ncmAlarm Mask ALM-AIS, ALM-YEL and ALM-LOS are defined for t1 port; whilst ALM-CTS, ALM-DSR and ALM-DCD are defined for data port.')
ncmCirErrClearanceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("ccb-DBKP-ALM-AIS-CTS", 1), ("ccb-DBKP-ALM-YEL-DSR", 2), ("ccb-DBKP-ALM-LOS-DCD", 4), ("ccb-DBKP-ALM-LOF", 8), ("ccb-DBKP-ALM-UAS", 16), ("ccb-DBKP-ALM-SES", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCirErrClearanceMask.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCirErrClearanceMask.setDescription('The variable indicates the bitmap to setup the mask for circuit error clearance of the dial-backup; ncmAlarm Mask ALM-AIS, ALM-YEL and ALM-LOS are defined for t1 port; whilst ALM-CTS, ALM-DSR and ALM-DCD are defined for data port.')
ncmDialBkUpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDialBkUpTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDialBkUpTimeout.setDescription('The variable indicates the dial-backup timeout.')
ncmDialBkUpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDialBkUpAction.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDialBkUpAction.setDescription('The object send the corresponding acp command to execute the dial-backup set action.')
ncmDialBkUpSetupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44))).clone(namedValues=NamedValues(("ccb-BUILD-SUCCESS", 1), ("ccb-BUILD-NO-PORT-BW", 2), ("ccb-BUILD-CKT-EXIST", 3), ("ccb-BUILD-INVALID-DATA", 4), ("ccb-BUILD-PROM-FAILURE", 5), ("ccb-BUILD-NO-BUS-BW", 6), ("ccb-BUILD-NO-PEER-CARD", 7), ("ccb-BUILD-PEER-NO-PORT-BW", 8), ("ccb-BUILD-PEER-CKT-EXIST", 9), ("ccb-BUILD-PEER-INVALID-DATA", 10), ("ccb-BUILD-PEER-PROM-FAILURE", 11), ("ccb-BUILD-PEER-NO-BUS-BW", 12), ("ccb-BUILD-CIRCDBASE-OVRFLOW", 13), ("ccb-BUILD-CKT-NOT-EXIST", 14), ("ccb-BUILD-PORT-SETUP-FAIL", 15), ("ccb-BUILD-CKT-INACTIVE", 16), ("ccb-BUILD-NOT-ACT-CIRC", 17), ("ccb-BUILD-SCHECK-OK", 21), ("ccb-BUILD-SCHECK-BAD-CARD", 22), ("ccb-BUILD-SCHECK-BAD-CTYPE", 23), ("ccb-BUILD-SCHECK-BAD-CMODE", 24), ("ccb-BUILD-SCHECK-DIFF-ncmSHELF", 25), ("ccb-BUILD-SCHECK-DIFF-TSNUM", 26), ("ccb-BUILD-SCHECK-BAD-BUS", 27), ("ccb-BUILD-DCHECK-OK", 31), ("ccb-BUILD-DCHECK-MISSCARD", 32), ("ccb-BUILD-DCHECK-DIFFCARD", 33), ("ccb-BUILD-DCHECK-BUS-TS-CNFL", 34), ("ccb-BUILD-DCHECK-BUS-DRV-CNFL", 35), ("ccb-BUILD-DCHECK-PORT-CNFL", 36), ("ccb-BUILD-DBKCHECK-NO-PRICIRC", 41), ("ccb-BUILD-DBKCHECK-NO-BKPCIRC", 42), ("ccb-BUILD-DBKCHECK-NO-SHRPORT", 43), ("ccb-BUILD-DBKCHECK-NO-PRIPORT", 44)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDialBkUpSetupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDialBkUpSetupStatus.setDescription('This variable indicates the setup status as the result of set dial-backup parameters.')
ncmClearCircuitGrpTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1039), )
if mibBuilder.loadTexts: ncmClearCircuitGrpTable.setStatus('mandatory')
ncmClearCircuitGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1039, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmClearCircuitGrpNIDIndex"))
if mibBuilder.loadTexts: ncmClearCircuitGrpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmClearCircuitGrpEntry.setDescription('An entry in the circuitBuilder Table for clearing any circuit group.')
ncmClearCircuitGrpNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1039, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmClearCircuitGrpNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmClearCircuitGrpNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmClearCircuitGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1039, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ccb-CDEL-ALL", 1), ("ccb-CDEL-INACTIVE", 2), ("ccb-CDEL-CARD-CKT", 3), ("ccb-CDEL-PORT-CKT", 4), ("ccb-CDEL-BUS-CKT", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmClearCircuitGrpName.setStatus('mandatory')
if mibBuilder.loadTexts: ncmClearCircuitGrpName.setDescription('This object allocates the circuit group site for the request.')
ncmClearCircuitGrpSite = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1039, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmClearCircuitGrpSite.setStatus('mandatory')
if mibBuilder.loadTexts: ncmClearCircuitGrpSite.setDescription('This object allocates the shelf and slot combination of the port for the request.')
ncmClearCircuitCardEquipID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1039, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 112, 113, 116, 96))).clone(namedValues=NamedValues(("card-SIGMA-VCU", 77), ("ace-FW-E1", 80), ("ace-FW-T1", 81), ("ace-FW-QUAD-T1", 82), ("ace-FW-QUAD-E1", 83), ("ace-Reserved", 84), ("tabs-IMUX", 85), ("ace-FW-DUAL-T1", 86), ("ace-FW-DUAL-E1", 87), ("fw-DS3-CDSU", 88), ("fw-DS3-CDSU-CHANNEL", 89), ("ace-FW-ISDN-T1", 112), ("ace-FW-ISDN-E1", 113), ("fw-DS3-DUDS3", 116), ("fw-NCM", 96)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmClearCircuitCardEquipID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmClearCircuitCardEquipID.setDescription('This object allocate the card equipment id for the request.')
ncmClearCircuitPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1039, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ccb-NET-PORT-1", 1), ("ccb-NET-PORT-2", 2), ("ccb-NET-PORT-3", 3), ("ccb-NET-PORT-4", 4), ("ccb-DATA-PORT-1", 5), ("ccb-DATA-PORT-2", 6), ("ccb-TAC-NET-PORT", 7), ("ccb-TAC-EQP-PORT", 8), ("ccb-UNKNOWN-PORT", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmClearCircuitPortID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmClearCircuitPortID.setDescription('This object allocates the port identity for the request.')
ncmClearCircuitAction = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1039, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmClearCircuitAction.setStatus('mandatory')
if mibBuilder.loadTexts: ncmClearCircuitAction.setDescription('The object send the corresponding acp command to execute the clear circuit action.')
ncmListGetMsgNumTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040), )
if mibBuilder.loadTexts: ncmListGetMsgNumTable.setStatus('mandatory')
ncmListGetMsgNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmListMsgNumNIDIndex"))
if mibBuilder.loadTexts: ncmListGetMsgNumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmListGetMsgNumEntry.setDescription('An entry to retrieve circuit list in a particular page of the central ncmCircuit Build ncmDatabase.')
ncmListMsgNumNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListMsgNumNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmListMsgNumNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmListMsgNumCircuitGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ccb-CLIST-ALL", 1), ("ccb-CLIST-ACTIVE", 2), ("ccb-CLIST-PORT-CKT", 3), ("ccb-CLIST-CARD-CKT", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmListMsgNumCircuitGroup.setStatus('mandatory')
if mibBuilder.loadTexts: ncmListMsgNumCircuitGroup.setDescription('ccb-CLIST-ALL: List all circuits in the central circuit database. ccb-CLIST-ACTIVE: List all active circuits in the circuit database. ccb-CLIST-PORT-CKT: List circuits associated with a port. ccb-CLIST-CARD-CKT: List circuits associated with a card. The variable indicates the constant for request to list which circuit group should be listed from the response.')
ncmListMsgNumPageNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmListMsgNumPageNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmListMsgNumPageNumber.setDescription('The object allocates the page number for the retrival of ncmCircuit List request.')
ncmListMsgNumCardSite = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmListMsgNumCardSite.setStatus('mandatory')
if mibBuilder.loadTexts: ncmListMsgNumCardSite.setDescription('This object allocates the shelf and slot combination for the retrival of ncmCircuit List request.')
ncmListMsgNumCardEquipID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 112, 113, 116, 96))).clone(namedValues=NamedValues(("card-SIGMA-VCU", 77), ("ace-FW-E1", 80), ("ace-FW-T1", 81), ("ace-FW-QUAD-T1", 82), ("ace-FW-QUAD-E1", 83), ("ace-Reserved", 84), ("tabs-IMUX", 85), ("ace-FW-DUAL-T1", 86), ("ace-FW-DUAL-E1", 87), ("fw-DS3-CDSU", 88), ("fw-DS3-CDSU-CHANNEL", 89), ("ace-FW-ISDN-T1", 112), ("ace-FW-ISDN-E1", 113), ("fw-DS3-DUDS3", 116), ("fw-NCM", 96)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmListMsgNumCardEquipID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmListMsgNumCardEquipID.setDescription('This object defines the card equipment id of the target.')
ncmListMsgNumPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ccb-NET-PORT-1", 1), ("ccb-NET-PORT-2", 2), ("ccb-NET-PORT-3", 3), ("ccb-NET-PORT-4", 4), ("ccb-DATA-PORT-1", 5), ("ccb-DATA-PORT-2", 6), ("ccb-TAC-NET-PORT", 7), ("ccb-TAC-EQP-PORT", 8), ("ccb-UNKNOWN-PORT", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmListMsgNumPortID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmListMsgNumPortID.setDescription('This object defines the port identity of the interface.')
ncmNumofGetListMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNumofGetListMessage.setStatus('mandatory')
if mibBuilder.loadTexts: ncmNumofGetListMessage.setDescription('This variable indicates number of circuits listed in this message.')
ncmTotalCircDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmTotalCircDatabase.setStatus('mandatory')
if mibBuilder.loadTexts: ncmTotalCircDatabase.setDescription('This variable indicates total number of circuits in circuit database.')
ncmCircListccbTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041), )
if mibBuilder.loadTexts: ncmCircListccbTable.setStatus('mandatory')
ncmCircListccbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmListccbNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmNumofCircListMessage"))
if mibBuilder.loadTexts: ncmCircListccbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCircListccbEntry.setDescription('An entry to retrieve the specified circuit detail information as listed out in the Get List Message Number MIB Group.')
ncmListccbNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListccbNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmListccbNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmNumofCircListMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNumofCircListMessage.setStatus('mandatory')
if mibBuilder.loadTexts: ncmNumofCircListMessage.setDescription('This variable indicates the number of circuit listed in this page.')
ncmListccbCircName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListccbCircName.setStatus('mandatory')
if mibBuilder.loadTexts: ncmListccbCircName.setDescription('This variable indicates the circuit name response from the circuitbuilder as the circuit identity of the object.')
ncmListccbCircPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ccb-CPRIO-LOW", 1), ("ccb-CPRIO-NRML", 2), ("ccb-CPRIO-HIGH", 3), ("ccb-CPRIO-CRIT", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListccbCircPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ncmListccbCircPriority.setDescription('This variable indicates circuit priority of this circuit.')
ncmListccbCircType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ccb-CTYPE-RESERVED", 1), ("ccb-CTYPE-PERMANENT", 2), ("ccb-CTYPE-SWITCHED", 3), ("ccb-CTYPE-PRIMARY", 4), ("ccb-CTYPE-BACKUP", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListccbCircType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmListccbCircType.setDescription('This variable indicates circuit type of this circuit.')
ncmListccbCircMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ccb-CMODE-NX56-DATA", 1), ("ccb-CMODE-NX64-DATA", 2), ("ccb-CMODE-SIG-VOICE", 3), ("ccb-CMODE-NSIG-VOICE", 4), ("ccb-CMODE-RESERVED", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListccbCircMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmListccbCircMode.setDescription('This variable indicates circuit mode of this circuit.')
ncmSrcPortSite = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSrcPortSite.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSrcPortSite.setDescription('This variable indicates the shelf and slot combination of the source port.')
ncmSrcCardEquipID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 112, 113, 116, 96))).clone(namedValues=NamedValues(("card-SIGMA-VCU", 77), ("ace-FW-E1", 80), ("ace-FW-T1", 81), ("ace-FW-QUAD-T1", 82), ("ace-FW-QUAD-E1", 83), ("ace-Reserved", 84), ("tabs-IMUX", 85), ("ace-FW-DUAL-T1", 86), ("ace-FW-DUAL-E1", 87), ("fw-DS3-CDSU", 88), ("fw-DS3-CDSU-CHANNEL", 89), ("ace-FW-ISDN-T1", 112), ("ace-FW-ISDN-E1", 113), ("fw-DS3-DUDS3", 116), ("fw-NCM", 96)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSrcCardEquipID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSrcCardEquipID.setDescription('This variable indicates the card equipment id of the source port.')
ncmSrcPortIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ccb-NET-PORT-1", 1), ("ccb-NET-PORT-2", 2), ("ccb-NET-PORT-3", 3), ("ccb-NET-PORT-4", 4), ("ccb-DATA-PORT-1", 5), ("ccb-DATA-PORT-2", 6), ("ccb-TAC-NET-PORT", 7), ("ccb-TAC-EQP-PORT", 8), ("cb-UNKNOWN-PORT", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSrcPortIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSrcPortIdentifier.setDescription('This variable indicates the port identity of the source port.')
ncmSrcTimeslotmap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSrcTimeslotmap.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSrcTimeslotmap.setDescription('The variable indicates the timeslot map allocated for the source port.')
ncmDstPortSite = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDstPortSite.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDstPortSite.setDescription('This variable indicates the shelf and slot combination of the destination port.')
ncmDstCardEquipID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 112, 113, 116, 96))).clone(namedValues=NamedValues(("card-SIGMA-VCU", 77), ("ace-FW-E1", 80), ("ace-FW-T1", 81), ("ace-FW-QUAD-T1", 82), ("ace-FW-QUAD-E1", 83), ("ace-Reserved", 84), ("tabs-IMUX", 85), ("ace-FW-DUAL-T1", 86), ("ace-FW-DUAL-E1", 87), ("fw-DS3-CDSU", 88), ("fw-DS3-CDSU-CHANNEL", 89), ("ace-FW-ISDN-T1", 112), ("ace-FW-ISDN-E1", 113), ("fw-DS3-DUDS3", 116), ("fw-NCM", 96)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDstCardEquipID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDstCardEquipID.setDescription('This variable indicates the card equipment id of the destination port.')
ncmDstPortIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ccb-NET-PORT-1", 1), ("ccb-NET-PORT-2", 2), ("ccb-NET-PORT-3", 3), ("ccb-NET-PORT-4", 4), ("ccb-DATA-PORT-1", 5), ("ccb-DATA-PORT-2", 6), ("ccb-TAC-NET-PORT", 7), ("ccb-TAC-EQP-PORT", 8), ("cb-UNKNOWN-PORT", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDstPortIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDstPortIdentifier.setDescription('This variable indicates the port identity of the destination port.')
ncmDstTimeslotmap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDstTimeslotmap.setStatus('mandatory')
if mibBuilder.loadTexts: ncmDstTimeslotmap.setDescription('The variable indicates the timeslot map allocated for the destination port.')
ncmListccbBackPlaneBusID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ccb-BKPL-BUS-A1", 1), ("ccb-BKPL-BUS-A2", 2), ("ccb-BKPL-BUS-A3", 3), ("ccb-BKPL-BUS-A4", 4), ("ccb-BKPL-BUS-A5", 5), ("ccb-BKPL-BUS-A6", 6), ("ccb-BKPL-BUS-A7", 7), ("ccb-BKPL-BUS-A8", 8), ("ccb-BKPL-BUS-B", 9), ("ccb-BKPL-BUS-C", 10), ("ccb-BKPL-BUS-NONE", 11), ("ccb-BKPL-BUS-AUTO", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListccbBackPlaneBusID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmListccbBackPlaneBusID.setDescription('The variable indicates the backplane bus ID of the device.')
ncmListccbCircStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ccb-CSTAT-SPARE", 1), ("ccb-CSTAT-EDITING", 2), ("ccb-CSTAT-ACTIVE", 3), ("ccb-CSTAT-INACTIVE", 4), ("ccb-CSTAT-PREEMPTED", 5), ("ccb-CSTAT-BROKEN", 6), ("ccb-CSTAT-LINE-ERR", 7), ("ccb-CSTAT-BACKUPPED", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListccbCircStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmListccbCircStatus.setDescription('This variable indicates the status of the List circuit ccb.')
ncmEquipmentIDTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042), )
if mibBuilder.loadTexts: ncmEquipmentIDTable.setStatus('mandatory')
ncmEquipmentIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmEquipmentIDNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmEquipmentIDLineIndex"))
if mibBuilder.loadTexts: ncmEquipmentIDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmEquipmentIDEntry.setDescription('An entry in the Equipment ID table.')
ncmEquipmentIDNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmEquipmentIDNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmEquipmentIDNIDIndex.setDescription('This variable specifies the node id.')
ncmEquipmentIDLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmEquipmentIDLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmEquipmentIDLineIndex.setDescription('This variable specifies the line index value.')
ncmFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ncmFirmwareVersion.setDescription('The variable specifies the firmware version.')
ncmFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: ncmFirmwareRevision.setDescription('The variable specifies the firmware revision.')
ncmEquipmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmEquipmentType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmEquipmentType.setDescription('The variable specifies the Equipment Type.')
ncmHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ncmHardwareVersion.setDescription('The variable specifies the hardware version.')
ncmHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmHardwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: ncmHardwareRevision.setDescription('The variable specifies the hardwareware revision.')
ncmLocationID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLocationID.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLocationID.setDescription('The variable specifies the Location ID.')
ncmE1AlarmThresholdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043), )
if mibBuilder.loadTexts: ncmE1AlarmThresholdConfigTable.setStatus('mandatory')
ncmE1AlarmThresholdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1AlarmThresholdConfigNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1AlarmThresholdConfigIndex"))
if mibBuilder.loadTexts: ncmE1AlarmThresholdConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1AlarmThresholdConfigEntry.setDescription('An entry in the E1 ncmAlarm Threshold Configure table.')
ncmE1AlarmThresholdConfigNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1AlarmThresholdConfigNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1AlarmThresholdConfigNIDIndex.setDescription('The object specifies the node id of the node.')
ncmE1AlarmThresholdConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1AlarmThresholdConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1AlarmThresholdConfigIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmE1LOFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1LOFThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1LOFThreshold.setDescription('This variable specifies the LOF Threshold count in secs.')
ncmE1LOFTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1LOFTimeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1LOFTimeInterval.setDescription('This variable specifies the LOF Time Interval in secs.')
ncmE1LOSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1LOSThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1LOSThreshold.setDescription('This variable specifies the LOS Threshold count in secs.')
ncmE1LOSTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1LOSTimeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1LOSTimeInterval.setDescription('This variable specifies the LOS Time Interval in secs.')
ncmE1RAIThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1RAIThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1RAIThreshold.setDescription('This variable specifies the RAI Threshold count in secs.')
ncmE1RAITimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1RAITimeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1RAITimeInterval.setDescription('This variable specifies the RAI Time Interval in secs.')
ncmE1AISThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1AISThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1AISThreshold.setDescription('This variable specifies the AIS Threshold count in secs.')
ncmE1AISTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1AISTimeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1AISTimeInterval.setDescription('This variable specifies the AIS Time Interval in secs.')
ncmE1BPVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1BPVThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1BPVThreshold.setDescription('This variable specifies the BPV Threshold count in secs.')
ncmE1BPVTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1BPVTimeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1BPVTimeInterval.setDescription('This variable specifies the BPV Time Interval in secs.')
ncmE1ES15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1ES15MINThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1ES15MINThreshold.setDescription('This variable specifies the ES 15 minute Threshold count in secs.')
ncmE1ES24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1ES24HRThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1ES24HRThreshold.setDescription('This variable specifies the ES 24 hour Threshold count in secs.')
ncmE1SES15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1SES15MINThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1SES15MINThreshold.setDescription('This variable specifies the SES 15 minute Threshold count in secs.')
ncmE1SES24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1SES24HRThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1SES24HRThreshold.setDescription('This variable specifies the SES 24 hour Threshold count in secs.')
ncmCVP15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCVP15MINThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCVP15MINThreshold.setDescription('This variable specifies the CVP 15 minute Threshold count in secs.')
ncmCVP24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCVP24HRThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCVP24HRThreshold.setDescription('This variable specifies the CVP 24 hour Threshold count in secs.')
ncmCVL15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCVL15MINThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCVL15MINThreshold.setDescription('This variable specifies the CVL 15 minute Threshold count in secs.')
ncmCVL24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCVL24HRThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCVL24HRThreshold.setDescription('This variable specifies the CVL 24 hour Threshold count in secs.')
ncmESL15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmESL15MINThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmESL15MINThreshold.setDescription('This variable specifies the ESL 15 minute Threshold count in secs.')
ncmESL24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmESL24HRThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmESL24HRThreshold.setDescription('This variable specifies the CVL 24 hour Threshold count in secs.')
ncmSESL15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSESL15MINThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSESL15MINThreshold.setDescription('This variable specifies the SESL 15 minute Threshold count in secs.')
ncmSESL24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSESL24HRThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSESL24HRThreshold.setDescription('This variable specifies the SESL 24 hour Threshold count in secs.')
ncmUASP15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmUASP15MINThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmUASP15MINThreshold.setDescription('This variable specifies the UASP 15 minute Threshold count in secs.')
ncmUASP24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmUASP24HRThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmUASP24HRThreshold.setDescription('This variable specifies the UASP 24 hour Threshold count in secs.')
ncmE1AlarmThresholdStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044), )
if mibBuilder.loadTexts: ncmE1AlarmThresholdStatusTable.setStatus('mandatory')
ncmE1AlarmThresholdStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1AlarmThresholdStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1AlarmThresholdStatusIndex"))
if mibBuilder.loadTexts: ncmE1AlarmThresholdStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1AlarmThresholdStatusEntry.setDescription('An entry in the E1 ncmAlarm Threshold Status table.')
ncmE1AlarmThresholdStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1AlarmThresholdStatusNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1AlarmThresholdStatusNIDIndex.setDescription('The object specifies the node id of the node.')
ncmE1AlarmThresholdStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1AlarmThresholdStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmE1AlarmThresholdStatusIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmLOFExceededE1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOFExceededE1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLOFExceededE1.setDescription('This variable specifies if LOF exceeded or not.')
ncmLOSExceededE1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOSExceededE1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLOSExceededE1.setDescription('This variable specifies if LOS exceeded or not.')
ncmRAIExceededE1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmRAIExceededE1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmRAIExceededE1.setDescription('This variable specifies if RAI exceeded or not.')
ncmAISExceededE1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAISExceededE1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAISExceededE1.setDescription('This variable specifies if AIS exceeded or not.')
ncmBPVExceededE1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmBPVExceededE1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmBPVExceededE1.setDescription('This variable specifies if BPV exceeded or not.')
ncmES15MINExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmES15MINExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmES15MINExceeded.setDescription('This variable specifies if ES 15 minute exceeded or not.')
ncmES24HRExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmES24HRExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmES24HRExceeded.setDescription('This variable specifies if ES 24 Hour exceeded or not.')
ncmSES15MINExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSES15MINExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSES15MINExceeded.setDescription('This variable specifies if SES 15 minute exceeded or not.')
ncmSES24HRExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSES24HRExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSES24HRExceeded.setDescription('This variable specifies if SES 24 Hour exceeded or not.')
ncmCVP15MINExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCVP15MINExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCVP15MINExceeded.setDescription('This variable specifies if CVP 15 minute exceeded or not.')
ncmCVP24HRExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCVP24HRExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCVP24HRExceeded.setDescription('This variable specifies if CVP 24 Hour exceeded or not.')
ncmCVL15MINExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCVL15MINExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCVL15MINExceeded.setDescription('This variable specifies if CVL 15 minute exceeded or not.')
ncmCVL24HRExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCVL24HRExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCVL24HRExceeded.setDescription('This variable specifies if CVL 24 Hour exceeded or not.')
ncmESL15MINExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmESL15MINExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmESL15MINExceeded.setDescription('This variable specifies if ESL 15 minute exceeded or not.')
ncmESL24HRExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmESL24HRExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmESL24HRExceeded.setDescription('This variable specifies if ESL 24 Hour exceeded or not.')
ncmSESL15MINExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSESL15MINExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSESL15MINExceeded.setDescription('This variable specifies if SESL 15 minute exceeded or not.')
ncmSESL24HRExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSESL24HRExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSESL24HRExceeded.setDescription('This variable specifies if SESL 24 Hour exceeded or not.')
ncmUASP15MINExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmUASP15MINExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmUASP15MINExceeded.setDescription('This variable specifies if UASP 15 minute exceeded or not.')
ncmUASP24HRExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmUASP24HRExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmUASP24HRExceeded.setDescription('This variable specifies if UASP 24 Hour exceeded or not.')
ncmLOFThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOFThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLOFThresholdCount.setDescription('This variable specifies the LOF Threshold Count in seconds.')
ncmLOFTimeIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOFTimeIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLOFTimeIntervals.setDescription('This variable specifies the LOF Time Intervals in seconds.')
ncmLOSThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOSThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLOSThresholdCount.setDescription('This variable specifies the LOS Threshold Count in seconds.')
ncmLOSTimeIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOSTimeIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLOSTimeIntervals.setDescription('This variable specifies the LOS Time Intervals in seconds.')
ncmRAIThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmRAIThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmRAIThresholdCount.setDescription('This variable specifies the RAI Threshold Count in seconds.')
ncmRAITimeIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmRAITimeIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: ncmRAITimeIntervals.setDescription('This variable specifies the RAI Time Intervals in seconds.')
ncmAISThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAISThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAISThresholdCount.setDescription('This variable specifies the AIS Threshold Count in seconds.')
ncmAISTimeIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAISTimeIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAISTimeIntervals.setDescription('This variable specifies the AIS Time Intervals in seconds.')
ncmBPVThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmBPVThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmBPVThresholdCount.setDescription('This variable specifies the BPV Threshold Count in seconds.')
ncmBPVTimeIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmBPVTimeIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: ncmBPVTimeIntervals.setDescription('This variable specifies the BPV Time Intervals in seconds.')
ncmES15MINThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmES15MINThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmES15MINThresholdCount.setDescription('This variable specifies the ES 15MIN Threshold Count in seconds.')
ncmES24HRThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmES24HRThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmES24HRThresholdCount.setDescription('This variable specifies the ES 24HR Threshold Count in seconds.')
ncmSES15MINThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSES15MINThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSES15MINThresholdCount.setDescription('This variable specifies the SES 15MIN Threshold Count in seconds.')
ncmSES24HRThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSES24HRThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSES24HRThresholdCount.setDescription('This variable specifies the SES 24 HR Threshold Count in seconds.')
ncmCVP15MINThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCVP15MINThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCVP15MINThresholdCount.setDescription('This variable specifies the CVP 15MIN Threshold Count in seconds.')
ncmCVP24HRThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCVP24HRThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCVP24HRThresholdCount.setDescription('This variable specifies the CVP 24 HR Threshold Count in seconds.')
ncmCVL15MINThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCVL15MINThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCVL15MINThresholdCount.setDescription('This variable specifies the CVL 15MIN Threshold Count in seconds.')
ncmCVL24HRThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCVL24HRThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmCVL24HRThresholdCount.setDescription('This variable specifies the CVL 24 HR Threshold Count in seconds.')
ncmESL15MINThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmESL15MINThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmESL15MINThresholdCount.setDescription('This variable specifies the ESL 15MIN Threshold Count in seconds.')
ncmESL24HRThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmESL24HRThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmESL24HRThresholdCount.setDescription('This variable specifies the ESL 24 HR Threshold Count in seconds.')
ncmSESL15MINThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSESL15MINThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSESL15MINThresholdCount.setDescription('This variable specifies the SESL 15MIN Threshold Count in seconds.')
ncmSESL24HRThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSESL24HRThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSESL24HRThresholdCount.setDescription('This variable specifies the SESL 24 HR Threshold Count in seconds.')
ncmUASP15MINThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmUASP15MINThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmUASP15MINThresholdCount.setDescription('This variable specifies the UASP 15MIN Threshold Count in seconds.')
ncmUASP24HRThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmUASP24HRThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmUASP24HRThresholdCount.setDescription('This variable specifies the UASP 24 HR Threshold Count in seconds.')
ncmAlarmThresholdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045), )
if mibBuilder.loadTexts: ncmAlarmThresholdConfigTable.setStatus('mandatory')
ncmAlarmThresholdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmAlarmThresholdConfigNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmAlarmThresholdConfigIndex"))
if mibBuilder.loadTexts: ncmAlarmThresholdConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlarmThresholdConfigEntry.setDescription('An entry in the ncmAlarm Threshold Configure table.')
ncmAlarmThresholdConfigNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAlarmThresholdConfigNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlarmThresholdConfigNIDIndex.setDescription('The object specifies the node id of the node.')
ncmAlarmThresholdConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAlarmThresholdConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlarmThresholdConfigIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmLOFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmLOFThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLOFThreshold.setDescription('This variable the LOF Threshold count is seconds (1-86,400).')
ncmLOFTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmLOFTimeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLOFTimeInterval.setDescription('This variable specifies the LOF Time Interval is seconds (1-86,400).')
ncmLOSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmLOSThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLOSThreshold.setDescription('This variable specifies the LOS Threshold count is seconds (1-86,400).')
ncmLOSTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmLOSTimeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLOSTimeInterval.setDescription('This variable specifies the LOS Time Interval is seconds (1-86,400).')
ncmRAIThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmRAIThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmRAIThreshold.setDescription('This variable specifies the RAI Threshold count is seconds (1-86,400).')
ncmRAITimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmRAITimeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmRAITimeInterval.setDescription('This variable specifies the RAI Time Interval is seconds (1-86,400).')
ncmAISThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAISThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAISThreshold.setDescription('This variable specifies the AIS Threshold count is seconds (1-86,400).')
ncmAISTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAISTimeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAISTimeInterval.setDescription('This variable specifies the AIS Time Interval is seconds (1-86,400).')
ncmBPVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmBPVThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmBPVThreshold.setDescription('This variable specifies the BPV Threshold count is seconds (1-86,400).')
ncmBPVTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmBPVTimeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmBPVTimeInterval.setDescription('This variable specifies the BPV Time Interval is seconds (1-86,400).')
ncmES15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmES15MINThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmES15MINThreshold.setDescription('This variable specifies the ES 15 minute Threshold count is seconds (1-86,400).')
ncmES24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmES24HRThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmES24HRThreshold.setDescription('This variable specifies the ES 24 hour Threshold count in seconds (1-86,400).')
ncmSES15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSES15MINThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSES15MINThreshold.setDescription('This variable specifies the SES 15 minute Threshold count is seconds (1-86,400).')
ncmSES24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSES24HRThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSES24HRThreshold.setDescription('This variable specifies the SES 24 hour Threshold count in seconds (1-86,400).')
ncmAlarmThresholdStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046), )
if mibBuilder.loadTexts: ncmAlarmThresholdStatusTable.setStatus('mandatory')
ncmAlarmThresholdStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmAlarmThresholdStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmAlarmThresholdStatusIndex"))
if mibBuilder.loadTexts: ncmAlarmThresholdStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlarmThresholdStatusEntry.setDescription('An entry in the ncmAlarm Threshold Status table.')
ncmAlarmThresholdStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAlarmThresholdStatusNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlarmThresholdStatusNIDIndex.setDescription('The object specifies the node id of the node.')
ncmAlarmThresholdStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAlarmThresholdStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAlarmThresholdStatusIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmLOFExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOFExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLOFExceeded.setDescription('This variable specifies if LOF exceeded or not.')
ncmLOSExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOSExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLOSExceeded.setDescription('This variable specifies if LOS exceeded or not.')
ncmAISExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAISExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAISExceeded.setDescription('This variable specifies if AIS exceeded or not.')
ncmRAIExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmRAIExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmRAIExceeded.setDescription('This variable specifies if RAI exceeded or not.')
ncmBPVExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmBPVExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmBPVExceeded.setDescription('This variable specifies if BPV exceeded or not.')
ncmESExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmESExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmESExceeded.setDescription('This variable specifies if ES exceeded or not.')
ncmSESExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSESExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSESExceeded.setDescription('This variable specifies if SES exceeded or not.')
ncmLOFThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOFThresholdCountst.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLOFThresholdCountst.setDescription('This variable specifies the LOF Threshold Count in seconds.')
ncmLOFTimeIntervalst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOFTimeIntervalst.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLOFTimeIntervalst.setDescription('This variable specifies the LOF Time Intervals in seconds.')
ncmLOSThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOSThresholdCountst.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLOSThresholdCountst.setDescription('This variable specifies the LOS Threshold Count in seconds.')
ncmLOSTimeIntervalst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOSTimeIntervalst.setStatus('mandatory')
if mibBuilder.loadTexts: ncmLOSTimeIntervalst.setDescription('This variable specifies the LOS Time Intervals in seconds.')
ncmRAIThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmRAIThresholdCountst.setStatus('mandatory')
if mibBuilder.loadTexts: ncmRAIThresholdCountst.setDescription('This variable specifies the RAI Threshold Count in seconds.')
ncmRAITimeIntervalst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmRAITimeIntervalst.setStatus('mandatory')
if mibBuilder.loadTexts: ncmRAITimeIntervalst.setDescription('This variable specifies the RAI Time Intervals in seconds.')
ncmAISThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAISThresholdCountst.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAISThresholdCountst.setDescription('This variable specifies the AIS Threshold Count in seconds.')
ncmAISTimeIntervalst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAISTimeIntervalst.setStatus('mandatory')
if mibBuilder.loadTexts: ncmAISTimeIntervalst.setDescription('This variable specifies the AIS Time Intervals in seconds.')
ncmBPVThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmBPVThresholdCountst.setStatus('mandatory')
if mibBuilder.loadTexts: ncmBPVThresholdCountst.setDescription('This variable specifies the BPV Threshold Count in seconds.')
ncmBPVTimeIntervalst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmBPVTimeIntervalst.setStatus('mandatory')
if mibBuilder.loadTexts: ncmBPVTimeIntervalst.setDescription('This variable specifies the BPV Time Intervals in seconds.')
ncmES15MINThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmES15MINThresholdCountst.setStatus('mandatory')
if mibBuilder.loadTexts: ncmES15MINThresholdCountst.setDescription('This variable specifies the ES 15 minute Threshold Count in seconds.')
ncmES24HRThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmES24HRThresholdCountst.setStatus('mandatory')
if mibBuilder.loadTexts: ncmES24HRThresholdCountst.setDescription('This variable specifies the ES 24 Hour Count in seconds.')
ncmSES15MINThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSES15MINThresholdCountst.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSES15MINThresholdCountst.setDescription('This variable specifies the SES 15 minute Threshold Count in seconds.')
ncmSES24HRThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSES24HRThresholdCountst.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSES24HRThresholdCountst.setDescription('This variable specifies the SES 24 hour Count in seconds.')
ncmResetAlmThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmResetAlmThresholdCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmResetAlmThresholdCount.setDescription('This object reset the alarm threshold counter.')
ncmShelfSyncSourceSegTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050), )
if mibBuilder.loadTexts: ncmShelfSyncSourceSegTable.setStatus('mandatory')
ncmShelfSyncSourceSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmShelfSyncSegNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmShelfSyncSourceSegIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmShelfSyncSourceSegNum"))
if mibBuilder.loadTexts: ncmShelfSyncSourceSegEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmShelfSyncSourceSegEntry.setDescription('An entry in the ncm Shelf Sync Source Segment Time table.')
ncmShelfSyncSegNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfSyncSegNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmShelfSyncSegNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmShelfSyncSourceSegIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfSyncSourceSegIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmShelfSyncSourceSegIndex.setDescription('This object is the identifier of an Interface on a managed device. If there is an ifEntry that is directly associated with this and only this DS1 interface, it should have the same value as ifIndex. Otherwise, the value exceeds ifNumber, and is a unique identifier following this rule: inside interfaces (e.g., equipment side) with even numbers and outside interfaces (e.g., network side) with odd numbers.')
ncmShelfSyncSourceSegNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfSyncSourceSegNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmShelfSyncSourceSegNum.setDescription('This variable indicates the segment index.')
ncmShelfTypeSeg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10, 52, 54))).clone(namedValues=NamedValues(("uninstalled", 1), ("dualLineShelf", 2), ("multiLineShelf", 3), ("nb-2200LineShelf", 4), ("nb-2200-4ILineShelf", 10), ("nb-2200QLineShelf", 52), ("nb-2200-4IQLineShelf", 54)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfTypeSeg.setStatus('mandatory')
if mibBuilder.loadTexts: ncmShelfTypeSeg.setDescription('This variable indicates the shelf hardware type.')
ncmRefBusSeg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("c", 1), ("a", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmRefBusSeg.setStatus('mandatory')
if mibBuilder.loadTexts: ncmRefBusSeg.setDescription('This variable indicates the reference bus of the segment.')
ncmSourceSegOneShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegOneShelfNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceSegOneShelfNum.setDescription('This variable indicates the source one shelf number of the segment.')
ncmSourceSegOneCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegOneCardNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceSegOneCardNum.setDescription('This variable indicates the source one card number of the segment.')
ncmSourceSegOneClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegOneClockRef.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceSegOneClockRef.setDescription('This variable indicates the source one clock reference of the segment.')
ncmSourceSegAutoRestore1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegAutoRestore1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceSegAutoRestore1.setDescription('This variable indicates the source one auto restore of the segment.')
ncmSourceSegTwoShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegTwoShelfNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceSegTwoShelfNum.setDescription('This variable indicates the source two shelf number of the segment.')
ncmSourceSegTwoCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegTwoCardNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceSegTwoCardNum.setDescription('This variable indicates the source two card number of the segment.')
ncmSourceSegTwoClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegTwoClockRef.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceSegTwoClockRef.setDescription('This variable indicates the source two clock reference of the segment.')
ncmSourceSegAutoRestore2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegAutoRestore2.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceSegAutoRestore2.setDescription('This variable indicates the source two auto restore of the segment.')
ncmSourceSegThreeShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegThreeShelfNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceSegThreeShelfNum.setDescription('This variable indicates the source three shelf number of the segment.')
ncmSourceSegThreeCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegThreeCardNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceSegThreeCardNum.setDescription('This variable indicates the source three card number of the segment.')
ncmSourceSegThreeClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegThreeClockRef.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceSegThreeClockRef.setDescription('This variable indicates the source three clock reference of the segment.')
ncmSourceSegAutoRestore3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegAutoRestore3.setStatus('mandatory')
if mibBuilder.loadTexts: ncmSourceSegAutoRestore3.setDescription('This variable indicates the source three auto restore of the segment.')
ncmShelfCurrentSyncSourceSeg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source1", 1), ("source2", 2), ("source3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmShelfCurrentSyncSourceSeg.setStatus('mandatory')
if mibBuilder.loadTexts: ncmShelfCurrentSyncSourceSeg.setDescription('This variable indicates the current sync source of the segment.')
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMGENERIC-MIB", ncmE1ResetPerfReg=ncmE1ResetPerfReg, ncmE1TotalFECPath=ncmE1TotalFECPath, ncmE1PortLatchedStatusTable=ncmE1PortLatchedStatusTable, ncmT1PortLOS=ncmT1PortLOS, ncmDataPortLineStatusCACB=ncmDataPortLineStatusCACB, ncmT1PrevTotalEndType=ncmT1PrevTotalEndType, ncmE1AlarmThresholdStatusTable=ncmE1AlarmThresholdStatusTable, ncmE1CurrentHDB3ORFEBEErrorCounts=ncmE1CurrentHDB3ORFEBEErrorCounts, ncmT1PreformanceSnapShotTable=ncmT1PreformanceSnapShotTable, ncmT1IntervalESsTypeA=ncmT1IntervalESsTypeA, ncmT1TotalLOFs=ncmT1TotalLOFs, ncmShelfInfoEntry=ncmShelfInfoEntry, ncmT1PrevTotalLOFC=ncmT1PrevTotalLOFC, ncmRAITimeIntervals=ncmRAITimeIntervals, ncmLOFThresholdCountst=ncmLOFThresholdCountst, ncmShelfSyncSourceSegIndex=ncmShelfSyncSourceSegIndex, ncmShelfSyncSegNIDIndex=ncmShelfSyncSegNIDIndex, ncmAISThreshold=ncmAISThreshold, ncmE1PortLOFA=ncmE1PortLOFA, ncmCardInfoEntry=ncmCardInfoEntry, ncmLOFTimeIntervalst=ncmLOFTimeIntervalst, ncmE1IntervalFECPath=ncmE1IntervalFECPath, ncmNodeAddress=ncmNodeAddress, ncmT1TotalUASs=ncmT1TotalUASs, ncmE1TimeSlot=ncmE1TimeSlot, ncmTotalCircDatabase=ncmTotalCircDatabase, ncmT1PrevTotalLOFs=ncmT1PrevTotalLOFs, ncmT1PortLLB=ncmT1PortLLB, ncmAlmCfgSrcAddr=ncmAlmCfgSrcAddr, ncmE1PortFramingSlip=ncmE1PortFramingSlip, ncmadvfdlLLBT1BOPMsg=ncmadvfdlLLBT1BOPMsg, ncmCardSyncSourceEntry=ncmCardSyncSourceEntry, ncmCardSerialNumber=ncmCardSerialNumber, ncmES15MINThreshold=ncmES15MINThreshold, ncmDataPortStatusTable=ncmDataPortStatusTable, ncmCircuitInfoSrcTimeslotmap=ncmCircuitInfoSrcTimeslotmap, ncmEquipmentIDEntry=ncmEquipmentIDEntry, ncmE1CurrentESsLine=ncmE1CurrentESsLine, ncmIDCimType=ncmIDCimType, ncmE1CurrentFECLine=ncmE1CurrentFECLine, ncmT1TotalEndType=ncmT1TotalEndType, ncmNumofGetListMessage=ncmNumofGetListMessage, ncmCardSourceThreeClockRef=ncmCardSourceThreeClockRef, ncmAlmCfgE1T1Port3EnableAlmRpt=ncmAlmCfgE1T1Port3EnableAlmRpt, ncmDataPortConfigNIDIndex=ncmDataPortConfigNIDIndex, ncmT1LatchedStatusLOS=ncmT1LatchedStatusLOS, ncmE1CRC4Status=ncmE1CRC4Status, ncmT1CurrentSASs=ncmT1CurrentSASs, ncmE1CurrentNIDIndex=ncmE1CurrentNIDIndex, ncmT1PrevTotalLOSs=ncmT1PrevTotalLOSs, ncmE1TotalBBE=ncmE1TotalBBE, ncmE1BERExceeded=ncmE1BERExceeded, ncmE1TotalCVLine=ncmE1TotalCVLine, ncmE1UASThreshold=ncmE1UASThreshold, ncmBPVThresholdCount=ncmBPVThresholdCount, ncmLocationID=ncmLocationID, ncmT1CurrentSESs=ncmT1CurrentSESs, ncmPrevAlarmMsgTimeStampSec=ncmPrevAlarmMsgTimeStampSec, ncmCircListccbEntry=ncmCircListccbEntry, ncmT1IntervalFrameErr=ncmT1IntervalFrameErr, ncmE1PortLOC=ncmE1PortLOC, ncmT1TotalESsTypeA=ncmT1TotalESsTypeA, ncmT1CurrentUASs=ncmT1CurrentUASs, ncmCirDstPortErrsetupMask=ncmCirDstPortErrsetupMask, ncmE1PrevTotalLOFSs=ncmE1PrevTotalLOFSs, ncmNodeCurrAddress=ncmNodeCurrAddress, ncmCardSourceTwoClockRef=ncmCardSourceTwoClockRef, ncmT1PortPLB=ncmT1PortPLB, ncmTestPatternTable=ncmTestPatternTable, ncmT1IntervalTable=ncmT1IntervalTable, ncmDataPortStatusLineLOS=ncmDataPortStatusLineLOS, ncmCVL24HRExceeded=ncmCVL24HRExceeded, ncmT1ThresholdUASCount=ncmT1ThresholdUASCount, ncmCircuitInfoAssoCircName=ncmCircuitInfoAssoCircName, ncmT1PortLOF=ncmT1PortLOF, ncmE1PortLatchedStatusIndex=ncmE1PortLatchedStatusIndex, ncmPrevAlarmMsgNIDIndex=ncmPrevAlarmMsgNIDIndex, ncmE1CurrentBBE=ncmE1CurrentBBE, ncmPortTimeslotAllocEntry=ncmPortTimeslotAllocEntry, ncmEquipmentType=ncmEquipmentType, ncmE1PortTestPattern=ncmE1PortTestPattern, ncmListccbCircType=ncmListccbCircType, ncmAlarmThresholdStatusNIDIndex=ncmAlarmThresholdStatusNIDIndex, ncmClearCircuitPortID=ncmClearCircuitPortID, ncmBPVThreshold=ncmBPVThreshold, ncmESL24HRThreshold=ncmESL24HRThreshold, ncmUASP15MINThreshold=ncmUASP15MINThreshold, ncmE1IntervalFECLine=ncmE1IntervalFECLine, ncmDataPortStatusLineCDCC=ncmDataPortStatusLineCDCC, ncmE1CRCExceeded=ncmE1CRCExceeded, ncmClearCircuitGrpSite=ncmClearCircuitGrpSite, ncmSourceOneCardNum=ncmSourceOneCardNum, ncmT1ThresholdStatusEndType=ncmT1ThresholdStatusEndType, ncmAlmCfgShelf=ncmAlmCfgShelf, ncmAlarmThresholdConfigEntry=ncmAlarmThresholdConfigEntry, ncmAutoRestore2=ncmAutoRestore2, ncmT1PerfCountCurFrameErrCnt=ncmT1PerfCountCurFrameErrCnt, ncmBPVTimeIntervals=ncmBPVTimeIntervals, ncmShelfHardware=ncmShelfHardware, ncmCVP24HRThresholdCount=ncmCVP24HRThresholdCount, ncmDataPortConfigLineIndicate=ncmDataPortConfigLineIndicate, ncmUASP15MINExceeded=ncmUASP15MINExceeded, ncmCardInfoTable=ncmCardInfoTable, ncmE1PortStatusNIDIndex=ncmE1PortStatusNIDIndex, ncmT1DensityPattern=ncmT1DensityPattern, ncmE1PortStatusTable=ncmE1PortStatusTable, ncmCircuitInfoAction=ncmCircuitInfoAction, ncmT1TotalLOSs=ncmT1TotalLOSs, ncmClearCircuitGrpTable=ncmClearCircuitGrpTable, ncmE1PortLatchedStatusEntry=ncmE1PortLatchedStatusEntry, ncmAddEditActDeactCircuitStatus=ncmAddEditActDeactCircuitStatus, ncmE1PerformanceSnapShotEntry=ncmE1PerformanceSnapShotEntry, ncmAlmCfgDataPort2EnableAlmRpt=ncmAlmCfgDataPort2EnableAlmRpt, ncmAlmCfgE1T1Port1EnableAlmRpt=ncmAlmCfgE1T1Port1EnableAlmRpt, ncmSourceThreeCardNum=ncmSourceThreeCardNum, ncmAISTimeIntervals=ncmAISTimeIntervals, ncmT1BERExceeded=ncmT1BERExceeded, ncmCircuitInfoDstTimeslotmap=ncmCircuitInfoDstTimeslotmap, ncmCimType=ncmCimType, ncmT1ThresholdStatusNIDIndex=ncmT1ThresholdStatusNIDIndex, ncmE1TotalASs=ncmE1TotalASs, ncmTestPatternEntry=ncmTestPatternEntry, ncmSES24HRExceeded=ncmSES24HRExceeded, ncmNodeInfoTable=ncmNodeInfoTable, ncmT1TotalSESs=ncmT1TotalSESs, ncmadvfdlMode=ncmadvfdlMode, ncmT1EnableRepeaterLpbkTimeout=ncmT1EnableRepeaterLpbkTimeout, ncmES24HRThresholdCount=ncmES24HRThresholdCount, ncmE1IntervalUASs=ncmE1IntervalUASs, ncmT1PerfCountCurBPVErrCnt=ncmT1PerfCountCurBPVErrCnt, ncmT1PerfCountIndex=ncmT1PerfCountIndex, ncmAdvancedT1ConfigTable=ncmAdvancedT1ConfigTable, ncmDialBkUpReqCircName=ncmDialBkUpReqCircName, ncmUASP24HRExceeded=ncmUASP24HRExceeded, ncmE1BPVThresholdst=ncmE1BPVThresholdst, ncmSourceSegOneCardNum=ncmSourceSegOneCardNum, ncmT1PrevTotalASs=ncmT1PrevTotalASs, ncmE1CurrentUASs=ncmE1CurrentUASs, ncmT1ThresholdCRCCount=ncmT1ThresholdCRCCount, ncmCircuitInfoBackPlaneBusID=ncmCircuitInfoBackPlaneBusID, ncmAdvancedT1LineIndex=ncmAdvancedT1LineIndex, ncmT1UserAlarmDeclareTime=ncmT1UserAlarmDeclareTime, ncmE1PortRAI=ncmE1PortRAI, ncmE1TotalAISSs=ncmE1TotalAISSs, ncmT1PortLOC=ncmT1PortLOC, ncmDate=ncmDate, ncmLOSTimeInterval=ncmLOSTimeInterval, ncmListccbNIDIndex=ncmListccbNIDIndex, ncmCircuitInfoDstPortID=ncmCircuitInfoDstPortID, ncmE1PortInbandISDNEnableDisable=ncmE1PortInbandISDNEnableDisable, ncmCircuitInfoSrcPortSite=ncmCircuitInfoSrcPortSite, ncmE1CurrentCVPath=ncmE1CurrentCVPath, ncmAdvancedT1NIDIndex=ncmAdvancedT1NIDIndex, ncmRemoteLB=ncmRemoteLB, ncmT1PrevTotalUASs=ncmT1PrevTotalUASs, ncmCVP15MINExceeded=ncmCVP15MINExceeded, ncmE1AlarmThresholdStatusEntry=ncmE1AlarmThresholdStatusEntry, ncmCircuitInfoCircType=ncmCircuitInfoCircType, ncmE1IntervalAISSs=ncmE1IntervalAISSs, ncmIDPromTable=ncmIDPromTable, ncmT1TimeSlotSelect=ncmT1TimeSlotSelect, ncmT1PrevTotalSEFs=ncmT1PrevTotalSEFs, ncmSourceSegAutoRestore2=ncmSourceSegAutoRestore2, ncmT1IntervalBESs=ncmT1IntervalBESs, ncmListCardsInShelf=ncmListCardsInShelf, ncmSourceSegAutoRestore1=ncmSourceSegAutoRestore1, ncmDataPortConfigServiceState=ncmDataPortConfigServiceState, ncmT1IntervalErrFreeSec=ncmT1IntervalErrFreeSec, ncmNodeInfoEntry=ncmNodeInfoEntry, ncmNodeCurrIndex=ncmNodeCurrIndex, ncmEnhanAlmCfgTable=ncmEnhanAlmCfgTable, ncmPrevAlarmMsgAlarmInstance=ncmPrevAlarmMsgAlarmInstance, ncmE1CurrentCRC4ErrorCounts=ncmE1CurrentCRC4ErrorCounts, ncmCircuitInfoDstCardEquipID=ncmCircuitInfoDstCardEquipID, ncmT1IntervalSEFs=ncmT1IntervalSEFs, ncmE1NumberOfValidInterval=ncmE1NumberOfValidInterval, ncmSourceThreeShelfNum=ncmSourceThreeShelfNum, ncmResetTestCounter=ncmResetTestCounter, ncmE1PortSendAIS=ncmE1PortSendAIS, ncmE1PrevTotalESs=ncmE1PrevTotalESs, ncmEnhanAlmCfgIndex=ncmEnhanAlmCfgIndex, ncmE1AlarmThresholdConfigTable=ncmE1AlarmThresholdConfigTable, ncmEnhanAlmCfgLinRestEvalPer=ncmEnhanAlmCfgLinRestEvalPer, ncmListccbCircMode=ncmListccbCircMode, ncmAISTimeIntervalst=ncmAISTimeIntervalst, ncmT1PrevTotalDegradedMin=ncmT1PrevTotalDegradedMin, ncmE1IntervalSESsLine=ncmE1IntervalSESsLine, ncmE1PortRFA=ncmE1PortRFA, ncmCVP15MINThresholdCount=ncmCVP15MINThresholdCount, ncmBPVExceeded=ncmBPVExceeded, ncmE1TotalFECLine=ncmE1TotalFECLine, ncmT1FDL=ncmT1FDL, ncmManufacturePartNumber=ncmManufacturePartNumber, ncmFirmwareRevision=ncmFirmwareRevision, ncmCardDate=ncmCardDate, ncmES24HRThresholdCountst=ncmES24HRThresholdCountst, ncmSetAllOnes=ncmSetAllOnes, ncmE1PrevTotalIndex=ncmE1PrevTotalIndex, ncmLOSThresholdCount=ncmLOSThresholdCount, ncmE1IntervalLOSSs=ncmE1IntervalLOSSs, ncmE1PrevTotalOOFSs=ncmE1PrevTotalOOFSs, ncmDataPortConfigMode=ncmDataPortConfigMode, ncmSES24HRThresholdCount=ncmSES24HRThresholdCount, ncmT1PrevTotalEntry=ncmT1PrevTotalEntry, ncmListMsgNumNIDIndex=ncmListMsgNumNIDIndex, ncmESL15MINThreshold=ncmESL15MINThreshold, ncmGetDetailCircuitStatus=ncmGetDetailCircuitStatus, ncmSES24HRThreshold=ncmSES24HRThreshold, ncmAlarmThresholdStatusEntry=ncmAlarmThresholdStatusEntry, ncmT1LatchedStatusAIS=ncmT1LatchedStatusAIS, ncmAISTimeInterval=ncmAISTimeInterval, ncmT1IntervalNumber=ncmT1IntervalNumber, ncmTime=ncmTime, ncmE1IntervalCVLine=ncmE1IntervalCVLine, ncmShelfTypeSeg=ncmShelfTypeSeg, ncmVendorCageCode=ncmVendorCageCode, ncmCallReferenceNumber=ncmCallReferenceNumber, ncmE1PrevTotalEntry=ncmE1PrevTotalEntry, ncmDialBkUpSetupStatus=ncmDialBkUpSetupStatus, ncmT1PrevTotalESsTypeA=ncmT1PrevTotalESsTypeA, ncmE1TotalCVPath=ncmE1TotalCVPath, ncmE1CurrentSESsLine=ncmE1CurrentSESsLine, ncmE1LOFTimeInterval=ncmE1LOFTimeInterval, ncmT1TotalESs=ncmT1TotalESs, ncmT1IntervalDegradMin=ncmT1IntervalDegradMin, ncmE1PrevTotalSEFSs=ncmE1PrevTotalSEFSs, ncmSrcTimeslotmap=ncmSrcTimeslotmap, ncmAlarmThresholdConfigNIDIndex=ncmAlarmThresholdConfigNIDIndex, ncmCardSourceTwoShelfNum=ncmCardSourceTwoShelfNum, ncmT1PerfCountCurCRC6Error=ncmT1PerfCountCurCRC6Error, ncmAISThresholdCount=ncmAISThresholdCount, ncmT1IntervalIndex=ncmT1IntervalIndex, ncmAlarmThresholdConfigTable=ncmAlarmThresholdConfigTable, ncmClearCardInfo=ncmClearCardInfo, ncmSourceSegAutoRestore3=ncmSourceSegAutoRestore3, ncmCURRENTAlarmMsgEntry=ncmCURRENTAlarmMsgEntry, ncmT1TotalSASs=ncmT1TotalSASs, ncmE1IntervalIndex=ncmE1IntervalIndex, ncmDstPortSite=ncmDstPortSite, ncmE1CurrentCVLine=ncmE1CurrentCVLine, ncmT1PrevTotalFrameErrCount=ncmT1PrevTotalFrameErrCount, ncmE1BlockErrorCounter=ncmE1BlockErrorCounter, ncmE1IntervalNIDIndex=ncmE1IntervalNIDIndex, ncmE1PrevTotalLOSSs=ncmE1PrevTotalLOSSs, ncmE1TotalEntry=ncmE1TotalEntry, ncmT1PortCRC6Error=ncmT1PortCRC6Error, ncmShelfSyncSourceSegTable=ncmShelfSyncSourceSegTable, ncmE1CurrentEntry=ncmE1CurrentEntry, ncmE1IntervalBBE=ncmE1IntervalBBE, ncmT1IntervalNIDIndex=ncmT1IntervalNIDIndex, ncmT1TotalOOFs=ncmT1TotalOOFs, ncmE1CodeViolationMode=ncmE1CodeViolationMode, ncmTstpattNIDIndex=ncmTstpattNIDIndex, ncmAISThresholdCountst=ncmAISThresholdCountst)
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMGENERIC-MIB", ncmSourceOneShelfNum=ncmSourceOneShelfNum, ncmE1CurrentTable=ncmE1CurrentTable, ncmT1SnapShotEndType=ncmT1SnapShotEndType, ncmE1PrevTotalCVLine=ncmE1PrevTotalCVLine, ncmClearCircuitCardEquipID=ncmClearCircuitCardEquipID, ncmT1CurrentEntry=ncmT1CurrentEntry, ncmE1PortStatusEntry=ncmE1PortStatusEntry, ncmCardCurrentSyncSource=ncmCardCurrentSyncSource, ncmT1CurrentDegradedMin=ncmT1CurrentDegradedMin, ncmT1CRC6=ncmT1CRC6, ncmT1State=ncmT1State, ncmT1CurrIntervalSec=ncmT1CurrIntervalSec, ncmT1LatchedStatusIndex=ncmT1LatchedStatusIndex, ncmT1LatchedStatusBPVThreExcd=ncmT1LatchedStatusBPVThreExcd, ncmEnhanAlmCfgCRCThreshold=ncmEnhanAlmCfgCRCThreshold, ncmT1PerformanceCountersEntry=ncmT1PerformanceCountersEntry, ncmE1UASExceeded=ncmE1UASExceeded, ncmT1TotalBESs=ncmT1TotalBESs, ncmNodeCurrTable=ncmNodeCurrTable, ncmStartStopTestPattern=ncmStartStopTestPattern, ncmHardwareRevision=ncmHardwareRevision, ncmLOSTimeIntervals=ncmLOSTimeIntervals, ncmLOSThreshold=ncmLOSThreshold, ncmBPVThresholdCountst=ncmBPVThresholdCountst, ncmDialBkUpInfoEntry=ncmDialBkUpInfoEntry, ncmSESL24HRExceeded=ncmSESL24HRExceeded, ncmT1ThresholdBPVCount=ncmT1ThresholdBPVCount, ncmIDPromEntry=ncmIDPromEntry, ncmT1ThresholdBPVExceeded=ncmT1ThresholdBPVExceeded, ncmCardSourceThreeShelfNum=ncmCardSourceThreeShelfNum, ncmE1PortLatchedRAI=ncmE1PortLatchedRAI, ncmT1CurrentAISs=ncmT1CurrentAISs, ncmPrevAlarmMsgIndex=ncmPrevAlarmMsgIndex, ncmSrcCardEquipID=ncmSrcCardEquipID, ncmE1PortLOS=ncmE1PortLOS, ncmT1ThresholdRestoreState=ncmT1ThresholdRestoreState, ncmDataPortStatusServiceState=ncmDataPortStatusServiceState, ncmALARMConfigTable=ncmALARMConfigTable, ncmadvfdlPLBT1BOPMsg=ncmadvfdlPLBT1BOPMsg, ncmLOFExceededE1=ncmLOFExceededE1, ncmE1PortFaseAlarm=ncmE1PortFaseAlarm, ncmE1PrevTotalFECLine=ncmE1PrevTotalFECLine, ncmSES15MINExceeded=ncmSES15MINExceeded, ncmAlarmThresholdStatusIndex=ncmAlarmThresholdStatusIndex, ncmE1PortServiceState=ncmE1PortServiceState, ncmE1TotalSESsLine=ncmE1TotalSESsLine, ncmAlarmConfigIndex=ncmAlarmConfigIndex, ncmE1IntervalLOFSs=ncmE1IntervalLOFSs, ncmBPVTimeIntervalst=ncmBPVTimeIntervalst, ncmCardAutoRestore1=ncmCardAutoRestore1, ncmE1PrevTotalNIDIndex=ncmE1PrevTotalNIDIndex, ncmE1PrevTotalESsLine=ncmE1PrevTotalESsLine, ncmSES15MINThresholdCountst=ncmSES15MINThresholdCountst, ncmCurrAlarmMsgNIDIndex=ncmCurrAlarmMsgNIDIndex, ncmT1PortFramingSlip=ncmT1PortFramingSlip, ncmListGetMsgNumTable=ncmListGetMsgNumTable, ncmT1InbandISDNEnableDisable=ncmT1InbandISDNEnableDisable, ncmT1PortRAI=ncmT1PortRAI, ncmT1IntervalCSSs=ncmT1IntervalCSSs, ncmE1CurrentASs=ncmE1CurrentASs, ncmT1PrevTotalErrorFreeSec=ncmT1PrevTotalErrorFreeSec, ncmCVP24HRThreshold=ncmCVP24HRThreshold, ncmE1PortConfigEntry=ncmE1PortConfigEntry, ncmT1IntervalASs=ncmT1IntervalASs, ncmRAITimeIntervalst=ncmRAITimeIntervalst, ncmE1ResetPerfCount=ncmE1ResetPerfCount, ncmE1PrevTotalSESsLine=ncmE1PrevTotalSESsLine, ncmT1ResetPerfCount=ncmT1ResetPerfCount, ncmT1PerfCountCurESFErrEvt=ncmT1PerfCountCurESFErrEvt, ncmSourceTwoClockRef=ncmSourceTwoClockRef, ncmE1PrevTotalSESs=ncmE1PrevTotalSESs, ncmPrevAlarmMsgObjType=ncmPrevAlarmMsgObjType, ncmT1PortSendRAI=ncmT1PortSendRAI, ncmT1PortStatusIndex=ncmT1PortStatusIndex, ncmE1PortCRC4Error=ncmE1PortCRC4Error, ncmShelfNumber=ncmShelfNumber, ncmE1CurrentEndType=ncmE1CurrentEndType, ncmPrimaryCircName=ncmPrimaryCircName, ncmT1TimeStampSec=ncmT1TimeStampSec, ncmE1PortLatchedAIS=ncmE1PortLatchedAIS, ncmCimSerialNumber=ncmCimSerialNumber, ncmDataPortStatusLineRLTM=ncmDataPortStatusLineRLTM, ncmAlmCfgCard=ncmAlmCfgCard, ncmAlmCfgDataPort1EnableAlmRpt=ncmAlmCfgDataPort1EnableAlmRpt, ncmDstTimeslotmap=ncmDstTimeslotmap, ncmE1SES24HRThreshold=ncmE1SES24HRThreshold, ncmCimRevision=ncmCimRevision, ncmT1PrevTotalNIDIndex=ncmT1PrevTotalNIDIndex, ncmCVP15MINThreshold=ncmCVP15MINThreshold, ncmT1CurrentNIDIndex=ncmT1CurrentNIDIndex, ncmCardSyncSourceIndex=ncmCardSyncSourceIndex, ncmT1IntervalSESs=ncmT1IntervalSESs, ncmT1TotalAISs=ncmT1TotalAISs, ncmCimDate=ncmCimDate, ncmCircuitInfoCircMode=ncmCircuitInfoCircMode, ncmE1AlarmThresholdStatusNIDIndex=ncmE1AlarmThresholdStatusNIDIndex, ncmE1AISTimeInterval=ncmE1AISTimeInterval, ncmEnhanAlmCfgLineRestoral=ncmEnhanAlmCfgLineRestoral, ncmE1ThresholdStatusIndex=ncmE1ThresholdStatusIndex, ncmT1CurrentESsTypeA=ncmT1CurrentESsTypeA, ncmE1BPVExceeded=ncmE1BPVExceeded, ncmE1PortRepeaterLoopbackTimeout=ncmE1PortRepeaterLoopbackTimeout, ncmPrevAlarmMsgTimeStampms=ncmPrevAlarmMsgTimeStampms, ncmT1ConfigEntry=ncmT1ConfigEntry, ncmE1SESExceeded=ncmE1SESExceeded, ncmShelfSyncSourceSegEntry=ncmShelfSyncSourceSegEntry, ncmLOSThresholdCountst=ncmLOSThresholdCountst, ncmT1PrevTotalCSSs=ncmT1PrevTotalCSSs, ncmE1PortLatchedLOFA=ncmE1PortLatchedLOFA, ncmE1PortLineIndex=ncmE1PortLineIndex, ncmT1PortBPVThresholdExceeded=ncmT1PortBPVThresholdExceeded, ncmActivateDeactLBType=ncmActivateDeactLBType, ncmT1LatchedStatusRAI=ncmT1LatchedStatusRAI, ncmE1IntervalSESs=ncmE1IntervalSESs, ncmT1CurrentLOFs=ncmT1CurrentLOFs, ncmAlmCfgDeclareTime=ncmAlmCfgDeclareTime, ncmAlmCfgEnableCardAlmRpt=ncmAlmCfgEnableCardAlmRpt, ncmE1TotalOOFSs=ncmE1TotalOOFSs, ncmT1IntervalLOSs=ncmT1IntervalLOSs, ncmCVL15MINThreshold=ncmCVL15MINThreshold, ncmT1LatchedStatusCRC6Error=ncmT1LatchedStatusCRC6Error, ncmE1CurrentFrameErrorCounts=ncmE1CurrentFrameErrorCounts, ncmT1CurrentIntervalSec=ncmT1CurrentIntervalSec, ncmRAITimeInterval=ncmRAITimeInterval, ncmE1IntervalSEFSs=ncmE1IntervalSEFSs, ncmShelfNIDIndex=ncmShelfNIDIndex, ncmSourceTwoShelfNum=ncmSourceTwoShelfNum, ncmE1IntervalNumber=ncmE1IntervalNumber, ncmT1NumberOfValidIntervals=ncmT1NumberOfValidIntervals, ncmTimeoutLOCSec=ncmTimeoutLOCSec, ncmE1PortBPVThresholdExceeded=ncmE1PortBPVThresholdExceeded, ncmT1PortSendAIS=ncmT1PortSendAIS, ncmEquipmentIDTable=ncmEquipmentIDTable, ncmUASP24HRThresholdCount=ncmUASP24HRThresholdCount, ncmT1FramingFormat=ncmT1FramingFormat, ncmTstpattTestPeriod=ncmTstpattTestPeriod, ncmCircuitInfoSrcPortID=ncmCircuitInfoSrcPortID, ncmT1IntervalEntry=ncmT1IntervalEntry, ncmT1TotalEntry=ncmT1TotalEntry, ncmDataPortConfigClkOpt=ncmDataPortConfigClkOpt, ncmE1AlarmThresholdStatusIndex=ncmE1AlarmThresholdStatusIndex, ncmListMsgNumCardEquipID=ncmListMsgNumCardEquipID, ncmLOFTimeInterval=ncmLOFTimeInterval, ncmListMsgNumPortID=ncmListMsgNumPortID, ncmT1IntervalAISs=ncmT1IntervalAISs, ncmAlarmThresholdConfigIndex=ncmAlarmThresholdConfigIndex, ncmCardIndex=ncmCardIndex, ncmShelfInfoTable=ncmShelfInfoTable, ncmIDPromIndex=ncmIDPromIndex, ncmDataPortStatusLoopback=ncmDataPortStatusLoopback, ncmT1PerfCountNIDIndex=ncmT1PerfCountNIDIndex, ncmDataPortLineStatusLLCJ=ncmDataPortLineStatusLLCJ, ncmT1IntervalUASs=ncmT1IntervalUASs, ncmSES24HRThresholdCountst=ncmSES24HRThresholdCountst, ncmLpbkLineIndex=ncmLpbkLineIndex, ncmE1CurrentAISSs=ncmE1CurrentAISSs, ncmE1ConfigNIDIndex=ncmE1ConfigNIDIndex, ncmT1NetworkLBOEQLIZ=ncmT1NetworkLBOEQLIZ, ncmCardAutoRestore3=ncmCardAutoRestore3, ncmE1SnapShotEndType=ncmE1SnapShotEndType, ncmDataPortStatusCimType=ncmDataPortStatusCimType, ncmT1PrevTotalOOFs=ncmT1PrevTotalOOFs, ncmSourceSegTwoClockRef=ncmSourceSegTwoClockRef, ncmPrevAlarmMsgNumber=ncmPrevAlarmMsgNumber, ncmE1IntervalEntry=ncmE1IntervalEntry, ncmCircuitInfoEntry=ncmCircuitInfoEntry, ncmE1IntervalCVPath=ncmE1IntervalCVPath, ncmSESL15MINThreshold=ncmSESL15MINThreshold, ncmLOFThresholdCount=ncmLOFThresholdCount, ncmE1BPVTimeInterval=ncmE1BPVTimeInterval, ncmCardSourceThreeCardNum=ncmCardSourceThreeCardNum, ncmES15MINThresholdCountst=ncmES15MINThresholdCountst, ncmE1PortCarrierFailureAlarm=ncmE1PortCarrierFailureAlarm, ncmE1TotalEndType=ncmE1TotalEndType, ncmT1PrevTotalESs=ncmT1PrevTotalESs, ncmE1LOSThreshold=ncmE1LOSThreshold, ncmLOFExceeded=ncmLOFExceeded, ncmE1AISThreshold=ncmE1AISThreshold, ncmLOFTimeIntervals=ncmLOFTimeIntervals, ncmEnhanAlmCfgSESThreshold=ncmEnhanAlmCfgSESThreshold, ncmCVL15MINExceeded=ncmCVL15MINExceeded, ncmE1PortAIS=ncmE1PortAIS, ncmE1SnapShotNIDIndex=ncmE1SnapShotNIDIndex, ncmDataPortStatusNIDIndex=ncmDataPortStatusNIDIndex, ncmT1IntervalOOFs=ncmT1IntervalOOFs, ncmESExceeded=ncmESExceeded, ncmDataPortLineStatusRLTM=ncmDataPortLineStatusRLTM, ncmNumberofCards=ncmNumberofCards, ncmPrevAlarmMsgEntry=ncmPrevAlarmMsgEntry, ncmCurrAlarmMsgNumber=ncmCurrAlarmMsgNumber, ncmEnhanAlmCfgEntry=ncmEnhanAlmCfgEntry, ncmE1PrevTotalAISSs=ncmE1PrevTotalAISSs, ncmT1CurrentFrameErrCount=ncmT1CurrentFrameErrCount, ncmE1PortLatchedFramingSlip=ncmE1PortLatchedFramingSlip, ncmCircuitInfoDstPortSite=ncmCircuitInfoDstPortSite, ncmE1CurrentESs=ncmE1CurrentESs, ncmCimManufacturePartNumber=ncmCimManufacturePartNumber, ncmadvfdlLBEnable=ncmadvfdlLBEnable, ncmCurrAlarmMsgEquipID=ncmCurrAlarmMsgEquipID, ncmE1TotalLOFSs=ncmE1TotalLOFSs, ncmT1TotalIndex=ncmT1TotalIndex, ncmEnhanAlmCfgTODMinute=ncmEnhanAlmCfgTODMinute, ncmDataPortConfigEntry=ncmDataPortConfigEntry, ncmE1TimeSlotSelect=ncmE1TimeSlotSelect, ncmT1CurrentIndex=ncmT1CurrentIndex, ncmActiveNodeStatus=ncmActiveNodeStatus, ncmE1PrevTotalCVPath=ncmE1PrevTotalCVPath, ncmT1CurrentESs=ncmT1CurrentESs, ncmCircListccbTable=ncmCircListccbTable, ncmE1BERThreshold=ncmE1BERThreshold, ncmLoopbackEntry=ncmLoopbackEntry, ncmListMsgNumPageNumber=ncmListMsgNumPageNumber, ncmT1PerfCountFrameMode=ncmT1PerfCountFrameMode, ncmadvfdlStandard=ncmadvfdlStandard, ncmE1TotalIndex=ncmE1TotalIndex, ncmDataPortConfigIndex=ncmDataPortConfigIndex, ncmE1PortLatchedBPVThresholdExceeded=ncmE1PortLatchedBPVThresholdExceeded, ncmT1BlockErrorCounter=ncmT1BlockErrorCounter, ncmT1Timestamp1=ncmT1Timestamp1, ncmTstpattLineIndex=ncmTstpattLineIndex, ncmE1TimeMilliSec=ncmE1TimeMilliSec, ncmCVP24HRExceeded=ncmCVP24HRExceeded, ncmRAIExceeded=ncmRAIExceeded, ncmT1LatchedStatusNIDIndex=ncmT1LatchedStatusNIDIndex, ncmResetAlmThresholdCount=ncmResetAlmThresholdCount, ncmFirmwareType=ncmFirmwareType, ncmShelfSyncSourceSegNum=ncmShelfSyncSourceSegNum, ncmE1TotalUASs=ncmE1TotalUASs, ncmESL15MINThresholdCount=ncmESL15MINThresholdCount, ncmDialBkUpInfoNIDIndex=ncmDialBkUpInfoNIDIndex, ncmE1TotalNIDIndex=ncmE1TotalNIDIndex, ncmClearCircuitGrpNIDIndex=ncmClearCircuitGrpNIDIndex, ncmE1IntervalFAE=ncmE1IntervalFAE, ncmE1PrevTotalBBE=ncmE1PrevTotalBBE, ncmE1IntervalTable=ncmE1IntervalTable, ncmE1PortCRC4=ncmE1PortCRC4, ncmE1PortSendRAI=ncmE1PortSendRAI, ncmE1CurrentLOFSs=ncmE1CurrentLOFSs, ncmCurrAlarmMsgIndex=ncmCurrAlarmMsgIndex, ncmSourceSegThreeShelfNum=ncmSourceSegThreeShelfNum, ncmT1ThresholdCRCExceeded=ncmT1ThresholdCRCExceeded, ncmT1SnapShotNIDIndex=ncmT1SnapShotNIDIndex, ncmESL15MINExceeded=ncmESL15MINExceeded, ncmAutoRestore1=ncmAutoRestore1, ncmT1FramingType=ncmT1FramingType, ncmListccbCircName=ncmListccbCircName, ncmT1PortCGA=ncmT1PortCGA, ncmClearCircuitGrpEntry=ncmClearCircuitGrpEntry, ncmT1PortTestPattern=ncmT1PortTestPattern, ncmT1PrevTotalSASs=ncmT1PrevTotalSASs, ncmE1PrevTotalFECPath=ncmE1PrevTotalFECPath, ncmT1PortStatusTable=ncmT1PortStatusTable, ncmESL24HRExceeded=ncmESL24HRExceeded, ncmEnhanAlmCfgNIDIndex=ncmEnhanAlmCfgNIDIndex)
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMGENERIC-MIB", ncmES24HRExceeded=ncmES24HRExceeded, ncmE1ES15MINThreshold=ncmE1ES15MINThreshold, ncmE1SecInCurrInterval=ncmE1SecInCurrInterval, ncmE1RAITimeInterval=ncmE1RAITimeInterval, ncmE1PortRepeaterLoopbackTimeoutEnable=ncmE1PortRepeaterLoopbackTimeoutEnable, ncmE1CurrentFECPath=ncmE1CurrentFECPath, ncmSourceSegThreeCardNum=ncmSourceSegThreeCardNum, ncmListMsgNumCardSite=ncmListMsgNumCardSite, ncmE1PortConfigTable=ncmE1PortConfigTable, ncmE1TotalFAE=ncmE1TotalFAE, ncmT1PrevTotalBESs=ncmT1PrevTotalBESs, ncmT1ThresholdSESExceeded=ncmT1ThresholdSESExceeded, ncmE1CurrentIndex=ncmE1CurrentIndex, ncmE1PortLatchedStatusNIDIndex=ncmE1PortLatchedStatusNIDIndex, ncmT1ConfigTable=ncmT1ConfigTable, ncmDataPortStatusLineCACB=ncmDataPortStatusLineCACB, ncmadvfdlIdlePattern=ncmadvfdlIdlePattern, ncmShelfIndex=ncmShelfIndex, ncmSourceTwoCardNum=ncmSourceTwoCardNum, ncmT1IntervalLOFs=ncmT1IntervalLOFs, ncmT1CurrentEndType=ncmT1CurrentEndType, ncmT1ThresholdStatusEntry=ncmT1ThresholdStatusEntry, ncmSESL24HRThresholdCount=ncmSESL24HRThresholdCount, ncmESL24HRThresholdCount=ncmESL24HRThresholdCount, ncmCardAutoRestore2=ncmCardAutoRestore2, ncmPortTimeslotCardSite=ncmPortTimeslotCardSite, ncmSourceThreeClockRef=ncmSourceThreeClockRef, ncmE1SnapShot=ncmE1SnapShot, ncmDataPortTstPatErrCount=ncmDataPortTstPatErrCount, ncmAlmCfgE1T1Port2EnableAlmRpt=ncmAlmCfgE1T1Port2EnableAlmRpt, ncmCircuitInfoCircPriority=ncmCircuitInfoCircPriority, ncmT1SnapShotIndex=ncmT1SnapShotIndex, ncmT1CurrentSEFs=ncmT1CurrentSEFs, ncmT1TotalSEFs=ncmT1TotalSEFs, ncmEnhanAlmCfgUASThreshold=ncmEnhanAlmCfgUASThreshold, ncmT1CurrentBESs=ncmT1CurrentBESs, ncmT1RepeaterLoopbackTimeout=ncmT1RepeaterLoopbackTimeout, ncmT1CurrentErrorFreeSec=ncmT1CurrentErrorFreeSec, ncmCVL24HRThresholdCount=ncmCVL24HRThresholdCount, ncmT1TotalTable=ncmT1TotalTable, ncmT1CurrentLOFC=ncmT1CurrentLOFC, ncmE1PortBERThresholdExceeded=ncmE1PortBERThresholdExceeded, ncmPortTimeslotAllocTable=ncmPortTimeslotAllocTable, ncmAdvancedT1ConfigEntry=ncmAdvancedT1ConfigEntry, ncmALARMConfigEntry=ncmALARMConfigEntry, ncmAlarmConfigNIDIndex=ncmAlarmConfigNIDIndex, ncmCVL15MINThresholdCount=ncmCVL15MINThresholdCount, ncmSrcPortSite=ncmSrcPortSite, ncmE1TotalSESs=ncmE1TotalSESs, ncmPrevAlarmMsgSeverity=ncmPrevAlarmMsgSeverity, ncmE1PrevTotalUASs=ncmE1PrevTotalUASs, ncmT1CurrentCSSs=ncmT1CurrentCSSs, ncmCardSyncSourceTable=ncmCardSyncSourceTable, ncmSES15MINThreshold=ncmSES15MINThreshold, ncmEquipmentIDNIDIndex=ncmEquipmentIDNIDIndex, ncmE1CurrentIntervalSec=ncmE1CurrentIntervalSec, ncmE1PortLatchedCRC4Error=ncmE1PortLatchedCRC4Error, ncmShelfCurrentSyncSource=ncmShelfCurrentSyncSource, ncmT1CurrentTable=ncmT1CurrentTable, ncmCardSourceOneCardNum=ncmCardSourceOneCardNum, ncmDeleteCircuitStatus=ncmDeleteCircuitStatus, ncmE1PrevTotalTable=ncmE1PrevTotalTable, ncmPrevAlarmMsgAlarmCode=ncmPrevAlarmMsgAlarmCode, ncmEnhanAlmCfgTODHour=ncmEnhanAlmCfgTODHour, ncmSourceSegTwoShelfNum=ncmSourceSegTwoShelfNum, ncmT1PrevTotalIndex=ncmT1PrevTotalIndex, ncmE1SnapShotIndex=ncmE1SnapShotIndex, ncmadvfdlPerformanceReport=ncmadvfdlPerformanceReport, ncmT1CurrentLOSs=ncmT1CurrentLOSs, ncmDataPortConfigLOS=ncmDataPortConfigLOS, ncmShelfSyncSourceEntry=ncmShelfSyncSourceEntry, ncmT1EnableNetOnesDensity=ncmT1EnableNetOnesDensity, ncmDialBkUpInfoTable=ncmDialBkUpInfoTable, ncmListMsgNumCircuitGroup=ncmListMsgNumCircuitGroup, ncmE1PortPLB=ncmE1PortPLB, ncmCircuitInfoSrcCardEquipID=ncmCircuitInfoSrcCardEquipID, ncmE1IntervalESsLine=ncmE1IntervalESsLine, ncmT1ThresholdSecLineRestore=ncmT1ThresholdSecLineRestore, ncmT1LatchedStatusTable=ncmT1LatchedStatusTable, ncmT1TimeSlot=ncmT1TimeSlot, ncmAlmCfgE1T1Port4EnableAlmRpt=ncmAlmCfgE1T1Port4EnableAlmRpt, ncmDataPortStatusEntry=ncmDataPortStatusEntry, ncmDataPortStatusLineLLCJ=ncmDataPortStatusLineLLCJ, ncmBPVExceededE1=ncmBPVExceededE1, ncmE1TotalTable=ncmE1TotalTable, ncmT1TotalASs=ncmT1TotalASs, ncmT1IntervalLOFC=ncmT1IntervalLOFC, ncmT1ThresholdUASExceeded=ncmT1ThresholdUASExceeded, ncmE1AlarmThresholdConfigNIDIndex=ncmE1AlarmThresholdConfigNIDIndex, ncmT1TotalLOFC=ncmT1TotalLOFC, ncmE1CurrentSEFSs=ncmE1CurrentSEFSs, ncmSES15MINThresholdCount=ncmSES15MINThresholdCount, ncmT1TotalCSSs=ncmT1TotalCSSs, ncmDstPortIdentifier=ncmDstPortIdentifier, ncmRAIThresholdCount=ncmRAIThresholdCount, ncmE1SESThreshold=ncmE1SESThreshold, ncmSourceSegThreeClockRef=ncmSourceSegThreeClockRef, ncmDataPortStatusIndex=ncmDataPortStatusIndex, ncmT1CurrentOOFs=ncmT1CurrentOOFs, ncmCVL24HRThreshold=ncmCVL24HRThreshold, ncmE1PortLLB=ncmE1PortLLB, ncmSESExceeded=ncmSESExceeded, ncmT1IntervalSASs=ncmT1IntervalSASs, ncmSourceSegOneShelfNum=ncmSourceSegOneShelfNum, ncmCardRevision=ncmCardRevision, ncmE1TotalSEFSs=ncmE1TotalSEFSs, ncmNodeShelf=ncmNodeShelf, ncmadvfdlMonitoringCsuType=ncmadvfdlMonitoringCsuType, ncmLOFThreshold=ncmLOFThreshold, ncmAISExceededE1=ncmAISExceededE1, ncmRAIExceededE1=ncmRAIExceededE1, ncmNumofCircListMessage=ncmNumofCircListMessage, ncmE1SES15MINThreshold=ncmE1SES15MINThreshold, ncmShelfSyncSourceIndex=ncmShelfSyncSourceIndex, ncmT1PortStatusEntry=ncmT1PortStatusEntry, ncmClearCircuitGrpName=ncmClearCircuitGrpName, ncmListccbCircPriority=ncmListccbCircPriority, ncmES24HRThreshold=ncmES24HRThreshold, ncmE1PortIdlePattern=ncmE1PortIdlePattern, ncmControllerEqID=ncmControllerEqID, ncmRAIThresholdCountst=ncmRAIThresholdCountst, ncmE1TotalESs=ncmE1TotalESs, ncmE1PortFraming=ncmE1PortFraming, ncmT1TotalNIDIndex=ncmT1TotalNIDIndex, ncmDataPortConfigTable=ncmDataPortConfigTable, ncmES15MINThresholdCount=ncmES15MINThresholdCount, ncmLoopbackTable=ncmLoopbackTable, ncmT1LatchedStatusEndType=ncmT1LatchedStatusEndType, ncmPortTimeslotCardEquipID=ncmPortTimeslotCardEquipID, ncmDialBkUpAction=ncmDialBkUpAction, ncmE1LOSTimeInterval=ncmE1LOSTimeInterval, ncmE1RestoreState=ncmE1RestoreState, ncmT1PrevTotalTable=ncmT1PrevTotalTable, ncmT1LatchedStatusBERExceeded=ncmT1LatchedStatusBERExceeded, ncmDataPortLineStatusCDCC=ncmDataPortLineStatusCDCC, ncmE1ThresholdStatusTable=ncmE1ThresholdStatusTable, ncmCardReceiveClockFromShelf=ncmCardReceiveClockFromShelf, ncmAISExceeded=ncmAISExceeded, ncmE1CurrentOOFSs=ncmE1CurrentOOFSs, ncmAlarmThresholdStatusTable=ncmAlarmThresholdStatusTable, ncmT1PerfCountEndType=ncmT1PerfCountEndType, ncmT1IntervalEndType=ncmT1IntervalEndType, ncmT1TimeStampMilliSec=ncmT1TimeStampMilliSec, ncmIDPromNIDIndex=ncmIDPromNIDIndex, ncmE1Timestamp1=ncmE1Timestamp1, ncmEnhanAlmCfgBERThreshold=ncmEnhanAlmCfgBERThreshold, ncmE1IntervalESs=ncmE1IntervalESs, ncmE1CRCThreshold=ncmE1CRCThreshold, ncmRefBusSeg=ncmRefBusSeg, ncmNodeCurrEntry=ncmNodeCurrEntry, ncmE1Timestamp=ncmE1Timestamp, ncmSESL15MINThresholdCount=ncmSESL15MINThresholdCount, ncmCardSourceTwoCardNum=ncmCardSourceTwoCardNum, ncmShelfSyncNIDIndex=ncmShelfSyncNIDIndex, ncmES15MINExceeded=ncmES15MINExceeded, ncmT1PrevTotalAISs=ncmT1PrevTotalAISs, ncmT1LatchedStatusEntry=ncmT1LatchedStatusEntry, ncmBackupCircName=ncmBackupCircName, ncmCircuitInfoCircName=ncmCircuitInfoCircName, ncmUASP24HRThreshold=ncmUASP24HRThreshold, ncmE1PortCarrierFailureAlarmDeclareTime=ncmE1PortCarrierFailureAlarmDeclareTime, ncmT1Timestamp=ncmT1Timestamp, ncmBPVTimeInterval=ncmBPVTimeInterval, ncmE1IntervalOOFSs=ncmE1IntervalOOFSs, ncmT1ThresholdStatusTable=ncmT1ThresholdStatusTable, ncmT1ThresholdStatusIndex=ncmT1ThresholdStatusIndex, ncmSourceOneClockRef=ncmSourceOneClockRef, ncmSESL15MINExceeded=ncmSESL15MINExceeded, ncmPrevAlarmMsgTable=ncmPrevAlarmMsgTable, ncmRAIThreshold=ncmRAIThreshold, ncmLOSExceeded=ncmLOSExceeded, ncmT1ThresholdSESCount=ncmT1ThresholdSESCount, ncmT1LineIndex=ncmT1LineIndex, ncmLpbkNIDIndex=ncmLpbkNIDIndex, ncmT1LatchedStatusLOF=ncmT1LatchedStatusLOF, ncmAlmCfgDomain=ncmAlmCfgDomain, ncmCirErrClearanceMask=ncmCirErrClearanceMask, ncmE1ThresholdStatusNIDIndex=ncmE1ThresholdStatusNIDIndex, ncmNodeID=ncmNodeID, ncmT1ConfigNIDIndex=ncmT1ConfigNIDIndex, ncmT1TotalFrameErrCount=ncmT1TotalFrameErrCount, ncmT1PerformanceCountersTable=ncmT1PerformanceCountersTable, ncmT1EnableNetLoopback=ncmT1EnableNetLoopback, ncmE1PrevTotalEndType=ncmE1PrevTotalEndType, ncmCimVendorCageCode=ncmCimVendorCageCode, ncmLOSTimeIntervalst=ncmLOSTimeIntervalst, ncmT1ResetPerfReg=ncmT1ResetPerfReg, ncmClearCircuitAction=ncmClearCircuitAction, ncmT1SnapShot=ncmT1SnapShot, ncmE1PerformanceSnapShotTable=ncmE1PerformanceSnapShotTable, ncmE1PrevTotalFAE=ncmE1PrevTotalFAE, ncmCircuitInfoNIDIndex=ncmCircuitInfoNIDIndex, ncmPortTimeslotPortID=ncmPortTimeslotPortID, ncmE1PortStatusIndex=ncmE1PortStatusIndex, ncmE1RAIThreshold=ncmE1RAIThreshold, ncmCardSourceOneShelfNum=ncmCardSourceOneShelfNum, ncmListGetMsgNumEntry=ncmListGetMsgNumEntry, ncmSourceSegOneClockRef=ncmSourceSegOneClockRef, ncmE1AlarmThresholdConfigEntry=ncmE1AlarmThresholdConfigEntry, ncmE1LineRestoreSec=ncmE1LineRestoreSec, ncmT1ThresholdBERCount=ncmT1ThresholdBERCount, ncmPortAllocTimeSlotMap=ncmPortAllocTimeSlotMap, ncmE1IntervalASs=ncmE1IntervalASs, ncmLOSExceededE1=ncmLOSExceededE1, ncmT1CurrentASs=ncmT1CurrentASs, ncmE1BPVThreshold=ncmE1BPVThreshold, ncmEnhanAlmCfgBPVThreshold=ncmEnhanAlmCfgBPVThreshold, ncmE1LOFThreshold=ncmE1LOFThreshold, ncmE1TotalESsLine=ncmE1TotalESsLine, ncmCirSrcPortErrsetupMask=ncmCirSrcPortErrsetupMask, ncmDataPortStatusMode=ncmDataPortStatusMode, ncmE1IntervalEndType=ncmE1IntervalEndType, ncmT1PortStatusNIDIndex=ncmT1PortStatusNIDIndex, ncmNodeIndex=ncmNodeIndex, ncmT1TotalErrorFreeSec=ncmT1TotalErrorFreeSec, ncmE1TimeStampSec=ncmE1TimeStampSec, ncmDataPortTestPattern=ncmDataPortTestPattern, ncmShelfCurrentSyncSourceSeg=ncmShelfCurrentSyncSourceSeg, ncmCardSourceOneClockRef=ncmCardSourceOneClockRef, ncmSourceSegTwoCardNum=ncmSourceSegTwoCardNum, ncmCardNIDIndex=ncmCardNIDIndex, ncmE1ThresholdStatusEntry=ncmE1ThresholdStatusEntry, ncmT1LatchedStatusFramingSlip=ncmT1LatchedStatusFramingSlip, ncmCardSyncNIDIndex=ncmCardSyncNIDIndex, ncmCardType=ncmCardType, ncmT1IntervalESs=ncmT1IntervalESs, ncmDataPortStatusLineIndicate=ncmDataPortStatusLineIndicate, ncmE1ES24HRThreshold=ncmE1ES24HRThreshold, ncmShelfSyncSourceTable=ncmShelfSyncSourceTable, ncmSrcPortIdentifier=ncmSrcPortIdentifier, ncmDstCardEquipID=ncmDstCardEquipID, ncmT1LineCoding=ncmT1LineCoding, ncmE1TotalLOSSs=ncmE1TotalLOSSs, ncmEquipmentIDLineIndex=ncmEquipmentIDLineIndex, ncmT1PortAIS=ncmT1PortAIS, ncmE1PrevTotalASs=ncmE1PrevTotalASs, ncmE1CurrentSESs=ncmE1CurrentSESs, ncmT1ThresholdBERExceeded=ncmT1ThresholdBERExceeded, ncmSESL24HRThreshold=ncmSESL24HRThreshold, ncmT1PrevTotalSESs=ncmT1PrevTotalSESs, ncmPortTimeslotAllocNIDIndex=ncmPortTimeslotAllocNIDIndex, ncmT1PreformanceSnapShotEntry=ncmT1PreformanceSnapShotEntry, ncmUASP15MINThresholdCount=ncmUASP15MINThresholdCount, ncmT1TotalDegradedMin=ncmT1TotalDegradedMin, ncmFirmwareVersion=ncmFirmwareVersion, ncmDialBkUpTimeout=ncmDialBkUpTimeout, ncmCURRENTAlarmMsgTable=ncmCURRENTAlarmMsgTable, ncmListccbCircStatus=ncmListccbCircStatus, ncmListccbBackPlaneBusID=ncmListccbBackPlaneBusID, ncmE1CurrentFAE=ncmE1CurrentFAE, ncmE1PortLatchedLOS=ncmE1PortLatchedLOS, ncmE1AlarmThresholdConfigIndex=ncmE1AlarmThresholdConfigIndex, ncmHardwareVersion=ncmHardwareVersion, ncmAutoRestore3=ncmAutoRestore3)
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMGENERIC-MIB", ncmE1CurrentLOSSs=ncmE1CurrentLOSSs, ncmCircuitInfoTable=ncmCircuitInfoTable)
