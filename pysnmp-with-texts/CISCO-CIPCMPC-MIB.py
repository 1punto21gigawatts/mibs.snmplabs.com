#
# PySNMP MIB module CISCO-CIPCMPC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CIPCMPC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
cipCardSubChannelIndex, cipCardEntryIndex, cipCardDtrBrdIndex = mibBuilder.importSymbols("CISCO-CHANNEL-MIB", "cipCardSubChannelIndex", "cipCardEntryIndex", "cipCardDtrBrdIndex")
ChannelPath, ChannelDevice = mibBuilder.importSymbols("CISCO-CIPCSNA-MIB", "ChannelPath", "ChannelDevice")
ChannelTgName, = mibBuilder.importSymbols("CISCO-CIPTG-MIB", "ChannelTgName")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, IpAddress, ModuleIdentity, NotificationType, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, ObjectIdentity, Counter32, TimeTicks, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "ModuleIdentity", "NotificationType", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "ObjectIdentity", "Counter32", "TimeTicks", "iso", "Gauge32")
TextualConvention, RowStatus, DisplayString, TimeStamp, TDomain = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TimeStamp", "TDomain")
ciscoCipCmpcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 72))
ciscoCipCmpcMIB.setRevisions(('1999-01-25 00:00', '1998-01-06 00:00', '1997-02-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCipCmpcMIB.setRevisionsDescriptions(('Since the CMCC now supports MPC and MPC+, the new state, activePlus, was added to cipCmpcSubChannelOperState to indicate the TG is active and using the MPC+ protocol.', "With the addition of Cisco's new Channel Port Adapter cards, all the references to CIP in the MIB description and object descriptions are changed to CMCC (Cisco Mainframe Channel Connection). The object names in the form of cip... or cipCard... will remain the same, but will be valid objects for the Channel Port Adapter cards.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoCipCmpcMIB.setLastUpdated('9901250000Z')
if mibBuilder.loadTexts: ciscoCipCmpcMIB.setOrganization('cisco IBU Engineering Working Group')
if mibBuilder.loadTexts: ciscoCipCmpcMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoCipCmpcMIB.setDescription('This is the Management Information Base (MIB) module for objects used to manage the Cisco Multi-Path Channel (MPC) support on Cisco Mainframe Channel Connection (CMCC) cards, also called the CMPC feature. ------------------------------------------------- | Acronym Definitions: | | CIP = Channel Interface Processor | | CMPC = Cisco Multi-Path Channel | | HPR = High Performance Routing | | HPDT = High Performance Data Transfer | | ISR = Intermediate Session Routing | | MPC = Multi-Path Channel | | MPC+ = HPDT MPC | | SNA = Systems Network Architecture | | TG = Transmission Group | ------------------------------------------------- This MIB consists of the following tables: 1) CMPC Subchannel Administration 2) CMPC Subchannel Operational 3) CMPC TG Statistics Refer to the following MIBs for an understanding of Cisco channel terminology and Cisco CMCC terminology: CISCO-CHANNEL-MIB CISCO-CIPCSNA-MIB CISCO-CIPLAN-MIB CISCO-CIPTG-MIB ')
cipCmpcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 72, 1))
cipCmpcSubChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1))
cipCmpcTg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2))
cipCmpcSubChannelAdminTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 1), )
if mibBuilder.loadTexts: cipCmpcSubChannelAdminTable.setStatus('current')
if mibBuilder.loadTexts: cipCmpcSubChannelAdminTable.setDescription('This table contains configuration information used to define subchannels for the Cisco Multi-Path Channel (CMPC) feature on the CMCC card. Each instance of this table is created when a CMPC sub-channel is configured on the router. When the CMPC sub-channel configuration statement is deleted from the router, the instance represented by this table is removed.')
cipCmpcSubChannelAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-CHANNEL-MIB", "cipCardEntryIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardDtrBrdIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardSubChannelIndex"))
if mibBuilder.loadTexts: cipCmpcSubChannelAdminEntry.setStatus('current')
if mibBuilder.loadTexts: cipCmpcSubChannelAdminEntry.setDescription('A list of CMPC configuration values.')
cipCmpcSubChannelAdminPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 1, 1, 1), ChannelPath()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCmpcSubChannelAdminPath.setStatus('current')
if mibBuilder.loadTexts: cipCmpcSubChannelAdminPath.setDescription('Channel path for this CMPC instance.')
cipCmpcSubChannelAdminDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 1, 1, 2), ChannelDevice()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCmpcSubChannelAdminDevice.setStatus('current')
if mibBuilder.loadTexts: cipCmpcSubChannelAdminDevice.setDescription('Device address of the subchannel the attached host will use to communicate with this CMPC instance.')
cipCmpcSubChannelAdminTgName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 1, 1, 3), ChannelTgName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCmpcSubChannelAdminTgName.setStatus('current')
if mibBuilder.loadTexts: cipCmpcSubChannelAdminTgName.setDescription('This is the name of the CMPC transmission group. Each CMPC subchannel in the same connection transmission group must have the same TG name')
cipCmpcSubChannelAdminDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("readOrWrite", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCmpcSubChannelAdminDirection.setStatus('current')
if mibBuilder.loadTexts: cipCmpcSubChannelAdminDirection.setDescription('Specifies whether the CMPC subchannel is for host reads or host writes.')
cipCmpcSubChannelAdminTgTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 1, 1, 5), TDomain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcSubChannelAdminTgTransport.setStatus('current')
if mibBuilder.loadTexts: cipCmpcSubChannelAdminTgTransport.setDescription('This object specifies the Transmission Group transport type OID for which this CMPC Sub-Channel instance if configured. When the Transmission Group for this CMPC Sub-Channel instance is not configured, this object will be set to the NULL TDomian { 0, 0 }.')
cipCmpcSubChannelAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCmpcSubChannelAdminRowStatus.setStatus('current')
if mibBuilder.loadTexts: cipCmpcSubChannelAdminRowStatus.setDescription("This object is used by a Management Station to create or delete the row entry in the cipCmpcSubChannelAdminTable following the the RowStatus textual convention. Upon successful creation of the row, an Agent automatically creates a corresponding entry in the cipCmpcSubChannelOperTable and cipCmpcSubChannelStatsTable. The Management Station can initiate row deletion, by setting this value to 'destroy (6)'. The Agent will then delete the rows corresponding to this CMPC instance from the cipCmpcSubChannelAdminTable, cipCmpcSubChannelOperTable and cipCmpcSubChannelStatsTable.")
cipCmpcSubChannelOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 2), )
if mibBuilder.loadTexts: cipCmpcSubChannelOperTable.setStatus('current')
if mibBuilder.loadTexts: cipCmpcSubChannelOperTable.setDescription('This table contains operational information for the Cisco Multi-Path Channel (CMPC) feature on the CMCC card.')
cipCmpcSubChannelOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 2, 1), )
cipCmpcSubChannelAdminEntry.registerAugmentions(("CISCO-CIPCMPC-MIB", "cipCmpcSubChannelOperEntry"))
cipCmpcSubChannelOperEntry.setIndexNames(*cipCmpcSubChannelAdminEntry.getIndexNames())
if mibBuilder.loadTexts: cipCmpcSubChannelOperEntry.setStatus('current')
if mibBuilder.loadTexts: cipCmpcSubChannelOperEntry.setDescription('A list of CMPC operational and status values. The entries are created by the Agent. They have read-only access.')
cipCmpcSubChannelOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("shutdown", 1), ("inactive", 2), ("xid2Pending", 3), ("active", 4), ("activePlus", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcSubChannelOperState.setStatus('current')
if mibBuilder.loadTexts: cipCmpcSubChannelOperState.setDescription('Activation state of the CMPC subchannel. shutdown - CMCC interface with this CMPC subchannel configured is shutdown. inactive - CMCC physical channel up, CMPC subchannel has not started to activate yet. xid2Pending - VTAM and CMCC CMPC have started negotiating channel connection. active - CMCC CMPC subchannel is active in MPC or non-HPDT mode. activePlus - CMCC CMPC subchannel is active in MPC+ or HPDT mode.')
cipCmpcSubChannelOperMaxbfru = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcSubChannelOperMaxbfru.setStatus('current')
if mibBuilder.loadTexts: cipCmpcSubChannelOperMaxbfru.setDescription('Maximum number of 4096 byte buffers allowed per channel block I/O on this CMPC subchannel. For host write subchannels, this is the maximum number of 4096 byte buffers the host can write to the CMCC for each channel block I/O. Since the CMCC is capable of receiving 16 4096 byte buffers per channel block I/O, the value on host write subchannels will always be 16. For host read subchannels, this is the maximum number of 4096 byte buffers the host can read from the CMCC for each channel block I/O.')
cipCmpcTgOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 1), )
if mibBuilder.loadTexts: cipCmpcTgOperTable.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgOperTable.setDescription('This table contains Operational information for each instance of a CMPC Transmission Group (TG). Each instance of this table is created for every CMPC TG with a unique tg-name configured on a CMCC card.')
cipCmpcTgOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CIPCMPC-MIB", "cipCmpcTgOperName"))
if mibBuilder.loadTexts: cipCmpcTgOperEntry.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgOperEntry.setDescription('A list of CMPC TG Operational objects.')
cipCmpcTgOperName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 1, 1, 1), ChannelTgName())
if mibBuilder.loadTexts: cipCmpcTgOperName.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgOperName.setDescription('This is the name for this instance of a CMPC transmission group (TG).')
cipCmpcTgOperLastSeqNumFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("blockSeqError", 2), ("sweepSeqError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcTgOperLastSeqNumFailureCause.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgOperLastSeqNumFailureCause.setDescription('The last CMPC TG sequence number failure cause. none - No sequence number errors have been detected. blockSeqError - Sequence number received in a cmpc I/O block did not match the expected sequence number. sweepSeqError - Sequence number received in a sweep message does not compare to the expected sequence number. for this CMPC TG.')
cipCmpcTgOperLastSeqNumFailureTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcTgOperLastSeqNumFailureTime.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgOperLastSeqNumFailureTime.setDescription('This object describes the value of sysUpTime when this CMPC TG last detected a sequence number error. If the CMPC TG has not failed, then this value shall be zero.')
cipCmpcTgOperExpectedReceiveSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcTgOperExpectedReceiveSeqNum.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgOperExpectedReceiveSeqNum.setDescription('This is the sequence number expected from the host by this CMPC TG.')
cipCmpcTgOperLastSeqNumReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcTgOperLastSeqNumReceived.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgOperLastSeqNumReceived.setDescription('This is the last sequence number received from the host by this CMPC TG.')
cipCmpcTgOperLastSeqNumSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcTgOperLastSeqNumSent.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgOperLastSeqNumSent.setDescription('This is the last sequence number sent to the host by this CMPC TG.')
cipCmpcTgStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2), )
if mibBuilder.loadTexts: cipCmpcTgStatsTable.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgStatsTable.setDescription('This table contains statistical information for each instance of a CMPC Transmission Group (TG). Each instance of this table is created for every CMPC TG with a unique tg-name configured on a CMCC card.')
cipCmpcTgStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1), )
cipCmpcTgOperEntry.registerAugmentions(("CISCO-CIPCMPC-MIB", "cipCmpcTgStatsEntry"))
cipCmpcTgStatsEntry.setIndexNames(*cipCmpcTgOperEntry.getIndexNames())
if mibBuilder.loadTexts: cipCmpcTgStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgStatsEntry.setDescription('A list of CMPC TG statistical objects.')
cipCmpcTgStatsConnectReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcTgStatsConnectReqs.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgStatsConnectReqs.setDescription('Number of connect requests received from the host by this CMPC TG.')
cipCmpcTgStatsConnectInds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcTgStatsConnectInds.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgStatsConnectInds.setDescription('Number of connect indications sent to the host by this CMPC TG.')
cipCmpcTgStatsConnectRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcTgStatsConnectRsps.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgStatsConnectRsps.setDescription('Number of connect responses received from the host by this CMPC TG.')
cipCmpcTgStatsConnectCnfms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcTgStatsConnectCnfms.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgStatsConnectCnfms.setDescription('Number of connect confirms sent to the host by this CMPC TG.')
cipCmpcTgStatsDiscReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcTgStatsDiscReqs.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgStatsDiscReqs.setDescription('Number of disconnect requests received from the host by this CMPC TG.')
cipCmpcTgStatsDiscInds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcTgStatsDiscInds.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgStatsDiscInds.setDescription('Number of disconnect Indications sent to the host by this CMPC TG.')
cipCmpcTgStatsSweepReqsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcTgStatsSweepReqsIn.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgStatsSweepReqsIn.setDescription('Number of sweep requests received from from the host by this CMPC TG.')
cipCmpcTgStatsSweepReqsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcTgStatsSweepReqsOut.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgStatsSweepReqsOut.setDescription('Number of CMPC sweep requests sent by this CMPC TG.')
cipCmpcTgStatsSweepRspsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcTgStatsSweepRspsIn.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgStatsSweepRspsIn.setDescription('Number of CMPC sweep responses received from VTAM by this CMPC TG.')
cipCmpcTgStatsSweepRspsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcTgStatsSweepRspsOut.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgStatsSweepRspsOut.setDescription('Number of CMPC sweep responses sent by this CMPC TG.')
cipCmpcTgStatsWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 72, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCmpcTgStatsWraps.setStatus('current')
if mibBuilder.loadTexts: cipCmpcTgStatsWraps.setDescription('Number of times the CMPC sequence number for this TG has wrapped.')
cipCmpcNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 72, 2))
cipCmpcNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 72, 2, 0))
cipCmpcDirectionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 72, 2, 0, 1)).setObjects(("CISCO-CIPCMPC-MIB", "cipCmpcSubChannelAdminDirection"))
if mibBuilder.loadTexts: cipCmpcDirectionMismatch.setStatus('current')
if mibBuilder.loadTexts: cipCmpcDirectionMismatch.setDescription('This trap indicates that the configured direction for the specified CMPC subchannel does not match the direction specified by the host. The CMPC subchannel will not activate as long as this mismatch exists.')
cipCmpcSeqNumError = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 72, 2, 0, 2)).setObjects(("CISCO-CIPCMPC-MIB", "cipCmpcTgOperLastSeqNumFailureCause"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgOperExpectedReceiveSeqNum"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgOperLastSeqNumReceived"))
if mibBuilder.loadTexts: cipCmpcSeqNumError.setStatus('current')
if mibBuilder.loadTexts: cipCmpcSeqNumError.setDescription('This trap indicates that the CMPC TG has detected an MPC sequence number error. This error will cause the CMPC TG to disconnect.')
ciscoCipCmpcMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 72, 3))
ciscoCipCmpcMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 72, 3, 1))
ciscoCipCmpcMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 72, 3, 2))
ciscoCipCmpcMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 72, 3, 1, 1)).setObjects(("CISCO-CIPCMPC-MIB", "ciscoCipCmpcSubChannelGroup"), ("CISCO-CIPCMPC-MIB", "ciscoCipCmpcTgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCipCmpcMibCompliance = ciscoCipCmpcMibCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoCipCmpcMibCompliance.setDescription('The compliance statement for the Cisco Multi-Path Channel (CMPC) feature.')
ciscoCipCmpcSubChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 72, 3, 2, 1)).setObjects(("CISCO-CIPCMPC-MIB", "cipCmpcSubChannelAdminPath"), ("CISCO-CIPCMPC-MIB", "cipCmpcSubChannelAdminDevice"), ("CISCO-CIPCMPC-MIB", "cipCmpcSubChannelAdminTgName"), ("CISCO-CIPCMPC-MIB", "cipCmpcSubChannelAdminDirection"), ("CISCO-CIPCMPC-MIB", "cipCmpcSubChannelAdminTgTransport"), ("CISCO-CIPCMPC-MIB", "cipCmpcSubChannelAdminRowStatus"), ("CISCO-CIPCMPC-MIB", "cipCmpcSubChannelOperState"), ("CISCO-CIPCMPC-MIB", "cipCmpcSubChannelOperMaxbfru"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCipCmpcSubChannelGroup = ciscoCipCmpcSubChannelGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCipCmpcSubChannelGroup.setDescription('A collection of objects providing Cisco Multi-Path Channel (CMPC) Administration, Operational status and Statistics.')
ciscoCipCmpcTgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 72, 3, 2, 2)).setObjects(("CISCO-CIPCMPC-MIB", "cipCmpcTgOperLastSeqNumFailureCause"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgOperLastSeqNumFailureTime"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgOperExpectedReceiveSeqNum"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgOperLastSeqNumReceived"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgOperLastSeqNumSent"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgStatsConnectReqs"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgStatsConnectInds"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgStatsConnectRsps"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgStatsConnectCnfms"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgStatsDiscReqs"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgStatsDiscInds"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgStatsSweepReqsIn"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgStatsSweepReqsOut"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgStatsSweepRspsIn"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgStatsSweepRspsOut"), ("CISCO-CIPCMPC-MIB", "cipCmpcTgStatsWraps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCipCmpcTgGroup = ciscoCipCmpcTgGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCipCmpcTgGroup.setDescription('A collection of objects providing CMPC TG Operational and Statistical information.')
mibBuilder.exportSymbols("CISCO-CIPCMPC-MIB", PYSNMP_MODULE_ID=ciscoCipCmpcMIB, cipCmpcSubChannel=cipCmpcSubChannel, cipCmpcSubChannelAdminPath=cipCmpcSubChannelAdminPath, cipCmpcTgStatsDiscReqs=cipCmpcTgStatsDiscReqs, ciscoCipCmpcSubChannelGroup=ciscoCipCmpcSubChannelGroup, cipCmpcSubChannelOperMaxbfru=cipCmpcSubChannelOperMaxbfru, ciscoCipCmpcMibConformance=ciscoCipCmpcMibConformance, cipCmpcTgOperName=cipCmpcTgOperName, cipCmpcNotificationPrefix=cipCmpcNotificationPrefix, cipCmpcTgStatsDiscInds=cipCmpcTgStatsDiscInds, cipCmpcTgStatsSweepRspsIn=cipCmpcTgStatsSweepRspsIn, cipCmpcTgStatsSweepReqsOut=cipCmpcTgStatsSweepReqsOut, cipCmpcSubChannelAdminDevice=cipCmpcSubChannelAdminDevice, cipCmpcTg=cipCmpcTg, cipCmpcTgStatsWraps=cipCmpcTgStatsWraps, cipCmpcTgStatsEntry=cipCmpcTgStatsEntry, cipCmpcSubChannelAdminTgName=cipCmpcSubChannelAdminTgName, cipCmpcTgOperLastSeqNumFailureTime=cipCmpcTgOperLastSeqNumFailureTime, cipCmpcTgOperExpectedReceiveSeqNum=cipCmpcTgOperExpectedReceiveSeqNum, cipCmpcTgOperLastSeqNumSent=cipCmpcTgOperLastSeqNumSent, cipCmpcTgStatsTable=cipCmpcTgStatsTable, cipCmpcTgStatsConnectRsps=cipCmpcTgStatsConnectRsps, cipCmpcTgStatsSweepRspsOut=cipCmpcTgStatsSweepRspsOut, ciscoCipCmpcMibCompliances=ciscoCipCmpcMibCompliances, cipCmpcSubChannelAdminTgTransport=cipCmpcSubChannelAdminTgTransport, cipCmpcSeqNumError=cipCmpcSeqNumError, ciscoCipCmpcMibGroups=ciscoCipCmpcMibGroups, cipCmpcSubChannelAdminTable=cipCmpcSubChannelAdminTable, cipCmpcTgOperEntry=cipCmpcTgOperEntry, cipCmpcTgStatsSweepReqsIn=cipCmpcTgStatsSweepReqsIn, cipCmpcSubChannelAdminEntry=cipCmpcSubChannelAdminEntry, cipCmpcSubChannelOperTable=cipCmpcSubChannelOperTable, ciscoCipCmpcMibCompliance=ciscoCipCmpcMibCompliance, cipCmpcTgOperLastSeqNumReceived=cipCmpcTgOperLastSeqNumReceived, ciscoCipCmpcTgGroup=ciscoCipCmpcTgGroup, cipCmpcSubChannelOperState=cipCmpcSubChannelOperState, ciscoCipCmpcMIB=ciscoCipCmpcMIB, cipCmpcDirectionMismatch=cipCmpcDirectionMismatch, cipCmpcSubChannelAdminDirection=cipCmpcSubChannelAdminDirection, cipCmpcSubChannelOperEntry=cipCmpcSubChannelOperEntry, cipCmpcTgStatsConnectReqs=cipCmpcTgStatsConnectReqs, cipCmpcObjects=cipCmpcObjects, cipCmpcTgOperTable=cipCmpcTgOperTable, cipCmpcTgStatsConnectInds=cipCmpcTgStatsConnectInds, cipCmpcSubChannelAdminRowStatus=cipCmpcSubChannelAdminRowStatus, cipCmpcTgStatsConnectCnfms=cipCmpcTgStatsConnectCnfms, cipCmpcNotifications=cipCmpcNotifications, cipCmpcTgOperLastSeqNumFailureCause=cipCmpcTgOperLastSeqNumFailureCause)
