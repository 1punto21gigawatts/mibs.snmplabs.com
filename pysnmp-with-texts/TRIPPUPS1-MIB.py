#
# PySNMP MIB module TRIPPUPS1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRIPPUPS1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:27:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter64, ModuleIdentity, ObjectIdentity, enterprises, NotificationType, Counter32, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, iso, TimeTicks, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "ModuleIdentity", "ObjectIdentity", "enterprises", "NotificationType", "Counter32", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "iso", "TimeTicks", "Gauge32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tripplite = MibIdentifier((1, 3, 6, 1, 4, 1, 850))
trippUPS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1))
ups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1))
upsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 1))
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 2))
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3))
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 4))
upsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 6))
upsWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 7))
upsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 8))
upsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 9))
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 10))
upsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentManufacturer.setDescription('The name of the UPS manufacturer.')
upsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentModel.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentModel.setDescription('The UPS Model designation.')
upsIdentUPSSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentUPSSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentUPSSoftwareVersion.setDescription('The UPS Firmware software version(s). This variable may or may not have the same value as upsIdentAgentSoftwareVersion in some implementations.')
upsIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentAgentSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentAgentSoftwareVersion.setDescription('The UPS agent software version. This variable may or may not have the same value as upsIdentUPSSoftwareVersion in some implementations.')
upsIdentName = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIdentName.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentName.setDescription('A string identifying the UPS. This object should be set by the administrator.')
upsIdentAttachedDevices = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIdentAttachedDevices.setStatus('mandatory')
if mibBuilder.loadTexts: upsIdentAttachedDevices.setDescription('A string identifying the devices attached to the output(s) of the UPS. This object should be set by the administrator.')
upsBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3), ("batteryDepleted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryStatus.setDescription("The indication of the capacity remaining in the UPS system's batteries. A value of batteryNormal indicates that the batteries are fully charged. A value of batteryLow indicates that the remaining battery run-time is less than or equal to upsConfigMinutesRemaining. A value of batteryDepleted indicates that the UPS will be unable to sustain the present load when and if the utility power is lost.")
upsSecondsOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSecondsOnBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsSecondsOnBattery.setDescription('If the unit is on battery power, the elapsed time since the UPS last switched to battery power, or the time since the network management subsystem was last restarted, whichever is less. Zero shall be returned if the unit is not on battery power. UNITS - seconds')
upsEstimatedMinutesRemaining = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEstimatedMinutesRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: upsEstimatedMinutesRemaining.setDescription('An estimate of the time to battery charge depletion under the present load conditions if the utility power were to be lost and remain off. UNITS - minutes')
upsBatteryChargeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryChargeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryChargeRemaining.setDescription('The estimate of the battery charge remaining expressed as a percent of full charge.')
upsBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryVoltage.setDescription('The magnitude of the present battery voltage. UNITS 0.1 Volt DC.')
upsBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: upsBatteryTemperature.setDescription('The ambient temperature at or near the UPS Battery. UNITS degrees Centigrade')
upsInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputFrequency.setDescription('The present input frequency. UNITS 0.1 Hertz')
upsInputLineBads = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLineBads.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputLineBads.setDescription('A count of the number of times the input entered an out-of-tolerance condition as defined by the manufacturer.')
upsInputNumLines = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputNumLines.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputNumLines.setDescription('The number of input lines utilized in this device. This variable indicates the number of rows in the input table.')
upsInputVolt = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVolt.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputVolt.setDescription('The magnitude of the present input voltage. UNITS RMS Volts')
upsInputTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5), )
if mibBuilder.loadTexts: upsInputTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputTable.setDescription('A list of input table entries. The number of entries is given by the value of upsInputNumLines.')
upsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 1), ).setIndexNames((0, "TRIPPUPS1-MIB", "upsInputLineIndex"))
if mibBuilder.loadTexts: upsInputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputEntry.setDescription('An entry containing information applicable to a particular input line.')
upsInputLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputLineIndex.setDescription('The input line identifier.')
upsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsInputVoltage.setDescription('The magnitude of the present input voltage. UNITS RMS Volts')
upsOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5), ("booster", 6), ("reducer", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputSource.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputSource.setDescription('The present source of output power.')
upsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputFrequency.setDescription('The present output frequency. UNITS 0.1 Hertz')
upsOutputNumLines = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputNumLines.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputNumLines.setDescription('The number of output lines utilized in this device. This variable indicates the number of rows in the output table.')
upsOutputPercLoad = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPercLoad.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputPercLoad.setDescription('The percentage of true power capacity presently being used. UNITS percent')
upsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 5), )
if mibBuilder.loadTexts: upsOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputTable.setDescription('A list of output table entries. The number of entries is given by the value of upsOutputNumLines.')
upsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 5, 1), ).setIndexNames((0, "TRIPPUPS1-MIB", "upsOutputLineIndex"))
if mibBuilder.loadTexts: upsOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputEntry.setDescription('An entry containing information applicable to a particular output line.')
upsOutputLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputLineIndex.setDescription('The output line identifier.')
upsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputVoltage.setDescription('The present output voltage. UNITS RMS Volts')
upsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputCurrent.setDescription('The present output mandatory. UNITS 0.1 Amp')
upsOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputPower.setDescription('The present output true power. UNITS Watts')
upsOutputPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPercentLoad.setStatus('mandatory')
if mibBuilder.loadTexts: upsOutputPercentLoad.setDescription('The percentage of true power capacity presently being used. UNITS percent')
upsAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmsPresent.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmsPresent.setDescription('The present number of active alarm conditions.')
upsAlarmID = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("upsAlarmBatteryBad", 1), ("upsAlarmOnBattery", 2), ("upsAlarmLowBattery", 3), ("upsAlarmDepletedBattery", 4), ("upsAlarmTempBad", 5), ("upsAlarmOutputOverload", 6), ("upsAlarmOutputOffAsRequested", 7), ("upsAlarmOutputOff", 8), ("upsAlarmDiagnosticTestFailed", 9), ("upsAlarmCommunicationsLost", 10), ("upsAlarmShutdownPending", 11), ("upsAlarmShutdownImminent", 12), ("upsAlarmTestInProgress", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmID.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmID.setDescription('A unique identifier for an alarm condition. This value must remain constant.')
upsAlarmDESCR = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDESCR.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmDESCR.setDescription('A reference to an alarm description object. The object references should not be accessible, but rather be used to provide a unique description of the alarm condition.')
upsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 6, 4), )
if mibBuilder.loadTexts: upsAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmTable.setDescription('A list of alarm table entries. The table consists of zero, one, or may rows at any moment, depending upon the number of alarm conditions in effect. The table is initially empty at agent startup. The agent creates a row in the table each time a condition is detected and deletes that row when that condition no longer pertains. The agent creates the first row with upsAlarmId equal to 1, and increments the value fo upsAlarmId each time a new row is created, wrapping to the first free value greater than or equal to 1 when the maximum value of upsAlarmId would otherwise be exceeded. Consequently, after multiple operations, the table may become sparse, e.g., containing entries for rows 95, 100, 101, and 203 and the entries are in chronological order until upsAlarmId wraps. Alarms are named by and OBJECT IDENTIFIER, upsAlarmDescr, to allow a single table to reflect well known alarms plus alarms defined by a particular implementation, i.e., as documented in the private enterprise MIB definition for the device. No two rows will have the same value of upsAlarmDescr, since alarms define conditions. In order to meet this requirement, care should be take in the definition of the number of active rows in the table at any given time is reflected by the value fo upsAlarms.')
upsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 6, 4, 1), ).setIndexNames((0, "TRIPPUPS1-MIB", "upsAlarmId"))
if mibBuilder.loadTexts: upsAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmEntry.setDescription('An entry containing information applicable to a particular alarm.')
upsAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmId.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmId.setDescription('A unique identifier for an alarm condition. This value must remain constant.')
upsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 6, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDescr.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmDescr.setDescription('A reference to an alarm description object. The object references should not be accessible, but rather be used to provide a unique description of the alarm condition.')
upsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 6, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmTime.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmTime.setDescription('The value of sysUpTime when the alarm condition was detected. If the alarm condition was detected at the time of agent startup and presumable existed before agent startup, the value of upsAlarmTime shall equal 0.')
upsAlarmBatteryBad = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmBatteryBad.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmBatteryBad.setDescription('One or more batteries have been determined to require replacement.')
upsAlarmOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOnBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmOnBattery.setDescription('The UPS is drawing power from the batteries.')
upsAlarmLowBattery = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmLowBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmLowBattery.setDescription('The remaining battery run-time is less than or equal to upsConfigMinutesRemaining.')
upsAlarmDepletedBattery = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDepletedBattery.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmDepletedBattery.setDescription('The UPS will be unable to sustain the present load when and if the utility power is lost.')
upsAlarmTempBad = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmTempBad.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmTempBad.setDescription('A temperature is out of tolerance.')
upsAlarmOutputOverload = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOutputOverload.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmOutputOverload.setDescription('The output load exceeds the UPS output capacity.')
upsAlarmOutputOffAsRequested = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmOutputOffAsRequested.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmOutputOffAsRequested.setDescription('The UPS has shutdown as commanded, i.e., the output is off.')
upsAlarmUpsOutputOff = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmUpsOutputOff.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmUpsOutputOff.setDescription('The UPS is in the off state.')
upsAlarmDiagnosticTestFailed = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmDiagnosticTestFailed.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmDiagnosticTestFailed.setDescription('The result of the last diagnostic test indicates a failure.')
upsAlarmCommunicationsLost = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmCommunicationsLost.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmCommunicationsLost.setDescription('A problem has been encountered in the communications between the agent and the UPS.')
upsAlarmShutdownPending = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmShutdownPending.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmShutdownPending.setDescription('A upsShutdownAfterDelay countdown is underway.')
upsAlarmShutdownImminent = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmShutdownImminent.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmShutdownImminent.setDescription('A upsShutdownAfterDelay countdown is underway.')
upsAlarmTestInProgress = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAlarmTestInProgress.setStatus('mandatory')
if mibBuilder.loadTexts: upsAlarmTestInProgress.setDescription('A upsShutdownAfterDelay countdown is underway.')
upsTestId = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noTestsInitiated", 1), ("abortTestInProgress", 2), ("generalSystemsTest", 3), ("checkBatteryTest", 4), ("deepBatteryCalibration", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsTestId.setStatus('mandatory')
if mibBuilder.loadTexts: upsTestId.setDescription('The test named by an OBJECT IDENTIFIER which allows a standard mechanism for the initiation of test, including the well known tests identified in this document as well as those introduced by a particular implementation, i.e., as documented in the private enterprise MIB definition for the device. Setting this variable initiates the named test. Sets to this variable require the presence of upsTestSpinLock in the same SNMP message. The set request will be rejected with an appropriate error message if the requested test cannot be performed, including attempts to start a test when another test is already in progress. Tests in progress may be aborted by setting this variable to upsTestAbortTestInProgress. Read operations return the value of the name of the test in progress if a test is in progress or the name of the last test performed if no test is in progress, unless no test has bee run, in which case the well known value upsTestNoTestsInitiated is returned.')
upsTestResultsSummary = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("donePass", 1), ("doneWarning", 2), ("doneError", 3), ("aborted", 4), ("inProgress", 5), ("noTestsInitiated", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTestResultsSummary.setStatus('mandatory')
if mibBuilder.loadTexts: upsTestResultsSummary.setDescription('The results of the mandatory or last UPS diagnostics test performed. The values for donePass(1), doneWarning(2), and doneError(3) are self-documenting. The value aborted(4) is returned for tests which are aborted by setting the value of upsTestId to upsTestAbortTestInProgress. Tests which have not yet concluded are indicated by inProgress(5). The value noTestsInitiated(4) indicates that no previous test results are available, such as in the case when no tests have been run since the last reinitialization of the network management subsystem and the system has no provision for non-volatile storage of test results.')
upsShutdownType = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("output", 1), ("system", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsShutdownType.setStatus('mandatory')
if mibBuilder.loadTexts: upsShutdownType.setDescription('Setting this object will start the output after the indicated number of seconds. Setting this object to 0 will cause the UPS to start the output immediately. If the output is already on at the time the delay has counted down, nothing will happen.')
upsShutdownAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsShutdownAfterDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsShutdownAfterDelay.setDescription('Setting this object will shutdown (i.e., turn off) either the UPS output or the UPS system (as determined by the value of upsShhutdownType at the time of shutdown) after the indicated number of seconds, or less if the UPS batteries become depleted. Setting this object to 0 will cause the shutdown to occur immediately. Setting this object to -1 will abort the countdown. If the system is already in the desired state at the time the countdown reaches 0, then nothing will happen. That is, there is no additional action at that time if upsShutdownType = system and the system is already off. Similarly, there is no additional action at that time if upsShutdownType = output and the output is already off. When read, upsShutdownAfterDelay will return the number of seconds remaining until shutdown, or -1 if no shutdown countdown is in effect. On some systems, if the agent is restarted while a shutdown countdown is in effect, the countdown may be aborted. Sets to this object override any upsShutdownAfterDelay already in effect. UNITS seconds')
upsStartupAfterDelay = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsStartupAfterDelay.setStatus('mandatory')
if mibBuilder.loadTexts: upsStartupAfterDelay.setDescription('Setting this object will start the output after the indicated number of seconds, includeing starting the UPS, if necessary. Setting this object to 0 will cause the start to occur immediately. Setting this object to -1 will abort the countdown. If the output is already on at the time the countdown reaches 0, nothing will happen. Sets to this object override the effect of any upsStartupAfterDelay countdown or upsRebootDuration countdown in progress. When read, upsStartupAfterDelay will return the number of seconds until start, or -1 if no startup countdown is in effect. If the countdown expires during a utility failure, the startup shall depend upon the value of upsAutoRestart at that time. On some systems, if the agent is restarted while a startup countdown is in effect, the countdown is aborted. UNITS seconds')
upsRebootDuration = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsRebootDuration.setStatus('mandatory')
if mibBuilder.loadTexts: upsRebootDuration.setDescription('Setting this object will immediately shutdown (i.e., turn off) either the UPS output or the UPS system (as determined by the value of the upsShutdownType at the time of shutdown) for a period equal to the indicated number of seconds, after which time the output will be started, including starting the UPS, if necessary. If the number of seconds required to perform the request is greater than the requested duration, then the requested shutdown and startup cycle shall be performed in the minimum time possible, but in no case shall this require more than the requested duration plus 60 seconds. When read, upsRebootDuration shall return the number of seconds remaining in the countdown, or -1 if no countdown is in progress. If the startup should occur during a utility failure, the startup shall depend on the value of upsAutoRestart at that time. UNITS seconds')
upsAutoRestart = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAutoRestart.setStatus('mandatory')
if mibBuilder.loadTexts: upsAutoRestart.setDescription("Setting this object to 'on' will cause the UPS system to restart after a shutdown if/when utility power is present.")
upsConfigInputVoltageHigh = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 10, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigInputVoltageHigh.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigInputVoltageHigh.setDescription('If the value of the input voltage (in Volts) exceeds this value, a utilityVoltageHigh trap will be triggered.')
upsConfigInputVoltageLow = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 10, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigInputVoltageLow.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigInputVoltageLow.setDescription('If the value of the input voltage (in Volts) falls below this value, a utilityVoltageLow trap will be triggered.')
upsConfigOutputPercLoadHigh = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 10, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigOutputPercLoadHigh.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigOutputPercLoadHigh.setDescription('If the value of the output percent load exceeds this value, a upsOverload trap will be triggered.')
upsConfigBatteryPercLow = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 10, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigBatteryPercLow.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigBatteryPercLow.setDescription('If the value of the battery percent capacity falls below this value, a lowBattery trap will be triggered.')
upsConfigBatteryTemperatureHigh = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 10, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigBatteryTemperatureHigh.setStatus('mandatory')
if mibBuilder.loadTexts: upsConfigBatteryTemperatureHigh.setDescription('If the value of the battery temperature exceeds this value, a batteryTemperatureHigh trap will be triggered.')
upsOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,5)).setObjects(("TRIPPUPS1-MIB", "upsIdentAttachedDevices"), ("TRIPPUPS1-MIB", "upsEstimatedMinutesRemaining"))
if mibBuilder.loadTexts: upsOnBattery.setDescription('The UPS is on battery.')
powerRestored = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,6))
if mibBuilder.loadTexts: powerRestored.setDescription('Utility power has been restored.')
lowBattery = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,7))
if mibBuilder.loadTexts: lowBattery.setDescription('The UPS batteries are low and will soon be exhausted.')
returnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,8))
if mibBuilder.loadTexts: returnFromLowBattery.setDescription('The UPS has returned from a low battery condition.')
communicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,9))
if mibBuilder.loadTexts: communicationEstablished.setDescription('Communication with the UPS has been established. This trap will be sent each time there is a transition from a power off condition to a power on condition.')
communicationLost = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,10))
if mibBuilder.loadTexts: communicationLost.setDescription('Communication with the UPS has been lost.')
upsOverload = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,11))
if mibBuilder.loadTexts: upsOverload.setDescription('The UPS has sensed a load greater than the value of the upsConfigOutputPercLoadHigh MIB variable.')
upsDiagnosticsFailed = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,12))
if mibBuilder.loadTexts: upsDiagnosticsFailed.setDescription('The UPS failed its self-test.')
upsDiagnosticsPassed = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,13))
if mibBuilder.loadTexts: upsDiagnosticsPassed.setDescription('The UPS passed its internal self-test.')
utilityVoltageHigh = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,14))
if mibBuilder.loadTexts: utilityVoltageHigh.setDescription('The UPS input voltage greater than or equal to the value of the upsConfigInputVoltageHigh MIB variable.')
utilityVoltageLow = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,15))
if mibBuilder.loadTexts: utilityVoltageLow.setDescription('The UPS input voltage is less than or equal to the value of the upsConfigInputVoltageLow MIB variable.')
utilityVoltageReturnToNormal = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,16))
if mibBuilder.loadTexts: utilityVoltageReturnToNormal.setDescription('The UPS has returned from a utility voltage high or low condition.')
batteryTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,17))
if mibBuilder.loadTexts: batteryTemperatureHigh.setDescription('The UPS battery temperature has exceeded the value of the upsConfigBatteryTemperatureHigh MIB variable.')
shutdownPending = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,18))
if mibBuilder.loadTexts: shutdownPending.setDescription('A UPS shutdown countdown is underway.')
upsSleeping = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,19))
if mibBuilder.loadTexts: upsSleeping.setDescription('The output of the UPS has been turned off.')
upsWokeup = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,20))
if mibBuilder.loadTexts: upsWokeup.setDescription('The output of the UPS has been turned on.')
upsBatteryNeedsReplacement = NotificationType((1, 3, 6, 1, 4, 1, 850) + (0,21))
if mibBuilder.loadTexts: upsBatteryNeedsReplacement.setDescription('The UPS battery needs to be replaced.')
mibBuilder.exportSymbols("TRIPPUPS1-MIB", upsStartupAfterDelay=upsStartupAfterDelay, upsOutputNumLines=upsOutputNumLines, upsAlarm=upsAlarm, upsInputLineBads=upsInputLineBads, upsAlarmOutputOffAsRequested=upsAlarmOutputOffAsRequested, upsAlarmDepletedBattery=upsAlarmDepletedBattery, upsOnBattery=upsOnBattery, upsAutoRestart=upsAutoRestart, upsDiagnosticsFailed=upsDiagnosticsFailed, utilityVoltageLow=utilityVoltageLow, upsOverload=upsOverload, upsAlarmEntry=upsAlarmEntry, upsAlarmTestInProgress=upsAlarmTestInProgress, communicationEstablished=communicationEstablished, upsBatteryChargeRemaining=upsBatteryChargeRemaining, upsOutputFrequency=upsOutputFrequency, upsTestId=upsTestId, upsConfig=upsConfig, upsAlarmOutputOverload=upsAlarmOutputOverload, upsConfigInputVoltageLow=upsConfigInputVoltageLow, upsInputTable=upsInputTable, utilityVoltageReturnToNormal=utilityVoltageReturnToNormal, upsBatteryStatus=upsBatteryStatus, upsAlarmCommunicationsLost=upsAlarmCommunicationsLost, upsIdentModel=upsIdentModel, upsInputEntry=upsInputEntry, upsBattery=upsBattery, upsAlarmBatteryBad=upsAlarmBatteryBad, upsConfigBatteryTemperatureHigh=upsConfigBatteryTemperatureHigh, upsAlarmDESCR=upsAlarmDESCR, upsIdentName=upsIdentName, upsAlarmLowBattery=upsAlarmLowBattery, upsInputNumLines=upsInputNumLines, tripplite=tripplite, trippUPS1=trippUPS1, upsInputFrequency=upsInputFrequency, upsOutputSource=upsOutputSource, upsEstimatedMinutesRemaining=upsEstimatedMinutesRemaining, upsInputLineIndex=upsInputLineIndex, ups=ups, upsAlarmDiagnosticTestFailed=upsAlarmDiagnosticTestFailed, upsAlarmId=upsAlarmId, upsIdent=upsIdent, upsOutputPercLoad=upsOutputPercLoad, returnFromLowBattery=returnFromLowBattery, batteryTemperatureHigh=batteryTemperatureHigh, upsDiagnosticsPassed=upsDiagnosticsPassed, lowBattery=lowBattery, upsIdentAgentSoftwareVersion=upsIdentAgentSoftwareVersion, upsIdentAttachedDevices=upsIdentAttachedDevices, upsControl=upsControl, upsTestResultsSummary=upsTestResultsSummary, upsBatteryNeedsReplacement=upsBatteryNeedsReplacement, upsOutputCurrent=upsOutputCurrent, upsIdentManufacturer=upsIdentManufacturer, upsOutputLineIndex=upsOutputLineIndex, upsRebootDuration=upsRebootDuration, upsOutputVoltage=upsOutputVoltage, upsOutputPower=upsOutputPower, upsShutdownType=upsShutdownType, upsWokeup=upsWokeup, upsOutputTable=upsOutputTable, upsAlarmTempBad=upsAlarmTempBad, utilityVoltageHigh=utilityVoltageHigh, upsConfigInputVoltageHigh=upsConfigInputVoltageHigh, shutdownPending=shutdownPending, upsAlarmOnBattery=upsAlarmOnBattery, upsTest=upsTest, upsSleeping=upsSleeping, upsConfigBatteryPercLow=upsConfigBatteryPercLow, upsInputVolt=upsInputVolt, upsConfigOutputPercLoadHigh=upsConfigOutputPercLoadHigh, upsAlarmDescr=upsAlarmDescr, powerRestored=powerRestored, upsAlarmShutdownPending=upsAlarmShutdownPending, upsAlarmID=upsAlarmID, upsInputVoltage=upsInputVoltage, upsShutdownAfterDelay=upsShutdownAfterDelay, upsAlarmTable=upsAlarmTable, upsSecondsOnBattery=upsSecondsOnBattery, upsBatteryVoltage=upsBatteryVoltage, upsOutputPercentLoad=upsOutputPercentLoad, upsWellKnownAlarms=upsWellKnownAlarms, upsAlarmTime=upsAlarmTime, upsIdentUPSSoftwareVersion=upsIdentUPSSoftwareVersion, communicationLost=communicationLost, upsOutputEntry=upsOutputEntry, upsInput=upsInput, upsAlarmShutdownImminent=upsAlarmShutdownImminent, upsBatteryTemperature=upsBatteryTemperature, upsOutput=upsOutput, upsAlarmUpsOutputOff=upsAlarmUpsOutputOff, upsAlarmsPresent=upsAlarmsPresent)
