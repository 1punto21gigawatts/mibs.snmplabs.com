#
# PySNMP MIB module RAPID-CITY-BAY-STACK (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RAPID-CITY-BAY-STACK
# Produced by pysmi-0.3.4 at Wed May  1 14:51:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
rcBayStack, = mibBuilder.importSymbols("RAPID-CITY", "rcBayStack")
rcMltId, = mibBuilder.importSymbols("RC-MLT-MIB", "rcMltId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, MibIdentifier, Counter32, TimeTicks, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, Integer32, iso, Counter64, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "Counter32", "TimeTicks", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "Integer32", "iso", "Counter64", "Unsigned32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rcBayStackMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2272, 40, 1))
rcBayStackMIB.setRevisions(('2007-12-14 00:00', '2004-09-29 00:00', '2004-07-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rcBayStackMIB.setRevisionsDescriptions(('Version 7: Added IPv6 support.', 'Version 6: Fixed IMPORTS, RAPID-CITY-MIB to RAPID-CITY', 'Version 5: Added version info',))
if mibBuilder.loadTexts: rcBayStackMIB.setLastUpdated('200712140000Z')
if mibBuilder.loadTexts: rcBayStackMIB.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: rcBayStackMIB.setContactInfo(' Postal: Nortel Networks 4401 Great America Parkway Santa Clara, CA 95052-8185 Tel: Fax: E-mail: ')
if mibBuilder.loadTexts: rcBayStackMIB.setDescription('BayStack specific portion of RAPID-CITY-MIB.')
rcBayStackObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1))
rcBayStackTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 40, 1, 21))
rcBayStackTraps0 = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 40, 1, 21, 0))
rcBayStackTftpExt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 1))
rcBayStackTftpAction = MibScalar((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("downloadSshPublicKeys", 2), ("deleteSshDsaAuthKey", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcBayStackTftpAction.setStatus('current')
if mibBuilder.loadTexts: rcBayStackTftpAction.setDescription('This object may be set to initiate a TFTP download of SSH public keys. When retrieved, the value will always be none(1).')
rcBayStackSshSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 2), )
if mibBuilder.loadTexts: rcBayStackSshSessionTable.setStatus('current')
if mibBuilder.loadTexts: rcBayStackSshSessionTable.setDescription('Table describing the SSH sessions')
rcBayStackSshSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 2, 1), ).setIndexNames((0, "RAPID-CITY-BAY-STACK", "rcBayStackSshSessionId"))
if mibBuilder.loadTexts: rcBayStackSshSessionEntry.setStatus('current')
if mibBuilder.loadTexts: rcBayStackSshSessionEntry.setDescription('An entry describing an SSH session.')
rcBayStackSshSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: rcBayStackSshSessionId.setStatus('current')
if mibBuilder.loadTexts: rcBayStackSshSessionId.setDescription('Session ID')
rcBayStackSshSessionIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcBayStackSshSessionIp.setStatus('current')
if mibBuilder.loadTexts: rcBayStackSshSessionIp.setDescription('IPv4 address of SSH client that opened the session. If the value of rcBayStackSshSessionInetAddressType is not ipv4(1), then the value of this object must be 0.0.0.0.')
rcBayStackSshSessionInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcBayStackSshSessionInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rcBayStackSshSessionInetAddressType.setDescription('This object indicates the type of address stored in the corresponding instance of rcBayStackSshSessionInetAddress.')
rcBayStackSshSessionInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcBayStackSshSessionInetAddress.setStatus('current')
if mibBuilder.loadTexts: rcBayStackSshSessionInetAddress.setDescription('This object contains the IP address of the SSH client that opened the SSH session. The type of IP address contained in this object is specified by the corresponding instance of rcBayStackSshSessionInetAddressType.')
rcBayStackSshExt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 3))
rcBayStackSshDsaHostKeyStatus = MibScalar((1, 3, 6, 1, 4, 1, 2272, 40, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notGenerated", 1), ("generated", 2), ("generating", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcBayStackSshDsaHostKeyStatus.setStatus('current')
if mibBuilder.loadTexts: rcBayStackSshDsaHostKeyStatus.setDescription('This object indicates the current status of the SSH DSA host key. If the DSA host key has not yet been generated, the value will be notGenerated(1). If it has already been generated, the value will be generated(2). If it is currently being generated, the value will be generating(3).')
rcMltConfigError = NotificationType((1, 3, 6, 1, 4, 1, 2272, 40, 1, 21, 0, 1)).setObjects(("RC-MLT-MIB", "rcMltId"))
if mibBuilder.loadTexts: rcMltConfigError.setStatus('current')
if mibBuilder.loadTexts: rcMltConfigError.setDescription('An rcMltConfigError trap indicates that one of the ports in a multi-link trunk was connected to a remote port that was not also configured as a trunk. The trap indicates that the specified trunk has also been automatically disabled.')
mibBuilder.exportSymbols("RAPID-CITY-BAY-STACK", rcBayStackSshSessionEntry=rcBayStackSshSessionEntry, rcBayStackSshSessionInetAddress=rcBayStackSshSessionInetAddress, rcBayStackSshSessionTable=rcBayStackSshSessionTable, PYSNMP_MODULE_ID=rcBayStackMIB, rcBayStackTraps0=rcBayStackTraps0, rcMltConfigError=rcMltConfigError, rcBayStackTraps=rcBayStackTraps, rcBayStackSshExt=rcBayStackSshExt, rcBayStackSshSessionInetAddressType=rcBayStackSshSessionInetAddressType, rcBayStackSshSessionId=rcBayStackSshSessionId, rcBayStackMIB=rcBayStackMIB, rcBayStackTftpAction=rcBayStackTftpAction, rcBayStackSshDsaHostKeyStatus=rcBayStackSshDsaHostKeyStatus, rcBayStackObjects=rcBayStackObjects, rcBayStackSshSessionIp=rcBayStackSshSessionIp, rcBayStackTftpExt=rcBayStackTftpExt)
