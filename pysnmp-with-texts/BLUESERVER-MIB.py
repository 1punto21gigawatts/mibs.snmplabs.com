#
# PySNMP MIB module BLUESERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BLUESERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:39:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, IpAddress, MibIdentifier, Unsigned32, TimeTicks, NotificationType, ModuleIdentity, Counter64, Gauge32, Bits, enterprises, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "MibIdentifier", "Unsigned32", "TimeTicks", "NotificationType", "ModuleIdentity", "Counter64", "Gauge32", "Bits", "enterprises", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
DisplayString, DateAndTime, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention", "RowStatus")
blueSocket = ModuleIdentity((1, 3, 6, 1, 4, 1, 9967))
if mibBuilder.loadTexts: blueSocket.setLastUpdated('200303100000Z')
if mibBuilder.loadTexts: blueSocket.setOrganization('Bluesocket Inc.')
if mibBuilder.loadTexts: blueSocket.setContactInfo(' Suresh Gandhi Bluesocket, Inc. Burlington, MA 01803 sgandhi@bluesocket.com ')
if mibBuilder.loadTexts: blueSocket.setDescription('This MIB is DRAFT-ONLY and is subject to change. Management Information Base for Blueserver.')
blueServer = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1))
blueNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 2))
users = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 1))
destination = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 3))
service = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 4))
policy = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 5))
vpn = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 6))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 7))
interface = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 8))
replication = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 9))
connection = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 10))
roles = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 11))
serviceMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 12))
statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 13))
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 14))
schedule = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 15))
nativeUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 1, 1))
adminUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 1, 2))
ipsec = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1))
pptp = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 6, 2))
subnetVpn = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 6, 3))
certificate = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4))
l2tp = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 6, 5))
http = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1))
misc = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 7, 2))
autoBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 7, 3))
time = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 7, 4))
mobility = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 7, 5))
publicAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 7, 6))
confLog = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 7, 7))
snmpConf = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 7, 8))
systemTracker = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 7, 9))
authentication = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10))
failover = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 8, 3))
managed = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4))
protected = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5))
userSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 13, 1))
systemStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 13, 2))
confLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 7, 7, 1))
snmpTrapConf = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 7, 8, 1))
exAuthServer = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1))
notifyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 2, 1))
blueTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 2, 2))
blueConfigTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 2, 2, 1))
blueFailureTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 2, 2, 2))
blueThresholdTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 2, 2, 3))
blueGeneralTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 2, 2, 4))
class BlueIpAddress(TextualConvention, OctetString):
    description = ''
    status = 'current'
    displayHint = '1d.1d.1d.1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(7, 15)

class BlueMacAddress(TextualConvention, OctetString):
    description = ''
    status = 'current'
    displayHint = '1x:1x:1x:1x:1x:1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(17, 17)
    fixedLength = 17

class LocalDateAndTime(TextualConvention, OctetString):
    description = ''
    status = 'current'
    displayHint = ''
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

nativeUserTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 1, 1, 1), )
if mibBuilder.loadTexts: nativeUserTable.setStatus('current')
if mibBuilder.loadTexts: nativeUserTable.setDescription('A list of nativeUser entries.')
nativeUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 1, 1, 1, 1), ).setIndexNames((0, "BLUESERVER-MIB", "nativeUserId"))
if mibBuilder.loadTexts: nativeUserEntry.setStatus('current')
if mibBuilder.loadTexts: nativeUserEntry.setDescription('A nativeUser entry containing information about a particular nativeUser.')
nativeUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nativeUserId.setStatus('current')
if mibBuilder.loadTexts: nativeUserId.setDescription('A unique id for each nativeUser.')
nativeUserAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nativeUserAccess.setStatus('current')
if mibBuilder.loadTexts: nativeUserAccess.setDescription('To Enable/disable an nativeUser.')
nativeUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nativeUserName.setStatus('current')
if mibBuilder.loadTexts: nativeUserName.setDescription('A unique Name for each nativeUser')
nativeUserRoleId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nativeUserRoleId.setStatus('current')
if mibBuilder.loadTexts: nativeUserRoleId.setDescription('The role Id associated with this nativeUser')
nativeUserEmailId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nativeUserEmailId.setStatus('current')
if mibBuilder.loadTexts: nativeUserEmailId.setDescription('The Email address of the nativeUser')
nativeUserFixedIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 1, 1, 1, 6), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nativeUserFixedIpAddr.setStatus('current')
if mibBuilder.loadTexts: nativeUserFixedIpAddr.setDescription('Required for users connecting using the Windows 2000 IPSec client')
nativeUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nativeUserPassword.setStatus('current')
if mibBuilder.loadTexts: nativeUserPassword.setDescription('The nativeUser password')
nativeUserNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nativeUserNotes.setStatus('current')
if mibBuilder.loadTexts: nativeUserNotes.setDescription('Notes')
nativeUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nativeUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: nativeUserRowStatus.setDescription('The Row status attribute for row handling')
nativeUserRadAcctServId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nativeUserRadAcctServId.setStatus('current')
if mibBuilder.loadTexts: nativeUserRadAcctServId.setDescription('The row id from exRadAcctServTable for the selected radius accounting server.')
adminUserTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 1, 2, 1), )
if mibBuilder.loadTexts: adminUserTable.setStatus('current')
if mibBuilder.loadTexts: adminUserTable.setDescription('A list of adminUser entries.')
adminUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 1, 2, 1, 1), ).setIndexNames((0, "BLUESERVER-MIB", "adminUserId"))
if mibBuilder.loadTexts: adminUserEntry.setStatus('current')
if mibBuilder.loadTexts: adminUserEntry.setDescription('An adminUser entry containing information about a particular adminUser.')
adminUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: adminUserId.setStatus('current')
if mibBuilder.loadTexts: adminUserId.setDescription('A unique value for each adminUser.')
adminUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adminUserStatus.setStatus('current')
if mibBuilder.loadTexts: adminUserStatus.setDescription('To Enable/disable an adminUser.')
adminUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adminUserName.setStatus('current')
if mibBuilder.loadTexts: adminUserName.setDescription('A unique name for each admin user')
adminUserAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("intermediate", 2), ("readOnly", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adminUserAccess.setStatus('current')
if mibBuilder.loadTexts: adminUserAccess.setDescription('Admin user access level full - have all complete access intermediate - the adUsrAccessTable decides the access level of this admin user. readonly - Readonly access')
adminUserEmailId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adminUserEmailId.setStatus('current')
if mibBuilder.loadTexts: adminUserEmailId.setDescription('The email address of the admin user')
adminUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adminUserPassword.setStatus('current')
if mibBuilder.loadTexts: adminUserPassword.setDescription('The adminUser password. Get and getnext request on this object returns encrypted password value')
adminUserNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adminUserNotes.setStatus('current')
if mibBuilder.loadTexts: adminUserNotes.setDescription('Admin user notes')
adminUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 2, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adminUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: adminUserRowStatus.setDescription('The Row status attribute for row handling')
adUsrAccessTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3), )
if mibBuilder.loadTexts: adUsrAccessTable.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessTable.setDescription('A list of adUsrAccess entries.')
adUsrAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1), ).setIndexNames((0, "BLUESERVER-MIB", "adminUserId"))
if mibBuilder.loadTexts: adUsrAccessEntry.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessEntry.setDescription(" Extended table from adminUserTable. The values from adminUserAccess column take higher precedence and this table entry will be considered only when the adminUserAccess column from adminUserTable has a value of 'intermediate'. This table is to configure the various level of administrator privilages. This is mainly for admin who try to manage BSCs using Web interfaces. Every column in this table correspond to a tab name in web interface. So choosing enable/disable will grant/deny access to the administrator user for the corresponding tabs. Note: The administrator with the username as 'admin have all access and considered as the the super user for BSCs")
adUsrAccessAdminUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adUsrAccessAdminUser.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessAdminUser.setDescription('To grant/deny access to manage administrator users.')
adUsrAccessNativeUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adUsrAccessNativeUser.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessNativeUser.setDescription('To grant/deny access to manage native/local users.')
adUsrAccessExServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adUsrAccessExServer.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessExServer.setDescription('To grant/deny access to manage external servers.')
adUsrAccessAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adUsrAccessAccounting.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessAccounting.setDescription('To grant/deny access to manage accounting server')
adUsrAccessRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adUsrAccessRoles.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessRoles.setDescription('To grant/deny access to manage roles.')
adUsrAccessDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adUsrAccessDestination.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessDestination.setDescription('To grant/deny access to manage Destinations.')
adUsrAccessServices = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adUsrAccessServices.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessServices.setDescription('To grant/deny access to manage Services.')
adUsrAccessVpn = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adUsrAccessVpn.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessVpn.setDescription('To grant/deny access to manage Vpn.')
adUsrAccessConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adUsrAccessConfiguration.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessConfiguration.setDescription('To grant/deny access to manage Configuration.')
adUsrAccessNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adUsrAccessNetwork.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessNetwork.setDescription('To grant/deny access to manage Network.')
adUsrAccessReplication = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adUsrAccessReplication.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessReplication.setDescription('To grant/deny access to manage replication.')
adUsrAccessMaintance = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adUsrAccessMaintance.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessMaintance.setDescription('To grant/deny access to manage administrator users ')
adUsrAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adUsrAccessStatus.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessStatus.setDescription('To grant/deny access to manage status information ')
adUsrAccessVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adUsrAccessVlans.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessVlans.setDescription('To grant/deny access to manage vlans ')
adUsrAccessSchedules = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adUsrAccessSchedules.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessSchedules.setDescription('The Row status attribute for row handling')
adUsrAccessMacDev = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adUsrAccessMacDev.setStatus('current')
if mibBuilder.loadTexts: adUsrAccessMacDev.setDescription('To grant/deny access to manage mac device external authentication servers')
exRdAuthServTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 2), )
if mibBuilder.loadTexts: exRdAuthServTable.setStatus('current')
if mibBuilder.loadTexts: exRdAuthServTable.setDescription('A table to hold information about external Raduis server.')
exRdAuthServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 2, 1), ).setIndexNames((0, "BLUESERVER-MIB", "exRdAuthServId"))
if mibBuilder.loadTexts: exRdAuthServEntry.setStatus('current')
if mibBuilder.loadTexts: exRdAuthServEntry.setDescription('')
exRdAuthServId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: exRdAuthServId.setStatus('current')
if mibBuilder.loadTexts: exRdAuthServId.setDescription('Unique Id for each entry in this table')
exRdAuthServState = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAuthServState.setStatus('current')
if mibBuilder.loadTexts: exRdAuthServState.setDescription('To Enable/Disable an external radius server')
exRdAuthServName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 2, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAuthServName.setStatus('current')
if mibBuilder.loadTexts: exRdAuthServName.setDescription('A unique external radius server name.')
exRdAuthServDefRoleId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAuthServDefRoleId.setStatus('current')
if mibBuilder.loadTexts: exRdAuthServDefRoleId.setDescription('Default role Id for external server users. Should be an existing roleId from roleTable')
exRdAuthServRdAccId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 2, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAuthServRdAccId.setStatus('current')
if mibBuilder.loadTexts: exRdAuthServRdAccId.setDescription('For accounting logging with authentication. Should be an existing exRdAccServId from exRdAccServTable')
exRdAuthServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 2, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAuthServAddr.setStatus('current')
if mibBuilder.loadTexts: exRdAuthServAddr.setDescription('Radius server Ip address or DNS name')
exRdAuthServPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 2, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAuthServPort.setStatus('current')
if mibBuilder.loadTexts: exRdAuthServPort.setDescription('Radius server port number')
exRdAuthServSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 2, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAuthServSecret.setStatus('current')
if mibBuilder.loadTexts: exRdAuthServSecret.setDescription('Shared secret')
exRdAuthServPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 2, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAuthServPrecedence.setStatus('current')
if mibBuilder.loadTexts: exRdAuthServPrecedence.setDescription("The server's precedence for verifying username/passwords")
exRdAuthServNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 2, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAuthServNotes.setStatus('current')
if mibBuilder.loadTexts: exRdAuthServNotes.setDescription('Notes')
exRdAuthServRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAuthServRowStatus.setStatus('current')
if mibBuilder.loadTexts: exRdAuthServRowStatus.setDescription('The Row status attribute for row handling')
exLdapServTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3), )
if mibBuilder.loadTexts: exLdapServTable.setStatus('current')
if mibBuilder.loadTexts: exLdapServTable.setDescription('list of LDAP external servers.')
exLdapServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1), ).setIndexNames((0, "BLUESERVER-MIB", "exLdapServId"))
if mibBuilder.loadTexts: exLdapServEntry.setStatus('current')
if mibBuilder.loadTexts: exLdapServEntry.setDescription('')
exLdapServId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: exLdapServId.setStatus('current')
if mibBuilder.loadTexts: exLdapServId.setDescription('Unique Id for each entry in this table')
exLdapServState = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServState.setStatus('current')
if mibBuilder.loadTexts: exLdapServState.setDescription('To Enable/Disable an external Ldap authentication server')
exLdapServName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServName.setStatus('current')
if mibBuilder.loadTexts: exLdapServName.setDescription('A unique external server name')
exLdapServDefRoleId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServDefRoleId.setStatus('current')
if mibBuilder.loadTexts: exLdapServDefRoleId.setDescription('Default role for external server users')
exLdapServRdAccState = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServRdAccState.setStatus('current')
if mibBuilder.loadTexts: exLdapServRdAccState.setDescription('')
exLdapServRdAccId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServRdAccId.setStatus('current')
if mibBuilder.loadTexts: exLdapServRdAccId.setDescription('For accounting logging with authentication')
exLdapServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServAddr.setStatus('current')
if mibBuilder.loadTexts: exLdapServAddr.setDescription('LDAP server Ip address or DNS name')
exLdapServPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServPort.setStatus('current')
if mibBuilder.loadTexts: exLdapServPort.setDescription('LDAP server port number')
exLdapServBase = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServBase.setStatus('current')
if mibBuilder.loadTexts: exLdapServBase.setDescription('LDAP server Base entry. An example base entry is dc=example, dc=com')
exLdapServUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServUniqueId.setStatus('current')
if mibBuilder.loadTexts: exLdapServUniqueId.setDescription('LDAP server Unique Id. An example Unique ID attribute is uid.')
exLdapServAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServAccount.setStatus('current')
if mibBuilder.loadTexts: exLdapServAccount.setDescription('')
exLdapServFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServFilters.setStatus('current')
if mibBuilder.loadTexts: exLdapServFilters.setDescription('Additional LDAP filters used when looking up Unique ID attribute. An example is objectClass=Person')
exLdapServSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServSecret.setStatus('current')
if mibBuilder.loadTexts: exLdapServSecret.setDescription('LDAP external server secret base entry')
exLdapServPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServPrecedence.setStatus('current')
if mibBuilder.loadTexts: exLdapServPrecedence.setDescription('The precedence this server has for verifying username/passwords')
exLdapServNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 15), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServNotes.setStatus('current')
if mibBuilder.loadTexts: exLdapServNotes.setDescription('Notes')
exLdapServSsl = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServSsl.setStatus('current')
if mibBuilder.loadTexts: exLdapServSsl.setDescription('')
exLdapServSslServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServSslServer.setStatus('current')
if mibBuilder.loadTexts: exLdapServSslServer.setDescription('')
exLdapServSslClient = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServSslClient.setStatus('current')
if mibBuilder.loadTexts: exLdapServSslClient.setDescription('')
exLdapServRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 3, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exLdapServRowStatus.setStatus('current')
if mibBuilder.loadTexts: exLdapServRowStatus.setDescription('The Row status attribute for row handling')
exNtlmServTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 4), )
if mibBuilder.loadTexts: exNtlmServTable.setStatus('current')
if mibBuilder.loadTexts: exNtlmServTable.setDescription('A list of NTLM external authentication server entries.')
exNtlmServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 4, 1), ).setIndexNames((0, "BLUESERVER-MIB", "exNtlmServId"))
if mibBuilder.loadTexts: exNtlmServEntry.setStatus('current')
if mibBuilder.loadTexts: exNtlmServEntry.setDescription('')
exNtlmServId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: exNtlmServId.setStatus('current')
if mibBuilder.loadTexts: exNtlmServId.setDescription('Unique Id for each entry in this table')
exNtlmServState = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exNtlmServState.setStatus('current')
if mibBuilder.loadTexts: exNtlmServState.setDescription('To Enable/Disable an external NTLM server')
exNtlmServName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 4, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exNtlmServName.setStatus('current')
if mibBuilder.loadTexts: exNtlmServName.setDescription('A unique external server name')
exNtlmServRdAccState = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exNtlmServRdAccState.setStatus('current')
if mibBuilder.loadTexts: exNtlmServRdAccState.setDescription('')
exNtlmServRdAccId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 4, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exNtlmServRdAccId.setStatus('current')
if mibBuilder.loadTexts: exNtlmServRdAccId.setDescription('For accounting logging with authentication')
exNtlmServDefRoleId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exNtlmServDefRoleId.setStatus('current')
if mibBuilder.loadTexts: exNtlmServDefRoleId.setDescription('Default role Id for external server users. Should be an existing exRdAccServId from exRdAccServTable')
exNtlmServDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 4, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exNtlmServDomainName.setStatus('current')
if mibBuilder.loadTexts: exNtlmServDomainName.setDescription('Optional NT Domain Name to match')
exNtlmServMsdc = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 4, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exNtlmServMsdc.setStatus('current')
if mibBuilder.loadTexts: exNtlmServMsdc.setDescription('List of IP addresses of domain controllers ')
exNtlmServMsrpc = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 4, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exNtlmServMsrpc.setStatus('current')
if mibBuilder.loadTexts: exNtlmServMsrpc.setDescription('List of port range for MSRPC separated by comma')
exNtlmServMsad = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 4, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exNtlmServMsad.setStatus('current')
if mibBuilder.loadTexts: exNtlmServMsad.setDescription(' ')
exNtlmServNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 4, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exNtlmServNotes.setStatus('current')
if mibBuilder.loadTexts: exNtlmServNotes.setDescription('Notes')
exNtlmServRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 4, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exNtlmServRowStatus.setStatus('current')
if mibBuilder.loadTexts: exNtlmServRowStatus.setDescription('The Row status attribute for row handling')
exUserRuleTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 5), )
if mibBuilder.loadTexts: exUserRuleTable.setStatus('current')
if mibBuilder.loadTexts: exUserRuleTable.setDescription('When a user successfully authenticates against the external server the following rules are checked in numerical order. If a rule matches then the user is assigned the role, and no further rule is checked. If no rules match, the user is assigned the default role')
exUserRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 5, 1), ).setIndexNames((0, "BLUESERVER-MIB", "exServId"), (0, "BLUESERVER-MIB", "exUserRuleId"))
if mibBuilder.loadTexts: exUserRuleEntry.setStatus('current')
if mibBuilder.loadTexts: exUserRuleEntry.setDescription('')
exServId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: exServId.setStatus('current')
if mibBuilder.loadTexts: exServId.setDescription('First index of this table. This index value should match any of external authentication servers table index. Eg: Radius or ldap or ntlm or 802_1x authentication servers')
exUserRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: exUserRuleId.setStatus('current')
if mibBuilder.loadTexts: exUserRuleId.setDescription('index')
exUserRuleAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exUserRuleAttribute.setStatus('current')
if mibBuilder.loadTexts: exUserRuleAttribute.setDescription('The name of attributes that are be used for authentication')
exUserRuleOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exUserRuleOperator.setStatus('current')
if mibBuilder.loadTexts: exUserRuleOperator.setDescription('The logical operator that works along with the exUserRuleAttribute columnar attribute')
exUserRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exUserRuleValue.setStatus('current')
if mibBuilder.loadTexts: exUserRuleValue.setDescription('The attribute value')
exUserRuleRoleId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 5, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exUserRuleRoleId.setStatus('current')
if mibBuilder.loadTexts: exUserRuleRoleId.setDescription('The role id to be assigned for the given user if the rule matches')
exUserRuleSeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 5, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exUserRuleSeqId.setStatus('current')
if mibBuilder.loadTexts: exUserRuleSeqId.setDescription('The sequence to be followed when the rules are checked for user authentication')
exUserRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 5, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exUserRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: exUserRuleRowStatus.setDescription('The Row status attribute for row handling')
exRdAccServTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 6), )
if mibBuilder.loadTexts: exRdAccServTable.setStatus('current')
if mibBuilder.loadTexts: exRdAccServTable.setDescription('A table to hold information about external Raduis Accounting server.')
exRdAccServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 6, 1), ).setIndexNames((0, "BLUESERVER-MIB", "exRdAccServId"))
if mibBuilder.loadTexts: exRdAccServEntry.setStatus('current')
if mibBuilder.loadTexts: exRdAccServEntry.setDescription('')
exRdAccServId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: exRdAccServId.setStatus('current')
if mibBuilder.loadTexts: exRdAccServId.setDescription('Unique Id for each entry in this table')
exRdAccServState = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAccServState.setStatus('current')
if mibBuilder.loadTexts: exRdAccServState.setDescription('To Enable/Disable this external radius accounting server')
exRdAccServName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 6, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAccServName.setStatus('current')
if mibBuilder.loadTexts: exRdAccServName.setDescription('A unique external radius accounting server name')
exRdAccServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 6, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAccServAddr.setStatus('current')
if mibBuilder.loadTexts: exRdAccServAddr.setDescription('RADIUS accounting server Ip address or DNS name')
exRdAccServPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 6, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAccServPort.setStatus('current')
if mibBuilder.loadTexts: exRdAccServPort.setDescription('RADIUS server port number')
exRdAccServSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 6, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAccServSecret.setStatus('current')
if mibBuilder.loadTexts: exRdAccServSecret.setDescription('Shared secret')
exRdAccServNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 6, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAccServNotes.setStatus('current')
if mibBuilder.loadTexts: exRdAccServNotes.setDescription('Notes')
exRdAccServRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 6, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: exRdAccServRowStatus.setStatus('current')
if mibBuilder.loadTexts: exRdAccServRowStatus.setDescription('The Row status attribute for row handling')
ex802AuthServTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 7), )
if mibBuilder.loadTexts: ex802AuthServTable.setStatus('current')
if mibBuilder.loadTexts: ex802AuthServTable.setDescription('A table to hold information about external 802_1x auth server.')
ex802AuthServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 7, 1), ).setIndexNames((0, "BLUESERVER-MIB", "ex802AuthServId"))
if mibBuilder.loadTexts: ex802AuthServEntry.setStatus('current')
if mibBuilder.loadTexts: ex802AuthServEntry.setDescription('')
ex802AuthServId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ex802AuthServId.setStatus('current')
if mibBuilder.loadTexts: ex802AuthServId.setDescription('Unique Id for each entry in this table')
ex802AuthServState = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ex802AuthServState.setStatus('current')
if mibBuilder.loadTexts: ex802AuthServState.setDescription('To Enable/Disable an external server')
ex802AuthServName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 7, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ex802AuthServName.setStatus('current')
if mibBuilder.loadTexts: ex802AuthServName.setDescription('A unique external server name')
ex802AuthServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 7, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ex802AuthServAddr.setStatus('current')
if mibBuilder.loadTexts: ex802AuthServAddr.setDescription('802_1x server Ip address or DNS name')
ex802AuthServPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 7, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ex802AuthServPort.setStatus('current')
if mibBuilder.loadTexts: ex802AuthServPort.setDescription('802_1x server port number')
ex802AuthServDefaultRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 7, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ex802AuthServDefaultRole.setStatus('current')
if mibBuilder.loadTexts: ex802AuthServDefaultRole.setDescription('Default role Id')
ex802AuthServNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 7, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ex802AuthServNotes.setStatus('current')
if mibBuilder.loadTexts: ex802AuthServNotes.setDescription('Notes')
ex802AuthServRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 1, 7, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ex802AuthServRowStatus.setStatus('current')
if mibBuilder.loadTexts: ex802AuthServRowStatus.setDescription('The Row status attribute for row handling')
macDevAuthTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 2), )
if mibBuilder.loadTexts: macDevAuthTable.setStatus('current')
if mibBuilder.loadTexts: macDevAuthTable.setDescription('A table to hold information about external mac device auth server.')
macDevAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 2, 1), ).setIndexNames((0, "BLUESERVER-MIB", "macDevAuthId"))
if mibBuilder.loadTexts: macDevAuthEntry.setStatus('current')
if mibBuilder.loadTexts: macDevAuthEntry.setDescription('')
macDevAuthId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: macDevAuthId.setStatus('current')
if mibBuilder.loadTexts: macDevAuthId.setDescription('Unique Id for each entry in this table')
macDevAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDevAuthState.setStatus('current')
if mibBuilder.loadTexts: macDevAuthState.setDescription('To Enable/Disable an external mac device auth server')
macDevAuthName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 2, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDevAuthName.setStatus('current')
if mibBuilder.loadTexts: macDevAuthName.setDescription('A unique name')
macDevAuthMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 2, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDevAuthMac.setStatus('current')
if mibBuilder.loadTexts: macDevAuthMac.setDescription('Mac address of the host machine to be authenticated')
macDevAuthDefaultRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDevAuthDefaultRole.setStatus('current')
if mibBuilder.loadTexts: macDevAuthDefaultRole.setDescription('Default role Id')
macDevAuthNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 2, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDevAuthNotes.setStatus('current')
if mibBuilder.loadTexts: macDevAuthNotes.setDescription('Notes')
macDevAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 10, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macDevAuthRowStatus.setStatus('current')
if mibBuilder.loadTexts: macDevAuthRowStatus.setDescription('The Row status attribute for row handling')
hostTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 3, 1), )
if mibBuilder.loadTexts: hostTable.setStatus('current')
if mibBuilder.loadTexts: hostTable.setDescription('To define the destinations that wireless users can potentially access. Adestination can be a single device within a netwokr and/or all the devices reachable within address space')
hostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 3, 1, 1), ).setIndexNames((0, "BLUESERVER-MIB", "hostId"))
if mibBuilder.loadTexts: hostEntry.setStatus('current')
if mibBuilder.loadTexts: hostEntry.setDescription('')
hostId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hostId.setStatus('current')
if mibBuilder.loadTexts: hostId.setDescription('Table index')
hostName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hostName.setStatus('current')
if mibBuilder.loadTexts: hostName.setDescription('Unique name for every host or network')
hostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 3, 1, 1, 3), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hostAddress.setStatus('current')
if mibBuilder.loadTexts: hostAddress.setDescription('IP or FQDN (Fully Qualified Domain Name)')
hostNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 3, 1, 1, 4), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hostNetmask.setStatus('current')
if mibBuilder.loadTexts: hostNetmask.setDescription("Netmask for network entries. To be set to 255.255.255.255 if hostType is set to 'H'")
hostInvertDest = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hostInvertDest.setStatus('current')
if mibBuilder.loadTexts: hostInvertDest.setDescription(" 'N' Invert option is not selected (No) 'Y' Invert option is selected (Yes)")
hostType = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hostType.setStatus('current')
if mibBuilder.loadTexts: hostType.setDescription("The entry can be either a end host or a sub network. In case of host, the hostNetmask column is set to a default value of 255.255.255.255 'H' - Host 'N' - Network ")
hostNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 3, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hostNotes.setStatus('current')
if mibBuilder.loadTexts: hostNotes.setDescription('Notes')
hostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 3, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hostRowStatus.setStatus('current')
if mibBuilder.loadTexts: hostRowStatus.setDescription('The Row status attribute for row handling')
hostGrpTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 3, 2), )
if mibBuilder.loadTexts: hostGrpTable.setStatus('current')
if mibBuilder.loadTexts: hostGrpTable.setDescription('To define the destination Group.')
hostGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 3, 2, 1), ).setIndexNames((0, "BLUESERVER-MIB", "hostGrpId"))
if mibBuilder.loadTexts: hostGrpEntry.setStatus('current')
if mibBuilder.loadTexts: hostGrpEntry.setDescription('')
hostGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hostGrpId.setStatus('current')
if mibBuilder.loadTexts: hostGrpId.setDescription('Table index.')
hostGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hostGrpName.setStatus('current')
if mibBuilder.loadTexts: hostGrpName.setDescription('Unique name for every host Grp')
hostGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 3, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hostGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: hostGrpRowStatus.setDescription('The Row status attribute for row handling')
hostGrpMemTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 3, 3), )
if mibBuilder.loadTexts: hostGrpMemTable.setStatus('current')
if mibBuilder.loadTexts: hostGrpMemTable.setDescription('To define the destinations group members.')
hostGrpMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 3, 3, 1), ).setIndexNames((0, "BLUESERVER-MIB", "hostGrpId"), (0, "BLUESERVER-MIB", "hostGrpMemId"))
if mibBuilder.loadTexts: hostGrpMemEntry.setStatus('current')
if mibBuilder.loadTexts: hostGrpMemEntry.setDescription('')
hostGrpMemId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hostGrpMemId.setStatus('current')
if mibBuilder.loadTexts: hostGrpMemId.setDescription('Second index of the Table')
hostGrpMemRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 3, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hostGrpMemRowStatus.setStatus('current')
if mibBuilder.loadTexts: hostGrpMemRowStatus.setDescription('The Row status attribute for row handling')
serviceTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 4, 1), )
if mibBuilder.loadTexts: serviceTable.setStatus('current')
if mibBuilder.loadTexts: serviceTable.setDescription('A list of service entries.')
serviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 4, 1, 1), ).setIndexNames((0, "BLUESERVER-MIB", "serviceId"))
if mibBuilder.loadTexts: serviceEntry.setStatus('current')
if mibBuilder.loadTexts: serviceEntry.setDescription('List of services')
serviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: serviceId.setStatus('current')
if mibBuilder.loadTexts: serviceId.setDescription('Index')
serviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceName.setStatus('current')
if mibBuilder.loadTexts: serviceName.setDescription('Unique name for this service')
servicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: servicePort.setStatus('current')
if mibBuilder.loadTexts: servicePort.setDescription('')
serviceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceProtocol.setStatus('current')
if mibBuilder.loadTexts: serviceProtocol.setDescription('The port associated with this service')
serviceCosPriorityIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceCosPriorityIn.setStatus('current')
if mibBuilder.loadTexts: serviceCosPriorityIn.setDescription('Incoming priority')
serviceCosPriorityOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceCosPriorityOut.setStatus('current')
if mibBuilder.loadTexts: serviceCosPriorityOut.setDescription('Out going priority')
serviceCosDscpIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceCosDscpIn.setStatus('current')
if mibBuilder.loadTexts: serviceCosDscpIn.setDescription('Incoming DSCP value')
serviceCosDscpOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceCosDscpOut.setStatus('current')
if mibBuilder.loadTexts: serviceCosDscpOut.setDescription('Out going DSCP value')
serviceNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 4, 1, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceNotes.setStatus('current')
if mibBuilder.loadTexts: serviceNotes.setDescription('User notes')
serviceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 4, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceRowStatus.setStatus('current')
if mibBuilder.loadTexts: serviceRowStatus.setDescription('The Row status attribute for row handling')
serviceGrpTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 4, 2), )
if mibBuilder.loadTexts: serviceGrpTable.setStatus('current')
if mibBuilder.loadTexts: serviceGrpTable.setDescription('To define the sevice groups.')
serviceGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 4, 2, 1), ).setIndexNames((0, "BLUESERVER-MIB", "serviceGrpId"))
if mibBuilder.loadTexts: serviceGrpEntry.setStatus('current')
if mibBuilder.loadTexts: serviceGrpEntry.setDescription('')
serviceGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: serviceGrpId.setStatus('current')
if mibBuilder.loadTexts: serviceGrpId.setDescription('Table index')
serviceGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceGrpName.setStatus('current')
if mibBuilder.loadTexts: serviceGrpName.setDescription('Unique name for every service group')
serviceGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 4, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: serviceGrpRowStatus.setDescription('The Row status attribute for row handling')
serviceGrpMemTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 4, 3), )
if mibBuilder.loadTexts: serviceGrpMemTable.setStatus('current')
if mibBuilder.loadTexts: serviceGrpMemTable.setDescription('To define the service group members.')
serviceGrpMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 4, 3, 1), ).setIndexNames((0, "BLUESERVER-MIB", "serviceGrpId"), (0, "BLUESERVER-MIB", "serviceGrpMemId"))
if mibBuilder.loadTexts: serviceGrpMemEntry.setStatus('current')
if mibBuilder.loadTexts: serviceGrpMemEntry.setDescription('')
serviceGrpMemId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: serviceGrpMemId.setStatus('current')
if mibBuilder.loadTexts: serviceGrpMemId.setDescription('Table index')
serviceGrpMemRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceGrpMemRowStatus.setStatus('current')
if mibBuilder.loadTexts: serviceGrpMemRowStatus.setDescription('The Row status attribute for row handling')
policyTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 5, 1), )
if mibBuilder.loadTexts: policyTable.setStatus('current')
if mibBuilder.loadTexts: policyTable.setDescription('Network traffic is checked against the following policies. If the service, direction, and destination match, the action is taken and checking ends. If no policy matches the policies in any inherited role(s) are checked, finally the traffic is denied if nothing matches')
policyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 5, 1, 1), ).setIndexNames((0, "BLUESERVER-MIB", "roleId"), (0, "BLUESERVER-MIB", "policyId"))
if mibBuilder.loadTexts: policyEntry.setStatus('current')
if mibBuilder.loadTexts: policyEntry.setDescription('')
policyId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: policyId.setStatus('current')
if mibBuilder.loadTexts: policyId.setDescription('Index of this table')
policyServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyServiceId.setStatus('current')
if mibBuilder.loadTexts: policyServiceId.setDescription('ServiceTable Index associated with this policy. Row creation or set on this object fails on invalid service id')
policyHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyHostId.setStatus('current')
if mibBuilder.loadTexts: policyHostId.setDescription('Host table Index associated with this policy. Row creation or set on this object fails on invalid host id')
policyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyAction.setStatus('current')
if mibBuilder.loadTexts: policyAction.setDescription("To allow or to deny the traffic. 'P' - allow 'D' - deny.")
policyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyDirection.setStatus('current')
if mibBuilder.loadTexts: policyDirection.setDescription("To decide the direction of the traffic. 'I' - incoming 'O' - Out going 'B' - Both ways")
policySeqId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policySeqId.setStatus('current')
if mibBuilder.loadTexts: policySeqId.setDescription('squence id')
policyVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 5, 1, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyVlanId.setStatus('current')
if mibBuilder.loadTexts: policyVlanId.setDescription('vlan id')
policyScheduleId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 5, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyScheduleId.setStatus('current')
if mibBuilder.loadTexts: policyScheduleId.setDescription('schedule id')
policyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 5, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: policyRowStatus.setStatus('current')
if mibBuilder.loadTexts: policyRowStatus.setDescription('The Row status attribute for row handling')
exchangeMode = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aggressive", 1), ("main", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exchangeMode.setStatus('current')
if mibBuilder.loadTexts: exchangeMode.setDescription('IKE Settings Exchange mode.')
authenticationMethod = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("certificates", 1), ("sharedKeys", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authenticationMethod.setStatus('current')
if mibBuilder.loadTexts: authenticationMethod.setDescription('IKE Settings Authentication Method.')
idleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleTimeout.setStatus('current')
if mibBuilder.loadTexts: idleTimeout.setDescription('IKE Settings idle timeout in seconds')
maxLifeTimeInSecs = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxLifeTimeInSecs.setStatus('current')
if mibBuilder.loadTexts: maxLifeTimeInSecs.setDescription('IKE Settings maximun time out in seconds')
maxLifeTimeInKbs = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxLifeTimeInKbs.setStatus('current')
if mibBuilder.loadTexts: maxLifeTimeInKbs.setDescription('IKE Settings maximun time out in Kilogytes')
refreshThresholdInSecs = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: refreshThresholdInSecs.setStatus('current')
if mibBuilder.loadTexts: refreshThresholdInSecs.setDescription('IKE Settings refresh threshold in seconds')
refreshThresholdInKbs = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: refreshThresholdInKbs.setStatus('current')
if mibBuilder.loadTexts: refreshThresholdInKbs.setDescription('IKE Settings refresh threshold in kilobytes')
minLifeTimeInSecs = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minLifeTimeInSecs.setStatus('current')
if mibBuilder.loadTexts: minLifeTimeInSecs.setDescription('IKE Settings maximun time out in seconds')
minLifeTimeInKbs = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minLifeTimeInKbs.setStatus('current')
if mibBuilder.loadTexts: minLifeTimeInKbs.setDescription('IKE Settings maximun time out in seconds')
exModeAggressive = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exModeAggressive.setStatus('current')
if mibBuilder.loadTexts: exModeAggressive.setDescription('IKE Settings : Exchange mode - main')
exModeMain = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exModeMain.setStatus('current')
if mibBuilder.loadTexts: exModeMain.setDescription('IKE Settings : Exchange mode - Aggressive')
authMethodCertificates = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authMethodCertificates.setStatus('current')
if mibBuilder.loadTexts: authMethodCertificates.setDescription('authentication method - certificates')
authMethodPreSharedKeys = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authMethodPreSharedKeys.setStatus('current')
if mibBuilder.loadTexts: authMethodPreSharedKeys.setDescription('authentication method - pre-shared keys')
ipsecConfTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14), )
if mibBuilder.loadTexts: ipsecConfTable.setStatus('current')
if mibBuilder.loadTexts: ipsecConfTable.setDescription('A list of ipsec configuration entries.')
ipsecConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1), ).setIndexNames((0, "BLUESERVER-MIB", "ipsecConfId"))
if mibBuilder.loadTexts: ipsecConfEntry.setStatus('current')
if mibBuilder.loadTexts: ipsecConfEntry.setDescription('ipsec configuration')
ipsecConfId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ipsecConfId.setStatus('current')
if mibBuilder.loadTexts: ipsecConfId.setDescription('')
ipsecConfEnableConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfEnableConfiguration.setStatus('current')
if mibBuilder.loadTexts: ipsecConfEnableConfiguration.setDescription('Local authentication: User Name and password/Pre-shared Key')
ipsecConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfName.setStatus('current')
if mibBuilder.loadTexts: ipsecConfName.setDescription('')
ipsecConfLocalAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfLocalAuth.setStatus('current')
if mibBuilder.loadTexts: ipsecConfLocalAuth.setDescription('Local authentication: User Name and password/Pre-shared Key')
ipsecConfEspTripleDESWithSHA1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfEspTripleDESWithSHA1.setStatus('current')
if mibBuilder.loadTexts: ipsecConfEspTripleDESWithSHA1.setDescription('Encryption: ESP - Triple DES with SHA1 Integrity')
ipsecConfEspTripleDESWithMD5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfEspTripleDESWithMD5.setStatus('current')
if mibBuilder.loadTexts: ipsecConfEspTripleDESWithMD5.setDescription('Encryption: ESP - Triple DES with MD5 Integrity')
ipsecConfEsp56BitDESWithMD5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfEsp56BitDESWithMD5.setStatus('current')
if mibBuilder.loadTexts: ipsecConfEsp56BitDESWithMD5.setDescription('Encryption: ESP - 56 Bit DES with MD5 Integrity')
ipsecConfEsp56BitDESWithSHA1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfEsp56BitDESWithSHA1.setStatus('current')
if mibBuilder.loadTexts: ipsecConfEsp56BitDESWithSHA1.setDescription('Encryption: ESP - 56-bit DES with SHA1 Integrity')
ipsecConfEsp128BitAESWithMD5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfEsp128BitAESWithMD5.setStatus('current')
if mibBuilder.loadTexts: ipsecConfEsp128BitAESWithMD5.setDescription('Encryption: ESP - 128-bit AES with MD5 Integrity')
ipsecConfEsp128BitAESWithSHA1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfEsp128BitAESWithSHA1.setStatus('current')
if mibBuilder.loadTexts: ipsecConfEsp128BitAESWithSHA1.setDescription('Encryption: ESP - 128-bit AES with SHA1 Integrity')
ipsecConfEsp192BitAESWithMD5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfEsp192BitAESWithMD5.setStatus('current')
if mibBuilder.loadTexts: ipsecConfEsp192BitAESWithMD5.setDescription('Encryption: ESP - 192-bit AES with MD5 Integrity')
ipsecConfEsp192BitAESWithSHA1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfEsp192BitAESWithSHA1.setStatus('current')
if mibBuilder.loadTexts: ipsecConfEsp192BitAESWithSHA1.setDescription('Encryption: ESP - 192-bit AES with SHA1 Integrity')
ipsecConfEsp256BitAESWithMD5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfEsp256BitAESWithMD5.setStatus('current')
if mibBuilder.loadTexts: ipsecConfEsp256BitAESWithMD5.setDescription('Encryption: ESP - 256-bit AES with MD5 Integrity')
ipsecConfEsp256BitAESWithSHA1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfEsp256BitAESWithSHA1.setStatus('current')
if mibBuilder.loadTexts: ipsecConfEsp256BitAESWithSHA1.setDescription('Encryption: ESP - 256-bit AES with MD5 Integrity')
ipsecConfDiffieHellmanGrp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfDiffieHellmanGrp1.setStatus('current')
if mibBuilder.loadTexts: ipsecConfDiffieHellmanGrp1.setDescription('IKE Encryption: Diffie-Hellman Group 1')
ipsecConfDiffieHellmanGrp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfDiffieHellmanGrp2.setStatus('current')
if mibBuilder.loadTexts: ipsecConfDiffieHellmanGrp2.setDescription('IKE Encryption: Diffie-Hellman Group 2')
ipsecConfDiffieHellmanGrp5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfDiffieHellmanGrp5.setStatus('current')
if mibBuilder.loadTexts: ipsecConfDiffieHellmanGrp5.setDescription('IKE Encryption: Diffie-Hellman Group 5')
ipsecConfPsfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfPsfMode.setStatus('current')
if mibBuilder.loadTexts: ipsecConfPsfMode.setDescription('Perfect Forward Secrecy Mode')
ipsecConfCompressionDeflate = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfCompressionDeflate.setStatus('current')
if mibBuilder.loadTexts: ipsecConfCompressionDeflate.setDescription('compression: Delfate')
ipsecConfCompressionLZS = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfCompressionLZS.setStatus('current')
if mibBuilder.loadTexts: ipsecConfCompressionLZS.setDescription('Compression: LZS')
ipsecConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 1, 14, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsecConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipsecConfRowStatus.setDescription('The Row status attribute for row handling')
pptpEnable = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pptpEnable.setStatus('current')
if mibBuilder.loadTexts: pptpEnable.setDescription('')
pptpRemoteIpStartAddr = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 2, 2), BlueIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pptpRemoteIpStartAddr.setStatus('current')
if mibBuilder.loadTexts: pptpRemoteIpStartAddr.setDescription('')
pptpRemoteIpEndAddr = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 2, 3), BlueIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pptpRemoteIpEndAddr.setStatus('current')
if mibBuilder.loadTexts: pptpRemoteIpEndAddr.setDescription('')
pptpLocalIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 2, 4), BlueIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pptpLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: pptpLocalIpAddr.setDescription('')
pptpEncryption40Bit = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pptpEncryption40Bit.setStatus('current')
if mibBuilder.loadTexts: pptpEncryption40Bit.setDescription('Enable 40-bit encryption')
pptpEncryption128Bit = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pptpEncryption128Bit.setStatus('current')
if mibBuilder.loadTexts: pptpEncryption128Bit.setDescription('Enable 128-bit encryption')
pptpIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pptpIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: pptpIdleTimeout.setDescription('idle timeout')
pptpLdapPwdAttrName = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 2, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pptpLdapPwdAttrName.setStatus('current')
if mibBuilder.loadTexts: pptpLdapPwdAttrName.setDescription('The LDAP attribute name for the encrypted ntPassword.')
pptpRoleId = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pptpRoleId.setStatus('current')
if mibBuilder.loadTexts: pptpRoleId.setDescription('For automatic role assignment of PPTP clients. The role Id represent row id from Role table')
l2tpEnable = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpEnable.setStatus('current')
if mibBuilder.loadTexts: l2tpEnable.setDescription('')
l2tpRemoteIpStartAddr = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 5, 2), BlueIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpRemoteIpStartAddr.setStatus('current')
if mibBuilder.loadTexts: l2tpRemoteIpStartAddr.setDescription('First remote ip address of the tunnel')
l2tpRemoteIpEndAddr = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 5, 3), BlueIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpRemoteIpEndAddr.setStatus('current')
if mibBuilder.loadTexts: l2tpRemoteIpEndAddr.setDescription('Last remote ip address of the tunnel')
l2tpLocalIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 5, 4), BlueIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: l2tpLocalIpAddr.setDescription('')
l2tpIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: l2tpIdleTimeout.setDescription('idle timeout')
l2tpLdapPwdAttrName = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpLdapPwdAttrName.setStatus('current')
if mibBuilder.loadTexts: l2tpLdapPwdAttrName.setDescription('For LDAP Authentication, the attribute name for the encrypted ntPassword.')
l2tpRoleId = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2tpRoleId.setStatus('current')
if mibBuilder.loadTexts: l2tpRoleId.setDescription('For automatic role assignment of l2tp clients. The role Id represent row id from Role table')
subnetVpnMode = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetVpnMode.setStatus('current')
if mibBuilder.loadTexts: subnetVpnMode.setDescription('To enable or diable the subnet VPN option')
subnetVpnRtFirstIp = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 3, 2), BlueIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetVpnRtFirstIp.setStatus('current')
if mibBuilder.loadTexts: subnetVpnRtFirstIp.setDescription('Client address range: First remote Ip address.')
subnetVpnRtLastIp = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 3, 3), BlueIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetVpnRtLastIp.setStatus('current')
if mibBuilder.loadTexts: subnetVpnRtLastIp.setDescription('Client address range: Last remote Ip address.')
subnetVpnSharedSec = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetVpnSharedSec.setStatus('current')
if mibBuilder.loadTexts: subnetVpnSharedSec.setDescription('Group shared secret.')
subnetIpConfIdInUse = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 6, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetIpConfIdInUse.setStatus('current')
if mibBuilder.loadTexts: subnetIpConfIdInUse.setDescription('The ipsec configuration to use: represent the row id from ipConfTable.')
httpPort = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPort.setStatus('current')
if mibBuilder.loadTexts: httpPort.setDescription('Comma seperated list of Http/Proxy Ports to Monitor. Web requests on these ports will be redirected to the login')
httpRedirect = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpRedirect.setStatus('current')
if mibBuilder.loadTexts: httpRedirect.setDescription('Port of http redirection for user login Adjust if 8080 is in use on your network.')
httpAutoRedirectStatus = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpAutoRedirectStatus.setStatus('current')
if mibBuilder.loadTexts: httpAutoRedirectStatus.setDescription('If enabled, users will be redirected to the default URL, not their original destination.')
httpAutoPause = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpAutoPause.setStatus('current')
if mibBuilder.loadTexts: httpAutoPause.setDescription('Pause in seconds before redirecting user login')
httpDefaultUrl = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpDefaultUrl.setStatus('current')
if mibBuilder.loadTexts: httpDefaultUrl.setDescription('Default Url')
httpLogoutPopup = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpLogoutPopup.setStatus('current')
if mibBuilder.loadTexts: httpLogoutPopup.setDescription('Logout popup enable/disable')
httpRootCaUrl = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpRootCaUrl.setStatus('current')
if mibBuilder.loadTexts: httpRootCaUrl.setDescription('Adjust if you custom SSL is a chain certificate.')
httpExServerChoice = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpExServerChoice.setStatus('current')
if mibBuilder.loadTexts: httpExServerChoice.setDescription('External server choice')
httpPasswdChangeChoice = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPasswdChangeChoice.setStatus('current')
if mibBuilder.loadTexts: httpPasswdChangeChoice.setDescription(' Password change choice enable/disable. Password change choice are only available for local users.')
httpLangChangeChoice = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpLangChangeChoice.setStatus('current')
if mibBuilder.loadTexts: httpLangChangeChoice.setDescription(' Language change choice enabled/disable. Language change choice are only available for local users.')
httpLoginHelpButton = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpLoginHelpButton.setStatus('current')
if mibBuilder.loadTexts: httpLoginHelpButton.setDescription('Custom HTML popups can be created in the customized login section.')
httpAttemptWait = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpAttemptWait.setStatus('current')
if mibBuilder.loadTexts: httpAttemptWait.setDescription('Number of minutes to wait after the maximum number of login attempts is made.')
httpMaxNumOfActiveSess = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpMaxNumOfActiveSess.setStatus('current')
if mibBuilder.loadTexts: httpMaxNumOfActiveSess.setDescription("Number of active sessions per username/authentication type. '0' is unlimited.")
httpAdminACL = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpAdminACL.setStatus('current')
if mibBuilder.loadTexts: httpAdminACL.setDescription('Admin access control list. Comma seperated list of IP addresses to allow adminstrative access')
httpRedirectToHostName = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpRedirectToHostName.setStatus('current')
if mibBuilder.loadTexts: httpRedirectToHostName.setDescription(' Redirect to hostname. Will cause unregistered users to be redirected to hostname, not the Ip address')
httpLoginAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpLoginAttempts.setStatus('current')
if mibBuilder.loadTexts: httpLoginAttempts.setDescription('Number of login attempts')
httpChainCertChangeChoice = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpChainCertChangeChoice.setStatus('current')
if mibBuilder.loadTexts: httpChainCertChangeChoice.setDescription('Adjust if your custom SSL is a chain certificate Hint: disable if you do not require a chain certificate')
statusUpTime = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statusUpTime.setStatus('current')
if mibBuilder.loadTexts: statusUpTime.setDescription('Time in seconds between updating internal status data')
connectionCheckTime = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionCheckTime.setStatus('current')
if mibBuilder.loadTexts: connectionCheckTime.setDescription('Time in seconds between checking connection status')
apCheckTime = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCheckTime.setStatus('current')
if mibBuilder.loadTexts: apCheckTime.setDescription('Time in seconds between checking access point status')
statusRefreshTime = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statusRefreshTime.setStatus('current')
if mibBuilder.loadTexts: statusRefreshTime.setDescription('Time in seconds between refreshing status display')
apSnmpCommunity = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSnmpCommunity.setStatus('current')
if mibBuilder.loadTexts: apSnmpCommunity.setDescription('Read only snmp community string for all Access point')
autoBkupRate = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoBkupRate.setStatus('current')
if mibBuilder.loadTexts: autoBkupRate.setDescription('Auto backup mode')
autoBkupFtpServName = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoBkupFtpServName.setStatus('current')
if mibBuilder.loadTexts: autoBkupFtpServName.setDescription('FTP Server hostname')
autoBkupFtpDestDir = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoBkupFtpDestDir.setStatus('current')
if mibBuilder.loadTexts: autoBkupFtpDestDir.setDescription('FTP Server hostname')
autoBkupFtpServUser = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoBkupFtpServUser.setStatus('current')
if mibBuilder.loadTexts: autoBkupFtpServUser.setDescription('FTP Server user name')
autoBkupFtpServPasswd = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoBkupFtpServPasswd.setStatus('current')
if mibBuilder.loadTexts: autoBkupFtpServPasswd.setDescription('FTP Server password')
tZone = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tZone.setStatus('current')
if mibBuilder.loadTexts: tZone.setDescription('Time zone')
tMonth = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tMonth.setStatus('current')
if mibBuilder.loadTexts: tMonth.setDescription('System time setting:Month ')
tDay = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tDay.setStatus('current')
if mibBuilder.loadTexts: tDay.setDescription('System time setting:Day ')
tYear = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tYear.setStatus('current')
if mibBuilder.loadTexts: tYear.setDescription('System time setting:Year ')
tHours = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tHours.setStatus('current')
if mibBuilder.loadTexts: tHours.setDescription('System time setting:Hours ')
tMinutes = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tMinutes.setStatus('current')
if mibBuilder.loadTexts: tMinutes.setDescription('System time setting:Minutes ')
tSeconds = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tSeconds.setStatus('current')
if mibBuilder.loadTexts: tSeconds.setDescription('System time setting:Seconds.')
tNtpSync = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 4, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNtpSync.setStatus('current')
if mibBuilder.loadTexts: tNtpSync.setDescription('NTP settings synchronize')
tNtpServers = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 4, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tNtpServers.setStatus('current')
if mibBuilder.loadTexts: tNtpServers.setDescription('List of NTP servers')
paFixedIpClientAccess = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paFixedIpClientAccess.setStatus('current')
if mibBuilder.loadTexts: paFixedIpClientAccess.setDescription('Allow any client fixed ip settings')
paSMTPServerIp = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: paSMTPServerIp.setStatus('current')
if mibBuilder.loadTexts: paSMTPServerIp.setDescription('Ip or name of mail server for SMTP port redirection.')
logMaxLogEntries = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 7, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMaxLogEntries.setStatus('current')
if mibBuilder.loadTexts: logMaxLogEntries.setDescription('Maximum number of log entries to keep')
logNoOfDelLogEntries = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logNoOfDelLogEntries.setStatus('current')
if mibBuilder.loadTexts: logNoOfDelLogEntries.setDescription('Number of log entries to delete when reaching maximum')
logStorage = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("local", 0), ("remote", 1), ("both", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logStorage.setStatus('current')
if mibBuilder.loadTexts: logStorage.setDescription('Log storage')
remoteLog = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLog.setStatus('current')
if mibBuilder.loadTexts: remoteLog.setDescription('ip or the name of the remote server log')
sysLogFacility = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 7, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogFacility.setStatus('current')
if mibBuilder.loadTexts: sysLogFacility.setDescription('Facility of remote syslog server')
logMaxRemSysLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMaxRemSysLogLevel.setStatus('current')
if mibBuilder.loadTexts: logMaxRemSysLogLevel.setDescription('Maximum log level to send to remote syslog server')
appLogLevTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 7, 7, 3), )
if mibBuilder.loadTexts: appLogLevTable.setStatus('current')
if mibBuilder.loadTexts: appLogLevTable.setDescription('List of active appLogLevs')
appLogLevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 7, 7, 3, 1), ).setIndexNames((0, "BLUESERVER-MIB", "appLogLevId"))
if mibBuilder.loadTexts: appLogLevEntry.setStatus('current')
if mibBuilder.loadTexts: appLogLevEntry.setDescription('An application log level entry containing information about a particular active appLogLevel.')
appLogLevId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: appLogLevId.setStatus('current')
if mibBuilder.loadTexts: appLogLevId.setDescription('Index for this table')
appLogLevName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLogLevName.setStatus('current')
if mibBuilder.loadTexts: appLogLevName.setDescription('Name')
appLogLevLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appLogLevLevel.setStatus('current')
if mibBuilder.loadTexts: appLogLevLevel.setDescription('')
pIntTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1), )
if mibBuilder.loadTexts: pIntTable.setStatus('current')
if mibBuilder.loadTexts: pIntTable.setDescription('A list of pInt entries.')
pIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1), ).setIndexNames((0, "BLUESERVER-MIB", "pIntId"))
if mibBuilder.loadTexts: pIntEntry.setStatus('current')
if mibBuilder.loadTexts: pIntEntry.setDescription('A pInt entry containing information about a particular protected interface')
pIntId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pIntId.setStatus('current')
if mibBuilder.loadTexts: pIntId.setDescription('A unique id for each protected interface')
pIntName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pIntName.setStatus('current')
if mibBuilder.loadTexts: pIntName.setDescription('Interface name')
pIntGetIpFromDhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pIntGetIpFromDhcp.setStatus('current')
if mibBuilder.loadTexts: pIntGetIpFromDhcp.setDescription('Obtain IP settings from a DHCP server for the interface')
pIntDhcpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pIntDhcpTimeout.setStatus('current')
if mibBuilder.loadTexts: pIntDhcpTimeout.setDescription('Timeout in seconds for DHCP request')
pIntIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1, 5), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pIntIpAddress.setStatus('current')
if mibBuilder.loadTexts: pIntIpAddress.setDescription('Ipaddress ')
pIntNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1, 6), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pIntNetmask.setStatus('current')
if mibBuilder.loadTexts: pIntNetmask.setDescription('netmask ')
pIntGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1, 7), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pIntGateway.setStatus('current')
if mibBuilder.loadTexts: pIntGateway.setDescription('gateway ip address ')
pIntPrimaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1, 8), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pIntPrimaryDNS.setStatus('current')
if mibBuilder.loadTexts: pIntPrimaryDNS.setDescription('Primary DNS ')
pIntSecondaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1, 9), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pIntSecondaryDNS.setStatus('current')
if mibBuilder.loadTexts: pIntSecondaryDNS.setDescription('secondary DNS ')
pIntDefaultDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pIntDefaultDomain.setStatus('current')
if mibBuilder.loadTexts: pIntDefaultDomain.setDescription('Default Domain')
pIntHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pIntHostName.setStatus('current')
if mibBuilder.loadTexts: pIntHostName.setDescription('Hostname')
pIntEnableMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pIntEnableMulticast.setStatus('current')
if mibBuilder.loadTexts: pIntEnableMulticast.setDescription('enable mulitcast for this interface')
pIntVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pIntVlanId.setStatus('current')
if mibBuilder.loadTexts: pIntVlanId.setDescription('VLAN Id associated with this protected interface')
pIntVlanInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pIntVlanInterface.setStatus('current')
if mibBuilder.loadTexts: pIntVlanInterface.setDescription('VLAN type')
pIntProxyArpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pIntProxyArpStatus.setStatus('current')
if mibBuilder.loadTexts: pIntProxyArpStatus.setDescription('')
pIntRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 5, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pIntRowStatus.setStatus('current')
if mibBuilder.loadTexts: pIntRowStatus.setDescription('')
mIntTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1), )
if mibBuilder.loadTexts: mIntTable.setStatus('current')
if mibBuilder.loadTexts: mIntTable.setDescription('A list of mInt entries.')
mIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1), ).setIndexNames((0, "BLUESERVER-MIB", "mIntId"))
if mibBuilder.loadTexts: mIntEntry.setStatus('current')
if mibBuilder.loadTexts: mIntEntry.setDescription('A entry containing information about a particular managed interface')
mIntId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: mIntId.setStatus('current')
if mibBuilder.loadTexts: mIntId.setDescription('A unique id for each managed interface')
mIntName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mIntName.setStatus('current')
if mibBuilder.loadTexts: mIntName.setDescription('Managed interface name')
mIntEnableDhcpRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mIntEnableDhcpRelay.setStatus('current')
if mibBuilder.loadTexts: mIntEnableDhcpRelay.setDescription('enable or disable dhcp relay. Setting it to true enables it and setting it to value 0 disables it')
mIntIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 4), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mIntIpAddress.setStatus('current')
if mibBuilder.loadTexts: mIntIpAddress.setDescription('Ipaddress of the managed interface')
mIntNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 5), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mIntNetmask.setStatus('current')
if mibBuilder.loadTexts: mIntNetmask.setDescription('Netmask')
mIntDhcpServerOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stop", 0), ("start", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mIntDhcpServerOpt.setStatus('current')
if mibBuilder.loadTexts: mIntDhcpServerOpt.setDescription('Start/stop DHCP server')
mIntNatAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mIntNatAddresses.setStatus('current')
if mibBuilder.loadTexts: mIntNatAddresses.setDescription('NAT the addresses in the protected interface address')
mIntMulticastOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mIntMulticastOpt.setStatus('current')
if mibBuilder.loadTexts: mIntMulticastOpt.setDescription('Enable/disable multicast')
mIntDhcpStartIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 9), BlueIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mIntDhcpStartIpAddr.setStatus('current')
if mibBuilder.loadTexts: mIntDhcpStartIpAddr.setDescription('DHCP start ip address ')
mIntDhcpEndIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 10), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mIntDhcpEndIpAddr.setStatus('current')
if mibBuilder.loadTexts: mIntDhcpEndIpAddr.setDescription('DHCP end IP address')
mIntNetbiosNameServ = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 11), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mIntNetbiosNameServ.setStatus('current')
if mibBuilder.loadTexts: mIntNetbiosNameServ.setDescription('Netbios name server')
mIntDnsDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mIntDnsDomainName.setStatus('current')
if mibBuilder.loadTexts: mIntDnsDomainName.setDescription('DNS domain name')
mIntDefaultLease = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mIntDefaultLease.setStatus('current')
if mibBuilder.loadTexts: mIntDefaultLease.setDescription('Default lease time in seconds')
mIntMaximumLease = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mIntMaximumLease.setStatus('current')
if mibBuilder.loadTexts: mIntMaximumLease.setDescription('Maximum lease time in seconds')
mIntDynamicDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("adHoc", 2), ("interim", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mIntDynamicDNS.setStatus('current')
if mibBuilder.loadTexts: mIntDynamicDNS.setDescription('Dynamic DNS update scheme')
mIntVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mIntVlanId.setStatus('current')
if mibBuilder.loadTexts: mIntVlanId.setDescription('')
mIntVlanInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mIntVlanInterface.setStatus('current')
if mibBuilder.loadTexts: mIntVlanInterface.setDescription('VLAN id')
mIntProxyArpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mIntProxyArpStatus.setStatus('current')
if mibBuilder.loadTexts: mIntProxyArpStatus.setDescription('')
mIntRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 1, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mIntRowStatus.setStatus('current')
if mibBuilder.loadTexts: mIntRowStatus.setDescription('The Row status attribute for row handling')
fixedIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 2), )
if mibBuilder.loadTexts: fixedIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: fixedIpAddrTable.setDescription('')
fixedIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 2, 1), ).setIndexNames((0, "BLUESERVER-MIB", "mIntId"), (0, "BLUESERVER-MIB", "fixedIpAddrId"))
if mibBuilder.loadTexts: fixedIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: fixedIpAddrEntry.setDescription('An fixed ip address entry mapping between the hardware address and the ip address and their default role id')
fixedIpAddrId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: fixedIpAddrId.setStatus('current')
if mibBuilder.loadTexts: fixedIpAddrId.setDescription('')
fixedIpAddrMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fixedIpAddrMac.setStatus('current')
if mibBuilder.loadTexts: fixedIpAddrMac.setDescription('')
fixedIpAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 2, 1, 3), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fixedIpAddrAddress.setStatus('current')
if mibBuilder.loadTexts: fixedIpAddrAddress.setDescription('')
fixedIpAddrHost = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 2, 1, 4), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fixedIpAddrHost.setStatus('current')
if mibBuilder.loadTexts: fixedIpAddrHost.setDescription('')
fixedIpAddrRoleId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fixedIpAddrRoleId.setStatus('current')
if mibBuilder.loadTexts: fixedIpAddrRoleId.setDescription('')
fixedIpAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fixedIpAddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: fixedIpAddrRowStatus.setDescription('The Row status attribute for row handling')
natTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 3), )
if mibBuilder.loadTexts: natTable.setStatus('current')
if mibBuilder.loadTexts: natTable.setDescription('')
natEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 3, 1), ).setIndexNames((0, "BLUESERVER-MIB", "mIntId"), (0, "BLUESERVER-MIB", "natId"))
if mibBuilder.loadTexts: natEntry.setStatus('current')
if mibBuilder.loadTexts: natEntry.setDescription('')
natId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: natId.setStatus('current')
if mibBuilder.loadTexts: natId.setDescription('')
natProtectedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 3, 1, 2), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natProtectedIp.setStatus('current')
if mibBuilder.loadTexts: natProtectedIp.setDescription('Protected side IP address')
natManagedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 3, 1, 3), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natManagedIp.setStatus('current')
if mibBuilder.loadTexts: natManagedIp.setDescription('Managed side IP address')
natRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 8, 4, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: natRowStatus.setStatus('current')
if mibBuilder.loadTexts: natRowStatus.setDescription('The Row status attribute for row handling')
heartBeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 8, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: heartBeatInterval.setStatus('current')
if mibBuilder.loadTexts: heartBeatInterval.setDescription('the time in seconds between heartbeats ')
noOfFailedBeats = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 8, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: noOfFailedBeats.setStatus('current')
if mibBuilder.loadTexts: noOfFailedBeats.setDescription('Number of failed beats before fail-over')
machineRole = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: machineRole.setStatus('current')
if mibBuilder.loadTexts: machineRole.setDescription('')
genSnapshot = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genSnapshot.setStatus('current')
if mibBuilder.loadTexts: genSnapshot.setDescription('')
mobilityMode = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mobilityMode.setStatus('current')
if mibBuilder.loadTexts: mobilityMode.setDescription('enable/disable mobility between blue servers')
mobilityMeshKey = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 7, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mobilityMeshKey.setStatus('current')
if mibBuilder.loadTexts: mobilityMeshKey.setDescription('Community mesh key')
slaveTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 9, 3), )
if mibBuilder.loadTexts: slaveTable.setStatus('current')
if mibBuilder.loadTexts: slaveTable.setDescription('A list of slave entries.')
slaveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 9, 3, 1), ).setIndexNames((0, "BLUESERVER-MIB", "slaveId"))
if mibBuilder.loadTexts: slaveEntry.setStatus('current')
if mibBuilder.loadTexts: slaveEntry.setDescription('')
slaveId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: slaveId.setStatus('current')
if mibBuilder.loadTexts: slaveId.setDescription('')
slaveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaveEnabled.setStatus('current')
if mibBuilder.loadTexts: slaveEnabled.setDescription('')
slaveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 9, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaveAddress.setStatus('current')
if mibBuilder.loadTexts: slaveAddress.setDescription('')
slaveNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 9, 3, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaveNotes.setStatus('current')
if mibBuilder.loadTexts: slaveNotes.setDescription('')
slaveRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 9, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaveRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaveRowStatus.setDescription('The Row status attribute for row handling')
slaveMobility = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaveMobility.setStatus('current')
if mibBuilder.loadTexts: slaveMobility.setDescription('')
connectionTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1), )
if mibBuilder.loadTexts: connectionTable.setStatus('current')
if mibBuilder.loadTexts: connectionTable.setDescription('List of active connections')
connectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1), ).setIndexNames((0, "BLUESERVER-MIB", "connectionId"))
if mibBuilder.loadTexts: connectionEntry.setStatus('current')
if mibBuilder.loadTexts: connectionEntry.setDescription('Entry containing information about a particular active connection.')
connectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: connectionId.setStatus('current')
if mibBuilder.loadTexts: connectionId.setDescription('Index for this table')
connectionName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionName.setStatus('current')
if mibBuilder.loadTexts: connectionName.setDescription('Connection name')
connectionIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 3), BlueIpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionIp.setStatus('current')
if mibBuilder.loadTexts: connectionIp.setDescription('Ip address of the machine from where the connection is established')
connectionMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionMac.setStatus('current')
if mibBuilder.loadTexts: connectionMac.setDescription('The Mac address of the machine from where the connection is established')
connectionRoleId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionRoleId.setStatus('current')
if mibBuilder.loadTexts: connectionRoleId.setDescription('The role id associated with this connection')
connectionUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionUserId.setStatus('current')
if mibBuilder.loadTexts: connectionUserId.setDescription('User id associated with this connection')
connectionLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 7), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionLoginTime.setStatus('current')
if mibBuilder.loadTexts: connectionLoginTime.setDescription('User login time')
connectionChecked = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 8), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionChecked.setStatus('current')
if mibBuilder.loadTexts: connectionChecked.setDescription('')
connectionBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionBytes.setStatus('current')
if mibBuilder.loadTexts: connectionBytes.setDescription('')
connectionCurRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionCurRate.setStatus('current')
if mibBuilder.loadTexts: connectionCurRate.setDescription('')
connectionExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionExpiry.setStatus('current')
if mibBuilder.loadTexts: connectionExpiry.setDescription('')
connectionDev = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionDev.setStatus('current')
if mibBuilder.loadTexts: connectionDev.setDescription('')
connectionHost = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionHost.setStatus('current')
if mibBuilder.loadTexts: connectionHost.setDescription('')
connectionUnReg = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionUnReg.setStatus('current')
if mibBuilder.loadTexts: connectionUnReg.setDescription('')
connectionAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionAP.setStatus('current')
if mibBuilder.loadTexts: connectionAP.setDescription('')
connectionLoginAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionLoginAttempt.setStatus('current')
if mibBuilder.loadTexts: connectionLoginAttempt.setDescription('')
connectionLoginAttemptCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionLoginAttemptCnt.setStatus('current')
if mibBuilder.loadTexts: connectionLoginAttemptCnt.setDescription('')
connectionRoamMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 10, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionRoamMac.setStatus('current')
if mibBuilder.loadTexts: connectionRoamMac.setDescription('The Mac address of the roaming machine')
roleTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1), )
if mibBuilder.loadTexts: roleTable.setStatus('current')
if mibBuilder.loadTexts: roleTable.setDescription('A list of role entries.')
roleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1), ).setIndexNames((0, "BLUESERVER-MIB", "roleId"))
if mibBuilder.loadTexts: roleEntry.setStatus('current')
if mibBuilder.loadTexts: roleEntry.setDescription('A role entry containing information about a particular role.')
roleId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: roleId.setStatus('current')
if mibBuilder.loadTexts: roleId.setDescription('Index for this table')
roleName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleName.setStatus('current')
if mibBuilder.loadTexts: roleName.setDescription('A unique name associated with this role')
roleType = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleType.setStatus('current')
if mibBuilder.loadTexts: roleType.setDescription('')
roleQosRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleQosRate.setStatus('current')
if mibBuilder.loadTexts: roleQosRate.setDescription('The units of bandwidth allocated')
roleQosQnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleQosQnt.setStatus('current')
if mibBuilder.loadTexts: roleQosQnt.setDescription('The total bandwidth allocated to all users with this role')
roleVpn = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("pptp", 2), ("modarate", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleVpn.setStatus('current')
if mibBuilder.loadTexts: roleVpn.setDescription('Requires the user to connect to the BSC-1000 with a vpn of this type already enabled')
roleInherit = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleInherit.setStatus('current')
if mibBuilder.loadTexts: roleInherit.setDescription('Role id of the role to be inherited from')
roleUnGuestLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleUnGuestLogin.setStatus('current')
if mibBuilder.loadTexts: roleUnGuestLogin.setDescription('')
roleUnUserLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleUnUserLogin.setStatus('current')
if mibBuilder.loadTexts: roleUnUserLogin.setDescription('')
roleNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleNotes.setStatus('current')
if mibBuilder.loadTexts: roleNotes.setDescription('User Notes')
roleQosUserIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleQosUserIn.setStatus('current')
if mibBuilder.loadTexts: roleQosUserIn.setDescription('')
roleQosUserOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleQosUserOut.setStatus('current')
if mibBuilder.loadTexts: roleQosUserOut.setDescription('')
roleQosPriorityIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleQosPriorityIn.setStatus('current')
if mibBuilder.loadTexts: roleQosPriorityIn.setDescription('')
roleQosPriorityOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleQosPriorityOut.setStatus('current')
if mibBuilder.loadTexts: roleQosPriorityOut.setDescription('')
roleQosPriInOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleQosPriInOverride.setStatus('current')
if mibBuilder.loadTexts: roleQosPriInOverride.setDescription('')
roleQosPriOutOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleQosPriOutOverride.setStatus('current')
if mibBuilder.loadTexts: roleQosPriOutOverride.setDescription('')
roleQosDscpIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleQosDscpIn.setStatus('current')
if mibBuilder.loadTexts: roleQosDscpIn.setDescription('')
roleQosDscpOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleQosDscpOut.setStatus('current')
if mibBuilder.loadTexts: roleQosDscpOut.setDescription('')
roleQosDscpInOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleQosDscpInOverride.setStatus('current')
if mibBuilder.loadTexts: roleQosDscpInOverride.setDescription('')
roleQosDscpOutOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleQosDscpOutOverride.setStatus('current')
if mibBuilder.loadTexts: roleQosDscpOutOverride.setDescription('')
roleQosRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 22), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleQosRateOut.setStatus('current')
if mibBuilder.loadTexts: roleQosRateOut.setDescription('')
roleQosRateQntOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleQosRateQntOut.setStatus('current')
if mibBuilder.loadTexts: roleQosRateQntOut.setDescription('')
roleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleVlanId.setStatus('current')
if mibBuilder.loadTexts: roleVlanId.setDescription('')
roleRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleRedirect.setStatus('current')
if mibBuilder.loadTexts: roleRedirect.setDescription('')
roleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 11, 1, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: roleRowStatus.setStatus('current')
if mibBuilder.loadTexts: roleRowStatus.setDescription('The Row status attribute for row handling')
serviceMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 12, 1), )
if mibBuilder.loadTexts: serviceMgmtTable.setStatus('current')
if mibBuilder.loadTexts: serviceMgmtTable.setDescription('')
serviceMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 12, 1, 1), ).setIndexNames((0, "BLUESERVER-MIB", "serviceMgmtId"))
if mibBuilder.loadTexts: serviceMgmtEntry.setStatus('current')
if mibBuilder.loadTexts: serviceMgmtEntry.setDescription('')
serviceMgmtId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: serviceMgmtId.setStatus('current')
if mibBuilder.loadTexts: serviceMgmtId.setDescription('Service mgmt table Index')
serviceMgmtName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMgmtName.setStatus('current')
if mibBuilder.loadTexts: serviceMgmtName.setDescription('Service name')
serviceMgmtOptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("restart", 3), ("noopt", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceMgmtOptStatus.setStatus('current')
if mibBuilder.loadTexts: serviceMgmtOptStatus.setDescription('To start, stop or to retart different services. The default value is noopt. This object does not hold the current status of the service instead it holds the last operation performed on the selected service via SNMP.')
serviceMgmtDesr = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 12, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceMgmtDesr.setStatus('current')
if mibBuilder.loadTexts: serviceMgmtDesr.setDescription('Contains service status message.')
userSumNoOfUsr = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSumNoOfUsr.setStatus('current')
if mibBuilder.loadTexts: userSumNoOfUsr.setDescription('Total number of users.')
userSumNoOfLogdInUsr = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSumNoOfLogdInUsr.setStatus('current')
if mibBuilder.loadTexts: userSumNoOfLogdInUsr.setDescription('Total number of logged in users.')
userSumNoOfLogdVPNUsr = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSumNoOfLogdVPNUsr.setStatus('current')
if mibBuilder.loadTexts: userSumNoOfLogdVPNUsr.setDescription('Total number of logged in VPN tunnel users.')
usmSumTtlBandWthInUse = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usmSumTtlBandWthInUse.setStatus('current')
if mibBuilder.loadTexts: usmSumTtlBandWthInUse.setDescription('Total bandwidth currently in use.')
sysStatCpuUtil = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 13, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatCpuUtil.setStatus('current')
if mibBuilder.loadTexts: sysStatCpuUtil.setDescription('CPU utilization in percentage.')
sysStatMemUtil = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 13, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatMemUtil.setStatus('current')
if mibBuilder.loadTexts: sysStatMemUtil.setDescription('Memory utilization in Kilo bytes.')
sysStatTotalDiskSpace = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 13, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatTotalDiskSpace.setStatus('current')
if mibBuilder.loadTexts: sysStatTotalDiskSpace.setDescription('Total Disk space.')
sysStatDiskSpaceUsed = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 13, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatDiskSpaceUsed.setStatus('current')
if mibBuilder.loadTexts: sysStatDiskSpaceUsed.setDescription('Disk space used.')
sysStatDiskSpaceFree = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 13, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatDiskSpaceFree.setStatus('current')
if mibBuilder.loadTexts: sysStatDiskSpaceFree.setDescription('Disk space free.')
sysStatLOgSpaceUsed = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 13, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatLOgSpaceUsed.setStatus('current')
if mibBuilder.loadTexts: sysStatLOgSpaceUsed.setDescription('Log space used in percentage.')
sysStatNeedRestart = MibScalar((1, 3, 6, 1, 4, 1, 9967, 1, 13, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatNeedRestart.setStatus('current')
if mibBuilder.loadTexts: sysStatNeedRestart.setDescription('Log space used in percentage.')
certTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1), )
if mibBuilder.loadTexts: certTable.setStatus('current')
if mibBuilder.loadTexts: certTable.setDescription('A list of cert entries.')
certEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1), ).setIndexNames((0, "BLUESERVER-MIB", "certId"))
if mibBuilder.loadTexts: certEntry.setStatus('current')
if mibBuilder.loadTexts: certEntry.setDescription('A certEntry containing information about certificates.')
certId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: certId.setStatus('current')
if mibBuilder.loadTexts: certId.setDescription('A unique id for each cert.')
certType = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: certType.setStatus('current')
if mibBuilder.loadTexts: certType.setDescription('Certificate type')
certSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: certSubject.setStatus('current')
if mibBuilder.loadTexts: certSubject.setDescription('')
certStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: certStartDate.setStatus('current')
if mibBuilder.loadTexts: certStartDate.setDescription('')
certEndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: certEndDate.setStatus('current')
if mibBuilder.loadTexts: certEndDate.setDescription('')
certIssuer = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: certIssuer.setStatus('current')
if mibBuilder.loadTexts: certIssuer.setDescription('')
certName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: certName.setStatus('current')
if mibBuilder.loadTexts: certName.setDescription('')
certOrg = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: certOrg.setStatus('current')
if mibBuilder.loadTexts: certOrg.setDescription('')
certContent = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: certContent.setStatus('current')
if mibBuilder.loadTexts: certContent.setDescription('')
certPkey = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: certPkey.setStatus('current')
if mibBuilder.loadTexts: certPkey.setDescription('')
certPkeyAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: certPkeyAlgo.setStatus('current')
if mibBuilder.loadTexts: certPkeyAlgo.setDescription('')
certPkeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: certPkeySize.setStatus('current')
if mibBuilder.loadTexts: certPkeySize.setDescription('')
certSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: certSerial.setStatus('current')
if mibBuilder.loadTexts: certSerial.setDescription('')
certSignAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1, 14), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: certSignAlgo.setStatus('current')
if mibBuilder.loadTexts: certSignAlgo.setDescription('')
certVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: certVersion.setStatus('current')
if mibBuilder.loadTexts: certVersion.setDescription('')
certRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 6, 4, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: certRowStatus.setStatus('current')
if mibBuilder.loadTexts: certRowStatus.setDescription('')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 14, 1), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
if mibBuilder.loadTexts: vlanTable.setDescription('A list of vlan entries.')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 14, 1, 1), ).setIndexNames((0, "BLUESERVER-MIB", "vlanRowId"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
if mibBuilder.loadTexts: vlanEntry.setDescription('')
vlanRowId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vlanRowId.setStatus('current')
if mibBuilder.loadTexts: vlanRowId.setDescription('Index')
vlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 14, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanName.setStatus('current')
if mibBuilder.loadTexts: vlanName.setDescription('Unique name for this vlan')
vlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 14, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanId.setStatus('current')
if mibBuilder.loadTexts: vlanId.setDescription('')
vlanNotes = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 14, 1, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNotes.setStatus('current')
if mibBuilder.loadTexts: vlanNotes.setDescription('Notes')
vlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 14, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: vlanRowStatus.setDescription('The Row status attribute for row handling')
vlanGrpTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 14, 2), )
if mibBuilder.loadTexts: vlanGrpTable.setStatus('current')
if mibBuilder.loadTexts: vlanGrpTable.setDescription('To define the vlan groups.')
vlanGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 14, 2, 1), ).setIndexNames((0, "BLUESERVER-MIB", "vlanGrpId"))
if mibBuilder.loadTexts: vlanGrpEntry.setStatus('current')
if mibBuilder.loadTexts: vlanGrpEntry.setDescription('')
vlanGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vlanGrpId.setStatus('current')
if mibBuilder.loadTexts: vlanGrpId.setDescription('Table index')
vlanGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 14, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanGrpName.setStatus('current')
if mibBuilder.loadTexts: vlanGrpName.setDescription('Unique name for every vlan group')
vlanGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 14, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: vlanGrpRowStatus.setDescription('The Row status attribute for row handling')
vlanGrpMemTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 14, 3), )
if mibBuilder.loadTexts: vlanGrpMemTable.setStatus('current')
if mibBuilder.loadTexts: vlanGrpMemTable.setDescription('To define the vlan group member table.')
vlanGrpMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 14, 3, 1), ).setIndexNames((0, "BLUESERVER-MIB", "vlanGrpId"), (0, "BLUESERVER-MIB", "vlanGrpMemId"))
if mibBuilder.loadTexts: vlanGrpMemEntry.setStatus('current')
if mibBuilder.loadTexts: vlanGrpMemEntry.setDescription('')
vlanGrpMemId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vlanGrpMemId.setStatus('current')
if mibBuilder.loadTexts: vlanGrpMemId.setDescription('Table index')
vlanGrpMemRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 14, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanGrpMemRowStatus.setStatus('current')
if mibBuilder.loadTexts: vlanGrpMemRowStatus.setDescription('The Row status attribute for row handling')
schedTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 15, 1), )
if mibBuilder.loadTexts: schedTable.setStatus('current')
if mibBuilder.loadTexts: schedTable.setDescription('A list of schedule entries.')
schedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 15, 1, 1), ).setIndexNames((0, "BLUESERVER-MIB", "schedRowId"))
if mibBuilder.loadTexts: schedEntry.setStatus('current')
if mibBuilder.loadTexts: schedEntry.setDescription('List of scheds')
schedRowId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: schedRowId.setStatus('current')
if mibBuilder.loadTexts: schedRowId.setDescription('Index')
schedName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 15, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedName.setStatus('current')
if mibBuilder.loadTexts: schedName.setDescription('Unique name for this schedule')
schedAllDay = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedAllDay.setStatus('current')
if mibBuilder.loadTexts: schedAllDay.setDescription('')
schedEveryDay = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedEveryDay.setStatus('current')
if mibBuilder.loadTexts: schedEveryDay.setDescription('')
schedStartDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 15, 1, 1, 5), LocalDateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedStartDateAndTime.setStatus('current')
if mibBuilder.loadTexts: schedStartDateAndTime.setDescription('')
schedEndDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 15, 1, 1, 6), LocalDateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedEndDateAndTime.setStatus('current')
if mibBuilder.loadTexts: schedEndDateAndTime.setDescription('')
schedMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 15, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedMonth.setStatus('current')
if mibBuilder.loadTexts: schedMonth.setDescription('')
schedWeekDay = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 15, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedWeekDay.setStatus('current')
if mibBuilder.loadTexts: schedWeekDay.setDescription('')
schedDayOfMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 15, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedDayOfMonth.setStatus('current')
if mibBuilder.loadTexts: schedDayOfMonth.setDescription('')
schedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 15, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedRowStatus.setStatus('current')
if mibBuilder.loadTexts: schedRowStatus.setDescription('')
schedGrpTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 15, 2), )
if mibBuilder.loadTexts: schedGrpTable.setStatus('current')
if mibBuilder.loadTexts: schedGrpTable.setDescription('To define the schedule groups.')
schedGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 15, 2, 1), ).setIndexNames((0, "BLUESERVER-MIB", "schedGrpId"))
if mibBuilder.loadTexts: schedGrpEntry.setStatus('current')
if mibBuilder.loadTexts: schedGrpEntry.setDescription('')
schedGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: schedGrpId.setStatus('current')
if mibBuilder.loadTexts: schedGrpId.setDescription('Table index')
schedGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 15, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedGrpName.setStatus('current')
if mibBuilder.loadTexts: schedGrpName.setDescription('Unique name for every sched group')
schedGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 15, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: schedGrpRowStatus.setDescription('The Row status attribute for row handling')
schedGrpMemTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 15, 3), )
if mibBuilder.loadTexts: schedGrpMemTable.setStatus('current')
if mibBuilder.loadTexts: schedGrpMemTable.setDescription('To define the schedule group members')
schedGrpMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 15, 3, 1), ).setIndexNames((0, "BLUESERVER-MIB", "schedGrpId"), (0, "BLUESERVER-MIB", "schedGrpMemId"))
if mibBuilder.loadTexts: schedGrpMemEntry.setStatus('current')
if mibBuilder.loadTexts: schedGrpMemEntry.setDescription('')
schedGrpMemId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: schedGrpMemId.setStatus('current')
if mibBuilder.loadTexts: schedGrpMemId.setDescription('Table index')
schedGrpMemRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 15, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedGrpMemRowStatus.setStatus('current')
if mibBuilder.loadTexts: schedGrpMemRowStatus.setDescription('The Row status attribute for row handling')
snmpTrapMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 7, 8, 1, 1), )
if mibBuilder.loadTexts: snmpTrapMgmtTable.setStatus('current')
if mibBuilder.loadTexts: snmpTrapMgmtTable.setDescription('')
snmpTrapMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 7, 8, 1, 1, 1), ).setIndexNames((0, "BLUESERVER-MIB", "snmpTrapMgmtId"))
if mibBuilder.loadTexts: snmpTrapMgmtEntry.setStatus('current')
if mibBuilder.loadTexts: snmpTrapMgmtEntry.setDescription('An snmpTrapMgmtEntry containing snmp client ipaddress and the trap community string for trap forwarding')
snmpTrapMgmtId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: snmpTrapMgmtId.setStatus('current')
if mibBuilder.loadTexts: snmpTrapMgmtId.setDescription('')
snmpTrapMgmtIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 8, 1, 1, 1, 2), BlueIpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapMgmtIpAddress.setStatus('current')
if mibBuilder.loadTexts: snmpTrapMgmtIpAddress.setDescription('')
snmpTrapMgmtCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 8, 1, 1, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapMgmtCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpTrapMgmtCommunity.setDescription('')
snmpTrapMgmtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 8, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapMgmtRowStatus.setStatus('current')
if mibBuilder.loadTexts: snmpTrapMgmtRowStatus.setDescription('The Row status attribute for row handling')
blueEventTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 7, 8, 1, 2), )
if mibBuilder.loadTexts: blueEventTable.setStatus('current')
if mibBuilder.loadTexts: blueEventTable.setDescription('')
blueEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 7, 8, 1, 2, 1), ).setIndexNames((0, "BLUESERVER-MIB", "btId"))
if mibBuilder.loadTexts: blueEventEntry.setStatus('current')
if mibBuilder.loadTexts: blueEventEntry.setDescription('To enable/disable traps')
btId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 8, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: btId.setStatus('current')
if mibBuilder.loadTexts: btId.setDescription('Index')
btName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 8, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btName.setStatus('current')
if mibBuilder.loadTexts: btName.setDescription('Trap name')
btEventOptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btEventOptStatus.setStatus('current')
if mibBuilder.loadTexts: btEventOptStatus.setDescription('')
stThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 9967, 1, 7, 9, 1), )
if mibBuilder.loadTexts: stThresholdTable.setStatus('current')
if mibBuilder.loadTexts: stThresholdTable.setDescription('')
stThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9967, 1, 7, 9, 1, 1), ).setIndexNames((0, "BLUESERVER-MIB", "stThresholdId"))
if mibBuilder.loadTexts: stThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: stThresholdEntry.setDescription('To set threshold value for performance related attributes for sending traps and to predict the failover. This is a static table and has entries for the following attributes. Average CPU usage High Memory Swap High Disk Usage')
stThresholdId = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: stThresholdId.setStatus('current')
if mibBuilder.loadTexts: stThresholdId.setDescription('')
stThresholdAttrName = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stThresholdAttrName.setStatus('current')
if mibBuilder.loadTexts: stThresholdAttrName.setDescription('The name of the attribute')
stThresholdToLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 9, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stThresholdToLogMessage.setStatus('current')
if mibBuilder.loadTexts: stThresholdToLogMessage.setDescription('Threshold for logging messages')
stThresholdToSendTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 9, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stThresholdToSendTrap.setStatus('current')
if mibBuilder.loadTexts: stThresholdToSendTrap.setDescription('Threshold for sending snmp traps')
stThresholdToFailover = MibTableColumn((1, 3, 6, 1, 4, 1, 9967, 1, 7, 9, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stThresholdToFailover.setStatus('current')
if mibBuilder.loadTexts: stThresholdToFailover.setDescription('Threshold for system failover')
ntyobjLevel = MibScalar((1, 3, 6, 1, 4, 1, 9967, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntyobjLevel.setStatus('current')
if mibBuilder.loadTexts: ntyobjLevel.setDescription('Event priority or log level.')
ntyobjName = MibScalar((1, 3, 6, 1, 4, 1, 9967, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntyobjName.setStatus('current')
if mibBuilder.loadTexts: ntyobjName.setDescription('The name of the object that triggered the event. In case of no objects assosicated with failures, the value will be NULL. ')
ntyobjDesc = MibScalar((1, 3, 6, 1, 4, 1, 9967, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntyobjDesc.setStatus('current')
if mibBuilder.loadTexts: ntyobjDesc.setDescription('Description about event/trap')
ntyobjOID = MibScalar((1, 3, 6, 1, 4, 1, 9967, 2, 1, 4), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntyobjOID.setStatus('current')
if mibBuilder.loadTexts: ntyobjOID.setDescription('The OID of the object that triggered the event')
ntyobjValue = MibScalar((1, 3, 6, 1, 4, 1, 9967, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntyobjValue.setStatus('current')
if mibBuilder.loadTexts: ntyobjValue.setDescription('The value of the object that triggered the event at the time of event occurrence')
blueGeneralTraps0 = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 2, 2, 4, 0))
btLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 4, 0, 1)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: btLinkUp.setStatus('current')
if mibBuilder.loadTexts: btLinkUp.setDescription('Link up trap. ntyobjLevel - Indicate the priority or log level ntyobjObjName - The name of the object that triggered the event ntyobjDesc - Description about the event/trap ')
btLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 4, 0, 2)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: btLinkDown.setStatus('current')
if mibBuilder.loadTexts: btLinkDown.setDescription('Link down trap. ')
btSystemGeneralTrap = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 4, 0, 3)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: btSystemGeneralTrap.setStatus('current')
if mibBuilder.loadTexts: btSystemGeneralTrap.setDescription('System status trap. ntyobjLevel - Indicate the priority or log level ntyobjObjName - The name of the object that triggered the event ntyobjDesc - Description about the event/trap ')
blueConfigTraps0 = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 2, 2, 1, 0))
cctSystemConfChange = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 1, 0, 1)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: cctSystemConfChange.setStatus('current')
if mibBuilder.loadTexts: cctSystemConfChange.setDescription('This trap will be sent on any system level Configuration changes. ntyobjLevel - Indicate the priority or log level ntyobjObjName - The name of the object that triggered the event ntyobjDesc - Description about the event/trap ')
cctUserConfChange = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 1, 0, 2)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: cctUserConfChange.setStatus('current')
if mibBuilder.loadTexts: cctUserConfChange.setDescription('User configuration change trap. ntyobjLevel - Indicate the priority or log level ntyobjObjName - The name of the object that triggered the event ntyobjDesc - Description about the event/trap ')
cctExternalServConfChange = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 1, 0, 3)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: cctExternalServConfChange.setStatus('current')
if mibBuilder.loadTexts: cctExternalServConfChange.setDescription('External configuration change trap. ntyobjLevel - Indicate the priority or log level ntyobjObjName - The name of the object that triggered the event ntyobjDesc - Description about the event/trap ')
cctRoleConfChange = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 1, 0, 4)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: cctRoleConfChange.setStatus('current')
if mibBuilder.loadTexts: cctRoleConfChange.setDescription('Role configuration changes. ntyobjLevel - Indicate the priority or log level ntyobjObjName - The name of the object that triggered the event ntyobjDesc - Description about the event/trap ')
cctDestinationConfChange = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 1, 0, 5)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: cctDestinationConfChange.setStatus('current')
if mibBuilder.loadTexts: cctDestinationConfChange.setDescription('Destination configuration changes. ntyobjLevel - Indicate the priority or log level ntyobjObjName - The name of the object that triggered the event ntyobjDesc - Description about the event/trap ')
cctServiceConfChange = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 1, 0, 6)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: cctServiceConfChange.setStatus('current')
if mibBuilder.loadTexts: cctServiceConfChange.setDescription('Service configuration change traps. ntyobjLevel - Indicate the priority or log level ntyobjObjName - The name of the object that triggered the event ntyobjDesc - Description about the event/trap ')
cctNetworkConfChange = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 1, 0, 7)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: cctNetworkConfChange.setStatus('current')
if mibBuilder.loadTexts: cctNetworkConfChange.setDescription('Network configuration change trap. ntyobjLevel - Indicate the priority or log level ntyobjObjName - The name of the object that triggered the event ntyobjDesc - Description about the event/trap ')
cctVpnConfChange = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 1, 0, 8)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: cctVpnConfChange.setStatus('current')
if mibBuilder.loadTexts: cctVpnConfChange.setDescription('VPN Configuration change trap. ntyobjLevel - Indicate the priority or log level ntyobjObjName - The name of the object that triggered the event ntyobjDesc - Description about the event/trap ')
cctMobilityConfChange = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 1, 0, 9)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: cctMobilityConfChange.setStatus('current')
if mibBuilder.loadTexts: cctMobilityConfChange.setDescription('Mobility configuration change trap. ntyobjLevel - Indicate the priority or log level ntyobjObjName - The name of the object that triggered the event ntyobjDesc - Description about the event/trap ')
cctProcessConfChange = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 1, 0, 10)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: cctProcessConfChange.setStatus('current')
if mibBuilder.loadTexts: cctProcessConfChange.setDescription('Process configuration change trap. ntyobjLevel - Indicate the priority or log level ntyobjObjName - The name of the object that triggered the event ntyobjDesc - Description about the event/trap ')
blueFailureTraps0 = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 2, 2, 2, 0))
btSysGeneralFailure = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 2, 0, 1)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: btSysGeneralFailure.setStatus('current')
if mibBuilder.loadTexts: btSysGeneralFailure.setDescription('System failure trap. ntyobjLevel - Indicate the priority or log level ntyobjObjName - The name of the object that triggered the event. In case of no objects assosicated with failures, the value will be NULL. ntyobjDesc - Description about the event/trap ')
btUserLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 2, 0, 2)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: btUserLoginFailure.setStatus('current')
if mibBuilder.loadTexts: btUserLoginFailure.setDescription('User login failure trap. ntyobjLevel - Indicate the priority or log level ntyobjObjName - The name of the object that triggered the event. In case of no objects assosicated with failures, the value will be NULL. ntyobjDesc - Description about the event/trap ')
btProcessFailure = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 2, 0, 3)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: btProcessFailure.setStatus('current')
if mibBuilder.loadTexts: btProcessFailure.setDescription('Process failure trap. ntyobjLevel - Indicate the priority or log level ntyobjObjName - The name of the object that triggered the event. In case of no objects assosicated with failures, the value will be NULL. ntyobjDesc - Description about the event/trap ')
btAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 2, 0, 4)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: btAuthFailure.setStatus('current')
if mibBuilder.loadTexts: btAuthFailure.setDescription(' Authentication failure trap. ntyobjLevel - Indicate the priority or log level ntyobjObjName - The name of the object that triggered the event. In case of no objects assosicated with failures, the value will be NULL. ntyobjDesc - Description about the event/trap ')
btSystemFailover = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 2, 0, 5)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjName"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: btSystemFailover.setStatus('current')
if mibBuilder.loadTexts: btSystemFailover.setDescription('This trap will be sent on system failover. ntyobjObjName - The name of the object that triggered the event. In case of no objects assosicated with failures, the value will be NULL. ntyobjDesc - Description about the event/trap ')
blueThresholdTraps0 = MibIdentifier((1, 3, 6, 1, 4, 1, 9967, 2, 2, 3, 0))
btConditionalEvent = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 3, 0, 1)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjOID"), ("BLUESERVER-MIB", "ntyobjValue"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: btConditionalEvent.setStatus('current')
if mibBuilder.loadTexts: btConditionalEvent.setDescription('This trap will be sent if the threshold have been met for the underlaying Object. ntyobjLevel - Indicate the trap priority or log level ntyobjObjOID - The OID of the object that triggered the event ntyobjObjValue - The value of the object that triggered the event at the time of event occurrence. trDesc - Description about the event/trap ')
btCpuLoadEvent = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 3, 0, 2)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjOID"), ("BLUESERVER-MIB", "ntyobjValue"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: btCpuLoadEvent.setStatus('current')
if mibBuilder.loadTexts: btCpuLoadEvent.setDescription('This trap will be sent if the threshold have been met for the CPU usage. ntyobjLevel - Indicate the trap priority or log level ntyobjObjOID - The OID of the object that triggered the event ntyobjObjValue - The value of the object that triggered the event at the time of event occurrence. trDesc - Description about the event/trap ')
btMemSwapUsageEvent = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 3, 0, 3)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjOID"), ("BLUESERVER-MIB", "ntyobjValue"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: btMemSwapUsageEvent.setStatus('current')
if mibBuilder.loadTexts: btMemSwapUsageEvent.setDescription('This trap will be sent if the threshold have been met for the memory or swap space. ntyobjLevel - Indicate the trap priority or log level ntyobjObjOID - The OID of the object that triggered the event ntyobjObjValue - The value of the object that triggered the event at the time of event occurrence. trDesc - Description about the event/trap ')
btDiskUsageEvent = NotificationType((1, 3, 6, 1, 4, 1, 9967, 2, 2, 3, 0, 4)).setObjects(("BLUESERVER-MIB", "ntyobjLevel"), ("BLUESERVER-MIB", "ntyobjOID"), ("BLUESERVER-MIB", "ntyobjValue"), ("BLUESERVER-MIB", "ntyobjDesc"))
if mibBuilder.loadTexts: btDiskUsageEvent.setStatus('current')
if mibBuilder.loadTexts: btDiskUsageEvent.setDescription('This trap will be sent if the threshold have been met for the Disk usage Object. ntyobjLevel - Indicate the trap priority or log level ntyobjObjOID - The OID of the object that triggered the event ntyobjObjValue - The value of the object that triggered the event at the time of event occurrence. trDesc - Description about the event/trap ')
mibBuilder.exportSymbols("BLUESERVER-MIB", macDevAuthEntry=macDevAuthEntry, exNtlmServEntry=exNtlmServEntry, btUserLoginFailure=btUserLoginFailure, roleQosDscpOutOverride=roleQosDscpOutOverride, pptp=pptp, adminUsers=adminUsers, exRdAccServName=exRdAccServName, vlanNotes=vlanNotes, serviceId=serviceId, exRdAuthServPrecedence=exRdAuthServPrecedence, cctDestinationConfChange=cctDestinationConfChange, btSystemGeneralTrap=btSystemGeneralTrap, vlanGrpEntry=vlanGrpEntry, exRdAuthServSecret=exRdAuthServSecret, exUserRuleRowStatus=exUserRuleRowStatus, blueNotification=blueNotification, userSumNoOfLogdInUsr=userSumNoOfLogdInUsr, vlanGrpMemTable=vlanGrpMemTable, adminUserId=adminUserId, ipsecConfEsp56BitDESWithMD5=ipsecConfEsp56BitDESWithMD5, schedName=schedName, slaveTable=slaveTable, logNoOfDelLogEntries=logNoOfDelLogEntries, statusRefreshTime=statusRefreshTime, exLdapServAddr=exLdapServAddr, tMinutes=tMinutes, serviceMgmtName=serviceMgmtName, hostRowStatus=hostRowStatus, snmpTrapConf=snmpTrapConf, userSumNoOfLogdVPNUsr=userSumNoOfLogdVPNUsr, adUsrAccessReplication=adUsrAccessReplication, sysStatCpuUtil=sysStatCpuUtil, PYSNMP_MODULE_ID=blueSocket, pIntDefaultDomain=pIntDefaultDomain, policyRowStatus=policyRowStatus, hostGrpTable=hostGrpTable, mIntName=mIntName, hostTable=hostTable, ipsecConfEsp192BitAESWithMD5=ipsecConfEsp192BitAESWithMD5, nativeUserRowStatus=nativeUserRowStatus, idleTimeout=idleTimeout, serviceMgmtId=serviceMgmtId, mIntNetbiosNameServ=mIntNetbiosNameServ, pIntName=pIntName, exRdAuthServNotes=exRdAuthServNotes, btLinkUp=btLinkUp, replication=replication, fixedIpAddrRowStatus=fixedIpAddrRowStatus, exLdapServRdAccState=exLdapServRdAccState, connectionTable=connectionTable, roleName=roleName, serviceCosPriorityIn=serviceCosPriorityIn, userSumNoOfUsr=userSumNoOfUsr, httpPasswdChangeChoice=httpPasswdChangeChoice, schedGrpRowStatus=schedGrpRowStatus, schedule=schedule, ex802AuthServName=ex802AuthServName, connectionCheckTime=connectionCheckTime, roleUnGuestLogin=roleUnGuestLogin, certTable=certTable, l2tpRemoteIpStartAddr=l2tpRemoteIpStartAddr, sysStatDiskSpaceFree=sysStatDiskSpaceFree, serviceGrpTable=serviceGrpTable, l2tpRoleId=l2tpRoleId, fixedIpAddrEntry=fixedIpAddrEntry, serviceNotes=serviceNotes, ex802AuthServTable=ex802AuthServTable, time=time, exRdAuthServRowStatus=exRdAuthServRowStatus, natEntry=natEntry, pIntTable=pIntTable, exUserRuleAttribute=exUserRuleAttribute, ipsecConfEntry=ipsecConfEntry, certId=certId, exUserRuleOperator=exUserRuleOperator, hostNotes=hostNotes, cctServiceConfChange=cctServiceConfChange, pIntIpAddress=pIntIpAddress, hostId=hostId, connectionIp=connectionIp, genSnapshot=genSnapshot, mobilityMode=mobilityMode, roles=roles, fixedIpAddrMac=fixedIpAddrMac, natManagedIp=natManagedIp, serviceGrpMemTable=serviceGrpMemTable, btCpuLoadEvent=btCpuLoadEvent, exNtlmServRdAccState=exNtlmServRdAccState, ex802AuthServEntry=ex802AuthServEntry, nativeUserAccess=nativeUserAccess, mobility=mobility, schedDayOfMonth=schedDayOfMonth, blueFailureTraps0=blueFailureTraps0, http=http, roleId=roleId, ex802AuthServDefaultRole=ex802AuthServDefaultRole, httpPort=httpPort, exLdapServRowStatus=exLdapServRowStatus, serviceCosDscpOut=serviceCosDscpOut, certPkeyAlgo=certPkeyAlgo, macDevAuthMac=macDevAuthMac, BlueMacAddress=BlueMacAddress, exchangeMode=exchangeMode, connectionCurRate=connectionCurRate, exLdapServUniqueId=exLdapServUniqueId, slaveEntry=slaveEntry, policy=policy, adUsrAccessNativeUser=adUsrAccessNativeUser, exRdAccServNotes=exRdAccServNotes, exLdapServFilters=exLdapServFilters, adUsrAccessEntry=adUsrAccessEntry, BlueIpAddress=BlueIpAddress, httpMaxNumOfActiveSess=httpMaxNumOfActiveSess, serviceGrpMemId=serviceGrpMemId, nativeUserTable=nativeUserTable, subnetVpnRtLastIp=subnetVpnRtLastIp, LocalDateAndTime=LocalDateAndTime, macDevAuthName=macDevAuthName, logMaxRemSysLogLevel=logMaxRemSysLogLevel, vlanGrpTable=vlanGrpTable, ipsecConfEnableConfiguration=ipsecConfEnableConfiguration, roleVlanId=roleVlanId, schedGrpMemId=schedGrpMemId, vlanGrpMemRowStatus=vlanGrpMemRowStatus, adUsrAccessExServer=adUsrAccessExServer, ipsecConfPsfMode=ipsecConfPsfMode, exNtlmServName=exNtlmServName, mIntDefaultLease=mIntDefaultLease, mIntMaximumLease=mIntMaximumLease, stThresholdToLogMessage=stThresholdToLogMessage, ntyobjLevel=ntyobjLevel, appLogLevName=appLogLevName, ntyobjDesc=ntyobjDesc, exNtlmServNotes=exNtlmServNotes, l2tpLdapPwdAttrName=l2tpLdapPwdAttrName, exLdapServPrecedence=exLdapServPrecedence, roleQosRate=roleQosRate, certName=certName, pptpRoleId=pptpRoleId, vlanId=vlanId, roleEntry=roleEntry, ipsecConfEsp256BitAESWithSHA1=ipsecConfEsp256BitAESWithSHA1, adminUserPassword=adminUserPassword, tNtpServers=tNtpServers, l2tpEnable=l2tpEnable, paFixedIpClientAccess=paFixedIpClientAccess, connectionMac=connectionMac, connectionAP=connectionAP, certOrg=certOrg, apSnmpCommunity=apSnmpCommunity, serviceGrpMemEntry=serviceGrpMemEntry, roleQosPriInOverride=roleQosPriInOverride, ex802AuthServRowStatus=ex802AuthServRowStatus, ntyobjName=ntyobjName, pptpEncryption40Bit=pptpEncryption40Bit, tZone=tZone, exNtlmServDomainName=exNtlmServDomainName, adUsrAccessAdminUser=adUsrAccessAdminUser, vlanRowId=vlanRowId, blueThresholdTraps0=blueThresholdTraps0, subnetVpnMode=subnetVpnMode, blueConfigTraps0=blueConfigTraps0, adUsrAccessStatus=adUsrAccessStatus, hostGrpMemEntry=hostGrpMemEntry, fixedIpAddrHost=fixedIpAddrHost, btAuthFailure=btAuthFailure, mIntDhcpEndIpAddr=mIntDhcpEndIpAddr, autoBackup=autoBackup, roleQosDscpIn=roleQosDscpIn, mIntProxyArpStatus=mIntProxyArpStatus, blueEventEntry=blueEventEntry, ex802AuthServState=ex802AuthServState, adUsrAccessSchedules=adUsrAccessSchedules, natProtectedIp=natProtectedIp, exServId=exServId, schedRowStatus=schedRowStatus, adUsrAccessTable=adUsrAccessTable, exNtlmServMsrpc=exNtlmServMsrpc, exNtlmServDefRoleId=exNtlmServDefRoleId, connectionChecked=connectionChecked, hostGrpName=hostGrpName, adUsrAccessServices=adUsrAccessServices, natId=natId, vlanGrpName=vlanGrpName, maxLifeTimeInKbs=maxLifeTimeInKbs, appLogLevLevel=appLogLevLevel, nativeUserFixedIpAddr=nativeUserFixedIpAddr, schedEndDateAndTime=schedEndDateAndTime, cctVpnConfChange=cctVpnConfChange, subnetVpnSharedSec=subnetVpnSharedSec, exLdapServBase=exLdapServBase, servicePort=servicePort, nativeUserId=nativeUserId, policyEntry=policyEntry, httpLoginHelpButton=httpLoginHelpButton, protected=protected, slaveAddress=slaveAddress, snmpTrapMgmtCommunity=snmpTrapMgmtCommunity, hostGrpMemRowStatus=hostGrpMemRowStatus, fixedIpAddrRoleId=fixedIpAddrRoleId, policyScheduleId=policyScheduleId, machineRole=machineRole, nativeUserEmailId=nativeUserEmailId, stThresholdTable=stThresholdTable, policyDirection=policyDirection, connectionLoginTime=connectionLoginTime, pIntNetmask=pIntNetmask, certContent=certContent, serviceCosPriorityOut=serviceCosPriorityOut, remoteLog=remoteLog, adUsrAccessNetwork=adUsrAccessNetwork, slaveNotes=slaveNotes, certType=certType, exNtlmServRowStatus=exNtlmServRowStatus, ipsecConfEsp128BitAESWithSHA1=ipsecConfEsp128BitAESWithSHA1, exLdapServSecret=exLdapServSecret, connectionHost=connectionHost, pIntEntry=pIntEntry, certPkeySize=certPkeySize, pptpEnable=pptpEnable, cctMobilityConfChange=cctMobilityConfChange, schedEntry=schedEntry, httpRootCaUrl=httpRootCaUrl, interface=interface, httpLogoutPopup=httpLogoutPopup, policyTable=policyTable, hostName=hostName, sysLogFacility=sysLogFacility, snmpConf=snmpConf, pptpRemoteIpEndAddr=pptpRemoteIpEndAddr, roleTable=roleTable, stThresholdId=stThresholdId, httpLangChangeChoice=httpLangChangeChoice, macDevAuthNotes=macDevAuthNotes, mIntVlanInterface=mIntVlanInterface, connectionLoginAttempt=connectionLoginAttempt, connection=connection, schedAllDay=schedAllDay, ipsecConfEspTripleDESWithMD5=ipsecConfEspTripleDESWithMD5, certSubject=certSubject, adUsrAccessAccounting=adUsrAccessAccounting, btProcessFailure=btProcessFailure, schedGrpTable=schedGrpTable, macDevAuthDefaultRole=macDevAuthDefaultRole, roleVpn=roleVpn, schedGrpMemRowStatus=schedGrpMemRowStatus, nativeUsers=nativeUsers, sysStatLOgSpaceUsed=sysStatLOgSpaceUsed, vpn=vpn, cctRoleConfChange=cctRoleConfChange, maxLifeTimeInSecs=maxLifeTimeInSecs, nativeUserNotes=nativeUserNotes, adminUserEmailId=adminUserEmailId, ex802AuthServPort=ex802AuthServPort)
mibBuilder.exportSymbols("BLUESERVER-MIB", exModeAggressive=exModeAggressive, l2tpLocalIpAddr=l2tpLocalIpAddr, exRdAccServEntry=exRdAccServEntry, subnetIpConfIdInUse=subnetIpConfIdInUse, vlanGrpMemEntry=vlanGrpMemEntry, adminUserNotes=adminUserNotes, btConditionalEvent=btConditionalEvent, stThresholdToFailover=stThresholdToFailover, authenticationMethod=authenticationMethod, ipsecConfDiffieHellmanGrp2=ipsecConfDiffieHellmanGrp2, macDevAuthTable=macDevAuthTable, certPkey=certPkey, ex802AuthServNotes=ex802AuthServNotes, schedStartDateAndTime=schedStartDateAndTime, policyVlanId=policyVlanId, ntyobjOID=ntyobjOID, certIssuer=certIssuer, exRdAuthServId=exRdAuthServId, exUserRuleId=exUserRuleId, btId=btId, autoBkupRate=autoBkupRate, roleType=roleType, exLdapServSslServer=exLdapServSslServer, noOfFailedBeats=noOfFailedBeats, certEndDate=certEndDate, ipsecConfRowStatus=ipsecConfRowStatus, connectionBytes=connectionBytes, exNtlmServMsdc=exNtlmServMsdc, ipsecConfDiffieHellmanGrp5=ipsecConfDiffieHellmanGrp5, connectionExpiry=connectionExpiry, httpRedirect=httpRedirect, appLogLevEntry=appLogLevEntry, natTable=natTable, serviceName=serviceName, serviceGrpMemRowStatus=serviceGrpMemRowStatus, policyHostId=policyHostId, tDay=tDay, exLdapServPort=exLdapServPort, adminUserStatus=adminUserStatus, serviceMgmtDesr=serviceMgmtDesr, btEventOptStatus=btEventOptStatus, httpAutoRedirectStatus=httpAutoRedirectStatus, adUsrAccessMacDev=adUsrAccessMacDev, roleQosDscpInOverride=roleQosDscpInOverride, schedEveryDay=schedEveryDay, cctProcessConfChange=cctProcessConfChange, macDevAuthId=macDevAuthId, exRdAccServRowStatus=exRdAccServRowStatus, cctNetworkConfChange=cctNetworkConfChange, tYear=tYear, exLdapServEntry=exLdapServEntry, roleUnUserLogin=roleUnUserLogin, exNtlmServMsad=exNtlmServMsad, snmpTrapMgmtIpAddress=snmpTrapMgmtIpAddress, exNtlmServTable=exNtlmServTable, connectionRoamMac=connectionRoamMac, schedGrpMemEntry=schedGrpMemEntry, certStartDate=certStartDate, ipsecConfCompressionLZS=ipsecConfCompressionLZS, connectionUnReg=connectionUnReg, schedGrpEntry=schedGrpEntry, exRdAuthServName=exRdAuthServName, certEntry=certEntry, pIntEnableMulticast=pIntEnableMulticast, ipsecConfLocalAuth=ipsecConfLocalAuth, adUsrAccessVpn=adUsrAccessVpn, stThresholdToSendTrap=stThresholdToSendTrap, httpChainCertChangeChoice=httpChainCertChangeChoice, mIntDhcpStartIpAddr=mIntDhcpStartIpAddr, vlanName=vlanName, btDiskUsageEvent=btDiskUsageEvent, schedMonth=schedMonth, ipsecConfId=ipsecConfId, exLdapServSsl=exLdapServSsl, serviceCosDscpIn=serviceCosDscpIn, blueSocket=blueSocket, pIntHostName=pIntHostName, blueConfigTraps=blueConfigTraps, serviceRowStatus=serviceRowStatus, subnetVpnRtFirstIp=subnetVpnRtFirstIp, connectionLoginAttemptCnt=connectionLoginAttemptCnt, vlanGrpRowStatus=vlanGrpRowStatus, roleQosPriorityIn=roleQosPriorityIn, fixedIpAddrAddress=fixedIpAddrAddress, schedGrpId=schedGrpId, vlanGrpId=vlanGrpId, roleNotes=roleNotes, connectionUserId=connectionUserId, fixedIpAddrId=fixedIpAddrId, systemTracker=systemTracker, roleQosUserOut=roleQosUserOut, httpAutoPause=httpAutoPause, exRdAccServAddr=exRdAccServAddr, ipsecConfDiffieHellmanGrp1=ipsecConfDiffieHellmanGrp1, ipsecConfEsp192BitAESWithSHA1=ipsecConfEsp192BitAESWithSHA1, sysStatTotalDiskSpace=sysStatTotalDiskSpace, exRdAuthServTable=exRdAuthServTable, adminUserAccess=adminUserAccess, ipsecConfTable=ipsecConfTable, ipsecConfCompressionDeflate=ipsecConfCompressionDeflate, nativeUserRoleId=nativeUserRoleId, schedTable=schedTable, hostAddress=hostAddress, stThresholdEntry=stThresholdEntry, mIntId=mIntId, hostEntry=hostEntry, snmpTrapMgmtTable=snmpTrapMgmtTable, exRdAuthServRdAccId=exRdAuthServRdAccId, ipsecConfEspTripleDESWithSHA1=ipsecConfEspTripleDESWithSHA1, statistics=statistics, certificate=certificate, roleQosUserIn=roleQosUserIn, adminUserRowStatus=adminUserRowStatus, connectionEntry=connectionEntry, autoBkupFtpDestDir=autoBkupFtpDestDir, misc=misc, blueThresholdTraps=blueThresholdTraps, destination=destination, adUsrAccessVlans=adUsrAccessVlans, roleQosDscpOut=roleQosDscpOut, hostGrpMemTable=hostGrpMemTable, pIntPrimaryDNS=pIntPrimaryDNS, confLog=confLog, policyServiceId=policyServiceId, exLdapServAccount=exLdapServAccount, exLdapServDefRoleId=exLdapServDefRoleId, pptpRemoteIpStartAddr=pptpRemoteIpStartAddr, exRdAccServTable=exRdAccServTable, slaveMobility=slaveMobility, exRdAuthServState=exRdAuthServState, serviceMgmt=serviceMgmt, pIntGateway=pIntGateway, serviceMgmtTable=serviceMgmtTable, blueServer=blueServer, adUsrAccessRoles=adUsrAccessRoles, slaveId=slaveId, exLdapServSslClient=exLdapServSslClient, pIntVlanInterface=pIntVlanInterface, serviceProtocol=serviceProtocol, service=service, fixedIpAddrTable=fixedIpAddrTable, roleQosRateOut=roleQosRateOut, pptpLdapPwdAttrName=pptpLdapPwdAttrName, exRdAccServPort=exRdAccServPort, blueFailureTraps=blueFailureTraps, refreshThresholdInKbs=refreshThresholdInKbs, connectionDev=connectionDev, adminUserEntry=adminUserEntry, mIntNetmask=mIntNetmask, logMaxLogEntries=logMaxLogEntries, hostInvertDest=hostInvertDest, refreshThresholdInSecs=refreshThresholdInSecs, ipsec=ipsec, usmSumTtlBandWthInUse=usmSumTtlBandWthInUse, publicAccess=publicAccess, adUsrAccessDestination=adUsrAccessDestination, vlan=vlan, authentication=authentication, exModeMain=exModeMain, httpDefaultUrl=httpDefaultUrl, hostGrpRowStatus=hostGrpRowStatus, statusUpTime=statusUpTime, slaveEnabled=slaveEnabled, pptpIdleTimeout=pptpIdleTimeout, mIntNatAddresses=mIntNatAddresses, cctUserConfChange=cctUserConfChange, connectionRoleId=connectionRoleId, exRdAccServState=exRdAccServState, serviceGrpId=serviceGrpId, hostGrpId=hostGrpId, mIntEntry=mIntEntry, schedRowId=schedRowId, pIntVlanId=pIntVlanId, exUserRuleRoleId=exUserRuleRoleId, confLogGroup=confLogGroup, mIntVlanId=mIntVlanId, mIntEnableDhcpRelay=mIntEnableDhcpRelay, exUserRuleTable=exUserRuleTable, vlanEntry=vlanEntry, schedGrpMemTable=schedGrpMemTable, mIntMulticastOpt=mIntMulticastOpt, btMemSwapUsageEvent=btMemSwapUsageEvent, mIntDnsDomainName=mIntDnsDomainName, l2tp=l2tp, serviceGrpName=serviceGrpName, heartBeatInterval=heartBeatInterval, systemStats=systemStats, tSeconds=tSeconds, serviceMgmtEntry=serviceMgmtEntry, exRdAccServSecret=exRdAccServSecret, policyId=policyId, httpExServerChoice=httpExServerChoice, hostGrpMemId=hostGrpMemId, btLinkDown=btLinkDown, failover=failover, mobilityMeshKey=mobilityMeshKey, adUsrAccessMaintance=adUsrAccessMaintance, l2tpIdleTimeout=l2tpIdleTimeout, users=users, exRdAuthServDefRoleId=exRdAuthServDefRoleId, httpRedirectToHostName=httpRedirectToHostName, exUserRuleSeqId=exUserRuleSeqId, autoBkupFtpServPasswd=autoBkupFtpServPasswd, nativeUserEntry=nativeUserEntry, userSummary=userSummary, policySeqId=policySeqId, snmpTrapMgmtRowStatus=snmpTrapMgmtRowStatus, sysStatDiskSpaceUsed=sysStatDiskSpaceUsed, nativeUserName=nativeUserName, sysStatNeedRestart=sysStatNeedRestart, exNtlmServState=exNtlmServState, vlanRowStatus=vlanRowStatus, vlanTable=vlanTable, blueTraps=blueTraps, hostGrpEntry=hostGrpEntry, appLogLevTable=appLogLevTable, ntyobjValue=ntyobjValue, macDevAuthState=macDevAuthState, pIntDhcpTimeout=pIntDhcpTimeout, ipsecConfName=ipsecConfName, nativeUserRadAcctServId=nativeUserRadAcctServId, macDevAuthRowStatus=macDevAuthRowStatus, pIntGetIpFromDhcp=pIntGetIpFromDhcp, vlanGrpMemId=vlanGrpMemId, sysStatMemUtil=sysStatMemUtil, pIntProxyArpStatus=pIntProxyArpStatus, ipsecConfEsp128BitAESWithMD5=ipsecConfEsp128BitAESWithMD5, httpAdminACL=httpAdminACL, roleQosRateQntOut=roleQosRateQntOut, pptpEncryption128Bit=pptpEncryption128Bit, hostNetmask=hostNetmask, autoBkupFtpServUser=autoBkupFtpServUser, httpLoginAttempts=httpLoginAttempts, btName=btName, schedGrpName=schedGrpName, authMethodCertificates=authMethodCertificates, l2tpRemoteIpEndAddr=l2tpRemoteIpEndAddr, pptpLocalIpAddr=pptpLocalIpAddr, cctExternalServConfChange=cctExternalServConfChange, cctSystemConfChange=cctSystemConfChange, connectionId=connectionId, mIntDhcpServerOpt=mIntDhcpServerOpt, exLdapServNotes=exLdapServNotes, certSignAlgo=certSignAlgo, subnetVpn=subnetVpn, apCheckTime=apCheckTime, snmpTrapMgmtId=snmpTrapMgmtId, autoBkupFtpServName=autoBkupFtpServName, exRdAccServId=exRdAccServId, appLogLevId=appLogLevId, btSystemFailover=btSystemFailover, roleQosPriorityOut=roleQosPriorityOut, ipsecConfEsp256BitAESWithMD5=ipsecConfEsp256BitAESWithMD5, serviceGrpEntry=serviceGrpEntry)
mibBuilder.exportSymbols("BLUESERVER-MIB", exLdapServTable=exLdapServTable, exLdapServName=exLdapServName, logStorage=logStorage, mIntTable=mIntTable, mIntDynamicDNS=mIntDynamicDNS, exRdAuthServAddr=exRdAuthServAddr, slaveRowStatus=slaveRowStatus, tMonth=tMonth, serviceEntry=serviceEntry, tNtpSync=tNtpSync, roleRowStatus=roleRowStatus, configuration=configuration, serviceTable=serviceTable, adminUserTable=adminUserTable, exNtlmServId=exNtlmServId, exUserRuleValue=exUserRuleValue, schedWeekDay=schedWeekDay, tHours=tHours, certRowStatus=certRowStatus, hostType=hostType, minLifeTimeInSecs=minLifeTimeInSecs, exAuthServer=exAuthServer, roleQosPriOutOverride=roleQosPriOutOverride, pIntRowStatus=pIntRowStatus, exNtlmServRdAccId=exNtlmServRdAccId, minLifeTimeInKbs=minLifeTimeInKbs, pIntSecondaryDNS=pIntSecondaryDNS, ipsecConfEsp56BitDESWithSHA1=ipsecConfEsp56BitDESWithSHA1, adminUserName=adminUserName, exRdAuthServEntry=exRdAuthServEntry, exLdapServId=exLdapServId, exUserRuleEntry=exUserRuleEntry, exLdapServRdAccId=exLdapServRdAccId, natRowStatus=natRowStatus, managed=managed, adUsrAccessConfiguration=adUsrAccessConfiguration, certSerial=certSerial, roleQosQnt=roleQosQnt, httpAttemptWait=httpAttemptWait, mIntIpAddress=mIntIpAddress, mIntRowStatus=mIntRowStatus, connectionName=connectionName, ex802AuthServAddr=ex802AuthServAddr, snmpTrapMgmtEntry=snmpTrapMgmtEntry, ex802AuthServId=ex802AuthServId, exRdAuthServPort=exRdAuthServPort, stThresholdAttrName=stThresholdAttrName, serviceMgmtOptStatus=serviceMgmtOptStatus, roleRedirect=roleRedirect, blueEventTable=blueEventTable, roleInherit=roleInherit, authMethodPreSharedKeys=authMethodPreSharedKeys, serviceGrpRowStatus=serviceGrpRowStatus, notifyObjects=notifyObjects, blueGeneralTraps0=blueGeneralTraps0, policyAction=policyAction, nativeUserPassword=nativeUserPassword, exLdapServState=exLdapServState, blueGeneralTraps=blueGeneralTraps, pIntId=pIntId, certVersion=certVersion, btSysGeneralFailure=btSysGeneralFailure, paSMTPServerIp=paSMTPServerIp)
