#
# PySNMP MIB module JUNIPER-WX-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-WX-GLOBAL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:01:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
jnxWxGrpStats, = mibBuilder.importSymbols("JUNIPER-WX-GLOBAL-MIB", "jnxWxGrpStats")
jnxWxGrpStatusRemoteWxId, jnxWxGrpStatusAppId = mibBuilder.importSymbols("JUNIPER-WX-STATUS-MIB", "jnxWxGrpStatusRemoteWxId", "jnxWxGrpStatusAppId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, Gauge32, ModuleIdentity, MibIdentifier, Counter32, ObjectIdentity, Counter64, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "Gauge32", "ModuleIdentity", "MibIdentifier", "Counter32", "ObjectIdentity", "Counter64", "IpAddress", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxWxGrpStatsSys = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1))
if mibBuilder.loadTexts: jnxWxGrpStatsSys.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSys.setDescription('This group contains statistics at the system level. ')
jnxWxGrpStatsSysPt = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 1))
if mibBuilder.loadTexts: jnxWxGrpStatsSysPt.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysPt.setDescription('This group contains passthrough statistics. ')
jnxWxGrpStatsSysPtAppDefMatchBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtAppDefMatchBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtAppDefMatchBytes.setDescription('Passthru byte count because of application definition. ')
jnxWxGrpStatsSysPtAppDefMatchPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtAppDefMatchPkts.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtAppDefMatchPkts.setDescription('Passthru packet count because of application definition. ')
jnxWxGrpStatsSysPtNoRemoteWxBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtNoRemoteWxBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtNoRemoteWxBytes.setDescription('Passthru byte count due to no Remote WX. ')
jnxWxGrpStatsSysPtNoRemoteWxPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtNoRemoteWxPkts.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtNoRemoteWxPkts.setDescription('Passthru packet count due to no Remote WX. ')
jnxWxGrpStatsSysPtNonTcpProtoBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtNonTcpProtoBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtNonTcpProtoBytes.setDescription('Passthru byte count because protocol is non-TCP. ')
jnxWxGrpStatsSysPtNonTcpProtoPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtNonTcpProtoPkts.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtNonTcpProtoPkts.setDescription('Passthru packet count because protocol is non-TCP. ')
jnxWxGrpStatsSysPtNonIpBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtNonIpBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtNonIpBytes.setDescription('Passthru byte count because of non-IP traffic like Appletalk, IPX, etc. ')
jnxWxGrpStatsSysPtNonIpPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtNonIpPkts.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtNonIpPkts.setDescription('Passthru packet count because of non-IP traffic like Appletalk, IPX, etc. ')
jnxWxGrpStatsSysPtFragIpBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtFragIpBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtFragIpBytes.setDescription('Passthru because of fragmented IP packets. ')
jnxWxGrpStatsSysPtFragIpPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtFragIpPkts.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtFragIpPkts.setDescription('Passthru because of fragmented IP bytes. ')
jnxWxGrpStatsSysPtVlanBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtVlanBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtVlanBytes.setDescription('Passthru due to VLAN bytes. ')
jnxWxGrpStatsSysPtVlanPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtVlanPkts.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtVlanPkts.setDescription('Passthru due to VLAN packets. ')
jnxWxGrpStatsSysPtMcastBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtMcastBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtMcastBytes.setDescription('Passthru due to Multicast bytes. ')
jnxWxGrpStatsSysPtMcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtMcastPkts.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysPtMcastPkts.setDescription('Passthru due to Multicast packets. ')
jnxWxGrpStatsSysComp = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 2))
if mibBuilder.loadTexts: jnxWxGrpStatsSysComp.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysComp.setDescription('This group contains Compression statistics at the system level. ')
jnxWxGrpStatsSysCompFailAppDefDisableBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysCompFailAppDefDisableBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysCompFailAppDefDisableBytes.setDescription('Byte count when compression failed because application definition did not enable compression. ')
jnxWxGrpStatsSysCompFailAppDefDisablePkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysCompFailAppDefDisablePkts.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysCompFailAppDefDisablePkts.setDescription('Packet count when compression failed because application definition did not enable compression. ')
jnxWxGrpStatsSysCompFailTcpAcclToRemoteBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysCompFailTcpAcclToRemoteBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysCompFailTcpAcclToRemoteBytes.setDescription('Byte count when compression failed because TCP acceleration was not configured to remote WX. ')
jnxWxGrpStatsSysCompFailTcpAcclToRemotePkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysCompFailTcpAcclToRemotePkts.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysCompFailTcpAcclToRemotePkts.setDescription('Packet count when compression failed because TCP acceleration was not configured to remote WX. ')
jnxWxGrpStatsSysCompFailResCrunchBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysCompFailResCrunchBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysCompFailResCrunchBytes.setDescription('Byte count when compression failed due to resource crunch. ')
jnxWxGrpStatsSysCompFailAlgoLimitBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysCompFailAlgoLimitBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysCompFailAlgoLimitBytes.setDescription('Byte count when compression failed because of algorithmic limitations. ')
jnxWxGrpStatsSysCompTcpAcclFailedBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysCompTcpAcclFailedBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysCompTcpAcclFailedBytes.setDescription('Byte count when compression failed because of TCP acceleration error. ')
jnxWxGrpStatsSysCompTcpAcclFailedPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysCompTcpAcclFailedPkts.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysCompTcpAcclFailedPkts.setDescription('Packet count when compression failed because of TCP acceleration error. ')
jnxWxGrpStatsSysCifs = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 3))
if mibBuilder.loadTexts: jnxWxGrpStatsSysCifs.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysCifs.setDescription('This group contains CIFS statistics at the system level. ')
jnxWxGrpStatsSysCifsFailAppDefBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 3, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysCifsFailAppDefBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysCifsFailAppDefBytes.setDescription('Byte count when CIFS acceleration failed because application definition did not enable CIFS. ')
jnxWxGrpStatsSysCifsFailAppDefPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysCifsFailAppDefPkts.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysCifsFailAppDefPkts.setDescription('Packet count when CIFS acceleration failed because application definition did not enable CIFS. ')
jnxWxGrpStatsSysCifsFailTcpAcclToRemoteBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysCifsFailTcpAcclToRemoteBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysCifsFailTcpAcclToRemoteBytes.setDescription('Byte count when CIFS failed because TCP acceleration was not configured to remote WX. ')
jnxWxGrpStatsSysCifsFailTcpAcclToRemotePkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysCifsFailTcpAcclToRemotePkts.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysCifsFailTcpAcclToRemotePkts.setDescription('Packet count when CIFS failed because TCP acceleration was not configured to remote WX. ')
jnxWxGrpStatsSysCifsFailTcpAcclFailedBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 3, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysCifsFailTcpAcclFailedBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysCifsFailTcpAcclFailedBytes.setDescription('Byte count when CIFS failed because TCP acceleration to remote WX failed. ')
jnxWxGrpStatsSysCifsFailTcpAcclFailedPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 3, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysCifsFailTcpAcclFailedPkts.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysCifsFailTcpAcclFailedPkts.setDescription('Packet count when CIFS failed because TCP acceleration to remote WX failed. ')
jnxWxGrpStatsSysExchange = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 4))
if mibBuilder.loadTexts: jnxWxGrpStatsSysExchange.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysExchange.setDescription('This group contains Exchange statistics at the system level. ')
jnxWxGrpStatsSysExchangeFailAppDefBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysExchangeFailAppDefBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysExchangeFailAppDefBytes.setDescription('Byte count when Exchange acceleration failed because application definition did not enable CIFS. ')
jnxWxGrpStatsSysExchangeFailAppDefPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysExchangeFailAppDefPkts.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysExchangeFailAppDefPkts.setDescription('Packet count when Exchange acceleration failed because application definition did not enable CIFS. ')
jnxWxGrpStatsSysExchangeFailTcpAcclToRemoteBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysExchangeFailTcpAcclToRemoteBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysExchangeFailTcpAcclToRemoteBytes.setDescription('Byte count when Exchange failed because TCP acceleration was not configured to remote WX. ')
jnxWxGrpStatsSysExchangeFailTcpAcclToRemotePkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysExchangeFailTcpAcclToRemotePkts.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysExchangeFailTcpAcclToRemotePkts.setDescription('Packet count when Exchange failed because TCP acceleration was not configured to remote WX. ')
jnxWxGrpStatsSysExchangeFailTcpAcclFailedBytes = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysExchangeFailTcpAcclFailedBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysExchangeFailTcpAcclFailedBytes.setDescription('Byte count when Exchange failed because TCP acceleration to remote WX failed. ')
jnxWxGrpStatsSysExchangeFailTcpAcclFailedPkts = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 1, 4, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsSysExchangeFailTcpAcclFailedPkts.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsSysExchangeFailTcpAcclFailedPkts.setDescription('Packet count when Exchange failed because TCP acceleration to remote WX failed. ')
jnxWxGrpStatsAccl = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 2))
if mibBuilder.loadTexts: jnxWxGrpStatsAccl.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsAccl.setDescription('This group contains general acceleration statistics. ')
jnxWxGrpStatsTcpAcclTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: jnxWxGrpStatsTcpAcclTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsTcpAcclTable.setDescription('This table displays the TCP acceleration statistics for each application per remote WX currently being monitored. ')
jnxWxGrpStatsTcpAcclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "JUNIPER-WX-STATUS-MIB", "jnxWxGrpStatusAppId"), (0, "JUNIPER-WX-STATUS-MIB", "jnxWxGrpStatusRemoteWxId"))
if mibBuilder.loadTexts: jnxWxGrpStatsTcpAcclEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsTcpAcclEntry.setDescription('A row in jnxWxGrpStatsTcpAcclTable. ')
jnxWxGrpStatsTcpAcclPtFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsTcpAcclPtFlows.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsTcpAcclPtFlows.setDescription('The number of flows that are currently passthru. ')
jnxWxGrpStatsTcpAcclProxyFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsTcpAcclProxyFlows.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsTcpAcclProxyFlows.setDescription('The number of flows that are currently being proxied. ')
jnxWxGrpStatsTcpAcclPtFlowsDiff = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsTcpAcclPtFlowsDiff.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsTcpAcclPtFlowsDiff.setDescription('The number of flows that went passthru for this app in last interval (10 sec). These will be delta stats. ')
jnxWxGrpStatsTcpAcclProxyRequestsDiff = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsTcpAcclProxyRequestsDiff.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsTcpAcclProxyRequestsDiff.setDescription('The number of proxy flow request received in last sampling interval (10 sec). These will be delta stats. ')
jnxWxGrpStatsTcpAcclProxyFlowsDiff = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsTcpAcclProxyFlowsDiff.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsTcpAcclProxyFlowsDiff.setDescription('The number of flows we decided to proxy in last sampling interval (10 sec). These will be delta stats. ')
jnxWxGrpStatsTcpAcclFailedToProxyDiff = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsTcpAcclFailedToProxyDiff.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsTcpAcclFailedToProxyDiff.setDescription('The number of flows that could not be proxied for whatever reasons in last sampling interval (10 sec). ')
jnxWxGrpStatsComp = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 3))
if mibBuilder.loadTexts: jnxWxGrpStatsComp.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsComp.setDescription('This group contains compression statistics. ')
jnxWxGrpStatsCompTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 3, 1), )
if mibBuilder.loadTexts: jnxWxGrpStatsCompTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsCompTable.setDescription('This table displays the compression statistics for each application per remote WX currently being monitored. ')
jnxWxGrpStatsCompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 3, 1, 1), ).setIndexNames((0, "JUNIPER-WX-STATUS-MIB", "jnxWxGrpStatusAppId"), (0, "JUNIPER-WX-STATUS-MIB", "jnxWxGrpStatusRemoteWxId"))
if mibBuilder.loadTexts: jnxWxGrpStatsCompEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsCompEntry.setDescription('A row in jnxWxGrpStatsCompTable. ')
jnxWxGrpStatsCompBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 3, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsCompBytesIn.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsCompBytesIn.setDescription('The number of bytes in. ')
jnxWxGrpStatsCompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsCompBytesOut.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsCompBytesOut.setDescription('The number of bytes out. ')
jnxWxGrpStatsCompCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsCompCacheHits.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsCompCacheHits.setDescription('The number of cache hits. ')
jnxWxGrpStatsCompCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsCompCacheMisses.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsCompCacheMisses.setDescription('The number of cache misses. ')
jnxWxGrpStatsWanPerf = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 4))
if mibBuilder.loadTexts: jnxWxGrpStatsWanPerf.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsWanPerf.setDescription('This group contains WAN performance statistics. ')
jnxWxGrpStatsWanPerfTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 4, 1), )
if mibBuilder.loadTexts: jnxWxGrpStatsWanPerfTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsWanPerfTable.setDescription('This table displays the WAN performance statistics for each application per remote WX currently being monitored. ')
jnxWxGrpStatsWanPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 4, 1, 1), ).setIndexNames((0, "JUNIPER-WX-STATUS-MIB", "jnxWxGrpStatusAppId"), (0, "JUNIPER-WX-STATUS-MIB", "jnxWxGrpStatusRemoteWxId"))
if mibBuilder.loadTexts: jnxWxGrpStatsWanPerfEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsWanPerfEntry.setDescription('A row in jnxWxGrpStatsWanPerfTable. ')
jnxWxGrpStatsWanPerfBytesToWan = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 4, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsWanPerfBytesToWan.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsWanPerfBytesToWan.setDescription('The number of bytes to WAN. ')
jnxWxGrpStatsWanPerfBytesFromWan = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 41, 1, 1, 2, 4, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxGrpStatsWanPerfBytesFromWan.setStatus('current')
if mibBuilder.loadTexts: jnxWxGrpStatsWanPerfBytesFromWan.setDescription('The number of bytes from WAN. ')
mibBuilder.exportSymbols("JUNIPER-WX-STATS-MIB", jnxWxGrpStatsSysPtAppDefMatchBytes=jnxWxGrpStatsSysPtAppDefMatchBytes, jnxWxGrpStatsSys=jnxWxGrpStatsSys, jnxWxGrpStatsWanPerf=jnxWxGrpStatsWanPerf, jnxWxGrpStatsSysPtNonIpBytes=jnxWxGrpStatsSysPtNonIpBytes, jnxWxGrpStatsTcpAcclEntry=jnxWxGrpStatsTcpAcclEntry, jnxWxGrpStatsSysExchangeFailAppDefBytes=jnxWxGrpStatsSysExchangeFailAppDefBytes, jnxWxGrpStatsTcpAcclPtFlowsDiff=jnxWxGrpStatsTcpAcclPtFlowsDiff, jnxWxGrpStatsSysCompTcpAcclFailedPkts=jnxWxGrpStatsSysCompTcpAcclFailedPkts, jnxWxGrpStatsSysCompFailAppDefDisablePkts=jnxWxGrpStatsSysCompFailAppDefDisablePkts, jnxWxGrpStatsAccl=jnxWxGrpStatsAccl, jnxWxGrpStatsSysPtNoRemoteWxBytes=jnxWxGrpStatsSysPtNoRemoteWxBytes, jnxWxGrpStatsSysCifs=jnxWxGrpStatsSysCifs, jnxWxGrpStatsWanPerfTable=jnxWxGrpStatsWanPerfTable, jnxWxGrpStatsSysExchangeFailTcpAcclFailedPkts=jnxWxGrpStatsSysExchangeFailTcpAcclFailedPkts, jnxWxGrpStatsSysCompFailTcpAcclToRemotePkts=jnxWxGrpStatsSysCompFailTcpAcclToRemotePkts, jnxWxGrpStatsSysCompFailResCrunchBytes=jnxWxGrpStatsSysCompFailResCrunchBytes, jnxWxGrpStatsSysPtVlanBytes=jnxWxGrpStatsSysPtVlanBytes, jnxWxGrpStatsSysPtMcastPkts=jnxWxGrpStatsSysPtMcastPkts, jnxWxGrpStatsSysCompTcpAcclFailedBytes=jnxWxGrpStatsSysCompTcpAcclFailedBytes, jnxWxGrpStatsSysCifsFailAppDefPkts=jnxWxGrpStatsSysCifsFailAppDefPkts, jnxWxGrpStatsSysPtFragIpBytes=jnxWxGrpStatsSysPtFragIpBytes, jnxWxGrpStatsTcpAcclFailedToProxyDiff=jnxWxGrpStatsTcpAcclFailedToProxyDiff, jnxWxGrpStatsTcpAcclPtFlows=jnxWxGrpStatsTcpAcclPtFlows, jnxWxGrpStatsSysCompFailAppDefDisableBytes=jnxWxGrpStatsSysCompFailAppDefDisableBytes, jnxWxGrpStatsCompEntry=jnxWxGrpStatsCompEntry, jnxWxGrpStatsSysCifsFailTcpAcclFailedPkts=jnxWxGrpStatsSysCifsFailTcpAcclFailedPkts, jnxWxGrpStatsSysPtAppDefMatchPkts=jnxWxGrpStatsSysPtAppDefMatchPkts, jnxWxGrpStatsSysCifsFailAppDefBytes=jnxWxGrpStatsSysCifsFailAppDefBytes, jnxWxGrpStatsSysPtNonTcpProtoBytes=jnxWxGrpStatsSysPtNonTcpProtoBytes, jnxWxGrpStatsSysExchangeFailTcpAcclToRemotePkts=jnxWxGrpStatsSysExchangeFailTcpAcclToRemotePkts, jnxWxGrpStatsCompTable=jnxWxGrpStatsCompTable, jnxWxGrpStatsSysCompFailTcpAcclToRemoteBytes=jnxWxGrpStatsSysCompFailTcpAcclToRemoteBytes, jnxWxGrpStatsSysCifsFailTcpAcclFailedBytes=jnxWxGrpStatsSysCifsFailTcpAcclFailedBytes, jnxWxGrpStatsTcpAcclProxyFlowsDiff=jnxWxGrpStatsTcpAcclProxyFlowsDiff, jnxWxGrpStatsCompBytesIn=jnxWxGrpStatsCompBytesIn, jnxWxGrpStatsSysPtNonIpPkts=jnxWxGrpStatsSysPtNonIpPkts, jnxWxGrpStatsSysExchangeFailTcpAcclToRemoteBytes=jnxWxGrpStatsSysExchangeFailTcpAcclToRemoteBytes, jnxWxGrpStatsCompCacheHits=jnxWxGrpStatsCompCacheHits, jnxWxGrpStatsSysCifsFailTcpAcclToRemotePkts=jnxWxGrpStatsSysCifsFailTcpAcclToRemotePkts, jnxWxGrpStatsSysExchangeFailAppDefPkts=jnxWxGrpStatsSysExchangeFailAppDefPkts, jnxWxGrpStatsSysExchangeFailTcpAcclFailedBytes=jnxWxGrpStatsSysExchangeFailTcpAcclFailedBytes, jnxWxGrpStatsSysPtMcastBytes=jnxWxGrpStatsSysPtMcastBytes, jnxWxGrpStatsTcpAcclProxyRequestsDiff=jnxWxGrpStatsTcpAcclProxyRequestsDiff, jnxWxGrpStatsSysCifsFailTcpAcclToRemoteBytes=jnxWxGrpStatsSysCifsFailTcpAcclToRemoteBytes, jnxWxGrpStatsSysComp=jnxWxGrpStatsSysComp, jnxWxGrpStatsCompCacheMisses=jnxWxGrpStatsCompCacheMisses, jnxWxGrpStatsSysPtVlanPkts=jnxWxGrpStatsSysPtVlanPkts, jnxWxGrpStatsTcpAcclProxyFlows=jnxWxGrpStatsTcpAcclProxyFlows, jnxWxGrpStatsSysPtNonTcpProtoPkts=jnxWxGrpStatsSysPtNonTcpProtoPkts, jnxWxGrpStatsCompBytesOut=jnxWxGrpStatsCompBytesOut, jnxWxGrpStatsSysExchange=jnxWxGrpStatsSysExchange, jnxWxGrpStatsSysPtFragIpPkts=jnxWxGrpStatsSysPtFragIpPkts, jnxWxGrpStatsSysPtNoRemoteWxPkts=jnxWxGrpStatsSysPtNoRemoteWxPkts, jnxWxGrpStatsTcpAcclTable=jnxWxGrpStatsTcpAcclTable, jnxWxGrpStatsSysCompFailAlgoLimitBytes=jnxWxGrpStatsSysCompFailAlgoLimitBytes, jnxWxGrpStatsSysPt=jnxWxGrpStatsSysPt, jnxWxGrpStatsWanPerfBytesToWan=jnxWxGrpStatsWanPerfBytesToWan, jnxWxGrpStatsWanPerfEntry=jnxWxGrpStatsWanPerfEntry, jnxWxGrpStatsWanPerfBytesFromWan=jnxWxGrpStatsWanPerfBytesFromWan, jnxWxGrpStatsComp=jnxWxGrpStatsComp)
