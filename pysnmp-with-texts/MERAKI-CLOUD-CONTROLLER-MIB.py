#
# PySNMP MIB module MERAKI-CLOUD-CONTROLLER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MERAKI-CLOUD-CONTROLLER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:11:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter64, MibIdentifier, ModuleIdentity, NotificationType, enterprises, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, iso, Bits, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "MibIdentifier", "ModuleIdentity", "NotificationType", "enterprises", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "iso", "Bits", "Gauge32", "Unsigned32")
PhysAddress, DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "DateAndTime", "TextualConvention")
cloudController = ModuleIdentity((1, 3, 6, 1, 4, 1, 29671, 1))
if mibBuilder.loadTexts: cloudController.setLastUpdated('201205240001Z')
if mibBuilder.loadTexts: cloudController.setOrganization('Meraki, Inc.')
if mibBuilder.loadTexts: cloudController.setContactInfo('Meraki, Inc. 660 Alabama St., San Francisco, CA 94110 USA Tel: +1-415-632-5800')
if mibBuilder.loadTexts: cloudController.setDescription('Management information base in SMI v2 for the Meraki Cloud Controller.')
meraki = MibIdentifier((1, 3, 6, 1, 4, 1, 29671))
organization = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 1, 1))
merakiProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7))
testTrap = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 1)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"))
if mibBuilder.loadTexts: testTrap.setStatus('current')
if mibBuilder.loadTexts: testTrap.setDescription('A test trap to verify whether the receiving server is configured correctly. The name of the network where the trap configuration resides will be sent as well. ')
deviceGoesDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 2)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"))
if mibBuilder.loadTexts: deviceGoesDownTrap.setStatus('current')
if mibBuilder.loadTexts: deviceGoesDownTrap.setDescription("Alert when a device becomes unreachable from the Meraki cloud. The device's mac address is enclosed.")
deviceComesOnline = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 3)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"))
if mibBuilder.loadTexts: deviceComesOnline.setStatus('current')
if mibBuilder.loadTexts: deviceComesOnline.setDescription("Alert when a device reconnects to the Meraki cloud. The device's mac address is enclosed.")
foreignAPDetected = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 4)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"))
if mibBuilder.loadTexts: foreignAPDetected.setStatus('current')
if mibBuilder.loadTexts: foreignAPDetected.setDescription('Alert when an unknown access point appears on the network.')
cellularNetworkUp = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 5)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceModel"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceCarrier"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceName"))
if mibBuilder.loadTexts: cellularNetworkUp.setStatus('current')
if mibBuilder.loadTexts: cellularNetworkUp.setDescription('Alert when a network connects to a cellular network.')
cellularNetworkDown = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 6)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceModel"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceCarrier"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceName"))
if mibBuilder.loadTexts: cellularNetworkDown.setStatus('current')
if mibBuilder.loadTexts: cellularNetworkDown.setDescription('Alert when a network disconnects from a cellular network.')
newDhcpServerAlert = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 7)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devLanIp"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devSubnet"), ("MERAKI-CLOUD-CONTROLLER-MIB", "vlanNumber"))
if mibBuilder.loadTexts: newDhcpServerAlert.setStatus('current')
if mibBuilder.loadTexts: newDhcpServerAlert.setDescription('Alert when a new dhcp server appears on the network.')
noDhcpLeases = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 8)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devLanIp"), ("MERAKI-CLOUD-CONTROLLER-MIB", "vlanNumber"))
if mibBuilder.loadTexts: noDhcpLeases.setStatus('current')
if mibBuilder.loadTexts: noDhcpLeases.setDescription('Alert when DHCP leases are exhausted.')
uplinkStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 9)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceName"))
if mibBuilder.loadTexts: uplinkStatusChanged.setStatus('current')
if mibBuilder.loadTexts: uplinkStatusChanged.setDescription('Alert when an uplink status changes.')
unreachableDevicesDetected = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 10)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"))
if mibBuilder.loadTexts: unreachableDevicesDetected.setStatus('current')
if mibBuilder.loadTexts: unreachableDevicesDetected.setDescription('Unreachable devices have been detected on the network. Adjust firewall settings accordingly.')
upcomingFirewallInformationChanges = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 11)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"))
if mibBuilder.loadTexts: upcomingFirewallInformationChanges.setStatus('current')
if mibBuilder.loadTexts: upcomingFirewallInformationChanges.setDescription('Upcoming firewall information changes. Adjust firewall settings accordingly.')
gatewayToRepeater = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 12)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"))
if mibBuilder.loadTexts: gatewayToRepeater.setStatus('current')
if mibBuilder.loadTexts: gatewayToRepeater.setDescription('Alert when a gateway becomes a repeater.')
ipConflict = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 13)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devLanIp"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"))
if mibBuilder.loadTexts: ipConflict.setStatus('current')
if mibBuilder.loadTexts: ipConflict.setDescription('Alert if a client IP conflict is detected.')
newSplashSignup = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 14)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "ssidName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "userName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "userEmail"))
if mibBuilder.loadTexts: newSplashSignup.setStatus('current')
if mibBuilder.loadTexts: newSplashSignup.setDescription('Alert when a new splash user registers to an SSID.')
portCableError = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 15)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceDescription"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfacePortDescription"))
if mibBuilder.loadTexts: portCableError.setStatus('current')
if mibBuilder.loadTexts: portCableError.setDescription('Alert when a cable error is detected.')
portConnected = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 16)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceDescription"))
if mibBuilder.loadTexts: portConnected.setStatus('current')
if mibBuilder.loadTexts: portConnected.setDescription('Alert when a switch port is connected.')
portDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 17)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceDescription"))
if mibBuilder.loadTexts: portDisconnected.setStatus('current')
if mibBuilder.loadTexts: portDisconnected.setDescription('Alert when a switch port is disconnected.')
portSpeedChange = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 18)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceDescription"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devInterfacePortDescription"))
if mibBuilder.loadTexts: portSpeedChange.setStatus('current')
if mibBuilder.loadTexts: portSpeedChange.setDescription('Alert when a switch port link speed changed.')
rogueDhcpServer = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 19)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devSubnet"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devLanIp"), ("MERAKI-CLOUD-CONTROLLER-MIB", "vlanNumber"))
if mibBuilder.loadTexts: rogueDhcpServer.setStatus('current')
if mibBuilder.loadTexts: rogueDhcpServer.setDescription('Alert when a rogue DHCP server is detected. Contains the mac, IP, subnet and VLAN of the Rogue DHCP server.')
settingsChanged = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 20)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "networkAdmin"))
if mibBuilder.loadTexts: settingsChanged.setStatus('current')
if mibBuilder.loadTexts: settingsChanged.setDescription('Alert when Meraki Dashboard settings are changed. Includes information about the network admin that made the changes.')
unreachableRadiusServer = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 21)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "radiusServerIp"), ("MERAKI-CLOUD-CONTROLLER-MIB", "ssidName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devLanIp"))
if mibBuilder.loadTexts: unreachableRadiusServer.setStatus('current')
if mibBuilder.loadTexts: unreachableRadiusServer.setDescription('Alert when a RADIUS authentication server becomes unreachable. Contains the IP of the RADIUS server, the IP of the Meraki server having trouble connecting to it and the name of the SSID that uses the RADIUS server.')
vpnConnectivityChange = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 22)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devMac"), ("MERAKI-CLOUD-CONTROLLER-MIB", "vpnPeer"), ("MERAKI-CLOUD-CONTROLLER-MIB", "devStatus"))
if mibBuilder.loadTexts: vpnConnectivityChange.setStatus('current')
if mibBuilder.loadTexts: vpnConnectivityChange.setDescription('Alert when VPN connectivity changed. Contains the IP and port of VPN peer, the mac address of the device used to VPN, and the status whether or not the VPN is on or offline')
vpnFailoverDetected = NotificationType((1, 3, 6, 1, 4, 1, 29671, 1, 1, 7, 23)).setObjects(("MERAKI-CLOUD-CONTROLLER-MIB", "networkName"), ("MERAKI-CLOUD-CONTROLLER-MIB", "organizationName"))
if mibBuilder.loadTexts: vpnFailoverDetected.setStatus('current')
if mibBuilder.loadTexts: vpnFailoverDetected.setDescription('Alert when a VPN failover is detected.')
organizationName = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: organizationName.setStatus('current')
if mibBuilder.loadTexts: organizationName.setDescription('Organization name.')
networkTable = MibTable((1, 3, 6, 1, 4, 1, 29671, 1, 1, 2), )
if mibBuilder.loadTexts: networkTable.setStatus('current')
if mibBuilder.loadTexts: networkTable.setDescription('Networks table.')
networkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29671, 1, 1, 2, 1), ).setIndexNames((0, "MERAKI-CLOUD-CONTROLLER-MIB", "networkId"))
if mibBuilder.loadTexts: networkEntry.setStatus('current')
if mibBuilder.loadTexts: networkEntry.setDescription('Describes each network.')
networkId = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkId.setStatus('current')
if mibBuilder.loadTexts: networkId.setDescription('Network id, consists of 8 octets. Remains the same even if the name of the network changes')
networkName = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkName.setStatus('current')
if mibBuilder.loadTexts: networkName.setDescription('Network name.')
networkAdmin = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAdmin.setStatus('current')
if mibBuilder.loadTexts: networkAdmin.setDescription('Name and email of a network admin.')
vpnPeer = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpnPeer.setStatus('current')
if mibBuilder.loadTexts: vpnPeer.setDescription('IP and port of a VPN peer connected to the network.')
ssidTable = MibTable((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3), )
if mibBuilder.loadTexts: ssidTable.setStatus('current')
if mibBuilder.loadTexts: ssidTable.setDescription('SSID table.')
ssidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3, 1), ).setIndexNames((0, "MERAKI-CLOUD-CONTROLLER-MIB", "networkId"), (0, "MERAKI-CLOUD-CONTROLLER-MIB", "ssidNumber"))
if mibBuilder.loadTexts: ssidEntry.setStatus('current')
if mibBuilder.loadTexts: ssidEntry.setDescription('Describes each SSID.')
ssidNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssidNetworkName.setStatus('current')
if mibBuilder.loadTexts: ssidNetworkName.setDescription('The name of the network the SSID is part of.')
ssidNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssidNumber.setStatus('current')
if mibBuilder.loadTexts: ssidNumber.setDescription('SSID number.')
ssidName = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssidName.setStatus('current')
if mibBuilder.loadTexts: ssidName.setDescription('SSID name.')
userName = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('Name of user connected to SSID.')
userEmail = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userEmail.setStatus('current')
if mibBuilder.loadTexts: userEmail.setDescription('Email of user connected to SSID.')
radiusServerIp = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerIp.setStatus('current')
if mibBuilder.loadTexts: radiusServerIp.setDescription('IP address of RADIUS server used for authentication on an SSID.')
radiusServerPort = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 3, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerPort.setStatus('current')
if mibBuilder.loadTexts: radiusServerPort.setDescription('Port associated with an IP address of RADIUS server used for authentication on an SSID.')
devTable = MibTable((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4), )
if mibBuilder.loadTexts: devTable.setStatus('current')
if mibBuilder.loadTexts: devTable.setDescription('Device table.')
devEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1), ).setIndexNames((0, "MERAKI-CLOUD-CONTROLLER-MIB", "devMac"))
if mibBuilder.loadTexts: devEntry.setStatus('current')
if mibBuilder.loadTexts: devEntry.setDescription('Describes each device.')
devMac = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 1), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: devMac.setStatus('current')
if mibBuilder.loadTexts: devMac.setDescription('The MAC address of the device.')
devName = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devName.setStatus('current')
if mibBuilder.loadTexts: devName.setDescription('Device name.')
devStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offline", 0), ("online", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devStatus.setStatus('current')
if mibBuilder.loadTexts: devStatus.setDescription("The status of the device's connection to the Meraki Cloud Controller")
devContactedAt = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devContactedAt.setStatus('current')
if mibBuilder.loadTexts: devContactedAt.setDescription('The last time the device contacted the Cloud Controller.')
devClientCount = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devClientCount.setStatus('current')
if mibBuilder.loadTexts: devClientCount.setDescription('The number of clients currently associated with the device.')
devMeshStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("gateway", 0), ("repeater", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devMeshStatus.setStatus('current')
if mibBuilder.loadTexts: devMeshStatus.setDescription('Whether the device is currently acting as a gateway or a repeater.')
devPublicIp = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devPublicIp.setStatus('current')
if mibBuilder.loadTexts: devPublicIp.setDescription('Whether the device is currently acting as a gateway (as opposed to a repeater).')
devSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devSerial.setStatus('current')
if mibBuilder.loadTexts: devSerial.setDescription('Device serial number.')
devProductCode = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devProductCode.setStatus('current')
if mibBuilder.loadTexts: devProductCode.setDescription('Device product code.')
devProductDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devProductDescription.setStatus('current')
if mibBuilder.loadTexts: devProductDescription.setDescription('Device product description.')
devNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devNetworkName.setStatus('current')
if mibBuilder.loadTexts: devNetworkName.setDescription('The name of the network this device is in. Useful in tables.')
devLanIp = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devLanIp.setStatus('current')
if mibBuilder.loadTexts: devLanIp.setDescription('The LAN IP of the device. Useful for DHCP server alerts.')
devSubnet = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devSubnet.setStatus('current')
if mibBuilder.loadTexts: devSubnet.setDescription('The subnet the device is on. Useful for DHCP server alerts.')
devInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5), )
if mibBuilder.loadTexts: devInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: devInterfaceTable.setDescription('Device interfaces table.')
devInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1), ).setIndexNames((0, "MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceDevMac"), (0, "MERAKI-CLOUD-CONTROLLER-MIB", "devInterfaceIndex"))
if mibBuilder.loadTexts: devInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: devInterfaceEntry.setDescription('Describes each device.')
devInterfaceDevMac = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 1), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceDevMac.setStatus('current')
if mibBuilder.loadTexts: devInterfaceDevMac.setDescription('The MAC address of the device.')
devInterfaceIndex = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: devInterfaceIndex.setDescription('The index of this interface.')
devInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceName.setStatus('current')
if mibBuilder.loadTexts: devInterfaceName.setDescription('The name of this interface.')
devInterfaceSentPkts = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceSentPkts.setStatus('current')
if mibBuilder.loadTexts: devInterfaceSentPkts.setDescription('The number of packets sent on this interface.')
devInterfaceRecvPkts = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceRecvPkts.setStatus('current')
if mibBuilder.loadTexts: devInterfaceRecvPkts.setDescription('The number of packets received on this interface.')
devInterfaceSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceSentBytes.setStatus('current')
if mibBuilder.loadTexts: devInterfaceSentBytes.setDescription('The number of bytes sent on this interface.')
devInterfaceRecvBytes = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceRecvBytes.setStatus('current')
if mibBuilder.loadTexts: devInterfaceRecvBytes.setDescription('The number of bytes received on this interface.')
devInterfaceModel = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceModel.setStatus('current')
if mibBuilder.loadTexts: devInterfaceModel.setDescription('The model of the interface. Useful for cellular interfaces.')
devInterfaceCarrier = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceCarrier.setStatus('current')
if mibBuilder.loadTexts: devInterfaceCarrier.setDescription('The carrier for the interface. Useful for cellular interfaces.')
devInterfaceDescription = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfaceDescription.setStatus('current')
if mibBuilder.loadTexts: devInterfaceDescription.setDescription('Description for the interface. Useful for information about ports')
devInterfacePortDescription = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devInterfacePortDescription.setStatus('current')
if mibBuilder.loadTexts: devInterfacePortDescription.setDescription('Description for errors occuring on the interface. Useful for information about ports')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 29671, 1, 1, 6), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
if mibBuilder.loadTexts: vlanTable.setDescription('VLAN table.')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29671, 1, 1, 6, 1), ).setIndexNames((0, "MERAKI-CLOUD-CONTROLLER-MIB", "networkId"), (0, "MERAKI-CLOUD-CONTROLLER-MIB", "vlanNumber"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
if mibBuilder.loadTexts: vlanEntry.setDescription('Describes each VLAN.')
vlanNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNetworkName.setStatus('current')
if mibBuilder.loadTexts: vlanNetworkName.setDescription('The name of the network the VLAN is part of.')
vlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 29671, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNumber.setStatus('current')
if mibBuilder.loadTexts: vlanNumber.setDescription('VLAN number.')
vlanName = MibScalar((1, 3, 6, 1, 4, 1, 29671, 1, 1, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanName.setStatus('current')
if mibBuilder.loadTexts: vlanName.setDescription('VLAN name.')
mini = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 1))
id2 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 2))
wpg = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 3))
od1 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 4))
od2 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 5))
od3 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 6))
mo1 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 7))
sol = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 8))
lr1 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 9))
mr11 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 10))
mr12 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 11))
mr14 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 12))
mr16 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 13))
mr24 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 14))
mr62 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 15))
mr66 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 16))
mr34 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 17))
mr18 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 18))
mr26 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 19))
mr32 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 20))
mr72 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 21))
z1 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 100))
mx70 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 101))
mx80 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 102))
mx90 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 103))
mx400 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 104))
mx600 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 105))
mx100 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 106))
mx60 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 107))
mx60w = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 108))
merakiVM10 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 200))
ms22 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 300))
ms22p = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 301))
ms42 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 302))
ms42p = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 303))
ms220_8 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 304)).setLabel("ms220-8")
ms220_8p = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 305)).setLabel("ms220-8p")
ms220_24 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 306)).setLabel("ms220-24")
ms220_24p = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 307)).setLabel("ms220-24p")
ms220_48 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 308)).setLabel("ms220-48")
ms220_48lp = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 309)).setLabel("ms220-48lp")
ms220_48fp = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 310)).setLabel("ms220-48fp")
ms320_24 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 311)).setLabel("ms320-24")
ms320_24p = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 312)).setLabel("ms320-24p")
ms320_48 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 313)).setLabel("ms320-48")
ms320_48lp = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 314)).setLabel("ms320-48lp")
ms320_48fp = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 315)).setLabel("ms320-48fp")
ms420_24 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 316)).setLabel("ms420-24")
ms420_48 = MibIdentifier((1, 3, 6, 1, 4, 1, 29671, 2, 317)).setLabel("ms420-48")
mibBuilder.exportSymbols("MERAKI-CLOUD-CONTROLLER-MIB", rogueDhcpServer=rogueDhcpServer, devProductCode=devProductCode, devInterfaceTable=devInterfaceTable, z1=z1, id2=id2, devInterfaceEntry=devInterfaceEntry, ms420_48=ms420_48, vlanTable=vlanTable, lr1=lr1, networkName=networkName, foreignAPDetected=foreignAPDetected, networkId=networkId, ssidEntry=ssidEntry, devSubnet=devSubnet, PYSNMP_MODULE_ID=cloudController, organization=organization, mr26=mr26, mr18=mr18, devProductDescription=devProductDescription, ms220_24=ms220_24, devInterfaceRecvPkts=devInterfaceRecvPkts, mr66=mr66, mx80=mx80, ms42=ms42, merakiProducts=merakiProducts, devSerial=devSerial, ms22p=ms22p, devContactedAt=devContactedAt, ms220_8=ms220_8, testTrap=testTrap, mx400=mx400, ms420_24=ms420_24, unreachableDevicesDetected=unreachableDevicesDetected, vlanEntry=vlanEntry, vpnFailoverDetected=vpnFailoverDetected, devClientCount=devClientCount, traps=traps, gatewayToRepeater=gatewayToRepeater, noDhcpLeases=noDhcpLeases, uplinkStatusChanged=uplinkStatusChanged, devInterfaceSentPkts=devInterfaceSentPkts, upcomingFirewallInformationChanges=upcomingFirewallInformationChanges, vpnConnectivityChange=vpnConnectivityChange, newSplashSignup=newSplashSignup, cloudController=cloudController, ssidName=ssidName, cellularNetworkUp=cellularNetworkUp, networkAdmin=networkAdmin, deviceComesOnline=deviceComesOnline, mr24=mr24, ssidNetworkName=ssidNetworkName, mx70=mx70, ms42p=ms42p, meraki=meraki, devLanIp=devLanIp, mr32=mr32, ms320_48fp=ms320_48fp, ms220_48fp=ms220_48fp, settingsChanged=settingsChanged, devStatus=devStatus, ms320_48=ms320_48, devNetworkName=devNetworkName, userName=userName, radiusServerIp=radiusServerIp, ssidNumber=ssidNumber, devInterfaceRecvBytes=devInterfaceRecvBytes, mo1=mo1, od2=od2, od3=od3, mr34=mr34, sol=sol, mx600=mx600, devInterfaceName=devInterfaceName, deviceGoesDownTrap=deviceGoesDownTrap, devMac=devMac, mini=mini, ssidTable=ssidTable, ms320_24p=ms320_24p, devInterfaceDevMac=devInterfaceDevMac, networkEntry=networkEntry, networkTable=networkTable, mr11=mr11, mx100=mx100, ms22=ms22, userEmail=userEmail, vpnPeer=vpnPeer, organizationName=organizationName, devInterfacePortDescription=devInterfacePortDescription, ms220_48=ms220_48, ms220_8p=ms220_8p, mx60=mx60, newDhcpServerAlert=newDhcpServerAlert, portSpeedChange=portSpeedChange, od1=od1, ms220_24p=ms220_24p, devEntry=devEntry, radiusServerPort=radiusServerPort, portCableError=portCableError, devInterfaceIndex=devInterfaceIndex, cellularNetworkDown=cellularNetworkDown, mr12=mr12, mr16=mr16, devInterfaceSentBytes=devInterfaceSentBytes, mx60w=mx60w, ms220_48lp=ms220_48lp, devInterfaceDescription=devInterfaceDescription, mr14=mr14, mr62=mr62, ms320_48lp=ms320_48lp, portDisconnected=portDisconnected, devPublicIp=devPublicIp, vlanName=vlanName, vlanNumber=vlanNumber, devName=devName, devMeshStatus=devMeshStatus, portConnected=portConnected, mr72=mr72, devInterfaceCarrier=devInterfaceCarrier, merakiVM10=merakiVM10, wpg=wpg, ms320_24=ms320_24, devTable=devTable, ipConflict=ipConflict, unreachableRadiusServer=unreachableRadiusServer, mx90=mx90, vlanNetworkName=vlanNetworkName, devInterfaceModel=devInterfaceModel)
