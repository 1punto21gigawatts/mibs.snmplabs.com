#
# PySNMP MIB module HH3C-LLDP-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-LLDP-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:27:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
LldpPortNumber, = mibBuilder.importSymbols("LLDP-MIB", "LldpPortNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, ObjectIdentity, Counter64, NotificationType, Bits, TimeTicks, IpAddress, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "Counter64", "NotificationType", "Bits", "TimeTicks", "IpAddress", "Unsigned32", "iso")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
hh3clldp = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 100))
hh3clldp.setRevisions(('2009-03-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3clldp.setRevisionsDescriptions(('',))
if mibBuilder.loadTexts: hh3clldp.setLastUpdated('200903210000Z')
if mibBuilder.loadTexts: hh3clldp.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3clldp.setContactInfo('Platform Team H3C Technologies Co.,Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3clldp.setDescription('LLDP extended management infomation.')
hh3clldpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 100, 1))
hh3clldpConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 100, 1, 1))
hh3clldpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 100, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3clldpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hh3clldpAdminStatus.setDescription('The global administratively desired status of the local LLDP agent.')
hh3clldpComplianceCDPStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 100, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3clldpComplianceCDPStatus.setStatus('current')
if mibBuilder.loadTexts: hh3clldpComplianceCDPStatus.setDescription('The global administratively desired status of CDP Compliance.')
hh3clldpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 100, 1, 1, 3), )
if mibBuilder.loadTexts: hh3clldpPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: hh3clldpPortConfigTable.setDescription('The port-based table that controls extended functions.')
hh3clldpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 100, 1, 1, 3, 1), ).setIndexNames((0, "HH3C-LLDP-EXT-MIB", "hh3clldpPortConfigPortNum"))
if mibBuilder.loadTexts: hh3clldpPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hh3clldpPortConfigEntry.setDescription('LLDP extended configuration information for a particular port. This co- nfiguration parameter controls compliance with other non-standard link layer discovery protocol such as CDP.')
hh3clldpPortConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 100, 1, 1, 3, 1, 1), LldpPortNumber())
if mibBuilder.loadTexts: hh3clldpPortConfigPortNum.setStatus('current')
if mibBuilder.loadTexts: hh3clldpPortConfigPortNum.setDescription('The index value used to identify the port component associated with th- is entry.')
hh3clldpPortConfigCDPComplianceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 100, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("txAndRx", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3clldpPortConfigCDPComplianceStatus.setStatus('current')
if mibBuilder.loadTexts: hh3clldpPortConfigCDPComplianceStatus.setDescription("The administratively desired CDP Compliance status of the local LLDP a- gent. If the associated hh3clldpPortConfigCDPComplianceStatus object has a value of 'txAndRx', then the LLDP agent will receive CDP frames on th- is port, and will transmit CDP frames only after receive a CDP frames. If the associated lldpPortConfigAdminStatus object has a value of 'disa- bled', LLDP agent will not transmit or receive CDP frames on this port.")
mibBuilder.exportSymbols("HH3C-LLDP-EXT-MIB", hh3clldpComplianceCDPStatus=hh3clldpComplianceCDPStatus, hh3clldpConfiguration=hh3clldpConfiguration, PYSNMP_MODULE_ID=hh3clldp, hh3clldp=hh3clldp, hh3clldpPortConfigCDPComplianceStatus=hh3clldpPortConfigCDPComplianceStatus, hh3clldpAdminStatus=hh3clldpAdminStatus, hh3clldpPortConfigEntry=hh3clldpPortConfigEntry, hh3clldpPortConfigPortNum=hh3clldpPortConfigPortNum, hh3clldpPortConfigTable=hh3clldpPortConfigTable, hh3clldpObjects=hh3clldpObjects)
