#
# PySNMP MIB module ALCATEL-IND1-SESSION-MGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-SESSION-MGR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:19:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1Sesmgr, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Sesmgr")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, Integer32, IpAddress, iso, ObjectIdentity, Bits, TimeTicks, Counter32, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "IpAddress", "iso", "ObjectIdentity", "Bits", "TimeTicks", "Counter32", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "Unsigned32")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
alcatelIND1SessionMgrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1))
alcatelIND1SessionMgrMIB.setRevisions(('2010-05-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1SessionMgrMIB.setRevisionsDescriptions(('Fixed the Notifications to use MIB Module OID.0 as Notifications root.',))
if mibBuilder.loadTexts: alcatelIND1SessionMgrMIB.setLastUpdated('201005260000Z')
if mibBuilder.loadTexts: alcatelIND1SessionMgrMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1SessionMgrMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1SessionMgrMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): For the Birds Of Prey Product Line User Sessions Manager Subsystem. The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1SessionMgrMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 0))
if mibBuilder.loadTexts: alcatelIND1SessionMgrMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SessionMgrMIBNotifications.setDescription('Branch For Session manager MIB Subsystem Notifications.')
alcatelIND1SessionMgrMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1))
if mibBuilder.loadTexts: alcatelIND1SessionMgrMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SessionMgrMIBObjects.setDescription('Branch For Session Manager Subsystem Managed Objects.')
alcatelIND1SessionMgrMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 2))
if mibBuilder.loadTexts: alcatelIND1SessionMgrMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SessionMgrMIBConformance.setDescription('Branch For Session Manager Subsystem Conformance Information.')
alcatelIND1SessionMgrMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1SessionMgrMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SessionMgrMIBGroups.setDescription('Branch For Session Manager Subsystem Units Of Conformance.')
alcatelIND1SessionMgrMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1SessionMgrMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SessionMgrMIBCompliances.setDescription('Branch For Session Manager Subsystem Compliance Statements.')
sessionMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1))
sessionConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 1), )
if mibBuilder.loadTexts: sessionConfigTable.setStatus('current')
if mibBuilder.loadTexts: sessionConfigTable.setDescription('The configuration parameters of a user session.')
sessionConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SESSION-MGR-MIB", "sessionType"))
if mibBuilder.loadTexts: sessionConfigEntry.setStatus('current')
if mibBuilder.loadTexts: sessionConfigEntry.setDescription('An entry of the session configuration table.')
sessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cli", 1), ("http", 2), ("ftp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionType.setStatus('current')
if mibBuilder.loadTexts: sessionType.setDescription('The type of the session interface.')
sessionBannerFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionBannerFileName.setStatus('current')
if mibBuilder.loadTexts: sessionBannerFileName.setDescription('Optional Banner File Name. For CLI, HTTP, and FTP sessions only.')
sessionInactivityTimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 596523)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionInactivityTimerValue.setStatus('current')
if mibBuilder.loadTexts: sessionInactivityTimerValue.setDescription('The inactivity timer value for this type of session, in minutes.')
sessionDefaultPromptString = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)).clone('-> ')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionDefaultPromptString.setStatus('current')
if mibBuilder.loadTexts: sessionDefaultPromptString.setDescription('Prompt string. For CLI sessions only.')
sessionActiveTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 2), )
if mibBuilder.loadTexts: sessionActiveTable.setStatus('current')
if mibBuilder.loadTexts: sessionActiveTable.setDescription('A list of active users sessions.')
sessionActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-SESSION-MGR-MIB", "sessionIndex"))
if mibBuilder.loadTexts: sessionActiveEntry.setStatus('current')
if mibBuilder.loadTexts: sessionActiveEntry.setDescription('An entry in the session active table.')
sessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionIndex.setStatus('current')
if mibBuilder.loadTexts: sessionIndex.setDescription('The index of the session.')
sessionAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("console", 1), ("telnet", 2), ("ftp", 3), ("http", 4), ("ssh", 5), ("https", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionAccessType.setStatus('current')
if mibBuilder.loadTexts: sessionAccessType.setDescription('The access type of the session.')
sessionPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSignificant", 0), ("local", 1), ("ether", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionPhysicalPort.setStatus('current')
if mibBuilder.loadTexts: sessionPhysicalPort.setDescription('The physical port type of the session. notSignificant : use for console port or when information is not available, local : a serial port (e.g. the CMM console), ether : an ethernet port (e.g. the EMP or NI)')
sessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionUserName.setStatus('current')
if mibBuilder.loadTexts: sessionUserName.setDescription('The user name of the user logged-in.')
sessionUserReadPrivileges = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionUserReadPrivileges.setStatus('current')
if mibBuilder.loadTexts: sessionUserReadPrivileges.setDescription('The read privileges of the user logged-in. These privileges are stored as a bitmap. Each bit represents a command family. The number of families may go up to 64. Applied for functional authorization (partitioned management).')
sessionUserWritePrivileges = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionUserWritePrivileges.setStatus('current')
if mibBuilder.loadTexts: sessionUserWritePrivileges.setDescription('The write privileges of the user logged-in. These privileges are stored as a bitmap. Each bit represents a command family. The number of families may go up to 64. Applied for functional authorization (partitioned management).')
sessionUserProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 2, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionUserProfileName.setStatus('obsolete')
if mibBuilder.loadTexts: sessionUserProfileName.setDescription('The profile name of the logged-in user. Applied for the end-user partitioned management.')
sessionUserIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionUserIpAddress.setStatus('current')
if mibBuilder.loadTexts: sessionUserIpAddress.setDescription('The IP address of the user logged-in.')
sessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sessionRowStatus.setStatus('current')
if mibBuilder.loadTexts: sessionRowStatus.setDescription('The status of this table entry. An entry in this table is dynamically created when a user connects to the switch (through console, telnet, ftp or http). The only value supported for set is destroy(6), to kill a user session.')
sessionLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 600)).clone(55)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLoginTimeout.setStatus('current')
if mibBuilder.loadTexts: sessionLoginTimeout.setDescription('At login time, it is the time in seconds to get the password, after the username has been keyed in.')
sessionLoginAttempt = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionLoginAttempt.setStatus('current')
if mibBuilder.loadTexts: sessionLoginAttempt.setDescription('The maximum number of login attempts for one session.')
sessionCliCommandLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionCliCommandLogEnable.setStatus('current')
if mibBuilder.loadTexts: sessionCliCommandLogEnable.setDescription('CLI command logging status. Enable(1) will save all CLI set command activilies on flash memory. Disable(2) will stop the record')
sessionXonXoffEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sessionXonXoffEnable.setStatus('current')
if mibBuilder.loadTexts: sessionXonXoffEnable.setDescription('Enable or disable xon-xoff flow control on console port')
switchMgtTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 7))
sessionAuthenticationTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 0, 1)).setObjects(("ALCATEL-IND1-SESSION-MGR-MIB", "sessionAccessType"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionUserName"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionUserIpAddress"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionAuthFailure"))
if mibBuilder.loadTexts: sessionAuthenticationTrap.setStatus('current')
if mibBuilder.loadTexts: sessionAuthenticationTrap.setDescription('Authentication Failure Trap is sent each time a user authentication is refused.')
sessionAuthFailure = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unknownUser", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionAuthFailure.setStatus('current')
if mibBuilder.loadTexts: sessionAuthFailure.setDescription('The reason why the user authentication failed.')
alcatelIND1SessionMgrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-SESSION-MGR-MIB", "sessionConfigGroup"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionActiveGroup"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionObjectGroup"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1SessionMgrMIBCompliance = alcatelIND1SessionMgrMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SessionMgrMIBCompliance.setDescription('Compliance statement for Session Manager Subsystem.')
sessionConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-SESSION-MGR-MIB", "sessionType"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionBannerFileName"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionInactivityTimerValue"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionDefaultPromptString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sessionConfigGroup = sessionConfigGroup.setStatus('current')
if mibBuilder.loadTexts: sessionConfigGroup.setDescription('Collection of objects for management of Session Manager.')
sessionActiveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-SESSION-MGR-MIB", "sessionIndex"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionAccessType"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionPhysicalPort"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionUserName"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionUserReadPrivileges"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionUserWritePrivileges"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionUserProfileName"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionUserIpAddress"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sessionActiveGroup = sessionActiveGroup.setStatus('current')
if mibBuilder.loadTexts: sessionActiveGroup.setDescription('Collection of objects for management of users sessions.')
sessionTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-SESSION-MGR-MIB", "sessionAuthenticationTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sessionTrapsGroup = sessionTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: sessionTrapsGroup.setDescription('Collection of Traps for management of users sessions.')
sessionObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 7, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-SESSION-MGR-MIB", "sessionLoginTimeout"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionLoginAttempt"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionCliCommandLogEnable"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionXonXoffEnable"), ("ALCATEL-IND1-SESSION-MGR-MIB", "sessionAuthFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sessionObjectGroup = sessionObjectGroup.setStatus('current')
if mibBuilder.loadTexts: sessionObjectGroup.setDescription('Collection of objects used in sessions.')
mibBuilder.exportSymbols("ALCATEL-IND1-SESSION-MGR-MIB", sessionAuthenticationTrap=sessionAuthenticationTrap, sessionType=sessionType, sessionXonXoffEnable=sessionXonXoffEnable, switchMgtTrapsObj=switchMgtTrapsObj, PYSNMP_MODULE_ID=alcatelIND1SessionMgrMIB, sessionInactivityTimerValue=sessionInactivityTimerValue, alcatelIND1SessionMgrMIBConformance=alcatelIND1SessionMgrMIBConformance, sessionLoginTimeout=sessionLoginTimeout, alcatelIND1SessionMgrMIBCompliance=alcatelIND1SessionMgrMIBCompliance, alcatelIND1SessionMgrMIB=alcatelIND1SessionMgrMIB, sessionMgr=sessionMgr, sessionRowStatus=sessionRowStatus, alcatelIND1SessionMgrMIBObjects=alcatelIND1SessionMgrMIBObjects, sessionAccessType=sessionAccessType, alcatelIND1SessionMgrMIBCompliances=alcatelIND1SessionMgrMIBCompliances, sessionCliCommandLogEnable=sessionCliCommandLogEnable, sessionAuthFailure=sessionAuthFailure, sessionUserProfileName=sessionUserProfileName, sessionUserName=sessionUserName, sessionUserWritePrivileges=sessionUserWritePrivileges, sessionIndex=sessionIndex, sessionUserReadPrivileges=sessionUserReadPrivileges, sessionActiveTable=sessionActiveTable, sessionObjectGroup=sessionObjectGroup, sessionActiveGroup=sessionActiveGroup, sessionActiveEntry=sessionActiveEntry, sessionUserIpAddress=sessionUserIpAddress, alcatelIND1SessionMgrMIBGroups=alcatelIND1SessionMgrMIBGroups, alcatelIND1SessionMgrMIBNotifications=alcatelIND1SessionMgrMIBNotifications, sessionDefaultPromptString=sessionDefaultPromptString, sessionConfigTable=sessionConfigTable, sessionLoginAttempt=sessionLoginAttempt, sessionConfigEntry=sessionConfigEntry, sessionConfigGroup=sessionConfigGroup, sessionPhysicalPort=sessionPhysicalPort, sessionBannerFileName=sessionBannerFileName, sessionTrapsGroup=sessionTrapsGroup)
