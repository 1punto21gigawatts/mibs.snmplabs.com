#
# PySNMP MIB module CISCO-VOICE-AALX-PROFILE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VOICE-AALX-PROFILE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:51:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
cmgwIndex, CCallControlJitterDelayMode = mibBuilder.importSymbols("CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex", "CCallControlJitterDelayMode")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CvcSpeechCoderRate, = mibBuilder.importSymbols("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "CvcSpeechCoderRate")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, TimeTicks, MibIdentifier, Integer32, Bits, Unsigned32, ObjectIdentity, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "MibIdentifier", "Integer32", "Bits", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "IpAddress", "iso")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
ciscoVoiceAalxProfileMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 323))
ciscoVoiceAalxProfileMIB.setRevisions(('2005-04-21 00:00', '2004-10-15 00:00', '2003-07-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVoiceAalxProfileMIB.setRevisionsDescriptions(('Deprecated object cvapCodecConfigVbdPacketPeriod and cvapCodecConfigJitterNomDelay; Add new object cvapCodecConfigNewJtrNomDelay.', "Add an new enum 'profileCustom210 (210)' to CiscoAal2ProfileNumber.", 'Initial version of this MIB module',))
if mibBuilder.loadTexts: ciscoVoiceAalxProfileMIB.setLastUpdated('200504210000Z')
if mibBuilder.loadTexts: ciscoVoiceAalxProfileMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVoiceAalxProfileMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-voice-gateway@cisco.com')
if mibBuilder.loadTexts: ciscoVoiceAalxProfileMIB.setDescription('This MIB defines the objects specific to voice over ATM or voice over IP. Those objects are related to the following areas: 1. CODEC Negotiation (AAL1/AAL5) 2. AAL2 Profile 3. SVC connection. ')
ciscoVoiceAalxProfileMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 0))
ciscoVoiceAalxProfileMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 1))
cvapCodecConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1))
cvapAal2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 2))
cvapSvcConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3))
cvapSvcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4))
class CiscoAal2ProfileType(TextualConvention, Integer32):
    reference = 'ITU I.366.2 ATM forum af-vtoa-0113.000 '
    description = 'In VoATM, an AAL2 profile is used for the parameters of bearer traffic during the call setup between the call agent and the media gateway. In AAL2 profile negotiation, some call agents provide the profile, some do not. If the AAL2 profile in the call setup is not provided by the call agent, the gateway can select its own configured AAL2 profiles. Those AAL2 profiles can be ITU standard AAL2 profiles or customized AAL2 profiles. This textual convention defines the profile type which is either standard profile from ITU or customized profile. There are two groups of profile types: itu - ITU standard profiles custom - Customized profiles.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("itu", 1), ("custom", 2))

class CiscoAal2ProfileNumber(TextualConvention, Integer32):
    reference = 'ITU I.366.2 ATM forum af-vtoa-0113.000 '
    description = 'This textual convention defines the profile number. A profile contains a set of entries, each entry specifies an encoding format with an UUI (User-to-User Indicator) range and length. The profile set defines a mapping that the receiver of an AAL2 type 1 packet uses to interpret the the packet contents. (AAL2 has 3 different packet types : type 1: carry voice, type 2: not used, type 3: event, alarm.) In other words, the profile set defines which encoding format from the profile is being used. The following are the legitimate combinations of CiscoAal2ProfileType and CiscoAal2ProfileNumber: ITU: 1, 2, 3, 7, 8, 12 Custom: 100, 101, 110, 200, 210 '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7, 8, 12, 100, 101, 110, 200, 210))
    namedValues = NamedValues(("profileITU1", 1), ("profileITU2", 2), ("profileITU3", 3), ("profileITU7", 7), ("profileITU8", 8), ("profileITU12", 12), ("profileCustom100", 100), ("profileCustom101", 101), ("profileCustom110", 110), ("profileCustom200", 200), ("profileCustom210", 210))

class CiscoCodecPacketPeriod(TextualConvention, Integer32):
    description = 'This type defines the packetization period for a particular CODEC in microseconds. The packetization period represents the time for the gateway to collect the data from TDM side before it sends out the packet.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("pktPeriod5000us", 1), ("pktPeriod5500us", 2), ("pktPeriod5785us", 3), ("pktPeriod10000us", 4), ("pktPeriod15000us", 5), ("pktPeriod20000us", 6), ("pktPeriod25000us", 7), ("pktPeriod30000us", 8), ("pktPeriod35000us", 9), ("pktPeriod40000us", 10), ("pktPeriod45000us", 11), ("pktPeriod50000us", 12), ("pktPeriod55000us", 13), ("pktPeriod60000us", 14), ("pktPeriod65000us", 15), ("pktPeriod70000us", 16), ("pktPeriod75000us", 17), ("pktPeriod80000us", 18), ("pktPeriod85000us", 19), ("pktPeriod90000us", 20))

cvapCodecTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 1), )
if mibBuilder.loadTexts: cvapCodecTable.setStatus('current')
if mibBuilder.loadTexts: cvapCodecTable.setDescription('This table defines attributes of CODEC negotiation. These attributes are used for CODEC negotiation of a call when a call setup request is made by call agent to the media gateway. One entry for AAL1 and one entry for AAL5 are created when a new media gateway is detected by media gateway application. All entries are deleted when the media gateway is removed from the system.')
cvapCodecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecNegotiationAdaptType"))
if mibBuilder.loadTexts: cvapCodecEntry.setStatus('current')
if mibBuilder.loadTexts: cvapCodecEntry.setDescription('An entry containing management information for CODEC negotiation of the adaptation type for a call in the media gateway.')
cvapCodecNegotiationAdaptType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aal5", 1), ("aal1", 2))))
if mibBuilder.loadTexts: cvapCodecNegotiationAdaptType.setStatus('current')
if mibBuilder.loadTexts: cvapCodecNegotiationAdaptType.setDescription('This object specifies the adaptation layer which supports CODEC negotiation of calls and the order of CODECs used in negotiation can be configured as the value of cvapCodecNegotiationOption. The adaptation types include: aal5 :VoIP with AAL5 as adaptation layer. aal1 :VoATM with AAL1 as adaptation layer.')
cvapCodecNegotiationOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lcoRcdLcl", 1), ("lcoLclRcd", 2), ("rcdLcoLcl", 3), ("rcdLclLco", 4), ("lclLcoRcd", 5), ("lclRcdLco", 6))).clone('lcoRcdLcl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecNegotiationOption.setStatus('current')
if mibBuilder.loadTexts: cvapCodecNegotiationOption.setDescription('This object defines the CODEC negotiation option which determines the order of CODECs used by a call during CODEC negotiation. The possible CODEC negotiation options are as follows: Lco - local connection options (from local call agent) Rcd - remote connection description (from remote gateway) Lcl - local CODEC list which is defined in the table, cvapCodecNegotiationTable. If the value of this object is lcoRcdLcl(1), then effectively the preferences are: 1. the first priority is to the local connection options sent by the local call agent 2. the second priority is to the remote connection description sent by the remote gateway (or related call agent) 3. the last priority is to the local CODEC list stored in local gateway If the value of this object is lcoLclRcd(2), then effectively the preferences are: 1. the first priority is to the local connection options sent by the local call agent 2. the second priority is to the local CODEC list stored in local gateway. 3. the last priority is to the remote connection description sent by the remote gateway (or related call agent) If the value of this object is rcdLcoLcl(3), then effectively the preferences are: 1. the first priority is to the remote connection description sent by the remote gateway (or related call agent) 2. the second priority is to the local connection options sent by the local call agent 3. the last priority is to the local CODEC list stored in local gateway If the value of this object is rcdLclLco(4), then effectively the preferences are: 1. the first priority is to the remote connection description sent by the remote gateway (or related call agent) 2. the second priority is to the local CODEC list stored in local gateway 3. the last priority is to the local connection options sent by the local call agent If the value of this object is lclLcoRcd(5), then effectively the preferences are: 1. the first priority is to the local CODEC list stored in local gateway 2. the second priority is to the local connection options sent by the local call agent 3. the last priority is to the remote connection description sent by the remote gateway (or related call agent) If the value of this object is lclRcdLco(6), then effectively the preferences are: 1. the first priority is to the local CODEC list stored in local gateway 2. the second priority is to the remote connection description sent by the remote gateway (or related call agent) 3. the last priority is to the local connection options sent by the local call agent.')
cvapCodecConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2), )
if mibBuilder.loadTexts: cvapCodecConfigTable.setStatus('current')
if mibBuilder.loadTexts: cvapCodecConfigTable.setDescription('This table contains the attributes whose configuration depends on CODEC types and adaptation types. For each adaptation layer, one entry for each CODEC rate supported by the media gateway is created by the system at power-up.')
cvapCodecConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigAdaptType"), (0, "CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigType"))
if mibBuilder.loadTexts: cvapCodecConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cvapCodecConfigEntry.setDescription('An entry represents a CODEC rate supported for VoIP or VoATM with different adaptation layers in the media gateway.')
cvapCodecConfigAdaptType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("aal5", 2), ("aal1", 3), ("aal2", 4))))
if mibBuilder.loadTexts: cvapCodecConfigAdaptType.setStatus('current')
if mibBuilder.loadTexts: cvapCodecConfigAdaptType.setDescription('An unique index identifying the adaptation layer supported by voice applications in the media gateway. The adaptation types include: other :Voice over other media. aal5 :VoIP with AAL5 as adaptation layer. aal1 :VoATM with AAL1 as adaptation layer. aal2 :VoATM with AAL2 as adaptation layer.')
cvapCodecConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 2), CvcSpeechCoderRate())
if mibBuilder.loadTexts: cvapCodecConfigType.setStatus('current')
if mibBuilder.loadTexts: cvapCodecConfigType.setDescription('This object specifies the CODEC rate defined in CvcSpeechCoderRate.')
cvapCodecConfigPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigPreference.setStatus('current')
if mibBuilder.loadTexts: cvapCodecConfigPreference.setDescription('This object specified the preference configured by the user for each CODEC. Lower the number, higher the preference of the CODEC. If this object is set to 0, the corresponding CODEC will not be used in CODEC negotiation or in CODEC choose command. For CODECs having the same preference, the entry with the lower value of cvapCodecConfigType has higher precedence.')
cvapCodecConfigVoicePacketPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 4), CiscoCodecPacketPeriod()).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigVoicePacketPeriod.setStatus('current')
if mibBuilder.loadTexts: cvapCodecConfigVoicePacketPeriod.setDescription("This object specifies the packetization period for a particular CODEC in voice application. The packetization period represents the time for the media gateway to collect the data from TDM side before it sends out the packet. This object is not applicable if cvapCodecConfigAdaptType is set to 'aal2(4)' since the packetization period for a CODEC in VoATM with AAL2 depends on the associated profile.")
cvapCodecConfigVbdPacketPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 5), CiscoCodecPacketPeriod()).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigVbdPacketPeriod.setStatus('deprecated')
if mibBuilder.loadTexts: cvapCodecConfigVbdPacketPeriod.setDescription("This object specifies the packetization period for a particular CODEC in VBD (Voice Band Data) upspeed. The packetization period represents the time for the media gateway to collect the data from TDM side before it sends out the packet. This object is not applicable if cvapCodecConfigAdaptType is set to 'aal2(4)' since the packetization period for a CODEC in VoATM with AAL2 depends on the associated profile.")
cvapCodecConfigJitterDelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 6), CCallControlJitterDelayMode().clone('adaptive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigJitterDelayMode.setStatus('current')
if mibBuilder.loadTexts: cvapCodecConfigJitterDelayMode.setDescription('The object specifies the jitter buffer mode applied to a call connection. adaptive - means to use cvapCodecConfigNewJtrNomDelay as the initial jitter buffers size and let the DSP pick the optimal value of the jitter buffer size between the range of cvapCodecConfigJitterMaxDelay and cvapCodecConfigJitterMinDelay. fixed - means to use a constant jitter buffer size which is specified by cvapCodecConfigNewJtrNomDelay. ')
cvapCodecConfigJitterMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigJitterMaxDelay.setStatus('current')
if mibBuilder.loadTexts: cvapCodecConfigJitterMaxDelay.setDescription('This object specifies the maximum jitter buffer size. If cvapCodecConfigJitterDelayMode is set to adaptive(1), the DSP will dynamically pick an optimal value of the jitter buffer size between the range of cvapCodecConfigJitterMaxDelay and cvapCodecConfigJitterMinDelay. If cvapCodecConfigJitterDelayMode is set to fixed(2), this object is ignored. The value of cvapCodecConfigJitterMaxDelay needs to be greater than or equal to the value of cvapCodecConfigNewJtrNomDelay.')
cvapCodecConfigJitterNomDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigJitterNomDelay.setStatus('deprecated')
if mibBuilder.loadTexts: cvapCodecConfigJitterNomDelay.setDescription('This object specifies the nominal jitter buffer size. If cvapCodecConfigJitterDelayMode is set to fixed(2), the jitter buffer is fixed at this value for the duration of the call. if cvapCodecConfigJitterDelayMode is set to adaptive(1), the jitter buffer is initially set to this value. The value of cvapCodecConfigJitterNomDelay needs to be greater than or equal to the value of cvapCodecConfigJitterMinDelay and be smaller than or equal to the value of cvapCodecConfigJitterMaxDelay.')
cvapCodecConfigJitterMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigJitterMinDelay.setStatus('current')
if mibBuilder.loadTexts: cvapCodecConfigJitterMinDelay.setDescription('This object specifies the minimum jitter buffer size. If cvapCodecConfigJitterDelayMode is set to adaptive(1), the DSP will dynamically pick an optimal value of the jitter buffer size between the range of cvapCodecConfigJitterMaxDelay and cvapCodecConfigJitterMinDelay. If cvapCodecConfigJitterDelayMode is set to fixed(2), this object is ignored. The value of cvapCodecConfigJitterMinDelay needs to be smaller than or equal to the value of cvapCodecConfigNewJtrNomDelay.')
cvapCodecConfigDtmfRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigDtmfRelay.setStatus('current')
if mibBuilder.loadTexts: cvapCodecConfigDtmfRelay.setDescription("When this object is set to 'true', the digits will be sent as peer-to-peer packet in the bearer. When this object is set to 'false', the digits will be sent as regular voice packets in the bearer. For low complexity CODECS (such as G.711), the preferred value for this object could be 'false'. For high complexity CODECS (such as G.729A), the preferred value for this object should be 'true', otherwise the digits may not get recognized properly at the remote end.")
cvapCodecConfigPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigPayloadType.setReference('RFC 1890 - RTP Profile for Audio and Video Conferences with Minimal Control.')
if mibBuilder.loadTexts: cvapCodecConfigPayloadType.setStatus('current')
if mibBuilder.loadTexts: cvapCodecConfigPayloadType.setDescription('This object specifies the payload type of the CODEC in voice application as specified in RFC1890. The values (0..95) are static payload type. The values (96..127) are dynamic payload type and it is specified dynamically through the control protocol during call setup. If more than one CODEC have the same payload type, the CODEC with the highest preference (the lowest value of cvapCodecConfigPreference) will be selected.')
cvapCodecConfigNewJtrNomDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapCodecConfigNewJtrNomDelay.setStatus('current')
if mibBuilder.loadTexts: cvapCodecConfigNewJtrNomDelay.setDescription('This object specifies the nominal jitter buffer size. If cvapCodecConfigJitterDelayMode is set to fixed(2), the jitter buffer is fixed at this value for the duration of the call. if cvapCodecConfigJitterDelayMode is set to adaptive(1), the jitter buffer is initially set to this value. The value of cvapCodecConfigNewJtrNomDelay needs to be greater than or equal to the value of cvapCodecConfigJitterMinDelay and be smaller than or equal to the value of cvapCodecConfigJitterMaxDelay.')
cvapSvcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1), )
if mibBuilder.loadTexts: cvapSvcConfigTable.setStatus('current')
if mibBuilder.loadTexts: cvapSvcConfigTable.setDescription('This table contains the SVC (both in AAL1 and AAL2) configuration which is used for call connection establishment between the PNNI controller and the media gateway.')
cvapSvcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"))
if mibBuilder.loadTexts: cvapSvcConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cvapSvcConfigEntry.setDescription('An entry containing management information for SVC connection in the media gateway. An entry of this table is created when a new media gateway is detected by media gateway application. The entry is deleted when the media gateway is removed from the system.')
cvapSvcAtmQosCellDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 20000)).clone(20000)).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcAtmQosCellDelay.setReference("ATM Forum 'Voice & Telephony over ATM' specifications af-vtoa-0089.000, af-vtoa-0113.000. ")
if mibBuilder.loadTexts: cvapSvcAtmQosCellDelay.setStatus('current')
if mibBuilder.loadTexts: cvapSvcAtmQosCellDelay.setDescription('This object identifies end-to-end cell delay in voice SVC establishment. It is used to guarantee the quality of the route selected for a voice SVC. It is applicable to both AAL1 and AAL2 SVC connection establishment. This object is part of the extended quality of services information element which is sent out during SVC setup.')
cvapSvcAtmQosCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20000, 150000)).clone(150000)).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcAtmQosCtd.setReference('ITU G-Series Recommendations: G.114 - One-way transmission time. ')
if mibBuilder.loadTexts: cvapSvcAtmQosCtd.setStatus('current')
if mibBuilder.loadTexts: cvapSvcAtmQosCtd.setDescription('This object identifies end-to-end maximum cell transfer in voice SVC establishment. It is used to guarantee the quality of the route selected for a voice SVC. It is applicable to both AAL1 and AAL2 SVC connection establishment. This value is sent in voice SVC setup messages in end-to-end transit delay information element as the object value.')
cvapSvcAtmQosClr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcAtmQosClr.setReference('Bell Core specifications - GR.1110 ')
if mibBuilder.loadTexts: cvapSvcAtmQosClr.setStatus('current')
if mibBuilder.loadTexts: cvapSvcAtmQosClr.setDescription('This object identifies maximum Cell Loss Ratio (CLR) in voice SVC establishment. It is used to guarantee the quality of the route selected for a voice SVC. It is applicable to both AAL1 and AAL2 SVC connection establishment. This value is sent in voice SVC setup messages in extended quality of services information element as maximum cell loss ratio value.')
cvapSvcTrfScalingFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 200)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcTrfScalingFactor.setStatus('current')
if mibBuilder.loadTexts: cvapSvcTrfScalingFactor.setDescription("This object specifies Traffic Scaling Factor in computing factored bandwidth which is used in ATM signaling in voice SVC establishment. When this value is less than 100 it can be referred as a `discount factor' and when more than 100 referred as an `excess factor. This object is applicable only to VBR SVC connection establishment. The traffic scaling is not applicable to AAL2 SVC calls that require G.711 and clear channel CODECs.")
cvapSvcAal2CidNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcAal2CidNumber.setReference('ITU I.363-2 B-ISDN ATM Adaptation layer specification: Type 2 AAL, September 1997. ')
if mibBuilder.loadTexts: cvapSvcAal2CidNumber.setStatus('current')
if mibBuilder.loadTexts: cvapSvcAal2CidNumber.setDescription('This object specifies the default AAL2 CID (Channel Identification) number used for AAL2 SVC connections. 0-7 is reserved.')
cvapSvcAggTrafficClipping = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcAggTrafficClipping.setStatus('current')
if mibBuilder.loadTexts: cvapSvcAggTrafficClipping.setDescription("This object defines the aggregate traffic clipping policy. This object specifies if the aggregate traffic clipping policy is applicable to all bearer traffic generated in the media gateway. The applicable options are: 'true' - aggregate traffic clipping is enabled, local gateway traffic management performs aggregate traffic clipping. 'false' - aggregate traffic clipping is disabled, local gateway traffic management does not perform aggregate traffic clipping. This is applicable to only AAL2 SVC voice bearer traffic. When aggregate traffic clipping is enabled, local gateway can discard cells which are exceeding local gateway aggregate SVC bandwidth.")
cvapSvcAggLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcAggLinkState.setStatus('current')
if mibBuilder.loadTexts: cvapSvcAggLinkState.setDescription("This object provides the state of the SVC link between PNNI controller and the media gateway. When the SVC software module fails to register NSAP address with the PNNI controller via SAPI (Service Access Point Interface), this object will be set to 'down', when it is successful, this object will be set to 'up'. if down SVC calls cannot be made on gateway if up SVC calls can be made on gateway ")
cvapSvcPartialFillSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)).clone(47)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcPartialFillSupported.setStatus('current')
if mibBuilder.loadTexts: cvapSvcPartialFillSupported.setDescription('This object indicates the fill level of cells in case of AAL1 adaptation . The value of this object will be used if the call agent does not specify partial fill in the MGCP commands (i.e if L(local connection option):pf( partial fill) is absent). ATM cell size is 53 bytes, 5 bytes for header, 48 bytes for data. If the data are not enough to fill 48 bytes of one ATM cell, the system can fill in the value of this object to the padding bytes.')
cvapSvcMgcpSelectorByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(21)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcMgcpSelectorByteValue.setStatus('current')
if mibBuilder.loadTexts: cvapSvcMgcpSelectorByteValue.setDescription("This object specifies the selector byte value of the NSAP address for MGCP protocol. When a SVC call setup indication from the network is received, it will look at this object to determine the owner application for this setup. The value of this object can not be modified when ATM SVC calls are up. The value of this objects can not equal to the value of 'cvapSvcH248SelectorByteValue'.")
cvapSvcH248SelectorByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcH248SelectorByteValue.setStatus('current')
if mibBuilder.loadTexts: cvapSvcH248SelectorByteValue.setDescription("This object specifies the selector byte value of the NSAP address for H.248 protocol. When a SVC call setup indication from the network is received, it will look at this object to determine the owner application for this setup. The value of this object can not be modified when ATM SVC calls are up. The value of this objects can not equal to the value of 'cvapSvcMgcpSelectorByteValue'.")
cvapSvcDelNotifGuardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcDelNotifGuardTimer.setStatus('current')
if mibBuilder.loadTexts: cvapSvcDelNotifGuardTimer.setDescription("A timer, for a duration as specified by this object, will be started when the SVC call is released from the network side. Upon expiration of this timer, the call agent is notified about this through ServiceChange message(for H.248 protocol) or through gateway initiated delete message(for MGCP protocol). This object is not applicable for Multi-CID SVC(if MIB object 'cvapSvcMultiCIDPerSvc' is set to 'true').")
cvapSvcMultiCIDPerSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcMultiCIDPerSvc.setReference('Media gateway AAL2 Bearer-Path Establishment, draft-barr-megaco-aal2bearer-00-txt, June 2002.')
if mibBuilder.loadTexts: cvapSvcMultiCIDPerSvc.setStatus('current')
if mibBuilder.loadTexts: cvapSvcMultiCIDPerSvc.setDescription("This object enables the user to disable or enable the Multi-CID SVC feature on the gateway. When this object is set to 'true', multiple CIDs can be established on a single SVC. When this object is set to 'false', only one CID per SVC can be established. This object cannot be modified when active SVC calls exist on the gateway.")
cvapSvcMultiCIDFillTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcMultiCIDFillTimer.setStatus('current')
if mibBuilder.loadTexts: cvapSvcMultiCIDFillTimer.setDescription('This object defines the time (millisecs) to wait for filling up the cell when the next packet is not ready. After waiting for the time configured in this object, the cell will be sent out. This object is applicable only for aal2 adaptations. Any new programmed value will not affect SVCs already in progress.')
cvapSvcMultiCIDCACSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 60000)).clone(450)).setUnits('Cells per Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcMultiCIDCACSCR.setReference('Media gateway AAL2 Bearer-Path Establishment, draft-barr-megaco-aal2bearer-00-txt, June 2002, Section 5.0 paragraph 4.')
if mibBuilder.loadTexts: cvapSvcMultiCIDCACSCR.setStatus('current')
if mibBuilder.loadTexts: cvapSvcMultiCIDCACSCR.setDescription('This object specifies the SCR (Sustained Cell Rate) per Multi-CID SVC. The value of this object will be used for CAC (Call Admission Control) processing, and will determine if a new Multi-Cid SVC needs to be created for a new incoming CID, or whether there is room to add the new CID on the Multi-CID SVC.')
cvapSvcMultiCIDCACPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 60000)).clone(875)).setUnits('Cells per Second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcMultiCIDCACPCR.setReference('Media gateway AAL2 Bearer-Path Establishment, draft-barr-megaco-aal2bearer-00-txt, June 2002, Section 5.0 paragraph 4.')
if mibBuilder.loadTexts: cvapSvcMultiCIDCACPCR.setStatus('current')
if mibBuilder.loadTexts: cvapSvcMultiCIDCACPCR.setDescription("This object specifies the PCR (Peak Cell Rate) per Multi-CID SVC. The value of this object will be used for CAC (Call Admission Control) processing, and will determine whether an upspeed request can be accepted or not on the Multi-CID SVC. The 'cvapSvcMultiCIDCACPCR' must be greater than or equal to 'cvapSvcMultiCIDCACSCR'.")
cvapSvcMultiCIDOriginatDelTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200)).clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcMultiCIDOriginatDelTimer.setReference('Media gateway AAL2 Bearer-Path Establishment, draft-barr-megaco-aal2bearer-00-txt, June 2002, Section 5.5.')
if mibBuilder.loadTexts: cvapSvcMultiCIDOriginatDelTimer.setStatus('current')
if mibBuilder.loadTexts: cvapSvcMultiCIDOriginatDelTimer.setDescription("This object specifies the time to wait to delete an Originated -SVC in the case where a CID delete just occurred and the SVC has no more CIDs after the deletion. The interval of this object should be 5. The 'cvapSvcMultiCIDOriginatDelTimer' must be greater than or equal to 'cvapSvcMultiCIDTerminatDelTimer+5', except for the case that 'cvapSvcMultiCIDOriginatDelTimer' is 0 and 'cvapSvcMultiCIDTerminatDelTimer' is 0 (which means that the Delete Timer feature is disabled).")
cvapSvcMultiCIDTerminatDelTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1195)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcMultiCIDTerminatDelTimer.setReference('Media gateway AAL2 Bearer-Path Establishment, draft-barr-megaco-aal2bearer-00-txt, June 2002, Section 5.5.')
if mibBuilder.loadTexts: cvapSvcMultiCIDTerminatDelTimer.setStatus('current')
if mibBuilder.loadTexts: cvapSvcMultiCIDTerminatDelTimer.setDescription("This object specifies the time that the Terminating end can attempt to add a new CID into the Terminated-SVC after the last CID in a slave-end SVC is deleted. The interval of this object should be 5. The 'cvapSvcMultiCIDOriginatDelTimer' must be greater than or equal to 'cvapSvcMultiCIDTerminatDelTimer+5', except for the case that 'cvapSvcMultiCIDOriginatDelTimer' is 0 and 'cvapSvcMultiCIDTerminatDelTimer' is 0 (which means that the Delete Timer feature is disabled).")
cvapSvcMultiCIDGlareThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 3, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 248)).clone(243)).setUnits('number of CIDs').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvapSvcMultiCIDGlareThreshold.setReference('Media gateway AAL2 Bearer-Path Establishment, draft-barr-megaco-aal2bearer-00-txt, June 2002, Section 6.3.')
if mibBuilder.loadTexts: cvapSvcMultiCIDGlareThreshold.setStatus('current')
if mibBuilder.loadTexts: cvapSvcMultiCIDGlareThreshold.setDescription("This object specifies the threshold at when reached on the SVC-Terminating end, that no more CID's can be added to that Terminated-SVC from the Termination end. The Originating end will be able to use the remaining CID's in the SVC.")
cvapSvcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1), )
if mibBuilder.loadTexts: cvapSvcStatsTable.setStatus('current')
if mibBuilder.loadTexts: cvapSvcStatsTable.setDescription('This table contains SVC statistics associated with the communication between the media gateway and the PNNI controller. ')
cvapSvcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"))
if mibBuilder.loadTexts: cvapSvcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cvapSvcStatsEntry.setDescription('An entry containing statistics information for a SVC that is associated with the communication between the media gateway and the PNNI controller.')
cvapSvcTxSetups = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxSetups.setStatus('current')
if mibBuilder.loadTexts: cvapSvcTxSetups.setDescription("This object indicates the number of 'SETUP' messages sent to the PNNI controller from the media gateway since last gateway reset. ")
cvapSvcRxSetups = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxSetups.setStatus('current')
if mibBuilder.loadTexts: cvapSvcRxSetups.setDescription("This object indicates the number of 'SETUP' messages received by the media gateway from the PNNI controller since last gateway reset. ")
cvapSvcTxCallProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxCallProcs.setStatus('current')
if mibBuilder.loadTexts: cvapSvcTxCallProcs.setDescription("This object indicates the number of call 'PROCEED' messages sent to the PNNI controller from the media gateway since last gateway reset. ")
cvapSvcRxCallProcs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxCallProcs.setStatus('current')
if mibBuilder.loadTexts: cvapSvcRxCallProcs.setDescription("This object indicates the number of call 'PROCEED' messages received by the media gateway from the PNNI controller since last gateway reset. ")
cvapSvcTxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxConns.setStatus('current')
if mibBuilder.loadTexts: cvapSvcTxConns.setDescription("This object indicates the number of 'CONNECT' messages sent to the PNNI controller from the media gateway since last gateway reset. ")
cvapSvcTxConnAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxConnAcks.setStatus('current')
if mibBuilder.loadTexts: cvapSvcTxConnAcks.setDescription("This object indicates the number of 'CONNECT ACK' messages sent to the PNNI controller from the media gateway since last gateway reset. ")
cvapSvcRxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxConns.setStatus('current')
if mibBuilder.loadTexts: cvapSvcRxConns.setDescription("This object indicates the number of 'CONNECT' messages received by the media gateway from the PNNI controller since last gateway reset. ")
cvapSvcRxConnAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxConnAcks.setStatus('current')
if mibBuilder.loadTexts: cvapSvcRxConnAcks.setDescription("This object indicates the number of 'CONNECT ACK' messages received by the gateway from the PNNI controller since last gateway reset. ")
cvapSvcTxReleases = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxReleases.setStatus('current')
if mibBuilder.loadTexts: cvapSvcTxReleases.setDescription("This object indicates the number of 'RELEASE' messages sent to the PNNI controller from the media gateway since last gateway reset. ")
cvapSvcTxReleaseCompls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxReleaseCompls.setStatus('current')
if mibBuilder.loadTexts: cvapSvcTxReleaseCompls.setDescription("This object indicates the number of 'RELEASE COMPLETE' messages sent to the PNNI controller from the media gateway since last gateway reset. ")
cvapSvcRxReleases = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxReleases.setStatus('current')
if mibBuilder.loadTexts: cvapSvcRxReleases.setDescription("This object indicates the number of RELEASE' messages received by the media gateway from the PNNI controller since last gateway reset. ")
cvapSvcRxReleaseCompls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxReleaseCompls.setStatus('current')
if mibBuilder.loadTexts: cvapSvcRxReleaseCompls.setDescription("This object indicates the number of 'RELEASE COMPLETE' messages received by the media gateway from the PNNI controller since last gateway reset. ")
cvapSvcTxRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxRestarts.setStatus('current')
if mibBuilder.loadTexts: cvapSvcTxRestarts.setDescription("This object indicates the number of 'RESTART' messages sent to the PNNI controller from the media gateway since last gateway reset. ")
cvapSvcTxRestartAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxRestartAcks.setStatus('current')
if mibBuilder.loadTexts: cvapSvcTxRestartAcks.setDescription("This object indicates the number of 'RESTART ACK' messages sent to the PNNI controller from the media gateway since last gateway reset. ")
cvapSvcRxRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxRestarts.setStatus('current')
if mibBuilder.loadTexts: cvapSvcRxRestarts.setDescription("This object indicates the number of 'RESTART' messages received by the media gateway from the PNNI controller since last gateway reset. ")
cvapSvcRxRestartAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxRestartAcks.setStatus('current')
if mibBuilder.loadTexts: cvapSvcRxRestartAcks.setDescription("This object indicates the number of 'RESTART ACK' messages received by the media gateway from the PNNI controller since last gateway reset. ")
cvapSvcTxResyncStrts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxResyncStrts.setStatus('current')
if mibBuilder.loadTexts: cvapSvcTxResyncStrts.setDescription("This object indicates the number of 'RESYNC START' messages sent to the PNNI controller from the media gateway since last gateway reset. ")
cvapSvcTxResyncStrtAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxResyncStrtAcks.setStatus('current')
if mibBuilder.loadTexts: cvapSvcTxResyncStrtAcks.setDescription("This object indicates the number of 'RESYNC START ACK' messages sent to the PNNI controller from the media gateway since last gateway reset. ")
cvapSvcRxResyncStrts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxResyncStrts.setStatus('current')
if mibBuilder.loadTexts: cvapSvcRxResyncStrts.setDescription("This object indicates the number of 'RESYNC START' messages received by the media gateway from the PNNI controller since last gateway reset. ")
cvapSvcRxResyncStrtAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxResyncStrtAcks.setStatus('current')
if mibBuilder.loadTexts: cvapSvcRxResyncStrtAcks.setDescription("This object indicates the number of 'RESYNC START ACK' messages received by the media gateway from the PNNI controller since last gateway reset. ")
cvapSvcTxResyncEnds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxResyncEnds.setStatus('current')
if mibBuilder.loadTexts: cvapSvcTxResyncEnds.setDescription("This object indicates the number of 'RESYNC END' messages sent to the PNNI controller from the media gateway since last gateway reset. ")
cvapSvcTxResyncEndAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxResyncEndAcks.setStatus('current')
if mibBuilder.loadTexts: cvapSvcTxResyncEndAcks.setDescription("This object indicates the number of 'RESYNC END ACK' messages sent to the PNNI controller from the media gateway since last gateway reset. ")
cvapSvcRxResyncEnds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxResyncEnds.setStatus('current')
if mibBuilder.loadTexts: cvapSvcRxResyncEnds.setDescription("This object indicates the number of 'RESYNC END ACK' messages received by the media gateway from the PNNI controller since last gateway reset. ")
cvapSvcRxResyncEndAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxResyncEndAcks.setStatus('current')
if mibBuilder.loadTexts: cvapSvcRxResyncEndAcks.setDescription("This object indicates the number of 'RESYNC END ACK' messages received by the media gateway from the PNNI controller since last gateway reset. ")
cvapSvcTxBulkResyncs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcTxBulkResyncs.setStatus('current')
if mibBuilder.loadTexts: cvapSvcTxBulkResyncs.setDescription("This object indicates the number of 'BULK RESYNC' messages sent to the PNNI controller from the media gateway since last gateway reset. ")
cvapSvcRxBulkResyncs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRxBulkResyncs.setStatus('current')
if mibBuilder.loadTexts: cvapSvcRxBulkResyncs.setDescription("This object indicates the number of 'BULK RESYNC' messages received by the gateway from the PNNI controller since last gateway reset. ")
cvapSvcCallProcExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcCallProcExpiries.setStatus('current')
if mibBuilder.loadTexts: cvapSvcCallProcExpiries.setDescription("This object indicates the number of call 'PROCEED' messages have been sent from the media gateway and have never received any response from the PNNI controller. ")
cvapSvcReleasExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcReleasExpiries.setStatus('current')
if mibBuilder.loadTexts: cvapSvcReleasExpiries.setDescription("This object indicates the number of call 'RELEASE' messages have been sent from the media gateway and have never received any response from the PNNI controller. ")
cvapSvcConnExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcConnExpiries.setStatus('current')
if mibBuilder.loadTexts: cvapSvcConnExpiries.setDescription("This object indicates the number of call 'CONNECT' messages have been sent from the media gateway and have never received any response from the PNNI controller. ")
cvapSvcConnAckExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcConnAckExpiries.setStatus('current')
if mibBuilder.loadTexts: cvapSvcConnAckExpiries.setDescription("This object indicates the number of call 'CONNECT ACK' messages have been sent from the media gateway and have never received any response from the PNNI controller. ")
cvapSvcRestartExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcRestartExpiries.setStatus('current')
if mibBuilder.loadTexts: cvapSvcRestartExpiries.setDescription("This object indicates the number of call 'RESTART' messages have been sent from the media gateway and have never received any response from the PNNI controller. ")
cvapSvcResyncExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 323, 1, 4, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvapSvcResyncExpiries.setStatus('current')
if mibBuilder.loadTexts: cvapSvcResyncExpiries.setDescription("This object indicates the number of call 'RESYNC START' messages have been sent from the media gateway and have never received any response from the PNNI controller. ")
cvaProfileMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 2))
cvaProfileMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 2, 1))
cvaProfileMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 323, 2, 2))
cvaProfileMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 323, 2, 1, 1)).setObjects(("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigGroup"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcConfigGroup"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvaProfileMIBCompliance = cvaProfileMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cvaProfileMIBCompliance.setDescription('The Conformance groups.')
cvaProfileMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 323, 2, 1, 2)).setObjects(("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigGroupRev1"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcConfigGroup"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvaProfileMIBComplianceRev1 = cvaProfileMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: cvaProfileMIBComplianceRev1.setDescription('The Conformance groups.')
cvapCodecConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 323, 2, 2, 1)).setObjects(("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecNegotiationOption"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigPreference"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigVoicePacketPeriod"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigVbdPacketPeriod"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigJitterDelayMode"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigJitterMaxDelay"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigJitterNomDelay"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigJitterMinDelay"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigDtmfRelay"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigPayloadType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvapCodecConfigGroup = cvapCodecConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cvapCodecConfigGroup.setDescription('This group contains objects related to CODEC configuration information.')
cvapSvcConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 323, 2, 2, 2)).setObjects(("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcAtmQosCellDelay"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcAtmQosCtd"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcAtmQosClr"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTrfScalingFactor"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcAal2CidNumber"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcAggTrafficClipping"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcAggLinkState"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcPartialFillSupported"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcMgcpSelectorByteValue"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcH248SelectorByteValue"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcDelNotifGuardTimer"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcMultiCIDPerSvc"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcMultiCIDFillTimer"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcMultiCIDCACSCR"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcMultiCIDCACPCR"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcMultiCIDOriginatDelTimer"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcMultiCIDTerminatDelTimer"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcMultiCIDGlareThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvapSvcConfigGroup = cvapSvcConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cvapSvcConfigGroup.setDescription('This group contains objects related to SVC configuration information.')
cvapSvcStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 323, 2, 2, 3)).setObjects(("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxSetups"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxSetups"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxCallProcs"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxCallProcs"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxConns"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxConnAcks"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxConns"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxConnAcks"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxReleases"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxReleaseCompls"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxReleases"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxReleaseCompls"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxRestarts"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxRestartAcks"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxRestarts"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxRestartAcks"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxResyncStrts"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxResyncStrtAcks"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxResyncStrts"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxResyncStrtAcks"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxResyncEnds"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxResyncEndAcks"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxResyncEnds"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxResyncEndAcks"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcTxBulkResyncs"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRxBulkResyncs"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcCallProcExpiries"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcReleasExpiries"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcConnExpiries"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcConnAckExpiries"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcRestartExpiries"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapSvcResyncExpiries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvapSvcStatsGroup = cvapSvcStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cvapSvcStatsGroup.setDescription('This group contains objects related to SVC statistics.')
cvapCodecConfigGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 323, 2, 2, 4)).setObjects(("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecNegotiationOption"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigPreference"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigVoicePacketPeriod"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigJitterDelayMode"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigJitterMaxDelay"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigJitterMinDelay"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigDtmfRelay"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigPayloadType"), ("CISCO-VOICE-AALX-PROFILE-MIB", "cvapCodecConfigNewJtrNomDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvapCodecConfigGroupRev1 = cvapCodecConfigGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cvapCodecConfigGroupRev1.setDescription('This group contains objects related to CODEC configuration information.')
mibBuilder.exportSymbols("CISCO-VOICE-AALX-PROFILE-MIB", cvapCodecConfigVbdPacketPeriod=cvapCodecConfigVbdPacketPeriod, cvapCodecNegotiationOption=cvapCodecNegotiationOption, cvapSvcRxResyncStrtAcks=cvapSvcRxResyncStrtAcks, cvapCodecConfigPreference=cvapCodecConfigPreference, cvapSvcRxReleases=cvapSvcRxReleases, cvapSvcConnExpiries=cvapSvcConnExpiries, cvapSvcTxResyncEnds=cvapSvcTxResyncEnds, cvapCodecEntry=cvapCodecEntry, cvapSvcRxRestarts=cvapSvcRxRestarts, cvapCodecConfigVoicePacketPeriod=cvapCodecConfigVoicePacketPeriod, cvapSvcRxCallProcs=cvapSvcRxCallProcs, cvapSvcTxReleaseCompls=cvapSvcTxReleaseCompls, cvapSvcTxCallProcs=cvapSvcTxCallProcs, cvapCodecNegotiationAdaptType=cvapCodecNegotiationAdaptType, cvapSvcStats=cvapSvcStats, ciscoVoiceAalxProfileMIBNotifs=ciscoVoiceAalxProfileMIBNotifs, cvapSvcRxResyncEnds=cvapSvcRxResyncEnds, cvapSvcAggTrafficClipping=cvapSvcAggTrafficClipping, cvapSvcRxResyncEndAcks=cvapSvcRxResyncEndAcks, cvapSvcStatsEntry=cvapSvcStatsEntry, cvapSvcRxReleaseCompls=cvapSvcRxReleaseCompls, cvapCodecConfig=cvapCodecConfig, cvapSvcRxConnAcks=cvapSvcRxConnAcks, cvapSvcReleasExpiries=cvapSvcReleasExpiries, cvapCodecConfigType=cvapCodecConfigType, cvapSvcTxSetups=cvapSvcTxSetups, cvapSvcTxConnAcks=cvapSvcTxConnAcks, cvapSvcMultiCIDTerminatDelTimer=cvapSvcMultiCIDTerminatDelTimer, cvapSvcMultiCIDOriginatDelTimer=cvapSvcMultiCIDOriginatDelTimer, cvapCodecConfigGroupRev1=cvapCodecConfigGroupRev1, CiscoAal2ProfileType=CiscoAal2ProfileType, cvapSvcAal2CidNumber=cvapSvcAal2CidNumber, cvapSvcConfigEntry=cvapSvcConfigEntry, cvapSvcPartialFillSupported=cvapSvcPartialFillSupported, cvapCodecConfigPayloadType=cvapCodecConfigPayloadType, cvapSvcDelNotifGuardTimer=cvapSvcDelNotifGuardTimer, cvapCodecConfigGroup=cvapCodecConfigGroup, cvapSvcAggLinkState=cvapSvcAggLinkState, cvapSvcTxBulkResyncs=cvapSvcTxBulkResyncs, cvapSvcMultiCIDFillTimer=cvapSvcMultiCIDFillTimer, cvapSvcConfig=cvapSvcConfig, cvapSvcResyncExpiries=cvapSvcResyncExpiries, cvapCodecConfigAdaptType=cvapCodecConfigAdaptType, cvapSvcTxResyncStrtAcks=cvapSvcTxResyncStrtAcks, cvapSvcConnAckExpiries=cvapSvcConnAckExpiries, cvapCodecConfigTable=cvapCodecConfigTable, cvapSvcAtmQosClr=cvapSvcAtmQosClr, cvapSvcH248SelectorByteValue=cvapSvcH248SelectorByteValue, ciscoVoiceAalxProfileMIBObjects=ciscoVoiceAalxProfileMIBObjects, CiscoCodecPacketPeriod=CiscoCodecPacketPeriod, cvapSvcTxResyncEndAcks=cvapSvcTxResyncEndAcks, cvapSvcTxResyncStrts=cvapSvcTxResyncStrts, cvapCodecConfigEntry=cvapCodecConfigEntry, cvapSvcTxRestarts=cvapSvcTxRestarts, cvapSvcTrfScalingFactor=cvapSvcTrfScalingFactor, cvapSvcTxConns=cvapSvcTxConns, cvapSvcMultiCIDGlareThreshold=cvapSvcMultiCIDGlareThreshold, cvapSvcAtmQosCellDelay=cvapSvcAtmQosCellDelay, cvapSvcRxConns=cvapSvcRxConns, cvapCodecConfigNewJtrNomDelay=cvapCodecConfigNewJtrNomDelay, ciscoVoiceAalxProfileMIB=ciscoVoiceAalxProfileMIB, cvapSvcStatsGroup=cvapSvcStatsGroup, cvapSvcRxSetups=cvapSvcRxSetups, cvapSvcRxRestartAcks=cvapSvcRxRestartAcks, cvapAal2Config=cvapAal2Config, cvaProfileMIBConformance=cvaProfileMIBConformance, cvapSvcMultiCIDCACPCR=cvapSvcMultiCIDCACPCR, cvaProfileMIBCompliances=cvaProfileMIBCompliances, cvapSvcRxBulkResyncs=cvapSvcRxBulkResyncs, cvapSvcRxResyncStrts=cvapSvcRxResyncStrts, cvaProfileMIBComplianceRev1=cvaProfileMIBComplianceRev1, cvapSvcMgcpSelectorByteValue=cvapSvcMgcpSelectorByteValue, cvapCodecTable=cvapCodecTable, cvapSvcTxReleases=cvapSvcTxReleases, CiscoAal2ProfileNumber=CiscoAal2ProfileNumber, cvapCodecConfigJitterDelayMode=cvapCodecConfigJitterDelayMode, cvaProfileMIBGroups=cvaProfileMIBGroups, cvapSvcConfigGroup=cvapSvcConfigGroup, cvapCodecConfigJitterNomDelay=cvapCodecConfigJitterNomDelay, cvaProfileMIBCompliance=cvaProfileMIBCompliance, cvapSvcCallProcExpiries=cvapSvcCallProcExpiries, cvapSvcMultiCIDCACSCR=cvapSvcMultiCIDCACSCR, cvapCodecConfigJitterMinDelay=cvapCodecConfigJitterMinDelay, cvapSvcMultiCIDPerSvc=cvapSvcMultiCIDPerSvc, cvapSvcRestartExpiries=cvapSvcRestartExpiries, cvapSvcConfigTable=cvapSvcConfigTable, PYSNMP_MODULE_ID=ciscoVoiceAalxProfileMIB, cvapSvcTxRestartAcks=cvapSvcTxRestartAcks, cvapCodecConfigDtmfRelay=cvapCodecConfigDtmfRelay, cvapSvcStatsTable=cvapSvcStatsTable, cvapSvcAtmQosCtd=cvapSvcAtmQosCtd, cvapCodecConfigJitterMaxDelay=cvapCodecConfigJitterMaxDelay)
