#
# PySNMP MIB module RADLAN-QCN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-QCN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:48:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
rnd, Percents = mibBuilder.importSymbols("RADLAN-MIB", "rnd", "Percents")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, IpAddress, ObjectIdentity, NotificationType, Gauge32, Bits, ModuleIdentity, iso, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "ObjectIdentity", "NotificationType", "Gauge32", "Bits", "ModuleIdentity", "iso", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "Unsigned32")
TextualConvention, DisplayString, TruthValue, RowPointer, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowPointer", "RowStatus")
rlQcnMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 202))
if mibBuilder.loadTexts: rlQcnMib.setLastUpdated('201003210000A')
if mibBuilder.loadTexts: rlQcnMib.setOrganization('Marvell Computer Communications Ltd.')
if mibBuilder.loadTexts: rlQcnMib.setContactInfo('marvell.com')
if mibBuilder.loadTexts: rlQcnMib.setDescription('Added: rlQcnFeatureStatus rlQcnPriorityStateTable rlQcnIfStateTable rlQcnCmnPriority rlQcnCpPfcSetPoint rlQcnCpNonPfcSetPoint rlQcnCpFeedbackWeight rlQcnCpMinSampleBase.')
rlQcnFeatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 89, 202, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnFeatureStatus.setStatus('current')
if mibBuilder.loadTexts: rlQcnFeatureStatus.setDescription('This scalar indicates QCN enable status.')
rlQcnPriorityStateTable = MibTable((1, 3, 6, 1, 4, 1, 89, 202, 2), )
if mibBuilder.loadTexts: rlQcnPriorityStateTable.setStatus('current')
if mibBuilder.loadTexts: rlQcnPriorityStateTable.setDescription('This table describes Quantized Congestion Notification per Priority state.')
rlQcnPriorityStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 202, 2, 1), ).setIndexNames((0, "RADLAN-QCN-MIB", "rlQcnPriorityStatePriority"))
if mibBuilder.loadTexts: rlQcnPriorityStateEntry.setStatus('current')
if mibBuilder.loadTexts: rlQcnPriorityStateEntry.setDescription('Each entry in this table describes priority state. The index is represented by rlQcnPriorityStatePriority.')
rlQcnPriorityStatePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 202, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: rlQcnPriorityStatePriority.setStatus('current')
if mibBuilder.loadTexts: rlQcnPriorityStatePriority.setDescription('802.1Q Priority.')
rlQcnPriorityAdminStateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 202, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnPriorityAdminStateEnable.setStatus('current')
if mibBuilder.loadTexts: rlQcnPriorityAdminStateEnable.setDescription('Admin status of this priority.')
rlQcnPriorityOperStateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 202, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQcnPriorityOperStateEnable.setStatus('current')
if mibBuilder.loadTexts: rlQcnPriorityOperStateEnable.setDescription('Operational status of this priority.')
rlQcnPriorityAdminStateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 202, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("queue0", 2), ("sharedQueue", 3))).clone('ok')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlQcnPriorityAdminStateReason.setStatus('current')
if mibBuilder.loadTexts: rlQcnPriorityAdminStateReason.setDescription('Reason for admin status (if admin status not equal to oper).')
rlQcnPriorityStateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 202, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnPriorityStateStatus.setStatus('current')
if mibBuilder.loadTexts: rlQcnPriorityStateStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from/to this table.')
rlQcnIfStateTable = MibTable((1, 3, 6, 1, 4, 1, 89, 202, 3), )
if mibBuilder.loadTexts: rlQcnIfStateTable.setStatus('current')
if mibBuilder.loadTexts: rlQcnIfStateTable.setDescription('This table describes Quantized Congestion Notification per interface state.')
rlQcnIfStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 202, 3, 1), ).setIndexNames((0, "RADLAN-QCN-MIB", "rlQcnIfStateIfIndex"))
if mibBuilder.loadTexts: rlQcnIfStateEntry.setStatus('current')
if mibBuilder.loadTexts: rlQcnIfStateEntry.setDescription('Each entry in this table describes state of the interface. The index is represented by rlQcnIfStateIfIndex.')
rlQcnIfStateIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 202, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: rlQcnIfStateIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlQcnIfStateIfIndex.setDescription('IfIndex.')
rlQcnIfStateCpCreationEn = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 202, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnIfStateCpCreationEn.setStatus('current')
if mibBuilder.loadTexts: rlQcnIfStateCpCreationEn.setDescription('Congestion point creation enable status. If CP creation is enabled for an interface, the system automatically creates a Congestion Point (CP) for a queue of that interface if at least one QCN priority (Oper state) is mapped to that queue.')
rlQcnIfStateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 202, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnIfStateStatus.setStatus('current')
if mibBuilder.loadTexts: rlQcnIfStateStatus.setDescription('The status of a table entry. It is used to delete/Add an entry from/to this table.')
rlQcnCmnPriority = MibScalar((1, 3, 6, 1, 4, 1, 89, 202, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnCmnPriority.setStatus('current')
if mibBuilder.loadTexts: rlQcnCmnPriority.setDescription('This scalar indicates priority which is used for all Congestion Notification Messages (CNMs) transmitted by the device.')
rlQcnCpPfcSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 89, 202, 5), Integer32().clone(26112)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnCpPfcSetPoint.setStatus('obsolete')
if mibBuilder.loadTexts: rlQcnCpPfcSetPoint.setDescription('This scalar indicates QCN set-point of an egress queue on PFC enabled interface. Value of set-point is in bytes and in multiples of 512.')
rlQcnCpNonPfcSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 89, 202, 6), Integer32().clone(26112)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnCpNonPfcSetPoint.setStatus('obsolete')
if mibBuilder.loadTexts: rlQcnCpNonPfcSetPoint.setDescription('This scalar indicates QCN set-point of an egress queue on PFC disabled interface. Value of set-point is in bytes and in multiples of 512.')
rlQcnCpFeedbackWeight = MibScalar((1, 3, 6, 1, 4, 1, 89, 202, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnCpFeedbackWeight.setStatus('current')
if mibBuilder.loadTexts: rlQcnCpFeedbackWeight.setDescription('This scalar indicates Feedback Weight of a QCN egress queue. The weight is equal to two to the power of this object. Thus, if this number contains a -1, weight = 1/2.')
rlQcnCpMinSampleBase = MibScalar((1, 3, 6, 1, 4, 1, 89, 202, 8), Integer32().clone(150000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnCpMinSampleBase.setStatus('current')
if mibBuilder.loadTexts: rlQcnCpMinSampleBase.setDescription('This scalar indicates minimum number of bytes to enqueue in a QCN egress queue between transmissions of Congestion Notification Messages. Value of min-sample-base is in bytes and in multiples of 16.')
rlQcnCpSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 89, 202, 9), Integer32().clone(26112)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlQcnCpSetPoint.setStatus('current')
if mibBuilder.loadTexts: rlQcnCpSetPoint.setDescription('This scalar indicates QCN set-point of an egress queue. Value of set-point is in bytes and in multiples of 512.')
mibBuilder.exportSymbols("RADLAN-QCN-MIB", rlQcnPriorityStateStatus=rlQcnPriorityStateStatus, rlQcnPriorityStatePriority=rlQcnPriorityStatePriority, rlQcnIfStateTable=rlQcnIfStateTable, rlQcnIfStateStatus=rlQcnIfStateStatus, rlQcnCpNonPfcSetPoint=rlQcnCpNonPfcSetPoint, rlQcnPriorityAdminStateEnable=rlQcnPriorityAdminStateEnable, rlQcnCmnPriority=rlQcnCmnPriority, rlQcnPriorityAdminStateReason=rlQcnPriorityAdminStateReason, rlQcnPriorityStateEntry=rlQcnPriorityStateEntry, rlQcnCpSetPoint=rlQcnCpSetPoint, rlQcnIfStateEntry=rlQcnIfStateEntry, rlQcnPriorityOperStateEnable=rlQcnPriorityOperStateEnable, rlQcnIfStateCpCreationEn=rlQcnIfStateCpCreationEn, PYSNMP_MODULE_ID=rlQcnMib, rlQcnCpMinSampleBase=rlQcnCpMinSampleBase, rlQcnPriorityStateTable=rlQcnPriorityStateTable, rlQcnIfStateIfIndex=rlQcnIfStateIfIndex, rlQcnCpFeedbackWeight=rlQcnCpFeedbackWeight, rlQcnFeatureStatus=rlQcnFeatureStatus, rlQcnMib=rlQcnMib, rlQcnCpPfcSetPoint=rlQcnCpPfcSetPoint)
