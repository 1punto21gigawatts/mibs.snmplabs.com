#
# PySNMP MIB module PKTC-ES-TAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PKTC-ES-TAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:45:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
pktcESSupportMibs, = mibBuilder.importSymbols("CLAB-DEF-MIB", "pktcESSupportMibs")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, ObjectIdentity, Gauge32, NotificationType, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, TimeTicks, Unsigned32, iso, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "Gauge32", "NotificationType", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Unsigned32", "iso", "Integer32", "IpAddress")
DateAndTime, TextualConvention, DisplayString, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString", "TruthValue", "RowStatus")
pktcESTapMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1))
pktcESTapMib.setRevisions(('2008-04-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pktcESTapMib.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: pktcESTapMib.setLastUpdated('200804250000Z')
if mibBuilder.loadTexts: pktcESTapMib.setOrganization('Cable Television Laboratories, Inc.')
if mibBuilder.loadTexts: pktcESTapMib.setContactInfo('Bernie McKibben Cable Television Laboratories, Inc. 858 Coal Creek Circle, Louisville, CO 80027, USA Phone: +1 303-661-3823 Email: mibs@cablelabs.com Primary Author: Srinivas Dhulipala, Cisco Systems ')
if mibBuilder.loadTexts: pktcESTapMib.setDescription('This module manages intercept feature. This MIB defines a generic stream table that contains fields common to all intercept types. Specific intercept filters are defined in extension MIBs, e.g., the IP-TAP-MIB for IP intercepts.')
pktcESTapMibNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 0))
pktcESTapMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1))
pktcESTapMibConform = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 2))
pktcEScTapMediationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 1))
pktcEScTapStreamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 2))
pktcEScTapDebugGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 3))
class PktcEScTapDscp(TextualConvention, Integer32):
    description = 'An integer that is in the range of the DiffServ codepoint values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 63)

pktcEScTapMediationNewIndex = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEScTapMediationNewIndex.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapMediationNewIndex.setDescription('This object contains a value which may be used as an index value for a new pktcEScTapMediationEntry. Whenever read, the agent will change the value to a new non-conflicting value. This is to reduce the probability of errors during creation of new pktcEScTapMediationTable entries.')
pktcEScTapMediationTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 1, 2), )
if mibBuilder.loadTexts: pktcEScTapMediationTable.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapMediationTable.setDescription('This table lists the Mediation Devices with which the intercepting device communicates. These may be on the same or different Mediation Devices. This table is written by the Mediation Device, and is always volatile. This is because intercepts may disappear during a restart of the intercepting equipment. Entries are added to this table via pktcEScTapMediationStatus in accordance with the RowStatus convention.')
pktcEScTapMediationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 1, 2, 1), ).setIndexNames((0, "PKTC-ES-TAP-MIB", "pktcEScTapMediationContentId"))
if mibBuilder.loadTexts: pktcEScTapMediationEntry.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapMediationEntry.setDescription('The entry describes a single session maintained with an application on a Mediation Device.')
pktcEScTapMediationContentId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pktcEScTapMediationContentId.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapMediationContentId.setDescription("pktcEScTapMediationContentId is a session identifier, from the intercept application's perspective, and a content identifier from the Mediation Device's perspective. The Mediation Device is responsible for making sure these are unique, although the SNMP RowStatus row creation process will help by not allowing it to create conflicting entries. Before creating a new entry, a value for this variable may be obtained by reading pktcEScTapMediationNewIndex to reduce the probability of a value collision.")
pktcEScTapMediationDestAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcEScTapMediationDestAddressType.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapMediationDestAddressType.setDescription('The type of pktcEScTapMediationDestAddress.')
pktcEScTapMediationDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 1, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcEScTapMediationDestAddress.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapMediationDestAddress.setDescription("The IP Address of the Mediation Device's network interface to which to direct intercepted traffic.")
pktcEScTapMediationDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 1, 2, 1, 4), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcEScTapMediationDestPort.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapMediationDestPort.setDescription("The port number on the Mediation Device's network interface to which to direct intercepted traffic.")
pktcEScTapMediationSrcInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 1, 2, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcEScTapMediationSrcInterface.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapMediationSrcInterface.setDescription('The interface on the intercepting device from which to transmit intercepted data. If zero, any interface may be used according to normal IP practice.')
pktcEScTapMediationDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 1, 2, 1, 7), PktcEScTapDscp().clone(34)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcEScTapMediationDscp.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapMediationDscp.setDescription('The Differentiated Services Code Point the intercepting device applies to the IP packets encapsulating the intercepted traffic.')
pktcEScTapMediationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 1, 2, 1, 10), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcEScTapMediationTimeout.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapMediationTimeout.setDescription("The time at which this row and all related Stream Table rows should be automatically removed, and the intercept function cease. Since the initiating network manager may be the only device able to manage a specific intercept or know of its existence, this acts as a fail-safe for the failure or removal of the network manager. The object is only effective when the value of pktcEScTapMediationStatus is 'active'.")
pktcEScTapMediationTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("udp", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcEScTapMediationTransport.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapMediationTransport.setDescription('The protocol used in transferring intercepted data to the Mediation Device. The following protocols may be supported: udp: PacketCable udp format')
pktcEScTapMediationNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 1, 2, 1, 12), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcEScTapMediationNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapMediationNotificationEnable.setDescription('This variable controls the generation of any notifications or informs by the MIB agent for this table entry.')
pktcEScTapMediationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 1, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcEScTapMediationStatus.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapMediationStatus.setDescription("The status of this conceptual row. This object is used to manage creation, modification and deletion of rows in this table. pktcEScTapMediationTimeout may be modified at any time (even while the row is active). But when the row is active, the other writable objects may not be modified without setting its value to 'notInService'. The entry may not be deleted or deactivated by setting its value to 'destroy' or 'notInService' if there is any associated entry in pktcEScTapStreamTable.")
pktcEScTapMediationCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 1, 3), Bits().clone(namedValues=NamedValues(("ipV4SrcInterface", 0), ("ipV6SrcInterface", 1), ("udp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEScTapMediationCapabilities.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapMediationCapabilities.setDescription('This object displays the device capabilities with respect to certain fields in Mediation Device table. This may be dependent on hardware capabilities, software capabilities. The following values may be supported: ipV4SrcInterface: SNMP ifIndex Value may be used to select the interface (denoted by pktcEScTapMediationSrcInterface) on the intercepting device from which to transmit intercepted data to an IPv4 address Mediation Device. ipV6SrcInterface: SNMP ifIndex Value may be used to select the interface (denoted by pktcEScTapMediationSrcInterface) on the intercepting device from which to transmit intercepted data to an IPv6 address Mediation Device. udp: UDP may be used as transport protocol (denoted by pktcEScTapMediationTransport) in transferring intercepted data to the Mediation Device.')
pktcEScTapStreamTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: pktcEScTapStreamTable.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapStreamTable.setDescription('The Intercept Stream Table lists the traffic streams to be intercepted. The same data stream may be required by multiple taps, and one might assume that often the intercepted stream is a small subset of the traffic that could be intercepted. The Table consists of generic fields that are independent of the type of intercept. It contains type of the specific filter which is defined in an extension MIB and counters to account for packets intercepted or dropped by the attached filter specification. Note that the Mediation Device must make sure there is only one type of specific filter created with the same indices as that of a row in this table, otherwise the later creations will fail. For example, if there is a row in this table with index 1.2, there can be a corresponding row with the same index either in tapStreamTable, c8tapStreamTable or cuctTapStreamTable, but not all. The first index indicates which Mediation Device the intercepted traffic will be diverted to. The second index permits multiple classifiers to be used together. Entries are added to this table via pktcEScTapStreamStatus in accordance with the RowStatus convention.')
pktcEScTapStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "PKTC-ES-TAP-MIB", "pktcEScTapMediationContentId"), (0, "PKTC-ES-TAP-MIB", "pktcEScTapStreamIndex"))
if mibBuilder.loadTexts: pktcEScTapStreamEntry.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapStreamEntry.setDescription('A stream entry indicates a single data stream to be intercepted to a Mediation Device. Many selected data streams may go to the same application interface, and many application interfaces are supported.')
pktcEScTapStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pktcEScTapStreamIndex.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapStreamIndex.setDescription('The index of the stream itself.')
pktcEScTapStreamType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2), ("userConnection", 3), ("msPdsn", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcEScTapStreamType.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapStreamType.setDescription('Identifies the type of intercept filter associated to this generic stream. The following type of streams is supported: ip: The specific filter is an IP filter with same indices as that of this table. The exact filter is a row in tapStreamTable of IP-TAP-MIB.')
pktcEScTapStreamInterceptEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 2, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcEScTapStreamInterceptEnable.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapStreamInterceptEnable.setDescription("If 'true', the tap should intercept matching traffic. The value for this object should be set to 'true' only after an additional filter specification has been attached to this stream.")
pktcEScTapStreamInterceptedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEScTapStreamInterceptedPackets.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapStreamInterceptedPackets.setDescription('The number of packets matching this data stream specification that have been intercepted.')
pktcEScTapStreamInterceptDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEScTapStreamInterceptDrops.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapStreamInterceptDrops.setDescription('The number of packets matching this data stream specification that, having been intercepted, were dropped in the lawful intercept process.')
pktcEScTapStreamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pktcEScTapStreamStatus.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapStreamStatus.setDescription("The status of this conceptual row. This object manages creation, modification, and deletion of rows in this table. pktcEScTapStreamInterceptEnable may be modified even the value of this entry rowStatus object is 'active'. When other rows must be changed, pktcEScTapStreamStatus must be first set to 'notInService'.")
pktcEScTapDebugAge = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEScTapDebugAge.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapDebugAge.setDescription('This object contains the duration in minutes for which an entry in pktcEScTapDebugTable is maintained by the implementing device after which the entry is deleted. The management station also has the option of deleting the entry itself by setting pktcEScTapDebugStatus.')
pktcEScTapDebugMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEScTapDebugMaxEntries.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapDebugMaxEntries.setDescription('This object contains the maximum number of debug messages maintained by the implementing device at a time. If this limit is crossed, most recent message will replace the least recent message.')
pktcEScTapDebugTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 3, 3), )
if mibBuilder.loadTexts: pktcEScTapDebugTable.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapDebugTable.setDescription('A table that contains Lawful Intercept debug messages generated by the implementing device. This table is used by pktcESTapMediationDebug and pktcESTapStreamDebug notifications. An entry in this table contains a debug message which is regarding either a Mediation Device or a intercept stream created by a Mediation Device. The Mediation device is identified by pktcEScTapDebugMediationId whose value is that of pktcEScTapMediationContentId of pktcEScTapMediationEntry. The stream is identified by pktcEScTapDebugMediationId and pktcEScTapDebugStreamId whose values are that of pktcEScTapMediationContentId and pktcEScTapStreamIndex of the corresponding pktcEScTapStreamEntry. Note that pktcEScTapDebugStreamId may be zero for an entry, in which case the debug message is regarding a Mediation Device. Entries are added to this table via pktcEScTapDebugStatus in accordance with the RowStatus convention.')
pktcEScTapDebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 3, 3, 1), ).setIndexNames((0, "PKTC-ES-TAP-MIB", "pktcEScTapDebugIndex"))
if mibBuilder.loadTexts: pktcEScTapDebugEntry.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapDebugEntry.setDescription('A list of the debug messages.')
pktcEScTapDebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pktcEScTapDebugIndex.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapDebugIndex.setDescription('Index to the debug table.')
pktcEScTapDebugMediationId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEScTapDebugMediationId.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapDebugMediationId.setDescription('The value of this object is pktcEScTapMediationContentId identifying an entry in pktcEScTapMediationTable. Note this object may contain a value for which an entry in pktcEScTapMediationTable does not exist. This happens when creation of an entry in pktcEScTapMediationTable fails and this debug message conveys more detailed information regarding the failure.')
pktcEScTapDebugStreamId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEScTapDebugStreamId.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapDebugStreamId.setDescription('The value of this object is that of pktcEScTapStreamIndex of an entry in pktcEScTapStreamTable. This object along with pktcEScTapDebugMediationId identifies an entry in pktcEScTapStreamTable. The value of this object may be zero, in which this debug message is regarding a Mediation Device, but not a particular stream. Note this object may contain a value for which an entry in pktcEScTapMediationTable does not exist. This happens when creation of an entry in pktcEScTapStreamTable fails.')
pktcEScTapDebugMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 3, 3, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEScTapDebugMessage.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapDebugMessage.setDescription('A text string contains the debug message.')
pktcEScTapDebugStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 1, 3, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pktcEScTapDebugStatus.setStatus('current')
if mibBuilder.loadTexts: pktcEScTapDebugStatus.setDescription("The status of this conceptual row. A row in this table is created by the implementing device. A management station cannot modify any of the objects in this row, except deleting the row by setting this object to 'destroy'.")
pktcESTapMibActive = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 0, 1)).setObjects(("PKTC-ES-TAP-MIB", "pktcEScTapStreamType"))
if mibBuilder.loadTexts: pktcESTapMibActive.setStatus('current')
if mibBuilder.loadTexts: pktcESTapMibActive.setDescription('This Notification is sent when an intercepting router or switch is first capable of intercepting a packet corresponding to a configured data stream. The value of the corresponding pktcEScTapStreamType which identifies the actual intercept stream type is included in this notification. This notification may be generated in conjunction with the intercept application, which is designed to expect the notification to be sent as reliably as possible, e.g., through the use of a finite number of retransmissions until acknowledged, as and when such mechanisms are available; for example, with SNMPv3, this would be an InformRequest. Filter installation can take a long period of time, during which call progress may be delayed.')
pktcESTapMediationTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 0, 2)).setObjects(("PKTC-ES-TAP-MIB", "pktcEScTapMediationStatus"))
if mibBuilder.loadTexts: pktcESTapMediationTimedOut.setStatus('current')
if mibBuilder.loadTexts: pktcESTapMediationTimedOut.setDescription('When an intercept is autonomously removed by an intercepting device, such as due to the time specified in pktcEScTapMediationTimeout arriving, the device notifies the of the action.')
pktcESTapMediationDebug = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 0, 3)).setObjects(("PKTC-ES-TAP-MIB", "pktcEScTapDebugMediationId"), ("PKTC-ES-TAP-MIB", "pktcEScTapDebugMessage"))
if mibBuilder.loadTexts: pktcESTapMediationDebug.setStatus('current')
if mibBuilder.loadTexts: pktcESTapMediationDebug.setDescription('When there is intervention needed due to some events related to entries configured in pktcEScTapMediationTable, the device notifies the manager of the event. This notification may be generated in conjunction with the intercept application, which is designed to expect the notification to be sent as reliably as possible, e.g., through the use of a finite number of retransmissions until acknowledged, as and when such mechanisms are available; for example, with SNMPv3, this would be an InformRequest.')
pktcESTapStreamDebug = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 0, 4)).setObjects(("PKTC-ES-TAP-MIB", "pktcEScTapDebugMediationId"), ("PKTC-ES-TAP-MIB", "pktcEScTapDebugStreamId"), ("PKTC-ES-TAP-MIB", "pktcEScTapDebugMessage"))
if mibBuilder.loadTexts: pktcESTapStreamDebug.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamDebug.setDescription('When there is intervention needed due to some events related to entries configured in pktcEScTapStreamTable, the device notifies the manager of the event. This notification may be generated in conjunction with the intercept application, which is designed to expect the notification to be sent as reliably as possible, e.g., through the use of a finite number of retransmissions until acknowledged, as and when such mechanisms are available; for example, with SNMPv3, this would be an InformRequest.')
pktcESTapSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 0, 5))
if mibBuilder.loadTexts: pktcESTapSwitchover.setStatus('current')
if mibBuilder.loadTexts: pktcESTapSwitchover.setDescription('This notification is sent when there is a redundant (standby) route processor available on the intercepting device and the current active processor is going down causing standby to takeover. Note that this notification may be sent by the intercepting device only when it had a chance to know before it goes down. Mediation device when received this notification should assume that configured intercepts on the intercepting device no longer exist, when the standby processor takes control. This means that the Mediation device should again configure the intercepts.')
pktcESTapMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 2, 1))
pktcESTapMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 2, 2))
pktcESTapMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 2, 1, 1)).setObjects(("PKTC-ES-TAP-MIB", "pktcESTapMediationComplianceGroup"), ("PKTC-ES-TAP-MIB", "pktcESTapStreamComplianceGroup"), ("PKTC-ES-TAP-MIB", "pktcESTapMediationCpbComplianceGroup"), ("PKTC-ES-TAP-MIB", "pktcESTapNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pktcESTapMibCompliance = pktcESTapMibCompliance.setStatus('current')
if mibBuilder.loadTexts: pktcESTapMibCompliance.setDescription('The compliance statement for entities which implement the Intercept MIB')
pktcESTapMediationComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 2, 2, 1)).setObjects(("PKTC-ES-TAP-MIB", "pktcEScTapMediationNewIndex"), ("PKTC-ES-TAP-MIB", "pktcEScTapMediationDestAddressType"), ("PKTC-ES-TAP-MIB", "pktcEScTapMediationDestAddress"), ("PKTC-ES-TAP-MIB", "pktcEScTapMediationDestPort"), ("PKTC-ES-TAP-MIB", "pktcEScTapMediationSrcInterface"), ("PKTC-ES-TAP-MIB", "pktcEScTapMediationDscp"), ("PKTC-ES-TAP-MIB", "pktcEScTapMediationTimeout"), ("PKTC-ES-TAP-MIB", "pktcEScTapMediationTransport"), ("PKTC-ES-TAP-MIB", "pktcEScTapMediationNotificationEnable"), ("PKTC-ES-TAP-MIB", "pktcEScTapMediationStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pktcESTapMediationComplianceGroup = pktcESTapMediationComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: pktcESTapMediationComplianceGroup.setDescription('These objects are necessary for description of the data streams directed to a Mediation Device.')
pktcESTapStreamComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 2, 2, 2)).setObjects(("PKTC-ES-TAP-MIB", "pktcEScTapStreamType"), ("PKTC-ES-TAP-MIB", "pktcEScTapStreamInterceptEnable"), ("PKTC-ES-TAP-MIB", "pktcEScTapStreamInterceptedPackets"), ("PKTC-ES-TAP-MIB", "pktcEScTapStreamInterceptDrops"), ("PKTC-ES-TAP-MIB", "pktcEScTapStreamStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pktcESTapStreamComplianceGroup = pktcESTapStreamComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: pktcESTapStreamComplianceGroup.setDescription('These objects are necessary for a description of the packets to select for interception.')
pktcESTapNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 2, 2, 3)).setObjects(("PKTC-ES-TAP-MIB", "pktcESTapMibActive"), ("PKTC-ES-TAP-MIB", "pktcESTapMediationTimedOut"), ("PKTC-ES-TAP-MIB", "pktcESTapMediationDebug"), ("PKTC-ES-TAP-MIB", "pktcESTapStreamDebug"), ("PKTC-ES-TAP-MIB", "pktcESTapSwitchover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pktcESTapNotificationGroup = pktcESTapNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: pktcESTapNotificationGroup.setDescription('These notifications are used to present status from the intercepting device to the Mediation Device.')
pktcESTapMediationCpbComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 2, 2, 4)).setObjects(("PKTC-ES-TAP-MIB", "pktcEScTapMediationCapabilities"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pktcESTapMediationCpbComplianceGroup = pktcESTapMediationCpbComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: pktcESTapMediationCpbComplianceGroup.setDescription('These objects are necessary for a description of the mediation device to select for Lawful Intercept.')
pktcESTapDebugComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1, 1, 2, 2, 5)).setObjects(("PKTC-ES-TAP-MIB", "pktcEScTapDebugAge"), ("PKTC-ES-TAP-MIB", "pktcEScTapDebugMaxEntries"), ("PKTC-ES-TAP-MIB", "pktcEScTapDebugMediationId"), ("PKTC-ES-TAP-MIB", "pktcEScTapDebugStreamId"), ("PKTC-ES-TAP-MIB", "pktcEScTapDebugMessage"), ("PKTC-ES-TAP-MIB", "pktcEScTapDebugStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pktcESTapDebugComplianceGroup = pktcESTapDebugComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: pktcESTapDebugComplianceGroup.setDescription('These objects are necessary for debug information.')
mibBuilder.exportSymbols("PKTC-ES-TAP-MIB", pktcEScTapStreamInterceptDrops=pktcEScTapStreamInterceptDrops, pktcEScTapStreamType=pktcEScTapStreamType, pktcEScTapDebugGroup=pktcEScTapDebugGroup, pktcEScTapMediationTimeout=pktcEScTapMediationTimeout, pktcEScTapMediationNotificationEnable=pktcEScTapMediationNotificationEnable, pktcESTapMediationComplianceGroup=pktcESTapMediationComplianceGroup, pktcEScTapMediationDestAddressType=pktcEScTapMediationDestAddressType, pktcEScTapDebugMessage=pktcEScTapDebugMessage, pktcESTapMediationTimedOut=pktcESTapMediationTimedOut, pktcESTapMediationDebug=pktcESTapMediationDebug, pktcESTapMibActive=pktcESTapMibActive, pktcESTapMibCompliance=pktcESTapMibCompliance, pktcEScTapMediationStatus=pktcEScTapMediationStatus, pktcESTapDebugComplianceGroup=pktcESTapDebugComplianceGroup, pktcESTapStreamDebug=pktcESTapStreamDebug, pktcEScTapStreamStatus=pktcEScTapStreamStatus, pktcEScTapStreamGroup=pktcEScTapStreamGroup, pktcEScTapStreamTable=pktcEScTapStreamTable, pktcEScTapDebugIndex=pktcEScTapDebugIndex, pktcEScTapDebugStreamId=pktcEScTapDebugStreamId, pktcESTapMibCompliances=pktcESTapMibCompliances, pktcESTapMibConform=pktcESTapMibConform, pktcEScTapMediationContentId=pktcEScTapMediationContentId, pktcEScTapDebugMaxEntries=pktcEScTapDebugMaxEntries, PYSNMP_MODULE_ID=pktcESTapMib, pktcEScTapMediationSrcInterface=pktcEScTapMediationSrcInterface, pktcEScTapDebugMediationId=pktcEScTapDebugMediationId, pktcEScTapMediationDestPort=pktcEScTapMediationDestPort, pktcESTapMibGroups=pktcESTapMibGroups, pktcESTapStreamComplianceGroup=pktcESTapStreamComplianceGroup, pktcEScTapDebugAge=pktcEScTapDebugAge, PktcEScTapDscp=PktcEScTapDscp, pktcEScTapStreamInterceptEnable=pktcEScTapStreamInterceptEnable, pktcEScTapMediationTransport=pktcEScTapMediationTransport, pktcEScTapMediationCapabilities=pktcEScTapMediationCapabilities, pktcESTapMibNotifs=pktcESTapMibNotifs, pktcEScTapStreamInterceptedPackets=pktcEScTapStreamInterceptedPackets, pktcESTapSwitchover=pktcESTapSwitchover, pktcESTapMediationCpbComplianceGroup=pktcESTapMediationCpbComplianceGroup, pktcEScTapStreamEntry=pktcEScTapStreamEntry, pktcEScTapMediationDscp=pktcEScTapMediationDscp, pktcESTapMibObjects=pktcESTapMibObjects, pktcEScTapMediationTable=pktcEScTapMediationTable, pktcEScTapDebugStatus=pktcEScTapDebugStatus, pktcEScTapMediationDestAddress=pktcEScTapMediationDestAddress, pktcESTapNotificationGroup=pktcESTapNotificationGroup, pktcEScTapMediationEntry=pktcEScTapMediationEntry, pktcEScTapMediationNewIndex=pktcEScTapMediationNewIndex, pktcESTapMib=pktcESTapMib, pktcEScTapMediationGroup=pktcEScTapMediationGroup, pktcEScTapStreamIndex=pktcEScTapStreamIndex, pktcEScTapDebugTable=pktcEScTapDebugTable, pktcEScTapDebugEntry=pktcEScTapDebugEntry)
