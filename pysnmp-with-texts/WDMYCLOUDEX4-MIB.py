#
# PySNMP MIB module WDMYCLOUDEX4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WDMYCLOUDEX4-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, NotificationType, Counter64, Integer32, Bits, ModuleIdentity, Unsigned32, IpAddress, TimeTicks, MibIdentifier, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "NotificationType", "Counter64", "Integer32", "Bits", "ModuleIdentity", "Unsigned32", "IpAddress", "TimeTicks", "MibIdentifier", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wd = MibIdentifier((1, 3, 6, 1, 4, 1, 5127))
productID = MibIdentifier((1, 3, 6, 1, 4, 1, 5127, 1))
projectID = MibIdentifier((1, 3, 6, 1, 4, 1, 5127, 1, 1))
modelID = MibIdentifier((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1))
submodelID = MibIdentifier((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1))
nasAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1))
wdmycloudex4AgentVer = MibScalar((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4AgentVer.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4AgentVer.setDescription('Version information for the agent of SNMP of WDMYCLOUDEX4.')
wdmycloudex4SoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4SoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4SoftwareVersion.setDescription('The device software version.')
wdmycloudex4HostName = MibScalar((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4HostName.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4HostName.setDescription('The device host name.')
wdmycloudex4FTPServer = MibScalar((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4FTPServer.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4FTPServer.setDescription('Ftp Server status. 1 : enable 0 : disable ')
wdmycloudex4NetType = MibScalar((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4NetType.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4NetType.setDescription('The Network type. 0 : Workgroup 1 : Active Directory')
wdmycloudex4Temperature = MibScalar((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4Temperature.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4Temperature.setDescription('The temperature of the system.')
wdmycloudex4FanStatus = MibScalar((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4FanStatus.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4FanStatus.setDescription('The status of the fan0 & fan1.')
wdmycloudex4VolumeTable = MibTable((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 9), )
if mibBuilder.loadTexts: wdmycloudex4VolumeTable.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4VolumeTable.setDescription('A table of active volumes on the NAS device.')
wdmycloudex4VolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 9, 1), ).setIndexNames((0, "WDMYCLOUDEX4-MIB", "wdmycloudex4VolumeNum"))
if mibBuilder.loadTexts: wdmycloudex4VolumeEntry.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4VolumeEntry.setDescription('An entry in the volume table.')
wdmycloudex4VolumeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4VolumeNum.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4VolumeNum.setDescription('Instance number of the volume entry.')
wdmycloudex4VolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4VolumeName.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4VolumeName.setDescription('The name of the volume.')
wdmycloudex4VolumeFsType = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4VolumeFsType.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4VolumeFsType.setDescription('The type of file system of the volume. Example : ext3 or ext4')
wdmycloudex4VolumeRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4VolumeRaidLevel.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4VolumeRaidLevel.setDescription('The RAID level of the volume. (STANDARD LINEAR RAID0 RAID1 RAID5 RAID10 RAID5+SPARE)')
wdmycloudex4VolumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4VolumeSize.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4VolumeSize.setDescription('The size of the volume in bytes.')
wdmycloudex4VolumeFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4VolumeFreeSpace.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4VolumeFreeSpace.setDescription('Free space on the volume in bytes.')
wdmycloudex4DiskTable = MibTable((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 10), )
if mibBuilder.loadTexts: wdmycloudex4DiskTable.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4DiskTable.setDescription('A table of physical disks attached to the NAS device.')
wdmycloudex4DiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 10, 1), ).setIndexNames((0, "WDMYCLOUDEX4-MIB", "wdmycloudex4DiskNum"))
if mibBuilder.loadTexts: wdmycloudex4DiskEntry.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4DiskEntry.setDescription('An entry in the physical disk table.')
wdmycloudex4DiskNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4DiskNum.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4DiskNum.setDescription('Instance number of the disk entry.')
wdmycloudex4DiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4DiskVendor.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4DiskVendor.setDescription('The vendor of the disk drive.')
wdmycloudex4DiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4DiskModel.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4DiskModel.setDescription("The disk drive's model name.")
wdmycloudex4DiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4DiskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4DiskSerialNumber.setDescription("The disk drive's serial number.")
wdmycloudex4DiskTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4DiskTemperature.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4DiskTemperature.setDescription('The centigrade temperature of this disk.')
wdmycloudex4DiskCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4DiskCapacity.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4DiskCapacity.setDescription('The capacity of the disk in GB.')
wdmycloudex4UPSTable = MibTable((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 11), )
if mibBuilder.loadTexts: wdmycloudex4UPSTable.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4UPSTable.setDescription('A table of UPS attached to the NAS device.')
wdmycloudex4UPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 11, 1), ).setIndexNames((0, "WDMYCLOUDEX4-MIB", "wdmycloudex4UPSNum"))
if mibBuilder.loadTexts: wdmycloudex4UPSEntry.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4UPSEntry.setDescription('An entry in the UPS table.')
wdmycloudex4UPSNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4UPSNum.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4UPSNum.setDescription('Instance number of the UPS entry.')
wdmycloudex4UPSMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4UPSMode.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4UPSMode.setDescription('The mode of the UPS ')
wdmycloudex4UPSManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4UPSManufacturer.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4UPSManufacturer.setDescription('The manufacturer of the UPS.')
wdmycloudex4UPSProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4UPSProduct.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4UPSProduct.setDescription('The product name of the UPS.')
wdmycloudex4UPSBatteryCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4UPSBatteryCharge.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4UPSBatteryCharge.setDescription('The battery charge of the UPS.')
wdmycloudex4UPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmycloudex4UPSStatus.setStatus('current')
if mibBuilder.loadTexts: wdmycloudex4UPSStatus.setDescription('The status of this UPS.')
notifyEvts = MibIdentifier((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 200))
notifyPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 200, 1))
if mibBuilder.loadTexts: notifyPasswdChanged.setStatus('current')
if mibBuilder.loadTexts: notifyPasswdChanged.setDescription("An indication that the Administrator's password has been changed.")
notifyFirmwareUpgraded = NotificationType((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 200, 2))
if mibBuilder.loadTexts: notifyFirmwareUpgraded.setStatus('current')
if mibBuilder.loadTexts: notifyFirmwareUpgraded.setDescription('An indication that firmware has been upgraded.')
notifyNetworkChanged = NotificationType((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 200, 3))
if mibBuilder.loadTexts: notifyNetworkChanged.setStatus('current')
if mibBuilder.loadTexts: notifyNetworkChanged.setDescription('An indication that the network settings has been changed.')
notifyTemperatureExceeded = NotificationType((1, 3, 6, 1, 4, 1, 5127, 1, 1, 1, 1, 1, 200, 4))
if mibBuilder.loadTexts: notifyTemperatureExceeded.setStatus('current')
if mibBuilder.loadTexts: notifyTemperatureExceeded.setDescription('An indication that system temperature has exceeded.')
mibBuilder.exportSymbols("WDMYCLOUDEX4-MIB", wdmycloudex4VolumeTable=wdmycloudex4VolumeTable, wdmycloudex4VolumeSize=wdmycloudex4VolumeSize, notifyNetworkChanged=notifyNetworkChanged, wdmycloudex4DiskModel=wdmycloudex4DiskModel, wdmycloudex4UPSProduct=wdmycloudex4UPSProduct, wdmycloudex4FanStatus=wdmycloudex4FanStatus, wdmycloudex4UPSEntry=wdmycloudex4UPSEntry, wdmycloudex4NetType=wdmycloudex4NetType, wdmycloudex4DiskEntry=wdmycloudex4DiskEntry, wdmycloudex4VolumeRaidLevel=wdmycloudex4VolumeRaidLevel, modelID=modelID, wdmycloudex4VolumeFsType=wdmycloudex4VolumeFsType, wdmycloudex4VolumeNum=wdmycloudex4VolumeNum, wdmycloudex4FTPServer=wdmycloudex4FTPServer, wdmycloudex4VolumeFreeSpace=wdmycloudex4VolumeFreeSpace, projectID=projectID, wdmycloudex4DiskNum=wdmycloudex4DiskNum, wdmycloudex4UPSManufacturer=wdmycloudex4UPSManufacturer, wdmycloudex4DiskVendor=wdmycloudex4DiskVendor, wdmycloudex4UPSNum=wdmycloudex4UPSNum, nasAgent=nasAgent, wdmycloudex4HostName=wdmycloudex4HostName, wdmycloudex4DiskCapacity=wdmycloudex4DiskCapacity, wdmycloudex4DiskTemperature=wdmycloudex4DiskTemperature, wd=wd, wdmycloudex4AgentVer=wdmycloudex4AgentVer, wdmycloudex4SoftwareVersion=wdmycloudex4SoftwareVersion, wdmycloudex4Temperature=wdmycloudex4Temperature, wdmycloudex4DiskTable=wdmycloudex4DiskTable, wdmycloudex4UPSStatus=wdmycloudex4UPSStatus, notifyEvts=notifyEvts, notifyFirmwareUpgraded=notifyFirmwareUpgraded, wdmycloudex4VolumeName=wdmycloudex4VolumeName, wdmycloudex4UPSBatteryCharge=wdmycloudex4UPSBatteryCharge, productID=productID, wdmycloudex4VolumeEntry=wdmycloudex4VolumeEntry, wdmycloudex4UPSMode=wdmycloudex4UPSMode, wdmycloudex4UPSTable=wdmycloudex4UPSTable, submodelID=submodelID, notifyTemperatureExceeded=notifyTemperatureExceeded, notifyPasswdChanged=notifyPasswdChanged, wdmycloudex4DiskSerialNumber=wdmycloudex4DiskSerialNumber)
