#
# PySNMP MIB module CISCO-WAN-RTP-CONN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-RTP-CONN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:18:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, Counter32, IpAddress, Unsigned32, MibIdentifier, NotificationType, Integer32, TimeTicks, Bits, iso, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "Counter32", "IpAddress", "Unsigned32", "MibIdentifier", "NotificationType", "Integer32", "TimeTicks", "Bits", "iso", "ModuleIdentity", "ObjectIdentity")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
ciscoWanRtpConnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 20))
ciscoWanRtpConnMIB.setRevisions(('2005-04-12 00:00', '2003-10-20 00:00', '2003-05-23 00:00', '2002-05-20 00:00', '2001-11-28 00:00', '2001-03-15 15:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanRtpConnMIB.setRevisionsDescriptions((' Add new statistics vismRtpInterArrivalJitter vismRtpLatency ', ' Update with description changes in MIB. ', ' Added changes for Lossless codec. ', ' Added new object vismRtpPayloadType. ', ' Changes for new codec family G723 Added new objects vismRtpLcn, vismRtpFailReason ', ' Initial draft. ',))
if mibBuilder.loadTexts: ciscoWanRtpConnMIB.setLastUpdated('200504120000Z')
if mibBuilder.loadTexts: ciscoWanRtpConnMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanRtpConnMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-vism@cisco.com')
if mibBuilder.loadTexts: ciscoWanRtpConnMIB.setDescription('The MIB module is defined for establishing connection between an endpoint and another endpoint on a remote VISM in the case of VoIP(Voice over IP) trunking application.')
ciscoWanRtpConnMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 20, 1))
vismRtpConnGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1))
vismRtpBearerStatsGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 2))
vismRtpConnGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1), )
if mibBuilder.loadTexts: vismRtpConnGrpTable.setStatus('current')
if mibBuilder.loadTexts: vismRtpConnGrpTable.setDescription("This table defines attributes used to set up a static trunked VoIP connection between an endpoint and another endpoint on a remote VISM. The maximum number of RTP connections that can be established is based on the current codec template, which is vismAppliedTemplate(defined in CISCO-VISM-MODULE-MIB MIB) object. Before establishing the connection, endpoints on either VISM's should have been created and the line signaling type needs to be configured. ")
vismRtpConnGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-RTP-CONN-MIB", "vismRtpConnNum"))
if mibBuilder.loadTexts: vismRtpConnGrpEntry.setStatus('current')
if mibBuilder.loadTexts: vismRtpConnGrpEntry.setDescription('An entry in the vismRtpConnGrpTable. This table applies to VoIP trunking applications. The configuration is retained after VISM card reboots. vismRtpCodecType, vismRtpPktPeriod, vismRtpBearerTos, vismRtpConnMode, vismRtpVad, vismRtpVadTimer, vismRtpDtmfTransport, vismRtpCasTransport, vismRtpTriRedundancy, and vismRtpICSEnable can be modified after a connection is established. The rest cannot be modified after a connection is created. ')
vismRtpConnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248)))
if mibBuilder.loadTexts: vismRtpConnNum.setStatus('current')
if mibBuilder.loadTexts: vismRtpConnNum.setDescription(' This is the connection number in vismRtpConnGrpTable. ')
vismRtpEndptNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpEndptNum.setStatus('current')
if mibBuilder.loadTexts: vismRtpEndptNum.setDescription('This object defines the endpoint number to which the RTP connection associated. It is the same as mgEndpointNumber object in mgEndpointTable(defined in CISCO-WAN-MG-MIB MIB). ')
vismRtpLocPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(49648, 50142))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpLocPort.setStatus('current')
if mibBuilder.loadTexts: vismRtpLocPort.setDescription('This object determines the static local RTP port (UDP) that this connection is using. Only even numbers are allowed as odd numbers are used for RTCP(Real-time transport control protocol) port. The local RTP port has to be unique as only one connection is allowed per port. ')
vismRtpRmtIp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpRmtIp.setStatus('current')
if mibBuilder.loadTexts: vismRtpRmtIp.setDescription("This object determines the remote VISM's IP address. For every RTP connection the remote port and remote IP pair needs to be unique. ")
vismRtpRmtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16384, 50142))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpRmtPort.setStatus('current')
if mibBuilder.loadTexts: vismRtpRmtPort.setDescription('This object determines the static remote RTP port (UDP) that this connection is using. Only even numbers are allowed as odd numbers are used for RTCP port. The combination of remote ip and remote port needs to be unique for a connection. ')
vismRtpConnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sendOnly", 1), ("rcvOnly", 2), ("sendAndRcv", 3), ("inactive", 4))).clone('sendAndRcv')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpConnMode.setStatus('current')
if mibBuilder.loadTexts: vismRtpConnMode.setDescription("This object defines the packet transfer mode on the connection. 'sendOnly' - indicate send packet only. 'rcvOnly' - indicate receive packet only. 'sendAndRcv' - indicate send and receive packet. 'inactive' - indicate it cannot send nor receive any packet. ")
vismRtpBearerTos = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(160)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpBearerTos.setStatus('current')
if mibBuilder.loadTexts: vismRtpBearerTos.setDescription('This object is used to provision the bitmask used for the Type Of Service (TOS) octet for cells carrying VoIP bearer (RTP) traffic. The first 3 bits denotes the precedence while the other bits denotes the TOS. Default value 160 = 0xA0 => Precedence = 5 and TOS nibble = 0. The bitmask can be only a byte value. ')
vismRtpCodecType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("g711u", 1), ("g711a", 2), ("g726r32000", 3), ("g729a", 4), ("g729ab", 5), ("clearChannel", 6), ("g726r16000", 7), ("g726r24000", 8), ("g726r40000", 9), ("g723h", 11), ("g723ah", 12), ("g723l", 13), ("g723al", 14), ("lossless", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpCodecType.setStatus('current')
if mibBuilder.loadTexts: vismRtpCodecType.setDescription('This object is used to define what codec is used to transport voice packets on a RTP connection. 1 represents G.711u 2 represents G.711a 3 represents G.726 at rate 32 kbps 4 represents G.729a 5 represents G.729ab 6 represents clear channel 7 represents G.726 at rate 16 kbps 8 represents G.726 at rate 24 kbps 9 represents G.726 at rate 40 kbps 10 NOT USED 11 represents G.723.1-H 12 represents G.723.1a-H 13 represents G.723.1-L 14 represents G.723.1a-L 15 represents Lossless ')
vismRtpPktPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20, 30, 40, 60))).clone(namedValues=NamedValues(("tenms", 10), ("twentyms", 20), ("thirtyms", 30), ("fourtyms", 40), ("sixtyms", 60))).clone('tenms')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpPktPeriod.setStatus('current')
if mibBuilder.loadTexts: vismRtpPktPeriod.setDescription('This object gives the packetization period for a particular codec in milli secs. for G.711a allowed values are 10 & 20 for G.711u allowed values are 10 & 20 for G.726 at rate 32 kbps allowed values are 10 ,20 30 & 40 for G.729a allowed values are 10, 20 ,30 & 40 for G.729ab allowed values are 10, 20, 30 & 40 for clear channel allowed values are 10 and 20 for G.726 at rate 16 kbps allowed values are 10 ,20 30 & 40 for G.726 at rate 24 kbps allowed values are 10 ,20 30 & 40 for G.726 at rate 40 kbps allowed values are 10 ,20 30 & 40 for G.723 family allowed values are 30 & 60. Default is 30. for Lossless allowed values are 10 and 20 ')
vismRtpVadTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 65535)).clone(250)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpVadTimer.setStatus('current')
if mibBuilder.loadTexts: vismRtpVadTimer.setDescription('This attribute defines the hangover time for VAD (Voice Activity Detection) in milliseconds. Once the voice inactivity is detected, the gateway will wait for this duration before activating silence suppression. ')
vismRtpEcanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 11), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpEcanEnable.setStatus('current')
if mibBuilder.loadTexts: vismRtpEcanEnable.setDescription("This attribute defines whether Echo Cancellation has to be enabled on this connection. If it is set to 'true(1)', echo cancellation is enabled. If it is set to 'false(2)', echo cancellation is disabled. ")
vismRtpTriRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpTriRedundancy.setStatus('current')
if mibBuilder.loadTexts: vismRtpTriRedundancy.setDescription("This object tells whether the packets need to be sent in triplicates or not. If it is set to 'true(1)' the packets will be sent three times else will only be sent once (this is used for reliable links to save bandwidth). This object will override the card level object configuration vismVoIpTripleRedundancy(defined in CISCO-VISM-MODULE-MIB MIB). The default value is 'true(1)' if vismRtpDtmfTransport or vismRtpCasTransport is true, else 'false(2)'. ")
vismRtpDtmfTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 13), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpDtmfTransport.setStatus('current')
if mibBuilder.loadTexts: vismRtpDtmfTransport.setDescription('This attribute defines whether the DTMF (Dual Tone Multi Frequency) digits need to be transported to the other end-point. ')
vismRtpCasTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpCasTransport.setStatus('current')
if mibBuilder.loadTexts: vismRtpCasTransport.setDescription("This attribute defines whether the CAS(Channel Associated Signaling) bits need to be transported to the other endpoint. In the case of switching application, the CAS bits are backhauled to the Call Agent through xGCP-CAS protocol. Note that if the line signaling type is CAS the default value is 'true(1)', else the default value is 'false(2)'. ")
vismRtpVad = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpVad.setStatus('current')
if mibBuilder.loadTexts: vismRtpVad.setDescription('This attribute defines whether the VAD has to be applied on this channel, upon detection of silence. For algorithms that do not have VAD standards, Cisco-proprietary VAD can be applied and the generic SID (Silence Information Descriptor) packet as specified in I.366.2 standards can be sent to the other end. When the codecType is clearChannel VAD has to be off. ')
vismRtpICSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpICSEnable.setStatus('current')
if mibBuilder.loadTexts: vismRtpICSEnable.setDescription('This attribute is used to enable or disable the ICS(Idle Channel Suppression) for a connection. This can be specified while adding the connection and cannot be modified. When the ICS is enabled the DSP will look for the idle CAS (ABCD bits) pattern specified in ds0IdleCode in dsx0 MIB. If the idle pattern is present the DSP stops generating voice packets towards network side. By default the ds0IdleCode will be zero unless the user has configured it before adding the cid. If the ds0IdleCode is changed after the connection is added it will have no affect unless the card is reset. ')
vismRtpConnAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("failed", 2))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRtpConnAlarmState.setStatus('current')
if mibBuilder.loadTexts: vismRtpConnAlarmState.setDescription("This attribute shows the alarm state of this connection. It is set to 'failed' if the connection is in alarm else will be set to 'active'. ")
vismRtpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpRowStatus.setStatus('current')
if mibBuilder.loadTexts: vismRtpRowStatus.setDescription("This object is used to create, modify or delete an entry. An entry can be created using the 'createAndGo' option. Before creating a RTP connection, the endpoint should have already been created. And the line signaling type should have been configured. For creating a RTP connection, vismRtpEndptNum, vismRtpLocPort, vismRtpRmtPort, vismRtpRmtIp and vismRtpCodecType need to be provided. For the other objects the default will be applied. The RowStatus would be set to 'active' by the agent while creating a RTP connection. While deleting a RTP connection the RowStaus will be set to 'destroy'. The RTP connection won't be deleted if there are still call going on the connection. ")
vismRtpLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(131, 510))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRtpLcn.setStatus('current')
if mibBuilder.loadTexts: vismRtpLcn.setDescription('This object is used to indicate the RTP related LCN (Logical channel number). Only the primary PVC (Permanent virtual circuit) is used for this object. ')
vismRtpFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("self", 1), ("highLevel", 2), ("both", 3), ("notFail", 4))).clone('notFail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRtpFailReason.setStatus('current')
if mibBuilder.loadTexts: vismRtpFailReason.setDescription("This object is used to indicate the RTP failure reason. 'self' : fail because of non-PVC alarm. 'highLevel' : fail because of PVC alarm. 'both' : fail because of both PVC and non-PVC alarm. 'notFail' : no failure. ")
vismRtpPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vismRtpPayloadType.setStatus('current')
if mibBuilder.loadTexts: vismRtpPayloadType.setDescription('This object specifies the payload type to be used, when adding connection(s) in VoIP Trunking. IANA (Internet assigned number Authority) values (0..95) are static payload and (96..127) are dynamic payload type. The values (128..255) are define here to accomodate any future extension, also 256 is chosen as a default value to avoid payload conflict bewteen gateways. The value of 256 indicate the DSP should use a assigned payload value for the codec. ')
vismRtpBearerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 2, 1), )
if mibBuilder.loadTexts: vismRtpBearerStatsTable.setStatus('current')
if mibBuilder.loadTexts: vismRtpBearerStatsTable.setDescription('This table contains the RTP bearer statistics.')
vismRtpBearerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-RTP-CONN-MIB", "vismRtpConnNum"))
if mibBuilder.loadTexts: vismRtpBearerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: vismRtpBearerStatsEntry.setDescription('An entry is implicitly created when a RTP connection is established. All the statistics in this table can not be modified by user. ')
vismRtpPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRtpPktsSent.setStatus('current')
if mibBuilder.loadTexts: vismRtpPktsSent.setDescription('This object shows the number of packets sent to network side. ')
vismRtpPktsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRtpPktsRcv.setStatus('current')
if mibBuilder.loadTexts: vismRtpPktsRcv.setDescription('This object shows the number of packets received from network side. ')
vismRtpOctsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRtpOctsSent.setStatus('current')
if mibBuilder.loadTexts: vismRtpOctsSent.setDescription('This object shows the number of octets sent to network side. ')
vismRtpOctsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRtpOctsRcv.setStatus('current')
if mibBuilder.loadTexts: vismRtpOctsRcv.setDescription('This object shows the number of octets received from network side. ')
vismRtpPktsLost = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRtpPktsLost.setStatus('current')
if mibBuilder.loadTexts: vismRtpPktsLost.setDescription('This object shows the number of RTCP packets lost due to invalid connection mode. ')
vismRtpCntsCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 2, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRtpCntsCleared.setStatus('current')
if mibBuilder.loadTexts: vismRtpCntsCleared.setDescription('This object is used to clear all the above objects. ')
vismRtpInterArrivalJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 2, 1, 1, 7), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRtpInterArrivalJitter.setReference('RFC3550')
if mibBuilder.loadTexts: vismRtpInterArrivalJitter.setStatus('current')
if mibBuilder.loadTexts: vismRtpInterArrivalJitter.setDescription('This object provides the average interarrival jitter value between packets during a VoIP call. ')
vismRtpLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 20, 1, 2, 1, 1, 8), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRtpLatency.setReference('RFC3550')
if mibBuilder.loadTexts: vismRtpLatency.setStatus('current')
if mibBuilder.loadTexts: vismRtpLatency.setDescription('The round trip delay for a voice packet to travel from the originating end of a VoIP call to the terminating end and back. ')
vismRtpConnNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 20, 2))
vismRtpConnNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 20, 2, 0))
vismRtpConnMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 20, 3))
vismRtpConnMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 20, 3, 1))
vismRtpConnMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 20, 3, 2))
vismRtpConnMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 20, 3, 1, 1)).setObjects(("CISCO-WAN-RTP-CONN-MIB", "vismRtpConnGroup"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpBearerStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vismRtpConnMIBCompliance = vismRtpConnMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: vismRtpConnMIBCompliance.setDescription(' The complaince statement for RTP connection group which implements vismRtpConnGrp MIB.')
vismRtpConnMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 20, 3, 1, 2)).setObjects(("CISCO-WAN-RTP-CONN-MIB", "vismRtpConnGroup"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpBearerStatsGroup"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpBearerStatsGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vismRtpConnMIBComplianceRev1 = vismRtpConnMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: vismRtpConnMIBComplianceRev1.setDescription(' The complaince statement for RTP connection group which implements vismRtpConnGrp MIB.')
vismRtpConnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 20, 3, 2, 1)).setObjects(("CISCO-WAN-RTP-CONN-MIB", "vismRtpEndptNum"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpLocPort"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpRmtIp"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpRmtPort"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpConnMode"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpBearerTos"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpCodecType"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpPktPeriod"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpVadTimer"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpEcanEnable"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpTriRedundancy"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpDtmfTransport"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpCasTransport"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpVad"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpICSEnable"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpConnAlarmState"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpRowStatus"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpLcn"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpFailReason"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpPayloadType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vismRtpConnGroup = vismRtpConnGroup.setStatus('current')
if mibBuilder.loadTexts: vismRtpConnGroup.setDescription('This group contains objects related to configuration of RTP connections. ')
vismRtpBearerStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 20, 3, 2, 2)).setObjects(("CISCO-WAN-RTP-CONN-MIB", "vismRtpPktsSent"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpPktsRcv"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpOctsSent"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpOctsRcv"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpPktsLost"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpCntsCleared"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vismRtpBearerStatsGroup = vismRtpBearerStatsGroup.setStatus('current')
if mibBuilder.loadTexts: vismRtpBearerStatsGroup.setDescription('This group contains counters for each RTP connection. ')
vismRtpBearerStatsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 20, 3, 2, 3)).setObjects(("CISCO-WAN-RTP-CONN-MIB", "vismRtpInterArrivalJitter"), ("CISCO-WAN-RTP-CONN-MIB", "vismRtpLatency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vismRtpBearerStatsGroupSup1 = vismRtpBearerStatsGroupSup1.setStatus('current')
if mibBuilder.loadTexts: vismRtpBearerStatsGroupSup1.setDescription('This group is a supplement for vismRtpBearerStatsGroup and contains statistics for each RTP connection. ')
mibBuilder.exportSymbols("CISCO-WAN-RTP-CONN-MIB", vismRtpConnGrpTable=vismRtpConnGrpTable, vismRtpPktPeriod=vismRtpPktPeriod, vismRtpRmtIp=vismRtpRmtIp, vismRtpICSEnable=vismRtpICSEnable, vismRtpRmtPort=vismRtpRmtPort, vismRtpOctsSent=vismRtpOctsSent, vismRtpLatency=vismRtpLatency, vismRtpOctsRcv=vismRtpOctsRcv, PYSNMP_MODULE_ID=ciscoWanRtpConnMIB, vismRtpConnNum=vismRtpConnNum, vismRtpConnMIBCompliances=vismRtpConnMIBCompliances, vismRtpBearerStatsGrp=vismRtpBearerStatsGrp, vismRtpConnMIBGroups=vismRtpConnMIBGroups, vismRtpEndptNum=vismRtpEndptNum, vismRtpBearerStatsGroupSup1=vismRtpBearerStatsGroupSup1, vismRtpConnGrp=vismRtpConnGrp, vismRtpConnNotificationPrefix=vismRtpConnNotificationPrefix, vismRtpTriRedundancy=vismRtpTriRedundancy, ciscoWanRtpConnMIBObjects=ciscoWanRtpConnMIBObjects, vismRtpConnMIBConformance=vismRtpConnMIBConformance, vismRtpLcn=vismRtpLcn, vismRtpBearerStatsEntry=vismRtpBearerStatsEntry, vismRtpLocPort=vismRtpLocPort, vismRtpConnGroup=vismRtpConnGroup, vismRtpFailReason=vismRtpFailReason, vismRtpBearerTos=vismRtpBearerTos, vismRtpVad=vismRtpVad, vismRtpInterArrivalJitter=vismRtpInterArrivalJitter, vismRtpDtmfTransport=vismRtpDtmfTransport, vismRtpCasTransport=vismRtpCasTransport, vismRtpBearerStatsGroup=vismRtpBearerStatsGroup, vismRtpPayloadType=vismRtpPayloadType, vismRtpCodecType=vismRtpCodecType, vismRtpPktsRcv=vismRtpPktsRcv, vismRtpVadTimer=vismRtpVadTimer, vismRtpRowStatus=vismRtpRowStatus, ciscoWanRtpConnMIB=ciscoWanRtpConnMIB, vismRtpConnMode=vismRtpConnMode, vismRtpConnAlarmState=vismRtpConnAlarmState, vismRtpConnMIBComplianceRev1=vismRtpConnMIBComplianceRev1, vismRtpConnNotifications=vismRtpConnNotifications, vismRtpConnMIBCompliance=vismRtpConnMIBCompliance, vismRtpBearerStatsTable=vismRtpBearerStatsTable, vismRtpEcanEnable=vismRtpEcanEnable, vismRtpPktsLost=vismRtpPktsLost, vismRtpCntsCleared=vismRtpCntsCleared, vismRtpPktsSent=vismRtpPktsSent, vismRtpConnGrpEntry=vismRtpConnGrpEntry)
