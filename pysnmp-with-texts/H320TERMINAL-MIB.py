#
# PySNMP MIB module H320TERMINAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H320TERMINAL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:21:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
IsdnSignalingProtocol, = mibBuilder.importSymbols("ISDN-MIB", "IsdnSignalingProtocol")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
experimental, Integer32, Gauge32, Unsigned32, MibIdentifier, IpAddress, NotificationType, ModuleIdentity, TimeTicks, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "experimental", "Integer32", "Gauge32", "Unsigned32", "MibIdentifier", "IpAddress", "NotificationType", "ModuleIdentity", "TimeTicks", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "Bits")
DisplayString, DateAndTime, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention", "RowStatus")
h320TerminalMIB = ModuleIdentity((1, 3, 6, 1, 3, 320, 3))
h320TerminalMIB.setRevisions(('1998-08-01 14:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h320TerminalMIB.setRevisionsDescriptions((' The draft version of the H320 terminal mib',))
if mibBuilder.loadTexts: h320TerminalMIB.setLastUpdated('9808011400Z')
if mibBuilder.loadTexts: h320TerminalMIB.setOrganization('VTEL Corp.')
if mibBuilder.loadTexts: h320TerminalMIB.setContactInfo('Joon Maeng VTEL Corp. Postal: 108 Wild Basin Rd. Austin, TX 78746 USA TEL: (512)437-4567 Email: Joon_Maeng@vtel.com')
if mibBuilder.loadTexts: h320TerminalMIB.setDescription('This MIB module supports the functions of an ITU H.320 terminal')
class LineRates(TextualConvention, Integer32):
    description = 'This object represents the line rate capabilities of the H.320 entity. This includes the various line rates that it supports. It is encoded as bits in an octet string as follows: Capability Bit# 64 Kbits/s 0 2x64 Kbits/s 1 3x64 Kbits/s 2 4x64 Kbis/s 3 5x64 Kbits/s 4 6x64 Kbit/s 5 384 Kbits/s 6 2x384 Kbits/s 7 3x384 Kbits/s 8 5x384 Kbits/s 9 1536 Kbits/s 10 1920 Kbits/s 11 128 Kbits/s 12 92 Kbits/s 13 256 Kbits/s 14 320 Kbits/s 15 512 Kbits/s 16 768 Kbits/s 17 1152 Kbits/s 18 1452 Kbits/s 19 Bits are numbered starting with the most significant bit of the first byte being bit 0, the least significant bit of the first byte being bit 7, the most significant bit of the second byte being bit 8, and so on. A one bit encodes that the capability is supported, a zero bit encodes that the capability is not supported.'
    status = 'current'

class VideoFormats(TextualConvention, Integer32):
    description = 'This object represents the video capabilities of the H320 entity. This includes the various video algorithms that it supports. It is encoded as bits in an octet string, with the following definitions: Capability Bit # h261CIFVideo 0 h261QCIFVideo 1 h263SQCIFVideo 2 h263QCIFVideo 3 h263CIFVideo 4 h263CIF4Video 5 h263CIF16Video 6 h262SPMLSIFVideo 7 h262SPML2SIFVideo 8 h262SPML4SIFVideo 9 h262MPMLSIFVideo 10 h262MPML2SIFVideo 11 h262MPML4SIFVideo 12 Bits are numbered starting with the most significant bit of the first byte being bit 0, the least significant bit of the first byte being bit 7, the most significant bit of the second byte being bit 8, and so on. A one bit encodes that the capability is supported, a zero bit encodes that the capability is not supported.'
    status = 'current'

class AudioTypes(TextualConvention, Integer32):
    description = 'This object represents the audio capabilities of the H320 entity. This includes the various audio algorithms that it supports. It is encoded as bits in an octet string, with the following definitions: Capability Bit # g711-ALaw64KAudio 0 g711-ALaw56KAudio 1 g711-ULaw64KAudio 2 g711-ULaw56KAudio 3 g722-64KAudio 4 g722-56KAudio 5 g722-48KAudio 6 g728Audio 7 g723.1-5.3KAudio 8 g723.1-6.4KAudio 9 g729Audio 10 Bits are numbered starting with the most significant bit of the first byte being bit 0, the least significant bit of the first byte being bit 7, the most significant bit of the second byte being bit 8, and so on. A one bit encodes that the capability is supported, a zero bit encodes that the capability is not supported.'
    status = 'current'

system = MibIdentifier((1, 3, 6, 1, 3, 320, 3, 1))
configuration = MibIdentifier((1, 3, 6, 1, 3, 320, 3, 2))
callSites = MibIdentifier((1, 3, 6, 1, 3, 320, 3, 3))
control = MibIdentifier((1, 3, 6, 1, 3, 320, 3, 4))
sysDescr = MibScalar((1, 3, 6, 1, 3, 320, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDescr.setStatus('current')
if mibBuilder.loadTexts: sysDescr.setDescription("A textual description of the terminal. This value should include the full name and version identification of the system's hardware type and software.")
sysContact = MibScalar((1, 3, 6, 1, 3, 320, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysContact.setStatus('current')
if mibBuilder.loadTexts: sysContact.setDescription('The textual identification of the contact person for this managed node, together with information on how to contact this person.')
syst35CountryCode = MibScalar((1, 3, 6, 1, 3, 320, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syst35CountryCode.setStatus('current')
if mibBuilder.loadTexts: syst35CountryCode.setDescription('Country code, per T.35.')
syst35CountryCodeExtention = MibScalar((1, 3, 6, 1, 3, 320, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syst35CountryCodeExtention.setStatus('current')
if mibBuilder.loadTexts: syst35CountryCodeExtention.setDescription('Assigned nationally.')
syst35ManufacturerCode = MibScalar((1, 3, 6, 1, 3, 320, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syst35ManufacturerCode.setStatus('current')
if mibBuilder.loadTexts: syst35ManufacturerCode.setDescription('Assigned nationally.')
sysLocation = MibScalar((1, 3, 6, 1, 3, 320, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLocation.setStatus('current')
if mibBuilder.loadTexts: sysLocation.setDescription('The physical location of this system. For instance, closet, terminal room and so on')
sysH320TerminalUptime = MibScalar((1, 3, 6, 1, 3, 320, 3, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysH320TerminalUptime.setStatus('current')
if mibBuilder.loadTexts: sysH320TerminalUptime.setDescription('The amount of time (in hundredths of a second) since this H320 terminal was last initialized. Note that this is different from sysUpTime in MIB-II [ ] because sysUpTime is the uptime of the network management portion of the system.')
sysH320TerminalLocalTime = MibScalar((1, 3, 6, 1, 3, 320, 3, 1, 8), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysH320TerminalLocalTime.setStatus('current')
if mibBuilder.loadTexts: sysH320TerminalLocalTime.setDescription('The local date and time of day.')
sysH320TerminalDiagnostics = MibScalar((1, 3, 6, 1, 3, 320, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noResults", 1), ("passed", 2), ("hardwareFault", 3), ("softwareFault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysH320TerminalDiagnostics.setStatus('current')
if mibBuilder.loadTexts: sysH320TerminalDiagnostics.setDescription('Indicates the results of the last diagnostic routine performed. noResults(1) No diagnostic has yet been performed, passed(2) the diagnostic has been passed, hardwareFault(3) Hardware fault was detected, softwareFault(4) Software fault was detected.')
sysH320TerminalStatus = MibScalar((1, 3, 6, 1, 3, 320, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("callSetup", 1), ("callinProgress", 2), ("callHangUp", 3), ("idle", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysH320TerminalStatus.setStatus('current')
if mibBuilder.loadTexts: sysH320TerminalStatus.setDescription('General status of the terminal')
sysH320TerminalIfType = MibScalar((1, 3, 6, 1, 3, 320, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysH320TerminalIfType.setStatus('current')
if mibBuilder.loadTexts: sysH320TerminalIfType.setDescription('The interface type on which this terminal can be called. The interface type identified by this value is the same type of as the ifType from Interface Table in RFC1213. It should only use ifTypes - ds1, e1, basicISDN, primaryISDN.')
configH320TerminalSiteName = MibScalar((1, 3, 6, 1, 3, 320, 3, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configH320TerminalSiteName.setStatus('current')
if mibBuilder.loadTexts: configH320TerminalSiteName.setDescription('Name of the site where the H320 terminal is located. For instance, conference room 1 in Austin, or New York, and so on. sysLocation provides the location information for the maintenance people and this object inform where the conference participants are.')
configH320TerminalVideoSystem = MibScalar((1, 3, 6, 1, 3, 320, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ntsc", 1), ("pal", 2), ("secam", 3), ("others", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configH320TerminalVideoSystem.setStatus('current')
if mibBuilder.loadTexts: configH320TerminalVideoSystem.setDescription('Video format standard used by the terminal')
configH320TerminalIPAddress = MibScalar((1, 3, 6, 1, 3, 320, 3, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configH320TerminalIPAddress.setStatus('current')
if mibBuilder.loadTexts: configH320TerminalIPAddress.setDescription('The IP address of the h.320 terminal.')
configH320ISDNSwitchType = MibScalar((1, 3, 6, 1, 3, 320, 3, 2, 4), IsdnSignalingProtocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configH320ISDNSwitchType.setStatus('current')
if mibBuilder.loadTexts: configH320ISDNSwitchType.setDescription('Type of ISDN switch interface to the h.320 terminal. Switch types are specified in ISDN-MIB. ')
configH320ISDNAddrNumber = MibScalar((1, 3, 6, 1, 3, 320, 3, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configH320ISDNAddrNumber.setStatus('current')
if mibBuilder.loadTexts: configH320ISDNAddrNumber.setDescription('The number of addresses that each terminal has.')
configISDNAddrTable = MibTable((1, 3, 6, 1, 3, 320, 3, 2, 6), )
if mibBuilder.loadTexts: configISDNAddrTable.setStatus('current')
if mibBuilder.loadTexts: configISDNAddrTable.setDescription('AN ISDN address table.')
configISDNAddrEntry = MibTableRow((1, 3, 6, 1, 3, 320, 3, 2, 6, 1), ).setIndexNames((0, "H320TERMINAL-MIB", "configH320AddrIndex"))
if mibBuilder.loadTexts: configISDNAddrEntry.setStatus('current')
if mibBuilder.loadTexts: configISDNAddrEntry.setDescription('AN ISDN address row. ')
configH320AddrIndex = MibTableColumn((1, 3, 6, 1, 3, 320, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: configH320AddrIndex.setStatus('current')
if mibBuilder.loadTexts: configH320AddrIndex.setDescription('A unique value for each ISDN address entry. the value ranges between 1 and the value of cionfigISDNAddrNumber. ')
configH320ISDNAddress = MibTableColumn((1, 3, 6, 1, 3, 320, 3, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configH320ISDNAddress.setStatus('current')
if mibBuilder.loadTexts: configH320ISDNAddress.setDescription('ISDN port address. ')
configH320ISDNSPID = MibTableColumn((1, 3, 6, 1, 3, 320, 3, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configH320ISDNSPID.setStatus('current')
if mibBuilder.loadTexts: configH320ISDNSPID.setDescription('ISDN port SPID. ')
h320CallSiteNumber = MibScalar((1, 3, 6, 1, 3, 320, 3, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h320CallSiteNumber.setStatus('current')
if mibBuilder.loadTexts: h320CallSiteNumber.setDescription('The number of site entries that this system contains.')
h320XferNextIndex = MibScalar((1, 3, 6, 1, 3, 320, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h320XferNextIndex.setStatus('current')
if mibBuilder.loadTexts: h320XferNextIndex.setDescription('Identifies the next value of h320SiteIndex to be used in a row creation attempt for the h320CallSiteTable. If new rows cannot be created, this object will have a value of 0.')
h320CallSiteTable = MibTable((1, 3, 6, 1, 3, 320, 3, 3, 3), )
if mibBuilder.loadTexts: h320CallSiteTable.setStatus('current')
if mibBuilder.loadTexts: h320CallSiteTable.setDescription('A list of video conferencing site entries. The total number of site entries is given by the value of h320CallsiteNumber.')
h320CallSiteEntry = MibTableRow((1, 3, 6, 1, 3, 320, 3, 3, 3, 1), ).setIndexNames((0, "H320TERMINAL-MIB", "h320SiteIndex"))
if mibBuilder.loadTexts: h320CallSiteEntry.setStatus('current')
if mibBuilder.loadTexts: h320CallSiteEntry.setDescription("A video conference site row. Rows are created by an SNMP SET request setting the value of h320SiteRowStatus to 'createandGo. Rows are deleted by an SNMP SET request setting the value of h320SiteRowStatus to 'destroy'.")
h320SiteIndex = MibTableColumn((1, 3, 6, 1, 3, 320, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: h320SiteIndex.setStatus('current')
if mibBuilder.loadTexts: h320SiteIndex.setDescription('A unique value for each video conference Site entry. The value ranges between 1 and the value of h320SiteNumber.')
h320SiteName = MibTableColumn((1, 3, 6, 1, 3, 320, 3, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h320SiteName.setStatus('current')
if mibBuilder.loadTexts: h320SiteName.setDescription('A textual string assigning a name to a video conference system.')
h320SiteIfType = MibTableColumn((1, 3, 6, 1, 3, 320, 3, 3, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h320SiteIfType.setStatus('current')
if mibBuilder.loadTexts: h320SiteIfType.setDescription('The interface type on which this site can be called. The interface type identified by this value is the same type of as the ifType from Interface Table in RFC1213. It should onlye use ifTypes - ds1, e1, basicISDN, primaryISDN.')
h320SiteLineRate = MibTableColumn((1, 3, 6, 1, 3, 320, 3, 3, 3, 1, 4), LineRates()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h320SiteLineRate.setStatus('current')
if mibBuilder.loadTexts: h320SiteLineRate.setDescription('The line rate that the terminal can be called.')
h320CallMode = MibTableColumn((1, 3, 6, 1, 3, 320, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manualConfig", 1), ("autoConfig", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h320CallMode.setStatus('current')
if mibBuilder.loadTexts: h320CallMode.setDescription('1 means the remote terminal supports the autoconfiguration. 2 means the manual configuration is required to call the remote terminal. In this case the, following audio, video and data mode shall be used for the manual configuration.')
h320VideoMode = MibTableColumn((1, 3, 6, 1, 3, 320, 3, 3, 3, 1, 6), VideoFormats()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h320VideoMode.setStatus('current')
if mibBuilder.loadTexts: h320VideoMode.setDescription('A video mode for manual configuration.')
h320AudioMode = MibTableColumn((1, 3, 6, 1, 3, 320, 3, 3, 3, 1, 7), AudioTypes()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h320AudioMode.setStatus('current')
if mibBuilder.loadTexts: h320AudioMode.setDescription('An audio mode for manual configuration.')
h320ISDNAddrNumber = MibTableColumn((1, 3, 6, 1, 3, 320, 3, 3, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h320ISDNAddrNumber.setStatus('current')
if mibBuilder.loadTexts: h320ISDNAddrNumber.setDescription('The number of ISDN addresses needed to make a call to the remote terminal.')
h320SiteRowStatus = MibTableColumn((1, 3, 6, 1, 3, 320, 3, 3, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h320SiteRowStatus.setStatus('current')
if mibBuilder.loadTexts: h320SiteRowStatus.setDescription("The row status of the entry. This object is required to create or delete rows administratively. An agent implementing this object is not required to support the values 'createAndWait' and 'notInService'.")
h320ISDNAddrTable = MibTable((1, 3, 6, 1, 3, 320, 3, 3, 4), )
if mibBuilder.loadTexts: h320ISDNAddrTable.setStatus('current')
if mibBuilder.loadTexts: h320ISDNAddrTable.setDescription('A list of ISDN addresses to call the remote site. This is an extended table of the base table h320CallSiteTable.')
h320ISDNAddrEntry = MibTableRow((1, 3, 6, 1, 3, 320, 3, 3, 4, 1), ).setIndexNames((0, "H320TERMINAL-MIB", "h320SiteIndex"), (0, "H320TERMINAL-MIB", "h320AddrIndex"))
if mibBuilder.loadTexts: h320ISDNAddrEntry.setStatus('current')
if mibBuilder.loadTexts: h320ISDNAddrEntry.setDescription("A video conference site row. Rows are created by an SNMP SET request setting the value of h320AddrRowStatus to 'createandGo. Rows are deleted by an SNMP SET request setting the value of h320AddrRowStatus to 'destroy'")
h320AddrIndex = MibTableColumn((1, 3, 6, 1, 3, 320, 3, 3, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: h320AddrIndex.setStatus('current')
if mibBuilder.loadTexts: h320AddrIndex.setDescription('A unique value for each ISDN address entry. The value ranges between 1 and the value of h320AddrNumberin the base table.')
h320ISDNAddress = MibTableColumn((1, 3, 6, 1, 3, 320, 3, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h320ISDNAddress.setStatus('current')
if mibBuilder.loadTexts: h320ISDNAddress.setDescription('A textual string assigning an address of the conference system.')
h320AddrRowStatus = MibTableColumn((1, 3, 6, 1, 3, 320, 3, 3, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h320AddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: h320AddrRowStatus.setDescription("The row status of the entry. This object is required to create or delete rows administratively. An agent implementing this object is not required to support the values 'createAndWait' and 'notInService'.")
controlH320TerminalAdmin = MibScalar((1, 3, 6, 1, 3, 320, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("run", 1), ("reset", 2), ("diagnose", 3), ("stop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlH320TerminalAdmin.setStatus('current')
if mibBuilder.loadTexts: controlH320TerminalAdmin.setDescription('The desired state of the H320 terminal. Setting the value if this object to these values will have the following actions: run(1) The H320 terminal will enter the run state, reset(2) The H320 terminal will reset, diagnose(3) Will activate the diagnostic routine, stop(4) Will halt the H320 terminal.')
controlH320TerminalCallSetUp = MibScalar((1, 3, 6, 1, 3, 320, 3, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlH320TerminalCallSetUp.setStatus('current')
if mibBuilder.loadTexts: controlH320TerminalCallSetUp.setDescription('Dial another video conference terminal. Set this value to the index of the site of the video conference site you want to dial in the Site Table in the h320CallSignalingMIB and the system will be dialed.')
controlH320TerminalCallHangup = MibScalar((1, 3, 6, 1, 3, 320, 3, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlH320TerminalCallHangup.setStatus('current')
if mibBuilder.loadTexts: controlH320TerminalCallHangup.setDescription('Hang up the video conference call in progress now.')
controlH320EnableLocalLoopback = MibScalar((1, 3, 6, 1, 3, 320, 3, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlH320EnableLocalLoopback.setStatus('current')
if mibBuilder.loadTexts: controlH320EnableLocalLoopback.setDescription('Enable or disable local loop back on a video conference system. Local loopbacks loop back the audio, video and data streams in a call. Once looped back, a new call will show up and the user can observe the audio/video/data rates to assure that these components are working properly.')
controlH320EnableRemoteLoopback = MibScalar((1, 3, 6, 1, 3, 320, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlH320EnableRemoteLoopback.setStatus('current')
if mibBuilder.loadTexts: controlH320EnableRemoteLoopback.setDescription('Enable or disable remote loop back on a video conference system. Remote loopbacks loop back the audio and video streams from the remote system in a call.. When the remote system calls in, a new call will show and the user can observe the audio/video/data rates to assure that these components are coming in properly from the remote system.')
h320TerminalMIBConfs = MibIdentifier((1, 3, 6, 1, 3, 320, 3, 5))
h320TerminalMIIBGroups = MibIdentifier((1, 3, 6, 1, 3, 320, 3, 5, 1))
h320TerminalMIBCompl = MibIdentifier((1, 3, 6, 1, 3, 320, 3, 5, 2))
h320TerminalDesrGroup = ObjectGroup((1, 3, 6, 1, 3, 320, 3, 5, 1, 1)).setObjects(("H320TERMINAL-MIB", "sysDescr"), ("H320TERMINAL-MIB", "sysContact"), ("H320TERMINAL-MIB", "syst35CountryCode"), ("H320TERMINAL-MIB", "syst35CountryCodeExtention"), ("H320TERMINAL-MIB", "syst35ManufacturerCode"), ("H320TERMINAL-MIB", "sysLocation"), ("H320TERMINAL-MIB", "sysH320TerminalUptime"), ("H320TERMINAL-MIB", "sysH320TerminalLocalTime"), ("H320TERMINAL-MIB", "sysH320TerminalDiagnostics"), ("H320TERMINAL-MIB", "sysH320TerminalStatus"), ("H320TERMINAL-MIB", "sysH320TerminalIfType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h320TerminalDesrGroup = h320TerminalDesrGroup.setStatus('current')
if mibBuilder.loadTexts: h320TerminalDesrGroup.setDescription('A collection of objects providing the description of the terminal')
h320TerminalConfgGroup = ObjectGroup((1, 3, 6, 1, 3, 320, 3, 5, 1, 2)).setObjects(("H320TERMINAL-MIB", "configH320TerminalSiteName"), ("H320TERMINAL-MIB", "configH320TerminalVideoSystem"), ("H320TERMINAL-MIB", "configH320TerminalIPAddress"), ("H320TERMINAL-MIB", "configH320ISDNSwitchType"), ("H320TERMINAL-MIB", "configH320ISDNAddrNumber"), ("H320TERMINAL-MIB", "configH320ISDNAddress"), ("H320TERMINAL-MIB", "configH320ISDNSPID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h320TerminalConfgGroup = h320TerminalConfgGroup.setStatus('current')
if mibBuilder.loadTexts: h320TerminalConfgGroup.setDescription('A collection of objects providing the ability to configure the terminal')
h320TerminalCallSitesGroup = ObjectGroup((1, 3, 6, 1, 3, 320, 3, 5, 1, 3)).setObjects(("H320TERMINAL-MIB", "h320CallSiteNumber"), ("H320TERMINAL-MIB", "h320XferNextIndex"), ("H320TERMINAL-MIB", "h320SiteName"), ("H320TERMINAL-MIB", "h320SiteIfType"), ("H320TERMINAL-MIB", "h320SiteLineRate"), ("H320TERMINAL-MIB", "h320CallMode"), ("H320TERMINAL-MIB", "h320VideoMode"), ("H320TERMINAL-MIB", "h320AudioMode"), ("H320TERMINAL-MIB", "h320ISDNAddrNumber"), ("H320TERMINAL-MIB", "h320SiteRowStatus"), ("H320TERMINAL-MIB", "h320ISDNAddress"), ("H320TERMINAL-MIB", "h320AddrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h320TerminalCallSitesGroup = h320TerminalCallSitesGroup.setStatus('current')
if mibBuilder.loadTexts: h320TerminalCallSitesGroup.setDescription('A collection of objects providing the information about the site the terminal can call')
h320TerminalControlGroup = ObjectGroup((1, 3, 6, 1, 3, 320, 3, 5, 1, 4)).setObjects(("H320TERMINAL-MIB", "controlH320TerminalAdmin"), ("H320TERMINAL-MIB", "controlH320TerminalCallSetUp"), ("H320TERMINAL-MIB", "controlH320TerminalCallHangup"), ("H320TERMINAL-MIB", "controlH320EnableLocalLoopback"), ("H320TERMINAL-MIB", "controlH320EnableRemoteLoopback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h320TerminalControlGroup = h320TerminalControlGroup.setStatus('current')
if mibBuilder.loadTexts: h320TerminalControlGroup.setDescription('A collection of objects providing the ability to invoke terminal functions')
h320TErminalCompliance = ModuleCompliance((1, 3, 6, 1, 3, 320, 3, 5, 2, 1)).setObjects(("H320TERMINAL-MIB", "h320TerminalDesrGroup"), ("H320TERMINAL-MIB", "h320TerminalConfgGroup"), ("H320TERMINAL-MIB", "h320TerminalCallSitesGroup"), ("H320TERMINAL-MIB", "h320TerminalControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h320TErminalCompliance = h320TErminalCompliance.setStatus('current')
if mibBuilder.loadTexts: h320TErminalCompliance.setDescription('The set of objects required for compliance')
mibBuilder.exportSymbols("H320TERMINAL-MIB", controlH320TerminalCallSetUp=controlH320TerminalCallSetUp, h320CallSiteNumber=h320CallSiteNumber, h320CallMode=h320CallMode, h320TerminalMIBConfs=h320TerminalMIBConfs, AudioTypes=AudioTypes, h320ISDNAddress=h320ISDNAddress, h320AddrIndex=h320AddrIndex, controlH320TerminalCallHangup=controlH320TerminalCallHangup, sysH320TerminalDiagnostics=sysH320TerminalDiagnostics, h320SiteRowStatus=h320SiteRowStatus, controlH320TerminalAdmin=controlH320TerminalAdmin, syst35ManufacturerCode=syst35ManufacturerCode, syst35CountryCode=syst35CountryCode, sysH320TerminalIfType=sysH320TerminalIfType, configISDNAddrTable=configISDNAddrTable, h320CallSiteEntry=h320CallSiteEntry, controlH320EnableLocalLoopback=controlH320EnableLocalLoopback, h320VideoMode=h320VideoMode, configISDNAddrEntry=configISDNAddrEntry, control=control, callSites=callSites, h320TerminalDesrGroup=h320TerminalDesrGroup, sysH320TerminalLocalTime=sysH320TerminalLocalTime, h320XferNextIndex=h320XferNextIndex, h320TerminalMIB=h320TerminalMIB, LineRates=LineRates, sysContact=sysContact, h320CallSiteTable=h320CallSiteTable, controlH320EnableRemoteLoopback=controlH320EnableRemoteLoopback, PYSNMP_MODULE_ID=h320TerminalMIB, h320TerminalCallSitesGroup=h320TerminalCallSitesGroup, configH320ISDNAddrNumber=configH320ISDNAddrNumber, configH320ISDNAddress=configH320ISDNAddress, sysDescr=sysDescr, configuration=configuration, configH320ISDNSwitchType=configH320ISDNSwitchType, h320AudioMode=h320AudioMode, h320AddrRowStatus=h320AddrRowStatus, configH320TerminalSiteName=configH320TerminalSiteName, h320SiteIndex=h320SiteIndex, h320SiteName=h320SiteName, h320SiteLineRate=h320SiteLineRate, configH320ISDNSPID=configH320ISDNSPID, h320ISDNAddrEntry=h320ISDNAddrEntry, h320TerminalMIIBGroups=h320TerminalMIIBGroups, h320TerminalConfgGroup=h320TerminalConfgGroup, configH320AddrIndex=configH320AddrIndex, h320TerminalControlGroup=h320TerminalControlGroup, configH320TerminalVideoSystem=configH320TerminalVideoSystem, h320SiteIfType=h320SiteIfType, sysH320TerminalUptime=sysH320TerminalUptime, h320TerminalMIBCompl=h320TerminalMIBCompl, sysLocation=sysLocation, syst35CountryCodeExtention=syst35CountryCodeExtention, system=system, VideoFormats=VideoFormats, h320ISDNAddrNumber=h320ISDNAddrNumber, h320TErminalCompliance=h320TErminalCompliance, sysH320TerminalStatus=sysH320TerminalStatus, configH320TerminalIPAddress=configH320TerminalIPAddress, h320ISDNAddrTable=h320ISDNAddrTable)
