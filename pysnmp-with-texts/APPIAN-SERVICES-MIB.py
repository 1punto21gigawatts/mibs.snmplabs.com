#
# PySNMP MIB module APPIAN-SERVICES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-SERVICES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acChassisRingId, acChassisCurrentTime = mibBuilder.importSymbols("APPIAN-CHASSIS-MIB", "acChassisRingId", "acChassisCurrentTime")
AcNodeId, AcOpStatus, acServices, AcSlotNumber, AcAdminStatus, AcPortNumber = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcNodeId", "AcOpStatus", "acServices", "AcSlotNumber", "AcAdminStatus", "AcPortNumber")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Bits, Gauge32, Counter32, ModuleIdentity, Unsigned32, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, IpAddress, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "Gauge32", "Counter32", "ModuleIdentity", "Unsigned32", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "IpAddress", "Integer32", "TimeTicks")
TextualConvention, DisplayString, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "TruthValue")
acServicesCommon = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1))
acServicesCommon.setRevisions(('1900-01-31 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acServicesCommon.setRevisionsDescriptions(('Engineering draft version, not for release.',))
if mibBuilder.loadTexts: acServicesCommon.setLastUpdated('0001310000Z')
if mibBuilder.loadTexts: acServicesCommon.setOrganization('Appian Communications, Inc.')
if mibBuilder.loadTexts: acServicesCommon.setContactInfo('Douglas Theriault')
if mibBuilder.loadTexts: acServicesCommon.setDescription('Appian Communications OSAP Services MIB contain the definitions for Internet Access (IAS) and Transparent LAN (TLS) services.')
class AcQueueWeights(TextualConvention, OctetString):
    description = "The weighted values control relative bandwidth for each queue of the four queues. Each byte represents the proportional weight out of 100 for a queue. The sum of these bytes must not exceed 100. For example, if 2 queues are used, and the relative weights (or priorities) are 90 and 10, then acQosQueueWeights should be set to '\\0x5A\\0x0A\\0x00\\0x00'. Another example, if we want a FIFO queueing, we would set acQosQueueWeights to '\\0x64\\0x00\\0x00\\0x00'."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class AcQueueBufferingCapacity(TextualConvention, OctetString):
    description = "The values control relative queue buffering capacity for each of the four queues. Each byte represents the proportional buffering capacity out of 100 for a queue. The sum of these bytes must not exceed 100. For example, if 2 queues are used, and the relative buffering capacities (or queue depths) are 90 and 10, then acQosQueueBufferingCapacity should be set to '\\0x5A\\0x0A\\0x00\\0x00'. Another example, if we want all the buffering capacity to be allocated to a best effort queue we would set acQosQueueBufferingCapacity to '\\0x64\\0x00\\0x00\\0x00'."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class AcClassMapping(TextualConvention, OctetString):
    description = 'This octet string defines a mapping between a field within a packet payload and a 2-bit internal queue number. The octet string is a list of queue numbers. Each octet contains a single 2-bit queue number. In this product, 6-bits are wasted in each octet. In the future we may support more queues per service in which case we will extend the bit field in each octet. When this map is used for 802.1p and MPLS, it must be exactly 8-octets in length. For IP TOS, it must be 256 octets in length.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

acServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1), )
if mibBuilder.loadTexts: acServiceTable.setStatus('current')
if mibBuilder.loadTexts: acServiceTable.setDescription("This table is the common thread of all services, regardless of service types, in other words, every service would have an entry in this table. A service is identified by a tuple of {node, slot, port, channel}. The {slot, port} pair identies the access port of a subscriber. The port can support multiple services, and each such service is identified by a 'service channel'. To create a service, a row should be created in this table. When the service type is set, a row is automatically 'created' in the appropriate service type specific table. For example, to create an IAS service, one first creates a row in this common table, and then set acServiceType to IAS (which triggers the automatic creation of an entry in the IAS service table), and then set the all necessary parameters. To remove a service, remove the row in this common table only.")
acServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1), ).setIndexNames((0, "APPIAN-SERVICES-MIB", "acServiceNodeId"), (0, "APPIAN-SERVICES-MIB", "acServiceSlot"), (0, "APPIAN-SERVICES-MIB", "acServicePort"), (0, "APPIAN-SERVICES-MIB", "acServiceChannel"))
if mibBuilder.loadTexts: acServiceEntry.setStatus('current')
if mibBuilder.loadTexts: acServiceEntry.setDescription('A row equates to a service defined on a particular port and channel.')
acServiceNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServiceNodeId.setStatus('current')
if mibBuilder.loadTexts: acServiceNodeId.setDescription('A unique node identification number assigned by the EMS to uniquely identify a node within an Appian Ring.')
acServiceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServiceSlot.setStatus('current')
if mibBuilder.loadTexts: acServiceSlot.setDescription('The slot number within the chassis where the physical i/o port can be found for customer access.')
acServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServicePort.setStatus('current')
if mibBuilder.loadTexts: acServicePort.setDescription('The port number ranging from (1..8) where the physical i/o connection for this customer service can be found.')
acServiceChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServiceChannel.setStatus('current')
if mibBuilder.loadTexts: acServiceChannel.setDescription('The service channel amongst the potentially multiple service channels on a data access port. If only one service channel is provisioned, this channel number should be a value of 1. If multiple service channels are provisioned, the channel number should follow the ranges described below. If multiple service channels are provisioned,each channel maps to a unique 802.1q VLAN tag used to effectively channalize the Ethernet. 4 service channels (1..4) are supported on the 100baseX Ethernet access board. 255 service channels (1..255) are supported on the Gigabit, 1000baseX, Ethernet access board.')
acServiceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 5), AcAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acServiceAdminStatus.setDescription('The administrative or desired status.')
acServiceOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 6), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceOpStatus.setStatus('current')
if mibBuilder.loadTexts: acServiceOpStatus.setDescription('The operational or actual status.')
acServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("ias", 1), ("tls", 2))).clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceType.setStatus('current')
if mibBuilder.loadTexts: acServiceType.setDescription('Specifies the service type. Each row in this table has an associated row in one of the service type specific tables. This object indicates which table, IAS or TLS, has a row at the same index containing additional parameters associated with this service.')
acServiceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceVlanId.setStatus('current')
if mibBuilder.loadTexts: acServiceVlanId.setDescription('The VLAN ID attribute is only used when the enetEnableMultiService flag has been set to true. The VLAN ID is a 12-bit VLAN ID and is used when the OSAP is processing packets to differentiate between the four service channels. This object must set if an access port supports multiple services. VLAN ID is a 12-bit value and therefore the value range is 0 to 4095. However value 0 is not a VLAN ID per se, but rather a value indicating VLAN tagging is not used.')
acServiceTrunkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceTrunkNumber.setStatus('current')
if mibBuilder.loadTexts: acServiceTrunkNumber.setDescription('Identifies the trunk over which this access service is to be carried onto the network. Maps to a row in the trunk table.')
acServiceQosTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 10), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceQosTemplate.setStatus('current')
if mibBuilder.loadTexts: acServiceQosTemplate.setDescription('This object specifies the QOS template to use. A QOS template dictates the QOS model assigned to this subscriber service. If zero(0), no differentiation is done and packets flow through a single queue.')
acServiceGBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceGBR.setStatus('current')
if mibBuilder.loadTexts: acServiceGBR.setDescription("The guaranteed bit rate in 1-kpbs increments. On the access side of the service, It should not exceed the maximum bandwidth of the access port. On the network side, the sum of GBR's of all the services carried by a trunk should not exceed the trunk capacity. **NOADMINDOWN**")
acServiceMBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceMBR.setStatus('current')
if mibBuilder.loadTexts: acServiceMBR.setDescription('The maximum bit rate in 1-kbps increments. A service may burst up to this rate, but there is no guarantee to the data transmitted above the GBR. The MBR should not exceed the access port capacity nor the trunk capacity. **NOADMINDOWN**')
acServiceResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceResetStats.setStatus('current')
if mibBuilder.loadTexts: acServiceResetStats.setDescription('Setting this varible to TRUE causes all service statistics counters to reset. This variable always return FALSE as its value.')
acServiceUpstreamBuffCapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceUpstreamBuffCapWeight.setStatus('current')
if mibBuilder.loadTexts: acServiceUpstreamBuffCapWeight.setDescription('The weight associated with the upstream traffic on this service relating to buffering capacity. Upstream traffic is defined as traffic that enters the system from an access port and exits the system on a trunk. A value of 1 provides the least amount of buffering capacity while a value of 10 provides the most buffering capacity. This value is relative in that the number of buffers actually assigned to the upstream traffic depends on how many services share the buffer pool associated with this service.')
acServiceDownstreamBuffCapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceDownstreamBuffCapWeight.setStatus('current')
if mibBuilder.loadTexts: acServiceDownstreamBuffCapWeight.setDescription('The weight associated with the downstream traffic on this service relating to buffering capacity. Downstream traffic is defined as traffic that enters the system from a trunk and exits the system on an access port. A value of 1 provides the least amount of buffering capacity while a value of 10 provides the most buffering capacity. This value is relative in that the number of buffers actually assigned to the downstream traffic depends on how many services share the buffer pool associated with this service.')
acServiceLocalBuffCapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceLocalBuffCapWeight.setStatus('current')
if mibBuilder.loadTexts: acServiceLocalBuffCapWeight.setDescription('The weight associated with local traffic on this service relating to buffering capacity. Local traffic is defined as traffic which enters the system on an access port and exits the system on an access port. This value is therefore only relevant for transparent LAN services with multiple local access ports. This value is relative in that the number of buffers actually assigned to the local traffic depends on how many services share the buffer pool associated with this service.')
acServiceBufferPool = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acServiceBufferPool.setStatus('current')
if mibBuilder.loadTexts: acServiceBufferPool.setDescription('The buffer pool associated with this service. The default is 1 which indicates the default buffer pool will be used. The value 0 is not allowed and values greater than 1 are user defined buffer pools.')
acServiceStatTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4), )
if mibBuilder.loadTexts: acServiceStatTable.setStatus('current')
if mibBuilder.loadTexts: acServiceStatTable.setDescription('The service statistics table. Statistics is provided for each queue priority of a service. Consequently, the table is composed of node, slot, port, channel, queue.')
acServiceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1), ).setIndexNames((0, "APPIAN-SERVICES-MIB", "acServiceStatNodeId"), (0, "APPIAN-SERVICES-MIB", "acServiceStatSlot"), (0, "APPIAN-SERVICES-MIB", "acServiceStatPort"), (0, "APPIAN-SERVICES-MIB", "acServiceStatChannel"), (0, "APPIAN-SERVICES-MIB", "acServiceStatQueue"))
if mibBuilder.loadTexts: acServiceStatEntry.setStatus('current')
if mibBuilder.loadTexts: acServiceStatEntry.setDescription('A set of counters collected for a service queue priority.')
acServiceStatNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServiceStatNodeId.setStatus('current')
if mibBuilder.loadTexts: acServiceStatNodeId.setDescription('A unique node identification number assigned by the EMS to uniquely identify a node within an Appian Ring.')
acServiceStatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServiceStatSlot.setStatus('current')
if mibBuilder.loadTexts: acServiceStatSlot.setDescription('The slot number within the chassis where the physical i/o port can be found for customer access.')
acServiceStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServiceStatPort.setStatus('current')
if mibBuilder.loadTexts: acServiceStatPort.setDescription('The port number ranging from (1..8) where the physical i/o connection for this customer service can be found.')
acServiceStatChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServiceStatChannel.setStatus('current')
if mibBuilder.loadTexts: acServiceStatChannel.setDescription('The service queue is one of 4 queues where a service is provisioned. Currently each (data) access port supports 4 service queues, each of which can support a service. The first release of our Ethernet access card supports a max of 4 services/port. In the future this range may increase but will always be dependent upon the access card being provisioned .')
acServiceStatQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acServiceStatQueue.setStatus('current')
if mibBuilder.loadTexts: acServiceStatQueue.setDescription("The service queuing priority. Service statistics is collected for each service queuing priority. Current OSAP supports up to 4 priorities. If a service doesn't use a priority, the corresponding entry has 0s for all counters.")
acServiceStatUpstreamFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatUpstreamFrames.setStatus('current')
if mibBuilder.loadTexts: acServiceStatUpstreamFrames.setDescription('The number frames transported from the access port to the network.')
acServiceStatUpstreamBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatUpstreamBytes.setStatus('current')
if mibBuilder.loadTexts: acServiceStatUpstreamBytes.setDescription('The number bytes transported from the access port to the network.')
acServiceStatUpstreamDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatUpstreamDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: acServiceStatUpstreamDroppedFrames.setDescription('The number frames dropped in the direction of the access port to the network.')
acServiceStatUpstreamDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatUpstreamDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: acServiceStatUpstreamDroppedBytes.setDescription('The number bytes dropped in the direction of the access port to the network.')
acServiceStatUpstreamUnexpectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatUpstreamUnexpectedFrames.setStatus('current')
if mibBuilder.loadTexts: acServiceStatUpstreamUnexpectedFrames.setDescription('The number of frames that are unexpected. An example would a frame of wrong protocol type. Such frames are silently dropped but not counted in the dropped frames counter.')
acServiceStatDownstreamFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatDownstreamFrames.setStatus('current')
if mibBuilder.loadTexts: acServiceStatDownstreamFrames.setDescription('The number frames transported from the network to access port.')
acServiceStatDownstreamBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatDownstreamBytes.setStatus('current')
if mibBuilder.loadTexts: acServiceStatDownstreamBytes.setDescription('The number bytes transported from the network to the access port.')
acServiceStatDownstreamDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatDownstreamDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: acServiceStatDownstreamDroppedFrames.setDescription('The number frames dropped in the direction of the network to the access port.')
acServiceStatDownstreamDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatDownstreamDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: acServiceStatDownstreamDroppedBytes.setDescription('The number bytes dropped in the direction of the network to the access port.')
acServiceStatDownstreamUnexpectedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acServiceStatDownstreamUnexpectedFrames.setStatus('current')
if mibBuilder.loadTexts: acServiceStatDownstreamUnexpectedFrames.setDescription('The number of frames that are unexpected. An example would a frame of wrong protocol type. Such frames are silently dropped but not counted in the dropped frames counter.')
acIas = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2))
acIasTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1), )
if mibBuilder.loadTexts: acIasTable.setStatus('current')
if mibBuilder.loadTexts: acIasTable.setDescription('The Internet Access Service table.')
acIasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1), ).setIndexNames((0, "APPIAN-SERVICES-MIB", "acIasNodeId"), (0, "APPIAN-SERVICES-MIB", "acIasSlot"), (0, "APPIAN-SERVICES-MIB", "acIasPort"), (0, "APPIAN-SERVICES-MIB", "acIasChannel"))
if mibBuilder.loadTexts: acIasEntry.setStatus('current')
if mibBuilder.loadTexts: acIasEntry.setDescription('A row within the IAS provisioning table.')
acIasNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acIasNodeId.setStatus('current')
if mibBuilder.loadTexts: acIasNodeId.setDescription('The unique node identification number assigned by the EMS which identifies the node where the IAS service is being configured.')
acIasSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acIasSlot.setStatus('current')
if mibBuilder.loadTexts: acIasSlot.setDescription('The slot number where the physical data i/o port is located in the OSAP chassis, which will have the IAS service configured.')
acIasPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acIasPort.setStatus('current')
if mibBuilder.loadTexts: acIasPort.setDescription('The physical port number on the i/o slot where this customers data interface will reside.')
acIasChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acIasChannel.setStatus('current')
if mibBuilder.loadTexts: acIasChannel.setDescription('The service channel.')
acIasDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1022)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIasDlci.setStatus('current')
if mibBuilder.loadTexts: acIasDlci.setDescription('When an IAS service is carried over a FrameRelay trunk, this attribute dictates the frame relay circuit (DLCI) to be used for the service. When other types of trunks are used, this object has not meaning and has the value of 0.')
acIasRespondToArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIasRespondToArp.setStatus('current')
if mibBuilder.loadTexts: acIasRespondToArp.setDescription('Flag to indicate we should respond to ARP requests.')
acIasRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIasRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: acIasRemoteIpAddress.setDescription('The IP address of at the network side. The object is optional. If set, ARP requests from the user are responded if the target IP address matchs this object. If this is object is not set, all ARP requests from the user are responded. If this object is not set, it may be learned from the inverse ARP if the service is carried on a frame relay circuit.')
acIasCpeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIasCpeIpAddress.setStatus('current')
if mibBuilder.loadTexts: acIasCpeIpAddress.setDescription('The IP address of the CPE device. This object is optional and if not set, it will be learned by looking into traffic from the CPE device.')
acIasCpeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acIasCpeMacAddress.setStatus('current')
if mibBuilder.loadTexts: acIasCpeMacAddress.setDescription('The MAC Address of the CPE router.')
acIasCpeEncapsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("learning", 1), ("enet", 2), ("snap", 3))).clone('learning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIasCpeEncapsMode.setStatus('current')
if mibBuilder.loadTexts: acIasCpeEncapsMode.setDescription('The type of encapsulation used for packets destined for the CPE. unknown(0) - encapsulation mode is not set and is same as learning(1) mode. learning(1) - learn the encapsulation mode from the packets generated by the CPE. enet(2) - ethernet encapsulation. snap(3) - SNAP encaspualtion mode.')
acIasPerformInverseArp = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 2, 1, 1, 11), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acIasPerformInverseArp.setStatus('current')
if mibBuilder.loadTexts: acIasPerformInverseArp.setDescription('Flag to indicate whether to perform Inverse ARP request to learn the remote IP address. This is applicable if the service is carried on a frame relay circuit. **-DInitiate Inverse Arp**')
acTls = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3))
acTlsTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1), )
if mibBuilder.loadTexts: acTlsTable.setStatus('current')
if mibBuilder.loadTexts: acTlsTable.setDescription('The Transparent LAN Services table.')
acTlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1), ).setIndexNames((0, "APPIAN-SERVICES-MIB", "acTlsNodeId"), (0, "APPIAN-SERVICES-MIB", "acTlsSlot"), (0, "APPIAN-SERVICES-MIB", "acTlsPort"), (0, "APPIAN-SERVICES-MIB", "acTlsChannel"))
if mibBuilder.loadTexts: acTlsEntry.setStatus('current')
if mibBuilder.loadTexts: acTlsEntry.setDescription('A row in the TLS table.')
acTlsNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acTlsNodeId.setStatus('current')
if mibBuilder.loadTexts: acTlsNodeId.setDescription("The unique node number assigned by the EMS to uniquely identify this node within an Appian Ring of OSAP's which is configured for TLS service.")
acTlsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acTlsSlot.setStatus('current')
if mibBuilder.loadTexts: acTlsSlot.setDescription('The slot upon which the TLS service is being provisioned.')
acTlsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acTlsPort.setStatus('current')
if mibBuilder.loadTexts: acTlsPort.setDescription('The physical port number on the slot on which the TLS service is provisioned.')
acTlsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acTlsChannel.setStatus('current')
if mibBuilder.loadTexts: acTlsChannel.setDescription('The service channel on which this TLS service is provisioned.')
acTlsTlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTlsTlanId.setStatus('current')
if mibBuilder.loadTexts: acTlsTlanId.setDescription("Identifies the Transparent LAN on which this virtual port, subscriber port and channel, is participating. This is a 12-bit value and is assigned by the EMS to ensure it is global to all TLS services and TLS trunks which share any common OSAPs or L2 switches. Note: It is prudent to keep the TlanId unique within the carriers entire TLS service offering until the carrier starts another 'TLS service domain'. WARNING: TLAN ID of zero(0) is invalid. TlanId's 1..15 are reserved for managment access. TlanId's 16..4095 are legal values.")
acTlsServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTlsServiceId.setStatus('current')
if mibBuilder.loadTexts: acTlsServiceId.setDescription('An ID which is used within a TLS service to identify which service packets are associated with as they traverse the TLS trunks. Each Tls service, virtual port, configured needs an Id assigned to it. Each packet received on this virtual port, subscriber port and channel, is stamped with this value for its trip around a TLS trunk. These tags are assigned by the EMS and must be unique on a given TLS trunk. This value is a 10-bit number providing a range of 1k. Values 1..15 are reserved. Value 0 is used for TLS services that are not provisioned over a TLS trunk. These trunkless TLS services perform only local switching.')
acTlsPointToPointEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTlsPointToPointEnable.setStatus('current')
if mibBuilder.loadTexts: acTlsPointToPointEnable.setDescription('Flag to indicate whether or not the TLAN over which this Tls service is provisioned is a point to point TLAN. A point to point TLAN is a TLAN with two and only two Tls services, virtual ports.')
acTlsServiceIdSharingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 3, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acTlsServiceIdSharingEnable.setStatus('current')
if mibBuilder.loadTexts: acTlsServiceIdSharingEnable.setDescription('Flag to indicate whether or not the Tls Servive Id is shared between this service and other Tls Services provisioned on the same TLS trunk either on this OSAP or different OSAPs.')
acQosTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2), )
if mibBuilder.loadTexts: acQosTable.setStatus('current')
if mibBuilder.loadTexts: acQosTable.setDescription('Table of QOS templates.')
acQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2, 1), ).setIndexNames((0, "APPIAN-SERVICES-MIB", "acQosNodeId"), (0, "APPIAN-SERVICES-MIB", "acQosTemplateNumber"))
if mibBuilder.loadTexts: acQosEntry.setStatus('current')
if mibBuilder.loadTexts: acQosEntry.setDescription('A row in the QOS template table.')
acQosNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acQosNodeId.setStatus('current')
if mibBuilder.loadTexts: acQosNodeId.setDescription('A unique node identification number assigned by the EMS to uniquely identify a node within an Appian Ring.')
acQosTemplateNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acQosTemplateNumber.setStatus('current')
if mibBuilder.loadTexts: acQosTemplateNumber.setDescription('A number identifies a QOS template. Also used as the index into the QOS template table.')
acQosAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2, 1, 3), AcAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acQosAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acQosAdminStatus.setDescription('The administrative status.')
acQosTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acQosTemplateName.setStatus('current')
if mibBuilder.loadTexts: acQosTemplateName.setDescription('A textual string solely for easy identification of a template.')
acQosQueueWeights = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2, 1, 5), AcQueueWeights()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acQosQueueWeights.setStatus('current')
if mibBuilder.loadTexts: acQosQueueWeights.setDescription("The weighted values control relative bandwidth for each queue of the four queues. Each byte represents the proportional weight out of 100 for a queue. The sum of these bytes must equal to 100. For example, if 2 queues are used, and the relative weights (or priorities) are 90 and 10, then acQosQueueWeights should be set to '\\0x5A\\0x0A\\0x00\\0x00'.")
acQosClassMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acQosClassMapping.setStatus('current')
if mibBuilder.loadTexts: acQosClassMapping.setDescription('The object identifies a row in the classification mapping table.')
acQosQueueBuffCaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 2, 1, 7), AcQueueBufferingCapacity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acQosQueueBuffCaps.setStatus('current')
if mibBuilder.loadTexts: acQosQueueBuffCaps.setDescription("These values control the relative buffering capacities of the four queues. Each byte represents the proportional buffering capacity out of 100 for a queue. The sum of these bytes must equal to 100. For example, if 2 queues are used, and the buffering capacities are 90 and 10, then acQosQueueBuffCaps should be set to '\\0x5A\\0x0A\\0x00\\0x00'.")
acClassMapTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 3), )
if mibBuilder.loadTexts: acClassMapTable.setStatus('current')
if mibBuilder.loadTexts: acClassMapTable.setDescription('Classification Map table.')
acClassMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 3, 1), ).setIndexNames((0, "APPIAN-SERVICES-MIB", "acClassMapNumber"))
if mibBuilder.loadTexts: acClassMapEntry.setStatus('current')
if mibBuilder.loadTexts: acClassMapEntry.setDescription('A row in the class map provisioning table.')
acClassMapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acClassMapNumber.setStatus('current')
if mibBuilder.loadTexts: acClassMapNumber.setDescription('A number to identify a classification mapping. There can be at most four(4) rows for IP TOS based classification, four(4) additional rows for MPLS experimental bits based classfication, and four(4) additional rows for IEEE 802.1p based calssification. This table can have at most 12 rows for this version of the Ethernet access board.')
acClassMapAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 3, 1, 2), AcAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acClassMapAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acClassMapAdminStatus.setDescription('The administrative status.')
acClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acClassMapName.setStatus('current')
if mibBuilder.loadTexts: acClassMapName.setDescription('A textual string for easy naming of the classification mapping.')
acClassMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("iptos", 1), ("mpls", 2), ("dot1p", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acClassMapType.setStatus('current')
if mibBuilder.loadTexts: acClassMapType.setDescription('The type of classification used. This parameter specifies what fields in the packets are to be used for classification. This in turn dictates the width of the mapping used in acClassMapMapping.')
acClassMapMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 8, 1, 3, 1, 5), AcClassMapping()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acClassMapMapping.setStatus('current')
if mibBuilder.loadTexts: acClassMapMapping.setDescription('This octet string defines a mapping between a field within a packet payload and a 2-bit internal queue number. The octet string is a list of queue numbers. Each octet contains a single 2-bit queue number. In this product, 6-bits are wasted in each octet. In the future we may support more queues per service in which case we will extend the bit field in each octet. When this map is used for 802.1p and MPLS, it must be exactly 8-octets in length. For IP TOS, it must be 64-octets in length.')
acServiceTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 8, 0))
acServiceUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 8, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SERVICES-MIB", "acServiceNodeId"), ("APPIAN-SERVICES-MIB", "acServiceSlot"), ("APPIAN-SERVICES-MIB", "acServicePort"), ("APPIAN-SERVICES-MIB", "acServiceChannel"), ("APPIAN-SERVICES-MIB", "acServiceType"))
if mibBuilder.loadTexts: acServiceUpTrap.setStatus('current')
if mibBuilder.loadTexts: acServiceUpTrap.setDescription('This trap indicates a service has become active.')
acServiceDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 8, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-SERVICES-MIB", "acServiceNodeId"), ("APPIAN-SERVICES-MIB", "acServiceSlot"), ("APPIAN-SERVICES-MIB", "acServicePort"), ("APPIAN-SERVICES-MIB", "acServiceChannel"), ("APPIAN-SERVICES-MIB", "acServiceType"))
if mibBuilder.loadTexts: acServiceDownTrap.setStatus('current')
if mibBuilder.loadTexts: acServiceDownTrap.setDescription('This trap indicates a service has become deactivated. The detailed code indicates the reason why')
mibBuilder.exportSymbols("APPIAN-SERVICES-MIB", acTlsTlanId=acTlsTlanId, acServicesCommon=acServicesCommon, acServicePort=acServicePort, acTls=acTls, acClassMapEntry=acClassMapEntry, acTlsChannel=acTlsChannel, acServiceStatTable=acServiceStatTable, acServiceStatSlot=acServiceStatSlot, acServiceNodeId=acServiceNodeId, acClassMapNumber=acClassMapNumber, acServiceQosTemplate=acServiceQosTemplate, acServiceGBR=acServiceGBR, acServiceVlanId=acServiceVlanId, acTlsNodeId=acTlsNodeId, acServiceStatDownstreamDroppedFrames=acServiceStatDownstreamDroppedFrames, acQosClassMapping=acQosClassMapping, acClassMapAdminStatus=acClassMapAdminStatus, acIasTable=acIasTable, acIasPerformInverseArp=acIasPerformInverseArp, acServiceResetStats=acServiceResetStats, acIasSlot=acIasSlot, acServiceStatUpstreamDroppedFrames=acServiceStatUpstreamDroppedFrames, acTlsServiceIdSharingEnable=acTlsServiceIdSharingEnable, acServiceDownTrap=acServiceDownTrap, acClassMapType=acClassMapType, acServiceUpstreamBuffCapWeight=acServiceUpstreamBuffCapWeight, acServiceStatDownstreamFrames=acServiceStatDownstreamFrames, acServiceStatEntry=acServiceStatEntry, acIasNodeId=acIasNodeId, acClassMapTable=acClassMapTable, acIasChannel=acIasChannel, acClassMapMapping=acClassMapMapping, acClassMapName=acClassMapName, acIasDlci=acIasDlci, acServiceStatQueue=acServiceStatQueue, AcClassMapping=AcClassMapping, acServiceStatUpstreamBytes=acServiceStatUpstreamBytes, acServiceStatChannel=acServiceStatChannel, acServiceDownstreamBuffCapWeight=acServiceDownstreamBuffCapWeight, acServiceStatUpstreamUnexpectedFrames=acServiceStatUpstreamUnexpectedFrames, AcQueueBufferingCapacity=AcQueueBufferingCapacity, acTlsTable=acTlsTable, acQosNodeId=acQosNodeId, acIasCpeEncapsMode=acIasCpeEncapsMode, acIasCpeIpAddress=acIasCpeIpAddress, acTlsPointToPointEnable=acTlsPointToPointEnable, acTlsPort=acTlsPort, acIasRespondToArp=acIasRespondToArp, acServiceUpTrap=acServiceUpTrap, acIasEntry=acIasEntry, acIasCpeMacAddress=acIasCpeMacAddress, acTlsSlot=acTlsSlot, acServiceStatUpstreamDroppedBytes=acServiceStatUpstreamDroppedBytes, acTlsEntry=acTlsEntry, acQosTemplateName=acQosTemplateName, acQosTemplateNumber=acQosTemplateNumber, PYSNMP_MODULE_ID=acServicesCommon, acServiceChannel=acServiceChannel, acServiceStatPort=acServiceStatPort, acServiceLocalBuffCapWeight=acServiceLocalBuffCapWeight, acServiceStatUpstreamFrames=acServiceStatUpstreamFrames, acServiceStatDownstreamUnexpectedFrames=acServiceStatDownstreamUnexpectedFrames, acServiceEntry=acServiceEntry, acServiceStatDownstreamBytes=acServiceStatDownstreamBytes, acServiceStatNodeId=acServiceStatNodeId, acQosEntry=acQosEntry, AcQueueWeights=AcQueueWeights, acServiceBufferPool=acServiceBufferPool, acServiceTrunkNumber=acServiceTrunkNumber, acQosAdminStatus=acQosAdminStatus, acQosQueueWeights=acQosQueueWeights, acServiceSlot=acServiceSlot, acServiceTable=acServiceTable, acTlsServiceId=acTlsServiceId, acServiceAdminStatus=acServiceAdminStatus, acIasRemoteIpAddress=acIasRemoteIpAddress, acServiceType=acServiceType, acServiceTraps=acServiceTraps, acIasPort=acIasPort, acServiceOpStatus=acServiceOpStatus, acServiceStatDownstreamDroppedBytes=acServiceStatDownstreamDroppedBytes, acIas=acIas, acQosTable=acQosTable, acQosQueueBuffCaps=acQosQueueBuffCaps, acServiceMBR=acServiceMBR)
