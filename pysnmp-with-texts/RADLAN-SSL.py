#
# PySNMP MIB module RADLAN-SSL (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-SSL
# Produced by pysmi-0.3.4 at Wed May  1 14:49:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
RowStatus, TruthValue = mibBuilder.importSymbols("RADLAN-SNMPv2", "RowStatus", "TruthValue")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter32, MibIdentifier, Integer32, Bits, iso, IpAddress, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "MibIdentifier", "Integer32", "Bits", "iso", "IpAddress", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
DisplayString, = mibBuilder.importSymbols("SNMPv2-TC-v1", "DisplayString")
rlSsl = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 100))
rlSsl.setRevisions(('2003-09-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlSsl.setRevisionsDescriptions(('Added this MODULE-IDENTITY clause.',))
if mibBuilder.loadTexts: rlSsl.setLastUpdated('200309210000Z')
if mibBuilder.loadTexts: rlSsl.setOrganization('Radlan Computer Communications Ltd.')
if mibBuilder.loadTexts: rlSsl.setContactInfo('radlan.com')
if mibBuilder.loadTexts: rlSsl.setDescription('The private MIB module definition for SSL.')
rlSslCertificateGenerationTable = MibTable((1, 3, 6, 1, 4, 1, 89, 100, 1), )
if mibBuilder.loadTexts: rlSslCertificateGenerationTable.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateGenerationTable.setDescription('This table is used for : 1. generating keys and self signed certificate - saved in flash and RAM (not in configuration file) 2. generating certificate requests - saved in RAM, can be read by rlSslCertificateExportTable 3. generating self signed certificate - saved in flash and RAM (not in configuraion file) By setting rlSslCertificateGenerationAction to the appropriate value this action takes place. The other fields of this table are used for each of this actions')
rlSslCertificateGenerationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 100, 1, 1), ).setIndexNames((0, "RADLAN-SSL", "rlSslCertificateGenerationIndex"))
if mibBuilder.loadTexts: rlSslCertificateGenerationEntry.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateGenerationEntry.setDescription(' The row definition for this table.')
rlSslCertificateGenerationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateGenerationIndex.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateGenerationIndex.setDescription('This index is always set to 1 no matter for which certificate or certificate request the action refers to.')
rlSslCertificateGenerationId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateGenerationId.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateGenerationId.setDescription('The device can hold a number of keys/certificates/certificate requests. These certificates are always numbered from 1 to N (maximum number of certificates in device). This field decides to which keys/certificates/certificate requests the action refers.')
rlSslCertificateGenerationCountryName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateGenerationCountryName.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateGenerationCountryName.setDescription('Value of country name field that will appear when a new certificate request or self signed certificate is generated.')
rlSslCertificateGenerationStateOrProvinceName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateGenerationStateOrProvinceName.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateGenerationStateOrProvinceName.setDescription('Value of state or province name field that will appear when a new certificate or self signed certificate is generated.')
rlSslCertificateGenerationLocalityName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateGenerationLocalityName.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateGenerationLocalityName.setDescription('Value of locality field that will appear when a new certificate or self signed certificate is generated.')
rlSslCertificateGenerationOrganizationName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateGenerationOrganizationName.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateGenerationOrganizationName.setDescription('Value of organization field that will appear when a new certificate or self signed certificate is generated.')
rlSslCertificateGenerationOrganizationUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateGenerationOrganizationUnitName.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateGenerationOrganizationUnitName.setDescription('Value of organization field that will appear when a new certificate or self signed certificate is generated.')
rlSslCertificateGenerationCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateGenerationCommonName.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateGenerationCommonName.setDescription('Value of common name field that will appear when a new certificate or self signed certificate is generated.')
rlSslCertificateGenerationValidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateGenerationValidDays.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateGenerationValidDays.setDescription("When generating self signed certificate this field sets the valid fields. 'Valid from' is current GMT and 'valid to' current GMT + the value of this field.")
rlSslCertificateGenerationRsaKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateGenerationRsaKeyLength.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateGenerationRsaKeyLength.setDescription('Setting the RSA key size that will be created when a new key is generated - generateRsaKeyAndSelfSignedCertificate')
rlSslCertificateGenerationPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateGenerationPassphrase.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateGenerationPassphrase.setDescription('When a RSA key is generated (generateRsaKeyAndSelfSignedCertificate) this passphrase is saved in flash and when the time comes and the certificate and the key are exported in PKCS12 format this passphrase is used to encrypt it. If the passphrase is empty the key and certificate can not be exported. There is no method of obtaining this passphrase once a key was generated.')
rlSslCertificateGenerationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("generateRsaKeyAndSelfSignedCertificate", 1), ("generateSelfSignedCertificate", 2), ("generatePkcs12", 3), ("generateCertificateRequest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateGenerationAction.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateGenerationAction.setDescription('Setting to a regenerateCertificate causes a new certificate to be generated and to be used for all new sessions.')
rlSslCertificateExportTable = MibTable((1, 3, 6, 1, 4, 1, 89, 100, 2), )
if mibBuilder.loadTexts: rlSslCertificateExportTable.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateExportTable.setDescription('This table is used for viewing saved data from RAM and flash.')
rlSslCertificateExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 100, 2, 1), ).setIndexNames((0, "RADLAN-SSL", "rlSslCertificateExportId"), (0, "RADLAN-SSL", "rlSslCertificateExportType"), (0, "RADLAN-SSL", "rlSslCertificateExportFragmentId"))
if mibBuilder.loadTexts: rlSslCertificateExportEntry.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateExportEntry.setDescription(' The row definition for this table.')
rlSslCertificateExportId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSslCertificateExportId.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateExportId.setDescription('Identifies the index of this certficate / certificate request the table holds.')
rlSslCertificateExportType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("certificateRequestPemFormat", 1), ("certificatePemFormat", 2), ("certificateOpenSslFormat", 3), ("certificateAndKeyPkcs12", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSslCertificateExportType.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateExportType.setDescription('Identifies the type of data the current entry shows.')
rlSslCertificateExportFragmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSslCertificateExportFragmentId.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateExportFragmentId.setDescription('Identifies the index of this fragment in the certificate request.')
rlSslCertificateExportFragmentText = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSslCertificateExportFragmentText.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateExportFragmentText.setDescription('A part of the readable text entry for the certificate request.')
rlSslCertificateSave = MibScalar((1, 3, 6, 1, 4, 1, 89, 100, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateSave.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateSave.setDescription('Saves data from rlSslCertificateImportTable to RAM and flash. When an external certificate should be copied to the device first we copy it to rlSslCertificateImportTable and then this scalar is set to the certificate id that we want to save - 1. All entries in rlSslCertificateImportTable that have this id and their format is equal to the current value of rlSslCertificateSaveFormat are concatenated. 2. If the imported certificate format is .. - section 1 result is validated against the key with the same index. If validation fails for any reason - the certificate is not saved and the setting this scalar fails. 3. If the imported certificate format is PKCS12 - section1 result is decrypted using rlSslImportedPKCS12CertificatePassphrase current value. If decryption fails for any reason the PKCS12 certificate and key are not saved to FLASH and setting this scalar fails.')
rlSslCertificateSaveFormat = MibScalar((1, 3, 6, 1, 4, 1, 89, 100, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("x509", 1), ("pkcs12", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateSaveFormat.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateSaveFormat.setDescription('.')
rlSslImportedPKCS12CertificatePassphrase = MibScalar((1, 3, 6, 1, 4, 1, 89, 100, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslImportedPKCS12CertificatePassphrase.setStatus('current')
if mibBuilder.loadTexts: rlSslImportedPKCS12CertificatePassphrase.setDescription('.')
rlSslCertificateImportTable = MibTable((1, 3, 6, 1, 4, 1, 89, 100, 6), )
if mibBuilder.loadTexts: rlSslCertificateImportTable.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateImportTable.setDescription('This table is used for copying an external certificate to the device - see rlSslCertificateSave')
rlSslCertificateImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 100, 6, 1), ).setIndexNames((0, "RADLAN-SSL", "rlSslCertificateImportId"), (0, "RADLAN-SSL", "rlSslCertificateImportFormat"), (0, "RADLAN-SSL", "rlSslCertificateImportFragmentId"))
if mibBuilder.loadTexts: rlSslCertificateImportEntry.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateImportEntry.setDescription(' The row definition for this table.')
rlSslCertificateImportId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 6, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateImportId.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateImportId.setDescription('The certificate ID.')
rlSslCertificateImportFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("x509", 1), ("pkcs12", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateImportFormat.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateImportFormat.setDescription('.')
rlSslCertificateImportFragmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateImportFragmentId.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateImportFragmentId.setDescription('Identifies the index of this fragment in the certificate.')
rlSslCertificateImportFragmentText = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 6, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateImportFragmentText.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateImportFragmentText.setDescription('A part of the readable text entry for the certificate.')
rlSslCertificateImportFragmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 100, 6, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSslCertificateImportFragmentStatus.setStatus('current')
if mibBuilder.loadTexts: rlSslCertificateImportFragmentStatus.setDescription('')
mibBuilder.exportSymbols("RADLAN-SSL", rlSslCertificateGenerationId=rlSslCertificateGenerationId, rlSslCertificateImportFormat=rlSslCertificateImportFormat, rlSsl=rlSsl, rlSslCertificateGenerationOrganizationName=rlSslCertificateGenerationOrganizationName, rlSslCertificateExportTable=rlSslCertificateExportTable, rlSslCertificateExportType=rlSslCertificateExportType, rlSslCertificateExportFragmentId=rlSslCertificateExportFragmentId, rlSslCertificateGenerationTable=rlSslCertificateGenerationTable, rlSslCertificateGenerationStateOrProvinceName=rlSslCertificateGenerationStateOrProvinceName, rlSslImportedPKCS12CertificatePassphrase=rlSslImportedPKCS12CertificatePassphrase, rlSslCertificateImportEntry=rlSslCertificateImportEntry, rlSslCertificateGenerationAction=rlSslCertificateGenerationAction, rlSslCertificateExportFragmentText=rlSslCertificateExportFragmentText, rlSslCertificateGenerationRsaKeyLength=rlSslCertificateGenerationRsaKeyLength, rlSslCertificateSave=rlSslCertificateSave, rlSslCertificateGenerationOrganizationUnitName=rlSslCertificateGenerationOrganizationUnitName, rlSslCertificateExportEntry=rlSslCertificateExportEntry, rlSslCertificateImportId=rlSslCertificateImportId, rlSslCertificateSaveFormat=rlSslCertificateSaveFormat, rlSslCertificateExportId=rlSslCertificateExportId, rlSslCertificateGenerationPassphrase=rlSslCertificateGenerationPassphrase, rlSslCertificateGenerationLocalityName=rlSslCertificateGenerationLocalityName, rlSslCertificateImportFragmentText=rlSslCertificateImportFragmentText, rlSslCertificateGenerationValidDays=rlSslCertificateGenerationValidDays, PYSNMP_MODULE_ID=rlSsl, rlSslCertificateImportTable=rlSslCertificateImportTable, rlSslCertificateGenerationCommonName=rlSslCertificateGenerationCommonName, rlSslCertificateImportFragmentId=rlSslCertificateImportFragmentId, rlSslCertificateGenerationEntry=rlSslCertificateGenerationEntry, rlSslCertificateGenerationCountryName=rlSslCertificateGenerationCountryName, rlSslCertificateImportFragmentStatus=rlSslCertificateImportFragmentStatus, rlSslCertificateGenerationIndex=rlSslCertificateGenerationIndex)
