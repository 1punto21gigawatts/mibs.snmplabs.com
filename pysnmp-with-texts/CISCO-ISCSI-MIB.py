#
# PySNMP MIB module CISCO-ISCSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ISCSI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:02:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, Gauge32, MibIdentifier, TimeTicks, ModuleIdentity, Bits, Counter64, Unsigned32, ObjectIdentity, iso, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "MibIdentifier", "TimeTicks", "ModuleIdentity", "Bits", "Counter64", "Unsigned32", "ObjectIdentity", "iso", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TextualConvention, DisplayString, TimeStamp, TruthValue, RowStatus, AutonomousType, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp", "TruthValue", "RowStatus", "AutonomousType", "RowPointer")
ciscoIscsiModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 94))
ciscoIscsiModule.setRevisions(('2002-10-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIscsiModule.setRevisionsDescriptions(('Initial revision published of this MIB module.',))
if mibBuilder.loadTexts: ciscoIscsiModule.setLastUpdated('200210050000Z')
if mibBuilder.loadTexts: ciscoIscsiModule.setOrganization('IETF IPS Working Group')
if mibBuilder.loadTexts: ciscoIscsiModule.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoIscsiModule.setDescription('The iSCSI Protocol MIB module.')
cIscsiObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 1))
cIscsiNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 2))
cIscsiConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 3))
class CIscsiTransportProtocols(TextualConvention, Unsigned32):
    reference = 'RFC791, RFC1700 The presently known, officially delegated numbers can be found at: http://www.iana.org/assignments/protocol-numbers'
    description = 'This data type is used to define the transport protocols that will carry iSCSI PDUs.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 255)

class CIscsiDigestMethod(TextualConvention, Integer32):
    description = 'This data type represents the methods possible for digest negotiation. none - a placeholder for a secondary digest method that means only the primary method can be used. other - a digest method other than those defined below; noDigest - does not support digests (will operate without a digest (NOTE: implementations MUST support digests to be compliant with the iSCSI RFC); CRC32c - require a CRC32C digest.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("other", 2), ("noDigest", 3), ("crc32c", 4))

cIscsiDescriptors = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 1))
cIscsiHeaderIntegrityTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 1, 1))
cIscsiHdrIntegrityNone = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 1, 1, 1))
if mibBuilder.loadTexts: cIscsiHdrIntegrityNone.setStatus('current')
if mibBuilder.loadTexts: cIscsiHdrIntegrityNone.setDescription('The authoritative identifier when no integrity scheme (for either the header or data) is being used.')
if mibBuilder.loadTexts: cIscsiHdrIntegrityNone.setReference('iSCSI Protocol Specification.')
cIscsiHdrIntegrityCrc32c = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 1, 1, 2))
if mibBuilder.loadTexts: cIscsiHdrIntegrityCrc32c.setStatus('current')
if mibBuilder.loadTexts: cIscsiHdrIntegrityCrc32c.setDescription('The authoritative identifier when the integrity scheme (for either the header or data) is CRC-32c.')
if mibBuilder.loadTexts: cIscsiHdrIntegrityCrc32c.setReference('iSCSI Protocol Specification.')
cIscsiDataIntegrityTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 1, 2))
cIscsiDataIntegrityNone = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 1, 2, 1))
if mibBuilder.loadTexts: cIscsiDataIntegrityNone.setStatus('current')
if mibBuilder.loadTexts: cIscsiDataIntegrityNone.setDescription('The authoritative identifier when no integrity scheme (for either the header or data) is being used.')
if mibBuilder.loadTexts: cIscsiDataIntegrityNone.setReference('iSCSI Protocol Specification.')
cIscsiDataIntegrityCrc32c = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 1, 2, 2))
if mibBuilder.loadTexts: cIscsiDataIntegrityCrc32c.setStatus('current')
if mibBuilder.loadTexts: cIscsiDataIntegrityCrc32c.setDescription('The authoritative identifier when the integrity scheme (for either the header or data) is CRC-32c.')
if mibBuilder.loadTexts: cIscsiDataIntegrityCrc32c.setReference('iSCSI Protocol Specification.')
cIscsiInstance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2))
cIscsiInstanceAttributesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 1), )
if mibBuilder.loadTexts: cIscsiInstanceAttributesTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstanceAttributesTable.setDescription('A list of iSCSI instances present on the system.')
cIscsiInstanceAttributesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-ISCSI-MIB", "cIscsiInstIndex"))
if mibBuilder.loadTexts: cIscsiInstanceAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstanceAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular iSCSI instance.')
cIscsiInstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cIscsiInstIndex.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstIndex.setDescription('An arbitrary integer used to uniquely identify a particular ISCSI instance.')
cIscsiInstDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiInstDescr.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstDescr.setDescription('An octet string, determined by the implementation to describe the iSCSI instance. When only a single instance is present, this object may be set to the zero-length string; with multiple iSCSI instances, it may be used in an implementation-dependent manner to describe the purpose of the respective instance.')
cIscsiInstVersionMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiInstVersionMin.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstVersionMin.setDescription('Minimum version number of the iSCSI specification supported by this instance.')
cIscsiInstVersionMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiInstVersionMax.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstVersionMax.setDescription('Maximum version number of the iSCSI specification supported by this instance.')
cIscsiInstVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiInstVendorID.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstVendorID.setDescription('An octet string describing the manufacturer of the implementation of this instance.')
cIscsiInstVendorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiInstVendorVersion.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstVendorVersion.setDescription('An octet string set by the manufacturer describing the version of the implementation of this instance. The format of this string is determined solely by the manufacturer, and is for informational purposes only. It is unrelated to the iSCSI specification version numbers.')
cIscsiInstPortalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('transport endpoints').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiInstPortalNumber.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstPortalNumber.setDescription('The number of rows in the cIscsiPortalAttributesTable which are currently associated with this iSCSI instance.')
cIscsiInstNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('Internet Network Addresses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiInstNodeNumber.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstNodeNumber.setDescription('The number of rows in the cIscsiNodeAttributesTable which are currently associated with this iSCSI instance.')
cIscsiInstSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiInstSessionNumber.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstSessionNumber.setDescription('The number of rows in the cIscsiSessionAttributesTable which are currently associated with this iSCSI instance.')
cIscsiInstSsnFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 1, 1, 10), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiInstSsnFailures.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstSsnFailures.setDescription('This object counts the number of times a session belonging to this instance has been failed.')
cIscsiInstLastSsnFailureType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 1, 1, 11), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiInstLastSsnFailureType.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstLastSsnFailureType.setDescription('The counter object in the cIscsiInstSsnErrorStatsTable that was incremented when the last session failure occurred. If the reason for failure is not found in the cIscsiInstSsnErrorStatsTable, the value { 0.0 } is used instead.')
cIscsiInstLastSsnRmtNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 1, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiInstLastSsnRmtNodeName.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstLastSsnRmtNodeName.setDescription('An octet string describing the name of the remote node from the failed session.')
cIscsiInstanceSsnErrorStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 2), )
if mibBuilder.loadTexts: cIscsiInstanceSsnErrorStatsTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstanceSsnErrorStatsTable.setDescription('A list of error types that will cause a session failure.')
cIscsiInstanceSsnErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 2, 1), )
cIscsiInstanceAttributesEntry.registerAugmentions(("CISCO-ISCSI-MIB", "cIscsiInstanceSsnErrorStatsEntry"))
cIscsiInstanceSsnErrorStatsEntry.setIndexNames(*cIscsiInstanceAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: cIscsiInstanceSsnErrorStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstanceSsnErrorStatsEntry.setDescription('An entry (row) containing management information applicable to a particular iSCSI instance.')
cIscsiInstSsnDigestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 2, 1, 1), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiInstSsnDigestErrors.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstSsnDigestErrors.setDescription('The count of sessions which were failed due to receipt of a PDU containing header or data digest errors.')
cIscsiInstSsnCxnTimeoutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 2, 1, 2), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiInstSsnCxnTimeoutErrors.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstSsnCxnTimeoutErrors.setDescription('The count of sessions which were failed due to a sequence exceeding a time limit.')
cIscsiInstSsnFormatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 2, 2, 1, 3), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiInstSsnFormatErrors.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstSsnFormatErrors.setDescription('The count of sessions which were failed due to receipt of a PDU which contained a format error.')
cIscsiPortal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 3))
cIscsiPortalAttributesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 3, 1), )
if mibBuilder.loadTexts: cIscsiPortalAttributesTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiPortalAttributesTable.setDescription('A list of transport endpoints (using TCP or another transport protocol) used by this iSCSI instance. An iSCSI instance may use a portal to listen for incoming connections to its targets, to initiate connections to other targets, or both.')
cIscsiPortalAttributesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-ISCSI-MIB", "cIscsiInstIndex"), (0, "CISCO-ISCSI-MIB", "cIscsiPortalIndex"))
if mibBuilder.loadTexts: cIscsiPortalAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiPortalAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular portal instance.')
cIscsiPortalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cIscsiPortalIndex.setStatus('current')
if mibBuilder.loadTexts: cIscsiPortalIndex.setDescription('An arbitrary integer used to uniquely identify a particular transport endpoint within this iSCSI instance.')
cIscsiPortalRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIscsiPortalRowStatus.setStatus('current')
if mibBuilder.loadTexts: cIscsiPortalRowStatus.setDescription('The status of the row.')
cIscsiPortalRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 3, 1, 1, 3), Bits().clone(namedValues=NamedValues(("targetTypePortal", 0), ("initiatorTypePortal", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIscsiPortalRoles.setStatus('current')
if mibBuilder.loadTexts: cIscsiPortalRoles.setDescription('A portal can operate in one or both of two roles: as a target portal and/or an initiator portal. When a new cIscsiPortalAttributesEntry is to be created, the agent should use this object as a hint for the creation of a new cIscsiTgtPortalAttributesEntry and/or cIscsiIntrPortalAttributesEntry.')
cIscsiPortalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 3, 1, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIscsiPortalAddrType.setStatus('current')
if mibBuilder.loadTexts: cIscsiPortalAddrType.setDescription('The type of Internet Network Address in the cIscsiPortalAddr.')
cIscsiPortalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 3, 1, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIscsiPortalAddr.setStatus('current')
if mibBuilder.loadTexts: cIscsiPortalAddr.setDescription("The portal's Internet Network Address.")
cIscsiPortalProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 3, 1, 1, 6), CIscsiTransportProtocols().clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIscsiPortalProtocol.setStatus('current')
if mibBuilder.loadTexts: cIscsiPortalProtocol.setDescription("The portal's transport protocol.")
cIscsiPortalMaxRecvDataSegLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 3, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 16777215)).clone(8192)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIscsiPortalMaxRecvDataSegLength.setStatus('current')
if mibBuilder.loadTexts: cIscsiPortalMaxRecvDataSegLength.setDescription('The maximum PDU length this portal can receive. This may be constrained by hardware characteristics and individual implementations may chose not to allow this object to be changed.')
cIscsiPortalPrimaryHdrDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 3, 1, 1, 8), CIscsiDigestMethod().clone('noDigest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIscsiPortalPrimaryHdrDigest.setStatus('current')
if mibBuilder.loadTexts: cIscsiPortalPrimaryHdrDigest.setDescription('The preferred header digest for this portal.')
cIscsiPortalPrimaryDataDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 3, 1, 1, 9), CIscsiDigestMethod().clone('noDigest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIscsiPortalPrimaryDataDigest.setStatus('current')
if mibBuilder.loadTexts: cIscsiPortalPrimaryDataDigest.setDescription('The preferred data digest method for this portal.')
cIscsiPortalSecondaryHdrDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 3, 1, 1, 10), CIscsiDigestMethod().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIscsiPortalSecondaryHdrDigest.setStatus('current')
if mibBuilder.loadTexts: cIscsiPortalSecondaryHdrDigest.setDescription('An alternate header digest preference for this portal.')
cIscsiPortalSecondaryDataDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 3, 1, 1, 11), CIscsiDigestMethod().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIscsiPortalSecondaryDataDigest.setStatus('current')
if mibBuilder.loadTexts: cIscsiPortalSecondaryDataDigest.setDescription('An alternate data digest preference for this portal.')
cIscsiPortalRecvMarker = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 3, 1, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIscsiPortalRecvMarker.setStatus('current')
if mibBuilder.loadTexts: cIscsiPortalRecvMarker.setDescription("This object indicates whether or not this portal will request markers in it's incoming data stream.")
cIscsiTargetPortal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 4))
cIscsiTgtPortalAttributesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 4, 1), )
if mibBuilder.loadTexts: cIscsiTgtPortalAttributesTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtPortalAttributesTable.setDescription('A list of transport endpoints (using TCP or another transport protocol) on which this iSCSI instance listens for incoming connections to its targets.')
cIscsiTgtPortalAttributesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-ISCSI-MIB", "cIscsiInstIndex"), (0, "CISCO-ISCSI-MIB", "cIscsiPortalIndex"))
if mibBuilder.loadTexts: cIscsiTgtPortalAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtPortalAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular portal instance that is used to listen for incoming connections to local targets. This row is populated for each cIscsiPortalAttributesEntry row that may be used as a target portal.')
cIscsiTgtPortalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIscsiTgtPortalPort.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtPortalPort.setDescription("The portal's transport protocol port number on which the portal listens for incoming iSCSI connections when the portal is used as a target portal.")
cIscsiTgtPortalTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 4, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIscsiTgtPortalTag.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtPortalTag.setDescription("The portal's aggregation tag when portal is used as a target portal. Multiple-connection sessions may be aggregated over portals sharing an identical aggregation tag.")
cIscsiInitiatorPortal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 5))
cIscsiIntrPortalAttributesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 5, 1), )
if mibBuilder.loadTexts: cIscsiIntrPortalAttributesTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrPortalAttributesTable.setDescription('A list of Internet Network Addresses (using TCP or another transport protocol) from which this iSCSI instance may initiate connections to other targets.')
cIscsiIntrPortalAttributesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-ISCSI-MIB", "cIscsiInstIndex"), (0, "CISCO-ISCSI-MIB", "cIscsiPortalIndex"))
if mibBuilder.loadTexts: cIscsiIntrPortalAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrPortalAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular portal instance that is used to initiate connections to iSCSI targets. This row is populated for each cIscsiPortalAttributesEntry row that may be used as an initiator portal.')
cIscsiIntrPortalTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIscsiIntrPortalTag.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrPortalTag.setDescription("The portal's aggregation tag when the portal is used as an initiator portal. Multiple-connection sessions may be aggregated over portals sharing an identical aggregation tag.")
cIscsiNode = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6))
cIscsiNodeAttributesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1), )
if mibBuilder.loadTexts: cIscsiNodeAttributesTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeAttributesTable.setDescription('A list of iSCSI nodes belonging to each iSCSI instance present on the local system. An iSCSI node can act as an initiator, a target, or both.')
cIscsiNodeAttributesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-ISCSI-MIB", "cIscsiInstIndex"), (0, "CISCO-ISCSI-MIB", "cIscsiNodeIndex"))
if mibBuilder.loadTexts: cIscsiNodeAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular iSCSI node.')
cIscsiNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cIscsiNodeIndex.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeIndex.setDescription('An arbitrary integer used to uniquely identify a particular node within an iSCSI instance present on the local system.')
cIscsiNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiNodeName.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeName.setDescription('A character string that is a globally unique identifier for this iSCSI node. The node name is independent of the location of the node, and can be resolved into a set of addresses through various discovery services.')
cIscsiNodeAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiNodeAlias.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeAlias.setDescription("A character string that is a human-readable name or description of the iSCSI node. If configured, this alias may be communicated to the initiator or target node at the remote end of the connection during a Login Request or Response message. This string is not used as an identifier, but can be displayed by the system's user interface in a list of initiators and/or targets to which it is connected. If no alias is configured, this object is a zero-length string.")
cIscsiNodeRoles = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 4), Bits().clone(namedValues=NamedValues(("targetTypeNode", 0), ("initiatorTypeNode", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiNodeRoles.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeRoles.setDescription('A node can operate as in one or both of two roles: a target role and/or an initiator role.')
cIscsiNodeTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiNodeTransportType.setReference('CISCO-SCSI-MIB')
if mibBuilder.loadTexts: cIscsiNodeTransportType.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeTransportType.setDescription('A pointer to the corresponding scsiTrnspt object in the CISCO-SCSI-MIB (which in turn points to this iSCSI node) allowing management stations to locate the SCSI-level Device that is represented by this cIscsiNode.')
cIscsiNodeInitialR2T = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiNodeInitialR2T.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeInitialR2T.setDescription('This object indicates InitialR2T preference for this node - True = YES, False = will try to negotiate NO, will accept YES ')
cIscsiNodeBidiInitialR2T = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiNodeBidiInitialR2T.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeBidiInitialR2T.setDescription('This object indicates BidiInitialR2T preference for this node- True = YES, False = will try to negotiate NO, will accept YES ')
cIscsiNodeImmediateData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIscsiNodeImmediateData.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeImmediateData.setDescription('This object indicates ImmediateData preference for this node True = YES (but will accept NO), False = NO ')
cIscsiNodeMaxOutstandingR2T = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIscsiNodeMaxOutstandingR2T.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeMaxOutstandingR2T.setDescription('Maximum number of outstanding R2Ts allowed per task.')
cIscsiNodeFirstBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 16777215)).clone(65536)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIscsiNodeFirstBurstSize.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeFirstBurstSize.setDescription('The maximum length (bytes) supported for unsolicited data to/from this node.')
cIscsiNodeMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 16777215)).clone(262144)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIscsiNodeMaxBurstSize.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeMaxBurstSize.setDescription('The maximum number of bytes which can be sent within a single sequence of Data-In or Data-Out PDUs.')
cIscsiNodeMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setUnits('connections').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIscsiNodeMaxConnections.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeMaxConnections.setDescription('The maximum number of connections allowed in each session to and/or from this node.')
cIscsiNodeDataSequenceInOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIscsiNodeDataSequenceInOrder.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeDataSequenceInOrder.setDescription('The DataSequenceInOrder preference of this node. False (=No) indicates that iSCSI data PDU sequences may be transferred in any order. True (=Yes) indicates that data PDU sequences must be transferred using continuously increasing offsets, except during error recovery.')
cIscsiNodeDataPduInOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 14), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIscsiNodeDataPduInOrder.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeDataPduInOrder.setDescription('The DataPDUInOrder preference of this node. False (=No) indicates that iSCSI data PDUs within sequences may be in any order. True (=Yes) indicates that data PDUs within sequences must be at continuously increasing addresses, with no gaps or overlay between PDUs.')
cIscsiNodeDefaultTime2Wait = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIscsiNodeDefaultTime2Wait.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeDefaultTime2Wait.setDescription('The DefaultTime2Wait preference of this node. This is the minimum time, in seconds, to wait before attempting an explicit/implicit logout or active task reassignment after an unexpected connection termination or a connection reset.')
cIscsiNodeDefaultTime2Retain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIscsiNodeDefaultTime2Retain.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeDefaultTime2Retain.setDescription('The DefaultTime2Retain preference of this node. This is the maximum time, in seconds after an initial wait (Time2Wait), before which an active task reassignment is still possible after an unexpected connection termination or a connection reset.')
cIscsiNodeErrorRecoveryLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 6, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIscsiNodeErrorRecoveryLevel.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeErrorRecoveryLevel.setDescription('The ErrorRecoveryLevel preference of this node. Currently, only 0-2 are valid. This object is designed to accommodate future error recover levels. Higher error recovery levels imply support in addition to support for the lower error level functions. In otherwords, error level 2 implies support for levels 0-1, since those functions are subsets of error level 2.')
cIscsiTarget = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7))
cIscsiTargetAttributesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 1), )
if mibBuilder.loadTexts: cIscsiTargetAttributesTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiTargetAttributesTable.setDescription('An entry (row) containing management information applicable to a particular node that can take on a target role.')
cIscsiTargetAttributesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-ISCSI-MIB", "cIscsiInstIndex"), (0, "CISCO-ISCSI-MIB", "cIscsiNodeIndex"))
if mibBuilder.loadTexts: cIscsiTargetAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiTargetAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular target.')
cIscsiTgtLoginFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 1, 1, 1), Counter32()).setUnits('failed login attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiTgtLoginFailures.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtLoginFailures.setDescription('This object counts the number of times a login attempt to this local target has failed.')
cIscsiTgtLastFailureTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiTgtLastFailureTime.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtLastFailureTime.setDescription('The timestamp of the most recent failure of a login attempt to this target. A value of zero indicates that no such failures have occurred.')
cIscsiTgtLastFailureType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 1, 1, 3), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiTgtLastFailureType.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtLastFailureType.setDescription('The type of the most recent failure of a login attempt to this target, represented as the OID of the counter object in cIscsiTargetLoginStatsTable for which the relevant instance was incremented. A value of 0.0 indicates a type which is not represented by any of the counters in cIscsiTargetLoginStatsTable.')
cIscsiTgtLastIntrFailureName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiTgtLastIntrFailureName.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtLastIntrFailureName.setDescription('An octet string giving the name of the initiator that failed the last login attempt.')
cIscsiTgtLastIntrFailureAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiTgtLastIntrFailureAddrType.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtLastIntrFailureAddrType.setDescription('The type of Internet Network Address in cIscsiTgtLastIntrFailureAddr.')
cIscsiTgtLastIntrFailureAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiTgtLastIntrFailureAddr.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtLastIntrFailureAddr.setDescription('An Internet Network Address giving the host address of the initiator that failed the last login attempt.')
cIscsiTargetLoginStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 2), )
if mibBuilder.loadTexts: cIscsiTargetLoginStatsTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiTargetLoginStatsTable.setDescription("A table of counters which keep a record of the results of initiators' login attempts to this target.")
cIscsiTargetLoginStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 2, 1), )
cIscsiTargetAttributesEntry.registerAugmentions(("CISCO-ISCSI-MIB", "cIscsiTargetLoginStatsEntry"))
cIscsiTargetLoginStatsEntry.setIndexNames(*cIscsiTargetAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: cIscsiTargetLoginStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiTargetLoginStatsEntry.setDescription('An entry (row) containing counters for each result of a login attempt to this target.')
cIscsiTgtLoginAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 2, 1, 1), Counter32()).setUnits('successful logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiTgtLoginAccepts.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtLoginAccepts.setDescription('The count of Login Response PDUs with status 0x0000, Accept Login, transmitted by this target.')
cIscsiTgtLoginOtherFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 2, 1, 2), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiTgtLoginOtherFails.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtLoginOtherFails.setDescription('The number of Login Response PDUs which were transmitted by this target, and which were not counted by any other object in the row.')
cIscsiTgtLoginRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 2, 1, 3), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiTgtLoginRedirects.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtLoginRedirects.setDescription('The count of Login Response PDUs with status class 0x01, Redirection, transmitted by this target.')
cIscsiTgtLoginAuthorizeFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 2, 1, 4), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiTgtLoginAuthorizeFails.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtLoginAuthorizeFails.setDescription('The count of Login Response PDUs with status 0x0202, Forbidden Target, transmitted by this target. If this counter is incremented, an cIscsiTgtLoginFailure notification should be generated.')
cIscsiTgtLoginAuthenticateFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 2, 1, 5), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiTgtLoginAuthenticateFails.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtLoginAuthenticateFails.setDescription('The count of Login Response PDUs with status 0x0201, Authentication Failed, transmitted by this target If this counter is incremented, an cIscsiTgtLoginFailure notification should be generated.')
cIscsiTgtLoginNegotiateFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 2, 1, 6), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiTgtLoginNegotiateFails.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtLoginNegotiateFails.setDescription('The number of times a target has effectively refused a login because the parameter negotiation failed. [Ed. While this situation can occur, the exact mechanism is as yet undefined in the iSCSI Protocol Spec.] If this counter is incremented, an cIscsiTgtLoginFailure notification should be generated.')
cIscsiTargetLogoutStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 3), )
if mibBuilder.loadTexts: cIscsiTargetLogoutStatsTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiTargetLogoutStatsTable.setDescription('When a target receives a Logout command, it responds with a Logout Response that carries a status code. This table contains counters for both normal and abnormal logout requests received by this target.')
cIscsiTargetLogoutStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 3, 1), )
cIscsiTargetAttributesEntry.registerAugmentions(("CISCO-ISCSI-MIB", "cIscsiTargetLogoutStatsEntry"))
cIscsiTargetLogoutStatsEntry.setIndexNames(*cIscsiTargetAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: cIscsiTargetLogoutStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiTargetLogoutStatsEntry.setDescription('An entry (row) containing counters of Logout Response PDUs that were received by this target.')
cIscsiTgtLogoutNormals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 3, 1, 1), Counter32()).setUnits('normal logouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiTgtLogoutNormals.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtLogoutNormals.setDescription('The count of Logout Command PDUs received by this target, with reason code 0 (closes the session).')
cIscsiTgtLogoutOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 7, 3, 1, 2), Counter32()).setUnits('abnormal logouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiTgtLogoutOthers.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtLogoutOthers.setDescription('The count of Logout Command PDUs received by this target, with any status code other than 0.')
cIscsiTgtAuthorization = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 8))
cIscsiTgtAuthAttributesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 8, 1), )
if mibBuilder.loadTexts: cIscsiTgtAuthAttributesTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtAuthAttributesTable.setDescription('A list of initiator identities that are authorized to access each target node within each iSCSI instance present on the local system.')
cIscsiTgtAuthAttributesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 8, 1, 1), ).setIndexNames((0, "CISCO-ISCSI-MIB", "cIscsiInstIndex"), (0, "CISCO-ISCSI-MIB", "cIscsiNodeIndex"), (0, "CISCO-ISCSI-MIB", "cIscsiTgtAuthIndex"))
if mibBuilder.loadTexts: cIscsiTgtAuthAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtAuthAttributesEntry.setDescription("An entry (row) containing management information applicable to a particular target node's authorized initiator identity.")
cIscsiTgtAuthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 8, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cIscsiTgtAuthIndex.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtAuthIndex.setDescription("An arbitrary integer used to uniquely identify a particular target's authorized initiator identity within an iSCSI instance present on the local system.")
cIscsiTgtAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 8, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIscsiTgtAuthRowStatus.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtAuthRowStatus.setDescription('The status of the row.')
cIscsiTgtAuthIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 8, 1, 1, 3), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cIscsiTgtAuthIdentity.setReference('IPS-AUTH MIB')
if mibBuilder.loadTexts: cIscsiTgtAuthIdentity.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtAuthIdentity.setDescription('A pointer to the corresponding IPS-AUTH MIB user entry that will be allowed to access this iSCSI target.')
cIscsiInitiator = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9))
cIscsiInitiatorAttributesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 1), )
if mibBuilder.loadTexts: cIscsiInitiatorAttributesTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiInitiatorAttributesTable.setDescription('A list of iSCSI nodes that can take on an initiator role, belonging to each iSCSI instance present on the local system.')
cIscsiInitiatorAttributesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 1, 1), ).setIndexNames((0, "CISCO-ISCSI-MIB", "cIscsiInstIndex"), (0, "CISCO-ISCSI-MIB", "cIscsiNodeIndex"))
if mibBuilder.loadTexts: cIscsiInitiatorAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiInitiatorAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular iSCSI node that has initiator capabilities.')
cIscsiIntrLoginFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 1, 1, 1), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiIntrLoginFailures.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrLoginFailures.setDescription('This object counts the number of times a login attempt from this local initiator has failed.')
cIscsiIntrLastFailureTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiIntrLastFailureTime.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrLastFailureTime.setDescription('The timestamp of the most recent failure of a login attempt from this initiator. A value of zero indicates that no such failures have occurred.')
cIscsiIntrLastFailureType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 1, 1, 3), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiIntrLastFailureType.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrLastFailureType.setDescription('The type of the most recent failure of a login attempt from this initiator, represented as the OID of the counter object in cIscsiInitiatorLoginStatsTable for which the relevant instance was incremented. A value of 0.0 indicates a type which is not represented by any of the counters in cIscsiInitiatorLoginStatsTable.')
cIscsiIntrLastTgtFailureName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiIntrLastTgtFailureName.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrLastTgtFailureName.setDescription('An octet string giving the name of the target that failed the last login attempt.')
cIscsiIntrLastTgtFailureAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiIntrLastTgtFailureAddrType.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrLastTgtFailureAddrType.setDescription('The type of Internet Network Address in cIscsiIntrLastTgtFailureAddr.')
cIscsiIntrLastTgtFailureAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiIntrLastTgtFailureAddr.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrLastTgtFailureAddr.setDescription('An Internet Network Address giving the host address of the target that failed the last login attempt.')
cIscsiInitiatorLoginStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 2), )
if mibBuilder.loadTexts: cIscsiInitiatorLoginStatsTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiInitiatorLoginStatsTable.setDescription("A table of counters which keep track of the results of this initiator's login attempts.")
cIscsiInitiatorLoginStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 2, 1), )
cIscsiInitiatorAttributesEntry.registerAugmentions(("CISCO-ISCSI-MIB", "cIscsiInitiatorLoginStatsEntry"))
cIscsiInitiatorLoginStatsEntry.setIndexNames(*cIscsiInitiatorAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: cIscsiInitiatorLoginStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiInitiatorLoginStatsEntry.setDescription("An entry (row) containing counters of each result of this initiator's login attempts.")
cIscsiIntrLoginAcceptRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 2, 1, 1), Counter32()).setUnits('successful logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiIntrLoginAcceptRsps.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrLoginAcceptRsps.setDescription('The count of Login Response PDUs with status 0x0000, Accept Login, received by this initiator.')
cIscsiIntrLoginOtherFailRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 2, 1, 2), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiIntrLoginOtherFailRsps.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrLoginOtherFailRsps.setDescription('The count of Login Response PDUs received by this initiator with any status code not counted in the objects below.')
cIscsiIntrLoginRedirectRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 2, 1, 3), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiIntrLoginRedirectRsps.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrLoginRedirectRsps.setDescription('The count of Login Response PDUs with status class 0x01, Redirection, received by this initiator.')
cIscsiIntrLoginAuthFailRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 2, 1, 4), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiIntrLoginAuthFailRsps.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrLoginAuthFailRsps.setDescription('The count of Login Response PDUs with status class 0x201, Authentication Failed, received by this initiator.')
cIscsiIntrLoginAuthenticateFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 2, 1, 5), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiIntrLoginAuthenticateFails.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrLoginAuthenticateFails.setDescription('The number of times the initiator has aborted a login because the target could not be authenticated. No response is generated. If this counter is incremented, an cIscsiIntrLoginFailure notification should be generated.')
cIscsiIntrLoginNegotiateFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 2, 1, 6), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiIntrLoginNegotiateFails.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrLoginNegotiateFails.setDescription('The number of times the initiator has aborted a login because parameter negotiation with the target failed. No response is generated. If this counter is incremented, an cIscsiIntrLoginFailure notification should be generated.')
cIscsiInitiatorLogoutStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 3), )
if mibBuilder.loadTexts: cIscsiInitiatorLogoutStatsTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiInitiatorLogoutStatsTable.setDescription('When an initiator attempts send a Logout command, the target responds with a Logout Response that carries a status code. This table contains a list of counters of Logout Response PDUs of each status code, that were received by each initiator belonging to this iSCSI instance present on this system.')
cIscsiInitiatorLogoutStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 3, 1), )
cIscsiInitiatorAttributesEntry.registerAugmentions(("CISCO-ISCSI-MIB", "cIscsiInitiatorLogoutStatsEntry"))
cIscsiInitiatorLogoutStatsEntry.setIndexNames(*cIscsiInitiatorAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: cIscsiInitiatorLogoutStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiInitiatorLogoutStatsEntry.setDescription('An entry (row) containing counters of Logout Response PDUs of each status code, that were generated by this initiator.')
cIscsiIntrLogoutNormals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 3, 1, 1), Counter32()).setUnits('normal logouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiIntrLogoutNormals.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrLogoutNormals.setDescription('The count of Logout Command PDUs generated by this initiator with reason code 0 (closes the session).')
cIscsiIntrLogoutOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 9, 3, 1, 2), Counter32()).setUnits('abnormal logouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiIntrLogoutOthers.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrLogoutOthers.setDescription('The count of Logout Command PDUs generated by this initiator with any status code other than 0.')
cIscsiIntrAuthorization = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 10))
cIscsiIntrAuthAttributesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 10, 1), )
if mibBuilder.loadTexts: cIscsiIntrAuthAttributesTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrAuthAttributesTable.setDescription('A list of target identities which each initiator on the local system may access.')
cIscsiIntrAuthAttributesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 10, 1, 1), ).setIndexNames((0, "CISCO-ISCSI-MIB", "cIscsiInstIndex"), (0, "CISCO-ISCSI-MIB", "cIscsiNodeIndex"), (0, "CISCO-ISCSI-MIB", "cIscsiIntrAuthIndex"))
if mibBuilder.loadTexts: cIscsiIntrAuthAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrAuthAttributesEntry.setDescription("An entry (row) containing management information applicable to a particular initiator node's authorized target identity.")
cIscsiIntrAuthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 10, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cIscsiIntrAuthIndex.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrAuthIndex.setDescription("An arbitrary integer used to uniquely identify a particular initiator node's authorized target identity within an iSCSI instance present on the local system.")
cIscsiIntrAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 10, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiIntrAuthRowStatus.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrAuthRowStatus.setDescription('The status of the row.')
cIscsiIntrAuthIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 10, 1, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiIntrAuthIdentity.setReference('IPS-AUTH MIB')
if mibBuilder.loadTexts: cIscsiIntrAuthIdentity.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrAuthIdentity.setDescription('A pointer to the corresponding IPS-AUTH MIB user entry to which this initiator node should attempt to establish an iSCSI session.')
cIscsiSession = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11))
cIscsiSessionAttributesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1), )
if mibBuilder.loadTexts: cIscsiSessionAttributesTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiSessionAttributesTable.setDescription('A list of sessions belonging to each iSCSI instance present on the system.')
cIscsiSessionAttributesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1), ).setIndexNames((0, "CISCO-ISCSI-MIB", "cIscsiInstIndex"), (0, "CISCO-ISCSI-MIB", "cIscsiNodeIndex"), (0, "CISCO-ISCSI-MIB", "cIscsiSsnIndex"))
if mibBuilder.loadTexts: cIscsiSessionAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiSessionAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular session.')
cIscsiSsnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cIscsiSsnIndex.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnIndex.setDescription('An arbitrary integer used to uniquely identify a particular session within an iSCSI instance present on the local system.')
cIscsiSsnDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inboundSession", 1), ("outboundSession", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnDirection.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnDirection.setDescription('Direction of iSCSI session: InboundSession - session is established from an external initiator to a target within this iSCSI instance. OutboundSession - session is established from an initiator within this iSCSI instance to an external target.')
cIscsiSsnInitiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnInitiatorName.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnInitiatorName.setDescription('If cIscsiSsnDirection is Inbound, this object is an octet string that will contain the name of the remote initiator. If cIscsiSsnDirection is Outbound, this object will contain a zero-length string.')
cIscsiSsnTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnTargetName.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnTargetName.setDescription('If cIscsiSsnDirection is Outbound, this object is an octet string that will contain the name of the remote target. If cIscsiSsnDirection is Inbound, this object will contain a zero-length string.')
cIscsiSsnTsih = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnTsih.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnTsih.setDescription('The target-defined identification handle for this session.')
cIscsiSsnIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnIsid.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnIsid.setDescription('The initiator-defined portion of the iSCSI Session ID.')
cIscsiSsnInitiatorAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnInitiatorAlias.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnInitiatorAlias.setDescription('An octet string that gives the alias communicated by the initiator end of the session during the login phase. If no alias exists, the value is a zero-length string.')
cIscsiSsnTargetAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnTargetAlias.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnTargetAlias.setDescription('An octet string that gives the alias communicated by the target end of the session during the login phase. If no alias exists, the value is a zero-length string.')
cIscsiSsnInitialR2T = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnInitialR2T.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnInitialR2T.setDescription('If set to true, indicates that the initiator must wait for an R2T before sending to the target. If set to false, the initiator may send data immediately, within limits set by cIscsiSsnFirstBurstSize and the expected data transfer length of the request. Default is true.')
cIscsiSsnBidiInitialR2T = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnBidiInitialR2T.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnBidiInitialR2T.setDescription('If set to true, indicates that the initiator must wait for an R2T before sending data to the target within a bi-directional (both read and write) request. If false, the initiator may send unsolicited write data as part of the request.')
cIscsiSsnImmediateData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnImmediateData.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnImmediateData.setDescription('Indicates whether the initiator and target have agreed to support immediate data on this session.')
cIscsiSsnType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalSession", 1), ("discoverySession", 2))).clone('normalSession')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnType.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnType.setDescription('Type of iSCSI session: normalSession - session is a normal iSCSI session discoverySession - session is being used only for discovery.')
cIscsiSsnMaxOutstandingR2T = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnMaxOutstandingR2T.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnMaxOutstandingR2T.setDescription('The maximum number of outstanding request-to-transmit (R2T)s per task within this session.')
cIscsiSsnFirstBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 16777215)).clone(65536)).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnFirstBurstSize.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnFirstBurstSize.setDescription('The maximum length supported for unsolicited data sent within this session.')
cIscsiSsnMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 16777215)).clone(262144)).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnMaxBurstSize.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnMaxBurstSize.setDescription('The maximum number of bytes which can be sent within a single sequence of Data-In or Data-Out PDUs.')
cIscsiSsnConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 16), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnConnectionNumber.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnConnectionNumber.setDescription('The number of transport protocol connections that currently belong to this session.')
cIscsiSsnAuthIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnAuthIdentity.setReference('IPS-AUTH MIB')
if mibBuilder.loadTexts: cIscsiSsnAuthIdentity.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnAuthIdentity.setDescription('This object contains a row in the IPS-AUTH MIB which identifies the authentication method being used on this session, as communicated during the login phase.')
cIscsiSsnDataSequenceInOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnDataSequenceInOrder.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnDataSequenceInOrder.setDescription('False indicates that iSCSI data PDU sequences may be transferred in any order. True indicates that data PDU sequences must be transferred using continuously increasing offsets, except during error recovery.')
cIscsiSsnDataPduInOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnDataPduInOrder.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnDataPduInOrder.setDescription('False indicates that iSCSI data PDUs within sequences may be in any order. True indicates that data PDUs within sequences must be at continuously increasing addresses, with no gaps or overlay between PDUs. Default is true.')
cIscsiSsnErrorRecoveryLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnErrorRecoveryLevel.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnErrorRecoveryLevel.setDescription('The level of error recovery negotiated between the initiator and the target. Higher numbers represent more detailed recovery schemes.')
cIscsiSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 2), )
if mibBuilder.loadTexts: cIscsiSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiSessionStatsTable.setDescription('A list of general iSCSI traffic counters for each of the sessions present on the system.')
cIscsiSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 2, 1), )
cIscsiSessionAttributesEntry.registerAugmentions(("CISCO-ISCSI-MIB", "cIscsiSessionStatsEntry"))
cIscsiSessionStatsEntry.setIndexNames(*cIscsiSessionAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: cIscsiSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiSessionStatsEntry.setDescription('An entry (row) containing general iSCSI traffic counters for a particular session.')
cIscsiSsnCmdPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 2, 1, 1), Counter32()).setUnits('PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnCmdPdus.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnCmdPdus.setDescription('The count of Command PDUs transferred on this session.')
cIscsiSsnRspPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 2, 1, 2), Counter32()).setUnits('PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnRspPdus.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnRspPdus.setDescription('The count of Response PDUs transferred on this session.')
cIscsiSsnTxDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 2, 1, 3), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnTxDataOctets.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnTxDataOctets.setDescription('The count of data octets that were transmitted by the local iSCSI node on this session.')
cIscsiSsnRxDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 2, 1, 4), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnRxDataOctets.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnRxDataOctets.setDescription('The count of data octets that were received by the local iSCSI node on this session.')
cIscsiSessionCxnErrorStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 3), )
if mibBuilder.loadTexts: cIscsiSessionCxnErrorStatsTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiSessionCxnErrorStatsTable.setDescription('A list of error counters for each of the sessions present on this system.')
cIscsiSessionCxnErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 3, 1), )
cIscsiSessionAttributesEntry.registerAugmentions(("CISCO-ISCSI-MIB", "cIscsiSessionCxnErrorStatsEntry"))
cIscsiSessionCxnErrorStatsEntry.setIndexNames(*cIscsiSessionAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: cIscsiSessionCxnErrorStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiSessionCxnErrorStatsEntry.setDescription('An entry (row) containing error counters for a particular session.')
cIscsiSsnDigestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 3, 1, 1), Counter32()).setUnits('PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnDigestErrors.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnDigestErrors.setDescription('The count of PDUs which were received on the session and contained header or data digest errors.')
cIscsiSsnCxnTimeoutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 11, 3, 1, 2), Counter32()).setUnits('sequences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiSsnCxnTimeoutErrors.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnCxnTimeoutErrors.setDescription('The count of connections within this session which have been terminated due to timeout.')
cIscsiConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12))
cIscsiConnectionAttributesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1), )
if mibBuilder.loadTexts: cIscsiConnectionAttributesTable.setStatus('current')
if mibBuilder.loadTexts: cIscsiConnectionAttributesTable.setDescription('A list of connections belonging to each iSCSI instance present on the system.')
cIscsiConnectionAttributesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1, 1), ).setIndexNames((0, "CISCO-ISCSI-MIB", "cIscsiInstIndex"), (0, "CISCO-ISCSI-MIB", "cIscsiNodeIndex"), (0, "CISCO-ISCSI-MIB", "cIscsiSsnIndex"), (0, "CISCO-ISCSI-MIB", "cIscsiCxnIndex"))
if mibBuilder.loadTexts: cIscsiConnectionAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: cIscsiConnectionAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular connection.')
cIscsiCxnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cIscsiCxnIndex.setStatus('current')
if mibBuilder.loadTexts: cIscsiCxnIndex.setDescription('An arbitrary integer used to uniquely identify a particular connection of a particular session within an iSCSI instance present on the local system.')
cIscsiCxnCid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiCxnCid.setStatus('current')
if mibBuilder.loadTexts: cIscsiCxnCid.setDescription('The iSCSI Connection ID for this connection.')
cIscsiCxnState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("login", 1), ("full", 2), ("logout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiCxnState.setStatus('current')
if mibBuilder.loadTexts: cIscsiCxnState.setDescription('The current state of this connection, from an iSCSI negotiation point of view. Here are the states: login - The transport protocol connection has been established, but a valid iSCSI login response with the final bit set has not been sent or received. full - A valid iSCSI login response with the final bit set has been sent or received. logout - A valid iSCSI logout command has been sent or received, but the transport protocol connection has not yet been closed.')
cIscsiCxnLocalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiCxnLocalAddrType.setStatus('current')
if mibBuilder.loadTexts: cIscsiCxnLocalAddrType.setDescription('The type of Internet Network Address in cIscsiCxnLocalAddr.')
cIscsiCxnLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiCxnLocalAddr.setStatus('current')
if mibBuilder.loadTexts: cIscsiCxnLocalAddr.setDescription('The local Internet Network Address used by this connection.')
cIscsiCxnProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1, 1, 6), CIscsiTransportProtocols().clone(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiCxnProtocol.setStatus('current')
if mibBuilder.loadTexts: cIscsiCxnProtocol.setDescription('The transport protocol over which this connection is running.')
cIscsiCxnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiCxnLocalPort.setStatus('current')
if mibBuilder.loadTexts: cIscsiCxnLocalPort.setDescription('The local transport protocol port used by this connection.')
cIscsiCxnRemoteAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiCxnRemoteAddrType.setStatus('current')
if mibBuilder.loadTexts: cIscsiCxnRemoteAddrType.setDescription('The type of Internet Network Address in cIscsiCxnRemoteAddr.')
cIscsiCxnRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiCxnRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: cIscsiCxnRemoteAddr.setDescription('The remote Internet Network Address used by this connection.')
cIscsiCxnRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiCxnRemotePort.setStatus('current')
if mibBuilder.loadTexts: cIscsiCxnRemotePort.setDescription('The remote transport protocol port used by this connection.')
cIscsiCxnMaxRecvDataSegLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 16777215)).clone(8192)).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiCxnMaxRecvDataSegLength.setStatus('current')
if mibBuilder.loadTexts: cIscsiCxnMaxRecvDataSegLength.setDescription('The maximum data payload size supported for command or data PDUs in use within this connection. Note that the size of reported in bytes even though the negotiation is in 512k blocks.')
cIscsiCxnHeaderIntegrity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1, 1, 12), CIscsiDigestMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiCxnHeaderIntegrity.setStatus('current')
if mibBuilder.loadTexts: cIscsiCxnHeaderIntegrity.setDescription('This object identifies the iSCSI header digest scheme in use within this connection.')
cIscsiCxnDataIntegrity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1, 1, 13), CIscsiDigestMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiCxnDataIntegrity.setStatus('current')
if mibBuilder.loadTexts: cIscsiCxnDataIntegrity.setDescription('This object identifies the iSCSI data digest scheme in use within this connection.')
cIscsiCxnRecvMarker = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiCxnRecvMarker.setStatus('current')
if mibBuilder.loadTexts: cIscsiCxnRecvMarker.setDescription('This object indicates whether or not this connection is receiving markers in in its incoming data stream.')
cIscsiCxnSendMarker = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 94, 1, 12, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiCxnSendMarker.setStatus('current')
if mibBuilder.loadTexts: cIscsiCxnSendMarker.setDescription('This object indicates whether or not this connection is inserting markers in in its outgoing data stream.')
cIscsiNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 2, 0))
cIscsiTgtLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 94, 2, 0, 1)).setObjects(("CISCO-ISCSI-MIB", "cIscsiTgtLoginFailures"), ("CISCO-ISCSI-MIB", "cIscsiTgtLastFailureType"), ("CISCO-ISCSI-MIB", "cIscsiTgtLastIntrFailureName"), ("CISCO-ISCSI-MIB", "cIscsiTgtLastIntrFailureAddrType"), ("CISCO-ISCSI-MIB", "cIscsiTgtLastIntrFailureAddr"))
if mibBuilder.loadTexts: cIscsiTgtLoginFailure.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtLoginFailure.setDescription('Sent when a login is failed by a target. The implementation of this trap should not send more than 3 notifications of this type in any 10 second time span.')
cIscsiIntrLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 94, 2, 0, 2)).setObjects(("CISCO-ISCSI-MIB", "cIscsiIntrLoginFailures"), ("CISCO-ISCSI-MIB", "cIscsiIntrLastFailureType"), ("CISCO-ISCSI-MIB", "cIscsiIntrLastTgtFailureName"), ("CISCO-ISCSI-MIB", "cIscsiIntrLastTgtFailureAddrType"), ("CISCO-ISCSI-MIB", "cIscsiIntrLastTgtFailureAddr"))
if mibBuilder.loadTexts: cIscsiIntrLoginFailure.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrLoginFailure.setDescription('Sent when a login is failed by a initiator. The implementation of this trap should not send more than 3 notifications of this type in any 10 second time span.')
cIscsiInstSessionFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 94, 2, 0, 3)).setObjects(("CISCO-ISCSI-MIB", "cIscsiInstSsnFailures"), ("CISCO-ISCSI-MIB", "cIscsiInstLastSsnFailureType"), ("CISCO-ISCSI-MIB", "cIscsiInstLastSsnRmtNodeName"))
if mibBuilder.loadTexts: cIscsiInstSessionFailure.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstSessionFailure.setDescription('Sent when an active session is failed by either the initiator or the target. The implementation of this trap should not send more than 3 notifications of this type in any 10 second time span.')
cIscsiGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1))
cIscsiInstanceAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 1)).setObjects(("CISCO-ISCSI-MIB", "cIscsiInstDescr"), ("CISCO-ISCSI-MIB", "cIscsiInstVersionMin"), ("CISCO-ISCSI-MIB", "cIscsiInstVersionMax"), ("CISCO-ISCSI-MIB", "cIscsiInstVendorID"), ("CISCO-ISCSI-MIB", "cIscsiInstVendorVersion"), ("CISCO-ISCSI-MIB", "cIscsiInstPortalNumber"), ("CISCO-ISCSI-MIB", "cIscsiInstNodeNumber"), ("CISCO-ISCSI-MIB", "cIscsiInstSessionNumber"), ("CISCO-ISCSI-MIB", "cIscsiInstSsnFailures"), ("CISCO-ISCSI-MIB", "cIscsiInstLastSsnFailureType"), ("CISCO-ISCSI-MIB", "cIscsiInstLastSsnRmtNodeName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiInstanceAttributesGroup = cIscsiInstanceAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstanceAttributesGroup.setDescription('A collection of objects providing information about iSCSI instances.')
cIscsiInstanceSsnErrorStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 2)).setObjects(("CISCO-ISCSI-MIB", "cIscsiInstSsnDigestErrors"), ("CISCO-ISCSI-MIB", "cIscsiInstSsnCxnTimeoutErrors"), ("CISCO-ISCSI-MIB", "cIscsiInstSsnFormatErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiInstanceSsnErrorStatsGroup = cIscsiInstanceSsnErrorStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiInstanceSsnErrorStatsGroup.setDescription('A collection of objects providing information about errors that have caused a session failure for an iSCSI instance.')
cIscsiPortalAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 3)).setObjects(("CISCO-ISCSI-MIB", "cIscsiPortalRowStatus"), ("CISCO-ISCSI-MIB", "cIscsiPortalRoles"), ("CISCO-ISCSI-MIB", "cIscsiPortalAddrType"), ("CISCO-ISCSI-MIB", "cIscsiPortalAddr"), ("CISCO-ISCSI-MIB", "cIscsiPortalProtocol"), ("CISCO-ISCSI-MIB", "cIscsiPortalMaxRecvDataSegLength"), ("CISCO-ISCSI-MIB", "cIscsiPortalPrimaryHdrDigest"), ("CISCO-ISCSI-MIB", "cIscsiPortalPrimaryDataDigest"), ("CISCO-ISCSI-MIB", "cIscsiPortalSecondaryHdrDigest"), ("CISCO-ISCSI-MIB", "cIscsiPortalSecondaryDataDigest"), ("CISCO-ISCSI-MIB", "cIscsiPortalRecvMarker"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiPortalAttributesGroup = cIscsiPortalAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiPortalAttributesGroup.setDescription('A collection of objects providing information about the transport protocol endpoints of the local targets.')
cIscsiTgtPortalAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 4)).setObjects(("CISCO-ISCSI-MIB", "cIscsiTgtPortalPort"), ("CISCO-ISCSI-MIB", "cIscsiTgtPortalTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiTgtPortalAttributesGroup = cIscsiTgtPortalAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtPortalAttributesGroup.setDescription('A collection of objects providing information about the transport protocol endpoints of the local targets.')
cIscsiIntrPortalAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 5)).setObjects(("CISCO-ISCSI-MIB", "cIscsiIntrPortalTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiIntrPortalAttributesGroup = cIscsiIntrPortalAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrPortalAttributesGroup.setDescription('A collection of objects providing information about the Internet Network Addresses of the local initiators.')
cIscsiNodeAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 6)).setObjects(("CISCO-ISCSI-MIB", "cIscsiNodeName"), ("CISCO-ISCSI-MIB", "cIscsiNodeAlias"), ("CISCO-ISCSI-MIB", "cIscsiNodeRoles"), ("CISCO-ISCSI-MIB", "cIscsiNodeTransportType"), ("CISCO-ISCSI-MIB", "cIscsiNodeInitialR2T"), ("CISCO-ISCSI-MIB", "cIscsiNodeBidiInitialR2T"), ("CISCO-ISCSI-MIB", "cIscsiNodeImmediateData"), ("CISCO-ISCSI-MIB", "cIscsiNodeMaxOutstandingR2T"), ("CISCO-ISCSI-MIB", "cIscsiNodeFirstBurstSize"), ("CISCO-ISCSI-MIB", "cIscsiNodeMaxBurstSize"), ("CISCO-ISCSI-MIB", "cIscsiNodeMaxConnections"), ("CISCO-ISCSI-MIB", "cIscsiNodeDataSequenceInOrder"), ("CISCO-ISCSI-MIB", "cIscsiNodeDataPduInOrder"), ("CISCO-ISCSI-MIB", "cIscsiNodeDefaultTime2Wait"), ("CISCO-ISCSI-MIB", "cIscsiNodeDefaultTime2Retain"), ("CISCO-ISCSI-MIB", "cIscsiNodeErrorRecoveryLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiNodeAttributesGroup = cIscsiNodeAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiNodeAttributesGroup.setDescription('A collection of objects providing information about all local targets.')
cIscsiTargetAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 7)).setObjects(("CISCO-ISCSI-MIB", "cIscsiTgtLoginFailures"), ("CISCO-ISCSI-MIB", "cIscsiTgtLastFailureTime"), ("CISCO-ISCSI-MIB", "cIscsiTgtLastFailureType"), ("CISCO-ISCSI-MIB", "cIscsiTgtLastIntrFailureName"), ("CISCO-ISCSI-MIB", "cIscsiTgtLastIntrFailureAddrType"), ("CISCO-ISCSI-MIB", "cIscsiTgtLastIntrFailureAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiTargetAttributesGroup = cIscsiTargetAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiTargetAttributesGroup.setDescription('A collection of objects providing information about all local targets.')
cIscsiTargetLoginStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 8)).setObjects(("CISCO-ISCSI-MIB", "cIscsiTgtLoginAccepts"), ("CISCO-ISCSI-MIB", "cIscsiTgtLoginOtherFails"), ("CISCO-ISCSI-MIB", "cIscsiTgtLoginRedirects"), ("CISCO-ISCSI-MIB", "cIscsiTgtLoginAuthorizeFails"), ("CISCO-ISCSI-MIB", "cIscsiTgtLoginAuthenticateFails"), ("CISCO-ISCSI-MIB", "cIscsiTgtLoginNegotiateFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiTargetLoginStatsGroup = cIscsiTargetLoginStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiTargetLoginStatsGroup.setDescription('A collection of objects providing information about all login attempts by remote initiators to local targets.')
cIscsiTargetLogoutStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 9)).setObjects(("CISCO-ISCSI-MIB", "cIscsiTgtLogoutNormals"), ("CISCO-ISCSI-MIB", "cIscsiTgtLogoutOthers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiTargetLogoutStatsGroup = cIscsiTargetLogoutStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiTargetLogoutStatsGroup.setDescription('A collection of objects providing information about all logout events between remote initiators to local targets.')
cIscsiTargetAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 10)).setObjects(("CISCO-ISCSI-MIB", "cIscsiTgtAuthRowStatus"), ("CISCO-ISCSI-MIB", "cIscsiTgtAuthIdentity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiTargetAuthGroup = cIscsiTargetAuthGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiTargetAuthGroup.setDescription('.')
cIscsiInitiatorAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 11)).setObjects(("CISCO-ISCSI-MIB", "cIscsiIntrLoginFailures"), ("CISCO-ISCSI-MIB", "cIscsiIntrLastFailureTime"), ("CISCO-ISCSI-MIB", "cIscsiIntrLastFailureType"), ("CISCO-ISCSI-MIB", "cIscsiIntrLastTgtFailureName"), ("CISCO-ISCSI-MIB", "cIscsiIntrLastTgtFailureAddrType"), ("CISCO-ISCSI-MIB", "cIscsiIntrLastTgtFailureAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiInitiatorAttributesGroup = cIscsiInitiatorAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiInitiatorAttributesGroup.setDescription('A collection of objects providing information about all local initiators.')
cIscsiInitiatorLoginStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 12)).setObjects(("CISCO-ISCSI-MIB", "cIscsiIntrLoginAcceptRsps"), ("CISCO-ISCSI-MIB", "cIscsiIntrLoginOtherFailRsps"), ("CISCO-ISCSI-MIB", "cIscsiIntrLoginRedirectRsps"), ("CISCO-ISCSI-MIB", "cIscsiIntrLoginAuthFailRsps"), ("CISCO-ISCSI-MIB", "cIscsiIntrLoginAuthenticateFails"), ("CISCO-ISCSI-MIB", "cIscsiIntrLoginNegotiateFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiInitiatorLoginStatsGroup = cIscsiInitiatorLoginStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiInitiatorLoginStatsGroup.setDescription('A collection of objects providing information about all login attempts by local initiators to remote targets.')
cIscsiInitiatorLogoutStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 13)).setObjects(("CISCO-ISCSI-MIB", "cIscsiIntrLogoutNormals"), ("CISCO-ISCSI-MIB", "cIscsiIntrLogoutOthers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiInitiatorLogoutStatsGroup = cIscsiInitiatorLogoutStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiInitiatorLogoutStatsGroup.setDescription('A collection of objects providing information about all logout events between local initiators to remote targets.')
cIscsiInitiatorAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 14)).setObjects(("CISCO-ISCSI-MIB", "cIscsiIntrAuthRowStatus"), ("CISCO-ISCSI-MIB", "cIscsiIntrAuthIdentity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiInitiatorAuthGroup = cIscsiInitiatorAuthGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiInitiatorAuthGroup.setDescription('.')
cIscsiSessionAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 15)).setObjects(("CISCO-ISCSI-MIB", "cIscsiSsnDirection"), ("CISCO-ISCSI-MIB", "cIscsiSsnInitiatorName"), ("CISCO-ISCSI-MIB", "cIscsiSsnTargetName"), ("CISCO-ISCSI-MIB", "cIscsiSsnTsih"), ("CISCO-ISCSI-MIB", "cIscsiSsnIsid"), ("CISCO-ISCSI-MIB", "cIscsiSsnInitiatorAlias"), ("CISCO-ISCSI-MIB", "cIscsiSsnTargetAlias"), ("CISCO-ISCSI-MIB", "cIscsiSsnInitialR2T"), ("CISCO-ISCSI-MIB", "cIscsiSsnBidiInitialR2T"), ("CISCO-ISCSI-MIB", "cIscsiSsnImmediateData"), ("CISCO-ISCSI-MIB", "cIscsiSsnType"), ("CISCO-ISCSI-MIB", "cIscsiSsnMaxOutstandingR2T"), ("CISCO-ISCSI-MIB", "cIscsiSsnFirstBurstSize"), ("CISCO-ISCSI-MIB", "cIscsiSsnMaxBurstSize"), ("CISCO-ISCSI-MIB", "cIscsiSsnConnectionNumber"), ("CISCO-ISCSI-MIB", "cIscsiSsnAuthIdentity"), ("CISCO-ISCSI-MIB", "cIscsiSsnDataSequenceInOrder"), ("CISCO-ISCSI-MIB", "cIscsiSsnDataPduInOrder"), ("CISCO-ISCSI-MIB", "cIscsiSsnErrorRecoveryLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiSessionAttributesGroup = cIscsiSessionAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiSessionAttributesGroup.setDescription('A collection of objects providing information applicable to all sessions.')
cIscsiSessionStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 16)).setObjects(("CISCO-ISCSI-MIB", "cIscsiSsnCmdPdus"), ("CISCO-ISCSI-MIB", "cIscsiSsnRspPdus"), ("CISCO-ISCSI-MIB", "cIscsiSsnTxDataOctets"), ("CISCO-ISCSI-MIB", "cIscsiSsnRxDataOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiSessionStatsGroup = cIscsiSessionStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiSessionStatsGroup.setDescription('A collection of objects providing information about message and data traffic for all sessions.')
cIscsiSessionCxnErrorStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 17)).setObjects(("CISCO-ISCSI-MIB", "cIscsiSsnDigestErrors"), ("CISCO-ISCSI-MIB", "cIscsiSsnCxnTimeoutErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiSessionCxnErrorStatsGroup = cIscsiSessionCxnErrorStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiSessionCxnErrorStatsGroup.setDescription('A collection of objects providing information about connection errors for all sessions.')
cIscsiConnectionAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 18)).setObjects(("CISCO-ISCSI-MIB", "cIscsiCxnCid"), ("CISCO-ISCSI-MIB", "cIscsiCxnState"), ("CISCO-ISCSI-MIB", "cIscsiCxnProtocol"), ("CISCO-ISCSI-MIB", "cIscsiCxnLocalAddrType"), ("CISCO-ISCSI-MIB", "cIscsiCxnLocalAddr"), ("CISCO-ISCSI-MIB", "cIscsiCxnLocalPort"), ("CISCO-ISCSI-MIB", "cIscsiCxnRemoteAddrType"), ("CISCO-ISCSI-MIB", "cIscsiCxnRemoteAddr"), ("CISCO-ISCSI-MIB", "cIscsiCxnRemotePort"), ("CISCO-ISCSI-MIB", "cIscsiCxnMaxRecvDataSegLength"), ("CISCO-ISCSI-MIB", "cIscsiCxnHeaderIntegrity"), ("CISCO-ISCSI-MIB", "cIscsiCxnDataIntegrity"), ("CISCO-ISCSI-MIB", "cIscsiCxnRecvMarker"), ("CISCO-ISCSI-MIB", "cIscsiCxnSendMarker"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiConnectionAttributesGroup = cIscsiConnectionAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiConnectionAttributesGroup.setDescription('A collection of objects providing information about all connections used by all sessions.')
cIscsiTgtLgnNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 19)).setObjects(("CISCO-ISCSI-MIB", "cIscsiTgtLoginFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiTgtLgnNotificationsGroup = cIscsiTgtLgnNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiTgtLgnNotificationsGroup.setDescription('A collection of notifications which indicate a login failure from a remote initiator to a local target.')
cIscsiIntrLgnNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 20)).setObjects(("CISCO-ISCSI-MIB", "cIscsiIntrLoginFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiIntrLgnNotificationsGroup = cIscsiIntrLgnNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiIntrLgnNotificationsGroup.setDescription('A collection of notifications which indicate a login failure from a local initiator to a remote target.')
cIscsiSsnFlrNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 1, 21)).setObjects(("CISCO-ISCSI-MIB", "cIscsiInstSessionFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiSsnFlrNotificationsGroup = cIscsiSsnFlrNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: cIscsiSsnFlrNotificationsGroup.setDescription('A collection of notifications which indicate session failures occurring after login.')
cIscsiCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 2))
cIscsiComplianceV1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 94, 3, 2, 1)).setObjects(("CISCO-ISCSI-MIB", "cIscsiInstanceAttributesGroup"), ("CISCO-ISCSI-MIB", "cIscsiPortalAttributesGroup"), ("CISCO-ISCSI-MIB", "cIscsiNodeAttributesGroup"), ("CISCO-ISCSI-MIB", "cIscsiSessionAttributesGroup"), ("CISCO-ISCSI-MIB", "cIscsiSessionStatsGroup"), ("CISCO-ISCSI-MIB", "cIscsiSessionCxnErrorStatsGroup"), ("CISCO-ISCSI-MIB", "cIscsiConnectionAttributesGroup"), ("CISCO-ISCSI-MIB", "cIscsiSsnFlrNotificationsGroup"), ("CISCO-ISCSI-MIB", "cIscsiInstanceSsnErrorStatsGroup"), ("CISCO-ISCSI-MIB", "cIscsiTgtPortalAttributesGroup"), ("CISCO-ISCSI-MIB", "cIscsiTargetAttributesGroup"), ("CISCO-ISCSI-MIB", "cIscsiTargetLoginStatsGroup"), ("CISCO-ISCSI-MIB", "cIscsiTargetLogoutStatsGroup"), ("CISCO-ISCSI-MIB", "cIscsiTgtLgnNotificationsGroup"), ("CISCO-ISCSI-MIB", "cIscsiTargetAuthGroup"), ("CISCO-ISCSI-MIB", "cIscsiIntrPortalAttributesGroup"), ("CISCO-ISCSI-MIB", "cIscsiInitiatorAttributesGroup"), ("CISCO-ISCSI-MIB", "cIscsiInitiatorLoginStatsGroup"), ("CISCO-ISCSI-MIB", "cIscsiInitiatorLogoutStatsGroup"), ("CISCO-ISCSI-MIB", "cIscsiIntrLgnNotificationsGroup"), ("CISCO-ISCSI-MIB", "cIscsiInitiatorAuthGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cIscsiComplianceV1 = cIscsiComplianceV1.setStatus('current')
if mibBuilder.loadTexts: cIscsiComplianceV1.setDescription('Initial version of compliance statement based on initial version of MIB. If an implementation can be both a target and an initiator, all groups are mandatory.')
mibBuilder.exportSymbols("CISCO-ISCSI-MIB", cIscsiSsnTargetAlias=cIscsiSsnTargetAlias, cIscsiSsnInitiatorName=cIscsiSsnInitiatorName, cIscsiInitiatorAttributesEntry=cIscsiInitiatorAttributesEntry, cIscsiTargetAttributesEntry=cIscsiTargetAttributesEntry, cIscsiSsnImmediateData=cIscsiSsnImmediateData, cIscsiConnectionAttributesGroup=cIscsiConnectionAttributesGroup, cIscsiSessionAttributesTable=cIscsiSessionAttributesTable, cIscsiTgtAuthIndex=cIscsiTgtAuthIndex, cIscsiInstSsnFormatErrors=cIscsiInstSsnFormatErrors, cIscsiCxnState=cIscsiCxnState, cIscsiIntrAuthIdentity=cIscsiIntrAuthIdentity, cIscsiHeaderIntegrityTypes=cIscsiHeaderIntegrityTypes, cIscsiCxnRecvMarker=cIscsiCxnRecvMarker, cIscsiTgtLogoutOthers=cIscsiTgtLogoutOthers, cIscsiTargetPortal=cIscsiTargetPortal, cIscsiTgtAuthIdentity=cIscsiTgtAuthIdentity, cIscsiInstIndex=cIscsiInstIndex, cIscsiPortalSecondaryHdrDigest=cIscsiPortalSecondaryHdrDigest, cIscsiIntrPortalAttributesGroup=cIscsiIntrPortalAttributesGroup, cIscsiSsnAuthIdentity=cIscsiSsnAuthIdentity, cIscsiInitiatorLogoutStatsGroup=cIscsiInitiatorLogoutStatsGroup, cIscsiDataIntegrityCrc32c=cIscsiDataIntegrityCrc32c, cIscsiTargetLoginStatsEntry=cIscsiTargetLoginStatsEntry, cIscsiConnectionAttributesEntry=cIscsiConnectionAttributesEntry, cIscsiSsnFlrNotificationsGroup=cIscsiSsnFlrNotificationsGroup, cIscsiDataIntegrityTypes=cIscsiDataIntegrityTypes, cIscsiNodeErrorRecoveryLevel=cIscsiNodeErrorRecoveryLevel, cIscsiInstSsnDigestErrors=cIscsiInstSsnDigestErrors, cIscsiSsnTxDataOctets=cIscsiSsnTxDataOctets, cIscsiSsnFirstBurstSize=cIscsiSsnFirstBurstSize, cIscsiTgtLastIntrFailureName=cIscsiTgtLastIntrFailureName, cIscsiIntrLastFailureTime=cIscsiIntrLastFailureTime, cIscsiInitiatorAttributesTable=cIscsiInitiatorAttributesTable, cIscsiObjects=cIscsiObjects, cIscsiTgtPortalAttributesTable=cIscsiTgtPortalAttributesTable, cIscsiTargetAttributesTable=cIscsiTargetAttributesTable, cIscsiIntrLoginOtherFailRsps=cIscsiIntrLoginOtherFailRsps, cIscsiPortalPrimaryHdrDigest=cIscsiPortalPrimaryHdrDigest, cIscsiIntrLgnNotificationsGroup=cIscsiIntrLgnNotificationsGroup, cIscsiNodeDefaultTime2Wait=cIscsiNodeDefaultTime2Wait, cIscsiNodeDataSequenceInOrder=cIscsiNodeDataSequenceInOrder, cIscsiPortalProtocol=cIscsiPortalProtocol, cIscsiInstPortalNumber=cIscsiInstPortalNumber, cIscsiHdrIntegrityNone=cIscsiHdrIntegrityNone, cIscsiTgtPortalAttributesGroup=cIscsiTgtPortalAttributesGroup, cIscsiCxnLocalAddrType=cIscsiCxnLocalAddrType, cIscsiIntrAuthorization=cIscsiIntrAuthorization, cIscsiCxnRemotePort=cIscsiCxnRemotePort, cIscsiInstLastSsnRmtNodeName=cIscsiInstLastSsnRmtNodeName, cIscsiIntrLastTgtFailureName=cIscsiIntrLastTgtFailureName, cIscsiNodeDefaultTime2Retain=cIscsiNodeDefaultTime2Retain, cIscsiHdrIntegrityCrc32c=cIscsiHdrIntegrityCrc32c, cIscsiSessionStatsTable=cIscsiSessionStatsTable, cIscsiInstVersionMax=cIscsiInstVersionMax, cIscsiConnectionAttributesTable=cIscsiConnectionAttributesTable, cIscsiIntrLoginAuthFailRsps=cIscsiIntrLoginAuthFailRsps, cIscsiPortalSecondaryDataDigest=cIscsiPortalSecondaryDataDigest, ciscoIscsiModule=ciscoIscsiModule, cIscsiCxnLocalPort=cIscsiCxnLocalPort, cIscsiSessionStatsGroup=cIscsiSessionStatsGroup, cIscsiTgtAuthAttributesEntry=cIscsiTgtAuthAttributesEntry, cIscsiTgtLoginRedirects=cIscsiTgtLoginRedirects, cIscsiInstSessionNumber=cIscsiInstSessionNumber, cIscsiIntrAuthIndex=cIscsiIntrAuthIndex, cIscsiIntrLastTgtFailureAddr=cIscsiIntrLastTgtFailureAddr, cIscsiSsnMaxOutstandingR2T=cIscsiSsnMaxOutstandingR2T, cIscsiTargetAttributesGroup=cIscsiTargetAttributesGroup, cIscsiNodeFirstBurstSize=cIscsiNodeFirstBurstSize, cIscsiIntrPortalTag=cIscsiIntrPortalTag, cIscsiSsnDataSequenceInOrder=cIscsiSsnDataSequenceInOrder, cIscsiSsnRxDataOctets=cIscsiSsnRxDataOctets, cIscsiInstSsnCxnTimeoutErrors=cIscsiInstSsnCxnTimeoutErrors, cIscsiInstLastSsnFailureType=cIscsiInstLastSsnFailureType, cIscsiTgtLastFailureType=cIscsiTgtLastFailureType, cIscsiIntrLogoutOthers=cIscsiIntrLogoutOthers, cIscsiInitiatorLogoutStatsEntry=cIscsiInitiatorLogoutStatsEntry, cIscsiInitiatorLoginStatsGroup=cIscsiInitiatorLoginStatsGroup, cIscsiSsnBidiInitialR2T=cIscsiSsnBidiInitialR2T, cIscsiIntrLoginFailures=cIscsiIntrLoginFailures, cIscsiSsnMaxBurstSize=cIscsiSsnMaxBurstSize, cIscsiIntrPortalAttributesTable=cIscsiIntrPortalAttributesTable, cIscsiTgtLoginFailures=cIscsiTgtLoginFailures, cIscsiTgtLoginNegotiateFails=cIscsiTgtLoginNegotiateFails, cIscsiPortalAddrType=cIscsiPortalAddrType, cIscsiNodeMaxOutstandingR2T=cIscsiNodeMaxOutstandingR2T, cIscsiSsnDataPduInOrder=cIscsiSsnDataPduInOrder, cIscsiGroups=cIscsiGroups, cIscsiSsnInitialR2T=cIscsiSsnInitialR2T, cIscsiSsnType=cIscsiSsnType, cIscsiInitiator=cIscsiInitiator, cIscsiIntrAuthAttributesTable=cIscsiIntrAuthAttributesTable, cIscsiInstanceAttributesGroup=cIscsiInstanceAttributesGroup, cIscsiNodeRoles=cIscsiNodeRoles, cIscsiCxnMaxRecvDataSegLength=cIscsiCxnMaxRecvDataSegLength, cIscsiSsnCmdPdus=cIscsiSsnCmdPdus, cIscsiNotifications=cIscsiNotifications, cIscsiNodeIndex=cIscsiNodeIndex, cIscsiNodeTransportType=cIscsiNodeTransportType, cIscsiSsnTsih=cIscsiSsnTsih, cIscsiTgtAuthorization=cIscsiTgtAuthorization, cIscsiIntrLogoutNormals=cIscsiIntrLogoutNormals, cIscsiSessionAttributesEntry=cIscsiSessionAttributesEntry, cIscsiNode=cIscsiNode, cIscsiSessionCxnErrorStatsGroup=cIscsiSessionCxnErrorStatsGroup, cIscsiConnection=cIscsiConnection, cIscsiPortalMaxRecvDataSegLength=cIscsiPortalMaxRecvDataSegLength, cIscsiNodeInitialR2T=cIscsiNodeInitialR2T, cIscsiCxnRemoteAddr=cIscsiCxnRemoteAddr, cIscsiIntrLoginAuthenticateFails=cIscsiIntrLoginAuthenticateFails, cIscsiSsnConnectionNumber=cIscsiSsnConnectionNumber, cIscsiSsnDirection=cIscsiSsnDirection, cIscsiSessionCxnErrorStatsEntry=cIscsiSessionCxnErrorStatsEntry, cIscsiTgtLoginOtherFails=cIscsiTgtLoginOtherFails, cIscsiNodeAttributesTable=cIscsiNodeAttributesTable, cIscsiCxnLocalAddr=cIscsiCxnLocalAddr, cIscsiInstVendorVersion=cIscsiInstVendorVersion, cIscsiCxnDataIntegrity=cIscsiCxnDataIntegrity, cIscsiTgtAuthAttributesTable=cIscsiTgtAuthAttributesTable, cIscsiInstNodeNumber=cIscsiInstNodeNumber, cIscsiInstanceSsnErrorStatsTable=cIscsiInstanceSsnErrorStatsTable, cIscsiIntrLastFailureType=cIscsiIntrLastFailureType, cIscsiInitiatorAuthGroup=cIscsiInitiatorAuthGroup, cIscsiPortalAddr=cIscsiPortalAddr, cIscsiDescriptors=cIscsiDescriptors, cIscsiTgtAuthRowStatus=cIscsiTgtAuthRowStatus, cIscsiSessionStatsEntry=cIscsiSessionStatsEntry, cIscsiInitiatorPortal=cIscsiInitiatorPortal, cIscsiCxnProtocol=cIscsiCxnProtocol, cIscsiPortalAttributesGroup=cIscsiPortalAttributesGroup, cIscsiInstance=cIscsiInstance, cIscsiInstSsnFailures=cIscsiInstSsnFailures, cIscsiSessionCxnErrorStatsTable=cIscsiSessionCxnErrorStatsTable, cIscsiInstanceAttributesTable=cIscsiInstanceAttributesTable, cIscsiInitiatorLogoutStatsTable=cIscsiInitiatorLogoutStatsTable, cIscsiPortalIndex=cIscsiPortalIndex, cIscsiIntrLastTgtFailureAddrType=cIscsiIntrLastTgtFailureAddrType, cIscsiPortalAttributesTable=cIscsiPortalAttributesTable, cIscsiPortalAttributesEntry=cIscsiPortalAttributesEntry, cIscsiTargetLogoutStatsGroup=cIscsiTargetLogoutStatsGroup, cIscsiTgtLoginFailure=cIscsiTgtLoginFailure, cIscsiInstVersionMin=cIscsiInstVersionMin, cIscsiTgtPortalPort=cIscsiTgtPortalPort, cIscsiIntrLoginFailure=cIscsiIntrLoginFailure, cIscsiTgtLgnNotificationsGroup=cIscsiTgtLgnNotificationsGroup, cIscsiTgtLastFailureTime=cIscsiTgtLastFailureTime, CIscsiTransportProtocols=CIscsiTransportProtocols, cIscsiSession=cIscsiSession, cIscsiTgtLoginAuthenticateFails=cIscsiTgtLoginAuthenticateFails, cIscsiTargetLogoutStatsEntry=cIscsiTargetLogoutStatsEntry, cIscsiIntrLoginNegotiateFails=cIscsiIntrLoginNegotiateFails, cIscsiInitiatorAttributesGroup=cIscsiInitiatorAttributesGroup, cIscsiTgtLastIntrFailureAddr=cIscsiTgtLastIntrFailureAddr, cIscsiCxnHeaderIntegrity=cIscsiCxnHeaderIntegrity, cIscsiNodeAttributesGroup=cIscsiNodeAttributesGroup, cIscsiSessionAttributesGroup=cIscsiSessionAttributesGroup, cIscsiCompliances=cIscsiCompliances, cIscsiTargetLoginStatsGroup=cIscsiTargetLoginStatsGroup, cIscsiNodeAlias=cIscsiNodeAlias, cIscsiTgtLastIntrFailureAddrType=cIscsiTgtLastIntrFailureAddrType, cIscsiNodeDataPduInOrder=cIscsiNodeDataPduInOrder, cIscsiInstanceSsnErrorStatsGroup=cIscsiInstanceSsnErrorStatsGroup, cIscsiIntrAuthRowStatus=cIscsiIntrAuthRowStatus, cIscsiPortalRecvMarker=cIscsiPortalRecvMarker, cIscsiTargetLogoutStatsTable=cIscsiTargetLogoutStatsTable, cIscsiNodeBidiInitialR2T=cIscsiNodeBidiInitialR2T, cIscsiTargetLoginStatsTable=cIscsiTargetLoginStatsTable, cIscsiNodeAttributesEntry=cIscsiNodeAttributesEntry, cIscsiInstVendorID=cIscsiInstVendorID, cIscsiSsnIndex=cIscsiSsnIndex, cIscsiIntrLoginRedirectRsps=cIscsiIntrLoginRedirectRsps, cIscsiNodeMaxConnections=cIscsiNodeMaxConnections, cIscsiTgtLoginAuthorizeFails=cIscsiTgtLoginAuthorizeFails, cIscsiSsnCxnTimeoutErrors=cIscsiSsnCxnTimeoutErrors, cIscsiCxnIndex=cIscsiCxnIndex, cIscsiNodeImmediateData=cIscsiNodeImmediateData, cIscsiSsnErrorRecoveryLevel=cIscsiSsnErrorRecoveryLevel, cIscsiPortalRoles=cIscsiPortalRoles, cIscsiIntrPortalAttributesEntry=cIscsiIntrPortalAttributesEntry, cIscsiCxnSendMarker=cIscsiCxnSendMarker, cIscsiCxnCid=cIscsiCxnCid, cIscsiSsnInitiatorAlias=cIscsiSsnInitiatorAlias, cIscsiCxnRemoteAddrType=cIscsiCxnRemoteAddrType, cIscsiSsnDigestErrors=cIscsiSsnDigestErrors, cIscsiComplianceV1=cIscsiComplianceV1, cIscsiIntrAuthAttributesEntry=cIscsiIntrAuthAttributesEntry, cIscsiSsnRspPdus=cIscsiSsnRspPdus, cIscsiInstSessionFailure=cIscsiInstSessionFailure, PYSNMP_MODULE_ID=ciscoIscsiModule, cIscsiNodeName=cIscsiNodeName, cIscsiPortalPrimaryDataDigest=cIscsiPortalPrimaryDataDigest, cIscsiTgtPortalAttributesEntry=cIscsiTgtPortalAttributesEntry, cIscsiInitiatorLoginStatsEntry=cIscsiInitiatorLoginStatsEntry, cIscsiTargetAuthGroup=cIscsiTargetAuthGroup, cIscsiDataIntegrityNone=cIscsiDataIntegrityNone, cIscsiNotificationsPrefix=cIscsiNotificationsPrefix, cIscsiNodeMaxBurstSize=cIscsiNodeMaxBurstSize, cIscsiTgtLogoutNormals=cIscsiTgtLogoutNormals, cIscsiTarget=cIscsiTarget, cIscsiIntrLoginAcceptRsps=cIscsiIntrLoginAcceptRsps, cIscsiSsnTargetName=cIscsiSsnTargetName, cIscsiInstanceAttributesEntry=cIscsiInstanceAttributesEntry, cIscsiInitiatorLoginStatsTable=cIscsiInitiatorLoginStatsTable, cIscsiInstanceSsnErrorStatsEntry=cIscsiInstanceSsnErrorStatsEntry, cIscsiPortal=cIscsiPortal, cIscsiInstDescr=cIscsiInstDescr, cIscsiTgtPortalTag=cIscsiTgtPortalTag, cIscsiTgtLoginAccepts=cIscsiTgtLoginAccepts, cIscsiSsnIsid=cIscsiSsnIsid, CIscsiDigestMethod=CIscsiDigestMethod, cIscsiPortalRowStatus=cIscsiPortalRowStatus, cIscsiConformance=cIscsiConformance)
