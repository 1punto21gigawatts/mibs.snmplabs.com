#
# PySNMP MIB module FSM7326-SWITCHING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FSM7326-SWITCHING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:16:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
fsm7326, AgentPortMask = mibBuilder.importSymbols("FSM7326-REF-MIB", "fsm7326", "AgentPortMask")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
VlanIndex, dot1qFdbId, dot1qVlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex", "dot1qFdbId", "dot1qVlanIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, TimeTicks, NotificationType, Bits, Gauge32, MibIdentifier, iso, ObjectIdentity, Counter32, Counter64, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "TimeTicks", "NotificationType", "Bits", "Gauge32", "MibIdentifier", "iso", "ObjectIdentity", "Counter32", "Counter64", "Unsigned32", "IpAddress")
TextualConvention, PhysAddress, MacAddress, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "MacAddress", "DisplayString", "RowStatus")
fsm7326Switching = ModuleIdentity((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1))
fsm7326Switching.setRevisions(('2003-02-06 18:35',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fsm7326Switching.setRevisionsDescriptions(('',))
if mibBuilder.loadTexts: fsm7326Switching.setLastUpdated('200311101200Z')
if mibBuilder.loadTexts: fsm7326Switching.setOrganization('Netgear')
if mibBuilder.loadTexts: fsm7326Switching.setContactInfo('')
if mibBuilder.loadTexts: fsm7326Switching.setDescription('')
agentInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1))
agentInventoryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 1))
agentInventorySysDescription = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySysDescription.setStatus('current')
if mibBuilder.loadTexts: agentInventorySysDescription.setDescription("The switch's Inventory system description. ")
agentInventoryMachineType = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMachineType.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMachineType.setDescription('Type of the Machine used in the Switch ')
agentInventoryBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentInventoryBurnedInMacAddress.setDescription('Burned-In MAC Address')
agentInventoryAdditionalPackages = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryAdditionalPackages.setStatus('current')
if mibBuilder.loadTexts: agentInventoryAdditionalPackages.setDescription('Lists additional functional packages available on this unit.')
agentInventorySoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: agentInventorySoftwareVersion.setDescription('Lists the version of software loaded on this unit.')
agentTrapLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 2))
agentTrapLogTotal = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTotal.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTotal.setDescription('The total number of traps sent since last reset.')
agentTrapLogTotalSinceLastViewed = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTotalSinceLastViewed.setStatus('deprecated')
if mibBuilder.loadTexts: agentTrapLogTotalSinceLastViewed.setDescription('The number of traps sent since last viewed.')
agentTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 2, 4), )
if mibBuilder.loadTexts: agentTrapLogTable.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTable.setDescription('Agent Trap Log')
agentTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 2, 4, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentTrapLogIndex"))
if mibBuilder.loadTexts: agentTrapLogEntry.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogEntry.setDescription('Agent trap log entry')
agentTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogIndex.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogIndex.setDescription('Unique index of trap entry')
agentTrapLogSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogSystemTime.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogSystemTime.setDescription('System uptime when trap was sent. This entry shows how long the system has been up when the trap occurred.')
agentTrapLogTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTrap.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTrap.setDescription('Description of the trap sent.')
agentSupportedMibTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 3), )
if mibBuilder.loadTexts: agentSupportedMibTable.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibTable.setDescription('Supported MIB table')
agentSupportedMibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 3, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentSupportedMibIndex"))
if mibBuilder.loadTexts: agentSupportedMibEntry.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibEntry.setDescription('Supported MIB entry')
agentSupportedMibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibIndex.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibIndex.setDescription('Unique index of the Supported MIB entry')
agentSupportedMibName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibName.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibName.setDescription('The name of the MIB (RFC or IEEE) that is supported.')
agentSupportedMibDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibDescription.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibDescription.setDescription('Description of the MIB (RFC or IEEE) that is supported.')
agentConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2))
agentCLIConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1))
agentLoginSessionTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 1), )
if mibBuilder.loadTexts: agentLoginSessionTable.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionTable.setDescription("A table of the switch's login session")
agentLoginSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 1, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentLoginSessionIndex"))
if mibBuilder.loadTexts: agentLoginSessionEntry.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionEntry.setDescription('Login Session Entry')
agentLoginSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIndex.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionIndex.setDescription('Agent Login Session Index of the switch')
agentLoginSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionUserName.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionUserName.setDescription('Agent Login Session UserName of the switch')
agentLoginSessionIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionIPAddress.setDescription('Agent Login Session IP Address of the switch')
agentLoginSessionConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serial", 1), ("telnet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionConnectionType.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionConnectionType.setDescription('Agent Login Session Connection Type of the switch')
agentLoginSessionIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIdleTime.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionIdleTime.setDescription('Agent Login Session Idle Time of the switch')
agentLoginSessionSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionSessionTime.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionSessionTime.setDescription('Agent Login Session Time of the switch')
agentLoginSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLoginSessionStatus.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionStatus.setDescription('Status of the user. active(1) - This connection is active. destroy(6) - Set to this value to disconnect this user.')
agentTelnetConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 2))
agentTelnetLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetLoginTimeout.setStatus('current')
if mibBuilder.loadTexts: agentTelnetLoginTimeout.setDescription('Telnet login timeout (minutes) Config telnet timeout will set the telnet session timeout value. A session is active as long as the session has not remained idle for the value set. Specify a value from 0 to 160. A value of 0 indicates that a Telnet session remains active indefinitely. Note: Changing the timeout value for active sessions does not become effective until the session is reaccessed. Any keystroke will also activate the new timeout duration.')
agentTelnetMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetMaxSessions.setStatus('current')
if mibBuilder.loadTexts: agentTelnetMaxSessions.setDescription('Maximum number of Telnet Sessions Config telnet maxsessions is an integer value from 0 to 5 that specifies the maximum number of telnet sessions that can be established. If the value is 0, no Telnet session can be established. ')
agentTelnetAllowNewMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetAllowNewMode.setStatus('current')
if mibBuilder.loadTexts: agentTelnetAllowNewMode.setDescription('Allow new telnet sessions (enable or disable) Config telnet disable means that no new Telnet sessions are to be established. Any already established session remains active until the session is ended or an abnormal network error ends it. ')
agentUserConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 3))
agentUserConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserConfigCreate.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigCreate.setDescription("Create a new user. When set with a non-empty string, a new user with that name will be created. This object will only return an empty string. This string is limited to alpha-numeric strings (uncluding the '-' and '_' characters).")
agentUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 3, 2), )
if mibBuilder.loadTexts: agentUserConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigTable.setDescription('User Config Table')
agentUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 3, 2, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentUserIndex"))
if mibBuilder.loadTexts: agentUserConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigEntry.setDescription('User Config Entry')
agentUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: agentUserIndex.setStatus('current')
if mibBuilder.loadTexts: agentUserIndex.setDescription('Agent User Config Index')
agentUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserName.setStatus('current')
if mibBuilder.loadTexts: agentUserName.setDescription("Agent User Name. This string is limited to alpha-numeric strings (including the '-' and '_' characters).")
agentUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserPassword.setStatus('current')
if mibBuilder.loadTexts: agentUserPassword.setDescription('Agent User Password This object will return an empty string even if a password is set.')
agentUserAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read", 1), ("write", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUserAccessMode.setStatus('current')
if mibBuilder.loadTexts: agentUserAccessMode.setDescription('Agent User Access Mode')
agentUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 3, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserStatus.setStatus('current')
if mibBuilder.loadTexts: agentUserStatus.setDescription('Agent User Status. active(1) - This user account is active. destroy(6) - Set to this value to remove this user account.')
agentUserAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hmacmd5", 2), ("hmacsha", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationType.setDescription('SNMPv3 User Authentication. The user passsword must be set to a string greater than or equal to 8 characters for this to be set to anything but none(1). none(1) - no authentication used hmacmd5(1) - Use HMAC-MD5 authentication hmacsha(1) - Use HMAC-SHA authentication')
agentUserEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserEncryptionType.setStatus('current')
if mibBuilder.loadTexts: agentUserEncryptionType.setDescription('SNMPv3 User Encryption Can not be set to des(2) if agentUserAuthenticationType is set to none(1). none(1) - no encryption used des(2) - DES encryption used')
agentUserEncryptionPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserEncryptionPassword.setStatus('current')
if mibBuilder.loadTexts: agentUserEncryptionPassword.setDescription('SNMPv3 User Encryption Password This object will return an empty string even if a password is set. agentUserEncryptionType must be set to des(2) before this object can be configured. This object will return an empty string even if a password is set.')
agentSerialGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 5))
agentSerialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialTimeout.setStatus('current')
if mibBuilder.loadTexts: agentSerialTimeout.setDescription('agentSerialTimeout specifies the maximum connect time(in minutes) without console activity. A value of 0 indicates that a console can be connected indefinitely. The time range is 0 to 160. ')
agentSerialBaudrate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("baud-1200", 1), ("baud-2400", 2), ("baud-4800", 3), ("baud-9600", 4), ("baud-19200", 5), ("baud-38400", 6), ("baud-57600", 7), ("baud-115200", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialBaudrate.setStatus('current')
if mibBuilder.loadTexts: agentSerialBaudrate.setDescription(' agentSerialBaudrate specifies the current baud rate at which the serial port will try to connect. The available values are 1200, 2400, 4800, 9600, 19200, 38400,57600, and 115200 baud. ')
agentSerialCharacterSize = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialCharacterSize.setStatus('current')
if mibBuilder.loadTexts: agentSerialCharacterSize.setDescription('agentSerialCharacterSize specifies the number of bits in a character. The number of bits is always 8.')
agentSerialHWFlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialHWFlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSerialHWFlowControlMode.setDescription('agentSerialHardwareFlowControl specifies whether hardware flow-control is enabled or disabled. Hardware Flow Control is always disabled.')
agentSerialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialStopBits.setStatus('current')
if mibBuilder.loadTexts: agentSerialStopBits.setDescription(' agentSerialStopBits specifies the number of Stop bits per character. The number of Stop bits is always 1.')
agentSerialParityType = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialParityType.setStatus('current')
if mibBuilder.loadTexts: agentSerialParityType.setDescription(' agentSerialParityType specifies the Parity Method used on the Serial Port. The Parity Method is always None. ')
agentLagConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2))
agentLagConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigCreate.setStatus('current')
if mibBuilder.loadTexts: agentLagConfigCreate.setDescription('Agent LAG Create. When this object is set with a non-empty string, a new LAG will be created if possible with the entered string as its name.')
agentLagSummaryConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 2), )
if mibBuilder.loadTexts: agentLagSummaryConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryConfigTable.setDescription("A summary table of the switch's LAG config entries")
agentLagSummaryConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 2, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentLagSummaryLagIndex"))
if mibBuilder.loadTexts: agentLagSummaryConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryConfigEntry.setDescription("Switch's LAG config entry")
agentLagSummaryLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryLagIndex.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryLagIndex.setDescription('Agent LAG IfIndex. This value corresponds with the LAG interface in the ifTable.')
agentLagSummaryName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryName.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryName.setDescription('Agent LAG Name. The associated name of the LAG used during creation.')
agentLagSummaryFlushTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryFlushTimer.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryFlushTimer.setDescription('Agent LAG FlushTimer.')
agentLagSummaryLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryLinkTrap.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryLinkTrap.setDescription('Agent LAG LinkTrap. Configures sending Link Up/Down traps when the LAG interface goes Up or Down.')
agentLagSummaryAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryAdminMode.setDescription('Agent LAG AdminMode. Administratively enables or disables this LAG interface.')
agentLagSummaryStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dot1d", 1), ("fast", 2), ("off", 3), ("dot1s", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryStpMode.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryStpMode.setDescription('Agent LAG StpMode If Dot1d is enabled, the valid values are: dot1d(1), fast(2), and off(3) If Dot1s is enabled, the valid values are: off(3) and dot1s(4)')
agentLagSummaryAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryAddPort.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryAddPort.setDescription('Agent LAG AddPort. Set to a non 0 value to add a port to the LAG. Values correspond to ifIndex values in the ifTable. Note: agentPortType for the port to be added must be full duplex and the same speed as previously added port(s), if any.')
agentLagSummaryDeletePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryDeletePort.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryDeletePort.setDescription('Agent LAG DeletePort. Set to a non 0 value to remove a port from the LAG. Values correspond to ifIndex values in the ifTable.')
agentLagSummaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 2, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryStatus.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryStatus.setDescription('Agent LAG Status. active(1) - This LAG is enabled. destroy(6) - Set to this value to remove the LAG.')
agentLagSummaryType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryType.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryType.setDescription('Agent LAG Type. static(1) - This LAG is staticly maintained. dynamic(2) - This LAG is dynamicly maintained.')
agentLagDetailedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 3), )
if mibBuilder.loadTexts: agentLagDetailedConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedConfigTable.setDescription("A detailed table of the switch's LAG config entries")
agentLagDetailedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 3, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentLagDetailedLagIndex"), (0, "FSM7326-SWITCHING-MIB", "agentLagDetailedIfIndex"))
if mibBuilder.loadTexts: agentLagDetailedConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedConfigEntry.setDescription("Switch's LAG config entry")
agentLagDetailedLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedLagIndex.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedLagIndex.setDescription('LAG index')
agentLagDetailedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedIfIndex.setDescription('LAG port index')
agentLagDetailedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortSpeed.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedPortSpeed.setDescription('LAG port speed. See agentPortType for a description and list of valid values.')
agentLagDetailedPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortStatus.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedPortStatus.setDescription('LAG port status. active(1) - Actively participating in the LAG. inactive(2) - Not participating in the LAG.')
agentLagConfigStaticCapability = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigStaticCapability.setStatus('current')
if mibBuilder.loadTexts: agentLagConfigStaticCapability.setDescription('Agent LAG Static Capability. Configures whether Static LAGs are supported on this device.')
agentNetworkConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 3))
agentNetworkIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIPAddress.setDescription("The switch's network ip address")
agentNetworkSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentNetworkSubnetMask.setDescription("The switch's network subnet mask")
agentNetworkDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDefaultGateway.setDescription("The switch's network default gateway")
agentNetworkBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 3, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkBurnedInMacAddress.setDescription("The switch's network Burned-In MAC address")
agentNetworkConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentNetworkConfigProtocol.setDescription("The switch's network config protocol")
agentNetworkWebMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkWebMode.setStatus('current')
if mibBuilder.loadTexts: agentNetworkWebMode.setDescription("The switch's network config protocol on next bootup")
agentNetworkJavaMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkJavaMode.setStatus('current')
if mibBuilder.loadTexts: agentNetworkJavaMode.setDescription('Configures the use of the Java interface through the Web.')
agentNetworkMgmtVlan = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkMgmtVlan.setStatus('current')
if mibBuilder.loadTexts: agentNetworkMgmtVlan.setDescription('The VLAN ID through which the switch can be managed using the agentNetworkIPAddress')
agentServicePortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 4))
agentServicePortIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIPAddress.setDescription("The switch's ServicePort ip address")
agentServicePortSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentServicePortSubnetMask.setDescription("The switch's ServicePort subnet mask")
agentServicePortDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDefaultGateway.setDescription("The switch's ServicePort default gateway")
agentServicePortBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 4, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentServicePortBurnedInMacAddress.setDescription("The switch's ServicePort Burned-In MAC address")
agentServicePortConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentServicePortConfigProtocol.setDescription("The switch's ServicePort config protocol")
agentSnmpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6))
agentSnmpCommunityCreate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityCreate.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityCreate.setDescription('Creates a new SNMP Community entry. Defaults: IPAddress 0.0.0.0 IpMask 0.0.0.0 AccessMode read-only Status config')
agentSnmpCommunityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 2), )
if mibBuilder.loadTexts: agentSnmpCommunityConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityConfigTable.setDescription("A table of the switch's SNMP Config entries")
agentSnmpCommunityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 2, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentSnmpCommunityIndex"))
if mibBuilder.loadTexts: agentSnmpCommunityConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityConfigEntry.setDescription("Switch's SNMP Config entry")
agentSnmpCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSnmpCommunityIndex.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityIndex.setDescription("The switch's Snmp Community Index")
agentSnmpCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityName.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityName.setDescription("The switch's Snmp Community Name This name identifies each SNMP community; the name can be up to 16 characters, and it is case-sensitive. Community names in the SNMP community must be unique. If you make multiple entries using the same community name, the first entry is kept and processed and all duplicate entries are ignored. ")
agentSnmpCommunityIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityIPAddress.setDescription("The switch's Snmp Community IP Address Client IP Address - This attribute is an IP address (or portion thereof) from which this device will accept SNMP packets with the associated community. The requesting entity's IP address is logical-ANDed with the Client IP Mask and the result must match the Client IP Address. Note: If the Client IP Mask is set to 0.0.0.0, a Client IP Address of 0.0.0.0 matches all IP addresses. ")
agentSnmpCommunityIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityIPMask.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityIPMask.setDescription("The switch's Snmp Community IP Mask Client IP Mask - This attribute is a mask to be logical-ANDed with the requesting entity's IP address before comparison with the Client IP Address. If the result matches with Client IP Address then the address is an authenticated IP address. For example, if the Client IP Address is 9.47.128.0 and the corresponding Client IP Mask is 255.255.255.0, a range of incoming IP addresses would match, that is, the incoming IP addresses could be a value in the following range: 9.47.128.0 to 9.47.128.255. To have a specific IP address be the only authenticated IP address, set the Client IP Address to the required IP address and set the Client IP Mask to 255.255.255.255. ")
agentSnmpCommunityAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-only", 1), ("read-write", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityAccessMode.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityAccessMode.setDescription("The switch's Snmp Community Access Mode Access Mode - This value can be read-only or read/write. A community with a read-only access allows for switch information to be displayed. A community with a read/write access allows for configuration changes to be made and for information to be displayed. ")
agentSnmpCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("config", 3), ("destroy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityStatus.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityStatus.setDescription("The switch's Snmp Community Status. active(1) - This community is active, allowing SNMP managers associated with this community to manage the switch according to its access right. notInService(2) - This community is not active; no SNMP requests using this community will be accepted. In this case the SNMP manager associated with this community cannot manage the switch until the Status is changed back to active(1). config(3) - The community Status must be set to this value in order to configure it. When creating a new community entry, initial Status will be set to this value. destroy(4) - Set to this value to remove the community from the agent.")
agentSnmpTrapReceiverCreate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverCreate.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverCreate.setDescription('Creates a new trap receiver entry. Defaults: IPAddress 0.0.0.0 status config')
agentSnmpTrapReceiverConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 4), )
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigTable.setDescription('Trap messages are sent across a network to an SNMP Network Manager. These messages alert the manager to events occurring within the switch or on the network. Up to six simultaneous trap receivers are supported. ')
agentSnmpTrapReceiverConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 4, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentSnmpTrapReceiverIndex"))
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigEntry.setDescription("Switch's Snmp Trace Receiver Config entry")
agentSnmpTrapReceiverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSnmpTrapReceiverIndex.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverIndex.setDescription("The switch's Snmp Trap Receiver Index")
agentSnmpTrapReceiverCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverCommunityName.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverCommunityName.setDescription("The switch's Snmp Trap Receiver Community Name. This is the SNMP community name of the remote network manager; the name can be up to 16 characters, and is case-sensitive. ")
agentSnmpTrapReceiverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverIPAddress.setDescription('IP Address - Each IP address parameter is four integer numbers. The numbers range from 0 to 255. ')
agentSnmpTrapReceiverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("config", 3), ("destroy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverStatus.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverStatus.setDescription("The switch's Snmp Trap Reciever Status. active(1) - This trap receiver is active, allowing SNMP Traps to be sent to this receiver. notInService(2) - This trap reciever is not active; no SNMP Traps will be sent to this reciever until it's set back to active(1). config(3) - The trap reciever Status must be set to this value in order to configure it. When creating a new trap receiver entry, the Status will initially be set to this value. Note: agentSnmpTrapReceiverIPAddress must be set to non-zero before changing to active(1) or notInService(2). destroy(4) - Set to this value to remove the trap receiver entry from the agent.")
agentSnmpTrapFlagsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 5))
agentSnmpAuthenticationTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpAuthenticationTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpAuthenticationTrapFlag.setDescription('Authentication Flag - Enable/Disable authentication Flag.')
agentSnmpLinkUpDownTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpLinkUpDownTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpLinkUpDownTrapFlag.setDescription('Link Up/Down Flag - Enable/Disable Link Up/Link Down traps for the entire switch. When set to Enable, the Link Up/Down traps will be sent only if the Link Trap flag setting associated with the port (Port Configuration Menu) is set to Enable. ')
agentSnmpMultipleUsersTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpMultipleUsersTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpMultipleUsersTrapFlag.setDescription('Multiple Users Flag - Enable/Disable Multiple User traps. When the value is set to Enable, a Multiple User Trap is sent whenever someone logs in to the terminal interface (EIA 232 or Telnet) and there is already an existing terminal interface session. ')
agentSnmpSpanningTreeTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpSpanningTreeTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpSpanningTreeTrapFlag.setDescription('Spanning Tree Flag - This flag enables the sending of new root traps and topology change notification traps.')
agentSnmpBroadcastStormTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 6, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpBroadcastStormTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpBroadcastStormTrapFlag.setDescription('Broadcast Storm Flag - This flag enables or disables the broadcast storm trap. You must also enable Broadcast Storm Recovery Mode (see the Switch Configuration Menu). When this value is set to Enable and Broadcast Storm Recovery mode is set to Enable, the Broadcast Storm Start/End traps are sent when the switch enters and leaves Broadcast Storm Recovery. ')
agentSpanningTreeConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 7))
agentSpanningTreeMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSpanningTreeMode.setStatus('current')
if mibBuilder.loadTexts: agentSpanningTreeMode.setDescription("The switch's Spanning Tree Switch Status")
agentSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8))
agentSwitchAddressAgingTimeoutTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 4), )
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutTable.setDescription("The switch's address aging timeout table")
agentSwitchAddressAgingTimeoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 4, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qFdbId"))
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutEntry.setDescription('Aging information about a specific Filtering Database.')
agentSwitchAddressAgingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeout.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeout.setDescription("The FDB entry's address aging timeout (in seconds)")
agentSwitchBroadcastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBroadcastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchBroadcastControlMode.setDescription('The switch config broadcast allows you to enable or disable broadcast storm recovery mode. When you specify Enable for Broadcast Storm Recovery and the broadcast traffic on any Ethernet port exceeds 20 percent of the link speed, the switch blocks (discards) the broadcast traffic until the broadcast traffic returns to 10 percent or less. Upper limit for 10M link is 20% and lower limit is 10%. For 100M link Upper limit is 5% and lower limit is 2%')
agentSwitchDot3FlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDot3FlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDot3FlowControlMode.setDescription('Config switchconfig flowcontrol allows you to enable or disable 802.3x flow control for the switch. This value applies to only full-duplex mode ports. ')
agentSwitchIGMPSnoopingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 6))
agentSwitchIGMPSnoopingAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIGMPSnoopingAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIGMPSnoopingAdminMode.setDescription('This enables or disables IGMP Snooping on the system. ')
agentSwitchIGMPSnoopingGroupMembershipInterval = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIGMPSnoopingGroupMembershipInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIGMPSnoopingGroupMembershipInterval.setDescription('The amount of time in seconds a switch will wait for a report for a particular group on a particular interface before it deletes the interface from the entry. ')
agentSwitchIGMPSnoopingMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIGMPSnoopingMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIGMPSnoopingMaxResponseTime.setDescription('The amount of time in seconds a switch will wait after sending a query on an interface because it did not receive a report for a particular group in that interface. This value must be less than agentSwitchIGMPSnoopingQueryInterval.')
agentSwitchIGMPSnoopingMRPExpirationTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIGMPSnoopingMRPExpirationTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIGMPSnoopingMRPExpirationTime.setDescription('Multicast Router Present Expiration Time. The amount of time in seconds a switch will wait for a query to be received on an interface before the interface is removed from the list of interfaces with mutlticast routers attached. A value of zero indicates an infinite timeout, i.e. the entries in the list will not expire.')
agentSwitchIGMPSnoopingPortMask = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 6, 5), AgentPortMask().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIGMPSnoopingPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIGMPSnoopingPortMask.setDescription('IGMP Snooping Port Mask. This allows configuration of IGMP Snooping on selected ports. IGMP Snooping cannot be enabled on an interface that has routing enabled, or is a member of a LAG. If a port which has IGMP Snooping enabled becomes enabled for routing, or is enlisted as a member of a LAG, IGMP Snooping functionality will be disabled on that port. IGMP Snooping functionality will be subsequently be reenabled if routing is disabled or LAG membership is removed from an interface that had previously had IGMP Snooping enabled. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
agentSwitchIGMPSnoopingMulticastControlFramesProcessed = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchIGMPSnoopingMulticastControlFramesProcessed.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIGMPSnoopingMulticastControlFramesProcessed.setDescription('Multicast Control Frames Processed by CPU. The number of multicast control frames that have been processed by the CPU.')
agentSwitchMFDBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7))
agentSwitchMFDBTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 1), )
if mibBuilder.loadTexts: agentSwitchMFDBTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBTable.setDescription('The Multicast Forwarding Database table')
agentSwitchMFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 1, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentSwitchMFDBVlanId"), (0, "FSM7326-SWITCHING-MIB", "agentSwitchMFDBMacAddress"), (0, "FSM7326-SWITCHING-MIB", "agentSwitchMFDBProtocolType"))
if mibBuilder.loadTexts: agentSwitchMFDBEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBEntry.setDescription('Contains Forwarding and Filtering information per Vlan Index, MAC Address, and Component User.')
agentSwitchMFDBVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 1, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBVlanId.setDescription('Vlan Index for which this entry is associated with.')
agentSwitchMFDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBMacAddress.setDescription('A multicast MAC address for which the switch has forwarding and or filtering information.')
agentSwitchMFDBProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("gmrp", 2), ("igmp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBProtocolType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBProtocolType.setDescription('The component that is responsible for this entry in the Multicast Forwarding Database.')
agentSwitchMFDBType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBType.setDescription('This displays the type of the entry. static(1) - Entries configured by the end user dynamic(2) - Entries added as a result of a learning process or protocol')
agentSwitchMFDBDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBDescription.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBDescription.setDescription('Text description of this multicast table entry.')
agentSwitchMFDBForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 1, 1, 6), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBForwardingPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBForwardingPortMask.setDescription('BitMask indicating which ports this entry indicates should be forwarded. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
agentSwitchMFDBFilteringPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 1, 1, 7), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBFilteringPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBFilteringPortMask.setDescription('BitMask indicating which ports this entry indicates should be filtered. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
agentSwitchMFDBSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 2), )
if mibBuilder.loadTexts: agentSwitchMFDBSummaryTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryTable.setDescription('The Multicast Forwarding Database Summary table')
agentSwitchMFDBSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 2, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentSwitchMFDBSummaryVlanId"), (0, "FSM7326-SWITCHING-MIB", "agentSwitchMFDBSummaryMacAddress"))
if mibBuilder.loadTexts: agentSwitchMFDBSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryEntry.setDescription('Summarizes the forwarding ports for all components registered for all MFDB table entries with the same Vlan Index and MAC Address.')
agentSwitchMFDBSummaryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 2, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryVlanId.setDescription('Vlan Index for which this entry is associated with.')
agentSwitchMFDBSummaryMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryMacAddress.setDescription('A multicast MAC address for which the switch has forwarding and or filtering information.')
agentSwitchMFDBSummaryForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 2, 1, 3), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryForwardingPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryForwardingPortMask.setDescription('Port Mask indicating which ports this entry indicates should be forwarded. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
agentSwitchMFDBMaxTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMaxTableEntries.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBMaxTableEntries.setDescription('This displays the maximum number of entries that can possibly be in the Multicast Forwarding Database table.')
agentSwitchMFDBMostEntriesUsed = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMostEntriesUsed.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBMostEntriesUsed.setDescription('This displays the largest number of entries that have been present in the Multicast Forwarding Database table. This value is also known as the MFDB high-water mark.')
agentSwitchMFDBCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 8, 7, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBCurrentEntries.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBCurrentEntries.setDescription('This displays the current number of entries in the Multicast Forwarding Database table.')
agentTransferConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9))
agentTransferUploadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9, 1))
agentTransferUploadMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tftp", 1), ("xmodem", 2), ("ymodem", 3), ("zmodem", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadMode.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadMode.setDescription('Transfer upload mode configures the mode to use when uploading from the switch. The mode is either X/Y/ZMODEM or TFTP. X/Y/ZMODEM is valid only when the file transfer is initiated by the serial EIA 232 port. ')
agentTransferUploadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServerIP.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadServerIP.setDescription('Transfer upload tftpserverip configures the IP address of the server where the file is located. It is valid only when the Transfer Mode is TFTP. The address is 4 integer bytes ranging from 0 to 255.')
agentTransferUploadPath = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadPath.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadPath.setDescription('Transfer upload tftppath configures the directory path where the file is to be uploaded to. The switch remembers the last file path used. ')
agentTransferUploadFilename = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadFilename.setDescription('Transfer upload tftpfilename configures the file name for the file being uploaded from the switch. It can be up to 32 alphanumeric characters. The switch remembers the last file name used. File path can be appended to the file name if the string is less than 17 characters. Otherwise, the File Path field will need to be used and the File Name will be appended to the File Path as is. An example would be File Path set to c:\\tftp\\code\\ and File Name set to e1r1v1.opr. Note: File Name, File Path, and TFTP Server IP Address are applicable only if the Transfer Mode is TFTP.')
agentTransferUploadDataType = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("config", 2), ("errorlog", 3), ("messagelog", 4), ("traplog", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadDataType.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadDataType.setDescription('Transfer upload datatype configures the type of file to upload from the switch. The types for upload are: - Configuration File - Error log - Message log - Trap log ')
agentTransferUploadStart = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadStart.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadStart.setDescription('Transfer upload start will start an upload transfer. The agentTransferUploadMode object must not be set to xmodem(2), ymodem(3), or zmodem(4) to initiate a transfer via SNMP.')
agentTransferUploadStatus = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferUploadStatus.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadStatus.setDescription('Indicates the current status of an upload transfer.')
agentTransferDownloadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9, 2))
agentTransferDownloadMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tftp", 1), ("xmodem", 2), ("ymodem", 3), ("zmodem", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadMode.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadMode.setDescription('Transfer download mode configures the mode to use when downloading to the switch. The mode is either X/Y/ZMODEM or TFTP. X/Y/ZMODEM is valid only when the file transfer is initiated by the serial EIA 232 port. ')
agentTransferDownloadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServerIP.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadServerIP.setDescription('Transfer download tftpserverip configures the IP address of the server where the file is located. It is valid only when the Transfer Mode is TFTP. The address is 4 integer bytes ranging from 0 to 255. ')
agentTransferDownloadPath = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadPath.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadPath.setDescription('Transfer download tftppath configures the directory path where the file is located. The switch remembers the last file path used. ')
agentTransferDownloadFilename = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadFilename.setDescription('Transfer download tftpfilename configures the file name for the file being downloaded to the switch. It can be up to 32 alphanumeric characters. The switch remembers the last file name used. File path can be appended to the file name if the string is less than 33 characters. Otherwise, the File Path field will need to be used and the File Name will be appended to the File Path as is. An example would be File Path set to c:\\tftp\\code\\ and File Name set to e1r1v1.opr. Note: File Name, File Path, and TFTP Server IP Address are applicable only if the Transfer Mode is TFTP.')
agentTransferDownloadDataType = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("code", 2), ("config", 3), ("sshkey-rsa1", 4), ("sshkey-rsa2", 5), ("sshkey-dsa", 6), ("sslpem-root", 7), ("sslpem-server", 8), ("sslpem-dhweak", 9), ("sslpem-dhstrong", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadDataType.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadDataType.setDescription('Transfer download datatype configures the type of file to download to the switch. The types for download are: code - Code File config - Configuration File sshkey-rsa1 - SSH-1 RSA Key File sshkey-rsa2 - SSH-2 RSA Key PEM File sshkey-dsa - SSH-2 DSA Key PEM File sslpem-root - SSL Trusted Root Certificate PEM File sslpem-server - SSL Server Certificate PEM File sslpem-dhweak - SSL DH Weak Encryption Parameter PEM File sslpem-dhstrong - SSL DH Strong Encryption Parameter PEM File Note: SSH Key files can only be downloaded if SSH Server is administratively disabled, and there are no active SSH sessions. ')
agentTransferDownloadStart = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadStart.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadStart.setDescription('Transfer download start will start an download transfer. The agentTransferDownloadMode object must not be set to xmodem(2), ymodem(3), or zmodem(4) to initiate a transfer via SNMP.')
agentTransferDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 9, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferDownloadStatus.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadStatus.setDescription('Indicates the current status of an download transfer.')
agentPortMirroringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 10))
agentMirroredPortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentMirroredPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentMirroredPortIfIndex.setDescription('IfIndex of the mirrored port')
agentProbePortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProbePortIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentProbePortIfIndex.setDescription('IfIndex of the probe port')
agentPortMirroringMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirroringMode.setStatus('current')
if mibBuilder.loadTexts: agentPortMirroringMode.setDescription('Port mirroring mode: enable - enable mirroring mode disable - disable mirroring mode delete - clear MirroredPort and Probe Port configuration')
agentDot3adAggPortTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 12), )
if mibBuilder.loadTexts: agentDot3adAggPortTable.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPortTable.setDescription('This table provides 802.3ad link aggregation information for each physical port that is not available through the standard MIB.')
agentDot3adAggPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 12, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentDot3adAggPort"))
if mibBuilder.loadTexts: agentDot3adAggPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPortEntry.setDescription('Information about a table entry. The agentDot3adAggPort identifies the external interface number of the port.')
agentDot3adAggPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot3adAggPort.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPort.setDescription('ifIndex of this physical port')
agentDot3adAggPortLACPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot3adAggPortLACPMode.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPortLACPMode.setDescription('Enable/disable 802.3ad LACP on this port')
agentPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13), )
if mibBuilder.loadTexts: agentPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigTable.setDescription("A table of the switch's physical port config entries")
agentPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentPortDot1dBasePort"))
if mibBuilder.loadTexts: agentPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigEntry.setDescription("Switch's physical port config entry")
agentPortDot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortDot1dBasePort.setStatus('current')
if mibBuilder.loadTexts: agentPortDot1dBasePort.setDescription('The port number of this port.')
agentPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentPortIfIndex.setDescription("The switch's Port IfIndex")
agentPortIanaType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortIanaType.setStatus('current')
if mibBuilder.loadTexts: agentPortIanaType.setDescription("The switch's Port Type")
agentPortSTPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("fast", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSTPMode.setStatus('current')
if mibBuilder.loadTexts: agentPortSTPMode.setDescription("The switch's Port Spanning Tree Protocol Mode STP mode values are: dot1d (the default) fast, indicates you want to use the fast spanning tree mode off, indicates the STP mode is turned off for a particular port This object is only supported when the Dot1d Protocol is enabled.")
agentPortSTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("blocking", 1), ("listening", 2), ("learning", 3), ("forwarding", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortSTPState.setStatus('current')
if mibBuilder.loadTexts: agentPortSTPState.setDescription("The switch's Port Spanning Tree Protocol State. This object is only supported when the Dot1d Protocol is enabled.")
agentPortAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentPortAdminMode.setDescription("The switch's Port Admin Mode")
agentPortPhysicalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("auto-negotiate", 1), ("half-10", 2), ("full-10", 3), ("half-100", 4), ("full-100", 5), ("half-100fx", 6), ("full-100fx", 7), ("full-1000sx", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortPhysicalMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortPhysicalMode.setDescription("The switch's Port Speed Mode. This is the configured physical mode. This object is read-only for gigabit ports")
agentPortPhysicalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("auto-negotiate", 1), ("half-10", 2), ("full-10", 3), ("half-100", 4), ("full-100", 5), ("half-100fx", 6), ("full-100fx", 7), ("full-1000sx", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortPhysicalStatus.setStatus('obsolete')
if mibBuilder.loadTexts: agentPortPhysicalStatus.setDescription("The switch's Port Physical Speed Status. This is the current actual speed.")
agentPortLinkTrapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortLinkTrapMode.setStatus('current')
if mibBuilder.loadTexts: agentPortLinkTrapMode.setDescription('If enabled, link up and link down traps will be sent for this port.')
agentPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortClearStats.setStatus('current')
if mibBuilder.loadTexts: agentPortClearStats.setDescription('clear stats for this port only')
agentPortDefaultType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 11), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDefaultType.setReference('RFC 2668')
if mibBuilder.loadTexts: agentPortDefaultType.setStatus('current')
if mibBuilder.loadTexts: agentPortDefaultType.setDescription('This object identifies the default administrative port type, to be used in conjunction with the operational port type denoted by agentPortType. The set of possible values for this object is the same as the set defined for the agentPortType object. This object represents the administratively-configured type of the MAU. If auto-negotiation is not enabled or is not implemented for this MAU, the value of this object determines the operational type of the MAU. In this case, a set to this object will force the MAU into the specified operating mode. If auto-negotiation is implemented and enabled for this MAU, the operational type of the MAU is determined by auto-negotiation, and the value of this object denotes the type to which the MAU will automatically revert if/when auto-negotiation is later disabled. The valid values for this object are: dot3MauType10BaseTHD dot3MauType10BaseTFD dot3MauType100BaseTXHD dot3MauType100BaseTXFD dot3MauType100BaseFXFD dot3MauType1000BaseSXFD')
agentPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortType.setReference('RFC 2668')
if mibBuilder.loadTexts: agentPortType.setStatus('current')
if mibBuilder.loadTexts: agentPortType.setDescription('This object identifies the port type. An initial set of MAU types are defined in RFC 2668. The assignment of OBJECT IDENTIFIERs to new types of MAUs is managed by the IANA. If the MAU type is unknown, the object identifier unknownMauType OBJECT IDENTIFIER ::= { 0 0 } is returned. Note that unknownMauType is a syntactically valid object identifier, and any conformant implementation of ASN.1 and the BER must be able to generate and recognize this value. This object represents the operational type of the MAU, as determined by either (1) the result of the auto-negotiation function or (2) if auto-negotiation is not enabled or is not implemented for this MAU, by the value of the object agentPortDefaultType, or (3) for the GigE card a value determined by the GBIC connected to the card. In case (2), a set to the object agentPortDefaultType will force the MAU into the new operating mode. The valid values for this object are: dot3MauType10BaseTHD dot3MauType10BaseTFD dot3MauType100BaseTXHD dot3MauType100BaseTXFD dot3MauType100BaseFXFD dot3MauType1000BaseSXFD dot3MauType1000BaseTFD')
agentPortAutoNegAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAutoNegAdminStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortAutoNegAdminStatus.setDescription('This object identifies the administration status of auto negotiation for this port.')
agentPortDot3FlowControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDot3FlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentPortDot3FlowControlMode.setDescription('Config flowcontrol allows you to enable or disable 802.3x flow control for this port. This value applies to only full-duplex mode ports. ')
agentPortDVlanTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDVlanTagMode.setStatus('current')
if mibBuilder.loadTexts: agentPortDVlanTagMode.setDescription('Controls the Double Vlan Tag mode on this port.')
agentPortDVlanTagEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDVlanTagEthertype.setStatus('current')
if mibBuilder.loadTexts: agentPortDVlanTagEthertype.setDescription('Configures the Ethertype for the Double Vlan Tag for this port. Commonly used are the Ethertypes for vman tags (34984, or 0x88A8) and dot1q tags (33024, or 0x8100).')
agentPortDVlanTagCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDVlanTagCustomerId.setStatus('current')
if mibBuilder.loadTexts: agentPortDVlanTagCustomerId.setDescription('Configures the Customer ID for the Double Vlan Tag for this port.')
agentPortMaxFrameSizeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortMaxFrameSizeLimit.setStatus('current')
if mibBuilder.loadTexts: agentPortMaxFrameSizeLimit.setDescription('This object identifies the largest value that can be configured for agentPortMaxFrameSize')
agentPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 13, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: agentPortMaxFrameSize.setDescription('This object identifies the currently configured maximum frame size value for this port. The maximmum value that this object can be set to is the value of agentPortMaxFrameSizeLimit. For Ethernet ports which support 802.1Q vlan tagging, the minimum value that this object can be set to is 1522')
agentProtocolConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 14))
agentProtocolGroupCreate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupCreate.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupCreate.setDescription('Set to non-empty string to create a Protocol-Based VLAN group.')
agentProtocolGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 14, 2), )
if mibBuilder.loadTexts: agentProtocolGroupTable.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupTable.setDescription("A table of the switch's Protocol-based VLAN entries")
agentProtocolGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 14, 2, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentProtocolGroupId"))
if mibBuilder.loadTexts: agentProtocolGroupEntry.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupEntry.setDescription("Switch's Protocol-based VLAN entry")
agentProtocolGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentProtocolGroupId.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupId.setDescription('Group identifier of the Protocol-based VLAN entry.')
agentProtocolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 14, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentProtocolGroupName.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupName.setDescription('Group name of the Protocol-based VLAN entry.')
agentProtocolGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 14, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupVlanId.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupVlanId.setDescription('VLAN associated with the Protocol-based VLAN entry. Set to 0 to remove.')
agentProtocolGroupProtocolIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupProtocolIP.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupProtocolIP.setDescription('The status of the IP protocol association with the Protocol-based VLAN entry.')
agentProtocolGroupProtocolARP = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupProtocolARP.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupProtocolARP.setDescription('The status of the ARP protocol association with the Protocol-based VLAN entry.')
agentProtocolGroupProtocolIPX = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupProtocolIPX.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupProtocolIPX.setDescription('The status of the IPX protocol association with the Protocol-based VLAN entry.')
agentProtocolGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 14, 2, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupStatus.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupStatus.setDescription('The status of the Protocol-based VLAN entry. active(1) - this entry is active destroy(6) - remove this entry')
agentProtocolGroupPortTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 14, 3), )
if mibBuilder.loadTexts: agentProtocolGroupPortTable.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupPortTable.setDescription("A table of the switch's physical port config entries")
agentProtocolGroupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 14, 3, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentProtocolGroupId"), (0, "FSM7326-SWITCHING-MIB", "agentProtocolGroupPortIfIndex"))
if mibBuilder.loadTexts: agentProtocolGroupPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupPortEntry.setDescription("Switch's physical port config entry")
agentProtocolGroupPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentProtocolGroupPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupPortIfIndex.setDescription('The interface number of this instance.')
agentProtocolGroupPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 14, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentProtocolGroupPortStatus.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupPortStatus.setDescription('The status of this entry. active(1) - the port is associated with this group createAndGo(4) - add the port to this group createAndWait(5) - add the port to this group destroy(6) - remove the port from this group')
agentStpSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15))
agentStpConfigDigestKey = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpConfigDigestKey.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigDigestKey.setDescription('The MST configuration digest key.')
agentStpConfigFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpConfigFormatSelector.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigFormatSelector.setDescription('The MST configuration format selector. A value other than 0 (zero) indicates non-support for the IEEE 802.1s standard.')
agentStpConfigName = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpConfigName.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigName.setDescription('The MST configuration name of at most 32 characters.')
agentStpConfigRevision = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpConfigRevision.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigRevision.setDescription('The MST configuration revision. The default value is 1.')
agentStpForceVersion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("dot1w", 2), ("dot1s", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpForceVersion.setStatus('current')
if mibBuilder.loadTexts: agentStpForceVersion.setDescription('The MST configuration force protocol version. The default version is dot1s.')
agentStpAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentStpAdminMode.setDescription('The spanning tree operational status. enable(1) - enables spanning tree operational status on the switch. disable(2) - disables spanning tree operational status on the switch. The default status is disabled.')
agentStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 7), )
if mibBuilder.loadTexts: agentStpPortTable.setStatus('current')
if mibBuilder.loadTexts: agentStpPortTable.setDescription('STP port table.')
agentStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpPortEntry.setDescription('STP port entry.')
agentStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpPortState.setStatus('current')
if mibBuilder.loadTexts: agentStpPortState.setDescription('The administrative bridge port state. enable(1) - enables the port. disable(2) - disables the port. The default port state is enabled for the first 4095 ports and disabled for any ports beyond.')
agentStpPortStatsMstpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduRx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduRx.setDescription('The MSTP BPDUs received on a specific port.')
agentStpPortStatsMstpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduTx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduTx.setDescription('The MSTP BPDUs sent from a specific port.')
agentStpPortStatsRstpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduRx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduRx.setDescription('The RSTP BPDUs received on a specific port.')
agentStpPortStatsRstpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduTx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduTx.setDescription('The RSTP BPDUs sent from a specific port.')
agentStpPortStatsStpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsStpBpduRx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsStpBpduRx.setDescription('The STP BPDUs received on a specific port.')
agentStpPortStatsStpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsStpBpduTx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsStpBpduTx.setDescription('The STP BPDUs sent from a specific port.')
agentStpPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 7, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortUpTime.setStatus('current')
if mibBuilder.loadTexts: agentStpPortUpTime.setDescription('Time since port was reset. It is displayed in days, hours, minutes, and seconds.')
agentStpPortMigrationCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpPortMigrationCheck.setStatus('current')
if mibBuilder.loadTexts: agentStpPortMigrationCheck.setDescription("Force the specified port to transmit RSTP or MSTP BPDU's. Supported values: false(0) - BPDUs are not to be transmitted. true(1) - BPDUs are to be transmitted A non-zero value indicates that BPDUs are to be sent on the specified port.")
agentStpCstConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 8))
agentStpCstHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 8, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstHelloTime.setStatus('current')
if mibBuilder.loadTexts: agentStpCstHelloTime.setDescription('The MSTP root port hello time for the CIST.')
agentStpCstMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 8, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstMaxAge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstMaxAge.setDescription('The MSTP root port max age for the CIST.')
agentStpCstRegionalRootId = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 8, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRegionalRootId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstRegionalRootId.setDescription('The MSTP regional root identifier for the CIST.')
agentStpCstRegionalRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 8, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRegionalRootPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstRegionalRootPathCost.setDescription('The MSTP regional root path cost for the CIST.')
agentStpCstRootFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 8, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRootFwdDelay.setStatus('current')
if mibBuilder.loadTexts: agentStpCstRootFwdDelay.setDescription('The MSTP root port forward delay for the CIST.')
agentStpCstBridgeFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 8, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeFwdDelay.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeFwdDelay.setDescription('The MSTP bridge forward delay for the CIST. The default value is 15.')
agentStpCstBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 8, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeHelloTime.setDescription('The MSTP bridge hello time for the CIST. The default value is 2.')
agentStpCstBridgeHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 8, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstBridgeHoldTime.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeHoldTime.setDescription('The MSTP bridge hold time for the CIST.')
agentStpCstBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 8, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeMaxAge.setDescription('The MSTP bridge max age for the CIST. The default value is 20.')
agentStpCstPortTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 9), )
if mibBuilder.loadTexts: agentStpCstPortTable.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortTable.setDescription('CIST port table.')
agentStpCstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpCstPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortEntry.setDescription('CIST port entry.')
agentStpCstPortOperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortOperEdge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortOperEdge.setDescription('The MSTP operational status of a specific port for the CIST.')
agentStpCstPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortOperPointToPoint.setDescription('The MSTP operational point to point mac of a specific port for the CIST.')
agentStpCstPortTopologyChangeAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortTopologyChangeAck.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortTopologyChangeAck.setDescription('The MSTP topology change acknowledge for a specific port in the CIST.')
agentStpCstPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortEdge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortEdge.setDescription('The administrative state of a specific port in CIST. enable(1) - enables the port. disable(2) - disables the port. The default port state is disabled.')
agentStpCstPortForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortForwardingState.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortForwardingState.setDescription('The MSTP forwarding state of a specific port in CIST.')
agentStpCstPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 9, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortId.setDescription('The MSTP port identifier of a specific port in CIST.')
agentStpCstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 9, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortPathCost.setDescription('The MSTP port path cost in CIST. The default value will correspond to the recommendation specified in IEEE 802.1s Table 13-2 which varies depending upon link speed.')
agentStpCstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 9, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortPriority.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortPriority.setDescription('The MSTP port priority in CIST. The priority is in the increments of 16. The default value is 128.')
agentStpCstDesignatedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedBridgeId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstDesignatedBridgeId.setDescription('The MSTP designated bridge ID of a specific port in CIST.')
agentStpCstDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 9, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstDesignatedCost.setDescription('The MSTP designated cost of a specific port in CIST.')
agentStpCstDesignatedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 9, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstDesignatedPortId.setDescription('The MSTP designated port ID of a specific port in CIST.')
agentStpMstTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 10), )
if mibBuilder.loadTexts: agentStpMstTable.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTable.setDescription('MST table.')
agentStpMstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 10, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: agentStpMstEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpMstEntry.setDescription('MST entry.')
agentStpMstId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstId.setDescription('The MSTP instance ID.')
agentStpMstBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstBridgePriority.setStatus('current')
if mibBuilder.loadTexts: agentStpMstBridgePriority.setDescription('The MSTP bridge priority in a specific instance. The priority is in the increments of 4096. The recommended default value is 32768.')
agentStpMstBridgeIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstBridgeIdentifier.setStatus('current')
if mibBuilder.loadTexts: agentStpMstBridgeIdentifier.setDescription('The MSTP bridge identifier in a specific instance.')
agentStpMstDesignatedRootId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedRootId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedRootId.setDescription('The MSTP designated root bridge identifier in a specific instance.')
agentStpMstRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstRootPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpMstRootPathCost.setDescription('The MSTP root path cost in a specific instance.')
agentStpMstRootPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstRootPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstRootPortId.setDescription('The MSTP root port ID in a specific instance.')
agentStpMstTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 10, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTimeSinceTopologyChange.setDescription('The MSTP time since the last topology change in a specific instance.')
agentStpMstTopologyChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTopologyChangeCount.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTopologyChangeCount.setDescription('The MSTP count of topology changes in a specific instance.')
agentStpMstTopologyChangeParm = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTopologyChangeParm.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTopologyChangeParm.setDescription('The MSTP topology change parameter in a specific instance.')
agentStpMstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 10, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStpMstRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStpMstRowStatus.setDescription('The MSTP instance status. Supported values: active(1) - valid instance. createAndGo(4) - used to create a new instance. destroy(6) - removes an instance.')
agentStpMstPortTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 11), )
if mibBuilder.loadTexts: agentStpMstPortTable.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortTable.setDescription('MST port table.')
agentStpMstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 11, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentStpMstId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpMstPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortEntry.setDescription('MST port entry.')
agentStpMstPortForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortForwardingState.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortForwardingState.setDescription('The MSTP forwarding state of a specific port in a specific instance.')
agentStpMstPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortId.setDescription('The MSTP port identifier of a specific port in a specific instance.')
agentStpMstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstPortPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortPathCost.setDescription('The MSTP port path cost in a specific instance. The default value will correspond to the recommendation specified in IEEE 802.1s Table 13-2 which varies depending upon link speed.')
agentStpMstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstPortPriority.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortPriority.setDescription('The MSTP port priority in a specific instance. The priority is in the increments of 16. The default value is 128.')
agentStpMstDesignatedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedBridgeId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedBridgeId.setDescription('The MSTP designated bridge ID of a specific port in a specific instance.')
agentStpMstDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedCost.setDescription('The MSTP designated cost of a specific port in a specific instance.')
agentStpMstDesignatedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 11, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedPortId.setDescription('The MSTP designated port ID of a specific port in a specific instance.')
agentStpMstVlanTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 12), )
if mibBuilder.loadTexts: agentStpMstVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentStpMstVlanTable.setDescription('MST VLAN table.')
agentStpMstVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 12, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentStpMstId"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: agentStpMstVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpMstVlanEntry.setDescription('MST VLAN entry.')
agentStpMstVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 15, 12, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStpMstVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStpMstVlanRowStatus.setDescription('The association status of an MSTP instance and a VLAN. Supported values: active(1) - valid association between an MSTP instance and a VLAN. createAndGo(4) - used to create a new association between an MSTP instance and a VLAN. destroy(6) - removes the association between an MSTP instance and a VLAN.')
agentAuthenticationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16))
agentAuthenticationListCreate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListCreate.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListCreate.setDescription('Authentication List Create If set to a non empty string, creates a new Authentication List for configuration.')
agentAuthenticationListTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16, 2), )
if mibBuilder.loadTexts: agentAuthenticationListTable.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListTable.setDescription('MST VLAN table.')
agentAuthenticationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16, 2, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentAuthenticationListIndex"))
if mibBuilder.loadTexts: agentAuthenticationListEntry.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListEntry.setDescription('MST VLAN entry.')
agentAuthenticationListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentAuthenticationListIndex.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListIndex.setDescription('Authenticaiton List Index Unique number used for indexing into this table.')
agentAuthenticationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthenticationListName.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListName.setDescription('Authenticaiton List Name Unique name used to identify the Authentication List from other tables.')
agentAuthenticationListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("radius", 2), ("reject", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod1.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod1.setDescription('Authenticion List Method 1 Configures the first authentication method to use when this list is specified.')
agentAuthenticationListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("local", 2), ("radius", 3), ("reject", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod2.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod2.setDescription('Authenticion List Method 2 Configures the second authentication method to use when this list is specified.')
agentAuthenticationListMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("local", 2), ("radius", 3), ("reject", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod3.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod3.setDescription('Authenticion List Method 3 Configures the third authentication method to use when this list is specified.')
agentAuthenticationListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListStatus.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListStatus.setDescription('The status of the Authentication List. Supported values: active(1) - indicates a valid Authenticaiton List destroy(6) - removes the Authentication List.')
agentUserConfigDefaultAuthenticationList = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserConfigDefaultAuthenticationList.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigDefaultAuthenticationList.setDescription('Default Authentication List This object configures which authentication list to use for users which do not have an Authentication List configured. The list must be configured before setting.')
agentUserAuthenticationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16, 4), )
if mibBuilder.loadTexts: agentUserAuthenticationConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationConfigTable.setDescription('User Authentication Config Table')
agentUserAuthenticationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16, 4, 1), )
agentUserConfigEntry.registerAugmentions(("FSM7326-SWITCHING-MIB", "agentUserAuthenticationConfigEntry"))
agentUserAuthenticationConfigEntry.setIndexNames(*agentUserConfigEntry.getIndexNames())
if mibBuilder.loadTexts: agentUserAuthenticationConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationConfigEntry.setDescription('User Authentication Config Entry')
agentUserAuthenticationList = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAuthenticationList.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationList.setDescription('User Authentication List This object configures which authentication list to use for this user. The list must be configured before setting.')
agentUserPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16, 5), )
if mibBuilder.loadTexts: agentUserPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentUserPortConfigTable.setDescription('User Port Config Table')
agentUserPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16, 5, 1), )
agentUserConfigEntry.registerAugmentions(("FSM7326-SWITCHING-MIB", "agentUserPortConfigEntry"))
agentUserPortConfigEntry.setIndexNames(*agentUserConfigEntry.getIndexNames())
if mibBuilder.loadTexts: agentUserPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentUserPortConfigEntry.setDescription('User Port Config Entry')
agentUserPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 16, 5, 1, 1), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserPortSecurity.setStatus('current')
if mibBuilder.loadTexts: agentUserPortSecurity.setDescription('User Port Port Security This object configures which ports the user has access to. Ports are indexed based on dot1dBasePort entries in dot1dBasePortTable.')
agentClassOfServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 17))
agentClassOfServiceTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 17, 1), )
if mibBuilder.loadTexts: agentClassOfServiceTable.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServiceTable.setDescription('A table that contains information about the 802.1p priority mapping to traffic class priority queue for every physical port.')
agentClassOfServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 17, 1, 1), ).setIndexNames((0, "FSM7326-SWITCHING-MIB", "agentClassOfServicePriority"))
if mibBuilder.loadTexts: agentClassOfServiceEntry.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServiceEntry.setDescription('A 802.1p priority mapped to a traffic class priority queue.')
agentClassOfServicePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: agentClassOfServicePriority.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePriority.setDescription('The Priority value determined for the received frame. This value is equivalent to the priority indicated in the tagged frame received, or one of the evaluated priorities, determined according to the media-type. For untagged frames received from Ethernet media, this value is equal to the dot1dPortDefaultUserPriority value for the ingress port.')
agentClassOfServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClassOfServiceClass.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServiceClass.setDescription('Traffic class priority queue the received frame is mapped to.')
agentSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 3))
agentSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSaveConfig.setStatus('current')
if mibBuilder.loadTexts: agentSaveConfig.setDescription('Enable agentSaveConfig will initiate an configuration save to nvram. Disable agentSaveConfig after a configuration save will reset agentSaveConfigStatus back to notInitiated state.')
agentClearConfig = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearConfig.setStatus('current')
if mibBuilder.loadTexts: agentClearConfig.setDescription('clear config to factory defaults')
agentClearLags = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearLags.setStatus('current')
if mibBuilder.loadTexts: agentClearLags.setDescription('clear lag configuration')
agentClearLoginSessions = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearLoginSessions.setStatus('current')
if mibBuilder.loadTexts: agentClearLoginSessions.setDescription('close all telnet sessions')
agentClearPasswords = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearPasswords.setStatus('current')
if mibBuilder.loadTexts: agentClearPasswords.setDescription('reset passwords')
agentClearPortStats = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearPortStats.setStatus('current')
if mibBuilder.loadTexts: agentClearPortStats.setDescription('clear all port statistics')
agentClearSwitchStats = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearSwitchStats.setStatus('current')
if mibBuilder.loadTexts: agentClearSwitchStats.setDescription('clear all switch statistics')
agentClearTrapLog = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearTrapLog.setStatus('current')
if mibBuilder.loadTexts: agentClearTrapLog.setDescription('clear trap log')
agentClearVlan = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearVlan.setStatus('current')
if mibBuilder.loadTexts: agentClearVlan.setDescription('clear vlan entries')
agentResetSystem = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentResetSystem.setStatus('current')
if mibBuilder.loadTexts: agentResetSystem.setDescription('reset the switch')
agentSaveConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInitiated", 1), ("savingInProcess", 2), ("savingComplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSaveConfigStatus.setStatus('current')
if mibBuilder.loadTexts: agentSaveConfigStatus.setDescription('Indicates the current status of an save configuration request.')
agentCableTesterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 4))
agentCableTesterStatus = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("success", 2), ("failure", 3), ("uninitialized", 4))).clone('uninitialized')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCableTesterStatus.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterStatus.setDescription('Status of the Virtual Cable Tester active(1) - cable testing is in progress. Set to this value to start the test. success(2) - A successful test was performed. Cannot be set. failure(3) - A failure was encountered during the test. Cannot be set. uninitialized(4) - No test has been performed yet. Cannot be set.')
agentCableTesterIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 4, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCableTesterIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterIfIndex.setDescription('Determines on which port to perform the cable test. Limited to copper based ports.')
agentCableTesterCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("open", 2), ("short", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterCableStatus.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterCableStatus.setDescription('Indicates the results of the Cable Test. normal(1) - The cable is working correctly. open(2) - The cable is disconnected or there is a faulty connector. short(3) - There is an electrical short in the cable. unknown(4) - No test has been performed yet, or a test is currently in progress.')
agentCableTesterMinimumCableLength = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterMinimumCableLength.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterMinimumCableLength.setDescription('The estimated length of the cable in meters. This value indicates the shortest length estimated. This object will return 0 if agentCableTesterStatus is not success(2) or the cable length is unknown.')
agentCableTesterMaximumCableLength = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 4, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterMaximumCableLength.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterMaximumCableLength.setDescription('The estimated length of the cable in meters. This value indicates the longest length estimated. This object will return 0 if agentCableTesterStatus is not success(2) or the cable length is unknown.')
agentCableTesterCableFailureLocation = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 4, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCableTesterCableFailureLocation.setStatus('current')
if mibBuilder.loadTexts: agentCableTesterCableFailureLocation.setDescription('The estimated distance in meters from the end of the cable to the failure location. This object will return 0 if agentCableTesterStatus is not success(2).')
fsm7326SwitchingTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 50))
multipleUsersTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 50, 1))
if mibBuilder.loadTexts: multipleUsersTrap.setStatus('current')
if mibBuilder.loadTexts: multipleUsersTrap.setDescription('trapMgrMultipleUsersLogTrap.')
broadcastStormStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 50, 2))
if mibBuilder.loadTexts: broadcastStormStartTrap.setStatus('current')
if mibBuilder.loadTexts: broadcastStormStartTrap.setDescription('trapMgrBCastStormStartLogTrap.')
broadcastStormEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 50, 3))
if mibBuilder.loadTexts: broadcastStormEndTrap.setStatus('current')
if mibBuilder.loadTexts: broadcastStormEndTrap.setDescription('trapMgrBCastStormEndLogTrap.')
linkFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 50, 4))
if mibBuilder.loadTexts: linkFailureTrap.setStatus('current')
if mibBuilder.loadTexts: linkFailureTrap.setDescription('trapMgrLinkFailureLogTrap.')
vlanRequestFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 50, 5)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRequestFailureTrap.setStatus('current')
if mibBuilder.loadTexts: vlanRequestFailureTrap.setDescription('trapMgrVlanRequestFailureLogTrap')
vlanDeleteLastTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 50, 6)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDeleteLastTrap.setStatus('current')
if mibBuilder.loadTexts: vlanDeleteLastTrap.setDescription('trapMgrLastVlanDeleteLastLogTrap')
vlanDefaultCfgFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 50, 7)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDefaultCfgFailureTrap.setStatus('current')
if mibBuilder.loadTexts: vlanDefaultCfgFailureTrap.setDescription('trapMgrDefaultVlanCfgFailureLogTrap')
vlanRestoreFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 50, 8)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRestoreFailureTrap.setStatus('current')
if mibBuilder.loadTexts: vlanRestoreFailureTrap.setDescription('trapMgrVlanRestoreFailureLogTrap')
fanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 50, 9))
if mibBuilder.loadTexts: fanFailureTrap.setStatus('current')
if mibBuilder.loadTexts: fanFailureTrap.setDescription('trapMgrFanFailureLogTrap.')
stpInstanceNewRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 50, 10)).setObjects(("FSM7326-SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: stpInstanceNewRootTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceNewRootTrap.setDescription('trapMgrStpInstanceNewRootTrap')
stpInstanceTopologyChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 50, 11)).setObjects(("FSM7326-SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: stpInstanceTopologyChangeTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceTopologyChangeTrap.setDescription('trapMgrStpInstanceTopologyChange')
powerSupplyStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4526, 1, 9, 1, 50, 12))
if mibBuilder.loadTexts: powerSupplyStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: powerSupplyStatusChangeTrap.setDescription('powerSupplyStatusChangeTrap')
mibBuilder.exportSymbols("FSM7326-SWITCHING-MIB", agentClassOfServiceEntry=agentClassOfServiceEntry, agentSwitchMFDBMacAddress=agentSwitchMFDBMacAddress, agentSnmpConfigGroup=agentSnmpConfigGroup, agentPortClearStats=agentPortClearStats, agentSwitchAddressAgingTimeoutEntry=agentSwitchAddressAgingTimeoutEntry, multipleUsersTrap=multipleUsersTrap, agentSnmpCommunityIndex=agentSnmpCommunityIndex, agentStpMstTopologyChangeParm=agentStpMstTopologyChangeParm, stpInstanceNewRootTrap=stpInstanceNewRootTrap, agentStpConfigRevision=agentStpConfigRevision, agentStpMstDesignatedBridgeId=agentStpMstDesignatedBridgeId, agentLoginSessionIndex=agentLoginSessionIndex, agentPortType=agentPortType, fsm7326SwitchingTraps=fsm7326SwitchingTraps, agentLagSummaryLinkTrap=agentLagSummaryLinkTrap, agentStpMstDesignatedCost=agentStpMstDesignatedCost, agentSwitchMFDBDescription=agentSwitchMFDBDescription, agentStpMstPortId=agentStpMstPortId, agentSerialGroup=agentSerialGroup, agentLagDetailedPortSpeed=agentLagDetailedPortSpeed, agentUserAuthenticationConfigTable=agentUserAuthenticationConfigTable, agentProtocolGroupEntry=agentProtocolGroupEntry, agentPortMaxFrameSizeLimit=agentPortMaxFrameSizeLimit, agentSnmpTrapReceiverIPAddress=agentSnmpTrapReceiverIPAddress, agentCLIConfigGroup=agentCLIConfigGroup, agentMirroredPortIfIndex=agentMirroredPortIfIndex, PYSNMP_MODULE_ID=fsm7326Switching, agentStpPortUpTime=agentStpPortUpTime, agentAuthenticationListName=agentAuthenticationListName, agentSerialHWFlowControlMode=agentSerialHWFlowControlMode, agentClearPasswords=agentClearPasswords, agentServicePortBurnedInMacAddress=agentServicePortBurnedInMacAddress, agentSupportedMibIndex=agentSupportedMibIndex, agentTrapLogGroup=agentTrapLogGroup, agentSwitchIGMPSnoopingPortMask=agentSwitchIGMPSnoopingPortMask, agentLagDetailedIfIndex=agentLagDetailedIfIndex, agentStpCstPortForwardingState=agentStpCstPortForwardingState, agentNetworkWebMode=agentNetworkWebMode, agentAuthenticationListCreate=agentAuthenticationListCreate, agentSnmpCommunityConfigTable=agentSnmpCommunityConfigTable, agentStpMstRootPortId=agentStpMstRootPortId, agentStpCstPortId=agentStpCstPortId, agentPortIanaType=agentPortIanaType, agentPortConfigTable=agentPortConfigTable, agentProtocolGroupTable=agentProtocolGroupTable, agentProbePortIfIndex=agentProbePortIfIndex, agentTransferDownloadMode=agentTransferDownloadMode, agentStpMstRowStatus=agentStpMstRowStatus, agentProtocolConfigGroup=agentProtocolConfigGroup, agentSwitchMFDBMaxTableEntries=agentSwitchMFDBMaxTableEntries, agentSystemGroup=agentSystemGroup, agentSwitchDot3FlowControlMode=agentSwitchDot3FlowControlMode, agentStpCstMaxAge=agentStpCstMaxAge, agentAuthenticationListTable=agentAuthenticationListTable, agentTransferUploadServerIP=agentTransferUploadServerIP, agentLoginSessionIdleTime=agentLoginSessionIdleTime, agentSwitchMFDBSummaryTable=agentSwitchMFDBSummaryTable, agentSupportedMibTable=agentSupportedMibTable, agentSwitchMFDBEntry=agentSwitchMFDBEntry, agentSaveConfig=agentSaveConfig, vlanDefaultCfgFailureTrap=vlanDefaultCfgFailureTrap, agentPortDefaultType=agentPortDefaultType, powerSupplyStatusChangeTrap=powerSupplyStatusChangeTrap, agentNetworkConfigProtocol=agentNetworkConfigProtocol, agentStpMstPortTable=agentStpMstPortTable, agentStpMstBridgeIdentifier=agentStpMstBridgeIdentifier, agentClearLoginSessions=agentClearLoginSessions, agentStpMstBridgePriority=agentStpMstBridgePriority, agentLagConfigCreate=agentLagConfigCreate, agentTransferDownloadStatus=agentTransferDownloadStatus, agentInfoGroup=agentInfoGroup, agentStpConfigName=agentStpConfigName, agentTransferUploadStatus=agentTransferUploadStatus, agentResetSystem=agentResetSystem, agentStpPortEntry=agentStpPortEntry, agentAuthenticationListIndex=agentAuthenticationListIndex, agentCableTesterMinimumCableLength=agentCableTesterMinimumCableLength, agentInventoryAdditionalPackages=agentInventoryAdditionalPackages, agentSwitchMFDBMostEntriesUsed=agentSwitchMFDBMostEntriesUsed, agentSnmpCommunityConfigEntry=agentSnmpCommunityConfigEntry, agentTransferUploadPath=agentTransferUploadPath, agentSwitchMFDBVlanId=agentSwitchMFDBVlanId, agentStpCstRootFwdDelay=agentStpCstRootFwdDelay, agentPortPhysicalMode=agentPortPhysicalMode, agentLagSummaryConfigEntry=agentLagSummaryConfigEntry, agentPortMirroringMode=agentPortMirroringMode, agentSwitchIGMPSnoopingMulticastControlFramesProcessed=agentSwitchIGMPSnoopingMulticastControlFramesProcessed, agentServicePortDefaultGateway=agentServicePortDefaultGateway, agentLagDetailedConfigEntry=agentLagDetailedConfigEntry, agentStpPortStatsRstpBpduTx=agentStpPortStatsRstpBpduTx, agentStpSwitchConfigGroup=agentStpSwitchConfigGroup, agentClassOfServiceGroup=agentClassOfServiceGroup, agentProtocolGroupPortStatus=agentProtocolGroupPortStatus, agentLagConfigGroup=agentLagConfigGroup, stpInstanceTopologyChangeTrap=stpInstanceTopologyChangeTrap, agentPortDVlanTagMode=agentPortDVlanTagMode, agentStpMstVlanRowStatus=agentStpMstVlanRowStatus, agentTrapLogTable=agentTrapLogTable, agentStpMstPortPriority=agentStpMstPortPriority, agentStpMstId=agentStpMstId, agentUserConfigDefaultAuthenticationList=agentUserConfigDefaultAuthenticationList, agentLagSummaryFlushTimer=agentLagSummaryFlushTimer, agentTransferDownloadDataType=agentTransferDownloadDataType, agentUserAccessMode=agentUserAccessMode, agentProtocolGroupProtocolIP=agentProtocolGroupProtocolIP, agentStpCstPortEdge=agentStpCstPortEdge, agentLagSummaryStatus=agentLagSummaryStatus, agentSnmpTrapFlagsConfigGroup=agentSnmpTrapFlagsConfigGroup, agentServicePortIPAddress=agentServicePortIPAddress, agentPortPhysicalStatus=agentPortPhysicalStatus, broadcastStormEndTrap=broadcastStormEndTrap, agentClearSwitchStats=agentClearSwitchStats, agentSwitchConfigGroup=agentSwitchConfigGroup, agentPortDVlanTagCustomerId=agentPortDVlanTagCustomerId, agentStpMstTable=agentStpMstTable, agentSerialStopBits=agentSerialStopBits, agentSaveConfigStatus=agentSaveConfigStatus, agentUserStatus=agentUserStatus, agentTelnetAllowNewMode=agentTelnetAllowNewMode, agentSupportedMibDescription=agentSupportedMibDescription, agentDot3adAggPort=agentDot3adAggPort, agentStpMstPortPathCost=agentStpMstPortPathCost, agentSwitchAddressAgingTimeout=agentSwitchAddressAgingTimeout, agentProtocolGroupProtocolIPX=agentProtocolGroupProtocolIPX, agentTransferDownloadServerIP=agentTransferDownloadServerIP, agentAuthenticationListEntry=agentAuthenticationListEntry, agentSwitchIGMPSnoopingAdminMode=agentSwitchIGMPSnoopingAdminMode, agentServicePortConfigProtocol=agentServicePortConfigProtocol, agentPortConfigEntry=agentPortConfigEntry, agentSwitchAddressAgingTimeoutTable=agentSwitchAddressAgingTimeoutTable, agentPortDVlanTagEthertype=agentPortDVlanTagEthertype, agentAuthenticationListStatus=agentAuthenticationListStatus, agentSnmpCommunityAccessMode=agentSnmpCommunityAccessMode, agentSerialCharacterSize=agentSerialCharacterSize, agentStpMstVlanTable=agentStpMstVlanTable, agentProtocolGroupPortIfIndex=agentProtocolGroupPortIfIndex, agentStpMstEntry=agentStpMstEntry, agentStpPortStatsMstpBpduTx=agentStpPortStatsMstpBpduTx, agentProtocolGroupPortEntry=agentProtocolGroupPortEntry, agentStpMstRootPathCost=agentStpMstRootPathCost, agentInventoryGroup=agentInventoryGroup, agentNetworkJavaMode=agentNetworkJavaMode, agentSwitchMFDBSummaryEntry=agentSwitchMFDBSummaryEntry, vlanRestoreFailureTrap=vlanRestoreFailureTrap, agentAuthenticationListMethod2=agentAuthenticationListMethod2, agentNetworkConfigGroup=agentNetworkConfigGroup, agentStpMstVlanEntry=agentStpMstVlanEntry, agentUserConfigTable=agentUserConfigTable, agentDot3adAggPortEntry=agentDot3adAggPortEntry, agentTrapLogTotal=agentTrapLogTotal, agentSwitchMFDBProtocolType=agentSwitchMFDBProtocolType, agentAuthenticationGroup=agentAuthenticationGroup, agentNetworkBurnedInMacAddress=agentNetworkBurnedInMacAddress, agentUserIndex=agentUserIndex, agentStpMstDesignatedRootId=agentStpMstDesignatedRootId, agentStpCstPortOperPointToPoint=agentStpCstPortOperPointToPoint, agentStpConfigDigestKey=agentStpConfigDigestKey, agentTelnetLoginTimeout=agentTelnetLoginTimeout, agentStpCstBridgeMaxAge=agentStpCstBridgeMaxAge, agentTransferUploadDataType=agentTransferUploadDataType, agentCableTesterGroup=agentCableTesterGroup, agentStpPortState=agentStpPortState, agentLoginSessionUserName=agentLoginSessionUserName, agentSnmpTrapReceiverIndex=agentSnmpTrapReceiverIndex, agentTransferUploadMode=agentTransferUploadMode, agentLagDetailedLagIndex=agentLagDetailedLagIndex, agentLagSummaryStpMode=agentLagSummaryStpMode, agentSupportedMibName=agentSupportedMibName, agentTrapLogSystemTime=agentTrapLogSystemTime, agentStpCstHelloTime=agentStpCstHelloTime, agentSwitchMFDBSummaryVlanId=agentSwitchMFDBSummaryVlanId, agentLagSummaryName=agentLagSummaryName, agentTrapLogTotalSinceLastViewed=agentTrapLogTotalSinceLastViewed, agentPortMaxFrameSize=agentPortMaxFrameSize, agentProtocolGroupProtocolARP=agentProtocolGroupProtocolARP, agentConfigGroup=agentConfigGroup, agentLagDetailedPortStatus=agentLagDetailedPortStatus, agentSerialBaudrate=agentSerialBaudrate, agentStpConfigFormatSelector=agentStpConfigFormatSelector, agentPortDot3FlowControlMode=agentPortDot3FlowControlMode, agentTransferDownloadStart=agentTransferDownloadStart, agentAuthenticationListMethod3=agentAuthenticationListMethod3, broadcastStormStartTrap=broadcastStormStartTrap, agentStpCstBridgeHelloTime=agentStpCstBridgeHelloTime, agentNetworkDefaultGateway=agentNetworkDefaultGateway, agentUserConfigCreate=agentUserConfigCreate, agentSwitchMFDBSummaryForwardingPortMask=agentSwitchMFDBSummaryForwardingPortMask, agentStpPortStatsMstpBpduRx=agentStpPortStatsMstpBpduRx, agentLoginSessionSessionTime=agentLoginSessionSessionTime, agentTransferDownloadFilename=agentTransferDownloadFilename, agentStpCstBridgeHoldTime=agentStpCstBridgeHoldTime, agentSpanningTreeConfigGroup=agentSpanningTreeConfigGroup, agentTransferDownloadGroup=agentTransferDownloadGroup, agentUserAuthenticationConfigEntry=agentUserAuthenticationConfigEntry, agentLoginSessionConnectionType=agentLoginSessionConnectionType, agentStpMstTopologyChangeCount=agentStpMstTopologyChangeCount, agentNetworkIPAddress=agentNetworkIPAddress, agentSnmpTrapReceiverCreate=agentSnmpTrapReceiverCreate, agentProtocolGroupCreate=agentProtocolGroupCreate, agentStpMstPortEntry=agentStpMstPortEntry, agentStpPortStatsStpBpduRx=agentStpPortStatsStpBpduRx, agentPortMirroringGroup=agentPortMirroringGroup, agentLoginSessionIPAddress=agentLoginSessionIPAddress, agentSnmpCommunityIPMask=agentSnmpCommunityIPMask, fsm7326Switching=fsm7326Switching, agentStpAdminMode=agentStpAdminMode, agentSerialTimeout=agentSerialTimeout, agentLagSummaryAddPort=agentLagSummaryAddPort, agentStpPortMigrationCheck=agentStpPortMigrationCheck, agentLagSummaryLagIndex=agentLagSummaryLagIndex, agentSerialParityType=agentSerialParityType, agentSwitchBroadcastControlMode=agentSwitchBroadcastControlMode, agentUserConfigGroup=agentUserConfigGroup, agentStpCstDesignatedCost=agentStpCstDesignatedCost, agentSnmpLinkUpDownTrapFlag=agentSnmpLinkUpDownTrapFlag, agentSwitchMFDBFilteringPortMask=agentSwitchMFDBFilteringPortMask, agentStpCstPortEntry=agentStpCstPortEntry, agentStpCstDesignatedBridgeId=agentStpCstDesignatedBridgeId, agentStpCstRegionalRootPathCost=agentStpCstRegionalRootPathCost, agentServicePortSubnetMask=agentServicePortSubnetMask, linkFailureTrap=linkFailureTrap, agentUserPortConfigTable=agentUserPortConfigTable, agentClearTrapLog=agentClearTrapLog, agentLagSummaryConfigTable=agentLagSummaryConfigTable, agentDot3adAggPortLACPMode=agentDot3adAggPortLACPMode, agentSnmpCommunityIPAddress=agentSnmpCommunityIPAddress, agentStpCstPortTopologyChangeAck=agentStpCstPortTopologyChangeAck, agentStpCstBridgeFwdDelay=agentStpCstBridgeFwdDelay, agentClassOfServiceTable=agentClassOfServiceTable, agentCableTesterCableFailureLocation=agentCableTesterCableFailureLocation, agentSnmpSpanningTreeTrapFlag=agentSnmpSpanningTreeTrapFlag, agentSwitchMFDBTable=agentSwitchMFDBTable, agentSwitchMFDBCurrentEntries=agentSwitchMFDBCurrentEntries, agentLagSummaryType=agentLagSummaryType, agentSwitchIGMPSnoopingMRPExpirationTime=agentSwitchIGMPSnoopingMRPExpirationTime, agentStpForceVersion=agentStpForceVersion, agentSnmpBroadcastStormTrapFlag=agentSnmpBroadcastStormTrapFlag, agentTransferUploadStart=agentTransferUploadStart, agentAuthenticationListMethod1=agentAuthenticationListMethod1, agentLagConfigStaticCapability=agentLagConfigStaticCapability, agentSnmpCommunityStatus=agentSnmpCommunityStatus, agentSnmpAuthenticationTrapFlag=agentSnmpAuthenticationTrapFlag, agentCableTesterCableStatus=agentCableTesterCableStatus, agentTrapLogTrap=agentTrapLogTrap, fanFailureTrap=fanFailureTrap, agentSwitchMFDBType=agentSwitchMFDBType, agentPortLinkTrapMode=agentPortLinkTrapMode, agentPortAutoNegAdminStatus=agentPortAutoNegAdminStatus, agentSnmpCommunityCreate=agentSnmpCommunityCreate, agentUserConfigEntry=agentUserConfigEntry, agentPortSTPState=agentPortSTPState, agentTransferDownloadPath=agentTransferDownloadPath, agentPortDot1dBasePort=agentPortDot1dBasePort, agentDot3adAggPortTable=agentDot3adAggPortTable)
mibBuilder.exportSymbols("FSM7326-SWITCHING-MIB", agentInventorySysDescription=agentInventorySysDescription, agentStpPortStatsRstpBpduRx=agentStpPortStatsRstpBpduRx, agentSwitchMFDBForwardingPortMask=agentSwitchMFDBForwardingPortMask, agentStpCstRegionalRootId=agentStpCstRegionalRootId, agentLagSummaryDeletePort=agentLagSummaryDeletePort, agentProtocolGroupStatus=agentProtocolGroupStatus, agentTransferUploadFilename=agentTransferUploadFilename, vlanRequestFailureTrap=vlanRequestFailureTrap, agentStpPortStatsStpBpduTx=agentStpPortStatsStpBpduTx, agentTransferConfigGroup=agentTransferConfigGroup, agentUserPortSecurity=agentUserPortSecurity, agentStpCstPortPathCost=agentStpCstPortPathCost, agentLoginSessionStatus=agentLoginSessionStatus, agentProtocolGroupName=agentProtocolGroupName, agentSwitchIGMPSnoopingGroupMembershipInterval=agentSwitchIGMPSnoopingGroupMembershipInterval, agentProtocolGroupPortTable=agentProtocolGroupPortTable, agentSwitchIGMPSnoopingGroup=agentSwitchIGMPSnoopingGroup, agentLagDetailedConfigTable=agentLagDetailedConfigTable, agentPortAdminMode=agentPortAdminMode, agentUserAuthenticationList=agentUserAuthenticationList, vlanDeleteLastTrap=vlanDeleteLastTrap, agentCableTesterIfIndex=agentCableTesterIfIndex, agentSwitchMFDBGroup=agentSwitchMFDBGroup, agentSupportedMibEntry=agentSupportedMibEntry, agentProtocolGroupId=agentProtocolGroupId, agentTrapLogEntry=agentTrapLogEntry, agentClassOfServicePriority=agentClassOfServicePriority, agentStpCstPortPriority=agentStpCstPortPriority, agentSwitchMFDBSummaryMacAddress=agentSwitchMFDBSummaryMacAddress, agentStpPortTable=agentStpPortTable, agentSpanningTreeMode=agentSpanningTreeMode, agentStpMstDesignatedPortId=agentStpMstDesignatedPortId, agentSnmpTrapReceiverConfigEntry=agentSnmpTrapReceiverConfigEntry, agentClearConfig=agentClearConfig, agentClearVlan=agentClearVlan, agentProtocolGroupVlanId=agentProtocolGroupVlanId, agentClassOfServiceClass=agentClassOfServiceClass, agentStpMstPortForwardingState=agentStpMstPortForwardingState, agentInventorySoftwareVersion=agentInventorySoftwareVersion, agentUserName=agentUserName, agentTrapLogIndex=agentTrapLogIndex, agentUserPassword=agentUserPassword, agentClearLags=agentClearLags, agentSnmpCommunityName=agentSnmpCommunityName, agentNetworkSubnetMask=agentNetworkSubnetMask, agentInventoryMachineType=agentInventoryMachineType, agentStpMstTimeSinceTopologyChange=agentStpMstTimeSinceTopologyChange, agentUserPortConfigEntry=agentUserPortConfigEntry, agentPortIfIndex=agentPortIfIndex, agentLagSummaryAdminMode=agentLagSummaryAdminMode, agentSnmpTrapReceiverStatus=agentSnmpTrapReceiverStatus, agentSwitchIGMPSnoopingMaxResponseTime=agentSwitchIGMPSnoopingMaxResponseTime, agentPortSTPMode=agentPortSTPMode, agentSnmpTrapReceiverCommunityName=agentSnmpTrapReceiverCommunityName, agentStpCstPortTable=agentStpCstPortTable, agentStpCstDesignatedPortId=agentStpCstDesignatedPortId, agentUserEncryptionType=agentUserEncryptionType, agentTelnetMaxSessions=agentTelnetMaxSessions, agentCableTesterStatus=agentCableTesterStatus, agentLoginSessionTable=agentLoginSessionTable, agentUserAuthenticationType=agentUserAuthenticationType, agentNetworkMgmtVlan=agentNetworkMgmtVlan, agentStpCstPortOperEdge=agentStpCstPortOperEdge, agentTelnetConfigGroup=agentTelnetConfigGroup, agentInventoryBurnedInMacAddress=agentInventoryBurnedInMacAddress, agentLoginSessionEntry=agentLoginSessionEntry, agentSnmpMultipleUsersTrapFlag=agentSnmpMultipleUsersTrapFlag, agentSnmpTrapReceiverConfigTable=agentSnmpTrapReceiverConfigTable, agentTransferUploadGroup=agentTransferUploadGroup, agentClearPortStats=agentClearPortStats, agentServicePortConfigGroup=agentServicePortConfigGroup, agentUserEncryptionPassword=agentUserEncryptionPassword, agentStpCstConfigGroup=agentStpCstConfigGroup, agentCableTesterMaximumCableLength=agentCableTesterMaximumCableLength)
