#
# PySNMP MIB module CIENA-CES-DHCPV6-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIENA-CES-DHCPV6-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
cienaCesConfig, cienaCesNotifications = mibBuilder.importSymbols("CIENA-SMI", "cienaCesConfig", "cienaCesNotifications")
CienaGlobalState, CienaStatsClear = mibBuilder.importSymbols("CIENA-TC", "CienaGlobalState", "CienaStatsClear")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ModuleIdentity, Unsigned32, MibIdentifier, Integer32, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, iso, NotificationType, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "Unsigned32", "MibIdentifier", "Integer32", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "iso", "NotificationType", "ObjectIdentity", "Gauge32")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
cienaCesDhcpv6ClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30))
cienaCesDhcpv6ClientMIB.setRevisions(('2016-06-21 00:00', '2016-01-19 00:00', '2015-11-02 00:00', '2015-08-06 00:00', '2013-10-17 00:00', '2013-09-24 00:00', '2013-07-19 00:00', '2013-02-11 19:00', '2013-02-11 00:00', '2013-02-08 00:00', '2012-11-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cienaCesDhcpv6ClientMIB.setRevisionsDescriptions(('LDRA - updated cienaCesDhcpv6LdraMplsVcName to allow the VC name length up to 31 characters.', 'LDRA - updated Dhcpv6LdraVsName and Dhcpv6LdraMplsName to allow the VS name length up to 31 characters.', 'LDRA - added missing DHCP Relay global statistic.', 'LDRA - added support for Q-in-Q VS and MPLS VS relay agents.', 'LDRA - added new global statistics, ability to clear global stats.', 'Added length checks for LDRA IntId, rid values. EnterpriseID can be unsigned 32', 'Added support for Lightweight DHCPv6 Relay Agent (LDRA). The functionality is similar to that for the L2 relay agent.', 'The ReconfigureState was included by mistake. It should not be visible to the SNMP user until the feature is completed.', 'The OptionCodeIndex incorrectly began at 0. It was changed to begin at 1.', 'The notification cienaCesDhcpv6ClientOptionDisabledNotification, neither implemented nor released, was removed.', 'Initial creation.',))
if mibBuilder.loadTexts: cienaCesDhcpv6ClientMIB.setLastUpdated('201606210000Z')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientMIB.setDescription('The MIB module to manage DHCPv6 client on Ciena CES products.')
cienaCesDhcpv6ClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1))
cienaCesDhcpv6Client = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1))
cienaCesDhcpv6RelayAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2))
cienaCesDhcpv6RelayAgentGlobalAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 1))
cienaCesDhcpv6ClientMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 2, 30))
cienaCesDhcpv6ClientMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 2, 30, 0))
cienaCesDhcpv6ClientMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 2))
cienaCesDhcpv6ClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 2, 1))
cienaCesDhcpv6ClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 2, 2))
cienaCesDhcpv6AdminState = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 1), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6AdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6AdminState.setDescription('This object indicates if the DHCPv6 client is administratively enabled.')
cienaCesDhcpv6IfName = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6IfName.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6IfName.setDescription('The interface associated with the DHCPV6 client.')
cienaCesDhcpv6RapidCommitState = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 3), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6RapidCommitState.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6RapidCommitState.setDescription('This object indicates if rapid commit option is enabled on the DHCPv6 client.')
cienaCesDhcpv6PrefLifetimeReq = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6PrefLifetimeReq.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6PrefLifetimeReq.setDescription('The requested preferred lifetime for the IPv6 address expressed in seconds.')
cienaCesDhcpv6ValidLifetimeReq = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ValidLifetimeReq.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ValidLifetimeReq.setDescription('The requested valid lifetime for the IPv6 address expressed in seconds.')
cienaCesDhcpv6ClientOptionTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 7), )
if mibBuilder.loadTexts: cienaCesDhcpv6ClientOptionTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientOptionTable.setDescription('List of options supported by the DHCPv6 client.')
cienaCesDhcpv6ClientOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 7, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6OptionCodeIndex"))
if mibBuilder.loadTexts: cienaCesDhcpv6ClientOptionEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientOptionEntry.setDescription('An entry containing list of options supported by DHCPv6 client.')
cienaCesDhcpv6OptionCodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesDhcpv6OptionCodeIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6OptionCodeIndex.setDescription('Specifies the index used for this entry.')
cienaCesDhcpv6OptionDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6OptionDesc.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6OptionDesc.setDescription('Specifies the description for the given DHCPv6 option code.')
cienaCesDhcpv6OptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6OptionCode.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6OptionCode.setDescription('Specifies the option code specified by RFC specification.')
cienaCesDhcpv6OptionState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 7, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6OptionState.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6OptionState.setDescription('Specifies if the given option is enabled/disabled.')
cienaCesDhcpv6ClientSessTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 8), )
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessTable.setDescription('List of active DHCPv6 client sessions.')
cienaCesDhcpv6ClientSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 8, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6ClientSessMgmtIntfIndex"))
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessEntry.setDescription('An entry in the cienaCesDhcpv6ClientSessTable.')
cienaCesDhcpv6ClientSessMgmtIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessMgmtIntfIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessMgmtIntfIndex.setDescription('The mgmt interface index.')
cienaCesDhcpv6ClientSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 99))).clone(namedValues=NamedValues(("disabled", 1), ("init", 2), ("bound", 3), ("renewing", 4), ("rebinding", 5), ("solicit", 6), ("request", 7), ("reconfigure", 8), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessState.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessState.setDescription('The DHCPv6 client state of this session.')
cienaCesDhcpv6ClientSessAutoConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("none", 1), ("stateless", 2), ("stateful", 3), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessAutoConfigState.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessAutoConfigState.setDescription('The DHCPv6 autoconfiguration state of this session set by the router advertisement.')
cienaCesDhcpv6ClientSessUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessUpTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessUpTime.setDescription('The total length of time that this session has had active lease(s).')
cienaCesDhcpv6ClientSessPrefLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 8, 1, 5), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessPrefLifetime.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessPrefLifetime.setDescription('The preferred lifetime in seconds of the current lease.')
cienaCesDhcpv6ClientSessValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 8, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessValidLifetime.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessValidLifetime.setDescription('The valid lifetime in seconds of the current lease.')
cienaCesDhcpv6ClientSessLeaseExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessLeaseExpire.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessLeaseExpire.setDescription('The remaining seconds until the current lease expires.')
cienaCesDhcpv6ClientSessClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessClientId.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessClientId.setDescription("The full 'client ID' value associated with this lease.")
cienaCesDhcpv6ClientSessServerIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 8, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessServerIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessServerIpAddrType.setDescription('The IP address type (IPv6) of the server from which this lease was obtained.')
cienaCesDhcpv6ClientSessServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 8, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessServerIpAddr.setDescription('The IP address of the server from which this lease was obtained.')
cienaCesDhcpv6ClientSessServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 8, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessServerId.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessServerId.setDescription("The full 'server ID' value associated with this lease.")
cienaCesDhcpv6ClientSessT1Time = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 8, 1, 12), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessT1Time.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessT1Time.setDescription('The lease renewal (T1) time in seconds.')
cienaCesDhcpv6ClientSessT2Time = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 8, 1, 13), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessT2Time.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessT2Time.setDescription('The lease rebind (T2) time in seconds.')
cienaCesDhcpv6ClientSessStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9), )
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsTable.setDescription('The (conceptual) table listing the statistics for DHCPv6 per interface')
cienaCesDhcpv6ClientSessStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6ClientSessStatsMgmtIntfIndex"))
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsEntry.setDescription('An entry (conceptual row) in the cienaCesDhcpv6ClientSessStatsTable.')
cienaCesDhcpv6ClientSessStatsMgmtIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsMgmtIntfIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsMgmtIntfIndex.setDescription('The mgmt interface index.')
cienaCesDhcpv6ClientSessStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 2), CienaStatsClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsClear.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsClear.setDescription('This object clears the DHCPv6 session statistics.')
cienaCesDhcpv6ClientSessStatsPktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsPktsRx.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsPktsRx.setDescription('The number of DHCPv6 packets received by the client.')
cienaCesDhcpv6ClientSessStatsReply = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsReply.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsReply.setDescription('The number of DHCPv6 reply messages received by the client.')
cienaCesDhcpv6ClientSessStatsAdvert = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsAdvert.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsAdvert.setDescription('The number of DHCPv6 advertise messages received by the client.')
cienaCesDhcpv6ClientSessStatsRecfg = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsRecfg.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsRecfg.setDescription('The number of DHCPv6 reconfigure messages received by the client.')
cienaCesDhcpv6ClientSessStatsInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsInvalid.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsInvalid.setDescription('The number of DHCPv6 invalid messages received by the client.')
cienaCesDhcpv6ClientSessStatsPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsPktsTx.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsPktsTx.setDescription('The number of DHCPv6 messages sent by the client.')
cienaCesDhcpv6ClientSessStatsSolicit = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsSolicit.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsSolicit.setDescription('The number of DHCPv6 solicit messages sent by the client.')
cienaCesDhcpv6ClientSessStatsRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsRequest.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsRequest.setDescription('The number of DHCPv6 request messages sent by the client.')
cienaCesDhcpv6ClientSessStatsConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsConfirm.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsConfirm.setDescription('The number of DHCPv6 confirm messages sent by the client.')
cienaCesDhcpv6ClientSessStatsRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsRenew.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsRenew.setDescription('The number of DHCPv6 renew messages sent by the client.')
cienaCesDhcpv6ClientSessStatsRebind = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsRebind.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsRebind.setDescription('The number of DHCPv6 rebind messages sent by the client.')
cienaCesDhcpv6ClientSessStatsInfoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsInfoReq.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsInfoReq.setDescription('The number of DHCPv6 information request messages sent by the client.')
cienaCesDhcpv6ClientSessStatsRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsRelease.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsRelease.setDescription('The number of DHCPv6 release messages sent by the client.')
cienaCesDhcpv6ClientSessStatsDecline = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsDecline.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsDecline.setDescription('The number of DHCPv6 decline messages sent by the client.')
cienaCesDhcpv6ClientSessStatsTxFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 1, 9, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsTxFail.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6ClientSessStatsTxFail.setDescription('The number of DHCPv6 messages the client was unable to send.')
cienaCesDhcpv6LdraState = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 1, 1), CienaGlobalState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraState.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraState.setDescription('Specifies the global state of the Lightweight DHCPv6 Relay Agent.')
cienaCesDhcpv6LdraInterfaceId = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slotAndPort", 1), ("slotAndPortAndVlan", 2), ("intidString", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraInterfaceId.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraInterfaceId.setDescription('Specifies the type of data to use in the InterfaceID option of LDRA messages.')
cienaCesDhcpv6LdraRemoteId = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("macAddress", 1), ("hostName", 2), ("ridString", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRemoteId.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRemoteId.setDescription('Specifies the type of data to use in the RemoteID option of LDRA messages.')
cienaCesDhcpv6LdraRemoteIdOption = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRemoteIdOption.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRemoteIdOption.setDescription('If on, the RemoteID option will be added to client messages being relayed by LDRA.')
cienaCesDhcpv6LdraRemoteIdEnterpriseNo = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRemoteIdEnterpriseNo.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRemoteIdEnterpriseNo.setDescription('If the RemoteID option is on, this value will be used as the Enterprise Number in the RemoteID option field. Uses Broadband Forum value 3561 as default')
cienaCesDhcpv6LdraForward = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraForward.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraForward.setDescription("This object specifies the number of DHCPv6 packets forwarded rather than relayed. These are valid DHCPv6 frames that don't have a defined relay.")
cienaCesDhcpv6LdraRelayed = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRelayed.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRelayed.setDescription('This object specifies the number of DHCPv6 packets processed by the LDRA and not dropped.')
cienaCesDhcpv6LdraDropped = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraDropped.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraDropped.setDescription('This object specifies the number of DHCPv6 packets processed by the LDRA and dropped. Inspect the detailed statistics on each relay for more details related to dropped packets.')
cienaCesDhcpv6LdraGlobalStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 1, 9), CienaStatsClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraGlobalStatsClear.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraGlobalStatsClear.setDescription("This object when set to 'clear(1)', clears the global DHCPv6 LDRA stats.")
cienaCesDhcpv6LdraNotForRelay = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraNotForRelay.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraNotForRelay.setDescription('This object specifies the number of DHCPv6 packets passed to the relay, but were determined to not belong to the relay. The packets are dropped.')
cienaCesDhcpv6LdraStateTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 2), )
if mibBuilder.loadTexts: cienaCesDhcpv6LdraStateTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraStateTable.setDescription('Table allows changing configuration of DHCPv6 LDRA functionality for each cienaCesDhcpv6LdraVlan.')
cienaCesDhcpv6LdraStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 2, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraVlan"))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraStateEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraStateEntry.setDescription('Entry in the table to configure DHCPv6 LDRA functionality.')
cienaCesDhcpv6LdraVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576)))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVlan.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVlan.setDescription('This object specifies the VLAN on which DHCPv6 LDRA is configured.')
cienaCesDhcpv6LdraAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 2, 1, 2), CienaGlobalState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraAdminState.setDescription('This object allows the user to disable or enable DHCPv6 LDRA functionality on the given VLAN specified by cienaCesDhcpv6LdraVlan.')
cienaCesDhcpv6LdraOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 2, 1, 3), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraOperState.setDescription('This object shows the operational status of the DHCPv6 LDRA on given VLAN.')
cienaCesDhcpv6LdraRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRowStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRowStatus.setDescription("Set this object to 'Destroy' to terminate DHCPv6 LDRA Relaying on the VLAN specified by cienaCesDhcpv6LdraVlan. Set this object to 'CreateAndGo' to enable DHCPv6 LDRA Relaying on the VLAN specified by cienaCesDhcpv6LdraVlan.")
cienaCesDhcpv6LdraTrustTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 3), )
if mibBuilder.loadTexts: cienaCesDhcpv6LdraTrustTable.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraTrustTable.setDescription('This table is used to specify the slot / ports and VLANs that the DHCPv6 LDRA can trust. This table has been deprecated in favor of the cienaCesDhcpv6LdraExtTrustTable which adds a column for port status.')
cienaCesDhcpv6LdraTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 3, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraVlan"), (0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraPort"))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraTrustEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraTrustEntry.setDescription('Each entry in this table is used to specify the slot / port and VLAN to be trusted.')
cienaCesDhcpv6LdraPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraPort.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraPort.setDescription('This object is used as an index in the table and is used to specify the port.')
cienaCesDhcpv6LdraTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("client", 1), ("clientTrust", 2), ("serverTrust", 3), ("dualRoleTrust", 4), ("unTrust", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraTrustMode.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraTrustMode.setDescription('This object is used to set the port as client trusted, server trusted or not trusted. Note that the client(1) mode is deprecated. That value will never be returned. Setting that value will set the mode to clientTrust(2) instead.')
cienaCesDhcpv6LdraStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 4), )
if mibBuilder.loadTexts: cienaCesDhcpv6LdraStatsTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraStatsTable.setDescription('Table to display L2 statistics for each cienaCesDhcpv6LdraVlan.')
cienaCesDhcpv6LdraStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 4, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraVlan"))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraStatsEntry.setDescription('Entry in the table to display LDRA stats.')
cienaCesDhcpv6LdraPktsForRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraPktsForRelay.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraPktsForRelay.setDescription('This object specifies the number of packets sent to this relay process.')
cienaCesDhcpv6LdraRelayedClient = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRelayedClient.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRelayedClient.setDescription('This object specifies the number of client sourced DHCPv6 packets relayed.')
cienaCesDhcpv6LdraRelayedServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRelayedServer.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRelayedServer.setDescription('This object specifies the number of server sourced DHCPv6 packets relayed.')
cienaCesDhcpv6LdraUntrustedClientPortPktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraUntrustedClientPortPktsRx.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraUntrustedClientPortPktsRx.setDescription('This object specifies the number of client DHCPv6 packets dropped because they were received on untrusted client ports.')
cienaCesDhcpv6LdraUntrustedServerPortPktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraUntrustedServerPortPktsRx.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraUntrustedServerPortPktsRx.setDescription('This object specifies the number of server DHCPv6 packets dropped because they were received on untrusted server ports.')
cienaCesDhcpv6LdraFailedValidationPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraFailedValidationPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraFailedValidationPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped due to failed validation.')
cienaCesDhcpv6LdraInvalidConfigPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraInvalidConfigPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraInvalidConfigPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped due to LDRA configuration issues.')
cienaCesDhcpv6LdraExceededHopCountPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraExceededHopCountPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraExceededHopCountPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped due to hop count in the packet exceeding hop count the limit.')
cienaCesDhcpv6LdraExceedMTUPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraExceedMTUPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraExceedMTUPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped because the new relay frame size would exceed the MTU.')
cienaCesDhcpv6LdraNoTrustedServerPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraNoTrustedServerPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraNoTrustedServerPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped because there are no server trusted ports configured.')
cienaCesDhcpv6LdraNoTrustedClientPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraNoTrustedClientPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraNoTrustedClientPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped because there are no client trusted ports configured.')
cienaCesDhcpv6LdraIPv6FragBadExtHdrPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraIPv6FragBadExtHdrPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraIPv6FragBadExtHdrPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped due to IPv6 packet extension headers that could not be processed.')
cienaCesDhcpv6LdraGeneralErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraGeneralErrors.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraGeneralErrors.setDescription('This object specifies the number of DHCPv6 packets dropped due to unclassified errors.')
cienaCesDhcpv6LdraStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 4, 1, 14), CienaStatsClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraStatsClear.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraStatsClear.setDescription("This object when set to 'true', clears DHCPv6 LDRA stats for given VLAN.")
cienaCesDhcpv6LdraIntidStringTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 5), )
if mibBuilder.loadTexts: cienaCesDhcpv6LdraIntidStringTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraIntidStringTable.setDescription('This table is used to specify CID strings for slot / ports and VLANs that the DHCP relay agent can specify in Option 82 CID information.')
cienaCesDhcpv6LdraIntidStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 5, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraVlan"), (0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraIntidStringPort"))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraIntidStringEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraIntidStringEntry.setDescription('Each entry in this table is used to specify an interface id string for slot / port and VLAN combinations.')
cienaCesDhcpv6LdraIntidStringPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraIntidStringPort.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraIntidStringPort.setDescription('This object is used as an index in the table and is used to specify the port.')
cienaCesDhcpv6LdraIntidString = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraIntidString.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraIntidString.setDescription('This object is used to get and set the IntID string for the port.')
cienaCesDhcpv6LdraIntidStringRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraIntidStringRowStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraIntidStringRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table set this object to 'createAndGo'. To delete a row in this table set this object to 'destroy'.")
cienaCesDhcpv6LdraRidStringTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 6), )
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRidStringTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRidStringTable.setDescription('This table is used to specify RID strings for slot / ports and VLANs that the DHCP relay agent can specify in Option 82 RID information.')
cienaCesDhcpv6LdraRidStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 6, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraVlan"), (0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraRidStringPort"))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRidStringEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRidStringEntry.setDescription('Each entry in this table is used to specify an RID string for slot / port and VLAN combinations.')
cienaCesDhcpv6LdraRidStringPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRidStringPort.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRidStringPort.setDescription('This MIB object is used as an index in the table and is used to specify the port.')
cienaCesDhcpv6LdraRidString = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRidString.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRidString.setDescription('This MIB object is used to get and set the RID string for the port.')
cienaCesDhcpv6LdraRidStringRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRidStringRowStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraRidStringRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table set this object to 'createAndGo'. To delete a row in this table set this object to 'destroy'.")
cienaCesDhcpv6LdraExtTrustTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 7), )
if mibBuilder.loadTexts: cienaCesDhcpv6LdraExtTrustTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraExtTrustTable.setDescription('This table is used to specify the ports and VLANs that the DHCPv6 LDRA can trust. This table is the same as cienaCesDhcpv6LdraTrustTable with the addition of a column for the port status.')
cienaCesDhcpv6LdraExtTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 7, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraVlan"), (0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraPort"))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraExtTrustEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraExtTrustEntry.setDescription('Each entry in this table is used to specify the port and VLAN to be trusted.')
cienaCesDhcpv6LdraExtPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraExtPortState.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraExtPortState.setDescription('This object reports whether the specified port is active or inactive.')
cienaCesDhcpv6LdraExtTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("client", 1), ("clientTrust", 2), ("serverTrust", 3), ("dualRoleTrust", 4), ("unTrust", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraExtTrustMode.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraExtTrustMode.setDescription('This object is used to set the port as client trusted, server trusted or not trusted. Note that the client(1) mode is deprecated. That value will never be returned. Setting that value will set the mode to clientTrust(2) instead.')
cienaCesDhcpv6LdraVsStateTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 8), )
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsStateTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsStateTable.setDescription('Table allows changing configuration of DHCPv6 LDRA functionality for each VS.')
cienaCesDhcpv6LdraVsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 8, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraVsVlan"))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsStateEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsStateEntry.setDescription('Entry in the table to configure DHCPv6 LDRA functionality.')
cienaCesDhcpv6LdraVsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576)))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsVlan.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsVlan.setDescription('This object specifies the VS VLAN on which the DHCPv6 LDRA is configured.')
cienaCesDhcpv6LdraVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsName.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsName.setDescription('This object shows the name of the VS VLAN on which the DHCPv6 LDRA is configured.')
cienaCesDhcpv6LdraVsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 8, 1, 3), CienaGlobalState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsAdminState.setDescription('This object allows the user to disable or enable DHCPv6 LDRA functionality on the given VS VLAN specified by cienaCesDhcpv6LdraVsVlan.')
cienaCesDhcpv6LdraVsOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 8, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsOperState.setDescription('This object shows the operational status of the DHCPv6 LDRA on the given VS VLAN.')
cienaCesDhcpv6LdraVsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsRowStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsRowStatus.setDescription("Set this object to 'Destroy' to terminate DHCPv6 LDRA Relaying on the VS VLAN specified by cienaCesDhcpv6LdraVsVlan. Set this object to 'CreateAndGo' to enable DHCPv6 LDRA Relaying on the VS VLAN specified by cienaCesDhcpv6LdraVsVlan.")
cienaCesDhcpv6LdraVsTrustTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 9), )
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsTrustTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsTrustTable.setDescription('This table is used to specify the VLANs, ports and sub-VLANs that the DHCPv6 LDRA can trust.')
cienaCesDhcpv6LdraVsTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 9, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraVsVlan"), (0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraVsPort"), (0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraVsSubVlan"))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsTrustEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsTrustEntry.setDescription('Each entry in this table is used to specify the VLAN, port and sub-VLAN to be trusted.')
cienaCesDhcpv6LdraVsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsPort.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsPort.setDescription('This object is used as an index in the table and is used to specify the VS port.')
cienaCesDhcpv6LdraVsSubVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576)))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsSubVlan.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsSubVlan.setDescription('This object specifies the sub-VLAN on which the DHCPv6 LDRA is configured. Note that the special value 0 means that no sub-VLAN is associated with this particular trust entry.')
cienaCesDhcpv6LdraVsPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsPortState.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsPortState.setDescription('This object reports whether the specified port and sub-VLAN is active or inactive.')
cienaCesDhcpv6LdraVsTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("client", 1), ("clientTrust", 2), ("serverTrust", 3), ("dualRoleTrust", 4), ("unTrust", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsTrustMode.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsTrustMode.setDescription('This object is used to set the port and sub-VLAN as client trusted, server trusted or not trusted. Note that the client(1) mode is deprecated. That value will never be returned. Setting that value will set the mode to clientTrust(2) instead.')
cienaCesDhcpv6LdraVsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 10), )
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsStatsTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsStatsTable.setDescription('Table to display VS statistics for each VS LDRA.')
cienaCesDhcpv6LdraVsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 10, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraVsVlan"))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsStatsEntry.setDescription('Entry in the table to display VS LDRA statistics.')
cienaCesDhcpv6LdraVsPktsForRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsPktsForRelay.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsPktsForRelay.setDescription('This object specifies the number of packets sent to this relay process.')
cienaCesDhcpv6LdraVsRelayedClient = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsRelayedClient.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsRelayedClient.setDescription('This object specifies the number of client sourced DHCPv6 packets relayed.')
cienaCesDhcpv6LdraVsRelayedServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsRelayedServer.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsRelayedServer.setDescription('This object specifies the number of server sourced DHCPv6 packets relayed.')
cienaCesDhcpv6LdraVsUntrustedClientPortPktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsUntrustedClientPortPktsRx.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsUntrustedClientPortPktsRx.setDescription('This object specifies the number of client DHCPv6 packets dropped because they were received on untrusted client ports.')
cienaCesDhcpv6LdraVsUntrustedServerPortPktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsUntrustedServerPortPktsRx.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsUntrustedServerPortPktsRx.setDescription('This object specifies the number of server DHCPv6 packets dropped because they were received on untrusted server ports.')
cienaCesDhcpv6LdraVsFailedValidationPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsFailedValidationPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsFailedValidationPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped due to failed validation.')
cienaCesDhcpv6LdraVsInvalidConfigPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsInvalidConfigPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsInvalidConfigPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped due to LDRA configuration issues.')
cienaCesDhcpv6LdraVsExceededHopCountPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsExceededHopCountPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsExceededHopCountPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped due to hop count in the packet exceeding hop count the limit.')
cienaCesDhcpv6LdraVsExceedMTUPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsExceedMTUPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsExceedMTUPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped because the new relay frame size would exceed the MTU.')
cienaCesDhcpv6LdraVsNoTrustedServerPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsNoTrustedServerPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsNoTrustedServerPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped because there are no server trusted ports configured.')
cienaCesDhcpv6LdraVsNoTrustedClientPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsNoTrustedClientPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsNoTrustedClientPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped because there are no client trusted ports configured.')
cienaCesDhcpv6LdraVsIPv6FragBadExtHdrPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsIPv6FragBadExtHdrPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsIPv6FragBadExtHdrPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped due to IPv6 packet extension headers that could not be processed.')
cienaCesDhcpv6LdraVsGeneralErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsGeneralErrors.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsGeneralErrors.setDescription('This object reports the number of DHCPv6 packets dropped due to unclassified errors.')
cienaCesDhcpv6LdraVsStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 10, 1, 14), CienaStatsClear().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsStatsClear.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsStatsClear.setDescription("This object when set to 'true', clears DHCPv6 LDRA stats for given VLAN.")
cienaCesDhcpv6LdraVsIntidStringTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 11), )
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsIntidStringTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsIntidStringTable.setDescription('This table is used to specify CID strings for VS ports and VLANs that the LDRA can specify in Option 82 CID information.')
cienaCesDhcpv6LdraVsIntidStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 11, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraVlan"), (0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraVsPort"))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsIntidStringEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsIntidStringEntry.setDescription('Each entry in this table is used to specify an interface ID string for VS port and VLAN combinations.')
cienaCesDhcpv6LdraVsIntidString = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsIntidString.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsIntidString.setDescription('This object is used to get and set the IntID string for the port.')
cienaCesDhcpv6LdraVsIntidStringRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 11, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsIntidStringRowStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsIntidStringRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table set this object to 'createAndGo'. To delete a row in this table set this object to 'destroy'.")
cienaCesDhcpv6LdraVsRidStringTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 12), )
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsRidStringTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsRidStringTable.setDescription('This table is used to specify RID strings for VS ports and VLANs that the DHCPv6 LDRA can specify in Option 82 RID information.')
cienaCesDhcpv6LdraVsRidStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 12, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraVlan"), (0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraVsPort"))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsRidStringEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsRidStringEntry.setDescription('Each entry in this table is used to specify an RID string for VS port and VLAN combinations.')
cienaCesDhcpv6LdraVsRidString = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsRidString.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsRidString.setDescription('This MIB object is used to get and set the RID string for the port.')
cienaCesDhcpv6LdraVsRidStringRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsRidStringRowStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraVsRidStringRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table set this object to 'createAndGo'. To delete a row in this table set this object to 'destroy'.")
cienaCesDhcpv6LdraMplsStateTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 13), )
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsStateTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsStateTable.setDescription('Table allows changing configuration of DHCPv6 LDRA functionality for each MPLS VS.')
cienaCesDhcpv6LdraMplsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 13, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraMplsId"))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsStateEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsStateEntry.setDescription('Entry in the table to configure DHCPv6 LDRA functionality.')
cienaCesDhcpv6LdraMplsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1677215)))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsId.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsId.setDescription('This object specifies the MPLS VS on which DHCPv6 LDRA is configured.')
cienaCesDhcpv6LdraMplsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsName.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsName.setDescription('This object shows the name of the MPLS VS on which DHCPv6 LDRA is configured.')
cienaCesDhcpv6LdraMplsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 13, 1, 3), CienaGlobalState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsAdminState.setDescription('This object allows the user to disable or enable DHCPv6 LDRA functionality on the given MPLS VS specified by cienaCesDhcpv6LdraMplsId.')
cienaCesDhcpv6LdraMplsOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 13, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsOperState.setDescription('This object shows the operational status of the DHCPv6 LDRA on the given MPLS VS.')
cienaCesDhcpv6LdraMplsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 13, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsRowStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsRowStatus.setDescription("Set this object to 'Destroy' to terminate DHCPv6 LDRA Relaying on the MPLS VS specified by cienaCesDhcpv6LdraMplsId. Set this object to 'CreateAndGo' to enable DHCPv6 LDRA Relaying on the MPLS VS specified by cienaCesDhcpv6LdraMplsId.")
cienaCesDhcpv6LdraMplsTrustTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 14), )
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsTrustTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsTrustTable.setDescription('This table is used to specify the MPLS VSs and interfaces that the DHCPv6 LDRA can trust.')
cienaCesDhcpv6LdraMplsTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 14, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraMplsId"), (0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraMplsInterface"))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsTrustEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsTrustEntry.setDescription('Each entry in this table is used to specify the MPLS VS and interface to be trusted.')
cienaCesDhcpv6LdraMplsInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsInterface.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsInterface.setDescription('This object is used as an index in the table and is used to specify the MPLS interface.')
cienaCesDhcpv6LdraMplsVcName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsVcName.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsVcName.setDescription('This object shows the name of the MPLS VC.')
cienaCesDhcpv6LdraMplsInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsInterfaceState.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsInterfaceState.setDescription('This object reports whether the specified interface is active or inactive.')
cienaCesDhcpv6LdraMplsTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("client", 1), ("clientTrust", 2), ("serverTrust", 3), ("dualRoleTrust", 4), ("unTrust", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsTrustMode.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsTrustMode.setDescription('This object is used to set the interface as client trusted, server trusted or not trusted. Note that the client(1) mode is deprecated. That value will never be returned. Setting that value will set the mode to clientTrust(2) instead.')
cienaCesDhcpv6LdraMplsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 15), )
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsStatsTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsStatsTable.setDescription('Table to display MPLS statistics for each MPLS LDRA.')
cienaCesDhcpv6LdraMplsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 15, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraMplsId"))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsStatsEntry.setDescription('Entry in the table to display MPLS LDRA statistics.')
cienaCesDhcpv6LdraMplsPktsForRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 15, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsPktsForRelay.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsPktsForRelay.setDescription('This object specifies the number of packets sent to this relay process.')
cienaCesDhcpv6LdraMplsRelayedClient = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 15, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsRelayedClient.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsRelayedClient.setDescription('This object specifies the number of client sourced DHCPv6 packets relayed.')
cienaCesDhcpv6LdraMplsRelayedServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsRelayedServer.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsRelayedServer.setDescription('This object specifies the number of server sourced DHCPv6 packets relayed.')
cienaCesDhcpv6LdraMplsUntrustedClientInterfacePktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsUntrustedClientInterfacePktsRx.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsUntrustedClientInterfacePktsRx.setDescription('This object specifies the number of client DHCPv6 packets dropped because they were received on untrusted client interfaces.')
cienaCesDhcpv6LdraMplsUntrustedServerInterfacePktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsUntrustedServerInterfacePktsRx.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsUntrustedServerInterfacePktsRx.setDescription('This object specifies the number of server DHCPv6 packets dropped because they were received on untrusted server interfaces.')
cienaCesDhcpv6LdraMplsFailedValidationPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsFailedValidationPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsFailedValidationPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped due to failed validation.')
cienaCesDhcpv6LdraMplsInvalidConfigPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsInvalidConfigPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsInvalidConfigPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped due to LDRA configuration issues.')
cienaCesDhcpv6LdraMplsExceededHopCountPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsExceededHopCountPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsExceededHopCountPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped due to hop count in the packet exceeding hop count the limit.')
cienaCesDhcpv6LdraMplsExceedMTUPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsExceedMTUPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsExceedMTUPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped because the new relay frame size would exceed the MTU.')
cienaCesDhcpv6LdraMplsNoTrustedServerPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsNoTrustedServerPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsNoTrustedServerPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped because there are no server trusted interfaces configured.')
cienaCesDhcpv6LdraMplsNoTrustedClientPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsNoTrustedClientPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsNoTrustedClientPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped because there are no client trusted interfaces configured.')
cienaCesDhcpv6LdraMplsIPv6FragBadExtHdrPktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsIPv6FragBadExtHdrPktDrop.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsIPv6FragBadExtHdrPktDrop.setDescription('This object specifies the number of DHCPv6 packets dropped due to IPv6 packet extension headers that could not be processed.')
cienaCesDhcpv6LdraMplsGeneralErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsGeneralErrors.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsGeneralErrors.setDescription('This object specifies the number of DHCPv6 packets dropped due to unclassified errors.')
cienaCesDhcpv6LdraMplsStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 15, 1, 14), CienaStatsClear().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsStatsClear.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsStatsClear.setDescription("This object when set to 'true', clears DHCPv6 LDRA stats for given VLAN.")
cienaCesDhcpv6LdraMplsIntidStringTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 16), )
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsIntidStringTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsIntidStringTable.setDescription('This table is used to specify interface ID strings for MPLS VSs and interfaces that the DHCPv6 LDRA can specify in Option 82 CID information.')
cienaCesDhcpv6LdraMplsIntidStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 16, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraMplsId"), (0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraMplsInterface"))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsIntidStringEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsIntidStringEntry.setDescription('Each entry in this table is used to specify an interface ID string for MPLS VS and interface combinations.')
cienaCesDhcpv6LdraMplsIntidString = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 16, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsIntidString.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsIntidString.setDescription('This object is used to get and set the IntID string for the interface.')
cienaCesDhcpv6LdraMplsIntidStringRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 16, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsIntidStringRowStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsIntidStringRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table set this object to 'createAndGo'. To delete a row in this table set this object to 'destroy'.")
cienaCesDhcpv6LdraMplsRidStringTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 17), )
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsRidStringTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsRidStringTable.setDescription('This table is used to specify RID strings for MPLS VSs and interfaces that the DHCPv6 LDRA can specify in Option 82 RID information.')
cienaCesDhcpv6LdraMplsRidStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 17, 1), ).setIndexNames((0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraMplsId"), (0, "CIENA-CES-DHCPV6-CLIENT-MIB", "cienaCesDhcpv6LdraMplsInterface"))
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsRidStringEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsRidStringEntry.setDescription('Each entry in this table is used to specify an RID string for MPLS VS and interface combinations.')
cienaCesDhcpv6LdraMplsRidString = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 17, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsRidString.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsRidString.setDescription('This MIB object is used to get and set the RID string for the interface.')
cienaCesDhcpv6LdraMplsRidStringRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 30, 1, 2, 17, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsRidStringRowStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesDhcpv6LdraMplsRidStringRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table set this object to 'createAndGo'. To delete a row in this table set this object to 'destroy'.")
mibBuilder.exportSymbols("CIENA-CES-DHCPV6-CLIENT-MIB", cienaCesDhcpv6ClientSessStatsConfirm=cienaCesDhcpv6ClientSessStatsConfirm, cienaCesDhcpv6LdraMplsName=cienaCesDhcpv6LdraMplsName, cienaCesDhcpv6LdraVsExceededHopCountPktDrop=cienaCesDhcpv6LdraVsExceededHopCountPktDrop, cienaCesDhcpv6LdraNoTrustedServerPktDrop=cienaCesDhcpv6LdraNoTrustedServerPktDrop, cienaCesDhcpv6ClientSessAutoConfigState=cienaCesDhcpv6ClientSessAutoConfigState, cienaCesDhcpv6LdraVsIntidStringRowStatus=cienaCesDhcpv6LdraVsIntidStringRowStatus, cienaCesDhcpv6LdraMplsUntrustedClientInterfacePktsRx=cienaCesDhcpv6LdraMplsUntrustedClientInterfacePktsRx, cienaCesDhcpv6ClientSessT1Time=cienaCesDhcpv6ClientSessT1Time, cienaCesDhcpv6LdraVsRidStringTable=cienaCesDhcpv6LdraVsRidStringTable, cienaCesDhcpv6ClientSessStatsRequest=cienaCesDhcpv6ClientSessStatsRequest, cienaCesDhcpv6ClientSessStatsRelease=cienaCesDhcpv6ClientSessStatsRelease, cienaCesDhcpv6LdraStatsTable=cienaCesDhcpv6LdraStatsTable, cienaCesDhcpv6LdraVsTrustMode=cienaCesDhcpv6LdraVsTrustMode, cienaCesDhcpv6LdraVsFailedValidationPktDrop=cienaCesDhcpv6LdraVsFailedValidationPktDrop, cienaCesDhcpv6LdraVsRowStatus=cienaCesDhcpv6LdraVsRowStatus, cienaCesDhcpv6ClientSessStatsPktsRx=cienaCesDhcpv6ClientSessStatsPktsRx, cienaCesDhcpv6LdraMplsNoTrustedClientPktDrop=cienaCesDhcpv6LdraMplsNoTrustedClientPktDrop, cienaCesDhcpv6LdraVsUntrustedServerPortPktsRx=cienaCesDhcpv6LdraVsUntrustedServerPortPktsRx, cienaCesDhcpv6LdraMplsIntidStringTable=cienaCesDhcpv6LdraMplsIntidStringTable, cienaCesDhcpv6LdraVsNoTrustedServerPktDrop=cienaCesDhcpv6LdraVsNoTrustedServerPktDrop, cienaCesDhcpv6LdraInterfaceId=cienaCesDhcpv6LdraInterfaceId, cienaCesDhcpv6ClientSessServerId=cienaCesDhcpv6ClientSessServerId, cienaCesDhcpv6LdraVsNoTrustedClientPktDrop=cienaCesDhcpv6LdraVsNoTrustedClientPktDrop, cienaCesDhcpv6LdraMplsTrustEntry=cienaCesDhcpv6LdraMplsTrustEntry, cienaCesDhcpv6OptionDesc=cienaCesDhcpv6OptionDesc, cienaCesDhcpv6ClientMIB=cienaCesDhcpv6ClientMIB, cienaCesDhcpv6ClientSessStatsSolicit=cienaCesDhcpv6ClientSessStatsSolicit, cienaCesDhcpv6ClientMIBConformance=cienaCesDhcpv6ClientMIBConformance, cienaCesDhcpv6LdraTrustMode=cienaCesDhcpv6LdraTrustMode, cienaCesDhcpv6ClientSessStatsRecfg=cienaCesDhcpv6ClientSessStatsRecfg, cienaCesDhcpv6LdraRidString=cienaCesDhcpv6LdraRidString, cienaCesDhcpv6LdraMplsStatsTable=cienaCesDhcpv6LdraMplsStatsTable, cienaCesDhcpv6LdraRidStringPort=cienaCesDhcpv6LdraRidStringPort, cienaCesDhcpv6ClientSessUpTime=cienaCesDhcpv6ClientSessUpTime, cienaCesDhcpv6ClientSessStatsInvalid=cienaCesDhcpv6ClientSessStatsInvalid, cienaCesDhcpv6LdraVsPktsForRelay=cienaCesDhcpv6LdraVsPktsForRelay, cienaCesDhcpv6LdraMplsInterface=cienaCesDhcpv6LdraMplsInterface, cienaCesDhcpv6LdraIntidStringPort=cienaCesDhcpv6LdraIntidStringPort, cienaCesDhcpv6ClientSessT2Time=cienaCesDhcpv6ClientSessT2Time, cienaCesDhcpv6LdraVsTrustEntry=cienaCesDhcpv6LdraVsTrustEntry, cienaCesDhcpv6LdraExceedMTUPktDrop=cienaCesDhcpv6LdraExceedMTUPktDrop, cienaCesDhcpv6ClientSessStatsInfoReq=cienaCesDhcpv6ClientSessStatsInfoReq, cienaCesDhcpv6LdraGeneralErrors=cienaCesDhcpv6LdraGeneralErrors, cienaCesDhcpv6LdraMplsPktsForRelay=cienaCesDhcpv6LdraMplsPktsForRelay, cienaCesDhcpv6ClientMIBNotifications=cienaCesDhcpv6ClientMIBNotifications, cienaCesDhcpv6LdraInvalidConfigPktDrop=cienaCesDhcpv6LdraInvalidConfigPktDrop, cienaCesDhcpv6LdraFailedValidationPktDrop=cienaCesDhcpv6LdraFailedValidationPktDrop, cienaCesDhcpv6LdraState=cienaCesDhcpv6LdraState, cienaCesDhcpv6LdraVsSubVlan=cienaCesDhcpv6LdraVsSubVlan, cienaCesDhcpv6LdraMplsRowStatus=cienaCesDhcpv6LdraMplsRowStatus, cienaCesDhcpv6LdraStatsClear=cienaCesDhcpv6LdraStatsClear, cienaCesDhcpv6LdraGlobalStatsClear=cienaCesDhcpv6LdraGlobalStatsClear, cienaCesDhcpv6ClientSessStatsPktsTx=cienaCesDhcpv6ClientSessStatsPktsTx, cienaCesDhcpv6RelayAgentGlobalAttrs=cienaCesDhcpv6RelayAgentGlobalAttrs, cienaCesDhcpv6LdraMplsStatsClear=cienaCesDhcpv6LdraMplsStatsClear, cienaCesDhcpv6LdraMplsInvalidConfigPktDrop=cienaCesDhcpv6LdraMplsInvalidConfigPktDrop, cienaCesDhcpv6ClientOptionEntry=cienaCesDhcpv6ClientOptionEntry, cienaCesDhcpv6LdraMplsStateTable=cienaCesDhcpv6LdraMplsStateTable, cienaCesDhcpv6ClientMIBNotificationPrefix=cienaCesDhcpv6ClientMIBNotificationPrefix, cienaCesDhcpv6LdraRidStringRowStatus=cienaCesDhcpv6LdraRidStringRowStatus, cienaCesDhcpv6LdraExtPortState=cienaCesDhcpv6LdraExtPortState, cienaCesDhcpv6LdraMplsUntrustedServerInterfacePktsRx=cienaCesDhcpv6LdraMplsUntrustedServerInterfacePktsRx, cienaCesDhcpv6LdraMplsAdminState=cienaCesDhcpv6LdraMplsAdminState, cienaCesDhcpv6ClientSessStatsRenew=cienaCesDhcpv6ClientSessStatsRenew, cienaCesDhcpv6LdraMplsTrustTable=cienaCesDhcpv6LdraMplsTrustTable, cienaCesDhcpv6ClientSessTable=cienaCesDhcpv6ClientSessTable, cienaCesDhcpv6ClientSessStatsReply=cienaCesDhcpv6ClientSessStatsReply, cienaCesDhcpv6LdraPort=cienaCesDhcpv6LdraPort, cienaCesDhcpv6LdraMplsStatsEntry=cienaCesDhcpv6LdraMplsStatsEntry, cienaCesDhcpv6LdraAdminState=cienaCesDhcpv6LdraAdminState, cienaCesDhcpv6LdraRidStringEntry=cienaCesDhcpv6LdraRidStringEntry, cienaCesDhcpv6OptionState=cienaCesDhcpv6OptionState, cienaCesDhcpv6PrefLifetimeReq=cienaCesDhcpv6PrefLifetimeReq, cienaCesDhcpv6ClientSessEntry=cienaCesDhcpv6ClientSessEntry, cienaCesDhcpv6LdraMplsVcName=cienaCesDhcpv6LdraMplsVcName, cienaCesDhcpv6LdraIntidStringEntry=cienaCesDhcpv6LdraIntidStringEntry, cienaCesDhcpv6LdraVsIntidString=cienaCesDhcpv6LdraVsIntidString, cienaCesDhcpv6LdraExtTrustTable=cienaCesDhcpv6LdraExtTrustTable, cienaCesDhcpv6LdraVsIntidStringTable=cienaCesDhcpv6LdraVsIntidStringTable, cienaCesDhcpv6IfName=cienaCesDhcpv6IfName, cienaCesDhcpv6LdraStateEntry=cienaCesDhcpv6LdraStateEntry, cienaCesDhcpv6ClientSessStatsClear=cienaCesDhcpv6ClientSessStatsClear, cienaCesDhcpv6LdraIntidString=cienaCesDhcpv6LdraIntidString, cienaCesDhcpv6LdraMplsRidString=cienaCesDhcpv6LdraMplsRidString, cienaCesDhcpv6LdraMplsFailedValidationPktDrop=cienaCesDhcpv6LdraMplsFailedValidationPktDrop, cienaCesDhcpv6LdraVsPort=cienaCesDhcpv6LdraVsPort, cienaCesDhcpv6LdraStatsEntry=cienaCesDhcpv6LdraStatsEntry, cienaCesDhcpv6LdraVsInvalidConfigPktDrop=cienaCesDhcpv6LdraVsInvalidConfigPktDrop, cienaCesDhcpv6LdraMplsExceededHopCountPktDrop=cienaCesDhcpv6LdraMplsExceededHopCountPktDrop, cienaCesDhcpv6ClientSessStatsEntry=cienaCesDhcpv6ClientSessStatsEntry, cienaCesDhcpv6ClientSessServerIpAddrType=cienaCesDhcpv6ClientSessServerIpAddrType, PYSNMP_MODULE_ID=cienaCesDhcpv6ClientMIB, cienaCesDhcpv6ClientMIBObjects=cienaCesDhcpv6ClientMIBObjects, cienaCesDhcpv6ClientOptionTable=cienaCesDhcpv6ClientOptionTable, cienaCesDhcpv6LdraExtTrustMode=cienaCesDhcpv6LdraExtTrustMode, cienaCesDhcpv6LdraMplsIntidString=cienaCesDhcpv6LdraMplsIntidString, cienaCesDhcpv6LdraStateTable=cienaCesDhcpv6LdraStateTable, cienaCesDhcpv6LdraVsRidStringRowStatus=cienaCesDhcpv6LdraVsRidStringRowStatus, cienaCesDhcpv6LdraRelayed=cienaCesDhcpv6LdraRelayed, cienaCesDhcpv6ClientSessServerIpAddr=cienaCesDhcpv6ClientSessServerIpAddr, cienaCesDhcpv6ClientSessStatsMgmtIntfIndex=cienaCesDhcpv6ClientSessStatsMgmtIntfIndex, cienaCesDhcpv6ClientSessStatsDecline=cienaCesDhcpv6ClientSessStatsDecline, cienaCesDhcpv6AdminState=cienaCesDhcpv6AdminState, cienaCesDhcpv6LdraMplsIntidStringEntry=cienaCesDhcpv6LdraMplsIntidStringEntry, cienaCesDhcpv6LdraVsVlan=cienaCesDhcpv6LdraVsVlan, cienaCesDhcpv6LdraVlan=cienaCesDhcpv6LdraVlan, cienaCesDhcpv6LdraMplsId=cienaCesDhcpv6LdraMplsId, cienaCesDhcpv6LdraMplsRelayedServer=cienaCesDhcpv6LdraMplsRelayedServer, cienaCesDhcpv6LdraRemoteId=cienaCesDhcpv6LdraRemoteId, cienaCesDhcpv6LdraRemoteIdEnterpriseNo=cienaCesDhcpv6LdraRemoteIdEnterpriseNo, cienaCesDhcpv6ClientSessMgmtIntfIndex=cienaCesDhcpv6ClientSessMgmtIntfIndex, cienaCesDhcpv6LdraExceededHopCountPktDrop=cienaCesDhcpv6LdraExceededHopCountPktDrop, cienaCesDhcpv6LdraVsRelayedClient=cienaCesDhcpv6LdraVsRelayedClient, cienaCesDhcpv6LdraVsUntrustedClientPortPktsRx=cienaCesDhcpv6LdraVsUntrustedClientPortPktsRx, cienaCesDhcpv6LdraMplsGeneralErrors=cienaCesDhcpv6LdraMplsGeneralErrors, cienaCesDhcpv6LdraIntidStringTable=cienaCesDhcpv6LdraIntidStringTable, cienaCesDhcpv6ValidLifetimeReq=cienaCesDhcpv6ValidLifetimeReq, cienaCesDhcpv6ClientSessState=cienaCesDhcpv6ClientSessState, cienaCesDhcpv6LdraMplsTrustMode=cienaCesDhcpv6LdraMplsTrustMode, cienaCesDhcpv6LdraMplsIntidStringRowStatus=cienaCesDhcpv6LdraMplsIntidStringRowStatus, cienaCesDhcpv6ClientSessPrefLifetime=cienaCesDhcpv6ClientSessPrefLifetime, cienaCesDhcpv6LdraVsOperState=cienaCesDhcpv6LdraVsOperState, cienaCesDhcpv6LdraExtTrustEntry=cienaCesDhcpv6LdraExtTrustEntry, cienaCesDhcpv6LdraTrustTable=cienaCesDhcpv6LdraTrustTable, cienaCesDhcpv6LdraVsIPv6FragBadExtHdrPktDrop=cienaCesDhcpv6LdraVsIPv6FragBadExtHdrPktDrop, cienaCesDhcpv6LdraVsRidString=cienaCesDhcpv6LdraVsRidString, cienaCesDhcpv6ClientSessStatsTable=cienaCesDhcpv6ClientSessStatsTable, cienaCesDhcpv6LdraVsRelayedServer=cienaCesDhcpv6LdraVsRelayedServer, cienaCesDhcpv6ClientMIBGroups=cienaCesDhcpv6ClientMIBGroups, cienaCesDhcpv6LdraForward=cienaCesDhcpv6LdraForward, cienaCesDhcpv6LdraNotForRelay=cienaCesDhcpv6LdraNotForRelay, cienaCesDhcpv6LdraVsExceedMTUPktDrop=cienaCesDhcpv6LdraVsExceedMTUPktDrop, cienaCesDhcpv6LdraVsGeneralErrors=cienaCesDhcpv6LdraVsGeneralErrors, cienaCesDhcpv6OptionCode=cienaCesDhcpv6OptionCode, cienaCesDhcpv6LdraVsStatsEntry=cienaCesDhcpv6LdraVsStatsEntry, cienaCesDhcpv6ClientSessStatsRebind=cienaCesDhcpv6ClientSessStatsRebind, cienaCesDhcpv6LdraMplsStateEntry=cienaCesDhcpv6LdraMplsStateEntry, cienaCesDhcpv6ClientSessClientId=cienaCesDhcpv6ClientSessClientId, cienaCesDhcpv6RapidCommitState=cienaCesDhcpv6RapidCommitState, cienaCesDhcpv6LdraVsPortState=cienaCesDhcpv6LdraVsPortState, cienaCesDhcpv6LdraVsName=cienaCesDhcpv6LdraVsName, cienaCesDhcpv6LdraRelayedServer=cienaCesDhcpv6LdraRelayedServer, cienaCesDhcpv6LdraMplsRidStringTable=cienaCesDhcpv6LdraMplsRidStringTable, cienaCesDhcpv6LdraMplsRidStringRowStatus=cienaCesDhcpv6LdraMplsRidStringRowStatus, cienaCesDhcpv6LdraMplsExceedMTUPktDrop=cienaCesDhcpv6LdraMplsExceedMTUPktDrop, cienaCesDhcpv6LdraMplsRelayedClient=cienaCesDhcpv6LdraMplsRelayedClient, cienaCesDhcpv6LdraMplsNoTrustedServerPktDrop=cienaCesDhcpv6LdraMplsNoTrustedServerPktDrop, cienaCesDhcpv6LdraMplsRidStringEntry=cienaCesDhcpv6LdraMplsRidStringEntry, cienaCesDhcpv6LdraDropped=cienaCesDhcpv6LdraDropped, cienaCesDhcpv6LdraTrustEntry=cienaCesDhcpv6LdraTrustEntry, cienaCesDhcpv6ClientSessLeaseExpire=cienaCesDhcpv6ClientSessLeaseExpire, cienaCesDhcpv6Client=cienaCesDhcpv6Client, cienaCesDhcpv6LdraUntrustedServerPortPktsRx=cienaCesDhcpv6LdraUntrustedServerPortPktsRx, cienaCesDhcpv6LdraRemoteIdOption=cienaCesDhcpv6LdraRemoteIdOption, cienaCesDhcpv6LdraVsRidStringEntry=cienaCesDhcpv6LdraVsRidStringEntry, cienaCesDhcpv6LdraVsStateTable=cienaCesDhcpv6LdraVsStateTable, cienaCesDhcpv6LdraVsStatsTable=cienaCesDhcpv6LdraVsStatsTable, cienaCesDhcpv6LdraIntidStringRowStatus=cienaCesDhcpv6LdraIntidStringRowStatus, cienaCesDhcpv6ClientSessValidLifetime=cienaCesDhcpv6ClientSessValidLifetime, cienaCesDhcpv6ClientSessStatsTxFail=cienaCesDhcpv6ClientSessStatsTxFail, cienaCesDhcpv6LdraMplsInterfaceState=cienaCesDhcpv6LdraMplsInterfaceState, cienaCesDhcpv6ClientSessStatsAdvert=cienaCesDhcpv6ClientSessStatsAdvert, cienaCesDhcpv6LdraOperState=cienaCesDhcpv6LdraOperState, cienaCesDhcpv6RelayAgent=cienaCesDhcpv6RelayAgent, cienaCesDhcpv6LdraUntrustedClientPortPktsRx=cienaCesDhcpv6LdraUntrustedClientPortPktsRx, cienaCesDhcpv6LdraRowStatus=cienaCesDhcpv6LdraRowStatus, cienaCesDhcpv6LdraRelayedClient=cienaCesDhcpv6LdraRelayedClient, cienaCesDhcpv6LdraVsStateEntry=cienaCesDhcpv6LdraVsStateEntry, cienaCesDhcpv6LdraMplsOperState=cienaCesDhcpv6LdraMplsOperState, cienaCesDhcpv6ClientMIBCompliances=cienaCesDhcpv6ClientMIBCompliances, cienaCesDhcpv6LdraVsStatsClear=cienaCesDhcpv6LdraVsStatsClear, cienaCesDhcpv6LdraNoTrustedClientPktDrop=cienaCesDhcpv6LdraNoTrustedClientPktDrop, cienaCesDhcpv6LdraVsIntidStringEntry=cienaCesDhcpv6LdraVsIntidStringEntry, cienaCesDhcpv6LdraRidStringTable=cienaCesDhcpv6LdraRidStringTable, cienaCesDhcpv6OptionCodeIndex=cienaCesDhcpv6OptionCodeIndex, cienaCesDhcpv6LdraVsTrustTable=cienaCesDhcpv6LdraVsTrustTable, cienaCesDhcpv6LdraIPv6FragBadExtHdrPktDrop=cienaCesDhcpv6LdraIPv6FragBadExtHdrPktDrop, cienaCesDhcpv6LdraPktsForRelay=cienaCesDhcpv6LdraPktsForRelay, cienaCesDhcpv6LdraVsAdminState=cienaCesDhcpv6LdraVsAdminState, cienaCesDhcpv6LdraMplsIPv6FragBadExtHdrPktDrop=cienaCesDhcpv6LdraMplsIPv6FragBadExtHdrPktDrop)
