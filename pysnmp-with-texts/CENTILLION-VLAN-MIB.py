#
# PySNMP MIB module CENTILLION-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CENTILLION-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
vlan, VlanId = mibBuilder.importSymbols("CENTILLION-MCAST-MIB", "vlan", "VlanId")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Bits, Unsigned32, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, iso, ModuleIdentity, Integer32, IpAddress, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "Unsigned32", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "iso", "ModuleIdentity", "Integer32", "IpAddress", "MibIdentifier", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC-v1", "TruthValue", "RowStatus")
cnVlanMemberGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 31, 2))
cnVlanPortMemberTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 31, 2, 1), )
if mibBuilder.loadTexts: cnVlanPortMemberTable.setStatus('mandatory')
if mibBuilder.loadTexts: cnVlanPortMemberTable.setDescription('The VLAN port membership configuration table. This table contains membership information pertaining to the ports belonging to a VLAN.')
cnVlanPortMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 31, 2, 1, 1), ).setIndexNames((0, "CENTILLION-VLAN-MIB", "cnVlanPortMemberCard"), (0, "CENTILLION-VLAN-MIB", "cnVlanPortMemberPort"), (0, "CENTILLION-VLAN-MIB", "cnVlanPortMemberVID"))
if mibBuilder.loadTexts: cnVlanPortMemberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cnVlanPortMemberEntry.setDescription('An entry containing VLAN membership information for a particular port. Entries are added by specifying the cnVlanPortMemberCard, cnVlanPortMemberPort, cnVlanPortMemberVID, and the cnVlanPortMemberIngressType. Entries are deleted simply by setting the cnVlanPortMemberStatus object to destroy.')
cnVlanPortMemberCard = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 31, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnVlanPortMemberCard.setStatus('mandatory')
if mibBuilder.loadTexts: cnVlanPortMemberCard.setDescription('The card number for this port in the VLAN.')
cnVlanPortMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 31, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnVlanPortMemberPort.setStatus('mandatory')
if mibBuilder.loadTexts: cnVlanPortMemberPort.setDescription('The port number for this port in the VLAN.')
cnVlanPortMemberVID = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 31, 2, 1, 1, 3), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnVlanPortMemberVID.setStatus('mandatory')
if mibBuilder.loadTexts: cnVlanPortMemberVID.setDescription('The VLAN ID of which this port is a member.')
cnVlanPortMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 31, 2, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnVlanPortMemberStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cnVlanPortMemberStatus.setDescription('The current status of the entry. Entries may be added by specifying a value of createAndGo, and removed by setting the status to destroy.')
cnVlanPortMemberIngressType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 31, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pvid", 1), ("tag", 2), ("protocolId", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnVlanPortMemberIngressType.setStatus('mandatory')
if mibBuilder.loadTexts: cnVlanPortMemberIngressType.setDescription('The method used to classify ingress frames on this port into this VLAN. The allowed values are specific to the cnVlanType of the VLAN as follows: byPort: pvid or tag byProtocolId: pvid, tag, or protocolId Allowable values may also be restricted by the VLAN capabilities of this port.')
cnVlanPortMemberDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 31, 2, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnVlanPortMemberDynamic.setStatus('mandatory')
if mibBuilder.loadTexts: cnVlanPortMemberDynamic.setDescription("The value for this object indicates whether the switch learned this port's VLAN membership dynamically.")
cnVlanPortMemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 31, 2, 1, 1, 7), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnVlanPortMemberIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnVlanPortMemberIfIndex.setDescription('The value for this object identifies the instance of the ifIndex object, defined in MIB-II, for the interface corresponding to this port and VLAN. If no such entry exists, the value 0 may be returned.')
cnVlanPortMemberRing = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 31, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnVlanPortMemberRing.setStatus('mandatory')
if mibBuilder.loadTexts: cnVlanPortMemberRing.setDescription('The ring number for this port if this VLAN uses source route or source route transparent bridging.')
cnVlanENETMgt = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 31, 3), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnVlanENETMgt.setStatus('mandatory')
if mibBuilder.loadTexts: cnVlanENETMgt.setDescription('VID of the Ethernet management VLAN. The null VID indicates that an Ethernet management VLAN is not configured.')
cnVlanTRMgt = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 31, 4), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnVlanTRMgt.setStatus('mandatory')
if mibBuilder.loadTexts: cnVlanTRMgt.setDescription('VID of the Token Ring management VLAN. The null VID indicates that an Token Ring management VLAN is not configured.')
mibBuilder.exportSymbols("CENTILLION-VLAN-MIB", cnVlanPortMemberTable=cnVlanPortMemberTable, cnVlanPortMemberPort=cnVlanPortMemberPort, cnVlanTRMgt=cnVlanTRMgt, cnVlanPortMemberRing=cnVlanPortMemberRing, cnVlanPortMemberEntry=cnVlanPortMemberEntry, cnVlanPortMemberIngressType=cnVlanPortMemberIngressType, cnVlanPortMemberDynamic=cnVlanPortMemberDynamic, cnVlanPortMemberVID=cnVlanPortMemberVID, cnVlanENETMgt=cnVlanENETMgt, cnVlanMemberGroup=cnVlanMemberGroup, cnVlanPortMemberCard=cnVlanPortMemberCard, cnVlanPortMemberStatus=cnVlanPortMemberStatus, cnVlanPortMemberIfIndex=cnVlanPortMemberIfIndex)
