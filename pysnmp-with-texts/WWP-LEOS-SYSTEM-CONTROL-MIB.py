#
# PySNMP MIB module WWP-LEOS-SYSTEM-CONTROL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-SYSTEM-CONTROL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
dot1dStpPort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPort")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Bits, MibIdentifier, NotificationType, Gauge32, Counter32, ModuleIdentity, Unsigned32, IpAddress, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Bits", "MibIdentifier", "NotificationType", "Gauge32", "Counter32", "ModuleIdentity", "Unsigned32", "IpAddress", "ObjectIdentity", "Integer32")
TextualConvention, DisplayString, MacAddress, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "RowStatus", "TruthValue")
wwpModules, wwpModulesLeos = mibBuilder.importSymbols("WWP-SMI", "wwpModules", "wwpModulesLeos")
wwpLeosSysCtrlMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 25))
wwpLeosSysCtrlMIB.setRevisions(('2006-03-15 18:55', '2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosSysCtrlMIB.setRevisionsDescriptions(('The value for wwpLeosSysCtrlLacpEnable object changed to be enabled (true) by default.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosSysCtrlMIB.setLastUpdated('200603151855Z')
if mibBuilder.loadTexts: wwpLeosSysCtrlMIB.setOrganization('World Wide Packets, Inc')
if mibBuilder.loadTexts: wwpLeosSysCtrlMIB.setContactInfo(' Mib Meister Postal: World Wide Packets P.O. Box 950 Veradale, WA 99037 USA Phone: +1 509 242 9000 Email: mib.meister@worldwidepackets.com')
if mibBuilder.loadTexts: wwpLeosSysCtrlMIB.setDescription('The MIB module for the WWP SysCtrl specific information.')
wwpLeosSysCtrlMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 25, 1))
wwpLeosSysCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 25, 1, 1))
wwpLeosSysCtrlLldpExt = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 25, 1, 2))
wwpLeosSysCtrlMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 25, 2))
wwpLeosSysCtrlMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 25, 2, 0))
wwpLeosSysCtrlMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 25, 3))
wwpLeosSysCtrlMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 25, 3, 1))
wwpLeosSysCtrlMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 25, 3, 2))
wwpLeosSysCtrlBridgeRstpEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 25, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSysCtrlBridgeRstpEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSysCtrlBridgeRstpEnable.setDescription("when this object is set to 'true' the rstp operation for the bridge is enabled. Setting this object to 'false' disable bridge rstp operations.")
wwpLeosSysCtrlLacpEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 25, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSysCtrlLacpEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSysCtrlLacpEnable.setDescription("when this object is set to 'true' the Lacp operation for the device is enabled. Setting this object to 'false' disable the Lacp operations.")
wwpLeosSysCtrlLldpState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 25, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknwon", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSysCtrlLldpState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSysCtrlLldpState.setDescription('Setting this object will enable or disable LLDP globally.')
wwpLeosSysCtrlLldpDaMac = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 25, 1, 2, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSysCtrlLldpDaMac.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSysCtrlLldpDaMac.setDescription('Setting this object will set da mac for lldp.')
wwpLeosSysCtrlLldpEthType = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 25, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosSysCtrlLldpEthType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSysCtrlLldpEthType.setDescription('Setting this object will set frame type for for lldp.')
mibBuilder.exportSymbols("WWP-LEOS-SYSTEM-CONTROL-MIB", wwpLeosSysCtrlLldpDaMac=wwpLeosSysCtrlLldpDaMac, wwpLeosSysCtrlLldpState=wwpLeosSysCtrlLldpState, wwpLeosSysCtrl=wwpLeosSysCtrl, wwpLeosSysCtrlMIB=wwpLeosSysCtrlMIB, wwpLeosSysCtrlLldpExt=wwpLeosSysCtrlLldpExt, wwpLeosSysCtrlLldpEthType=wwpLeosSysCtrlLldpEthType, wwpLeosSysCtrlLacpEnable=wwpLeosSysCtrlLacpEnable, wwpLeosSysCtrlMIBCompliances=wwpLeosSysCtrlMIBCompliances, wwpLeosSysCtrlMIBNotificationPrefix=wwpLeosSysCtrlMIBNotificationPrefix, wwpLeosSysCtrlMIBGroups=wwpLeosSysCtrlMIBGroups, wwpLeosSysCtrlBridgeRstpEnable=wwpLeosSysCtrlBridgeRstpEnable, PYSNMP_MODULE_ID=wwpLeosSysCtrlMIB, wwpLeosSysCtrlMIBNotifications=wwpLeosSysCtrlMIBNotifications, wwpLeosSysCtrlMIBObjects=wwpLeosSysCtrlMIBObjects, wwpLeosSysCtrlMIBConformance=wwpLeosSysCtrlMIBConformance)
