#
# PySNMP MIB module CISCO-QLLC01-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-QLLC01-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:10:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, Bits, Unsigned32, Gauge32, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, Counter32, TimeTicks, NotificationType, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "Unsigned32", "Gauge32", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "Counter32", "TimeTicks", "NotificationType", "Counter64", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
snaqllc01 = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 6))
if mibBuilder.loadTexts: snaqllc01.setLastUpdated('9411090000Z')
if mibBuilder.loadTexts: snaqllc01.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: snaqllc01.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: snaqllc01.setDescription('This is the MIB module for objects used to manage the QLLC protocol. ')
qllc = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 6, 1))
class IfIndexType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class X121Address(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 17)

qllcLSAdminTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1), )
if mibBuilder.loadTexts: qllcLSAdminTable.setStatus('current')
if mibBuilder.loadTexts: qllcLSAdminTable.setDescription('This table contains objects that can be changed for each qllc entry. Changing one of these parameters will take effect in the operating LS immediately. Each qllc connection will have an entry in this table.')
qllcLSAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1, 1), ).setIndexNames((0, "CISCO-QLLC01-MIB", "qllcLSAdminIfIndex"), (0, "CISCO-QLLC01-MIB", "qllcLSAdminLciVcIndex"))
if mibBuilder.loadTexts: qllcLSAdminEntry.setStatus('current')
if mibBuilder.loadTexts: qllcLSAdminEntry.setDescription('Configured parameter values for a specific qllc.')
qllcLSAdminIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1, 1, 1), IfIndexType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcLSAdminIfIndex.setStatus('current')
if mibBuilder.loadTexts: qllcLSAdminIfIndex.setDescription('Interface Index value for the qllc connection. ')
qllcLSAdminLciVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1, 1, 2), IfIndexType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcLSAdminLciVcIndex.setStatus('current')
if mibBuilder.loadTexts: qllcLSAdminLciVcIndex.setDescription('The virtual circuit number for the logical channel identifier or PVC number depending on the type of circuit on this interface. ')
qllcLSAdminCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchedVC", 1), ("permanentVC", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcLSAdminCircuitType.setStatus('current')
if mibBuilder.loadTexts: qllcLSAdminCircuitType.setDescription('The circuit type on this interface.')
qllcLSAdminRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("peerToPeer", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcLSAdminRole.setStatus('current')
if mibBuilder.loadTexts: qllcLSAdminRole.setDescription('The role that the QLLC link station shall assume.')
qllcLSAdminX25Add = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1, 1, 5), X121Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcLSAdminX25Add.setStatus('current')
if mibBuilder.loadTexts: qllcLSAdminX25Add.setDescription('The X.25 address associated with the qllc connection. ')
qllcLSAdminModulo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2))).clone('modulo8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcLSAdminModulo.setStatus('current')
if mibBuilder.loadTexts: qllcLSAdminModulo.setDescription('The modulus for QLLC link station. It determines the size of the rotating ACK window and can take values of 8 and 128. ')
qllcLSAdminLgX25 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qllcLSAdminLgX25.setStatus('current')
if mibBuilder.loadTexts: qllcLSAdminLgX25.setDescription('The largest QLLC packet allowed to go out on the QLLC/X.25 side. ')
qllcLSOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2), )
if mibBuilder.loadTexts: qllcLSOperTable.setStatus('current')
if mibBuilder.loadTexts: qllcLSOperTable.setDescription('This table contains an entry for each qllc connection.')
qllcLSOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1), ).setIndexNames((0, "CISCO-QLLC01-MIB", "qllcLSOperIfIndex"), (0, "CISCO-QLLC01-MIB", "qllcLSOperLciVcIndex"))
if mibBuilder.loadTexts: qllcLSOperEntry.setStatus('current')
if mibBuilder.loadTexts: qllcLSOperEntry.setDescription('Parameter values for a specific qllc connection.')
qllcLSOperIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSOperIfIndex.setStatus('current')
if mibBuilder.loadTexts: qllcLSOperIfIndex.setDescription('Interface Index value for the qllc connection.')
qllcLSOperLciVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1, 2), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSOperLciVcIndex.setStatus('current')
if mibBuilder.loadTexts: qllcLSOperLciVcIndex.setDescription('The virtual circuit number for the logical channel identifier on this interface. ')
qllcLSOperCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchedVC", 1), ("permanentVC", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSOperCircuitType.setStatus('current')
if mibBuilder.loadTexts: qllcLSOperCircuitType.setDescription('The circuit type on this interface.')
qllcLSOperRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("peerToPeer", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSOperRole.setStatus('current')
if mibBuilder.loadTexts: qllcLSOperRole.setDescription('The role the QLLC link station.')
qllcLSOperX25Add = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1, 5), X121Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSOperX25Add.setStatus('current')
if mibBuilder.loadTexts: qllcLSOperX25Add.setDescription('The remote X.25 address associated with the qllc connection. ')
qllcLSOperModulo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2))).clone('modulo8')).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSOperModulo.setStatus('current')
if mibBuilder.loadTexts: qllcLSOperModulo.setDescription('The modulus for QLLC link station. It determines the size of the rotating ACK window and can take values of 8 and 128. ')
qllcLSOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lsStateInop", 1), ("lsStateClosed", 2), ("lsStateOpening", 3), ("lsStateClosing", 4), ("lsStateRecovery", 5), ("lsStateOpened", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSOperState.setStatus('current')
if mibBuilder.loadTexts: qllcLSOperState.setDescription('The state of a particular QLLC connection. Inop, closed, opening, closing, recovery and opened are states defined in the IBM document SC30-3409-1 The X.25 1984/1988 DTE/DCE and DTE/DTE Interface Architecture Reference.')
qllcLSOperLgX25 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSOperLgX25.setStatus('current')
if mibBuilder.loadTexts: qllcLSOperLgX25.setDescription('The largest QLLC packet allowed to go out on the QLLC/X.25 side. ')
qllcLSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3), )
if mibBuilder.loadTexts: qllcLSStatsTable.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsTable.setDescription('This table defines link station statistics kept for each qllc connection.')
qllcLSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1), ).setIndexNames((0, "CISCO-QLLC01-MIB", "qllcLSStatsIfIndex"), (0, "CISCO-QLLC01-MIB", "qllcLSStatsLciVcIndex"))
if mibBuilder.loadTexts: qllcLSStatsEntry.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsEntry.setDescription('Link station statistics.')
qllcLSStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsIfIndex.setDescription('Interface Index value for the qllc connection. ')
qllcLSStatsLciVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 2), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsLciVcIndex.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsLciVcIndex.setDescription('The virtual circuit number for the logical channel identifier on this interface. ')
qllcLSStatsXidIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsXidIn.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsXidIn.setDescription('The number of XIDs received from the LS on this VC.')
qllcLSStatsXidOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsXidOut.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsXidOut.setDescription('The number of XIDs sent to the LS on this VC.')
qllcLSStatsTestIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsTestIn.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsTestIn.setDescription('The number of TEST packets received from the LS on this VC.')
qllcLSStatsTestOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsTestOut.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsTestOut.setDescription('The number of TEST packets sent to the LS from this VC.')
qllcLSStatsQuenchOff = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsQuenchOff.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsQuenchOff.setDescription('The number of times the connection Quenched off for this connection. ')
qllcLSStatsQuenchOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsQuenchOn.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsQuenchOn.setDescription('The number of times the connection Quenched on for this connection. ')
qllcLSStatsInPaks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsInPaks.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsInPaks.setDescription('The total number of information packets received on this interfaces. ')
qllcLSStatsOutPaks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsOutPaks.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsOutPaks.setDescription('The total number of information packets sent on this interfaces. ')
qllcLSStatsInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsInBytes.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsInBytes.setDescription('The total number of bytes in the information packets received on this connection. ')
qllcLSStatsOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsOutBytes.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsOutBytes.setDescription('The total number of bytes in the information packets sent on this connection. ')
qllcLSStatsNumRcvQsms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsNumRcvQsms.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsNumRcvQsms.setDescription('The number of QSMs received on this connection. ')
qllcLSStatsNumSndQsms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsNumSndQsms.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsNumSndQsms.setDescription('The number of QSMs sent on this connection. ')
qllcLSStatsNumRcvDiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsNumRcvDiscs.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsNumRcvDiscs.setDescription('The number of DISCs received on this connection. ')
qllcLSStatsNumSndDiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsNumSndDiscs.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsNumSndDiscs.setDescription('The number of DISCs sent on this connection. ')
qllcLSStatsNumRcvDms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsNumRcvDms.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsNumRcvDms.setDescription('The number of DMs received on this connection. ')
qllcLSStatsNumSndDms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsNumSndDms.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsNumSndDms.setDescription('The number of DMs sent on this connection. ')
qllcLSStatsNumRcvFrmrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsNumRcvFrmrs.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsNumRcvFrmrs.setDescription('The number of FRMRs received on this connection. ')
qllcLSStatsNumSndFrmrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsNumSndFrmrs.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsNumSndFrmrs.setDescription('The number of FRMRs sent on this connection. ')
qllcLSStatsNumDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsNumDrops.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsNumDrops.setDescription('The number of packets dropped due to buffer allocation or other internal problems.')
qllcLSStatsNumErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 6, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qllcLSStatsNumErrs.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsNumErrs.setDescription('The number of HDLC protocol errors detected.')
qllcMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 6, 2))
qllcMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 6, 2, 1))
qllcMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 6, 2, 2))
qllcMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 6, 2, 1, 1)).setObjects(("CISCO-QLLC01-MIB", "qllcLSAdminGroup"), ("CISCO-QLLC01-MIB", "qllcLSOperGroup"), ("CISCO-QLLC01-MIB", "qllcLSStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qllcMibCompliance = qllcMibCompliance.setStatus('current')
if mibBuilder.loadTexts: qllcMibCompliance.setDescription('The compliance statement for QLLC nodes.')
qllcLSAdminGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 6, 2, 2, 1)).setObjects(("CISCO-QLLC01-MIB", "qllcLSAdminIfIndex"), ("CISCO-QLLC01-MIB", "qllcLSAdminLciVcIndex"), ("CISCO-QLLC01-MIB", "qllcLSAdminRole"), ("CISCO-QLLC01-MIB", "qllcLSAdminCircuitType"), ("CISCO-QLLC01-MIB", "qllcLSAdminX25Add"), ("CISCO-QLLC01-MIB", "qllcLSAdminModulo"), ("CISCO-QLLC01-MIB", "qllcLSAdminLgX25"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qllcLSAdminGroup = qllcLSAdminGroup.setStatus('current')
if mibBuilder.loadTexts: qllcLSAdminGroup.setDescription('A collection of objects providing configuration capability.')
qllcLSOperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 6, 2, 2, 2)).setObjects(("CISCO-QLLC01-MIB", "qllcLSOperIfIndex"), ("CISCO-QLLC01-MIB", "qllcLSOperLciVcIndex"), ("CISCO-QLLC01-MIB", "qllcLSOperCircuitType"), ("CISCO-QLLC01-MIB", "qllcLSOperRole"), ("CISCO-QLLC01-MIB", "qllcLSOperX25Add"), ("CISCO-QLLC01-MIB", "qllcLSOperModulo"), ("CISCO-QLLC01-MIB", "qllcLSOperState"), ("CISCO-QLLC01-MIB", "qllcLSOperLgX25"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qllcLSOperGroup = qllcLSOperGroup.setStatus('current')
if mibBuilder.loadTexts: qllcLSOperGroup.setDescription('A collection of objects providing operational control capability.')
qllcLSStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 6, 2, 2, 3)).setObjects(("CISCO-QLLC01-MIB", "qllcLSStatsIfIndex"), ("CISCO-QLLC01-MIB", "qllcLSStatsLciVcIndex"), ("CISCO-QLLC01-MIB", "qllcLSStatsXidIn"), ("CISCO-QLLC01-MIB", "qllcLSStatsXidOut"), ("CISCO-QLLC01-MIB", "qllcLSStatsTestIn"), ("CISCO-QLLC01-MIB", "qllcLSStatsTestOut"), ("CISCO-QLLC01-MIB", "qllcLSStatsQuenchOff"), ("CISCO-QLLC01-MIB", "qllcLSStatsQuenchOn"), ("CISCO-QLLC01-MIB", "qllcLSStatsInPaks"), ("CISCO-QLLC01-MIB", "qllcLSStatsOutPaks"), ("CISCO-QLLC01-MIB", "qllcLSStatsInBytes"), ("CISCO-QLLC01-MIB", "qllcLSStatsOutBytes"), ("CISCO-QLLC01-MIB", "qllcLSStatsNumRcvQsms"), ("CISCO-QLLC01-MIB", "qllcLSStatsNumSndQsms"), ("CISCO-QLLC01-MIB", "qllcLSStatsNumRcvDiscs"), ("CISCO-QLLC01-MIB", "qllcLSStatsNumSndDiscs"), ("CISCO-QLLC01-MIB", "qllcLSStatsNumRcvDms"), ("CISCO-QLLC01-MIB", "qllcLSStatsNumSndDms"), ("CISCO-QLLC01-MIB", "qllcLSStatsNumRcvFrmrs"), ("CISCO-QLLC01-MIB", "qllcLSStatsNumSndFrmrs"), ("CISCO-QLLC01-MIB", "qllcLSStatsNumDrops"), ("CISCO-QLLC01-MIB", "qllcLSStatsNumErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qllcLSStatsGroup = qllcLSStatsGroup.setStatus('current')
if mibBuilder.loadTexts: qllcLSStatsGroup.setDescription('A collection of objects providing statistics.')
mibBuilder.exportSymbols("CISCO-QLLC01-MIB", qllcLSStatsNumRcvDms=qllcLSStatsNumRcvDms, qllcMibConformance=qllcMibConformance, qllcLSAdminTable=qllcLSAdminTable, qllcLSAdminIfIndex=qllcLSAdminIfIndex, qllcLSStatsQuenchOff=qllcLSStatsQuenchOff, qllcLSStatsQuenchOn=qllcLSStatsQuenchOn, qllcLSAdminLciVcIndex=qllcLSAdminLciVcIndex, qllcLSStatsOutPaks=qllcLSStatsOutPaks, qllcLSStatsNumRcvQsms=qllcLSStatsNumRcvQsms, qllcMibCompliances=qllcMibCompliances, qllcLSAdminX25Add=qllcLSAdminX25Add, qllcLSOperEntry=qllcLSOperEntry, X121Address=X121Address, qllcLSStatsEntry=qllcLSStatsEntry, qllcLSStatsTestOut=qllcLSStatsTestOut, qllcLSStatsTestIn=qllcLSStatsTestIn, qllcLSOperX25Add=qllcLSOperX25Add, qllcLSStatsLciVcIndex=qllcLSStatsLciVcIndex, qllcLSStatsNumRcvDiscs=qllcLSStatsNumRcvDiscs, qllcLSStatsNumDrops=qllcLSStatsNumDrops, qllcLSOperLciVcIndex=qllcLSOperLciVcIndex, qllcLSStatsXidOut=qllcLSStatsXidOut, qllcLSAdminModulo=qllcLSAdminModulo, qllcMibGroups=qllcMibGroups, qllcLSOperModulo=qllcLSOperModulo, qllcLSStatsInPaks=qllcLSStatsInPaks, qllcLSStatsNumErrs=qllcLSStatsNumErrs, qllcMibCompliance=qllcMibCompliance, qllcLSStatsXidIn=qllcLSStatsXidIn, qllc=qllc, qllcLSAdminCircuitType=qllcLSAdminCircuitType, qllcLSStatsNumSndQsms=qllcLSStatsNumSndQsms, qllcLSAdminEntry=qllcLSAdminEntry, qllcLSOperState=qllcLSOperState, qllcLSStatsOutBytes=qllcLSStatsOutBytes, qllcLSStatsNumSndDms=qllcLSStatsNumSndDms, qllcLSStatsNumSndFrmrs=qllcLSStatsNumSndFrmrs, qllcLSStatsInBytes=qllcLSStatsInBytes, qllcLSOperIfIndex=qllcLSOperIfIndex, PYSNMP_MODULE_ID=snaqllc01, qllcLSAdminRole=qllcLSAdminRole, qllcLSAdminGroup=qllcLSAdminGroup, qllcLSStatsIfIndex=qllcLSStatsIfIndex, IfIndexType=IfIndexType, qllcLSOperTable=qllcLSOperTable, qllcLSAdminLgX25=qllcLSAdminLgX25, qllcLSStatsNumSndDiscs=qllcLSStatsNumSndDiscs, qllcLSOperRole=qllcLSOperRole, qllcLSStatsTable=qllcLSStatsTable, qllcLSStatsGroup=qllcLSStatsGroup, snaqllc01=snaqllc01, qllcLSOperCircuitType=qllcLSOperCircuitType, qllcLSOperGroup=qllcLSOperGroup, qllcLSStatsNumRcvFrmrs=qllcLSStatsNumRcvFrmrs, qllcLSOperLgX25=qllcLSOperLgX25)
