#
# PySNMP MIB module STN-PPTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-PPTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:11:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, Bits, Counter32, NotificationType, iso, Integer32, ModuleIdentity, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "Bits", "Counter32", "NotificationType", "iso", "Integer32", "ModuleIdentity", "Gauge32", "Counter64")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
stnTmpProtocols, = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnTmpProtocols")
StnDomainMapType, = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-TC", "StnDomainMapType")
stnPptp = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10))
if mibBuilder.loadTexts: stnPptp.setLastUpdated('0002160000Z')
if mibBuilder.loadTexts: stnPptp.setOrganization('Spring Tide Networks, Inc.')
if mibBuilder.loadTexts: stnPptp.setContactInfo(' Spring Tide Networks, Inc. Customer Service Postal: 3 Clock Tower Place Maynard, MA 01754 Tel: 1 888-786-4357 Email: stncs@springtidenet.com ')
if mibBuilder.loadTexts: stnPptp.setDescription('The MIB module that describes managed objects of general use by the Point-to-Point Transport Protocol.')
stnPptpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1))
stnPptpMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 2))
stnPptpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 3))
stnPptpScalar = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 1))
stnPptpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 1, 1))
stnPptpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 1, 2))
class MilliSeconds(TextualConvention, Integer32):
    description = 'A period of time measured in units of .001 of seconds when used in conjunction with the DISPLAY-HINT will show seconds and fractions of second with a resolution of .001 of a second.'
    status = 'current'
    displayHint = 'd-3'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483646)

stnPptpAdminState = MibScalar((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("drain", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnPptpAdminState.setStatus('current')
if mibBuilder.loadTexts: stnPptpAdminState.setDescription("This object defines the administrative state of this PPTP tunnel domain. Setting this object to 'disabled' causes all tunnels to be immediately disconnected and no further tunnels to be either initiated or accepted. ")
stnPptpProtocolVersion = MibScalar((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: stnPptpProtocolVersion.setDescription('Vector of supported PPTP protocol version and revision numbers. Supported versions are identified via a two octet pairing where the first octet indicates the version and the second octet contains the revision.')
stnPptpVendorName = MibScalar((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpVendorName.setStatus('current')
if mibBuilder.loadTexts: stnPptpVendorName.setDescription('This object identifies the Vendor name of the PPTP protocol stack.')
stnPptpFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: stnPptpFirmwareRev.setDescription('This object defines the firmware revision for the PPTP protocol stack.')
stnPptpDomainConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 2), )
if mibBuilder.loadTexts: stnPptpDomainConfigTable.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainConfigTable.setDescription('The PPTP Domain configuration table.')
stnPptpDomainConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 2, 1), ).setIndexNames((0, "STN-PPTP-MIB", "stnPptpDomainConfigIdentifier"))
if mibBuilder.loadTexts: stnPptpDomainConfigEntry.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainConfigEntry.setDescription('An PPTP Domain configuration entry. An entry in this table may correspond to a single endpoint or a group of tunnel endpoints.')
stnPptpDomainConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: stnPptpDomainConfigIdentifier.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainConfigIdentifier.setDescription('This object is not used.')
stnPptpDomainConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("drain", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stnPptpDomainConfigAdminState.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainConfigAdminState.setDescription('This object is not used.')
stnPptpDomainConfigAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("challenge", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stnPptpDomainConfigAuthentication.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainConfigAuthentication.setDescription('This object is not used')
stnPptpDomainConfigSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stnPptpDomainConfigSecret.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainConfigSecret.setDescription('This object is not used ')
stnPptpDomainConfigTunnelSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("ipSec", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stnPptpDomainConfigTunnelSecurity.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainConfigTunnelSecurity.setDescription('This object is not used.')
stnPptpDomainConfigTunnelHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stnPptpDomainConfigTunnelHelloInterval.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainConfigTunnelHelloInterval.setDescription('This object is not used.')
stnPptpDomainConfigTunnelIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stnPptpDomainConfigTunnelIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainConfigTunnelIdleTimeout.setDescription('This object is not used.')
stnPptpDomainConfigControlRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stnPptpDomainConfigControlRWS.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainConfigControlRWS.setDescription('This object is not used.')
stnPptpDomainConfigControlRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stnPptpDomainConfigControlRetransmissions.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainConfigControlRetransmissions.setDescription('This object is not used.')
stnPptpDomainConfigPayloadSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stnPptpDomainConfigPayloadSequencing.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainConfigPayloadSequencing.setDescription('This object is not used.')
stnPptpDomainConfigPayloadRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stnPptpDomainConfigPayloadRWS.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainConfigPayloadRWS.setDescription('This object is not used.')
stnPptpDomainConfigDelayedAckTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 2, 1, 12), MilliSeconds()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stnPptpDomainConfigDelayedAckTimeout.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainConfigDelayedAckTimeout.setDescription('This object is not used.')
stnPptpDomainConfigReassemblyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 2, 1, 13), MilliSeconds()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stnPptpDomainConfigReassemblyTimeout.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainConfigReassemblyTimeout.setDescription('This object is not used.')
stnPptpDomainConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stnPptpDomainConfigStatus.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainConfigStatus.setDescription('This object is not used.')
stnPptpDomainStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3), )
if mibBuilder.loadTexts: stnPptpDomainStatsTable.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsTable.setDescription('The PPTP Domain Status and Statistics table.')
stnPptpDomainStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1), ).setIndexNames((0, "STN-PPTP-MIB", "stnPptpDomainStatsIdentifier"))
if mibBuilder.loadTexts: stnPptpDomainStatsEntry.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsEntry.setDescription('An PPTP Domain Stats entry. An entry in this table may correspond to a single endpoint or a group of tunnel endpoints.')
stnPptpDomainStatsIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 1), DisplayString())
if mibBuilder.loadTexts: stnPptpDomainStatsIdentifier.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsIdentifier.setDescription('The identifier, usually in the form of a Domain Name (full or partial), describing a single tunnel endpoint or a domain of tunnel endpoints.')
stnPptpDomainStatsTotalTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainStatsTotalTunnels.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsTotalTunnels.setDescription('This object returns the total number of tunnels that have successfully reached the established state for this tunnel domain.')
stnPptpDomainStatsFailedTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainStatsFailedTunnels.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsFailedTunnels.setDescription('This object returns the number of tunnels that failed to reach the established state for this tunnel domain.')
stnPptpDomainStatsFailedAuthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainStatsFailedAuthentications.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsFailedAuthentications.setDescription('This object is not used.')
stnPptpDomainStatsActiveTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainStatsActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsActiveTunnels.setDescription('This object returns the number of tunnels that are currently active for this domain.')
stnPptpDomainStatsTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainStatsTotalSessions.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsTotalSessions.setDescription('This object returns the total number of sessions that have successfully reached the established state for this tunnel domain.')
stnPptpDomainStatsFailedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainStatsFailedSessions.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsFailedSessions.setDescription('This object returns the number of sessions that failed to reach the established state for this tunnel domain.')
stnPptpDomainStatsActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainStatsActiveSessions.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsActiveSessions.setDescription('This object returns the number of sessions that are currently active for this domain.')
stnPptpDomainStatsControlRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainStatsControlRecvOctets.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsControlRecvOctets.setDescription('This object returns the number of control channel octets received for this tunnel domain.')
stnPptpDomainStatsControlRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainStatsControlRecvPackets.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsControlRecvPackets.setDescription('This object returns the number of control packets received for this tunnel domain.')
stnPptpDomainStatsControlSendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainStatsControlSendOctets.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsControlSendOctets.setDescription('This object returns the number of control channel octets that were transmitted to tunnel endpoints for this domain.')
stnPptpDomainStatsControlSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainStatsControlSendPackets.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsControlSendPackets.setDescription('This object returns the number of control packets that were transmitted to tunnel endpoints for this domain.')
stnPptpDomainStatsPayloadRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainStatsPayloadRecvOctets.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsPayloadRecvOctets.setDescription('This object returns the number of payload channel octets that were received for this tunnel domain.')
stnPptpDomainStatsPayloadRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainStatsPayloadRecvPackets.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsPayloadRecvPackets.setDescription('This object returns the number of payload packets that were received for this tunnel domain.')
stnPptpDomainStatsPayloadRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainStatsPayloadRecvDiscards.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsPayloadRecvDiscards.setDescription('This object returns the number of received payload packets that were discarded by this this tunnel domain.')
stnPptpDomainStatsPayloadSendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainStatsPayloadSendOctets.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsPayloadSendOctets.setDescription('This object returns the number of payload channel octets that were transmitted to tunnel peers within this tunnel domain.')
stnPptpDomainStatsPayloadSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainStatsPayloadSendPackets.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainStatsPayloadSendPackets.setDescription('This object returns the number of payload packets that were transmitted to tunnel peers within this tunnel domain.')
stnPptpTunnelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 4), )
if mibBuilder.loadTexts: stnPptpTunnelConfigTable.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelConfigTable.setDescription('The PPTP tunnel configuration table.')
stnPptpTunnelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 4, 1), ).setIndexNames((0, "STN-PPTP-MIB", "stnPptpTunnelConfigIfIndex"))
if mibBuilder.loadTexts: stnPptpTunnelConfigEntry.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelConfigEntry.setDescription('A PPTP tunnel interface configuration entry.')
stnPptpTunnelConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 4, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelConfigIfIndex.setDescription('This value for this object is equal to the value of ifIndex of the Interfaces MIB for tunnel interfaces of type PPTP.')
stnPptpTunnelConfigAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("challenge", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnPptpTunnelConfigAuthentication.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelConfigAuthentication.setDescription('This object is not used.')
stnPptpTunnelConfigSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnPptpTunnelConfigSecret.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelConfigSecret.setDescription('This object is not used.')
stnPptpTunnelConfigSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("ipsec", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnPptpTunnelConfigSecurity.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelConfigSecurity.setDescription('This object is not used.')
stnPptpTunnelConfigHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnPptpTunnelConfigHelloInterval.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelConfigHelloInterval.setDescription('This object is not used.')
stnPptpTunnelConfigIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnPptpTunnelConfigIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelConfigIdleTimeout.setDescription('This object is not used.')
stnPptpTunnelConfigControlRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnPptpTunnelConfigControlRWS.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelConfigControlRWS.setDescription('This object is not used.')
stnPptpTunnelConfigControlRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnPptpTunnelConfigControlRetransmissions.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelConfigControlRetransmissions.setDescription('This object is not used.')
stnPptpTunnelConfigPayloadSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 4, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnPptpTunnelConfigPayloadSequencing.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelConfigPayloadSequencing.setDescription('This object is not used.')
stnPptpTunnelConfigPayloadRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnPptpTunnelConfigPayloadRWS.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelConfigPayloadRWS.setDescription('This object is not used.')
stnPptpTunnelConfigDelayedAckTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 4, 1, 11), MilliSeconds()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnPptpTunnelConfigDelayedAckTimeout.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelConfigDelayedAckTimeout.setDescription('This object is not used.')
stnPptpTunnelConfigReassemblyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 4, 1, 12), MilliSeconds()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnPptpTunnelConfigReassemblyTimeout.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelConfigReassemblyTimeout.setDescription('This object is not used.')
stnPptpTunnelConfigTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ipGre", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnPptpTunnelConfigTransport.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelConfigTransport.setDescription('This object defines the underlying transport media that is in use for this tunnel entry. Different tunnel transports may define MIB extensions to the PPTP tunnel table to realize the transport layer.')
stnPptpTunnelStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5), )
if mibBuilder.loadTexts: stnPptpTunnelStatsTable.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsTable.setDescription('The PPTP tunnel status and statistics table.')
stnPptpTunnelStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1), ).setIndexNames((0, "STN-PPTP-MIB", "stnPptpTunnelStatsIfIndex"))
if mibBuilder.loadTexts: stnPptpTunnelStatsEntry.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsEntry.setDescription('An PPTP tunnel interface stats entry.')
stnPptpTunnelStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsIfIndex.setDescription('This value for this object is equal to the value of ifIndex of the Interfaces MIB for tunnel interfaces of type PPTP.')
stnPptpTunnelStatsLocalTID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsLocalTID.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsLocalTID.setDescription('This object contains the local tunnel Identifier.')
stnPptpTunnelStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tunnelIdle", 1), ("tunnelConnecting", 2), ("tunnelEstablished", 3), ("tunnelDisconnecting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsState.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsState.setDescription('This field contains the current state of the control tunnel.')
stnPptpTunnelStatsInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locally", 1), ("remotely", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsInitiated.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsInitiated.setDescription('This object indicates whether the tunnel was initiated locally or by the remote tunnel peer.')
stnPptpTunnelStatsRemoteHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsRemoteHostName.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsRemoteHostName.setDescription('This object contains the host name as discovered during the tunnel establishment phase ')
stnPptpTunnelStatsRemoteVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsRemoteVendorName.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsRemoteVendorName.setDescription("This object identifies the vendor name of the peer's PPTP implementation. ")
stnPptpTunnelStatsRemoteFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsRemoteFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsRemoteFirmwareRevision.setDescription("This object contains the tunnel peer's firmware revision number.")
stnPptpTunnelStatsRemoteProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsRemoteProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsRemoteProtocolVersion.setDescription('This object describes the protocol version and revision of the tunnel peers implementation. The first octet contains the protocol version. The second octet contains the protocol revision.')
stnPptpTunnelStatsBearerCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("digital", 2), ("analog", 3), ("digitalAnalog", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsBearerCapabilities.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsBearerCapabilities.setDescription('This object describes the Bearer Capabilities of the tunnel peer.')
stnPptpTunnelStatsFramingCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("sync", 2), ("async", 3), ("syncAsync", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsFramingCapabilities.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsFramingCapabilities.setDescription('This object describes the Framing Capabilities of the tunnel peer.')
stnPptpTunnelStatsControlRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsControlRecvPackets.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsControlRecvPackets.setDescription('This object contains the number of control packets received on the tunnel.')
stnPptpTunnelStatsControlSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsControlSendPackets.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsControlSendPackets.setDescription('This object contains the number of control packets that were transmitted to the tunnel peer.')
stnPptpTunnelStatsTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsTotalSessions.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsTotalSessions.setDescription('This object contains the total number of sessions that this tunnel has successfully connected through to its tunnel peer since this tunnel was created.')
stnPptpTunnelStatsFailedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsFailedSessions.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsFailedSessions.setDescription('This object contains the total number of sessions that were initiated but failed to reach the established phase.')
stnPptpTunnelStatsActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsActiveSessions.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsActiveSessions.setDescription('This object contains the total number of sessions in the established state for this tunnel.')
stnPptpTunnelStatsLastResultCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsLastResultCode.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsLastResultCode.setDescription('This object contains the last value of the result code as described in the Result Code which caused the tunnel to disconnect.')
stnPptpTunnelStatsLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsLastErrorCode.setDescription('This object contains the last value of the error code as described in the Result Code which caused the tunnel to disconnect.')
stnPptpTunnelStatsLastErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 5, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelStatsLastErrorMessage.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelStatsLastErrorMessage.setDescription('This object contains the last value of the optional message as described in the Result Code which caused the tunnel to disconnect.')
stnPptpSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7), )
if mibBuilder.loadTexts: stnPptpSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsTable.setDescription('The PPTP session status and statistics table.')
stnPptpSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1), ).setIndexNames((0, "STN-PPTP-MIB", "stnPptpSessionStatsTunnelIfIndex"), (0, "STN-PPTP-MIB", "stnPptpSessionStatsLocalCID"))
if mibBuilder.loadTexts: stnPptpSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsEntry.setDescription('An PPTP session interface stats entry.')
stnPptpSessionStatsTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsTunnelIfIndex.setDescription('This object identifies the sessions associated PPTP tunnel ifIndex value.')
stnPptpSessionStatsHLIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsHLIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsHLIfIndex.setDescription('This object identifies the ifIndex value of the interface that is either below (Lower) the tunnel (if this tunnel endpoint is a PAC) or above (Higher) the tunnel (if this tunnel endpoint is a PNS). For example this could be a DS0 ifIndex on a PAC or it would be the PPP ifIndex on the PNS.')
stnPptpSessionStatsLocalCID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsLocalCID.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsLocalCID.setDescription('This object contains the local call identifier for the session.')
stnPptpSessionStatsRemoteCID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsRemoteCID.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsRemoteCID.setDescription('This object is not used.')
stnPptpSessionStatsUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsUserName.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsUserName.setDescription('This object identifies the peer session name on this interface. This is typically the login name of the remote user. If the user name is unknown to the local tunnel peer then this object will contain a null string.')
stnPptpSessionStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sessionIdle", 1), ("sessionConnecting", 2), ("sessionEstablished", 3), ("sessionDisconnecting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsState.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsState.setDescription('This object contains the current state of the session.')
stnPptpSessionStatsCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pacIncoming", 1), ("pnsIncoming", 2), ("pacOutgoing", 3), ("pnsOutgoing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsCallType.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsCallType.setDescription('This object indicates the type of call and the role this tunnel peer is providing for this session. For example, pacIncoming(1) indicates that this tunnel peer is acting as a PAC and generated a Incoming-Call-Request to the tunnel peer (the PNS). Note that tunnel peers can be both PAC and PNS simultaneously.')
stnPptpSessionStatsCallSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsCallSerialNumber.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsCallSerialNumber.setDescription('This object contains the serial number that has been assigned to this session.')
stnPptpSessionStatsTxConnectSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsTxConnectSpeed.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsTxConnectSpeed.setDescription('This object returns the last known transmit baud rate for this session.')
stnPptpSessionStatsRxConnectSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsRxConnectSpeed.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsRxConnectSpeed.setDescription('This object returns the last known receive baud rate for this session established.')
stnPptpSessionStatsCallBearerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("digital", 2), ("analog", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsCallBearerType.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsCallBearerType.setDescription('This object describes the bearer type of this session.')
stnPptpSessionStatsFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sync", 2), ("async", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsFramingType.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsFramingType.setDescription('This object describes the framing type of this session.')
stnPptpSessionStatsPhysChanId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsPhysChanId.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsPhysChanId.setDescription('This object contains the physical channel identifier for the session.')
stnPptpSessionStatsDNIS = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsDNIS.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsDNIS.setDescription('This object identifies the Dialed Number Information String that the PAC obtained from the network for the session. If no DNIS was provided then a null string will be returned.')
stnPptpSessionStatsCLID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsCLID.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsCLID.setDescription('This object identifies the Calling Line ID that the PAC obtained from the network for the session. If no CLID was provided then a null string will be returned.')
stnPptpSessionStatsSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsSubAddress.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsSubAddress.setDescription('This object identifies the Sub Address that the PAC obtained from the network for the session. If no Sub Address was provided then a null string will be returned.')
stnPptpSessionStatsPrivateGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsPrivateGroupID.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsPrivateGroupID.setDescription('This object identifies the Private Group Identifier used for this tunneled session. If no Private Group Identifier was provided then a null string will be returned.')
stnPptpSessionStatsLocalRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsLocalRWS.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsLocalRWS.setDescription('This object returns the local send window size for this session. ')
stnPptpSessionStatsRemoteInitialRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsRemoteInitialRWS.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsRemoteInitialRWS.setDescription('This object returns the initial remote send window size for this session. ')
stnPptpSessionStatsRemotePPD = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsRemotePPD.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsRemotePPD.setDescription('This object contains the Packet Processing Delay for the session. ')
stnPptpSessionStatsRecvZLB = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsRecvZLB.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsRecvZLB.setDescription('This object returns the total number of Zero Length Body acknowlegement payload packets received for this session.')
stnPptpSessionStatsOutSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsOutSequence.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsOutSequence.setDescription('This object returns the total number of packets received for this session which were received out of sequence.')
stnPptpSessionStatsSendZLB = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsSendZLB.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsSendZLB.setDescription('This object returns the total number of Zero Length Body acknowledgement packets transmitted on this session.')
stnPptpSessionStatsAckTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsAckTimeouts.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsAckTimeouts.setDescription('This object returns the total number of acknowledgement timeouts seen on payload packets for this session.')
stnPptpSesssionStatsCurrentRemoteRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 25), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSesssionStatsCurrentRemoteRWS.setStatus('current')
if mibBuilder.loadTexts: stnPptpSesssionStatsCurrentRemoteRWS.setDescription('This object contains the current remote receive window size as determined by the local flow control mechanism employed.')
stnPptpSessionStatsSendSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsSendSeq.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsSendSeq.setDescription('This object contains the next send sequence number for for this session.')
stnPptpSessionStatsSendSeqAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsSendSeqAck.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsSendSeqAck.setDescription('This object contains the send sequence number that the tunnel peer has acknowledged for the payload channel. The flow control state can be determined by subtracting the stnPptpSessionStatsSendSeq from stnPptpSessionStatsSendSeqAck and comparing this value to stnPptpSesssionStatsCurrentRemoteRWS.')
stnPptpSessionStatsRecvSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsRecvSeq.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsRecvSeq.setDescription('This object contains the next receive sequence number expected to be received on this session.')
stnPptpSessionStatsRecvSeqAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 7, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionStatsRecvSeqAck.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionStatsRecvSeqAck.setDescription('This object contains the last receive sequence number that was acknowledged back to the tunnel peer for the session.')
stnPptpTunnelMapTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 8), )
if mibBuilder.loadTexts: stnPptpTunnelMapTable.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelMapTable.setDescription('The PPTP Tunnel index mapping table.')
stnPptpTunnelMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 8, 1), ).setIndexNames((0, "STN-PPTP-MIB", "stnPptpTunnelMapLocalTID"))
if mibBuilder.loadTexts: stnPptpTunnelMapEntry.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelMapEntry.setDescription('An PPTP tunnel index map entry.')
stnPptpTunnelMapLocalTID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelMapLocalTID.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelMapLocalTID.setDescription('This object contains the local tunnel Identifier.')
stnPptpTunnelMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 8, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpTunnelMapIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnPptpTunnelMapIfIndex.setDescription('This value for this object is equal to the value of ifIndex of the Interfaces MIB for tunnel interfaces of type PPTP.')
stnPptpSessionMapTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 9), )
if mibBuilder.loadTexts: stnPptpSessionMapTable.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionMapTable.setDescription('The PPTP Session index mapping table.')
stnPptpSessionMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 9, 1), ).setIndexNames((0, "STN-PPTP-MIB", "stnPptpSessionMapHLIfIndex"))
if mibBuilder.loadTexts: stnPptpSessionMapEntry.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionMapEntry.setDescription('An PPTP Session index map entry.')
stnPptpSessionMapHLIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 9, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionMapHLIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionMapHLIfIndex.setDescription('This object identifies the ifIndex value of the interface that is either below (Lower) the tunnel (if this tunnel endpoint is a PAC) or above (Higher) the tunnel (if this tunnel endpoint is a PNS). For example this could be a DS0 ifIndex on a PAC or it would be the PPP ifIndex on the PNS.')
stnPptpSessionMapTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 9, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionMapTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionMapTunnelIfIndex.setDescription('This object identifies the sessions associated PPTP tunnel ifIndex value.')
stnPptpSessionMapLocalCID = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpSessionMapLocalCID.setStatus('current')
if mibBuilder.loadTexts: stnPptpSessionMapLocalCID.setDescription('This object contains the local call identifier for the session.')
stnPptpDomainMapTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 10), )
if mibBuilder.loadTexts: stnPptpDomainMapTable.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainMapTable.setDescription('This table provides a mapping between PPTP Domain identifiers, hostnames, and IP-ATM information')
stnPptpDomainMapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 10, 1), ).setIndexNames((0, "STN-PPTP-MIB", "stnPptpDomainMapIdentifier"))
if mibBuilder.loadTexts: stnPptpDomainMapTableEntry.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainMapTableEntry.setDescription('An entry within the STN PPTP Map Table.')
stnPptpDomainMapIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 10, 1, 1), DisplayString())
if mibBuilder.loadTexts: stnPptpDomainMapIdentifier.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainMapIdentifier.setDescription('PPTP Domain Identifier.')
stnPptpDomainMapHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainMapHostName.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainMapHostName.setDescription('The hostname that maps to the PPTP Domain Identifier.')
stnPptpDomainMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 10, 1, 3), StnDomainMapType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainMapType.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainMapType.setDescription('Identifiers whether the PPTP Domain maps to an IP subnet or an ATM circuit.')
stnPptpDomainMapTypeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 1, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnPptpDomainMapTypeInfo.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainMapTypeInfo.setDescription('Provides either IP or ATM specific display info.')
stnPptpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 2, 1))
stnPptpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 2, 2))
stnPptpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 2, 2, 1)).setObjects(("STN-PPTP-MIB", "stnPptpConfigGroup"), ("STN-PPTP-MIB", "stnPptpStatsGroup"), ("STN-PPTP-MIB", "stnPptpDomainGroup"), ("STN-PPTP-MIB", "stnPptpMappingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stnPptpCompliance = stnPptpCompliance.setStatus('current')
if mibBuilder.loadTexts: stnPptpCompliance.setDescription('The compliance statement for SNMPv2 entities which implement the PPTP MIB.')
stnPptpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 2, 1, 1)).setObjects(("STN-PPTP-MIB", "stnPptpAdminState"), ("STN-PPTP-MIB", "stnPptpTunnelConfigAuthentication"), ("STN-PPTP-MIB", "stnPptpTunnelConfigSecret"), ("STN-PPTP-MIB", "stnPptpTunnelConfigSecurity"), ("STN-PPTP-MIB", "stnPptpTunnelConfigHelloInterval"), ("STN-PPTP-MIB", "stnPptpTunnelConfigIdleTimeout"), ("STN-PPTP-MIB", "stnPptpTunnelConfigControlRWS"), ("STN-PPTP-MIB", "stnPptpTunnelConfigControlRetransmissions"), ("STN-PPTP-MIB", "stnPptpTunnelConfigPayloadSequencing"), ("STN-PPTP-MIB", "stnPptpTunnelConfigPayloadRWS"), ("STN-PPTP-MIB", "stnPptpTunnelConfigDelayedAckTimeout"), ("STN-PPTP-MIB", "stnPptpTunnelConfigReassemblyTimeout"), ("STN-PPTP-MIB", "stnPptpTunnelConfigTransport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stnPptpConfigGroup = stnPptpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: stnPptpConfigGroup.setDescription('A collection of objects providing configuration information of the PPTP protocol, tunnels and sessions.')
stnPptpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 2, 1, 2)).setObjects(("STN-PPTP-MIB", "stnPptpProtocolVersion"), ("STN-PPTP-MIB", "stnPptpVendorName"), ("STN-PPTP-MIB", "stnPptpFirmwareRev"), ("STN-PPTP-MIB", "stnPptpTunnelStatsIfIndex"), ("STN-PPTP-MIB", "stnPptpTunnelStatsLocalTID"), ("STN-PPTP-MIB", "stnPptpTunnelStatsState"), ("STN-PPTP-MIB", "stnPptpTunnelStatsInitiated"), ("STN-PPTP-MIB", "stnPptpTunnelStatsRemoteHostName"), ("STN-PPTP-MIB", "stnPptpTunnelStatsRemoteVendorName"), ("STN-PPTP-MIB", "stnPptpTunnelStatsRemoteFirmwareRevision"), ("STN-PPTP-MIB", "stnPptpTunnelStatsRemoteProtocolVersion"), ("STN-PPTP-MIB", "stnPptpTunnelStatsBearerCapabilities"), ("STN-PPTP-MIB", "stnPptpTunnelStatsFramingCapabilities"), ("STN-PPTP-MIB", "stnPptpTunnelStatsControlRecvPackets"), ("STN-PPTP-MIB", "stnPptpTunnelStatsControlSendPackets"), ("STN-PPTP-MIB", "stnPptpTunnelStatsTotalSessions"), ("STN-PPTP-MIB", "stnPptpTunnelStatsFailedSessions"), ("STN-PPTP-MIB", "stnPptpTunnelStatsActiveSessions"), ("STN-PPTP-MIB", "stnPptpTunnelStatsLastResultCode"), ("STN-PPTP-MIB", "stnPptpTunnelStatsLastErrorCode"), ("STN-PPTP-MIB", "stnPptpTunnelStatsLastErrorMessage"), ("STN-PPTP-MIB", "stnPptpSessionStatsTunnelIfIndex"), ("STN-PPTP-MIB", "stnPptpSessionStatsHLIfIndex"), ("STN-PPTP-MIB", "stnPptpSessionStatsLocalCID"), ("STN-PPTP-MIB", "stnPptpSessionStatsRemoteCID"), ("STN-PPTP-MIB", "stnPptpSessionStatsUserName"), ("STN-PPTP-MIB", "stnPptpSessionStatsState"), ("STN-PPTP-MIB", "stnPptpSessionStatsCallType"), ("STN-PPTP-MIB", "stnPptpSessionStatsCallSerialNumber"), ("STN-PPTP-MIB", "stnPptpSessionStatsTxConnectSpeed"), ("STN-PPTP-MIB", "stnPptpSessionStatsRxConnectSpeed"), ("STN-PPTP-MIB", "stnPptpSessionStatsCallBearerType"), ("STN-PPTP-MIB", "stnPptpSessionStatsFramingType"), ("STN-PPTP-MIB", "stnPptpSessionStatsPhysChanId"), ("STN-PPTP-MIB", "stnPptpSessionStatsDNIS"), ("STN-PPTP-MIB", "stnPptpSessionStatsCLID"), ("STN-PPTP-MIB", "stnPptpSessionStatsSubAddress"), ("STN-PPTP-MIB", "stnPptpSessionStatsPrivateGroupID"), ("STN-PPTP-MIB", "stnPptpSessionStatsLocalRWS"), ("STN-PPTP-MIB", "stnPptpSessionStatsRemoteInitialRWS"), ("STN-PPTP-MIB", "stnPptpSessionStatsRemotePPD"), ("STN-PPTP-MIB", "stnPptpSessionStatsRecvZLB"), ("STN-PPTP-MIB", "stnPptpSessionStatsOutSequence"), ("STN-PPTP-MIB", "stnPptpSessionStatsSendZLB"), ("STN-PPTP-MIB", "stnPptpSessionStatsAckTimeouts"), ("STN-PPTP-MIB", "stnPptpSesssionStatsCurrentRemoteRWS"), ("STN-PPTP-MIB", "stnPptpSessionStatsSendSeq"), ("STN-PPTP-MIB", "stnPptpSessionStatsSendSeqAck"), ("STN-PPTP-MIB", "stnPptpSessionStatsRecvSeq"), ("STN-PPTP-MIB", "stnPptpSessionStatsRecvSeqAck"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stnPptpStatsGroup = stnPptpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: stnPptpStatsGroup.setDescription('A collection of objects providing status and statistics of the PPTP protocol, tunnels and sessions.')
stnPptpDomainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 2, 1, 4)).setObjects(("STN-PPTP-MIB", "stnPptpDomainConfigAdminState"), ("STN-PPTP-MIB", "stnPptpDomainConfigAuthentication"), ("STN-PPTP-MIB", "stnPptpDomainConfigSecret"), ("STN-PPTP-MIB", "stnPptpDomainConfigTunnelSecurity"), ("STN-PPTP-MIB", "stnPptpDomainConfigTunnelHelloInterval"), ("STN-PPTP-MIB", "stnPptpDomainConfigTunnelIdleTimeout"), ("STN-PPTP-MIB", "stnPptpDomainConfigControlRWS"), ("STN-PPTP-MIB", "stnPptpDomainConfigControlRetransmissions"), ("STN-PPTP-MIB", "stnPptpDomainConfigPayloadSequencing"), ("STN-PPTP-MIB", "stnPptpDomainConfigPayloadRWS"), ("STN-PPTP-MIB", "stnPptpDomainConfigDelayedAckTimeout"), ("STN-PPTP-MIB", "stnPptpDomainConfigReassemblyTimeout"), ("STN-PPTP-MIB", "stnPptpDomainConfigStatus"), ("STN-PPTP-MIB", "stnPptpDomainStatsTotalTunnels"), ("STN-PPTP-MIB", "stnPptpDomainStatsFailedTunnels"), ("STN-PPTP-MIB", "stnPptpDomainStatsFailedAuthentications"), ("STN-PPTP-MIB", "stnPptpDomainStatsActiveTunnels"), ("STN-PPTP-MIB", "stnPptpDomainStatsTotalSessions"), ("STN-PPTP-MIB", "stnPptpDomainStatsFailedSessions"), ("STN-PPTP-MIB", "stnPptpDomainStatsActiveSessions"), ("STN-PPTP-MIB", "stnPptpDomainStatsControlRecvOctets"), ("STN-PPTP-MIB", "stnPptpDomainStatsControlRecvPackets"), ("STN-PPTP-MIB", "stnPptpDomainStatsControlSendOctets"), ("STN-PPTP-MIB", "stnPptpDomainStatsControlSendPackets"), ("STN-PPTP-MIB", "stnPptpDomainStatsPayloadRecvOctets"), ("STN-PPTP-MIB", "stnPptpDomainStatsPayloadRecvPackets"), ("STN-PPTP-MIB", "stnPptpDomainStatsPayloadRecvDiscards"), ("STN-PPTP-MIB", "stnPptpDomainStatsPayloadSendOctets"), ("STN-PPTP-MIB", "stnPptpDomainStatsPayloadSendPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stnPptpDomainGroup = stnPptpDomainGroup.setStatus('current')
if mibBuilder.loadTexts: stnPptpDomainGroup.setDescription('A collection of objects providing configuration, status and statistics of PPTP tunnel domains.')
stnPptpMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3551, 4, 1, 10, 2, 1, 5)).setObjects(("STN-PPTP-MIB", "stnPptpTunnelMapLocalTID"), ("STN-PPTP-MIB", "stnPptpTunnelMapIfIndex"), ("STN-PPTP-MIB", "stnPptpSessionMapHLIfIndex"), ("STN-PPTP-MIB", "stnPptpSessionMapTunnelIfIndex"), ("STN-PPTP-MIB", "stnPptpSessionMapLocalCID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stnPptpMappingGroup = stnPptpMappingGroup.setStatus('current')
if mibBuilder.loadTexts: stnPptpMappingGroup.setDescription('A collection of objects providing index mapping.')
mibBuilder.exportSymbols("STN-PPTP-MIB", stnPptpTunnelStatsInitiated=stnPptpTunnelStatsInitiated, stnPptpSessionStatsRecvSeqAck=stnPptpSessionStatsRecvSeqAck, stnPptpTraps=stnPptpTraps, stnPptpTunnelConfigEntry=stnPptpTunnelConfigEntry, stnPptpDomainConfigSecret=stnPptpDomainConfigSecret, stnPptpSessionStatsRecvSeq=stnPptpSessionStatsRecvSeq, stnPptpProtocolVersion=stnPptpProtocolVersion, stnPptpTunnelConfigIdleTimeout=stnPptpTunnelConfigIdleTimeout, stnPptpTunnelStatsTable=stnPptpTunnelStatsTable, stnPptpTunnelStatsRemoteProtocolVersion=stnPptpTunnelStatsRemoteProtocolVersion, stnPptpSessionMapEntry=stnPptpSessionMapEntry, stnPptpSessionStatsRemotePPD=stnPptpSessionStatsRemotePPD, stnPptpSessionStatsCallSerialNumber=stnPptpSessionStatsCallSerialNumber, stnPptpTunnelStatsIfIndex=stnPptpTunnelStatsIfIndex, stnPptpSessionStatsRxConnectSpeed=stnPptpSessionStatsRxConnectSpeed, stnPptpDomainStatsPayloadRecvPackets=stnPptpDomainStatsPayloadRecvPackets, stnPptpSessionStatsSendSeq=stnPptpSessionStatsSendSeq, stnPptpSessionStatsPrivateGroupID=stnPptpSessionStatsPrivateGroupID, stnPptpDomainStatsPayloadRecvOctets=stnPptpDomainStatsPayloadRecvOctets, stnPptpDomainStatsIdentifier=stnPptpDomainStatsIdentifier, stnPptpTunnelMapLocalTID=stnPptpTunnelMapLocalTID, stnPptpSessionStatsRecvZLB=stnPptpSessionStatsRecvZLB, stnPptpTunnelStatsControlRecvPackets=stnPptpTunnelStatsControlRecvPackets, stnPptpTunnelStatsLastErrorMessage=stnPptpTunnelStatsLastErrorMessage, stnPptpSessionStatsCallBearerType=stnPptpSessionStatsCallBearerType, stnPptpTunnelConfigHelloInterval=stnPptpTunnelConfigHelloInterval, stnPptpDomainConfigPayloadSequencing=stnPptpDomainConfigPayloadSequencing, stnPptpDomainConfigPayloadRWS=stnPptpDomainConfigPayloadRWS, stnPptpSessionStatsCallType=stnPptpSessionStatsCallType, stnPptpSessionStatsAckTimeouts=stnPptpSessionStatsAckTimeouts, stnPptpDomainMapHostName=stnPptpDomainMapHostName, stnPptpTunnelMapEntry=stnPptpTunnelMapEntry, stnPptpDomainConfigAuthentication=stnPptpDomainConfigAuthentication, stnPptpDomainConfigStatus=stnPptpDomainConfigStatus, stnPptpTunnelStatsLocalTID=stnPptpTunnelStatsLocalTID, stnPptpTunnelMapIfIndex=stnPptpTunnelMapIfIndex, stnPptpConfigGroup=stnPptpConfigGroup, stnPptpTunnelConfigTransport=stnPptpTunnelConfigTransport, stnPptpDomainConfigControlRetransmissions=stnPptpDomainConfigControlRetransmissions, stnPptpTunnelStatsBearerCapabilities=stnPptpTunnelStatsBearerCapabilities, stnPptpSessionStatsUserName=stnPptpSessionStatsUserName, stnPptpSessionStatsPhysChanId=stnPptpSessionStatsPhysChanId, stnPptpTunnelStatsTotalSessions=stnPptpTunnelStatsTotalSessions, stnPptpDomainConfigTable=stnPptpDomainConfigTable, stnPptpSessionMapTunnelIfIndex=stnPptpSessionMapTunnelIfIndex, stnPptpSessionMapLocalCID=stnPptpSessionMapLocalCID, stnPptpTunnelConfigTable=stnPptpTunnelConfigTable, stnPptpDomainStatsTotalSessions=stnPptpDomainStatsTotalSessions, stnPptpDomainStatsPayloadSendOctets=stnPptpDomainStatsPayloadSendOctets, stnPptpDomainConfigIdentifier=stnPptpDomainConfigIdentifier, stnPptpDomainStatsFailedTunnels=stnPptpDomainStatsFailedTunnels, stnPptpTunnelStatsFailedSessions=stnPptpTunnelStatsFailedSessions, stnPptpSessionStatsTable=stnPptpSessionStatsTable, stnPptpTunnelMapTable=stnPptpTunnelMapTable, stnPptpDomainStatsFailedSessions=stnPptpDomainStatsFailedSessions, stnPptpDomainConfigTunnelSecurity=stnPptpDomainConfigTunnelSecurity, stnPptpDomainConfigTunnelIdleTimeout=stnPptpDomainConfigTunnelIdleTimeout, stnPptpDomainMapTable=stnPptpDomainMapTable, stnPptpAdminState=stnPptpAdminState, stnPptpTunnelConfigReassemblyTimeout=stnPptpTunnelConfigReassemblyTimeout, stnPptpTunnelStatsLastErrorCode=stnPptpTunnelStatsLastErrorCode, stnPptpObjects=stnPptpObjects, stnPptpTunnelConfigAuthentication=stnPptpTunnelConfigAuthentication, stnPptpSessionStatsFramingType=stnPptpSessionStatsFramingType, stnPptpTunnelConfigSecret=stnPptpTunnelConfigSecret, stnPptpDomainStatsFailedAuthentications=stnPptpDomainStatsFailedAuthentications, stnPptpTunnelStatsLastResultCode=stnPptpTunnelStatsLastResultCode, stnPptpDomainConfigControlRWS=stnPptpDomainConfigControlRWS, stnPptpDomainStatsPayloadSendPackets=stnPptpDomainStatsPayloadSendPackets, stnPptpTunnelStatsControlSendPackets=stnPptpTunnelStatsControlSendPackets, stnPptpCompliances=stnPptpCompliances, stnPptpTunnelStatsRemoteHostName=stnPptpTunnelStatsRemoteHostName, stnPptpTunnelConfigIfIndex=stnPptpTunnelConfigIfIndex, stnPptpDomainStatsControlSendPackets=stnPptpDomainStatsControlSendPackets, stnPptpTunnelStatsRemoteVendorName=stnPptpTunnelStatsRemoteVendorName, stnPptpDomainConfigAdminState=stnPptpDomainConfigAdminState, stnPptpDomainStatsTable=stnPptpDomainStatsTable, stnPptpTunnelStatsRemoteFirmwareRevision=stnPptpTunnelStatsRemoteFirmwareRevision, stnPptpTunnelStatsFramingCapabilities=stnPptpTunnelStatsFramingCapabilities, stnPptpDomainStatsControlRecvOctets=stnPptpDomainStatsControlRecvOctets, stnPptpFirmwareRev=stnPptpFirmwareRev, stnPptpDomainStatsControlRecvPackets=stnPptpDomainStatsControlRecvPackets, stnPptpSessionStatsSendZLB=stnPptpSessionStatsSendZLB, stnPptpDomainMapIdentifier=stnPptpDomainMapIdentifier, stnPptpDomainStatsPayloadRecvDiscards=stnPptpDomainStatsPayloadRecvDiscards, stnPptpDomainConfigTunnelHelloInterval=stnPptpDomainConfigTunnelHelloInterval, stnPptpScalar=stnPptpScalar, stnPptpStats=stnPptpStats, stnPptpSessionStatsTxConnectSpeed=stnPptpSessionStatsTxConnectSpeed, MilliSeconds=MilliSeconds, stnPptpSessionStatsRemoteCID=stnPptpSessionStatsRemoteCID, stnPptpConfig=stnPptpConfig, stnPptpTunnelStatsActiveSessions=stnPptpTunnelStatsActiveSessions, stnPptpCompliance=stnPptpCompliance, stnPptpDomainStatsEntry=stnPptpDomainStatsEntry, stnPptpSessionStatsLocalRWS=stnPptpSessionStatsLocalRWS, stnPptpMappingGroup=stnPptpMappingGroup, stnPptpSessionMapTable=stnPptpSessionMapTable, stnPptpSessionStatsLocalCID=stnPptpSessionStatsLocalCID, stnPptpSessionStatsDNIS=stnPptpSessionStatsDNIS, stnPptpDomainStatsControlSendOctets=stnPptpDomainStatsControlSendOctets, stnPptp=stnPptp, stnPptpSessionStatsSubAddress=stnPptpSessionStatsSubAddress, stnPptpDomainStatsActiveSessions=stnPptpDomainStatsActiveSessions, stnPptpDomainConfigDelayedAckTimeout=stnPptpDomainConfigDelayedAckTimeout, PYSNMP_MODULE_ID=stnPptp, stnPptpDomainMapTypeInfo=stnPptpDomainMapTypeInfo, stnPptpDomainMapType=stnPptpDomainMapType, stnPptpDomainStatsActiveTunnels=stnPptpDomainStatsActiveTunnels, stnPptpTunnelConfigPayloadSequencing=stnPptpTunnelConfigPayloadSequencing, stnPptpSesssionStatsCurrentRemoteRWS=stnPptpSesssionStatsCurrentRemoteRWS, stnPptpGroups=stnPptpGroups, stnPptpDomainConfigReassemblyTimeout=stnPptpDomainConfigReassemblyTimeout, stnPptpSessionStatsEntry=stnPptpSessionStatsEntry, stnPptpVendorName=stnPptpVendorName, stnPptpSessionStatsHLIfIndex=stnPptpSessionStatsHLIfIndex, stnPptpTunnelStatsState=stnPptpTunnelStatsState, stnPptpDomainGroup=stnPptpDomainGroup, stnPptpMibConformance=stnPptpMibConformance, stnPptpTunnelConfigSecurity=stnPptpTunnelConfigSecurity, stnPptpDomainConfigEntry=stnPptpDomainConfigEntry, stnPptpSessionStatsState=stnPptpSessionStatsState, stnPptpTunnelConfigControlRWS=stnPptpTunnelConfigControlRWS, stnPptpSessionStatsTunnelIfIndex=stnPptpSessionStatsTunnelIfIndex, stnPptpTunnelStatsEntry=stnPptpTunnelStatsEntry, stnPptpDomainMapTableEntry=stnPptpDomainMapTableEntry, stnPptpSessionStatsSendSeqAck=stnPptpSessionStatsSendSeqAck, stnPptpSessionStatsOutSequence=stnPptpSessionStatsOutSequence, stnPptpDomainStatsTotalTunnels=stnPptpDomainStatsTotalTunnels, stnPptpTunnelConfigPayloadRWS=stnPptpTunnelConfigPayloadRWS, stnPptpSessionStatsRemoteInitialRWS=stnPptpSessionStatsRemoteInitialRWS, stnPptpTunnelConfigDelayedAckTimeout=stnPptpTunnelConfigDelayedAckTimeout, stnPptpStatsGroup=stnPptpStatsGroup, stnPptpSessionStatsCLID=stnPptpSessionStatsCLID, stnPptpTunnelConfigControlRetransmissions=stnPptpTunnelConfigControlRetransmissions, stnPptpSessionMapHLIfIndex=stnPptpSessionMapHLIfIndex)
