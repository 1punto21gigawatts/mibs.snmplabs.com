#
# PySNMP MIB module WHISP-PLV-GATEWAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WHISP-PLV-GATEWAY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, Integer32, Bits, TimeTicks, Counter64, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Counter32, ObjectIdentity, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "Bits", "TimeTicks", "Counter64", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Counter32", "ObjectIdentity", "MibIdentifier", "Gauge32")
MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention")
whispPlvGateway, = mibBuilder.importSymbols("WHISP-GLOBAL-REG-MIB", "whispPlvGateway")
WhispMACAddress, WhispLUID = mibBuilder.importSymbols("WHISP-TC-MIB", "WhispMACAddress", "WhispLUID")
whispPlvGatewayMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1))
whispPlvGatewayMIB.setRevisions(('2006-07-28 10:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: whispPlvGatewayMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: whispPlvGatewayMIB.setLastUpdated('200607281030Z')
if mibBuilder.loadTexts: whispPlvGatewayMIB.setOrganization('Motorola')
if mibBuilder.loadTexts: whispPlvGatewayMIB.setContactInfo('Canopy Technical Support email: technical-support@canopywireless.com')
if mibBuilder.loadTexts: whispPlvGatewayMIB.setDescription('Initial Version.')
whispPlvGatewayObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1))
whispPlvGwInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 1))
gwInfoModel = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwInfoModel.setStatus('current')
if mibBuilder.loadTexts: gwInfoModel.setDescription('This object indicates the Gateway Model Number.')
gwInfoSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwInfoSerialNumber.setStatus('current')
if mibBuilder.loadTexts: gwInfoSerialNumber.setDescription('This object indicates the Gateway Serial Number.')
gwInfoLanMac = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwInfoLanMac.setStatus('current')
if mibBuilder.loadTexts: gwInfoLanMac.setDescription("This object indicates the Gateway's LAN port MAC Address.")
gwInfoWanMac = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwInfoWanMac.setStatus('current')
if mibBuilder.loadTexts: gwInfoWanMac.setDescription("This object indicates the Gateway's WAN port MAC Address.")
gwInfoPlcMac = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwInfoPlcMac.setStatus('current')
if mibBuilder.loadTexts: gwInfoPlcMac.setDescription('This object indicates the Gateway PLC MAC Address')
gwInfoHardwareVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwInfoHardwareVer.setStatus('current')
if mibBuilder.loadTexts: gwInfoHardwareVer.setDescription('This object indicates the Gateway Hardware Version.')
gwInfoDevFirmwareVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwInfoDevFirmwareVer.setStatus('current')
if mibBuilder.loadTexts: gwInfoDevFirmwareVer.setDescription('This object indicates the Gateway Device Firmware Version.')
gwInfoLoaderVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwInfoLoaderVer.setStatus('current')
if mibBuilder.loadTexts: gwInfoLoaderVer.setDescription('This object indicates the Gateway Loader Version.')
gwInfoSimFirmwareVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwInfoSimFirmwareVer.setStatus('current')
if mibBuilder.loadTexts: gwInfoSimFirmwareVer.setDescription('This object indicates the Intellon Simple Module Firmware Version.')
gwInfoModemCount = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwInfoModemCount.setStatus('current')
if mibBuilder.loadTexts: gwInfoModemCount.setDescription('This object indicates the number of Modems registered to the Gateway.')
gwInfoDeviceUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notStarted", 1), ("inProgress", 2), ("failed", 3), ("successful", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwInfoDeviceUpgradeStatus.setStatus('current')
if mibBuilder.loadTexts: gwInfoDeviceUpgradeStatus.setDescription('This object indicates the Gateway Last Software Upgrade Status. 0 - Upgrade not started 1 - Upgrade in progress 2 - Last Upgrade failed 3 - Last Upgrade was successful.')
gwInfoSimUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notStarted", 1), ("inProgress", 2), ("failed", 3), ("successful", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwInfoSimUpgradeStatus.setStatus('current')
if mibBuilder.loadTexts: gwInfoSimUpgradeStatus.setDescription("This object indicates the Intellon Simple Module's last Software Upgrade Status. 0 - Upgrade not started 1 - Upgrade in progress 2 - Last Upgrade failed 3 - Last Upgrade was successful.")
gwInfoTemperature = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 1, 13), Integer32()).setUnits('Degrees Centigrade.').setMaxAccess("readonly")
if mibBuilder.loadTexts: gwInfoTemperature.setStatus('current')
if mibBuilder.loadTexts: gwInfoTemperature.setDescription('This object indicates the ambient temperature of the Gateway.')
whispPlvGwConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 2))
gwConfNtpConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfNtpConfig.setStatus('current')
if mibBuilder.loadTexts: gwConfNtpConfig.setDescription("This object is used to Enable or Disable the Gateway to set it's system clock using NTP.")
gwConfNtpServer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfNtpServer.setStatus('current')
if mibBuilder.loadTexts: gwConfNtpServer.setDescription('This object is used to configure the NTP Server.')
gwConfTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTime.setStatus('current')
if mibBuilder.loadTexts: gwConfTime.setDescription("This object is used to configure Gateway's system clock time. The input format is HH:MM::SS. This object is accessible only if gwConfNtpConfig is disabled.")
gwConfDate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfDate.setStatus('current')
if mibBuilder.loadTexts: gwConfDate.setDescription("This object is used to configure Gateway's system clock date. The input format is YYYY/MM/DD. This object is accessible only if gwConfNtpConfig is disabled.")
gwConfModemTableTimeout = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfModemTableTimeout.setStatus('current')
if mibBuilder.loadTexts: gwConfModemTableTimeout.setDescription('This object is used to configure the Modem Table Timeout. Any Inactive Modem will be deleted from the Modem table, if it is inactive for a period more than the timeout value.')
gwConfAutoLogoutTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3660))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfAutoLogoutTime.setStatus('current')
if mibBuilder.loadTexts: gwConfAutoLogoutTime.setDescription("This object is used to configure the Gateway Auto Logout Time. User will be logged out of the Gateway's web interface, if there is inactivity for a period more than the Auto Logout Time.")
gwConfPSD = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(84, 84)).setFixedLength(84)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfPSD.setStatus('current')
if mibBuilder.loadTexts: gwConfPSD.setDescription('This object indicates the Power Spectral Density of the signal, at all the 84 carriers, that the device transmits. Starting at the left most octet, which represents the spectral value at channel number 0, each octet represents the spectral value at the corresponding channel number. The channel numbers 4, 5, 13, 14, 29, 49, 50, 51, 69 and 70 are masked and their spectral values cannot be changed.')
whispPlvGwTrapConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3))
gwConfTrapIp1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapIp1.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapIp1.setDescription('This object is used to configure IP Address of SNMP Trap Client #1.')
gwConfTrapCommStr1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapCommStr1.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapCommStr1.setDescription('This object is used to configure SNMP Community string for Trap Client #1.')
gwConfTrapIp2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapIp2.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapIp2.setDescription('This object is used to configure IP Address of SNMP Trap Client #2.')
gwConfTrapCommStr2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapCommStr2.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapCommStr2.setDescription('This object is used to configure SNMP Community string for Trap Client #2.')
gwConfTrapIp3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapIp3.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapIp3.setDescription('This object is used to configure IP Address of SNMP Trap Client #3.')
gwConfTrapCommStr3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapCommStr3.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapCommStr3.setDescription('This object is used to configure SNMP Community string for Trap Client #3.')
gwConfTrapIp4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapIp4.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapIp4.setDescription('This object is used to configure IP Address of SNMP Trap Client #4.')
gwConfTrapCommStr4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapCommStr4.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapCommStr4.setDescription('This object is used to configure SNMP Community string for Trap Client #4.')
gwConfTrapIp5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapIp5.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapIp5.setDescription('This object is used to configure IP Address of SNMP Trap Client #5.')
gwConfTrapCommStr5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapCommStr5.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapCommStr5.setDescription('This object is used to configure SNMP Community string for Trap Client #5.')
gwConfTrapIp6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapIp6.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapIp6.setDescription('This object is used to configure IP Address of SNMP Trap Client #6.')
gwConfTrapCommStr6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapCommStr6.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapCommStr6.setDescription('This object is used to configure SNMP Community string for Trap Client #6.')
gwConfTrapIp7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapIp7.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapIp7.setDescription('This object is used to configure IP Address of SNMP Trap Client #7.')
gwConfTrapCommStr7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapCommStr7.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapCommStr7.setDescription('This object is used to configure SNMP Community string for Trap Client #7.')
gwConfTrapIp8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapIp8.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapIp8.setDescription('This object is used to configure IP Address of SNMP Trap Client #8.')
gwConfTrapCommStr8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapCommStr8.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapCommStr8.setDescription('This object is used to configure SNMP Community string for Trap Client #8.')
gwConfTrapIp9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapIp9.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapIp9.setDescription('This object is used to configure IP Address of SNMP Trap Client #9.')
gwConfTrapCommStr9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapCommStr9.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapCommStr9.setDescription('This object is used to configure SNMP Community string for Trap Client #9.')
gwConfTrapIp10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapIp10.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapIp10.setDescription('This object is used to configure IP Address of SNMP Trap Client #10.')
gwConfTrapCommStr10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwConfTrapCommStr10.setStatus('current')
if mibBuilder.loadTexts: gwConfTrapCommStr10.setDescription('This object is used to configure SNMP Community string for Trap Client #10.')
whispPlvGwPwrLnStats = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 4))
gwPwrLnMaxDelay = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwPwrLnMaxDelay.setStatus('current')
if mibBuilder.loadTexts: gwPwrLnMaxDelay.setDescription('This object indicates the Maximum transfer delay on Powerline.')
gwPwrLnTxAck = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwPwrLnTxAck.setStatus('current')
if mibBuilder.loadTexts: gwPwrLnTxAck.setDescription('This object indicates the Powerline Transmit ACK count.')
gwPwrLnTxNak = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwPwrLnTxNak.setStatus('current')
if mibBuilder.loadTexts: gwPwrLnTxNak.setDescription('This object indicates the Powerline Transmit NACK count.')
gwPwrLnTxFail = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwPwrLnTxFail.setStatus('current')
if mibBuilder.loadTexts: gwPwrLnTxFail.setDescription('This object indicates the Powerline Transmission Failures.')
gwPwrLnTxColl = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwPwrLnTxColl.setStatus('current')
if mibBuilder.loadTexts: gwPwrLnTxColl.setDescription('This object indicates the Powerline Transmission Collisions.')
gwPwrLnTxCarrLoss = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwPwrLnTxCarrLoss.setStatus('current')
if mibBuilder.loadTexts: gwPwrLnTxCarrLoss.setDescription('This object indicates the Powerline Transmt Carrier Loss Detection.')
gwPwrLnRoboByte40 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwPwrLnRoboByte40.setStatus('current')
if mibBuilder.loadTexts: gwPwrLnRoboByte40.setDescription('This object indicates the raw value of channel capacity as reported by Intellon PHY')
gwPwrLnRoboFails = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwPwrLnRoboFails.setStatus('current')
if mibBuilder.loadTexts: gwPwrLnRoboFails.setDescription('This object indicates the Powerline protocol receive failures, in ROBO mode.')
gwPwrLnRoboDrops = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwPwrLnRoboDrops.setStatus('current')
if mibBuilder.loadTexts: gwPwrLnRoboDrops.setDescription('This object indicates the Powerline protocol transmit drops, in ROBO mode.')
whispPlvGwAdmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5))
gwAdmConfLoginUsername = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfLoginUsername.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfLoginUsername.setDescription("This object is used to configure Gateway's System Management Login Username.")
gwAdmConfLoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfLoginPassword.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfLoginPassword.setDescription("This object is used to configure Gateway's System Management Login Password.")
gwAdmConfNEK = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfNEK.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfNEK.setDescription('This object is used to configure Network Encryption Key of the Gateway.')
gwAdmConfAuthServIp1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfAuthServIp1.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfAuthServIp1.setDescription('This object is used to configure BAM Server #1 IP Address.')
gwAdmConfAuthServIp2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfAuthServIp2.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfAuthServIp2.setDescription('This object is used to configure BAM Server #2 IP Address.')
gwAdmConfAuthServIp3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfAuthServIp3.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfAuthServIp3.setDescription('This object is used to configure BAM Server #3 IP Address.')
gwAdmConfAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfAuthMode.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfAuthMode.setDescription('This object is used to Enable or Disable BAM Authentication on the Gateway.')
gwAdmConfAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfAuthKey.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfAuthKey.setDescription('This object is used to configure Authentication Key, to use with BAM Server, on the Gateway.')
gwAdmConfAuthKeyOption = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useDefaultKey", 1), ("useKeySet", 2))).clone('useDefaultKey')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfAuthKeyOption.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfAuthKeyOption.setDescription('This object is used to configure the Authentication Key to be used, on the Gateway.')
gwAdmConfSnmpGetCommStr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfSnmpGetCommStr.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfSnmpGetCommStr.setDescription("This object is used to configure SNMP 'Read' community string of the Gateway.")
gwAdmConfSnmpSetCommStr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfSnmpSetCommStr.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfSnmpSetCommStr.setDescription("This object is used to configure SNMP 'Read-Write' community string of the Gateway.")
gwAdmConfSnmpAdminCommStr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfSnmpAdminCommStr.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfSnmpAdminCommStr.setDescription("This object is used to configure SNMP 'Admin' community string of the Gateway.")
gwAdmConfFtpServerIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfFtpServerIp.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfFtpServerIp.setDescription('This object is used to configure IP Address of FTP server hosting auto-upgrade files.')
gwAdmConfFtpUsername = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfFtpUsername.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfFtpUsername.setDescription('This object is used to configure Username to login to a FTP server, for use with FTP-based auto-upgrade.')
gwAdmConfFtpPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfFtpPassword.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfFtpPassword.setDescription('This object is used to configure Password to login to a FTP server, for use with FTP-based auto-upgrade.')
gwAdmConfFtpFile = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfFtpFile.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfFtpFile.setDescription('This object is used to configure Path and/or Filename of the firmware file, for use with FTP-based auto-upgrade.')
gwAdmConfDeviceUpgradeStart = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upgrade", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfDeviceUpgradeStart.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfDeviceUpgradeStart.setDescription("This object is used to Start Device Firmware Upgrade process in the Gateway. To start the upgrade process, this object should be set to '1'.")
gwAdmConfSimUpgradeStart = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upgrade", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfSimUpgradeStart.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfSimUpgradeStart.setDescription("This object is used to start Intellon Simple Module Firmware Upgrade process in the Gateway. To start the upgrade process, this object should be set to '1'.")
gwAdmConfSystemReboot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reboot", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfSystemReboot.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfSystemReboot.setDescription("This object is used to Reboot the Gateway. To reboot the Gateway, this object should be set to '1'.")
gwAdmConfReset = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfReset.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfReset.setDescription("This object is used to reset the Gateway configuration to Factory Defaults. To reset the Gateway configuration to factory defaults, this object should be set to '1'.")
gwAdmConfDeviceMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch", 1), ("nat", 2))).clone('switch')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfDeviceMode.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfDeviceMode.setDescription("This object is used to configure the device in 'switch' mode or 'NAT' mode.")
gwAdmConfLUIDStart = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2047)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfLUIDStart.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfLUIDStart.setDescription('This object is used to configure the starting value of the Modem LUID range. This value should not be greater than gwAdmConfLUIDEnd value')
gwAdmConfLUIDEnd = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2047)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfLUIDEnd.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfLUIDEnd.setDescription('This object is used to configure the ending value of the Modem LUID range. This value should not be less than gwAdmConfLUIDStart value')
gwAdmConfVLANPassthroughStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfVLANPassthroughStatus.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfVLANPassthroughStatus.setDescription('This object is used to enable or disable VLAN Passthrough feature.')
gwAdmConfManagementVLANId = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 5, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfManagementVLANId.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfManagementVLANId.setDescription('This object is used to enable or disable VLAN Passthrough feature.')
whispPlvGwAdmLanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 6))
gwAdmConfLanConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfLanConfig.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfLanConfig.setDescription('This object is used to Enable or Disable DHCP client.')
gwAdmConfLanIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfLanIp.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfLanIp.setDescription('This object is used to configure LAN IP Address.')
gwAdmConfLanSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfLanSubnetMask.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfLanSubnetMask.setDescription('This object is used to configure LAN IP Subnet Mask.')
gwAdmConfLanGatewayIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmConfLanGatewayIp.setStatus('current')
if mibBuilder.loadTexts: gwAdmConfLanGatewayIp.setDescription('This object is used to configure Gateway IP Address.')
whispPlvGwAdmSnmpAcessConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7))
gwAdmSnmpAccessIpNetwork1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork1.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork1.setDescription('This object is used to configure SNMP Access Network Address #1.')
gwAdmSnmpAccessIpNetworkMask1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask1.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask1.setDescription('This object is used to configure SNMP Access Network Address Mask #1.')
gwAdmSnmpAccessIpNetwork2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork2.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork2.setDescription('This object is used to configure SNMP Access Network Address #2.')
gwAdmSnmpAccessIpNetworkMask2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask2.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask2.setDescription('This object is used to configure SNMP Access Network Address Mask #2.')
gwAdmSnmpAccessIpNetwork3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork3.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork3.setDescription('This object is used to configure SNMP Access Network Address #3.')
gwAdmSnmpAccessIpNetworkMask3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask3.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask3.setDescription('This object is used to configure SNMP Access Network Address Mask #3.')
gwAdmSnmpAccessIpNetwork4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork4.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork4.setDescription('This object is used to configure SNMP Access Network Address #4.')
gwAdmSnmpAccessIpNetworkMask4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask4.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask4.setDescription('This object is used to configure SNMP Access Network Address Mask #4.')
gwAdmSnmpAccessIpNetwork5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork5.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork5.setDescription('This object is used to configure SNMP Access Network Address #5.')
gwAdmSnmpAccessIpNetworkMask5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask5.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask5.setDescription('This object is used to configure SNMP Access Network Address Mask #5.')
gwAdmSnmpAccessIpNetwork6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork6.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork6.setDescription('This object is used to configure SNMP Access Network Address #6.')
gwAdmSnmpAccessIpNetworkMask6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask6.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask6.setDescription('This object is used to configure SNMP Access Network Address Mask #6.')
gwAdmSnmpAccessIpNetwork7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork7.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork7.setDescription('This object is used to configure SNMP Access Network Address #7.')
gwAdmSnmpAccessIpNetworkMask7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask7.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask7.setDescription('This object is used to configure SNMP Access Network Address Mask #7.')
gwAdmSnmpAccessIpNetwork8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork8.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork8.setDescription('This object is used to configure SNMP Access Network Address #8.')
gwAdmSnmpAccessIpNetworkMask8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask8.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask8.setDescription('This object is used to configure SNMP Access Network Address Mask #8.')
gwAdmSnmpAccessIpNetwork9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork9.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork9.setDescription('This object is used to configure SNMP Access Network Address #9.')
gwAdmSnmpAccessIpNetworkMask9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask9.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask9.setDescription('This object is used to configure SNMP Access Network Address Mask #9.')
gwAdmSnmpAccessIpNetwork10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork10.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetwork10.setDescription('This object is used to configure SNMP Access Network Address #10.')
gwAdmSnmpAccessIpNetworkMask10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 7, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask10.setStatus('current')
if mibBuilder.loadTexts: gwAdmSnmpAccessIpNetworkMask10.setDescription('This object is used to configure SNMP Access Network Address Mask #10.')
whispPlvGwAdmWanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 8))
gwAdmWConfWanConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dynamicIp", 1), ("staticIp", 2), ("pppoe", 3), ("pptp", 4))).clone('dynamicIp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmWConfWanConfig.setStatus('current')
if mibBuilder.loadTexts: gwAdmWConfWanConfig.setDescription('This object is used to configure the WAN Type. This object is accessible only if the Gateway is in NAT mode.')
gwAdmWConfWanIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmWConfWanIp.setStatus('current')
if mibBuilder.loadTexts: gwAdmWConfWanIp.setDescription('This object is used to configure WAN IP Address of the Gateway. This object is accessible only if the Gateway is in NAT mode.')
gwAdmWConfSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 8, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmWConfSubnetMask.setStatus('current')
if mibBuilder.loadTexts: gwAdmWConfSubnetMask.setDescription('This object is used to configure WAN IP Subnet Mask of the Gateway. This object is accessible only if the Gateway is in NAT mode.')
gwAdmWConfGateway = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmWConfGateway.setStatus('current')
if mibBuilder.loadTexts: gwAdmWConfGateway.setDescription('This object is used to configure Default Gateway IP of the Gateway. This object is accessible only if the Gateway is in NAT mode.')
gwAdmWConfDNS1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 8, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmWConfDNS1.setStatus('current')
if mibBuilder.loadTexts: gwAdmWConfDNS1.setDescription('This object is used to configure DNS Server #1. This object is accessible only if the Gateway is in NAT mode.')
gwAdmWConfDNS2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 8, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmWConfDNS2.setStatus('current')
if mibBuilder.loadTexts: gwAdmWConfDNS2.setDescription('This object is used to configure DNS Server #2. This object is accessible only if the Gateway is in NAT mode.')
gwAdmWConfPppoeUsername = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 8, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmWConfPppoeUsername.setStatus('current')
if mibBuilder.loadTexts: gwAdmWConfPppoeUsername.setDescription('This object is used to configure PPPoE Username. This object is accessible only if the Gateway is in NAT mode.')
gwAdmWConfPppoePassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 8, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmWConfPppoePassword.setStatus('current')
if mibBuilder.loadTexts: gwAdmWConfPppoePassword.setDescription('This object is used to configure PPPoE Password. This object is accessible only if the Gateway is in NAT mode.')
gwAdmWConfDhcpConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmWConfDhcpConfig.setStatus('current')
if mibBuilder.loadTexts: gwAdmWConfDhcpConfig.setDescription('This object is used to Enable or Disable DHCP Server. This object is accessible only if the Gateway is in NAT mode.')
gwAdmWConfDhcpStartIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 8, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmWConfDhcpStartIp.setStatus('current')
if mibBuilder.loadTexts: gwAdmWConfDhcpStartIp.setDescription('This object is used to configure Starting Address of the IP address block, that the DHCP Server can assign to its clients. This object is accessible only if the Gateway is in NAT mode.')
gwAdmWConfDhcpEndIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 8, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmWConfDhcpEndIp.setStatus('current')
if mibBuilder.loadTexts: gwAdmWConfDhcpEndIp.setDescription('This object is used to configure Last Address of the IP address block, that the DHCP Server can assign to its clients. This object is accessible only if the Gateway is in NAT mode.')
gwAdmWConfDhcpLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 8, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("thirtyMins", 1), ("oneHour", 2), ("twoHours", 3), ("twelveHours", 4), ("oneDay", 5), ("twoDays", 6), ("oneWeek", 7), ("twoWeeks", 8))).clone('oneDay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmWConfDhcpLeaseTime.setStatus('current')
if mibBuilder.loadTexts: gwAdmWConfDhcpLeaseTime.setDescription('This object is used to configure time period for which the IP address assigned to a client is valid. This object is accessible only if the Gateway is in NAT mode.')
gwAdmWConfUpnpConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmWConfUpnpConfig.setStatus('current')
if mibBuilder.loadTexts: gwAdmWConfUpnpConfig.setDescription('This object is used to Enable or Disable the UPnP in the Gateway. This object is accessible only if the Gateway is in NAT mode.')
gwAdmWConfFirewallConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 8, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gwAdmWConfFirewallConfig.setStatus('current')
if mibBuilder.loadTexts: gwAdmWConfFirewallConfig.setDescription('This object is used to Enable or Disable Firewall in the Gateway. This object is accessible only if the Gateway is in NAT mode.')
whispPlvGwModemTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9), )
if mibBuilder.loadTexts: whispPlvGwModemTable.setStatus('current')
if mibBuilder.loadTexts: whispPlvGwModemTable.setDescription('This table contains one row per Modem registered to the Gateway.')
whispPlvGwModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1), ).setIndexNames((0, "WHISP-PLV-GATEWAY-MIB", "gwModemLUID"))
if mibBuilder.loadTexts: whispPlvGwModemEntry.setStatus('current')
if mibBuilder.loadTexts: whispPlvGwModemEntry.setDescription('Information about a particular Modem registered to the Gateway.')
gwModemLUID = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 1), WhispLUID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemLUID.setStatus('current')
if mibBuilder.loadTexts: gwModemLUID.setDescription('This object indicates the unique value assigned by the Gateway, to each Modem.')
gwModemDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemDescr.setStatus('current')
if mibBuilder.loadTexts: gwModemDescr.setDescription("The value of this object should be same as the object 'sysName' of the Device registered to the Gateway.")
gwModemPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 3), WhispMACAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemPhysAddress.setStatus('current')
if mibBuilder.loadTexts: gwModemPhysAddress.setDescription('This object indicates the PLC MAC Address of the Modem.')
gwModemIP = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemIP.setStatus('current')
if mibBuilder.loadTexts: gwModemIP.setDescription('This object indicates the IP Address of the Modem.')
gwModemHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: gwModemHardwareVersion.setDescription('This object indicates the Hardware Version of the Modem.')
gwModemSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: gwModemSoftwareVersion.setDescription('This object indicates the Software Version of the Modem.')
gwModemSoftwareBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemSoftwareBootVersion.setStatus('current')
if mibBuilder.loadTexts: gwModemSoftwareBootVersion.setDescription('This object indicates the Boot Loader Version of the Modem.')
gwModemSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 0), ("inSession", 1), ("clearing", 2), ("reRegDnRst", 3), ("authChal", 4), ("registering", 5), ("notInUse", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemSessState.setStatus('current')
if mibBuilder.loadTexts: gwModemSessState.setDescription('This object indicates the current Operational state of the Modem. 0 = Idle 1 = In Session 2 = Clearing 3 = Re-registration downlink reset 4 = Authentication Challenge 5 = Registering 6 = Not in use.')
gwModemsessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemsessionCount.setStatus('current')
if mibBuilder.loadTexts: gwModemsessionCount.setDescription('This object indicates the number of times the Modem is In and Out of session.')
gwModemMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemMtu.setStatus('current')
if mibBuilder.loadTexts: gwModemMtu.setDescription('This object indicates the size of the largest datagram that can be sent and received by the Modem, in octets.')
gwModemSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemSpeed.setStatus('current')
if mibBuilder.loadTexts: gwModemSpeed.setDescription("This object indicates an estimate of Modem's current bandwidth, in Mbps.")
gwModemInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemInOctets.setStatus('current')
if mibBuilder.loadTexts: gwModemInOctets.setDescription('This object indicates the octets received by the Modem over Powerline, including framing characters. to each Modem.')
gwModemInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: gwModemInUcastPkts.setDescription('This object indicates the number of subnetwork-unicast packets delivered to a higher-layer protocol.')
gwModemInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: gwModemInNUcastPkts.setDescription('This object indicates the number of subnetwork-broadcast and subnetwork-multiicast packets delivered to a higher-layer protocol.')
gwModemInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemInDiscards.setStatus('current')
if mibBuilder.loadTexts: gwModemInDiscards.setDescription('This object indicates the number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
gwModemInError = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemInError.setStatus('current')
if mibBuilder.loadTexts: gwModemInError.setDescription('This object indicates the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
gwModemInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: gwModemInUnknownProtos.setDescription('This object indicates the number of packets received, but were discarded because of an unknown or unsupported protocol.')
gwModemOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemOutOctets.setStatus('current')
if mibBuilder.loadTexts: gwModemOutOctets.setDescription('This object indicates the total number of octets transmitted, including the framing characters.')
gwModemOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: gwModemOutUcastPkts.setDescription('This object indicates the total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent.')
gwModemOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: gwModemOutNUcastPkts.setDescription('This object indicates the total number of packets that higher-level protocols requested be transmitted to a non-unicast (i.e., a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent.')
gwModemOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemOutDiscards.setStatus('current')
if mibBuilder.loadTexts: gwModemOutDiscards.setDescription('This object indicates the number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
gwModemOutError = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemOutError.setStatus('current')
if mibBuilder.loadTexts: gwModemOutError.setDescription('This object indicates the number of outbound packets that could not be transmitted because of errors.')
gwModemOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemOutQLen.setStatus('current')
if mibBuilder.loadTexts: gwModemOutQLen.setDescription('This object indicates the number of packets in output packet queue.')
gwModemRoboByte40 = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemRoboByte40.setStatus('current')
if mibBuilder.loadTexts: gwModemRoboByte40.setDescription('This object indicates the current channel receive capacity of the Modem.')
gwModemRoboFails = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemRoboFails.setStatus('current')
if mibBuilder.loadTexts: gwModemRoboFails.setDescription('This object indicates the Powerline link receive failures of the Modem.')
gwModemRoboDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemRoboDrops.setStatus('current')
if mibBuilder.loadTexts: gwModemRoboDrops.setDescription('This object indicates the Powerline link send failures of the Modem.')
gwModemDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("modem", 0), ("repeater", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemDeviceType.setStatus('current')
if mibBuilder.loadTexts: gwModemDeviceType.setDescription('This object indicates the Type of the Device registered to the Gateway 0 = Modem 1 = Repeater 2 = Other')
gwModemPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 1, 9, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(84, 84)).setFixedLength(84)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gwModemPSD.setStatus('current')
if mibBuilder.loadTexts: gwModemPSD.setDescription('This object indicates the Software Version of the Modem.')
whispPlvGatewayEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 2))
gwTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 2, 0))
gwTrapRegComplete = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 2, 0, 1)).setObjects(("WHISP-PLV-GATEWAY-MIB", "gwModemLUID"), ("WHISP-PLV-GATEWAY-MIB", "gwModemPhysAddress"))
if mibBuilder.loadTexts: gwTrapRegComplete.setStatus('current')
if mibBuilder.loadTexts: gwTrapRegComplete.setDescription('This Notification is generated if the Modem has successfully registered to the Gateway.')
gwTrapRegLost = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 2, 0, 2)).setObjects(("WHISP-PLV-GATEWAY-MIB", "gwModemLUID"), ("WHISP-PLV-GATEWAY-MIB", "gwModemPhysAddress"))
if mibBuilder.loadTexts: gwTrapRegLost.setStatus('current')
if mibBuilder.loadTexts: gwTrapRegLost.setDescription("This Notification is generated if the Modem entry is removed from the Gateway's Modem Table, after being inactive for a period more than 'gwConfModemTableTimeout' value.")
gwTrapDeviceUpgradeStarted = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 2, 0, 3)).setObjects(("WHISP-PLV-GATEWAY-MIB", "gwInfoDeviceUpgradeStatus"), ("WHISP-PLV-GATEWAY-MIB", "gwInfoDevFirmwareVer"))
if mibBuilder.loadTexts: gwTrapDeviceUpgradeStarted.setStatus('current')
if mibBuilder.loadTexts: gwTrapDeviceUpgradeStarted.setDescription('This Notification is generated if the Gateway has started the Device Firmware Upgrade process.')
gwTrapDeviceUpgradeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 2, 0, 4)).setObjects(("WHISP-PLV-GATEWAY-MIB", "gwInfoDeviceUpgradeStatus"), ("WHISP-PLV-GATEWAY-MIB", "gwInfoDevFirmwareVer"))
if mibBuilder.loadTexts: gwTrapDeviceUpgradeCompleted.setStatus('current')
if mibBuilder.loadTexts: gwTrapDeviceUpgradeCompleted.setDescription('This Notification is generated once the Device Firmware Upgrade process is completed.')
gwTrapSimUpgradeStarted = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 2, 0, 5)).setObjects(("WHISP-PLV-GATEWAY-MIB", "gwInfoSimUpgradeStatus"), ("WHISP-PLV-GATEWAY-MIB", "gwInfoSimFirmwareVer"))
if mibBuilder.loadTexts: gwTrapSimUpgradeStarted.setStatus('current')
if mibBuilder.loadTexts: gwTrapSimUpgradeStarted.setDescription('This Notification is generated if the Gateway has started the Simple Module Firmware Upgrade process.')
gwTrapSimUpgradeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 2, 0, 6)).setObjects(("WHISP-PLV-GATEWAY-MIB", "gwInfoSimUpgradeStatus"), ("WHISP-PLV-GATEWAY-MIB", "gwInfoSimFirmwareVer"))
if mibBuilder.loadTexts: gwTrapSimUpgradeCompleted.setStatus('current')
if mibBuilder.loadTexts: gwTrapSimUpgradeCompleted.setDescription('This Notification is generated once the Simple Module Firmware Upgrade process is completed.')
whispPlvGatewayConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 3))
whispPlvGatewayGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 3, 1))
whispPlvGatewayCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 3, 2))
whispPlvGatewayInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 3, 1, 1)).setObjects(("WHISP-PLV-GATEWAY-MIB", "gwInfoModel"), ("WHISP-PLV-GATEWAY-MIB", "gwInfoSerialNumber"), ("WHISP-PLV-GATEWAY-MIB", "gwInfoLanMac"), ("WHISP-PLV-GATEWAY-MIB", "gwInfoWanMac"), ("WHISP-PLV-GATEWAY-MIB", "gwInfoPlcMac"), ("WHISP-PLV-GATEWAY-MIB", "gwInfoHardwareVer"), ("WHISP-PLV-GATEWAY-MIB", "gwInfoDevFirmwareVer"), ("WHISP-PLV-GATEWAY-MIB", "gwInfoLoaderVer"), ("WHISP-PLV-GATEWAY-MIB", "gwInfoSimFirmwareVer"), ("WHISP-PLV-GATEWAY-MIB", "gwInfoModemCount"), ("WHISP-PLV-GATEWAY-MIB", "gwInfoDeviceUpgradeStatus"), ("WHISP-PLV-GATEWAY-MIB", "gwInfoSimUpgradeStatus"), ("WHISP-PLV-GATEWAY-MIB", "gwInfoTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvGatewayInfoGroup = whispPlvGatewayInfoGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvGatewayInfoGroup.setDescription('The collection of objects that indicates Gateway device information.')
whispPlvGatewayConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 3, 1, 2)).setObjects(("WHISP-PLV-GATEWAY-MIB", "gwConfNtpConfig"), ("WHISP-PLV-GATEWAY-MIB", "gwConfNtpServer"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTime"), ("WHISP-PLV-GATEWAY-MIB", "gwConfDate"), ("WHISP-PLV-GATEWAY-MIB", "gwConfModemTableTimeout"), ("WHISP-PLV-GATEWAY-MIB", "gwConfAutoLogoutTime"), ("WHISP-PLV-GATEWAY-MIB", "gwConfPSD"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvGatewayConfigGroup = whispPlvGatewayConfigGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvGatewayConfigGroup.setDescription('The collection of objects used to configure the Gateway. These objects are accessible to everyone.')
whispPlvGatewayTrapConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 3, 1, 3)).setObjects(("WHISP-PLV-GATEWAY-MIB", "gwConfTrapIp1"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapCommStr1"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapIp2"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapCommStr2"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapIp3"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapCommStr3"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapIp4"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapCommStr4"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapIp5"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapCommStr5"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapIp6"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapCommStr6"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapIp7"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapCommStr7"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapIp8"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapCommStr8"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapIp9"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapCommStr9"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapIp10"), ("WHISP-PLV-GATEWAY-MIB", "gwConfTrapCommStr10"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvGatewayTrapConfigGroup = whispPlvGatewayTrapConfigGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvGatewayTrapConfigGroup.setDescription("The collection of Gateway's SNMP Trap Configuration objects. These objects are accessible to everyone.")
whispPlvGatewayPowerlineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 3, 1, 4)).setObjects(("WHISP-PLV-GATEWAY-MIB", "gwPwrLnMaxDelay"), ("WHISP-PLV-GATEWAY-MIB", "gwPwrLnTxAck"), ("WHISP-PLV-GATEWAY-MIB", "gwPwrLnTxNak"), ("WHISP-PLV-GATEWAY-MIB", "gwPwrLnTxFail"), ("WHISP-PLV-GATEWAY-MIB", "gwPwrLnTxColl"), ("WHISP-PLV-GATEWAY-MIB", "gwPwrLnTxCarrLoss"), ("WHISP-PLV-GATEWAY-MIB", "gwPwrLnRoboByte40"), ("WHISP-PLV-GATEWAY-MIB", "gwPwrLnRoboFails"), ("WHISP-PLV-GATEWAY-MIB", "gwPwrLnRoboDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvGatewayPowerlineGroup = whispPlvGatewayPowerlineGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvGatewayPowerlineGroup.setDescription("The collection of Gateway's Powerline Statistics These objects are accessible to everyone.")
whispPlvGatewayAdmConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 3, 1, 5)).setObjects(("WHISP-PLV-GATEWAY-MIB", "gwAdmConfLoginUsername"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfLoginPassword"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfNEK"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfAuthServIp1"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfAuthServIp2"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfAuthServIp3"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfAuthMode"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfAuthKey"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfAuthKeyOption"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfSnmpGetCommStr"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfSnmpSetCommStr"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfSnmpAdminCommStr"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfFtpServerIp"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfFtpUsername"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfFtpPassword"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfFtpFile"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfDeviceUpgradeStart"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfSimUpgradeStart"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfSystemReboot"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfReset"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfDeviceMode"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfLUIDStart"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfLUIDEnd"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfVLANPassthroughStatus"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfManagementVLANId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvGatewayAdmConfigGroup = whispPlvGatewayAdmConfigGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvGatewayAdmConfigGroup.setDescription("The collection of objects that are used to configure the Gateway. These objects are accessible only thru 'admin' community string.")
whispPlvGatewayAdmLanConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 3, 1, 6)).setObjects(("WHISP-PLV-GATEWAY-MIB", "gwAdmConfLanConfig"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfLanIp"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfLanSubnetMask"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmConfLanGatewayIp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvGatewayAdmLanConfigGroup = whispPlvGatewayAdmLanConfigGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvGatewayAdmLanConfigGroup.setDescription("The collection of Gateway's LAN configuration objects. These objects are accessible only thru 'admin' community string.")
whispPlvGatewayAdmSnmpAccessConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 3, 1, 7)).setObjects(("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetwork1"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetworkMask1"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetwork2"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetworkMask2"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetwork3"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetworkMask3"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetwork4"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetworkMask4"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetwork5"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetworkMask5"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetwork6"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetworkMask6"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetwork7"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetworkMask7"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetwork8"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetworkMask8"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetwork9"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetworkMask9"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetwork10"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmSnmpAccessIpNetworkMask10"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvGatewayAdmSnmpAccessConfigGroup = whispPlvGatewayAdmSnmpAccessConfigGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvGatewayAdmSnmpAccessConfigGroup.setDescription("The collection of objects that are used to configure the Gateway. These objects are accessible only thru 'admin' community string.")
whispPlvGatewayAdmWanConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 3, 1, 8)).setObjects(("WHISP-PLV-GATEWAY-MIB", "gwAdmWConfWanConfig"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmWConfWanIp"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmWConfSubnetMask"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmWConfGateway"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmWConfDNS1"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmWConfDNS2"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmWConfPppoeUsername"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmWConfPppoePassword"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmWConfDhcpConfig"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmWConfDhcpStartIp"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmWConfDhcpEndIp"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmWConfDhcpLeaseTime"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmWConfUpnpConfig"), ("WHISP-PLV-GATEWAY-MIB", "gwAdmWConfFirewallConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvGatewayAdmWanConfigGroup = whispPlvGatewayAdmWanConfigGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvGatewayAdmWanConfigGroup.setDescription("The collection of Gateway's WAN configuration objects. These objects are accessible only thru 'admin' community string.")
whispPlvGatewayAdmModemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 3, 1, 9)).setObjects(("WHISP-PLV-GATEWAY-MIB", "gwModemLUID"), ("WHISP-PLV-GATEWAY-MIB", "gwModemDescr"), ("WHISP-PLV-GATEWAY-MIB", "gwModemPhysAddress"), ("WHISP-PLV-GATEWAY-MIB", "gwModemIP"), ("WHISP-PLV-GATEWAY-MIB", "gwModemHardwareVersion"), ("WHISP-PLV-GATEWAY-MIB", "gwModemSoftwareVersion"), ("WHISP-PLV-GATEWAY-MIB", "gwModemSoftwareBootVersion"), ("WHISP-PLV-GATEWAY-MIB", "gwModemSessState"), ("WHISP-PLV-GATEWAY-MIB", "gwModemsessionCount"), ("WHISP-PLV-GATEWAY-MIB", "gwModemMtu"), ("WHISP-PLV-GATEWAY-MIB", "gwModemSpeed"), ("WHISP-PLV-GATEWAY-MIB", "gwModemInOctets"), ("WHISP-PLV-GATEWAY-MIB", "gwModemInUcastPkts"), ("WHISP-PLV-GATEWAY-MIB", "gwModemInNUcastPkts"), ("WHISP-PLV-GATEWAY-MIB", "gwModemInDiscards"), ("WHISP-PLV-GATEWAY-MIB", "gwModemInError"), ("WHISP-PLV-GATEWAY-MIB", "gwModemInUnknownProtos"), ("WHISP-PLV-GATEWAY-MIB", "gwModemOutOctets"), ("WHISP-PLV-GATEWAY-MIB", "gwModemOutUcastPkts"), ("WHISP-PLV-GATEWAY-MIB", "gwModemOutNUcastPkts"), ("WHISP-PLV-GATEWAY-MIB", "gwModemOutDiscards"), ("WHISP-PLV-GATEWAY-MIB", "gwModemOutError"), ("WHISP-PLV-GATEWAY-MIB", "gwModemOutQLen"), ("WHISP-PLV-GATEWAY-MIB", "gwModemRoboByte40"), ("WHISP-PLV-GATEWAY-MIB", "gwModemRoboFails"), ("WHISP-PLV-GATEWAY-MIB", "gwModemRoboDrops"), ("WHISP-PLV-GATEWAY-MIB", "gwModemDeviceType"), ("WHISP-PLV-GATEWAY-MIB", "gwModemPSD"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvGatewayAdmModemGroup = whispPlvGatewayAdmModemGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvGatewayAdmModemGroup.setDescription('The collection of objects that gives information of the Modems connected to the Gateway.')
whispPlvGatewayNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 3, 1, 10)).setObjects(("WHISP-PLV-GATEWAY-MIB", "gwTrapRegComplete"), ("WHISP-PLV-GATEWAY-MIB", "gwTrapRegLost"), ("WHISP-PLV-GATEWAY-MIB", "gwTrapDeviceUpgradeStarted"), ("WHISP-PLV-GATEWAY-MIB", "gwTrapDeviceUpgradeCompleted"), ("WHISP-PLV-GATEWAY-MIB", "gwTrapSimUpgradeStarted"), ("WHISP-PLV-GATEWAY-MIB", "gwTrapSimUpgradeCompleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvGatewayNotificationsGroup = whispPlvGatewayNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvGatewayNotificationsGroup.setDescription('The collection of Notifications generated by the Gateway.')
whispPlvGatewayCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 161, 19, 3, 8, 1, 3, 2, 1)).setObjects(("WHISP-PLV-GATEWAY-MIB", "whispPlvGatewayInfoGroup"), ("WHISP-PLV-GATEWAY-MIB", "whispPlvGatewayConfigGroup"), ("WHISP-PLV-GATEWAY-MIB", "whispPlvGatewayTrapConfigGroup"), ("WHISP-PLV-GATEWAY-MIB", "whispPlvGatewayPowerlineGroup"), ("WHISP-PLV-GATEWAY-MIB", "whispPlvGatewayAdmConfigGroup"), ("WHISP-PLV-GATEWAY-MIB", "whispPlvGatewayAdmLanConfigGroup"), ("WHISP-PLV-GATEWAY-MIB", "whispPlvGatewayAdmSnmpAccessConfigGroup"), ("WHISP-PLV-GATEWAY-MIB", "whispPlvGatewayAdmWanConfigGroup"), ("WHISP-PLV-GATEWAY-MIB", "whispPlvGatewayAdmModemGroup"), ("WHISP-PLV-GATEWAY-MIB", "whispPlvGatewayNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvGatewayCompliance = whispPlvGatewayCompliance.setStatus('current')
if mibBuilder.loadTexts: whispPlvGatewayCompliance.setDescription('The compliance statement of SNMP entities which implement the WHISP-PLV-GATEWAY-MIB.')
mibBuilder.exportSymbols("WHISP-PLV-GATEWAY-MIB", gwAdmSnmpAccessIpNetworkMask9=gwAdmSnmpAccessIpNetworkMask9, gwConfTrapIp7=gwConfTrapIp7, gwTrapRegLost=gwTrapRegLost, whispPlvGatewayAdmWanConfigGroup=whispPlvGatewayAdmWanConfigGroup, gwModemSoftwareBootVersion=gwModemSoftwareBootVersion, gwConfDate=gwConfDate, gwAdmConfSnmpAdminCommStr=gwAdmConfSnmpAdminCommStr, gwAdmSnmpAccessIpNetworkMask2=gwAdmSnmpAccessIpNetworkMask2, gwConfNtpServer=gwConfNtpServer, gwAdmConfAuthKeyOption=gwAdmConfAuthKeyOption, gwAdmConfDeviceMode=gwAdmConfDeviceMode, gwAdmConfLUIDStart=gwAdmConfLUIDStart, gwAdmWConfDNS1=gwAdmWConfDNS1, whispPlvGatewayAdmSnmpAccessConfigGroup=whispPlvGatewayAdmSnmpAccessConfigGroup, gwConfNtpConfig=gwConfNtpConfig, gwAdmSnmpAccessIpNetworkMask7=gwAdmSnmpAccessIpNetworkMask7, whispPlvGatewayCompliance=whispPlvGatewayCompliance, gwInfoSerialNumber=gwInfoSerialNumber, gwInfoLanMac=gwInfoLanMac, gwTrapPrefix=gwTrapPrefix, gwInfoTemperature=gwInfoTemperature, gwAdmSnmpAccessIpNetwork1=gwAdmSnmpAccessIpNetwork1, gwAdmSnmpAccessIpNetwork4=gwAdmSnmpAccessIpNetwork4, gwAdmConfFtpFile=gwAdmConfFtpFile, gwModemOutOctets=gwModemOutOctets, whispPlvGatewayInfoGroup=whispPlvGatewayInfoGroup, gwModemHardwareVersion=gwModemHardwareVersion, gwModemIP=gwModemIP, gwAdmWConfWanConfig=gwAdmWConfWanConfig, gwAdmWConfWanIp=gwAdmWConfWanIp, gwAdmWConfDhcpStartIp=gwAdmWConfDhcpStartIp, gwInfoSimUpgradeStatus=gwInfoSimUpgradeStatus, gwModemsessionCount=gwModemsessionCount, gwModemDescr=gwModemDescr, gwConfTrapCommStr8=gwConfTrapCommStr8, whispPlvGwTrapConfig=whispPlvGwTrapConfig, gwTrapSimUpgradeStarted=gwTrapSimUpgradeStarted, whispPlvGatewayConformance=whispPlvGatewayConformance, gwInfoDeviceUpgradeStatus=gwInfoDeviceUpgradeStatus, gwConfTime=gwConfTime, gwAdmWConfDhcpEndIp=gwAdmWConfDhcpEndIp, gwPwrLnTxAck=gwPwrLnTxAck, gwAdmConfFtpUsername=gwAdmConfFtpUsername, gwInfoHardwareVer=gwInfoHardwareVer, gwAdmWConfDhcpConfig=gwAdmWConfDhcpConfig, gwAdmSnmpAccessIpNetwork8=gwAdmSnmpAccessIpNetwork8, gwAdmSnmpAccessIpNetwork3=gwAdmSnmpAccessIpNetwork3, gwConfTrapIp5=gwConfTrapIp5, gwInfoWanMac=gwInfoWanMac, whispPlvGwAdmWanConfig=whispPlvGwAdmWanConfig, gwModemPhysAddress=gwModemPhysAddress, gwConfTrapCommStr2=gwConfTrapCommStr2, gwModemOutDiscards=gwModemOutDiscards, gwConfTrapCommStr9=gwConfTrapCommStr9, gwConfModemTableTimeout=gwConfModemTableTimeout, gwPwrLnTxColl=gwPwrLnTxColl, gwInfoSimFirmwareVer=gwInfoSimFirmwareVer, gwModemInUnknownProtos=gwModemInUnknownProtos, gwModemRoboByte40=gwModemRoboByte40, gwModemDeviceType=gwModemDeviceType, gwTrapRegComplete=gwTrapRegComplete, gwAdmConfNEK=gwAdmConfNEK, gwTrapDeviceUpgradeStarted=gwTrapDeviceUpgradeStarted, gwAdmConfSnmpGetCommStr=gwAdmConfSnmpGetCommStr, gwConfTrapIp10=gwConfTrapIp10, gwTrapSimUpgradeCompleted=gwTrapSimUpgradeCompleted, gwAdmSnmpAccessIpNetworkMask6=gwAdmSnmpAccessIpNetworkMask6, gwConfTrapIp6=gwConfTrapIp6, gwInfoModel=gwInfoModel, gwAdmConfAuthKey=gwAdmConfAuthKey, gwConfTrapCommStr3=gwConfTrapCommStr3, gwAdmSnmpAccessIpNetworkMask1=gwAdmSnmpAccessIpNetworkMask1, gwConfTrapIp8=gwConfTrapIp8, gwAdmSnmpAccessIpNetworkMask3=gwAdmSnmpAccessIpNetworkMask3, gwConfTrapIp3=gwConfTrapIp3, whispPlvGwPwrLnStats=whispPlvGwPwrLnStats, gwAdmSnmpAccessIpNetwork2=gwAdmSnmpAccessIpNetwork2, gwConfTrapCommStr4=gwConfTrapCommStr4, gwAdmSnmpAccessIpNetworkMask5=gwAdmSnmpAccessIpNetworkMask5, whispPlvGatewayObjects=whispPlvGatewayObjects, gwModemOutNUcastPkts=gwModemOutNUcastPkts, gwConfTrapCommStr7=gwConfTrapCommStr7, gwModemRoboFails=gwModemRoboFails, gwTrapDeviceUpgradeCompleted=gwTrapDeviceUpgradeCompleted, gwAdmSnmpAccessIpNetwork9=gwAdmSnmpAccessIpNetwork9, gwInfoPlcMac=gwInfoPlcMac, gwConfTrapIp2=gwConfTrapIp2, gwAdmSnmpAccessIpNetwork10=gwAdmSnmpAccessIpNetwork10, gwAdmConfLUIDEnd=gwAdmConfLUIDEnd, whispPlvGatewayAdmModemGroup=whispPlvGatewayAdmModemGroup, gwAdmConfLoginUsername=gwAdmConfLoginUsername, gwInfoDevFirmwareVer=gwInfoDevFirmwareVer, gwAdmSnmpAccessIpNetwork7=gwAdmSnmpAccessIpNetwork7, gwAdmConfFtpPassword=gwAdmConfFtpPassword, gwAdmWConfGateway=gwAdmWConfGateway, gwAdmConfLoginPassword=gwAdmConfLoginPassword, gwAdmConfLanIp=gwAdmConfLanIp, whispPlvGwAdmLanConfig=whispPlvGwAdmLanConfig, gwConfTrapIp1=gwConfTrapIp1, gwAdmSnmpAccessIpNetworkMask4=gwAdmSnmpAccessIpNetworkMask4, gwAdmWConfFirewallConfig=gwAdmWConfFirewallConfig, gwModemInOctets=gwModemInOctets, gwAdmWConfPppoeUsername=gwAdmWConfPppoeUsername, whispPlvGwInfo=whispPlvGwInfo, gwInfoLoaderVer=gwInfoLoaderVer, gwAdmWConfPppoePassword=gwAdmWConfPppoePassword, gwAdmConfSystemReboot=gwAdmConfSystemReboot, gwConfTrapIp9=gwConfTrapIp9, gwAdmConfAuthMode=gwAdmConfAuthMode, gwPwrLnMaxDelay=gwPwrLnMaxDelay, gwAdmConfVLANPassthroughStatus=gwAdmConfVLANPassthroughStatus, gwConfAutoLogoutTime=gwConfAutoLogoutTime, whispPlvGatewayEvents=whispPlvGatewayEvents, whispPlvGwAdmSnmpAcessConfig=whispPlvGwAdmSnmpAcessConfig, whispPlvGatewayAdmLanConfigGroup=whispPlvGatewayAdmLanConfigGroup, gwAdmConfManagementVLANId=gwAdmConfManagementVLANId, gwConfTrapIp4=gwConfTrapIp4, gwAdmConfSnmpSetCommStr=gwAdmConfSnmpSetCommStr, gwAdmConfDeviceUpgradeStart=gwAdmConfDeviceUpgradeStart, gwModemLUID=gwModemLUID, gwInfoModemCount=gwInfoModemCount, gwModemInDiscards=gwModemInDiscards, whispPlvGwConfig=whispPlvGwConfig, gwAdmSnmpAccessIpNetworkMask10=gwAdmSnmpAccessIpNetworkMask10, gwModemPSD=gwModemPSD, whispPlvGatewayNotificationsGroup=whispPlvGatewayNotificationsGroup, gwConfTrapCommStr5=gwConfTrapCommStr5, gwAdmSnmpAccessIpNetwork6=gwAdmSnmpAccessIpNetwork6, gwAdmWConfDNS2=gwAdmWConfDNS2, gwAdmConfLanSubnetMask=gwAdmConfLanSubnetMask, gwAdmSnmpAccessIpNetwork5=gwAdmSnmpAccessIpNetwork5, whispPlvGwModemEntry=whispPlvGwModemEntry, gwPwrLnTxCarrLoss=gwPwrLnTxCarrLoss, whispPlvGatewayCompliances=whispPlvGatewayCompliances, whispPlvGatewayPowerlineGroup=whispPlvGatewayPowerlineGroup, gwModemSoftwareVersion=gwModemSoftwareVersion, gwAdmConfSimUpgradeStart=gwAdmConfSimUpgradeStart, gwModemOutQLen=gwModemOutQLen, gwPwrLnRoboFails=gwPwrLnRoboFails, gwAdmConfLanConfig=gwAdmConfLanConfig, gwAdmConfLanGatewayIp=gwAdmConfLanGatewayIp, gwPwrLnTxFail=gwPwrLnTxFail, whispPlvGatewayMIB=whispPlvGatewayMIB, gwModemOutError=gwModemOutError, gwModemMtu=gwModemMtu, whispPlvGatewayGroups=whispPlvGatewayGroups, gwModemInUcastPkts=gwModemInUcastPkts, gwAdmWConfDhcpLeaseTime=gwAdmWConfDhcpLeaseTime, gwAdmWConfUpnpConfig=gwAdmWConfUpnpConfig, gwConfTrapCommStr1=gwConfTrapCommStr1, gwPwrLnRoboDrops=gwPwrLnRoboDrops, gwAdmConfReset=gwAdmConfReset, gwModemSpeed=gwModemSpeed, whispPlvGatewayTrapConfigGroup=whispPlvGatewayTrapConfigGroup, gwConfTrapCommStr6=gwConfTrapCommStr6, gwAdmConfFtpServerIp=gwAdmConfFtpServerIp, gwPwrLnTxNak=gwPwrLnTxNak, gwModemInNUcastPkts=gwModemInNUcastPkts, gwConfTrapCommStr10=gwConfTrapCommStr10, gwAdmConfAuthServIp2=gwAdmConfAuthServIp2, whispPlvGatewayConfigGroup=whispPlvGatewayConfigGroup, whispPlvGwModemTable=whispPlvGwModemTable, gwAdmConfAuthServIp1=gwAdmConfAuthServIp1, gwConfPSD=gwConfPSD, gwAdmWConfSubnetMask=gwAdmWConfSubnetMask, gwAdmSnmpAccessIpNetworkMask8=gwAdmSnmpAccessIpNetworkMask8, gwModemOutUcastPkts=gwModemOutUcastPkts, gwModemInError=gwModemInError, PYSNMP_MODULE_ID=whispPlvGatewayMIB, gwAdmConfAuthServIp3=gwAdmConfAuthServIp3, gwModemRoboDrops=gwModemRoboDrops, whispPlvGwAdmConfig=whispPlvGwAdmConfig, gwModemSessState=gwModemSessState, gwPwrLnRoboByte40=gwPwrLnRoboByte40, whispPlvGatewayAdmConfigGroup=whispPlvGatewayAdmConfigGroup)
