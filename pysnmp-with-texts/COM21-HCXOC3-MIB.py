#
# PySNMP MIB module COM21-HCXOC3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COM21-HCXOC3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
com21, com21Traps, com21Hcx = mibBuilder.importSymbols("COM21-HCX-MIB", "com21", "com21Traps", "com21Hcx")
hcxAlmSeverity, hcxEventLogTime = mibBuilder.importSymbols("COM21-HCXALM-MIB", "hcxAlmSeverity", "hcxEventLogTime")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, Bits, TimeTicks, Counter32, Unsigned32, iso, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "Bits", "TimeTicks", "Counter32", "Unsigned32", "iso", "Integer32", "Counter64")
TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString")
com21HcxOc3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 1141, 2, 90))
if mibBuilder.loadTexts: com21HcxOc3.setLastUpdated('9701080000Z')
if mibBuilder.loadTexts: com21HcxOc3.setOrganization('Com21, Inc.')
if mibBuilder.loadTexts: com21HcxOc3.setContactInfo(' Network Management Postal: Paul Gordon Com21, Inc. 750 Tasman Drive Milpitas, California 95035 USA Tel: +1 408 953 9100 Fax: +1 408 953 9299 E-mail: pgordon@com21.com')
if mibBuilder.loadTexts: com21HcxOc3.setDescription('This is the Com21 ComController Oc3 MIB module. COM21 Part# 005-0025-00')
com21HcxOc3UnitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 91))
com21HcxOc3PortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 92))
com21HcxOc3VccGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 93))
com21HcxOc3StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 94))
class PrimServiceState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("is", 1), ("oos", 2))

class Com21RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("active", 1), ("create", 2), ("destroy", 3), ("deactive", 4))

com21HcxOc3UnitTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 91, 1), )
if mibBuilder.loadTexts: com21HcxOc3UnitTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxOc3UnitTable.setDescription('.')
com21HcxOc3UnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 91, 1, 1), ).setIndexNames((0, "COM21-HCXOC3-MIB", "hcxOc3UnitShelfId"), (0, "COM21-HCXOC3-MIB", "hcxOc3UnitSlotId"))
if mibBuilder.loadTexts: com21HcxOc3UnitEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxOc3UnitEntry.setDescription('.')
hcxOc3UnitShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 91, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3UnitShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxOc3UnitShelfId.setDescription(' contains the associated shelf id.')
hcxOc3UnitSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 91, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3UnitSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxOc3UnitSlotId.setDescription(' contains associated slot id.')
hcxOc3HardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 91, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3HardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hcxOc3HardwareVersion.setDescription(' contains the hardware version of the Oc3 card. Will contain empty string if card has not been inserted in the slot.')
hcxOc3BootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 91, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3BootVersion.setStatus('current')
if mibBuilder.loadTexts: hcxOc3BootVersion.setDescription(' contains the version of the Oc3 card boot ROM. Will contain empty string if card has not been inserted in the slot.')
hcxOc3UnitPrimServState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 91, 1, 1, 5), PrimServiceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3UnitPrimServState.setStatus('current')
if mibBuilder.loadTexts: hcxOc3UnitPrimServState.setDescription(' contains primary service state of the Oc3 Unit.')
hcxOc3UnitPrimStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 150)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3UnitShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3UnitSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3UnitPrimServState"))
if mibBuilder.loadTexts: hcxOc3UnitPrimStateChange.setStatus('current')
if mibBuilder.loadTexts: hcxOc3UnitPrimStateChange.setDescription(' This trap is generated whenever a change in the the hcxOc3UnitPrimServState occurs. This an event with no clear condition. Only severity is WARNING.')
hcxOc3UnitSecServState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 91, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3UnitSecServState.setStatus('current')
if mibBuilder.loadTexts: hcxOc3UnitSecServState.setDescription(' contains a string defining the secondary service states of the Oc3 Unit. The substrings supported by the Oc3 Unit shall be: UNEQ - unequipped.')
hcxOc3UnitSecStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 151)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3UnitShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3UnitSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3UnitSecServState"))
if mibBuilder.loadTexts: hcxOc3UnitSecStateChange.setStatus('current')
if mibBuilder.loadTexts: hcxOc3UnitSecStateChange.setDescription(' This trap is generated whenever a change in the the hcxOc3UnitSecServState occurs. This an event with no clear condition. Only severity is WARNING.')
hcxOc3RestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 91, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxOc3RestartAction.setStatus('current')
if mibBuilder.loadTexts: hcxOc3RestartAction.setDescription(' The Oc3 Unit Restart Action is an active-value. The setting of this attribute to restart(2) causes the Oc3 card to reset and download a new image.')
hcxOc3TestStatusLed = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 91, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3TestStatusLed.setStatus('current')
if mibBuilder.loadTexts: hcxOc3TestStatusLed.setDescription(' The Oc3 Test Status LED is a read-only attribute which describes the condition of the Oc3 Test Status light emitting diode located on the Oc3 board. A value of on(1) indicates that a service effecting test is in progress and that the LED is illuminated. Will be off if no card present.')
hcxOc3TestStatusLedChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 152)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3UnitShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3UnitSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3TestStatusLed"))
if mibBuilder.loadTexts: hcxOc3TestStatusLedChange.setStatus('current')
if mibBuilder.loadTexts: hcxOc3TestStatusLedChange.setDescription(' generated whenever there is a change in test LED status. This an event with no clear condition. Only severity is WARNING.')
hcxOc3FaultStatusLed = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 91, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3FaultStatusLed.setStatus('current')
if mibBuilder.loadTexts: hcxOc3FaultStatusLed.setDescription(' The Oc3 Fault Status LED is a read-only attribute which describes the condition of the Oc3 Fault Status light emitting diode located on the Oc3 board. A value of on(1) indicates that an fault condition has been detected (for which a trap will have been issued) and the LED is illuminated. Will be off if no card present.')
hcxOc3FaultStatusLedChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 153)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3UnitShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3UnitSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3FaultStatusLed"))
if mibBuilder.loadTexts: hcxOc3FaultStatusLedChange.setStatus('current')
if mibBuilder.loadTexts: hcxOc3FaultStatusLedChange.setDescription(' generated whenever there is a change in the Fault LED status. This an event with no clear condition. Only severity is WARNING.')
hcxOc3SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 91, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3SerialNumber.setStatus('current')
if mibBuilder.loadTexts: hcxOc3SerialNumber.setDescription(' contains the serial number of the Oc3 card. Will contain empty string if card has not been inserted in the slot.')
hcxOc3SyncClkConfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 91, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("priSrc", 2), ("secSrc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxOc3SyncClkConfigure.setStatus('current')
if mibBuilder.loadTexts: hcxOc3SyncClkConfigure.setDescription(' This attribute allows to configure the Oc3 card as the primary or secondary source for network clock. This attribute is valid only if networkClk is selected in hcxSyncClkConfigure attribute. Only 1 Oc3 Card can be configured as the priSrc and 1 Oc3 Card can be configured as secSrc in the HCX system Default: disable')
com21HcxOc3PortTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1), )
if mibBuilder.loadTexts: com21HcxOc3PortTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxOc3PortTable.setDescription('.')
com21HcxOc3PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1), ).setIndexNames((0, "COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), (0, "COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), (0, "COM21-HCXOC3-MIB", "hcxOc3PortId"))
if mibBuilder.loadTexts: com21HcxOc3PortEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxOc3PortEntry.setDescription('.')
hcxOc3PortShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3PortShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortShelfId.setDescription(' contains shelf in which this Oc3 port is located.')
hcxOc3PortSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3PortSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortSlotId.setDescription(' contains slot in which this Oc3 port is located.')
hcxOc3PortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3PortId.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortId.setDescription(' contains port Id Oc3 port.')
hcxOc3PortPrimServState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 4), PrimServiceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3PortPrimServState.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortPrimServState.setDescription(' contains primary service state of the Oc3 Unit. This state shall be effected by the hcxOc3PortState attribute.')
hcxOc3PortPrimStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 154)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3PortId"), ("COM21-HCXOC3-MIB", "hcxOc3PortPrimServState"))
if mibBuilder.loadTexts: hcxOc3PortPrimStateChange.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortPrimStateChange.setDescription(' This trap is generated whenever a change in the the hcxOc3PortPrimServState occurs. This an event with no clear condition. Only severity is WARNING.')
hcxOc3PortSecServState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3PortSecServState.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortSecServState.setDescription(' contains a string defining the secondary service states of the Oc3 Unit. The substrings supported by the Oc3 Unit shall be: MT - offline, set by hcxOc3, FAULT - hardware failure, TEST - test, UNEQ - unequipped.')
hcxOc3PortSecStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 155)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3PortId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSecServState"))
if mibBuilder.loadTexts: hcxOc3PortSecStateChange.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortSecStateChange.setDescription(' This trap is generated whenever a change in the the hcxOc3PortSecServState occurs. This an event with no clear condition. Only severity is WARNING.')
hcxOc3MaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 22222))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxOc3MaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: hcxOc3MaxBandwidth.setDescription(' This attribute defines the maximum output payload bandwidth associated with the Oc3 port. Defined in thousands of bps. From 0 to 22222. This value shall be checked by the CC which shall ensure that the aggregate of the hcxOc3MaxBandwidth and hcxEtherMaxBandwidth attributes for each of the Oc3 and Ethernet ports does not exceed the system maximum. If Voice Channels are configured on this Port, and if Voice channels are active, Ondemand Data bandwidth will get squeezed if Voice Channels are active. Default: 7000 ')
hcxOc3AggrDnStrmCbrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3AggrDnStrmCbrRate.setStatus('current')
if mibBuilder.loadTexts: hcxOc3AggrDnStrmCbrRate.setDescription(' This attribute specifies the aggregate of all ComPort downstream CBR rates configured on the Oc3 port This includes both acquired and unacquired ComPorts. Defined in Kbps.')
hcxOc3AggrDnStrmPcrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3AggrDnStrmPcrRate.setStatus('current')
if mibBuilder.loadTexts: hcxOc3AggrDnStrmPcrRate.setDescription(' This attribute specifies the aggregate of all ComPort downstream PCR rates configured on the Oc3 port This includes both acquired and unacquired ComPorts. Defined in Kbps.')
hcxOc3AggrUpStrmCbrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3AggrUpStrmCbrRate.setStatus('current')
if mibBuilder.loadTexts: hcxOc3AggrUpStrmCbrRate.setDescription(' This attribute specifies the aggregate of all ComPort upstream CBR rates configured on the Oc3 port This includes both acquired and unacquired ComPorts. Defined in Kbps.')
hcxOc3AggrUpStrmMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3AggrUpStrmMinRate.setStatus('current')
if mibBuilder.loadTexts: hcxOc3AggrUpStrmMinRate.setDescription(' This attribute specifies the aggregate of all ComPort upstream minimum PCR rates on the Oc3 port This includes both acquired and unacquired ComPorts. Defined in Kbps.')
hcxOc3AggrUpStrmMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3AggrUpStrmMaxRate.setStatus('current')
if mibBuilder.loadTexts: hcxOc3AggrUpStrmMaxRate.setDescription(' This attribute specifies the aggregate of all ComPort upstream maximum cell rates on the Oc3 port This includes both acquired and unacquired ComPorts. Defined in Kbps.')
hcxOc3AgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxOc3AgeTime.setStatus('current')
if mibBuilder.loadTexts: hcxOc3AgeTime.setDescription(' This attribute defines, in seconds, the aging time for non-accessed entries in the Bridge mapping table. The default shall be 300secs. If this set to 0, then aging is disabled.')
hcxOc3PortConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2000, 2001, 2002))).clone(namedValues=NamedValues(("offline", 2000), ("online", 2001), ("test", 2002)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxOc3PortConfigState.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortConfigState.setDescription(' The Oc3 Port State is an active-value. The Oc3 port will default to offline, in which case no traffic shall be passed. Default offline.')
hcxOc3PortRestartAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxOc3PortRestartAction.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortRestartAction.setDescription(' The Oc3 Port Restart Action is an active-value. The setting of this attribute to restart(2) causes the Oc3 port to reset and download a new image.')
hcxOc3PortDiagTestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxOc3PortDiagTestAction.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortDiagTestAction.setDescription(' This attribute is used to invoke the internal Oc3 card diagnostic test. In order to activate this test, the card must be placed in the test state.')
hcxOc3PortDiagTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 156)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3PortId"), ("COM21-HCXOC3-MIB", "hcxOc3PortDiagTestResult"))
if mibBuilder.loadTexts: hcxOc3PortDiagTestComplete.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortDiagTestComplete.setDescription(' This notification is generated whenever the Oc3 port internal diagnostic tests are completed. Event only, no clear. Only severity allowed is WARNING.')
hcxOc3PortDiagTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inprogress", 1), ("success", 2), ("failure", 3), ("invalidState", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3PortDiagTestResult.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortDiagTestResult.setDescription(' This attribute contains the result of the last Oc3 port diagnostic test.')
hcxOc3OperationFailure = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 157)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3PortId"))
if mibBuilder.loadTexts: hcxOc3OperationFailure.setStatus('current')
if mibBuilder.loadTexts: hcxOc3OperationFailure.setDescription(' This notification is generated by the CC whenever an Oc3 port fails to respond correctly to a request. This failure could indicate either a resource problem or software failure. Note that if an Oc3 card failures to respond completely to a CC request, then a hcxInsertChange trap shall be generated. This is an event without a corresponding clear. Only severity allowed is WARNING.')
hcxOc3PortLOSLed = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3PortLOSLed.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortLOSLed.setDescription(' The OC3 Loss Of Signal LED indicates whether a Loss of Signal is present on the WAN side of the OC3 port.')
hcxOc3PortLOSLedChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 158)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3PortId"), ("COM21-HCXOC3-MIB", "hcxOc3PortLOSLed"))
if mibBuilder.loadTexts: hcxOc3PortLOSLedChange.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortLOSLedChange.setDescription(' generated whenever there is a change in the LOS LED status. This an event with no clear condition. Only severity is WARNING.')
hcxOc3AggrActDnStrmCbrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3AggrActDnStrmCbrRate.setStatus('current')
if mibBuilder.loadTexts: hcxOc3AggrActDnStrmCbrRate.setDescription(' This attribute specifies the aggregate of all ComPort downstream CBR rates active on the Oc3 port (VLAN). This includes only acquired ComPorts. Defined in Kbps.')
hcxOc3AggrActDnStrmPcrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3AggrActDnStrmPcrRate.setStatus('current')
if mibBuilder.loadTexts: hcxOc3AggrActDnStrmPcrRate.setDescription(' This attribute specifies the aggregate of all ComPort downstream PCR rates active on the Oc3 port (VLAN). This includes only acquired ComPorts. Defined in Kbps.')
hcxOc3AggrActUpStrmCbrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3AggrActUpStrmCbrRate.setStatus('current')
if mibBuilder.loadTexts: hcxOc3AggrActUpStrmCbrRate.setDescription(' This attribute specifies the aggregate of all ComPort upstream CBR rates active on the Oc3 port (VLAN). This includes only acquired ComPorts. Defined in bits per second.')
hcxOc3AggrActUpStrmMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3AggrActUpStrmMinRate.setStatus('current')
if mibBuilder.loadTexts: hcxOc3AggrActUpStrmMinRate.setDescription(' This attribute specifies the aggregate of all ComPort upstream minimum PCR rates active on the Oc3 port (VLAN). This includes only acquired ComPorts. Defined in Kbps.')
hcxOc3AggrActUpStrmMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3AggrActUpStrmMaxRate.setStatus('current')
if mibBuilder.loadTexts: hcxOc3AggrActUpStrmMaxRate.setDescription(' This attribute specifies the aggregate of all ComPort upstream maximum cell rates active on the Oc3 port (VLAN). This includes only acquired ComPorts. Defined in Kbps.')
hcxOc3PortIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxOc3PortIpAddr.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortIpAddr.setDescription(' IP Address associated with this ethernet port. This is a future item for telephone return support.')
hcxOc3PortIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxOc3PortIpMask.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortIpMask.setDescription(' IP mask associated with port. Default is ff.ff.ff.ff. This is a future item for telephone return support.')
hcxOc3PortMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 25), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3PortMacAddr.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortMacAddr.setDescription(' MAC address associated with port.')
hcxOc3Port1483EncapEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxOc3Port1483EncapEnbl.setStatus('current')
if mibBuilder.loadTexts: hcxOc3Port1483EncapEnbl.setDescription(' This attribute is used to Enable/Disable 1483 Encapsulation on the Oc3Port. If enabled, then all Ethernet packets received by the Oc3Port should be 1483 Encapsulated and all Ethernet packets transmitted by the Oc3Port will be 1483 Encapsulated. Default: enable.')
hcxOc3PortSectionLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3PortSectionLOS.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortSectionLOS.setDescription(' This attribute indicates whether Section Loss of Signal is present at the OC3 Port. Default: off.')
hcxOc3PortSectionLOSDetected = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 159)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3PortId"))
if mibBuilder.loadTexts: hcxOc3PortSectionLOSDetected.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortSectionLOSDetected.setDescription(' generated whenever Loss of Signal is detected at the OC3 Port. Alarm Severity: MAJOR')
hcxOc3PortSectionLOSClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 160)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3PortId"))
if mibBuilder.loadTexts: hcxOc3PortSectionLOSClear.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortSectionLOSClear.setDescription(' generated whenever Loss of Signal is Cleared at the OC3 Port. Alarm Severity: CLEAR')
hcxOc3PortSectionLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3PortSectionLOF.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortSectionLOF.setDescription(' This attribute indicates whether Section Loss of Frame is present at the OC3 Port. Default: off.')
hcxOc3PortSectionLOFDetected = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 161)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3PortId"))
if mibBuilder.loadTexts: hcxOc3PortSectionLOFDetected.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortSectionLOFDetected.setDescription(' generated whenever Loss of Frame is detected at the OC3 Port. Alarm Severity: MAJOR')
hcxOc3PortSectionLOFClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 162)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3PortId"))
if mibBuilder.loadTexts: hcxOc3PortSectionLOFClear.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortSectionLOFClear.setDescription(' generated whenever Loss of Frame is cleared at the OC3 Port. Alarm Severity: CLEAR')
hcxOc3PortLineAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3PortLineAIS.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortLineAIS.setDescription(' This attribute indicates whether Line Alarm Indication Signal is detected by the OC3 Port Default: off.')
hcxOc3PortLineAISDetected = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 163)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3PortId"))
if mibBuilder.loadTexts: hcxOc3PortLineAISDetected.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortLineAISDetected.setDescription(' generated whenever AIS is detected at the OC3 Port. Alarm Severity: MAJOR')
hcxOc3PortLineAISClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 164)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3PortId"))
if mibBuilder.loadTexts: hcxOc3PortLineAISClear.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortLineAISClear.setDescription(' generated whenever AIS is cleared at the OC3 Port. Alarm Severity: CLEAR')
hcxOc3PortLineRDI = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3PortLineRDI.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortLineRDI.setDescription(' This attribute indicates whether Line Remote Defect Indication is detected by the OC3 Port Default: off.')
hcxOc3PortLineRDIDetected = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 165)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3PortId"))
if mibBuilder.loadTexts: hcxOc3PortLineRDIDetected.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortLineRDIDetected.setDescription(' generated whenever Line Remote Defect Indication is detected at the OC3 Port. Alarm Severity: MAJOR')
hcxOc3PortLineRDIClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 166)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3PortId"))
if mibBuilder.loadTexts: hcxOc3PortLineRDIClear.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortLineRDIClear.setDescription(' generated whenever Line Remote Defect Indication is cleared at the OC3 Port. Alarm Severity: CLEAR')
hcxOc3PortPathRDI = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3PortPathRDI.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortPathRDI.setDescription(' This attribute indicates whether Path Remote Defect Indication is detected by the OC3 Port Default: off.')
hcxOc3PortPathRDIDetected = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 167)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3PortId"))
if mibBuilder.loadTexts: hcxOc3PortPathRDIDetected.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortPathRDIDetected.setDescription(' generated whenever Path Remote Defect Indication is detected at the OC3 Port. Alarm Severity: MAJOR')
hcxOc3PortPathRDIClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 168)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3PortId"))
if mibBuilder.loadTexts: hcxOc3PortPathRDIClear.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortPathRDIClear.setDescription(' generated whenever Path Remote Defect Indication is cleared at the OC3 Port. Alarm Severity: CLEAR')
hcxOc3PortAggrVoiceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3PortAggrVoiceRate.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortAggrVoiceRate.setDescription(' This attribute specifies the aggregate Rate of all Voice Channels configured on this Port. A voice channel is considered configured on this Port if: a ComPort is configured with Voice Channel and the ComPort is configured on a Vlan which is on this Port. The rate specified here includes both acquired and unacquired ComPorts and is the same in both Upstream and Downstream Direction. Defined in Kbps.')
hcxOc3PortAggrActVoiceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3PortAggrActVoiceRate.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortAggrActVoiceRate.setDescription(' This attribute specifies the aggregate Rate of all Voice Channels Active on this Port. A voice channel is considered Active on this Port if: a ComPort is configured with Voice Channel and the ComPort is configured on a Vlan which is on this Port and the Comport is acquired and the Comport has a Voice Channel Active. The rate specified here is the same in both Upstream and Downstream Direction. Defined in Kbps.')
hcxOc3PortLOFLed = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 92, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3PortLOFLed.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortLOFLed.setDescription(' The OC3 Loss Of Frame LED indicates whether a Loss of Frame is present on the WAN side of the OC3 port.')
hcxOc3PortLOFLedChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 169)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXOC3-MIB", "hcxOc3PortShelfId"), ("COM21-HCXOC3-MIB", "hcxOc3PortSlotId"), ("COM21-HCXOC3-MIB", "hcxOc3PortId"), ("COM21-HCXOC3-MIB", "hcxOc3PortLOFLed"))
if mibBuilder.loadTexts: hcxOc3PortLOFLedChange.setStatus('current')
if mibBuilder.loadTexts: hcxOc3PortLOFLedChange.setDescription(' generated whenever there is a change in the LOF LED status. This an event with no clear condition. Only severity is WARNING.')
com21HcxOc3VccTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 93, 1), )
if mibBuilder.loadTexts: com21HcxOc3VccTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxOc3VccTable.setDescription('.')
com21HcxOc3VccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 93, 1, 1), ).setIndexNames((0, "COM21-HCXOC3-MIB", "hcxOc3VccShelfId"), (0, "COM21-HCXOC3-MIB", "hcxOc3VccSlotId"), (0, "COM21-HCXOC3-MIB", "hcxOc3VccPortId"), (0, "COM21-HCXOC3-MIB", "hcxOc3VccVpi"), (0, "COM21-HCXOC3-MIB", "hcxOc3VccVci"))
if mibBuilder.loadTexts: com21HcxOc3VccEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxOc3VccEntry.setDescription('.')
hcxOc3VccShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 93, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3VccShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxOc3VccShelfId.setDescription(' Specifies the Shelf where this Entry exists. ')
hcxOc3VccSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 93, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3VccSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxOc3VccSlotId.setDescription(' Specifies the Slot where this Entry exists. ')
hcxOc3VccPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 93, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3VccPortId.setStatus('current')
if mibBuilder.loadTexts: hcxOc3VccPortId.setDescription(' Specifies the Port where this Entry exists. ')
hcxOc3VccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 93, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3VccVpi.setStatus('current')
if mibBuilder.loadTexts: hcxOc3VccVpi.setDescription(' Specifies the Vpi where this Entry exists. ')
hcxOc3VccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 93, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3VccVci.setStatus('current')
if mibBuilder.loadTexts: hcxOc3VccVci.setDescription(' Specifies the Vci where this Entry exists. ')
hcxOc3VccType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 93, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("voice", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3VccType.setStatus('current')
if mibBuilder.loadTexts: hcxOc3VccType.setDescription(' Specifies whether this VCC is used to transport data or voice.')
com21HcxOc3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 94, 1), )
if mibBuilder.loadTexts: com21HcxOc3StatsTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxOc3StatsTable.setDescription('.')
com21HcxOc3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 94, 1, 1), ).setIndexNames((0, "COM21-HCXOC3-MIB", "hcxOc3StatsShelfId"), (0, "COM21-HCXOC3-MIB", "hcxOc3StatsSlotId"), (0, "COM21-HCXOC3-MIB", "hcxOc3StatsPortId"))
if mibBuilder.loadTexts: com21HcxOc3StatsEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxOc3StatsEntry.setDescription('.')
hcxOc3StatsShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 94, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3StatsShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxOc3StatsShelfId.setDescription(' Specifies the Shelf where this Entry exists. ')
hcxOc3StatsSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 94, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3StatsSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxOc3StatsSlotId.setDescription(' Specifies the Slot where this Entry exists. ')
hcxOc3StatsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 94, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3StatsPortId.setStatus('current')
if mibBuilder.loadTexts: hcxOc3StatsPortId.setDescription(' Specifies the Port where this Entry exists. ')
hcxOc3StatsCurrSectionBIPErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 94, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3StatsCurrSectionBIPErr.setStatus('current')
if mibBuilder.loadTexts: hcxOc3StatsCurrSectionBIPErr.setDescription(' This attributes displays the number of Section Byte Interleaved Parity Errors reported by the OC3 Port in the current 15-minute period. ')
hcxOc3StatsCurrLineBIPErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 94, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3StatsCurrLineBIPErr.setStatus('current')
if mibBuilder.loadTexts: hcxOc3StatsCurrLineBIPErr.setDescription(' This attributes displays the number of Line Byte Interleaved Parity Errors reported by the OC3 Port in the current 15-minute period. ')
hcxOc3StatsCurrPathBIPErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 94, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3StatsCurrPathBIPErr.setStatus('current')
if mibBuilder.loadTexts: hcxOc3StatsCurrPathBIPErr.setDescription(' This attributes displays the number of Path Byte Interleaved Parity Errors reported by the OC3 Port in the current 15-minute period.')
hcxOc3StatsCurrLineFEndBlockErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 94, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3StatsCurrLineFEndBlockErr.setStatus('current')
if mibBuilder.loadTexts: hcxOc3StatsCurrLineFEndBlockErr.setDescription(' This attributes displays the number of Far End Line Block Errors reported by the OC3 Port in the current 15-minute period.')
hcxOc3StatsCurrPathFEndBlockErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 94, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3StatsCurrPathFEndBlockErr.setStatus('current')
if mibBuilder.loadTexts: hcxOc3StatsCurrPathFEndBlockErr.setDescription(' This attributes displays the number of Far End Path Block Errors reported by the OC3 Port in the current 15-minute period.')
hcxOc3StatsPrevSectionBIPErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 94, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3StatsPrevSectionBIPErr.setStatus('current')
if mibBuilder.loadTexts: hcxOc3StatsPrevSectionBIPErr.setDescription(' This attributes displays the number of Section Byte Interleaved Parity Errors reported by the OC3 Port in the current 15-minute period. ')
hcxOc3StatsPrevLineBIPErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 94, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3StatsPrevLineBIPErr.setStatus('current')
if mibBuilder.loadTexts: hcxOc3StatsPrevLineBIPErr.setDescription(' This attributes displays the number of Line Byte Interleaved Parity Errors reported by the OC3 Port in the current 15-minute period. ')
hcxOc3StatsPrevPathBIPErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 94, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3StatsPrevPathBIPErr.setStatus('current')
if mibBuilder.loadTexts: hcxOc3StatsPrevPathBIPErr.setDescription(' This attributes displays the number of Path Byte Interleaved Parity Errors reported by the OC3 Port in the current 15-minute period.')
hcxOc3StatsPrevLineFEndBlockErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 94, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3StatsPrevLineFEndBlockErr.setStatus('current')
if mibBuilder.loadTexts: hcxOc3StatsPrevLineFEndBlockErr.setDescription(' This attributes displays the number of Far End Line Block Errors reported by the OC3 Port in the current 15-minute period.')
hcxOc3StatsPrevPathFEndBlockErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 94, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3StatsPrevPathFEndBlockErr.setStatus('current')
if mibBuilder.loadTexts: hcxOc3StatsPrevPathFEndBlockErr.setDescription(' This attributes displays the number of Far End Path Block Errors reported by the OC3 Port in the current 15-minute period.')
hcxOc3StatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 94, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxOc3StatsClear.setStatus('current')
if mibBuilder.loadTexts: hcxOc3StatsClear.setDescription(' This attribute is used to clear the all OC3 Stats statistics counters in this group. This operation is only possible if the hcxStatsControl attribute is set to wrapCurr.')
mibBuilder.exportSymbols("COM21-HCXOC3-MIB", hcxOc3StatsPrevLineBIPErr=hcxOc3StatsPrevLineBIPErr, hcxOc3AgeTime=hcxOc3AgeTime, com21HcxOc3PortGroup=com21HcxOc3PortGroup, hcxOc3VccVci=hcxOc3VccVci, hcxOc3UnitSlotId=hcxOc3UnitSlotId, hcxOc3StatsPrevPathFEndBlockErr=hcxOc3StatsPrevPathFEndBlockErr, hcxOc3BootVersion=hcxOc3BootVersion, hcxOc3PortSectionLOFClear=hcxOc3PortSectionLOFClear, hcxOc3PortPrimStateChange=hcxOc3PortPrimStateChange, hcxOc3PortLineRDIClear=hcxOc3PortLineRDIClear, com21HcxOc3UnitGroup=com21HcxOc3UnitGroup, hcxOc3PortSecServState=hcxOc3PortSecServState, hcxOc3PortMacAddr=hcxOc3PortMacAddr, hcxOc3UnitSecStateChange=hcxOc3UnitSecStateChange, hcxOc3TestStatusLedChange=hcxOc3TestStatusLedChange, hcxOc3StatsCurrLineBIPErr=hcxOc3StatsCurrLineBIPErr, hcxOc3StatsCurrPathFEndBlockErr=hcxOc3StatsCurrPathFEndBlockErr, hcxOc3PortLineRDI=hcxOc3PortLineRDI, hcxOc3PortDiagTestComplete=hcxOc3PortDiagTestComplete, com21HcxOc3StatsTable=com21HcxOc3StatsTable, hcxOc3VccVpi=hcxOc3VccVpi, hcxOc3PortLOSLedChange=hcxOc3PortLOSLedChange, hcxOc3StatsCurrPathBIPErr=hcxOc3StatsCurrPathBIPErr, com21HcxOc3UnitEntry=com21HcxOc3UnitEntry, hcxOc3PortSectionLOF=hcxOc3PortSectionLOF, hcxOc3PortLOFLed=hcxOc3PortLOFLed, hcxOc3AggrActUpStrmCbrRate=hcxOc3AggrActUpStrmCbrRate, hcxOc3AggrUpStrmMaxRate=hcxOc3AggrUpStrmMaxRate, hcxOc3UnitShelfId=hcxOc3UnitShelfId, hcxOc3StatsSlotId=hcxOc3StatsSlotId, hcxOc3PortSectionLOS=hcxOc3PortSectionLOS, hcxOc3PortAggrActVoiceRate=hcxOc3PortAggrActVoiceRate, hcxOc3PortPrimServState=hcxOc3PortPrimServState, hcxOc3MaxBandwidth=hcxOc3MaxBandwidth, Com21RowStatus=Com21RowStatus, hcxOc3VccType=hcxOc3VccType, hcxOc3PortId=hcxOc3PortId, hcxOc3PortLineAISDetected=hcxOc3PortLineAISDetected, com21HcxOc3PortTable=com21HcxOc3PortTable, hcxOc3StatsCurrSectionBIPErr=hcxOc3StatsCurrSectionBIPErr, hcxOc3FaultStatusLed=hcxOc3FaultStatusLed, com21HcxOc3PortEntry=com21HcxOc3PortEntry, com21HcxOc3StatsEntry=com21HcxOc3StatsEntry, hcxOc3PortPathRDIDetected=hcxOc3PortPathRDIDetected, hcxOc3VccShelfId=hcxOc3VccShelfId, hcxOc3PortShelfId=hcxOc3PortShelfId, com21HcxOc3VccGroup=com21HcxOc3VccGroup, hcxOc3HardwareVersion=hcxOc3HardwareVersion, com21HcxOc3UnitTable=com21HcxOc3UnitTable, hcxOc3UnitSecServState=hcxOc3UnitSecServState, hcxOc3StatsPortId=hcxOc3StatsPortId, hcxOc3SerialNumber=hcxOc3SerialNumber, hcxOc3PortDiagTestAction=hcxOc3PortDiagTestAction, hcxOc3RestartAction=hcxOc3RestartAction, hcxOc3UnitPrimStateChange=hcxOc3UnitPrimStateChange, hcxOc3Port1483EncapEnbl=hcxOc3Port1483EncapEnbl, hcxOc3PortLineAIS=hcxOc3PortLineAIS, hcxOc3PortLOFLedChange=hcxOc3PortLOFLedChange, PrimServiceState=PrimServiceState, hcxOc3PortSlotId=hcxOc3PortSlotId, hcxOc3PortAggrVoiceRate=hcxOc3PortAggrVoiceRate, hcxOc3StatsPrevLineFEndBlockErr=hcxOc3StatsPrevLineFEndBlockErr, hcxOc3StatsShelfId=hcxOc3StatsShelfId, hcxOc3AggrActUpStrmMaxRate=hcxOc3AggrActUpStrmMaxRate, hcxOc3PortSectionLOSDetected=hcxOc3PortSectionLOSDetected, hcxOc3PortSectionLOFDetected=hcxOc3PortSectionLOFDetected, hcxOc3SyncClkConfigure=hcxOc3SyncClkConfigure, hcxOc3AggrActUpStrmMinRate=hcxOc3AggrActUpStrmMinRate, hcxOc3AggrActDnStrmPcrRate=hcxOc3AggrActDnStrmPcrRate, hcxOc3AggrDnStrmCbrRate=hcxOc3AggrDnStrmCbrRate, hcxOc3PortRestartAction=hcxOc3PortRestartAction, hcxOc3PortLOSLed=hcxOc3PortLOSLed, hcxOc3AggrActDnStrmCbrRate=hcxOc3AggrActDnStrmCbrRate, com21HcxOc3VccTable=com21HcxOc3VccTable, hcxOc3PortLineRDIDetected=hcxOc3PortLineRDIDetected, hcxOc3OperationFailure=hcxOc3OperationFailure, hcxOc3VccPortId=hcxOc3VccPortId, hcxOc3PortLineAISClear=hcxOc3PortLineAISClear, hcxOc3StatsPrevPathBIPErr=hcxOc3StatsPrevPathBIPErr, hcxOc3AggrDnStrmPcrRate=hcxOc3AggrDnStrmPcrRate, hcxOc3AggrUpStrmMinRate=hcxOc3AggrUpStrmMinRate, hcxOc3PortPathRDI=hcxOc3PortPathRDI, hcxOc3StatsClear=hcxOc3StatsClear, hcxOc3PortIpMask=hcxOc3PortIpMask, hcxOc3PortSecStateChange=hcxOc3PortSecStateChange, hcxOc3StatsCurrLineFEndBlockErr=hcxOc3StatsCurrLineFEndBlockErr, hcxOc3PortIpAddr=hcxOc3PortIpAddr, hcxOc3PortConfigState=hcxOc3PortConfigState, hcxOc3TestStatusLed=hcxOc3TestStatusLed, hcxOc3PortSectionLOSClear=hcxOc3PortSectionLOSClear, hcxOc3UnitPrimServState=hcxOc3UnitPrimServState, hcxOc3PortPathRDIClear=hcxOc3PortPathRDIClear, hcxOc3AggrUpStrmCbrRate=hcxOc3AggrUpStrmCbrRate, hcxOc3StatsPrevSectionBIPErr=hcxOc3StatsPrevSectionBIPErr, com21HcxOc3=com21HcxOc3, PYSNMP_MODULE_ID=com21HcxOc3, hcxOc3FaultStatusLedChange=hcxOc3FaultStatusLedChange, com21HcxOc3VccEntry=com21HcxOc3VccEntry, hcxOc3VccSlotId=hcxOc3VccSlotId, hcxOc3PortDiagTestResult=hcxOc3PortDiagTestResult, com21HcxOc3StatsGroup=com21HcxOc3StatsGroup)
