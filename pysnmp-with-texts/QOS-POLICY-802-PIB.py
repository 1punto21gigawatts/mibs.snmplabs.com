#
# PySNMP MIB module QOS-POLICY-802-PIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/QOS-POLICY-802-PIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
PolicyInstanceId, = mibBuilder.importSymbols("POLICY-FRAMEWORK-PIB", "PolicyInstanceId")
Dscp, = mibBuilder.importSymbols("QOS-POLICY-IP-PIB", "Dscp")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, Gauge32, iso, NotificationType, MibIdentifier, Bits, ModuleIdentity, Counter64, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "Gauge32", "iso", "NotificationType", "MibIdentifier", "Bits", "ModuleIdentity", "Counter64", "ObjectIdentity", "Integer32")
PhysAddress, RowStatus, StorageType, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "RowStatus", "StorageType", "TruthValue", "DisplayString", "TextualConvention")
policy, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "policy")
qosPolicy802Pib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 4, 3))
if mibBuilder.loadTexts: qosPolicy802Pib.setLastUpdated('9910201800Z')
if mibBuilder.loadTexts: qosPolicy802Pib.setOrganization('IETF RAP WG')
if mibBuilder.loadTexts: qosPolicy802Pib.setContactInfo(' Michael Fine Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA 95134-1706 USA Phone: +1 408 527 8218 Email: mfine@cisco.com Keith McCloghrie Cisco Systems, Inc. 170 West Tasman Drive, San Jose, CA 95134-1706 USA Phone: +1 408 526 5260 Email: kzm@cisco.com John Seligson Nortel Networks, Inc. 4401 Great America Parkway Santa Clara, CA 95054 USA Phone: +1 408 495 2992 Email: jseligso@nortelnetworks.com')
if mibBuilder.loadTexts: qosPolicy802Pib.setDescription('The PIB module containing an initial set of policy rule classes that describe the quality of service (QoS) policies supported by devices for IEEE 802- based traffic.')
qosPolicy802PibClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 3, 1))
class QosIeee802Cos(TextualConvention, Integer32):
    description = 'An integer that is in the range of the IEEE 802 CoS values. This corresponds to the 802.1p priority values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

qos802DomainConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 1))
qos802DscpMappingTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 1, 1), )
if mibBuilder.loadTexts: qos802DscpMappingTable.setStatus('current')
if mibBuilder.loadTexts: qos802DscpMappingTable.setDescription('Maps each DSCP to an QosIeee802Cos. When configured for the first time, all 64 entries of the table must be specified. Thereafter, instances may be modified but not deleted unless all instances are deleted.')
qos802DscpMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 1, 1, 1), ).setIndexNames((0, "QOS-POLICY-802-PIB", "qos802DscpMappingId"))
if mibBuilder.loadTexts: qos802DscpMappingEntry.setStatus('current')
if mibBuilder.loadTexts: qos802DscpMappingEntry.setDescription('An instance of the qos802DscpMapping class. A total of 64 class instances are constantly maintained after initial device configuration.')
qos802DscpMappingId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 1, 1, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qos802DscpMappingId.setStatus('current')
if mibBuilder.loadTexts: qos802DscpMappingId.setDescription('A unique ID for this policy rule instance.')
qos802DscpMappingDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 1, 1, 1, 2), Dscp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802DscpMappingDscp.setStatus('current')
if mibBuilder.loadTexts: qos802DscpMappingDscp.setDescription('The DSCP class instance attribute that is used to determine the appropriate Layer 2 CoS mappings. DSCP values 0 through 63 (inclusive) are maintained in the table.')
qos802DscpMapping802Cos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 1, 1, 1, 3), QosIeee802Cos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802DscpMapping802Cos.setStatus('current')
if mibBuilder.loadTexts: qos802DscpMapping802Cos.setDescription('The IEEE 802 CoS value to use when mapping the DSCP value specified by the qos802DscpMappingDscp attribute to a IEEE 802 CoS.')
qos802DscpMappingStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 1, 1, 1, 4), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802DscpMappingStorageType.setStatus('current')
if mibBuilder.loadTexts: qos802DscpMappingStorageType.setDescription('The storage type for this conceptual row. Conceptual rows having the value permanent(4) need not allow write-access to any columnar objects in the row. This object may not be modified if the associated qos802DscpMappingStatus object is equal to active(1).')
qos802DscpMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802DscpMappingStatus.setStatus('current')
if mibBuilder.loadTexts: qos802DscpMappingStatus.setDescription('The status of this row. An entry may not exist in the active state unless all objects in the entry have an appropriate value. Row creation using only default values is supported.')
qos802CosToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 1, 2), )
if mibBuilder.loadTexts: qos802CosToDscpTable.setStatus('current')
if mibBuilder.loadTexts: qos802CosToDscpTable.setDescription('Maps each of eight Layer 2 CoS values to a DSCP. When configured for the first time, all 8 entries of the table must be specified. Thereafter, instances may be modified but not deleted unless all instances are deleted.')
qos802CosToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 1, 2, 1), ).setIndexNames((0, "QOS-POLICY-802-PIB", "qos802CosToDscpId"))
if mibBuilder.loadTexts: qos802CosToDscpEntry.setStatus('current')
if mibBuilder.loadTexts: qos802CosToDscpEntry.setDescription('An instance of the qosCosToDscp class. A total of 8 class instances are constantly maintained after initial device configuration.')
qos802CosToDscpId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 1, 2, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qos802CosToDscpId.setStatus('current')
if mibBuilder.loadTexts: qos802CosToDscpId.setDescription('A unique ID for this policy rule instance.')
qos802CosToDscpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 1, 2, 1, 2), QosIeee802Cos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802CosToDscpCos.setStatus('current')
if mibBuilder.loadTexts: qos802CosToDscpCos.setDescription('The Layer 2 CoS class instance attribute that is used to determine the appropriate DSCP mappings. CoS values 0 through 7 (inclusive) are maintained in the table.')
qos802CosToDscpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 1, 2, 1, 3), Dscp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802CosToDscpDscp.setStatus('current')
if mibBuilder.loadTexts: qos802CosToDscpDscp.setDescription('The DSCP value to use when mapping the Layer 2 CoS value specified by the qosCosToDscp attribute to a DSCP.')
qos802CosToDscpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 1, 2, 1, 4), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802CosToDscpStorageType.setStatus('current')
if mibBuilder.loadTexts: qos802CosToDscpStorageType.setDescription('The storage type for this conceptual row. Conceptual rows having the value permanent(4) need not allow write-access to any columnar objects in the row. This object may not be modified if the associated qos802CosToDscpStatus object is equal to active(1).')
qos802CosToDscpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802CosToDscpStatus.setStatus('current')
if mibBuilder.loadTexts: qos802CosToDscpStatus.setDescription('The status of this row. An entry may not exist in the active state unless all objects in the entry have an appropriate value. Row creation using only default values is supported.')
qos802Qos = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2))
qos802AceTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 1), )
if mibBuilder.loadTexts: qos802AceTable.setStatus('current')
if mibBuilder.loadTexts: qos802AceTable.setDescription('IEEE 802-based ACE definitions. A class that contains attributes of IEEE 802 (e.g., 802.3) traffic that form an association that is used to perform traffic classification.')
qos802AceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 1, 1), ).setIndexNames((0, "QOS-POLICY-802-PIB", "qos802AceId"))
if mibBuilder.loadTexts: qos802AceEntry.setStatus('current')
if mibBuilder.loadTexts: qos802AceEntry.setDescription('IEEE 802-based ACE definitions. An entry specifies (potentially) several distinct matching components. Each component is tested against the data in a frame individually. An overall match occurs when all of the individual components match the data they are compared against in the frame being processed. A failure of any one test causes the overall match to fail. Wildcards may be specified for those fields that are not relevant.')
qos802AceId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 1, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qos802AceId.setStatus('current')
if mibBuilder.loadTexts: qos802AceId.setDescription('An arbitrary integer index that uniquely identifies this 802 ACE among all of the 802 ACEs. Note that this identifier is used in instances of the qos802Acl class to associate a 802 ACE with a 802 ACL. An active ACE/ACL association prohibits the deletion of the 802 ACE until the ACE/ACL association is terminated. Class instances may not be contiguous.')
qos802AceDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 1, 1, 2), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AceDstAddr.setStatus('current')
if mibBuilder.loadTexts: qos802AceDstAddr.setDescription('The 802 address against which the 802 DA of incoming traffic streams will be compared. Frames whose 802 DA matches the physical address specified by this object, taking into account address wildcarding as specified by the qos802AceDstAddrMask object, are potentially subject to the processing guidelines that are associated with this entry through the related action class.')
qos802AceDstAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 1, 1, 3), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AceDstAddrMask.setStatus('current')
if mibBuilder.loadTexts: qos802AceDstAddrMask.setDescription("This object specifies the bits in a 802 destination address that should be considered when performing a 802 DA comparison against the address specified in the qos802AceDstAddr object. The value of this object represents a mask that is logically and'ed with the 802 DA in received frames to derive the value to be compared against the qos802AceDstAddr address. A zero bit in the mask thus means that the corresponding bit in the address always matches. The qos802AceDstAddr value must also be masked using this value prior to any comparisons. The length of this object in octets must equal the length in octets of the qos802AceDstAddr. Note that a mask with no bits set (i.e., all zeroes) effectively wildcards the qos802AceDstAddr object.")
qos802AceSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 1, 1, 4), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AceSrcAddr.setStatus('current')
if mibBuilder.loadTexts: qos802AceSrcAddr.setDescription('The 802 MAC address against which the 802 MAC SA of incoming traffic streams will be compared. Frames whose 802 MAC SA matches the physical address specified by this object, taking into account address wildcarding as specified by the qos802AceSrcAddrMask object, are potentially subject to the processing guidelines that are associated with this entry through the related action class.')
qos802AceSrcAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 1, 1, 5), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AceSrcAddrMask.setStatus('current')
if mibBuilder.loadTexts: qos802AceSrcAddrMask.setDescription("This object specifies the bits in a 802 MAC source address that should be considered when performing a 802 MAC SA comparison against the address specified in the qos802AceSrcAddr object. The value of this object represents a mask that is logically and'ed with the 802 MAC SA in received frames to derive the value to be compared against the qos802AceSrcAddr address. A zero bit in the mask thus means that the corresponding bit in the address always matches. The qos802AceSrcAddr value must also be masked using this value prior to any comparisons. The length of this object in octets must equal the length in octets of the qos802AceSrcAddr. Note that a mask with no bits set (i.e., all zeroes) effectively wildcards the qos802AceSrcAddr object.")
qos802AceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AceVlanId.setStatus('current')
if mibBuilder.loadTexts: qos802AceVlanId.setDescription('The VLAN ID (VID) that uniquely identifies a VLAN within the device. This VLAN may be known or unknown (i.e., traffic associated with this VID has not yet been seen by the device) at the time this entry is instantiated. Setting the qos802AceVlanId object to -1 indicates that VLAN data should not be considered during traffic classification.')
qos802AceVlanTagRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("taggedOnly", 1), ("priorityTagged", 2), ("untaggedOnly", 3), ("ignoreTag", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AceVlanTagRequired.setStatus('current')
if mibBuilder.loadTexts: qos802AceVlanTagRequired.setDescription("This object indicates whether the presence of an IEEE 802.1Q VLAN tag in data link layer frames must be considered when determining if a given frame matches this 802 ACE entry. A value of 'taggedOnly(1)' means that only frames containing a VLAN tag with a non-Null VID (i.e., a VID in the range 1..4094) will be considered a match. A value of 'priorityTaggedPlus(2)' means that only frames containing a VLAN tag, regardless of the value of the VID, will be considered a match. A value of 'untaggedOnly(3)' indicates that only untagged frames will match this filter component. The presence of a VLAN tag is not taken into consideration in terms of a match if the value is 'ignoreTag(4)'.")
qos802AceEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AceEtherType.setStatus('current')
if mibBuilder.loadTexts: qos802AceEtherType.setDescription("This object specifies the value that will be compared against the value contained in the EtherType field of an IEEE 802 frame. Example settings would include 'IP' (0x0800), 'ARP' (0x0806) and 'IPX' (0x8137). Setting the qos802AceEtherType object to -1 indicates that EtherType data should not be considered during traffic classification. Note that the position of the EtherType field depends on the underlying frame format. For Ethernet-II encapsulation, the EtherType field follows the 802 MAC source address. For 802.2 LLC/SNAP encapsulation, the EtherType value follows the Organization Code field in the 802.2 SNAP header. The value that is tested with regard to this filter component therefore depends on the data link layer frame format being used. If this 802 ACE component is active when there is no EtherType field in a frame (e.g., 802.2 LLC), a match is implied.")
qos802AceUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 1, 1, 9), Bits().clone(namedValues=NamedValues(("matchPriority0", 0), ("matchPriority1", 1), ("matchPriority2", 2), ("matchPriority3", 3), ("matchPriority4", 4), ("matchPriority5", 5), ("matchPriority6", 6), ("matchPriority7", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AceUserPriority.setStatus('current')
if mibBuilder.loadTexts: qos802AceUserPriority.setDescription('The set of values, representing the potential range of user priority values, against which the value contained in the user priority field of a tagged 802.1 frame is compared. A test for equality is performed when determining if a match exists between the data in a data link layer frame and the value of this 802 ACE component. Multiple values may be set at one time such that potentially several different user priority values may match this 802 ACE component. Setting all of the bits that are associated with this object causes all user priority values to match this attribute. This essentially makes any comparisons with regard to user priority values unnecessary. Untagged frames are treated as an implicit match.')
qos802AcePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 1, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AcePermit.setStatus('current')
if mibBuilder.loadTexts: qos802AcePermit.setDescription('If the frame matches this ACE and the value of this attribute is true, then the matching process terminates and the QoS associated with this 802-based ACE (indirectly through the 802 ACL) is applied to the packet. If the value of this attribute is false, then no more 802 ACEs in this 802 ACL are compared to this packet and matching continues with the first 802-based ACE of the next 802 ACL.')
qos802AceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 1, 1, 11), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AceStorageType.setStatus('current')
if mibBuilder.loadTexts: qos802AceStorageType.setDescription('The storage type for this conceptual row. Conceptual rows having the value permanent(4) need not allow write-access to any columnar objects in the row. This object may not be modified if the associated qos802AceStatus object is equal to active(1).')
qos802AceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AceStatus.setStatus('current')
if mibBuilder.loadTexts: qos802AceStatus.setDescription('The status of this row. An entry may not exist in the active state unless all objects in the entry have an appropriate value. Row creation using only default values is supported.')
qos802AclDefinitionTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 2), )
if mibBuilder.loadTexts: qos802AclDefinitionTable.setStatus('current')
if mibBuilder.loadTexts: qos802AclDefinitionTable.setDescription('IEEE 802-based ACL definitions. A class that defines a set of 802 ACLs, each of which is comprised of an ordered list of 802 ACEs.')
qos802AclDefinitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 2, 1), ).setIndexNames((0, "QOS-POLICY-802-PIB", "qos802AclDefinitionId"))
if mibBuilder.loadTexts: qos802AclDefinitionEntry.setStatus('current')
if mibBuilder.loadTexts: qos802AclDefinitionEntry.setDescription('IEEE 802-based ACL definitions. An entry specifies an instance of this class that associates an 802 ACE with a given 802 ACL. The evaluation order of distinct 802 ACEs that are associated with a specific 802 ACL is specified as well.')
qos802AclDefinitionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 2, 1, 1), PolicyInstanceId())
if mibBuilder.loadTexts: qos802AclDefinitionId.setStatus('current')
if mibBuilder.loadTexts: qos802AclDefinitionId.setDescription('An arbitrary integer index that uniquely identifies this 802 ACE / 802 ACL association.')
qos802AclDefinitionAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 2, 1, 2), PolicyInstanceId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AclDefinitionAclId.setStatus('current')
if mibBuilder.loadTexts: qos802AclDefinitionAclId.setDescription('An index for this 802 ACL. Each 802 ACL in the device is assigned a unique integer index. There will (potentially) be multiple instances of the qos802AclDefinition class with this identifier, one for each 802 ACE that is associated with the specified 802 ACL. For example, assume that 2 802 ACLs, each comprised of 4 802 ACEs, have been installed. The instances of this class may appear as follows: Index AclId AceId AceOrder 10 6 4 1 11 6 5 2 12 6 9 23 13 6 11 24 65 18 5 8 66 18 9 12 67 18 13 15 70 18 14 16 Note that this identifier is used in instances of the qosAclTarget class to associate an 802 ACL with an interface set and action. An active ACL Target association prohibits the deletion of all of the qos802AclDefinition instances with a given qos802AclDefinitionAclId (i.e., at least one entry for the specific qos802AclDefinitionAclId must be present in this table) until the ACL Target association is terminated.')
qos802AclDefinitionAceId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 2, 1, 3), PolicyInstanceId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AclDefinitionAceId.setStatus('current')
if mibBuilder.loadTexts: qos802AclDefinitionAceId.setDescription("This attribute identifies the 802 ACE in the qos802AceTable that is associated with the 802 ACL specified by qos802AclDefinitionAclId object. The corresponding instance in the qos802Ace class must exist prior to being associated with a 802 ACL. Attempting to specify an unknown class instance will result in an appropriate error indication being returned to the entity that is attempting to install the conflicting entry. For example, a 'priUnknown(2)' error indication is returned to the policy server in this situation.")
qos802AclDefinitionAceOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AclDefinitionAceOrder.setStatus('current')
if mibBuilder.loadTexts: qos802AclDefinitionAceOrder.setDescription('The precedence of the 802 ACE, identified via the qos802AclDefinitionAceId object, with regard to evaluation order. The precedence determines the order of evaluation of this ACE in relation to related 802 ACEs that are associated with an ACL. An ACE with a given precedence order in the access control list is evaluated before one with a higher- valued precedence order. Precedence values within a group must be unique otherwise instance installation will be prohibited and an error value will be returned. Note that qos802AclDefinitionAceOrder values within a given ACL need not be contiguous.')
qos802AclDefinitionStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 2, 1, 5), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AclDefinitionStorageType.setStatus('current')
if mibBuilder.loadTexts: qos802AclDefinitionStorageType.setDescription('The storage type for this conceptual row. Conceptual rows having the value permanent(4) need not allow write-access to any columnar objects in the row. This object may not be modified if the associated qos802AclDefinitionStatus object is equal to active(1).')
qos802AclDefinitionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AclDefinitionStatus.setStatus('current')
if mibBuilder.loadTexts: qos802AclDefinitionStatus.setDescription('The status of this row. An entry may not exist in the active state unless all objects in the entry have an appropriate value. Row creation using only default values is supported.')
qos802AclDefinitionLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 3, 1, 2, 2, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qos802AclDefinitionLabel.setStatus('current')
if mibBuilder.loadTexts: qos802AclDefinitionLabel.setDescription('A label used to reference the filter group in a textual manner. All members of the same group, as determined by the value of the qos802AclDefinitionAclId attribute, must have the same label.')
qosPolicy802PibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 3, 2))
qosPolicy802PibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 3, 2, 1))
qosPolicy802PibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 3, 2, 2))
qosPolicy802PibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 45, 4, 3, 2, 1, 1)).setObjects(("QOS-POLICY-802-PIB", "qos802DscpMappingGroup"), ("QOS-POLICY-802-PIB", "qos802CosToDscpGroup"), ("QOS-POLICY-802-PIB", "qos802AceGroup"), ("QOS-POLICY-802-PIB", "qos802AclDefinitionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qosPolicy802PibCompliance = qosPolicy802PibCompliance.setStatus('current')
if mibBuilder.loadTexts: qosPolicy802PibCompliance.setDescription('Describes the requirements for conformance to the QoS Policy 802 PIB.')
qos802DscpMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 3, 2, 2, 1)).setObjects(("QOS-POLICY-802-PIB", "qos802DscpMappingDscp"), ("QOS-POLICY-802-PIB", "qos802DscpMapping802Cos"), ("QOS-POLICY-802-PIB", "qos802DscpMappingStorageType"), ("QOS-POLICY-802-PIB", "qos802DscpMappingStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qos802DscpMappingGroup = qos802DscpMappingGroup.setStatus('current')
if mibBuilder.loadTexts: qos802DscpMappingGroup.setDescription('Objects from the qos802DscpMappingTable.')
qos802CosToDscpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 3, 2, 2, 2)).setObjects(("QOS-POLICY-802-PIB", "qos802CosToDscpCos"), ("QOS-POLICY-802-PIB", "qos802CosToDscpDscp"), ("QOS-POLICY-802-PIB", "qos802CosToDscpStorageType"), ("QOS-POLICY-802-PIB", "qos802CosToDscpStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qos802CosToDscpGroup = qos802CosToDscpGroup.setStatus('current')
if mibBuilder.loadTexts: qos802CosToDscpGroup.setDescription('Objects from the qos802CosToDscpTable.')
qos802AceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 3, 2, 2, 3)).setObjects(("QOS-POLICY-802-PIB", "qos802AceDstAddr"), ("QOS-POLICY-802-PIB", "qos802AceDstAddrMask"), ("QOS-POLICY-802-PIB", "qos802AceSrcAddr"), ("QOS-POLICY-802-PIB", "qos802AceSrcAddrMask"), ("QOS-POLICY-802-PIB", "qos802AceVlanId"), ("QOS-POLICY-802-PIB", "qos802AceVlanTagRequired"), ("QOS-POLICY-802-PIB", "qos802AceEtherType"), ("QOS-POLICY-802-PIB", "qos802AceUserPriority"), ("QOS-POLICY-802-PIB", "qos802AcePermit"), ("QOS-POLICY-802-PIB", "qos802AceStorageType"), ("QOS-POLICY-802-PIB", "qos802AceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qos802AceGroup = qos802AceGroup.setStatus('current')
if mibBuilder.loadTexts: qos802AceGroup.setDescription('Objects from the qos802AceTable.')
qos802AclDefinitionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 3, 2, 2, 4)).setObjects(("QOS-POLICY-802-PIB", "qos802AclDefinitionAclId"), ("QOS-POLICY-802-PIB", "qos802AclDefinitionAceId"), ("QOS-POLICY-802-PIB", "qos802AclDefinitionAceOrder"), ("QOS-POLICY-802-PIB", "qos802AclDefinitionStorageType"), ("QOS-POLICY-802-PIB", "qos802AclDefinitionStatus"), ("QOS-POLICY-802-PIB", "qos802AclDefinitionLabel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qos802AclDefinitionGroup = qos802AclDefinitionGroup.setStatus('current')
if mibBuilder.loadTexts: qos802AclDefinitionGroup.setDescription('Objects from the qos802AclDefinitionTable.')
mibBuilder.exportSymbols("QOS-POLICY-802-PIB", qos802DscpMappingStorageType=qos802DscpMappingStorageType, qos802AclDefinitionGroup=qos802AclDefinitionGroup, qos802AclDefinitionTable=qos802AclDefinitionTable, qos802DomainConfig=qos802DomainConfig, qos802AceUserPriority=qos802AceUserPriority, qos802DscpMapping802Cos=qos802DscpMapping802Cos, qos802DscpMappingTable=qos802DscpMappingTable, qos802AceDstAddr=qos802AceDstAddr, qos802AclDefinitionLabel=qos802AclDefinitionLabel, qos802AceTable=qos802AceTable, qos802DscpMappingDscp=qos802DscpMappingDscp, qosPolicy802PibClasses=qosPolicy802PibClasses, qos802AceId=qos802AceId, qos802AceSrcAddr=qos802AceSrcAddr, qos802AceVlanTagRequired=qos802AceVlanTagRequired, qos802AcePermit=qos802AcePermit, qos802AceStorageType=qos802AceStorageType, qos802DscpMappingEntry=qos802DscpMappingEntry, qos802CosToDscpCos=qos802CosToDscpCos, qos802CosToDscpEntry=qos802CosToDscpEntry, QosIeee802Cos=QosIeee802Cos, qos802AceStatus=qos802AceStatus, qos802AclDefinitionId=qos802AclDefinitionId, qos802CosToDscpGroup=qos802CosToDscpGroup, qosPolicy802PibCompliance=qosPolicy802PibCompliance, qosPolicy802PibGroups=qosPolicy802PibGroups, qos802CosToDscpStorageType=qos802CosToDscpStorageType, qos802AceSrcAddrMask=qos802AceSrcAddrMask, qos802CosToDscpStatus=qos802CosToDscpStatus, qos802AclDefinitionAceId=qos802AclDefinitionAceId, qos802DscpMappingStatus=qos802DscpMappingStatus, qos802AceVlanId=qos802AceVlanId, qos802AclDefinitionAclId=qos802AclDefinitionAclId, qos802Qos=qos802Qos, qosPolicy802PibCompliances=qosPolicy802PibCompliances, PYSNMP_MODULE_ID=qosPolicy802Pib, qos802CosToDscpTable=qos802CosToDscpTable, qos802AclDefinitionStorageType=qos802AclDefinitionStorageType, qos802DscpMappingId=qos802DscpMappingId, qos802AceGroup=qos802AceGroup, qosPolicy802PibConformance=qosPolicy802PibConformance, qos802AceEntry=qos802AceEntry, qos802CosToDscpId=qos802CosToDscpId, qos802AceEtherType=qos802AceEtherType, qos802DscpMappingGroup=qos802DscpMappingGroup, qos802AclDefinitionEntry=qos802AclDefinitionEntry, qos802CosToDscpDscp=qos802CosToDscpDscp, qos802AclDefinitionAceOrder=qos802AclDefinitionAceOrder, qos802AceDstAddrMask=qos802AceDstAddrMask, qos802AclDefinitionStatus=qos802AclDefinitionStatus, qosPolicy802Pib=qosPolicy802Pib)
