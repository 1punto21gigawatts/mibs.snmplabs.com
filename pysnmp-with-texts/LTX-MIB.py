#
# PySNMP MIB module LTX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LTX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:08:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Bits, Gauge32, MibIdentifier, iso, Counter32, Unsigned32, IpAddress, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, mib_2, ObjectIdentity, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "Gauge32", "MibIdentifier", "iso", "Counter32", "Unsigned32", "IpAddress", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "mib-2", "ObjectIdentity", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ltx = MibIdentifier((1, 3, 6, 1, 4, 1, 244))
ltxlna = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 10))
ltxlrp = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 11))
ltxlsw = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 12))
class OwnerString(DisplayString):
    pass

ltxLRPCommInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 11, 1))
ltxLRPHostInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 11, 2))
ltxLRPGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 11, 3))
ltxLRPMaxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 11, 4))
ltxLRPRoverInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 11, 5))
ltxLRPMiscInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 11, 6))
ltxLRPBadPkt = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 11, 7))
ltxLRPEnetIPMap = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 11, 8))
ltxLRPTopNProt = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 11, 9))
ltxLRPDupIPDet = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 11, 10))
ltxLRPNewIPDet = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 11, 11))
ltxLRPIPChgDet = MibIdentifier((1, 3, 6, 1, 4, 1, 244, 11, 12))
commInfoTable = MibTable((1, 3, 6, 1, 4, 1, 244, 11, 1, 1), )
if mibBuilder.loadTexts: commInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: commInfoTable.setDescription('A list of LTX Configuration Community Entries ')
commInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 11, 1, 1, 1), ).setIndexNames((0, "LTX-MIB", "commInfoIndex"))
if mibBuilder.loadTexts: commInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: commInfoEntry.setDescription('A list of Community properties for the LTX LRP')
commInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: commInfoIndex.setDescription('An index that uniquely identifies an entry in the LTX LRP Community Info Table.')
commInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commInfoName.setStatus('mandatory')
if mibBuilder.loadTexts: commInfoName.setDescription('The name of this LTX LRP Community Entry.')
commInfoGet = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commInfoGet.setStatus('mandatory')
if mibBuilder.loadTexts: commInfoGet.setDescription('The GET permission for the community.')
commInfoSet = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commInfoSet.setStatus('mandatory')
if mibBuilder.loadTexts: commInfoSet.setDescription('The SET permission for the community.')
commInfoTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commInfoTrap.setStatus('mandatory')
if mibBuilder.loadTexts: commInfoTrap.setDescription('The TRAP permission for the community.')
hostInfoTable = MibTable((1, 3, 6, 1, 4, 1, 244, 11, 2, 1), )
if mibBuilder.loadTexts: hostInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: hostInfoTable.setDescription('A list of LTX Configuration Host Entries ')
hostInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 11, 2, 1, 1), ).setIndexNames((0, "LTX-MIB", "hostInfoIndex"))
if mibBuilder.loadTexts: hostInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hostInfoEntry.setDescription('A list of Host properties for the LTX LRP')
hostInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hostInfoIndex.setDescription('An index that uniquely identifies an entry in the LTX LRP Host Info Table.')
hostInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostInfoName.setStatus('mandatory')
if mibBuilder.loadTexts: hostInfoName.setDescription('The name of this LTX LRP Host Entry.')
hostInfoIP = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostInfoIP.setStatus('mandatory')
if mibBuilder.loadTexts: hostInfoIP.setDescription('The IP Address for the host.')
hostInfoComm = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 2, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostInfoComm.setStatus('mandatory')
if mibBuilder.loadTexts: hostInfoComm.setDescription('The name of the community this host belongs to.')
groupInfoTable = MibTable((1, 3, 6, 1, 4, 1, 244, 11, 3, 1), )
if mibBuilder.loadTexts: groupInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: groupInfoTable.setDescription('A list of LTX Configuration Group Entries ')
groupInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 11, 3, 1, 1), ).setIndexNames((0, "LTX-MIB", "groupInfoIndex"))
if mibBuilder.loadTexts: groupInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: groupInfoEntry.setDescription('A list of Group properties for the LTX LRP')
groupInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: groupInfoIndex.setDescription('An index that uniquely identifies an entry in the LTX LRP MIB Group Info Table.')
groupInfoCapFilt = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupInfoCapFilt.setStatus('mandatory')
if mibBuilder.loadTexts: groupInfoCapFilt.setDescription('The toggle for the LTX LRP Group Capture/Filter Entry.')
groupInfoHostTopN = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupInfoHostTopN.setStatus('mandatory')
if mibBuilder.loadTexts: groupInfoHostTopN.setDescription('The toggle for the LTX LRP Group Host/HostTopN Entry.')
groupInfoMatrix = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupInfoMatrix.setStatus('mandatory')
if mibBuilder.loadTexts: groupInfoMatrix.setDescription('The toggle for the LTX LRP Group Matrix Entry.')
maxHTS = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxHTS.setStatus('mandatory')
if mibBuilder.loadTexts: maxHTS.setDescription('The maximum number of Host Table entries.')
maxMTS = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxMTS.setStatus('mandatory')
if mibBuilder.loadTexts: maxMTS.setDescription('The maximum number of Matrix Table entries.')
maxBuckets = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxBuckets.setStatus('mandatory')
if mibBuilder.loadTexts: maxBuckets.setDescription('The maximum number of History buckets.')
maxLogs = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxLogs.setStatus('mandatory')
if mibBuilder.loadTexts: maxLogs.setDescription('The maximum number of Event Logs.')
maxTopN = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxTopN.setStatus('mandatory')
if mibBuilder.loadTexts: maxTopN.setDescription('The maximum number of HostTopN entries.')
maxBuff = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxBuff.setStatus('mandatory')
if mibBuilder.loadTexts: maxBuff.setDescription('The maximum size of the Capture Buffer (in KBytes).')
roverControl = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roverControl.setStatus('mandatory')
if mibBuilder.loadTexts: roverControl.setDescription('The control to switch the Rover on and off.')
roverSeconds = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 5, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roverSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: roverSeconds.setDescription('The Rover decision-point interval in seconds.')
roverTErrs = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 5, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roverTErrs.setStatus('mandatory')
if mibBuilder.loadTexts: roverTErrs.setDescription('The maximum value for the Total Errors threshold.')
roverBPS = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 5, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roverBPS.setStatus('mandatory')
if mibBuilder.loadTexts: roverBPS.setDescription('The maximum value for the Bytes Per Second threshold.')
roverEPS = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 5, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roverEPS.setStatus('mandatory')
if mibBuilder.loadTexts: roverEPS.setDescription('The maximum value for the Errors Per Second threshold.')
roverPPS = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 5, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roverPPS.setStatus('mandatory')
if mibBuilder.loadTexts: roverPPS.setDescription('The maximum value for the Packets Per Second threshold.')
roverUtil = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 5, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roverUtil.setStatus('mandatory')
if mibBuilder.loadTexts: roverUtil.setDescription('The maximum value for the Utilization (%) threshold.')
roverTCRC = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 5, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roverTCRC.setStatus('mandatory')
if mibBuilder.loadTexts: roverTCRC.setDescription('The maximum value for the Total CRC Error threshold.')
roverTRunt = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 5, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roverTRunt.setStatus('mandatory')
if mibBuilder.loadTexts: roverTRunt.setDescription('The maximum value for the Total Runts threshold.')
roverTGiant = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 5, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roverTGiant.setStatus('mandatory')
if mibBuilder.loadTexts: roverTGiant.setDescription('The maximum value for the Total Giants threshold.')
roverTColl = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 5, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roverTColl.setStatus('mandatory')
if mibBuilder.loadTexts: roverTColl.setDescription('The maximum value for the Total Collisions threshold.')
roverTJabb = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 5, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roverTJabb.setStatus('mandatory')
if mibBuilder.loadTexts: roverTJabb.setDescription('The maximum value for the Total Jabbers threshold.')
miscInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 244, 11, 6, 1), )
if mibBuilder.loadTexts: miscInfoPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoPortTable.setDescription('A list of LTX Configuration Port Entries ')
miscInfoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 244, 11, 6, 1, 1), ).setIndexNames((0, "LTX-MIB", "miscInfoPortIndex"))
if mibBuilder.loadTexts: miscInfoPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoPortEntry.setDescription('A list of Port properties for the LTX LRP')
miscInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscInfoPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoPortIndex.setDescription('An index that uniquely identifies a LTX LRP port.')
miscInfoPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 6, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscInfoPortName.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoPortName.setDescription('The name of this LTX LRP Port Entry.')
miscInfoPortIP = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 6, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscInfoPortIP.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoPortIP.setDescription('The IP Address for the LTX LRP Port.')
miscInfoPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 244, 11, 6, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscInfoPortMask.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoPortMask.setDescription('The netmask for the LTX LRP Port.')
miscInfoDate = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscInfoDate.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoDate.setDescription('The time and date on the LTX LRP.')
miscInfoTMO = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscInfoTMO.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoTMO.setDescription('The Terminal and Modem timeout value in seconds.')
miscInfoRefresh = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscInfoRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoRefresh.setDescription('The ASCII Screen refresh interval value in seconds.')
miscInfoBaud = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscInfoBaud.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoBaud.setDescription('The ASCII Screen BAUD Rate.')
miscInfoTelnetControl = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscInfoTelnetControl.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoTelnetControl.setDescription('Enables or disables the Telnet daemon.')
miscInfoSNMPPort = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscInfoSNMPPort.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoSNMPPort.setDescription('Sets the SNMP Port number.')
miscInfoAuthenTrap = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscInfoAuthenTrap.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoAuthenTrap.setDescription('Enables or disables the Authentication TRAP.')
miscInfoColdstartTrap = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 6, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscInfoColdstartTrap.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoColdstartTrap.setDescription('Enables or disables the ColdStart TRAP.')
miscInfoLRPName = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 6, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscInfoLRPName.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoLRPName.setDescription('Names the LRP device.')
miscInfoGateway = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 6, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscInfoGateway.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoGateway.setDescription('Sets the Default Gateway for the LTX LRP.')
miscInfoRoverPort = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscInfoRoverPort.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoRoverPort.setDescription('Identifies the port Rover is active on, if any.')
miscInfoReset = MibScalar((1, 3, 6, 1, 4, 1, 244, 11, 6, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscInfoReset.setStatus('mandatory')
if mibBuilder.loadTexts: miscInfoReset.setDescription('Physically resets the LTX LRP - use with care.')
mibBuilder.exportSymbols("LTX-MIB", roverControl=roverControl, roverSeconds=roverSeconds, ltxLRPMaxInfo=ltxLRPMaxInfo, miscInfoPortTable=miscInfoPortTable, miscInfoPortIndex=miscInfoPortIndex, roverEPS=roverEPS, roverUtil=roverUtil, miscInfoColdstartTrap=miscInfoColdstartTrap, commInfoTrap=commInfoTrap, miscInfoPortEntry=miscInfoPortEntry, ltxLRPGroupInfo=ltxLRPGroupInfo, maxBuff=maxBuff, hostInfoComm=hostInfoComm, ltxLRPNewIPDet=ltxLRPNewIPDet, ltxLRPTopNProt=ltxLRPTopNProt, hostInfoIP=hostInfoIP, ltxLRPRoverInfo=ltxLRPRoverInfo, maxHTS=maxHTS, commInfoName=commInfoName, miscInfoTelnetControl=miscInfoTelnetControl, miscInfoBaud=miscInfoBaud, roverPPS=roverPPS, roverBPS=roverBPS, miscInfoReset=miscInfoReset, ltxLRPHostInfo=ltxLRPHostInfo, maxTopN=maxTopN, ltxLRPBadPkt=ltxLRPBadPkt, miscInfoRoverPort=miscInfoRoverPort, maxBuckets=maxBuckets, groupInfoTable=groupInfoTable, hostInfoTable=hostInfoTable, ltxlsw=ltxlsw, OwnerString=OwnerString, ltxLRPMiscInfo=ltxLRPMiscInfo, hostInfoIndex=hostInfoIndex, commInfoSet=commInfoSet, roverTColl=roverTColl, maxLogs=maxLogs, ltxLRPIPChgDet=ltxLRPIPChgDet, commInfoIndex=commInfoIndex, groupInfoIndex=groupInfoIndex, miscInfoPortIP=miscInfoPortIP, miscInfoAuthenTrap=miscInfoAuthenTrap, groupInfoMatrix=groupInfoMatrix, ltxLRPCommInfo=ltxLRPCommInfo, groupInfoHostTopN=groupInfoHostTopN, ltxlrp=ltxlrp, hostInfoName=hostInfoName, groupInfoCapFilt=groupInfoCapFilt, maxMTS=maxMTS, roverTCRC=roverTCRC, roverTRunt=roverTRunt, ltxLRPEnetIPMap=ltxLRPEnetIPMap, ltxLRPDupIPDet=ltxLRPDupIPDet, roverTJabb=roverTJabb, miscInfoRefresh=miscInfoRefresh, roverTErrs=roverTErrs, miscInfoPortName=miscInfoPortName, miscInfoDate=miscInfoDate, ltxlna=ltxlna, miscInfoTMO=miscInfoTMO, commInfoGet=commInfoGet, ltx=ltx, commInfoTable=commInfoTable, commInfoEntry=commInfoEntry, groupInfoEntry=groupInfoEntry, miscInfoLRPName=miscInfoLRPName, roverTGiant=roverTGiant, miscInfoGateway=miscInfoGateway, hostInfoEntry=hostInfoEntry, miscInfoPortMask=miscInfoPortMask, miscInfoSNMPPort=miscInfoSNMPPort)
