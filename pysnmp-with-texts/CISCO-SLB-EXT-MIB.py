#
# PySNMP MIB module CISCO-SLB-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SLB-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:56:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
slbServerFarmName, SlbRealServerState, SlbConnectionState, slbStatsTableEntry, slbVirtualServerTableEntry, slbServerFarmTableEntry, SlbPasswordString, SlbServerString, slbEntity = mibBuilder.importSymbols("CISCO-SLB-MIB", "slbServerFarmName", "SlbRealServerState", "SlbConnectionState", "slbStatsTableEntry", "slbVirtualServerTableEntry", "slbServerFarmTableEntry", "SlbPasswordString", "SlbServerString", "slbEntity")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoPort, CiscoIpProtocol, CiscoHTTPResponseStatusCode = mibBuilder.importSymbols("CISCO-TC", "CiscoPort", "CiscoIpProtocol", "CiscoHTTPResponseStatusCode")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, Counter32, Counter64, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, iso, Bits, Unsigned32, MibIdentifier, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "Counter64", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "iso", "Bits", "Unsigned32", "MibIdentifier", "ObjectIdentity", "TimeTicks")
DateAndTime, TimeInterval, TruthValue, TextualConvention, StorageType, DisplayString, RowStatus, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TimeInterval", "TruthValue", "TextualConvention", "StorageType", "DisplayString", "RowStatus", "TimeStamp")
ciscoSlbExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 254))
ciscoSlbExtMIB.setRevisions(('2008-03-13 00:00', '2006-01-20 00:00', '2005-02-24 10:00', '2002-08-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSlbExtMIB.setRevisionsDescriptions(('- Added mib object cslbxServerFarmState to cslbxServerFarmTable - Added cslbxServerFarmStatsTable - Added OBJECT-GROUP cslbxServerFarmStatsGroup - Deprecated OBJECT-GROUP cslbxServerFarmsExtGroup - Added OBJECT-GROUP cslbxServerFarmsExtGroupRev1 - Deprecated MODULE-COMPLIANCE cslbxMIBComplianceRev2 - Added MODULE-COMPLIANCE cslbxMIBComplianceRev3.', '- Following TEXTUAL CONVENTIONS are modified: SlbStickyType : New enums(value 5-7) added. SlbFunctionNameString : Size change from 0..31 to 0..255 - Following tables are moved to CISCO-SLB-HEALTH-MON-MIB cslbxProbeCfgTable cslbxDnsProbeIpTable cslbxProbeHeaderCfgTable cslbxProbeExpectStatusCfgTable - SlbProbeType TEXTUAL-CONVENTION is moved to CISCO-SLB-HEALTH-MON-MIB - Added UNITS clause for the following objects cslbxServerFarmInbandResetTimer cslbxHttpReturnCodeResetTimer cslbxHttpReturnCodeResetTimer cslbxVirtualPendingTimer cslbxFtHeartBeatTimer - Added following objects in cslbxServerFarmTable cslbxServerFarmTransparent cslbxServerFarmSlowStart cslbxServerFarmHashHeaderName cslbxServerFarmHashCookieName cslbxServerFarmUrlPatternBegin cslbxServerFarmUrlPatternEnd cslbxServerFarmDescription cslbxServerFarmType - Added following objects in CslbxStatsTable cslbxStatsL4PolicyHCConns cslbxStatsL7PolicyHCConns cslbxStatsDroppedL4PolicyHCConns cslbxStatsDroppedL7PolicyHCConns cslbxStatsNoMatchPolicyHCRejects cslbxStatsNoCfgPolicyHCRejects cslbxStatsAclDenyHCRejects cslbxStatsVerMismatchHCRejects - defined following tables. cslbxSfarmHttpReturnCodeTable.', 'Additional definition to support new SLB features: - Add new objects into cslbxPolicyTable and cslbxVirtualServerTable to support Backup Server feature. - Add new cslbxScriptFileTable, cslbxScriptTaskTable and new objects into cslbxProbeCfgTable to support Scripted Probe feature. - Add new cslbxOwnerTalbe and new object into cslbVirtualServerTable to support Owner feature. - Add new objects into cslbxRuleTable to support the packet counters per SLB policy. - Add new objects into cslbxXmlConfigTable to support additional user access control for the XML server. - Add new objects into cslbxVirtualServerTable and cslbxPolicyTable to support the Reverse Sticky configuration. - Add new object cslbxProbePort to support configuration of service port for a Probe entry. - Add new object cslbxHttpExpressionRequestMethod to support configuration of HTTP request method matching. - Add new object cslbxVirtualMaxConns and cslbxVirtualFlowMode into cslbxVirtualServerTable to support additional flow control for a Virtual Server.', 'Initial version of this MIB module. It is an extension to SLB MIB for Layer 7 policy load balancing features.',))
if mibBuilder.loadTexts: ciscoSlbExtMIB.setLastUpdated('200803130000Z')
if mibBuilder.loadTexts: ciscoSlbExtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSlbExtMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-slb@cisco.com')
if mibBuilder.loadTexts: ciscoSlbExtMIB.setDescription('The extended MIB for managing Server Load Balancing Manager(s). This MIB extends the SLB management functionality in the CISCO-SLB-MIB. The Cisco Content Switching Module (CSM) product is the first SLB product to support this MIB. SLB: Server Load Balancing. Server load balancing provides for the balancing of packets and connections arriving at the SLB device across a number of other devices, such as real servers, firewalls, or caches. A system containing an SLB device typically exhibits higher performance, scalability, and reliability than any of the devices being load balanced. An SLB device determines how to handle incoming frames and connections according to the contents of incoming data and various configuration options. In determining how to handle incoming data, an SLB device may examine the data at any OSI layer, including Layer 7. This MIB includes instrumentation for the manager-side implementation of the Dynamic Feedback Protocol (DFP). A DFP manager uses the DFP protocol to communicate with DFP agents in order to obtain information about the current load and available capacity of devices. Acronyms and terms: SLB Server Load Balancing VIP Virtual Server IP address NAT Network Address Translation SF Serverfarm FT Fault Tolerance SSL Secure Sockets Layer TLS Transport Layer Security')
ciscoSlbExtMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 0))
ciscoSlbExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 1))
cslbxStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1))
cslbxServerFarms = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2))
cslbxClientNatPools = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 3))
cslbxStickyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4))
cslbxMaps = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5))
cslbxServerProbes = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 6))
cslbxPolicies = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7))
cslbxVirtualServers = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8))
cslbxVlans = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9))
cslbxFaultTolerance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10))
cslbxXmlConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 11))
cslbxConnections = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12))
cslbxNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 13))
cslbxOwnerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 14))
cslbxScriptObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 15))
ciscoSlbExtMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 2))
class SlbObjectNameString(TextualConvention, OctetString):
    description = 'The name of an associated SLB object. All SLB object names are in uppercase.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 15)

class SlbFunctionNameString(TextualConvention, OctetString):
    description = "The label name for a section of the executable script. A section of script is a logical container which includes the executable instructions to perform a certain task. The Tool Command Language (Tcl) is one of the well-defined scripting languages. The language is depending on individual implementation of an SLB device. The scripts will be imported into an SLB system as parts of the user's configurations. The purpose of supporting scripting language is to extend the existing functionalities in a particular SLB implementation. The SlbFunctionNameString must only contain these characters: - lowercase character 'a' to 'z'. - uppercase character 'A' to 'Z'. - numeric character '0' to '9'. - the underscore '_' character."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class SlbUrlString(TextualConvention, OctetString):
    description = 'The octet string containing the Uniform Resource Locator (URL) information. It is in human-readable form.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class SlbRegularExpression(TextualConvention, OctetString):
    description = "A regular expression of length 0 to 255. Regular expressions are typically used for matching fields in Layer 7 data streams, such as URLs or Cookies in HTTP. The following syntax is based on the file name matching algorithm commonly employed in UNIX : '*' matches zero or more characters; '?' matches exactly one character; '\\' means escaped character, e.g., '\\*' matches the character '*'; a bracketed range matches any single character from the range, e.g. [0-9] matches '0', '2', and '9', but not 'a'; a leading ^ in a range means don't match any in the range; '+' matches any sequence of one or more characters; '.' matches any single character; All other characters represent themselves. '\\a' matches alert (ASCII 7); '\\b' matches backspace (ASCII 8); '\\f' matches form-feed (ASCII 12); '\\n' matches newline (ASCII 10); '\\r' matches carriage return (ASCII 13); '\\t' matches tab (ASCII 9); '\\v' matches vertical tab (ASCII 11); '\\0' matches null (ASCII 0); '\\\\' matches backslash; '\\x##' matches the ASCII character whose hexadecimal representation is ##."
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class SlbFailAction(TextualConvention, Integer32):
    description = "The current action setting for a server farm when a real server has failed. 'noAction' : No additional action besides taking the server out of service. 'purgeConns' : Purge all connections to this real server. 'reassignConns' : Re-assign all connections to another real server. 'undefined' : New action not yet defined."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noAction", 1), ("purgeConns", 2), ("reassignConns", 3), ("undefined", 4))

class SlbIpAdvertise(TextualConvention, Integer32):
    description = "The current advertise option for the virtual server IP address. 'alwaysAdvertise' : Advertise VIP if configured. 'activeAdvertise' : Advertise VIP only if virtual server is active. 'undefined' : New type not yet defined."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("alwaysAdvertise", 1), ("activeAdvertise", 2), ("undefined", 3))

class SlbStickyType(TextualConvention, Integer32):
    description = "The current type of the Sticky Group. A Sticky Group is a list of rules mapping incoming connection parameters, such as source IP address, to specific real servers. If an incoming connection matches a rule in a Sticky Group, the SLB may 'stick' that connection to the real server specified in the matching rule. 'srcIpSticky' : Stick based on source IP address. 'httpCookieSticky' : Stick based on HTTP Cookie name. 'sslSticky' : Stick based on SSL Session ID. 'undefined' : New sticky type not yet defined. 'destIpSticky' : Stick based on the destination IP address. 'srcDestISticky' : Stick based on the Source and Destionation IP Address. 'httpHeaderSticky' : Stick based on the HTTP Header Name."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("srcIpSticky", 1), ("httpCookieSticky", 2), ("sslSticky", 3), ("undefined", 4), ("destIpSticky", 5), ("srcDestSticky", 6), ("httpHeaderSticky", 7))

class SlbMapType(TextualConvention, Integer32):
    description = "The current type of the Map group. A Map group contains a list of rules matching information in the connection with the HTTP URL, HTTP Cookie, HTTP Header, or HTTP Return Code criteria. 'notCfgMap' : Map type has not been specified. 'urlMap' : HTTP URL matching group. 'cookieMap' : HTTP Cookie matching group. 'headerMap' : HTTP Header field matching group. 'returnCodeMap' : HTTP return code parsing group. 'undefined' : New matching type not yet defined."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("notCfgMap", 1), ("urlMap", 2), ("cookieMap", 3), ("headerMap", 4), ("returnCodeMap", 5), ("undefined", 6))

class SlbReplicationMode(TextualConvention, Integer32):
    description = "The current replicating option for the virtual server. 'replNone' : Do not replicate any information. 'replAll' : Replicate connection and sticky information. 'replConnection' : Replicate only the connection information. 'replStickyData' : Replicate only the sticky information."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("replNone", 1), ("replAll", 2), ("replConnection", 3), ("replStickyData", 4))

class SlbProbeAction(TextualConvention, Integer32):
    description = "The current action setting for a probing condition or monitoring condition such as the HTTP return code. 'noAction' : No action. 'logAction' : Logging the event. 'removeAction' : Removing the service. 'countAction' : Counting and logging the event. 'undefined' : New action not yet defined."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("noAction", 1), ("logAction", 2), ("removeAction", 3), ("countAction", 4), ("undefined", 5))

class SlbVlanType(TextualConvention, Integer32):
    description = "Each configured SLB VLAN has one of the following types : 'clientVlan' : Client side VLAN interface. 'serverVlan' : Server side VLAN interface. 'ftVlan' : Fault Tolerance VLAN interface."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("clientVlan", 1), ("serverVlan", 2), ("ftVlan", 3))

class SlbFtState(TextualConvention, Integer32):
    description = "The current Fault Tolerance state of the SLB entity. 'notConfigFT' : Was not configured with FT. 'initializingFT' : Initializing Fault Tolerance. 'activeFT' : Active FT peer. 'standbyFT' : Standby FT peer."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("notConfigFT", 1), ("initializingFT", 2), ("activeFT", 3), ("standbyFT", 4))

class SlbDirectionalMode(TextualConvention, Integer32):
    description = "The flow direction type of the traffic destined to a particular Virtual Server. 'unidirectional' : traffic only in one direction. 'bidirectional' : traffic in both directions. 'defdirectional' : UDP traffic is unidirection, TCP and other traffics are bidirectional."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unidirectional", 1), ("bidirectional", 2), ("defdirectional", 3))

cslbxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1), )
if mibBuilder.loadTexts: cslbxStatsTable.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsTable.setDescription('A table of global SLB statistics for all local SLB entities. It contains addition information to the slbStatsTable.')
cslbxStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1), )
slbStatsTableEntry.registerAugmentions(("CISCO-SLB-EXT-MIB", "cslbxStatsTableEntry"))
cslbxStatsTableEntry.setIndexNames(*slbStatsTableEntry.getIndexNames())
if mibBuilder.loadTexts: cslbxStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsTableEntry.setDescription('A list of additional SLB statistics for a particular SLB entity.')
cslbxStatsServerInitConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 1), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsServerInitConns.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsServerInitConns.setDescription('The total number of connections initiated by the servers.')
cslbxStatsServerInitHCConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 2), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsServerInitHCConns.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsServerInitHCConns.setDescription('The total number of connections initiated by the servers. This is the 64-bit version of cslbxStatsServerInitConns.')
cslbxStatsCurrConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 3), Gauge32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsCurrConnections.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsCurrConnections.setDescription('The number of connections currently still open.')
cslbxStatsCurrServerInitConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 4), Gauge32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsCurrServerInitConns.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsCurrServerInitConns.setDescription('The number of server initiated connections currently still open.')
cslbxStatsFailedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 5), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsFailedConns.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsFailedConns.setDescription('The number of connections that were load balanced to real servers that then failed to respond.')
cslbxStatsFailedServerInitConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 6), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsFailedServerInitConns.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsFailedServerInitConns.setDescription('The number of server initiated connections that failed.')
cslbxStatsL4PolicyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 7), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsL4PolicyConns.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsL4PolicyConns.setDescription('The number of connections made to the virtual servers with only layer 4 configuration.')
cslbxStatsL7PolicyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 8), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsL7PolicyConns.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsL7PolicyConns.setDescription('The number of connections made to the virtual servers with some layer 7 configuration.')
cslbxStatsDroppedL4PolicyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 9), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsDroppedL4PolicyConns.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsDroppedL4PolicyConns.setDescription('The number of connections dropped by virtual servers with only layer 4 configuration.')
cslbxStatsDroppedL7PolicyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 10), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsDroppedL7PolicyConns.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsDroppedL7PolicyConns.setDescription('The number of connections dropped by virtual servers with some layer 7 policy.')
cslbxStatsFtpConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 11), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsFtpConns.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsFtpConns.setDescription('The number of connections made to virtual servers with the FTP service.')
cslbxStatsHttpRedirectConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 12), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsHttpRedirectConns.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsHttpRedirectConns.setDescription('The number of connections made to HTTP redirect servers.')
cslbxStatsDroppedRedirectConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 13), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsDroppedRedirectConns.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsDroppedRedirectConns.setDescription('The number of connections dropped by HTTP redirect servers.')
cslbxStatsNoMatchPolicyRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 14), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsNoMatchPolicyRejects.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsNoMatchPolicyRejects.setDescription('The number of connections rejected because they failed to match any configured policy.')
cslbxStatsNoCfgPolicyRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 15), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsNoCfgPolicyRejects.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsNoCfgPolicyRejects.setDescription('The number of connections rejected because the matching virtual server was not configured with any policy.')
cslbxStatsNoActiveServerRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 16), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsNoActiveServerRejects.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsNoActiveServerRejects.setDescription('The number of connections rejected because the chosen server farm did not have any active servers.')
cslbxStatsAclDenyRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 17), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsAclDenyRejects.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsAclDenyRejects.setDescription('The number of connections rejected because the the matching client access list was configured to deny access.')
cslbxStatsMaxParseLenRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 18), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsMaxParseLenRejects.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsMaxParseLenRejects.setDescription('The number of connections rejected because the length of an HTTP request or response header exceeded the maximum L7 parse length configured for the matching virtual server.')
cslbxStatsBadSslFormatRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 19), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsBadSslFormatRejects.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsBadSslFormatRejects.setDescription('The number of connections rejected because some invalid or unrecognized SSL format was detected.')
cslbxStatsL7ParserErrorRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 20), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsL7ParserErrorRejects.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsL7ParserErrorRejects.setDescription('The number of connections rejected because an error occurred while parsing the connection data at Layer 7.')
cslbxStatsVerMismatchRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 21), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsVerMismatchRejects.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsVerMismatchRejects.setDescription('The number of connections rejected because the Layer 7 configuration was changed while Layer 7 parsing was occurring on the connection.')
cslbxStatsOutOfMemoryRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 22), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsOutOfMemoryRejects.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsOutOfMemoryRejects.setDescription('The number of connections rejected because the SLB module could not allocate the required memory.')
cslbxStatsTimedOutConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 23), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsTimedOutConnections.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsTimedOutConnections.setDescription('The number of connections that were terminated because they were idle longer than the configured idle timeout value.')
cslbxStatsTcpChecksumErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 24), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsTcpChecksumErrorPkts.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsTcpChecksumErrorPkts.setDescription('The accumulated number of TCP packets which have checksum error.')
cslbxStatsIpChecksumErrorPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 25), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsIpChecksumErrorPkts.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsIpChecksumErrorPkts.setDescription('The accumulated number of IP packets which have checksum error.')
cslbxStatsL4PolicyHCConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 26), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsL4PolicyHCConns.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsL4PolicyHCConns.setDescription('The number of connections made to the virtual servers with only layer 4 configuration. This object is a 64-bit version of cslbxStatsL4PolicyConns.')
cslbxStatsL7PolicyHCConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 27), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsL7PolicyHCConns.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsL7PolicyHCConns.setDescription('The number of connections made to the virtual servers with some layer 7 configuration. This object is a 64-bit version of cslbxStatsL7PolicyConns.')
cslbxStatsDroppedL4PolicyHCConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 28), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsDroppedL4PolicyHCConns.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsDroppedL4PolicyHCConns.setDescription('The number of connections dropped by virtual servers with only layer 4 configuration. This object is a 64-bit version of cslbxStatsDroppedL4PolicyConns.')
cslbxStatsDroppedL7PolicyHCConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 29), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsDroppedL7PolicyHCConns.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsDroppedL7PolicyHCConns.setDescription('The number of connections dropped by virtual servers with some layer 7 configuration. This object is a 64-bit version of cslbxStatsDroppedL7PolicyConns.')
cslbxStatsNoMatchPolicyHCRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 30), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsNoMatchPolicyHCRejects.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsNoMatchPolicyHCRejects.setDescription('The number of connections rejected because they failed to match any configured policy. This object is a 64-bit version of cslbxStatsNoMatchPolicyRejects.')
cslbxStatsNoCfgPolicyHCRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 31), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsNoCfgPolicyHCRejects.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsNoCfgPolicyHCRejects.setDescription('The number of connections rejected because the matching virtual server was not configured with any policy. This object is a 64-bit version of cslbxStatsNoCfgPolicyRejects.')
cslbxStatsAclDenyHCRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 32), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsAclDenyHCRejects.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsAclDenyHCRejects.setDescription('The number of connections rejected because the the matching client access list was configured to deny access. This object is a 64-bit version of cslbxStatsAclDenyRejects.')
cslbxStatsVerMismatchHCRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 1, 1, 1, 33), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStatsVerMismatchHCRejects.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsVerMismatchHCRejects.setDescription('The number of connections rejected because the Layer 7 configuration was changed while Layer 7 parsing was occurring on the connection. This object is a 64-bit version of cslbxStatsVerMismatchRejects.')
cslbxServerFarmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1), )
if mibBuilder.loadTexts: cslbxServerFarmTable.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmTable.setDescription('This is a table of server farms, each of which is a group of real servers to be used by SLB for load balancing. It contains additional configurations to the slbSeverFarmTable.')
cslbxServerFarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1), )
slbServerFarmTableEntry.registerAugmentions(("CISCO-SLB-EXT-MIB", "cslbxServerFarmTableEntry"))
cslbxServerFarmTableEntry.setIndexNames(*slbServerFarmTableEntry.getIndexNames())
if mibBuilder.loadTexts: cslbxServerFarmTableEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmTableEntry.setDescription('Additional configuration parameters about a particular server farm served by a particular local SLB entity.')
cslbxServerFarmHashMaskAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1, 1), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxServerFarmHashMaskAddrType.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmHashMaskAddrType.setDescription('The type of address stored in cslbxServerFarmHashMaskAddr.')
cslbxServerFarmHashMaskAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="FFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxServerFarmHashMaskAddr.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmHashMaskAddr.setDescription('The mask value applied to the IP address before performing IP hashing operation.')
cslbxServerFarmClientNatPool = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1, 3), SlbObjectNameString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxServerFarmClientNatPool.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmClientNatPool.setDescription('The name of the current client NAT pool associated with this server farm.')
cslbxServerFarmFailAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1, 4), SlbFailAction().clone('noAction')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxServerFarmFailAction.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmFailAction.setDescription('The current action assigned to this server farm when a server has failed ARP or health probe.')
cslbxServerFarmHttpReturnCodeMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1, 5), SlbObjectNameString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxServerFarmHttpReturnCodeMap.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmHttpReturnCodeMap.setDescription('The name of the HTTP return code checking applied to with this server farm.')
cslbxServerFarmInFailedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1, 6), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxServerFarmInFailedThreshold.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmInFailedThreshold.setDescription('The threshold of failed connections before the inband health check taking a server in this farm out-of-service.')
cslbxServerFarmInbandResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1, 7), TimeInterval()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxServerFarmInbandResetTimer.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmInbandResetTimer.setDescription('The wait time interval before the inband health check reset a failed server to enable state. The value of zero indicates failed state will never reset.')
cslbxServerFarmTransparent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxServerFarmTransparent.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmTransparent.setDescription("This object is used for specifying a transparent server farm. In the transparent mode virtual IP Address to Server IP Address translation does not take place. The value 'true' is used for setting it to transparent mode.")
cslbxServerFarmSlowStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxServerFarmSlowStart.setReference('slbServerFarmPredictor is a coulmnar object in slbServerFarmTable defined in CISCO-SLB-MIB.')
if mibBuilder.loadTexts: cslbxServerFarmSlowStart.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmSlowStart.setDescription("This object specifies that the connections to this serverfarm to be in slow start mode. In an environment that uses weighted least connections load balancing, a real server that is placed in service initially has no connections, and could therefore be assigned so many new connections that it becomes overloaded. To prevent such an overload, the slow start feature controls the number of new connections that are directed to a real server that has just been placed in service. This object is applicable if value of slbServerFarmPredictor is 'leastConns'.")
cslbxServerFarmHashHeaderName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxServerFarmHashHeaderName.setReference('RFC 2616 Hypertext Transfer Protocol -- HTTP/1.1 Section 5.3.')
if mibBuilder.loadTexts: cslbxServerFarmHashHeaderName.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmHashHeaderName.setDescription("This object specifies the HTTP header name. This object is applicable only if the value of slbServerFarmPredictor is 'headerHash'. Following set of Header Name values are supported for this object: Accept Accept-Charset Accept-Encoding Accept-Language Authorization Cache-Control Connection Content-MD5 Expect, From, Host, If-Match Pragma, Referrer, Transfer-Encoding User-Agent, Via.")
cslbxServerFarmHashCookieName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxServerFarmHashCookieName.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmHashCookieName.setDescription("This object is used for configuring the HTTP Cookie Name. This object is applicable only if the value of slbSererFarmPredictor is 'cookieHash'.")
cslbxServerFarmUrlPatternBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxServerFarmUrlPatternBegin.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmUrlPatternBegin.setDescription("The sub-string within the URL string at which to start the hashing operation. The hash result will be used in the server farm with predictor 'urlHash'(slbServerFarmPredictor = 'urlHash'). An empty string indicates hashing should start from the beginning of the URL.")
cslbxServerFarmUrlPatternEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxServerFarmUrlPatternEnd.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmUrlPatternEnd.setDescription("The sub-string within the URL string at which to end the hashing operation. The hash result will be used in the server farm with predictor 'urlHash'(slbServerFarmPredictor = 'urlHash'). An empty string indicates hashing should stop at the end of the URL.")
cslbxServerFarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxServerFarmDescription.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmDescription.setDescription('This object is used for configuring the description of the server farm.')
cslbxServerFarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redirect", 1), ("host", 2))).clone('host')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxServerFarmType.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmType.setDescription("This object identifies the type of the serverfarm. The possible values are : redirect(1): Specifies that this server farm is just used for redirecting traffic to new virtual server equivalent. host (2): Specifies typical server farm offering services. This object cannot be changed when the slbServerFarmRowStatus value is 'active'.")
cslbxServerFarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxServerFarmState.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmState.setDescription('This object identifies the state of the serverfarm. The possible values are : active (1): Specifies that the serverfarm state is active. A serverfarm will be in the active state when atleast one of the realservers configured in this serverfarm is operationaly up and running. inactive(2): Specifies that the serverfarm state is inactive. A serverfarm will be in the inactive state when none of the realservers configured in this serverfarm is operationaly up and running.')
cslbxRedirectSvrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2), )
if mibBuilder.loadTexts: cslbxRedirectSvrTable.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrTable.setDescription('A table of HTTP redirect servers. Entry attributes may be modified regardless of the value of cslbxRedirectSvrState.')
cslbxRedirectSvrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxRedirectSvrFarmName"), (0, "CISCO-SLB-EXT-MIB", "cslbxRedirectSvrName"))
if mibBuilder.loadTexts: cslbxRedirectSvrTableEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrTableEntry.setDescription('Information about a particular HTTP redirect virtual server in a particular server farm served by a particular local SLB entity.')
cslbxRedirectSvrFarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2, 1, 1), SlbServerString())
if mibBuilder.loadTexts: cslbxRedirectSvrFarmName.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrFarmName.setDescription("Redirect Server's server farm name.")
cslbxRedirectSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2, 1, 2), SlbServerString())
if mibBuilder.loadTexts: cslbxRedirectSvrName.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrName.setDescription('The name of the Redirect Server')
cslbxRedirectSvrRelocationStr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2, 1, 3), SlbUrlString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxRedirectSvrRelocationStr.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrRelocationStr.setDescription('The relocation URL string sent in the reply of the Redirect Server.')
cslbxRedirectSvrBackupString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2, 1, 4), SlbUrlString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxRedirectSvrBackupString.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrBackupString.setDescription('The backup string sent in the reply of the Redirect Server when the associated real server is disabled.')
cslbxRedirectSvrRedirectCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2, 1, 5), Unsigned32().clone(302)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxRedirectSvrRedirectCode.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrRedirectCode.setDescription('The HTTP response code sent in the reply by the Redirect Server.')
cslbxRedirectSvrRedirectPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2, 1, 6), CiscoPort().clone(80)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxRedirectSvrRedirectPort.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrRedirectPort.setDescription('The TCP port in the HTTP response sent by the Redirect Server. Instead of the original HTTP port (80), the Redirect Server can tell the client to use a different port (like HTTPS) when connection to the redirected URL destination.')
cslbxRedirectSvrState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2, 1, 7), SlbRealServerState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxRedirectSvrState.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrState.setDescription('The current state of the Redirect Server.')
cslbxRedirectSvrNumberOfConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxRedirectSvrNumberOfConns.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrNumberOfConns.setDescription('The number TCP and UDP connections currently open on this Redirect Server.')
cslbxRedirectSvrMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2, 1, 9), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxRedirectSvrMaxConns.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrMaxConns.setDescription('The maximum number of concurrent open connections the SLB will allow on this Redirect Server.')
cslbxRedirectSvrAdminWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxRedirectSvrAdminWeight.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrAdminWeight.setDescription('The user configured weight of the Redirect Server for the load-balancing algorithms. A weight of zero indicates that no new connections will be assigned to this Redirect Server. Higher weight values indicate to the load-balancing algorithms a higher availability of this Redirect Server to accept more work.')
cslbxRedirectSvrOperWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxRedirectSvrOperWeight.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrOperWeight.setDescription('The actual operating weight of the Redirect Server used by the load-balancing algorithms. This can be adjusted dynamically by DFP. A weight of zero indicates that no new connections will be assigned to this Redirect Server. Higher weight values indicate to the load-balancing algorithms a higher availability of this Redirect Server to accept more work.')
cslbxRedirectSvrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxRedirectSvrMetric.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrMetric.setDescription('The value used by the least connections load-balancing algorithm. It is the number of connections divided by the actual operating weight. New connections will be given to the server with the smaller metric.')
cslbxRedirectSvrTotalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxRedirectSvrTotalConns.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrTotalConns.setDescription('The total number of connections assigned to this Redirect Server since this server was configured.')
cslbxRedirectSvrHCTotalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxRedirectSvrHCTotalConns.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrHCTotalConns.setDescription('The total number of connections assigned to this Redirect Server since this server was configured. This is the 64-bit version of cslbxRedirectSvrTotalConnections.')
cslbxRedirectSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 2, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxRedirectSvrRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxRedirectSvrRowStatus.setDescription('The object used by a management station to create or delete the row entry in cslbxRedirectSvrTable following the RowStatus textual convention.')
cslbxServerFarmProbeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 3), )
if mibBuilder.loadTexts: cslbxServerFarmProbeTable.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmProbeTable.setDescription('This is a table of probes in the server farms.')
cslbxServerFarmProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxServerFarmProbeFarmName"), (0, "CISCO-SLB-EXT-MIB", "cslbxServerFarmProbeProbeName"))
if mibBuilder.loadTexts: cslbxServerFarmProbeTableEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmProbeTableEntry.setDescription('Information about a particular probe associated with a particular server farm, served by a particular local SLB entity.')
cslbxServerFarmProbeFarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 3, 1, 1), SlbServerString())
if mibBuilder.loadTexts: cslbxServerFarmProbeFarmName.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmProbeFarmName.setDescription('The name the server farm.')
cslbxServerFarmProbeProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 3, 1, 2), SlbServerString())
if mibBuilder.loadTexts: cslbxServerFarmProbeProbeName.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmProbeProbeName.setDescription('The name of probe.')
cslbxServerFarmProbeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxServerFarmProbeRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmProbeRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cslbxServerFarmProbeTable following the RowStatus textual convention.')
cslbxSfarmHttpReturnCodeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 4), )
if mibBuilder.loadTexts: cslbxSfarmHttpReturnCodeTable.setStatus('current')
if mibBuilder.loadTexts: cslbxSfarmHttpReturnCodeTable.setDescription('This table contains the objects that are related to HTTP return code checking in a server farm.')
cslbxSfarmHttpReturnCodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-MIB", "slbServerFarmName"), (0, "CISCO-SLB-EXT-MIB", "cslbxSfarmHttpRetCodeMinValue"))
if mibBuilder.loadTexts: cslbxSfarmHttpReturnCodeEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxSfarmHttpReturnCodeEntry.setDescription('Information about HTTP return code checking for each server farm. The entry contains information on HTTP Retur Code range, Reset Timer and thresholds for taking actions.')
cslbxSfarmHttpRetCodeMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 4, 1, 1), CiscoHTTPResponseStatusCode())
if mibBuilder.loadTexts: cslbxSfarmHttpRetCodeMinValue.setReference('RFC 2616 Section 6.1.1 Status Code and Reason Phrase.')
if mibBuilder.loadTexts: cslbxSfarmHttpRetCodeMinValue.setStatus('current')
if mibBuilder.loadTexts: cslbxSfarmHttpRetCodeMinValue.setDescription('This object is used for configuring the minimum value for HTTP return code checking. When HTTP return code checking is configured, the HTTP responses are monitored for all the balanced HTTP connections. By using return code checking, one can ensure that good content is delivered.')
cslbxSfarmHttpRetCodeMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 4, 1, 2), CiscoHTTPResponseStatusCode().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxSfarmHttpRetCodeMaxValue.setReference('RFC 2616 Section 6.1.1 Status Code and Reason Phrase.')
if mibBuilder.loadTexts: cslbxSfarmHttpRetCodeMaxValue.setStatus('current')
if mibBuilder.loadTexts: cslbxSfarmHttpRetCodeMaxValue.setDescription('This object is used for configuring the maximum value for HTTP return error code checking. When HTTP return code checking is configured, the HTTP responses are monitored for all the balanced HTTP connections. By using return code checking, one can ensure that good content is delivered.')
cslbxSfarmHttpRetCodeActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 4, 1, 3), SlbProbeAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxSfarmHttpRetCodeActionType.setStatus('current')
if mibBuilder.loadTexts: cslbxSfarmHttpRetCodeActionType.setDescription("This object defines what actions will be taken if the HTTP return error code checking is done. The value 'countAction' increments the statistics of the number of occurrences of return codes received. The value 'logAction' specifies where syslog messages are sent when a threshold is reached. The value 'removeAction' specifies where the syslog messages are sent when a threshold is reached and the server is removed from the service.")
cslbxSfarmHttpRetCodeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxSfarmHttpRetCodeThreshold.setStatus('current')
if mibBuilder.loadTexts: cslbxSfarmHttpRetCodeThreshold.setDescription("This object is used for configuring the number of return code occurrences before the action specified in cslbxServerFarmRetCodeActionType is taken. This object is applicable only if the value of cslbxServerFarmRetCodeActionType is 'logAction' or 'removeAction'.")
cslbxSfarmHttpRetCodeResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 4, 1, 5), TimeInterval()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxSfarmHttpRetCodeResetTimer.setStatus('current')
if mibBuilder.loadTexts: cslbxSfarmHttpRetCodeResetTimer.setDescription("The wait time interval before the processing can resume. This object is applicable if the value of This object is applicable only if the value of cslbxServerFarmRetCodeActionType is 'logAction' or 'removeAction'.")
cslbxSfarmHttpRetCodeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 4, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxSfarmHttpRetCodeStorageType.setStatus('current')
if mibBuilder.loadTexts: cslbxSfarmHttpRetCodeStorageType.setDescription('The storage type for this conceptual row.')
cslbxSfarmHttpRetCodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxSfarmHttpRetCodeRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxSfarmHttpRetCodeRowStatus.setDescription('The object is used for adding/deleting entries in the table. An entry MUST NOT exist in the active state unless all objects in the entry have an appropriate value, as described in the description clause for each writable object. This object may be modified if the associated instance of this object is equal to active(1), notInService(2), or notReady(3). All other writable objects may be modified if the associated instance of this object is equal to notInService(2) or notReady(3).')
cslbxServerFarmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 5), )
if mibBuilder.loadTexts: cslbxServerFarmStatsTable.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmStatsTable.setDescription('This table contains the statistics of server farms')
cslbxServerFarmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 5, 1), )
slbServerFarmTableEntry.registerAugmentions(("CISCO-SLB-EXT-MIB", "cslbxServerFarmStatsEntry"))
cslbxServerFarmStatsEntry.setIndexNames(*slbServerFarmTableEntry.getIndexNames())
if mibBuilder.loadTexts: cslbxServerFarmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmStatsEntry.setDescription('An entry in cslbxServerFarmStatsTable. Each entry contains statistical information such as current connections, total connections etc.')
cslbxServerFarmTotalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 5, 1, 1), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxServerFarmTotalConns.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmTotalConns.setDescription('The total number of connections loadbalanced to all the real servers associated with this server farm.')
cslbxServerFarmCurrConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 5, 1, 2), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxServerFarmCurrConns.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmCurrConns.setDescription('The total number of active connections loadbalanced to all the real servers associated with this server farm.')
cslbxServerFarmFailedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 5, 1, 3), Counter64()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxServerFarmFailedConns.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmFailedConns.setDescription('The total number of connections failed to all the real servers associated with this server farm. Failure reasons can be Maximum connections reached, Real Server down etc.')
cslbxServerFarmNumOfTimeFailOvers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxServerFarmNumOfTimeFailOvers.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmNumOfTimeFailOvers.setDescription('This object contains the value of the number of times a serverfarm has failed over. The failed over state is specified by the cslbxServerFarmState object with a value of inactive(2).')
cslbxServerFarmNumOfTimeBkInServs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxServerFarmNumOfTimeBkInServs.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmNumOfTimeBkInServs.setDescription('This object contains the value of the number of times a serverfarm has returned back to inservice after failing over. The inservice state is specified by the cslbxServerFarmState object with a value of active(1).')
cslbxNatPoolTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 3, 1), )
if mibBuilder.loadTexts: cslbxNatPoolTable.setStatus('current')
if mibBuilder.loadTexts: cslbxNatPoolTable.setDescription('A table of IP NAT pools.')
cslbxNatPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxNatPoolName"))
if mibBuilder.loadTexts: cslbxNatPoolEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxNatPoolEntry.setDescription('Information about a particular NAT pool served by a particular local SLB entity.')
cslbxNatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 3, 1, 1, 1), SlbServerString())
if mibBuilder.loadTexts: cslbxNatPoolName.setStatus('current')
if mibBuilder.loadTexts: cslbxNatPoolName.setDescription('The name of the NAT pool.')
cslbxNatPoolStartAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 3, 1, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxNatPoolStartAddressType.setStatus('current')
if mibBuilder.loadTexts: cslbxNatPoolStartAddressType.setDescription('The type of address stored in cslbxNatPoolStartAddress.')
cslbxNatPoolStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 3, 1, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxNatPoolStartAddress.setStatus('current')
if mibBuilder.loadTexts: cslbxNatPoolStartAddress.setDescription('The first IP address in this NAT pool.')
cslbxNatPoolEndAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 3, 1, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxNatPoolEndAddressType.setStatus('current')
if mibBuilder.loadTexts: cslbxNatPoolEndAddressType.setDescription('The type of address stored in cslbxNatPoolEndAddress.')
cslbxNatPoolEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 3, 1, 1, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxNatPoolEndAddress.setStatus('current')
if mibBuilder.loadTexts: cslbxNatPoolEndAddress.setDescription('The last IP address in this NAT pool.')
cslbxNatPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 3, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxNatPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxNatPoolRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cslbxNatPoolTable following the RowStatus textual convention.')
cslbxStickyGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 1), )
if mibBuilder.loadTexts: cslbxStickyGroupTable.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyGroupTable.setDescription('A table of Sticky Groups.')
cslbxStickyGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxStickyGroupId"))
if mibBuilder.loadTexts: cslbxStickyGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyGroupEntry.setDescription('Information about a particular Sticky Group served by a particular local SLB entity.')
cslbxStickyGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cslbxStickyGroupId.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyGroupId.setDescription("This Sticky Group's ID.")
cslbxStickyGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 1, 1, 2), SlbStickyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxStickyGroupType.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyGroupType.setDescription("This Sticky Group's type.")
cslbxStickyGroupMaskAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 1, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxStickyGroupMaskAddressType.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyGroupMaskAddressType.setDescription('The type of address stored in cslbxStickyGroupMaskAddress.')
cslbxStickyGroupMaskAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 1, 1, 4), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="FFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxStickyGroupMaskAddress.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyGroupMaskAddress.setDescription("The network mask used with the ipSticky type. The source IP address will be AND'ed with this mask before inserting into the sticky database.")
cslbxStickyGroupCookieName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxStickyGroupCookieName.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyGroupCookieName.setDescription('The HTTP Cookie name used with httpCookieSticky type.')
cslbxStickyGroupStickyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 1, 1, 6), Unsigned32()).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxStickyGroupStickyTimer.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyGroupStickyTimer.setDescription('The length of time a Sticky Group may exist before being automatically removed.')
cslbxStickyGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxStickyGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyGroupRowStatus.setDescription('The row status is used by a management station to create or delete the row entry in cslbxStickyGroupTable following the RowStatus textual convention.')
cslbxStickyGroupHeaderName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxStickyGroupHeaderName.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyGroupHeaderName.setDescription("This object identifies the HTTP Header name. This is applicable only if the value of cslbxStickyGroupType is 'httpHeaderSticky'.")
cslbxStickyGroupTimeoutActiveConn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 1, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxStickyGroupTimeoutActiveConn.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyGroupTimeoutActiveConn.setDescription("This object specifies whether the sticky entries to be timed out if active connections exist once the sticky timer expires. If set to 'true', sticky entries will timeout even if connections exist. If set to 'false' sticky entries will not time out if there exist any active connections.")
cslbxStickyGroupReplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 1, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxStickyGroupReplicate.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyGroupReplicate.setDescription('This object enables/disables sticky replication in a redundant configuration.')
cslbxStickyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 2), )
if mibBuilder.loadTexts: cslbxStickyObjectTable.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyObjectTable.setDescription('Table of existing sticky entries. Sticky entries allow related connections to be sent to the same real server on a per client basis. This table supports the Content Switching Module (CSM) feature which is not supported by the slbStickyObjectTable in the CISCO-SLB-MIB.')
cslbxStickyObjectTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxStickyObjectIndex"))
if mibBuilder.loadTexts: cslbxStickyObjectTableEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyObjectTableEntry.setDescription('Information about a particular sticky entry by a particular local SLB entity.')
cslbxStickyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cslbxStickyObjectIndex.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyObjectIndex.setDescription('The sticky entry index.')
cslbxStickyObjectGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStickyObjectGroupId.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyObjectGroupId.setDescription('The group ID associated with this sticky entry.')
cslbxStickyObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 2, 1, 3), SlbStickyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStickyObjectType.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyObjectType.setDescription('The sticky type of this sticky entry.')
cslbxStickyObjectSourceInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStickyObjectSourceInfo.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyObjectSourceInfo.setDescription('The client IP address or hashed of source data used created this sticky entry.')
cslbxStickyObjectRealAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 2, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStickyObjectRealAddressType.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyObjectRealAddressType.setDescription('The type of address stored in cslbxStickyObjectRealAddress.')
cslbxStickyObjectRealAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 2, 1, 6), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStickyObjectRealAddress.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyObjectRealAddress.setDescription('The real server IP address selected for all clients matched this sticky entry.')
cslbxStickyObjectRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 2, 1, 7), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxStickyObjectRealPort.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyObjectRealPort.setDescription('The port number of the real server associated with this sticky entry.')
cslbxStickyGroupExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 3), )
if mibBuilder.loadTexts: cslbxStickyGroupExtTable.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyGroupExtTable.setDescription('An extension to cslbxStickyGroupTable. This table contains additional objects related to sticky group.')
cslbxStickyGroupExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 3, 1), )
cslbxStickyGroupEntry.registerAugmentions(("CISCO-SLB-EXT-MIB", "cslbxStickyGroupExtEntry"))
cslbxStickyGroupExtEntry.setIndexNames(*cslbxStickyGroupEntry.getIndexNames())
if mibBuilder.loadTexts: cslbxStickyGroupExtEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyGroupExtEntry.setDescription('An entry in this table. Each entry contains offset, value, secondary cookie etc.')
cslbxStickyOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 3, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxStickyOffset.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyOffset.setDescription("This object represents the offset value to specify portion of the cookie/header/SSL-ID to use to 'stick' connections. This object is applicable to following values of cslbxStickyGroupType: 'httpCookieSticky' 'sslSticky' 'httpHeaderSticky'.")
cslbxStickyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 3, 1, 2), Unsigned32()).setUnits('Bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxStickyLength.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyLength.setDescription('This object represents the length of the value specified in cslbxStickyOffset to maintain sticky connections.')
cslbxStickyCookieSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 3, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxStickyCookieSecondary.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyCookieSecondary.setDescription('This object is used for configuring the alternate cookie name appearing in URL string to stick a connection.')
cslbxStickyCookieInsertEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 3, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxStickyCookieInsertEnable.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyCookieInsertEnable.setDescription("This object enables/disables inserting a cookie. The cookie insert feature enables the device to insert a cookie in the 'Set-Cookie' header in the HTTP response.")
cslbxStickyCookieExpiryDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 4, 3, 1, 5), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxStickyCookieExpiryDate.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyCookieExpiryDate.setDescription("This object identifies the valid life time of the cookie. This is the value sent in 'expires=' attribute of 'Set-Cookie' header in the HTTP response.")
cslbxMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 1), )
if mibBuilder.loadTexts: cslbxMapTable.setStatus('current')
if mibBuilder.loadTexts: cslbxMapTable.setDescription('Table of SLB map groups. A SLB map group contains a list of matching criteria.')
cslbxMapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxMapName"))
if mibBuilder.loadTexts: cslbxMapTableEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxMapTableEntry.setDescription('Information about a particular map group, served by a particular local SLB entity.')
cslbxMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 1, 1, 1), SlbServerString())
if mibBuilder.loadTexts: cslbxMapName.setStatus('current')
if mibBuilder.loadTexts: cslbxMapName.setDescription('The name of the map group.')
cslbxMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 1, 1, 2), SlbMapType().clone('notCfgMap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxMapType.setStatus('current')
if mibBuilder.loadTexts: cslbxMapType.setDescription('The type of the map group.')
cslbxMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxMapRowStatus.setDescription('The object used by a management station to create or delete the row entry in cslbxMapTable following the RowStatus textual convention.')
cslbxHttpExpressionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 2), )
if mibBuilder.loadTexts: cslbxHttpExpressionTable.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpExpressionTable.setDescription('Table of HTTP field and regular expressions.')
cslbxHttpExpressionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxHttpExpressionMapName"), (0, "CISCO-SLB-EXT-MIB", "cslbxHttpExpressionIndex"))
if mibBuilder.loadTexts: cslbxHttpExpressionTableEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpExpressionTableEntry.setDescription('Information about a particular HTTP field and the regular expression in a particular map group, served by a particular local SLB entity.')
cslbxHttpExpressionMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 2, 1, 1), SlbServerString())
if mibBuilder.loadTexts: cslbxHttpExpressionMapName.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpExpressionMapName.setDescription("The name of the Map containing this entry. This entry is only valid for cslbxMapType of: 'urlMap', 'cookieMap', or 'headerMap'.")
cslbxHttpExpressionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cslbxHttpExpressionIndex.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpExpressionIndex.setDescription('The index of this item within a Map group.')
cslbxHttpExpressionFieldName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 2, 1, 3), SlbRegularExpression()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxHttpExpressionFieldName.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpExpressionFieldName.setDescription("The HTTP Cookie Name or Header Name. The SLB device will parse the HTTP packets for this field name. This object is not used for the Map type of 'urlMap', since there is only one HTTP URL field in a HTTP request.")
cslbxHttpExpressionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 2, 1, 4), SlbRegularExpression()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxHttpExpressionValue.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpExpressionValue.setDescription('The regular expression to match against a HTTP URL, Cookie, or Header field.')
cslbxHttpExpressionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxHttpExpressionRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpExpressionRowStatus.setDescription('The object used by a management station to create or delete the row entry in cslbxHttpExpressionTable following the RowStatus textual convention.')
cslbxHttpExpressionRequestMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 2, 1, 6), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxHttpExpressionRequestMethod.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpExpressionRequestMethod.setDescription("The expression string to match against the HTTP request method type string. Some of the standard request methods are: 'GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'TRACE', 'CONNECT', 'OPTIONS'.")
cslbxHttpReturnCodeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 3), )
if mibBuilder.loadTexts: cslbxHttpReturnCodeTable.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpReturnCodeTable.setDescription('Table of rules associating ReturnCode maps and intervals of HTTP return codes with actions to perform when particular HTTP return codes are seen in the data stream.')
cslbxHttpReturnCodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 3, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxHttpReturnCodeMapName"), (0, "CISCO-SLB-EXT-MIB", "cslbxHttpReturnCodeMinValue"))
if mibBuilder.loadTexts: cslbxHttpReturnCodeEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpReturnCodeEntry.setDescription("Information about the particular action rule in a particular map of type 'returnCodeMap' dealing with a particular range of HTTP return codes, served by a particular local SLB entity.")
cslbxHttpReturnCodeMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 3, 1, 1), SlbServerString())
if mibBuilder.loadTexts: cslbxHttpReturnCodeMapName.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpReturnCodeMapName.setDescription('The name of the ReturnCode map containing this action rule.')
cslbxHttpReturnCodeMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cslbxHttpReturnCodeMinValue.setReference('RFC 2616 Section 6.1.1 Status Code and Reason Phrase.')
if mibBuilder.loadTexts: cslbxHttpReturnCodeMinValue.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpReturnCodeMinValue.setDescription('The minimum HTTP return code that this rule matches.')
cslbxHttpReturnCodeMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 3, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxHttpReturnCodeMaxValue.setReference('RFC 2616 Section 6.1.1 Status Code and Reason Phrase.')
if mibBuilder.loadTexts: cslbxHttpReturnCodeMaxValue.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpReturnCodeMaxValue.setDescription('The maximum HTTP return code that this rule matches.')
cslbxHttpReturnCodeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 3, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxHttpReturnCodeThreshold.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpReturnCodeThreshold.setDescription('The number of times the return code seen before the action taking place. Once HTTP return codes between cslbxHttpReturnCodeMinValue and cslbxHttpReturnCodeMaxValue, inclusive, have been seen at least cslbxHttpReturnCodeThreshold times, the action specified by cslbxHttpReturnCodeType is taken. The value of zero indicates this object has not been set.')
cslbxHttpReturnCodeResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 3, 1, 5), TimeInterval()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxHttpReturnCodeResetTimer.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpReturnCodeResetTimer.setDescription('The time interval before resetting the state of the real server. Once the action associated with this rule is taken, the associated real server state is reset after cslbxHttpReturnCodeResetTimer. The value of zero indicates the state will never reset.')
cslbxHttpReturnCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 3, 1, 6), SlbProbeAction().clone('noAction')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxHttpReturnCodeType.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpReturnCodeType.setDescription('The action associated with this rule.')
cslbxHttpReturnCodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 5, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxHttpReturnCodeRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxHttpReturnCodeRowStatus.setDescription('The object used by a management station to create or delete the row entry in cslbxHttpReturnCodeTable following the RowStatus textual convention.')
cslbxPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7, 1), )
if mibBuilder.loadTexts: cslbxPolicyTable.setStatus('current')
if mibBuilder.loadTexts: cslbxPolicyTable.setDescription('Table of load balancing policies.')
cslbxPolicyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxPolicyName"))
if mibBuilder.loadTexts: cslbxPolicyTableEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxPolicyTableEntry.setDescription('Information about a particular policy configured on a particular local SLB entity.')
cslbxPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7, 1, 1, 1), SlbServerString())
if mibBuilder.loadTexts: cslbxPolicyName.setStatus('current')
if mibBuilder.loadTexts: cslbxPolicyName.setDescription('The name of the policy.')
cslbxPolicyClientGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxPolicyClientGroupNumber.setStatus('current')
if mibBuilder.loadTexts: cslbxPolicyClientGroupNumber.setDescription('The group number of the associated client access list.')
cslbxPolicyClientGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7, 1, 1, 3), SlbObjectNameString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxPolicyClientGroupName.setStatus('current')
if mibBuilder.loadTexts: cslbxPolicyClientGroupName.setDescription('The group name of the associated client access list.')
cslbxPolicyUrlMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7, 1, 1, 4), SlbObjectNameString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxPolicyUrlMap.setStatus('current')
if mibBuilder.loadTexts: cslbxPolicyUrlMap.setDescription('The name of the associated URL map.')
cslbxPolicyCookieMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7, 1, 1, 5), SlbObjectNameString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxPolicyCookieMap.setStatus('current')
if mibBuilder.loadTexts: cslbxPolicyCookieMap.setDescription('The name of the associated Cookie map.')
cslbxPolicyGenericHeaderMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7, 1, 1, 6), SlbObjectNameString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxPolicyGenericHeaderMap.setStatus('current')
if mibBuilder.loadTexts: cslbxPolicyGenericHeaderMap.setDescription('The name of the associated generic HTTP header map.')
cslbxPolicyStickyGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxPolicyStickyGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxPolicyStickyGroup.setDescription("The number of the associated sticky group. The value '0' indicates no sticky group is associated.")
cslbxPolicyDscpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxPolicyDscpEnabled.setStatus('current')
if mibBuilder.loadTexts: cslbxPolicyDscpEnabled.setDescription('The current setting for enabling TOS byte stamping. If this is set, the TCP TOS (type-of-service) byte of traffic matching this policy will be stamped with the cslbxPolicyDscpStamping value.')
cslbxPolicyDscpStamping = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxPolicyDscpStamping.setStatus('current')
if mibBuilder.loadTexts: cslbxPolicyDscpStamping.setDescription('The value to be stamped over the TCP TOS (type-of-service) byte.')
cslbxPolicyFarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7, 1, 1, 10), SlbObjectNameString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxPolicyFarmName.setStatus('current')
if mibBuilder.loadTexts: cslbxPolicyFarmName.setDescription('The server farm to which a connection matching this policy may be assigned.')
cslbxPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxPolicyRowStatus.setDescription('The object used by a management station to create or delete the row entry in cslbxPolicyTable following the RowStatus textual convention.')
cslbxPolicyBackupFarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7, 1, 1, 12), SlbObjectNameString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxPolicyBackupFarmName.setStatus('current')
if mibBuilder.loadTexts: cslbxPolicyBackupFarmName.setDescription('The backup server farm to be used in case the primary server farm has no active server.')
cslbxPolicyBkFarmStickyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxPolicyBkFarmStickyEnabled.setStatus('current')
if mibBuilder.loadTexts: cslbxPolicyBkFarmStickyEnabled.setDescription('The current setting for enabling sticky option on the backup server farm.')
cslbxPolicyReverseStickyGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 7, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxPolicyReverseStickyGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxPolicyReverseStickyGroup.setDescription('The group number of the sticky group to be used when inserting reverse sticky entry. The value of zero indicates that reverse sticky is not enabled.')
cslbxVirtualServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1), )
if mibBuilder.loadTexts: cslbxVirtualServerTable.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualServerTable.setDescription('Table of virtual servers. It contains additional configurations for the slbVirtualServerTable.')
cslbxVirtualServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1), )
slbVirtualServerTableEntry.registerAugmentions(("CISCO-SLB-EXT-MIB", "cslbxVirtualServerTableEntry"))
cslbxVirtualServerTableEntry.setIndexNames(*slbVirtualServerTableEntry.getIndexNames())
if mibBuilder.loadTexts: cslbxVirtualServerTableEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualServerTableEntry.setDescription('Additional configuration information about a particular virtual server served by a particular local SLB entity.')
cslbxVirtualAdvertiseOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1, 1), SlbIpAdvertise().clone('alwaysAdvertise')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVirtualAdvertiseOption.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualAdvertiseOption.setDescription('The advertise option for the virtual IP address. This value and the cslbxVirtualAdvertise value will determine whether and when to add the virtual IP address into the static route table.')
cslbxVirtualVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVirtualVlanId.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualVlanId.setDescription('The VLAN ID associated with the virtual server. Only traffic from this VLAN may match the virtual server. By default (value of zero), a virtual server may match traffic from any VLAN.')
cslbxVirtualReplicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1, 3), SlbReplicationMode().clone('replNone')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVirtualReplicationMode.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualReplicationMode.setDescription('Specifies which information will be replicated from the active device to a standby device in a fault tolerant configuration.')
cslbxVirtualPendingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1, 4), TimeInterval().clone(3000)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVirtualPendingTimer.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualPendingTimer.setDescription('The length of time before a connection in the pending state gets torn down.')
cslbxVirtualL7MaxParseLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1, 5), Unsigned32().clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVirtualL7MaxParseLength.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualL7MaxParseLength.setDescription('The maximum number of characters to be parsed for Layer 7 (application level) specific information. If HTTP processing is required on an HTTP request or response with HTTP header length greater than cslbxVirtualL7MaxParseLength, the connection will be rejected and reset.')
cslbxVirtualHttpPersistenceSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVirtualHttpPersistenceSlb.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualHttpPersistenceSlb.setDescription("The setting for load balancing each request in a HTTP 1.1 persistence connection. If set to 'true', the SLB device may direct successive HTTP requests in the same TCP connection to different destinations.")
cslbxVirtualURLHashBeginString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1, 7), SlbRegularExpression()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVirtualURLHashBeginString.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualURLHashBeginString.setDescription("The sub-string within the URL string at which to start the hashing operation. The hash result will be used in the server farm with predictor 'urlHash'. An empty string indicates hashing should begin at the beginning of the URL.")
cslbxVirtualURLHashEndString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1, 8), SlbRegularExpression()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVirtualURLHashEndString.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualURLHashEndString.setDescription("The sub-string within the URL string at which to end the hashing operation. The hash result will be used in the server farm with predictor 'urlHash'. An empty string indicates hashing should end at the end of the URL.")
cslbxVirtualMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVirtualMaxConns.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualMaxConns.setDescription('The maximum number of connections can be concurrently opened to this virtual server. The value of zero indicates that there is no upper limit of connections to this virtual server.')
cslbxVirtualOwnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1, 10), SlbObjectNameString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVirtualOwnerName.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualOwnerName.setDescription('The name of the associated Owner.')
cslbxVirtualFlowMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1, 11), SlbDirectionalMode().clone('defdirectional')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVirtualFlowMode.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualFlowMode.setDescription('The direction of the traffic flowing through the SLB device.')
cslbxVirtualSSLStickyOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVirtualSSLStickyOffset.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualSSLStickyOffset.setDescription('The number of bytes offset into the SSL session ID where the sticky data started.')
cslbxVirtualSSLStickyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)).clone(32)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVirtualSSLStickyLength.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualSSLStickyLength.setDescription('The number of bytes of SSL session ID to be used as sticky data.')
cslbxVirtualReverseStickyGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVirtualReverseStickyGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualReverseStickyGroup.setDescription('The group number of the sticky group to be used when inserting reverse sticky entry. The value of zero indicates that reverse sticky is not enabled.')
cslbxVirtualBackupFarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1, 15), SlbObjectNameString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVirtualBackupFarmName.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualBackupFarmName.setDescription('The backup server farm to be used in case the primary server farm has no active server.')
cslbxVirtualBkFarmStickyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVirtualBkFarmStickyEnabled.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualBkFarmStickyEnabled.setDescription('The current setting for enabling sticky option on the backup server farm.')
cslbxRuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 2), )
if mibBuilder.loadTexts: cslbxRuleTable.setStatus('current')
if mibBuilder.loadTexts: cslbxRuleTable.setDescription('This table provides the function to apply the policies to the virtual servers. Using different policies, the SLB can direct traffic matching different patterns to different server farms.')
cslbxRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 2, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxRuleVirtualServerName"), (0, "CISCO-SLB-EXT-MIB", "cslbxRulePolicyName"))
if mibBuilder.loadTexts: cslbxRuleEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxRuleEntry.setDescription('This entry links one SLB policy to a virtual server. If the status of associated cslbxRuleVirtualServerName or the status of associated cslbxRulePolicyName is not active, the status of this entry cannot be active.')
cslbxRuleVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 2, 1, 1), SlbServerString())
if mibBuilder.loadTexts: cslbxRuleVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: cslbxRuleVirtualServerName.setDescription('The name of the associated virtual server.')
cslbxRulePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 2, 1, 2), SlbServerString())
if mibBuilder.loadTexts: cslbxRulePolicyName.setStatus('current')
if mibBuilder.loadTexts: cslbxRulePolicyName.setDescription('The name of the associated SLB policy.')
cslbxRuleCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxRuleCurrentConnections.setStatus('current')
if mibBuilder.loadTexts: cslbxRuleCurrentConnections.setDescription('The current number of open connections that matched this SLB policy.')
cslbxRuleTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxRuleTotalConnections.setStatus('current')
if mibBuilder.loadTexts: cslbxRuleTotalConnections.setDescription('The total number of connections that ever matched this SLB policy.')
cslbxRuleHCTotalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxRuleHCTotalConnections.setStatus('current')
if mibBuilder.loadTexts: cslbxRuleHCTotalConnections.setDescription('The total number of connections that ever matched this SLB policy. This is the 64-bit version of cslbxRuleTotalConnections.')
cslbxRuleTotalClientPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxRuleTotalClientPackets.setStatus('current')
if mibBuilder.loadTexts: cslbxRuleTotalClientPackets.setDescription('The total number of packets ever sent by the client to the server on a connection that matched this SLB policy.')
cslbxRuleHCTotalClientPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxRuleHCTotalClientPackets.setStatus('current')
if mibBuilder.loadTexts: cslbxRuleHCTotalClientPackets.setDescription('The total number of packets ever sent by the client to the server on a connection that matched this SLB policy. This is the 64-bit version of cslbxRuleTotalClientPackets.')
cslbxRuleTotalServerPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxRuleTotalServerPackets.setStatus('current')
if mibBuilder.loadTexts: cslbxRuleTotalServerPackets.setDescription('The total number of packets ever sent by the server to the client on a connection that matched this SLB policy.')
cslbxRuleHCTotalServerPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxRuleHCTotalServerPackets.setStatus('current')
if mibBuilder.loadTexts: cslbxRuleHCTotalServerPackets.setDescription('The total number of packets ever sent by the server to the client on a connection that matched this SLB policy. This is the 64-bit version of cslbxRuleTotalServerPackets.')
cslbxRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxRuleRowStatus.setDescription('The object used by a management station to create or delete the row entry in cslbxRuleTable following the RowStatus textual convention.')
cslbxRuleTotalClientOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 2, 1, 11), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxRuleTotalClientOctets.setStatus('current')
if mibBuilder.loadTexts: cslbxRuleTotalClientOctets.setDescription('The total number of octets ever sent by the client to the server on a connection that matched this SLB policy.')
cslbxRuleHCTotalClientOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 2, 1, 12), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxRuleHCTotalClientOctets.setStatus('current')
if mibBuilder.loadTexts: cslbxRuleHCTotalClientOctets.setDescription('The total number of octets ever sent by the client to the server on a connection that matched this SLB policy. This is the 64-bit version of cslbxRuleTotalClientOctets.')
cslbxRuleTotalServerOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 2, 1, 13), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxRuleTotalServerOctets.setStatus('current')
if mibBuilder.loadTexts: cslbxRuleTotalServerOctets.setDescription('The total number of octets ever sent by the server to the client on a connection that matched this SLB policy.')
cslbxRuleHCTotalServerOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 8, 2, 1, 14), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxRuleHCTotalServerOctets.setStatus('current')
if mibBuilder.loadTexts: cslbxRuleHCTotalServerOctets.setDescription('The total number of octets ever sent by the server to the client on a connection that matched this SLB policy. This is the 64-bit version of cslbxRuleTotalServerOctets.')
cslbxVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 1), )
if mibBuilder.loadTexts: cslbxVlanTable.setStatus('current')
if mibBuilder.loadTexts: cslbxVlanTable.setDescription('This table provides the configuration of VLANs configured on the SLB.')
cslbxVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxVlanId"))
if mibBuilder.loadTexts: cslbxVlanEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxVlanEntry.setDescription('This entry is for configuring the VLAN on the SLB device.')
cslbxVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cslbxVlanId.setStatus('current')
if mibBuilder.loadTexts: cslbxVlanId.setDescription('The 802.1q VLAN ID of this VLAN.')
cslbxVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 1, 1, 2), SlbVlanType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVlanType.setStatus('current')
if mibBuilder.loadTexts: cslbxVlanType.setDescription('The type of this VLAN.')
cslbxVlanAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 1, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVlanAddressType.setStatus('current')
if mibBuilder.loadTexts: cslbxVlanAddressType.setDescription('The type of address stored in cslbxVlanAddress.')
cslbxVlanAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 1, 1, 4), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVlanAddress.setStatus('current')
if mibBuilder.loadTexts: cslbxVlanAddress.setDescription('The IP address of this VLAN interface.')
cslbxVlanMaskAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 1, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVlanMaskAddressType.setStatus('current')
if mibBuilder.loadTexts: cslbxVlanMaskAddressType.setDescription('The type of address stored in cslbxVlanMaskAddress.')
cslbxVlanMaskAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 1, 1, 6), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVlanMaskAddress.setStatus('current')
if mibBuilder.loadTexts: cslbxVlanMaskAddress.setDescription('The network mask for this VLAN interface.')
cslbxVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxVlanRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cslbxVlanTable following the RowStatus textual convention.')
cslbxAliasAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 2), )
if mibBuilder.loadTexts: cslbxAliasAddrTable.setStatus('current')
if mibBuilder.loadTexts: cslbxAliasAddrTable.setDescription('This table provides the configuration of alias IP addresses on the SLB device. The SLB device will respond to an ARP request for alias IP addresses if the ARP request arrives on the configured VLAN. A given VLAN may be associated with multiple alias IP addresses.')
cslbxAliasAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 2, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxAliasAddrVlanId"), (0, "CISCO-SLB-EXT-MIB", "cslbxAliasAddrAddressType"), (0, "CISCO-SLB-EXT-MIB", "cslbxAliasAddrAddress"))
if mibBuilder.loadTexts: cslbxAliasAddrEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxAliasAddrEntry.setDescription('This entry is for configuring an alias IP address on the SLB device.')
cslbxAliasAddrVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cslbxAliasAddrVlanId.setStatus('current')
if mibBuilder.loadTexts: cslbxAliasAddrVlanId.setDescription('The VLAN ID associated with this alias address.')
cslbxAliasAddrAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cslbxAliasAddrAddressType.setStatus('current')
if mibBuilder.loadTexts: cslbxAliasAddrAddressType.setDescription('The type of address stored in cslbxAliasAddrAddress.')
cslbxAliasAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 2, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: cslbxAliasAddrAddress.setStatus('current')
if mibBuilder.loadTexts: cslbxAliasAddrAddress.setDescription('The alias IP address itself.')
cslbxAliasAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxAliasAddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxAliasAddrRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cslbxAliasAddrTable following the RowStatus textual convention.')
cslbxStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 3), )
if mibBuilder.loadTexts: cslbxStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: cslbxStaticRouteTable.setDescription('This table provides the configuration of static routes on the SLB device.')
cslbxStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 3, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxStaticRouteVlanId"), (0, "CISCO-SLB-EXT-MIB", "cslbxStaticRouteSubnetAddrType"), (0, "CISCO-SLB-EXT-MIB", "cslbxStaticRouteSubnetAddr"), (0, "CISCO-SLB-EXT-MIB", "cslbxStaticRouteMaskAddrType"), (0, "CISCO-SLB-EXT-MIB", "cslbxStaticRouteMaskAddr"), (0, "CISCO-SLB-EXT-MIB", "cslbxStaticRouteGatewayAddrType"), (0, "CISCO-SLB-EXT-MIB", "cslbxStaticRouteGatewayAddr"))
if mibBuilder.loadTexts: cslbxStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxStaticRouteEntry.setDescription('This entry is for configuring the static route used by the SLB device. The SLB device will accept multiple destination gateways for the same route. The SLB should able to pick an active gateway for a given route. In some case, the SLB device can load-balancing among the gateways of the same route.')
cslbxStaticRouteVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cslbxStaticRouteVlanId.setStatus('current')
if mibBuilder.loadTexts: cslbxStaticRouteVlanId.setDescription('The VLAN ID associated with this route.')
cslbxStaticRouteSubnetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 3, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cslbxStaticRouteSubnetAddrType.setStatus('current')
if mibBuilder.loadTexts: cslbxStaticRouteSubnetAddrType.setDescription('The type of address stored in cslbxStaticRouteSubnetAddr.')
cslbxStaticRouteSubnetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 3, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: cslbxStaticRouteSubnetAddr.setStatus('current')
if mibBuilder.loadTexts: cslbxStaticRouteSubnetAddr.setDescription('The IP subnet of this route.')
cslbxStaticRouteMaskAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 3, 1, 4), InetAddressType())
if mibBuilder.loadTexts: cslbxStaticRouteMaskAddrType.setStatus('current')
if mibBuilder.loadTexts: cslbxStaticRouteMaskAddrType.setDescription('The type of address stored in cslbxStaticRouteMaskAddr.')
cslbxStaticRouteMaskAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 3, 1, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: cslbxStaticRouteMaskAddr.setStatus('current')
if mibBuilder.loadTexts: cslbxStaticRouteMaskAddr.setDescription('The IP network mask of this route.')
cslbxStaticRouteGatewayAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 3, 1, 6), InetAddressType())
if mibBuilder.loadTexts: cslbxStaticRouteGatewayAddrType.setStatus('current')
if mibBuilder.loadTexts: cslbxStaticRouteGatewayAddrType.setDescription('The type of address stored in cslbxStaticRouteGatewayAddr.')
cslbxStaticRouteGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 3, 1, 7), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: cslbxStaticRouteGatewayAddr.setStatus('current')
if mibBuilder.loadTexts: cslbxStaticRouteGatewayAddr.setDescription('The IP address of the next hop gateway.')
cslbxStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 9, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxStaticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxStaticRouteRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cslbxStaticRouteTable following the RowStatus textual convention.')
cslbxFtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1), )
if mibBuilder.loadTexts: cslbxFtTable.setStatus('current')
if mibBuilder.loadTexts: cslbxFtTable.setDescription('Table of Fault Tolerance settings.')
cslbxFtTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"))
if mibBuilder.loadTexts: cslbxFtTableEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxFtTableEntry.setDescription('Information about Fault Tolerance settings for a particular local SLB entity.')
cslbxFtGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxFtGroupId.setStatus('current')
if mibBuilder.loadTexts: cslbxFtGroupId.setDescription('The Fault Tolerance group number.')
cslbxFtVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxFtVlanId.setStatus('current')
if mibBuilder.loadTexts: cslbxFtVlanId.setDescription('The VLAN ID used by this Fault Tolerance group.')
cslbxFtPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxFtPreempt.setStatus('current')
if mibBuilder.loadTexts: cslbxFtPreempt.setDescription('The preemption setting for this Fault Tolerance group.')
cslbxFtPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 4), Unsigned32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxFtPriority.setStatus('current')
if mibBuilder.loadTexts: cslbxFtPriority.setDescription('The priority value of this SLB device for the Fault Tolerance group.')
cslbxFtHeartBeatTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 5), TimeInterval().clone(100)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxFtHeartBeatTimer.setStatus('current')
if mibBuilder.loadTexts: cslbxFtHeartBeatTimer.setDescription('The time interval of sending the keep-alive messages to the peer in the Fault Tolerance group.')
cslbxFtFailThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 6), Unsigned32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxFtFailThreshold.setStatus('current')
if mibBuilder.loadTexts: cslbxFtFailThreshold.setDescription('The threshold for failing over to the standby SLB. If a standby SLB device has not received a keep-alive message from an active SLB device within cslbxFtFailThreshold consecutive periods of length cslbxFtHeartBeatTimer, the standby will become active.')
cslbxFtState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 7), SlbFtState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtState.setStatus('current')
if mibBuilder.loadTexts: cslbxFtState.setDescription('The current Fault Tolerance state of this SLB device.')
cslbxFtStateChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtStateChangeTime.setStatus('current')
if mibBuilder.loadTexts: cslbxFtStateChangeTime.setDescription('The time of the last change in the current Fault Tolerance state of the SLB device.')
cslbxFtRxHeartBeatMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtRxHeartBeatMsgs.setStatus('current')
if mibBuilder.loadTexts: cslbxFtRxHeartBeatMsgs.setDescription('The number of the keep-alive messages ever received by this SLB device.')
cslbxFtTxHeartBeatMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtTxHeartBeatMsgs.setStatus('current')
if mibBuilder.loadTexts: cslbxFtTxHeartBeatMsgs.setDescription('The number of the keep-alive messages ever sent by this SLB device.')
cslbxFtRxUpdateMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtRxUpdateMsgs.setStatus('current')
if mibBuilder.loadTexts: cslbxFtRxUpdateMsgs.setDescription('The number of the state update (sticky) messages ever received by this SLB device.')
cslbxFtTxUpdateMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtTxUpdateMsgs.setStatus('current')
if mibBuilder.loadTexts: cslbxFtTxUpdateMsgs.setDescription('The number of the state update (sticky) messages ever sent by this SLB device.')
cslbxFtRxCoupMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtRxCoupMsgs.setStatus('current')
if mibBuilder.loadTexts: cslbxFtRxCoupMsgs.setDescription('The number of master override messages ever received by this SLB device.')
cslbxFtTxCoupMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtTxCoupMsgs.setStatus('current')
if mibBuilder.loadTexts: cslbxFtTxCoupMsgs.setDescription('The number of master override messages ever sent by this SLB device.')
cslbxFtRxElectMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtRxElectMsgs.setStatus('current')
if mibBuilder.loadTexts: cslbxFtRxElectMsgs.setDescription('The number of the master election messages ever received by this SLB device.')
cslbxFtTxElectMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtTxElectMsgs.setStatus('current')
if mibBuilder.loadTexts: cslbxFtTxElectMsgs.setDescription('The number of the master election messages ever sent by this SLB device.')
cslbxFtRxConnReplMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtRxConnReplMsgs.setStatus('current')
if mibBuilder.loadTexts: cslbxFtRxConnReplMsgs.setDescription('The number of the connection replication messages ever received by this SLB device.')
cslbxFtTxConnReplMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtTxConnReplMsgs.setStatus('current')
if mibBuilder.loadTexts: cslbxFtTxConnReplMsgs.setDescription('The number of the connection replication messages ever sent by this SLB device.')
cslbxFtRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtRxPackets.setStatus('current')
if mibBuilder.loadTexts: cslbxFtRxPackets.setDescription('The total number of Fault Tolerance messages ever received by this SLB device.')
cslbxFtDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtDropPackets.setStatus('current')
if mibBuilder.loadTexts: cslbxFtDropPackets.setDescription('The total number of Fault Tolerance messages ever dropped by this SLB device.')
cslbxFtDuplPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtDuplPackets.setStatus('current')
if mibBuilder.loadTexts: cslbxFtDuplPackets.setDescription('The total number of duplicate Fault Tolerance messages ever received by this SLB device.')
cslbxFtXsumErrPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtXsumErrPackets.setStatus('current')
if mibBuilder.loadTexts: cslbxFtXsumErrPackets.setDescription('The total number of Fault Tolerance messages with a checksum error ever received by this SLB device.')
cslbxFtBuffErrPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxFtBuffErrPackets.setStatus('current')
if mibBuilder.loadTexts: cslbxFtBuffErrPackets.setDescription('The total number of Fault Tolerance messages dropped by this SLB device due to insufficient buffer memory.')
cslbxFtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 10, 1, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxFtRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxFtRowStatus.setDescription('The row status is used by a management station to create or delete the row entry in cslbxFtTable following the RowStatus textual convention.')
cslbxXmlConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 11, 1), )
if mibBuilder.loadTexts: cslbxXmlConfigTable.setStatus('current')
if mibBuilder.loadTexts: cslbxXmlConfigTable.setDescription('Table of XML interface settings.')
cslbxXmlConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 11, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"))
if mibBuilder.loadTexts: cslbxXmlConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxXmlConfigTableEntry.setDescription('Information about XML interface settings for a particular local SLB entity.')
cslbxXmlConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 11, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxXmlConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: cslbxXmlConfigEnabled.setDescription('The current setting for enabling XML interface. If this is set, the XML configuration is enabled for this SLB instance.')
cslbxXmlConfigVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 11, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxXmlConfigVlanId.setStatus('current')
if mibBuilder.loadTexts: cslbxXmlConfigVlanId.setDescription('The VLAN ID on which to accept requests for configuration via XML. If it set to zero, then connection from any VLAN is acceptable.')
cslbxXmlConfigListeningPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 11, 1, 1, 3), CiscoPort().clone(80)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxXmlConfigListeningPort.setStatus('current')
if mibBuilder.loadTexts: cslbxXmlConfigListeningPort.setDescription('The TCP port on which this SLB instance listens for XML configuration requests.')
cslbxXmlConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 11, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxXmlConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxXmlConfigRowStatus.setDescription('The row status is used by a management station to create or delete the row entry in cslbxXmlConfigTable following the RowStatus textual convention.')
cslbxXmlConfigUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 11, 1, 1, 5), SlbObjectNameString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxXmlConfigUserName.setStatus('current')
if mibBuilder.loadTexts: cslbxXmlConfigUserName.setDescription('The required username for the purpose of validating the XML request.')
cslbxXmlConfigPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 11, 1, 1, 6), SlbPasswordString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxXmlConfigPassword.setStatus('current')
if mibBuilder.loadTexts: cslbxXmlConfigPassword.setDescription('The required password for the purpose of validating the XML request.')
cslbxXmlConfigClientGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 11, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxXmlConfigClientGroupNumber.setStatus('current')
if mibBuilder.loadTexts: cslbxXmlConfigClientGroupNumber.setDescription('The group number of the associated client access list.')
cslbxXmlConfigClientGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 11, 1, 1, 8), SlbObjectNameString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxXmlConfigClientGroupName.setStatus('current')
if mibBuilder.loadTexts: cslbxXmlConfigClientGroupName.setDescription('The group name of the associated client access list.')
cslbxConnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1), )
if mibBuilder.loadTexts: cslbxConnTable.setStatus('current')
if mibBuilder.loadTexts: cslbxConnTable.setDescription('Table of Extended Connections being load-balanced by SLB. This table supports the Content Switching Module (CSM) feature which is not supported by the slbConnectionTable in the CISCO-SLB-MIB.')
cslbxConnTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxConnIndex"))
if mibBuilder.loadTexts: cslbxConnTableEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxConnTableEntry.setDescription('A list of Extended Connections for a particular local SLB entity.')
cslbxConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cslbxConnIndex.setStatus('current')
if mibBuilder.loadTexts: cslbxConnIndex.setDescription('The index to internal structures for the Extended Connection.')
cslbxConnInDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxConnInDestAddrType.setStatus('current')
if mibBuilder.loadTexts: cslbxConnInDestAddrType.setDescription('The type of address stored in cslbxConnInDestAddr.')
cslbxConnInDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxConnInDestAddr.setStatus('current')
if mibBuilder.loadTexts: cslbxConnInDestAddr.setDescription('The destination IP address of the incoming request.')
cslbxConnInDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1, 1, 4), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxConnInDestPort.setStatus('current')
if mibBuilder.loadTexts: cslbxConnInDestPort.setDescription('The destination port of the incoming request.')
cslbxConnInSourceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxConnInSourceAddrType.setStatus('current')
if mibBuilder.loadTexts: cslbxConnInSourceAddrType.setDescription('The type of address stored in cslbxConnInSourceAddr.')
cslbxConnInSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1, 1, 6), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxConnInSourceAddr.setStatus('current')
if mibBuilder.loadTexts: cslbxConnInSourceAddr.setDescription('The source IP address of the incoming request.')
cslbxConnInSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1, 1, 7), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxConnInSourcePort.setStatus('current')
if mibBuilder.loadTexts: cslbxConnInSourcePort.setDescription('The source port of the incoming request.')
cslbxConnProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1, 1, 8), CiscoIpProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxConnProtocol.setStatus('current')
if mibBuilder.loadTexts: cslbxConnProtocol.setDescription('The IP protocol for the Extended Conn.')
cslbxConnOutDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxConnOutDestAddrType.setStatus('current')
if mibBuilder.loadTexts: cslbxConnOutDestAddrType.setDescription('The type of address stored in cslbxConnOutDestIpAddr.')
cslbxConnOutDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1, 1, 10), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxConnOutDestAddr.setStatus('current')
if mibBuilder.loadTexts: cslbxConnOutDestAddr.setDescription('The destination IP address of the load-balanced Extended Conn.')
cslbxConnOutDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1, 1, 11), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxConnOutDestPort.setStatus('current')
if mibBuilder.loadTexts: cslbxConnOutDestPort.setDescription('The destination port of the load-balanced Extended Conn.')
cslbxConnOutSourceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxConnOutSourceAddrType.setStatus('current')
if mibBuilder.loadTexts: cslbxConnOutSourceAddrType.setDescription('The type of address stored in cslbxConnOutSourceAddr.')
cslbxConnOutSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1, 1, 13), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxConnOutSourceAddr.setStatus('current')
if mibBuilder.loadTexts: cslbxConnOutSourceAddr.setDescription('The source IP address of the load-balanced Extended Conn.')
cslbxConnOutSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1, 1, 14), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxConnOutSourcePort.setStatus('current')
if mibBuilder.loadTexts: cslbxConnOutSourcePort.setDescription('The source port of the load-balanced Extended Conn.')
cslbxConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 12, 1, 1, 15), SlbConnectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cslbxConnState.setStatus('current')
if mibBuilder.loadTexts: cslbxConnState.setDescription('The current state of this Extended Conn.')
cslbxOwnerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 14, 1), )
if mibBuilder.loadTexts: cslbxOwnerTable.setStatus('current')
if mibBuilder.loadTexts: cslbxOwnerTable.setDescription('Table of Owners of the load balancing objects.')
cslbxOwnerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 14, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxOwnerName"))
if mibBuilder.loadTexts: cslbxOwnerTableEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxOwnerTableEntry.setDescription('Information about a particular Owner configured on a particular local SLB entity.')
cslbxOwnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 14, 1, 1, 1), SlbObjectNameString())
if mibBuilder.loadTexts: cslbxOwnerName.setStatus('current')
if mibBuilder.loadTexts: cslbxOwnerName.setDescription('The name of the owner of the configured SLB objects.')
cslbxOwnerContactInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 14, 1, 1, 2), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxOwnerContactInfo.setStatus('current')
if mibBuilder.loadTexts: cslbxOwnerContactInfo.setDescription('The contact information for this Owner.')
cslbxOwnerBillingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 14, 1, 1, 3), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxOwnerBillingInfo.setStatus('current')
if mibBuilder.loadTexts: cslbxOwnerBillingInfo.setDescription('The billing information for this Owner.')
cslbxOwnerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 14, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxOwnerMaxConns.setStatus('current')
if mibBuilder.loadTexts: cslbxOwnerMaxConns.setDescription('The maximum of connections can be opened to the virtual servers associated with this Owner. The value of zero indicates that there is no upper limit of connections associated with this Owner.')
cslbxOwnerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 14, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxOwnerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxOwnerRowStatus.setDescription('The object used by a management station to create or delete the row entry in cslbxOwnerTable following the RowStatus textual convention.')
cslbxScriptFileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 15, 1), )
if mibBuilder.loadTexts: cslbxScriptFileTable.setStatus('current')
if mibBuilder.loadTexts: cslbxScriptFileTable.setDescription('Table of Script files to be downloaded into a particular SLB device. The content of these text files can be excuted by the SLB device to provide additional health check functionality.')
cslbxScriptFileTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 15, 1, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxScriptFileIndex"))
if mibBuilder.loadTexts: cslbxScriptFileTableEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxScriptFileTableEntry.setDescription('Information about a particular Script file configured on a particular local SLB entity.')
cslbxScriptFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 15, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cslbxScriptFileIndex.setStatus('current')
if mibBuilder.loadTexts: cslbxScriptFileIndex.setDescription('The Script file index.')
cslbxScriptFileUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 15, 1, 1, 2), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxScriptFileUrl.setStatus('current')
if mibBuilder.loadTexts: cslbxScriptFileUrl.setDescription('The name and location of the Script file.')
cslbxScriptFileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 15, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxScriptFileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxScriptFileRowStatus.setDescription('The object used by a management station to create or delete the row entry in cslbxScriptFileTable following the RowStatus textual convention.')
cslbxScriptTaskTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 15, 2), )
if mibBuilder.loadTexts: cslbxScriptTaskTable.setStatus('current')
if mibBuilder.loadTexts: cslbxScriptTaskTable.setDescription('Table of Script tasks to be executed by the SLB device when it is online. The scripts from the cslbxScriptFileTable are referenced in this table by the named labels.')
cslbxScriptTaskTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 15, 2, 1), ).setIndexNames((0, "CISCO-SLB-MIB", "slbEntity"), (0, "CISCO-SLB-EXT-MIB", "cslbxScriptTaskIndex"))
if mibBuilder.loadTexts: cslbxScriptTaskTableEntry.setStatus('current')
if mibBuilder.loadTexts: cslbxScriptTaskTableEntry.setDescription('Information about a particular Script task configured on a particular local SLB entity.')
cslbxScriptTaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 15, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cslbxScriptTaskIndex.setStatus('current')
if mibBuilder.loadTexts: cslbxScriptTaskIndex.setDescription('The Script task index.')
cslbxScriptTaskScriptName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 15, 2, 1, 2), SlbFunctionNameString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxScriptTaskScriptName.setStatus('current')
if mibBuilder.loadTexts: cslbxScriptTaskScriptName.setDescription('The name of the function to be executed.')
cslbxScriptTaskScriptArguments = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 15, 2, 1, 3), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxScriptTaskScriptArguments.setStatus('current')
if mibBuilder.loadTexts: cslbxScriptTaskScriptArguments.setDescription('The argument parameters passed into the executable Script.')
cslbxScriptTaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 15, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cslbxScriptTaskRowStatus.setStatus('current')
if mibBuilder.loadTexts: cslbxScriptTaskRowStatus.setDescription('The object used by a management station to create or delete the row entry in cslbxScriptTaskTable following the RowStatus textual convention.')
cslbxFtStateChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 254, 1, 13, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cslbxFtStateChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cslbxFtStateChangeNotifEnabled.setDescription("This object controls the generation of cslbxFtStateChange notification. 'true' Indicates that cslbxFtStateChange notification is to be generated when the state changes. That is, notification generation is enabled. 'false' Indicates that cslbxFtStateChange notification generation is disabled.")
cslbxFtStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 254, 0, 1)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxFtState"))
if mibBuilder.loadTexts: cslbxFtStateChange.setStatus('current')
if mibBuilder.loadTexts: cslbxFtStateChange.setDescription('The notification generated when the Fault Tolerance process changes to a new state. The value of cslbxFtState indicates the new state.')
cslbxMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 1))
cslbxMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2))
cslbxMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 1, 1)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxStickyGroupsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxMapsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxPoliciesGroup"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualServersGroup"), ("CISCO-SLB-EXT-MIB", "cslbxStatsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxClientNatPoolsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxVlansGroup"), ("CISCO-SLB-EXT-MIB", "cslbxFaultToleranceGroup"), ("CISCO-SLB-EXT-MIB", "cslbxNotifControlGroup"), ("CISCO-SLB-EXT-MIB", "cslbxNotifGroup"), ("CISCO-SLB-EXT-MIB", "cslbxConnsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxStickyObjectsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxXmlConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxMIBCompliance = cslbxMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cslbxMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco SLB EXT MIB. The Content Switching Module (CSM) product supports this revision.')
cslbxMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 1, 2)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxStickyGroupsGroupRev2"), ("CISCO-SLB-EXT-MIB", "cslbxMapsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxPoliciesGroup"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualServersGroup"), ("CISCO-SLB-EXT-MIB", "cslbxStatsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxClientNatPoolsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxVlansGroup"), ("CISCO-SLB-EXT-MIB", "cslbxFaultToleranceGroup"), ("CISCO-SLB-EXT-MIB", "cslbxNotifControlGroup"), ("CISCO-SLB-EXT-MIB", "cslbxNotifGroup"), ("CISCO-SLB-EXT-MIB", "cslbxConnsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxStickyObjectsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxXmlConfigGroup"), ("CISCO-SLB-EXT-MIB", "cslbxXmlUserAccessGroup"), ("CISCO-SLB-EXT-MIB", "cslbxOwnerGroup"), ("CISCO-SLB-EXT-MIB", "cslbxBackupServerGroup"), ("CISCO-SLB-EXT-MIB", "cslbxScriptedProbeGroup"), ("CISCO-SLB-EXT-MIB", "cslbxReverseStickyGroup"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualServersExtGroup"), ("CISCO-SLB-EXT-MIB", "cslbxMapsRev2Group"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmsExtGroup"), ("CISCO-SLB-EXT-MIB", "cslbxCookieStickyGroup"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmsHttpRetCodeGroup"), ("CISCO-SLB-EXT-MIB", "cslbxStatsHCGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxMIBComplianceRev1 = cslbxMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cslbxMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco SLB EXT MIB. The Content Switching Module (CSM) product supports this revision.')
cslbxMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 1, 3)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxStatsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxStickyGroupsGroupRev2"), ("CISCO-SLB-EXT-MIB", "cslbxMapsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxPoliciesGroup"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualServersGroup"), ("CISCO-SLB-EXT-MIB", "cslbxClientNatPoolsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxVlansGroup"), ("CISCO-SLB-EXT-MIB", "cslbxFaultToleranceGroup"), ("CISCO-SLB-EXT-MIB", "cslbxNotifControlGroup"), ("CISCO-SLB-EXT-MIB", "cslbxNotifGroup"), ("CISCO-SLB-EXT-MIB", "cslbxConnsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxStickyObjectsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxXmlConfigGroup"), ("CISCO-SLB-EXT-MIB", "cslbxXmlUserAccessGroup"), ("CISCO-SLB-EXT-MIB", "cslbxOwnerGroup"), ("CISCO-SLB-EXT-MIB", "cslbxBackupServerGroup"), ("CISCO-SLB-EXT-MIB", "cslbxScriptedProbeGroup"), ("CISCO-SLB-EXT-MIB", "cslbxReverseStickyGroup"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualServersExtGroup"), ("CISCO-SLB-EXT-MIB", "cslbxMapsRev2Group"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmsExtGroup"), ("CISCO-SLB-EXT-MIB", "cslbxCookieStickyGroup"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmsHttpRetCodeGroup"), ("CISCO-SLB-EXT-MIB", "cslbxStatsHCGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxMIBComplianceRev2 = cslbxMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cslbxMIBComplianceRev2.setDescription('The compliance statement for entities which implement the Cisco SLB EXT MIB.')
cslbxMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 1, 4)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxStatsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxStickyGroupsGroupRev2"), ("CISCO-SLB-EXT-MIB", "cslbxMapsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxPoliciesGroup"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualServersGroup"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmStatsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxClientNatPoolsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxVlansGroup"), ("CISCO-SLB-EXT-MIB", "cslbxFaultToleranceGroup"), ("CISCO-SLB-EXT-MIB", "cslbxNotifControlGroup"), ("CISCO-SLB-EXT-MIB", "cslbxNotifGroup"), ("CISCO-SLB-EXT-MIB", "cslbxConnsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxStickyObjectsGroup"), ("CISCO-SLB-EXT-MIB", "cslbxXmlConfigGroup"), ("CISCO-SLB-EXT-MIB", "cslbxXmlUserAccessGroup"), ("CISCO-SLB-EXT-MIB", "cslbxOwnerGroup"), ("CISCO-SLB-EXT-MIB", "cslbxBackupServerGroup"), ("CISCO-SLB-EXT-MIB", "cslbxScriptedProbeGroup"), ("CISCO-SLB-EXT-MIB", "cslbxReverseStickyGroup"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualServersExtGroup"), ("CISCO-SLB-EXT-MIB", "cslbxMapsRev2Group"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmsExtGroup"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmsExtGroupRev1"), ("CISCO-SLB-EXT-MIB", "cslbxCookieStickyGroup"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmsHttpRetCodeGroup"), ("CISCO-SLB-EXT-MIB", "cslbxStatsHCGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxMIBComplianceRev3 = cslbxMIBComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: cslbxMIBComplianceRev3.setDescription('The compliance statement for entities which implement the Cisco SLB EXT MIB.')
cslbxStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 1)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxStatsServerInitConns"), ("CISCO-SLB-EXT-MIB", "cslbxStatsServerInitHCConns"), ("CISCO-SLB-EXT-MIB", "cslbxStatsCurrConnections"), ("CISCO-SLB-EXT-MIB", "cslbxStatsCurrServerInitConns"), ("CISCO-SLB-EXT-MIB", "cslbxStatsFailedConns"), ("CISCO-SLB-EXT-MIB", "cslbxStatsFailedServerInitConns"), ("CISCO-SLB-EXT-MIB", "cslbxStatsL4PolicyConns"), ("CISCO-SLB-EXT-MIB", "cslbxStatsL7PolicyConns"), ("CISCO-SLB-EXT-MIB", "cslbxStatsDroppedL4PolicyConns"), ("CISCO-SLB-EXT-MIB", "cslbxStatsDroppedL7PolicyConns"), ("CISCO-SLB-EXT-MIB", "cslbxStatsFtpConns"), ("CISCO-SLB-EXT-MIB", "cslbxStatsHttpRedirectConns"), ("CISCO-SLB-EXT-MIB", "cslbxStatsDroppedRedirectConns"), ("CISCO-SLB-EXT-MIB", "cslbxStatsNoMatchPolicyRejects"), ("CISCO-SLB-EXT-MIB", "cslbxStatsNoCfgPolicyRejects"), ("CISCO-SLB-EXT-MIB", "cslbxStatsNoActiveServerRejects"), ("CISCO-SLB-EXT-MIB", "cslbxStatsAclDenyRejects"), ("CISCO-SLB-EXT-MIB", "cslbxStatsMaxParseLenRejects"), ("CISCO-SLB-EXT-MIB", "cslbxStatsBadSslFormatRejects"), ("CISCO-SLB-EXT-MIB", "cslbxStatsL7ParserErrorRejects"), ("CISCO-SLB-EXT-MIB", "cslbxStatsVerMismatchRejects"), ("CISCO-SLB-EXT-MIB", "cslbxStatsOutOfMemoryRejects"), ("CISCO-SLB-EXT-MIB", "cslbxStatsTimedOutConnections"), ("CISCO-SLB-EXT-MIB", "cslbxStatsTcpChecksumErrorPkts"), ("CISCO-SLB-EXT-MIB", "cslbxStatsIpChecksumErrorPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxStatsGroup = cslbxStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsGroup.setDescription('A collection of additional global statistics objects for the SLB entity.')
cslbxServerFarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 2)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxServerFarmHashMaskAddrType"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmHashMaskAddr"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmClientNatPool"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmFailAction"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmHttpReturnCodeMap"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmInFailedThreshold"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmInbandResetTimer"), ("CISCO-SLB-EXT-MIB", "cslbxRedirectSvrRelocationStr"), ("CISCO-SLB-EXT-MIB", "cslbxRedirectSvrBackupString"), ("CISCO-SLB-EXT-MIB", "cslbxRedirectSvrRedirectCode"), ("CISCO-SLB-EXT-MIB", "cslbxRedirectSvrRedirectPort"), ("CISCO-SLB-EXT-MIB", "cslbxRedirectSvrState"), ("CISCO-SLB-EXT-MIB", "cslbxRedirectSvrNumberOfConns"), ("CISCO-SLB-EXT-MIB", "cslbxRedirectSvrMaxConns"), ("CISCO-SLB-EXT-MIB", "cslbxRedirectSvrAdminWeight"), ("CISCO-SLB-EXT-MIB", "cslbxRedirectSvrOperWeight"), ("CISCO-SLB-EXT-MIB", "cslbxRedirectSvrMetric"), ("CISCO-SLB-EXT-MIB", "cslbxRedirectSvrTotalConns"), ("CISCO-SLB-EXT-MIB", "cslbxRedirectSvrHCTotalConns"), ("CISCO-SLB-EXT-MIB", "cslbxRedirectSvrRowStatus"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmProbeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxServerFarmsGroup = cslbxServerFarmsGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmsGroup.setDescription('A collection of cslbxServerFarmTable and cslbxRedirectSvrTable objects used to further define an SLB server farm.')
cslbxClientNatPoolsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 3)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxNatPoolStartAddressType"), ("CISCO-SLB-EXT-MIB", "cslbxNatPoolStartAddress"), ("CISCO-SLB-EXT-MIB", "cslbxNatPoolEndAddressType"), ("CISCO-SLB-EXT-MIB", "cslbxNatPoolEndAddress"), ("CISCO-SLB-EXT-MIB", "cslbxNatPoolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxClientNatPoolsGroup = cslbxClientNatPoolsGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxClientNatPoolsGroup.setDescription('The SLB client NAT pool objects.')
cslbxStickyGroupsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 4)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxStickyGroupType"), ("CISCO-SLB-EXT-MIB", "cslbxStickyGroupMaskAddressType"), ("CISCO-SLB-EXT-MIB", "cslbxStickyGroupMaskAddress"), ("CISCO-SLB-EXT-MIB", "cslbxStickyGroupCookieName"), ("CISCO-SLB-EXT-MIB", "cslbxStickyGroupStickyTimer"), ("CISCO-SLB-EXT-MIB", "cslbxStickyGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxStickyGroupsGroup = cslbxStickyGroupsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cslbxStickyGroupsGroup.setDescription('The SLB sticky group objects.')
cslbxStickyObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 5)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxStickyObjectGroupId"), ("CISCO-SLB-EXT-MIB", "cslbxStickyObjectType"), ("CISCO-SLB-EXT-MIB", "cslbxStickyObjectSourceInfo"), ("CISCO-SLB-EXT-MIB", "cslbxStickyObjectRealAddressType"), ("CISCO-SLB-EXT-MIB", "cslbxStickyObjectRealAddress"), ("CISCO-SLB-EXT-MIB", "cslbxStickyObjectRealPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxStickyObjectsGroup = cslbxStickyObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyObjectsGroup.setDescription('The SLB Extended sticky objects.')
cslbxMapsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 6)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxMapType"), ("CISCO-SLB-EXT-MIB", "cslbxMapRowStatus"), ("CISCO-SLB-EXT-MIB", "cslbxHttpExpressionFieldName"), ("CISCO-SLB-EXT-MIB", "cslbxHttpExpressionValue"), ("CISCO-SLB-EXT-MIB", "cslbxHttpExpressionRowStatus"), ("CISCO-SLB-EXT-MIB", "cslbxHttpReturnCodeMaxValue"), ("CISCO-SLB-EXT-MIB", "cslbxHttpReturnCodeThreshold"), ("CISCO-SLB-EXT-MIB", "cslbxHttpReturnCodeResetTimer"), ("CISCO-SLB-EXT-MIB", "cslbxHttpReturnCodeType"), ("CISCO-SLB-EXT-MIB", "cslbxHttpReturnCodeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxMapsGroup = cslbxMapsGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxMapsGroup.setDescription('The SLB map objects.')
cslbxPoliciesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 8)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxPolicyClientGroupNumber"), ("CISCO-SLB-EXT-MIB", "cslbxPolicyClientGroupName"), ("CISCO-SLB-EXT-MIB", "cslbxPolicyUrlMap"), ("CISCO-SLB-EXT-MIB", "cslbxPolicyCookieMap"), ("CISCO-SLB-EXT-MIB", "cslbxPolicyGenericHeaderMap"), ("CISCO-SLB-EXT-MIB", "cslbxPolicyStickyGroup"), ("CISCO-SLB-EXT-MIB", "cslbxPolicyDscpEnabled"), ("CISCO-SLB-EXT-MIB", "cslbxPolicyDscpStamping"), ("CISCO-SLB-EXT-MIB", "cslbxPolicyFarmName"), ("CISCO-SLB-EXT-MIB", "cslbxPolicyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxPoliciesGroup = cslbxPoliciesGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxPoliciesGroup.setDescription('The SLB policy objects.')
cslbxVirtualServersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 9)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxVirtualAdvertiseOption"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualVlanId"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualReplicationMode"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualPendingTimer"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualL7MaxParseLength"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualHttpPersistenceSlb"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualURLHashBeginString"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualURLHashEndString"), ("CISCO-SLB-EXT-MIB", "cslbxRuleCurrentConnections"), ("CISCO-SLB-EXT-MIB", "cslbxRuleTotalConnections"), ("CISCO-SLB-EXT-MIB", "cslbxRuleHCTotalConnections"), ("CISCO-SLB-EXT-MIB", "cslbxRuleTotalClientPackets"), ("CISCO-SLB-EXT-MIB", "cslbxRuleHCTotalClientPackets"), ("CISCO-SLB-EXT-MIB", "cslbxRuleTotalServerPackets"), ("CISCO-SLB-EXT-MIB", "cslbxRuleHCTotalServerPackets"), ("CISCO-SLB-EXT-MIB", "cslbxRuleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxVirtualServersGroup = cslbxVirtualServersGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualServersGroup.setDescription('A collection of virtual server and rule objects used to further define layer 7 parameters for the SLB virtual server.')
cslbxVlansGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 10)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxVlanType"), ("CISCO-SLB-EXT-MIB", "cslbxVlanAddressType"), ("CISCO-SLB-EXT-MIB", "cslbxVlanAddress"), ("CISCO-SLB-EXT-MIB", "cslbxVlanMaskAddressType"), ("CISCO-SLB-EXT-MIB", "cslbxVlanMaskAddress"), ("CISCO-SLB-EXT-MIB", "cslbxVlanRowStatus"), ("CISCO-SLB-EXT-MIB", "cslbxAliasAddrRowStatus"), ("CISCO-SLB-EXT-MIB", "cslbxStaticRouteRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxVlansGroup = cslbxVlansGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxVlansGroup.setDescription('The SLB VLAN configuration objects.')
cslbxFaultToleranceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 11)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxFtGroupId"), ("CISCO-SLB-EXT-MIB", "cslbxFtVlanId"), ("CISCO-SLB-EXT-MIB", "cslbxFtPreempt"), ("CISCO-SLB-EXT-MIB", "cslbxFtPriority"), ("CISCO-SLB-EXT-MIB", "cslbxFtHeartBeatTimer"), ("CISCO-SLB-EXT-MIB", "cslbxFtFailThreshold"), ("CISCO-SLB-EXT-MIB", "cslbxFtState"), ("CISCO-SLB-EXT-MIB", "cslbxFtStateChangeTime"), ("CISCO-SLB-EXT-MIB", "cslbxFtRxHeartBeatMsgs"), ("CISCO-SLB-EXT-MIB", "cslbxFtTxHeartBeatMsgs"), ("CISCO-SLB-EXT-MIB", "cslbxFtRxUpdateMsgs"), ("CISCO-SLB-EXT-MIB", "cslbxFtTxUpdateMsgs"), ("CISCO-SLB-EXT-MIB", "cslbxFtRxCoupMsgs"), ("CISCO-SLB-EXT-MIB", "cslbxFtTxCoupMsgs"), ("CISCO-SLB-EXT-MIB", "cslbxFtRxElectMsgs"), ("CISCO-SLB-EXT-MIB", "cslbxFtTxElectMsgs"), ("CISCO-SLB-EXT-MIB", "cslbxFtRxConnReplMsgs"), ("CISCO-SLB-EXT-MIB", "cslbxFtTxConnReplMsgs"), ("CISCO-SLB-EXT-MIB", "cslbxFtRxPackets"), ("CISCO-SLB-EXT-MIB", "cslbxFtDropPackets"), ("CISCO-SLB-EXT-MIB", "cslbxFtDuplPackets"), ("CISCO-SLB-EXT-MIB", "cslbxFtXsumErrPackets"), ("CISCO-SLB-EXT-MIB", "cslbxFtBuffErrPackets"), ("CISCO-SLB-EXT-MIB", "cslbxFtRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxFaultToleranceGroup = cslbxFaultToleranceGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxFaultToleranceGroup.setDescription('The SLB Fault Tolerance objects.')
cslbxConnsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 12)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxConnInDestAddrType"), ("CISCO-SLB-EXT-MIB", "cslbxConnInDestAddr"), ("CISCO-SLB-EXT-MIB", "cslbxConnInDestPort"), ("CISCO-SLB-EXT-MIB", "cslbxConnInSourceAddrType"), ("CISCO-SLB-EXT-MIB", "cslbxConnInSourceAddr"), ("CISCO-SLB-EXT-MIB", "cslbxConnInSourcePort"), ("CISCO-SLB-EXT-MIB", "cslbxConnProtocol"), ("CISCO-SLB-EXT-MIB", "cslbxConnOutDestAddrType"), ("CISCO-SLB-EXT-MIB", "cslbxConnOutDestAddr"), ("CISCO-SLB-EXT-MIB", "cslbxConnOutDestPort"), ("CISCO-SLB-EXT-MIB", "cslbxConnOutSourceAddrType"), ("CISCO-SLB-EXT-MIB", "cslbxConnOutSourceAddr"), ("CISCO-SLB-EXT-MIB", "cslbxConnOutSourcePort"), ("CISCO-SLB-EXT-MIB", "cslbxConnState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxConnsGroup = cslbxConnsGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxConnsGroup.setDescription('The SLB Extended Conn objects.')
cslbxXmlConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 13)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxXmlConfigEnabled"), ("CISCO-SLB-EXT-MIB", "cslbxXmlConfigVlanId"), ("CISCO-SLB-EXT-MIB", "cslbxXmlConfigListeningPort"), ("CISCO-SLB-EXT-MIB", "cslbxXmlConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxXmlConfigGroup = cslbxXmlConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxXmlConfigGroup.setDescription('The SLB XML configuration objects.')
cslbxNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 14)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxFtStateChangeNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxNotifControlGroup = cslbxNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxNotifControlGroup.setDescription('The collection of objects to control the notifications for state changed in a SLB device.')
cslbxNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 15)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxFtStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxNotifGroup = cslbxNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxNotifGroup.setDescription('The collection of notifications of CISCO-SLB-EXT-MIB entity that are required to support.')
cslbxXmlUserAccessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 16)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxXmlConfigUserName"), ("CISCO-SLB-EXT-MIB", "cslbxXmlConfigPassword"), ("CISCO-SLB-EXT-MIB", "cslbxXmlConfigClientGroupNumber"), ("CISCO-SLB-EXT-MIB", "cslbxXmlConfigClientGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxXmlUserAccessGroup = cslbxXmlUserAccessGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxXmlUserAccessGroup.setDescription('The collection of additional objects used to further control the access to the SLB XML management interface.')
cslbxOwnerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 17)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxVirtualOwnerName"), ("CISCO-SLB-EXT-MIB", "cslbxOwnerContactInfo"), ("CISCO-SLB-EXT-MIB", "cslbxOwnerBillingInfo"), ("CISCO-SLB-EXT-MIB", "cslbxOwnerMaxConns"), ("CISCO-SLB-EXT-MIB", "cslbxOwnerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxOwnerGroup = cslbxOwnerGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxOwnerGroup.setDescription('The collection of objects used to define the Owner information of an SLB Virtual Server object.')
cslbxBackupServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 18)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxPolicyBackupFarmName"), ("CISCO-SLB-EXT-MIB", "cslbxPolicyBkFarmStickyEnabled"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualBackupFarmName"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualBkFarmStickyEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxBackupServerGroup = cslbxBackupServerGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxBackupServerGroup.setDescription('The collection of objects used to define the SLB Backup Server Farm option.')
cslbxScriptedProbeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 19)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxScriptFileUrl"), ("CISCO-SLB-EXT-MIB", "cslbxScriptFileRowStatus"), ("CISCO-SLB-EXT-MIB", "cslbxScriptTaskScriptName"), ("CISCO-SLB-EXT-MIB", "cslbxScriptTaskScriptArguments"), ("CISCO-SLB-EXT-MIB", "cslbxScriptTaskRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxScriptedProbeGroup = cslbxScriptedProbeGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxScriptedProbeGroup.setDescription('The collection of objects to configure executable Script in an SLB device.')
cslbxReverseStickyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 20)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxPolicyReverseStickyGroup"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualReverseStickyGroup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxReverseStickyGroup = cslbxReverseStickyGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxReverseStickyGroup.setDescription('The collection of objects used to configure the Reverse Sticky option.')
cslbxVirtualServersExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 22)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxVirtualMaxConns"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualFlowMode"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualSSLStickyOffset"), ("CISCO-SLB-EXT-MIB", "cslbxVirtualSSLStickyLength"), ("CISCO-SLB-EXT-MIB", "cslbxRuleTotalClientOctets"), ("CISCO-SLB-EXT-MIB", "cslbxRuleHCTotalClientOctets"), ("CISCO-SLB-EXT-MIB", "cslbxRuleTotalServerOctets"), ("CISCO-SLB-EXT-MIB", "cslbxRuleHCTotalServerOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxVirtualServersExtGroup = cslbxVirtualServersExtGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxVirtualServersExtGroup.setDescription('The collection of additional objects used to define SSL sticky option, packet counters and flow control for a SLB Virtual Server.')
cslbxMapsRev2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 23)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxMapType"), ("CISCO-SLB-EXT-MIB", "cslbxMapRowStatus"), ("CISCO-SLB-EXT-MIB", "cslbxHttpExpressionFieldName"), ("CISCO-SLB-EXT-MIB", "cslbxHttpExpressionValue"), ("CISCO-SLB-EXT-MIB", "cslbxHttpExpressionRowStatus"), ("CISCO-SLB-EXT-MIB", "cslbxHttpExpressionRequestMethod"), ("CISCO-SLB-EXT-MIB", "cslbxHttpReturnCodeMaxValue"), ("CISCO-SLB-EXT-MIB", "cslbxHttpReturnCodeThreshold"), ("CISCO-SLB-EXT-MIB", "cslbxHttpReturnCodeResetTimer"), ("CISCO-SLB-EXT-MIB", "cslbxHttpReturnCodeType"), ("CISCO-SLB-EXT-MIB", "cslbxHttpReturnCodeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxMapsRev2Group = cslbxMapsRev2Group.setStatus('current')
if mibBuilder.loadTexts: cslbxMapsRev2Group.setDescription('The second revision of collection of objects used to define a SLB matching criteria.')
cslbxServerFarmsExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 24)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxServerFarmTransparent"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmSlowStart"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmHashHeaderName"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmHashCookieName"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmUrlPatternBegin"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmUrlPatternEnd"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmDescription"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxServerFarmsExtGroup = cslbxServerFarmsExtGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cslbxServerFarmsExtGroup.setDescription('A collection of objects related to server farm.')
cslbxServerFarmsHttpRetCodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 25)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxSfarmHttpRetCodeMaxValue"), ("CISCO-SLB-EXT-MIB", "cslbxSfarmHttpRetCodeActionType"), ("CISCO-SLB-EXT-MIB", "cslbxSfarmHttpRetCodeThreshold"), ("CISCO-SLB-EXT-MIB", "cslbxSfarmHttpRetCodeResetTimer"), ("CISCO-SLB-EXT-MIB", "cslbxSfarmHttpRetCodeStorageType"), ("CISCO-SLB-EXT-MIB", "cslbxSfarmHttpRetCodeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxServerFarmsHttpRetCodeGroup = cslbxServerFarmsHttpRetCodeGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmsHttpRetCodeGroup.setDescription('A collection of objects related to HTTP Return Codes in server farm.')
cslbxStickyGroupsGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 26)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxStickyGroupType"), ("CISCO-SLB-EXT-MIB", "cslbxStickyGroupMaskAddressType"), ("CISCO-SLB-EXT-MIB", "cslbxStickyGroupMaskAddress"), ("CISCO-SLB-EXT-MIB", "cslbxStickyGroupCookieName"), ("CISCO-SLB-EXT-MIB", "cslbxStickyGroupStickyTimer"), ("CISCO-SLB-EXT-MIB", "cslbxStickyGroupRowStatus"), ("CISCO-SLB-EXT-MIB", "cslbxStickyGroupHeaderName"), ("CISCO-SLB-EXT-MIB", "cslbxStickyGroupTimeoutActiveConn"), ("CISCO-SLB-EXT-MIB", "cslbxStickyGroupReplicate"), ("CISCO-SLB-EXT-MIB", "cslbxStickyOffset"), ("CISCO-SLB-EXT-MIB", "cslbxStickyLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxStickyGroupsGroupRev2 = cslbxStickyGroupsGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cslbxStickyGroupsGroupRev2.setDescription('The collection of objects for sticky features.')
cslbxCookieStickyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 27)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxStickyCookieInsertEnable"), ("CISCO-SLB-EXT-MIB", "cslbxStickyCookieSecondary"), ("CISCO-SLB-EXT-MIB", "cslbxStickyCookieExpiryDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxCookieStickyGroup = cslbxCookieStickyGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxCookieStickyGroup.setDescription('This group contains objects related to static Cookie.')
cslbxStatsHCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 35)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxStatsL4PolicyHCConns"), ("CISCO-SLB-EXT-MIB", "cslbxStatsL7PolicyHCConns"), ("CISCO-SLB-EXT-MIB", "cslbxStatsDroppedL4PolicyHCConns"), ("CISCO-SLB-EXT-MIB", "cslbxStatsDroppedL7PolicyHCConns"), ("CISCO-SLB-EXT-MIB", "cslbxStatsNoMatchPolicyHCRejects"), ("CISCO-SLB-EXT-MIB", "cslbxStatsNoCfgPolicyHCRejects"), ("CISCO-SLB-EXT-MIB", "cslbxStatsAclDenyHCRejects"), ("CISCO-SLB-EXT-MIB", "cslbxStatsVerMismatchHCRejects"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxStatsHCGroup = cslbxStatsHCGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxStatsHCGroup.setDescription('A collection of objects providing information specific to counter64 objects for SLB statistics.')
cslbxServerFarmStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 36)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxServerFarmTotalConns"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmCurrConns"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmFailedConns"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmNumOfTimeFailOvers"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmNumOfTimeBkInServs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxServerFarmStatsGroup = cslbxServerFarmStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmStatsGroup.setDescription('This group contains objects related to server farm statistics.')
cslbxServerFarmsExtGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 254, 2, 2, 37)).setObjects(("CISCO-SLB-EXT-MIB", "cslbxServerFarmTransparent"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmSlowStart"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmHashHeaderName"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmHashCookieName"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmUrlPatternBegin"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmUrlPatternEnd"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmDescription"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmType"), ("CISCO-SLB-EXT-MIB", "cslbxServerFarmState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cslbxServerFarmsExtGroupRev1 = cslbxServerFarmsExtGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cslbxServerFarmsExtGroupRev1.setDescription('A collection of objects related to server farm.')
mibBuilder.exportSymbols("CISCO-SLB-EXT-MIB", cslbxNotifGroup=cslbxNotifGroup, cslbxHttpReturnCodeMaxValue=cslbxHttpReturnCodeMaxValue, cslbxScriptTaskTable=cslbxScriptTaskTable, cslbxVlanMaskAddress=cslbxVlanMaskAddress, cslbxServerFarmTableEntry=cslbxServerFarmTableEntry, cslbxStickyGroupMaskAddressType=cslbxStickyGroupMaskAddressType, cslbxStickyOffset=cslbxStickyOffset, cslbxXmlConfigVlanId=cslbxXmlConfigVlanId, cslbxHttpExpressionFieldName=cslbxHttpExpressionFieldName, cslbxStickyObjectRealAddress=cslbxStickyObjectRealAddress, cslbxStickyGroupId=cslbxStickyGroupId, cslbxRuleHCTotalClientOctets=cslbxRuleHCTotalClientOctets, cslbxXmlConfigEnabled=cslbxXmlConfigEnabled, cslbxClientNatPoolsGroup=cslbxClientNatPoolsGroup, cslbxConnInSourceAddrType=cslbxConnInSourceAddrType, cslbxXmlConfigGroup=cslbxXmlConfigGroup, cslbxServerFarmHashMaskAddr=cslbxServerFarmHashMaskAddr, cslbxFtRowStatus=cslbxFtRowStatus, cslbxVirtualL7MaxParseLength=cslbxVirtualL7MaxParseLength, cslbxScriptFileTable=cslbxScriptFileTable, cslbxFtPreempt=cslbxFtPreempt, cslbxVirtualBkFarmStickyEnabled=cslbxVirtualBkFarmStickyEnabled, cslbxRuleHCTotalClientPackets=cslbxRuleHCTotalClientPackets, cslbxScriptObjects=cslbxScriptObjects, cslbxNatPoolEndAddressType=cslbxNatPoolEndAddressType, cslbxStatsL7PolicyHCConns=cslbxStatsL7PolicyHCConns, cslbxStickyGroupTable=cslbxStickyGroupTable, cslbxVirtualOwnerName=cslbxVirtualOwnerName, cslbxAliasAddrVlanId=cslbxAliasAddrVlanId, cslbxRedirectSvrTable=cslbxRedirectSvrTable, cslbxStickyGroupsGroup=cslbxStickyGroupsGroup, cslbxServerFarmHashHeaderName=cslbxServerFarmHashHeaderName, SlbFunctionNameString=SlbFunctionNameString, cslbxPolicyBkFarmStickyEnabled=cslbxPolicyBkFarmStickyEnabled, cslbxNatPoolTable=cslbxNatPoolTable, cslbxServerFarmTable=cslbxServerFarmTable, cslbxStickyGroupCookieName=cslbxStickyGroupCookieName, cslbxStickyGroupHeaderName=cslbxStickyGroupHeaderName, cslbxFtTxCoupMsgs=cslbxFtTxCoupMsgs, cslbxStatsTableEntry=cslbxStatsTableEntry, SlbRegularExpression=SlbRegularExpression, cslbxPolicyBackupFarmName=cslbxPolicyBackupFarmName, cslbxStatsBadSslFormatRejects=cslbxStatsBadSslFormatRejects, cslbxConnTable=cslbxConnTable, cslbxRuleTotalServerOctets=cslbxRuleTotalServerOctets, cslbxPolicyTableEntry=cslbxPolicyTableEntry, SlbReplicationMode=SlbReplicationMode, cslbxVirtualHttpPersistenceSlb=cslbxVirtualHttpPersistenceSlb, cslbxXmlConfigUserName=cslbxXmlConfigUserName, cslbxFtRxHeartBeatMsgs=cslbxFtRxHeartBeatMsgs, cslbxStaticRouteMaskAddr=cslbxStaticRouteMaskAddr, cslbxFtRxPackets=cslbxFtRxPackets, cslbxStickyObjects=cslbxStickyObjects, cslbxFtRxElectMsgs=cslbxFtRxElectMsgs, cslbxVirtualURLHashEndString=cslbxVirtualURLHashEndString, cslbxFtRxCoupMsgs=cslbxFtRxCoupMsgs, cslbxSfarmHttpRetCodeStorageType=cslbxSfarmHttpRetCodeStorageType, cslbxStatsTimedOutConnections=cslbxStatsTimedOutConnections, cslbxScriptFileIndex=cslbxScriptFileIndex, cslbxMapTable=cslbxMapTable, cslbxRuleTable=cslbxRuleTable, cslbxStickyGroupEntry=cslbxStickyGroupEntry, cslbxServerFarmsGroup=cslbxServerFarmsGroup, cslbxSfarmHttpRetCodeThreshold=cslbxSfarmHttpRetCodeThreshold, cslbxRedirectSvrFarmName=cslbxRedirectSvrFarmName, SlbFtState=SlbFtState, cslbxPolicyReverseStickyGroup=cslbxPolicyReverseStickyGroup, cslbxFtGroupId=cslbxFtGroupId, cslbxPolicyClientGroupNumber=cslbxPolicyClientGroupNumber, cslbxServerFarmStatsEntry=cslbxServerFarmStatsEntry, cslbxConnIndex=cslbxConnIndex, cslbxRedirectSvrName=cslbxRedirectSvrName, cslbxAliasAddrAddressType=cslbxAliasAddrAddressType, cslbxStaticRouteVlanId=cslbxStaticRouteVlanId, cslbxVlansGroup=cslbxVlansGroup, cslbxStatsMaxParseLenRejects=cslbxStatsMaxParseLenRejects, cslbxStatsDroppedL7PolicyHCConns=cslbxStatsDroppedL7PolicyHCConns, cslbxStatsL7ParserErrorRejects=cslbxStatsL7ParserErrorRejects, cslbxServerFarmNumOfTimeBkInServs=cslbxServerFarmNumOfTimeBkInServs, cslbxStatsAclDenyRejects=cslbxStatsAclDenyRejects, cslbxServerFarmDescription=cslbxServerFarmDescription, SlbDirectionalMode=SlbDirectionalMode, cslbxRulePolicyName=cslbxRulePolicyName, cslbxMIBComplianceRev3=cslbxMIBComplianceRev3, cslbxMIBCompliance=cslbxMIBCompliance, cslbxServerFarmStatsGroup=cslbxServerFarmStatsGroup, cslbxRuleTotalConnections=cslbxRuleTotalConnections, cslbxMapName=cslbxMapName, cslbxServerFarmClientNatPool=cslbxServerFarmClientNatPool, cslbxHttpExpressionRowStatus=cslbxHttpExpressionRowStatus, cslbxStatsTcpChecksumErrorPkts=cslbxStatsTcpChecksumErrorPkts, cslbxMIBComplianceRev2=cslbxMIBComplianceRev2, cslbxStickyGroupExtTable=cslbxStickyGroupExtTable, cslbxStickyGroupReplicate=cslbxStickyGroupReplicate, cslbxServerFarmProbeRowStatus=cslbxServerFarmProbeRowStatus, cslbxStickyObjectGroupId=cslbxStickyObjectGroupId, cslbxStatsL7PolicyConns=cslbxStatsL7PolicyConns, cslbxNatPoolEndAddress=cslbxNatPoolEndAddress, cslbxScriptTaskScriptArguments=cslbxScriptTaskScriptArguments, cslbxVirtualReverseStickyGroup=cslbxVirtualReverseStickyGroup, cslbxOwnerRowStatus=cslbxOwnerRowStatus, cslbxClientNatPools=cslbxClientNatPools, cslbxHttpReturnCodeTable=cslbxHttpReturnCodeTable, cslbxStatsVerMismatchHCRejects=cslbxStatsVerMismatchHCRejects, cslbxStatsIpChecksumErrorPkts=cslbxStatsIpChecksumErrorPkts, cslbxStickyObjectRealAddressType=cslbxStickyObjectRealAddressType, cslbxRuleHCTotalServerOctets=cslbxRuleHCTotalServerOctets, cslbxXmlConfigTable=cslbxXmlConfigTable, cslbxStatsNoMatchPolicyRejects=cslbxStatsNoMatchPolicyRejects, cslbxRuleTotalClientOctets=cslbxRuleTotalClientOctets, cslbxConnOutSourceAddrType=cslbxConnOutSourceAddrType, cslbxRedirectSvrRedirectPort=cslbxRedirectSvrRedirectPort, cslbxVirtualReplicationMode=cslbxVirtualReplicationMode, cslbxVirtualURLHashBeginString=cslbxVirtualURLHashBeginString, cslbxServerFarmUrlPatternEnd=cslbxServerFarmUrlPatternEnd, SlbVlanType=SlbVlanType, cslbxRedirectSvrAdminWeight=cslbxRedirectSvrAdminWeight, cslbxRedirectSvrOperWeight=cslbxRedirectSvrOperWeight, cslbxCookieStickyGroup=cslbxCookieStickyGroup, cslbxStatsTable=cslbxStatsTable, cslbxFtDropPackets=cslbxFtDropPackets, cslbxRedirectSvrHCTotalConns=cslbxRedirectSvrHCTotalConns, cslbxOwnerBillingInfo=cslbxOwnerBillingInfo, cslbxStatsDroppedRedirectConns=cslbxStatsDroppedRedirectConns, cslbxXmlConfigPassword=cslbxXmlConfigPassword, cslbxStats=cslbxStats, cslbxServerFarmUrlPatternBegin=cslbxServerFarmUrlPatternBegin, cslbxSfarmHttpReturnCodeTable=cslbxSfarmHttpReturnCodeTable, cslbxStatsFailedServerInitConns=cslbxStatsFailedServerInitConns, cslbxVirtualServersExtGroup=cslbxVirtualServersExtGroup, cslbxMapType=cslbxMapType, cslbxConnInDestAddrType=cslbxConnInDestAddrType, cslbxRuleHCTotalServerPackets=cslbxRuleHCTotalServerPackets, cslbxConnTableEntry=cslbxConnTableEntry, cslbxStatsNoCfgPolicyHCRejects=cslbxStatsNoCfgPolicyHCRejects, cslbxServerFarmProbeTable=cslbxServerFarmProbeTable, cslbxMaps=cslbxMaps, cslbxPolicyTable=cslbxPolicyTable, cslbxScriptTaskTableEntry=cslbxScriptTaskTableEntry, cslbxStatsDroppedL7PolicyConns=cslbxStatsDroppedL7PolicyConns, cslbxNotifObjects=cslbxNotifObjects, cslbxScriptTaskRowStatus=cslbxScriptTaskRowStatus, cslbxScriptFileTableEntry=cslbxScriptFileTableEntry, cslbxFtRxUpdateMsgs=cslbxFtRxUpdateMsgs, cslbxConnInDestPort=cslbxConnInDestPort, cslbxXmlUserAccessGroup=cslbxXmlUserAccessGroup, cslbxServerProbes=cslbxServerProbes, cslbxXmlConfigTableEntry=cslbxXmlConfigTableEntry, cslbxHttpExpressionMapName=cslbxHttpExpressionMapName, cslbxHttpReturnCodeMinValue=cslbxHttpReturnCodeMinValue, cslbxPolicyStickyGroup=cslbxPolicyStickyGroup, cslbxFtRxConnReplMsgs=cslbxFtRxConnReplMsgs, cslbxVlanAddressType=cslbxVlanAddressType, cslbxOwnerContactInfo=cslbxOwnerContactInfo, cslbxOwnerTable=cslbxOwnerTable, cslbxRuleEntry=cslbxRuleEntry, ciscoSlbExtMIBNotifs=ciscoSlbExtMIBNotifs, cslbxXmlConfigListeningPort=cslbxXmlConfigListeningPort, cslbxBackupServerGroup=cslbxBackupServerGroup, cslbxStatsGroup=cslbxStatsGroup, cslbxConnOutDestPort=cslbxConnOutDestPort, cslbxConnOutSourceAddr=cslbxConnOutSourceAddr, cslbxVirtualServers=cslbxVirtualServers, cslbxXmlConfigClientGroupName=cslbxXmlConfigClientGroupName, cslbxHttpExpressionIndex=cslbxHttpExpressionIndex, SlbStickyType=SlbStickyType, cslbxPolicyDscpStamping=cslbxPolicyDscpStamping, cslbxRuleTotalServerPackets=cslbxRuleTotalServerPackets, cslbxXmlConfigRowStatus=cslbxXmlConfigRowStatus, cslbxSfarmHttpRetCodeMinValue=cslbxSfarmHttpRetCodeMinValue, cslbxStatsL4PolicyConns=cslbxStatsL4PolicyConns, cslbxScriptFileUrl=cslbxScriptFileUrl, cslbxConnsGroup=cslbxConnsGroup, cslbxFtStateChangeTime=cslbxFtStateChangeTime, cslbxVlanId=cslbxVlanId, cslbxStatsCurrConnections=cslbxStatsCurrConnections, cslbxStickyObjectTableEntry=cslbxStickyObjectTableEntry, cslbxMIBGroups=cslbxMIBGroups, cslbxServerFarmTotalConns=cslbxServerFarmTotalConns, cslbxRuleRowStatus=cslbxRuleRowStatus, cslbxScriptTaskScriptName=cslbxScriptTaskScriptName, cslbxVlanMaskAddressType=cslbxVlanMaskAddressType, cslbxConnInSourceAddr=cslbxConnInSourceAddr, cslbxAliasAddrTable=cslbxAliasAddrTable, cslbxServerFarmInFailedThreshold=cslbxServerFarmInFailedThreshold, cslbxStatsDroppedL4PolicyHCConns=cslbxStatsDroppedL4PolicyHCConns, cslbxFtTableEntry=cslbxFtTableEntry, cslbxStickyObjectRealPort=cslbxStickyObjectRealPort, cslbxStatsHttpRedirectConns=cslbxStatsHttpRedirectConns, cslbxServerFarmCurrConns=cslbxServerFarmCurrConns, cslbxSfarmHttpRetCodeMaxValue=cslbxSfarmHttpRetCodeMaxValue, cslbxStaticRouteTable=cslbxStaticRouteTable, cslbxVirtualAdvertiseOption=cslbxVirtualAdvertiseOption, cslbxHttpExpressionTableEntry=cslbxHttpExpressionTableEntry, cslbxHttpReturnCodeEntry=cslbxHttpReturnCodeEntry, cslbxServerFarmHashMaskAddrType=cslbxServerFarmHashMaskAddrType, cslbxVirtualBackupFarmName=cslbxVirtualBackupFarmName, cslbxFtBuffErrPackets=cslbxFtBuffErrPackets, cslbxStickyCookieExpiryDate=cslbxStickyCookieExpiryDate, cslbxNatPoolName=cslbxNatPoolName, cslbxScriptFileRowStatus=cslbxScriptFileRowStatus, cslbxConnInDestAddr=cslbxConnInDestAddr, cslbxPolicyCookieMap=cslbxPolicyCookieMap, ciscoSlbExtMIB=ciscoSlbExtMIB, cslbxFaultTolerance=cslbxFaultTolerance, cslbxFtXsumErrPackets=cslbxFtXsumErrPackets, cslbxXmlConfig=cslbxXmlConfig, cslbxServerFarmType=cslbxServerFarmType, cslbxConnProtocol=cslbxConnProtocol, cslbxFtTxConnReplMsgs=cslbxFtTxConnReplMsgs, cslbxNatPoolEntry=cslbxNatPoolEntry, cslbxPolicyName=cslbxPolicyName, cslbxStickyGroupStickyTimer=cslbxStickyGroupStickyTimer, cslbxServerFarmInbandResetTimer=cslbxServerFarmInbandResetTimer, cslbxFtFailThreshold=cslbxFtFailThreshold, cslbxServerFarmProbeFarmName=cslbxServerFarmProbeFarmName, cslbxSfarmHttpRetCodeActionType=cslbxSfarmHttpRetCodeActionType, cslbxStickyLength=cslbxStickyLength, cslbxStickyObjectType=cslbxStickyObjectType, cslbxRedirectSvrRedirectCode=cslbxRedirectSvrRedirectCode, cslbxFtTxHeartBeatMsgs=cslbxFtTxHeartBeatMsgs, cslbxVlans=cslbxVlans, cslbxServerFarmsExtGroupRev1=cslbxServerFarmsExtGroupRev1, SlbMapType=SlbMapType, cslbxConnections=cslbxConnections, cslbxXmlConfigClientGroupNumber=cslbxXmlConfigClientGroupNumber, cslbxStaticRouteRowStatus=cslbxStaticRouteRowStatus, cslbxStatsNoCfgPolicyRejects=cslbxStatsNoCfgPolicyRejects, cslbxVirtualSSLStickyLength=cslbxVirtualSSLStickyLength, cslbxOwnerTableEntry=cslbxOwnerTableEntry, SlbIpAdvertise=SlbIpAdvertise, cslbxRedirectSvrRelocationStr=cslbxRedirectSvrRelocationStr, cslbxStaticRouteSubnetAddrType=cslbxStaticRouteSubnetAddrType, cslbxNatPoolRowStatus=cslbxNatPoolRowStatus, cslbxOwnerObjects=cslbxOwnerObjects, cslbxOwnerMaxConns=cslbxOwnerMaxConns, cslbxStatsHCGroup=cslbxStatsHCGroup, cslbxStatsFailedConns=cslbxStatsFailedConns, PYSNMP_MODULE_ID=ciscoSlbExtMIB, cslbxMapsGroup=cslbxMapsGroup, cslbxServerFarmHttpReturnCodeMap=cslbxServerFarmHttpReturnCodeMap, cslbxHttpReturnCodeResetTimer=cslbxHttpReturnCodeResetTimer, cslbxHttpExpressionRequestMethod=cslbxHttpExpressionRequestMethod, cslbxStaticRouteGatewayAddrType=cslbxStaticRouteGatewayAddrType, cslbxRedirectSvrMetric=cslbxRedirectSvrMetric, SlbUrlString=SlbUrlString, cslbxFtVlanId=cslbxFtVlanId, cslbxRedirectSvrState=cslbxRedirectSvrState, cslbxHttpReturnCodeRowStatus=cslbxHttpReturnCodeRowStatus, cslbxMapTableEntry=cslbxMapTableEntry, cslbxServerFarmTransparent=cslbxServerFarmTransparent, cslbxServerFarmStatsTable=cslbxServerFarmStatsTable, cslbxMIBComplianceRev1=cslbxMIBComplianceRev1, cslbxAliasAddrAddress=cslbxAliasAddrAddress)
mibBuilder.exportSymbols("CISCO-SLB-EXT-MIB", cslbxSfarmHttpRetCodeRowStatus=cslbxSfarmHttpRetCodeRowStatus, cslbxStickyObjectSourceInfo=cslbxStickyObjectSourceInfo, cslbxStatsOutOfMemoryRejects=cslbxStatsOutOfMemoryRejects, cslbxHttpReturnCodeType=cslbxHttpReturnCodeType, cslbxVirtualVlanId=cslbxVirtualVlanId, cslbxVirtualServerTable=cslbxVirtualServerTable, cslbxRedirectSvrBackupString=cslbxRedirectSvrBackupString, cslbxServerFarmsHttpRetCodeGroup=cslbxServerFarmsHttpRetCodeGroup, cslbxHttpReturnCodeThreshold=cslbxHttpReturnCodeThreshold, cslbxServerFarmHashCookieName=cslbxServerFarmHashCookieName, cslbxServerFarmsExtGroup=cslbxServerFarmsExtGroup, cslbxRedirectSvrNumberOfConns=cslbxRedirectSvrNumberOfConns, cslbxServerFarmProbeProbeName=cslbxServerFarmProbeProbeName, cslbxPolicies=cslbxPolicies, cslbxVirtualPendingTimer=cslbxVirtualPendingTimer, cslbxFtStateChange=cslbxFtStateChange, cslbxStickyObjectIndex=cslbxStickyObjectIndex, cslbxOwnerGroup=cslbxOwnerGroup, cslbxStaticRouteEntry=cslbxStaticRouteEntry, cslbxFtPriority=cslbxFtPriority, cslbxAliasAddrRowStatus=cslbxAliasAddrRowStatus, ciscoSlbExtMIBConform=ciscoSlbExtMIBConform, cslbxMapsRev2Group=cslbxMapsRev2Group, cslbxVlanEntry=cslbxVlanEntry, cslbxReverseStickyGroup=cslbxReverseStickyGroup, cslbxServerFarmState=cslbxServerFarmState, cslbxRuleHCTotalConnections=cslbxRuleHCTotalConnections, cslbxServerFarmProbeTableEntry=cslbxServerFarmProbeTableEntry, cslbxFtState=cslbxFtState, cslbxStickyObjectTable=cslbxStickyObjectTable, cslbxStickyGroupsGroupRev2=cslbxStickyGroupsGroupRev2, cslbxRuleTotalClientPackets=cslbxRuleTotalClientPackets, cslbxRuleVirtualServerName=cslbxRuleVirtualServerName, cslbxAliasAddrEntry=cslbxAliasAddrEntry, cslbxRuleCurrentConnections=cslbxRuleCurrentConnections, cslbxPolicyFarmName=cslbxPolicyFarmName, cslbxStatsNoActiveServerRejects=cslbxStatsNoActiveServerRejects, cslbxRedirectSvrRowStatus=cslbxRedirectSvrRowStatus, cslbxHttpExpressionValue=cslbxHttpExpressionValue, cslbxVlanType=cslbxVlanType, cslbxFtDuplPackets=cslbxFtDuplPackets, cslbxServerFarms=cslbxServerFarms, cslbxVirtualMaxConns=cslbxVirtualMaxConns, cslbxStatsL4PolicyHCConns=cslbxStatsL4PolicyHCConns, cslbxServerFarmFailAction=cslbxServerFarmFailAction, cslbxVlanAddress=cslbxVlanAddress, cslbxPolicyDscpEnabled=cslbxPolicyDscpEnabled, cslbxRedirectSvrTableEntry=cslbxRedirectSvrTableEntry, cslbxFtTxElectMsgs=cslbxFtTxElectMsgs, cslbxPolicyClientGroupName=cslbxPolicyClientGroupName, cslbxStickyCookieSecondary=cslbxStickyCookieSecondary, cslbxServerFarmFailedConns=cslbxServerFarmFailedConns, cslbxStatsAclDenyHCRejects=cslbxStatsAclDenyHCRejects, cslbxStaticRouteMaskAddrType=cslbxStaticRouteMaskAddrType, cslbxStickyGroupExtEntry=cslbxStickyGroupExtEntry, cslbxVirtualServerTableEntry=cslbxVirtualServerTableEntry, cslbxStickyObjectsGroup=cslbxStickyObjectsGroup, cslbxServerFarmSlowStart=cslbxServerFarmSlowStart, cslbxOwnerName=cslbxOwnerName, cslbxPolicyGenericHeaderMap=cslbxPolicyGenericHeaderMap, cslbxFtTxUpdateMsgs=cslbxFtTxUpdateMsgs, cslbxVirtualServersGroup=cslbxVirtualServersGroup, cslbxServerFarmNumOfTimeFailOvers=cslbxServerFarmNumOfTimeFailOvers, cslbxStatsNoMatchPolicyHCRejects=cslbxStatsNoMatchPolicyHCRejects, cslbxNatPoolStartAddress=cslbxNatPoolStartAddress, cslbxStatsCurrServerInitConns=cslbxStatsCurrServerInitConns, SlbObjectNameString=SlbObjectNameString, cslbxVirtualFlowMode=cslbxVirtualFlowMode, cslbxPoliciesGroup=cslbxPoliciesGroup, cslbxNatPoolStartAddressType=cslbxNatPoolStartAddressType, cslbxPolicyRowStatus=cslbxPolicyRowStatus, cslbxConnOutDestAddr=cslbxConnOutDestAddr, cslbxSfarmHttpRetCodeResetTimer=cslbxSfarmHttpRetCodeResetTimer, SlbFailAction=SlbFailAction, cslbxHttpExpressionTable=cslbxHttpExpressionTable, cslbxStatsFtpConns=cslbxStatsFtpConns, cslbxStickyGroupType=cslbxStickyGroupType, cslbxPolicyUrlMap=cslbxPolicyUrlMap, cslbxStatsVerMismatchRejects=cslbxStatsVerMismatchRejects, cslbxStickyGroupMaskAddress=cslbxStickyGroupMaskAddress, cslbxConnState=cslbxConnState, cslbxMapRowStatus=cslbxMapRowStatus, cslbxFtTable=cslbxFtTable, cslbxConnOutDestAddrType=cslbxConnOutDestAddrType, cslbxFtHeartBeatTimer=cslbxFtHeartBeatTimer, cslbxConnOutSourcePort=cslbxConnOutSourcePort, cslbxStickyGroupRowStatus=cslbxStickyGroupRowStatus, cslbxStaticRouteSubnetAddr=cslbxStaticRouteSubnetAddr, cslbxSfarmHttpReturnCodeEntry=cslbxSfarmHttpReturnCodeEntry, cslbxConnInSourcePort=cslbxConnInSourcePort, cslbxFtStateChangeNotifEnabled=cslbxFtStateChangeNotifEnabled, cslbxNotifControlGroup=cslbxNotifControlGroup, cslbxFaultToleranceGroup=cslbxFaultToleranceGroup, cslbxVlanRowStatus=cslbxVlanRowStatus, cslbxHttpReturnCodeMapName=cslbxHttpReturnCodeMapName, cslbxStickyGroupTimeoutActiveConn=cslbxStickyGroupTimeoutActiveConn, cslbxMIBCompliances=cslbxMIBCompliances, cslbxStaticRouteGatewayAddr=cslbxStaticRouteGatewayAddr, cslbxRedirectSvrTotalConns=cslbxRedirectSvrTotalConns, cslbxStickyCookieInsertEnable=cslbxStickyCookieInsertEnable, cslbxStatsDroppedL4PolicyConns=cslbxStatsDroppedL4PolicyConns, cslbxRedirectSvrMaxConns=cslbxRedirectSvrMaxConns, cslbxVlanTable=cslbxVlanTable, cslbxVirtualSSLStickyOffset=cslbxVirtualSSLStickyOffset, cslbxScriptTaskIndex=cslbxScriptTaskIndex, cslbxStatsServerInitConns=cslbxStatsServerInitConns, ciscoSlbExtMIBObjects=ciscoSlbExtMIBObjects, cslbxScriptedProbeGroup=cslbxScriptedProbeGroup, cslbxStatsServerInitHCConns=cslbxStatsServerInitHCConns, SlbProbeAction=SlbProbeAction)
