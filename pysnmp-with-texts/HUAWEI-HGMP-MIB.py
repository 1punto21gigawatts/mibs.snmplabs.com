#
# PySNMP MIB module HUAWEI-HGMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-HGMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:44:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
huaweiUtility, = mibBuilder.importSymbols("HUAWEI-MIB", "huaweiUtility")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, Counter32, NotificationType, iso, Unsigned32, MibIdentifier, Integer32, Counter64, ObjectIdentity, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "NotificationType", "iso", "Unsigned32", "MibIdentifier", "Integer32", "Counter64", "ObjectIdentity", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32")
DisplayString, MacAddress, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention", "RowStatus")
hwCluster = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 6, 7))
hwCluster.setRevisions(('2015-04-11 15:31', '2015-04-07 15:25', '2013-09-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwCluster.setRevisionsDescriptions(('Modify the description of hgmpNTDPExplore and hgmpNTDPHopRange node.', 'Add hgmpNTDPExplore, hgmpNTDPTopoLinkTable and trap node hgmpNTDPTopoChange for NTDP function. Add hwNDPTrunkMemberEnable node for NDP function.', 'Fix the errors checked by a tool.',))
if mibBuilder.loadTexts: hwCluster.setLastUpdated('201504111531Z')
if mibBuilder.loadTexts: hwCluster.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwCluster.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwCluster.setDescription('HUAWEI-HGMP-MIB is defined and owned by Huawei. This MIB includes four parts: the cluster, stack, Neighbor Discovery Protocol (NDP), and Network Topology Discovery Protocol (NTDP). This MIB can monitor the cluster, stack and topology collection.')
hwClusterObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1))
hgmpEventsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 0))
hgmpMemberfailure = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 0, 1)).setObjects(("HUAWEI-HGMP-MIB", "hgmpGrpMemberDeviceId"))
if mibBuilder.loadTexts: hgmpMemberfailure.setStatus('current')
if mibBuilder.loadTexts: hgmpMemberfailure.setDescription('When a cluster member failed, send an SNMP trap to the network manager.')
hgmpMemberRecover = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 0, 2)).setObjects(("HUAWEI-HGMP-MIB", "hgmpGrpMemberDeviceId"))
if mibBuilder.loadTexts: hgmpMemberRecover.setStatus('current')
if mibBuilder.loadTexts: hgmpMemberRecover.setDescription('When a cluster member recovered, send an SNMP trap to the network manager.')
hgmpMemberStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 0, 3)).setObjects(("HUAWEI-HGMP-MIB", "hgmpGrpMemberDeviceId"), ("HUAWEI-HGMP-MIB", "hgmpNTDPCacheClusterRole"))
if mibBuilder.loadTexts: hgmpMemberStatusChange.setStatus('current')
if mibBuilder.loadTexts: hgmpMemberStatusChange.setDescription('When a cluster member status changed, send an SNMP trap to the network manager.')
hgmpNetTopChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 0, 4)).setObjects(("HUAWEI-HGMP-MIB", "hgmpGrpMemberDeviceId"))
if mibBuilder.loadTexts: hgmpNetTopChange.setStatus('current')
if mibBuilder.loadTexts: hgmpNetTopChange.setDescription('When net topology of this cluster change, send a snmp trap to the network management.')
hgmpMemberAdd = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 0, 6)).setObjects(("HUAWEI-HGMP-MIB", "hgmpGrpMemberDeviceId"))
if mibBuilder.loadTexts: hgmpMemberAdd.setStatus('current')
if mibBuilder.loadTexts: hgmpMemberAdd.setDescription('When a cluster member added, send an SNMP trap to the network manager.')
hgmpSetVLANSecurity = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noSecurity", 0), ("security", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpSetVLANSecurity.setStatus('current')
if mibBuilder.loadTexts: hgmpSetVLANSecurity.setDescription('Configure whether to perform the VLAN check inside the cluster. The default value is noSecurity(0).')
hgmpHandShakeInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpHandShakeInterval.setStatus('current')
if mibBuilder.loadTexts: hgmpHandShakeInterval.setDescription('Handshaking interval of the cluster member switches. The default value is 10.')
hgmpHandShakeHoldtime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpHandShakeHoldtime.setStatus('current')
if mibBuilder.loadTexts: hgmpHandShakeHoldtime.setDescription('Holdtime of command switch and member switch in the cluster. The default value is 60.')
hgmpGrpMemberTableChange = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpGrpMemberTableChange.setStatus('current')
if mibBuilder.loadTexts: hgmpGrpMemberTableChange.setDescription('Add 1 to the member list after it changes. The administrator checks if the value has changed. If not, it will not read the list once more. The default value is 0.')
hgmpMemberDisconRate = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpMemberDisconRate.setStatus('current')
if mibBuilder.loadTexts: hgmpMemberDisconRate.setDescription('Disconnection times of the member and command switches divided by member number times 1000. The default value is 0.')
hgmpCmdLanswitchFlag = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpCmdLanswitchFlag.setStatus('current')
if mibBuilder.loadTexts: hgmpCmdLanswitchFlag.setDescription("Command switch flag. The default value is false(0). If the value is set to 1, the cluster name is 'huawei' by default.")
hgmpCmdClusterName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpCmdClusterName.setStatus('current')
if mibBuilder.loadTexts: hgmpCmdClusterName.setDescription('Cluster name of the command switch.')
hgmpMngPriIpSegCMIP = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpMngPriIpSegCMIP.setStatus('current')
if mibBuilder.loadTexts: hgmpMngPriIpSegCMIP.setDescription("The private management IP address of the command switch, which cannot be modified after the cluster has been created. The default value is '0.0.0.0'.")
hgmpMngPriIpMask = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpMngPriIpMask.setStatus('current')
if mibBuilder.loadTexts: hgmpMngPriIpMask.setDescription("The private management IP address mask assigned by the command switch, which cannot be modified after the cluster has been created. The default value is '0.0.0.0'.")
hgmpFtpServer = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpFtpServer.setStatus('current')
if mibBuilder.loadTexts: hgmpFtpServer.setDescription("The cluster members can access the FTP Server through the command switch, which can only be configured and accessed on the command switch. The default value is '0.0.0.0'.")
hgmpTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpTftpServer.setStatus('current')
if mibBuilder.loadTexts: hgmpTftpServer.setDescription("The cluster members can access the TFTP Server through the command switch, which can only be configured and accessed on the command switch. The default value is '0.0.0.0'.")
hgmpSnmpHost = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpSnmpHost.setStatus('current')
if mibBuilder.loadTexts: hgmpSnmpHost.setDescription("The Snmp Host to send the cluster trap packets, which can only be configured and accessed on the command switch. The default value is '0.0.0.0'.")
hgmpLogHost = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpLogHost.setStatus('current')
if mibBuilder.loadTexts: hgmpLogHost.setDescription("Log host of the cluster, which can only be configured and accessed on the command switch. The default value is '0.0.0.0'.")
hgmpGrpMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 14), )
if mibBuilder.loadTexts: hgmpGrpMemberTable.setStatus('current')
if mibBuilder.loadTexts: hgmpGrpMemberTable.setDescription('Table of cluster member switches.')
hgmpGrpMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 14, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpGrpMemberDeviceId"))
if mibBuilder.loadTexts: hgmpGrpMemberEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpGrpMemberEntry.setDescription('Provides information about cluster member entry.')
hgmpGrpMemberDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpGrpMemberDeviceId.setStatus('current')
if mibBuilder.loadTexts: hgmpGrpMemberDeviceId.setDescription('2 bytes address type of the member switch + 2 bytes /0 + MAC address, comprising a character string of hexadecimal numbers.')
hgmpGrpMemberSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpGrpMemberSerial.setStatus('current')
if mibBuilder.loadTexts: hgmpGrpMemberSerial.setDescription('When adding member switch to the cluster, the command switch will assign an unique integer to identify it.')
hgmpGrpMemberIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpGrpMemberIpAddr.setStatus('current')
if mibBuilder.loadTexts: hgmpGrpMemberIpAddr.setDescription('The private IP addresses of the member switches for communication inside the cluster.')
hgmpGrpMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpGrpMemberName.setStatus('current')
if mibBuilder.loadTexts: hgmpGrpMemberName.setDescription('Hostname of the member switch.')
hgmpGrpMemberPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 14, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpGrpMemberPassword.setStatus('current')
if mibBuilder.loadTexts: hgmpGrpMemberPassword.setDescription('Member password for joining a cluster.')
hgmpGrpMemberPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 14, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpGrpMemberPlatform.setStatus('current')
if mibBuilder.loadTexts: hgmpGrpMemberPlatform.setDescription('Set the hardware platform. A null string indicates the information does not exist in the device adjacency table.')
hgmpGrpMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("fault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpGrpMemberStatus.setStatus('current')
if mibBuilder.loadTexts: hgmpGrpMemberStatus.setDescription('Member status on the command switch, used for displaying the network management status.')
hgmpGrpMemberDisconCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpGrpMemberDisconCount.setStatus('current')
if mibBuilder.loadTexts: hgmpGrpMemberDisconCount.setDescription('Count of inside communication disconnections between the member switch and the command switch.')
hgmpGrpMemberEnrollTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpGrpMemberEnrollTime.setStatus('current')
if mibBuilder.loadTexts: hgmpGrpMemberEnrollTime.setDescription('Enrollment time of the member, measured in seconds.')
hgmpGrpMemberOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 14, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpGrpMemberOperate.setStatus('current')
if mibBuilder.loadTexts: hgmpGrpMemberOperate.setDescription('Operation indication field, indicating the operation of adding/removing a member by the network management agent and the status of current line.')
hgmpMemberResetTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 15), )
if mibBuilder.loadTexts: hgmpMemberResetTable.setStatus('current')
if mibBuilder.loadTexts: hgmpMemberResetTable.setDescription('Reset a member switch in the cluster.')
hgmpMemberResetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 15, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpMemberResetMAC"))
if mibBuilder.loadTexts: hgmpMemberResetEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpMemberResetEntry.setDescription('Provides information about resetting member entry.')
hgmpMemberResetMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 15, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpMemberResetMAC.setStatus('current')
if mibBuilder.loadTexts: hgmpMemberResetMAC.setDescription('The management MAC address of the switch to be reset, which is the unique identifier of the switch.')
hgmpMemberEraseflash = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 65535))).clone(namedValues=NamedValues(("noErase", 0), ("erase", 1), ("cannotget", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpMemberEraseflash.setStatus('current')
if mibBuilder.loadTexts: hgmpMemberEraseflash.setDescription('Whether to erase the configuration file from the flash after resetting a switch. When this node is read, cannotget(65535) will be returned.')
hgmpClusterRole = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 16, 17))).clone(namedValues=NamedValues(("roleCMDSW", 1), ("roleMEMBERSW", 2), ("roleBAKSW", 3), ("roleCASW", 16), ("roleUNISW", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpClusterRole.setStatus('current')
if mibBuilder.loadTexts: hgmpClusterRole.setDescription('Role of this switch in a cluster.')
hgmpClusterMaxPoolNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpClusterMaxPoolNum.setStatus('current')
if mibBuilder.loadTexts: hgmpClusterMaxPoolNum.setDescription('Maximum switch members that the cluster can support (including the command switch).')
hgmpClusterCmdSwMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpClusterCmdSwMac.setStatus('current')
if mibBuilder.loadTexts: hgmpClusterCmdSwMac.setDescription('The mac address of command switch. It will be 00:00:00:00:00:00 when not a member of a cluster.')
hgmpRun = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpRun.setStatus('current')
if mibBuilder.loadTexts: hgmpRun.setDescription('Status of the cluster function.')
hgmpClusterAutojoin = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpClusterAutojoin.setStatus('current')
if mibBuilder.loadTexts: hgmpClusterAutojoin.setDescription('Status of the cluster autojoin function. The default value is false(0).')
hgmpClusterDiscAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpClusterDiscAgingTime.setStatus('current')
if mibBuilder.loadTexts: hgmpClusterDiscAgingTime.setDescription('Aging time of the lanswitch in disconnect state. The default value is 0.')
hgmpPlugAndPlayStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 22), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpPlugAndPlayStatus.setStatus('current')
if mibBuilder.loadTexts: hgmpPlugAndPlayStatus.setDescription('Status of the plug and play function. The default value is disabled(2) .')
hgmpMultiMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 23), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpMultiMacAddress.setStatus('current')
if mibBuilder.loadTexts: hgmpMultiMacAddress.setDescription("Multicast MAC address of cluster. The default value is '01:80:C2:00:00:0A'.")
hgmpManageVlan = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpManageVlan.setStatus('current')
if mibBuilder.loadTexts: hgmpManageVlan.setDescription('ID of the management VLAN of the cluster. The default value is 1.')
hgmpSftpServer = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpSftpServer.setStatus('current')
if mibBuilder.loadTexts: hgmpSftpServer.setDescription("The cluster members can access the SFTP Server through the command switch, which can only be configured and accessed on the command switch. The default value is '0.0.0.0'.")
hgmpUnrelatedPortNdpAdminTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 26), )
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpAdminTable.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpAdminTable.setDescription('The table of the commands to set the NDP status on unrelated interfaces of cluster members.')
hgmpUnrelatedPortNdpAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 26, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNdpAdminCmdId"))
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpAdminEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpAdminEntry.setDescription('The entry used to set the NDP status on unrelated interfaces of cluster members.')
hgmpUnrelatedPortNdpAdminCmdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpAdminCmdId.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpAdminCmdId.setDescription('The identifier of the command to set the NDP status on unrelated interfaces of cluster members.')
hgmpUnrelatedPortNdpAdminGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allMembers", 1), ("deviceType", 2), ("memberIdList", 3))).clone('allMembers')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpAdminGroupType.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpAdminGroupType.setDescription('Type of grouping member swithces.')
hgmpUnrelatedPortNdpAdminGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 26, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpAdminGroupValue.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpAdminGroupValue.setDescription('Details about grouping member switches.')
hgmpUnrelatedPortNdpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 26, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpAdminStatus.setDescription('The flag bit identifying whether NDP is enabled or not on unrelated interface on unrelated interfaces of cluster members.')
hgmpUnrelatedPortNdpAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 26, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpAdminRowStatus.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpAdminRowStatus.setDescription('Row status for this table.')
hgmpUnrelatedPortNdpResultTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 27), )
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpResultTable.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpResultTable.setDescription('The result table of enabling or disabling NDP on unrelated interfaces of cluster members.')
hgmpUnrelatedPortNdpResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 27, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNdpAdminCmdId"), (0, "HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNdpResultMemberMac"))
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpResultEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpResultEntry.setDescription('The entry of the result when enabling or disabling NDP on unrelated interfaces of cluster members.')
hgmpUnrelatedPortNdpResultMemberMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 27, 1, 1), MacAddress())
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpResultMemberMac.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpResultMemberMac.setDescription('MAC address of the member switch.')
hgmpUnrelatedPortNdpResultMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpResultMemberId.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpResultMemberId.setDescription('Identifier of the member switch.')
hgmpUnrelatedPortNdpResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("success", 1), ("failure", 2), ("running", 3), ("timeout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpResult.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNdpResult.setDescription('Results returned from member switches.')
hgmpUnrelatedPortNtdpAdminTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 28), )
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpAdminTable.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpAdminTable.setDescription('The table of the commands to set the NTDP status on unrelated interfaces of cluster members.')
hgmpUnrelatedPortNtdpAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 28, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNtdpAdminCmdId"))
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpAdminEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpAdminEntry.setDescription('The entry used to set the NTDP status on unrelated interfaces of cluster members.')
hgmpUnrelatedPortNtdpAdminCmdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpAdminCmdId.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpAdminCmdId.setDescription('The identifier of the command to set the NTDP status on unrelated interfaces of cluster members.')
hgmpUnrelatedPortNtdpAdminGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allMembers", 1), ("deviceType", 2), ("memberIdList", 3))).clone('allMembers')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpAdminGroupType.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpAdminGroupType.setDescription('Type of grouping member swithces.')
hgmpUnrelatedPortNtdpAdminGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 28, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpAdminGroupValue.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpAdminGroupValue.setDescription('Details about grouping member switches.')
hgmpUnrelatedPortNtdpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 28, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpAdminStatus.setDescription('The flag bit identifying whether NTDP is enabled or not on unrelated interface on unrelated interfaces of cluster members.')
hgmpUnrelatedPortNtdpAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 28, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpAdminRowStatus.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpAdminRowStatus.setDescription('Row status for this table.')
hgmpUnrelatedPortNtdpResultTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 29), )
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpResultTable.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpResultTable.setDescription('The result table of enabling or disabling NTDP on unrelated interfaces of cluster members.')
hgmpUnrelatedPortNtdpResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 29, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNtdpAdminCmdId"), (0, "HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNtdpResultMemberMac"))
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpResultEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpResultEntry.setDescription('The entry of the result when enabling or disabling NTDP on unrelated interfaces of cluster members.')
hgmpUnrelatedPortNtdpResultMemberMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 29, 1, 1), MacAddress())
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpResultMemberMac.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpResultMemberMac.setDescription('MAC address of the member switch.')
hgmpUnrelatedPortNtdpResultMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 29, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpResultMemberId.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpResultMemberId.setDescription('Identifier of the member switch.')
hgmpUnrelatedPortNtdpResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("success", 1), ("failure", 2), ("running", 3), ("timeout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpResult.setStatus('current')
if mibBuilder.loadTexts: hgmpUnrelatedPortNtdpResult.setDescription('Results returned from member switches.')
hgmpBatchUpgradeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 30), )
if mibBuilder.loadTexts: hgmpBatchUpgradeTable.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchUpgradeTable.setDescription('Table of batch upgrade commands.')
hgmpBatchUpgradeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 30, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpBatchUpgradeCmdId"))
if mibBuilder.loadTexts: hgmpBatchUpgradeEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchUpgradeEntry.setDescription('Provides the information of batch upgrade entry.')
hgmpBatchUpgradeCmdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: hgmpBatchUpgradeCmdId.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchUpgradeCmdId.setDescription('Identifier of batch upgrade commands.')
hgmpBatchUpgradeGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allMembers", 1), ("deviceType", 2), ("memberIdList", 3))).clone('allMembers')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpBatchUpgradeGroupType.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchUpgradeGroupType.setDescription('Type of grouping member switches.')
hgmpBatchUpgradeGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 30, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpBatchUpgradeGroupValue.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchUpgradeGroupValue.setDescription('Details about grouping member switches.')
hgmpBatchUpgradeFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("versionFile", 1), ("patchFile", 2), ("configFile", 3), ("pafFile", 4), ("licenseFile", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpBatchUpgradeFileType.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchUpgradeFileType.setDescription('Type of the file to be upgraded.')
hgmpBatchUpgradeFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 30, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpBatchUpgradeFileName.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchUpgradeFileName.setDescription('Path of the file to be upgraded.')
hgmpBatchUpgradeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 30, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpBatchUpgradeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchUpgradeRowStatus.setDescription('Row status for this table.')
hgmpBatchUpgradeResultTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 31), )
if mibBuilder.loadTexts: hgmpBatchUpgradeResultTable.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchUpgradeResultTable.setDescription('Results of batch commands returned from member switches.')
hgmpBatchUpgradeResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 31, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpBatchUpgradeCmdId"), (0, "HUAWEI-HGMP-MIB", "hgmpBatchUpgradeResultMemberMac"))
if mibBuilder.loadTexts: hgmpBatchUpgradeResultEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchUpgradeResultEntry.setDescription('Provides the result of batch upgrade entry. ')
hgmpBatchUpgradeResultMemberMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 31, 1, 1), MacAddress())
if mibBuilder.loadTexts: hgmpBatchUpgradeResultMemberMac.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchUpgradeResultMemberMac.setDescription('MAC address of the member switch.')
hgmpBatchUpgradeResultMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpBatchUpgradeResultMemberId.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchUpgradeResultMemberId.setDescription('Identifier of the member switch.')
hgmpBatchUpgradeResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("success", 1), ("failure", 2), ("running", 3), ("timeout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpBatchUpgradeResult.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchUpgradeResult.setDescription('Results returned from member switchs.')
hgmpBatchRebootTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 32), )
if mibBuilder.loadTexts: hgmpBatchRebootTable.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchRebootTable.setDescription('Table of commands for member switch reboot.')
hgmpBatchRebootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 32, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpBatchRebootCmdId"))
if mibBuilder.loadTexts: hgmpBatchRebootEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchRebootEntry.setDescription('Provides the information of member reboot entry.')
hgmpBatchRebootCmdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: hgmpBatchRebootCmdId.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchRebootCmdId.setDescription('Identifier of the commands for member switch reboot.')
hgmpBatchRebootGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allMembers", 1), ("deviceType", 2), ("memberIdList", 3))).clone('allMembers')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpBatchRebootGroupType.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchRebootGroupType.setDescription('Type of grouping member swithces.')
hgmpBatchRebootGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 32, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpBatchRebootGroupValue.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchRebootGroupValue.setDescription('Details about grouping member switches.')
hgmpBatchRebootRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 32, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpBatchRebootRowStatus.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchRebootRowStatus.setDescription('Row status for this table.')
hgmpBatchRebootResultTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 33), )
if mibBuilder.loadTexts: hgmpBatchRebootResultTable.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchRebootResultTable.setDescription('Results of reboot command returned from member switches.')
hgmpBatchRebootResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 33, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpBatchRebootCmdId"), (0, "HUAWEI-HGMP-MIB", "hgmpBatchRebootResultMemberMac"))
if mibBuilder.loadTexts: hgmpBatchRebootResultEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchRebootResultEntry.setDescription('Provides the result of member reboot entry.')
hgmpBatchRebootResultMemberMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 33, 1, 1), MacAddress())
if mibBuilder.loadTexts: hgmpBatchRebootResultMemberMac.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchRebootResultMemberMac.setDescription('MAC address of the member switch.')
hgmpBatchRebootResultMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpBatchRebootResultMemberId.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchRebootResultMemberId.setDescription('Identifier of the member switch.')
hgmpBatchRebootResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("success", 1), ("failure", 2), ("running", 3), ("timeout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpBatchRebootResult.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchRebootResult.setDescription('Results returned from member switches.')
hgmpBatchSaveTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 34), )
if mibBuilder.loadTexts: hgmpBatchSaveTable.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSaveTable.setDescription('The table of saving configuration files on cluster members.')
hgmpBatchSaveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 34, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpBatchSaveCmdId"))
if mibBuilder.loadTexts: hgmpBatchSaveEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSaveEntry.setDescription('The entry of saving configuration files on cluster members.')
hgmpBatchSaveCmdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: hgmpBatchSaveCmdId.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSaveCmdId.setDescription('The identifier of the commands to save configuration files on cluster members.')
hgmpBatchSaveGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allMembers", 1), ("deviceType", 2), ("memberIdList", 3))).clone('allMembers')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpBatchSaveGroupType.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSaveGroupType.setDescription('Type of grouping member swithces.')
hgmpBatchSaveGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 34, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpBatchSaveGroupValue.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSaveGroupValue.setDescription('Details about grouping member switches.')
hgmpBatchSaveRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 34, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpBatchSaveRowStatus.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSaveRowStatus.setDescription('Row status for this table.')
hgmpBatchSaveResultTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 35), )
if mibBuilder.loadTexts: hgmpBatchSaveResultTable.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSaveResultTable.setDescription('The results of saving configuration files on cluster members.')
hgmpBatchSaveResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 35, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpBatchSaveCmdId"), (0, "HUAWEI-HGMP-MIB", "hgmpBatchSaveResultMemberMac"))
if mibBuilder.loadTexts: hgmpBatchSaveResultEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSaveResultEntry.setDescription('The entry of result when saving configuration files on cluster members.')
hgmpBatchSaveResultMemberMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 35, 1, 1), MacAddress())
if mibBuilder.loadTexts: hgmpBatchSaveResultMemberMac.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSaveResultMemberMac.setDescription('MAC address of the member switch.')
hgmpBatchSaveResultMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 35, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpBatchSaveResultMemberId.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSaveResultMemberId.setDescription('Identifier of the member switch.')
hgmpBatchSaveResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("success", 1), ("failure", 2), ("running", 3), ("timeout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpBatchSaveResult.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSaveResult.setDescription('Results returned from member switches.')
hgmpBatchSynchronizeCfgFileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 36), )
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileTable.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileTable.setDescription('The table of synchronizing configuration files on cluster members.')
hgmpBatchSynchronizeCfgFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 36, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpBatchSynchronizeCfgFileCmdId"))
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileEntry.setDescription('The entry of synchronizing configuration files on cluster members.')
hgmpBatchSynchronizeCfgFileCmdId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileCmdId.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileCmdId.setDescription('The identifier of the command of synchronizing configuration files on cluster members.')
hgmpBatchSynchronizeCfgFileGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 36, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allMembers", 1), ("deviceType", 2), ("memberIdList", 3))).clone('allMembers')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileGroupType.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileGroupType.setDescription('Type of grouping member swithces.')
hgmpBatchSynchronizeCfgFileGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 36, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileGroupValue.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileGroupValue.setDescription('Details about grouping member switches.')
hgmpBatchSynchronizeCfgFileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 36, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileRowStatus.setDescription('Row status for this table.')
hgmpBatchSynchronizeCfgFileResultTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 37), )
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileResultTable.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileResultTable.setDescription('The result of synchronizing configuration files on cluster members.')
hgmpBatchSynchronizeCfgFileResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 37, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpBatchSynchronizeCfgFileCmdId"), (0, "HUAWEI-HGMP-MIB", "hgmpBatchSynchronizeCfgFileResultMemberMac"))
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileResultEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileResultEntry.setDescription('The entry of result when synchronizing configuration files on cluster members.')
hgmpBatchSynchronizeCfgFileResultMemberMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 37, 1, 1), MacAddress())
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileResultMemberMac.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileResultMemberMac.setDescription('MAC address of the member switch.')
hgmpBatchSynchronizeCfgFileResultMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 37, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileResultMemberId.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileResultMemberId.setDescription('Identifier of the member switch.')
hgmpBatchSynchronizeCfgFileResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 37, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("success", 1), ("failure", 2), ("running", 3), ("timeout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileResult.setStatus('current')
if mibBuilder.loadTexts: hgmpBatchSynchronizeCfgFileResult.setDescription('Results returned from member switches.')
hgmpMemberRebootTimeoutValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpMemberRebootTimeoutValue.setStatus('current')
if mibBuilder.loadTexts: hgmpMemberRebootTimeoutValue.setDescription('Timeout time of the member reboot operation (in seconds). The default value is 360 seconds.')
hgmpClusterVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v2", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpClusterVersion.setStatus('current')
if mibBuilder.loadTexts: hgmpClusterVersion.setDescription('Configure the cluster version. The default value is v2c(2).')
hwStackObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2))
hgmpStackEventsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 0))
hgmpStackMemberfailure = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 0, 1)).setObjects(("HUAWEI-HGMP-MIB", "hgmpStackMemberDeviceId"))
if mibBuilder.loadTexts: hgmpStackMemberfailure.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMemberfailure.setDescription('When a stack member failed, send an SNMP trap to the network manager.')
hgmpStackMemberRecover = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 0, 2)).setObjects(("HUAWEI-HGMP-MIB", "hgmpStackMemberDeviceId"))
if mibBuilder.loadTexts: hgmpStackMemberRecover.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMemberRecover.setDescription('When a stack member recovered, send an SNMP trap to the network manager.')
hgmpStackMemberStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 0, 3)).setObjects(("HUAWEI-HGMP-MIB", "hgmpStackMemberDeviceId"), ("HUAWEI-HGMP-MIB", "hgmpNTDPCacheClusterRole"))
if mibBuilder.loadTexts: hgmpStackMemberStatusChange.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMemberStatusChange.setDescription('When a stack member status changed, send an SNMP trap to the network manager.')
hgmpStackMemberTableChange = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpStackMemberTableChange.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMemberTableChange.setDescription('Change identifier of the stack member table. The default value is 0.')
hgmpStackMemberDisconRate = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpStackMemberDisconRate.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMemberDisconRate.setDescription('Disconnection rate of the stack member switches. The default value is 0.')
hgmpMainLanswitchFlag = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpMainLanswitchFlag.setStatus('current')
if mibBuilder.loadTexts: hgmpMainLanswitchFlag.setDescription('Main switch flag. The default value is false(0).')
hgmpStackIpPoolStartIP = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpStackIpPoolStartIP.setStatus('current')
if mibBuilder.loadTexts: hgmpStackIpPoolStartIP.setDescription("The first address of management IP network segment assigned by the master switch, which cannot be modified in the case that there is IP address assignment. The default value is '0.0.0.0'.")
hgmpStackIpPoolLength = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpStackIpPoolLength.setStatus('current')
if mibBuilder.loadTexts: hgmpStackIpPoolLength.setDescription('The length of the management IP segment assigned by the master switch, which cannot be modified if there is IP address assignment. The default value is 17.')
hgmpStackMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 6), )
if mibBuilder.loadTexts: hgmpStackMemberTable.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMemberTable.setDescription('Stack member table.')
hgmpStackMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 6, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpStackMemberDeviceId"))
if mibBuilder.loadTexts: hgmpStackMemberEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMemberEntry.setDescription('Provides information about the stack member entry.')
hgmpStackMemberDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpStackMemberDeviceId.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMemberDeviceId.setDescription('2 bytes address type of the switch + 2 bytes/0 + MAC address, comprising a hexadecimal number string.')
hgmpStackMemberSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpStackMemberSerial.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMemberSerial.setDescription('When adding a member switch to the stack, the master switch will assign a unique integer to identify it.')
hgmpStackMemberIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpStackMemberIpAddr.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMemberIpAddr.setDescription('The private member IP address for the communication inside the stack.')
hgmpStackMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 6, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpStackMemberName.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMemberName.setDescription('Hostname of the member switch.')
hgmpStackMemberPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 6, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpStackMemberPassword.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMemberPassword.setDescription('Member password for joining a stack.')
hgmpStackMemberPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpStackMemberPlatform.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMemberPlatform.setDescription('Set the hardware platform. A null string indicates the information does not exist in the device adjacency table.')
hgmpStackMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("fault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpStackMemberStatus.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMemberStatus.setDescription('Member status on the master switch, used for displaying the network management status. The default value is fault.')
hgmpStackMemberDisconCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpStackMemberDisconCount.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMemberDisconCount.setDescription('Count of inside communication disconnections between the member switch and the main switch.')
hgmpStackMemberEnrollTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpStackMemberEnrollTime.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMemberEnrollTime.setDescription('Enrollment time of the member, measured in seconds.')
hgmpStackRole = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 16, 17))).clone(namedValues=NamedValues(("roleCMDSW", 1), ("roleMEMBERSW", 2), ("roleBAKSW", 3), ("roleCASW", 16), ("roleUNISW", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpStackRole.setStatus('current')
if mibBuilder.loadTexts: hgmpStackRole.setDescription('Role of this switch in a stack. The default value is roleCASW(16).')
hgmpStackMaxPoolNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpStackMaxPoolNum.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMaxPoolNum.setDescription('Maximum switch members in a stack that the switch supports (including the main switch).')
hgmpStackMainSwMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpStackMainSwMac.setStatus('current')
if mibBuilder.loadTexts: hgmpStackMainSwMac.setDescription('The MAC address of the main switch. It will be 00:00:00:00:00:00 when not a member of a stack.')
hgmpStackIpPoolMask = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 2, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpStackIpPoolMask.setStatus('current')
if mibBuilder.loadTexts: hgmpStackIpPoolMask.setDescription("The mask of the management IP segment assigned by the master switch, which cannot be modified if there is IP address assignment. The default value is '255.255.0.0 '.")
hwNTDPObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4))
hgmpNTDPCollectTopTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpNTDPCollectTopTime.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPCollectTopTime.setDescription('Topology collection interval of the command switch of the cluster, measured in minutes. The default value is 0.')
hgmpNTDPHopRange = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpNTDPHopRange.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPHopRange.setDescription('Range of the topology collection of the command switch. The maximum value of this object may vary with different types of products.')
hgmpNTDPRun = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpNTDPRun.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPRun.setDescription('Status of the NTDP function.')
hgmpNTDPPortDelay = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpNTDPPortDelay.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPPortDelay.setDescription('Set the delay to forward the topology request via the ports, measured in milliseconds. The default value is 20.')
hgmpNTDPHopDelay = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpNTDPHopDelay.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPHopDelay.setDescription('Set the delay to forward the topology request from each hop, measured in milliseconds. The default value is 200.')
hgmpNTDPLastTopCollectDuration = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPLastTopCollectDuration.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPLastTopCollectDuration.setDescription('Duration of the latest overall topology collection, a performance count measured in milliseconds. The default value is 0.')
hgmpNTDPCacheChange = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPCacheChange.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPCacheChange.setDescription('Add 1 when the device table changes. The network administrator will check if it has changed before accessing the table. If it has not changed, he will not access again. The default value is 0.')
hgmpNTDPTOPTableChange = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPTOPTableChange.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTOPTableChange.setDescription('Add 1 when the topology table changes. The network administrator will check if it has changed before accessing the table. If it has not changed, he will not access again. The default value is 0.')
hgmpNTDPInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 9), )
if mibBuilder.loadTexts: hgmpNTDPInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPInterfaceTable.setDescription("Status of NTDP function on the switch's port.")
hgmpNTDPInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 9, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpNTDPInterfaceIfIndex"))
if mibBuilder.loadTexts: hgmpNTDPInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPInterfaceEntry.setDescription("Provides information about the NTDP function on the switch's port.")
hgmpNTDPInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPInterfaceIfIndex.setDescription('Unique identifier of an interface of the device.')
hgmpNTDPInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpNTDPInterfaceEnable.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPInterfaceEnable.setDescription('If it is true, the device will send and receive the NTDP packets via the interface. To disable the NTDP function on the interface, set the entry to false(0).')
hgmpNTDPCacheTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 10), )
if mibBuilder.loadTexts: hgmpNTDPCacheTable.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPCacheTable.setDescription('Access information about the switch from the topology table.')
hgmpNTDPCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 10, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpNTDPCacheHashIndex"), (0, "HUAWEI-HGMP-MIB", "hgmpNTDPCacheDeviceID"))
if mibBuilder.loadTexts: hgmpNTDPCacheEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPCacheEntry.setDescription('Provides information about the switch from the topology table.')
hgmpNTDPCacheHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPCacheHashIndex.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPCacheHashIndex.setDescription('NTDP information is saved in a HASH table on the command switch. Using DeviceID as an index will lead to the comparison of a large number of character strings, which puts too many burdens on the command switch. A HASHIndex is added to reduce the character string comparison to the least range.')
hgmpNTDPCacheDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPCacheDeviceID.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPCacheDeviceID.setDescription('2 bytes address type of the member switch + 2 bytes /0 + MAC address, comprising as a character string of the hexadecimal number.')
hgmpNTDPCacheClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 10, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPCacheClusterName.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPCacheClusterName.setDescription('Name of the cluster including the device.')
hgmpNTDPCacheClusterRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 16, 17))).clone(namedValues=NamedValues(("roleCOSW", 1), ("roleMSW", 2), ("roleBKSW", 3), ("roleCASW", 16), ("roleUNISW", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPCacheClusterRole.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPCacheClusterRole.setDescription('Cluster role of the current device, which can be a command switch(0X01), member switch(0X02), backup switch(0X03), candidate switch(0X10) or an independent switch(incapable of cluster member)(0X11). The default value is 17.')
hgmpNTDPCacheCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPCacheCapabilities.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPCacheCapabilities.setDescription('The capabilities of the device. Zero indicates that the field was not included in the latest NTDP packet. The default value is 0.')
hgmpNTDPCacheVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 10, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPCacheVersion.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPCacheVersion.setDescription('The version information about the corresponding device. A null string indicates that the field was not included in the latest NTDP packet.')
hgmpNTDPCachePlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 10, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPCachePlatform.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPCachePlatform.setDescription('Hardware platform. A null string indicates that the field was not included in the latest NTDP packet.')
hgmpNTDPCacheMngVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPCacheMngVLAN.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPCacheMngVLAN.setDescription('The management VLAN ID of a device. The default value is 1.')
hgmpNTDPCacheHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPCacheHop.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPCacheHop.setDescription('Hops to this switch.')
hgmpNTDPTopTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 11), )
if mibBuilder.loadTexts: hgmpNTDPTopTable.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopTable.setDescription('Access the topology structure collected by the NTDP. ')
hgmpNTDPTopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 11, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpNTDPTopHashIndex"), (0, "HUAWEI-HGMP-MIB", "hgmpNTDPTopEdgeStartDevID"), (0, "HUAWEI-HGMP-MIB", "hgmpNTDPTopEdgeIndex"))
if mibBuilder.loadTexts: hgmpNTDPTopEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopEntry.setDescription('Provides information about the topology structure collected by the NTDP.')
hgmpNTDPTopHashIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPTopHashIndex.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopHashIndex.setDescription('NTDP information is saved in a HASH table on the command switch. Using DeviceID as an index will lead to the comparison of a large number of character strings, which puts too many burdens on the command switch. A HASHIndex is added to reduce the character string comparison to the least range.')
hgmpNTDPTopEdgeStartDevID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPTopEdgeStartDevID.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopEdgeStartDevID.setDescription('2 bytes address type of the member switch + 2 bytes /0 + MAC address, comprising a character string of the hexadecimal number.')
hgmpNTDPTopEdgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPTopEdgeIndex.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopEdgeIndex.setDescription('Edge index of this entry in the data structure.')
hgmpNTDPTopEdgeEndDevID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPTopEdgeEndDevID.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopEdgeEndDevID.setDescription('2 bytes address type of the member switch + 2 bytes /0 + MAC address, comprising a character string of the hexadecimal number.')
hgmpNTDPTopEdgeStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPTopEdgeStartPort.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopEdgeStartPort.setDescription('The number of the first port of a topology edge. Interface type + card number / slot number / sequence number.')
hgmpNTDPTopEdgeStartPortFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPTopEdgeStartPortFullDuplex.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopEdgeStartPortFullDuplex.setDescription('The full-duplex status of the first port on a topology edge. The default value is half.')
hgmpNTDPTopEdgeStartPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPTopEdgeStartPortSpeed.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopEdgeStartPortSpeed.setDescription('The speed of the first port on a topology edge. The default value is 0.')
hgmpNTDPTopEdgeEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 11, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPTopEdgeEndPort.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopEdgeEndPort.setDescription('The number of the last port of a topology edge. Interface type + card number / slot number / sequence number.')
hgmpNTDPTopEdgeStartPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPTopEdgeStartPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopEdgeStartPortIfIndex.setDescription('The interface index of the start port.')
hgmpNTDPTopEdgeEndPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPTopEdgeEndPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopEdgeEndPortIfIndex.setDescription('The iterface index of the end port.')
hgmpNTDPExplore = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("start", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgmpNTDPExplore.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPExplore.setDescription('The value of this object identifies whether to start collecting topology information. 1 indicates to start collecting topology information. 0 is the default value, indicating doing nothing. The get operation always returns 0.')
hgmpNTDPTopoLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 13), )
if mibBuilder.loadTexts: hgmpNTDPTopoLinkTable.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopoLinkTable.setDescription('This object indicates the topology link table collected using NTDP.')
hgmpNTDPTopoLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 13, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hgmpNTDPTopoLocalDeviceID"), (0, "HUAWEI-HGMP-MIB", "hgmpNTDPTopoLocalPortName"), (0, "HUAWEI-HGMP-MIB", "hgmpNTDPTopoNbrDeviceID"), (0, "HUAWEI-HGMP-MIB", "hgmpNTDPTopoNbrPortName"))
if mibBuilder.loadTexts: hgmpNTDPTopoLinkEntry.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopoLinkEntry.setDescription('This object indicates the topology link information collected using NTDP.')
hgmpNTDPTopoLocalDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 13, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)))
if mibBuilder.loadTexts: hgmpNTDPTopoLocalDeviceID.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopoLocalDeviceID.setDescription('This object indicates the ID of the local device. This ID is a hexadecimal string that comprises 2 bytes address type of the member switch, 2 bytes /0, and MAC address.')
hgmpNTDPTopoLocalPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: hgmpNTDPTopoLocalPortName.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopoLocalPortName.setDescription('This object indicates the name of the local port.')
hgmpNTDPTopoNbrDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 13, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)))
if mibBuilder.loadTexts: hgmpNTDPTopoNbrDeviceID.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopoNbrDeviceID.setDescription('This object indicates the ID of the neighbor device. This ID is a hexadecimal string that comprises 2 bytes address type of the member switch, 2 bytes /0, and MAC address.')
hgmpNTDPTopoNbrPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 13, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: hgmpNTDPTopoNbrPortName.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopoNbrPortName.setDescription('This object indicates the name of the neighbor port.')
hgmpNTDPTopoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgmpNTDPTopoLinkStatus.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopoLinkStatus.setDescription('This object indicates the topology link status.')
hgmpNTDPNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 14))
hgmpNTDPTopoChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 7, 4, 14, 1))
if mibBuilder.loadTexts: hgmpNTDPTopoChange.setStatus('current')
if mibBuilder.loadTexts: hgmpNTDPTopoChange.setDescription('This object indicates that an SNMP trap is sent to the NMS when the NTDP topology is changed.')
hwNDPObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5))
hwNDPStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNDPStatus.setStatus('current')
if mibBuilder.loadTexts: hwNDPStatus.setDescription('NDP protocol module enable flag.')
hwNDPHelloTimer = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNDPHelloTimer.setStatus('current')
if mibBuilder.loadTexts: hwNDPHelloTimer.setDescription('NDP packet transmission interval, measured in seconds. The default value is 60.')
hwNDPAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNDPAgingTime.setStatus('current')
if mibBuilder.loadTexts: hwNDPAgingTime.setDescription('How long NDP information about the local switch can be hold in the adjacent switch, measured in seconds. The default value is 180.')
hwNDPChange = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNDPChange.setStatus('current')
if mibBuilder.loadTexts: hwNDPChange.setDescription('Change identifier of the Neighbor table.')
hwNDPPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 5), )
if mibBuilder.loadTexts: hwNDPPortTable.setStatus('current')
if mibBuilder.loadTexts: hwNDPPortTable.setDescription("Status of NDP function on the switch's port.")
hwNDPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 5, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hwNDPIfIndex"))
if mibBuilder.loadTexts: hwNDPPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwNDPPortEntry.setDescription("Provides information about the NDP function on the switch's port.")
hwNDPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNDPIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwNDPIfIndex.setDescription('Unique identifier of an interface of the device.')
hwNDPPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNDPPortStatus.setStatus('current')
if mibBuilder.loadTexts: hwNDPPortStatus.setDescription('If it is enabled, the device will send and receive NDP packets via the interface. To disable the NDP function on the interface, set the entry to false(0).')
hwNDPPortNbTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 6), )
if mibBuilder.loadTexts: hwNDPPortNbTable.setStatus('current')
if mibBuilder.loadTexts: hwNDPPortNbTable.setDescription('Table of NDP neighbor information.')
hwNDPPortNbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 6, 1), ).setIndexNames((0, "HUAWEI-HGMP-MIB", "hwNDPIfIndex"), (0, "HUAWEI-HGMP-MIB", "hwNDPPortNbDeviceId"), (0, "HUAWEI-HGMP-MIB", "hwNDPPortNbPortName"))
if mibBuilder.loadTexts: hwNDPPortNbEntry.setStatus('current')
if mibBuilder.loadTexts: hwNDPPortNbEntry.setDescription('Provides neighbor information about NDP.')
hwNDPPortNbDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNDPPortNbDeviceId.setStatus('current')
if mibBuilder.loadTexts: hwNDPPortNbDeviceId.setDescription('2 bytes address type of the member switch + 2 bytes /0 + MAC address, comprising a character string of the hexadecimal number.')
hwNDPPortNbPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNDPPortNbPortName.setStatus('current')
if mibBuilder.loadTexts: hwNDPPortNbPortName.setDescription('Unique identifier of a port. A null string indicates that the field was not included in the latest NDP packet. Interface type + card number / slot number / sequence number.')
hwNDPPortNbDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 6, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNDPPortNbDeviceName.setStatus('current')
if mibBuilder.loadTexts: hwNDPPortNbDeviceName.setDescription('Device name. A null string indicates that the field was not included in the latest NDP packet.')
hwNDPPortNbPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNDPPortNbPortMode.setStatus('current')
if mibBuilder.loadTexts: hwNDPPortNbPortMode.setDescription('The neighbor port duplex mode. ')
hwNDPPortNbProductVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 6, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNDPPortNbProductVer.setStatus('current')
if mibBuilder.loadTexts: hwNDPPortNbProductVer.setDescription('Product version. A null string indicates that the field was not included in the latest NDP packet.')
hwNDPPortNbHardVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNDPPortNbHardVer.setStatus('current')
if mibBuilder.loadTexts: hwNDPPortNbHardVer.setDescription('Hardware version. A null string indicates that the field was not included in the latest NDP packet.')
hwNDPPortNbBootromVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 6, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNDPPortNbBootromVer.setStatus('current')
if mibBuilder.loadTexts: hwNDPPortNbBootromVer.setDescription('Bootrom version. A null string indicates that the field was not included in the latest NDP packet.')
hwNDPPortNbSoftVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 6, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNDPPortNbSoftVer.setStatus('current')
if mibBuilder.loadTexts: hwNDPPortNbSoftVer.setDescription('Software version. A null string indicates that the field was not included in the latest NDP packet.')
hwNDPPortNbAgingtime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNDPPortNbAgingtime.setStatus('current')
if mibBuilder.loadTexts: hwNDPPortNbAgingtime.setDescription('How long NDP information about the local switch can be hold in the adjacent switch, measured in seconds.')
hwNDPTrunkMemberEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 7, 5, 7), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNDPTrunkMemberEnable.setStatus('current')
if mibBuilder.loadTexts: hwNDPTrunkMemberEnable.setDescription('The value of this object identifies whether to enable neighbor discovery on trunk member interfaces.')
hwClusterConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 7, 6))
hwClusterGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 7, 6, 1))
currentObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 7, 6, 1, 1)).setObjects(("HUAWEI-HGMP-MIB", "hgmpSetVLANSecurity"), ("HUAWEI-HGMP-MIB", "hgmpHandShakeInterval"), ("HUAWEI-HGMP-MIB", "hgmpHandShakeHoldtime"), ("HUAWEI-HGMP-MIB", "hgmpGrpMemberTableChange"), ("HUAWEI-HGMP-MIB", "hgmpMemberDisconRate"), ("HUAWEI-HGMP-MIB", "hgmpCmdLanswitchFlag"), ("HUAWEI-HGMP-MIB", "hgmpCmdClusterName"), ("HUAWEI-HGMP-MIB", "hgmpMngPriIpSegCMIP"), ("HUAWEI-HGMP-MIB", "hgmpMngPriIpMask"), ("HUAWEI-HGMP-MIB", "hgmpFtpServer"), ("HUAWEI-HGMP-MIB", "hgmpTftpServer"), ("HUAWEI-HGMP-MIB", "hgmpSnmpHost"), ("HUAWEI-HGMP-MIB", "hgmpLogHost"), ("HUAWEI-HGMP-MIB", "hgmpGrpMemberDeviceId"), ("HUAWEI-HGMP-MIB", "hgmpGrpMemberSerial"), ("HUAWEI-HGMP-MIB", "hgmpGrpMemberIpAddr"), ("HUAWEI-HGMP-MIB", "hgmpGrpMemberName"), ("HUAWEI-HGMP-MIB", "hgmpGrpMemberPassword"), ("HUAWEI-HGMP-MIB", "hgmpGrpMemberPlatform"), ("HUAWEI-HGMP-MIB", "hgmpGrpMemberStatus"), ("HUAWEI-HGMP-MIB", "hgmpGrpMemberDisconCount"), ("HUAWEI-HGMP-MIB", "hgmpGrpMemberEnrollTime"), ("HUAWEI-HGMP-MIB", "hgmpGrpMemberOperate"), ("HUAWEI-HGMP-MIB", "hgmpMemberResetMAC"), ("HUAWEI-HGMP-MIB", "hgmpMemberEraseflash"), ("HUAWEI-HGMP-MIB", "hgmpClusterRole"), ("HUAWEI-HGMP-MIB", "hgmpClusterMaxPoolNum"), ("HUAWEI-HGMP-MIB", "hgmpClusterCmdSwMac"), ("HUAWEI-HGMP-MIB", "hgmpRun"), ("HUAWEI-HGMP-MIB", "hgmpClusterAutojoin"), ("HUAWEI-HGMP-MIB", "hgmpClusterDiscAgingTime"), ("HUAWEI-HGMP-MIB", "hgmpPlugAndPlayStatus"), ("HUAWEI-HGMP-MIB", "hgmpMultiMacAddress"), ("HUAWEI-HGMP-MIB", "hgmpManageVlan"), ("HUAWEI-HGMP-MIB", "hgmpSftpServer"), ("HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNdpAdminGroupType"), ("HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNdpAdminGroupValue"), ("HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNdpAdminStatus"), ("HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNdpAdminRowStatus"), ("HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNdpResultMemberId"), ("HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNdpResult"), ("HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNtdpAdminGroupType"), ("HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNtdpAdminGroupValue"), ("HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNtdpAdminStatus"), ("HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNtdpAdminRowStatus"), ("HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNtdpResultMemberId"), ("HUAWEI-HGMP-MIB", "hgmpUnrelatedPortNtdpResult"), ("HUAWEI-HGMP-MIB", "hgmpBatchUpgradeGroupType"), ("HUAWEI-HGMP-MIB", "hgmpBatchUpgradeGroupValue"), ("HUAWEI-HGMP-MIB", "hgmpBatchUpgradeFileType"), ("HUAWEI-HGMP-MIB", "hgmpBatchUpgradeFileName"), ("HUAWEI-HGMP-MIB", "hgmpBatchUpgradeRowStatus"), ("HUAWEI-HGMP-MIB", "hgmpBatchUpgradeResultMemberId"), ("HUAWEI-HGMP-MIB", "hgmpBatchUpgradeResult"), ("HUAWEI-HGMP-MIB", "hgmpBatchRebootGroupType"), ("HUAWEI-HGMP-MIB", "hgmpBatchRebootGroupValue"), ("HUAWEI-HGMP-MIB", "hgmpBatchRebootRowStatus"), ("HUAWEI-HGMP-MIB", "hgmpBatchRebootResultMemberId"), ("HUAWEI-HGMP-MIB", "hgmpBatchRebootResult"), ("HUAWEI-HGMP-MIB", "hgmpBatchSaveGroupType"), ("HUAWEI-HGMP-MIB", "hgmpBatchSaveGroupValue"), ("HUAWEI-HGMP-MIB", "hgmpBatchSaveRowStatus"), ("HUAWEI-HGMP-MIB", "hgmpBatchSaveResultMemberId"), ("HUAWEI-HGMP-MIB", "hgmpBatchSaveResult"), ("HUAWEI-HGMP-MIB", "hgmpBatchSynchronizeCfgFileGroupType"), ("HUAWEI-HGMP-MIB", "hgmpBatchSynchronizeCfgFileGroupValue"), ("HUAWEI-HGMP-MIB", "hgmpBatchSynchronizeCfgFileRowStatus"), ("HUAWEI-HGMP-MIB", "hgmpBatchSynchronizeCfgFileResultMemberId"), ("HUAWEI-HGMP-MIB", "hgmpBatchSynchronizeCfgFileResult"), ("HUAWEI-HGMP-MIB", "hgmpMemberRebootTimeoutValue"), ("HUAWEI-HGMP-MIB", "hgmpStackMemberTableChange"), ("HUAWEI-HGMP-MIB", "hgmpStackMemberDisconRate"), ("HUAWEI-HGMP-MIB", "hgmpMainLanswitchFlag"), ("HUAWEI-HGMP-MIB", "hgmpStackIpPoolStartIP"), ("HUAWEI-HGMP-MIB", "hgmpStackIpPoolLength"), ("HUAWEI-HGMP-MIB", "hgmpStackMemberDeviceId"), ("HUAWEI-HGMP-MIB", "hgmpStackMemberSerial"), ("HUAWEI-HGMP-MIB", "hgmpStackMemberIpAddr"), ("HUAWEI-HGMP-MIB", "hgmpStackMemberName"), ("HUAWEI-HGMP-MIB", "hgmpStackMemberPassword"), ("HUAWEI-HGMP-MIB", "hgmpStackMemberPlatform"), ("HUAWEI-HGMP-MIB", "hgmpStackMemberStatus"), ("HUAWEI-HGMP-MIB", "hgmpStackMemberDisconCount"), ("HUAWEI-HGMP-MIB", "hgmpStackMemberEnrollTime"), ("HUAWEI-HGMP-MIB", "hgmpStackRole"), ("HUAWEI-HGMP-MIB", "hgmpStackMaxPoolNum"), ("HUAWEI-HGMP-MIB", "hgmpStackMainSwMac"), ("HUAWEI-HGMP-MIB", "hgmpStackIpPoolMask"), ("HUAWEI-HGMP-MIB", "hgmpNTDPCollectTopTime"), ("HUAWEI-HGMP-MIB", "hgmpNTDPHopRange"), ("HUAWEI-HGMP-MIB", "hgmpNTDPRun"), ("HUAWEI-HGMP-MIB", "hgmpNTDPPortDelay"), ("HUAWEI-HGMP-MIB", "hgmpNTDPHopDelay"), ("HUAWEI-HGMP-MIB", "hgmpNTDPLastTopCollectDuration"), ("HUAWEI-HGMP-MIB", "hgmpNTDPCacheChange"), ("HUAWEI-HGMP-MIB", "hgmpNTDPTOPTableChange"), ("HUAWEI-HGMP-MIB", "hgmpNTDPInterfaceIfIndex"), ("HUAWEI-HGMP-MIB", "hgmpNTDPInterfaceEnable"), ("HUAWEI-HGMP-MIB", "hgmpNTDPCacheHashIndex"), ("HUAWEI-HGMP-MIB", "hgmpNTDPCacheDeviceID"), ("HUAWEI-HGMP-MIB", "hgmpNTDPCacheClusterName"), ("HUAWEI-HGMP-MIB", "hgmpNTDPCacheClusterRole"), ("HUAWEI-HGMP-MIB", "hgmpNTDPCacheCapabilities"), ("HUAWEI-HGMP-MIB", "hgmpNTDPCacheVersion"), ("HUAWEI-HGMP-MIB", "hgmpNTDPCachePlatform"), ("HUAWEI-HGMP-MIB", "hgmpNTDPCacheMngVLAN"), ("HUAWEI-HGMP-MIB", "hgmpNTDPCacheHop"), ("HUAWEI-HGMP-MIB", "hgmpNTDPTopHashIndex"), ("HUAWEI-HGMP-MIB", "hgmpNTDPTopEdgeStartDevID"), ("HUAWEI-HGMP-MIB", "hgmpNTDPTopEdgeIndex"), ("HUAWEI-HGMP-MIB", "hgmpNTDPTopEdgeEndDevID"), ("HUAWEI-HGMP-MIB", "hgmpNTDPTopEdgeStartPort"), ("HUAWEI-HGMP-MIB", "hgmpNTDPTopEdgeStartPortFullDuplex"), ("HUAWEI-HGMP-MIB", "hgmpNTDPTopEdgeStartPortSpeed"), ("HUAWEI-HGMP-MIB", "hgmpNTDPTopEdgeEndPort"), ("HUAWEI-HGMP-MIB", "hgmpNTDPTopEdgeStartPortIfIndex"), ("HUAWEI-HGMP-MIB", "hgmpNTDPTopEdgeEndPortIfIndex"), ("HUAWEI-HGMP-MIB", "hwNDPStatus"), ("HUAWEI-HGMP-MIB", "hwNDPHelloTimer"), ("HUAWEI-HGMP-MIB", "hwNDPAgingTime"), ("HUAWEI-HGMP-MIB", "hwNDPChange"), ("HUAWEI-HGMP-MIB", "hwNDPIfIndex"), ("HUAWEI-HGMP-MIB", "hwNDPPortStatus"), ("HUAWEI-HGMP-MIB", "hwNDPPortNbDeviceId"), ("HUAWEI-HGMP-MIB", "hwNDPPortNbPortName"), ("HUAWEI-HGMP-MIB", "hwNDPPortNbDeviceName"), ("HUAWEI-HGMP-MIB", "hwNDPPortNbPortMode"), ("HUAWEI-HGMP-MIB", "hwNDPPortNbProductVer"), ("HUAWEI-HGMP-MIB", "hwNDPPortNbHardVer"), ("HUAWEI-HGMP-MIB", "hwNDPPortNbBootromVer"), ("HUAWEI-HGMP-MIB", "hwNDPPortNbSoftVer"), ("HUAWEI-HGMP-MIB", "hwNDPPortNbAgingtime"), ("HUAWEI-HGMP-MIB", "hgmpClusterVersion"), ("HUAWEI-HGMP-MIB", "hgmpNTDPExplore"), ("HUAWEI-HGMP-MIB", "hgmpNTDPTopoLinkStatus"), ("HUAWEI-HGMP-MIB", "hwNDPTrunkMemberEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    currentObjectGroup = currentObjectGroup.setStatus('current')
if mibBuilder.loadTexts: currentObjectGroup.setDescription('Enter the description of the created OBJECT-GROUP.')
currentNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 6, 7, 6, 1, 2)).setObjects(("HUAWEI-HGMP-MIB", "hgmpMemberfailure"), ("HUAWEI-HGMP-MIB", "hgmpMemberRecover"), ("HUAWEI-HGMP-MIB", "hgmpMemberStatusChange"), ("HUAWEI-HGMP-MIB", "hgmpMemberAdd"), ("HUAWEI-HGMP-MIB", "hgmpStackMemberfailure"), ("HUAWEI-HGMP-MIB", "hgmpStackMemberRecover"), ("HUAWEI-HGMP-MIB", "hgmpStackMemberStatusChange"), ("HUAWEI-HGMP-MIB", "hgmpNetTopChange"), ("HUAWEI-HGMP-MIB", "hgmpNTDPTopoChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    currentNotificationGroup = currentNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: currentNotificationGroup.setDescription('Enter the description of the created NOTIFICATION-GROUP.')
hwClusterCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 7, 6, 2))
basicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 6, 7, 6, 2, 1)).setObjects(("HUAWEI-HGMP-MIB", "currentObjectGroup"), ("HUAWEI-HGMP-MIB", "currentNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    basicCompliance = basicCompliance.setStatus('current')
if mibBuilder.loadTexts: basicCompliance.setDescription('Enter the description of the created MODULE-COMPLIANCE.')
mibBuilder.exportSymbols("HUAWEI-HGMP-MIB", hgmpStackMemberSerial=hgmpStackMemberSerial, hgmpBatchUpgradeTable=hgmpBatchUpgradeTable, hgmpNTDPTopEdgeEndPort=hgmpNTDPTopEdgeEndPort, hgmpStackIpPoolStartIP=hgmpStackIpPoolStartIP, hgmpGrpMemberPassword=hgmpGrpMemberPassword, hgmpBatchSaveResultEntry=hgmpBatchSaveResultEntry, hgmpGrpMemberPlatform=hgmpGrpMemberPlatform, hgmpUnrelatedPortNtdpAdminGroupValue=hgmpUnrelatedPortNtdpAdminGroupValue, hwNDPPortNbDeviceName=hwNDPPortNbDeviceName, hgmpManageVlan=hgmpManageVlan, hgmpUnrelatedPortNtdpAdminEntry=hgmpUnrelatedPortNtdpAdminEntry, hgmpSnmpHost=hgmpSnmpHost, hgmpBatchRebootGroupValue=hgmpBatchRebootGroupValue, hgmpMultiMacAddress=hgmpMultiMacAddress, hwClusterObject=hwClusterObject, hwNDPPortNbPortName=hwNDPPortNbPortName, hgmpClusterRole=hgmpClusterRole, hgmpBatchSynchronizeCfgFileTable=hgmpBatchSynchronizeCfgFileTable, hgmpClusterMaxPoolNum=hgmpClusterMaxPoolNum, hgmpUnrelatedPortNtdpResultMemberId=hgmpUnrelatedPortNtdpResultMemberId, hwNDPObject=hwNDPObject, hwNDPHelloTimer=hwNDPHelloTimer, hgmpNTDPCacheChange=hgmpNTDPCacheChange, hgmpStackMemberDisconRate=hgmpStackMemberDisconRate, hgmpMemberResetEntry=hgmpMemberResetEntry, hgmpSftpServer=hgmpSftpServer, hgmpBatchUpgradeFileType=hgmpBatchUpgradeFileType, hgmpMainLanswitchFlag=hgmpMainLanswitchFlag, hwNDPPortNbDeviceId=hwNDPPortNbDeviceId, hgmpMngPriIpSegCMIP=hgmpMngPriIpSegCMIP, hwNTDPObject=hwNTDPObject, hwNDPTrunkMemberEnable=hwNDPTrunkMemberEnable, hgmpNTDPCacheTable=hgmpNTDPCacheTable, hgmpBatchRebootResult=hgmpBatchRebootResult, hgmpStackMemberDisconCount=hgmpStackMemberDisconCount, hgmpBatchSynchronizeCfgFileResultTable=hgmpBatchSynchronizeCfgFileResultTable, hgmpCmdLanswitchFlag=hgmpCmdLanswitchFlag, hgmpClusterAutojoin=hgmpClusterAutojoin, hgmpBatchUpgradeRowStatus=hgmpBatchUpgradeRowStatus, hgmpBatchSaveTable=hgmpBatchSaveTable, hgmpClusterVersion=hgmpClusterVersion, hwNDPPortNbProductVer=hwNDPPortNbProductVer, hgmpBatchSynchronizeCfgFileResultMemberId=hgmpBatchSynchronizeCfgFileResultMemberId, hgmpStackMemberPlatform=hgmpStackMemberPlatform, hgmpStackMemberDeviceId=hgmpStackMemberDeviceId, hgmpNTDPTopoLinkStatus=hgmpNTDPTopoLinkStatus, hgmpNTDPNotifications=hgmpNTDPNotifications, hgmpNTDPTopHashIndex=hgmpNTDPTopHashIndex, hgmpGrpMemberDisconCount=hgmpGrpMemberDisconCount, hgmpBatchRebootEntry=hgmpBatchRebootEntry, hgmpBatchUpgradeEntry=hgmpBatchUpgradeEntry, hgmpStackMemberIpAddr=hgmpStackMemberIpAddr, hgmpStackMainSwMac=hgmpStackMainSwMac, hgmpBatchRebootResultMemberMac=hgmpBatchRebootResultMemberMac, hgmpBatchSynchronizeCfgFileRowStatus=hgmpBatchSynchronizeCfgFileRowStatus, hgmpNTDPCacheCapabilities=hgmpNTDPCacheCapabilities, hgmpNTDPTopEdgeStartPort=hgmpNTDPTopEdgeStartPort, hgmpNTDPTopoLocalPortName=hgmpNTDPTopoLocalPortName, hgmpNTDPInterfaceEntry=hgmpNTDPInterfaceEntry, hgmpUnrelatedPortNtdpAdminCmdId=hgmpUnrelatedPortNtdpAdminCmdId, hgmpUnrelatedPortNdpAdminGroupValue=hgmpUnrelatedPortNdpAdminGroupValue, hgmpStackMemberRecover=hgmpStackMemberRecover, hgmpGrpMemberTableChange=hgmpGrpMemberTableChange, hgmpBatchRebootResultMemberId=hgmpBatchRebootResultMemberId, hgmpMemberDisconRate=hgmpMemberDisconRate, hgmpNTDPTopoLinkEntry=hgmpNTDPTopoLinkEntry, hgmpUnrelatedPortNdpAdminEntry=hgmpUnrelatedPortNdpAdminEntry, hgmpUnrelatedPortNdpResultTable=hgmpUnrelatedPortNdpResultTable, hgmpBatchSaveGroupType=hgmpBatchSaveGroupType, hwNDPPortNbSoftVer=hwNDPPortNbSoftVer, hgmpRun=hgmpRun, hwNDPPortNbBootromVer=hwNDPPortNbBootromVer, hgmpLogHost=hgmpLogHost, hgmpNTDPTopEdgeStartPortIfIndex=hgmpNTDPTopEdgeStartPortIfIndex, hwNDPChange=hwNDPChange, hgmpMemberEraseflash=hgmpMemberEraseflash, hgmpMemberRebootTimeoutValue=hgmpMemberRebootTimeoutValue, hgmpMemberRecover=hgmpMemberRecover, hgmpNTDPCacheDeviceID=hgmpNTDPCacheDeviceID, hgmpNTDPTopoLocalDeviceID=hgmpNTDPTopoLocalDeviceID, hgmpNTDPTopEdgeEndPortIfIndex=hgmpNTDPTopEdgeEndPortIfIndex, basicCompliance=basicCompliance, hgmpBatchSynchronizeCfgFileGroupType=hgmpBatchSynchronizeCfgFileGroupType, hgmpClusterCmdSwMac=hgmpClusterCmdSwMac, hgmpBatchUpgradeGroupType=hgmpBatchUpgradeGroupType, hgmpNTDPTopEntry=hgmpNTDPTopEntry, hwNDPAgingTime=hwNDPAgingTime, hgmpStackMemberStatus=hgmpStackMemberStatus, hgmpHandShakeHoldtime=hgmpHandShakeHoldtime, hgmpUnrelatedPortNtdpAdminStatus=hgmpUnrelatedPortNtdpAdminStatus, hgmpNTDPTopTable=hgmpNTDPTopTable, hgmpUnrelatedPortNdpAdminGroupType=hgmpUnrelatedPortNdpAdminGroupType, hgmpBatchSynchronizeCfgFileResultMemberMac=hgmpBatchSynchronizeCfgFileResultMemberMac, hgmpNTDPCacheVersion=hgmpNTDPCacheVersion, hgmpStackMaxPoolNum=hgmpStackMaxPoolNum, hgmpGrpMemberStatus=hgmpGrpMemberStatus, hwClusterGroups=hwClusterGroups, hgmpGrpMemberTable=hgmpGrpMemberTable, hwNDPStatus=hwNDPStatus, hgmpBatchSaveResult=hgmpBatchSaveResult, hgmpBatchRebootGroupType=hgmpBatchRebootGroupType, hgmpNTDPCacheClusterRole=hgmpNTDPCacheClusterRole, hgmpStackMemberEntry=hgmpStackMemberEntry, hwNDPPortNbHardVer=hwNDPPortNbHardVer, hgmpNTDPInterfaceTable=hgmpNTDPInterfaceTable, hgmpMngPriIpMask=hgmpMngPriIpMask, hgmpNTDPTopoNbrPortName=hgmpNTDPTopoNbrPortName, hgmpBatchRebootResultEntry=hgmpBatchRebootResultEntry, hgmpGrpMemberEnrollTime=hgmpGrpMemberEnrollTime, hgmpBatchSaveEntry=hgmpBatchSaveEntry, hgmpNTDPTopEdgeStartPortSpeed=hgmpNTDPTopEdgeStartPortSpeed, hgmpUnrelatedPortNtdpResultEntry=hgmpUnrelatedPortNtdpResultEntry, hgmpUnrelatedPortNdpAdminRowStatus=hgmpUnrelatedPortNdpAdminRowStatus, hgmpNTDPTopEdgeStartDevID=hgmpNTDPTopEdgeStartDevID, hgmpNTDPTopoLinkTable=hgmpNTDPTopoLinkTable, hwNDPPortNbTable=hwNDPPortNbTable, hgmpBatchSaveResultMemberId=hgmpBatchSaveResultMemberId, hgmpNTDPExplore=hgmpNTDPExplore, hgmpBatchSaveGroupValue=hgmpBatchSaveGroupValue, hgmpUnrelatedPortNdpResult=hgmpUnrelatedPortNdpResult, hgmpCmdClusterName=hgmpCmdClusterName, hgmpClusterDiscAgingTime=hgmpClusterDiscAgingTime, hgmpUnrelatedPortNdpResultMemberId=hgmpUnrelatedPortNdpResultMemberId, hgmpHandShakeInterval=hgmpHandShakeInterval, hgmpNTDPCacheEntry=hgmpNTDPCacheEntry, hgmpStackEventsV2=hgmpStackEventsV2, hgmpGrpMemberSerial=hgmpGrpMemberSerial, hgmpMemberResetTable=hgmpMemberResetTable, hgmpNTDPCacheMngVLAN=hgmpNTDPCacheMngVLAN, currentNotificationGroup=currentNotificationGroup, hgmpBatchSynchronizeCfgFileGroupValue=hgmpBatchSynchronizeCfgFileGroupValue, hgmpNTDPHopRange=hgmpNTDPHopRange, hgmpNTDPRun=hgmpNTDPRun, hwNDPPortEntry=hwNDPPortEntry, hwCluster=hwCluster, hgmpBatchRebootTable=hgmpBatchRebootTable, hwNDPPortNbPortMode=hwNDPPortNbPortMode, hgmpGrpMemberOperate=hgmpGrpMemberOperate, hgmpFtpServer=hgmpFtpServer, hgmpNTDPLastTopCollectDuration=hgmpNTDPLastTopCollectDuration, hgmpBatchSaveResultTable=hgmpBatchSaveResultTable, hgmpBatchSaveCmdId=hgmpBatchSaveCmdId, hgmpStackMemberTableChange=hgmpStackMemberTableChange, hgmpNTDPCacheHashIndex=hgmpNTDPCacheHashIndex, hgmpNTDPPortDelay=hgmpNTDPPortDelay, hgmpBatchUpgradeResult=hgmpBatchUpgradeResult, hgmpNetTopChange=hgmpNetTopChange, hgmpTftpServer=hgmpTftpServer, hwNDPPortTable=hwNDPPortTable, hgmpStackRole=hgmpStackRole, hgmpStackMemberStatusChange=hgmpStackMemberStatusChange, hgmpMemberResetMAC=hgmpMemberResetMAC, hwNDPPortNbEntry=hwNDPPortNbEntry, hgmpNTDPTopoChange=hgmpNTDPTopoChange, hgmpMemberfailure=hgmpMemberfailure, hgmpGrpMemberEntry=hgmpGrpMemberEntry, hgmpGrpMemberDeviceId=hgmpGrpMemberDeviceId, hgmpNTDPTOPTableChange=hgmpNTDPTOPTableChange, hgmpBatchRebootResultTable=hgmpBatchRebootResultTable, hgmpNTDPCacheClusterName=hgmpNTDPCacheClusterName, hgmpNTDPCacheHop=hgmpNTDPCacheHop, hgmpBatchUpgradeCmdId=hgmpBatchUpgradeCmdId, hgmpStackMemberfailure=hgmpStackMemberfailure, hgmpUnrelatedPortNtdpAdminRowStatus=hgmpUnrelatedPortNtdpAdminRowStatus, hgmpMemberStatusChange=hgmpMemberStatusChange, hwClusterCompliances=hwClusterCompliances, hgmpStackMemberTable=hgmpStackMemberTable, hgmpStackMemberEnrollTime=hgmpStackMemberEnrollTime, hgmpGrpMemberName=hgmpGrpMemberName, hgmpUnrelatedPortNtdpAdminGroupType=hgmpUnrelatedPortNtdpAdminGroupType, hgmpStackIpPoolLength=hgmpStackIpPoolLength, hgmpNTDPTopEdgeIndex=hgmpNTDPTopEdgeIndex, hgmpStackMemberPassword=hgmpStackMemberPassword, hgmpGrpMemberIpAddr=hgmpGrpMemberIpAddr, hgmpUnrelatedPortNdpAdminTable=hgmpUnrelatedPortNdpAdminTable, hgmpUnrelatedPortNdpAdminCmdId=hgmpUnrelatedPortNdpAdminCmdId, hwClusterConformance=hwClusterConformance, currentObjectGroup=currentObjectGroup, hgmpSetVLANSecurity=hgmpSetVLANSecurity, hwNDPIfIndex=hwNDPIfIndex, hgmpBatchUpgradeResultTable=hgmpBatchUpgradeResultTable, PYSNMP_MODULE_ID=hwCluster, hgmpUnrelatedPortNtdpResult=hgmpUnrelatedPortNtdpResult, hgmpStackIpPoolMask=hgmpStackIpPoolMask, hgmpUnrelatedPortNdpResultEntry=hgmpUnrelatedPortNdpResultEntry, hgmpNTDPTopoNbrDeviceID=hgmpNTDPTopoNbrDeviceID, hgmpEventsV2=hgmpEventsV2, hgmpBatchUpgradeResultEntry=hgmpBatchUpgradeResultEntry, hgmpBatchSynchronizeCfgFileCmdId=hgmpBatchSynchronizeCfgFileCmdId, hgmpBatchUpgradeResultMemberId=hgmpBatchUpgradeResultMemberId, hgmpNTDPInterfaceIfIndex=hgmpNTDPInterfaceIfIndex, hgmpBatchRebootRowStatus=hgmpBatchRebootRowStatus, hgmpBatchUpgradeGroupValue=hgmpBatchUpgradeGroupValue, hgmpBatchRebootCmdId=hgmpBatchRebootCmdId, hgmpBatchSynchronizeCfgFileEntry=hgmpBatchSynchronizeCfgFileEntry, hgmpNTDPInterfaceEnable=hgmpNTDPInterfaceEnable, hgmpNTDPCachePlatform=hgmpNTDPCachePlatform, hgmpMemberAdd=hgmpMemberAdd, hgmpUnrelatedPortNdpResultMemberMac=hgmpUnrelatedPortNdpResultMemberMac, hgmpNTDPHopDelay=hgmpNTDPHopDelay, hgmpUnrelatedPortNtdpResultMemberMac=hgmpUnrelatedPortNtdpResultMemberMac, hgmpNTDPTopEdgeStartPortFullDuplex=hgmpNTDPTopEdgeStartPortFullDuplex, hwNDPPortNbAgingtime=hwNDPPortNbAgingtime, hgmpBatchSynchronizeCfgFileResult=hgmpBatchSynchronizeCfgFileResult, hgmpUnrelatedPortNdpAdminStatus=hgmpUnrelatedPortNdpAdminStatus, hgmpBatchSynchronizeCfgFileResultEntry=hgmpBatchSynchronizeCfgFileResultEntry, hgmpNTDPCollectTopTime=hgmpNTDPCollectTopTime, hwNDPPortStatus=hwNDPPortStatus, hgmpBatchUpgradeFileName=hgmpBatchUpgradeFileName, hgmpBatchSaveRowStatus=hgmpBatchSaveRowStatus, hgmpStackMemberName=hgmpStackMemberName, hgmpUnrelatedPortNtdpAdminTable=hgmpUnrelatedPortNtdpAdminTable, hgmpBatchSaveResultMemberMac=hgmpBatchSaveResultMemberMac, hgmpPlugAndPlayStatus=hgmpPlugAndPlayStatus, hgmpBatchUpgradeResultMemberMac=hgmpBatchUpgradeResultMemberMac, hwStackObject=hwStackObject, hgmpNTDPTopEdgeEndDevID=hgmpNTDPTopEdgeEndDevID, hgmpUnrelatedPortNtdpResultTable=hgmpUnrelatedPortNtdpResultTable)
