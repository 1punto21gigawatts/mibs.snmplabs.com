#
# PySNMP MIB module HP-ICF-MLD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-MLD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:34:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressIPv6, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6")
mldInterfaceEntry, = mibBuilder.importSymbols("IPV6-MLD-MIB", "mldInterfaceEntry")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Bits, ObjectIdentity, iso, NotificationType, TimeTicks, Gauge32, Counter64, ModuleIdentity, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "iso", "NotificationType", "TimeTicks", "Gauge32", "Counter64", "ModuleIdentity", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "Integer32")
TextualConvention, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "TruthValue")
hpicfMldMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48))
hpicfMldMIB.setRevisions(('2015-09-11 00:00', '2013-02-10 00:00', '2011-03-10 00:00', '2011-01-11 00:00', '2010-09-09 00:00', '2007-07-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfMldMIB.setRevisionsDescriptions(('Added commands to reset MLD if it is in error state.', 'Added objects hpicfMldIfEntryStartupQueryExpiryTime, hpicfMldIfEntryOtherQuerierInterval, hpicfMldIfEntryOtherQuerierExpiryTimex,compliance hpicfMldMIBComplianceV3 and group hpicfMldIfGroupV3. deprecated compliance hpicfMldMIBComplianceV2 and group hpicfMldIfGroupV2.', 'Added group specific query counter and MLD state', 'Added hpicfMldPortSrcFilterMode, hpicfMldIfEntryStatMldV1ReportTx and hpicfMldIfEntryStatMldV2ReportTx.', 'MLDv2 support included.', 'Initial revision.',))
if mibBuilder.loadTexts: hpicfMldMIB.setLastUpdated('201509110000Z')
if mibBuilder.loadTexts: hpicfMldMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfMldMIB.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfMldMIB.setDescription('This MIB module contains HP proprietary MIB definitions for managing MLD services including extensions to the standard MLD MIB (RFC 3019).')
class HpicfMcastGroupTypeDefinition(TextualConvention, Integer32):
    description = 'Type definition. This type distinguishes the different ways of tracking this device has for multicast joins. The method of tracking is primarily determined by the IGMP/MLD feature configuration. In particular if the snooping feature is enabled then port level tracking is the default which results in filtered groups. If the snooping feature is disabled then joins will result in standard groups being tracked by this device. When hardware resources are exhausted for multicast filtered bridging, joins may result in standard groups even though the snooping feature is enabled. Mini groups may be used when other resources, such as RAM, are low or exhausted.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("standard", 1), ("filtered", 2), ("mini", 3))

class HpicfMldIfEntryState(TextualConvention, Integer32):
    description = 'MLD interface states.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("initialWait", 1), ("querierElection", 2), ("querier", 3), ("nonQuerier", 4))

hpicfMldObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1))
hpicfMld = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1))
hpicfMldConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2))
hpicfMldGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 1))
hpicfMldCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 2))
hpicfMldControlUnknownMulticast = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMldControlUnknownMulticast.setStatus('current')
if mibBuilder.loadTexts: hpicfMldControlUnknownMulticast.setDescription('When enabled along with MLD, any IPv6 Multicast packets that are not joined by an MLD host will will be restricted to ports that have detected a multicast router or ports that are configured to always forward IPv6 multicast. When set to disabled or when MLD is disabled, the unjoined IPv6 multicast packets will be flooded out all ports in the VLAN. Permanently assigned multicast addresses are always flooded and so are not impacted by this object.')
hpicfMldConfigForcedLeaveInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMldConfigForcedLeaveInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfMldConfigForcedLeaveInterval.setDescription("When a port's hpicfMldPortConfigEntryForcedLeaveFeature is enabled, this is the amount of time allowed for an MLD Report to arrive and cancel deletion of a multicast group requested by a previous MLD Leave request. Units are tenths of seconds.")
hpicfMldEnabledCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldEnabledCount.setStatus('current')
if mibBuilder.loadTexts: hpicfMldEnabledCount.setDescription('Current total count of interfaces with MLD enabled.')
hpicfMldMcastGroupJoinsCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldMcastGroupJoinsCount.setStatus('current')
if mibBuilder.loadTexts: hpicfMldMcastGroupJoinsCount.setDescription('Current total count of Multicast groups joined.')
hpicfMldIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5), )
if mibBuilder.loadTexts: hpicfMldIfTable.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfTable.setDescription('HP extensions to the MLD standard MIB table mldIfTable.')
hpicfMldIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1), )
mldInterfaceEntry.registerAugmentions(("HP-ICF-MLD-MIB", "hpicfMldIfEntry"))
hpicfMldIfEntry.setIndexNames(*mldInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfMldIfEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntry.setDescription('HP extensions for an entry in the mldInterfaceTable.')
hpicfMldIfEntryQuerierFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMldIfEntryQuerierFeature.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryQuerierFeature.setDescription('Turns MLD querier functionality on and off.')
hpicfMldIfEntrySnoopingFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMldIfEntrySnoopingFeature.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntrySnoopingFeature.setDescription('When enabled along with MLD, any IPv6 Multicast packets that are joined by an MLD host will be be restricted to ports which have received the joins. This can be overridden by other features like hpicfMldPortConfigEntryPortModeFeature.')
hpicfMldIfEntryQuerierPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryQuerierPort.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryQuerierPort.setDescription('Logical port which the querier is connected to. This is determined by the presence of querier packets on this port. This value is 0 if this device is querier.')
hpicfMldIfEntryFilteredJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryFilteredJoins.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryFilteredJoins.setDescription('Current total count of groups on this interface being tracked on a per port basis. Traffic for these groups will be filtered to flow only to ports with active joins, subject to HW resource limitations such as the maximum number of groups supported by the hardware.')
hpicfMldIfEntryStandardJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStandardJoins.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStandardJoins.setDescription('Current total count of groups on this interface being traced on a per interface basis. Traffic for these groups are flooded to the ports on the interface. These can come form joinees on interfaces which do not have MLD snooping turned on. They can also come from interfaces which have MLD snooping on, but HW resources have been exhausted for bridging traffic based on joins.')
hpicfMldIfEntryPortsWithMcastRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 6), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryPortsWithMcastRouter.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryPortsWithMcastRouter.setDescription('This indicates which ports have a multicast router detected on them.')
hpicfMldIfEntryStatGeneralQueryRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatGeneralQueryRx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatGeneralQueryRx.setDescription('The number of times an Mld General Service Query has been received on this interface.')
hpicfMldIfEntryStatQueryTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatQueryTx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatQueryTx.setDescription('The number of times a query has been sent from this interface.')
hpicfMldIfEntryStatGSQRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatGSQRx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatGSQRx.setDescription('The number of times a group specific query has been received from this interface.')
hpicfMldIfEntryStatGSQTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatGSQTx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatGSQTx.setDescription('The number of times a group specific query has been sent from this interface.')
hpicfMldIfEntryStatMldV1ReportRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatMldV1ReportRx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatMldV1ReportRx.setDescription('The number of times an MLD version 1 report has been received on this interface.')
hpicfMldIfEntryStatMldV2ReportRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatMldV2ReportRx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatMldV2ReportRx.setDescription('The number of times an MLD version 2 report has been received on this interface.')
hpicfMldIfEntryStatMldV1LeaveRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatMldV1LeaveRx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatMldV1LeaveRx.setDescription('The number of times an MLD version 1 leave has been received on this interface.')
hpicfMldIfEntryStatUnknownMldTypeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatUnknownMldTypeRx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatUnknownMldTypeRx.setDescription('The number of times an Mld packet of unknown type has been received on this interface.')
hpicfMldIfEntryStatUnknownPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatUnknownPktRx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatUnknownPktRx.setDescription('The number of times a packet of unknown type has been sent to the MLD protocol on this device on this interface.')
hpicfMldIfEntryStatForwardToRoutersTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatForwardToRoutersTx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatForwardToRoutersTx.setDescription('The number of times a packet has been forwarded to routers on this interface.')
hpicfMldIfEntryStatForwardToAllPortsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatForwardToAllPortsTx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatForwardToAllPortsTx.setDescription('The number of times a packet has been forwarded to all ports on this interface.')
hpicfMldIfEntryStatFastLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatFastLeaves.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatFastLeaves.setDescription('The number of times a fast leave has occurred on this interface.')
hpicfMldIfEntryStatForcedFastLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatForcedFastLeaves.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatForcedFastLeaves.setDescription('The number of times a forced fast leave has occurred on this interface.')
hpicfMldIfEntryStatJoinTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatJoinTimeouts.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatJoinTimeouts.setDescription('The number of times a join has timeout out on this interface.')
hpicfMldIfEntryStatWrongVersionQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatWrongVersionQueries.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatWrongVersionQueries.setDescription('The number of general queries received whose MLD version does not match the equivalent Interface Version.')
hpicfMldIfEntryLastMemberQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryLastMemberQueryCount.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryLastMemberQueryCount.setDescription('Represents the number of group-specific and group-and-source-specific queries sent by the router before it assumes there are no local members.')
hpicfMldIfEntryStartupQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStartupQueryCount.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStartupQueryCount.setDescription('Represents the number of Queries sent out on startup, separated by the Startup Query Interval (hpicfMldIfEntryStartupQueryInterval) ')
hpicfMldIfEntryStartupQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 24), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStartupQueryInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStartupQueryInterval.setDescription('Represents the interval between General Queries sent by a Querier on startup.')
hpicfMldIfEntryStatExcludeGroupJoinsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatExcludeGroupJoinsCount.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatExcludeGroupJoinsCount.setDescription('Current number of groups on this interface which are in EXCLUDE mode.')
hpicfMldIfEntryStatIncludeGroupJoinsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatIncludeGroupJoinsCount.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatIncludeGroupJoinsCount.setDescription('Current number of groups on this interface which are in INCLUDE mode.')
hpicfMldIfEntryStatFilteredExcludeGroupJoinsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatFilteredExcludeGroupJoinsCount.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatFilteredExcludeGroupJoinsCount.setDescription('Current number of filtered groups on this interface which are in EXCLUDE mode.')
hpicfMldIfEntryStatFilteredIncludeGroupJoinsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatFilteredIncludeGroupJoinsCount.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatFilteredIncludeGroupJoinsCount.setDescription('Current number of filtered groups on this interface which are in INCLUDE mode.')
hpicfMldIfEntryStatStandardExcludeGroupJoinsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatStandardExcludeGroupJoinsCount.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatStandardExcludeGroupJoinsCount.setDescription('Current number of standard groups on this interface which are in EXCLUDE Mode. Traffic for these groups is flooded to the ports on the interface. These can come form joins on interfaces which do not have MLD snooping turned on. They can also come from interfaces which have MLD snooping on, but hardware resources have been exhausted for bridging traffic based on joins.')
hpicfMldIfEntryStatStandardIncludeGroupJoinsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatStandardIncludeGroupJoinsCount.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatStandardIncludeGroupJoinsCount.setDescription('Current number of standard groups on this interface which are in INCLUDE Mode. Traffic for these groups is flooded to the ports on the interface. These can come form joins on interfaces which do not have MLD snooping turned on. They can also come from interfaces which have MLD snooping on, but hardware resources have been exhausted for bridging traffic based on joins.')
hpicfMldIfEntryStatV1QueryTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatV1QueryTx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatV1QueryTx.setDescription('The number of V1 Queries transmitted on this interface.')
hpicfMldIfEntryStatV1QueryRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatV1QueryRx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatV1QueryRx.setDescription('The number of V1 Queries received on this interface.')
hpicfMldIfEntryStatV2QueryTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatV2QueryTx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatV2QueryTx.setDescription('The number of V2 Queries transmitted on this interface.')
hpicfMldIfEntryStatV2QueryRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatV2QueryRx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatV2QueryRx.setDescription('The number of V2 Queries received on this interface.')
hpicfMldIfEntryStatGSSQTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatGSSQTx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatGSSQTx.setDescription('The number of Group Source Specific Queries transmitted on this interface.')
hpicfMldIfEntryStatGSSQRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatGSSQRx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatGSSQRx.setDescription('The number of Group Source Specific Queries received on this interface')
hpicfMldIfEntryStatMalformedPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatMalformedPktRx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatMalformedPktRx.setDescription('The number of malformed packets received on this interface.')
hpicfMldIfEntryStatBadCheckSumRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatBadCheckSumRx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatBadCheckSumRx.setDescription('The number of bad checksum packets received on this interface.')
hpicfMldIfEntryStatMartianSourceRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatMartianSourceRx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatMartianSourceRx.setDescription('The number of packets received on this interface from Martian source. Martian source are the packets with invalid source address, e.g. 255.255.255.255.')
hpicfMldIfEntryStatPacketsRxOnDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatPacketsRxOnDisabled.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatPacketsRxOnDisabled.setDescription('The number of MLD packets received on this interface when MLD is disabled.')
hpicfMldIfEntryStrictVersionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 41), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMldIfEntryStrictVersionMode.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStrictVersionMode.setDescription('When true, MLD packets whose version matches the protocol version configured on this interface will be processed. Other version MLD packets will be dropped. When false, all protocol version packets will be processed irrespective of the configured version.')
hpicfMldIfEntryStatMldV1ReportTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatMldV1ReportTx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatMldV1ReportTx.setDescription('The number of times an MLD version 1 report was transmitted on this interface.')
hpicfMldIfEntryStatMldV2ReportTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatMldV2ReportTx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatMldV2ReportTx.setDescription('The number of times an MLD version 2 report was transmitted on this interface.')
hpicfMldIfEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 44), HpicfMldIfEntryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryState.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryState.setDescription('Represents the MLD interface state.')
hpicfMldIfEntryStatV1GSQRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatV1GSQRx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatV1GSQRx.setDescription('The number of V1 group specific queries received on this interface.')
hpicfMldIfEntryStatV1GSQTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatV1GSQTx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatV1GSQTx.setDescription('The number of V1 group specific queries transmitted by this interface.')
hpicfMldIfEntryStatV2GSQRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatV2GSQRx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatV2GSQRx.setDescription('The number of V2 group specific queries received on this interface.')
hpicfMldIfEntryStatV2GSQTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStatV2GSQTx.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStatV2GSQTx.setDescription('The number of V2 group specific queries transmitted by this interface.')
hpicfMldIfEntryStartupQueryExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 49), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryStartupQueryExpiryTime.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryStartupQueryExpiryTime.setDescription('The minimum amount of time remaining before a multicast router decides that there is no longer another multicast router which should be the querier on startup on this interface.')
hpicfMldIfEntryOtherQuerierInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 50), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryOtherQuerierInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryOtherQuerierInterval.setDescription('The length of time that must pass before a multicast router decides that there is no longer another multicast router which should be the querier on this interface.')
hpicfMldIfEntryOtherQuerierExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 5, 1, 51), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldIfEntryOtherQuerierExpiryTime.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfEntryOtherQuerierExpiryTime.setDescription('The minimum amount of time remaining before a multicast router decides that there is no longer another multicast router which should be the querier on this interface.')
hpicfMldCacheTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 6), )
if mibBuilder.loadTexts: hpicfMldCacheTable.setStatus('current')
if mibBuilder.loadTexts: hpicfMldCacheTable.setDescription('HP extensions to the MLD standard MIB table mldCacheTable.')
hpicfMldCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 6, 1), ).setIndexNames((0, "HP-ICF-MLD-MIB", "hpicfMldCacheIfIndex"), (0, "HP-ICF-MLD-MIB", "hpicfMldCacheAddress"))
if mibBuilder.loadTexts: hpicfMldCacheEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfMldCacheEntry.setDescription('HP extensions for an entry in the mldCacheTable.')
hpicfMldCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfMldCacheIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfMldCacheIfIndex.setDescription('The internetwork-layer interface for which this entry contains information for an IPv6 multicast group address.')
hpicfMldCacheAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 6, 1, 2), InetAddressIPv6().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16))
if mibBuilder.loadTexts: hpicfMldCacheAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfMldCacheAddress.setDescription('The IPv6 multicast group address for which this entry contains information.')
hpicfMldCacheSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 6, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfMldCacheSelf.setStatus('current')
if mibBuilder.loadTexts: hpicfMldCacheSelf.setDescription('An indication of whether the local system is a member of this group address on this interface.')
hpicfMldCacheLastReporter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 6, 1, 4), InetAddressIPv6().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldCacheLastReporter.setStatus('current')
if mibBuilder.loadTexts: hpicfMldCacheLastReporter.setDescription('The IPv6 address of the source of the last membership report received for this IPv6 Multicast group address on this interface. If no membership report has been received, this object has the value 0::0.')
hpicfMldCacheUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldCacheUpTime.setStatus('current')
if mibBuilder.loadTexts: hpicfMldCacheUpTime.setDescription('The time elapsed since this entry was created.')
hpicfMldCacheExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 6, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldCacheExpiryTime.setStatus('current')
if mibBuilder.loadTexts: hpicfMldCacheExpiryTime.setDescription('The minimum amount of time remaining before this entry will be aged out. A value of 0 indicates that the entry is only present because mldCacheSelf is true and that if the router left the group, this entry would be aged out immediately. Note that some implementations may process Membership Reports from the local system in the same way as reports from other hosts, so a value of 0 is not required.')
hpicfMldGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 6, 1, 7), HpicfMcastGroupTypeDefinition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldGroupType.setStatus('current')
if mibBuilder.loadTexts: hpicfMldGroupType.setDescription('See HpicfMldGroupTypeDefinition description.')
hpicfJoinedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 6, 1, 8), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfJoinedPorts.setStatus('current')
if mibBuilder.loadTexts: hpicfJoinedPorts.setDescription('Logical ports with active MLD joins on them for this entry. For Filtered groups this will be the logical ports which have active joins. For standard and mini groups this will include all logical ports on the interface running MLD.')
hpicfMldCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 6, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfMldCacheStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfMldCacheStatus.setDescription('The status of this row, by which new entries may be created, or existing entries deleted from this table.')
hpicfMldCacheFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldCacheFilterMode.setStatus('current')
if mibBuilder.loadTexts: hpicfMldCacheFilterMode.setDescription('The value indicates whether the group state is include(1) or exclude(2)')
hpicfMldCacheExcludeModeExpiryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 6, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldCacheExcludeModeExpiryTimer.setStatus('current')
if mibBuilder.loadTexts: hpicfMldCacheExcludeModeExpiryTimer.setDescription('The time remaining before the group in EXCLUDE state expires and transitions to INCLUDE mode.')
hpicfMldCacheVersion1HostTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 6, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldCacheVersion1HostTimer.setStatus('current')
if mibBuilder.loadTexts: hpicfMldCacheVersion1HostTimer.setDescription('The time remaining until the local router will assume that there are no longer any MLD version 1 members on the IP subnet attached to this interface ')
hpicfMldCacheSrcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldCacheSrcCount.setStatus('current')
if mibBuilder.loadTexts: hpicfMldCacheSrcCount.setDescription('The number of sources either included or excluded for this group. If V1 host timer (hpicfMldCacheVersion1HostTimer) is active, this value will be zero.')
class HpicfMldConfigPortModeType(TextualConvention, Integer32):
    description = 'Type definition. See hpicfMldPortConfigEntryPortModeFeature for definition of this feature.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("auto", 1), ("blocked", 2), ("forward", 3))

hpicfMldPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 7), )
if mibBuilder.loadTexts: hpicfMldPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortConfigTable.setDescription('This table contains information about the MLD port configurations on this switch.')
hpicfMldPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 7, 1), ).setIndexNames((0, "HP-ICF-MLD-MIB", "hpicfMldPortConfigEntryInterfaceIfIndex"), (0, "HP-ICF-MLD-MIB", "hpicfMldPortConfigEntryIndex"))
if mibBuilder.loadTexts: hpicfMldPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortConfigEntry.setDescription('The information associated with each MLD port configuration.')
hpicfMldPortConfigEntryInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfMldPortConfigEntryInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortConfigEntryInterfaceIfIndex.setDescription('The internetwork-layer interface value of the interface for which MLD is enabled.')
hpicfMldPortConfigEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfMldPortConfigEntryIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortConfigEntryIndex.setDescription('The ifIndex value which uniquely identifies a row in the Interfaces Table for a port or trunk.')
hpicfMldPortConfigEntryPortModeFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 7, 1, 3), HpicfMldConfigPortModeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMldPortConfigEntryPortModeFeature.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortConfigEntryPortModeFeature.setDescription('The operational status of the MLD feature for this port or trunk. 1 implies that all IP Multicast traffic will be monitored on the port, 2 implies that IP Multicast traffic will be dropped on the port, and 3 implies that all IP Multicast traffic will be forwarded without the switch examining it.')
hpicfMldPortConfigEntryForcedLeaveFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 7, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMldPortConfigEntryForcedLeaveFeature.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortConfigEntryForcedLeaveFeature.setDescription("The operational status of the MLD feature for this port or trunk indicates whether any MLD Leaves received for an IPv6 Multicast group will cause the group to be deleted after the hpicfMLDConfigForcedLeaveInterval if no new MLD Reports are received for that group. Normal behavior is for a group issuing a Leave to be deleted after the Querier's Maximum Response time if no MLD Report is received.")
hpicfMldPortConfigEntryFastLeaveFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 7, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMldPortConfigEntryFastLeaveFeature.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortConfigEntryFastLeaveFeature.setDescription("The operational status of the MLD feature for this port or trunk indicates whether any MLD Leaves received for an IPv6 Multicast group will cause the group to be deleted immediately on single- connection ports. Normal behavior is for a group issuing a Leave to be deleted after the Querier's Maximum Response time if no MLD Report is received.")
hpicfMldFilteredGroupPortCacheTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 8), )
if mibBuilder.loadTexts: hpicfMldFilteredGroupPortCacheTable.setStatus('current')
if mibBuilder.loadTexts: hpicfMldFilteredGroupPortCacheTable.setDescription('This table contains information about the MLD port configurations on this switch.')
hpicfMldFilteredGroupPortCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 8, 1), ).setIndexNames((0, "HP-ICF-MLD-MIB", "hpicfMldFilteredGroupPortCacheIfIndex"), (0, "HP-ICF-MLD-MIB", "hpicfMldFilteredGroupPortCacheGroupAddress"), (0, "HP-ICF-MLD-MIB", "hpicfMldFilteredGroupPortCachePortIndex"))
if mibBuilder.loadTexts: hpicfMldFilteredGroupPortCacheEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfMldFilteredGroupPortCacheEntry.setDescription('The information associated with each MLD port configuration.')
hpicfMldFilteredGroupPortCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfMldFilteredGroupPortCacheIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfMldFilteredGroupPortCacheIfIndex.setDescription('The internetwork-layer interface value of the interface for which MLD is enabled and for which this filtered group exists.')
hpicfMldFilteredGroupPortCacheGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 8, 1, 2), InetAddressIPv6())
if mibBuilder.loadTexts: hpicfMldFilteredGroupPortCacheGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfMldFilteredGroupPortCacheGroupAddress.setDescription('The IPv6 multicast group address for which this entry contains information.')
hpicfMldFilteredGroupPortCachePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfMldFilteredGroupPortCachePortIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfMldFilteredGroupPortCachePortIndex.setDescription('The ifIndex value which uniquely identifies a row in the Interfaces Table for a port or trunk.')
hpicfMldFilteredGroupPortCacheExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 8, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldFilteredGroupPortCacheExpiryTime.setStatus('current')
if mibBuilder.loadTexts: hpicfMldFilteredGroupPortCacheExpiryTime.setDescription('The minimum amount of time remaining before this entry will be aged out.')
hpicfMldSrcListTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 9), )
if mibBuilder.loadTexts: hpicfMldSrcListTable.setStatus('current')
if mibBuilder.loadTexts: hpicfMldSrcListTable.setDescription('HP extensions to the Mgmd standard MIB table mgmdRouterSrcListTable for Ipv6 type.')
hpicfMldSrcListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 9, 1), ).setIndexNames((0, "HP-ICF-MLD-MIB", "hpicfMldSrcListIfIndex"), (0, "HP-ICF-MLD-MIB", "hpicfMldSrcListAddress"), (0, "HP-ICF-MLD-MIB", "hpicfMldSrcListHostAddress"))
if mibBuilder.loadTexts: hpicfMldSrcListEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfMldSrcListEntry.setDescription('HP extensions to the Mgmd standard MIB table mgmdRouterSrcListTable for Ipv6 type.')
hpicfMldSrcListIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfMldSrcListIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfMldSrcListIfIndex.setDescription('The internetwork-layer interface for which this entry contains information for an IPv6 multicast group address.')
hpicfMldSrcListAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 9, 1, 2), InetAddressIPv6().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16))
if mibBuilder.loadTexts: hpicfMldSrcListAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfMldSrcListAddress.setDescription('The IPv6 multicast group address for which this entry contains information.')
hpicfMldSrcListHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 9, 1, 3), InetAddressIPv6().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16))
if mibBuilder.loadTexts: hpicfMldSrcListHostAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfMldSrcListHostAddress.setDescription('The Host Address to which this entry corresponds.')
hpicfMldSrcListPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 9, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldSrcListPorts.setStatus('current')
if mibBuilder.loadTexts: hpicfMldSrcListPorts.setDescription('List of ports for which this entry is either excluded or included.')
hpicfMldSrcListExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 9, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldSrcListExpiry.setStatus('current')
if mibBuilder.loadTexts: hpicfMldSrcListExpiry.setDescription('This value indicates the relevance of the SrcList entry, whereby a non-zero value indicates this is an INCLUDE state value, and a zero value indicates this to be an EXCLUDE state value.')
hpicfMldSrcListUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 9, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldSrcListUpTime.setStatus('current')
if mibBuilder.loadTexts: hpicfMldSrcListUpTime.setDescription('The time elapsed since this entry was created.')
hpicfMldSrcListType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 9, 1, 7), HpicfMcastGroupTypeDefinition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldSrcListType.setStatus('current')
if mibBuilder.loadTexts: hpicfMldSrcListType.setDescription('See HpicfMldGroupTypeDefinition description.')
hpicfMldPortSrcTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 10), )
if mibBuilder.loadTexts: hpicfMldPortSrcTable.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortSrcTable.setDescription('This table contains information about the MLD PortSrc configurations on this switch.')
hpicfMldPortSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 10, 1), ).setIndexNames((0, "HP-ICF-MLD-MIB", "hpicfMldPortSrcIfIndex"), (0, "HP-ICF-MLD-MIB", "hpicfMldPortSrcAddress"), (0, "HP-ICF-MLD-MIB", "hpicfMldPortSrcHostAddress"), (0, "HP-ICF-MLD-MIB", "hpicfMldPortSrcPortIndex"))
if mibBuilder.loadTexts: hpicfMldPortSrcEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortSrcEntry.setDescription('HP extensions for an entry in the MLD PortSrc Table.')
hpicfMldPortSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 10, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfMldPortSrcIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortSrcIfIndex.setDescription('The internetwork-layer interface for which this entry contains information for an IPv6 multicast group address.')
hpicfMldPortSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 10, 1, 2), InetAddressIPv6().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16))
if mibBuilder.loadTexts: hpicfMldPortSrcAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortSrcAddress.setDescription('The IPv6 multicast group address for which this entry contains information.')
hpicfMldPortSrcHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 10, 1, 3), InetAddressIPv6().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16))
if mibBuilder.loadTexts: hpicfMldPortSrcHostAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortSrcHostAddress.setDescription('The Host Address to which this entry corresponds.')
hpicfMldPortSrcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfMldPortSrcPortIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortSrcPortIndex.setDescription('The ifIndex value which uniquely identifies a row in the PortSrc Table for a port or trunk.')
hpicfMldPortSrcExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 10, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldPortSrcExpiry.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortSrcExpiry.setDescription('This value indicates the relevance of the SrcList entry, whereby a non-zero value indicates this is an INCLUDE state value, and a zero value indicates this to be an EXCLUDE state value.')
hpicfMldPortSrcUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 10, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldPortSrcUpTime.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortSrcUpTime.setDescription('The time elapsed since this entry was created.')
hpicfMldPortSrcFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldPortSrcFilterMode.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortSrcFilterMode.setDescription('The Value indicates whether the port state is include(1) or exclude(2).')
hpicfMldMcastExcludeGroupJoinsCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldMcastExcludeGroupJoinsCount.setStatus('current')
if mibBuilder.loadTexts: hpicfMldMcastExcludeGroupJoinsCount.setDescription('Number of multicast groups in Exclude mode.')
hpicfMldMcastIncludeGroupJoinsCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldMcastIncludeGroupJoinsCount.setStatus('current')
if mibBuilder.loadTexts: hpicfMldMcastIncludeGroupJoinsCount.setDescription(' Number of multicast groups in Include mode.')
hpicfMldMcastPortFastLearn = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 13), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMldMcastPortFastLearn.setStatus('current')
if mibBuilder.loadTexts: hpicfMldMcastPortFastLearn.setDescription('List of ports on which the fast learn feature is enabled')
hpicfMldGroupPortCacheTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 14), )
if mibBuilder.loadTexts: hpicfMldGroupPortCacheTable.setStatus('current')
if mibBuilder.loadTexts: hpicfMldGroupPortCacheTable.setDescription('This table contains information about the MLD port configurations on this switch.')
hpicfMldGroupPortCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 14, 1), ).setIndexNames((0, "HP-ICF-MLD-MIB", "hpicfMldGroupPortCacheIfIndex"), (0, "HP-ICF-MLD-MIB", "hpicfMldGroupPortCacheGroupAddress"), (0, "HP-ICF-MLD-MIB", "hpicfMldGroupPortCachePortIndex"))
if mibBuilder.loadTexts: hpicfMldGroupPortCacheEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfMldGroupPortCacheEntry.setDescription('The information associated with each MLD port configuration.')
hpicfMldGroupPortCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 14, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfMldGroupPortCacheIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfMldGroupPortCacheIfIndex.setDescription('The internetwork-layer interface value of the interface for which MLD is enabled and for which this group exists.')
hpicfMldGroupPortCacheGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 14, 1, 2), InetAddressIPv6())
if mibBuilder.loadTexts: hpicfMldGroupPortCacheGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfMldGroupPortCacheGroupAddress.setDescription('The IPv6 multicast group address for which this entry contains information.')
hpicfMldGroupPortCachePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfMldGroupPortCachePortIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfMldGroupPortCachePortIndex.setDescription('The ifIndex value which uniquely identifies a row in the Interfaces Table for a port or trunk.')
hpicfMldGroupPortCacheExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 14, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldGroupPortCacheExpiryTime.setStatus('current')
if mibBuilder.loadTexts: hpicfMldGroupPortCacheExpiryTime.setDescription('The minimum amount of time remaining before this entry will be aged out.')
hpicfMldGroupPortCacheUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 14, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldGroupPortCacheUpTime.setStatus('current')
if mibBuilder.loadTexts: hpicfMldGroupPortCacheUpTime.setDescription('The time elapsed since this entry was created.')
hpicfMldGroupPortCacheVersion1Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 14, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldGroupPortCacheVersion1Timer.setStatus('current')
if mibBuilder.loadTexts: hpicfMldGroupPortCacheVersion1Timer.setDescription('The time remaining until the local router will assume that there are no longer any MLD version 1 members on this port.')
hpicfMldGroupPortCacheFilterTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 14, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldGroupPortCacheFilterTimer.setStatus('current')
if mibBuilder.loadTexts: hpicfMldGroupPortCacheFilterTimer.setDescription('The time remaining before the port in EXCLUDE state expires and transitions to INCLUDE mode.')
hpicfMldGroupPortCacheFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldGroupPortCacheFilterMode.setStatus('current')
if mibBuilder.loadTexts: hpicfMldGroupPortCacheFilterMode.setDescription('The Value indicates whether the port state is include(1) or exclude(2).')
hpicfMldGroupPortCacheExcludeSrcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldGroupPortCacheExcludeSrcCount.setStatus('current')
if mibBuilder.loadTexts: hpicfMldGroupPortCacheExcludeSrcCount.setDescription('Current number of sources excluded on this port.')
hpicfMldGroupPortCacheRequestedSrcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfMldGroupPortCacheRequestedSrcCount.setStatus('current')
if mibBuilder.loadTexts: hpicfMldGroupPortCacheRequestedSrcCount.setDescription('Current number of sources requested on this port.')
hpicfMldReload = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfMldReload.setStatus('current')
if mibBuilder.loadTexts: hpicfMldReload.setDescription('Setting this object to true will reset MLD on all interfaces, while setting this object to false does not have any impact. A get on this object will always return false.')
hpicfMldBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 1, 1)).setObjects(("HP-ICF-MLD-MIB", "hpicfMldControlUnknownMulticast"), ("HP-ICF-MLD-MIB", "hpicfMldConfigForcedLeaveInterval"), ("HP-ICF-MLD-MIB", "hpicfMldEnabledCount"), ("HP-ICF-MLD-MIB", "hpicfMldMcastGroupJoinsCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMldBaseGroup = hpicfMldBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMldBaseGroup.setDescription('A collection of objects to support basic MLD configuration information on HP routers.')
hpicfMldIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 1, 2)).setObjects(("HP-ICF-MLD-MIB", "hpicfMldIfEntryQuerierFeature"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntrySnoopingFeature"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryQuerierPort"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryFilteredJoins"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStandardJoins"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryPortsWithMcastRouter"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatGeneralQueryRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatQueryTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatGSQRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatGSQTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMldV1ReportRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMldV2ReportRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMldV1LeaveRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatUnknownMldTypeRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatUnknownPktRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatForwardToRoutersTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatForwardToAllPortsTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatFastLeaves"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatForcedFastLeaves"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatJoinTimeouts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMldIfGroup = hpicfMldIfGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfGroup.setDescription('A collection of objects that extends objects defined in mldInterfaceTable and used to support management of interfaces with MLD enabled.')
hpicfMldCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 1, 3)).setObjects(("HP-ICF-MLD-MIB", "hpicfMldCacheSelf"), ("HP-ICF-MLD-MIB", "hpicfMldCacheLastReporter"), ("HP-ICF-MLD-MIB", "hpicfMldCacheUpTime"), ("HP-ICF-MLD-MIB", "hpicfMldCacheExpiryTime"), ("HP-ICF-MLD-MIB", "hpicfMldGroupType"), ("HP-ICF-MLD-MIB", "hpicfJoinedPorts"), ("HP-ICF-MLD-MIB", "hpicfMldCacheStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMldCacheGroup = hpicfMldCacheGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMldCacheGroup.setDescription('A collection of objects that extends objects defined in mldCacheTable and used to support management of interfaces with MLD enabled.')
hpicfMldPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 1, 4)).setObjects(("HP-ICF-MLD-MIB", "hpicfMldPortConfigEntryPortModeFeature"), ("HP-ICF-MLD-MIB", "hpicfMldPortConfigEntryForcedLeaveFeature"), ("HP-ICF-MLD-MIB", "hpicfMldPortConfigEntryFastLeaveFeature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMldPortGroup = hpicfMldPortGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortGroup.setDescription('A collection of objects that extends objects defined in mldInterfaceTable and used to support management of interfaces with MLD enabled.')
hpicfMldFilteredGroupPortCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 1, 5)).setObjects(("HP-ICF-MLD-MIB", "hpicfMldFilteredGroupPortCacheExpiryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMldFilteredGroupPortCacheGroup = hpicfMldFilteredGroupPortCacheGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMldFilteredGroupPortCacheGroup.setDescription('A collection of objects that extends objects defined in hpicfMldCacheTable which are of type filtered. These are used to support management of interfaces with MLD enabled.')
hpicfMldBaseGroupV2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 1, 6)).setObjects(("HP-ICF-MLD-MIB", "hpicfMldControlUnknownMulticast"), ("HP-ICF-MLD-MIB", "hpicfMldConfigForcedLeaveInterval"), ("HP-ICF-MLD-MIB", "hpicfMldEnabledCount"), ("HP-ICF-MLD-MIB", "hpicfMldMcastGroupJoinsCount"), ("HP-ICF-MLD-MIB", "hpicfMldMcastExcludeGroupJoinsCount"), ("HP-ICF-MLD-MIB", "hpicfMldMcastIncludeGroupJoinsCount"), ("HP-ICF-MLD-MIB", "hpicfMldMcastPortFastLearn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMldBaseGroupV2 = hpicfMldBaseGroupV2.setStatus('current')
if mibBuilder.loadTexts: hpicfMldBaseGroupV2.setDescription('A collection of objects to support basic MLD configuration information on HP routers.')
hpicfMldIfGroupV2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 1, 7)).setObjects(("HP-ICF-MLD-MIB", "hpicfMldIfEntryQuerierFeature"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntrySnoopingFeature"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryQuerierPort"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryFilteredJoins"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStandardJoins"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryPortsWithMcastRouter"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatGeneralQueryRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatQueryTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatGSQRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatGSQTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMldV1ReportRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMldV2ReportRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMldV1LeaveRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatUnknownMldTypeRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatUnknownPktRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatForwardToRoutersTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatForwardToAllPortsTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatFastLeaves"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatForcedFastLeaves"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatJoinTimeouts"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatWrongVersionQueries"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryLastMemberQueryCount"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStartupQueryCount"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStartupQueryInterval"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatExcludeGroupJoinsCount"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatIncludeGroupJoinsCount"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatFilteredExcludeGroupJoinsCount"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatFilteredIncludeGroupJoinsCount"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatStandardExcludeGroupJoinsCount"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatStandardIncludeGroupJoinsCount"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatV1QueryTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatV1QueryRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatV2QueryTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatV2QueryRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatGSSQTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatGSSQRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMalformedPktRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatBadCheckSumRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMartianSourceRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatPacketsRxOnDisabled"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStrictVersionMode"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMldV1ReportTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMldV2ReportTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryState"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatV1GSQRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatV1GSQTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatV2GSQRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatV2GSQTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMldIfGroupV2 = hpicfMldIfGroupV2.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfGroupV2.setDescription('A collection of objects that extends objects defined in mldInterfaceTable and used to support management of interfaces with MLD enabled.')
hpicfMldCacheGroupV2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 1, 8)).setObjects(("HP-ICF-MLD-MIB", "hpicfMldCacheSelf"), ("HP-ICF-MLD-MIB", "hpicfMldCacheLastReporter"), ("HP-ICF-MLD-MIB", "hpicfMldCacheUpTime"), ("HP-ICF-MLD-MIB", "hpicfMldCacheExpiryTime"), ("HP-ICF-MLD-MIB", "hpicfMldGroupType"), ("HP-ICF-MLD-MIB", "hpicfJoinedPorts"), ("HP-ICF-MLD-MIB", "hpicfMldCacheStatus"), ("HP-ICF-MLD-MIB", "hpicfMldCacheFilterMode"), ("HP-ICF-MLD-MIB", "hpicfMldCacheExcludeModeExpiryTimer"), ("HP-ICF-MLD-MIB", "hpicfMldCacheVersion1HostTimer"), ("HP-ICF-MLD-MIB", "hpicfMldCacheSrcCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMldCacheGroupV2 = hpicfMldCacheGroupV2.setStatus('current')
if mibBuilder.loadTexts: hpicfMldCacheGroupV2.setDescription('A collection of objects that extends objects defined in mldCacheTable and used to support management of interfaces with MLD enabled.')
hpicfMldSrcListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 1, 9)).setObjects(("HP-ICF-MLD-MIB", "hpicfMldSrcListPorts"), ("HP-ICF-MLD-MIB", "hpicfMldSrcListExpiry"), ("HP-ICF-MLD-MIB", "hpicfMldSrcListUpTime"), ("HP-ICF-MLD-MIB", "hpicfMldSrcListType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMldSrcListGroup = hpicfMldSrcListGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMldSrcListGroup.setDescription('A collection of objects that extends objects defined in Mgmd standard MIB table mgmdRouterSrcListTable for Ipv6 type.')
hpicfMldPortSrcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 1, 10)).setObjects(("HP-ICF-MLD-MIB", "hpicfMldPortSrcExpiry"), ("HP-ICF-MLD-MIB", "hpicfMldPortSrcUpTime"), ("HP-ICF-MLD-MIB", "hpicfMldPortSrcFilterMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMldPortSrcGroup = hpicfMldPortSrcGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMldPortSrcGroup.setDescription('A collection of objects containing information about the MLD PortSrc configurations on this switch')
hpicfMldGroupPortCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 1, 11)).setObjects(("HP-ICF-MLD-MIB", "hpicfMldGroupPortCacheExpiryTime"), ("HP-ICF-MLD-MIB", "hpicfMldGroupPortCacheUpTime"), ("HP-ICF-MLD-MIB", "hpicfMldGroupPortCacheVersion1Timer"), ("HP-ICF-MLD-MIB", "hpicfMldGroupPortCacheFilterTimer"), ("HP-ICF-MLD-MIB", "hpicfMldGroupPortCacheFilterMode"), ("HP-ICF-MLD-MIB", "hpicfMldGroupPortCacheExcludeSrcCount"), ("HP-ICF-MLD-MIB", "hpicfMldGroupPortCacheRequestedSrcCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMldGroupPortCacheGroup = hpicfMldGroupPortCacheGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMldGroupPortCacheGroup.setDescription('A collection of objects that extends objects defined in hpicfMldCacheTable. These are used to support management of interfaces with MLD enabled.')
hpicfMldIfGroupV3 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 1, 12)).setObjects(("HP-ICF-MLD-MIB", "hpicfMldIfEntryQuerierFeature"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntrySnoopingFeature"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryQuerierPort"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryFilteredJoins"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStandardJoins"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryPortsWithMcastRouter"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatGeneralQueryRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatQueryTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatGSQRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatGSQTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMldV1ReportRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMldV2ReportRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMldV1LeaveRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatUnknownMldTypeRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatUnknownPktRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatForwardToRoutersTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatForwardToAllPortsTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatFastLeaves"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatForcedFastLeaves"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatJoinTimeouts"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatWrongVersionQueries"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryLastMemberQueryCount"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStartupQueryCount"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStartupQueryInterval"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatExcludeGroupJoinsCount"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatIncludeGroupJoinsCount"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatFilteredExcludeGroupJoinsCount"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatFilteredIncludeGroupJoinsCount"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatStandardExcludeGroupJoinsCount"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatStandardIncludeGroupJoinsCount"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatV1QueryTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatV1QueryRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatV2QueryTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatV2QueryRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatGSSQTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatGSSQRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMalformedPktRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatBadCheckSumRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMartianSourceRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatPacketsRxOnDisabled"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStrictVersionMode"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMldV1ReportTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatMldV2ReportTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryState"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatV1GSQRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatV1GSQTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatV2GSQRx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStatV2GSQTx"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryStartupQueryExpiryTime"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryOtherQuerierInterval"), ("HP-ICF-MLD-MIB", "hpicfMldIfEntryOtherQuerierExpiryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMldIfGroupV3 = hpicfMldIfGroupV3.setStatus('current')
if mibBuilder.loadTexts: hpicfMldIfGroupV3.setDescription('A collection of objects that extends objects defined in mldInterfaceTable and used to support management of interfaces with MLD enabled.')
hpicfMldReloadModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 1, 13)).setObjects(("HP-ICF-MLD-MIB", "hpicfMldReload"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMldReloadModeGroup = hpicfMldReloadModeGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfMldReloadModeGroup.setDescription('A collection of objects for MLD Reload mode.')
hpicfMldMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 2, 1)).setObjects(("HP-ICF-MLD-MIB", "hpicfMldBaseGroup"), ("HP-ICF-MLD-MIB", "hpicfMldIfGroup"), ("HP-ICF-MLD-MIB", "hpicfMldCacheGroup"), ("HP-ICF-MLD-MIB", "hpicfMldPortGroup"), ("HP-ICF-MLD-MIB", "hpicfMldFilteredGroupPortCacheGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMldMIBCompliance = hpicfMldMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfMldMIBCompliance.setDescription('The compliance statement for HP routers running MLD and implementing the HP-ICF-MLD MIB.')
hpicfMldMIBComplianceV2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 2, 2)).setObjects(("HP-ICF-MLD-MIB", "hpicfMldBaseGroupV2"), ("HP-ICF-MLD-MIB", "hpicfMldIfGroupV2"), ("HP-ICF-MLD-MIB", "hpicfMldCacheGroupV2"), ("HP-ICF-MLD-MIB", "hpicfMldPortGroup"), ("HP-ICF-MLD-MIB", "hpicfMldFilteredGroupPortCacheGroup"), ("HP-ICF-MLD-MIB", "hpicfMldSrcListGroup"), ("HP-ICF-MLD-MIB", "hpicfMldPortSrcGroup"), ("HP-ICF-MLD-MIB", "hpicfMldGroupPortCacheGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMldMIBComplianceV2 = hpicfMldMIBComplianceV2.setStatus('current')
if mibBuilder.loadTexts: hpicfMldMIBComplianceV2.setDescription('The compliance statement for HP routers running MLD and implementing the HP-ICF-MLD MIB.')
hpicfMldMIBComplianceV3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 48, 2, 2, 3)).setObjects(("HP-ICF-MLD-MIB", "hpicfMldBaseGroupV2"), ("HP-ICF-MLD-MIB", "hpicfMldIfGroupV3"), ("HP-ICF-MLD-MIB", "hpicfMldCacheGroupV2"), ("HP-ICF-MLD-MIB", "hpicfMldPortGroup"), ("HP-ICF-MLD-MIB", "hpicfMldFilteredGroupPortCacheGroup"), ("HP-ICF-MLD-MIB", "hpicfMldSrcListGroup"), ("HP-ICF-MLD-MIB", "hpicfMldPortSrcGroup"), ("HP-ICF-MLD-MIB", "hpicfMldGroupPortCacheGroup"), ("HP-ICF-MLD-MIB", "hpicfMldReloadModeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfMldMIBComplianceV3 = hpicfMldMIBComplianceV3.setStatus('current')
if mibBuilder.loadTexts: hpicfMldMIBComplianceV3.setDescription('The compliance statement for HP routers running MLD and implementing the HP-ICF-MLD MIB.')
mibBuilder.exportSymbols("HP-ICF-MLD-MIB", hpicfMldCacheSelf=hpicfMldCacheSelf, hpicfMldIfGroupV2=hpicfMldIfGroupV2, hpicfMldPortSrcExpiry=hpicfMldPortSrcExpiry, hpicfMldIfGroup=hpicfMldIfGroup, hpicfMldIfEntryStatForwardToRoutersTx=hpicfMldIfEntryStatForwardToRoutersTx, hpicfMldIfEntryStatBadCheckSumRx=hpicfMldIfEntryStatBadCheckSumRx, hpicfJoinedPorts=hpicfJoinedPorts, hpicfMldIfEntryStatMldV2ReportTx=hpicfMldIfEntryStatMldV2ReportTx, HpicfMldIfEntryState=HpicfMldIfEntryState, hpicfMldConfigForcedLeaveInterval=hpicfMldConfigForcedLeaveInterval, hpicfMldPortSrcGroup=hpicfMldPortSrcGroup, hpicfMldCacheLastReporter=hpicfMldCacheLastReporter, hpicfMldGroupPortCacheRequestedSrcCount=hpicfMldGroupPortCacheRequestedSrcCount, hpicfMldGroupType=hpicfMldGroupType, hpicfMldGroupPortCacheExcludeSrcCount=hpicfMldGroupPortCacheExcludeSrcCount, hpicfMldIfEntryStatExcludeGroupJoinsCount=hpicfMldIfEntryStatExcludeGroupJoinsCount, hpicfMldIfEntryStatPacketsRxOnDisabled=hpicfMldIfEntryStatPacketsRxOnDisabled, hpicfMldSrcListUpTime=hpicfMldSrcListUpTime, hpicfMldIfEntryLastMemberQueryCount=hpicfMldIfEntryLastMemberQueryCount, hpicfMldPortSrcFilterMode=hpicfMldPortSrcFilterMode, hpicfMldIfEntryStatQueryTx=hpicfMldIfEntryStatQueryTx, hpicfMldIfEntryStatForwardToAllPortsTx=hpicfMldIfEntryStatForwardToAllPortsTx, hpicfMldIfEntryStatGSQRx=hpicfMldIfEntryStatGSQRx, hpicfMldIfEntryStatV2QueryTx=hpicfMldIfEntryStatV2QueryTx, hpicfMldPortConfigEntryFastLeaveFeature=hpicfMldPortConfigEntryFastLeaveFeature, hpicfMldIfEntryStatForcedFastLeaves=hpicfMldIfEntryStatForcedFastLeaves, HpicfMldConfigPortModeType=HpicfMldConfigPortModeType, hpicfMldSrcListExpiry=hpicfMldSrcListExpiry, hpicfMldSrcListAddress=hpicfMldSrcListAddress, hpicfMldSrcListPorts=hpicfMldSrcListPorts, hpicfMldGroupPortCacheGroupAddress=hpicfMldGroupPortCacheGroupAddress, hpicfMldIfEntryStatGeneralQueryRx=hpicfMldIfEntryStatGeneralQueryRx, hpicfMldIfEntryStatMalformedPktRx=hpicfMldIfEntryStatMalformedPktRx, hpicfMldIfEntryStatUnknownMldTypeRx=hpicfMldIfEntryStatUnknownMldTypeRx, hpicfMldCacheExcludeModeExpiryTimer=hpicfMldCacheExcludeModeExpiryTimer, hpicfMldGroupPortCacheFilterTimer=hpicfMldGroupPortCacheFilterTimer, hpicfMldIfEntryQuerierFeature=hpicfMldIfEntryQuerierFeature, hpicfMldSrcListHostAddress=hpicfMldSrcListHostAddress, hpicfMldSrcListGroup=hpicfMldSrcListGroup, hpicfMldCacheUpTime=hpicfMldCacheUpTime, hpicfMldFilteredGroupPortCacheIfIndex=hpicfMldFilteredGroupPortCacheIfIndex, hpicfMldIfEntryStatV1QueryRx=hpicfMldIfEntryStatV1QueryRx, hpicfMldIfEntryPortsWithMcastRouter=hpicfMldIfEntryPortsWithMcastRouter, hpicfMldMcastPortFastLearn=hpicfMldMcastPortFastLearn, hpicfMldMcastGroupJoinsCount=hpicfMldMcastGroupJoinsCount, hpicfMldPortSrcIfIndex=hpicfMldPortSrcIfIndex, hpicfMldIfEntryStatV1GSQRx=hpicfMldIfEntryStatV1GSQRx, hpicfMldMIBComplianceV3=hpicfMldMIBComplianceV3, HpicfMcastGroupTypeDefinition=HpicfMcastGroupTypeDefinition, hpicfMldPortConfigEntryForcedLeaveFeature=hpicfMldPortConfigEntryForcedLeaveFeature, hpicfMldPortConfigEntry=hpicfMldPortConfigEntry, hpicfMldIfEntrySnoopingFeature=hpicfMldIfEntrySnoopingFeature, hpicfMldIfEntryStatMldV1LeaveRx=hpicfMldIfEntryStatMldV1LeaveRx, hpicfMldIfEntryStatV1GSQTx=hpicfMldIfEntryStatV1GSQTx, hpicfMldFilteredGroupPortCacheTable=hpicfMldFilteredGroupPortCacheTable, hpicfMldIfEntryStatV2GSQTx=hpicfMldIfEntryStatV2GSQTx, hpicfMldIfEntryStartupQueryExpiryTime=hpicfMldIfEntryStartupQueryExpiryTime, hpicfMldIfTable=hpicfMldIfTable, hpicfMldIfEntryStatWrongVersionQueries=hpicfMldIfEntryStatWrongVersionQueries, hpicfMldPortConfigEntryPortModeFeature=hpicfMldPortConfigEntryPortModeFeature, hpicfMldIfEntryStrictVersionMode=hpicfMldIfEntryStrictVersionMode, hpicfMldPortSrcUpTime=hpicfMldPortSrcUpTime, hpicfMldConformance=hpicfMldConformance, hpicfMldIfEntryStatStandardExcludeGroupJoinsCount=hpicfMldIfEntryStatStandardExcludeGroupJoinsCount, hpicfMldFilteredGroupPortCacheGroup=hpicfMldFilteredGroupPortCacheGroup, hpicfMldIfEntryStatGSSQRx=hpicfMldIfEntryStatGSSQRx, hpicfMldPortSrcHostAddress=hpicfMldPortSrcHostAddress, hpicfMldPortConfigEntryIndex=hpicfMldPortConfigEntryIndex, hpicfMldGroupPortCacheExpiryTime=hpicfMldGroupPortCacheExpiryTime, hpicfMldMIB=hpicfMldMIB, hpicfMldSrcListIfIndex=hpicfMldSrcListIfIndex, hpicfMldIfGroupV3=hpicfMldIfGroupV3, hpicfMldCacheExpiryTime=hpicfMldCacheExpiryTime, hpicfMldIfEntryStatUnknownPktRx=hpicfMldIfEntryStatUnknownPktRx, hpicfMldGroupPortCacheTable=hpicfMldGroupPortCacheTable, hpicfMldCacheIfIndex=hpicfMldCacheIfIndex, hpicfMldGroupPortCacheFilterMode=hpicfMldGroupPortCacheFilterMode, hpicfMldCacheTable=hpicfMldCacheTable, hpicfMldCompliances=hpicfMldCompliances, hpicfMldCacheVersion1HostTimer=hpicfMldCacheVersion1HostTimer, hpicfMldIfEntryQuerierPort=hpicfMldIfEntryQuerierPort, hpicfMldPortSrcTable=hpicfMldPortSrcTable, hpicfMldIfEntryStartupQueryCount=hpicfMldIfEntryStartupQueryCount, PYSNMP_MODULE_ID=hpicfMldMIB, hpicfMldIfEntryStatMartianSourceRx=hpicfMldIfEntryStatMartianSourceRx, hpicfMldIfEntryOtherQuerierInterval=hpicfMldIfEntryOtherQuerierInterval, hpicfMldSrcListEntry=hpicfMldSrcListEntry, hpicfMldPortSrcEntry=hpicfMldPortSrcEntry, hpicfMldGroups=hpicfMldGroups, hpicfMldFilteredGroupPortCacheEntry=hpicfMldFilteredGroupPortCacheEntry, hpicfMldGroupPortCacheIfIndex=hpicfMldGroupPortCacheIfIndex, hpicfMldIfEntryOtherQuerierExpiryTime=hpicfMldIfEntryOtherQuerierExpiryTime, hpicfMldCacheSrcCount=hpicfMldCacheSrcCount, hpicfMldPortConfigTable=hpicfMldPortConfigTable, hpicfMldObjects=hpicfMldObjects, hpicfMldMIBComplianceV2=hpicfMldMIBComplianceV2, hpicfMldIfEntryStatStandardIncludeGroupJoinsCount=hpicfMldIfEntryStatStandardIncludeGroupJoinsCount, hpicfMldPortConfigEntryInterfaceIfIndex=hpicfMldPortConfigEntryInterfaceIfIndex, hpicfMldIfEntryStartupQueryInterval=hpicfMldIfEntryStartupQueryInterval, hpicfMldCacheFilterMode=hpicfMldCacheFilterMode, hpicfMldGroupPortCacheEntry=hpicfMldGroupPortCacheEntry, hpicfMldIfEntryStatV2GSQRx=hpicfMldIfEntryStatV2GSQRx, hpicfMldIfEntryStandardJoins=hpicfMldIfEntryStandardJoins, hpicfMldControlUnknownMulticast=hpicfMldControlUnknownMulticast, hpicfMldIfEntryStatMldV2ReportRx=hpicfMldIfEntryStatMldV2ReportRx, hpicfMldIfEntry=hpicfMldIfEntry, hpicfMldIfEntryState=hpicfMldIfEntryState, hpicfMldCacheAddress=hpicfMldCacheAddress, hpicfMldFilteredGroupPortCachePortIndex=hpicfMldFilteredGroupPortCachePortIndex, hpicfMldIfEntryStatV2QueryRx=hpicfMldIfEntryStatV2QueryRx, hpicfMldIfEntryStatGSQTx=hpicfMldIfEntryStatGSQTx, hpicfMldIfEntryStatIncludeGroupJoinsCount=hpicfMldIfEntryStatIncludeGroupJoinsCount, hpicfMldMcastIncludeGroupJoinsCount=hpicfMldMcastIncludeGroupJoinsCount, hpicfMldIfEntryStatFilteredIncludeGroupJoinsCount=hpicfMldIfEntryStatFilteredIncludeGroupJoinsCount, hpicfMldIfEntryStatV1QueryTx=hpicfMldIfEntryStatV1QueryTx, hpicfMldPortSrcPortIndex=hpicfMldPortSrcPortIndex, hpicfMldReloadModeGroup=hpicfMldReloadModeGroup, hpicfMldIfEntryStatMldV1ReportRx=hpicfMldIfEntryStatMldV1ReportRx, hpicfMldIfEntryStatMldV1ReportTx=hpicfMldIfEntryStatMldV1ReportTx, hpicfMldReload=hpicfMldReload, hpicfMldMIBCompliance=hpicfMldMIBCompliance, hpicfMldIfEntryStatFastLeaves=hpicfMldIfEntryStatFastLeaves, hpicfMldGroupPortCacheVersion1Timer=hpicfMldGroupPortCacheVersion1Timer, hpicfMldIfEntryStatGSSQTx=hpicfMldIfEntryStatGSSQTx, hpicfMldMcastExcludeGroupJoinsCount=hpicfMldMcastExcludeGroupJoinsCount, hpicfMldFilteredGroupPortCacheExpiryTime=hpicfMldFilteredGroupPortCacheExpiryTime, hpicfMldBaseGroup=hpicfMldBaseGroup, hpicfMldSrcListType=hpicfMldSrcListType, hpicfMldCacheStatus=hpicfMldCacheStatus, hpicfMldGroupPortCacheUpTime=hpicfMldGroupPortCacheUpTime, hpicfMldIfEntryStatFilteredExcludeGroupJoinsCount=hpicfMldIfEntryStatFilteredExcludeGroupJoinsCount, hpicfMldCacheGroupV2=hpicfMldCacheGroupV2, hpicfMldEnabledCount=hpicfMldEnabledCount, hpicfMldPortGroup=hpicfMldPortGroup, hpicfMldSrcListTable=hpicfMldSrcListTable, hpicfMldCacheEntry=hpicfMldCacheEntry, hpicfMldGroupPortCachePortIndex=hpicfMldGroupPortCachePortIndex, hpicfMld=hpicfMld, hpicfMldBaseGroupV2=hpicfMldBaseGroupV2, hpicfMldPortSrcAddress=hpicfMldPortSrcAddress, hpicfMldIfEntryFilteredJoins=hpicfMldIfEntryFilteredJoins, hpicfMldGroupPortCacheGroup=hpicfMldGroupPortCacheGroup, hpicfMldIfEntryStatJoinTimeouts=hpicfMldIfEntryStatJoinTimeouts, hpicfMldCacheGroup=hpicfMldCacheGroup, hpicfMldFilteredGroupPortCacheGroupAddress=hpicfMldFilteredGroupPortCacheGroupAddress)
