#
# PySNMP MIB module PKTC-IETF-EVENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PKTC-IETF-EVENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:40:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ifPhysAddress, = mibBuilder.importSymbols("IF-MIB", "ifPhysAddress")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
snmpNotifyGroup, snmpNotifyFilterGroup = mibBuilder.importSymbols("SNMP-NOTIFICATION-MIB", "snmpNotifyGroup", "snmpNotifyFilterGroup")
snmpTargetResponseGroup, snmpTargetBasicGroup = mibBuilder.importSymbols("SNMP-TARGET-MIB", "snmpTargetResponseGroup", "snmpTargetBasicGroup")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, mib_2, ModuleIdentity, Unsigned32, iso, TimeTicks, IpAddress, MibIdentifier, Integer32, Counter64, NotificationType, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "mib-2", "ModuleIdentity", "Unsigned32", "iso", "TimeTicks", "IpAddress", "MibIdentifier", "Integer32", "Counter64", "NotificationType", "Bits", "Gauge32")
TextualConvention, DisplayString, DateAndTime, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime", "TruthValue")
SyslogFacility, SyslogSeverity = mibBuilder.importSymbols("SYSLOG-TC-MIB", "SyslogFacility", "SyslogSeverity")
pktcIetfEventMib = ModuleIdentity((1, 3, 6, 1, 2, 1, 182))
pktcIetfEventMib.setRevisions(('2009-03-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pktcIetfEventMib.setRevisionsDescriptions(('Initial version, published as RFC 5428.',))
if mibBuilder.loadTexts: pktcIetfEventMib.setLastUpdated('200903300000Z')
if mibBuilder.loadTexts: pktcIetfEventMib.setOrganization('IETF IP over Cable Data Network Working Group')
if mibBuilder.loadTexts: pktcIetfEventMib.setContactInfo('Sumanth Channabasappa Cable Television Laboratories, Inc. 858 Coal Creek Circle, Louisville, CO 80027, USA +1 303-661-3307 Sumanth@cablelabs.com Wim De Ketelaere tComLabs Gildestraat 8 9000 Gent, Belgium +32 9 269 22 90 deketelaere@tComLabs.com Eugene Nechamkin Broadcom Corporation 200 - 13711 International Place Richmond, BC, V6V 2Z8, Canada +1 604 233 8500 enechamkin@broadcom.com IETF IPCDN Working Group General Discussion: ipcdn@ietf.org Subscribe: http://www.ietf.org/mailman/listinfo/ipcdn Archive: ftp://ftp.ietf.org/ietf-mail-archive/ipcdn Co-Chair: Jean-Francois Mule, jf.mule@cablelabs.com Co-Chair: Richard Woundy, Richard_Woundy@cable.comcast.com')
if mibBuilder.loadTexts: pktcIetfEventMib.setDescription("This MIB module specifies the basic management objects for managing events generated by the Multimedia Terminal Adapter devices compliant with the PacketCable and IPCablecom requirements. Copyright (c) 2009 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of Internet Society, IETF or IETF Trust, nor the names of specific contributors, may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. This version of this MIB module is part of RFC 5428; see the RFC itself for full legal notices.")
class SyslogSeverityMask(TextualConvention, Bits):
    description = "This textual convention represents a bit mask representing the severity of the syslog events that can be generated. It corresponds to the various severity levels associated with syslog messages, as specified in 'The Syslog Protocol', [RFC5424]. emerg (0), - emergency; system is unusable alert (1), - action must be taken immediately crit (2), - critical condition err (3), - error condition warning (4), - warning condition notice (5), - normal but significant condition info (6), - informational message debug (7) - debug-level messages"
    status = 'current'
    namedValues = NamedValues(("emerg", 0), ("alert", 1), ("crit", 2), ("err", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7))

pktcEventNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 182, 0))
pktcEventMibObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 182, 1))
pktcEventConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 182, 2))
pktcEventControl = MibIdentifier((1, 3, 6, 1, 2, 1, 182, 1, 1))
pktcEventThrottle = MibIdentifier((1, 3, 6, 1, 2, 1, 182, 1, 2))
pktcEventStatus = MibIdentifier((1, 3, 6, 1, 2, 1, 182, 1, 3))
pktcEvents = MibIdentifier((1, 3, 6, 1, 2, 1, 182, 1, 4))
pktcEventLog = MibIdentifier((1, 3, 6, 1, 2, 1, 182, 1, 5))
pktcEventReset = MibScalar((1, 3, 6, 1, 2, 1, 182, 1, 1, 1), Bits().clone(namedValues=NamedValues(("resetEventLogTable", 0), ("resetEventTable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pktcEventReset.setStatus('current')
if mibBuilder.loadTexts: pktcEventReset.setDescription("This MIB object allows a management station to clear the local log of generated events, reset the management event descriptions, or both. MTAs generate management events. These events are stored in the MIB table pktcEventLogTable. If a management station needs to clear all the current entries (e.g., after a troubleshooting operation is complete), it can do so by setting the resetEventLogTable(0) bit to a value of '1'. The MTA is pre-configured with the events that it can generate. This is stored in the MIB table pktcEventTable. This table also contains the descriptions associated with these events. These descriptions can be modified by a management station. However, if the management station wishes to reset the descriptions to factory defaults, it can do so by setting the resetEventTable(1) bit to a value of '1'. The MTA actions are summarized below: Bit resetEventLogTable(0) set to a value of '1' - delete all entries in pktcEventLogTable; - reset the value of pktcEventLogIndex to '0'. Bit resetEventTable(1) set to a value of '1' - reset the pktcEventTable to the factory default values. Bits resetEventLogTable(0) and resetEventTable(1) set to a value of '1' - perform the above actions as though they were performed individually (in any order). Setting a reset bit to a value of '0' MUST NOT result in any action. The MTA MUST perform the above actions regardless of persistence (i.e., storage in non-volatile memory). The MTA MUST always return a value of '00' when this MIB object is read. A management station that resets tables using this MIB object needs to be careful about the impact to other management stations that may be reliant on the information contained in the table(s) being reset. For example, say management station A creates a specific set of event descriptions in the event table (pktcEventTable) for debugging purposes and expects any generated events to report the modified descriptions. In such a case, if another management station resets the event table to factory defaults, any subsequent events will not contain the modified descriptions expected by management station A. Such multi-manager contentions are not addressed within this MIB module. Thus, management stations are RECOMMENDED to use this MIB object with care and caution, and only when absolutely required.")
pktcEventSyslog = MibIdentifier((1, 3, 6, 1, 2, 1, 182, 1, 1, 2))
pktcEventSyslogCapabilities = MibScalar((1, 3, 6, 1, 2, 1, 182, 1, 1, 2, 1), Bits().clone(namedValues=NamedValues(("formatBSDSyslog", 0), ("formatSyslogProtocol", 1), ("transportUDP", 2), ("transportTLS", 3), ("transportBEEP", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEventSyslogCapabilities.setReference('The BSD syslog Protocol, [RFC3164]; The Syslog Protocol, [RFC5424]; Transmission of Syslog Messages over UDP, [RFC5426]; TLS Transport Mapping for Syslog, [RFC5425]; Reliable Delivery for syslog, [RFC3195].')
if mibBuilder.loadTexts: pktcEventSyslogCapabilities.setStatus('current')
if mibBuilder.loadTexts: pktcEventSyslogCapabilities.setDescription('This MIB object contains the MTA capabilities for supporting the syslog protocol, specifically the message formats and the transport protocols. The BSD syslog message format is specified in [RFC3164] (formatBSDSyslog), and the IETF syslog protocol is specified in [RFC5424] (formatSyslogProtocol). The MTA MUST set the appropriate protocol and transport bits, based on implementation.')
pktcEventSyslogAddressType = MibScalar((1, 3, 6, 1, 2, 1, 182, 1, 1, 2, 2), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pktcEventSyslogAddressType.setReference('PacketCable MTA Device Provisioning Specification, [PKT-SP-PROV].')
if mibBuilder.loadTexts: pktcEventSyslogAddressType.setStatus('current')
if mibBuilder.loadTexts: pktcEventSyslogAddressType.setDescription('This MIB object defines the Internet address type of the syslog server specified by the MIB object pktcEventSyslogAddress. A value of dns(16) is disallowed since a non-resolvable DNS domain name will leave the device without a syslog server to which it can report events.')
pktcEventSyslogAddress = MibScalar((1, 3, 6, 1, 2, 1, 182, 1, 1, 2, 3), InetAddress().clone('0.0.0.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pktcEventSyslogAddress.setReference('PacketCable MTA Device Provisioning Specification, [PKT-SP-PROV]; PacketCable Management Event Mechanism Specification, [PKT-SP-MEM1.5];')
if mibBuilder.loadTexts: pktcEventSyslogAddress.setStatus('current')
if mibBuilder.loadTexts: pktcEventSyslogAddress.setDescription('This MIB object contains the IP address of the syslog server to which the MTA can transmit a syslog message upon the generation of a management event. The type of address this object represents is defined by the MIB object pktDevEventSyslogAddressType. The format of the syslog message is specified by the MIB object pktcEventSyslogMessageFormat.')
pktcEventSyslogMessageFormat = MibScalar((1, 3, 6, 1, 2, 1, 182, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("formatBSDSyslog", 1), ("formatSyslogProtocol", 2))).clone('formatSyslogProtocol')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pktcEventSyslogMessageFormat.setReference('The BSD syslog Protocol, [RFC3164]; The Syslog Protocol, [RFC5424].')
if mibBuilder.loadTexts: pktcEventSyslogMessageFormat.setStatus('current')
if mibBuilder.loadTexts: pktcEventSyslogMessageFormat.setDescription('This MIB object contains the syslog message format to be used for transmitting syslog messages to the server contained in the MIB object pktcEventSyslogServer.')
pktcEventSyslogTransport = MibScalar((1, 3, 6, 1, 2, 1, 182, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("udp", 1), ("tls", 2), ("beep", 3))).clone('tls')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pktcEventSyslogTransport.setReference('Transmission of Syslog messages over UDP, [RFC5426]; TLS Transport Mapping for Syslog, [RFC5425].')
if mibBuilder.loadTexts: pktcEventSyslogTransport.setStatus('current')
if mibBuilder.loadTexts: pktcEventSyslogTransport.setDescription("This MIB object specifies the transport to be used to transmit syslog messages to the syslog server contained in the MIB object pktcEventSyslogAddress. If the MTA does not support the transport specified in a SET operation, then the MTA MUST return an appropriate error response, such as 'inconsistentValue'.")
pktcEventSyslogPort = MibScalar((1, 3, 6, 1, 2, 1, 182, 1, 1, 2, 6), InetPortNumber().clone(6514)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pktcEventSyslogPort.setReference('Transmission of Syslog Messages over UDP, [RFC5426]; TLS Transport Mapping for Syslog, [RFC5425].')
if mibBuilder.loadTexts: pktcEventSyslogPort.setStatus('current')
if mibBuilder.loadTexts: pktcEventSyslogPort.setDescription('This MIB object contains the port number of the syslog server to which the syslog messages are to be transmitted.')
pktcEventClassTable = MibTable((1, 3, 6, 1, 2, 1, 182, 1, 1, 3), )
if mibBuilder.loadTexts: pktcEventClassTable.setStatus('current')
if mibBuilder.loadTexts: pktcEventClassTable.setDescription("This MIB table allows for management events that can be generated by an MTA to be classified into categories, or 'event classes'. For example, all the configuration- related events can be associated with an event class titled 'configuration'. Such a classification allows for a management station to affect changes on a common group of events at once. Two operations are specified on an event class: enabling or disabling of all the events in an event class, and selective enabling or disabling based on the severity level.")
pktcEventClassEntry = MibTableRow((1, 3, 6, 1, 2, 1, 182, 1, 1, 3, 1), ).setIndexNames((0, "PKTC-IETF-EVENT-MIB", "pktcEventClassIndex"))
if mibBuilder.loadTexts: pktcEventClassEntry.setStatus('current')
if mibBuilder.loadTexts: pktcEventClassEntry.setDescription("Each entry in this table specifies an event class, a grouping of events, as identified by the MTA manufacturer. Any event associated with an event class in this table MUST be specified in the pktcEventTable. The MTA MUST create one entry (index=100) for the event class titled 'generic'. This event class MUST contain all the events that are not contained in any other vendor-specified event classes. A management station SHOULD NOT associate an event with multiple event classes. However, if an event is associated with multiple event classes, the MTA MUST give precedence to the event class with the lowest index. Thus, at a given point in time, only one event class is applicable for an event. The event table (pktcEventTable) provides the event class that affects the event. Whenever an event is generated, the MTA MUST verify the applicable event class entry to take any specified actions. Entries in this table persist across resets and reboots.")
pktcEventClassIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: pktcEventClassIndex.setStatus('current')
if mibBuilder.loadTexts: pktcEventClassIndex.setDescription('This MIB object is an index into the event class table. It is a locally meaningful value.')
pktcEventClassName = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEventClassName.setStatus('current')
if mibBuilder.loadTexts: pktcEventClassName.setDescription('This MIB object contains the name of the event class. Vendors MAY define different event classes (e.g., DHCP, SNMP, DEBUG) to group together management events of a particular category. Event class names need to take into consideration the SnmpAdminString definition requirements, such as the use of control code sequence CR LF to represent a newline.')
pktcEventClassStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 1, 3, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pktcEventClassStatus.setStatus('current')
if mibBuilder.loadTexts: pktcEventClassStatus.setDescription("This MIB object indicates if events belonging to the corresponding event class are enabled or disabled, for event reporting. Setting this object to a value of 'true' enables reporting of all the events in the event class. When enabled, the means of reporting events is specified by the MIB object pktcEventReporting. Setting this object to a value of 'false' disables any event reporting, irrespective of the value of the MIB object pktcEventReporting for a specific event. The default value of this MIB object is vendor- specific. However, the vendor SHOULD enable all event categories defined by PacketCable or IPCablecom by default.")
pktcEventClassSeverity = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 1, 3, 1, 4), SyslogSeverityMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pktcEventClassSeverity.setReference('The Syslog Protocol, [RFC5424].')
if mibBuilder.loadTexts: pktcEventClassSeverity.setStatus('current')
if mibBuilder.loadTexts: pktcEventClassSeverity.setDescription("This MIB object defines the severity level of events belonging to a specific event class that are enabled for event reporting. This MIB object has no effect on the event reporting unless the MIB object pktcEventClassStatus is set to a value of 'true' (enabled), for the corresponding event class. Setting a bit within the mask to a value of '1' implies that events corresponding to that severity level MUST be reported as defined by the corresponding value of 'pktcEventReporting' for events in the event class. Setting a bit to a value of '0' implies that events corresponding to that level MUST NOT be reported, irrespective of the corresponding value of 'pktcEventReporting' for events in the event class. It is recommended that the bits corresponding to emerg(0), alert(1), crit(2), and err(3) be set to a value of '1' to ensure reporting of events requiring immediate attention.")
pktcEventThrottleAdminStatus = MibScalar((1, 3, 6, 1, 2, 1, 182, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unconstrained", 1), ("maintainBelowThreshold", 2), ("stopAtThreshold", 3), ("inhibited", 4))).clone('unconstrained')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pktcEventThrottleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: pktcEventThrottleAdminStatus.setDescription('This MIB object controls the throttling of the transmitted messages upon generation of an event (SNMP/syslog). It does not affect local logging of events. A value of unconstrained(1) causes event messages to be transmitted without regard to the threshold settings. A value of maintainBelowThreshold(2) causes event messages to be suppressed if the number of transmissions would otherwise exceed the threshold specified by pktcEventThrottleThreshold over the interval specified by pktcEventThrottleInterval. A value of stopAtThreshold(3) causes event message transmission to cease once the threshold specified by pktcEventThrottleThreshold (over the interval specified by pktcEventThrottleInterval) is reached. Event generation is resumed when the value of this MIB object is modified by a management station or when the device resets or reboots. A value of inhibited(4) causes all event message transmissions to be suppressed. An event causing both an SNMP and a syslog message is still treated as a single event. Refer to MIB objects pktcEventThrottleThreshold and pktcEventThrottleInterval for information on throttling.')
pktcEventThrottleThreshold = MibScalar((1, 3, 6, 1, 2, 1, 182, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pktcEventThrottleThreshold.setStatus('current')
if mibBuilder.loadTexts: pktcEventThrottleThreshold.setDescription('This MIB object contains the number of events per pktcEventThrottleInterval to be transmitted before throttling. An event resulting in multiple actions (e.g., SNMP and syslog) is still treated as a single event.')
pktcEventThrottleInterval = MibScalar((1, 3, 6, 1, 2, 1, 182, 1, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pktcEventThrottleInterval.setStatus('current')
if mibBuilder.loadTexts: pktcEventThrottleInterval.setDescription('This MIB object contains the interval over which the throttle threshold applies.')
pktcEventTransmissionStatus = MibScalar((1, 3, 6, 1, 2, 1, 182, 1, 3, 1), Bits().clone(namedValues=NamedValues(("syslogThrottled", 0), ("snmpThrottled", 1), ("validsyslogServerAbsent", 2), ("validSnmpManagerAbsent", 3), ("syslogTransmitError", 4), ("snmpTransmitError", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEventTransmissionStatus.setStatus('current')
if mibBuilder.loadTexts: pktcEventTransmissionStatus.setDescription("This MIB object reflects the status of the event transmissions using syslog, SNMP, or both. If a bit corresponding to a state is set to a value of: '1', it indicates that the state is true '0', it indicates that the state is false If the MTA is not configured with a syslog server or an SNMP Manager, the corresponding 'throttling' and 'transmit error' bits MUST be set to a value of '0'. For example, if an SNMP Manager is not configured on the MTA, the bit corresponding to validSnmpManagerAbsent(3) is set to a value of '1', and the values of the bits corresponding to snmpThrottled(1) and snmpTransmitError(5) are set to a value of '0'. 'Event throttling' is based on thresholds and the current setting of the MIB object pktcEventThrottleAdminStatus. 'Server/Manager' indicators are based on the availability of valid syslog server/SNMP Managers. Transmit errors are reported when detected. If an MTA cannot detect an error situation, the value of the BIT will be set '0'. It is to be noted that not all the conditions that are indicated by this MIB object are detectable by all devices, and when detected may not be accurate. It is meant to provide a report of the status as determined by the device during event transmissions.")
pktcEventTable = MibTable((1, 3, 6, 1, 2, 1, 182, 1, 4, 1), )
if mibBuilder.loadTexts: pktcEventTable.setStatus('current')
if mibBuilder.loadTexts: pktcEventTable.setDescription('This MIB table contains all possible management events that can be generated by the device. This includes PacketCable- and IPCablecom-defined events and vendor-specific events.')
pktcEventEntry = MibTableRow((1, 3, 6, 1, 2, 1, 182, 1, 4, 1, 1), ).setIndexNames((0, "PKTC-IETF-EVENT-MIB", "pktcEventOrganization"), (0, "PKTC-IETF-EVENT-MIB", "pktcEventIdentifier"))
if mibBuilder.loadTexts: pktcEventEntry.setStatus('current')
if mibBuilder.loadTexts: pktcEventEntry.setDescription('An entry in this table is created for each event the MTA implementing this MIB is capable of reporting. Entries in this table are persisted across resets and reboots.')
pktcEventOrganization = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: pktcEventOrganization.setReference('IANA Private Enterprise Number assignment, [IANA-ENTERPRISE].')
if mibBuilder.loadTexts: pktcEventOrganization.setStatus('current')
if mibBuilder.loadTexts: pktcEventOrganization.setDescription('This MIB object provides the IANA enterprise number of the organization defining the event. Thus, all PacketCable- or IPCablecom-defined events will contain the PacketCable or IPCablecom IANA enterprise number, and all vendor-specific events will contain the IANA enterprise number of the defining organization.')
pktcEventIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 4, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: pktcEventIdentifier.setReference('PacketCable Management Event Mechanism Specification, [PKT-SP-MEM1.5]; PacketCable MTA Device Provisioning Specification, [PKT-SP-PROV].')
if mibBuilder.loadTexts: pktcEventIdentifier.setStatus('current')
if mibBuilder.loadTexts: pktcEventIdentifier.setDescription('This MIB object contains the event identifier for the corresponding event.')
pktcEventFacility = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 4, 1, 1, 3), SyslogFacility()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEventFacility.setReference('The Syslog Protocol, [RFC5424]; Textual Conventions for Syslog Management, [RFC5427].')
if mibBuilder.loadTexts: pktcEventFacility.setStatus('current')
if mibBuilder.loadTexts: pktcEventFacility.setDescription('This MIB object contains the facility for the event. For PacketCable, IPCablecom, or ETSI events, this MUST be set to a value of local0(16).')
pktcEventSeverityLevel = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 4, 1, 1, 4), SyslogSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pktcEventSeverityLevel.setReference('The Syslog Protocol, [RFC5424]; Textual Conventions for Syslog Management, [RFC5427].')
if mibBuilder.loadTexts: pktcEventSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: pktcEventSeverityLevel.setDescription('This MIB object contains the severity level that is applicable to the specified event.')
pktcEventReporting = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 4, 1, 1, 5), Bits().clone(namedValues=NamedValues(("local", 0), ("syslog", 1), ("snmpTrap", 2), ("snmpInform", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pktcEventReporting.setStatus('current')
if mibBuilder.loadTexts: pktcEventReporting.setDescription("This MIB object defines the action to be taken on occurrence of this event. Bit local(0) refers to local logging of events; bit sylog(1) refers to the transmission of events using syslog; bit snmpTrap(2) refers to the transmission of events using SNMP Traps (SNMPv2-Trap-PDU); and bit snmpInform(3) refers to the transmission of events using SNMP INFORMs. Setting a bit to a value of '1' indicates that the corresponding action will be taken upon occurrence of this event. If none of the bits are set, then no action is taken upon occurrence of the event. The success of transmission using syslog and SNMP depends on the MTA configuration. For example, a valid syslog server address is required for syslog message transmission. Specification of a management event does not necessarily include the actions to be taken upon its generation, i.e., it does not need to specify if a generated event needs to be transmitted via SNMP or syslog, or stored locally. Thus, certain default values are specified, based on the event's severity level specified by the MIB object pktcEventSeverityLevel, as follows: - If the severity level of an event is emerg(0), alert(1), crit(2), or err(3), set the bits for local(0), syslog(1), and snmpInform(3) to a value of '1' and set the remaining bits to a value of '0'. - For an event with any other severity level, set the bits for local(0) and syslog(1) to a value of '1' and set the rest of the bits to a value of '0'.")
pktcEventText = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 4, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pktcEventText.setStatus('current')
if mibBuilder.loadTexts: pktcEventText.setDescription('This MIB object provides a human-readable description of the event. Descriptions need to take into consideration the SnmpAdminString definition requirements such as the use of control code sequence CR LF to represent a newline.')
pktcEventClass = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 4, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEventClass.setStatus('current')
if mibBuilder.loadTexts: pktcEventClass.setDescription('This MIB object represents the event class that affects the event. If an event is associated with only one event class, then its name (pktcEventClassName) is reported. If an event is associated with more than one event class, then the name of the event class with the lowest index in the event class table (pktcEventClassTable) is reported. See the MIB table pktcEventClassTable for a description of event classes and usage. Descriptions need to take into consideration the SnmpAdminString definition requirements, such as the use of control code sequence CR LF to represent a newline.')
pktcEventLogTable = MibTable((1, 3, 6, 1, 2, 1, 182, 1, 5, 1), )
if mibBuilder.loadTexts: pktcEventLogTable.setStatus('current')
if mibBuilder.loadTexts: pktcEventLogTable.setDescription('This MIB table contains a log of the events generated by the MTA. A description of all the events that can be generated by the device can be obtained from the MIB table pktcEventTable. An MTA is not required to persist the contents of this table across resets.')
pktcEventLogEntry = MibTableRow((1, 3, 6, 1, 2, 1, 182, 1, 5, 1, 1), ).setIndexNames((0, "PKTC-IETF-EVENT-MIB", "pktcEventLogIndex"))
if mibBuilder.loadTexts: pktcEventLogEntry.setStatus('current')
if mibBuilder.loadTexts: pktcEventLogEntry.setDescription('Each entry in this table describes an event that has occurred, indexed in the chronological order of generation. The details of the event are borrowed from the parameters associated with the corresponding event entry in pktcEventTable at the time of the event generation. While all entries created as such can be cleared using the MIB object pktcEventReset, the event entries themselves cannot be individually deleted.')
pktcEventLogIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: pktcEventLogIndex.setStatus('current')
if mibBuilder.loadTexts: pktcEventLogIndex.setDescription("This MIB object provides relative ordering of the objects in the event log. If the MTA implements non-volatile storage, then this object will always increase except when the MIB object reaches a value of 2^32-1. If the MTA does not implement non-volatile storage, then this object will always increase except when the MIB object reaches a value of 2^32-1 or the MTA is reset. When the value reaches 2^32-1, or an MTA that does not implement non-volatile storage is reset, newer events will be stored starting with an index value of '1' (cyclic rotation).")
pktcEventLogTime = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 5, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEventLogTime.setStatus('current')
if mibBuilder.loadTexts: pktcEventLogTime.setDescription('This MIB object provides a human-readable description of the date and time at which the event occurred. The value of the date and time contained in this MIB object SHOULD reflect the date and time used in the syslog message resulting from the associated event, if such a syslog message was transmitted.')
pktcEventLogOrganization = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 5, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEventLogOrganization.setStatus('current')
if mibBuilder.loadTexts: pktcEventLogOrganization.setDescription('This MIB object provides the IANA enterprise number of the organization defining the event. Thus, all PacketCable- or IPCablecom-defined events will contain the CableLabs or IPCablecom IANA enterprise number, and all vendor-specific events will contain the IANA enterprise number of the defining organization.')
pktcEventLogIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEventLogIdentifier.setStatus('current')
if mibBuilder.loadTexts: pktcEventLogIdentifier.setDescription('This MIB object contains the event identifier for the corresponding event.')
pktcEventLogText = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 5, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEventLogText.setStatus('current')
if mibBuilder.loadTexts: pktcEventLogText.setDescription('This MIB object contains the contents of the MIB object pktcEventText, corresponding to the event, at the moment of generation.')
pktcEventLogEndpointName = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 5, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEventLogEndpointName.setStatus('current')
if mibBuilder.loadTexts: pktcEventLogEndpointName.setDescription("This MIB object contains the unique identifier of the MTA endpoint that generated the corresponding event. If the generated event was not associated with any specific endpoint on the MTA, then this MIB object contains the MTA identifier. An MTA endpoint can be uniquely identified using a combination of the MTA identifier and the endpoint number. The MTA is identified via its Fully-Qualified Domain Name (FQDN) and the associated IP address at the given point in time. The format of the value contained by this MIB object is as follows: aaln/n:<FQDN>/<IP>, when it identifies an endpoint, 'n' being the endpoint number; or, <FQDN>/<IP>, when it identifies an MTA. The value contained by this MIB object needs to observe the SnmpAdminString definition requirements.")
pktcEventLogType = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 5, 1, 1, 7), Bits().clone(namedValues=NamedValues(("local", 0), ("syslog", 1), ("snmpTrap", 2), ("snmpInform", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEventLogType.setStatus('current')
if mibBuilder.loadTexts: pktcEventLogType.setDescription("This MIB object contains the type of actions taken by the MTA when the event indicated by the MIB object pktcEventLogIdentifier occurred. A bit with a value of '1' indicates the corresponding action was taken. Setting it to a value of '0' indicates that the corresponding action was not taken. An event may trigger one or more actions (e.g., syslog and SNMP) or result only in a local log. An action may also be prevented due to throttling, in which case it is not reported by this MIB object.")
pktcEventLogTargetInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 5, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEventLogTargetInfo.setStatus('current')
if mibBuilder.loadTexts: pktcEventLogTargetInfo.setDescription("This MIB object contains a comma-separated list of the actions taken for external notifications, along with the target IP address for the generated events. Locally stored events MUST NOT be recorded in this MIB object. The syntax is as: <action-1/IP>,<action-2/IP>,<action-3/IP> Where <action-n/IP> is to be denoted as follows: For syslog events: syslog/<IP address of the syslog server> For SNMP traps: snmpTrap/<IP address of the SNMP server> For SNMP INFORMS: snmpInform/<IP address of the SNMP server> If there are multiple targets for the same type (SNMP traps sent to multiple IP addresses) or if there are multiple message types sent to the same IP (syslog and SNMP sent to the same IP address), they need to be reported individually. It is to be noted that this MIB object may not be able to store all the data in some cases (e.g., multiple IPv6 addresses), in which case some actions may not be reported. In such cases, the MTA MUST present a value of '...' at the end of the value. Values contained by this MIB object need to observe the SnmpAdminString definition requirements.")
pktcEventLogCorrelationId = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 5, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEventLogCorrelationId.setReference('PacketCable MTA Device Provisioning Specification, [PKT-SP-PROV].')
if mibBuilder.loadTexts: pktcEventLogCorrelationId.setStatus('current')
if mibBuilder.loadTexts: pktcEventLogCorrelationId.setDescription('This MIB object contains the correlation ID generated by the MTA during the initiation of the last provisioning flow, within or following which the event occurred. Although a correlation ID once generated after MTA reset does not change until next MTA reset, the value of this object will differ for the events preserved across MTA resets in case of a persistent pktcEventLogTable. For more information on the generation of correlation IDs, refer to the corresponding PacketCable/IPCablecom Device Provisioning specifications.')
pktcEventLogAdditionalInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 182, 1, 5, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktcEventLogAdditionalInfo.setStatus('current')
if mibBuilder.loadTexts: pktcEventLogAdditionalInfo.setDescription('This MIB object contains additional information in relation to the corresponding event that an MTA might wish to report, such as parameterized data or debugging information. The format is vendor-specific. If the MTA cannot provide any additional information for the particular event generated, it MUST populate this MIB object with a zero-length OCTET-STRING. Vendors providing this information need to observe the SnmpAdminString definition requirements, such as the use of control code sequence CR LF for newline.')
pktcEventNotification = NotificationType((1, 3, 6, 1, 2, 1, 182, 0, 1)).setObjects(("PKTC-IETF-EVENT-MIB", "pktcEventLogTime"), ("PKTC-IETF-EVENT-MIB", "pktcEventLogOrganization"), ("PKTC-IETF-EVENT-MIB", "pktcEventLogIdentifier"), ("PKTC-IETF-EVENT-MIB", "pktcEventLogEndpointName"), ("PKTC-IETF-EVENT-MIB", "pktcEventLogCorrelationId"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: pktcEventNotification.setStatus('current')
if mibBuilder.loadTexts: pktcEventNotification.setDescription("This Notification MIB object contains the contents for event reporting. It contains the event log time, the organization ID, the event identifier, the endpoint identifier, the correlation ID, and the MTA's MAC address.")
pktcEventCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 182, 2, 1))
pktcEventGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 182, 2, 2))
pktcEventBasicCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 182, 2, 1, 3)).setObjects(("PKTC-IETF-EVENT-MIB", "pktcEventGroup"), ("PKTC-IETF-EVENT-MIB", "pktcEventNotificationGroup"), ("SNMP-TARGET-MIB", "snmpTargetBasicGroup"), ("SNMP-TARGET-MIB", "snmpTargetResponseGroup"), ("SNMP-NOTIFICATION-MIB", "snmpNotifyGroup"), ("SNMP-NOTIFICATION-MIB", "snmpNotifyFilterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pktcEventBasicCompliance = pktcEventBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: pktcEventBasicCompliance.setDescription('The compliance statement for devices that implement the event-reporting feature.')
pktcEventGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 182, 2, 2, 1)).setObjects(("PKTC-IETF-EVENT-MIB", "pktcEventReset"), ("PKTC-IETF-EVENT-MIB", "pktcEventSyslogCapabilities"), ("PKTC-IETF-EVENT-MIB", "pktcEventSyslogAddressType"), ("PKTC-IETF-EVENT-MIB", "pktcEventSyslogAddress"), ("PKTC-IETF-EVENT-MIB", "pktcEventSyslogTransport"), ("PKTC-IETF-EVENT-MIB", "pktcEventSyslogPort"), ("PKTC-IETF-EVENT-MIB", "pktcEventSyslogMessageFormat"), ("PKTC-IETF-EVENT-MIB", "pktcEventThrottleAdminStatus"), ("PKTC-IETF-EVENT-MIB", "pktcEventThrottleThreshold"), ("PKTC-IETF-EVENT-MIB", "pktcEventThrottleInterval"), ("PKTC-IETF-EVENT-MIB", "pktcEventTransmissionStatus"), ("PKTC-IETF-EVENT-MIB", "pktcEventFacility"), ("PKTC-IETF-EVENT-MIB", "pktcEventSeverityLevel"), ("PKTC-IETF-EVENT-MIB", "pktcEventReporting"), ("PKTC-IETF-EVENT-MIB", "pktcEventText"), ("PKTC-IETF-EVENT-MIB", "pktcEventLogTime"), ("PKTC-IETF-EVENT-MIB", "pktcEventLogOrganization"), ("PKTC-IETF-EVENT-MIB", "pktcEventLogIdentifier"), ("PKTC-IETF-EVENT-MIB", "pktcEventLogText"), ("PKTC-IETF-EVENT-MIB", "pktcEventLogEndpointName"), ("PKTC-IETF-EVENT-MIB", "pktcEventLogType"), ("PKTC-IETF-EVENT-MIB", "pktcEventLogTargetInfo"), ("PKTC-IETF-EVENT-MIB", "pktcEventLogCorrelationId"), ("PKTC-IETF-EVENT-MIB", "pktcEventLogAdditionalInfo"), ("PKTC-IETF-EVENT-MIB", "pktcEventClass"), ("PKTC-IETF-EVENT-MIB", "pktcEventClassName"), ("PKTC-IETF-EVENT-MIB", "pktcEventClassStatus"), ("PKTC-IETF-EVENT-MIB", "pktcEventClassSeverity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pktcEventGroup = pktcEventGroup.setStatus('current')
if mibBuilder.loadTexts: pktcEventGroup.setDescription('Group of MIB objects for PacketCable Management Event MIB.')
pktcEventNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 182, 2, 2, 2)).setObjects(("PKTC-IETF-EVENT-MIB", "pktcEventNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pktcEventNotificationGroup = pktcEventNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: pktcEventNotificationGroup.setDescription('Group of MIB objects for notifications related to change in status of the MTA Device.')
mibBuilder.exportSymbols("PKTC-IETF-EVENT-MIB", pktcEventReporting=pktcEventReporting, pktcEventReset=pktcEventReset, pktcEventOrganization=pktcEventOrganization, pktcIetfEventMib=pktcIetfEventMib, pktcEventLogEndpointName=pktcEventLogEndpointName, pktcEventConformance=pktcEventConformance, pktcEventLogOrganization=pktcEventLogOrganization, pktcEventControl=pktcEventControl, pktcEventClass=pktcEventClass, pktcEventSyslogAddressType=pktcEventSyslogAddressType, pktcEventClassIndex=pktcEventClassIndex, pktcEventLogText=pktcEventLogText, pktcEventSeverityLevel=pktcEventSeverityLevel, pktcEventMibObjects=pktcEventMibObjects, pktcEventClassEntry=pktcEventClassEntry, pktcEventThrottleInterval=pktcEventThrottleInterval, pktcEventLogIndex=pktcEventLogIndex, pktcEventLogIdentifier=pktcEventLogIdentifier, pktcEventLogTargetInfo=pktcEventLogTargetInfo, pktcEventClassTable=pktcEventClassTable, pktcEventThrottleAdminStatus=pktcEventThrottleAdminStatus, pktcEventLogEntry=pktcEventLogEntry, pktcEvents=pktcEvents, pktcEventCompliances=pktcEventCompliances, pktcEventLogAdditionalInfo=pktcEventLogAdditionalInfo, pktcEventIdentifier=pktcEventIdentifier, pktcEventText=pktcEventText, pktcEventSyslog=pktcEventSyslog, pktcEventGroups=pktcEventGroups, pktcEventLogType=pktcEventLogType, pktcEventLogTime=pktcEventLogTime, pktcEventGroup=pktcEventGroup, pktcEventTable=pktcEventTable, pktcEventLog=pktcEventLog, pktcEventLogTable=pktcEventLogTable, pktcEventStatus=pktcEventStatus, pktcEventClassStatus=pktcEventClassStatus, pktcEventBasicCompliance=pktcEventBasicCompliance, pktcEventClassName=pktcEventClassName, pktcEventSyslogTransport=pktcEventSyslogTransport, pktcEventLogCorrelationId=pktcEventLogCorrelationId, pktcEventNotification=pktcEventNotification, pktcEventThrottle=pktcEventThrottle, SyslogSeverityMask=SyslogSeverityMask, pktcEventNotifications=pktcEventNotifications, pktcEventEntry=pktcEventEntry, pktcEventSyslogAddress=pktcEventSyslogAddress, pktcEventSyslogMessageFormat=pktcEventSyslogMessageFormat, pktcEventSyslogPort=pktcEventSyslogPort, pktcEventThrottleThreshold=pktcEventThrottleThreshold, PYSNMP_MODULE_ID=pktcIetfEventMib, pktcEventFacility=pktcEventFacility, pktcEventNotificationGroup=pktcEventNotificationGroup, pktcEventSyslogCapabilities=pktcEventSyslogCapabilities, pktcEventTransmissionStatus=pktcEventTransmissionStatus, pktcEventClassSeverity=pktcEventClassSeverity)
