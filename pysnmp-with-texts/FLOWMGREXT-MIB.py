#
# PySNMP MIB module FLOWMGREXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FLOWMGREXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:14:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
flowMgrExt, = mibBuilder.importSymbols("APENT-MIB", "flowMgrExt")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, NotificationType, ModuleIdentity, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, MibIdentifier, Gauge32, TimeTicks, ObjectIdentity, Counter32, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "ModuleIdentity", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "MibIdentifier", "Gauge32", "TimeTicks", "ObjectIdentity", "Counter32", "Unsigned32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
flowMgrExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2467, 1, 36, 1))
if mibBuilder.loadTexts: flowMgrExtMib.setLastUpdated('9707202000Z')
if mibBuilder.loadTexts: flowMgrExtMib.setOrganization('ArrowPoint Communications Inc.')
if mibBuilder.loadTexts: flowMgrExtMib.setContactInfo(' Ken Siegel Postal: ArrowPoint Communications Inc. 50 Nagog Park Acton, Massachusetts 01720 Tel: +1 978-206-3000 option 1 E-Mail: support@arrowpoint.com')
if mibBuilder.loadTexts: flowMgrExtMib.setDescription('This MIB module describes the ArrowPoint Communications enterprise MIB for the flow manager module.')
apFlowMgrExtFlowTraceOptions = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlowMgrExtFlowTraceOptions.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtFlowTraceOptions.setDescription('This object specifies a bitmask of the current flow trace settings.')
apFlowMgrExtFlowTraceState = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlowMgrExtFlowTraceState.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtFlowTraceState.setDescription('This object specifies the current state of flow tracing.')
apFlowMgrExtFlowTraceFilename = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlowMgrExtFlowTraceFilename.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtFlowTraceFilename.setDescription('This object specifies the file name of the log file on disk.')
apFlowMgrExtFlowTraceMaxFileSize = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlowMgrExtFlowTraceMaxFileSize.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtFlowTraceMaxFileSize.setDescription('This object specifies the maximum file length allowed to be saved to the disk.')
apFlowMgrExtFlowTraceDuration = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlowMgrExtFlowTraceDuration.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtFlowTraceDuration.setDescription('This object specifies the duration of the Flow Tracing logging session in seconds.')
apFlowMgrExtPermanentPort1 = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlowMgrExtPermanentPort1.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtPermanentPort1.setDescription('This object specifies the first destination tcp port number for flows that the flow manager will not reclaim.')
apFlowMgrExtPermanentPort2 = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlowMgrExtPermanentPort2.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtPermanentPort2.setDescription('This object specifies the second destination tcp port number for flows that the flow manager will not reclaim.')
apFlowMgrExtPermanentPort3 = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlowMgrExtPermanentPort3.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtPermanentPort3.setDescription('This object specifies the third destination tcp port number for flows that the flow manager will not reclaim.')
apFlowMgrExtPermanentPort4 = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlowMgrExtPermanentPort4.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtPermanentPort4.setDescription('This object specifies the forth destination tcp port number for flows that the flow manager will not reclaim.')
apFlowMgrExtReserveCleanTimer = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlowMgrExtReserveCleanTimer.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtReserveCleanTimer.setDescription('This object specifies the time (in seconds) at which the flow manager scans flows with a source or destination port of less than 25 and may attempt to clean up that flow.')
apFlowMgrExtPortIdleTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 36, 12), )
if mibBuilder.loadTexts: apFlowMgrExtPortIdleTable.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtPortIdleTable.setDescription('This is the table of port idle timer values.')
apFlowMgrExtPortIdleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 36, 12, 1), ).setIndexNames((0, "FLOWMGREXT-MIB", "apFlowMgrExtPortIdle"))
if mibBuilder.loadTexts: apFlowMgrExtPortIdleEntry.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtPortIdleEntry.setDescription('A table containing the port number and associated idle timer.')
apFlowMgrExtPortIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtPortIdle.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtPortIdle.setDescription('This is the port number of the port for which this entry contains the flow manager port configuration.')
apFlowMgrExtPortIdleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlowMgrExtPortIdleValue.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtPortIdleValue.setDescription('This is the flow manager reset idle value for this port.')
apFlowMgrExtPortLowWaterFCB = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlowMgrExtPortLowWaterFCB.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtPortLowWaterFCB.setDescription('This is the configured flow manager FCB low water mark for this port. When free FCBs constitute this percentage of total FCBs, expedited flow recovery procedures are invoked.')
apFlowMgrExtIdleTimer = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFlowMgrExtIdleTimer.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtIdleTimer.setDescription('This object specifies the time (in seconds) which the flow manager will use to time out flows. A value of 0 indicates that internal values will be used.')
apFlowMgrStatIfTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14), )
if mibBuilder.loadTexts: apFlowMgrStatIfTable.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfTable.setDescription('The FlowMgr Statistics Table')
apFlowMgrStatIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14, 1), ).setIndexNames((0, "FLOWMGREXT-MIB", "apFlowMgrStatIfIndex"), (0, "FLOWMGREXT-MIB", "apFlowMgrStatIfVlanID"))
if mibBuilder.loadTexts: apFlowMgrStatIfEntry.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfEntry.setDescription('An entry in the Flow Manager statistics Table referenced via an IFINDEX (apFlowMgrStatIfIndex). An entry is available for each interface')
apFlowMgrStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfIndex.setDescription('IF Index of interface')
apFlowMgrStatIfVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatIfVlanID.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfVlanID.setDescription('IF Index of interface')
apFlowMgrStatIfUDPTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatIfUDPTotal.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfUDPTotal.setDescription('Total UDP flows on interface')
apFlowMgrStatIfUDPCur = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatIfUDPCur.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfUDPCur.setDescription('Number of new UDP flows within last second on interface')
apFlowMgrStatIfUDPHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatIfUDPHigh.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfUDPHigh.setDescription('Maximum number of UDP flows in any one second interval on interface')
apFlowMgrStatIfUDPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatIfUDPAvg.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfUDPAvg.setDescription('Five second moving average of UDP flows per second on interface')
apFlowMgrStatIfTCPTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatIfTCPTotal.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfTCPTotal.setDescription('Total TCP flows on interface')
apFlowMgrStatIfTCPCur = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatIfTCPCur.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfTCPCur.setDescription('Number of new TCP flows within last second on interface')
apFlowMgrStatIfTCPHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatIfTCPHigh.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfTCPHigh.setDescription('Maximum number of TCP flows in any one second interval on interface')
apFlowMgrStatIfTCPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatIfTCPAvg.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfTCPAvg.setDescription('Five second moving average of TCP flows per second on interface')
apFlowMgrStatIfCurrentActiveTCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatIfCurrentActiveTCP.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfCurrentActiveTCP.setDescription('Current number of active TCP flows on interface')
apFlowMgrStatIfCurrentActiveUDP = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatIfCurrentActiveUDP.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfCurrentActiveUDP.setDescription('Current number of active UDP flows on interface')
apFlowMgrStatIfAccountingReportsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatIfAccountingReportsRx.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfAccountingReportsRx.setDescription('Number of accounting reports received for interface')
apFlowMgrStatIfResets = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatIfResets.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfResets.setDescription('Number of times interface has been reset')
apFlowMgrStatIfFcbCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 14, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatIfFcbCount.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatIfFcbCount.setDescription('Number of unused fastpath flow control blocks for interface')
apFlowMgrStatSSTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15), )
if mibBuilder.loadTexts: apFlowMgrStatSSTable.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSTable.setDescription('The FlowMgr Statistics Table')
apFlowMgrStatSSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15, 1), ).setIndexNames((0, "FLOWMGREXT-MIB", "apFlowMgrStatSSSlot"), (0, "FLOWMGREXT-MIB", "apFlowMgrStatSSSubSlot"))
if mibBuilder.loadTexts: apFlowMgrStatSSEntry.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSEntry.setDescription('An entry in the Flow Manager statistics Table referenced via an chassis manager slot/subslot pair....')
apFlowMgrStatSSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatSSSlot.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSSlot.setDescription('Physical slot of interface')
apFlowMgrStatSSSubSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatSSSubSlot.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSSubSlot.setDescription('Physical sub-slot of interface')
apFlowMgrStatSSUDPTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatSSUDPTotal.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSUDPTotal.setDescription('Total UDP flows on interface')
apFlowMgrStatSSUDPCur = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatSSUDPCur.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSUDPCur.setDescription('Number of new UDP flows within last second on interface')
apFlowMgrStatSSUDPHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatSSUDPHigh.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSUDPHigh.setDescription('Maximum number of UDP flows in any one second interval on interface')
apFlowMgrStatSSUDPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatSSUDPAvg.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSUDPAvg.setDescription('Five second moving average of UDP flows per second on interface')
apFlowMgrStatSSTCPTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatSSTCPTotal.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSTCPTotal.setDescription('Total TCP flows on interface')
apFlowMgrStatSSTCPCur = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatSSTCPCur.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSTCPCur.setDescription('Number of new TCP flows within last second on interface')
apFlowMgrStatSSTCPHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatSSTCPHigh.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSTCPHigh.setDescription('Maximum number of TCP flows in any one second interval on interface')
apFlowMgrStatSSTCPAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatSSTCPAvg.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSTCPAvg.setDescription('Five second moving average of TCP flows per second on interface')
apFlowMgrStatSSCurrentActiveTCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatSSCurrentActiveTCP.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSCurrentActiveTCP.setDescription('Current number of active TCP flows on interface')
apFlowMgrStatSSCurrentActiveUDP = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatSSCurrentActiveUDP.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSCurrentActiveUDP.setDescription('Current number of active UDP flows on interface')
apFlowMgrStatSSAccountingReportsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatSSAccountingReportsRx.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSAccountingReportsRx.setDescription('')
apFlowMgrStatSSResets = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatSSResets.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSResets.setDescription('Number of times interface has been reset')
apFlowMgrStatSSFcbCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 15, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrStatSSFcbCount.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrStatSSFcbCount.setDescription('Number of unused fastpath flow control blocks for interface')
apFlowMgrPortTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16), )
if mibBuilder.loadTexts: apFlowMgrPortTable.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortTable.setDescription('The FlowMgr Port Table for a given slot/subslot in the chassis.')
apFlowMgrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1), ).setIndexNames((0, "FLOWMGREXT-MIB", "apFlowMgrPortIfIndex"))
if mibBuilder.loadTexts: apFlowMgrPortEntry.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortEntry.setDescription('An entry in the Flow Manager port Table.')
apFlowMgrPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortIfIndex.setDescription('IF index for this interface')
apFlowMgrPortSeqBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortSeqBytes.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortSeqBytes.setDescription('Total TCP sequence space bytes received on interface by flow manager')
apFlowMgrPortInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortInBytes.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortInBytes.setDescription('Total IP bytes received by flow manager on interface')
apFlowMgrPortOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortOutBytes.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortOutBytes.setDescription('Total IP bytes out of flow manager out interface')
apFlowMgrPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortInFrames.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortInFrames.setDescription('Total IP frames into flow manager on interface')
apFlowMgrPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortOutFrames.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortOutFrames.setDescription('Total IP frames from flow manager out interface')
apFlowMgrPortTotalInFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortTotalInFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortTotalInFlows.setDescription('Total flows inbound on interface started by flow manager')
apFlowMgrPortTotalOutFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortTotalOutFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortTotalOutFlows.setDescription('Total flows outbound on interface started by flow manager')
apFlowMgrPortTotalAcctFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortTotalAcctFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortTotalAcctFlows.setDescription('Total accounting reports for flows received on interface')
apFlowMgrPortCurrTCPFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortCurrTCPFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortCurrTCPFlows.setDescription('Current number of active TCP flows on interface')
apFlowMgrPortCurrUDPFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortCurrUDPFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortCurrUDPFlows.setDescription('Current number of active UDP flows on interface')
apFlowMgrPortCurrInFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortCurrInFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortCurrInFlows.setDescription('Total current flows inbound on interface')
apFlowMgrPortCurrOutFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortCurrOutFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortCurrOutFlows.setDescription('Total current flows outbound on interface')
apFlowMgrPortResetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortResetCount.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortResetCount.setDescription('Total times flow manager has reset interface')
apFlowMgrPortMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortMTU.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortMTU.setDescription('Maximum transmission unit for TCP flows on interface')
apFlowMgrPortWccAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccAccepted.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccAccepted.setDescription('Number of flows accepted by web conversation control')
apFlowMgrPortWccAcceptedSticky = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccAcceptedSticky.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccAcceptedSticky.setDescription('Number of sticky accepted flows by web conversation control')
apFlowMgrPortWccAcceptedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccAcceptedBridge.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccAcceptedBridge.setDescription('Number of bridged flows accepted by web conversation control')
apFlowMgrPortWccAcceptedSfpFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccAcceptedSfpFwd.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccAcceptedSfpFwd.setDescription('Number of accepted flows that must be forwarded in the mid-path')
apFlowMgrPortWccAcceptedSfp = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccAcceptedSfp.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccAcceptedSfp.setDescription('Number of processed content frames for mid-path forwarded flows')
apFlowMgrPortWccForwardSfp = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccForwardSfp.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccForwardSfp.setDescription('Number of frames forwarded unchanged for mid-path forwarded flows')
apFlowMgrPortWccForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccForward.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccForward.setDescription('Number of frames given to IP module for direct forwarding in mid-path')
apFlowMgrPortWccLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccLocal.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccLocal.setDescription('Number of accepted inbound flows that terminate on chassis')
apFlowMgrPortWccTCPSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccTCPSpoof.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccTCPSpoof.setDescription('Number of flows requiring TCP spoofing for content awareness')
apFlowMgrPortWccArpPending = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccArpPending.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccArpPending.setDescription('Number of flows delayed because ARP entries needed resolution')
apFlowMgrPortWccRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccRedirect.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccRedirect.setDescription('Number of flows requiring a redirect after content examination')
apFlowMgrPortWccRedirectSticky = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccRedirectSticky.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccRedirectSticky.setDescription('Number of sticky flows requiring a redirect after content examination')
apFlowMgrPortWccNoChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccNoChange.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccNoChange.setDescription('Number of content requests on persistent connections that resulted in no flow mapping changes')
apFlowMgrPortWccRouteNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccRouteNotFound.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccRouteNotFound.setDescription('Number of times flows attempted without a useable route')
apFlowMgrPortWccRtLookupError = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccRtLookupError.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccRtLookupError.setDescription('Number of times a flow was attempted and a route lookup error occured')
apFlowMgrPortWccDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccDiscard.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccDiscard.setDescription('Number of times an unuseable frame came in for a flow expecting content')
apFlowMgrPortWccRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccRejected.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccRejected.setDescription('Number of flows rejected by web conversation control')
apFlowMgrPortWccRejectedSfp = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortWccRejectedSfp.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortWccRejectedSfp.setDescription('Number of mid-path forwarded frames rejected by web conversation control')
apFlowMgrPortTotalAckDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortTotalAckDelete.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortTotalAckDelete.setDescription('Total flows deleted because of incomplete TCP flow transactions from client')
apFlowMgrPortPortAckDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortPortAckDelete.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortPortAckDelete.setDescription('Number of flows deleted on interface because of incomplete TCP flow transactions from client')
apFlowMgrPortMidSpoofRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortMidSpoofRejects.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortMidSpoofRejects.setDescription('Number of flows rejected because spoofing was required and a non-SYN TCP frame started the flow')
apFlowMgrPortMidNATReject = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortMidNATReject.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortMidNATReject.setDescription('Number of flows rejected because NAT was required and a non-SYN TCP frame started the flow')
apFlowMgrPortMidStickyReject = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortMidStickyReject.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortMidStickyReject.setDescription('Number of sticky flows rejected because a non-SYN TCP frame started the flow')
apFlowMgrPortSynExceedDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortSynExceedDelete.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortSynExceedDelete.setDescription('Number of flows deleted because too many SYN frames were sent')
apFlowMgrPortInvalidIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortInvalidIP.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortInvalidIP.setDescription('Number of invalid IP frames received')
apFlowMgrPortBufferShortage = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortBufferShortage.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortBufferShortage.setDescription('Number of flows that could not be started due to buffer shortages')
apFlowMgrPortMovedAcctReports = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortMovedAcctReports.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortMovedAcctReports.setDescription('Number of accounting reports for flows received on ports other than current flow ingress')
apFlowMgrPortUknownQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortUknownQueries.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortUknownQueries.setDescription('Number of times a flow was known to flow manager and unknown in the fastpath')
apFlowMgrPortMappedLeftovers = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortMappedLeftovers.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortMappedLeftovers.setDescription('Number of times a mapped TCP flow was a partner to a flow being freed')
apFlowMgrPortUnmappedLeftovers = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortUnmappedLeftovers.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortUnmappedLeftovers.setDescription('Number of times an unmapped TCP flow was a partner to a flow being freed')
apFlowMgrPortRemappedIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortRemappedIngress.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortRemappedIngress.setDescription('Number of times the ingress port of a flow was remapped')
apFlowMgrPortFlowsUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortFlowsUnavailable.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortFlowsUnavailable.setDescription('Number of times now flow structures were available for new flows')
apFlowMgrPortTCPCsumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortTCPCsumErrors.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortTCPCsumErrors.setDescription('Number of frames received with TCP checksum errors for all interfaces')
apFlowMgrPortOverflowMaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortOverflowMaps.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortOverflowMaps.setDescription('Number of flows mapped in the mid-path because of fastpath FCB shortages')
apFlowMgrPortRouteChangeEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortRouteChangeEvents.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortRouteChangeEvents.setDescription('Number of route change events received by flow manager')
apFlowMgrPortRouteChangeFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortRouteChangeFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortRouteChangeFlows.setDescription('Number of flows examined as a result of route change events')
apFlowMgrPortRouteChangeRemaps = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortRouteChangeRemaps.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortRouteChangeRemaps.setDescription('Number of flows remapped as a result of route change events')
apFlowMgrPortOrphanMappings = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 16, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrPortOrphanMappings.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrPortOrphanMappings.setDescription('Number of flows in free list that had mapped fastpath entries')
apFlowMgrDetailTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17), )
if mibBuilder.loadTexts: apFlowMgrDetailTable.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailTable.setDescription('The FlowMgr Detail Table for a given slot/subslot in the chassis.')
apFlowMgrDetailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1), ).setIndexNames((0, "FLOWMGREXT-MIB", "apFlowMgrDetailIfIndex"))
if mibBuilder.loadTexts: apFlowMgrDetailEntry.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEntry.setDescription('An entry in the Flow Manager Detail Table.')
apFlowMgrDetailIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailIfIndex.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailIfIndex.setDescription('IF index for interface')
apFlowMgrDetailSeqBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailSeqBytes.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailSeqBytes.setDescription('Total TCP sequence space in bytes from flows on interface')
apFlowMgrDetailFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailFlags.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailFlags.setDescription('Interface flow manager state flags')
apFlowMgrDetailPoolFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailPoolFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailPoolFlows.setDescription('Number of flows in flow manager shared pool for interface')
apFlowMgrDetailInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInBytes.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInBytes.setDescription('Total IP bytes received on this interface')
apFlowMgrDetailOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailOutBytes.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailOutBytes.setDescription('Total IP bytes sent from flow manager on this interface')
apFlowMgrDetailInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInFrames.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInFrames.setDescription('Total IP frames in to flow manager on this interface')
apFlowMgrDetailTotalInFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailTotalInFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailTotalInFlows.setDescription('Total inbound flows started on this interface')
apFlowMgrDetailTotalOutFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailTotalOutFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailTotalOutFlows.setDescription('Total flows started outbound through this interface')
apFlowMgrDetailTotalAcctFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailTotalAcctFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailTotalAcctFlows.setDescription('Total accounting reports received for flows on interface')
apFlowMgrDetailResetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailResetCount.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailResetCount.setDescription('Total times flow manager reset interface')
apFlowMgrDetailCurTCPFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailCurTCPFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailCurTCPFlows.setDescription('Current number of active TCP flows on interface')
apFlowMgrDetailCurUDPFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailCurUDPFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailCurUDPFlows.setDescription('Current number of active UDP flows on interface')
apFlowMgrDetailCurInFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailCurInFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailCurInFlows.setDescription('Total number of flows on this interface')
apFlowMgrDetailCurOutFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailCurOutFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailCurOutFlows.setDescription('Total number of flows outbound on this interface')
apFlowMgrDetailFPFlowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailFPFlowCount.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailFPFlowCount.setDescription('Total number of free FCBs reported by the fastpath for this port')
apFlowMgrDetailTotalInFlowMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailTotalInFlowMap.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailTotalInFlowMap.setDescription('Total number of active FCBs in the flow map for this port')
apFlowMgrDetailInMappedOnlyPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInMappedOnlyPrimary.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInMappedOnlyPrimary.setDescription('Total number of active FCBs for this port which have only been mapped to one primary port')
apFlowMgrDetailInMappedOnlyPrevious = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInMappedOnlyPrevious.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInMappedOnlyPrevious.setDescription('Total number of active FCBs for this port which were mapped to a previous port and are now unmapped')
apFlowMgrDetailInMappedBothPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInMappedBothPrimary.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInMappedBothPrimary.setDescription('Total number of active FCBs for this port which have only been mapped to one primary port')
apFlowMgrDetailInMappedBothPrevious = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInMappedBothPrevious.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInMappedBothPrevious.setDescription('Total number of active FCBs for this port which have had their primary port remapped to a different port')
apFlowMgrDetailInNoFPMappings = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInNoFPMappings.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInNoFPMappings.setDescription('Total number of active FCBs for this port which are not mapped in the fastpath, though are active on the SFP')
apFlowMgrDetailInIngressQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInIngressQueueLen.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInIngressQueueLen.setDescription('The length of the ingress (input) queue for this port')
apFlowMgrDetailInOrphanFCBFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInOrphanFCBFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInOrphanFCBFlows.setDescription('The number of times a FCB for this port was found to still be mapped in the fastpath when it was reallocated')
apFlowMgrDetailInTotalOrphanFCB = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInTotalOrphanFCB.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInTotalOrphanFCB.setDescription('The total number of times a FCB was mapped in the fastpath and found to still be mapped when it was reallocated')
apFlowMgrDetailInTCPPermPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInTCPPermPort.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInTCPPermPort.setDescription('The total number of active TCP FCBs on this port that are associated with a configured permanent port')
apFlowMgrDetailInUDPPermPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInUDPPermPort.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInUDPPermPort.setDescription('The total number of active UDP FCBs on this port that are associated with a configured permanent port')
apFlowMgrDetailInJoined = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInJoined.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInJoined.setDescription('The total number of active ingress FCBs on this port which are in the joined state, meaning the backend server has acknowledged')
apFlowMgrDetailInContentExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInContentExpected.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInContentExpected.setDescription('The total number of active ingress FCBs on this port which are waiting for a content frame from the client')
apFlowMgrDetailInJoinPending = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInJoinPending.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInJoinPending.setDescription('The total number of active ingress FCBs on this port which are pended, waiting for the SYN/ACK from the backend server')
apFlowMgrDetailInContentPending = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInContentPending.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInContentPending.setDescription('The total number of active ingress FCBs on this port which are pended, waiting for the content frame from the client')
apFlowMgrDetailInTCPSYNSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInTCPSYNSent.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInTCPSYNSent.setDescription('The total number of active ingress FCBs on this port for which a SYN has been sent to the backend server')
apFlowMgrDetailInReversePending = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInReversePending.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInReversePending.setDescription('The total number of active ingress FCBs on this port which are waiting for a SYN/ACK from the client')
apFlowMgrDetailInSFPForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInSFPForwarded.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInSFPForwarded.setDescription('The total number of active ingress FCBs on this port which are being forward in the SFP and not mapped in the fastpath')
apFlowMgrDetailInInPortInflowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInInPortInflowCount.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInInPortInflowCount.setDescription('The total number of ingress flows on this port')
apFlowMgrDetailInDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInDeleted.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInDeleted.setDescription('The total number of active ingress FCBs on this port which have been deleted')
apFlowMgrDetailInSpoofed = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInSpoofed.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInSpoofed.setDescription('The total number of active ingress FCBs on this port which have been spoofed')
apFlowMgrDetailInNATInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInNATInUse.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInNATInUse.setDescription('The total number of active ingress FCBs on this port which have been natted')
apFlowMgrDetailInContentAware = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInContentAware.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInContentAware.setDescription('The total number of active ingress FCBs on this port which are Layer 5 flows for which the CSS examines content frames')
apFlowMgrDetailInSticky = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInSticky.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInSticky.setDescription('The total number of active ingress FCBs on this port which are using a sticky balance method')
apFlowMgrDetailInBridged = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInBridged.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInBridged.setDescription('The total number of active ingress FCBs on this port for which we are bridging frames')
apFlowMgrDetailInBuffersPending = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInBuffersPending.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInBuffersPending.setDescription('The total number of active ingress FCBs on this port for which we have buffers containing content frames, awaiting the backend connection to the server to complete')
apFlowMgrDetailInSYNDOSTimerActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInSYNDOSTimerActive.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInSYNDOSTimerActive.setDescription('The total number of active ingress FCBs on this port for which we are running the SYN/ACK timer, awaiting the SYN/ACK from the backend server')
apFlowMgrDetailInOverflowMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInOverflowMapped.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInOverflowMapped.setDescription('The total number of active ingress FCBs on this port which have been overflow mapped, meaning that there is not FCB available in the fastpath')
apFlowMgrDetailInRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInRejected.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInRejected.setDescription('The total number of active ingress FCBs on this port which are marked rejected')
apFlowMgrDetailInTotalTCPFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInTotalTCPFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInTotalTCPFlows.setDescription('The total number of active ingress FCBs on this port which are the TCP protocol')
apFlowMgrDetailInTotalUDPFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInTotalUDPFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInTotalUDPFlows.setDescription('The total number of active ingress FCBs on this port which are the UDP protocol')
apFlowMgrDetailInHTTPSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInHTTPSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInHTTPSrcFlows.setDescription('The total number of active ingress FCBs on this port which have the HTTP port (80) as the source port')
apFlowMgrDetailInHTTPDstFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInHTTPDstFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInHTTPDstFlows.setDescription('The total number of active ingress FCBs on this port which have the HTTP port (80) as the destination port')
apFlowMgrDetailInFTPDataSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInFTPDataSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInFTPDataSrcFlows.setDescription('The total number of active ingress FCBs on this port which have the FTP Data port (20) as the source port')
apFlowMgrDetailInFTPDataDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInFTPDataDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInFTPDataDestFlows.setDescription('The total number of active ingress FCBs on this port which have the FTP Data port (20) as the destination port')
apFlowMgrDetailInFTPCtrlSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInFTPCtrlSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInFTPCtrlSrcFlows.setDescription('The total number of active ingress FCBs on this port which have the FTP Ctrl port (21) as the source port')
apFlowMgrDetailInFTPCtrlDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInFTPCtrlDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInFTPCtrlDestFlows.setDescription('The total number of active ingress FCBs on this port which have the FTP Data port (21) as the destination port')
apFlowMgrDetailInSSHSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInSSHSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInSSHSrcFlows.setDescription('The total number of active ingress FCBs on this port which have the SSH port (22) as the source port')
apFlowMgrDetailInSSHDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInSSHDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInSSHDestFlows.setDescription('The total number of active ingress FCBs on this port which have the SSH port (22) as the destination port')
apFlowMgrDetailInTelnetSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInTelnetSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInTelnetSrcFlows.setDescription('The total number of active ingress FCBs on this port which have the TELNET port (23) as the source port')
apFlowMgrDetailInTelnetDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInTelnetDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInTelnetDestFlows.setDescription('The total number of active ingress FCBs on this port which have the TELNET port (23) as the destination port')
apFlowMgrDetailInRASrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInRASrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInRASrcFlows.setDescription('The total number of active ingress FCBs on this port which have the REAL AUDIO port (7070) as the source port')
apFlowMgrDetailInRADestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInRADestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInRADestFlows.setDescription('The total number of active ingress FCBs on this port which have the REAL AUDIO port (7070) as the destination port')
apFlowMgrDetailInBGPSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInBGPSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInBGPSrcFlows.setDescription('The total number of active ingress FCBs on this port which have the BGP port (179) as the source port')
apFlowMgrDetailInBGPDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInBGPDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInBGPDestFlows.setDescription('The total number of active ingress FCBs on this port which have the BGP port (179) as the destination port')
apFlowMgrDetailInSMTPSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInSMTPSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInSMTPSrcFlows.setDescription('The total number of active ingress FCBs on this port which have the SMTP port (25) as the source port')
apFlowMgrDetailInSMTPDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInSMTPDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInSMTPDestFlows.setDescription('The total number of active ingress FCBs on this port which have the SMTP port (25) as the destination port')
apFlowMgrDetailInPOP3SrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInPOP3SrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInPOP3SrcFlows.setDescription('The total number of active ingress FCBs on this port which have the POP3 port (110) as the source port')
apFlowMgrDetailInPOP3DestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInPOP3DestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInPOP3DestFlows.setDescription('The total number of active ingress FCBs on this port which have the POP3 port (110) as the destination port')
apFlowMgrDetailInHTTPSSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInHTTPSSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInHTTPSSrcFlows.setDescription('The total number of active ingress FCBs on this port which have the SSL port (443) as the source port')
apFlowMgrDetailInHTTPSDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInHTTPSDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInHTTPSDestFlows.setDescription('The total number of active ingress FCBs on this port which have the SSL port (443) as the destination port')
apFlowMgrDetailInNNTPSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInNNTPSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInNNTPSrcFlows.setDescription('The total number of active ingress FCBs on this port which have the NNTP port (119) as the source port')
apFlowMgrDetailInNNTPDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInNNTPDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInNNTPDestFlows.setDescription('The total number of active ingress FCBs on this port which have the NNTP port (119) as the destination port')
apFlowMgrDetailInSOCKSSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInSOCKSSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInSOCKSSrcFlows.setDescription('The total number of active ingress FCBs on this port which have the SOCKS port (1080) as the source port')
apFlowMgrDetailInSOCKSDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInSOCKSDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInSOCKSDestFlows.setDescription('The total number of active ingress FCBs on this port which have the SOCKS port (1080) as the destination port')
apFlowMgrDetailInPortLT23SrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInPortLT23SrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInPortLT23SrcFlows.setDescription('The total number of active ingress FCBs on this port which have a TCP port number less than 23 as the source port')
apFlowMgrDetailInPortLT23DestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInPortLT23DestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInPortLT23DestFlows.setDescription('The total number of active ingress FCBs on this port which have a TCP port number less than 23 as the destination port')
apFlowMgrDetailInPortGT1024SrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInPortGT1024SrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInPortGT1024SrcFlows.setDescription('The total number of active ingress FCBs on this port which have a TCP port number greater than 1024 as the source port')
apFlowMgrDetailInPortGT1024DestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInPortGT1024DestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInPortGT1024DestFlows.setDescription('The total number of active ingress FCBs on this port which have a TCP port number greater than 1024 as the destination port')
apFlowMgrDetailInTimeSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInTimeSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInTimeSrcFlows.setDescription('The total number of active ingress FCBs on this port which have the TIME port (37) as the source port')
apFlowMgrDetailInTimeDestSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInTimeDestSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInTimeDestSrcFlows.setDescription('The total number of active ingress FCBs on this port which have the TIME port (37) as the destination port')
apFlowMgrDetailInDNSSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInDNSSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInDNSSrcFlows.setDescription('The total number of active ingress FCBs on this port which have the DNS port (53) as the source port')
apFlowMgrDetailInDNSDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInDNSDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInDNSDestFlows.setDescription('The total number of active ingress FCBs on this port which have the DNS port (53) as the destination port')
apFlowMgrDetailInSNMPSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInSNMPSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInSNMPSrcFlows.setDescription('The total number of active ingress FCBs on this port which have the SNMP port (161) as the source port')
apFlowMgrDetailInSNMPDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInSNMPDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInSNMPDestFlows.setDescription('The total number of active ingress FCBs on this port which have the SNMP port (161) as the destination port')
apFlowMgrDetailInSNMPTrapSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInSNMPTrapSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInSNMPTrapSrcFlows.setDescription('The total number of active ingress FCBs on this port which have the SNMP Trap port (162) as the source port')
apFlowMgrDetailInSNMPTrapDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInSNMPTrapDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInSNMPTrapDestFlows.setDescription('The total number of active ingress FCBs on this port which have the SNMP Trap port (162) as the destination port')
apFlowMgrDetailInNFSSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInNFSSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInNFSSrcFlows.setDescription('The total number of active ingress FCBs on this port which have the NFS port (2049) as the source port')
apFlowMgrDetailInNFSDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInNFSDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInNFSDestFlows.setDescription('The total number of active ingress FCBs on this port which have the NFS port (2049) as the destination port')
apFlowMgrDetailInUDPGT1024SrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInUDPGT1024SrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInUDPGT1024SrcFlows.setDescription('The total number of active ingress FCBs on this port which have a UDP port number greater than 1024 as the source port')
apFlowMgrDetailInUDPGT1024DestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInUDPGT1024DestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInUDPGT1024DestFlows.setDescription('The total number of active ingress FCBs on this port which have a UDP port number greater than 1024 as the destination port')
apFlowMgrDetailInUDPLT1024SrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInUDPLT1024SrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInUDPLT1024SrcFlows.setDescription('The total number of active ingress FCBs on this port which have a UDP port number less than 1024 as the source port')
apFlowMgrDetailInUDPLT1024DestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInUDPLT1024DestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInUDPLT1024DestFlows.setDescription('The total number of active ingress FCBs on this port which have a UDP port number less than 1024 as the destination port')
apFlowMgrDetailInExplicitFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInExplicitFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInExplicitFlows.setDescription('The total number of active FCBs on this port which have been setup as an explicit flow from another SFP')
apFlowMgrDetailInAcctSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailInAcctSent.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailInAcctSent.setDescription('The total number of active FCBs on this port for which accounting reports have been received')
apFlowMgrDetailEgTCPPermPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgTCPPermPort.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgTCPPermPort.setDescription('The total number of active TCP FCBs on this port which have a permanent for either the source or destination port')
apFlowMgrDetailEgUDPPermPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgUDPPermPort.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgUDPPermPort.setDescription('The total number of active UDP FCBs on this port which have a permanent for either the source or destination port')
apFlowMgrDetailEgJoined = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgJoined.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgJoined.setDescription('The total number of active egress FCBs on this port which are in the joined state, meaning the backend server has acknowledged')
apFlowMgrDetailEgContentExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgContentExpected.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgContentExpected.setDescription('The total number of active egress FCBs on this port which are waiting for a content frame from the client')
apFlowMgrDetailEgJoinPending = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgJoinPending.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgJoinPending.setDescription('The total number of active egress FCBs on this port which are pended, waiting for the SYN/ACK from the backend server')
apFlowMgrDetailEgContentPending = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgContentPending.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgContentPending.setDescription('The total number of active egress FCBs on this port which are pended, waiting for the content frame from the client')
apFlowMgrDetailEgTCPSYNSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgTCPSYNSent.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgTCPSYNSent.setDescription('The total number of active egress FCBs on this port for which a SYN has been sent to the backend server')
apFlowMgrDetailEgReversePending = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgReversePending.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgReversePending.setDescription('The total number of active egress FCBs on this port which are waiting for a SYN/ACK from the client')
apFlowMgrDetailEgSFPFowrarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgSFPFowrarded.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgSFPFowrarded.setDescription('The total number of active egress FCBs on this port which are being forward in the SFP and not mapped in the fastpath')
apFlowMgrDetailEgInPortInflowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgInPortInflowCount.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgInPortInflowCount.setDescription('The total number of egress flows on this port')
apFlowMgrDetailEgDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgDeleted.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgDeleted.setDescription('The total number of active egress FCBs on this port which have been deleted')
apFlowMgrDetailEgSpoofed = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgSpoofed.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgSpoofed.setDescription('The total number of active egress FCBs on this port which have been spoofed')
apFlowMgrDetailEgNATInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgNATInUse.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgNATInUse.setDescription('The total number of active egress FCBs on this port which have been natted')
apFlowMgrDetailEgContentAware = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgContentAware.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgContentAware.setDescription('The total number of active egress FCBs on this port which are Layer 5 flows for which the CSS examines content frames')
apFlowMgrDetailEgSticky = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgSticky.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgSticky.setDescription('The total number of active egress FCBs on this port which are using a sticky balance method')
apFlowMgrDetailEgBridged = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgBridged.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgBridged.setDescription('The total number of active egress FCBs on this port for which we are bridging frames')
apFlowMgrDetailEgBuffersPending = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgBuffersPending.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgBuffersPending.setDescription('The total number of active egress FCBs on this port for which we have buffers containing content frames, awaiting the backend connection to the server to complete')
apFlowMgrDetailEgSYNDOSTimerActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgSYNDOSTimerActive.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgSYNDOSTimerActive.setDescription('The total number of active egress FCBs on this port for which we are running the SYN/ACK timer, awaiting the SYN/ACK from the backend server')
apFlowMgrDetailEgOverflowMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 110), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgOverflowMapped.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgOverflowMapped.setDescription('The total number of active egress FCBs on this port which have been overflow mapped, meaning that there is not FCB available in the fastpath')
apFlowMgrDetailEgRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgRejected.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgRejected.setDescription('The total number of active egress FCBs on this port which are marked rejected')
apFlowMgrDetailEgTotalTCPFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 112), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgTotalTCPFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgTotalTCPFlows.setDescription('The total number of active egress FCBs on this port which are the TCP protocol')
apFlowMgrDetailEgTotalUDPFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 113), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgTotalUDPFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgTotalUDPFlows.setDescription('The total number of active egress FCBs on this port which are the UDP protocol')
apFlowMgrDetailEgHTTPSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 114), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgHTTPSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgHTTPSrcFlows.setDescription('The total number of active egress FCBs on this port which have the HTTP port (80) as the source port')
apFlowMgrDetailEgHTTPDstFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 115), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgHTTPDstFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgHTTPDstFlows.setDescription('The total number of active egress FCBs on this port which have the HTTP port (80) as the destination port')
apFlowMgrDetailEgFTPDataSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 116), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgFTPDataSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgFTPDataSrcFlows.setDescription('The total number of active egress FCBs on this port which have the FTP Data port (20) as the source port')
apFlowMgrDetailEgFTPDataDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 117), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgFTPDataDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgFTPDataDestFlows.setDescription('The total number of active egress FCBs on this port which have the FTP Data port (20) as the destination port')
apFlowMgrDetailEgFTPCtrlSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 118), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgFTPCtrlSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgFTPCtrlSrcFlows.setDescription('The total number of active egress FCBs on this port which have the FTP Ctrl port (21) as the source port')
apFlowMgrDetailEgFTPCtrlDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 119), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgFTPCtrlDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgFTPCtrlDestFlows.setDescription('The total number of active egress FCBs on this port which have the FTP Data port (21) as the destination port')
apFlowMgrDetailEgSSHSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 120), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgSSHSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgSSHSrcFlows.setDescription('The total number of active egress FCBs on this port which have the SSH port (22) as the source port')
apFlowMgrDetailEgSSHDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 121), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgSSHDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgSSHDestFlows.setDescription('The total number of active egress FCBs on this port which have the SSH port (22) as the destination port')
apFlowMgrDetailEgTelnetSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 122), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgTelnetSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgTelnetSrcFlows.setDescription('The total number of active egress FCBs on this port which have the TELNET port (23) as the source port')
apFlowMgrDetailEgTelnetDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 123), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgTelnetDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgTelnetDestFlows.setDescription('The total number of active egress FCBs on this port which have the TELNET port (23) as the destination port')
apFlowMgrDetailEgRASrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 124), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgRASrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgRASrcFlows.setDescription('The total number of active egress FCBs on this port which have the REAL AUDIO port (7070) as the source port')
apFlowMgrDetailEgRADestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 125), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgRADestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgRADestFlows.setDescription('The total number of active egress FCBs on this port which have the REAL AUDIO port (7070) as the destination port')
apFlowMgrDetailEgBGPSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 126), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgBGPSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgBGPSrcFlows.setDescription('The total number of active egress FCBs on this port which have the BGP port (179) as the source port')
apFlowMgrDetailEgBGPDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 127), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgBGPDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgBGPDestFlows.setDescription('The total number of active egress FCBs on this port which have the BGP port (179) as the destination port')
apFlowMgrDetailEgSMTPSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 128), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgSMTPSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgSMTPSrcFlows.setDescription('The total number of active egress FCBs on this port which have the SMTP port (25) as the source port')
apFlowMgrDetailEgSMTPDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 129), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgSMTPDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgSMTPDestFlows.setDescription('The total number of active egress FCBs on this port which have the SMTP port (25) as the destination port')
apFlowMgrDetailEgPOP3SrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 130), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgPOP3SrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgPOP3SrcFlows.setDescription('The total number of active egress FCBs on this port which have the POP3 port (110) as the source port')
apFlowMgrDetailEgPOP3DestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 131), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgPOP3DestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgPOP3DestFlows.setDescription('The total number of active egress FCBs on this port which have the POP3 port (110) as the destination port')
apFlowMgrDetailEgHTTPSSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 132), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgHTTPSSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgHTTPSSrcFlows.setDescription('The total number of active egress FCBs on this port which have the SSL port (443) as the source port')
apFlowMgrDetailEgHTTPSDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 133), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgHTTPSDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgHTTPSDestFlows.setDescription('The total number of active egress FCBs on this port which have the SSL port (443) as the destination port')
apFlowMgrDetailEgNNTPSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 134), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgNNTPSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgNNTPSrcFlows.setDescription('The total number of active egress FCBs on this port which have the NNTP port (119) as the source port')
apFlowMgrDetailEgNNTPDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 135), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgNNTPDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgNNTPDestFlows.setDescription('The total number of active egress FCBs on this port which have the NNTP port (119) as the destination port')
apFlowMgrDetailEgSOCKSSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 136), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgSOCKSSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgSOCKSSrcFlows.setDescription('The total number of active egress FCBs on this port which have the SOCKS port (1080) as the source port')
apFlowMgrDetailEgSOCKSDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 137), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgSOCKSDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgSOCKSDestFlows.setDescription('The total number of active egress FCBs on this port which have the SOCKS port (1080) as the destination port')
apFlowMgrDetailEgPortLT23SrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 138), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgPortLT23SrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgPortLT23SrcFlows.setDescription('The total number of active egress FCBs on this port which have a TCP port number less than 23 as the source port')
apFlowMgrDetailEgPortLT23DestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 139), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgPortLT23DestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgPortLT23DestFlows.setDescription('The total number of active egress FCBs on this port which have a TCP port number less than 23 as the destination port')
apFlowMgrDetailEgPortGT1024SrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 140), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgPortGT1024SrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgPortGT1024SrcFlows.setDescription('The total number of active egress FCBs on this port which have a TCP port number greater than 1024 as the source port')
apFlowMgrDetailEgPortGT1024DestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 141), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgPortGT1024DestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgPortGT1024DestFlows.setDescription('The total number of active egress FCBs on this port which have a TCP port number greater than 1024 as the destination port')
apFlowMgrDetailEgTimeSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 142), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgTimeSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgTimeSrcFlows.setDescription('The total number of active egress FCBs on this port which have the TIME port (37) as the source port')
apFlowMgrDetailEgTimeDestSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 143), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgTimeDestSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgTimeDestSrcFlows.setDescription('The total number of active egress FCBs on this port which have the TIME port (37) as the destination port')
apFlowMgrDetailEgDNSSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 144), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgDNSSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgDNSSrcFlows.setDescription('The total number of active egress FCBs on this port which have the DNS port (53) as the source port')
apFlowMgrDetailEgDNSDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 145), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgDNSDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgDNSDestFlows.setDescription('The total number of active egress FCBs on this port which have the DNS port (53) as the destination port')
apFlowMgrDetailEgSNMPSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 146), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgSNMPSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgSNMPSrcFlows.setDescription('The total number of active egress FCBs on this port which have the SNMP port (161) as the source port')
apFlowMgrDetailEgSNMPDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 147), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgSNMPDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgSNMPDestFlows.setDescription('The total number of active egress FCBs on this port which have the SNMP port (161) as the destination port')
apFlowMgrDetailEgSNMPTrapSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 148), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgSNMPTrapSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgSNMPTrapSrcFlows.setDescription('The total number of active egress FCBs on this port which have the SNMP Trap port (162) as the source port')
apFlowMgrDetailEgSNMPTrapDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 149), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgSNMPTrapDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgSNMPTrapDestFlows.setDescription('The total number of active egress FCBs on this port which have the SNMP Trap port (162) as the destination port')
apFlowMgrDetailEgNFSSrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 150), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgNFSSrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgNFSSrcFlows.setDescription('The total number of active egress FCBs on this port which have the NFS port (2049) as the source port')
apFlowMgrDetailEgNFSDestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 151), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgNFSDestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgNFSDestFlows.setDescription('The total number of active egress FCBs on this port which have the NFS port (2049) as the destination port')
apFlowMgrDetailEgUDPGT1024SrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 152), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgUDPGT1024SrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgUDPGT1024SrcFlows.setDescription('The total number of active egress FCBs on this port which have a UDP port number greater than 1024 as the source port')
apFlowMgrDetailEgUDPGT1024DestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 153), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgUDPGT1024DestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgUDPGT1024DestFlows.setDescription('The total number of active egress FCBs on this port which have a UDP port number greater than 1024 as the destination port')
apFlowMgrDetailEgUDPLT1024SrcFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 154), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgUDPLT1024SrcFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgUDPLT1024SrcFlows.setDescription('The total number of active egress FCBs on this port which have a UDP port number less than 1024 as the source port')
apFlowMgrDetailEgUDPLT1024DestFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 155), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailEgUDPLT1024DestFlows.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailEgUDPLT1024DestFlows.setDescription('The total number of active egress FCBs on this port which have a UDP port number less than 1024 as the destination port')
apFlowMgrDetailOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 17, 1, 156), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrDetailOutFrames.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrDetailOutFrames.setDescription('Total IP frames sent by the flow manager on this interface')
apFlowMgrExtDosTotalAttacks = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDosTotalAttacks.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDosTotalAttacks.setDescription('This object specifies the total number of Denial Of Service (DOS) attacks detected by the flowmgr.')
apFlowMgrExtDosTotalSynAttacks = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDosTotalSynAttacks.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDosTotalSynAttacks.setDescription('This object specifies the total number of Denial Of Service (DOS) SYN attacks detected by the flowmgr.')
apFlowMgrExtDosTotalLandAttacks = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDosTotalLandAttacks.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDosTotalLandAttacks.setDescription('This object specifies the total number of Denial Of Service (DOS) LAND attacks detected by the flowmgr.')
apFlowMgrExtDosTotalZeroPortAttacks = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDosTotalZeroPortAttacks.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDosTotalZeroPortAttacks.setDescription('This object specifies the total number of Denial Of Service (DOS) attacks to a source or destination port of zero detected by the flowmgr.')
apFlowMgrExtDosTotalIllegalSourceAttacks = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDosTotalIllegalSourceAttacks.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDosTotalIllegalSourceAttacks.setDescription('This object specifies the total number of Denial Of Service (DOS) attacks to an illegal source address detected by the flowmgr.')
apFlowMgrExtDosTotalIllegalDestinationAttacks = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDosTotalIllegalDestinationAttacks.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDosTotalIllegalDestinationAttacks.setDescription('This object specifies the total number of Denial Of Service (DOS) attacks to an illegal destination address detected by the flowmgr.')
apFlowMgrExtDosTotalPingOfDeathAttacks = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDosTotalPingOfDeathAttacks.setStatus('obsolete')
if mibBuilder.loadTexts: apFlowMgrExtDosTotalPingOfDeathAttacks.setDescription('This object specifies the total number of Denial Of Service (DOS) Ping of Death attacks detected by the flowmgr.')
apFlowMgrExtDosTotalSmurfAttacks = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDosTotalSmurfAttacks.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDosTotalSmurfAttacks.setDescription('This object specifies the total number of Denial Of Service (DOS) Smurf attacks detected by the flowmgr.')
apFlowMgrExtDosLastAttack = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDosLastAttack.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDosLastAttack.setDescription('This object specifies the time of the last Denial Of Service (DOS) attack detected by the flowmgr.')
apFlowMgrExtDosFirstAttack = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 36, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDosFirstAttack.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDosFirstAttack.setDescription('This object specifies the time of the first Denial Of Service (DOS) attack detected by the flowmgr.')
apFlowMgrExtDOSAttackTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 36, 28), )
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackTable.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackTable.setDescription('This is the table of Denial of Service (DOS) attack events.')
apFlowMgrExtDOSAttackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 36, 28, 1), ).setIndexNames((0, "FLOWMGREXT-MIB", "apFlowMgrExtDOSAttackIndex"))
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackEntry.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackEntry.setDescription('This is the table of Denial of Service (DOS) attack events.')
apFlowMgrExtDOSAttackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 28, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackIndex.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackIndex.setDescription('This is the index for the DOS event.')
apFlowMgrExtDOSAttackSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 28, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackSrcAddress.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackSrcAddress.setDescription('This is the source ip address for this DOS attack event.')
apFlowMgrExtDOSAttackDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 28, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackDestAddress.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackDestAddress.setDescription('This is the destination ip address for this DOS attack event.')
apFlowMgrExtDOSAttackFirstEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 28, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackFirstEvent.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackFirstEvent.setDescription('This is the first time this DOS attack occurred.')
apFlowMgrExtDOSAttackLastEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 28, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackLastEvent.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackLastEvent.setDescription('This is the last time this DOS attack occurred.')
apFlowMgrExtDOSAttackEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 28, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackEventCount.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackEventCount.setDescription('This is the number of times this DOS attack had occurred.')
apFlowMgrExtDOSAttackEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 28, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("syn", 1), ("land", 2), ("zeroport", 3), ("illegalsrc", 4), ("pingofdeath", 5), ("smurf", 6), ("illegaldst", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackEventType.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackEventType.setDescription('This is the type of DOS attack which has occurred.')
apFlowMgrExtDOSAttackEventString = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 36, 28, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackEventString.setStatus('current')
if mibBuilder.loadTexts: apFlowMgrExtDOSAttackEventString.setDescription('This is the ascii text for the type of DOS attack which has occurred.')
apFlowMgrExtDosSynTrap = NotificationType((1, 3, 6, 1, 4, 1, 2467, 1, 36) + (0,1))
if mibBuilder.loadTexts: apFlowMgrExtDosSynTrap.setDescription('A trap is generated with the threshold is exceeded for a SYN Denial of Service (DOS) attack.')
apFlowMgrExtDosLandTrap = NotificationType((1, 3, 6, 1, 4, 1, 2467, 1, 36) + (0,2))
if mibBuilder.loadTexts: apFlowMgrExtDosLandTrap.setDescription('A trap is generated with the threshold is exceeded for a LAND Denial of Service (DOS) attack.')
apFlowMgrExtDosIllegalTrap = NotificationType((1, 3, 6, 1, 4, 1, 2467, 1, 36) + (0,3))
if mibBuilder.loadTexts: apFlowMgrExtDosIllegalTrap.setDescription('A trap is generated with the threshold is exceeded for a Illegal Packet format Denial of Service (DOS) attack.')
apFlowMgrExtDosPingTrap = NotificationType((1, 3, 6, 1, 4, 1, 2467, 1, 36) + (0,4))
if mibBuilder.loadTexts: apFlowMgrExtDosPingTrap.setDescription('A trap is generated with the threshold is exceeded for a Ping of Death Denial of Service (DOS) attack.')
apFlowMgrExtDosSmurfTrap = NotificationType((1, 3, 6, 1, 4, 1, 2467, 1, 36) + (0,5))
if mibBuilder.loadTexts: apFlowMgrExtDosSmurfTrap.setDescription('A trap is generated with the threshold is exceeded for a Smurf Denial of Service (DOS) attack.')
mibBuilder.exportSymbols("FLOWMGREXT-MIB", apFlowMgrDetailCurOutFlows=apFlowMgrDetailCurOutFlows, apFlowMgrDetailInNNTPSrcFlows=apFlowMgrDetailInNNTPSrcFlows, apFlowMgrDetailEgBridged=apFlowMgrDetailEgBridged, apFlowMgrDetailInPortLT23SrcFlows=apFlowMgrDetailInPortLT23SrcFlows, apFlowMgrDetailInHTTPSDestFlows=apFlowMgrDetailInHTTPSDestFlows, apFlowMgrDetailEgNATInUse=apFlowMgrDetailEgNATInUse, apFlowMgrDetailEgPortLT23DestFlows=apFlowMgrDetailEgPortLT23DestFlows, apFlowMgrDetailInPortLT23DestFlows=apFlowMgrDetailInPortLT23DestFlows, apFlowMgrDetailPoolFlows=apFlowMgrDetailPoolFlows, apFlowMgrDetailInContentAware=apFlowMgrDetailInContentAware, apFlowMgrDetailInTimeDestSrcFlows=apFlowMgrDetailInTimeDestSrcFlows, apFlowMgrDetailEgSNMPSrcFlows=apFlowMgrDetailEgSNMPSrcFlows, apFlowMgrStatIfResets=apFlowMgrStatIfResets, apFlowMgrPortMTU=apFlowMgrPortMTU, apFlowMgrPortTCPCsumErrors=apFlowMgrPortTCPCsumErrors, apFlowMgrPortCurrTCPFlows=apFlowMgrPortCurrTCPFlows, apFlowMgrDetailInSpoofed=apFlowMgrDetailInSpoofed, apFlowMgrPortMidSpoofRejects=apFlowMgrPortMidSpoofRejects, apFlowMgrDetailInPortGT1024DestFlows=apFlowMgrDetailInPortGT1024DestFlows, apFlowMgrDetailEgSticky=apFlowMgrDetailEgSticky, apFlowMgrDetailEgPOP3SrcFlows=apFlowMgrDetailEgPOP3SrcFlows, apFlowMgrDetailEgContentPending=apFlowMgrDetailEgContentPending, apFlowMgrDetailInDNSDestFlows=apFlowMgrDetailInDNSDestFlows, apFlowMgrStatIfAccountingReportsRx=apFlowMgrStatIfAccountingReportsRx, apFlowMgrExtDosPingTrap=apFlowMgrExtDosPingTrap, apFlowMgrDetailEgSSHSrcFlows=apFlowMgrDetailEgSSHSrcFlows, apFlowMgrDetailEgInPortInflowCount=apFlowMgrDetailEgInPortInflowCount, apFlowMgrDetailEgSOCKSDestFlows=apFlowMgrDetailEgSOCKSDestFlows, apFlowMgrExtFlowTraceMaxFileSize=apFlowMgrExtFlowTraceMaxFileSize, apFlowMgrPortMovedAcctReports=apFlowMgrPortMovedAcctReports, apFlowMgrPortInBytes=apFlowMgrPortInBytes, apFlowMgrStatSSTCPTotal=apFlowMgrStatSSTCPTotal, apFlowMgrStatIfFcbCount=apFlowMgrStatIfFcbCount, apFlowMgrDetailInSFPForwarded=apFlowMgrDetailInSFPForwarded, apFlowMgrDetailInSSHDestFlows=apFlowMgrDetailInSSHDestFlows, apFlowMgrStatSSUDPTotal=apFlowMgrStatSSUDPTotal, apFlowMgrPortWccRtLookupError=apFlowMgrPortWccRtLookupError, apFlowMgrDetailInSMTPSrcFlows=apFlowMgrDetailInSMTPSrcFlows, apFlowMgrDetailInSOCKSSrcFlows=apFlowMgrDetailInSOCKSSrcFlows, apFlowMgrDetailEgRejected=apFlowMgrDetailEgRejected, apFlowMgrStatIfEntry=apFlowMgrStatIfEntry, apFlowMgrDetailEgNNTPDestFlows=apFlowMgrDetailEgNNTPDestFlows, apFlowMgrStatSSTCPHigh=apFlowMgrStatSSTCPHigh, PYSNMP_MODULE_ID=flowMgrExtMib, apFlowMgrDetailCurInFlows=apFlowMgrDetailCurInFlows, apFlowMgrDetailInFTPDataDestFlows=apFlowMgrDetailInFTPDataDestFlows, apFlowMgrDetailInNNTPDestFlows=apFlowMgrDetailInNNTPDestFlows, apFlowMgrStatIfUDPHigh=apFlowMgrStatIfUDPHigh, apFlowMgrPortCurrInFlows=apFlowMgrPortCurrInFlows, apFlowMgrDetailInTotalUDPFlows=apFlowMgrDetailInTotalUDPFlows, apFlowMgrDetailOutFrames=apFlowMgrDetailOutFrames, apFlowMgrPortWccAcceptedBridge=apFlowMgrPortWccAcceptedBridge, apFlowMgrDetailEgSFPFowrarded=apFlowMgrDetailEgSFPFowrarded, apFlowMgrPortInvalidIP=apFlowMgrPortInvalidIP, apFlowMgrStatIfTCPAvg=apFlowMgrStatIfTCPAvg, apFlowMgrPortTotalOutFlows=apFlowMgrPortTotalOutFlows, apFlowMgrStatIfTCPTotal=apFlowMgrStatIfTCPTotal, apFlowMgrPortCurrOutFlows=apFlowMgrPortCurrOutFlows, apFlowMgrDetailInMappedBothPrevious=apFlowMgrDetailInMappedBothPrevious, apFlowMgrPortOutFrames=apFlowMgrPortOutFrames, apFlowMgrDetailEgContentAware=apFlowMgrDetailEgContentAware, apFlowMgrStatSSAccountingReportsRx=apFlowMgrStatSSAccountingReportsRx, apFlowMgrDetailInTCPPermPort=apFlowMgrDetailInTCPPermPort, apFlowMgrPortRouteChangeRemaps=apFlowMgrPortRouteChangeRemaps, apFlowMgrDetailInBuffersPending=apFlowMgrDetailInBuffersPending, apFlowMgrExtDosTotalSmurfAttacks=apFlowMgrExtDosTotalSmurfAttacks, apFlowMgrPortTotalInFlows=apFlowMgrPortTotalInFlows, apFlowMgrDetailInTelnetDestFlows=apFlowMgrDetailInTelnetDestFlows, apFlowMgrDetailInSticky=apFlowMgrDetailInSticky, apFlowMgrDetailEgHTTPSrcFlows=apFlowMgrDetailEgHTTPSrcFlows, apFlowMgrExtDosTotalIllegalDestinationAttacks=apFlowMgrExtDosTotalIllegalDestinationAttacks, apFlowMgrDetailInBytes=apFlowMgrDetailInBytes, apFlowMgrDetailInSSHSrcFlows=apFlowMgrDetailInSSHSrcFlows, apFlowMgrPortPortAckDelete=apFlowMgrPortPortAckDelete, apFlowMgrDetailCurUDPFlows=apFlowMgrDetailCurUDPFlows, apFlowMgrDetailInInPortInflowCount=apFlowMgrDetailInInPortInflowCount, apFlowMgrDetailInRADestFlows=apFlowMgrDetailInRADestFlows, apFlowMgrExtDosLastAttack=apFlowMgrExtDosLastAttack, apFlowMgrDetailInUDPLT1024SrcFlows=apFlowMgrDetailInUDPLT1024SrcFlows, apFlowMgrExtDosSmurfTrap=apFlowMgrExtDosSmurfTrap, apFlowMgrDetailEgReversePending=apFlowMgrDetailEgReversePending, apFlowMgrDetailResetCount=apFlowMgrDetailResetCount, apFlowMgrDetailEgTimeDestSrcFlows=apFlowMgrDetailEgTimeDestSrcFlows, apFlowMgrDetailFPFlowCount=apFlowMgrDetailFPFlowCount, apFlowMgrPortWccRedirect=apFlowMgrPortWccRedirect, apFlowMgrDetailEgPortGT1024SrcFlows=apFlowMgrDetailEgPortGT1024SrcFlows, apFlowMgrPortTable=apFlowMgrPortTable, apFlowMgrDetailInMappedOnlyPrevious=apFlowMgrDetailInMappedOnlyPrevious, apFlowMgrDetailEgTCPPermPort=apFlowMgrDetailEgTCPPermPort, apFlowMgrDetailInBGPDestFlows=apFlowMgrDetailInBGPDestFlows, apFlowMgrDetailEgSNMPTrapSrcFlows=apFlowMgrDetailEgSNMPTrapSrcFlows, apFlowMgrDetailEgNFSDestFlows=apFlowMgrDetailEgNFSDestFlows, apFlowMgrExtFlowTraceDuration=apFlowMgrExtFlowTraceDuration, apFlowMgrPortFlowsUnavailable=apFlowMgrPortFlowsUnavailable, apFlowMgrDetailEgFTPDataSrcFlows=apFlowMgrDetailEgFTPDataSrcFlows, apFlowMgrDetailEgHTTPDstFlows=apFlowMgrDetailEgHTTPDstFlows, apFlowMgrPortWccForwardSfp=apFlowMgrPortWccForwardSfp, apFlowMgrDetailEgSMTPSrcFlows=apFlowMgrDetailEgSMTPSrcFlows, apFlowMgrExtDosFirstAttack=apFlowMgrExtDosFirstAttack, apFlowMgrExtDosTotalSynAttacks=apFlowMgrExtDosTotalSynAttacks, apFlowMgrPortRouteChangeEvents=apFlowMgrPortRouteChangeEvents, apFlowMgrStatSSSlot=apFlowMgrStatSSSlot, apFlowMgrDetailInPOP3SrcFlows=apFlowMgrDetailInPOP3SrcFlows, apFlowMgrExtFlowTraceState=apFlowMgrExtFlowTraceState, apFlowMgrExtReserveCleanTimer=apFlowMgrExtReserveCleanTimer, apFlowMgrDetailInBridged=apFlowMgrDetailInBridged, apFlowMgrDetailEgNNTPSrcFlows=apFlowMgrDetailEgNNTPSrcFlows, apFlowMgrStatIfUDPTotal=apFlowMgrStatIfUDPTotal, apFlowMgrDetailInFTPCtrlSrcFlows=apFlowMgrDetailInFTPCtrlSrcFlows, apFlowMgrPortWccAccepted=apFlowMgrPortWccAccepted, apFlowMgrDetailEgTimeSrcFlows=apFlowMgrDetailEgTimeSrcFlows, apFlowMgrPortWccRedirectSticky=apFlowMgrPortWccRedirectSticky, apFlowMgrStatSSUDPCur=apFlowMgrStatSSUDPCur, apFlowMgrDetailInExplicitFlows=apFlowMgrDetailInExplicitFlows, apFlowMgrExtDOSAttackEventType=apFlowMgrExtDOSAttackEventType, apFlowMgrDetailEgTelnetSrcFlows=apFlowMgrDetailEgTelnetSrcFlows, apFlowMgrDetailEgPOP3DestFlows=apFlowMgrDetailEgPOP3DestFlows, apFlowMgrDetailEgDNSDestFlows=apFlowMgrDetailEgDNSDestFlows, apFlowMgrPortRemappedIngress=apFlowMgrPortRemappedIngress, apFlowMgrPortWccTCPSpoof=apFlowMgrPortWccTCPSpoof, apFlowMgrDetailFlags=apFlowMgrDetailFlags, apFlowMgrExtPermanentPort2=apFlowMgrExtPermanentPort2, apFlowMgrDetailEgHTTPSDestFlows=apFlowMgrDetailEgHTTPSDestFlows, apFlowMgrDetailInTCPSYNSent=apFlowMgrDetailInTCPSYNSent, apFlowMgrDetailInUDPGT1024DestFlows=apFlowMgrDetailInUDPGT1024DestFlows, apFlowMgrStatSSCurrentActiveTCP=apFlowMgrStatSSCurrentActiveTCP, apFlowMgrExtPermanentPort3=apFlowMgrExtPermanentPort3, apFlowMgrStatIfUDPCur=apFlowMgrStatIfUDPCur, apFlowMgrStatIfIndex=apFlowMgrStatIfIndex, apFlowMgrDetailInTelnetSrcFlows=apFlowMgrDetailInTelnetSrcFlows, apFlowMgrDetailInPortGT1024SrcFlows=apFlowMgrDetailInPortGT1024SrcFlows, apFlowMgrPortInFrames=apFlowMgrPortInFrames, apFlowMgrDetailEgBGPSrcFlows=apFlowMgrDetailEgBGPSrcFlows, apFlowMgrDetailEgUDPGT1024DestFlows=apFlowMgrDetailEgUDPGT1024DestFlows, apFlowMgrPortRouteChangeFlows=apFlowMgrPortRouteChangeFlows, apFlowMgrStatSSEntry=apFlowMgrStatSSEntry, apFlowMgrDetailEgDNSSrcFlows=apFlowMgrDetailEgDNSSrcFlows, apFlowMgrDetailInNATInUse=apFlowMgrDetailInNATInUse, apFlowMgrExtPermanentPort4=apFlowMgrExtPermanentPort4, apFlowMgrPortWccAcceptedSfpFwd=apFlowMgrPortWccAcceptedSfpFwd, apFlowMgrDetailEgUDPLT1024DestFlows=apFlowMgrDetailEgUDPLT1024DestFlows, apFlowMgrDetailEgUDPLT1024SrcFlows=apFlowMgrDetailEgUDPLT1024SrcFlows, apFlowMgrDetailInHTTPSrcFlows=apFlowMgrDetailInHTTPSrcFlows, apFlowMgrDetailInJoined=apFlowMgrDetailInJoined, apFlowMgrPortEntry=apFlowMgrPortEntry, apFlowMgrExtDOSAttackFirstEvent=apFlowMgrExtDOSAttackFirstEvent, apFlowMgrDetailInSMTPDestFlows=apFlowMgrDetailInSMTPDestFlows, apFlowMgrDetailInMappedBothPrimary=apFlowMgrDetailInMappedBothPrimary, apFlowMgrDetailInContentExpected=apFlowMgrDetailInContentExpected, apFlowMgrExtDosTotalPingOfDeathAttacks=apFlowMgrExtDosTotalPingOfDeathAttacks, apFlowMgrDetailOutBytes=apFlowMgrDetailOutBytes, apFlowMgrPortWccNoChange=apFlowMgrPortWccNoChange, apFlowMgrDetailEgDeleted=apFlowMgrDetailEgDeleted, apFlowMgrExtDosTotalZeroPortAttacks=apFlowMgrExtDosTotalZeroPortAttacks, apFlowMgrDetailInPOP3DestFlows=apFlowMgrDetailInPOP3DestFlows, apFlowMgrPortWccArpPending=apFlowMgrPortWccArpPending, apFlowMgrDetailInNFSSrcFlows=apFlowMgrDetailInNFSSrcFlows, apFlowMgrDetailTotalInFlowMap=apFlowMgrDetailTotalInFlowMap, apFlowMgrExtDosTotalIllegalSourceAttacks=apFlowMgrExtDosTotalIllegalSourceAttacks, apFlowMgrStatSSResets=apFlowMgrStatSSResets, apFlowMgrPortBufferShortage=apFlowMgrPortBufferShortage, apFlowMgrDetailInSNMPTrapDestFlows=apFlowMgrDetailInSNMPTrapDestFlows, apFlowMgrExtDosTotalAttacks=apFlowMgrExtDosTotalAttacks, apFlowMgrDetailInIngressQueueLen=apFlowMgrDetailInIngressQueueLen, apFlowMgrDetailEgOverflowMapped=apFlowMgrDetailEgOverflowMapped, apFlowMgrExtFlowTraceOptions=apFlowMgrExtFlowTraceOptions, apFlowMgrDetailInRejected=apFlowMgrDetailInRejected, apFlowMgrPortWccForward=apFlowMgrPortWccForward, apFlowMgrDetailInUDPLT1024DestFlows=apFlowMgrDetailInUDPLT1024DestFlows, apFlowMgrExtDOSAttackSrcAddress=apFlowMgrExtDOSAttackSrcAddress, apFlowMgrStatSSTCPCur=apFlowMgrStatSSTCPCur, apFlowMgrPortMidNATReject=apFlowMgrPortMidNATReject, apFlowMgrDetailEgSNMPTrapDestFlows=apFlowMgrDetailEgSNMPTrapDestFlows, apFlowMgrDetailEgPortLT23SrcFlows=apFlowMgrDetailEgPortLT23SrcFlows, apFlowMgrExtDOSAttackEventString=apFlowMgrExtDOSAttackEventString, apFlowMgrDetailEgSSHDestFlows=apFlowMgrDetailEgSSHDestFlows, apFlowMgrDetailInAcctSent=apFlowMgrDetailInAcctSent, apFlowMgrDetailInContentPending=apFlowMgrDetailInContentPending, apFlowMgrStatIfVlanID=apFlowMgrStatIfVlanID, apFlowMgrExtDosLandTrap=apFlowMgrExtDosLandTrap, apFlowMgrDetailEgFTPDataDestFlows=apFlowMgrDetailEgFTPDataDestFlows, apFlowMgrDetailEgJoined=apFlowMgrDetailEgJoined, apFlowMgrDetailEgTotalTCPFlows=apFlowMgrDetailEgTotalTCPFlows, apFlowMgrExtDOSAttackLastEvent=apFlowMgrExtDOSAttackLastEvent, apFlowMgrDetailInJoinPending=apFlowMgrDetailInJoinPending, apFlowMgrPortSeqBytes=apFlowMgrPortSeqBytes, apFlowMgrExtDosIllegalTrap=apFlowMgrExtDosIllegalTrap, apFlowMgrDetailInNoFPMappings=apFlowMgrDetailInNoFPMappings, apFlowMgrDetailInSNMPSrcFlows=apFlowMgrDetailInSNMPSrcFlows, apFlowMgrDetailEgSNMPDestFlows=apFlowMgrDetailEgSNMPDestFlows, apFlowMgrPortUnmappedLeftovers=apFlowMgrPortUnmappedLeftovers, apFlowMgrDetailInReversePending=apFlowMgrDetailInReversePending, apFlowMgrDetailEgRADestFlows=apFlowMgrDetailEgRADestFlows, apFlowMgrDetailInOverflowMapped=apFlowMgrDetailInOverflowMapped, apFlowMgrStatSSUDPAvg=apFlowMgrStatSSUDPAvg, apFlowMgrDetailEgRASrcFlows=apFlowMgrDetailEgRASrcFlows, apFlowMgrDetailCurTCPFlows=apFlowMgrDetailCurTCPFlows, apFlowMgrPortOverflowMaps=apFlowMgrPortOverflowMaps, apFlowMgrExtPermanentPort1=apFlowMgrExtPermanentPort1, apFlowMgrStatSSTCPAvg=apFlowMgrStatSSTCPAvg, apFlowMgrPortUknownQueries=apFlowMgrPortUknownQueries, apFlowMgrDetailEgJoinPending=apFlowMgrDetailEgJoinPending, apFlowMgrDetailInDNSSrcFlows=apFlowMgrDetailInDNSSrcFlows, flowMgrExtMib=flowMgrExtMib, apFlowMgrPortWccRejectedSfp=apFlowMgrPortWccRejectedSfp, apFlowMgrDetailTable=apFlowMgrDetailTable, apFlowMgrDetailInFTPCtrlDestFlows=apFlowMgrDetailInFTPCtrlDestFlows, apFlowMgrDetailEgContentExpected=apFlowMgrDetailEgContentExpected, apFlowMgrDetailEgSMTPDestFlows=apFlowMgrDetailEgSMTPDestFlows, apFlowMgrDetailEgNFSSrcFlows=apFlowMgrDetailEgNFSSrcFlows, apFlowMgrDetailTotalInFlows=apFlowMgrDetailTotalInFlows, apFlowMgrPortSynExceedDelete=apFlowMgrPortSynExceedDelete, apFlowMgrDetailInOrphanFCBFlows=apFlowMgrDetailInOrphanFCBFlows, apFlowMgrExtDOSAttackIndex=apFlowMgrExtDOSAttackIndex, apFlowMgrStatIfTable=apFlowMgrStatIfTable, apFlowMgrExtPortLowWaterFCB=apFlowMgrExtPortLowWaterFCB, apFlowMgrPortWccAcceptedSfp=apFlowMgrPortWccAcceptedSfp, apFlowMgrDetailEgSpoofed=apFlowMgrDetailEgSpoofed, apFlowMgrStatSSSubSlot=apFlowMgrStatSSSubSlot, apFlowMgrDetailInHTTPSSrcFlows=apFlowMgrDetailInHTTPSSrcFlows, apFlowMgrDetailEgTelnetDestFlows=apFlowMgrDetailEgTelnetDestFlows, apFlowMgrStatIfUDPAvg=apFlowMgrStatIfUDPAvg, apFlowMgrDetailInMappedOnlyPrimary=apFlowMgrDetailInMappedOnlyPrimary, apFlowMgrDetailInSOCKSDestFlows=apFlowMgrDetailInSOCKSDestFlows, apFlowMgrDetailEgSOCKSSrcFlows=apFlowMgrDetailEgSOCKSSrcFlows, apFlowMgrPortResetCount=apFlowMgrPortResetCount, apFlowMgrExtPortIdleValue=apFlowMgrExtPortIdleValue, apFlowMgrStatSSTable=apFlowMgrStatSSTable, apFlowMgrDetailEgTCPSYNSent=apFlowMgrDetailEgTCPSYNSent, apFlowMgrExtFlowTraceFilename=apFlowMgrExtFlowTraceFilename, apFlowMgrStatSSUDPHigh=apFlowMgrStatSSUDPHigh, apFlowMgrPortWccRouteNotFound=apFlowMgrPortWccRouteNotFound, apFlowMgrDetailInTimeSrcFlows=apFlowMgrDetailInTimeSrcFlows, apFlowMgrExtDOSAttackEntry=apFlowMgrExtDOSAttackEntry, apFlowMgrDetailInRASrcFlows=apFlowMgrDetailInRASrcFlows, apFlowMgrDetailEgBuffersPending=apFlowMgrDetailEgBuffersPending, apFlowMgrStatIfTCPHigh=apFlowMgrStatIfTCPHigh, apFlowMgrDetailEntry=apFlowMgrDetailEntry, apFlowMgrDetailSeqBytes=apFlowMgrDetailSeqBytes, apFlowMgrPortWccLocal=apFlowMgrPortWccLocal, apFlowMgrExtDOSAttackDestAddress=apFlowMgrExtDOSAttackDestAddress, apFlowMgrStatIfTCPCur=apFlowMgrStatIfTCPCur, apFlowMgrDetailInUDPPermPort=apFlowMgrDetailInUDPPermPort, apFlowMgrStatSSCurrentActiveUDP=apFlowMgrStatSSCurrentActiveUDP, apFlowMgrExtDosSynTrap=apFlowMgrExtDosSynTrap, apFlowMgrDetailTotalAcctFlows=apFlowMgrDetailTotalAcctFlows, apFlowMgrDetailInSNMPTrapSrcFlows=apFlowMgrDetailInSNMPTrapSrcFlows, apFlowMgrPortIfIndex=apFlowMgrPortIfIndex, apFlowMgrDetailEgUDPGT1024SrcFlows=apFlowMgrDetailEgUDPGT1024SrcFlows, apFlowMgrPortOutBytes=apFlowMgrPortOutBytes, apFlowMgrExtDOSAttackTable=apFlowMgrExtDOSAttackTable, apFlowMgrStatIfCurrentActiveUDP=apFlowMgrStatIfCurrentActiveUDP, apFlowMgrDetailInDeleted=apFlowMgrDetailInDeleted, apFlowMgrExtPortIdle=apFlowMgrExtPortIdle)
mibBuilder.exportSymbols("FLOWMGREXT-MIB", apFlowMgrPortWccRejected=apFlowMgrPortWccRejected, apFlowMgrDetailInHTTPDstFlows=apFlowMgrDetailInHTTPDstFlows, apFlowMgrExtPortIdleTable=apFlowMgrExtPortIdleTable, apFlowMgrExtIdleTimer=apFlowMgrExtIdleTimer, apFlowMgrPortCurrUDPFlows=apFlowMgrPortCurrUDPFlows, apFlowMgrPortMappedLeftovers=apFlowMgrPortMappedLeftovers, apFlowMgrDetailEgSYNDOSTimerActive=apFlowMgrDetailEgSYNDOSTimerActive, apFlowMgrDetailEgFTPCtrlSrcFlows=apFlowMgrDetailEgFTPCtrlSrcFlows, apFlowMgrDetailEgHTTPSSrcFlows=apFlowMgrDetailEgHTTPSSrcFlows, apFlowMgrExtDOSAttackEventCount=apFlowMgrExtDOSAttackEventCount, apFlowMgrPortOrphanMappings=apFlowMgrPortOrphanMappings, apFlowMgrDetailIfIndex=apFlowMgrDetailIfIndex, apFlowMgrDetailInUDPGT1024SrcFlows=apFlowMgrDetailInUDPGT1024SrcFlows, apFlowMgrPortWccAcceptedSticky=apFlowMgrPortWccAcceptedSticky, apFlowMgrDetailInSYNDOSTimerActive=apFlowMgrDetailInSYNDOSTimerActive, apFlowMgrExtDosTotalLandAttacks=apFlowMgrExtDosTotalLandAttacks, apFlowMgrDetailInFrames=apFlowMgrDetailInFrames, apFlowMgrDetailInNFSDestFlows=apFlowMgrDetailInNFSDestFlows, apFlowMgrDetailTotalOutFlows=apFlowMgrDetailTotalOutFlows, apFlowMgrPortTotalAcctFlows=apFlowMgrPortTotalAcctFlows, apFlowMgrDetailInFTPDataSrcFlows=apFlowMgrDetailInFTPDataSrcFlows, apFlowMgrDetailEgUDPPermPort=apFlowMgrDetailEgUDPPermPort, apFlowMgrPortWccDiscard=apFlowMgrPortWccDiscard, apFlowMgrDetailEgTotalUDPFlows=apFlowMgrDetailEgTotalUDPFlows, apFlowMgrExtPortIdleEntry=apFlowMgrExtPortIdleEntry, apFlowMgrDetailInSNMPDestFlows=apFlowMgrDetailInSNMPDestFlows, apFlowMgrDetailEgPortGT1024DestFlows=apFlowMgrDetailEgPortGT1024DestFlows, apFlowMgrDetailEgFTPCtrlDestFlows=apFlowMgrDetailEgFTPCtrlDestFlows, apFlowMgrDetailInTotalOrphanFCB=apFlowMgrDetailInTotalOrphanFCB, apFlowMgrDetailInTotalTCPFlows=apFlowMgrDetailInTotalTCPFlows, apFlowMgrDetailEgBGPDestFlows=apFlowMgrDetailEgBGPDestFlows, apFlowMgrPortMidStickyReject=apFlowMgrPortMidStickyReject, apFlowMgrStatSSFcbCount=apFlowMgrStatSSFcbCount, apFlowMgrDetailInBGPSrcFlows=apFlowMgrDetailInBGPSrcFlows, apFlowMgrStatIfCurrentActiveTCP=apFlowMgrStatIfCurrentActiveTCP, apFlowMgrPortTotalAckDelete=apFlowMgrPortTotalAckDelete)
