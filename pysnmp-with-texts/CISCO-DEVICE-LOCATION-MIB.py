#
# PySNMP MIB module CISCO-DEVICE-LOCATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DEVICE-LOCATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:54:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CountryCode, = mibBuilder.importSymbols("CISCO-TC", "CountryCode")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, iso, MibIdentifier, Integer32, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, NotificationType, IpAddress, Counter32, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "MibIdentifier", "Integer32", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "NotificationType", "IpAddress", "Counter32", "Counter64", "ObjectIdentity")
DisplayString, TextualConvention, StorageType, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "StorageType", "RowStatus")
ciscoDeviceLocationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 732))
ciscoDeviceLocationMIB.setRevisions(('2010-10-28 00:00', '2010-04-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDeviceLocationMIB.setRevisionsDescriptions(("-Added following tables: cdlCustomLocationTable cdlGeoLocationTable cdlLocationPreferWeightTable -Added 'custom' bit to cdlLocationSubTypeCapability -Deprecated cdlMIBCompliance MODULE-COMPLIANCE statement -Added the following OBJECT-GROUP's cdlCustomLocationGroup cdlGeoLocationGroup cdlLocationPreferWeightGroup -Added cdlMIBComplianceRev1", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoDeviceLocationMIB.setLastUpdated('201010280000Z')
if mibBuilder.loadTexts: ciscoDeviceLocationMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoDeviceLocationMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-location@cisco.com')
if mibBuilder.loadTexts: ciscoDeviceLocationMIB.setDescription('This MIB is used for managing location information of end point devices(Telepresence, IP Camera, Digital media player etc) connected to switches/routers. This location information is then carried from the switch/router to the end point via Cisco Discovery protocol (CDP) or Link Layer Discovery protocol (LLDP). The location information can be used by applications such as Cisco Video Surveillance Manager, digital media manager. Civic location information as described in RFC 4676, identifies the exact location information like state, city, building, floor that helps identify the exact location of the devices. Definitions: ============ LocationTarget: This is identified by a target type (interface, IP session) and target identifier (ifIndex, IP address). MIB Table Overview: =================== This MIB consists of five tables: 1) cdlLocationTable 2) cdlCivicAddrLocationTable 3) cdlCustomLocationTable 4) cdlGeoLocationTable 5) cdlLocationPreferWeightTable The cdlLocationTable provides information about location information of LocationTarget. cdlCivicAddrLocationTable provides the details about the civic address types like state, county, city for a given LocationTarget. cdlCustomLocationTable provides the ability to associate arbitrary name/value pairs with a LocationTarget. This allows for specification of information which is not currently included into the standard definition of Civic address types. cdlGeoLocationTable provides Geolocation (GPS) coordinate information for a LocationType. cdlLocationPreferWeightTable provides information about, and a method for configuring, the order in which the system makes use of location information which is provided by different sources. The following provides a sample view of the contents of the table and the relationship between them. cdlLocationTable ------------------------------------------------ Location Sub Country Target Target Index TypeCap Code Type Identifier ------------------------------------------------- - 1 Civic Addr 01 Interface 1 | 2 Civic Addr 01 Interface 2 | | | cdlCivicAddrLocationTable | ---------------------------------------- | Location Location Location | Index Type Index Value | ----------------------------------------- |_ _ _ _ 1 1 - State Karnataka |_ _ _ _ 1 2 - County Bangalore District |_ _ _ _ 1 3 - city Bangalore 2 1 - State Kerala 2 2 - County Waynad District 2 3 - city Waynad')
cdlMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 732, 0))
cdlMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 732, 1))
cdlMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 732, 2))
cdlMIBScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 1))
cdlKey = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlKey.setStatus('current')
if mibBuilder.loadTexts: cdlKey.setDescription('A proprietary key to validate the application requiring access to the rest of the objects in this MIB. A read operation on this object would return NULL string.')
cdlLocationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 2), )
if mibBuilder.loadTexts: cdlLocationTable.setStatus('current')
if mibBuilder.loadTexts: cdlLocationTable.setDescription('This table lists different LocationTargets and associated location attributes (such as country code). The information in this table MUST be stored in non-volatile-memory and persist over restart and reboot sequences.')
cdlLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 2, 1), ).setIndexNames((0, "CISCO-DEVICE-LOCATION-MIB", "cdlLocationIndex"))
if mibBuilder.loadTexts: cdlLocationEntry.setStatus('current')
if mibBuilder.loadTexts: cdlLocationEntry.setDescription('An entry describes the location attributes required to be configured for every LocationTarget in a device. An entry is created in this table when an interface is detected in this devices or an IP session is established. An entry is removed in this table when an interface is removed or an IP session is terminated.')
cdlLocationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cdlLocationIndex.setStatus('current')
if mibBuilder.loadTexts: cdlLocationIndex.setDescription('Identifies the unique index assigned to a given LocationTarget. A LocationTarget is defined by cdlLocationTargetType and cdlLocationTargetIdentifier.')
cdlLocationSubTypeCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 2, 1, 2), Bits().clone(namedValues=NamedValues(("noSubtypesConfigured", 0), ("geoLocation", 1), ("civic", 2), ("elin", 3), ("custom", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdlLocationSubTypeCapability.setReference('ANSI/TIA-1057, Section 10.2.4.2')
if mibBuilder.loadTexts: cdlLocationSubTypeCapability.setStatus('current')
if mibBuilder.loadTexts: cdlLocationSubTypeCapability.setDescription("This object specifies the location subtypes that can be supported by a given LocationTarget. Following is the list of subtypes: noSubtypesConfigured(0) 0x0 - No location types configured geoLocation(1) 0x1 - GeoSpatial location information civic(2) 0x2 - Civic address location information. When this sub type is set then cdlCivicAddrLocationTable could have zero or more rows created. elin(3) 0x4 - ELIN location information custom(4) 0x8 - Custom location information For Example: If both 'civic' and 'elin' are supported on a given LocationTarget then the value of this object would be 0x110.")
cdlLocationCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 2, 1, 3), CountryCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlLocationCountryCode.setStatus('current')
if mibBuilder.loadTexts: cdlLocationCountryCode.setDescription('Country code information applicable to a given LocationTarget')
cdlLocationTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interface", 1), ("ipv4Addr", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdlLocationTargetType.setStatus('current')
if mibBuilder.loadTexts: cdlLocationTargetType.setDescription('This object specifies the target type. The following are the possible values. interface(1) - The interface could be a physical interface or a virtual/logical interface. ipv4Addr(2) - An ipv4 address of a given session.')
cdlLocationTargetIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdlLocationTargetIdentifier.setStatus('current')
if mibBuilder.loadTexts: cdlLocationTargetIdentifier.setDescription("This object specifies a unique identifier for a given cdlLocationTargetType in a given device. If the cdlLocationTargetType is set to 'interface', then the identifier would be the ifIndex. If the cdlLocationTargetType is set to 'ipv4Addr', then the identifier would the IP address.")
cdlCivicAddrLocationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 3), )
if mibBuilder.loadTexts: cdlCivicAddrLocationTable.setStatus('current')
if mibBuilder.loadTexts: cdlCivicAddrLocationTable.setDescription('This table lists civic address information of end point devices. This table has a sparse dependant relationship with cdlLocationTable. The information in this table MUST be stored in non-volatile-memory and persist across restart, reboot and switch-over sequences.')
cdlCivicAddrLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 3, 1), ).setIndexNames((0, "CISCO-DEVICE-LOCATION-MIB", "cdlLocationIndex"), (0, "CISCO-DEVICE-LOCATION-MIB", "cdlCivicAddrLocationType"))
if mibBuilder.loadTexts: cdlCivicAddrLocationEntry.setReference('Section 3.4 of RFC4676.')
if mibBuilder.loadTexts: cdlCivicAddrLocationEntry.setStatus('current')
if mibBuilder.loadTexts: cdlCivicAddrLocationEntry.setDescription("An entry in this table specifies civic address location information. One or more entries could be created for every entry in cdlLocationEntry with cdlLocationSubTypeCapability set to 'civic' type. If an entry in cdlLocationEntry is deleted then all all corresponding entries would be deleted in this table.")
cdlCivicAddrLocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39))).clone(namedValues=NamedValues(("state", 1), ("county", 2), ("city", 3), ("cityDivision", 4), ("neighborhood", 5), ("streetGroup", 6), ("leadingStreetDirection", 16), ("trailingStreetDirection", 17), ("streetSuffix", 18), ("house", 19), ("streetNumber", 20), ("landmark", 21), ("additionalLoc", 22), ("name", 23), ("zipcode", 24), ("building", 25), ("unit", 26), ("floor", 27), ("room", 28), ("place", 29), ("postalCommunityName", 30), ("postOffiiceBox", 31), ("additionalCode", 32), ("seat", 33), ("primaryRoad", 34), ("roadSection", 35), ("roadBranch", 36), ("roadSubBranch", 37), ("streetNamePreMod", 38), ("streetNamePostMod", 39))))
if mibBuilder.loadTexts: cdlCivicAddrLocationType.setReference('RFC 4676, Section 3.4')
if mibBuilder.loadTexts: cdlCivicAddrLocationType.setStatus('current')
if mibBuilder.loadTexts: cdlCivicAddrLocationType.setDescription('This object specifies the location types that can be configured/unconfigured on a LocationTarget. The following are all the possible types and a brief explanation for the same. state(1) - National subdivision (state) county(2) - County city(3) - City cityDivision(4) - City division neighborhood(5) - Neighborhood streetGroup(6) - Group of streets leadingStreetDirection(16) - Leading street direction trailingStreetDirection(17) - Trailing street direction streetSuffix(18) - Street suffix house(19) - House number streetNumber(20) - House number suffix landmark(21) - Landmark additionalLoc(22) - Additional location - information name(23) - Name of the resident zipcode(24) - Postal/Zip Code building(25) - Building name unit(26) - Unit floor(27) - Floor number room(28) - Room number place(29) - Place type postalCommunityName(30) - Postal community name postOffiiceBox(31) - PO Box additionalCode(32) - Additional code information seat(33) - Seat number primaryRoad(34) - primary road or street name roadSection(35) - Road section name roadBranch(36) - Road branch name roadSubBranch(37) - Road sub-branch name streetNamePreMod(38) - Street pre modifier name streetNamePostMod(39) - Street post modifier name')
cdlCivicAddrLocationValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 3, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlCivicAddrLocationValue.setStatus('current')
if mibBuilder.loadTexts: cdlCivicAddrLocationValue.setDescription("This object specifies the civic address value for a given cdlCivicAddrLocationType. For Example: If cdlCivicAddrLocationType is of type 'building' then the string value representing this type would be the name of the building, like 'Building 23'.")
cdlCivicAddrLocationStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 3, 1, 3), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlCivicAddrLocationStorageType.setStatus('current')
if mibBuilder.loadTexts: cdlCivicAddrLocationStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cdlCivicAddrLocationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlCivicAddrLocationStatus.setStatus('current')
if mibBuilder.loadTexts: cdlCivicAddrLocationStatus.setDescription("This object will follow RowStatus Textual convention to create/destroy entries. The following columnar object is mandatory to make the entry 'active': cdlCivicAddrLocationValue")
cdlCustomLocationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 4), )
if mibBuilder.loadTexts: cdlCustomLocationTable.setStatus('current')
if mibBuilder.loadTexts: cdlCustomLocationTable.setDescription("This table lists 'Custom' address information of end point devices, giving 'name' and 'value' pairs. This table has a sparse dependent relationship with cdlLocationTable. The information in this table MUST be stored in non-volatile-memory and persist across restart, reboot and switch-over sequences.")
cdlCustomLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 4, 1), ).setIndexNames((0, "CISCO-DEVICE-LOCATION-MIB", "cdlLocationIndex"), (1, "CISCO-DEVICE-LOCATION-MIB", "cdlCustomLocationName"))
if mibBuilder.loadTexts: cdlCustomLocationEntry.setStatus('current')
if mibBuilder.loadTexts: cdlCustomLocationEntry.setDescription("An entry in this table specifies 'Custom' address location information consisting of 'Name' and associated 'Value' pairs. One or more entries could be created for every entry in cdlLocationEntry with cdlLocationSubTypeCapability set to 'custom' type. If an entry in cdlLocationEntry is deleted then all corresponding entries would be deleted in this table.")
cdlCustomLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cdlCustomLocationName.setStatus('current')
if mibBuilder.loadTexts: cdlCustomLocationName.setDescription("This object specifies the 'Custom' address 'Name' for a given cdlCustomLocationEntry. The character string may contain space characters. Examples would be 'Department', 'Class room', etc.")
cdlCustomLocationValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlCustomLocationValue.setStatus('current')
if mibBuilder.loadTexts: cdlCustomLocationValue.setDescription("This object specifies the 'Custom' address 'Value' for a given cdlCustomLocationEntry. For Example: If the cdlCustomLocationName were 'Department' then the 'Value' string may be 'Photography'.")
cdlCustomLocationStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 4, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlCustomLocationStorageType.setStatus('current')
if mibBuilder.loadTexts: cdlCustomLocationStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cdlCustomLocationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlCustomLocationStatus.setStatus('current')
if mibBuilder.loadTexts: cdlCustomLocationStatus.setDescription("This object will follow RowStatus Textual convention to create/destroy entries. The following columnar objects are mandatory to make the entry 'active': cdlCustomLocationValue cdlCustomLocationValue may be modified at any time (even while the row is active).")
cdlGeoLocationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5), )
if mibBuilder.loadTexts: cdlGeoLocationTable.setStatus('current')
if mibBuilder.loadTexts: cdlGeoLocationTable.setDescription('This table lists Geographic address information of end point devices. This table has a sparse dependent relationship with cdlLocationTable. The information in this table MUST be stored in non-volatile-memory and persist across restart, reboot and switch-over sequences.')
cdlGeoLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1), ).setIndexNames((0, "CISCO-DEVICE-LOCATION-MIB", "cdlLocationIndex"))
if mibBuilder.loadTexts: cdlGeoLocationEntry.setReference('Section 2.1 of RFC3825.')
if mibBuilder.loadTexts: cdlGeoLocationEntry.setStatus('current')
if mibBuilder.loadTexts: cdlGeoLocationEntry.setDescription("An entry in this table specifies Geographic location information. An entry in this table is appropriate for any LocationEntry which has the cdlLocationSubTypeCapability bit presenting the 'geo' type set. If an entry in cdlLocationEntry is deleted then the corresponding entry would be deleted in this table.")
cdlGeoLatitude = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoLatitude.setStatus('current')
if mibBuilder.loadTexts: cdlGeoLatitude.setDescription('This object specifies latitude of the end point device in degrees. An empty string means that latitude is not configured for this row.')
cdlGeoLatitudeResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoLatitudeResolution.setReference('Section 2.1 of RFC3825.')
if mibBuilder.loadTexts: cdlGeoLatitudeResolution.setStatus('current')
if mibBuilder.loadTexts: cdlGeoLatitudeResolution.setDescription('This object specifies latitude resolution of the end point device in meters. This allows for specification of latitude resolution separately from other dimensions. If this resolution is non-empty, then it has precedence over cdlGeoResolution as the resolution attributed to cdlGeoLatitude.')
cdlGeoLongitude = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoLongitude.setReference('Section 2.1 of RFC3825.')
if mibBuilder.loadTexts: cdlGeoLongitude.setStatus('current')
if mibBuilder.loadTexts: cdlGeoLongitude.setDescription('This object specifies longitude of the end point device in degrees. An empty string means that longitude is not configured for this row.')
cdlGeoLongitudeResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoLongitudeResolution.setReference('Section 2.1 of RFC3825.')
if mibBuilder.loadTexts: cdlGeoLongitudeResolution.setStatus('current')
if mibBuilder.loadTexts: cdlGeoLongitudeResolution.setDescription('This object specifies longitude resolution of the end point device in meters. This allows for specification of longitude resolution separately from other dimensions. If this resolution is non-empty, then it has precedence over cdlGeoResolution as the resolution attributed to cdlGeoLongitude.')
cdlGeoAltitude = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoAltitude.setReference('Section 2.1 of RFC3825.')
if mibBuilder.loadTexts: cdlGeoAltitude.setStatus('current')
if mibBuilder.loadTexts: cdlGeoAltitude.setDescription('This object specifies altitude of the end point device in units, as specified in cdlGeoAltitudeType. An empty string means that altitude is not configured for this row.')
cdlGeoAltitudeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("meters", 1), ("floors", 2))).clone('meters')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoAltitudeType.setReference('RFC 3825, Section 2.1')
if mibBuilder.loadTexts: cdlGeoAltitudeType.setStatus('current')
if mibBuilder.loadTexts: cdlGeoAltitudeType.setDescription("This object specifies the Geographic Location Altitude types which may be configured on a LocationTarget. The following are all the possible types as specified in the referenced RFC. meters(1) floors(2) Note that if the type is specified in 'feet' by other means of configuration for information denoted by this object, it will be reported in units of 'meters' here, in order to agree with the referenced RFC.")
cdlGeoAltitudeResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 7), SnmpAdminString().clone('10')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoAltitudeResolution.setReference('Section 2.1 of RFC3825.')
if mibBuilder.loadTexts: cdlGeoAltitudeResolution.setStatus('current')
if mibBuilder.loadTexts: cdlGeoAltitudeResolution.setDescription('This object specifies altitude resolution of the end point device in the same units as that which cdlGeoAltitudeType specifies. This allows for specification of altitude resolution separately from other dimensions. If this resolution is non-empty, then it has precedence over cdlGeoResolution as the resolution attributed to cdlGeoAltitude.')
cdlGeoResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 8), SnmpAdminString().clone('10')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoResolution.setReference('Section 2.1 of RFC3825.')
if mibBuilder.loadTexts: cdlGeoResolution.setStatus('current')
if mibBuilder.loadTexts: cdlGeoResolution.setDescription('This object specifies resolution of the end point device in meters. A resolution specified here will apply to latitude and longitude.')
cdlGeoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 9), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoStorageType.setStatus('current')
if mibBuilder.loadTexts: cdlGeoStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cdlGeoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 5, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdlGeoStatus.setStatus('current')
if mibBuilder.loadTexts: cdlGeoStatus.setDescription("This object will follow RowStatus Textual convention to create/destroy entries. The following columnar objects are mandatory to make the entry 'active': cdlGeoLatitude cdlGeoLongitude All columnar objects may be modified at any time (even while the row is active).")
cdlLocationPreferWeightTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 6), )
if mibBuilder.loadTexts: cdlLocationPreferWeightTable.setStatus('current')
if mibBuilder.loadTexts: cdlLocationPreferWeightTable.setDescription('This table lists the preference weights which are to be given to location information according the source of the information. Each possible source for location information has an assigned cdlLocationPreferWeightEntry with a unique cdlLocationPreferWeightType number. Each source has an entry in the table with an associated weight (cdlLocationPreferWeightValue). When information is retrieved for internal use, via SNMP, via CLI, etc., the information source associated with the lowest weight, and which contains the type of information requested, will be utilized.')
cdlLocationPreferWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 6, 1), ).setIndexNames((0, "CISCO-DEVICE-LOCATION-MIB", "cdlLocationPreferWeightType"))
if mibBuilder.loadTexts: cdlLocationPreferWeightEntry.setStatus('current')
if mibBuilder.loadTexts: cdlLocationPreferWeightEntry.setDescription("An entry in this table specifies the Weight which is assigned to a particular source of Location information. All weight 'Value' fields need not add to 100. Location source priorities are simply sorted according to the values entered, with a lower number indicating a 'better' priority.")
cdlLocationPreferWeightType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("static", 1), ("locp", 2), ("dhcp", 3), ("lldp", 4), ("cdp", 5))))
if mibBuilder.loadTexts: cdlLocationPreferWeightType.setStatus('current')
if mibBuilder.loadTexts: cdlLocationPreferWeightType.setDescription('This object specifies the Location source weight type. The following source types are represented: static(1) - Statically configured via CLI or SNMP locp(2) - Location Control Protocol dhcp(3) - Dynamic Host Configuration Protocol lldp(4) - Link Layer Discovery Protocol cdp(5) - Cisco Discovery Protocol')
cdlLocationPreferWeightValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 732, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdlLocationPreferWeightValue.setStatus('current')
if mibBuilder.loadTexts: cdlLocationPreferWeightValue.setDescription("This object specifies the Weight to assign to a particular source of Location information. All weight 'Value' fields need not add to 100. Location information from sources are used according to the priority weight values entered, with a lower number indicating a 'better' priority.")
cdlMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 1))
cdlMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 2))
cdlMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 1, 1)).setObjects(("CISCO-DEVICE-LOCATION-MIB", "cdlLocationGroup"), ("CISCO-DEVICE-LOCATION-MIB", "cdlCivicAddrLocationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdlMIBCompliance = cdlMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cdlMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-DEVICE-LOCATION-MIB.')
cdlMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 1, 2)).setObjects(("CISCO-DEVICE-LOCATION-MIB", "cdlLocationGroup"), ("CISCO-DEVICE-LOCATION-MIB", "cdlCivicAddrLocationGroup"), ("CISCO-DEVICE-LOCATION-MIB", "cdlCustomLocationGroup"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoLocationGroup"), ("CISCO-DEVICE-LOCATION-MIB", "cdlLocationPreferWeightGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdlMIBComplianceRev1 = cdlMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: cdlMIBComplianceRev1.setDescription('The compliance statement for entities which implement the CISCO-DEVICE-LOCATION-MIB.')
cdlLocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 2, 1)).setObjects(("CISCO-DEVICE-LOCATION-MIB", "cdlLocationSubTypeCapability"), ("CISCO-DEVICE-LOCATION-MIB", "cdlLocationCountryCode"), ("CISCO-DEVICE-LOCATION-MIB", "cdlLocationTargetType"), ("CISCO-DEVICE-LOCATION-MIB", "cdlLocationTargetIdentifier"), ("CISCO-DEVICE-LOCATION-MIB", "cdlKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdlLocationGroup = cdlLocationGroup.setStatus('current')
if mibBuilder.loadTexts: cdlLocationGroup.setDescription('A collection of location objects.')
cdlCivicAddrLocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 2, 2)).setObjects(("CISCO-DEVICE-LOCATION-MIB", "cdlCivicAddrLocationValue"), ("CISCO-DEVICE-LOCATION-MIB", "cdlCivicAddrLocationStatus"), ("CISCO-DEVICE-LOCATION-MIB", "cdlCivicAddrLocationStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdlCivicAddrLocationGroup = cdlCivicAddrLocationGroup.setStatus('current')
if mibBuilder.loadTexts: cdlCivicAddrLocationGroup.setDescription('A collection of civic address location objects.')
cdlCustomLocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 2, 3)).setObjects(("CISCO-DEVICE-LOCATION-MIB", "cdlCustomLocationValue"), ("CISCO-DEVICE-LOCATION-MIB", "cdlCustomLocationStatus"), ("CISCO-DEVICE-LOCATION-MIB", "cdlCustomLocationStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdlCustomLocationGroup = cdlCustomLocationGroup.setStatus('current')
if mibBuilder.loadTexts: cdlCustomLocationGroup.setDescription('A collection of Custom location information objects.')
cdlGeoLocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 2, 4)).setObjects(("CISCO-DEVICE-LOCATION-MIB", "cdlGeoLatitude"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoLatitudeResolution"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoLongitude"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoLongitudeResolution"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoAltitude"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoAltitudeType"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoAltitudeResolution"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoResolution"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoStatus"), ("CISCO-DEVICE-LOCATION-MIB", "cdlGeoStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdlGeoLocationGroup = cdlGeoLocationGroup.setStatus('current')
if mibBuilder.loadTexts: cdlGeoLocationGroup.setDescription('A collection of Geographic location information objects.')
cdlLocationPreferWeightGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 732, 2, 2, 5)).setObjects(("CISCO-DEVICE-LOCATION-MIB", "cdlLocationPreferWeightValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdlLocationPreferWeightGroup = cdlLocationPreferWeightGroup.setStatus('current')
if mibBuilder.loadTexts: cdlLocationPreferWeightGroup.setDescription('A collection of location source preference objects.')
mibBuilder.exportSymbols("CISCO-DEVICE-LOCATION-MIB", cdlCustomLocationName=cdlCustomLocationName, cdlGeoStatus=cdlGeoStatus, cdlCustomLocationTable=cdlCustomLocationTable, cdlLocationCountryCode=cdlLocationCountryCode, cdlCivicAddrLocationType=cdlCivicAddrLocationType, ciscoDeviceLocationMIB=ciscoDeviceLocationMIB, cdlGeoAltitudeType=cdlGeoAltitudeType, cdlCivicAddrLocationStorageType=cdlCivicAddrLocationStorageType, cdlLocationPreferWeightEntry=cdlLocationPreferWeightEntry, cdlLocationTable=cdlLocationTable, cdlMIBNotifications=cdlMIBNotifications, cdlGeoLocationGroup=cdlGeoLocationGroup, cdlGeoResolution=cdlGeoResolution, cdlKey=cdlKey, cdlGeoLocationTable=cdlGeoLocationTable, cdlMIBCompliances=cdlMIBCompliances, cdlGeoLongitudeResolution=cdlGeoLongitudeResolution, cdlLocationIndex=cdlLocationIndex, cdlMIBObjects=cdlMIBObjects, cdlLocationEntry=cdlLocationEntry, cdlGeoLocationEntry=cdlGeoLocationEntry, cdlCivicAddrLocationEntry=cdlCivicAddrLocationEntry, cdlGeoLatitude=cdlGeoLatitude, cdlGeoAltitude=cdlGeoAltitude, cdlMIBConform=cdlMIBConform, cdlCivicAddrLocationGroup=cdlCivicAddrLocationGroup, cdlCustomLocationGroup=cdlCustomLocationGroup, cdlLocationPreferWeightGroup=cdlLocationPreferWeightGroup, cdlCustomLocationEntry=cdlCustomLocationEntry, cdlCustomLocationValue=cdlCustomLocationValue, cdlLocationSubTypeCapability=cdlLocationSubTypeCapability, cdlCivicAddrLocationTable=cdlCivicAddrLocationTable, cdlCustomLocationStorageType=cdlCustomLocationStorageType, cdlLocationTargetIdentifier=cdlLocationTargetIdentifier, cdlLocationPreferWeightTable=cdlLocationPreferWeightTable, cdlMIBCompliance=cdlMIBCompliance, cdlGeoLatitudeResolution=cdlGeoLatitudeResolution, cdlMIBGroups=cdlMIBGroups, cdlLocationPreferWeightType=cdlLocationPreferWeightType, cdlCustomLocationStatus=cdlCustomLocationStatus, cdlGeoStorageType=cdlGeoStorageType, cdlLocationTargetType=cdlLocationTargetType, cdlMIBComplianceRev1=cdlMIBComplianceRev1, cdlGeoAltitudeResolution=cdlGeoAltitudeResolution, cdlMIBScalars=cdlMIBScalars, cdlGeoLongitude=cdlGeoLongitude, cdlCivicAddrLocationValue=cdlCivicAddrLocationValue, cdlLocationPreferWeightValue=cdlLocationPreferWeightValue, cdlLocationGroup=cdlLocationGroup, cdlCivicAddrLocationStatus=cdlCivicAddrLocationStatus, PYSNMP_MODULE_ID=ciscoDeviceLocationMIB)
