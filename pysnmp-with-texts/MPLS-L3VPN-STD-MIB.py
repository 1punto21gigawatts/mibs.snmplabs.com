#
# PySNMP MIB module MPLS-L3VPN-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MPLS-L3VPN-STD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:04:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
IANAipRouteProtocol, = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipRouteProtocol")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddress, InetAutonomousSystemNumber, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAutonomousSystemNumber", "InetAddressType", "InetAddressPrefixLength")
MplsIndexType, = mibBuilder.importSymbols("MPLS-LSR-STD-MIB", "MplsIndexType")
mplsStdMIB, = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "mplsStdMIB")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, NotificationType, ModuleIdentity, MibIdentifier, iso, Unsigned32, Counter64, IpAddress, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "NotificationType", "ModuleIdentity", "MibIdentifier", "iso", "Unsigned32", "Counter64", "IpAddress", "Counter32", "Integer32")
TimeStamp, DisplayString, TextualConvention, StorageType, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TextualConvention", "StorageType", "TruthValue", "RowStatus")
VPNIdOrZero, = mibBuilder.importSymbols("VPN-TC-STD-MIB", "VPNIdOrZero")
mplsL3VpnMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 166, 11))
mplsL3VpnMIB.setRevisions(('2006-01-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mplsL3VpnMIB.setRevisionsDescriptions(('Initial version. Published as RFC 4382.',))
if mibBuilder.loadTexts: mplsL3VpnMIB.setLastUpdated('200601230000Z')
if mibBuilder.loadTexts: mplsL3VpnMIB.setOrganization('IETF Layer-3 Virtual Private Networks Working Group.')
if mibBuilder.loadTexts: mplsL3VpnMIB.setContactInfo(' Thomas D. Nadeau tnadeau@cisco.com Harmen van der Linde havander@cisco.com Comments and discussion to l3vpn@ietf.org')
if mibBuilder.loadTexts: mplsL3VpnMIB.setDescription('This MIB contains managed object definitions for the Layer-3 Multiprotocol Label Switching Virtual Private Networks. Copyright (C) The Internet Society (2006). This version of this MIB module is part of RFC4382; see the RFC itself for full legal notices.')
class MplsL3VpnName(TextualConvention, OctetString):
    reference = "RFC 2685 Fox B., et al, 'Virtual Private Networks Identifier', September 1999."
    description = 'An identifier that is assigned to each MPLS/BGP VPN and is used to uniquely identify it. This is assigned by the system operator or NMS and SHOULD be unique throughout the MPLS domain. If this is the case, then this identifier can then be used at any LSR within a specific MPLS domain to identify this MPLS/BGP VPN. It may also be possible to preserve the uniqueness of this identifier across MPLS domain boundaries, in which case this identifier can then be used to uniquely identify MPLS/BGP VPNs on a more global basis. This object MAY be set to the VPN ID as defined in RFC 2685.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 31)

class MplsL3VpnRouteDistinguisher(TextualConvention, OctetString):
    reference = '[RFC4364]'
    description = 'Syntax for a route distinguisher and route target as defined in [RFC4364].'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

class MplsL3VpnRtType(TextualConvention, Integer32):
    reference = '[RFC4364]'
    description = 'Used to define the type of a route target usage. Route targets can be specified to be imported, exported, or both. For a complete definition of a route target, see [RFC4364].'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("import", 1), ("export", 2), ("both", 3))

mplsL3VpnNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 0))
mplsL3VpnObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 1))
mplsL3VpnScalars = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 1))
mplsL3VpnConf = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2))
mplsL3VpnPerf = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 3))
mplsL3VpnRoute = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4))
mplsL3VpnConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 2))
mplsL3VpnConfiguredVrfs = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnConfiguredVrfs.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnConfiguredVrfs.setDescription('The number of VRFs that are configured on this node.')
mplsL3VpnActiveVrfs = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnActiveVrfs.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnActiveVrfs.setDescription('The number of VRFs that are active on this node. That is, those VRFs whose corresponding mplsL3VpnVrfOperStatus object value is equal to operational (1).')
mplsL3VpnConnectedInterfaces = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnConnectedInterfaces.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnConnectedInterfaces.setDescription('Total number of interfaces connected to a VRF.')
mplsL3VpnNotificationEnable = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsL3VpnNotificationEnable.setReference('See also [RFC3413] for explanation that notifications are under the ultimate control of the MIB modules in this document.')
if mibBuilder.loadTexts: mplsL3VpnNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnNotificationEnable.setDescription("If this object is true, then it enables the generation of all notifications defined in this MIB. This object's value should be preserved across agent reboots.")
mplsL3VpnVrfConfMaxPossRts = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfConfMaxPossRts.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfConfMaxPossRts.setDescription('Denotes maximum number of routes that the device will allow all VRFs jointly to hold. If this value is set to 0, this indicates that the device is unable to determine the absolute maximum. In this case, the configured maximum MAY not actually be allowed by the device.')
mplsL3VpnVrfConfRteMxThrshTime = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfConfRteMxThrshTime.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfConfRteMxThrshTime.setDescription('Denotes the interval in seconds, at which the route max threshold notification may be reissued after the maximum value has been exceeded (or has been reached if mplsL3VpnVrfConfMaxRoutes and mplsL3VpnVrfConfHighRteThresh are equal) and the initial notification has been issued. This value is intended to prevent continuous generation of notifications by an agent in the event that routes are continually added to a VRF after it has reached its maximum value. If this value is set to 0, the agent should only issue a single notification at the time that the maximum threshold has been reached, and should not issue any more notifications until the value of routes has fallen below the configured threshold value. This is the recommended default behavior.')
mplsL3VpnIllLblRcvThrsh = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsL3VpnIllLblRcvThrsh.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnIllLblRcvThrsh.setDescription("The number of illegally received labels above which the mplsNumVrfSecIllglLblThrshExcd notification is issued. The persistence of this value mimics that of the device's configuration.")
mplsL3VpnIfConfTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 1), )
if mibBuilder.loadTexts: mplsL3VpnIfConfTable.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnIfConfTable.setDescription('This table specifies per-interface MPLS capability and associated information.')
mplsL3VpnIfConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 1, 1), ).setIndexNames((0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfName"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnIfConfIndex"))
if mibBuilder.loadTexts: mplsL3VpnIfConfEntry.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnIfConfEntry.setDescription('An entry in this table is created by an LSR for every interface capable of supporting MPLS L3VPN. Each entry in this table is meant to correspond to an entry in the Interfaces Table.')
mplsL3VpnIfConfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mplsL3VpnIfConfIndex.setReference('RFC2863')
if mibBuilder.loadTexts: mplsL3VpnIfConfIndex.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnIfConfIndex.setDescription('This is a unique index for an entry in the mplsL3VpnIfConfTable. A non-zero index for an entry indicates the ifIndex for the corresponding interface entry in the MPLS-VPN-layer in the ifTable. Note that this table does not necessarily correspond one-to-one with all entries in the Interface MIB having an ifType of MPLS-layer; rather, only those that are enabled for MPLS L3VPN functionality.')
mplsL3VpnIfVpnClassification = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("carrierOfCarrier", 1), ("enterprise", 2), ("interProvider", 3))).clone('enterprise')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnIfVpnClassification.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnIfVpnClassification.setDescription("Denotes whether this link participates in a carrier's carrier, enterprise, or inter-provider scenario.")
mplsL3VpnIfVpnRouteDistProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 1, 1, 3), Bits().clone(namedValues=NamedValues(("none", 0), ("bgp", 1), ("ospf", 2), ("rip", 3), ("isis", 4), ("static", 5), ("other", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnIfVpnRouteDistProtocol.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnIfVpnRouteDistProtocol.setDescription('Denotes the route distribution protocol across the PE-CE link. Note that more than one routing protocol may be enabled at the same time; thus, this object is specified as a bitmask. For example, static(5) and ospf(2) are a typical configuration.')
mplsL3VpnIfConfStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 1, 1, 4), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnIfConfStorageType.setReference('See RFC2579.')
if mibBuilder.loadTexts: mplsL3VpnIfConfStorageType.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnIfConfStorageType.setDescription("The storage type for this VPN If entry. Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row.")
mplsL3VpnIfConfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnIfConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnIfConfRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. Rows in this table signify that the specified interface is associated with this VRF. If the row creation operation succeeds, the interface will have been associated with the specified VRF, otherwise the agent MUST not allow the association. If the agent only allows read-only operations on this table, it MUST create entries in this table as they are created on the device. When a row in this table is in active(1) state, no objects in that row can be modified except mplsL3VpnIfConfStorageType and mplsL3VpnIfConfRowStatus.')
mplsL3VpnVrfTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2), )
if mibBuilder.loadTexts: mplsL3VpnVrfTable.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfTable.setDescription('This table specifies per-interface MPLS L3VPN VRF Table capability and associated information. Entries in this table define VRF routing instances associated with MPLS/VPN interfaces. Note that multiple interfaces can belong to the same VRF instance. The collection of all VRF instances comprises an actual VPN.')
mplsL3VpnVrfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1), ).setIndexNames((0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfName"))
if mibBuilder.loadTexts: mplsL3VpnVrfEntry.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfEntry.setDescription('An entry in this table is created by an LSR for every VRF capable of supporting MPLS L3VPN. The indexing provides an ordering of VRFs per-VPN interface.')
mplsL3VpnVrfName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 1), MplsL3VpnName())
if mibBuilder.loadTexts: mplsL3VpnVrfName.setReference('[RFC2685]')
if mibBuilder.loadTexts: mplsL3VpnVrfName.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfName.setDescription('The human-readable name of this VPN. This MAY be equivalent to the [RFC2685] VPN-ID, but may also vary. If it is set to the VPN ID, it MUST be equivalent to the value of mplsL3VpnVrfVpnId. It is strongly recommended that all sites supporting VRFs that are part of the same VPN use the same naming convention for VRFs as well as the same VPN ID.')
mplsL3VpnVrfVpnId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 2), VPNIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfVpnId.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfVpnId.setDescription('The VPN ID as specified in [RFC2685]. If a VPN ID has not been specified for this VRF, then this variable SHOULD be set to a zero-length OCTET STRING.')
mplsL3VpnVrfDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfDescription.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfDescription.setDescription('The human-readable description of this VRF.')
mplsL3VpnVrfRD = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 4), MplsL3VpnRouteDistinguisher()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRD.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRD.setDescription('The route distinguisher for this VRF.')
mplsL3VpnVrfCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfCreationTime.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfCreationTime.setDescription('The time at which this VRF entry was created.')
mplsL3VpnVrfOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfOperStatus.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfOperStatus.setDescription('Denotes whether or not a VRF is operational. A VRF is up(1) when there is at least one interface associated with the VRF whose ifOperStatus is up(1). A VRF is down(2) when: a. There does not exist at least one interface whose ifOperStatus is up(1). b. There are no interfaces associated with the VRF.')
mplsL3VpnVrfActiveInterfaces = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfActiveInterfaces.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfActiveInterfaces.setDescription('Total number of interfaces connected to this VRF with ifOperStatus = up(1). This value should increase when an interface is associated with the corresponding VRF and its corresponding ifOperStatus is equal to up(1). If an interface is associated whose ifOperStatus is not up(1), then the value is not incremented until such time as it transitions to this state. This value should be decremented when an interface is disassociated with a VRF or the corresponding ifOperStatus transitions out of the up(1) state to any other state. ')
mplsL3VpnVrfAssociatedInterfaces = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfAssociatedInterfaces.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfAssociatedInterfaces.setDescription('Total number of interfaces connected to this VRF (independent of ifOperStatus type).')
mplsL3VpnVrfConfMidRteThresh = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfConfMidRteThresh.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfConfMidRteThresh.setDescription('Denotes mid-level water marker for the number of routes that this VRF may hold.')
mplsL3VpnVrfConfHighRteThresh = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfConfHighRteThresh.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfConfHighRteThresh.setDescription('Denotes high-level water marker for the number of routes that this VRF may hold.')
mplsL3VpnVrfConfMaxRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfConfMaxRoutes.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfConfMaxRoutes.setDescription('Denotes maximum number of routes that this VRF is configured to hold. This value MUST be less than or equal to mplsL3VpnVrfConfMaxPossRts unless it is set to 0.')
mplsL3VpnVrfConfLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfConfLastChanged.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfConfLastChanged.setDescription('The value of sysUpTime at the time of the last change of this table entry, which includes changes of VRF parameters defined in this table or addition or deletion of interfaces associated with this VRF.')
mplsL3VpnVrfConfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfConfRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. When a row in this table is in active(1) state, no objects in that row can be modified except mplsL3VpnVrfConfAdminStatus, mplsL3VpnVrfConfRowStatus, and mplsL3VpnVrfConfStorageType.')
mplsL3VpnVrfConfAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfConfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfConfAdminStatus.setDescription('Indicates the desired operational status of this VRF.')
mplsL3VpnVrfConfStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 2, 1, 15), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfConfStorageType.setReference('See RFC2579.')
if mibBuilder.loadTexts: mplsL3VpnVrfConfStorageType.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfConfStorageType.setDescription("The storage type for this VPN VRF entry. Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row.")
mplsL3VpnVrfRTTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 3), )
if mibBuilder.loadTexts: mplsL3VpnVrfRTTable.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRTTable.setDescription('This table specifies per-VRF route target association. Each entry identifies a connectivity policy supported as part of a VPN.')
mplsL3VpnVrfRTEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 3, 1), ).setIndexNames((0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfName"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRTIndex"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRTType"))
if mibBuilder.loadTexts: mplsL3VpnVrfRTEntry.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRTEntry.setDescription('An entry in this table is created by an LSR for each route target configured for a VRF supporting a MPLS L3VPN instance. The indexing provides an ordering per-VRF instance. See [RFC4364] for a complete definition of a route target.')
mplsL3VpnVrfRTIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: mplsL3VpnVrfRTIndex.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRTIndex.setDescription('Auxiliary index for route targets configured for a particular VRF.')
mplsL3VpnVrfRTType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 3, 1, 3), MplsL3VpnRtType())
if mibBuilder.loadTexts: mplsL3VpnVrfRTType.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRTType.setDescription('The route target distribution type.')
mplsL3VpnVrfRT = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 3, 1, 4), MplsL3VpnRouteDistinguisher()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRT.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRT.setDescription('The route target distribution policy.')
mplsL3VpnVrfRTDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 3, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRTDescr.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRTDescr.setDescription('Description of the route target.')
mplsL3VpnVrfRTRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRTRowStatus.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRTRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. When a row in this table is in active(1) state, no objects in that row can be modified except mplsL3VpnVrfRTRowStatus.')
mplsL3VpnVrfRTStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 3, 1, 7), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRTStorageType.setReference('See RFC2579.')
if mibBuilder.loadTexts: mplsL3VpnVrfRTStorageType.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRTStorageType.setDescription("The storage type for this VPN route target (RT) entry. Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row.")
mplsL3VpnVrfSecTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 6), )
if mibBuilder.loadTexts: mplsL3VpnVrfSecTable.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfSecTable.setDescription('This table specifies per MPLS L3VPN VRF Table security-related counters.')
mplsL3VpnVrfSecEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 6, 1), )
mplsL3VpnVrfEntry.registerAugmentions(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfSecEntry"))
mplsL3VpnVrfSecEntry.setIndexNames(*mplsL3VpnVrfEntry.getIndexNames())
if mibBuilder.loadTexts: mplsL3VpnVrfSecEntry.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfSecEntry.setDescription('An entry in this table is created by an LSR for every VRF capable of supporting MPLS L3VPN. Each entry in this table is used to indicate security-related information for each VRF entry.')
mplsL3VpnVrfSecIllegalLblVltns = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfSecIllegalLblVltns.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfSecIllegalLblVltns.setDescription('Indicates the number of illegally received labels on this VPN/VRF. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mplsL3VpnVrfSecDiscontinuityTime.')
mplsL3VpnVrfSecDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 2, 6, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfSecDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfSecDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of this entry's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.")
mplsL3VpnVrfPerfTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 3, 1), )
if mibBuilder.loadTexts: mplsL3VpnVrfPerfTable.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfPerfTable.setDescription('This table specifies per MPLS L3VPN VRF Table performance information.')
mplsL3VpnVrfPerfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 3, 1, 1), )
mplsL3VpnVrfEntry.registerAugmentions(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfEntry"))
mplsL3VpnVrfPerfEntry.setIndexNames(*mplsL3VpnVrfEntry.getIndexNames())
if mibBuilder.loadTexts: mplsL3VpnVrfPerfEntry.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfPerfEntry.setDescription('An entry in this table is created by an LSR for every VRF capable of supporting MPLS L3VPN.')
mplsL3VpnVrfPerfRoutesAdded = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfPerfRoutesAdded.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfPerfRoutesAdded.setDescription('Indicates the number of routes added to this VPN/VRF since the last discontinuity. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mplsL3VpnVrfPerfDiscTime.')
mplsL3VpnVrfPerfRoutesDeleted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfPerfRoutesDeleted.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfPerfRoutesDeleted.setDescription('Indicates the number of routes removed from this VPN/VRF. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mplsL3VpnVrfPerfDiscTime.')
mplsL3VpnVrfPerfCurrNumRoutes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfPerfCurrNumRoutes.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfPerfCurrNumRoutes.setDescription('Indicates the number of routes currently used by this VRF.')
mplsL3VpnVrfPerfRoutesDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfPerfRoutesDropped.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfPerfRoutesDropped.setDescription('This counter should be incremented when the number of routes contained by the specified VRF exceeds or attempts to exceed the maximum allowed value as indicated by mplsL3VpnVrfMaxRouteThreshold. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of mplsL3VpnVrfPerfDiscTime.')
mplsL3VpnVrfPerfDiscTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 3, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfPerfDiscTime.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfPerfDiscTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of this entry's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.")
mplsL3VpnVrfRteTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1), )
if mibBuilder.loadTexts: mplsL3VpnVrfRteTable.setReference('[RFC2096]')
if mibBuilder.loadTexts: mplsL3VpnVrfRteTable.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteTable.setDescription('This table specifies per-interface MPLS L3VPN VRF Table routing information. Entries in this table define VRF routing entries associated with the specified MPLS/VPN interfaces. Note that this table contains both BGP and Interior Gateway Protocol IGP routes, as both may appear in the same VRF.')
mplsL3VpnVrfRteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1), ).setIndexNames((0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfName"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrDestType"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrDest"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrPfxLen"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrPolicy"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrNHopType"), (0, "MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrNextHop"))
if mibBuilder.loadTexts: mplsL3VpnVrfRteEntry.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteEntry.setDescription('An entry in this table is created by an LSR for every route present configured (either dynamically or statically) within the context of a specific VRF capable of supporting MPLS/BGP VPN. The indexing provides an ordering of VRFs per-VPN interface. Implementers need to be aware that there are quite a few index objects that together can exceed the size allowed for an Object Identifier (OID). So implementers must make sure that OIDs of column instances in this table will have no more than 128 sub-identifiers, otherwise they cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.')
mplsL3VpnVrfRteInetCidrDestType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrDestType.setReference('RFC4001')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrDestType.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrDestType.setDescription('The type of the mplsL3VpnVrfRteInetCidrDest address, as defined in the InetAddress MIB. Only those address types that may appear in an actual routing table are allowed as values of this object.')
mplsL3VpnVrfRteInetCidrDest = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrDest.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrDest.setDescription('The destination IP address of this route. The type of this address is determined by the value of the mplsL3VpnVrfRteInetCidrDestType object. The values for the index objects mplsL3VpnVrfRteInetCidrDest and mplsL3VpnVrfRteInetCidrPfxLen must be consistent. When the value of mplsL3VpnVrfRteInetCidrDest is x, then the bitwise logical-AND of x with the value of the mask formed from the corresponding index object mplsL3VpnVrfRteInetCidrPfxLen MUST be equal to x. If not, then the index pair is not consistent and an inconsistentName error must be returned on SET or CREATE requests.')
mplsL3VpnVrfRteInetCidrPfxLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrPfxLen.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrPfxLen.setDescription('Indicates the number of leading one bits that form the mask to be logical-ANDed with the destination address before being compared to the value in the mplsL3VpnVrfRteInetCidrDest field. The values for the index objects mplsL3VpnVrfRteInetCidrDest and mplsL3VpnVrfRteInetCidrPfxLen must be consistent. When the value of mplsL3VpnVrfRteInetCidrDest is x, then the bitwise logical-AND of x with the value of the mask formed from the corresponding index object mplsL3VpnVrfRteInetCidrPfxLen MUST be equal to x. If not, then the index pair is not consistent and an inconsistentName error must be returned on SET or CREATE requests.')
mplsL3VpnVrfRteInetCidrPolicy = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 4), ObjectIdentifier())
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrPolicy.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrPolicy.setDescription('This object is an opaque object without any defined semantics. Its purpose is to serve as an additional index that may delineate between multiple entries to the same destination. The value { 0 0 } shall be used as the default value for this object.')
mplsL3VpnVrfRteInetCidrNHopType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 5), InetAddressType())
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrNHopType.setReference('RFC4001')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrNHopType.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrNHopType.setDescription('The type of the mplsL3VpnVrfRteInetCidrNextHop address, as defined in the InetAddress MIB. Value should be set to unknown(0) for non-remote routes. Only those address types that may appear in an actual routing table are allowed as values of this object.')
mplsL3VpnVrfRteInetCidrNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 6), InetAddress())
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrNextHop.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrNextHop.setDescription('On remote routes, the address of the next system en route. For non-remote routes, a zero-length string. The type of this address is determined by the value of the mplsL3VpnVrfRteInetCidrNHopType object.')
mplsL3VpnVrfRteInetCidrIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrIfIndex.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrIfIndex.setDescription('The ifIndex value that identifies the local interface through which the next hop of this route should be reached. A value of 0 is valid and represents the scenario where no interface is specified.')
mplsL3VpnVrfRteInetCidrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4), ("blackhole", 5))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrType.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrType.setDescription('The type of route. Note that local(3) refers to a route for which the next hop is the final destination; remote(4) refers to a route for which the next hop is not the final destination. Routes that do not result in traffic forwarding or rejection should not be displayed even if the implementation keeps them stored internally. reject(2) refers to a route that, if matched, discards the message as unreachable and returns a notification (e.g., ICMP error) to the message sender. This is used in some protocols as a means of correctly aggregating routes. blackhole(5) refers to a route that, if matched, discards the message silently.')
mplsL3VpnVrfRteInetCidrProto = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 9), IANAipRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrProto.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrProto.setDescription('The routing mechanism via which this route was learned. Inclusion of values for gateway routing protocols is not intended to imply that hosts should support those protocols.')
mplsL3VpnVrfRteInetCidrAge = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrAge.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrAge.setDescription("The number of seconds since this route was last updated or otherwise determined to be correct. Note that no semantics of 'too old' can be implied except through knowledge of the routing protocol by which the route was learned.")
mplsL3VpnVrfRteInetCidrNextHopAS = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 11), InetAutonomousSystemNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrNextHopAS.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrNextHopAS.setDescription("The Autonomous System Number of the next hop. The semantics of this object are determined by the routing protocol specified in the route's mplsL3VpnVrfRteInetCidrProto value. When this object is unknown or not relevant, its value should be set to zero.")
mplsL3VpnVrfRteInetCidrMetric1 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrMetric1.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrMetric1.setDescription("The primary routing metric for this route. The semantics of this metric are determined by the routing protocol specified in the route's mplsL3VpnVrfRteInetCidrProto value. If this metric is not used, its value should be set to -1.")
mplsL3VpnVrfRteInetCidrMetric2 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrMetric2.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrMetric2.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing protocol specified in the route's mplsL3VpnVrfRteInetCidrProto value. If this metric is not used, its value should be set to -1.")
mplsL3VpnVrfRteInetCidrMetric3 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrMetric3.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrMetric3.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing protocol specified in the route's mplsL3VpnVrfRteInetCidrProto value. If this metric is not used, its value should be set to -1.")
mplsL3VpnVrfRteInetCidrMetric4 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrMetric4.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrMetric4.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing protocol specified in the route's mplsL3VpnVrfRteInetCidrProto value. If this metric is not used, its value should be set to -1.")
mplsL3VpnVrfRteInetCidrMetric5 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrMetric5.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrMetric5.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing protocol specified in the route's mplsL3VpnVrfRteInetCidrProto value. If this metric is not used, its value should be set to -1.")
mplsL3VpnVrfRteXCPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 17), MplsIndexType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteXCPointer.setReference('RFC 3813 - Multiprotocol Label Switching (MPLS) Label Switching Router (LSR) Management Information base (MIB), C. Srinivasan, A. Vishwanathan, and T. Nadeau, June 2004')
if mibBuilder.loadTexts: mplsL3VpnVrfRteXCPointer.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteXCPointer.setDescription('Index into mplsXCTable that identifies which cross- connect entry is associated with this VRF route entry by containing the mplsXCIndex of that cross-connect entry. The string containing the single-octet 0x00 indicates that a label stack is not associated with this route entry. This can be the case because the label bindings have not yet been established, or because some change in the agent has removed them. When the label stack associated with this VRF route is created, it MUST establish the associated cross-connect entry in the mplsXCTable and then set that index to the value of this object. Changes to the cross-connect object in the mplsXCTable MUST automatically be reflected in the value of this object. If this object represents a static routing entry, then the manager must ensure that this entry is maintained consistently in the corresponding mplsXCTable as well.')
mplsL3VpnVrfRteInetCidrStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 11, 1, 4, 1, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrStatus.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteInetCidrStatus.setDescription('The row status variable, used according to row installation and removal conventions. A row entry cannot be modified when the status is marked as active(1).')
mplsL3VpnVrfUp = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 11, 0, 1)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnIfConfRowStatus"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfOperStatus"))
if mibBuilder.loadTexts: mplsL3VpnVrfUp.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfUp.setDescription('This notification is generated when: a. No interface is associated with this VRF, and the first (and only first) interface associated with it has its ifOperStatus change to up(1). b. One interface is associated with this VRF, and the ifOperStatus of this interface changes to up(1). c. Multiple interfaces are associated with this VRF, and the ifOperStatus of all interfaces is down(2), and the first of those interfaces has its ifOperStatus change to up(1).')
mplsL3VpnVrfDown = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 11, 0, 2)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnIfConfRowStatus"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfOperStatus"))
if mibBuilder.loadTexts: mplsL3VpnVrfDown.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfDown.setDescription('This notification is generated when: a. One interface is associated with this VRF, and the ifOperStatus of this interface changes from up(1) to down(2). b. Multiple interfaces are associated with this VRF, and the ifOperStatus of all except one of these interfaces is equal to up(1), and the ifOperStatus of that interface changes from up(1) to down(2). c. The last interface with ifOperStatus equal to up(1) is disassociated from a VRF.')
mplsL3VpnVrfRouteMidThreshExceeded = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 11, 0, 3)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfCurrNumRoutes"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfMidRteThresh"))
if mibBuilder.loadTexts: mplsL3VpnVrfRouteMidThreshExceeded.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRouteMidThreshExceeded.setDescription('This notification is generated when the number of routes contained by the specified VRF exceeds the value indicated by mplsL3VpnVrfMidRouteThreshold. A single notification MUST be generated when this threshold is exceeded, and no other notifications of this type should be issued until the value of mplsL3VpnVrfPerfCurrNumRoutes has fallen below that of mplsL3VpnVrfConfMidRteThresh.')
mplsL3VpnVrfNumVrfRouteMaxThreshExceeded = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 11, 0, 4)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfCurrNumRoutes"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfHighRteThresh"))
if mibBuilder.loadTexts: mplsL3VpnVrfNumVrfRouteMaxThreshExceeded.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfNumVrfRouteMaxThreshExceeded.setDescription('This notification is generated when the number of routes contained by the specified VRF exceeds or attempts to exceed the maximum allowed value as indicated by mplsL3VpnVrfMaxRouteThreshold. In cases where mplsL3VpnVrfConfHighRteThresh is set to the same value as mplsL3VpnVrfConfMaxRoutes, mplsL3VpnVrfConfHighRteThresh need not be exceeded; rather, just reached for this notification to be issued. Note that mplsL3VpnVrfConfRteMxThrshTime denotes the interval at which the this notification will be reissued after the maximum value has been exceeded (or reached if mplsL3VpnVrfConfMaxRoutes and mplsL3VpnVrfConfHighRteThresh are equal) and the initial notification has been issued. This value is intended to prevent continuous generation of notifications by an agent in the event that routes are continually added to a VRF after it has reached its maximum value. The default value is 0 minutes. If this value is set to 0, the agent should only issue a single notification at the time that the maximum threshold has been reached, and should not issue any more notifications until the value of routes has fallen below the configured threshold value.')
mplsL3VpnNumVrfSecIllglLblThrshExcd = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 11, 0, 5)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfSecIllegalLblVltns"))
if mibBuilder.loadTexts: mplsL3VpnNumVrfSecIllglLblThrshExcd.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnNumVrfSecIllglLblThrshExcd.setDescription('This notification is generated when the number of illegal label violations on a VRF as indicated by mplsL3VpnVrfSecIllegalLblVltns has exceeded mplsL3VpnIllLblRcvThrsh. The threshold is not included in the varbind here because the value of mplsL3VpnVrfSecIllegalLblVltns should be one greater than the threshold at the time this notification is issued.')
mplsL3VpnNumVrfRouteMaxThreshCleared = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 11, 0, 6)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfCurrNumRoutes"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfHighRteThresh"))
if mibBuilder.loadTexts: mplsL3VpnNumVrfRouteMaxThreshCleared.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnNumVrfRouteMaxThreshCleared.setDescription('This notification is generated only after the number of routes contained by the specified VRF exceeds or attempts to exceed the maximum allowed value as indicated by mplsVrfMaxRouteThreshold, and then falls below this value. The emission of this notification informs the operator that the error condition has been cleared without the operator having to query the device. Note that mplsL3VpnVrfConfRteMxThrshTime denotes the interval at which the mplsNumVrfRouteMaxThreshExceeded notification will be reissued after the maximum value has been exceeded (or reached if mplsL3VpnVrfConfMaxRoutes and mplsL3VpnVrfConfHighRteThresh are equal) and the initial notification has been issued. Therefore, the generation of this notification should also be emitted with this same frequency (assuming that the error condition is cleared). Specifically, if the error condition is reached and cleared several times during the period of time specified in mplsL3VpnVrfConfRteMxThrshTime, only a single notification will be issued to indicate the first instance of the error condition as well as the first time the error condition is cleared. This behavior is intended to prevent continuous generation of notifications by an agent in the event that routes are continually added and removed to/from a VRF after it has reached its maximum value. The default value is 0. If this value is set to 0, the agent should issue a notification whenever the maximum threshold has been cleared.')
mplsL3VpnGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1))
mplsL3VpnCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 2))
mplsL3VpnModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 2, 1)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnScalarGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnIfGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnPerfGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRTGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnSecGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnNotificationGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnPerfRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnModuleFullCompliance = mplsL3VpnModuleFullCompliance.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnModuleFullCompliance.setDescription('Compliance statement for agents that provide full support for the MPLS-L3VPN-STD-MIB')
mplsL3VpnModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 2, 2)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnScalarGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnIfGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnPerfGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRTGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnSecGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnNotificationGroup"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnPerfRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnModuleReadOnlyCompliance = mplsL3VpnModuleReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnModuleReadOnlyCompliance.setDescription('Compliance requirement for implementations that only provide read-only support for MPLS-L3VPN-STD-MIB. Such devices can then be monitored but cannot be configured using this MIB module.')
mplsL3VpnScalarGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 1)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnConfiguredVrfs"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnActiveVrfs"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnConnectedInterfaces"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnNotificationEnable"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfMaxPossRts"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfRteMxThrshTime"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnIllLblRcvThrsh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnScalarGroup = mplsL3VpnScalarGroup.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnScalarGroup.setDescription('Collection of scalar objects required for MPLS VPN management.')
mplsL3VpnVrfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 2)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfVpnId"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfDescription"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRD"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfCreationTime"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfOperStatus"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfActiveInterfaces"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfAssociatedInterfaces"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfMidRteThresh"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfHighRteThresh"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfMaxRoutes"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfLastChanged"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfRowStatus"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfAdminStatus"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfConfStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnVrfGroup = mplsL3VpnVrfGroup.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfGroup.setDescription('Collection of objects needed for MPLS VPN VRF management.')
mplsL3VpnIfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 3)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnIfVpnClassification"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnIfVpnRouteDistProtocol"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnIfConfStorageType"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnIfConfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnIfGroup = mplsL3VpnIfGroup.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnIfGroup.setDescription('Collection of objects needed for MPLS VPN interface management.')
mplsL3VpnPerfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 4)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfRoutesAdded"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfRoutesDeleted"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfCurrNumRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnPerfGroup = mplsL3VpnPerfGroup.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnPerfGroup.setDescription('Collection of objects needed for MPLS VPN performance information.')
mplsL3VpnPerfRouteGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 5)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfRoutesDropped"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfPerfDiscTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnPerfRouteGroup = mplsL3VpnPerfRouteGroup.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnPerfRouteGroup.setDescription('Collection of objects needed to track MPLS VPN routing table dropped routes.')
mplsL3VpnSecGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 7)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfSecIllegalLblVltns"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfSecDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnSecGroup = mplsL3VpnSecGroup.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnSecGroup.setDescription('Collection of objects needed for MPLS VPN security-related information.')
mplsL3VpnVrfRteGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 8)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrIfIndex"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrType"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrProto"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrAge"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrNextHopAS"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrMetric1"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrMetric2"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrMetric3"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrMetric4"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrMetric5"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteXCPointer"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRteInetCidrStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnVrfRteGroup = mplsL3VpnVrfRteGroup.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRteGroup.setDescription('Objects required for VRF route table management.')
mplsL3VpnVrfRTGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 9)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRTDescr"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRT"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRTRowStatus"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRTStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnVrfRTGroup = mplsL3VpnVrfRTGroup.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnVrfRTGroup.setDescription('Objects required for VRF route target management.')
mplsL3VpnNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 166, 11, 2, 1, 10)).setObjects(("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfUp"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfDown"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfRouteMidThreshExceeded"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnVrfNumVrfRouteMaxThreshExceeded"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnNumVrfSecIllglLblThrshExcd"), ("MPLS-L3VPN-STD-MIB", "mplsL3VpnNumVrfRouteMaxThreshCleared"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsL3VpnNotificationGroup = mplsL3VpnNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: mplsL3VpnNotificationGroup.setDescription('Objects required for MPLS VPN notifications.')
mibBuilder.exportSymbols("MPLS-L3VPN-STD-MIB", mplsL3VpnVrfRTEntry=mplsL3VpnVrfRTEntry, mplsL3VpnVrfOperStatus=mplsL3VpnVrfOperStatus, mplsL3VpnVrfRTGroup=mplsL3VpnVrfRTGroup, mplsL3VpnConformance=mplsL3VpnConformance, mplsL3VpnIllLblRcvThrsh=mplsL3VpnIllLblRcvThrsh, mplsL3VpnVrfDescription=mplsL3VpnVrfDescription, mplsL3VpnVrfConfMaxRoutes=mplsL3VpnVrfConfMaxRoutes, mplsL3VpnSecGroup=mplsL3VpnSecGroup, MplsL3VpnName=MplsL3VpnName, mplsL3VpnVrfActiveInterfaces=mplsL3VpnVrfActiveInterfaces, mplsL3VpnIfConfEntry=mplsL3VpnIfConfEntry, mplsL3VpnVrfRteInetCidrMetric1=mplsL3VpnVrfRteInetCidrMetric1, mplsL3VpnModuleReadOnlyCompliance=mplsL3VpnModuleReadOnlyCompliance, mplsL3VpnVrfSecEntry=mplsL3VpnVrfSecEntry, mplsL3VpnObjects=mplsL3VpnObjects, mplsL3VpnVrfRteInetCidrMetric4=mplsL3VpnVrfRteInetCidrMetric4, mplsL3VpnScalarGroup=mplsL3VpnScalarGroup, mplsL3VpnVrfRteInetCidrMetric2=mplsL3VpnVrfRteInetCidrMetric2, mplsL3VpnModuleFullCompliance=mplsL3VpnModuleFullCompliance, mplsL3VpnVrfRteInetCidrPfxLen=mplsL3VpnVrfRteInetCidrPfxLen, mplsL3VpnVrfUp=mplsL3VpnVrfUp, mplsL3VpnNotifications=mplsL3VpnNotifications, mplsL3VpnPerfRouteGroup=mplsL3VpnPerfRouteGroup, mplsL3VpnVrfSecDiscontinuityTime=mplsL3VpnVrfSecDiscontinuityTime, mplsL3VpnVrfNumVrfRouteMaxThreshExceeded=mplsL3VpnVrfNumVrfRouteMaxThreshExceeded, mplsL3VpnNotificationEnable=mplsL3VpnNotificationEnable, mplsL3VpnIfConfTable=mplsL3VpnIfConfTable, mplsL3VpnNumVrfRouteMaxThreshCleared=mplsL3VpnNumVrfRouteMaxThreshCleared, mplsL3VpnVrfConfStorageType=mplsL3VpnVrfConfStorageType, mplsL3VpnVrfRTIndex=mplsL3VpnVrfRTIndex, mplsL3VpnVrfRteEntry=mplsL3VpnVrfRteEntry, mplsL3VpnVrfPerfTable=mplsL3VpnVrfPerfTable, mplsL3VpnVrfVpnId=mplsL3VpnVrfVpnId, mplsL3VpnVrfRteInetCidrStatus=mplsL3VpnVrfRteInetCidrStatus, mplsL3VpnVrfRteInetCidrNextHop=mplsL3VpnVrfRteInetCidrNextHop, mplsL3VpnConfiguredVrfs=mplsL3VpnConfiguredVrfs, mplsL3VpnVrfConfMidRteThresh=mplsL3VpnVrfConfMidRteThresh, mplsL3VpnConnectedInterfaces=mplsL3VpnConnectedInterfaces, mplsL3VpnVrfRteInetCidrIfIndex=mplsL3VpnVrfRteInetCidrIfIndex, mplsL3VpnVrfRteInetCidrMetric5=mplsL3VpnVrfRteInetCidrMetric5, mplsL3VpnVrfRTRowStatus=mplsL3VpnVrfRTRowStatus, mplsL3VpnVrfRteGroup=mplsL3VpnVrfRteGroup, mplsL3VpnVrfRteInetCidrDest=mplsL3VpnVrfRteInetCidrDest, PYSNMP_MODULE_ID=mplsL3VpnMIB, mplsL3VpnVrfConfRteMxThrshTime=mplsL3VpnVrfConfRteMxThrshTime, mplsL3VpnConf=mplsL3VpnConf, mplsL3VpnGroups=mplsL3VpnGroups, mplsL3VpnVrfConfAdminStatus=mplsL3VpnVrfConfAdminStatus, mplsL3VpnCompliances=mplsL3VpnCompliances, mplsL3VpnNumVrfSecIllglLblThrshExcd=mplsL3VpnNumVrfSecIllglLblThrshExcd, mplsL3VpnIfConfIndex=mplsL3VpnIfConfIndex, mplsL3VpnVrfRteInetCidrType=mplsL3VpnVrfRteInetCidrType, mplsL3VpnVrfRTDescr=mplsL3VpnVrfRTDescr, mplsL3VpnVrfRTTable=mplsL3VpnVrfRTTable, mplsL3VpnVrfConfRowStatus=mplsL3VpnVrfConfRowStatus, mplsL3VpnVrfName=mplsL3VpnVrfName, mplsL3VpnVrfPerfCurrNumRoutes=mplsL3VpnVrfPerfCurrNumRoutes, mplsL3VpnVrfDown=mplsL3VpnVrfDown, mplsL3VpnVrfGroup=mplsL3VpnVrfGroup, mplsL3VpnVrfCreationTime=mplsL3VpnVrfCreationTime, mplsL3VpnPerf=mplsL3VpnPerf, mplsL3VpnVrfEntry=mplsL3VpnVrfEntry, mplsL3VpnIfGroup=mplsL3VpnIfGroup, mplsL3VpnIfVpnClassification=mplsL3VpnIfVpnClassification, mplsL3VpnVrfPerfDiscTime=mplsL3VpnVrfPerfDiscTime, MplsL3VpnRouteDistinguisher=MplsL3VpnRouteDistinguisher, mplsL3VpnVrfRteInetCidrProto=mplsL3VpnVrfRteInetCidrProto, mplsL3VpnVrfRteInetCidrAge=mplsL3VpnVrfRteInetCidrAge, mplsL3VpnVrfPerfRoutesDeleted=mplsL3VpnVrfPerfRoutesDeleted, mplsL3VpnMIB=mplsL3VpnMIB, mplsL3VpnVrfRteXCPointer=mplsL3VpnVrfRteXCPointer, mplsL3VpnVrfSecTable=mplsL3VpnVrfSecTable, MplsL3VpnRtType=MplsL3VpnRtType, mplsL3VpnVrfPerfRoutesAdded=mplsL3VpnVrfPerfRoutesAdded, mplsL3VpnVrfRteInetCidrNHopType=mplsL3VpnVrfRteInetCidrNHopType, mplsL3VpnVrfRTType=mplsL3VpnVrfRTType, mplsL3VpnVrfRteInetCidrDestType=mplsL3VpnVrfRteInetCidrDestType, mplsL3VpnIfConfRowStatus=mplsL3VpnIfConfRowStatus, mplsL3VpnVrfAssociatedInterfaces=mplsL3VpnVrfAssociatedInterfaces, mplsL3VpnPerfGroup=mplsL3VpnPerfGroup, mplsL3VpnNotificationGroup=mplsL3VpnNotificationGroup, mplsL3VpnVrfConfHighRteThresh=mplsL3VpnVrfConfHighRteThresh, mplsL3VpnIfConfStorageType=mplsL3VpnIfConfStorageType, mplsL3VpnVrfRouteMidThreshExceeded=mplsL3VpnVrfRouteMidThreshExceeded, mplsL3VpnVrfPerfEntry=mplsL3VpnVrfPerfEntry, mplsL3VpnVrfRteInetCidrMetric3=mplsL3VpnVrfRteInetCidrMetric3, mplsL3VpnVrfPerfRoutesDropped=mplsL3VpnVrfPerfRoutesDropped, mplsL3VpnVrfConfLastChanged=mplsL3VpnVrfConfLastChanged, mplsL3VpnVrfSecIllegalLblVltns=mplsL3VpnVrfSecIllegalLblVltns, mplsL3VpnScalars=mplsL3VpnScalars, mplsL3VpnVrfTable=mplsL3VpnVrfTable, mplsL3VpnVrfRD=mplsL3VpnVrfRD, mplsL3VpnVrfRteTable=mplsL3VpnVrfRteTable, mplsL3VpnIfVpnRouteDistProtocol=mplsL3VpnIfVpnRouteDistProtocol, mplsL3VpnVrfRteInetCidrPolicy=mplsL3VpnVrfRteInetCidrPolicy, mplsL3VpnRoute=mplsL3VpnRoute, mplsL3VpnActiveVrfs=mplsL3VpnActiveVrfs, mplsL3VpnVrfRTStorageType=mplsL3VpnVrfRTStorageType, mplsL3VpnVrfConfMaxPossRts=mplsL3VpnVrfConfMaxPossRts, mplsL3VpnVrfRteInetCidrNextHopAS=mplsL3VpnVrfRteInetCidrNextHopAS, mplsL3VpnVrfRT=mplsL3VpnVrfRT)
