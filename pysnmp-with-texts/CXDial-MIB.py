#
# PySNMP MIB module CXDial-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXDial-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
cxDial, Alias = mibBuilder.importSymbols("CXProduct-SMI", "cxDial", "Alias")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, TimeTicks, Bits, Gauge32, Counter32, IpAddress, iso, Integer32, ObjectIdentity, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Bits", "Gauge32", "Counter32", "IpAddress", "iso", "Integer32", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cxDialTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1), )
if mibBuilder.loadTexts: cxDialTable.setStatus('mandatory')
if mibBuilder.loadTexts: cxDialTable.setDescription('Table containing configuration information about dial functionality. This table acts as a focal point to configure the dial capability. Each protocol providing dial incorporates an object which point to one row of this table.')
cxDialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1), ).setIndexNames((0, "CXDial-MIB", "cxDialEntryIndex"))
if mibBuilder.loadTexts: cxDialEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cxDialEntry.setDescription('This row holds all the parameters related to the dial functionality.')
cxDialEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxDialEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cxDialEntryIndex.setDescription('Local table index. Used to manage this table and by application implementing dial functions.')
cxDialPhysicalType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtr", 1), ("isdn", 2))).clone('dtr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialPhysicalType.setStatus('mandatory')
if mibBuilder.loadTexts: cxDialPhysicalType.setDescription('Determines how the dial function is physically supported. Options: dtr (1): Data Terminal Ready isdn (2): ISDN Default Value: dtr (1) Configuration Changed: administrative ')
cxDialFunctionType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onDemand", 1), ("onCongestion", 2))).clone('onDemand')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialFunctionType.setStatus('mandatory')
if mibBuilder.loadTexts: cxDialFunctionType.setDescription('Determines when the dial function is used. Options: onDemand (1): used on demand onCongestion (2): not currently used Default Value: onDemand (1) Configuration Changed: administrative')
cxDialRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cxDialRowStatus.setDescription('Determines whether this dial function is to be removed from service (i.e. invalidated) within the Dial software layer. Options: invalid (1): row is flagged; after next reset values will be disabled and row will be deleted from table valid (2): values are enabled Default Value: valid (2) Configuration Changed: administrative ')
cxDialInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialInactivityTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cxDialInactivityTimer.setDescription('Determines the time in seconds that can pass before a SAP providing dial access drops its connection due to inactivity. Range of Values: 0 - 65,535 Default Value: 20 Configuration Changed: administrative ')
cxDialBackupPollingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialBackupPollingTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cxDialBackupPollingTimer.setDescription('Determines the interval in seconds that the Frame Relay software layer will wait before polling and terminating connections of dial backup ports when primary route partners related to these ports have become active. Range of Values: 0 - 65,535 Default Value: 0 Configuration Changed: administrative ')
cxDialDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialDelayTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cxDialDelayTimer.setDescription('Determines the number of seconds that the Frame Relay software layer waits before requesting the lower layer to bring up the dialup line. Range of Values: 0 - 65,535 Default Value: 0 Configuration Changed: operative ')
cxDialIsdnBcmUSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 15), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialIsdnBcmUSapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: cxDialIsdnBcmUSapAlias.setDescription("Determines the textual name uniquely identifying this upper SAP. This object is meaningful only if 'cxDialPhysicalType' is set to 'isdn'. Range of Values: 0-16 alphanumeric characters beginning with a letter Default Value: none Configuration Changed: administrative ")
cxDialIsdnBcmNbrOfBChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 16), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialIsdnBcmNbrOfBChannels.setStatus('mandatory')
if mibBuilder.loadTexts: cxDialIsdnBcmNbrOfBChannels.setDescription("Determines the number of ISDN B channels that have dial funtionality. This object is meaningful only if 'cxDialPhysicalType' is set to 'isdn'. Range of Values: 1-2 (locked at 1) Default Value: 1 Configuration Changed: administrative ")
cxDialIsdnBcmDirectoryId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 1, 1, 17), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxDialIsdnBcmDirectoryId.setStatus('mandatory')
if mibBuilder.loadTexts: cxDialIsdnBcmDirectoryId.setDescription("Determines the ISDN access point having dial funtionality. This object is meaningful only if 'cxDialPhysicalType' is set to 'isdn'. Range of Values: 1-40 Default Value: 1 Configuration Changed: administrative ")
cxDialMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 46, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxDialMibLevel.setStatus('mandatory')
if mibBuilder.loadTexts: cxDialMibLevel.setDescription('Used to determine current MIB module release supported by the agent. Object is in decimal.')
mibBuilder.exportSymbols("CXDial-MIB", cxDialEntryIndex=cxDialEntryIndex, cxDialFunctionType=cxDialFunctionType, cxDialMibLevel=cxDialMibLevel, cxDialPhysicalType=cxDialPhysicalType, cxDialIsdnBcmDirectoryId=cxDialIsdnBcmDirectoryId, cxDialDelayTimer=cxDialDelayTimer, cxDialIsdnBcmNbrOfBChannels=cxDialIsdnBcmNbrOfBChannels, cxDialBackupPollingTimer=cxDialBackupPollingTimer, cxDialIsdnBcmUSapAlias=cxDialIsdnBcmUSapAlias, cxDialEntry=cxDialEntry, cxDialInactivityTimer=cxDialInactivityTimer, cxDialTable=cxDialTable, cxDialRowStatus=cxDialRowStatus)
