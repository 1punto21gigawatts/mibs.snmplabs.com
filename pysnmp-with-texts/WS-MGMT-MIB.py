#
# PySNMP MIB module WS-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WS-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, Counter32, MibIdentifier, Gauge32, Bits, IpAddress, NotificationType, iso, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "MibIdentifier", "Gauge32", "Bits", "IpAddress", "NotificationType", "iso", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "Integer32")
TruthValue, DateAndTime, PhysAddress, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DateAndTime", "PhysAddress", "DisplayString", "RowStatus", "TextualConvention")
wsMgmt, = mibBuilder.importSymbols("WS-SMI", "wsMgmt")
DoActionNow, = mibBuilder.importSymbols("WS-TYPE-MIB", "DoActionNow")
wsMgmtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 388, 14, 4, 1))
wsMgmtMib.setRevisions(('2007-01-26 15:15', '2006-11-03 14:30', '2006-10-06 14:51', '2006-09-07 16:09', '2006-09-05 16:59', '2006-08-19 17:10', '2006-06-23 17:30', '2006-06-06 10:35', '2006-01-06 10:51', '2005-12-29 18:44', '2005-12-12 13:47', '2005-12-05 00:06', '2005-11-14 16:57', '2005-10-21 16:30', '2005-10-20 14:00', '2005-09-27 13:27', '2005-09-23 16:21', '2005-09-22 17:54', '2005-09-22 16:25', '2005-09-22 14:50', '2005-09-21 10:59', '2005-09-20 17:25', '2005-09-20 11:44', '2005-09-19 19:01', '2005-09-14 22:11', '2005-08-25 11:41', '2005-08-18 11:02', '2005-08-16 17:20', '2005-08-12 14:14', '2005-08-12 13:56', '2005-07-07 16:12',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wsMgmtMib.setRevisionsDescriptions(('01a32', '01a31', '01a30', '01a29', '01a28', '01a27', '01a26', '01a25', '01a24', '01a23', '01a22', '01a21', '01a20', '01a19', '01a18', '01a16', '01a15', '01a14', '01a13', '01a12', '01a11', '01a10', '01a09', '01a08', '01a07', '01a06', '01a05', '01a04', '01a03', '01a02', '01a01',))
if mibBuilder.loadTexts: wsMgmtMib.setLastUpdated('200701261515Z')
if mibBuilder.loadTexts: wsMgmtMib.setOrganization('Symbol Technologies')
if mibBuilder.loadTexts: wsMgmtMib.setContactInfo('Symbol Technologies, Inc. Customer Service Postal: One Symbol Plaza Holtsville, NY 11742-1300 USA Tel: +1. 631.738.6213 E-mail: support@symbol.com Web: http://www.symbol.com/support')
if mibBuilder.loadTexts: wsMgmtMib.setDescription('Description.')
class AbbrRowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(4, 6))
    namedValues = NamedValues(("createAndGo", 4), ("destroy", 6))

class DoActionShowProgress(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("doActionRightNow", 1), ("idleState", 2))

class Password(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class StaticRowEnable(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

wsMgmtReset = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 1))
wsMgmtSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("reset", 1), ("shutDown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtSystemReset.setStatus('current')
if mibBuilder.loadTexts: wsMgmtSystemReset.setDescription('Description.')
wsMgmtSystemFactoryDefaultCfg = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 1, 2), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtSystemFactoryDefaultCfg.setStatus('current')
if mibBuilder.loadTexts: wsMgmtSystemFactoryDefaultCfg.setDescription('Description.')
wsMgmtSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 2))
wsMgmtSnmpV2Switch = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtSnmpV2Switch.setStatus('current')
if mibBuilder.loadTexts: wsMgmtSnmpV2Switch.setDescription('Description.')
wsMgmtSnmpV3Switch = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 2, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtSnmpV3Switch.setStatus('current')
if mibBuilder.loadTexts: wsMgmtSnmpV3Switch.setDescription('Description.')
wsMgmtHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 3))
wsMgmtHttpEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtHttpEnable.setStatus('current')
if mibBuilder.loadTexts: wsMgmtHttpEnable.setDescription('Description.')
wsMgmtHttpsEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtHttpsEnable.setStatus('current')
if mibBuilder.loadTexts: wsMgmtHttpsEnable.setDescription('Description.')
wsMgmtHttpTrustpoint = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtHttpTrustpoint.setStatus('current')
if mibBuilder.loadTexts: wsMgmtHttpTrustpoint.setDescription('Name of certificate used to secure the https session. If defined, the length must be between 2 and 64 characters. If null, no certificate is defined.')
wsMgmtAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4))
wsMgmtAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 1), )
if mibBuilder.loadTexts: wsMgmtAlarmTable.setStatus('current')
if mibBuilder.loadTexts: wsMgmtAlarmTable.setDescription('Description.')
wsMgmtAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 1, 1), ).setIndexNames((0, "WS-MGMT-MIB", "wsMgmtAlarmIndex"))
if mibBuilder.loadTexts: wsMgmtAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: wsMgmtAlarmEntry.setDescription('Description.')
wsMgmtAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: wsMgmtAlarmIndex.setDescription('Simple index.')
wsMgmtAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 0), ("major", 1), ("warning", 2), ("informational", 3), ("normal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: wsMgmtAlarmSeverity.setDescription('Alarm severity.')
wsMgmtAlarmTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtAlarmTypeID.setStatus('current')
if mibBuilder.loadTexts: wsMgmtAlarmTypeID.setDescription('Alarm Type ID.')
wsMgmtAlarmTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtAlarmTypeName.setStatus('current')
if mibBuilder.loadTexts: wsMgmtAlarmTypeName.setDescription('Alarm name.')
wsMgmtAlarmTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtAlarmTimestamp.setStatus('current')
if mibBuilder.loadTexts: wsMgmtAlarmTimestamp.setDescription('Alarm timestamp.')
wsMgmtAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtAlarmMessage.setStatus('current')
if mibBuilder.loadTexts: wsMgmtAlarmMessage.setDescription('Detailed description of the alarm .')
wsMgmtModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtModuleName.setStatus('current')
if mibBuilder.loadTexts: wsMgmtModuleName.setDescription('Name of the module which raised this alarm.')
wsMgmtAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("acknowledged", 1), ("unacknowledged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: wsMgmtAlarmStatus.setDescription('Status of this Alarm.')
wsMgmtAlarmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("clear", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtAlarmRowStatus.setStatus('current')
if mibBuilder.loadTexts: wsMgmtAlarmRowStatus.setDescription('Setting this column permanently deletes the row from Alarm Log.')
wsMgmtClearAllAlarms = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 2), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtClearAllAlarms.setStatus('current')
if mibBuilder.loadTexts: wsMgmtClearAllAlarms.setDescription('Deletes all the rows from Alarm Table.')
wsMgmtAcknowledgeAllAlarms = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 3), DoActionNow()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtAcknowledgeAllAlarms.setStatus('current')
if mibBuilder.loadTexts: wsMgmtAcknowledgeAllAlarms.setDescription('Acknowledges all the alarms.')
wsMgmtNewAlarmsCount = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtNewAlarmsCount.setStatus('current')
if mibBuilder.loadTexts: wsMgmtNewAlarmsCount.setDescription('Number of new/unacknowledged currently active alarms.')
wsMgmtTotalAlarmsCount = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtTotalAlarmsCount.setStatus('current')
if mibBuilder.loadTexts: wsMgmtTotalAlarmsCount.setDescription('Total number of currently active alarms.')
wsMgmtTotalAlarmsCountSinceBoot = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtTotalAlarmsCountSinceBoot.setStatus('current')
if mibBuilder.loadTexts: wsMgmtTotalAlarmsCountSinceBoot.setDescription('Total number of alarms that have been generated since system boot. This number could be different from wsMgmtTotalAlarmsCount, in cases where alarms get deleted from alarm log either manually or during alarm-log rollover.')
wsMgmtAlarmsIndexLow = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtAlarmsIndexLow.setStatus('current')
if mibBuilder.loadTexts: wsMgmtAlarmsIndexLow.setDescription('The index of the oldest currently active alarm in the alarm log.')
wsMgmtAlarmsIndexHigh = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtAlarmsIndexHigh.setStatus('current')
if mibBuilder.loadTexts: wsMgmtAlarmsIndexHigh.setDescription('The index of the newest currently active alarm in the alarm log.')
wsMgmCriticalAlarmsCount = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmCriticalAlarmsCount.setStatus('current')
if mibBuilder.loadTexts: wsMgmCriticalAlarmsCount.setDescription('Total number of currently active alarms of critical severity.')
wsMgmMajorAlarmsCount = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmMajorAlarmsCount.setStatus('current')
if mibBuilder.loadTexts: wsMgmMajorAlarmsCount.setDescription('Total number of currently active alarms of major severity.')
wsMgmWarningAlarmsCount = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmWarningAlarmsCount.setStatus('current')
if mibBuilder.loadTexts: wsMgmWarningAlarmsCount.setDescription('Total number of currently active alarms of warning severity.')
wsMgmInfoAlarmsCount = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmInfoAlarmsCount.setStatus('current')
if mibBuilder.loadTexts: wsMgmInfoAlarmsCount.setDescription('Total number of currently active alarms of informational severity.')
wsMgmNormalAlarmsCount = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmNormalAlarmsCount.setStatus('current')
if mibBuilder.loadTexts: wsMgmNormalAlarmsCount.setDescription('Total number of currently active alarms of normal severity.')
wsMgmUnacknowledgedCriticalAlarmsCount = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmUnacknowledgedCriticalAlarmsCount.setStatus('current')
if mibBuilder.loadTexts: wsMgmUnacknowledgedCriticalAlarmsCount.setDescription("Total number of current unacknowledged alarms with severity 'critical'.")
wsMgmUnacknowledgedMajorAlarmsCount = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmUnacknowledgedMajorAlarmsCount.setStatus('current')
if mibBuilder.loadTexts: wsMgmUnacknowledgedMajorAlarmsCount.setDescription("Total number of current unacknowledged alarms with severity 'major'.")
wsMgmUnacknowledgedWarningAlarmsCount = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmUnacknowledgedWarningAlarmsCount.setStatus('current')
if mibBuilder.loadTexts: wsMgmUnacknowledgedWarningAlarmsCount.setDescription("Total number of current unacknowledged alarms with severity 'warning'.")
wsMgmUnacknowledgedInfoAlarmsCount = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmUnacknowledgedInfoAlarmsCount.setStatus('current')
if mibBuilder.loadTexts: wsMgmUnacknowledgedInfoAlarmsCount.setDescription("Total number of current unacknowledged alarms with severity 'informational'.")
wsMgmUnacknowledgedNormalAlarmsCount = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmUnacknowledgedNormalAlarmsCount.setStatus('current')
if mibBuilder.loadTexts: wsMgmUnacknowledgedNormalAlarmsCount.setDescription("Total number of current unacknowledged alarms with severity 'normal'.")
wsMgmUnacknowledgedCriticalAlarmsCountSinceBoot = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmUnacknowledgedCriticalAlarmsCountSinceBoot.setStatus('current')
if mibBuilder.loadTexts: wsMgmUnacknowledgedCriticalAlarmsCountSinceBoot.setDescription("Total number of unacknowledged alarms with severity 'critical' that have been generated since system boot. This number could be different from the current number of unacknowledged alarms with severity 'critical' in cases where alarms get deleted from alarm log either manually or during alarm-log rollover.")
wsMgmUnacknowledgedMajorAlarmsCountSinceBoot = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmUnacknowledgedMajorAlarmsCountSinceBoot.setStatus('current')
if mibBuilder.loadTexts: wsMgmUnacknowledgedMajorAlarmsCountSinceBoot.setDescription("Total number of unacknowledged alarms with severity 'major' that have been generated since system boot. This number could be different from the current number of unacknowledged alarms with severity 'major in cases where alarms get deleted from alarm log either manually or during alarm-log rollover.")
wsMgmUnacknowledgedWarningAlarmsCountSinceBoot = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmUnacknowledgedWarningAlarmsCountSinceBoot.setStatus('current')
if mibBuilder.loadTexts: wsMgmUnacknowledgedWarningAlarmsCountSinceBoot.setDescription("Total number of unacknowledged alarms with severity 'warning' that have been generated since system boot. This number could be different from the current number of unacknowledged alarms with severity 'warning' in cases where alarms get deleted from alarm log either manually or during alarm-log rollover.")
wsMgmUnacknowledgedInfoAlarmsCountSinceBoot = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmUnacknowledgedInfoAlarmsCountSinceBoot.setStatus('current')
if mibBuilder.loadTexts: wsMgmUnacknowledgedInfoAlarmsCountSinceBoot.setDescription("Total number of unacknowledged alarms with severity 'informational' that have been generated since system boot. This number could be different from the current number of unacknowledged alarms with severity 'informational' in cases where alarms get deleted from alarm log either manually or during alarm-log rollover.")
wsMgmUnacknowledgedNormalAlarmsCountSinceBoot = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 4, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmUnacknowledgedNormalAlarmsCountSinceBoot.setStatus('current')
if mibBuilder.loadTexts: wsMgmUnacknowledgedNormalAlarmsCountSinceBoot.setDescription("Total number of unacknowledged alarms with severity 'normal' that have been generated since system boot. This number could be different from the current number of unacknowledged alarms with severity 'normal' in cases where alarms get deleted from alarm log either manually or during alarm-log rollover.")
wsMgmtCert = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5))
wsMgmtCertCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 2))
wsMgmtCertCurrentCountry = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertCurrentCountry.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertCurrentCountry.setDescription('Description.')
wsMgmtCertCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertCurrentState.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertCurrentState.setDescription('Description.')
wsMgmtCertCurrentCity = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertCurrentCity.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertCurrentCity.setDescription('Description.')
wsMgmtCertCurrentOrg = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertCurrentOrg.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertCurrentOrg.setDescription('Description.')
wsMgmtCertCurrentOrgUnit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertCurrentOrgUnit.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertCurrentOrgUnit.setDescription('Description.')
wsMgmtCertCurrentCommonName = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertCurrentCommonName.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertCurrentCommonName.setDescription('Description.')
wsMgmtCertCurrentIssuer = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertCurrentIssuer.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertCurrentIssuer.setDescription('Description.')
wsMgmtCertCurrentValidStart = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertCurrentValidStart.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertCurrentValidStart.setDescription('Description.')
wsMgmtCertCurrentValidEnd = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertCurrentValidEnd.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertCurrentValidEnd.setDescription('Description.')
wsMgmtCertCurrentTrustPoint = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertCurrentTrustPoint.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertCurrentTrustPoint.setDescription('trust point of the current cert, will always get local in rel1.0')
wsMgmtCertCreate = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3))
wsMgmtCertFileName = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtCertFileName.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertFileName.setDescription('Description.')
wsMgmtCertAction = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("query", 1), ("remove", 2), ("install", 3), ("createSelf", 4), ("createReq", 5), ("idle", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtCertAction.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertAction.setDescription('Description.')
wsMgmtCertStatus = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertStatus.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertStatus.setDescription('Description.')
wsMgmtCertCountry = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtCertCountry.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertCountry.setDescription('Description.')
wsMgmtCertState = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtCertState.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertState.setDescription('Description.')
wsMgmtCertCity = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtCertCity.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertCity.setDescription('Description.')
wsMgmtCertOrg = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtCertOrg.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertOrg.setDescription('Description.')
wsMgmtCertOrgUnit = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtCertOrgUnit.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertOrgUnit.setDescription('Description.')
wsMgmtCertCommonName = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtCertCommonName.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertCommonName.setDescription('Description.')
wsMgmtCertIssuer = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtCertIssuer.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertIssuer.setDescription('Description.')
wsMgmtCertEmail = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtCertEmail.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertEmail.setDescription('Description.')
wsMgmtCertPwd = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtCertPwd.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertPwd.setDescription('Description.')
wsMgmtCertCompany = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtCertCompany.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertCompany.setDescription('Description.')
wsMgmtCertValidStart = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertValidStart.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertValidStart.setDescription('Description.')
wsMgmtCertValidEnd = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertValidEnd.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertValidEnd.setDescription('Description.')
wsMgmtCertTrustPoint = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 3, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtCertTrustPoint.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtCertTrustPoint.setDescription('trust point of the cert, will only accept local in rel 1.0')
wsMgmtCertViewTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4), )
if mibBuilder.loadTexts: wsMgmtCertViewTable.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewTable.setDescription('Shows a list of all enrolled certificates.')
wsMgmtCertViewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1), ).setIndexNames((0, "WS-MGMT-MIB", "wsMgmtCertViewTrustpoint"), (0, "WS-MGMT-MIB", "wsMgmtCertViewType"))
if mibBuilder.loadTexts: wsMgmtCertViewEntry.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewEntry.setDescription('Description.')
wsMgmtCertViewTrustpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewTrustpoint.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewTrustpoint.setDescription('Name of the trustpoint')
wsMgmtCertViewType = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8))).clone(namedValues=NamedValues(("serverCert", 4), ("caCert", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewType.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewType.setDescription('Type of certificate: CA certificate or server certificate.')
wsMgmtCertViewSubjectCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewSubjectCommonName.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewSubjectCommonName.setDescription('Contains 6 fields corresponding to Common Name, Organizational unit, Organization, Location, State and Country')
wsMgmtCertViewSubjectOrgUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewSubjectOrgUnit.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewSubjectOrgUnit.setDescription('Description.')
wsMgmtCertViewSubjectOrg = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewSubjectOrg.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewSubjectOrg.setDescription('Description.')
wsMgmtCertViewSubjectCity = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewSubjectCity.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewSubjectCity.setDescription('Description.')
wsMgmtCertViewSubjectState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewSubjectState.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewSubjectState.setDescription('Description.')
wsMgmtCertViewSubjectCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewSubjectCountry.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewSubjectCountry.setDescription('Description.')
wsMgmtCertViewSubjectEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewSubjectEmail.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewSubjectEmail.setDescription('Description.')
wsMgmtCertViewIssuerCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewIssuerCommonName.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewIssuerCommonName.setDescription('Name of authority who issues the certficate')
wsMgmtCertViewIssuerOrgUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewIssuerOrgUnit.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewIssuerOrgUnit.setDescription('Description.')
wsMgmtCertViewIssuerOrg = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewIssuerOrg.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewIssuerOrg.setDescription('Description.')
wsMgmtCertViewIssuerCity = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewIssuerCity.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewIssuerCity.setDescription('Description.')
wsMgmtCertViewIssuerState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewIssuerState.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewIssuerState.setDescription('Description.')
wsMgmtCertViewIssuerCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewIssuerCountry.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewIssuerCountry.setDescription('Description.')
wsMgmtCertViewIssuerEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewIssuerEmail.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewIssuerEmail.setDescription('Description.')
wsMgmtCertViewValidStart = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewValidStart.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewValidStart.setDescription('Date on which the certificate starts to be valid')
wsMgmtCertViewValidEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 4, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertViewValidEnd.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertViewValidEnd.setDescription('Date of expiry of the certificate')
wsMgmtCertConfigTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 5), )
if mibBuilder.loadTexts: wsMgmtCertConfigTable.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertConfigTable.setDescription('Table in which trustpoints can be configured')
wsMgmtCertConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 5, 1), ).setIndexNames((0, "WS-MGMT-MIB", "wsMgmtCertConfigTrustpoint"))
if mibBuilder.loadTexts: wsMgmtCertConfigEntry.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertConfigEntry.setDescription('Description.')
wsMgmtCertConfigTrustpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertConfigTrustpoint.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertConfigTrustpoint.setDescription('Name of the trustpoint')
wsMgmtCertConfigKey = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertConfigKey.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertConfigKey.setDescription('Label of the RSA keypair associated with the certificate.')
wsMgmtCertConfigCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertConfigCommonName.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertConfigCommonName.setDescription('Common name of the trustpoint specified in the Subject Alternative Name extension of the certificate request /selfsigned certificate')
wsMgmtCertConfigOrgUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertConfigOrgUnit.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertConfigOrgUnit.setDescription('Organizational unit to which the certificate belongs specified in the Subject Alternative Name extension of the certificate request/selfsigned certificate')
wsMgmtCertConfigOrg = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertConfigOrg.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertConfigOrg.setDescription('Organizational to which the certificate belongs specified in the Subject Alternative Name extension of the certificate request /selfsigned certificate')
wsMgmtCertConfigCompany = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertConfigCompany.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertConfigCompany.setDescription('Company to which the certificate is issued to specified in the Subject Alternative Name extension of the certificate request /selfsigned certificate')
wsMgmtCertConfigCity = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertConfigCity.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertConfigCity.setDescription('City of the company to which the certificate is issued to specified in the Subject Alternative Name extension of the certificate request / selfsigned certificate.')
wsMgmtCertConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertConfigState.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertConfigState.setDescription('State of the company to which the certificate is issued to specified in the Subject Alternative Name extension of the certificate request / selfsigned certificate.')
wsMgmtCertConfigCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertConfigCountry.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertConfigCountry.setDescription('Country of the company to which the certificate is issued to specified in the Subject Alternative Name extension of the certificate request / selfsigned certificate.')
wsMgmtCertConfigFqdn = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertConfigFqdn.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertConfigFqdn.setDescription('Fully qualified domain name of the certificate specified in the Subject Alternative Name extension of the certificate request /selfsigned certificate')
wsMgmtCertConfigIP = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 5, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertConfigIP.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertConfigIP.setDescription('IP address specified in the Subject Alternative Name extension of the certificate request /selfsigned certificate')
wsMgmtCertConfigEmail = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertConfigEmail.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertConfigEmail.setDescription('Email address specified in the Subject Alternative Name extension of the certificate request /selfsigned certificate')
wsMgmtCertConfigPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 5, 1, 13), Password().subtype(subtypeSpec=ValueSizeConstraint(4, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertConfigPassword.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertConfigPassword.setDescription('Password specified in the Subject Alternative Name extension of the certificate request /selfsigned certificate')
wsMgmtCertConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 5, 1, 14), AbbrRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertConfigRowStatus.setDescription('Create/delete')
wsMgmtCertCreateTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 6), )
if mibBuilder.loadTexts: wsMgmtCertCreateTable.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertCreateTable.setDescription('Table to enroll/delete certs/requests')
wsMgmtCertCreateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 6, 1), ).setIndexNames((0, "WS-MGMT-MIB", "wsMgmtCertConfigTrustpoint"))
if mibBuilder.loadTexts: wsMgmtCertCreateEntry.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertCreateEntry.setDescription('Description.')
wsMgmtCertCreateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("enrolled", 2), ("notEnrolled", 3))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertCreateStatus.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertCreateStatus.setDescription('Indicates status of enrollment.')
wsMgmtCertCreateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enrollSelfSigned", 1), ("enrollReq", 2), ("delServerCert", 3), ("delCACert", 4), ("idle", 5))).clone('idle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtCertCreateAction.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertCreateAction.setDescription('Action for enrollment/deletion of cert/request')
wsMgmtCertKeyTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 7), )
if mibBuilder.loadTexts: wsMgmtCertKeyTable.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertKeyTable.setDescription('Table to create RSA keypairs')
wsMgmtCertKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 7, 1), ).setIndexNames((0, "WS-MGMT-MIB", "wsMgmtCertKeyLabel"))
if mibBuilder.loadTexts: wsMgmtCertKeyEntry.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertKeyEntry.setDescription('Description.')
wsMgmtCertKeyLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertKeyLabel.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertKeyLabel.setDescription('Label of the RSA key pair')
wsMgmtCertKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 32), ValueRangeConstraint(1024, 2048), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertKeySize.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertKeySize.setDescription('Size of the keypair. This variable is only used for creating the key. Once a key is created, this variable does not have any significance.')
wsMgmtCertKeyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 7, 1, 3), AbbrRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtCertKeyRowStatus.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertKeyRowStatus.setDescription('Description.')
wsMgmtCertNumTrustPoint = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtCertNumTrustPoint.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCertNumTrustPoint.setDescription('Description.')
wsMgmtNwDiscovery = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7))
wsMgmtNetworkDiscoveryTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 2), )
if mibBuilder.loadTexts: wsMgmtNetworkDiscoveryTable.setStatus('current')
if mibBuilder.loadTexts: wsMgmtNetworkDiscoveryTable.setDescription('Description.')
wsMgmtNetworkDiscoveryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 2, 1), ).setIndexNames((0, "WS-MGMT-MIB", "wsMgmtDiscoveredDeviceIpAddr"))
if mibBuilder.loadTexts: wsMgmtNetworkDiscoveryEntry.setStatus('current')
if mibBuilder.loadTexts: wsMgmtNetworkDiscoveryEntry.setDescription('Description.')
wsMgmtDiscoveredDeviceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 2, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceIpAddr.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceIpAddr.setDescription('Description.')
wsMgmtDiscoveredDeviceHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceHwVersion.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceHwVersion.setDescription('Description.')
wsMgmtDiscoveredDeviceSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceSwVersion.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceSwVersion.setDescription('Description.')
wsMgmtDiscoveredDeviceClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceClusterId.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceClusterId.setDescription('Description.')
wsMgmtDiscoveredDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 2, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceName.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceName.setDescription('Description.')
wsMgmtDiscoveredDeviceLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 2, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceLocation.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceLocation.setDescription('Description.')
wsMgmtDiscoveredDeviceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 2, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceDescr.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceDescr.setDescription('Description.')
wsMgmtDiscoveredDeviceDiscoveryProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceDiscoveryProfileName.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceDiscoveryProfileName.setDescription('Description.')
wsMgmtDiscoveredDeviceDiscoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 2, 1, 9), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceDiscoveryTime.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveredDeviceDiscoveryTime.setDescription('Description.')
wsMgmtDiscoveredNetworkDevicesTableRow = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wsMgmtDiscoveredNetworkDevicesTableRow.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveredNetworkDevicesTableRow.setDescription('Description.')
wsMgmtNetworkDiscoveryProfilesTable = MibTable((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 1), )
if mibBuilder.loadTexts: wsMgmtNetworkDiscoveryProfilesTable.setStatus('current')
if mibBuilder.loadTexts: wsMgmtNetworkDiscoveryProfilesTable.setDescription('Description.')
wsMgmtNetworkDiscoveryProfilesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 1, 1), ).setIndexNames((0, "WS-MGMT-MIB", "wsMgmtDiscoveryProfileIndex"))
if mibBuilder.loadTexts: wsMgmtNetworkDiscoveryProfilesEntry.setStatus('current')
if mibBuilder.loadTexts: wsMgmtNetworkDiscoveryProfilesEntry.setDescription('Description.')
wsMgmtDiscoveryProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtDiscoveryProfileIndex.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveryProfileIndex.setDescription('Description.')
wsMgmtDiscoveryProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtDiscoveryProfileName.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveryProfileName.setDescription('Description.')
wsMgmtDiscoveryStartIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtDiscoveryStartIPAddr.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveryStartIPAddr.setDescription('Description.')
wsMgmtDiscoveryEndIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtDiscoveryEndIPAddr.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveryEndIPAddr.setDescription('Description.')
wsMgmtDiscoverySnmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmpV1V2c", 1), ("snmpV3", 2), ("snmpV1V2candsnmpV3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtDiscoverySnmpVersion.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoverySnmpVersion.setDescription('Description.')
wsMgmtDiscoveryLastDoneTime = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtDiscoveryLastDoneTime.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveryLastDoneTime.setDescription('Description.')
wsMgmtDiscoveryLastDoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("neverDone", 1), ("successful", 2), ("abandoned", 3), ("failed", 4))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtDiscoveryLastDoneStatus.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveryLastDoneStatus.setDescription('Description.')
wsMgmtDiscoveryProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 7, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtDiscoveryProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: wsMgmtDiscoveryProfileRowStatus.setDescription('Description.')
wsMgmtKey = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 8))
wsMgmtGenKey = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 8, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMgmtGenKey.setStatus('current')
if mibBuilder.loadTexts: wsMgmtGenKey.setDescription('gen key for mgmt')
wsMgmtSsh = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 11))
wsMgmtSshEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 11, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtSshEnable.setStatus('current')
if mibBuilder.loadTexts: wsMgmtSshEnable.setDescription('Description.')
wsMgmtSshPort = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtSshPort.setStatus('current')
if mibBuilder.loadTexts: wsMgmtSshPort.setDescription('Description.')
wsMgmtSshKeyPairName = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 11, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtSshKeyPairName.setStatus('current')
if mibBuilder.loadTexts: wsMgmtSshKeyPairName.setDescription('Description.')
wsMgmtTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 13))
wsMgmtTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 13, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtTelnetEnable.setStatus('current')
if mibBuilder.loadTexts: wsMgmtTelnetEnable.setDescription('Description.')
wsMgmtTelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtTelnetPort.setStatus('current')
if mibBuilder.loadTexts: wsMgmtTelnetPort.setDescription('Description.')
wsMgmtFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 14))
wsMgmtFtpEnable = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 14, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtFtpEnable.setStatus('current')
if mibBuilder.loadTexts: wsMgmtFtpEnable.setDescription('Enable the FTP server')
wsMgmtFtpRoot = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 14, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtFtpRoot.setStatus('current')
if mibBuilder.loadTexts: wsMgmtFtpRoot.setDescription('Set the root dir of the FTP server')
wsMgmtFtpPwd = MibScalar((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 14, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsMgmtFtpPwd.setStatus('current')
if mibBuilder.loadTexts: wsMgmtFtpPwd.setDescription('Set the password for the FTP server')
wsMgmtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 100))
wsMgmtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 100, 1))
wsMgmtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 100, 1, 1)).setObjects(("WS-MGMT-MIB", "wsMgmtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsMgmtCompliance = wsMgmtCompliance.setStatus('current')
if mibBuilder.loadTexts: wsMgmtCompliance.setDescription('Description.')
wsMgmtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 100, 2))
wsMgmtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 100, 2, 2)).setObjects(("WS-MGMT-MIB", "wsMgmtSystemReset"), ("WS-MGMT-MIB", "wsMgmtSystemFactoryDefaultCfg"), ("WS-MGMT-MIB", "wsMgmtSnmpV2Switch"), ("WS-MGMT-MIB", "wsMgmtHttpEnable"), ("WS-MGMT-MIB", "wsMgmtAlarmStatus"), ("WS-MGMT-MIB", "wsMgmtAlarmSeverity"), ("WS-MGMT-MIB", "wsMgmtAlarmTimestamp"), ("WS-MGMT-MIB", "wsMgmtAlarmRowStatus"), ("WS-MGMT-MIB", "wsMgmtClearAllAlarms"), ("WS-MGMT-MIB", "wsMgmtAcknowledgeAllAlarms"), ("WS-MGMT-MIB", "wsMgmtAlarmIndex"), ("WS-MGMT-MIB", "wsMgmtModuleName"), ("WS-MGMT-MIB", "wsMgmtSnmpV3Switch"), ("WS-MGMT-MIB", "wsMgmtHttpsEnable"), ("WS-MGMT-MIB", "wsMgmtNewAlarmsCount"), ("WS-MGMT-MIB", "wsMgmtTotalAlarmsCount"), ("WS-MGMT-MIB", "wsMgmtGenKey"), ("WS-MGMT-MIB", "wsMgmtCertCreateAction"), ("WS-MGMT-MIB", "wsMgmtCertKeyLabel"), ("WS-MGMT-MIB", "wsMgmtCertKeySize"), ("WS-MGMT-MIB", "wsMgmtCertNumTrustPoint"), ("WS-MGMT-MIB", "wsMgmtCertCreateStatus"), ("WS-MGMT-MIB", "wsMgmtCertKeyRowStatus"), ("WS-MGMT-MIB", "wsMgmtSshEnable"), ("WS-MGMT-MIB", "wsMgmtSshPort"), ("WS-MGMT-MIB", "wsMgmtSshKeyPairName"), ("WS-MGMT-MIB", "wsMgmtTelnetEnable"), ("WS-MGMT-MIB", "wsMgmtTelnetPort"), ("WS-MGMT-MIB", "wsMgmtAlarmMessage"), ("WS-MGMT-MIB", "wsMgmtAlarmTypeID"), ("WS-MGMT-MIB", "wsMgmtAlarmTypeName"), ("WS-MGMT-MIB", "wsMgmtCertConfigTrustpoint"), ("WS-MGMT-MIB", "wsMgmtCertConfigKey"), ("WS-MGMT-MIB", "wsMgmtCertConfigCommonName"), ("WS-MGMT-MIB", "wsMgmtCertConfigOrgUnit"), ("WS-MGMT-MIB", "wsMgmtCertConfigOrg"), ("WS-MGMT-MIB", "wsMgmtCertConfigState"), ("WS-MGMT-MIB", "wsMgmtCertConfigCity"), ("WS-MGMT-MIB", "wsMgmtCertConfigCountry"), ("WS-MGMT-MIB", "wsMgmtCertConfigFqdn"), ("WS-MGMT-MIB", "wsMgmtCertConfigIP"), ("WS-MGMT-MIB", "wsMgmtCertConfigEmail"), ("WS-MGMT-MIB", "wsMgmtCertConfigPassword"), ("WS-MGMT-MIB", "wsMgmtCertConfigCompany"), ("WS-MGMT-MIB", "wsMgmtCertViewType"), ("WS-MGMT-MIB", "wsMgmtCertConfigRowStatus"), ("WS-MGMT-MIB", "wsMgmtCertViewTrustpoint"), ("WS-MGMT-MIB", "wsMgmtCertViewValidStart"), ("WS-MGMT-MIB", "wsMgmtAlarmsIndexLow"), ("WS-MGMT-MIB", "wsMgmtAlarmsIndexHigh"), ("WS-MGMT-MIB", "wsMgmCriticalAlarmsCount"), ("WS-MGMT-MIB", "wsMgmMajorAlarmsCount"), ("WS-MGMT-MIB", "wsMgmWarningAlarmsCount"), ("WS-MGMT-MIB", "wsMgmInfoAlarmsCount"), ("WS-MGMT-MIB", "wsMgmNormalAlarmsCount"), ("WS-MGMT-MIB", "wsMgmtTotalAlarmsCountSinceBoot"), ("WS-MGMT-MIB", "wsMgmtFtpEnable"), ("WS-MGMT-MIB", "wsMgmtFtpRoot"), ("WS-MGMT-MIB", "wsMgmtFtpPwd"), ("WS-MGMT-MIB", "wsMgmtDiscoveredNetworkDevicesTableRow"), ("WS-MGMT-MIB", "wsMgmtDiscoveredDeviceDiscoveryTime"), ("WS-MGMT-MIB", "wsMgmtDiscoveredDeviceDiscoveryProfileName"), ("WS-MGMT-MIB", "wsMgmtDiscoveredDeviceDescr"), ("WS-MGMT-MIB", "wsMgmtDiscoveredDeviceLocation"), ("WS-MGMT-MIB", "wsMgmtDiscoveredDeviceName"), ("WS-MGMT-MIB", "wsMgmtDiscoveredDeviceClusterId"), ("WS-MGMT-MIB", "wsMgmtDiscoveredDeviceSwVersion"), ("WS-MGMT-MIB", "wsMgmtDiscoveredDeviceHwVersion"), ("WS-MGMT-MIB", "wsMgmtDiscoveredDeviceIpAddr"), ("WS-MGMT-MIB", "wsMgmtDiscoveryProfileRowStatus"), ("WS-MGMT-MIB", "wsMgmtDiscoveryLastDoneStatus"), ("WS-MGMT-MIB", "wsMgmtDiscoveryLastDoneTime"), ("WS-MGMT-MIB", "wsMgmtDiscoverySnmpVersion"), ("WS-MGMT-MIB", "wsMgmtDiscoveryEndIPAddr"), ("WS-MGMT-MIB", "wsMgmtDiscoveryStartIPAddr"), ("WS-MGMT-MIB", "wsMgmtDiscoveryProfileName"), ("WS-MGMT-MIB", "wsMgmtDiscoveryProfileIndex"), ("WS-MGMT-MIB", "wsMgmtHttpTrustpoint"), ("WS-MGMT-MIB", "wsMgmUnacknowledgedCriticalAlarmsCountSinceBoot"), ("WS-MGMT-MIB", "wsMgmUnacknowledgedMajorAlarmsCountSinceBoot"), ("WS-MGMT-MIB", "wsMgmUnacknowledgedWarningAlarmsCountSinceBoot"), ("WS-MGMT-MIB", "wsMgmUnacknowledgedInfoAlarmsCountSinceBoot"), ("WS-MGMT-MIB", "wsMgmUnacknowledgedNormalAlarmsCountSinceBoot"), ("WS-MGMT-MIB", "wsMgmUnacknowledgedMajorAlarmsCount"), ("WS-MGMT-MIB", "wsMgmUnacknowledgedWarningAlarmsCount"), ("WS-MGMT-MIB", "wsMgmUnacknowledgedInfoAlarmsCount"), ("WS-MGMT-MIB", "wsMgmUnacknowledgedNormalAlarmsCount"), ("WS-MGMT-MIB", "wsMgmUnacknowledgedCriticalAlarmsCount"), ("WS-MGMT-MIB", "wsMgmtCertViewValidEnd"), ("WS-MGMT-MIB", "wsMgmtCertViewSubjectCommonName"), ("WS-MGMT-MIB", "wsMgmtCertViewSubjectOrgUnit"), ("WS-MGMT-MIB", "wsMgmtCertViewSubjectOrg"), ("WS-MGMT-MIB", "wsMgmtCertViewSubjectCity"), ("WS-MGMT-MIB", "wsMgmtCertViewSubjectState"), ("WS-MGMT-MIB", "wsMgmtCertViewSubjectCountry"), ("WS-MGMT-MIB", "wsMgmtCertViewSubjectEmail"), ("WS-MGMT-MIB", "wsMgmtCertViewIssuerCommonName"), ("WS-MGMT-MIB", "wsMgmtCertViewIssuerOrgUnit"), ("WS-MGMT-MIB", "wsMgmtCertViewIssuerOrg"), ("WS-MGMT-MIB", "wsMgmtCertViewIssuerCity"), ("WS-MGMT-MIB", "wsMgmtCertViewIssuerState"), ("WS-MGMT-MIB", "wsMgmtCertViewIssuerCountry"), ("WS-MGMT-MIB", "wsMgmtCertViewIssuerEmail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsMgmtGroup = wsMgmtGroup.setStatus('current')
if mibBuilder.loadTexts: wsMgmtGroup.setDescription('Description.')
wsMgmtObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 388, 14, 4, 1, 100, 2, 3)).setObjects(("WS-MGMT-MIB", "wsMgmtCertCurrentCountry"), ("WS-MGMT-MIB", "wsMgmtCertCurrentState"), ("WS-MGMT-MIB", "wsMgmtCertCurrentCity"), ("WS-MGMT-MIB", "wsMgmtCertCurrentOrg"), ("WS-MGMT-MIB", "wsMgmtCertCurrentOrgUnit"), ("WS-MGMT-MIB", "wsMgmtCertCurrentCommonName"), ("WS-MGMT-MIB", "wsMgmtCertCurrentIssuer"), ("WS-MGMT-MIB", "wsMgmtCertCurrentValidStart"), ("WS-MGMT-MIB", "wsMgmtCertCurrentValidEnd"), ("WS-MGMT-MIB", "wsMgmtCertCurrentTrustPoint"), ("WS-MGMT-MIB", "wsMgmtCertFileName"), ("WS-MGMT-MIB", "wsMgmtCertAction"), ("WS-MGMT-MIB", "wsMgmtCertStatus"), ("WS-MGMT-MIB", "wsMgmtCertCountry"), ("WS-MGMT-MIB", "wsMgmtCertState"), ("WS-MGMT-MIB", "wsMgmtCertCity"), ("WS-MGMT-MIB", "wsMgmtCertOrg"), ("WS-MGMT-MIB", "wsMgmtCertOrgUnit"), ("WS-MGMT-MIB", "wsMgmtCertCommonName"), ("WS-MGMT-MIB", "wsMgmtCertIssuer"), ("WS-MGMT-MIB", "wsMgmtCertEmail"), ("WS-MGMT-MIB", "wsMgmtCertPwd"), ("WS-MGMT-MIB", "wsMgmtCertCompany"), ("WS-MGMT-MIB", "wsMgmtCertValidStart"), ("WS-MGMT-MIB", "wsMgmtCertValidEnd"), ("WS-MGMT-MIB", "wsMgmtCertTrustPoint"), ("WS-MGMT-MIB", "wsMgmtGenKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsMgmtObsoleteGroup = wsMgmtObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: wsMgmtObsoleteGroup.setDescription('Description.')
mibBuilder.exportSymbols("WS-MGMT-MIB", wsMgmtSnmpV3Switch=wsMgmtSnmpV3Switch, wsMgmtCertKeyTable=wsMgmtCertKeyTable, wsMgmtCertViewValidEnd=wsMgmtCertViewValidEnd, wsMgmtCertConfigTable=wsMgmtCertConfigTable, wsMgmtCertConfigTrustpoint=wsMgmtCertConfigTrustpoint, wsMgmtNetworkDiscoveryEntry=wsMgmtNetworkDiscoveryEntry, wsMgmtCertConfigOrgUnit=wsMgmtCertConfigOrgUnit, wsMgmtHttpEnable=wsMgmtHttpEnable, wsMgmtDiscoverySnmpVersion=wsMgmtDiscoverySnmpVersion, wsMgmUnacknowledgedInfoAlarmsCount=wsMgmUnacknowledgedInfoAlarmsCount, AbbrRowStatus=AbbrRowStatus, wsMgmtHttp=wsMgmtHttp, wsMgmtCertStatus=wsMgmtCertStatus, wsMgmtCertCurrentValidStart=wsMgmtCertCurrentValidStart, wsMgmtDiscoveryProfileName=wsMgmtDiscoveryProfileName, PYSNMP_MODULE_ID=wsMgmtMib, wsMgmtSnmp=wsMgmtSnmp, wsMgmtAlarmsIndexHigh=wsMgmtAlarmsIndexHigh, wsMgmtCertViewIssuerState=wsMgmtCertViewIssuerState, wsMgmtCertConfigCountry=wsMgmtCertConfigCountry, wsMgmtNetworkDiscoveryProfilesTable=wsMgmtNetworkDiscoveryProfilesTable, wsMgmUnacknowledgedCriticalAlarmsCountSinceBoot=wsMgmUnacknowledgedCriticalAlarmsCountSinceBoot, wsMgmtCertCreate=wsMgmtCertCreate, wsMgmtFtpPwd=wsMgmtFtpPwd, wsMgmtCertPwd=wsMgmtCertPwd, wsMgmtCertViewIssuerCity=wsMgmtCertViewIssuerCity, wsMgmtGroups=wsMgmtGroups, wsMgmtSnmpV2Switch=wsMgmtSnmpV2Switch, wsMgmtCertViewTable=wsMgmtCertViewTable, wsMgmtAlarmSeverity=wsMgmtAlarmSeverity, wsMgmtSshPort=wsMgmtSshPort, wsMgmtCertOrgUnit=wsMgmtCertOrgUnit, wsMgmtAlarmTimestamp=wsMgmtAlarmTimestamp, wsMgmtHttpTrustpoint=wsMgmtHttpTrustpoint, wsMgmtCertViewSubjectCountry=wsMgmtCertViewSubjectCountry, wsMgmtDiscoveredDeviceClusterId=wsMgmtDiscoveredDeviceClusterId, wsMgmtCompliances=wsMgmtCompliances, wsMgmtCertCurrentOrg=wsMgmtCertCurrentOrg, wsMgmUnacknowledgedWarningAlarmsCountSinceBoot=wsMgmUnacknowledgedWarningAlarmsCountSinceBoot, wsMgmtCertConfigEmail=wsMgmtCertConfigEmail, wsMgmtKey=wsMgmtKey, wsMgmCriticalAlarmsCount=wsMgmCriticalAlarmsCount, wsMgmtCertCreateEntry=wsMgmtCertCreateEntry, wsMgmtReset=wsMgmtReset, wsMgmtTelnet=wsMgmtTelnet, wsMgmtNetworkDiscoveryTable=wsMgmtNetworkDiscoveryTable, wsMgmtNwDiscovery=wsMgmtNwDiscovery, wsMgmtCertViewSubjectOrgUnit=wsMgmtCertViewSubjectOrgUnit, wsMgmtAlarmIndex=wsMgmtAlarmIndex, wsMgmUnacknowledgedMajorAlarmsCountSinceBoot=wsMgmUnacknowledgedMajorAlarmsCountSinceBoot, wsMgmtCertViewSubjectOrg=wsMgmtCertViewSubjectOrg, wsMgmtHttpsEnable=wsMgmtHttpsEnable, wsMgmtGenKey=wsMgmtGenKey, wsMgmtCertViewIssuerCountry=wsMgmtCertViewIssuerCountry, wsMgmtDiscoveredDeviceName=wsMgmtDiscoveredDeviceName, wsMgmtCertViewSubjectCommonName=wsMgmtCertViewSubjectCommonName, wsMgmtGroup=wsMgmtGroup, wsMgmtCertCurrentCountry=wsMgmtCertCurrentCountry, wsMgmtCertValidEnd=wsMgmtCertValidEnd, wsMgmtConformance=wsMgmtConformance, wsMgmtTotalAlarmsCount=wsMgmtTotalAlarmsCount, wsMgmtCertViewType=wsMgmtCertViewType, wsMgmtAlarmMessage=wsMgmtAlarmMessage, wsMgmtCertCurrentCity=wsMgmtCertCurrentCity, wsMgmtDiscoveredDeviceHwVersion=wsMgmtDiscoveredDeviceHwVersion, wsMgmtCertCreateTable=wsMgmtCertCreateTable, wsMgmtSsh=wsMgmtSsh, wsMgmtSshKeyPairName=wsMgmtSshKeyPairName, wsMgmtCertViewIssuerOrgUnit=wsMgmtCertViewIssuerOrgUnit, wsMgmtCertViewIssuerCommonName=wsMgmtCertViewIssuerCommonName, wsMgmtCertConfigCommonName=wsMgmtCertConfigCommonName, wsMgmtCertConfigFqdn=wsMgmtCertConfigFqdn, wsMgmtCertCity=wsMgmtCertCity, wsMgmInfoAlarmsCount=wsMgmInfoAlarmsCount, wsMgmtCertViewIssuerOrg=wsMgmtCertViewIssuerOrg, wsMgmtCertConfigKey=wsMgmtCertConfigKey, wsMgmtSshEnable=wsMgmtSshEnable, wsMgmUnacknowledgedInfoAlarmsCountSinceBoot=wsMgmUnacknowledgedInfoAlarmsCountSinceBoot, wsMgmWarningAlarmsCount=wsMgmWarningAlarmsCount, wsMgmtClearAllAlarms=wsMgmtClearAllAlarms, wsMgmtCertConfigPassword=wsMgmtCertConfigPassword, wsMgmtCertConfigCity=wsMgmtCertConfigCity, wsMgmtNewAlarmsCount=wsMgmtNewAlarmsCount, wsMgmtCert=wsMgmtCert, wsMgmtCertViewSubjectState=wsMgmtCertViewSubjectState, wsMgmtCertAction=wsMgmtCertAction, wsMgmtAlarmStatus=wsMgmtAlarmStatus, wsMgmtDiscoveryProfileRowStatus=wsMgmtDiscoveryProfileRowStatus, wsMgmtObsoleteGroup=wsMgmtObsoleteGroup, wsMgmtCertViewEntry=wsMgmtCertViewEntry, wsMgmtCertConfigRowStatus=wsMgmtCertConfigRowStatus, wsMgmtSystemFactoryDefaultCfg=wsMgmtSystemFactoryDefaultCfg, wsMgmtDiscoveredNetworkDevicesTableRow=wsMgmtDiscoveredNetworkDevicesTableRow, wsMgmtAlarmRowStatus=wsMgmtAlarmRowStatus, Password=Password, wsMgmtSystemReset=wsMgmtSystemReset, wsMgmtDiscoveryProfileIndex=wsMgmtDiscoveryProfileIndex, wsMgmtDiscoveredDeviceDescr=wsMgmtDiscoveredDeviceDescr, wsMgmtAlarms=wsMgmtAlarms, wsMgmtDiscoveredDeviceLocation=wsMgmtDiscoveredDeviceLocation, DoActionShowProgress=DoActionShowProgress, wsMgmMajorAlarmsCount=wsMgmMajorAlarmsCount, wsMgmtDiscoveredDeviceDiscoveryTime=wsMgmtDiscoveredDeviceDiscoveryTime, wsMgmUnacknowledgedCriticalAlarmsCount=wsMgmUnacknowledgedCriticalAlarmsCount, wsMgmtCertCommonName=wsMgmtCertCommonName, wsMgmtCertEmail=wsMgmtCertEmail, wsMgmtNetworkDiscoveryProfilesEntry=wsMgmtNetworkDiscoveryProfilesEntry, wsMgmtDiscoveryEndIPAddr=wsMgmtDiscoveryEndIPAddr, wsMgmtCertKeyLabel=wsMgmtCertKeyLabel, wsMgmtCertCurrentCommonName=wsMgmtCertCurrentCommonName, wsMgmtCertCurrentState=wsMgmtCertCurrentState, wsMgmtCertViewValidStart=wsMgmtCertViewValidStart, wsMgmtCertValidStart=wsMgmtCertValidStart, wsMgmtCertViewIssuerEmail=wsMgmtCertViewIssuerEmail, wsMgmtCertCurrentTrustPoint=wsMgmtCertCurrentTrustPoint, wsMgmtCertCreateAction=wsMgmtCertCreateAction, wsMgmtDiscoveredDeviceDiscoveryProfileName=wsMgmtDiscoveredDeviceDiscoveryProfileName, wsMgmtAcknowledgeAllAlarms=wsMgmtAcknowledgeAllAlarms, wsMgmtCertConfigIP=wsMgmtCertConfigIP, wsMgmtCertTrustPoint=wsMgmtCertTrustPoint, wsMgmtFtp=wsMgmtFtp, wsMgmtTelnetEnable=wsMgmtTelnetEnable, wsMgmtCompliance=wsMgmtCompliance, wsMgmUnacknowledgedNormalAlarmsCountSinceBoot=wsMgmUnacknowledgedNormalAlarmsCountSinceBoot, StaticRowEnable=StaticRowEnable, wsMgmtTotalAlarmsCountSinceBoot=wsMgmtTotalAlarmsCountSinceBoot, wsMgmUnacknowledgedWarningAlarmsCount=wsMgmUnacknowledgedWarningAlarmsCount, wsMgmtMib=wsMgmtMib, wsMgmtCertIssuer=wsMgmtCertIssuer, wsMgmtCertKeyRowStatus=wsMgmtCertKeyRowStatus, wsMgmtDiscoveredDeviceSwVersion=wsMgmtDiscoveredDeviceSwVersion, wsMgmtDiscoveredDeviceIpAddr=wsMgmtDiscoveredDeviceIpAddr, wsMgmtFtpEnable=wsMgmtFtpEnable, wsMgmtCertNumTrustPoint=wsMgmtCertNumTrustPoint, wsMgmtCertCountry=wsMgmtCertCountry, wsMgmtAlarmTypeName=wsMgmtAlarmTypeName, wsMgmtDiscoveryLastDoneStatus=wsMgmtDiscoveryLastDoneStatus, wsMgmtCertKeyEntry=wsMgmtCertKeyEntry, wsMgmtModuleName=wsMgmtModuleName, wsMgmtCertViewSubjectCity=wsMgmtCertViewSubjectCity, wsMgmtCertFileName=wsMgmtCertFileName, wsMgmtTelnetPort=wsMgmtTelnetPort, wsMgmtAlarmTypeID=wsMgmtAlarmTypeID, wsMgmUnacknowledgedMajorAlarmsCount=wsMgmUnacknowledgedMajorAlarmsCount, wsMgmtAlarmTable=wsMgmtAlarmTable, wsMgmtDiscoveryLastDoneTime=wsMgmtDiscoveryLastDoneTime, wsMgmtCertConfigEntry=wsMgmtCertConfigEntry, wsMgmtCertState=wsMgmtCertState, wsMgmtCertCreateStatus=wsMgmtCertCreateStatus, wsMgmtAlarmsIndexLow=wsMgmtAlarmsIndexLow, wsMgmtCertViewSubjectEmail=wsMgmtCertViewSubjectEmail, wsMgmNormalAlarmsCount=wsMgmNormalAlarmsCount, wsMgmtFtpRoot=wsMgmtFtpRoot, wsMgmtCertCurrentOrgUnit=wsMgmtCertCurrentOrgUnit, wsMgmtCertCurrentValidEnd=wsMgmtCertCurrentValidEnd, wsMgmUnacknowledgedNormalAlarmsCount=wsMgmUnacknowledgedNormalAlarmsCount, wsMgmtCertCompany=wsMgmtCertCompany, wsMgmtCertConfigState=wsMgmtCertConfigState, wsMgmtCertKeySize=wsMgmtCertKeySize, wsMgmtCertCurrentIssuer=wsMgmtCertCurrentIssuer, wsMgmtCertConfigCompany=wsMgmtCertConfigCompany, wsMgmtAlarmEntry=wsMgmtAlarmEntry, wsMgmtDiscoveryStartIPAddr=wsMgmtDiscoveryStartIPAddr, wsMgmtCertCurrent=wsMgmtCertCurrent, wsMgmtCertConfigOrg=wsMgmtCertConfigOrg, wsMgmtCertOrg=wsMgmtCertOrg, wsMgmtCertViewTrustpoint=wsMgmtCertViewTrustpoint)
