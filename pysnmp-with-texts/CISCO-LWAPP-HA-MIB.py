#
# PySNMP MIB module CISCO-LWAPP-HA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-HA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:05:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
cRFStatusPeerUnitState, cRFStatusUnitState = mibBuilder.importSymbols("CISCO-RF-MIB", "cRFStatusPeerUnitState", "cRFStatusUnitState")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoURLString, = mibBuilder.importSymbols("CISCO-TC", "CiscoURLString")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Integer32, Unsigned32, NotificationType, IpAddress, TimeTicks, Gauge32, MibIdentifier, iso, ObjectIdentity, Counter64, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "NotificationType", "IpAddress", "TimeTicks", "Gauge32", "MibIdentifier", "iso", "ObjectIdentity", "Counter64", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
RowStatus, TruthValue, MacAddress, TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "MacAddress", "TextualConvention", "DisplayString", "TimeStamp")
ciscoLwappHaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 198888))
ciscoLwappHaMIB.setRevisions(('2012-01-24 11:50',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappHaMIB.setRevisionsDescriptions(('Initial version of this MIB module. ',))
if mibBuilder.loadTexts: ciscoLwappHaMIB.setLastUpdated('201201051150Z')
if mibBuilder.loadTexts: ciscoLwappHaMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappHaMIB.setContactInfo(' Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappHaMIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central controllers, that terminate the Light Weight Access Point Protocol tunnel from Cisco Light-weight LWAPP Access Points. This MIB is used to show and configure High availability (HA) related statistics. The relationship between CC and the LWAPP APs can be depicted as followshe LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends them to the controller to which it is logically connected. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity also referred to as 'controller'. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the Central Controller. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Mobile Node, Mobile Station(Ms) and client are used interchangeably. REFERENCE [1] Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol ")
ciscoLwappHaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0))
ciscoLwappHaGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 1))
ciscoLwappHaNetworkConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 2))
ciscoLwappHaMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 3))
cLHaApSsoConfig = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLHaApSsoConfig.setStatus('current')
if mibBuilder.loadTexts: cLHaApSsoConfig.setDescription('')
cLHaPeerIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 1, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLHaPeerIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cLHaPeerIpAddressType.setDescription('')
cLHaPeerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLHaPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: cLHaPeerIpAddress.setDescription('')
cLHaServicePortPeerIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 1, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLHaServicePortPeerIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cLHaServicePortPeerIpAddressType.setDescription('')
cLHaServicePortPeerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLHaServicePortPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: cLHaServicePortPeerIpAddress.setDescription('')
cLHaServicePortPeerIpNetMaskType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 1, 6), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLHaServicePortPeerIpNetMaskType.setStatus('current')
if mibBuilder.loadTexts: cLHaServicePortPeerIpNetMaskType.setDescription('')
cLHaServicePortPeerIpNetMask = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLHaServicePortPeerIpNetMask.setStatus('current')
if mibBuilder.loadTexts: cLHaServicePortPeerIpNetMask.setDescription('')
cLHaRedundancyIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLHaRedundancyIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cLHaRedundancyIpAddressType.setDescription('')
cLHaRedundancyIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLHaRedundancyIpAddress.setStatus('current')
if mibBuilder.loadTexts: cLHaRedundancyIpAddress.setDescription('')
cLHaPeerMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLHaPeerMacAddress.setStatus('current')
if mibBuilder.loadTexts: cLHaPeerMacAddress.setDescription('')
cLHaVirtualMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 1, 11), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLHaVirtualMacAddress.setStatus('current')
if mibBuilder.loadTexts: cLHaVirtualMacAddress.setDescription('')
cLHaPrimaryUnit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLHaPrimaryUnit.setStatus('current')
if mibBuilder.loadTexts: cLHaPrimaryUnit.setDescription('Indicates whether this is the primary redundant unit or not. If this unit is the primary unit, this object is true. If this unit is the secondary unit, this object is false.')
cLHaLinkEncryption = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLHaLinkEncryption.setStatus('current')
if mibBuilder.loadTexts: cLHaLinkEncryption.setDescription('Indicates whether link encryption is enabled or not.')
cLHaNetworkFailOver = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLHaNetworkFailOver.setStatus('current')
if mibBuilder.loadTexts: cLHaNetworkFailOver.setDescription('Indicates whether network failover is enabled or not.')
cLHaRFStatusUnitIp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 1, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLHaRFStatusUnitIp.setStatus('current')
if mibBuilder.loadTexts: cLHaRFStatusUnitIp.setDescription('The description of the ip address of unit')
cLHaNetworkRoutePeerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 2, 1), )
if mibBuilder.loadTexts: cLHaNetworkRoutePeerConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLHaNetworkRoutePeerConfigTable.setDescription("A table of the switch's Network Route Peer entries")
cLHaNetworkRoutePeerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-HA-MIB", "cLHaNetworkRoutePeerIPAddressType"), (0, "CISCO-LWAPP-HA-MIB", "cLHaNetworkRoutePeerIPAddress"))
if mibBuilder.loadTexts: cLHaNetworkRoutePeerConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLHaNetworkRoutePeerConfigEntry.setDescription("Switch's Network Route Peer entry")
cLHaNetworkRoutePeerIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 2, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cLHaNetworkRoutePeerIPAddressType.setStatus('current')
if mibBuilder.loadTexts: cLHaNetworkRoutePeerIPAddressType.setDescription('Network Route IP Address type of the standby.')
cLHaNetworkRoutePeerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 2, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cLHaNetworkRoutePeerIPAddress.setStatus('current')
if mibBuilder.loadTexts: cLHaNetworkRoutePeerIPAddress.setDescription('Network Route IP Address of the standby.')
cLHaNetworkRoutePeerIPNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 2, 1, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLHaNetworkRoutePeerIPNetmaskType.setStatus('current')
if mibBuilder.loadTexts: cLHaNetworkRoutePeerIPNetmaskType.setDescription(' Network Route IP Netmask type of the standby.')
cLHaNetworkRoutePeerIPNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 2, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLHaNetworkRoutePeerIPNetmask.setStatus('current')
if mibBuilder.loadTexts: cLHaNetworkRoutePeerIPNetmask.setDescription(' Network Route IP Netmask of the standby.')
cLHaNetworkRoutePeerGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 2, 1, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLHaNetworkRoutePeerGatewayType.setStatus('current')
if mibBuilder.loadTexts: cLHaNetworkRoutePeerGatewayType.setDescription(' Network Route IP Gateway type of the standby.')
cLHaNetworkRoutePeerGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 2, 1, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLHaNetworkRoutePeerGateway.setStatus('current')
if mibBuilder.loadTexts: cLHaNetworkRoutePeerGateway.setDescription(' Network Route IP Gateway of the standby.')
cLHaNetworkRoutePeerTransferStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("initiate", 1), ("inProgress", 2), ("success", 3), ("failure", 4), ("timeout", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cLHaNetworkRoutePeerTransferStatus.setStatus('current')
if mibBuilder.loadTexts: cLHaNetworkRoutePeerTransferStatus.setDescription('Network Route transfer status from standby.')
cLHaNetworkRoutePeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLHaNetworkRoutePeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLHaNetworkRoutePeerRowStatus.setDescription('Network Route Peer Row Status.')
ciscoLwappHaNotificationVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 4))
cLHaSecondaryControllerUsageTrapType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("usageStart", 1), ("usageComplete", 2), ("overUsage", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLHaSecondaryControllerUsageTrapType.setStatus('current')
if mibBuilder.loadTexts: cLHaSecondaryControllerUsageTrapType.setDescription('This object represents the usage of secondary controller. After the usuage of 90 days, one trap is generated per day for over usage. usageStart - start of secondary controller usage. usageComplete - completion of secondary controller usage period of 90 days. overUsage - Secondary controller overusage.')
cLHaSecondaryControllerUsageDayCounter = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cLHaSecondaryControllerUsageDayCounter.setStatus('current')
if mibBuilder.loadTexts: cLHaSecondaryControllerUsageDayCounter.setDescription('This object represents the number of days the secondary controller is used.')
cLHaSecondaryControllerUsageTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 3, 1)).setObjects(("CISCO-LWAPP-HA-MIB", "cLHaSecondaryControllerUsageTrapType"), ("CISCO-LWAPP-HA-MIB", "cLHaSecondaryControllerUsageDayCounter"), ("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: cLHaSecondaryControllerUsageTrap.setStatus('current')
if mibBuilder.loadTexts: cLHaSecondaryControllerUsageTrap.setDescription('This notification is sent on the event of a generic failure between the active and standby unit')
cLHaRFSwapInfoTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 198888, 0, 3, 2)).setObjects(("CISCO-LWAPP-HA-MIB", "cLHaRFStatusUnitIp"), ("CISCO-RF-MIB", "cRFStatusUnitState"), ("CISCO-LWAPP-HA-MIB", "cLHaPeerIpAddress"), ("CISCO-RF-MIB", "cRFStatusPeerUnitState"))
if mibBuilder.loadTexts: cLHaRFSwapInfoTrap.setStatus('current')
if mibBuilder.loadTexts: cLHaRFSwapInfoTrap.setDescription('The notification is sent by the active redundant unit whenever its RF state changes or the RF state of the peer unit changes. To avoid a flurry of notifications for all state transitions, notifications will only be sent for transitions to the following RF states: disabled (for the peer state) standbyCold standbyHot active activeExtraload')
mibBuilder.exportSymbols("CISCO-LWAPP-HA-MIB", cLHaNetworkRoutePeerIPAddress=cLHaNetworkRoutePeerIPAddress, ciscoLwappHaMIBObjects=ciscoLwappHaMIBObjects, cLHaNetworkRoutePeerIPNetmaskType=cLHaNetworkRoutePeerIPNetmaskType, cLHaLinkEncryption=cLHaLinkEncryption, cLHaNetworkRoutePeerConfigEntry=cLHaNetworkRoutePeerConfigEntry, cLHaPeerIpAddressType=cLHaPeerIpAddressType, cLHaNetworkFailOver=cLHaNetworkFailOver, cLHaServicePortPeerIpAddress=cLHaServicePortPeerIpAddress, cLHaNetworkRoutePeerTransferStatus=cLHaNetworkRoutePeerTransferStatus, ciscoLwappHaMIBNotifs=ciscoLwappHaMIBNotifs, cLHaRFSwapInfoTrap=cLHaRFSwapInfoTrap, cLHaNetworkRoutePeerConfigTable=cLHaNetworkRoutePeerConfigTable, cLHaNetworkRoutePeerGateway=cLHaNetworkRoutePeerGateway, cLHaApSsoConfig=cLHaApSsoConfig, cLHaRFStatusUnitIp=cLHaRFStatusUnitIp, cLHaServicePortPeerIpAddressType=cLHaServicePortPeerIpAddressType, PYSNMP_MODULE_ID=ciscoLwappHaMIB, cLHaNetworkRoutePeerIPAddressType=cLHaNetworkRoutePeerIPAddressType, cLHaVirtualMacAddress=cLHaVirtualMacAddress, cLHaSecondaryControllerUsageTrapType=cLHaSecondaryControllerUsageTrapType, cLHaNetworkRoutePeerGatewayType=cLHaNetworkRoutePeerGatewayType, ciscoLwappHaMIB=ciscoLwappHaMIB, cLHaPrimaryUnit=cLHaPrimaryUnit, cLHaServicePortPeerIpNetMask=cLHaServicePortPeerIpNetMask, cLHaRedundancyIpAddress=cLHaRedundancyIpAddress, cLHaRedundancyIpAddressType=cLHaRedundancyIpAddressType, cLHaServicePortPeerIpNetMaskType=cLHaServicePortPeerIpNetMaskType, cLHaNetworkRoutePeerIPNetmask=cLHaNetworkRoutePeerIPNetmask, cLHaNetworkRoutePeerRowStatus=cLHaNetworkRoutePeerRowStatus, ciscoLwappHaNotificationVariable=ciscoLwappHaNotificationVariable, cLHaPeerIpAddress=cLHaPeerIpAddress, cLHaSecondaryControllerUsageTrap=cLHaSecondaryControllerUsageTrap, ciscoLwappHaGlobalConfig=ciscoLwappHaGlobalConfig, cLHaPeerMacAddress=cLHaPeerMacAddress, ciscoLwappHaNetworkConfig=ciscoLwappHaNetworkConfig, cLHaSecondaryControllerUsageDayCounter=cLHaSecondaryControllerUsageDayCounter)
