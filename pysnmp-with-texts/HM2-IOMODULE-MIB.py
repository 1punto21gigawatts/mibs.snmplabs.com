#
# PySNMP MIB module HM2-IOMODULE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-IOMODULE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:31:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
hm2ConfigurationMibs, HmEnabledStatus = mibBuilder.importSymbols("HM2-TC-MIB", "hm2ConfigurationMibs", "HmEnabledStatus")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Integer32, ModuleIdentity, TimeTicks, Counter64, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, ObjectIdentity, NotificationType, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "TimeTicks", "Counter64", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "ObjectIdentity", "NotificationType", "iso", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hm2IOModuleMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 100))
hm2IOModuleMib.setRevisions(('2012-02-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2IOModuleMib.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2IOModuleMib.setLastUpdated('201202100000Z')
if mibBuilder.loadTexts: hm2IOModuleMib.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2IOModuleMib.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2IOModuleMib.setDescription('Hirschmann IO Module MIB. Copyright (C) 2012. All Rights Reserved.')
hm2IOModuleMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 100, 0))
hm2IOModuleMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 100, 1))
hm2IOModConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1))
hm2IOModConfigCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 1))
hm2IOModConfigDigInputAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigInputAdminState.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigInputAdminState.setDescription('Enables polling of input values. (if disable(2) input task will do nothing)')
hm2IOModConfigDigOutputAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputAdminState.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigOutputAdminState.setDescription('Enables mirroring of input values to output ports. (if disable(2) output task will do nothing)')
hm2IOModConfigDigInputRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigInputRefreshInterval.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigInputRefreshInterval.setDescription('The refresh interval (in ms) of the input values. The accuracy of the interval value is 100ms. Minimum 1000ms (1s), Maximum 10000ms (10s).')
hm2IOModConfigDigOutputRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputRefreshInterval.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigOutputRefreshInterval.setDescription('The refresh interval (in ms) of the output values. The accuracy of the interval value is 100ms. Minimum 1000ms (1s), Maximum 10000ms (10s).')
hm2IOModConfigDigOutputRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputRetryCount.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigOutputRetryCount.setDescription('The retry count for the output values. when after the number of configured retries no SNMP get request was answered, the output value (hm2IOModValueDigOutputValue) will be set to invalid (3). Minimum 1, Maximum 10.')
hm2IOModConfigDigInputTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 2), )
if mibBuilder.loadTexts: hm2IOModConfigDigInputTable.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigInputTable.setDescription('IO module config table for inputs')
hm2IOModConfigDigInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 2, 1), ).setIndexNames((0, "HM2-IOMODULE-MIB", "hm2IOModConfigDigInputModID"), (0, "HM2-IOMODULE-MIB", "hm2IOModConfigDigInputID"))
if mibBuilder.loadTexts: hm2IOModConfigDigInputEntry.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigInputEntry.setDescription('IO module config entry for inputs')
hm2IOModConfigDigInputModID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hm2IOModConfigDigInputModID.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigInputModID.setDescription('The module ID of an input. Module ID 0 corresponds to the power supply module.')
hm2IOModConfigDigInputID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hm2IOModConfigDigInputID.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigInputID.setDescription('The ID of an input.')
hm2IOModConfigDigInputLogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 2, 1, 3), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigInputLogEvent.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigInputLogEvent.setDescription('Trigger an event log when input status changes. If the value is disable (2), no event log entry will be written. If the value is enable (1), an event log entry will be written when the input state changes. The input state will be checked according to the refresh interval entered in hm2IOModConfigDigInputRefreshInterval.')
hm2IOModConfigDigInputSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 2, 1, 4), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigInputSnmpTrap.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigInputSnmpTrap.setDescription('Trigger an SNMP trap log when input status changes. If the value is disable (2), no SNMP trap will be sent. If the value is enable (1), a SNMP trap will be sent when the input state changes. The SNMP trap will be sent to all receivers configured in the snmpTargetAddrTable. The input state will be checked according to the refresh interval entered in hm2IOModConfigDigInputRefreshInterval.')
hm2IOModConfigDigOutputTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3), )
if mibBuilder.loadTexts: hm2IOModConfigDigOutputTable.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigOutputTable.setDescription('IO module config table for outputs.')
hm2IOModConfigDigOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1), ).setIndexNames((0, "HM2-IOMODULE-MIB", "hm2IOModConfigDigOutputModID"), (0, "HM2-IOMODULE-MIB", "hm2IOModConfigDigOutputID"))
if mibBuilder.loadTexts: hm2IOModConfigDigOutputEntry.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigOutputEntry.setDescription('IO module config entry for outputs')
hm2IOModConfigDigOutputModID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hm2IOModConfigDigOutputModID.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigOutputModID.setDescription('The module ID of an output. Module ID 0 corresponds to the power supply module.')
hm2IOModConfigDigOutputID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hm2IOModConfigDigOutputID.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigOutputID.setDescription('The ID of an output.')
hm2IOModConfigDigOutputLogEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 3), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputLogEvent.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigOutputLogEvent.setDescription('Trigger an event log when output status changes. If the value is disable (2), no event log entry will be written. If the value is enable (1), an event log entry will be written when the output state changes. The output state will be checked according to the refresh interval entered in hm2IOModConfigDigOutputRefreshInterval.')
hm2IOModConfigDigOutputSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 4), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSnmpTrap.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSnmpTrap.setDescription('Trigger an SNMP trap log when output status changes. If the value is disable (2), no SNMP trap will be sent. If the value is enable (1), a SNMP trap will be sent when the output state changes. The SNMP trap will be sent to all receivers configured in the snmpTargetAddrTable. The output state will be checked according to the refresh interval entered in hm2IOModConfigDigOutputRefreshInterval.')
hm2IOModConfigDigOutputSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSourceAddressType.setDescription('Address type of an input mirrored to the output. Currently, only ipv4 is supported.')
hm2IOModConfigDigOutputSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 6), InetAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSourceAddress.setDescription('The IP address of an input mirrored to the output. Use 0.0.0.0 if the output should not be set. In this case hm2IOModValueDigOutputValue is not-configured(4). Use 127.0.0.1 if a local input should be used.')
hm2IOModConfigDigOutputSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 7), InetPortNumber().clone(161)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSourcePort.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSourcePort.setDescription('The SNMP port number being used by the input mirrored to the output. This port would be the destination of the SNMP requests for polling the state of the input.')
hm2IOModConfigDigOutputSourceModID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSourceModID.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSourceModID.setDescription('The module ID of an input mirrored to the output. Module ID 0 corresponds to the power supply module. Ignored when hm2IOModConfigDigOutputSourceIP is 0.0.0.0.')
hm2IOModConfigDigOutputSourceID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSourceID.setStatus('current')
if mibBuilder.loadTexts: hm2IOModConfigDigOutputSourceID.setDescription('The ID of an input mirrored to the output. Ignored when hm2IOModConfigDigOutputSourceIP is 0.0.0.0.')
hm2IOModValueGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2))
hm2IOModValueDigInputTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 1), )
if mibBuilder.loadTexts: hm2IOModValueDigInputTable.setStatus('current')
if mibBuilder.loadTexts: hm2IOModValueDigInputTable.setDescription('IO module value table for inputs')
hm2IOModValueDigInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 1, 1), ).setIndexNames((0, "HM2-IOMODULE-MIB", "hm2IOModValueDigInputModID"), (0, "HM2-IOMODULE-MIB", "hm2IOModValueDigInputID"))
if mibBuilder.loadTexts: hm2IOModValueDigInputEntry.setStatus('current')
if mibBuilder.loadTexts: hm2IOModValueDigInputEntry.setDescription('IO module value entry for inputs')
hm2IOModValueDigInputModID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hm2IOModValueDigInputModID.setStatus('current')
if mibBuilder.loadTexts: hm2IOModValueDigInputModID.setDescription('The module ID of an input. Module ID 0 corresponds to the power supply module.')
hm2IOModValueDigInputID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hm2IOModValueDigInputID.setStatus('current')
if mibBuilder.loadTexts: hm2IOModValueDigInputID.setDescription('The ID of an input.')
hm2IOModValueDigInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-available", 0), ("high", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2IOModValueDigInputValue.setStatus('current')
if mibBuilder.loadTexts: hm2IOModValueDigInputValue.setDescription('Status of the input. If the value is not-available(0), then the IO module is not plugged in, if the value is high(1), the input has high (+24V) value, if the value is low(2), the input has low (0V) value.')
hm2IOModValueDigOutputTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 2), )
if mibBuilder.loadTexts: hm2IOModValueDigOutputTable.setStatus('current')
if mibBuilder.loadTexts: hm2IOModValueDigOutputTable.setDescription('IO module value table for outputs')
hm2IOModValueDigOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 2, 1), ).setIndexNames((0, "HM2-IOMODULE-MIB", "hm2IOModValueDigOutputModID"), (0, "HM2-IOMODULE-MIB", "hm2IOModValueDigOutputID"))
if mibBuilder.loadTexts: hm2IOModValueDigOutputEntry.setStatus('current')
if mibBuilder.loadTexts: hm2IOModValueDigOutputEntry.setDescription('IO module value entry for outputs')
hm2IOModValueDigOutputModID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hm2IOModValueDigOutputModID.setStatus('current')
if mibBuilder.loadTexts: hm2IOModValueDigOutputModID.setDescription('The module ID of an Output. Module ID 0 corresponds to the power supply module.')
hm2IOModValueDigOutputID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hm2IOModValueDigOutputID.setStatus('current')
if mibBuilder.loadTexts: hm2IOModValueDigOutputID.setDescription('The ID of an Output.')
hm2IOModValueDigOutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 100, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("not-available", 0), ("high", 1), ("low", 2), ("invalid", 3), ("not-configured", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2IOModValueDigOutputValue.setStatus('current')
if mibBuilder.loadTexts: hm2IOModValueDigOutputValue.setDescription('Status of the output. If the value is not-available(0), then the IO module is not plugged in, if the value is high(1), the output has high (+24V) value, if the value is low(2), the output has low (0V) value. If the value is invalid (3), the output has low (0V) value and the IO input source is configured but cannot be read. If the value is not-configured (4), the output has low (0V) value and has no IO input source configured.')
hm2IOModDigInputChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 100, 0, 1)).setObjects(("HM2-IOMODULE-MIB", "hm2IOModValueDigInputValue"))
if mibBuilder.loadTexts: hm2IOModDigInputChangeTrap.setStatus('current')
if mibBuilder.loadTexts: hm2IOModDigInputChangeTrap.setDescription('This trap is sent if the state of an input changes. This trap is sent only when hm2IOModConfigDigInputSnmpTrap is set to enabled (1).')
hm2IOModDigOutputChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 100, 0, 2)).setObjects(("HM2-IOMODULE-MIB", "hm2IOModValueDigOutputValue"))
if mibBuilder.loadTexts: hm2IOModDigOutputChangeTrap.setStatus('current')
if mibBuilder.loadTexts: hm2IOModDigOutputChangeTrap.setDescription('This trap is sent if the state of an input changes. This trap is sent when hm2IOModConfigDigOutputSnmpTrap is set to enabled (1) or when the output value changes from or to invalid (3).')
mibBuilder.exportSymbols("HM2-IOMODULE-MIB", hm2IOModValueDigOutputModID=hm2IOModValueDigOutputModID, hm2IOModConfigDigOutputSourcePort=hm2IOModConfigDigOutputSourcePort, hm2IOModConfigDigOutputID=hm2IOModConfigDigOutputID, hm2IOModConfigDigOutputRefreshInterval=hm2IOModConfigDigOutputRefreshInterval, hm2IOModConfigDigOutputAdminState=hm2IOModConfigDigOutputAdminState, hm2IOModValueDigInputTable=hm2IOModValueDigInputTable, hm2IOModConfigDigInputLogEvent=hm2IOModConfigDigInputLogEvent, hm2IOModValueDigInputValue=hm2IOModValueDigInputValue, hm2IOModDigInputChangeTrap=hm2IOModDigInputChangeTrap, hm2IOModConfigGroup=hm2IOModConfigGroup, hm2IOModConfigDigOutputEntry=hm2IOModConfigDigOutputEntry, hm2IOModConfigCommon=hm2IOModConfigCommon, hm2IOModValueDigInputModID=hm2IOModValueDigInputModID, hm2IOModConfigDigInputEntry=hm2IOModConfigDigInputEntry, hm2IOModConfigDigOutputSourceID=hm2IOModConfigDigOutputSourceID, hm2IOModDigOutputChangeTrap=hm2IOModDigOutputChangeTrap, hm2IOModValueGroup=hm2IOModValueGroup, hm2IOModConfigDigInputModID=hm2IOModConfigDigInputModID, hm2IOModValueDigOutputEntry=hm2IOModValueDigOutputEntry, hm2IOModConfigDigOutputSnmpTrap=hm2IOModConfigDigOutputSnmpTrap, hm2IOModValueDigInputEntry=hm2IOModValueDigInputEntry, hm2IOModConfigDigOutputRetryCount=hm2IOModConfigDigOutputRetryCount, hm2IOModConfigDigOutputSourceAddress=hm2IOModConfigDigOutputSourceAddress, hm2IOModValueDigInputID=hm2IOModValueDigInputID, PYSNMP_MODULE_ID=hm2IOModuleMib, hm2IOModuleMibObjects=hm2IOModuleMibObjects, hm2IOModConfigDigInputTable=hm2IOModConfigDigInputTable, hm2IOModConfigDigInputAdminState=hm2IOModConfigDigInputAdminState, hm2IOModConfigDigOutputLogEvent=hm2IOModConfigDigOutputLogEvent, hm2IOModConfigDigOutputTable=hm2IOModConfigDigOutputTable, hm2IOModConfigDigOutputSourceAddressType=hm2IOModConfigDigOutputSourceAddressType, hm2IOModConfigDigOutputModID=hm2IOModConfigDigOutputModID, hm2IOModConfigDigOutputSourceModID=hm2IOModConfigDigOutputSourceModID, hm2IOModuleMibNotifications=hm2IOModuleMibNotifications, hm2IOModValueDigOutputTable=hm2IOModValueDigOutputTable, hm2IOModConfigDigInputID=hm2IOModConfigDigInputID, hm2IOModuleMib=hm2IOModuleMib, hm2IOModValueDigOutputValue=hm2IOModValueDigOutputValue, hm2IOModConfigDigInputSnmpTrap=hm2IOModConfigDigInputSnmpTrap, hm2IOModConfigDigInputRefreshInterval=hm2IOModConfigDigInputRefreshInterval, hm2IOModValueDigOutputID=hm2IOModValueDigOutputID)
