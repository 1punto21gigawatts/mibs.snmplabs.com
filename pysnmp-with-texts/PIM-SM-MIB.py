#
# PySNMP MIB module PIM-SM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PIM-SM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:40:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibIdentifier, Bits, Counter64, ObjectIdentity, IpAddress, NotificationType, ModuleIdentity, Counter32, iso, Unsigned32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "Bits", "Counter64", "ObjectIdentity", "IpAddress", "NotificationType", "ModuleIdentity", "Counter32", "iso", "Unsigned32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TextualConvention, DisplayString, RowStatus, MacAddress, TruthValue, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "MacAddress", "TruthValue", "PhysAddress")
swPimSmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 52))
if mibBuilder.loadTexts: swPimSmMIB.setLastUpdated('0711270000Z')
if mibBuilder.loadTexts: swPimSmMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swPimSmMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swPimSmMIB.setDescription('The Structure of PIM SM Information for the proprietary enterprise.')
swPimSmCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 52, 1))
swPimSmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 52, 2))
swPimSmMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 52, 3))
swPimSmGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimSmGlobalState.setStatus('current')
if mibBuilder.loadTexts: swPimSmGlobalState.setDescription(' Used to control PIM-SM state.')
swPimRegisterProbeTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimRegisterProbeTime.setStatus('current')
if mibBuilder.loadTexts: swPimRegisterProbeTime.setDescription('Used to set a time to send a probe message from the Designated Router (DR) to the Rendezvous Point (RP) before the Register Suppression time expires. If a Register Stop message is received by the DR, the Register Suppression Time will be restarted. If no Register Stop message is received within the probe time, Register Packets will be resent to the RP. The default value is 5 seconds.')
swPimRegisterSuppressionTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimRegisterSuppressionTime.setStatus('current')
if mibBuilder.loadTexts: swPimRegisterSuppressionTime.setDescription('The time interval between receiving a Register-Stop message and restarting the process of sending of register messages again. A lower value represents an increase in register messages being sent to the RP, while a higher value represents a longer latency period for new receivers wishing to join the group.')
swPimInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3), )
if mibBuilder.loadTexts: swPimInfoTable.setStatus('current')
if mibBuilder.loadTexts: swPimInfoTable.setDescription('The PIM Information Table contains PIM related information, such as DR priority.')
swPimInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1), ).setIndexNames((0, "PIM-SM-MIB", "swPimInfoInterface"))
if mibBuilder.loadTexts: swPimInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swPimInfoEntry.setDescription('An entry in the PIM Information Table.')
swPimInfoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: swPimInfoInterface.setStatus('current')
if mibBuilder.loadTexts: swPimInfoInterface.setDescription('The ifIndex value of this PIM interface.')
swPimInfoAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimInfoAddress.setStatus('current')
if mibBuilder.loadTexts: swPimInfoAddress.setDescription('The IP address of the PIM interface.')
swPimInfoNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimInfoNetMask.setStatus('current')
if mibBuilder.loadTexts: swPimInfoNetMask.setDescription('The network mask for the IP address of the PIM interface.')
swPimInfoDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimInfoDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: swPimInfoDesignatedRouter.setDescription('The Designated Router on this PIM interface. For point-to- point interfaces, this object has the value 0.0.0.0.')
swPimInfoHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18724)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimInfoHelloInterval.setStatus('current')
if mibBuilder.loadTexts: swPimInfoHelloInterval.setDescription('The frequency at which PIM Hello messages are transmitted on this interface.')
swPimInfoJoinPruneInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18724))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimInfoJoinPruneInterval.setStatus('current')
if mibBuilder.loadTexts: swPimInfoJoinPruneInterval.setDescription('The frequency at which PIM Join/Prune messages are transmitted on this PIM interface. The default value of this object is the pimJoinPruneInterval.')
swPimInfoDRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimInfoDRPriority.setStatus('current')
if mibBuilder.loadTexts: swPimInfoDRPriority.setDescription("The DR Priority sets the priority of an IP interface to become the Designated router for the multiple access network. A numerically larger priority is always preferred, yet a lower number represents a higher priority. A router's knowledge of the current DR on an interface can change when a PIM Hello message is received, when a neighbor timers out, or when a router's own DR priority changes.")
swPimInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dense", 1), ("sparse", 2), ("sparseDense", 3))).clone('dense')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimInfoMode.setStatus('current')
if mibBuilder.loadTexts: swPimInfoMode.setDescription('The configured mode of this PIM interface. A value of sparseDense is only valid for PIMv1.')
swPimInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimInfoState.setStatus('current')
if mibBuilder.loadTexts: swPimInfoState.setDescription('The configured state of this PIM interface.')
swPimCbsrInfoMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1))
swpimCbsrBootStrapPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swpimCbsrBootStrapPeriod.setStatus('current')
if mibBuilder.loadTexts: swpimCbsrBootStrapPeriod.setDescription('The time interval, in seconds, for Boot Strap Messages originating from the elected BSR.')
swPimCbsrHashMaskLen = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimCbsrHashMaskLen.setStatus('current')
if mibBuilder.loadTexts: swPimCbsrHashMaskLen.setDescription('The length (in bits) of the mask to use for the hash function(This hash algorithm will be used to determine which candidate RP will be the RP for the PIM-SM network.).For IPv4 we recommend a value of 30. For IPv6 we recommand a value of 126.')
swPimCbsrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1, 3), )
if mibBuilder.loadTexts: swPimCbsrTable.setStatus('current')
if mibBuilder.loadTexts: swPimCbsrTable.setDescription('The PIM CBSR Table contains the candidate bootstrap router related information, such as interface name, IP address and priority.')
swPimCbsrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1, 3, 1), ).setIndexNames((0, "PIM-SM-MIB", "swPimCbsrInterface"))
if mibBuilder.loadTexts: swPimCbsrEntry.setStatus('current')
if mibBuilder.loadTexts: swPimCbsrEntry.setDescription('An entry in the PIM CBSR Table.')
swPimCbsrInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: swPimCbsrInterface.setStatus('current')
if mibBuilder.loadTexts: swPimCbsrInterface.setDescription('The ifIndex value of this PIM interface.')
swPimCbsrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimCbsrIpAddress.setStatus('current')
if mibBuilder.loadTexts: swPimCbsrIpAddress.setDescription('The IP address of this PIM interface.')
swPimCbsrSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimCbsrSubnetMask.setStatus('current')
if mibBuilder.loadTexts: swPimCbsrSubnetMask.setDescription('The IP netmask for this PIM interface.')
swPimCbsrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimCbsrPriority.setStatus('current')
if mibBuilder.loadTexts: swPimCbsrPriority.setDescription('The preference value for the local candidate interface to become a bootstrap router. The value of -1 is used to indicate the local candidate interface cannot become the BSR.')
swPimCandidateRPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2))
swPimCandidateRPHoldtime = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimCandidateRPHoldtime.setStatus('current')
if mibBuilder.loadTexts: swPimCandidateRPHoldtime.setDescription("Used to set the time CRP advertisements remain valid on the PIM-SM enabled network. If these advertisements, set here, aren't received by the BSR within this time period, the CRP will be removed from the list of candidates. 0 states to the BSR that this CRP should immediately be removed. Default: 150 seconds.")
swPimCandidateRPPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimCandidateRPPriority.setStatus('current')
if mibBuilder.loadTexts: swPimCandidateRPPriority.setDescription('This value determines the priority of a CRP to become the RP for the distribution tree. A lower value denotes a higher priority. If there is a tie for priority, the device with the highest IP address will become the RP. This information is stored in the BSR, along with the RP address and corresponding encoded group address.')
swPimCandidateRPWildcardPrefixCnt = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimCandidateRPWildcardPrefixCnt.setStatus('current')
if mibBuilder.loadTexts: swPimCandidateRPWildcardPrefixCnt.setDescription("The number of enocded group addresses included in the message; indicating the group prefixes for which the C-RP is advertising. A Prefix-Cnt of '0' implies a prefix of 224.0.0.0 with mask length of 4; i.e. all multicast groups. If the C-RP is not configured with Group-prefix information, the C-RP puts a default value of '0' in this field.")
swPimCandidateRPTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 4), )
if mibBuilder.loadTexts: swPimCandidateRPTable.setStatus('current')
if mibBuilder.loadTexts: swPimCandidateRPTable.setDescription('The (conceptual) table listing the IP multicast groups for which the local router is to advertise itself as a Candidate-RP when the value of pimComponentCRPHoldTime is non-zero. If this table is empty, then the local router will advertise itself as a Candidate-RP for all groups (providing the value of pimComponentCRPHoldTime is non- zero).')
swPimCandidateRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 4, 1), ).setIndexNames((0, "PIM-SM-MIB", "swPimCandidateRPGroupAddress"), (0, "PIM-SM-MIB", "swPimCandidateRPGroupMask"))
if mibBuilder.loadTexts: swPimCandidateRPEntry.setStatus('current')
if mibBuilder.loadTexts: swPimCandidateRPEntry.setDescription('An entry (conceptual row) in the pimCandidateRPTable.')
swPimCandidateRPGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: swPimCandidateRPGroupAddress.setStatus('current')
if mibBuilder.loadTexts: swPimCandidateRPGroupAddress.setDescription('The IP multicast group address which, when combined with pimCandidateRPGroupMask, identifies a group prefix for which the local router will advertise itself as a Candidate-RP.')
swPimCandidateRPGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: swPimCandidateRPGroupMask.setStatus('current')
if mibBuilder.loadTexts: swPimCandidateRPGroupMask.setDescription('The multicast group address mask which, when combined with pimCandidateRPGroupMask, identifies a group prefix for which the local router will advertise itself as a Candidate-RP.')
swPimCandidateRPInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPimCandidateRPInterface.setStatus('current')
if mibBuilder.loadTexts: swPimCandidateRPInterface.setDescription('The name of the interface which will be advertised as a Candidate-RP.')
swPimCandidateRPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPimCandidateRPRowStatus.setStatus('current')
if mibBuilder.loadTexts: swPimCandidateRPRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
swPimNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 3), )
if mibBuilder.loadTexts: swPimNeighborTable.setStatus('current')
if mibBuilder.loadTexts: swPimNeighborTable.setDescription("The (conceptual) table listing the router's PIM neighbors.")
swPimNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 3, 1), ).setIndexNames((0, "PIM-SM-MIB", "swPimNeighborAddress"))
if mibBuilder.loadTexts: swPimNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: swPimNeighborEntry.setDescription('An entry (conceptual row) in the swPimNeighborTable.')
swPimNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: swPimNeighborAddress.setStatus('current')
if mibBuilder.loadTexts: swPimNeighborAddress.setDescription('The IP address of the PIM neighbor for which to find PIM neighbor information.')
swPimNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 3, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimNeighborIfIndex.setStatus('current')
if mibBuilder.loadTexts: swPimNeighborIfIndex.setDescription('The value of ifIndex for the interface used for which to find PIM neighbor information.')
swPimNeighborExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimNeighborExpiryTime.setStatus('current')
if mibBuilder.loadTexts: swPimNeighborExpiryTime.setDescription('The minimum time remaining before this PIM neighbor ages out.')
swPimSptMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 4))
swPimLastHopSptSwitchover = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimLastHopSptSwitchover.setStatus('current')
if mibBuilder.loadTexts: swPimLastHopSptSwitchover.setDescription('Used by the last hop router to decide whether to receive the multicast data from the shared tree or switch over to the shortest path tree. When the switchover mode is set to be never, the last hop router will always receive the multicast data from the shared tree. When the mode is set to immediately, the last hop router will always receive the multicast data from the shortest path tree.')
swPimRegChksumIncDataTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 5), )
if mibBuilder.loadTexts: swPimRegChksumIncDataTable.setStatus('current')
if mibBuilder.loadTexts: swPimRegChksumIncDataTable.setDescription('The PIM Register Checksum Including Data Table contains the PIM register checksum including data information, such as RP address and state.')
swPimRegChksumIncDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 5, 1), ).setIndexNames((0, "PIM-SM-MIB", "swL3SwPimRegChksumIncDataRpAddr"))
if mibBuilder.loadTexts: swPimRegChksumIncDataEntry.setStatus('current')
if mibBuilder.loadTexts: swPimRegChksumIncDataEntry.setDescription('An entry in the PIM Register Checksum Including Data Table.')
swL3SwPimRegChksumIncDataRpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: swL3SwPimRegChksumIncDataRpAddr.setStatus('current')
if mibBuilder.loadTexts: swL3SwPimRegChksumIncDataRpAddr.setDescription('Specifies the RP address.')
swL3SwPimRegChksumIncDataState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3SwPimRegChksumIncDataState.setStatus('current')
if mibBuilder.loadTexts: swL3SwPimRegChksumIncDataState.setDescription('The state of register checksum including data for RPs.')
swPimStaticRPTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 6), )
if mibBuilder.loadTexts: swPimStaticRPTable.setStatus('current')
if mibBuilder.loadTexts: swPimStaticRPTable.setDescription('The PIM Static RP Table contains the PIM static RP related information, such as group address, group mask, RP address and RP row status.')
swPimStaticRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 6, 1), ).setIndexNames((0, "PIM-SM-MIB", "swPimStaticRPGroupAddress"), (0, "PIM-SM-MIB", "swPimStaticRPGroupMask"), (0, "PIM-SM-MIB", "swPimStaticRPAddress"))
if mibBuilder.loadTexts: swPimStaticRPEntry.setStatus('current')
if mibBuilder.loadTexts: swPimStaticRPEntry.setDescription('An entry in the PIM Static RP Table.')
swPimStaticRPGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: swPimStaticRPGroupAddress.setStatus('current')
if mibBuilder.loadTexts: swPimStaticRPGroupAddress.setDescription('The IP multicast group address which, when combined with swPimStaticRPGroupMask, identifies a group prefix for which the local router will advertise itself as a static RP.')
swPimStaticRPGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: swPimStaticRPGroupMask.setStatus('current')
if mibBuilder.loadTexts: swPimStaticRPGroupMask.setDescription('The multicast group address mask which, when combined with swPimStaticRPGroupAddress, identifies a group prefix for which the local router will advertise itself as a static RP.')
swPimStaticRPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 6, 1, 3), IpAddress())
if mibBuilder.loadTexts: swPimStaticRPAddress.setStatus('current')
if mibBuilder.loadTexts: swPimStaticRPAddress.setDescription('The (unicast) address of the interface which will be advertised as a static RP.')
swPimStaticRPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPimStaticRPRowStatus.setStatus('current')
if mibBuilder.loadTexts: swPimStaticRPRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
swPimIpMRouteTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7), )
if mibBuilder.loadTexts: swPimIpMRouteTable.setStatus('current')
if mibBuilder.loadTexts: swPimIpMRouteTable.setDescription('The (conceptual) table listing PIM-specific information on a subset of the rows of the ipMRouteTable defined in the IP Multicast MIB.')
swPimIpMRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1), ).setIndexNames((0, "PIM-SM-MIB", "swPimIpMRouteGroup"), (0, "PIM-SM-MIB", "swPimIpMRouteSource"), (0, "PIM-SM-MIB", "swPimIpMRouteSourceMask"))
if mibBuilder.loadTexts: swPimIpMRouteEntry.setStatus('current')
if mibBuilder.loadTexts: swPimIpMRouteEntry.setDescription('An entry (conceptual row) in the pimIpMRouteTable. There is one entry, per entry in the ipMRouteTable, whose incoming interface is running PIM.')
swPimIpMRouteGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: swPimIpMRouteGroup.setStatus('current')
if mibBuilder.loadTexts: swPimIpMRouteGroup.setDescription('The IP multicast group address for which this entry contains multicast routing information.')
swPimIpMRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 2), IpAddress())
if mibBuilder.loadTexts: swPimIpMRouteSource.setStatus('current')
if mibBuilder.loadTexts: swPimIpMRouteSource.setDescription('The network address which, when combined with the corresponding value of ipMRouteSourceMask, identifies the sources for which this entry contains multicast routing information.')
swPimIpMRouteSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 3), IpAddress())
if mibBuilder.loadTexts: swPimIpMRouteSourceMask.setStatus('current')
if mibBuilder.loadTexts: swPimIpMRouteSourceMask.setDescription('The network mask which, when combined with the corresponding value of ipMRouteSource, identifies the sources for which this entry contains multicast routing information.')
swPimIpMRouteUpstreamAssertTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimIpMRouteUpstreamAssertTimer.setStatus('current')
if mibBuilder.loadTexts: swPimIpMRouteUpstreamAssertTimer.setDescription('The time remaining before the router changes its upstream neighbor back to its RPF neighbor. This timer is called the Assert timer in the PIM Sparse and Dense mode specification. A value of 0 indicates that no Assert timer has changed the upstream neighbor away from the RPF neighbor.')
swPimIpMRouteAssertMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimIpMRouteAssertMetric.setStatus('current')
if mibBuilder.loadTexts: swPimIpMRouteAssertMetric.setDescription('The metric advertised by the assert winner on the upstream interface, or 0 if no such assert is received.')
swPimIpMRouteAssertMetricPref = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimIpMRouteAssertMetricPref.setStatus('current')
if mibBuilder.loadTexts: swPimIpMRouteAssertMetricPref.setDescription('The preference advertised by the assert winner on the upstream interface, or 0 if no such assert is in effect.')
swPimIpMRouteAssertRPTBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimIpMRouteAssertRPTBit.setStatus('current')
if mibBuilder.loadTexts: swPimIpMRouteAssertRPTBit.setDescription('The value of the RPT-bit advertised by the assert winner on the upstream interface, or false if no such assert is in effect.')
swPimIpMRouteFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 8), Bits().clone(namedValues=NamedValues(("rpt", 0), ("spt", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimIpMRouteFlags.setStatus('current')
if mibBuilder.loadTexts: swPimIpMRouteFlags.setDescription('This object describes PIM-specific flags related to a multicast state entry. See the PIM Sparse Mode specification for the meaning of the RPT and SPT bits.')
swPimIpMRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimIpMRouteType.setStatus('current')
if mibBuilder.loadTexts: swPimIpMRouteType.setDescription('This object describes the PIM-specific type as related to a multicast state entry.')
swPimRPSetMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8))
swPimRPSetBootstrapRouter = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimRPSetBootstrapRouter.setStatus('current')
if mibBuilder.loadTexts: swPimRPSetBootstrapRouter.setDescription('Specifies a Bootstrap Router.')
swPimRPSetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8, 2), )
if mibBuilder.loadTexts: swPimRPSetTable.setStatus('current')
if mibBuilder.loadTexts: swPimRPSetTable.setDescription('The (conceptual) table listing PIM information for candidate Rendezvous Points (CRPs) for IP multicast groups. When the local router is the BSR, this information is obtained from received Candidate-RP-Advertisements. When the local router is not the BSR, this information is obtained from received RP-Set messages.')
swPimRPSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8, 2, 1), ).setIndexNames((0, "PIM-SM-MIB", "swPimRPSetComponent"), (0, "PIM-SM-MIB", "swPimRPSetGroupAddress"), (0, "PIM-SM-MIB", "swPimRPSetGroupMask"), (0, "PIM-SM-MIB", "swPimRPSetAddress"))
if mibBuilder.loadTexts: swPimRPSetEntry.setStatus('current')
if mibBuilder.loadTexts: swPimRPSetEntry.setDescription('An entry (conceptual row) in the pimRPSetTable.')
swPimRPSetComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: swPimRPSetComponent.setStatus('current')
if mibBuilder.loadTexts: swPimRPSetComponent.setDescription(' A number uniquely identifying the component. Each protocol instance connected to a separate domain should have a different index value.')
swPimRPSetGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: swPimRPSetGroupAddress.setStatus('current')
if mibBuilder.loadTexts: swPimRPSetGroupAddress.setDescription('The IP multicast group address which, when combined with pimRPSetGroupMask, gives the group a prefix. This prefix will determine for which entry CRP information is to be displayed, and which entry contains information about the Candidate-RP.')
swPimRPSetGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: swPimRPSetGroupMask.setStatus('current')
if mibBuilder.loadTexts: swPimRPSetGroupMask.setDescription('The multicast group address mask which, when combined with pimRPSetGroupAddress, gives the group a prefix to determine and which entry contains which entry CRP information is to be displayed for which this entry contains information about the Candidate-RP.')
swPimRPSetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8, 2, 1, 4), IpAddress())
if mibBuilder.loadTexts: swPimRPSetAddress.setStatus('current')
if mibBuilder.loadTexts: swPimRPSetAddress.setDescription('The IP address of the Candidate-RP.')
swPimRPSetType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimRPSetType.setStatus('current')
if mibBuilder.loadTexts: swPimRPSetType.setDescription(' The type of a Candidate-RP.')
mibBuilder.exportSymbols("PIM-SM-MIB", swPimCandidateRPPriority=swPimCandidateRPPriority, swPimStaticRPGroupAddress=swPimStaticRPGroupAddress, swPimInfoEntry=swPimInfoEntry, swPimIpMRouteAssertMetricPref=swPimIpMRouteAssertMetricPref, swPimSmCtrl=swPimSmCtrl, swPimNeighborAddress=swPimNeighborAddress, swPimInfoHelloInterval=swPimInfoHelloInterval, swPimIpMRouteFlags=swPimIpMRouteFlags, swPimCbsrHashMaskLen=swPimCbsrHashMaskLen, swPimCbsrInfoMgmt=swPimCbsrInfoMgmt, swPimCandidateRPEntry=swPimCandidateRPEntry, swPimInfoDRPriority=swPimInfoDRPriority, swPimCbsrInterface=swPimCbsrInterface, swPimInfoAddress=swPimInfoAddress, swPimIpMRouteType=swPimIpMRouteType, swPimSmMIB=swPimSmMIB, PYSNMP_MODULE_ID=swPimSmMIB, swpimCbsrBootStrapPeriod=swpimCbsrBootStrapPeriod, swPimRegChksumIncDataTable=swPimRegChksumIncDataTable, swPimInfoState=swPimInfoState, swPimNeighborExpiryTime=swPimNeighborExpiryTime, swPimStaticRPRowStatus=swPimStaticRPRowStatus, swPimSmMgmt=swPimSmMgmt, swPimCbsrIpAddress=swPimCbsrIpAddress, swPimIpMRouteGroup=swPimIpMRouteGroup, swPimIpMRouteSource=swPimIpMRouteSource, swPimIpMRouteUpstreamAssertTimer=swPimIpMRouteUpstreamAssertTimer, swPimRPSetMgmt=swPimRPSetMgmt, swL3SwPimRegChksumIncDataRpAddr=swL3SwPimRegChksumIncDataRpAddr, swPimInfoDesignatedRouter=swPimInfoDesignatedRouter, swPimCandidateRPRowStatus=swPimCandidateRPRowStatus, swPimCbsrPriority=swPimCbsrPriority, swPimRPSetTable=swPimRPSetTable, swPimRegisterSuppressionTime=swPimRegisterSuppressionTime, swPimStaticRPGroupMask=swPimStaticRPGroupMask, swPimRPSetAddress=swPimRPSetAddress, swPimLastHopSptSwitchover=swPimLastHopSptSwitchover, swPimStaticRPTable=swPimStaticRPTable, swPimRPSetComponent=swPimRPSetComponent, swPimInfoMode=swPimInfoMode, swPimCandidateRPHoldtime=swPimCandidateRPHoldtime, swPimCandidateRPTable=swPimCandidateRPTable, swPimRegisterProbeTime=swPimRegisterProbeTime, swPimSptMgmt=swPimSptMgmt, swL3SwPimRegChksumIncDataState=swL3SwPimRegChksumIncDataState, swPimRPSetGroupAddress=swPimRPSetGroupAddress, swPimRegChksumIncDataEntry=swPimRegChksumIncDataEntry, swPimRPSetType=swPimRPSetType, swPimStaticRPEntry=swPimStaticRPEntry, swPimSmGlobalState=swPimSmGlobalState, swPimIpMRouteTable=swPimIpMRouteTable, swPimRPSetBootstrapRouter=swPimRPSetBootstrapRouter, swPimCandidateRPMgmt=swPimCandidateRPMgmt, swPimInfoJoinPruneInterval=swPimInfoJoinPruneInterval, swPimCandidateRPWildcardPrefixCnt=swPimCandidateRPWildcardPrefixCnt, swPimRPSetEntry=swPimRPSetEntry, swPimIpMRouteAssertMetric=swPimIpMRouteAssertMetric, swPimSmInfo=swPimSmInfo, swPimInfoInterface=swPimInfoInterface, swPimCandidateRPInterface=swPimCandidateRPInterface, swPimNeighborTable=swPimNeighborTable, swPimCandidateRPGroupAddress=swPimCandidateRPGroupAddress, swPimIpMRouteEntry=swPimIpMRouteEntry, swPimStaticRPAddress=swPimStaticRPAddress, swPimInfoTable=swPimInfoTable, swPimCbsrEntry=swPimCbsrEntry, swPimCandidateRPGroupMask=swPimCandidateRPGroupMask, swPimIpMRouteAssertRPTBit=swPimIpMRouteAssertRPTBit, swPimCbsrSubnetMask=swPimCbsrSubnetMask, swPimCbsrTable=swPimCbsrTable, swPimNeighborIfIndex=swPimNeighborIfIndex, swPimRPSetGroupMask=swPimRPSetGroupMask, swPimIpMRouteSourceMask=swPimIpMRouteSourceMask, swPimInfoNetMask=swPimInfoNetMask, swPimNeighborEntry=swPimNeighborEntry)
