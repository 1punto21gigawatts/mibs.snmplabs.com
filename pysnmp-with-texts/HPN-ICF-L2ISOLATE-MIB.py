#
# PySNMP MIB module HPN-ICF-L2ISOLATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-L2ISOLATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:39:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, NotificationType, ObjectIdentity, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter64, Integer32, ModuleIdentity, iso, TimeTicks, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "ObjectIdentity", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter64", "Integer32", "ModuleIdentity", "iso", "TimeTicks", "Unsigned32", "Gauge32")
DisplayString, TruthValue, RowStatus, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "MacAddress", "TextualConvention")
hpnicfL2Isolate = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 103))
hpnicfL2Isolate.setRevisions(('2009-05-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfL2Isolate.setRevisionsDescriptions(('Initial version',))
if mibBuilder.loadTexts: hpnicfL2Isolate.setLastUpdated('200905060000Z')
if mibBuilder.loadTexts: hpnicfL2Isolate.setOrganization('')
if mibBuilder.loadTexts: hpnicfL2Isolate.setContactInfo('')
if mibBuilder.loadTexts: hpnicfL2Isolate.setDescription('The MIB module is used for l2 isolation.')
hpnicfL2IsolateObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 103, 1))
hpnicfL2IsolateEnableTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 103, 1, 1), )
if mibBuilder.loadTexts: hpnicfL2IsolateEnableTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfL2IsolateEnableTable.setDescription('A table for enabling/disabling layer-2-isolate for VLAN.')
hpnicfL2IsolateEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 103, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-L2ISOLATE-MIB", "hpnicfL2IsolateVLANIndex"))
if mibBuilder.loadTexts: hpnicfL2IsolateEnableEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfL2IsolateEnableEntry.setDescription('An entry for enabling/disabling layer-2-isolate for VLAN.')
hpnicfL2IsolateVLANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 103, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hpnicfL2IsolateVLANIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfL2IsolateVLANIndex.setDescription('Represents index of VLAN for layer-2-isolate.')
hpnicfL2IsolateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 103, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfL2IsolateEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfL2IsolateEnable.setDescription('Represents the layer-2-isolate status of VLAN.')
hpnicfL2IsolatePermitMACTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 103, 1, 2), )
if mibBuilder.loadTexts: hpnicfL2IsolatePermitMACTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfL2IsolatePermitMACTable.setDescription('A table represents the permitting MAC address for the specific VLAN.')
hpnicfL2IsolatePermitMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 103, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-L2ISOLATE-MIB", "hpnicfL2IsolateVLANIndex"), (0, "HPN-ICF-L2ISOLATE-MIB", "hpnicfL2IsoLatePermitMAC"))
if mibBuilder.loadTexts: hpnicfL2IsolatePermitMACEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfL2IsolatePermitMACEntry.setDescription('Each entry represents the permitting MAC address for the specific VLAN.')
hpnicfL2IsoLatePermitMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 103, 1, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: hpnicfL2IsoLatePermitMAC.setStatus('current')
if mibBuilder.loadTexts: hpnicfL2IsoLatePermitMAC.setDescription('Represents the MAC address permitted in the VLAN.')
hpnicfL2IsoLatePermitMACRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 103, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfL2IsoLatePermitMACRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfL2IsoLatePermitMACRowStatus.setDescription('RowStatus. Three actions are used: active, CreateAndGo, destroy.')
mibBuilder.exportSymbols("HPN-ICF-L2ISOLATE-MIB", hpnicfL2IsolateObject=hpnicfL2IsolateObject, hpnicfL2IsolateVLANIndex=hpnicfL2IsolateVLANIndex, hpnicfL2IsoLatePermitMAC=hpnicfL2IsoLatePermitMAC, hpnicfL2IsolatePermitMACTable=hpnicfL2IsolatePermitMACTable, hpnicfL2IsoLatePermitMACRowStatus=hpnicfL2IsoLatePermitMACRowStatus, hpnicfL2IsolatePermitMACEntry=hpnicfL2IsolatePermitMACEntry, hpnicfL2IsolateEnableTable=hpnicfL2IsolateEnableTable, hpnicfL2IsolateEnableEntry=hpnicfL2IsolateEnableEntry, hpnicfL2IsolateEnable=hpnicfL2IsolateEnable, PYSNMP_MODULE_ID=hpnicfL2Isolate, hpnicfL2Isolate=hpnicfL2Isolate)
