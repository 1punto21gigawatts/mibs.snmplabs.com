#
# PySNMP MIB module MOXA-CN2600-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MOXA-CN2600-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:13:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, IpAddress, NotificationType, Counter64, MibIdentifier, enterprises, TimeTicks, ModuleIdentity, Counter32, Gauge32, ObjectIdentity, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "IpAddress", "NotificationType", "Counter64", "MibIdentifier", "enterprises", "TimeTicks", "ModuleIdentity", "Counter32", "Gauge32", "ObjectIdentity", "Unsigned32", "iso")
MacAddress, DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "DateAndTime", "TextualConvention")
moxa = MibIdentifier((1, 3, 6, 1, 4, 1, 8691))
nport = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2))
cn2600 = ModuleIdentity((1, 3, 6, 1, 4, 1, 8691, 2, 11))
if mibBuilder.loadTexts: cn2600.setLastUpdated('201003040000Z')
if mibBuilder.loadTexts: cn2600.setOrganization('Moxa Inc.')
if mibBuilder.loadTexts: cn2600.setContactInfo('Email: support@moxa.com Tel : +886 2 89191230 ext.300')
if mibBuilder.loadTexts: cn2600.setDescription('The MIB module for Moxa Terminal Server CN2600 series specific information.')
swMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1))
class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'

overview = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 1))
modelName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelName.setStatus('current')
if mibBuilder.loadTexts: modelName.setDescription('The model name of the CN2600.')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('The serial number of the CN2600. Every Terminal Server CN2600 series is assigned a unique serial number before it is shipped.')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('current')
if mibBuilder.loadTexts: firmwareVersion.setDescription('The version of the firmware currently running on the CN2600.')
viewLan1IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viewLan1IpAddress.setStatus('current')
if mibBuilder.loadTexts: viewLan1IpAddress.setDescription("The IP address of the CN2600's LAN1 interface.")
viewLan1MacAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viewLan1MacAddress.setStatus('current')
if mibBuilder.loadTexts: viewLan1MacAddress.setDescription("The MAC address of the CN2600's LAN1 interface.")
viewLan1Speed = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viewLan1Speed.setStatus('current')
if mibBuilder.loadTexts: viewLan1Speed.setDescription("The current speed and link status of the CN2600's built-in LAN1 port. The possible values are 'No link', '10M/Link,' or '100M/Link.'")
viewLan2IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viewLan2IpAddress.setStatus('current')
if mibBuilder.loadTexts: viewLan2IpAddress.setDescription("The IP address of the CN2600's LAN2 interface.")
viewLan2MacAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viewLan2MacAddress.setStatus('current')
if mibBuilder.loadTexts: viewLan2MacAddress.setDescription("The MAC address of the CN2600's LAN2 interface.")
viewLan2Speed = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: viewLan2Speed.setStatus('current')
if mibBuilder.loadTexts: viewLan2Speed.setDescription("The current speed and link status of the CN2600's built-in LAN2 port. The possible values are 'No link', '10M/Link,' or '100M/Link.'")
upTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upTime.setStatus('current')
if mibBuilder.loadTexts: upTime.setDescription('The time (in human-readable notation) since the system was was last re-initialized.')
power1Status = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("power-off", 0), ("power-on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: power1Status.setStatus('current')
if mibBuilder.loadTexts: power1Status.setDescription('The on/off status of power 1')
power2Status = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("power-off", 0), ("power-on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: power2Status.setStatus('current')
if mibBuilder.loadTexts: power2Status.setDescription('The on/off status of power 2 for 2AC model')
basicSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 2))
serverSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 2, 1))
serverName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverName.setStatus('current')
if mibBuilder.loadTexts: serverName.setDescription('A text string used to identify the CN2600.')
serverLocation = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverLocation.setStatus('current')
if mibBuilder.loadTexts: serverLocation.setDescription('A text string used to identify the location of the CN2600. This option is useful for specifying the location or application of different CN2600.')
timeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 2, 2))
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZone.setStatus('current')
if mibBuilder.loadTexts: timeZone.setDescription('The time-zone index of the CN2600.')
localTime = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 2, 2, 2), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localTime.setStatus('current')
if mibBuilder.loadTexts: localTime.setDescription('The system time in seconds since 1970/1/1.')
timeServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 2, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer.setStatus('current')
if mibBuilder.loadTexts: timeServer.setDescription("The Terminal Server CN2600 series uses SNTP (RFC-1769) for auto time calibration. Input the correct 'Time server' IP address or domain name. Once the Terminal Server CN2600 series is configured with the correct Time server address, it will request time information from the Time server every 10 minutes.")
networkSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3))
lan1IpConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1), ("dhcp-BOOTP", 2), ("bootp", 3), ("pppoe", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan1IpConfiguration.setStatus('current')
if mibBuilder.loadTexts: lan1IpConfiguration.setDescription('The IP configuration mode of the CN2600. You can choose from four possible IP configuration modes: Static, DHCP, DHCP/BOOTP, BOOTP, and PPPoE.')
lan1IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan1IpAddress.setStatus('current')
if mibBuilder.loadTexts: lan1IpAddress.setDescription('An IP address is a number assigned to a network device (such as a computer) as a permanent address on the network. Computers use the IP address to identify and talk to each other over the network. Choose a proper IP address that is unique and valid in your network environment.')
lan1NetMask = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan1NetMask.setStatus('current')
if mibBuilder.loadTexts: lan1NetMask.setDescription('A subnet mask represents all of the network hosts at one geographic location, in one building, or on the same local area network. When a packet is sent out over the network, the Terminal Server CN2600 series device server will use the subnet mask to check whether the TCP/IP host specified in the packet is on the local network segment. If the address is on the same network segment as the Terminal Server CN2600 series device server, a connection is established directly from the Terminal Server CN2600 series device server. Otherwise, the connection is established through the given default gateway.')
lan1DefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lan1DefaultGateway.setStatus('current')
if mibBuilder.loadTexts: lan1DefaultGateway.setDescription('A gateway is a network computer that acts as an entrance to another network. Usually, the computers that control traffic within the network or at the local Internet service provider are gateway nodes. The Terminal Server CN2600 series needs to know the IP address of the default gateway computer in order to communicate with the hosts outside the local network environment. For correct gateway IP address information, consult with the network administrator.')
lan1Speed = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("auto-Negation", 0), ("tenMbps-Half", 1), ("tenMbps-Full", 2), ("hundredMbps-Half", 3), ("hundredMbps-Full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan1Speed.setStatus('current')
if mibBuilder.loadTexts: lan1Speed.setDescription('IEEE802.3 Ethernet supports the auto negotiation speed function to get suitable speeds. However, for connecting to some switches/hubs, the communication speed must be fixed at 100 Mbps or 10 Mbps. Users can use this function to fix the communication speed.')
lan1PppoeUserAccount = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan1PppoeUserAccount.setStatus('current')
if mibBuilder.loadTexts: lan1PppoeUserAccount.setDescription('The user account used by the CN2600 to access the Internet using PPPoE. For dynamic broad band networks such as xDSL or Cable Modem, users must enter the username and password that they received from their ISP to establish a network connection.')
lan1PppoePassword = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan1PppoePassword.setStatus('current')
if mibBuilder.loadTexts: lan1PppoePassword.setDescription('The password used by the CN2600 to access the Internet using PPPoE. For dynamic broad band networks such as xDSL or Cable Modem, users must enter the username and password that they received from their ISP to establish a network connection.')
lan2IpConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1), ("dhcp-BOOTP", 2), ("bootp", 3), ("pppoe", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan2IpConfiguration.setStatus('current')
if mibBuilder.loadTexts: lan2IpConfiguration.setDescription('The IP configuration mode of the CN2600. You can choose from four possible IP configuration modes: Static, DHCP, DHCP/BOOTP, BOOTP, and PPPoE.')
lan2IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan2IpAddress.setStatus('current')
if mibBuilder.loadTexts: lan2IpAddress.setDescription('An IP address is a number assigned to a network device (such as a computer) as a permanent address on the network. Computers use the IP address to identify and talk to each other over the network. Choose a proper IP address that is unique and valid in your network environment.')
lan2NetMask = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan2NetMask.setStatus('current')
if mibBuilder.loadTexts: lan2NetMask.setDescription('A subnet mask represents all of the network hosts at one geographic location, in one building, or on the same local area network. When a packet is sent out over the network, the Terminal Server CN2600 series device server will use the subnet mask to check whether the TCP/IP host specified in the packet is on the local network segment. If the address is on the same network segment as the Terminal Server CN2600 series device server, a connection is established directly from the Terminal Server CN2600 series device server. Otherwise, the connection is established through the given default gateway.')
lan2DefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lan2DefaultGateway.setStatus('current')
if mibBuilder.loadTexts: lan2DefaultGateway.setDescription('A gateway is a network computer that acts as an entrance to another network. Usually, the computers that control traffic within the network or at the local Internet service provider are gateway nodes. The Terminal Server CN2600 series needs to know the IP address of the default gateway computer in order to communicate with the hosts outside the local network environment. For correct gateway IP address information, consult with the network administrator.')
lan2Speed = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("auto-Negation", 0), ("tenMbps-Half", 1), ("tenMbps-Full", 2), ("hundredMbps-Half", 3), ("hundredMbps-Full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan2Speed.setStatus('current')
if mibBuilder.loadTexts: lan2Speed.setDescription('IEEE802.3 Ethernet supports the auto negotiation speed function to get suitable speeds. However, for connecting to some switches/hubs, the communication speed must be fixed at 100 Mbps or 10 Mbps. Users can use this function to fix the communication speed.')
lan2PppoeUserAccount = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan2PppoeUserAccount.setStatus('current')
if mibBuilder.loadTexts: lan2PppoeUserAccount.setDescription('The user account used by the CN2600 to access the Internet using PPPoE. For dynamic broad band networks such as xDSL or Cable Modem, users must enter the username and password that they received from their ISP to establish a network connection.')
lan2PppoePassword = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lan2PppoePassword.setStatus('current')
if mibBuilder.loadTexts: lan2PppoePassword.setDescription('The password used by the CN2600 to access the Internet using PPPoE. For dynamic broad band networks such as xDSL or Cable Modem, users must enter the username and password that they received from their ISP to establish a network connection.')
dnsServer1IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer1IpAddr.setStatus('current')
if mibBuilder.loadTexts: dnsServer1IpAddr.setDescription('The first DNS server address. When the user wants to visit a particular website, the computer asks a Domain Name System (DNS) server for the websites correct IP address, and then the computer uses the response to connect to the web server. DNS is the way that Internet domain names are identified and translated into IP addresses. A domain name is an alphanumeric name, such as moxa.com, that it is usually easier to remember. A DNS server is a host that translates this kind of text-based domain name into the numeric IP address used to establish a TCP/IP connection.')
dnsServer2IpAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer2IpAddr.setStatus('current')
if mibBuilder.loadTexts: dnsServer2IpAddr.setDescription('The second DNS server address. When the user wants to visit a particular website, the computer asks a Domain Name System (DNS) server for the websites correct IP address, and then the computer uses the response to connect to the web server. DNS is the way that Internet domain names are identified and translated into IP addresses. A domain name is an alphanumeric name, such as moxa.com, that it is usually easier to remember. A DNS server is a host that translates this kind of text-based domain name into the numeric IP address used to establish a TCP/IP connection.')
winsFunction = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winsFunction.setStatus('current')
if mibBuilder.loadTexts: winsFunction.setDescription('Enable or disable the WINS server.')
winsServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: winsServer.setStatus('current')
if mibBuilder.loadTexts: winsServer.setDescription('If a WINS Server is connected to the network, use this field to record the WINS Servers IP address. TCP/IP uses IP addresses to identify hosts, but users often use symbolic names, such as computer names. The WINS Server, which uses NetBIOS over TCP/IP, contains a dynamic database to map computer names to IP addresses.')
routingProtocol = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("rip-1", 1), ("rip-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingProtocol.setStatus('current')
if mibBuilder.loadTexts: routingProtocol.setDescription('The routing protocol used by the CN2600. This value could be none, RIP-1, or RIP-2.')
gratuitousArp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gratuitousArp.setStatus('current')
if mibBuilder.loadTexts: gratuitousArp.setDescription('Enable or disable the gratuitous ARP function. For some applications, users need the Terminal Server CN2600 series to send broadcast packets to update the ARP table on the server. If the customer enables this function and sets the send period, the Terminal Server CN2600 series will send broadcast packets periodically.')
gratuitousArpSendPeriod = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 3, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gratuitousArpSendPeriod.setStatus('current')
if mibBuilder.loadTexts: gratuitousArpSendPeriod.setDescription('The send period of the gratuitous ARP function.')
portSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4))
opModeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1))
opMode = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 1))
opModePortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 1, 1), )
if mibBuilder.loadTexts: opModePortTable.setStatus('current')
if mibBuilder.loadTexts: opModePortTable.setDescription("The serial ports' operation mode table.")
opModePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 1, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: opModePortEntry.setStatus('current')
if mibBuilder.loadTexts: opModePortEntry.setDescription("The serial port's operation mode entry.")
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
if mibBuilder.loadTexts: portIndex.setDescription('The serial port index.')
portApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 11, 5, 9, 2, 3, 1))).clone(namedValues=NamedValues(("disable", 0), ("device-Control", 4), ("socket", 11), ("redundant-Com", 5), ("drdas", 9), ("terminal", 2), ("reverse-Terminal", 3), ("dial-InOut", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portApplication.setStatus('current')
if mibBuilder.loadTexts: portApplication.setDescription('The application of the serial port. Note that changing this setting may also change the operation mode.')
portMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 20, 22, 23, 24))).clone(namedValues=NamedValues(("real-Com", 2), ("slip", 4), ("slipd", 5), ("ppp", 6), ("disable", 7), ("telnetd", 8), ("dynamic", 9), ("tcp-Server", 10), ("tcp-Client", 13), ("udp", 14), ("pppd", 15), ("term-ASC", 16), ("term-BIN", 17), ("rfc-2217", 20), ("redundant-Com", 22), ("drdas-Real-Com", 23), ("drdas-Tcp-Server", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMode.setStatus('current')
if mibBuilder.loadTexts: portMode.setDescription('The operation mode of the serial port. Note that changing this setting may also change the application.')
application = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2))
deviceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 1))
deviceControlTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 1, 1), )
if mibBuilder.loadTexts: deviceControlTable.setStatus('current')
if mibBuilder.loadTexts: deviceControlTable.setDescription('The Device Control application table.')
deviceControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 1, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: deviceControlEntry.setStatus('current')
if mibBuilder.loadTexts: deviceControlEntry.setDescription('The Device Control application entry.')
deviceControlTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceControlTcpAliveCheck.setStatus('current')
if mibBuilder.loadTexts: deviceControlTcpAliveCheck.setDescription('The TCP alive check time. 0 min: TCP connection will not be closed when the TCP connection is idle. 1 to 99 min: The Terminal Server CN2600 series device server automatically closes the TCP connection if there is no TCP activity for the given time. After the connection is closed, the Terminal Server CN2600 series device server starts listening for another Real COM driver Connection.')
deviceControlMaxConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceControlMaxConnection.setStatus('current')
if mibBuilder.loadTexts: deviceControlMaxConnection.setDescription('Max connection is usually used when the user needs to receive data from different hosts simultaneously. The factory default is 1. In this case, only one specific host can access this port of the Terminal Server CN2600 series device server, and the Real COM driver on that host will have full control over the port. Max. connection = 1: Allows only a single hosts Real COM driver to open the specific Terminal Server CN2600 series device servers serial port. Max connection = 2 to 8: Allows 2 to 8 hosts Real COM drivers to open the specific Terminal Server CN2600 series device servers serial port, at the same time. When multiple hosts Real COM drivers open the serial port at the same time, the COM driver only provides a pure data tunnel without control ability. The serial port parameter will use the firmware settings instead of getting the settings from your application program (AP).')
deviceControlIgnoreJammedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceControlIgnoreJammedIp.setStatus('current')
if mibBuilder.loadTexts: deviceControlIgnoreJammedIp.setDescription("Previously, when Max connection was set to a value greater than 1, and the serial device was transmitting data, if any one of the connected hosts stopped responding, the serial device would wait until the data had been transmitted successfully before transmitting the second group of data to all hosts. Currently, if you select Yes for 'Ignore jammed IP,' the host that is not responding will be ignored, but the data will still be transmitted to the other hosts.")
deviceControlAllowDriverControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceControlAllowDriverControl.setStatus('current')
if mibBuilder.loadTexts: deviceControlAllowDriverControl.setDescription('If Max connection is greater than 1, CN2600 will ignore driver control commands from all connected hosts. However, if you set Allow driver control to YES, control commands will be accepted. Note that since the Terminal Server CN2600 series may get configuration changes from multiple hosts, the most recent command received will take precedence.')
deviceControlConnectionDownRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("always-low", 1), ("always-high", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceControlConnectionDownRTS.setStatus('current')
if mibBuilder.loadTexts: deviceControlConnectionDownRTS.setDescription("For some applications, serial devices must obtain the Ethernet link status by reading the RTS signal from the Terminal Server CN2600 series device server. If this setting is set to 'always low,' RTS will change its state to low if the Ethernet link is off.")
deviceControlConnectionDownDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("always-low", 1), ("always-high", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceControlConnectionDownDTR.setStatus('current')
if mibBuilder.loadTexts: deviceControlConnectionDownDTR.setDescription("For some applications, serial devices must obtain the Ethernet link status by reading the DTR signal from the Terminal Server CN2600 series device server. If this setting is set to 'goes low,' DTR will change its state to low if the Ethernet link is off.")
socket = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2))
socketTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1), )
if mibBuilder.loadTexts: socketTable.setStatus('current')
if mibBuilder.loadTexts: socketTable.setDescription('The Socket application table.')
socketEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: socketEntry.setStatus('current')
if mibBuilder.loadTexts: socketEntry.setDescription('The Socket application entry.')
socketTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpAliveCheck.setStatus('current')
if mibBuilder.loadTexts: socketTcpAliveCheck.setDescription('The TCP alive check time. 0 min: TCP connection will not be closed when the TCP connection is idle. 1 to 99 min: The Terminal Server CN2600 series device server automatically closes the TCP connection if there is no TCP activity for the given time. After the connection is closed, the Terminal Server CN2600 series device server starts listening for another connection.')
socketInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketInactivityTime.setStatus('current')
if mibBuilder.loadTexts: socketInactivityTime.setDescription('0 ms: TCP connection is not closed when the serial line is idle. 1-65535 ms: The Terminal Server CN2600 series device server automatically closes the TCP connection if there is no serial data activity for the given time. After the connection is closed, the Terminal Server CN2600 series starts listening for another TCP connection.')
socketMaxConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketMaxConnection.setStatus('current')
if mibBuilder.loadTexts: socketMaxConnection.setDescription('Max connection is usually used when the user needs to receive data from different hosts simultaneously. The factory default is 1. In this case, only one specific host can access this port of the Terminal Server CN2600 series device server. Max. connection 1: Allows only a single host to open the specific Terminal Server CN2600 series device servers serial port. Max connection 2 to 8: Allows 2 to 8 hosts to open the specific Terminal Server CN2600 series device servers serial port at the same time.')
socketIgnoreJammedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketIgnoreJammedIp.setStatus('current')
if mibBuilder.loadTexts: socketIgnoreJammedIp.setDescription("Previously, when Max connection was set to a value greater than 1, and the serial device was transmitting data, if any one of the connected hosts stopped responding, the serial device would wait until the data had been transmitted successfully before transmitting the second group of data to all hosts. Currently, if you select Yes for 'Ignore jammed IP,' the host that is not responding will be ignored, but the data will still be transmitted to the other hosts.")
socketAllowDriverControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketAllowDriverControl.setStatus('current')
if mibBuilder.loadTexts: socketAllowDriverControl.setDescription('If Max connection is greater than 1, CN2600 will ignore driver control commands from all connected hosts. However, if you set Allow driver control to YES, control commands will be accepted. Note that since the Terminal Server CN2600 series may get configuration changes from multiple hosts, the most recent command received will take precedence.')
socketTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpPort.setStatus('current')
if mibBuilder.loadTexts: socketTcpPort.setDescription("The 'TCP port' is the TCP port that the Terminal Server CN2600 series uses to listen to connections, and that other devices must use to contact the Terminal Server CN2600 series device server.")
socketCmdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketCmdPort.setStatus('current')
if mibBuilder.loadTexts: socketCmdPort.setDescription("The 'Command port' is a TCP port used to listen for IP-Serial Lib commands from the host. In order to prevent a TCP port conflict with other applications, the user can set the Command port to another port if needed. IP-Serial Lib will automatically check the Command Port on the Terminal Server CN2600 series device server to avoid the need for the user to configure the program.")
socketTcpServerConnectionDownRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("always-low", 1), ("always-high", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpServerConnectionDownRTS.setStatus('current')
if mibBuilder.loadTexts: socketTcpServerConnectionDownRTS.setDescription("For some applications, serial devices must obtain the Ethernet link status from the RTS signal sent by the Terminal Server CN2600 series device server. If this setting is set to 'goes low,' RTS will change the state to low if the Ethernet link is off.")
socketTcpServerConnectionDownDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("always-low", 1), ("always-high", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpServerConnectionDownDTR.setStatus('current')
if mibBuilder.loadTexts: socketTcpServerConnectionDownDTR.setDescription("For some applications, serial devices must obtain the Ethernet link status from the DTR signal sent by the Terminal Server CN2600 series device server. If this setting is set to 'goes low,' DTR will change the state to low if the Ethernet link is off.")
socketTcpClientDestinationAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDestinationAddress1.setStatus('current')
if mibBuilder.loadTexts: socketTcpClientDestinationAddress1.setDescription('The Terminal Server CN2600 series can connect actively to a remote host that has this IP address.')
socketTcpClientDestinationPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDestinationPort1.setStatus('current')
if mibBuilder.loadTexts: socketTcpClientDestinationPort1.setDescription('The Terminal Server CN2600 series can connect actively to a remote host that has this TCP port number.')
socketTcpClientDestinationAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDestinationAddress2.setStatus('current')
if mibBuilder.loadTexts: socketTcpClientDestinationAddress2.setDescription('The Terminal Server CN2600 series can connect actively to a remote host that has this IP address.')
socketTcpClientDestinationPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDestinationPort2.setStatus('current')
if mibBuilder.loadTexts: socketTcpClientDestinationPort2.setDescription('The Terminal Server CN2600 series can connect actively to a remote host that has this TCP port number.')
socketTcpClientDestinationAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDestinationAddress3.setStatus('current')
if mibBuilder.loadTexts: socketTcpClientDestinationAddress3.setDescription('The Terminal Server CN2600 series can connect actively to a remote host that has this IP address.')
socketTcpClientDestinationPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDestinationPort3.setStatus('current')
if mibBuilder.loadTexts: socketTcpClientDestinationPort3.setDescription('The Terminal Server CN2600 series can connect actively to a remote host that has this port number.')
socketTcpClientDestinationAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDestinationAddress4.setStatus('current')
if mibBuilder.loadTexts: socketTcpClientDestinationAddress4.setDescription('The Terminal Server CN2600 series can connect actively to a remote host that has this IP address.')
socketTcpClientDestinationPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDestinationPort4.setStatus('current')
if mibBuilder.loadTexts: socketTcpClientDestinationPort4.setDescription('The Terminal Server CN2600 series can connect actively to a remote host that has this port number.')
socketTcpClientDesignatedLocalPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDesignatedLocalPort1.setStatus('current')
if mibBuilder.loadTexts: socketTcpClientDesignatedLocalPort1.setDescription('The local TCP port used to connect actively to the remote host.')
socketTcpClientDesignatedLocalPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDesignatedLocalPort2.setStatus('current')
if mibBuilder.loadTexts: socketTcpClientDesignatedLocalPort2.setDescription('The local TCP port used to connect actively to the remote host.')
socketTcpClientDesignatedLocalPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDesignatedLocalPort3.setStatus('current')
if mibBuilder.loadTexts: socketTcpClientDesignatedLocalPort3.setDescription('The local TCP port used to connect actively to the remote host.')
socketTcpClientDesignatedLocalPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientDesignatedLocalPort4.setStatus('current')
if mibBuilder.loadTexts: socketTcpClientDesignatedLocalPort4.setDescription('The local TCP port used to connect actively to the remote host.')
socketTcpClientConnectionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(257, 258, 514, 1028, 260, 2056, 264))).clone(namedValues=NamedValues(("startup-None", 257), ("anyCharacter-None", 258), ("anyCharacter-InactivityTime", 514), ("dsrOn-DSR-Off", 1028), ("dsrOn-None", 260), ("dcdOn-DCD-Off", 2056), ("dcdOn-None", 264)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketTcpClientConnectionControl.setStatus('current')
if mibBuilder.loadTexts: socketTcpClientConnectionControl.setDescription('Events that cause the TCP client to drop the connection.')
socketUdpDestinationAddress1Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationAddress1Begin.setStatus('current')
if mibBuilder.loadTexts: socketUdpDestinationAddress1Begin.setDescription('The Terminal Server CN2600 series can actively send UDP packets to remote hosts whose IP addresses are in the range between this parameter and socketUdpDestinationAddress1End.')
socketUdpDestinationAddress1End = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationAddress1End.setStatus('current')
if mibBuilder.loadTexts: socketUdpDestinationAddress1End.setDescription('The Terminal Server CN2600 series can actively send UDP packets to remote hosts whose IP addresses are in the range between socketUdpDestinationAddress1Begin and this parameter.')
socketUdpDestinationPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationPort1.setStatus('current')
if mibBuilder.loadTexts: socketUdpDestinationPort1.setDescription('The Terminal Server CN2600 series can actively send UDP packets to remote hosts that have this port number.')
socketUdpDestinationAddress2Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationAddress2Begin.setStatus('current')
if mibBuilder.loadTexts: socketUdpDestinationAddress2Begin.setDescription('The Terminal Server CN2600 series can actively send UDP packets to remote hosts whose IP addresses are in the range between this parameter and socketUdpDestinationAddress2End.')
socketUdpDestinationAddress2End = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationAddress2End.setStatus('current')
if mibBuilder.loadTexts: socketUdpDestinationAddress2End.setDescription('The Terminal Server CN2600 series can actively send UDP packets to the remote hosts whose IP addresses are in the range between socketUdpDestinationAddress2Begin and this parameter.')
socketUdpDestinationPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationPort2.setStatus('current')
if mibBuilder.loadTexts: socketUdpDestinationPort2.setDescription('The Terminal Server CN2600 series can actively send UDP packets to the remote hosts that have this TCP port number.')
socketUdpDestinationAddress3Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationAddress3Begin.setStatus('current')
if mibBuilder.loadTexts: socketUdpDestinationAddress3Begin.setDescription('The Terminal Server CN2600 series can actively send UDP packets to remote hosts whose IP addresses are in the range between this parameter and socketUdpDestinationAddress3End.')
socketUdpDestinationAddress3End = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationAddress3End.setStatus('current')
if mibBuilder.loadTexts: socketUdpDestinationAddress3End.setDescription('The Terminal Server CN2600 series can actively send UDP packets to remote hosts whose IP addresses are in the range between socketUdpDestinationAddress3Begin and this parameter.')
socketUdpDestinationPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationPort3.setStatus('current')
if mibBuilder.loadTexts: socketUdpDestinationPort3.setDescription('The Terminal Server CN2600 series can actively send UDP packets to remote hosts that have this TCP port number.')
socketUdpDestinationAddress4Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 32), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationAddress4Begin.setStatus('current')
if mibBuilder.loadTexts: socketUdpDestinationAddress4Begin.setDescription('The Terminal Server CN2600 series can actively send UDP packets to remote hosts whose IP addresses are in the range between this parameter and socketUdpDestinationAddress4End.')
socketUdpDestinationAddress4End = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationAddress4End.setStatus('current')
if mibBuilder.loadTexts: socketUdpDestinationAddress4End.setDescription('The Terminal Server CN2600 series can actively send UDP packets to remote hosts whose IP addresses are in the range between socketUdpDestinationAddress4Begin and this parameter.')
socketUdpDestinationPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpDestinationPort4.setStatus('current')
if mibBuilder.loadTexts: socketUdpDestinationPort4.setDescription('The Terminal Server CN2600 series can actively send UDP packets to remote hosts that have this TCP port number.')
socketUdpLocalListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 2, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: socketUdpLocalListenPort.setStatus('current')
if mibBuilder.loadTexts: socketUdpLocalListenPort.setDescription('The UDP port that the Terminal Server CN2600 series device server listens to and that other devices must use to contact the Terminal Server CN2600 series device server.')
redundantCom = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 3))
redundantComTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 3, 1), )
if mibBuilder.loadTexts: redundantComTable.setStatus('current')
if mibBuilder.loadTexts: redundantComTable.setDescription('The Redundant COM table.')
redundantComEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 3, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: redundantComEntry.setStatus('current')
if mibBuilder.loadTexts: redundantComEntry.setDescription('The Redundant COM entry.')
redundantComMaxConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantComMaxConnection.setStatus('current')
if mibBuilder.loadTexts: redundantComMaxConnection.setDescription('Max connection is usually used when the user needs to receive data from different hosts simultaneously. The factory default is 1. In this case, only one specific host can access this port of the Terminal Server CN2600 series device server, and the Redundant COM driver on that host will have full control over the port. Max. connection = 1: Allows only a single hosts Redundant COM driver to open the specific Terminal Server CN2600 series device servers serial port. Max connection = 2 to 4: Allows 2 to 4 hosts Redundant COM drivers to open the specific Terminal Server CN2600 series device servers serial port, at the same time. When multiple hosts Redundant COM drivers open the serial port at the same time, the COM driver only provides a pure data tunnel without control ability. The serial port parameter will use the firmware settings instead of getting the settings from your application program (AP).')
redundantComIgnoreJammedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantComIgnoreJammedIp.setStatus('current')
if mibBuilder.loadTexts: redundantComIgnoreJammedIp.setDescription("Previously, when Max connection was set to a value greater than 1, and the serial device was transmitting data, if any one of the connected hosts stopped responding, the serial device would wait until the data had been transmitted successfully before transmitting the second group of data to all hosts. Currently, if you select Yes for 'Ignore jammed IP,' the host that is not responding will be ignored, but the data will still be transmitted to the other hosts.")
redundantComAllowDriverControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantComAllowDriverControl.setStatus('current')
if mibBuilder.loadTexts: redundantComAllowDriverControl.setDescription('If Max connection is greater than 1, CN2600 will ignore driver control commands from all connected hosts. However, if you set Allow driver control to YES, control commands will be accepted. Note that since the Terminal Server CN2600 series may get configuration changes from multiple hosts, the most recent command received will take precedence.')
redundantComConnectionDownRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("always-low", 1), ("always-high", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantComConnectionDownRTS.setStatus('current')
if mibBuilder.loadTexts: redundantComConnectionDownRTS.setDescription("For some applications, serial devices must obtain the Ethernet link status by reading the RTS signal from the Terminal Server CN2600 series device server. If this setting is set to 'always low,' RTS will change its state to low if the Ethernet link is off.")
redundantComConnectionDownDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("always-low", 1), ("always-high", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundantComConnectionDownDTR.setStatus('current')
if mibBuilder.loadTexts: redundantComConnectionDownDTR.setDescription("For some applications, serial devices must obtain the Ethernet link status by reading the DTR signal from the Terminal Server CN2600 series device server. If this setting is set to 'goes low,' DTR will change its state to low if the Ethernet link is off.")
drdas = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 4))
drdasTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 4, 1), )
if mibBuilder.loadTexts: drdasTable.setStatus('current')
if mibBuilder.loadTexts: drdasTable.setDescription('The DRDAS table.')
drdasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 4, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: drdasEntry.setStatus('current')
if mibBuilder.loadTexts: drdasEntry.setDescription('The DRDAS entry.')
drdasTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drdasTcpAliveCheck.setStatus('current')
if mibBuilder.loadTexts: drdasTcpAliveCheck.setDescription('The TCP alive check time. 0 min: TCP connection will not be closed when the TCP connection is idle. 1 to 99 min: The Terminal Server CN2600 series device server automatically closes the TCP connection if there is no TCP activity for the given time. After the connection is closed, the Terminal Server CN2600 series device server starts listening for another Real COM driver Connection.')
drdasInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drdasInactivityTime.setStatus('current')
if mibBuilder.loadTexts: drdasInactivityTime.setDescription('0 ms: TCP connection is not closed when the serial line is idle. 1-65535 ms: The Terminal Server CN2600 series device server automatically closes the TCP connection if there is no serial data activity for the given time. After the connection is closed, the Terminal Server CN2600 series starts listening for another TCP connection.')
drdasIgnoreJammedIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drdasIgnoreJammedIp.setStatus('current')
if mibBuilder.loadTexts: drdasIgnoreJammedIp.setDescription("Previously, when Max connection was set to a value greater than 1, and the serial device was transmitting data, if any one of the connected hosts stopped responding, the serial device would wait until the data had been transmitted successfully before transmitting the second group of data to all hosts. Currently, if you select Yes for 'Ignore jammed IP,' the host that is not responding will be ignored, but the data will still be transmitted to the other hosts.")
drdasPrimaryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 4, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drdasPrimaryIpAddress.setStatus('current')
if mibBuilder.loadTexts: drdasPrimaryIpAddress.setDescription('DRDAS Primary IP Address.')
drdasBackup1IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 4, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drdasBackup1IpAddress.setStatus('current')
if mibBuilder.loadTexts: drdasBackup1IpAddress.setDescription('DRDAS Backup 1 IP Address.')
drdasBackup2IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 4, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drdasBackup2IpAddress.setStatus('current')
if mibBuilder.loadTexts: drdasBackup2IpAddress.setDescription('DRDAS Backup 2 IP Address.')
drdasBackup3IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 4, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drdasBackup3IpAddress.setStatus('current')
if mibBuilder.loadTexts: drdasBackup3IpAddress.setDescription('DRDAS Backup 3 IP Address.')
drdasTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 4, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drdasTcpPort.setStatus('current')
if mibBuilder.loadTexts: drdasTcpPort.setDescription("The 'TCP port' is the TCP port that the Terminal Server CN2600 series uses to listen to connections, and that other devices must use to contact the Terminal Server CN2600 series device server.")
drdasCmdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 4, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drdasCmdPort.setStatus('current')
if mibBuilder.loadTexts: drdasCmdPort.setDescription("The 'Command port' is a TCP port used to listen for IP-Serial Lib commands from the host. In order to prevent a TCP port conflict with other applications, the user can set the Command port to another port if needed. IP-Serial Lib will automatically check the Command Port on the Terminal Server CN2600 series device server to avoid the need for the user to configure the program.")
drdasConnectionDownRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("always-low", 1), ("always-high", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drdasConnectionDownRTS.setStatus('current')
if mibBuilder.loadTexts: drdasConnectionDownRTS.setDescription("For some applications, serial devices must obtain the Ethernet link status by reading the RTS signal from the Terminal Server CN2600 series device server. If this setting is set to 'always low,' RTS will change its state to low if the Ethernet link is off.")
drdasConnectionDownDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("always-low", 1), ("always-high", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drdasConnectionDownDTR.setStatus('current')
if mibBuilder.loadTexts: drdasConnectionDownDTR.setDescription("For some applications, serial devices must obtain the Ethernet link status by reading the DTR signal from the Terminal Server CN2600 series device server. If this setting is set to 'goes low,' DTR will change its state to low if the Ethernet link is off.")
terminal = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5))
terminalTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1), )
if mibBuilder.loadTexts: terminalTable.setStatus('current')
if mibBuilder.loadTexts: terminalTable.setDescription('The Terminal Application table.')
terminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: terminalEntry.setStatus('current')
if mibBuilder.loadTexts: terminalEntry.setDescription('The Terminal Application entry.')
terminalTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalTcpAliveCheck.setStatus('current')
if mibBuilder.loadTexts: terminalTcpAliveCheck.setDescription('The TCP alive check time. 0 min: TCP connection will not be closed if the TCP connection becomes idle. 1 to 99 min: The Terminal Server CN2600 series device server automatically closes the TCP connection if there is no TCP activity for the given time. After the connection is closed, the Terminal Server CN2600 series device server starts listening for another connection from another host.')
terminalInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalInactivityTime.setStatus('current')
if mibBuilder.loadTexts: terminalInactivityTime.setDescription("0 min: TCP connection will not be closed if the serial line becomes idle. 0-99 min: The Terminal Server CN2600 series device server automatically closes the TCP connection if there is no serial data activity for the given time. After the connection is closed, the Terminal Server CN2600 series starts listening for another host's TCP connection.")
terminalAutoLinkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("telnet", 1), ("rlogin", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalAutoLinkProtocol.setStatus('current')
if mibBuilder.loadTexts: terminalAutoLinkProtocol.setDescription("If Auto-Link protocol is set to 'None,' the Terminal Server CN2600 series will not connect to the host automatically. If Auto-Link protocol is set to 'Telnet,' the Terminal Server CN2600 series will connect to the host automatically using Telnet. If Auto-Link protocol is set to 'Rlogin,' the Terminal Server CN2600 series will connect to the host automatically using rlogin.")
terminalPrimaryHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalPrimaryHostAddress.setStatus('current')
if mibBuilder.loadTexts: terminalPrimaryHostAddress.setDescription("If specified, designates a 'permanent' host to which the terminal will always be connected.")
terminalSecondHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalSecondHostAddress.setStatus('current')
if mibBuilder.loadTexts: terminalSecondHostAddress.setDescription("If specified, designates a 'permanent' host to which the terminal will always be connected.")
terminalTelnetTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalTelnetTcpPort.setStatus('current')
if mibBuilder.loadTexts: terminalTelnetTcpPort.setDescription("By default, the Telnet TCP port number is set to 23, which is the default TCP port number for Telnet. If you need to telnet to this Terminal Server CN2600 series device server's serial port, set the Telnet TCP port to a different number.")
terminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalType.setStatus('current')
if mibBuilder.loadTexts: terminalType.setDescription('Defines the terminal type for outgoing connections.')
terminalMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalMaxSessions.setStatus('current')
if mibBuilder.loadTexts: terminalMaxSessions.setDescription('Configure the max. number of sessions.')
terminalChangeSession = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalChangeSession.setStatus('current')
if mibBuilder.loadTexts: terminalChangeSession.setDescription('Defines the control character used to change the terminal session.')
terminalQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalQuit.setStatus('current')
if mibBuilder.loadTexts: terminalQuit.setDescription('Defines the control character used to quit a terminal session.')
terminalBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalBreak.setStatus('current')
if mibBuilder.loadTexts: terminalBreak.setDescription('Defines the control character used to send a Telnet BREAK message.')
terminalInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalInterrupt.setStatus('current')
if mibBuilder.loadTexts: terminalInterrupt.setDescription('Defines the control character used to send a Telnet INTERRUPT message.')
terminalAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: terminalAuthenticationType.setDescription('The terminal authentication type.')
terminalAutoLoginPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalAutoLoginPrompt.setStatus('current')
if mibBuilder.loadTexts: terminalAutoLoginPrompt.setDescription('The prompt string for the automatic login ID. When the Terminal Server CN2600 series receives this string from a remote telnet/rlogin server, it will automatically reply with the user ID.')
terminalPasswordPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalPasswordPrompt.setStatus('current')
if mibBuilder.loadTexts: terminalPasswordPrompt.setDescription('The prompt string for the automatic login password. When the Terminal Server CN2600 series receives this string from a remote telnet/rlogin server, it will automatically reply with the user password.')
terminalLoginUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalLoginUserName.setStatus('current')
if mibBuilder.loadTexts: terminalLoginUserName.setDescription('Terminal login ID for automatic login.')
terminalLoginPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 5, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalLoginPassword.setStatus('current')
if mibBuilder.loadTexts: terminalLoginPassword.setDescription('Terminal login password for automatic login.')
reverseTerminal = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 6))
reverseTerminalTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 6, 1), )
if mibBuilder.loadTexts: reverseTerminalTable.setStatus('current')
if mibBuilder.loadTexts: reverseTerminalTable.setDescription('The Reverse Terminal Application table.')
reverseTerminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 6, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: reverseTerminalEntry.setStatus('current')
if mibBuilder.loadTexts: reverseTerminalEntry.setDescription('The Reverse Terminal Application entry.')
reverseTerminalTcpAliveCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reverseTerminalTcpAliveCheck.setStatus('current')
if mibBuilder.loadTexts: reverseTerminalTcpAliveCheck.setDescription('The TCP alive check time. 0 min: TCP connection will not be closed when the TCP connection becomes idle. 1 to 99 min: The Terminal Server CN2600 series device server automatically closes the TCP connection if there is no TCP activity for the given time. After the connection is closed, the Terminal Server CN2600 series device server starts listening for another connection.')
reverseTerminalInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reverseTerminalInactivityTime.setStatus('current')
if mibBuilder.loadTexts: reverseTerminalInactivityTime.setDescription('0 min: TCP connection will not be closed if the serial line becomes idle. 0-99 min: The Terminal Server CN2600 series device server automatically closes the TCP connection if there is no serial data activity for the given time. After the connection is closed, the Terminal Server CN2600 series starts listening for another TCP connection.')
reverseTerminalTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reverseTerminalTcpPort.setStatus('current')
if mibBuilder.loadTexts: reverseTerminalTcpPort.setDescription("Each of the Terminal Server CN2600 series device server's serial ports are mapped to a TCP port.")
reverseTerminalAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reverseTerminalAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: reverseTerminalAuthenticationType.setDescription('The reverse terminal authentication type.')
reverseTerminalMapKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cr-lf", 0), ("cr", 1), ("lf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reverseTerminalMapKeys.setStatus('current')
if mibBuilder.loadTexts: reverseTerminalMapKeys.setDescription("If data received through Terminal Server CN2600 series device server's Ethernet port is sent using the 'enter' command, the data will be transmitted out through the serial port with an added 1. 'carriage return + line feed' if you select the 'cr-lf' option (i.e., the cursor will jump to the next line, and return to the first character of the line) 2. 'carriage return' if you select the 'cr' option (i.e., the cursor will return to the first character of the line 3. 'line feed' if you select the 'lf' option. (i.e., the cursor will jump to the next line, but not move horizontally)")
dial = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7))
dialTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7, 1), )
if mibBuilder.loadTexts: dialTable.setStatus('current')
if mibBuilder.loadTexts: dialTable.setDescription('The Dial In/Out table.')
dialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: dialEntry.setStatus('current')
if mibBuilder.loadTexts: dialEntry.setDescription('The Dial In/Out entry.')
dialTERMBINMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialTERMBINMode.setStatus('current')
if mibBuilder.loadTexts: dialTERMBINMode.setDescription('Select Yes to enable a Binary Terminal connection.')
dialPPPDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialPPPDMode.setStatus('current')
if mibBuilder.loadTexts: dialPPPDMode.setDescription('Select Yes to enable a PPPD connection.')
dialSLIPDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialSLIPDMode.setStatus('current')
if mibBuilder.loadTexts: dialSLIPDMode.setDescription('Select Yes to enable a SLIPD Terminal connection.')
dialAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialAuthType.setStatus('current')
if mibBuilder.loadTexts: dialAuthType.setDescription('The dial in/out authentication type.')
dialDisconnectBy = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4))).clone(namedValues=NamedValues(("none", 0), ("dcd-off", 2), ("dsr-off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialDisconnectBy.setStatus('current')
if mibBuilder.loadTexts: dialDisconnectBy.setDescription("If this field is set to 'dcd-off,' the connection will be disconnected when the DCD signal is off. If this field is set to 'dsr-off,' the connection will be disconnected when the DSR signal is off.")
dialDestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialDestinationIpAddress.setStatus('current')
if mibBuilder.loadTexts: dialDestinationIpAddress.setDescription('Destination IP address is the IP address of the remote dial-in/dial-out server.')
dialSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialSourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: dialSourceIpAddress.setDescription('Source IP address is IP address of this serial port. The Terminal Server CN2600 series will automatically assign an IP address for the port. We recommend leaving this field blank.')
dialIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialIpNetmask.setStatus('current')
if mibBuilder.loadTexts: dialIpNetmask.setDescription('The IP netmask used for dial-in/dial-out networks (PPP or SLIP).')
dialTcpIpCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialTcpIpCompression.setStatus('current')
if mibBuilder.loadTexts: dialTcpIpCompression.setDescription("Depends on whether the remote user's application requests compression.")
dialInactivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialInactivityTime.setStatus('current')
if mibBuilder.loadTexts: dialInactivityTime.setDescription('0 ms: TCP connection will not be closed if the serial line becomes idle. 1-65535 ms: The Terminal Server CN2600 series device server automatically closes the TCP connection if there is no serial data activity for the given time. After the connection is closed, the Terminal Server CN2600 series starts listening for another TCP connection.')
dialLinkQualityReport = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialLinkQualityReport.setStatus('current')
if mibBuilder.loadTexts: dialLinkQualityReport.setDescription('Choose YES if you are using software to collect Link quality information.')
dialOutgoingPAPID = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7, 1, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialOutgoingPAPID.setStatus('current')
if mibBuilder.loadTexts: dialOutgoingPAPID.setDescription('Dial-out user ID account.')
dialPAPPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialPAPPassword.setStatus('current')
if mibBuilder.loadTexts: dialPAPPassword.setDescription('Dial-out user password.')
dialIncomingPAPCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 2, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("local", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialIncomingPAPCheck.setStatus('current')
if mibBuilder.loadTexts: dialIncomingPAPCheck.setDescription('The Dial in/out incoming PAP check type.')
dataPacking = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 3))
dataPackingPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 3, 1), )
if mibBuilder.loadTexts: dataPackingPortTable.setStatus('current')
if mibBuilder.loadTexts: dataPackingPortTable.setDescription('The Data Packing table.')
dataPackingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 3, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: dataPackingPortEntry.setStatus('current')
if mibBuilder.loadTexts: dataPackingPortEntry.setDescription('The Data Packing entry.')
portPacketLength = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPacketLength.setStatus('current')
if mibBuilder.loadTexts: portPacketLength.setDescription('If the value is 0, the Delimiter Process will be used, regardless of the length of the data packet. If the data length (in bytes) matches the configured value, the data will be forced out. The data length can be configured from 0 to 1024 bytes. Set to 0 if you do not need to limit the length.')
portDelimiter1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDelimiter1Enable.setStatus('current')
if mibBuilder.loadTexts: portDelimiter1Enable.setDescription('Enable the first delimiter character.')
portDelimiter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDelimiter1.setStatus('current')
if mibBuilder.loadTexts: portDelimiter1.setDescription('The first delimiter character, in hex decimal.')
portDelimiter2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDelimiter2Enable.setStatus('current')
if mibBuilder.loadTexts: portDelimiter2Enable.setDescription('Enable the second delimiter character.')
portDelimiter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDelimiter2.setStatus('current')
if mibBuilder.loadTexts: portDelimiter2.setDescription('The second delimiter character, in hex decimal.')
portDelimiterProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("doNothing", 1), ("delimiterAddOne", 2), ("delimiterAddTwo", 4), ("stripDelimiter", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDelimiterProcess.setStatus('current')
if mibBuilder.loadTexts: portDelimiterProcess.setDescription("'delimiterAddOne' or 'delimiterAddTwo': The data will be transmitted when an additional byte (for 'delimiterAddOne'), or an additional 2 bytes (for 'delimiterAddTwo') of data is received after receiving the Delimiter. 'stripDelimiter': When the delimiter is received, the Delimiter is deleted (i.e., stripped), and the remaining data is transmitted. 'doNothing': The data will be transmitted when the delimiter is received.")
portForceTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForceTransmit.setStatus('current')
if mibBuilder.loadTexts: portForceTransmit.setDescription("0: Disable the force transmit timeout. 1 to 65535: Forces the Terminal Server CN2600 series device server's TCP/IP protocol software to try to pack serial data received during the specified time into the same data frame.")
comParamSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 2))
comParamPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 2, 1), )
if mibBuilder.loadTexts: comParamPortTable.setStatus('current')
if mibBuilder.loadTexts: comParamPortTable.setDescription('The Communication Parameters table.')
comParamPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 2, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: comParamPortEntry.setStatus('current')
if mibBuilder.loadTexts: comParamPortEntry.setDescription('The Communication Parameters entry.')
portAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAlias.setStatus('current')
if mibBuilder.loadTexts: portAlias.setDescription("Port alias is included to allow easy identification of the serial devices that are connected to Terminal Server CN2600 series device server's serial port.")
portInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("rs-232", 0), ("rs-422", 1), ("rs-485-2-wire", 2), ("rs-485-4-wire", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInterface.setStatus('current')
if mibBuilder.loadTexts: portInterface.setDescription('The serial interface that the port works on.')
portBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("b50", 0), ("b75", 1), ("b110", 2), ("b134", 3), ("b150", 4), ("b300", 5), ("b600", 6), ("b1200", 7), ("b1800", 8), ("b2400", 9), ("b4800", 10), ("b7200", 11), ("b9600", 12), ("b19200", 13), ("b38400", 14), ("b57600", 15), ("b115200", 16), ("b230400", 17), ("b460800", 18), ("b921600", 19)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBaudRate.setStatus('current')
if mibBuilder.loadTexts: portBaudRate.setDescription("The port's speed in bits per second. You can choose a standard baud rate by indexing.")
portBaudRateManual = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBaudRateManual.setStatus('current')
if mibBuilder.loadTexts: portBaudRateManual.setDescription("The port's speed in bits per second. You can specify a baud rate manually.")
portDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("bits-5", 0), ("bits-6", 1), ("bits-7", 2), ("bits-8", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDataBits.setStatus('current')
if mibBuilder.loadTexts: portDataBits.setDescription('The number of bits in a character for the port.')
portStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("bits-1", 0), ("bits-1dot5", 1), ("bits-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStopBits.setStatus('current')
if mibBuilder.loadTexts: portStopBits.setDescription('The number of stop bits for the port.')
portParity = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("odd", 1), ("even", 2), ("mark", 3), ("space", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portParity.setStatus('current')
if mibBuilder.loadTexts: portParity.setDescription('The parity bit for the port.')
portFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("rts-cts", 1), ("xon-xoff", 2), ("dtr-dsr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowControl.setStatus('current')
if mibBuilder.loadTexts: portFlowControl.setDescription('The flow-control method for the port.')
portFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFIFO.setStatus('current')
if mibBuilder.loadTexts: portFIFO.setDescription("Enable or disable the port's FIFO.")
dataBuffering = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 3))
dataBufferingPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 3, 1), )
if mibBuilder.loadTexts: dataBufferingPortTable.setStatus('current')
if mibBuilder.loadTexts: dataBufferingPortTable.setDescription('The Data Buffering/Log table.')
dataBufferingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 3, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: dataBufferingPortEntry.setStatus('current')
if mibBuilder.loadTexts: dataBufferingPortEntry.setDescription('The Data Buffering/Log entry.')
portBufferingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBufferingEnable.setStatus('current')
if mibBuilder.loadTexts: portBufferingEnable.setDescription('Enable off-line port buffering.')
portSerialDataLoggingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSerialDataLoggingEnable.setStatus('current')
if mibBuilder.loadTexts: portSerialDataLoggingEnable.setDescription('Enable or disable serial data logging for the port.')
modemSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 4))
modemSettingsPortTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 4, 1), )
if mibBuilder.loadTexts: modemSettingsPortTable.setStatus('current')
if mibBuilder.loadTexts: modemSettingsPortTable.setDescription('The Modem Settings table.')
modemSettingsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 4, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: modemSettingsPortEntry.setStatus('current')
if mibBuilder.loadTexts: modemSettingsPortEntry.setDescription('The Modem Settings entry.')
portEnableModem = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEnableModem.setStatus('current')
if mibBuilder.loadTexts: portEnableModem.setDescription('Enable or disable modem for this port.')
portInitialString = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInitialString.setStatus('current')
if mibBuilder.loadTexts: portInitialString.setDescription("Set the modem's initial string to establish the connection. E.g., 'AT&S0=1' for auto-answer.")
portDialUp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDialUp.setStatus('current')
if mibBuilder.loadTexts: portDialUp.setDescription("Set the modem's dial-up AT command string.")
portPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPhoneNumber.setStatus('current')
if mibBuilder.loadTexts: portPhoneNumber.setDescription('Set the number used to dial out.')
welcomeMessage = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 5))
portEnableWelcomeMessage = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEnableWelcomeMessage.setStatus('current')
if mibBuilder.loadTexts: portEnableWelcomeMessage.setDescription('Enable or disable the welcome message.')
portMessage = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 4, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1280))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMessage.setStatus('current')
if mibBuilder.loadTexts: portMessage.setDescription('Set up a welcome message to greet dial-in users.')
sysManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5))
miscNetworkSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1))
accessibleIp = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 1))
enableAccessibleIpList = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableAccessibleIpList.setStatus('current')
if mibBuilder.loadTexts: enableAccessibleIpList.setDescription('Enable or disable the entire accessible IP list.')
accessibleIpListTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 1, 2), )
if mibBuilder.loadTexts: accessibleIpListTable.setStatus('current')
if mibBuilder.loadTexts: accessibleIpListTable.setDescription('Accessible IP List table.')
accessibleIpListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 1, 2, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "activeAccessibleIpList"))
if mibBuilder.loadTexts: accessibleIpListEntry.setStatus('current')
if mibBuilder.loadTexts: accessibleIpListEntry.setDescription('Accessible IP List entry.')
accessibleIpListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessibleIpListIndex.setStatus('current')
if mibBuilder.loadTexts: accessibleIpListIndex.setDescription('Accessible IP List index.')
activeAccessibleIpList = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeAccessibleIpList.setStatus('current')
if mibBuilder.loadTexts: activeAccessibleIpList.setDescription('Enable or disable this accessible IP entry.')
accessibleIpListAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessibleIpListAddress.setStatus('current')
if mibBuilder.loadTexts: accessibleIpListAddress.setDescription("Accessible IP address. This value can be the IP address of a single host if the netmask is set to '255.255.255.255,' or it can be a network address.")
accessibleIpListNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessibleIpListNetmask.setStatus('current')
if mibBuilder.loadTexts: accessibleIpListNetmask.setDescription('Accessible IP address netmask. The IP address and netmask are used to specify a group of remote hosts.')
snmpAgentSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 2))
snmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpEnable.setStatus('current')
if mibBuilder.loadTexts: snmpEnable.setDescription('Enable or disable SNMP agent.')
snmpContactName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpContactName.setStatus('current')
if mibBuilder.loadTexts: snmpContactName.setDescription('The SNMP contact information usually includes an emergency contact name and telephone or pager number.')
snmpLocation = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpLocation.setStatus('current')
if mibBuilder.loadTexts: snmpLocation.setDescription('Specify the location string for SNMP agents, such as the Terminal Server CN2600 series device server. This string is usually set to the street address where the Terminal Server CN2600 series is physically located.')
dDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 3))
dDNSEnable = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dDNSEnable.setStatus('current')
if mibBuilder.loadTexts: dDNSEnable.setDescription('Enable or disable the DDNS function.')
dDNSServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("dynDns-org", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dDNSServerAddress.setStatus('current')
if mibBuilder.loadTexts: dDNSServerAddress.setDescription('The DDNS server address. The DDNS is serviced by a 3-party provider. To use the DDNS function, you may need to obtain a user account from the server.')
dDNSHostName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dDNSHostName.setStatus('current')
if mibBuilder.loadTexts: dDNSHostName.setDescription('The host name of the machine to be registered to the DDNS server.')
dDNSUserName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dDNSUserName.setStatus('current')
if mibBuilder.loadTexts: dDNSUserName.setDescription('The user account provided by the DDNS server.')
dDNSPassword = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dDNSPassword.setStatus('current')
if mibBuilder.loadTexts: dDNSPassword.setDescription('The user password provided by the DDNS server.')
hostTable = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 4))
hostTableTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 4, 1), )
if mibBuilder.loadTexts: hostTableTable.setStatus('current')
if mibBuilder.loadTexts: hostTableTable.setDescription('Host Table.')
hostTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 4, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "hostTableIndex"))
if mibBuilder.loadTexts: hostTableEntry.setStatus('current')
if mibBuilder.loadTexts: hostTableEntry.setDescription('Host Table entry.')
hostTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTableIndex.setStatus('current')
if mibBuilder.loadTexts: hostTableIndex.setDescription('The Host Table index.')
hostName = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setStatus('current')
if mibBuilder.loadTexts: hostName.setDescription('The host name of the host table entry.')
hostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 4, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIpAddress.setStatus('current')
if mibBuilder.loadTexts: hostIpAddress.setDescription('Related IP address of the host table entry.')
routeTable = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 5))
routeTableTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 5, 1), )
if mibBuilder.loadTexts: routeTableTable.setStatus('current')
if mibBuilder.loadTexts: routeTableTable.setDescription('Route Table.')
routeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 5, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "routeTableIndex"))
if mibBuilder.loadTexts: routeTableEntry.setStatus('current')
if mibBuilder.loadTexts: routeTableEntry.setDescription('Route Table entry.')
routeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeTableIndex.setStatus('current')
if mibBuilder.loadTexts: routeTableIndex.setDescription('The Route Table index.')
gatewayRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 5, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayRouteTable.setStatus('current')
if mibBuilder.loadTexts: gatewayRouteTable.setDescription('The gateway property of the route table entry.')
destinationRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 5, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationRouteTable.setStatus('current')
if mibBuilder.loadTexts: destinationRouteTable.setDescription("The destination IP address of the route table entry. This value can be the IP address of a single host if the netmask set to '255.255.255.255,' or it can be a network address.")
netmaskRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 5, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netmaskRouteTable.setStatus('current')
if mibBuilder.loadTexts: netmaskRouteTable.setDescription('The destination netmask of the route table entry.')
metricRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: metricRouteTable.setStatus('current')
if mibBuilder.loadTexts: metricRouteTable.setDescription('The routing metric for this route. The semantics of this metric are determined by the routing-protocol. Normally, it represents the cost for the destination.')
interfaceRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 256, 257))).clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("lan1", 256), ("lan2", 257)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceRouteTable.setStatus('current')
if mibBuilder.loadTexts: interfaceRouteTable.setDescription('The value that identifies the local interface through which the next hop of this route should be reached.')
userTable = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 6))
userTableTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 6, 1), )
if mibBuilder.loadTexts: userTableTable.setStatus('current')
if mibBuilder.loadTexts: userTableTable.setDescription('User Table.')
userTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 6, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "userTableIndex"))
if mibBuilder.loadTexts: userTableEntry.setStatus('current')
if mibBuilder.loadTexts: userTableEntry.setDescription('User Table entry.')
userTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userTableIndex.setStatus('current')
if mibBuilder.loadTexts: userTableIndex.setDescription('The User Table index.')
userNameUserTable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userNameUserTable.setStatus('current')
if mibBuilder.loadTexts: userNameUserTable.setDescription('The user name of this entry.')
passwordUserTable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passwordUserTable.setStatus('current')
if mibBuilder.loadTexts: passwordUserTable.setDescription('The password of this user entry.')
phoneNumberUserTable = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phoneNumberUserTable.setStatus('current')
if mibBuilder.loadTexts: phoneNumberUserTable.setDescription('The phone number of this user entry.')
authenticationServer = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 7))
radiusServerIp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 7, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerIp.setStatus('current')
if mibBuilder.loadTexts: radiusServerIp.setDescription('The IP address or domain name of the RADIUS server.')
radiusKey = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusKey.setStatus('current')
if mibBuilder.loadTexts: radiusKey.setDescription('RADIUS password. Must be the same as in the RADIUS server.')
udpPortAuthenticationServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1645, 1812))).clone(namedValues=NamedValues(("port1645", 1645), ("port1812", 1812)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpPortAuthenticationServer.setStatus('current')
if mibBuilder.loadTexts: udpPortAuthenticationServer.setDescription('The UDP port of the RADIUS server.')
radiusAccounting = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccounting.setStatus('current')
if mibBuilder.loadTexts: radiusAccounting.setDescription('Enable or disable RADIUS accounting.')
sysLogSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 8))
sysLocalLog = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocalLog.setStatus('current')
if mibBuilder.loadTexts: sysLocalLog.setDescription('Log the following events to the system log: System Cold Start, System Warm Start, Power Down.')
networkLocalLog = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLocalLog.setStatus('current')
if mibBuilder.loadTexts: networkLocalLog.setDescription('Log the following events to the system log: DHCP/BOOTP/PPPoE Get IP/Renew, NTP, Mail Fail, NTP Connect Fail, DHCP Fail, IP Conflict, Ethernet Link Down.')
configLocalLog = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configLocalLog.setStatus('current')
if mibBuilder.loadTexts: configLocalLog.setDescription('Log the following events to the system log: Login Fail, IP Changed, Password Changed, Config Changed, Firmware Upgrade, SSL Key Import, Config Import, Config Export.')
opModeLocalLog = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opModeLocalLog.setStatus('current')
if mibBuilder.loadTexts: opModeLocalLog.setDescription('Log the following op-mode events to the system log: Connect, Disconnect, Authentication Fail, Restart.')
autoWarningSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2))
eventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 1))
mailWarningColdStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningColdStart.setStatus('current')
if mibBuilder.loadTexts: mailWarningColdStart.setDescription('Refers to starting the system from power off (contrast this with warm start). When performing a cold start, the Terminal Server CN2600 series will automatically issue an auto warning message by e-mail after booting up.')
mailWarningWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningWarmStart.setStatus('current')
if mibBuilder.loadTexts: mailWarningWarmStart.setDescription('Refers to restarting the Terminal Server CN2600 without turning the power off. When performing a warm start, the Terminal Server CN2600 series will automatically send an e-mail after rebooting.')
mailWarningPower1Down = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningPower1Down.setStatus('current')
if mibBuilder.loadTexts: mailWarningPower1Down.setDescription('On dual power model, when power 1 is off, the Terminal Server CN2600 series will immediately send an e-mail.')
mailWarningPower2Down = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningPower2Down.setStatus('current')
if mibBuilder.loadTexts: mailWarningPower2Down.setDescription('On dual power model, when power 2 is off, the Terminal Server CN2600 series will immediately send an e-mail.')
mailWarningEthernet1LinkDown = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningEthernet1LinkDown.setStatus('current')
if mibBuilder.loadTexts: mailWarningEthernet1LinkDown.setDescription('When the built-in link1 port is off, the Terminal Server CN2600 series will immediately send an e-mail.')
mailWarningEthernet2LinkDown = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningEthernet2LinkDown.setStatus('current')
if mibBuilder.loadTexts: mailWarningEthernet2LinkDown.setDescription('When the built-in link2 port is off, the Terminal Server CN2600 series will immediately send an e-mail.')
mailWarningAuthFailure = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningAuthFailure.setStatus('current')
if mibBuilder.loadTexts: mailWarningAuthFailure.setDescription('The user inputs a wrong password from the Console or Administrator. When authentication failure occurs, the Terminal Server CN2600 series will immediately send an e-mail.')
mailWarningIpChanged = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningIpChanged.setStatus('current')
if mibBuilder.loadTexts: mailWarningIpChanged.setDescription("The user has changed the Terminal Server CN2600 series device server's IP address. When the IP address changes, the Terminal Server CN2600 series will send an e-mail with the new IP address before it reboots. If the Terminal Server CN2600 series is unable to send an e-mail message to the mail server within 15 seconds, it will reboot anyway, and abort the e-mail auto warning.")
mailWarningPasswordChanged = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailWarningPasswordChanged.setStatus('current')
if mibBuilder.loadTexts: mailWarningPasswordChanged.setDescription("The user has changed the Terminal Server CN2600 series device server's password. When the password changes, the Terminal Server CN2600 series will send an e-mail with the password changed notice before it reboots. If the Terminal Server CN2600 series is unable to send an e-mail message to the mail server within 15 seconds, it will reboot anyway, and abort the e-mail auto warning.")
trapServerColdStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerColdStart.setStatus('current')
if mibBuilder.loadTexts: trapServerColdStart.setDescription('Refers to starting the system from power off (contrast this with warm start). When performing a cold start, the Terminal Server CN2600 series will automatically issue an auto warning message by sending a SNMP trap after booting up.')
trapServerWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerWarmStart.setStatus('current')
if mibBuilder.loadTexts: trapServerWarmStart.setDescription('Refers to restarting the Terminal Server CN2600 without turning the power off. When performing a warm start, the Terminal Server CN2600 series will automatically send a SNMP trap after rebooting.')
trapServerEthernet1LinkDown = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerEthernet1LinkDown.setStatus('current')
if mibBuilder.loadTexts: trapServerEthernet1LinkDown.setDescription('When the built-in link1 port is off, the Terminal Server CN2600 series will immediately send a SNMP trap.')
trapServerEthernet2LinkDown = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerEthernet2LinkDown.setStatus('current')
if mibBuilder.loadTexts: trapServerEthernet2LinkDown.setDescription('When the built-in link2 port is off, the Terminal Server CN2600 series will immediately send a SNMP trap.')
trapServerAuthFailure = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerAuthFailure.setStatus('current')
if mibBuilder.loadTexts: trapServerAuthFailure.setDescription('The user inputs a wrong password from the Console or Administrator. When authentication failure occurs, the Terminal Server CN2600 series will immediately send a SNMP trap.')
serialEventSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 2))
portEventSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 2, 1), )
if mibBuilder.loadTexts: portEventSettingsTable.setStatus('current')
if mibBuilder.loadTexts: portEventSettingsTable.setDescription('Port Event Settings Table.')
portEventSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 2, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: portEventSettingsEntry.setStatus('current')
if mibBuilder.loadTexts: portEventSettingsEntry.setDescription('Port Event Settings entry.')
mailDCDchange = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailDCDchange.setStatus('current')
if mibBuilder.loadTexts: mailDCDchange.setDescription('A change in the DCD (Data Carrier Detect) signal indicates that the modem connection status has changed. For example, if the DCD signal changes to low, it indicates that the connection line is down. When the DCD signal changes to low, the Terminal Server CN2600 series will immediately send an e-mail message.')
trapDCDchange = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDCDchange.setStatus('current')
if mibBuilder.loadTexts: trapDCDchange.setDescription('A change in the DCD (Data Carrier Detect) signal indicates that the modem connection status has changed. For example, if the DCD signal changes to low, it indicates that the connection line is down. When the DCD signal changes to low, the Terminal Server CN2600 series will immediately send an SNMP trap.')
mailDSRchange = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mailDSRchange.setStatus('current')
if mibBuilder.loadTexts: mailDSRchange.setDescription('A change in the DSR (Data Set Ready) signal indicates that the data communication equipment is powered off. For example, if the DSR signal changes to low, it indicates that the data communication equipment is powered down. When the DSR signal changes to low, the Terminal Server CN2600 series device server will immediately send an e-mail message.')
trapDSRchange = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDSRchange.setStatus('current')
if mibBuilder.loadTexts: trapDSRchange.setDescription('A change in the DSR (Data Set Ready) signal indicates that the data communication equipment is powered off. For example, if the DSR signal changes to low, it indicates that the data communication equipment is powered down. When the DSR signal changes to low, the Terminal Server CN2600 series device server will immediately send an SNMP trap.')
emailAlert = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 3))
emailWarningMailServer = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningMailServer.setStatus('current')
if mibBuilder.loadTexts: emailWarningMailServer.setDescription("The e-mail server's IP address or domain name of the e-mail warning function.")
emailRequiresAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("non-require", 0), ("require", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailRequiresAuthentication.setStatus('current')
if mibBuilder.loadTexts: emailRequiresAuthentication.setDescription('Set if the mail server requires user login.')
emailWarningUserName = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningUserName.setStatus('current')
if mibBuilder.loadTexts: emailWarningUserName.setDescription('The user name used to log into the mail server if authentication is required.')
emailWarningPassword = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningPassword.setStatus('current')
if mibBuilder.loadTexts: emailWarningPassword.setDescription('The password used to log into the mail server if authentication is required.')
emailWarningFromEmail = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFromEmail.setStatus('current')
if mibBuilder.loadTexts: emailWarningFromEmail.setDescription("The e-mail address to be filled in the 'From' field of the auto-warning e-mail.")
emailWarningFirstEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFirstEmailAddr.setStatus('current')
if mibBuilder.loadTexts: emailWarningFirstEmailAddr.setDescription('The first email address to where the auto-warning e-mail is to be sent.')
emailWarningSecondEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningSecondEmailAddr.setStatus('current')
if mibBuilder.loadTexts: emailWarningSecondEmailAddr.setDescription('The second email address to where the auto-warning e-mail is to be sent.')
emailWarningThirdEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningThirdEmailAddr.setStatus('current')
if mibBuilder.loadTexts: emailWarningThirdEmailAddr.setDescription('The third email address to where the auto-warning e-mail is to be sent.')
emailWarningFourthEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 3, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailWarningFourthEmailAddr.setStatus('current')
if mibBuilder.loadTexts: emailWarningFourthEmailAddr.setDescription('The fourth email address to where the auto-warning e-mail is to be sent.')
snmpTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 4))
snmpTrapReceiverIp = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapReceiverIp.setStatus('current')
if mibBuilder.loadTexts: snmpTrapReceiverIp.setDescription('SNMP trap server IP address or domain name.')
trapVersion = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("v1", 0), ("v2c", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapVersion.setStatus('current')
if mibBuilder.loadTexts: trapVersion.setDescription('SNMP trap version used for the auto-warning function.')
maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 3))
consoleSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 3, 1))
httpConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpConsole.setStatus('current')
if mibBuilder.loadTexts: httpConsole.setDescription('Enable or disable HTTP console.')
httpsConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsConsole.setStatus('current')
if mibBuilder.loadTexts: httpsConsole.setDescription('Enable or disable HTTPS console.')
telnetConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetConsole.setStatus('current')
if mibBuilder.loadTexts: telnetConsole.setDescription('Enable or disable Telnet console.')
sshConsole = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshConsole.setStatus('current')
if mibBuilder.loadTexts: sshConsole.setDescription('Enable or disable SSH console.')
resetButtonFunction = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("always-enable", 0), ("disable-after-60-sec", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetButtonFunction.setStatus('current')
if mibBuilder.loadTexts: resetButtonFunction.setDescription('Enable or disable reset button protection. You can disable the hardware reset button after the Terminal Server CN2600 series has been restarted for 60 seconds.')
lcmReadOnlyProtect = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("writable", 0), ("readonly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcmReadOnlyProtect.setStatus('current')
if mibBuilder.loadTexts: lcmReadOnlyProtect.setDescription('Enable or disable LCM read-only protection. If the LCM panel is under read-only protection, users can only view the configurations from the LCM panel. Otherwise, by default, users can modify the settings directly on the LCM panel.')
loadFactoryDefault = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 3, 2))
loadFactoryDefaultSetting = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("resetToFactoryDefault-ExcludingIpConfiguration", 0), ("resetToFactoryDefault", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: loadFactoryDefaultSetting.setStatus('current')
if mibBuilder.loadTexts: loadFactoryDefaultSetting.setDescription("This function will reset all of the Terminal Server CN2600 series device server's settings to the factory default values. Be aware that previous settings will be lost. Selecting Reset to factory default (excluding IP configuration) will reset all settings except the IP configuration to factory defaults. Selecting Reset to factory default will reset all settings including the IP configuration to factory defaults.")
sysStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6))
s2eConnections = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 1))
monitorRemoteIpTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 1, 1), )
if mibBuilder.loadTexts: monitorRemoteIpTable.setStatus('current')
if mibBuilder.loadTexts: monitorRemoteIpTable.setDescription('Serial to Network Connections Remote IP table.')
monitorRemoteIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 1, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"), (0, "MOXA-CN2600-MIB", "remoteIpIndex"))
if mibBuilder.loadTexts: monitorRemoteIpEntry.setStatus('current')
if mibBuilder.loadTexts: monitorRemoteIpEntry.setDescription('Serial to Network Connections Remote IP entry.')
remoteIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteIpIndex.setStatus('current')
if mibBuilder.loadTexts: remoteIpIndex.setDescription('Serial to Network Connections Remote IP index.')
monitorRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRemoteIp.setStatus('current')
if mibBuilder.loadTexts: monitorRemoteIp.setDescription('The remote IP currently connecting to this port.')
serialPortStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 2))
monitorSerialPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 2, 1), )
if mibBuilder.loadTexts: monitorSerialPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: monitorSerialPortStatusTable.setDescription('Serial Port Status table.')
monitorSerialPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 2, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorSerialPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: monitorSerialPortStatusEntry.setDescription('Serial Port Status entry.')
monitorTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorTxCount.setStatus('current')
if mibBuilder.loadTexts: monitorTxCount.setDescription('View the number of bytes transmitted from the port since the last time the port was initialized.')
monitorRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRxCount.setStatus('current')
if mibBuilder.loadTexts: monitorRxCount.setDescription('View the number of bytes received by the port since the last time the port was initialized.')
monitorTxTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorTxTotalCount.setStatus('current')
if mibBuilder.loadTexts: monitorTxTotalCount.setDescription('View the number of bytes transmitted from the port since the last time the system was initialized.')
monitorRxTotalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRxTotalCount.setStatus('current')
if mibBuilder.loadTexts: monitorRxTotalCount.setDescription('View the number of bytes received by the port since the last time the system was initialized.')
monitorDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDSR.setStatus('current')
if mibBuilder.loadTexts: monitorDSR.setDescription('View the current DSR status of this port.')
monitorDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDTR.setStatus('current')
if mibBuilder.loadTexts: monitorDTR.setDescription('View the current DTR status of this port.')
monitorRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRTS.setStatus('current')
if mibBuilder.loadTexts: monitorRTS.setDescription('View the current RTS status of this port.')
monitorCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorCTS.setStatus('current')
if mibBuilder.loadTexts: monitorCTS.setDescription('View the current CTS status of this port.')
monitorDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDCD.setStatus('current')
if mibBuilder.loadTexts: monitorDCD.setDescription('View the current DCD status of this port.')
serialPortErrorCount = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 3))
monitorSerialPortErrorCountTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 3, 1), )
if mibBuilder.loadTexts: monitorSerialPortErrorCountTable.setStatus('current')
if mibBuilder.loadTexts: monitorSerialPortErrorCountTable.setDescription('Serial Port Error Count table.')
monitorSerialPortErrorCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 3, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorSerialPortErrorCountEntry.setStatus('current')
if mibBuilder.loadTexts: monitorSerialPortErrorCountEntry.setDescription('Serial Port Error Count entry.')
monitorErrorCountFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorErrorCountFrame.setStatus('current')
if mibBuilder.loadTexts: monitorErrorCountFrame.setDescription("View the number of 'Frame' errors for this port.")
monitorErrorCountParity = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorErrorCountParity.setStatus('current')
if mibBuilder.loadTexts: monitorErrorCountParity.setDescription("View the number of 'Parity' errors for this port.")
monitorErrorCountOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorErrorCountOverrun.setStatus('current')
if mibBuilder.loadTexts: monitorErrorCountOverrun.setDescription("View the number of 'Overrun' errors for this port.")
monitorErrorCountBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorErrorCountBreak.setStatus('current')
if mibBuilder.loadTexts: monitorErrorCountBreak.setDescription("View the number of 'Break' errors for this port.")
serialPortSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 4))
monitorSerialPortSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 4, 1), )
if mibBuilder.loadTexts: monitorSerialPortSettingsTable.setStatus('current')
if mibBuilder.loadTexts: monitorSerialPortSettingsTable.setDescription('Serial Port Settings table.')
monitorSerialPortSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 4, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorSerialPortSettingsEntry.setStatus('current')
if mibBuilder.loadTexts: monitorSerialPortSettingsEntry.setDescription('Serial Port Settings entry.')
monitorBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorBaudRate.setStatus('current')
if mibBuilder.loadTexts: monitorBaudRate.setDescription('View the current baudrate of the port.')
monitorDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("bits-5", 0), ("bits-6", 1), ("bits-7", 2), ("bits-8", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDataBits.setStatus('current')
if mibBuilder.loadTexts: monitorDataBits.setDescription('View the number of bits per byte for the port.')
monitorStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorStopBits.setStatus('current')
if mibBuilder.loadTexts: monitorStopBits.setDescription('View the number of stop bits for the port.')
monitorParity = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 24, 40, 56))).clone(namedValues=NamedValues(("none", 0), ("odd", 8), ("even", 24), ("mark", 40), ("space", 56)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorParity.setStatus('current')
if mibBuilder.loadTexts: monitorParity.setDescription('View the parity bit for the port.')
monitorRTSCTSFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorRTSCTSFlowControl.setStatus('current')
if mibBuilder.loadTexts: monitorRTSCTSFlowControl.setDescription('View if the port is using RTS/CTS flow control.')
monitorXONXOFFFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorXONXOFFFlowControl.setStatus('current')
if mibBuilder.loadTexts: monitorXONXOFFFlowControl.setDescription('View if the port is using XON/XOFF flow control.')
monitorDTRDSRFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorDTRDSRFlowControl.setStatus('current')
if mibBuilder.loadTexts: monitorDTRDSRFlowControl.setDescription('View if the port is using DTR/DSR flow control.')
monitorFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorFIFO.setStatus('current')
if mibBuilder.loadTexts: monitorFIFO.setDescription('View FIFO status of this port.')
monitorInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("rs-232", 0), ("rs-422", 1), ("rs-485-2-wire", 2), ("rs-485-4-wire", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorInterface.setStatus('current')
if mibBuilder.loadTexts: monitorInterface.setDescription('View the serial interface that the port is using.')
serialPortBuffering = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 5))
monitorSerialPortBufferingTable = MibTable((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 5, 1), )
if mibBuilder.loadTexts: monitorSerialPortBufferingTable.setStatus('current')
if mibBuilder.loadTexts: monitorSerialPortBufferingTable.setDescription('Serial Port Buffering table.')
monitorSerialPortBufferingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 5, 1, 1), ).setIndexNames((0, "MOXA-CN2600-MIB", "portIndex"))
if mibBuilder.loadTexts: monitorSerialPortBufferingEntry.setStatus('current')
if mibBuilder.loadTexts: monitorSerialPortBufferingEntry.setDescription('Serial Port Settings entry.')
monitorBuffering = MibTableColumn((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 6, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorBuffering.setStatus('current')
if mibBuilder.loadTexts: monitorBuffering.setDescription('View length of buffered data for the port. The length unit is byte.')
saveConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 7))
saveConfig = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("save", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: saveConfig.setStatus('current')
if mibBuilder.loadTexts: saveConfig.setDescription('Save the applied configuration to the Terminal Server CN2600 series device server.')
restart = MibIdentifier((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 8))
restartPorts = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restartPorts.setStatus('current')
if mibBuilder.loadTexts: restartPorts.setDescription('Restart serial port. Restarting will cause port reseting.')
restartSystem = MibScalar((1, 3, 6, 1, 4, 1, 8691, 2, 11, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restart", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: restartSystem.setStatus('current')
if mibBuilder.loadTexts: restartSystem.setDescription('Restart the Terminal Server CN2600 series device server. Be sure to save all of your configuration changes before you restart the system. Otherwise, all of the changes will be lost.')
mibBuilder.exportSymbols("MOXA-CN2600-MIB", lan1Speed=lan1Speed, socketTcpClientConnectionControl=socketTcpClientConnectionControl, eventSettings=eventSettings, portDialUp=portDialUp, dataPackingPortTable=dataPackingPortTable, monitorRTS=monitorRTS, httpConsole=httpConsole, monitorSerialPortErrorCountEntry=monitorSerialPortErrorCountEntry, deviceControlTcpAliveCheck=deviceControlTcpAliveCheck, redundantComIgnoreJammedIp=redundantComIgnoreJammedIp, deviceControlIgnoreJammedIp=deviceControlIgnoreJammedIp, reverseTerminalTcpAliveCheck=reverseTerminalTcpAliveCheck, opModeLocalLog=opModeLocalLog, terminalInterrupt=terminalInterrupt, routingProtocol=routingProtocol, socketTcpServerConnectionDownRTS=socketTcpServerConnectionDownRTS, lan2IpConfiguration=lan2IpConfiguration, socketAllowDriverControl=socketAllowDriverControl, accessibleIp=accessibleIp, opModeSetting=opModeSetting, drdasTable=drdasTable, portDelimiter1Enable=portDelimiter1Enable, socketUdpDestinationPort3=socketUdpDestinationPort3, reverseTerminalEntry=reverseTerminalEntry, dDNSUserName=dDNSUserName, dnsServer1IpAddr=dnsServer1IpAddr, authenticationServer=authenticationServer, opModePortEntry=opModePortEntry, terminalQuit=terminalQuit, monitorRTSCTSFlowControl=monitorRTSCTSFlowControl, dialSLIPDMode=dialSLIPDMode, reverseTerminal=reverseTerminal, sysLogSettings=sysLogSettings, socketUdpDestinationAddress1End=socketUdpDestinationAddress1End, portDelimiter2Enable=portDelimiter2Enable, snmpTrapReceiverIp=snmpTrapReceiverIp, snmpEnable=snmpEnable, portStopBits=portStopBits, terminalAutoLinkProtocol=terminalAutoLinkProtocol, destinationRouteTable=destinationRouteTable, upTime=upTime, monitorSerialPortSettingsTable=monitorSerialPortSettingsTable, hostTableEntry=hostTableEntry, serverSetting=serverSetting, portDelimiter1=portDelimiter1, httpsConsole=httpsConsole, deviceControlTable=deviceControlTable, socketTcpClientDesignatedLocalPort3=socketTcpClientDesignatedLocalPort3, dialInactivityTime=dialInactivityTime, socketInactivityTime=socketInactivityTime, drdasTcpPort=drdasTcpPort, configLocalLog=configLocalLog, trapVersion=trapVersion, monitorSerialPortStatusEntry=monitorSerialPortStatusEntry, application=application, loadFactoryDefaultSetting=loadFactoryDefaultSetting, portAlias=portAlias, trapServerWarmStart=trapServerWarmStart, terminalAutoLoginPrompt=terminalAutoLoginPrompt, drdasConnectionDownRTS=drdasConnectionDownRTS, terminalInactivityTime=terminalInactivityTime, sysLocalLog=sysLocalLog, terminalTelnetTcpPort=terminalTelnetTcpPort, trapServerColdStart=trapServerColdStart, terminalPasswordPrompt=terminalPasswordPrompt, dialPAPPassword=dialPAPPassword, monitorBuffering=monitorBuffering, phoneNumberUserTable=phoneNumberUserTable, metricRouteTable=metricRouteTable, portApplication=portApplication, monitorRemoteIpEntry=monitorRemoteIpEntry, monitorSerialPortBufferingEntry=monitorSerialPortBufferingEntry, socketTcpClientDestinationPort1=socketTcpClientDestinationPort1, socketTcpClientDesignatedLocalPort2=socketTcpClientDesignatedLocalPort2, monitorDTR=monitorDTR, redundantCom=redundantCom, socketTcpClientDestinationPort2=socketTcpClientDestinationPort2, lan1IpAddress=lan1IpAddress, dDNSEnable=dDNSEnable, socketEntry=socketEntry, welcomeMessage=welcomeMessage, serialPortSettings=serialPortSettings, drdas=drdas, routeTable=routeTable, portMessage=portMessage, dDNSServerAddress=dDNSServerAddress, socketTcpPort=socketTcpPort, timeZone=timeZone, portMode=portMode, emailWarningUserName=emailWarningUserName, comParamPortTable=comParamPortTable, socketTcpClientDesignatedLocalPort1=socketTcpClientDesignatedLocalPort1, trapDCDchange=trapDCDchange, terminal=terminal, emailWarningThirdEmailAddr=emailWarningThirdEmailAddr, socketTcpServerConnectionDownDTR=socketTcpServerConnectionDownDTR, monitorTxTotalCount=monitorTxTotalCount, portInitialString=portInitialString, socketUdpDestinationAddress2Begin=socketUdpDestinationAddress2Begin, interfaceRouteTable=interfaceRouteTable, terminalMaxSessions=terminalMaxSessions, dataBuffering=dataBuffering, modemSettingsPortEntry=modemSettingsPortEntry, resetButtonFunction=resetButtonFunction, lan2DefaultGateway=lan2DefaultGateway, portForceTransmit=portForceTransmit, gatewayRouteTable=gatewayRouteTable, routeTableTable=routeTableTable, comParamPortEntry=comParamPortEntry, mailDSRchange=mailDSRchange, restartSystem=restartSystem, swMgmt=swMgmt, monitorSerialPortBufferingTable=monitorSerialPortBufferingTable, terminalPrimaryHostAddress=terminalPrimaryHostAddress, activeAccessibleIpList=activeAccessibleIpList, accessibleIpListEntry=accessibleIpListEntry, lan2Speed=lan2Speed, udpPortAuthenticationServer=udpPortAuthenticationServer, trapDSRchange=trapDSRchange, saveConfig=saveConfig, portIndex=portIndex, radiusAccounting=radiusAccounting, monitorRxTotalCount=monitorRxTotalCount, winsFunction=winsFunction, networkSetting=networkSetting, terminalBreak=terminalBreak, power1Status=power1Status, redundantComEntry=redundantComEntry, winsServer=winsServer, socketUdpDestinationPort1=socketUdpDestinationPort1, redundantComConnectionDownDTR=redundantComConnectionDownDTR, deviceControlAllowDriverControl=deviceControlAllowDriverControl, lan1NetMask=lan1NetMask, consoleSettings=consoleSettings, portFlowControl=portFlowControl, redundantComTable=redundantComTable, portDataBits=portDataBits, monitorDataBits=monitorDataBits, deviceControl=deviceControl, dialTcpIpCompression=dialTcpIpCompression, mailWarningIpChanged=mailWarningIpChanged, overview=overview, socketUdpDestinationPort4=socketUdpDestinationPort4, portBufferingEnable=portBufferingEnable, drdasBackup3IpAddress=drdasBackup3IpAddress, viewLan2Speed=viewLan2Speed, lan1IpConfiguration=lan1IpConfiguration, viewLan1IpAddress=viewLan1IpAddress, redundantComAllowDriverControl=redundantComAllowDriverControl, portPacketLength=portPacketLength, lan1DefaultGateway=lan1DefaultGateway, viewLan1MacAddress=viewLan1MacAddress, monitorErrorCountOverrun=monitorErrorCountOverrun, emailAlert=emailAlert, monitorBaudRate=monitorBaudRate, reverseTerminalAuthenticationType=reverseTerminalAuthenticationType, mailWarningEthernet2LinkDown=mailWarningEthernet2LinkDown, cn2600=cn2600, terminalChangeSession=terminalChangeSession, dDNSHostName=dDNSHostName, serialPortStatus=serialPortStatus, routeTableEntry=routeTableEntry, moxa=moxa, s2eConnections=s2eConnections, socketUdpDestinationAddress3Begin=socketUdpDestinationAddress3Begin, dataPacking=dataPacking, viewLan1Speed=viewLan1Speed, socketTcpAliveCheck=socketTcpAliveCheck, restartPorts=restartPorts, snmpTrap=snmpTrap, monitorSerialPortStatusTable=monitorSerialPortStatusTable, monitorDCD=monitorDCD, socketTcpClientDestinationPort4=socketTcpClientDestinationPort4, lan1PppoePassword=lan1PppoePassword, passwordUserTable=passwordUserTable, snmpAgentSettings=snmpAgentSettings, snmpLocation=snmpLocation, terminalAuthenticationType=terminalAuthenticationType, lan2PppoePassword=lan2PppoePassword, terminalLoginUserName=terminalLoginUserName, socketUdpDestinationAddress2End=socketUdpDestinationAddress2End, portEventSettingsEntry=portEventSettingsEntry, mailWarningEthernet1LinkDown=mailWarningEthernet1LinkDown, monitorErrorCountFrame=monitorErrorCountFrame, socketTcpClientDestinationAddress4=socketTcpClientDestinationAddress4, monitorSerialPortErrorCountTable=monitorSerialPortErrorCountTable, modemSettingsPortTable=modemSettingsPortTable, dataBufferingPortTable=dataBufferingPortTable, serverLocation=serverLocation, portEventSettingsTable=portEventSettingsTable, dialEntry=dialEntry, monitorDSR=monitorDSR, serialPortBuffering=serialPortBuffering, radiusKey=radiusKey, modemSettings=modemSettings, power2Status=power2Status, userTable=userTable, redundantComConnectionDownRTS=redundantComConnectionDownRTS, deviceControlEntry=deviceControlEntry, terminalType=terminalType, monitorRemoteIpTable=monitorRemoteIpTable, PYSNMP_MODULE_ID=cn2600, dialDestinationIpAddress=dialDestinationIpAddress, dialPPPDMode=dialPPPDMode, mailWarningPasswordChanged=mailWarningPasswordChanged, emailWarningMailServer=emailWarningMailServer, hostTable=hostTable, maintenance=maintenance, portParity=portParity, restart=restart, socketUdpDestinationAddress4End=socketUdpDestinationAddress4End, emailWarningPassword=emailWarningPassword, socketTcpClientDestinationAddress2=socketTcpClientDestinationAddress2, remoteIpIndex=remoteIpIndex, drdasBackup1IpAddress=drdasBackup1IpAddress, sshConsole=sshConsole, emailRequiresAuthentication=emailRequiresAuthentication, dialTable=dialTable, portSerialDataLoggingEnable=portSerialDataLoggingEnable, deviceControlConnectionDownRTS=deviceControlConnectionDownRTS, loadFactoryDefault=loadFactoryDefault, redundantComMaxConnection=redundantComMaxConnection, serialPortErrorCount=serialPortErrorCount, userNameUserTable=userNameUserTable, socketMaxConnection=socketMaxConnection, dialSourceIpAddress=dialSourceIpAddress, terminalLoginPassword=terminalLoginPassword, hostTableIndex=hostTableIndex, portSetting=portSetting, viewLan2MacAddress=viewLan2MacAddress, snmpContactName=snmpContactName, monitorErrorCountParity=monitorErrorCountParity, viewLan2IpAddress=viewLan2IpAddress, drdasIgnoreJammedIp=drdasIgnoreJammedIp, socketTcpClientDesignatedLocalPort4=socketTcpClientDesignatedLocalPort4, portEnableModem=portEnableModem, userTableTable=userTableTable, serialEventSettings=serialEventSettings, telnetConsole=telnetConsole, deviceControlConnectionDownDTR=deviceControlConnectionDownDTR, socketTable=socketTable, gratuitousArp=gratuitousArp, portDelimiter2=portDelimiter2, mailDCDchange=mailDCDchange, dataPackingPortEntry=dataPackingPortEntry, socketUdpDestinationAddress3End=socketUdpDestinationAddress3End, autoWarningSettings=autoWarningSettings, serverName=serverName, monitorXONXOFFFlowControl=monitorXONXOFFFlowControl, monitorInterface=monitorInterface, socketTcpClientDestinationAddress1=socketTcpClientDestinationAddress1, miscNetworkSettings=miscNetworkSettings, emailWarningFirstEmailAddr=emailWarningFirstEmailAddr, serialNumber=serialNumber)
mibBuilder.exportSymbols("MOXA-CN2600-MIB", monitorDTRDSRFlowControl=monitorDTRDSRFlowControl, basicSetting=basicSetting, accessibleIpListAddress=accessibleIpListAddress, opMode=opMode, trapServerAuthFailure=trapServerAuthFailure, timeServer=timeServer, hostName=hostName, portBaudRate=portBaudRate, dialIpNetmask=dialIpNetmask, emailWarningFromEmail=emailWarningFromEmail, socketUdpDestinationPort2=socketUdpDestinationPort2, socketTcpClientDestinationPort3=socketTcpClientDestinationPort3, netmaskRouteTable=netmaskRouteTable, socketUdpDestinationAddress1Begin=socketUdpDestinationAddress1Begin, dnsServer2IpAddr=dnsServer2IpAddr, mailWarningPower1Down=mailWarningPower1Down, dialAuthType=dialAuthType, monitorStopBits=monitorStopBits, opModePortTable=opModePortTable, dialDisconnectBy=dialDisconnectBy, reverseTerminalMapKeys=reverseTerminalMapKeys, mailWarningAuthFailure=mailWarningAuthFailure, sysManagement=sysManagement, emailWarningFourthEmailAddr=emailWarningFourthEmailAddr, firmwareVersion=firmwareVersion, drdasEntry=drdasEntry, sysStatus=sysStatus, deviceControlMaxConnection=deviceControlMaxConnection, socketUdpLocalListenPort=socketUdpLocalListenPort, reverseTerminalInactivityTime=reverseTerminalInactivityTime, socketIgnoreJammedIp=socketIgnoreJammedIp, monitorErrorCountBreak=monitorErrorCountBreak, accessibleIpListTable=accessibleIpListTable, drdasBackup2IpAddress=drdasBackup2IpAddress, emailWarningSecondEmailAddr=emailWarningSecondEmailAddr, socket=socket, lan2NetMask=lan2NetMask, mailWarningPower2Down=mailWarningPower2Down, timeSetting=timeSetting, socketCmdPort=socketCmdPort, hostTableTable=hostTableTable, gratuitousArpSendPeriod=gratuitousArpSendPeriod, monitorSerialPortSettingsEntry=monitorSerialPortSettingsEntry, portInterface=portInterface, monitorParity=monitorParity, trapServerEthernet1LinkDown=trapServerEthernet1LinkDown, mailWarningWarmStart=mailWarningWarmStart, dialOutgoingPAPID=dialOutgoingPAPID, enableAccessibleIpList=enableAccessibleIpList, comParamSetting=comParamSetting, radiusServerIp=radiusServerIp, portBaudRateManual=portBaudRateManual, drdasConnectionDownDTR=drdasConnectionDownDTR, dataBufferingPortEntry=dataBufferingPortEntry, terminalSecondHostAddress=terminalSecondHostAddress, lcmReadOnlyProtect=lcmReadOnlyProtect, networkLocalLog=networkLocalLog, portEnableWelcomeMessage=portEnableWelcomeMessage, dialTERMBINMode=dialTERMBINMode, terminalTcpAliveCheck=terminalTcpAliveCheck, userTableIndex=userTableIndex, dial=dial, PortList=PortList, drdasTcpAliveCheck=drdasTcpAliveCheck, userTableEntry=userTableEntry, dDNSPassword=dDNSPassword, accessibleIpListNetmask=accessibleIpListNetmask, mailWarningColdStart=mailWarningColdStart, reverseTerminalTable=reverseTerminalTable, monitorFIFO=monitorFIFO, socketTcpClientDestinationAddress3=socketTcpClientDestinationAddress3, terminalEntry=terminalEntry, dialLinkQualityReport=dialLinkQualityReport, dialIncomingPAPCheck=dialIncomingPAPCheck, portPhoneNumber=portPhoneNumber, routeTableIndex=routeTableIndex, drdasInactivityTime=drdasInactivityTime, portDelimiterProcess=portDelimiterProcess, lan1PppoeUserAccount=lan1PppoeUserAccount, trapServerEthernet2LinkDown=trapServerEthernet2LinkDown, drdasPrimaryIpAddress=drdasPrimaryIpAddress, monitorTxCount=monitorTxCount, portFIFO=portFIFO, terminalTable=terminalTable, lan2IpAddress=lan2IpAddress, hostIpAddress=hostIpAddress, drdasCmdPort=drdasCmdPort, dDNS=dDNS, accessibleIpListIndex=accessibleIpListIndex, saveConfiguration=saveConfiguration, socketUdpDestinationAddress4Begin=socketUdpDestinationAddress4Begin, nport=nport, monitorCTS=monitorCTS, modelName=modelName, reverseTerminalTcpPort=reverseTerminalTcpPort, localTime=localTime, monitorRxCount=monitorRxCount, monitorRemoteIp=monitorRemoteIp, lan2PppoeUserAccount=lan2PppoeUserAccount)
