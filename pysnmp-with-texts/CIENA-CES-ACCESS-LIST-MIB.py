#
# PySNMP MIB module CIENA-CES-ACCESS-LIST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIENA-CES-ACCESS-LIST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
cienaCesConfig, = mibBuilder.importSymbols("CIENA-SMI", "cienaCesConfig")
CienaGlobalState, = mibBuilder.importSymbols("CIENA-TC", "CienaGlobalState")
InetAddressType, InetPortNumber, InetAddressPrefixLength, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddressPrefixLength", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter32, MibIdentifier, IpAddress, Unsigned32, Bits, ModuleIdentity, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "MibIdentifier", "IpAddress", "Unsigned32", "Bits", "ModuleIdentity", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "ObjectIdentity", "TimeTicks")
DisplayString, TextualConvention, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "TruthValue")
cienaCesAccessListMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35))
cienaCesAccessListMIB.setRevisions(('2015-04-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cienaCesAccessListMIB.setRevisionsDescriptions(('The initial version of this MIB module.',))
if mibBuilder.loadTexts: cienaCesAccessListMIB.setLastUpdated('201504020000Z')
if mibBuilder.loadTexts: cienaCesAccessListMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: cienaCesAccessListMIB.setContactInfo('Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: cienaCesAccessListMIB.setDescription('This MIB module defines objects that describe Hardware ACLs (Access Control Lists). The MIB describes different objects that enable the network administrator to remotely view ACL profile/rule, configuration in addition to monitoring ACL rule statistics.')
cienaCesAccessListMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1))
cienaCesAclConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1))
cienaCesAclStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 2))
cienaCesAccessListMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 2))
cienaCesAccessListMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 2, 1))
cienaCesAccessListMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 2, 2))
class AclFilterAction(TextualConvention, Integer32):
    description = 'An enumeration value to indicate the filter action applied by an ACL rule.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("allow", 1), ("deny", 2))

class AclTrafficDirection(TextualConvention, Integer32):
    description = 'An enumeration value to indicate the traffic direction to which an ACL profile is applied.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ingress", 1), ("egress", 2))

class AclIpFragmentMatchType(TextualConvention, Integer32):
    description = 'An enumeration value to indicate the type of IP fragment filtering to be done as part of an ACL rule.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("any", 1), ("isfragment", 2), ("notfragment", 3))

class AclL4PortMatchType(TextualConvention, Integer32):
    description = 'An enumeration value to indicate the type of match to perform on an L4 src/dst port filter term.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("any", 1), ("single", 2), ("range", 3))

class AclInterfaceType(TextualConvention, Integer32):
    description = 'An enumeration value to indicate the type of interface to which an ACL profile is attached.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("port", 1), ("vlan", 2), ("virtualswitch", 3), ("ipinterface", 4), ("remoteinterface", 5), ("localinterface", 6))

class AclL4DstProtocol(TextualConvention, Integer32):
    description = 'An enumeration value to indicate the L4 destination protocol specified as part of an ACL rule filter term.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("any", 1), ("bgp", 2), ("bootpclient", 3), ("bootpserver", 4), ("dhcpclient", 5), ("dhcpserver", 6), ("dhcpv6client", 7), ("dhcpv6server", 8), ("dns", 9), ("ftp", 10), ("http", 11), ("ldp", 12), ("ntp", 13), ("olsr", 14), ("rip", 15), ("rpc", 16), ("snmp", 17), ("snmptrap", 18), ("ssh", 19), ("syslog", 20), ("tacacs", 21), ("telnet", 22), ("tftp", 23), ("twampctrl", 24))

cienaCesAclGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 1))
cienaCesAclAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 1, 1), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclAdminStatus.setDescription('Indicates whether the ACL feature is globally enabled or disabled.')
cienaCesAclFilterMode = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("l2l3combo", 1), ("l3only", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclFilterMode.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclFilterMode.setDescription('Indicates which global ACL device mode is currently in use.')
cienaCesAclNumAclProfileDefs = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclNumAclProfileDefs.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclNumAclProfileDefs.setDescription('Indicates the total number of configured ACL profile definitions on the device.')
cienaCesAclRemainingAclProfileDefs = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRemainingAclProfileDefs.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRemainingAclProfileDefs.setDescription('Indicates the number of remaining ACL profile definitions that can be configured on the device.')
cienaCesAclNumAclRuleDefs = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclNumAclRuleDefs.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclNumAclRuleDefs.setDescription('Indicates the total number of configured ACL rule definitions on the device.')
cienaCesAclRemainingAclRuleDefs = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRemainingAclRuleDefs.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRemainingAclRuleDefs.setDescription('Indicates the number of remaining ACL rule definitions that can be configured on the device.')
cienaCesAclProfileConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 2), )
if mibBuilder.loadTexts: cienaCesAclProfileConfigTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclProfileConfigTable.setDescription('A table of ACL profiles configured on the device. Each entry contains the ACL profile configuration data.')
cienaCesAclProfileConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 2, 1), ).setIndexNames((0, "CIENA-CES-ACCESS-LIST-MIB", "cienaCesAclProfileId"))
if mibBuilder.loadTexts: cienaCesAclProfileConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclProfileConfigTableEntry.setDescription('An entry containing the ACL profile configuration data.')
cienaCesAclProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesAclProfileId.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclProfileId.setDescription('The unique identifier of this ACL profile.')
cienaCesAclProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclProfileName.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclProfileName.setDescription('The unique name of this ACL profile.')
cienaCesAclProfileAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 2, 1, 3), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclProfileAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclProfileAdminState.setDescription('The configured administrative State of the ACL profile.')
cienaCesAclProfileOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 2, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclProfileOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclProfileOperState.setDescription('The Operational State of the ACL profile. A profile is operationally enabled if it is administratively enabled and attached to at least one interface. It is otherwise disabled. Note that the ACL feature must also be globally enabled for any profile to be operationally enabled.')
cienaCesAclProfileDefaultFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 2, 1, 5), AclFilterAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclProfileDefaultFilterAction.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclProfileDefaultFilterAction.setDescription('The configured default filter action for this ACL profile.')
cienaCesAclProfileNumRules = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclProfileNumRules.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclProfileNumRules.setDescription('The number of ACL rules configured in this profile. There will always be at least one rule defined in each profile - the default rule.')
cienaCesAclProfileAttachedInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclProfileAttachedInterfaces.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclProfileAttachedInterfaces.setDescription('The number of interfaces to which this profile is attached.')
cienaCesAclRuleConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3), )
if mibBuilder.loadTexts: cienaCesAclRuleConfigTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleConfigTable.setDescription('A table of ACL rules configured on the device. Each entry contains the ACL rule configuration data.')
cienaCesAclRuleConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1), ).setIndexNames((0, "CIENA-CES-ACCESS-LIST-MIB", "cienaCesAclProfileId"), (0, "CIENA-CES-ACCESS-LIST-MIB", "cienaCesAclRulePrecedence"))
if mibBuilder.loadTexts: cienaCesAclRuleConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleConfigTableEntry.setDescription('An entry containing the ACL rule configuration data.')
cienaCesAclRulePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: cienaCesAclRulePrecedence.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRulePrecedence.setDescription('The unique precedence value (within the profile) of this ACL rule.')
cienaCesAclRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleName.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleName.setDescription('The unique name (within the profile) of this ACL rule.')
cienaCesAclRuleFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 3), AclFilterAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleFilterAction.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleFilterAction.setDescription('The configured filter action for this ACL rule.')
cienaCesAclRuleMatchAny = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleMatchAny.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleMatchAny.setDescription('True if the ACL rule matches any traffic, False otherwise. Matching on any traffic automatically disregards all the remaining fields.')
cienaCesAclRuleMatchSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleMatchSrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleMatchSrcMacAddr.setDescription('True if the ACL rule matches on the source MAC address, False otherwise. When True, the cienaCesAclRuleSrcMacAddr and cienaCesAclRuleSrcMacAddrMask fields will contain the source MAC address and mask that are to be matched by this rule.')
cienaCesAclRuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleSrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleSrcMacAddr.setDescription('Contains the source MAC address that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchSrcMacAddr field is set to False.')
cienaCesAclRuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleSrcMacAddrMask.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleSrcMacAddrMask.setDescription('Contains the source MAC address mask that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchSrcMacAddr field is set to False.')
cienaCesAclRuleMatchDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleMatchDstMacAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleMatchDstMacAddr.setDescription('True if the ACL rule matches on the destination MAC address, False otherwise. When True, the cienaCesAclRuleDstMacAddr and cienaCesAclRuleDstMacAddrMask fields will contain the destination MAC address and mask that are to be matched by this rule.')
cienaCesAclRuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleDstMacAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleDstMacAddr.setDescription('Contains the destination MAC address that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchDstMacAddr field is set to False.')
cienaCesAclRuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleDstMacAddrMask.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleDstMacAddrMask.setDescription('Contains the destination MAC address mask that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchDstMacAddr field is set to False.')
cienaCesAclRuleMatchOuterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleMatchOuterVid.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleMatchOuterVid.setDescription('True if the ACL rule matches on the outer VID, False otherwise. When True, the cienaCesAclRuleOuterVid and cienaCesAclRuleOuterVidMask fields will contain the outer VID value and mask that are to be matched by this rule.')
cienaCesAclRuleOuterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleOuterVid.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleOuterVid.setDescription('Contains the outer VID that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchOuterVid field is set to False.')
cienaCesAclRuleOuterVidMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleOuterVidMask.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleOuterVidMask.setDescription('Contains the outer VID mask that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchOuterVid field is set to False.')
cienaCesAclRuleMatchOuterPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleMatchOuterPcp.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleMatchOuterPcp.setDescription('True if the ACL rule matches on the outer PCP, False otherwise. When True, the cienaCesAclRuleOuterPcp and cienaCesAclRuleOuterPcpMask fields will contain the outer PCP value and mask that are to be matched by this rule.')
cienaCesAclRuleOuterPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleOuterPcp.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleOuterPcp.setDescription('Contains the outer PCP that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchOuterPcp field is set to False.')
cienaCesAclRuleOuterPcpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleOuterPcpMask.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleOuterPcpMask.setDescription('Contains the outer PCP mask that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchOuterPcp field is set to False.')
cienaCesAclRuleMatchOuterDei = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleMatchOuterDei.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleMatchOuterDei.setDescription('True if the ACL rule matches on the outer DEI bit, False otherwise. When True, the cienaCesAclRuleOuterDei field will contain the outer DEI value that is to be matched by this rule.')
cienaCesAclRuleOuterDei = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleOuterDei.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleOuterDei.setDescription('Contains the outer DEI bit that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchOuterDei field is set to False.')
cienaCesAclRuleMatchBaseEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleMatchBaseEtype.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleMatchBaseEtype.setDescription('True if the ACL rule matches on the base ethertype, False otherwise. When True, the cienaCesAclRuleBaseEtype field will contain the base ethertype value that is to be matched by this rule.')
cienaCesAclRuleBaseEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleBaseEtype.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleBaseEtype.setDescription('Contains the base ethertype that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchBaseEtype field is set to False.')
cienaCesAclRuleMatchSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleMatchSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleMatchSrcIpAddr.setDescription('True if the ACL rule matches on the source IP address, False otherwise. When True, the cienaCesAclRuleSrcIpAddrType field will contain the IP address type (IPv4 or IPv6) and the cienaCesAclRuleSrcIpAddr and cienaCesAclRuleSrcIpAddrPrefixLength fields will contain the IP address value and mask that are to be matched by this rule.')
cienaCesAclRuleSrcIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 22), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleSrcIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleSrcIpAddrType.setDescription('Identifies the address family of the source IP address (IPv4/IPv6). This field is not applicable when the cienaCesAclRuleMatchSrcIpAddr field is set to False')
cienaCesAclRuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 23), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleSrcIpAddr.setDescription('Contains the source IP address that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchSrcIpAddr field is set to False.')
cienaCesAclRuleSrcIpAddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 24), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleSrcIpAddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleSrcIpAddrPrefixLength.setDescription('Contains the prefix length of the source IP address that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchSrcIpAddr field is set to False.')
cienaCesAclRuleMatchDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleMatchDstIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleMatchDstIpAddr.setDescription('True if the ACL rule matches on the destination IP address, False otherwise. When True, the cienaCesAclRuleDstIpAddrType field will contain the IP address type (IPv4 or IPv6) and the cienaCesAclRuleDstIpAddr and cienaCesAclRuleDstIpAddrPrefixLength fields will contain the IP address value and mask that are to be matched by this rule.')
cienaCesAclRuleDstIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 26), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleDstIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleDstIpAddrType.setDescription('Identifies the address family of the destination IP address (IPv4/IPv6). This field is not applicable when the cienaCesAclRuleMatchDstIpAddr field is set to False')
cienaCesAclRuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 27), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleDstIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleDstIpAddr.setDescription('Contains the destination IP address that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchDstIpAddr field is set to False.')
cienaCesAclRuleDstIpAddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 28), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleDstIpAddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleDstIpAddrPrefixLength.setDescription('Contains the prefix length of the destination IP address that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchDstIpAddr field is set to False.')
cienaCesAclRuleMatchIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleMatchIpProtocol.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleMatchIpProtocol.setDescription('True if the ACL rule matches on the IP protocol, False otherwise. When True, the cienaCesAclRuleIpProtocol field will contain the IP protocol value that is to be matched by this rule.')
cienaCesAclRuleIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleIpProtocol.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleIpProtocol.setDescription('Contains the IP protocol value that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchIpProtocol field is set to False.')
cienaCesAclRuleMatchDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleMatchDscp.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleMatchDscp.setDescription('True if the ACL rule matches on the DSCP value, False otherwise. When True, the cienaCesAclRuleDscp and cienaCesAclRuleDscpMask fields will contain the DSCP value and mask that are to be matched by this rule.')
cienaCesAclRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleDscp.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleDscp.setDescription('Contains the DSCP value that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchDscp field is set to False.')
cienaCesAclRuleDscpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleDscpMask.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleDscpMask.setDescription('Contains the outer DSCP mask that is to be matched by this rule. This field is not applicable when the cienaCesAclRuleMatchDscp field is set to False.')
cienaCesAclRuleMatchL4SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 34), AclL4PortMatchType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleMatchL4SrcPort.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleMatchL4SrcPort.setDescription("Indicates the type of L4 source port matching that the ACL rule is performing. A value of 'any' indicates that the rule matches any L4 source port. A value of 'single' indicates that the rules matches on a single L4 source port specified in the cienaCesAclRuleL4SrcPort field. A value of 'range' indicates that the rule matches on a range of ports, with the cienaCesAclRuleL4SrcPort field specifiying the lower bound and the cienaCesAclRuleL4SrcPortUpper specifying the upper bound of the range.")
cienaCesAclRuleL4SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 35), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleL4SrcPort.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleL4SrcPort.setDescription("Contains the lower bound or single L4 source port value that is to be matched by this rule depending on the value of cienaCesAclRuleMatchL4SrcPort. This field is not applicable when the cienaCesAclRuleMatchL4SrcPort field is set to 'any'.")
cienaCesAclRuleL4SrcPortUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 36), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleL4SrcPortUpper.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleL4SrcPortUpper.setDescription("Contains the upper bound of the L4 source port range that is to be matched by this rule depending on the value of cienaCesAclRuleMatchL4SrcPort. This field is not applicable when the cienaCesAclRuleMatchL4SrcPort field is set to 'any' or 'single'.")
cienaCesAclRuleMatchL4DstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 37), AclL4PortMatchType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleMatchL4DstPort.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleMatchL4DstPort.setDescription("Indicates the type of L4 destination port matching that the ACL rule is performing. A value of 'any' indicates that the rule matches any L4 destination port. A value of 'single' indicates that the rules matches on a single L4 destination port specified in the cienaCesAclRuleL4SrcPort field. A value of 'range' indicates that the rule matches on a range of ports, with the cienaCesAclRuleL4DstPort field specifiying the lower bound and the cienaCesAclRuleL4DstPortUpper specifying the upper bound of the range.")
cienaCesAclRuleL4DstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 38), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleL4DstPort.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleL4DstPort.setDescription("Contains the lower bound or single L4 destination port value that is to be matched by this rule depending on the value of cienaCesAclRuleMatchL4DstPort. This field is not applicable when the cienaCesAclRuleMatchL4DstPort field is set to 'any'.")
cienaCesAclRuleL4DstPortUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 39), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleL4DstPortUpper.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleL4DstPortUpper.setDescription("Contains the upper bound of the L4 destination port range that is to be matched by this rule depending on the value of cienaCesAclRuleMatchL4DstPort. This field is not applicable when the cienaCesAclRuleMatchL4DstPort field is set to 'any' or 'single'.")
cienaCesAclRuleMatchL4DstProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 40), AclL4DstProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleMatchL4DstProtocol.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleMatchL4DstProtocol.setDescription("Indicates the L4 destination protocol name that is to be matched by this rule. A value of 'any' indicates that the rule will match any protocol. Note that this field is mutually exclusive with cienaCesAclRuleMatchL4DstPort - i.e. only one of these fields can have a value different from 'any' at a given time.")
cienaCesAclRuleMatchIpFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 41), AclIpFragmentMatchType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleMatchIpFragment.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleMatchIpFragment.setDescription("Indicates the type of IP fragment matching that is to be matched by this rule. A value of 'any' indicates that the rule will match both fragmented and non-fragmented packets. A value of 'fragment' indicates that the rule will match only fragmented packets. A value of 'nonfragment' indicates that the rule will match only non-fragmented (head) packets.")
cienaCesAclRuleMatchTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 42), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleMatchTcpFlags.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleMatchTcpFlags.setDescription('True if the ACL rule matches on specific TCP Flags, False otherwise. When True, the cienaCesAclRuleTcpFlags field will contain the TCP Flags that are to be matched by this rule.')
cienaCesAclRuleTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 3, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleTcpFlags.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleTcpFlags.setDescription("Contains a comma-separated uppercase string list of TCP Flags that are to be matched by this rule, i.e. 'SYN,ACK,RST,...'. This field is not applicable when the cienaCesAclRuleMatchTcpFlags field is set to False.")
cienaCesAclProfileAttachmentTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 4), )
if mibBuilder.loadTexts: cienaCesAclProfileAttachmentTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclProfileAttachmentTable.setDescription('A table showing the interface attachments for each profile on the device. Each entry contains the name of the interface and the traffic direction on which the profile is applied.')
cienaCesAclProfileAttachmentTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 4, 1), ).setIndexNames((0, "CIENA-CES-ACCESS-LIST-MIB", "cienaCesAclProfileId"), (0, "CIENA-CES-ACCESS-LIST-MIB", "cienaCesAclInterfaceType"), (0, "CIENA-CES-ACCESS-LIST-MIB", "cienaCesAclInterfaceId"))
if mibBuilder.loadTexts: cienaCesAclProfileAttachmentTableEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclProfileAttachmentTableEntry.setDescription('An entry containing the ACL profile attachment data.')
cienaCesAclInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 4, 1, 1), AclInterfaceType())
if mibBuilder.loadTexts: cienaCesAclInterfaceType.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclInterfaceType.setDescription('The type of the interface to which this ACL profile is attached.')
cienaCesAclInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048576)))
if mibBuilder.loadTexts: cienaCesAclInterfaceId.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclInterfaceId.setDescription('The ID of the interface to which this ACL profile is attached.')
cienaCesAclInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclInterfaceName.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclInterfaceName.setDescription('The name of the interface to which this ACL profile is attached.')
cienaCesAclDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 1, 4, 1, 4), AclTrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclDirection.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclDirection.setDescription("The interface's traffic direction (ingress/egress) on which the ACL profile is applied.")
cienaCesAclProfileGlobalRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 2, 1), )
if mibBuilder.loadTexts: cienaCesAclProfileGlobalRuleStatsTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclProfileGlobalRuleStatsTable.setDescription("A table of global ACL profile rule statistics. Global ACL profile rule statistics are the aggregate counts of the hit statistics for all instances of the ACL profile's rules.")
cienaCesAclProfileGlobalRuleStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 2, 1, 1), ).setIndexNames((0, "CIENA-CES-ACCESS-LIST-MIB", "cienaCesAclProfileId"), (0, "CIENA-CES-ACCESS-LIST-MIB", "cienaCesAclRulePrecedence"))
if mibBuilder.loadTexts: cienaCesAclProfileGlobalRuleStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclProfileGlobalRuleStatsTableEntry.setDescription('An entry containing the ACL profile global rule hit statistics.')
cienaCesAclGlobalRuleStatsPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclGlobalRuleStatsPacketCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclGlobalRuleStatsPacketCount.setDescription('The number of packets that matched this ACL rule.')
cienaCesAclGlobalRuleStatsByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclGlobalRuleStatsByteCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclGlobalRuleStatsByteCount.setDescription('The number of bytes that matched this ACL rule.')
cienaCesAclProfileRuleInstanceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 2, 2), )
if mibBuilder.loadTexts: cienaCesAclProfileRuleInstanceStatsTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclProfileRuleInstanceStatsTable.setDescription('A table of ACL profile rule instance statistics. These ACL rule hit statistics are specific to the rules applied on the particular interface.')
cienaCesAclProfileRuleInstanceStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 2, 2, 1), ).setIndexNames((0, "CIENA-CES-ACCESS-LIST-MIB", "cienaCesAclProfileId"), (0, "CIENA-CES-ACCESS-LIST-MIB", "cienaCesAclInterfaceType"), (0, "CIENA-CES-ACCESS-LIST-MIB", "cienaCesAclInterfaceId"), (0, "CIENA-CES-ACCESS-LIST-MIB", "cienaCesAclRulePrecedence"))
if mibBuilder.loadTexts: cienaCesAclProfileRuleInstanceStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclProfileRuleInstanceStatsTableEntry.setDescription('An entry containing the ACL profile rule instance hit statistics.')
cienaCesAclRuleInstanceStatsPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleInstanceStatsPacketCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleInstanceStatsPacketCount.setDescription('The number of packets that matched this ACL rule instance.')
cienaCesAclRuleInstanceStatsByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 35, 1, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclRuleInstanceStatsByteCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclRuleInstanceStatsByteCount.setDescription('The number of bytes that matched this ACL rule instance.')
mibBuilder.exportSymbols("CIENA-CES-ACCESS-LIST-MIB", cienaCesAclRuleDstMacAddr=cienaCesAclRuleDstMacAddr, cienaCesAclRuleConfigTable=cienaCesAclRuleConfigTable, cienaCesAclProfileConfigTable=cienaCesAclProfileConfigTable, cienaCesAclRuleDstIpAddrType=cienaCesAclRuleDstIpAddrType, cienaCesAclRuleOuterPcpMask=cienaCesAclRuleOuterPcpMask, cienaCesAclRuleSrcMacAddrMask=cienaCesAclRuleSrcMacAddrMask, cienaCesAclRuleBaseEtype=cienaCesAclRuleBaseEtype, AclL4DstProtocol=AclL4DstProtocol, cienaCesAclRuleMatchL4DstProtocol=cienaCesAclRuleMatchL4DstProtocol, cienaCesAclRemainingAclRuleDefs=cienaCesAclRemainingAclRuleDefs, AclInterfaceType=AclInterfaceType, cienaCesAclRuleName=cienaCesAclRuleName, cienaCesAclGlobalRuleStatsByteCount=cienaCesAclGlobalRuleStatsByteCount, cienaCesAclRuleMatchIpFragment=cienaCesAclRuleMatchIpFragment, cienaCesAclNumAclProfileDefs=cienaCesAclNumAclProfileDefs, cienaCesAclInterfaceName=cienaCesAclInterfaceName, cienaCesAclRuleMatchOuterPcp=cienaCesAclRuleMatchOuterPcp, cienaCesAclRuleFilterAction=cienaCesAclRuleFilterAction, cienaCesAclRuleMatchIpProtocol=cienaCesAclRuleMatchIpProtocol, cienaCesAclProfileRuleInstanceStatsTableEntry=cienaCesAclProfileRuleInstanceStatsTableEntry, PYSNMP_MODULE_ID=cienaCesAccessListMIB, cienaCesAclProfileDefaultFilterAction=cienaCesAclProfileDefaultFilterAction, cienaCesAclFilterMode=cienaCesAclFilterMode, cienaCesAclRemainingAclProfileDefs=cienaCesAclRemainingAclProfileDefs, cienaCesAclRuleMatchSrcIpAddr=cienaCesAclRuleMatchSrcIpAddr, cienaCesAclProfileRuleInstanceStatsTable=cienaCesAclProfileRuleInstanceStatsTable, cienaCesAclRuleSrcIpAddrType=cienaCesAclRuleSrcIpAddrType, cienaCesAclConfiguration=cienaCesAclConfiguration, cienaCesAccessListMIB=cienaCesAccessListMIB, cienaCesAclRuleMatchDstIpAddr=cienaCesAclRuleMatchDstIpAddr, cienaCesAclRuleSrcIpAddr=cienaCesAclRuleSrcIpAddr, cienaCesAclRuleMatchOuterDei=cienaCesAclRuleMatchOuterDei, cienaCesAclProfileAttachmentTable=cienaCesAclProfileAttachmentTable, cienaCesAclProfileOperState=cienaCesAclProfileOperState, cienaCesAclRuleMatchOuterVid=cienaCesAclRuleMatchOuterVid, cienaCesAclRuleConfigTableEntry=cienaCesAclRuleConfigTableEntry, cienaCesAclRuleDstIpAddrPrefixLength=cienaCesAclRuleDstIpAddrPrefixLength, cienaCesAclAdminStatus=cienaCesAclAdminStatus, cienaCesAclRuleOuterDei=cienaCesAclRuleOuterDei, cienaCesAclRuleL4DstPort=cienaCesAclRuleL4DstPort, cienaCesAclRuleTcpFlags=cienaCesAclRuleTcpFlags, AclL4PortMatchType=AclL4PortMatchType, cienaCesAclProfileConfigTableEntry=cienaCesAclProfileConfigTableEntry, cienaCesAclRuleOuterPcp=cienaCesAclRuleOuterPcp, cienaCesAclRuleMatchSrcMacAddr=cienaCesAclRuleMatchSrcMacAddr, cienaCesAclRuleDstMacAddrMask=cienaCesAclRuleDstMacAddrMask, cienaCesAccessListMIBObjects=cienaCesAccessListMIBObjects, cienaCesAclStatistics=cienaCesAclStatistics, cienaCesAclRuleOuterVidMask=cienaCesAclRuleOuterVidMask, cienaCesAclProfileGlobalRuleStatsTable=cienaCesAclProfileGlobalRuleStatsTable, cienaCesAclProfileGlobalRuleStatsTableEntry=cienaCesAclProfileGlobalRuleStatsTableEntry, AclFilterAction=AclFilterAction, cienaCesAclRuleSrcIpAddrPrefixLength=cienaCesAclRuleSrcIpAddrPrefixLength, cienaCesAclRuleMatchL4SrcPort=cienaCesAclRuleMatchL4SrcPort, cienaCesAclRulePrecedence=cienaCesAclRulePrecedence, cienaCesAclRuleIpProtocol=cienaCesAclRuleIpProtocol, cienaCesAclInterfaceType=cienaCesAclInterfaceType, AclTrafficDirection=AclTrafficDirection, cienaCesAclProfileName=cienaCesAclProfileName, cienaCesAclGlobalRuleStatsPacketCount=cienaCesAclGlobalRuleStatsPacketCount, cienaCesAclProfileNumRules=cienaCesAclProfileNumRules, cienaCesAclRuleDstIpAddr=cienaCesAclRuleDstIpAddr, cienaCesAclRuleL4DstPortUpper=cienaCesAclRuleL4DstPortUpper, cienaCesAclRuleL4SrcPortUpper=cienaCesAclRuleL4SrcPortUpper, cienaCesAclProfileId=cienaCesAclProfileId, cienaCesAclRuleDscp=cienaCesAclRuleDscp, cienaCesAclRuleL4SrcPort=cienaCesAclRuleL4SrcPort, cienaCesAclGlobalConfig=cienaCesAclGlobalConfig, cienaCesAclRuleOuterVid=cienaCesAclRuleOuterVid, cienaCesAclProfileAttachedInterfaces=cienaCesAclProfileAttachedInterfaces, cienaCesAclRuleMatchBaseEtype=cienaCesAclRuleMatchBaseEtype, cienaCesAclDirection=cienaCesAclDirection, cienaCesAclRuleInstanceStatsByteCount=cienaCesAclRuleInstanceStatsByteCount, cienaCesAclProfileAttachmentTableEntry=cienaCesAclProfileAttachmentTableEntry, cienaCesAccessListMIBCompliances=cienaCesAccessListMIBCompliances, cienaCesAclRuleSrcMacAddr=cienaCesAclRuleSrcMacAddr, cienaCesAclRuleMatchDstMacAddr=cienaCesAclRuleMatchDstMacAddr, cienaCesAclRuleMatchDscp=cienaCesAclRuleMatchDscp, cienaCesAclNumAclRuleDefs=cienaCesAclNumAclRuleDefs, cienaCesAclInterfaceId=cienaCesAclInterfaceId, cienaCesAclRuleDscpMask=cienaCesAclRuleDscpMask, cienaCesAclRuleMatchTcpFlags=cienaCesAclRuleMatchTcpFlags, AclIpFragmentMatchType=AclIpFragmentMatchType, cienaCesAclProfileAdminState=cienaCesAclProfileAdminState, cienaCesAccessListMIBConformance=cienaCesAccessListMIBConformance, cienaCesAclRuleMatchAny=cienaCesAclRuleMatchAny, cienaCesAclRuleInstanceStatsPacketCount=cienaCesAclRuleInstanceStatsPacketCount, cienaCesAccessListMIBGroups=cienaCesAccessListMIBGroups, cienaCesAclRuleMatchL4DstPort=cienaCesAclRuleMatchL4DstPort)
