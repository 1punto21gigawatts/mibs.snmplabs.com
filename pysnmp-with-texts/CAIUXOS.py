#
# PySNMP MIB module CAIUXOS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CAIUXOS
# Produced by pysmi-0.3.4 at Wed May  1 11:46:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, enterprises, Bits, NotificationType, ObjectIdentity, Unsigned32, Integer32, ModuleIdentity, IpAddress, MibIdentifier, Gauge32, iso, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "enterprises", "Bits", "NotificationType", "ObjectIdentity", "Unsigned32", "Integer32", "ModuleIdentity", "IpAddress", "MibIdentifier", "Gauge32", "iso", "NotificationType", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cai = MibIdentifier((1, 3, 6, 1, 4, 1, 791))
caiSysMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2))
agentWorks = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9))
unix = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4))
caiUxOs = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5))
uxsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1))
uxsStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2))
uxsAvailableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3))
uxsPollGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4))
uxsConfigGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1))
uxsConfigSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 2))
uxsConfigCPUGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 3))
uxsConfigLoadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 4))
uxsConfigMemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 5))
uxsConfigSwapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 6))
uxsConfigFSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7))
uxsConfigDiskGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8))
uxsConfigFileGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9))
uxsConfigProcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10))
uxsConfigPrnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11))
uxsConfigNetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12))
uxsConfigIPCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 13))
uxsStatusGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1))
uxsStatusCPUGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2))
uxsStatusLoadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3))
uxsStatusMemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4))
uxsStatusSwapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5))
uxsStatusFSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6))
uxsStatusDiskGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7))
uxsStatusFileGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8))
uxsStatusProcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9))
uxsStatusPrnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10))
uxsStatusNetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11))
uxsStatusIPCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12))
uxsAvailFSysRefresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsAvailFSysRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: uxsAvailFSysRefresh.setDescription('&<caiUxOs.100>Set this value to refresh(2) to check the operating system for recently configured file systems. The user can not set the value to none(1).')
uxsAvailFSysTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 2), )
if mibBuilder.loadTexts: uxsAvailFSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsAvailFSysTable.setDescription('&<caiUxOs.101>The table containing a list of file systems that are currently known to the agent and are available for monitoring.')
uxsAvailDiskRefresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsAvailDiskRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: uxsAvailDiskRefresh.setDescription('&<caiUxOs.102>Set this value to refresh(2) to check the operating system for recently configured physical disks. The user can not set the value to none(1).')
uxsAvailDiskTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 4), )
if mibBuilder.loadTexts: uxsAvailDiskTable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsAvailDiskTable.setDescription('&<caiUxOs.103>The table containing a list of physical disks that are currently known to the agent and are available for monitoring.')
uxsAvailPrnRefresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsAvailPrnRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: uxsAvailPrnRefresh.setDescription('&<caiUxOs.104>Set this value to refresh(2) to check the operating system for recently configured printers or printer queues. The user can not set the value to none(1).')
uxsAvailPrnTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 6), )
if mibBuilder.loadTexts: uxsAvailPrnTable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsAvailPrnTable.setDescription('&<caiUxOs.105>The table containing a list of printers and printer queues that are currently known to the agent and are available for monitoring.')
uxsPollNetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1))
uxsPollIPCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2))
uxsConfigGeneralAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigGeneralAgentVersion.setDescription('&<caiUxOs.106>The version of the agent that is running.')
uxsConfigGeneralColdStartTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralColdStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigGeneralColdStartTime.setDescription('&<caiUxOs.107>The date/time the agent was started.')
uxsConfigGeneralWarmStartTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralWarmStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigGeneralWarmStartTime.setDescription('&<caiUxOs.108>The date/time that the agent was last reconfigured through the SNMP interface.')
uxsConfigGeneralCPUPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralCPUPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigGeneralCPUPollTime.setDescription('&<caiUxOs.109>The last date/time that the CPU information was polled.')
uxsConfigGeneralLoadPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralLoadPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigGeneralLoadPollTime.setDescription('&<caiUxOs.110>The last date/time that the load average information was polled.')
uxsConfigGeneralMemPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralMemPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigGeneralMemPollTime.setDescription('&<caiUxOs.111>The last date/time that the real memory information was polled.')
uxsConfigGeneralSwapPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralSwapPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigGeneralSwapPollTime.setDescription('&<caiUxOs.112>The last date/time that the swap information was polled.')
uxsConfigGeneralFSysPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralFSysPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigGeneralFSysPollTime.setDescription('&<caiUxOs.113>The last date/time that the file system information was polled.')
uxsConfigGeneralDiskPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralDiskPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigGeneralDiskPollTime.setDescription('&<caiUxOs.114>The last date/time that the physical disk information was polled.')
uxsConfigGeneralFilePollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralFilePollTime.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigGeneralFilePollTime.setDescription('&<caiUxOs.115>The last date/time that the file information was polled.')
uxsConfigGeneralProcPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralProcPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigGeneralProcPollTime.setDescription('&<caiUxOs.116>The last date/time that the process information was polled.')
uxsConfigGeneralPrnPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralPrnPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigGeneralPrnPollTime.setDescription('&<caiUxOs.117>The last date/time that the printer queue information was polled.')
uxsConfigGeneralNetPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralNetPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigGeneralNetPollTime.setDescription('&<caiUxOs.118>The last date/time that the Network Interface was polled.')
uxsConfigGeneralIPCPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralIPCPollTime.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigGeneralIPCPollTime.setDescription('&<caiUxOs.119>The last date/time that the Inter Process Communication information was polled.')
uxsConfigSysNodeName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigSysNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigSysNodeName.setDescription('&<caiUxOs.120>The name of the UNIX node.')
uxsConfigSysSystemName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigSysSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigSysSystemName.setDescription('&<caiUxOs.121>The name of the operating system installed on the machine.')
uxsConfigSysRelease = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigSysRelease.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigSysRelease.setDescription('&<caiUxOs.122>The release of the operating system installed on the machine.')
uxsConfigSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigSysVersion.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigSysVersion.setDescription('&<caiUxOs.123>The version of the operating system installed on the machine.')
uxsConfigSysHardware = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigSysHardware.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigSysHardware.setDescription('&<caiUxOs.124>The name of the hardware type of the machine.')
uxsConfigSysBootTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigSysBootTime.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigSysBootTime.setDescription('&<caiUxOs.125>The date/time the machine was booted.')
uxsConfigSysRunLevel = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigSysRunLevel.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigSysRunLevel.setDescription('&<caiUxOs.126>The run level of the machine at the time the agent started.')
uxsConfigCPUPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigCPUPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigCPUPollInterval.setDescription('&<caiUxOs.127>The time, in seconds, between the collections of the CPU information. Valid ranges: -1 (Suspended), 30 seconds or greater.')
uxsConfigCPUPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigCPUPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigCPUPollMethod.setDescription('&<caiUxOs.128>Defines if the CPU information is collected. Valid values: disable(1) or use-polling-period(2).')
uxsConfigCPULag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigCPULag.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigCPULag.setDescription('&<caiUxOs.129>The number of times that the threshold has to be reached before the state changes. Valid range: Greater than 0.')
uxsConfigCPUWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigCPUWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigCPUWarn.setDescription('&<caiUxOs.130>The value for CPU usage, as a percentage, that is considered a warning level for that resource. Valid ranges: Greater than 0, less than 99, not greater than or equal to the critical threshold.')
uxsConfigCPUCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigCPUCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigCPUCrit.setDescription('&<caiUxOs.131>The value for CPU usage, as a percentage, that is considered a critical level for that resource. Valid ranges: Greater than 1, less than 100, not less than or equal to the warning threshold.')
uxsConfigCPUMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigCPUMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigCPUMonitor.setDescription("&<caiUxOs.132>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsConfigCPULossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigCPULossAction.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigCPULossAction.setDescription('&<caiUxOs.133>Defines the action to take if the CPU is removed from the machine. Valid values: remove(1), up(2) or down(3).')
uxsConfigLoadPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigLoadPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigLoadPollInterval.setDescription('&<caiUxOs.134>The time, in seconds, between the collections of the load average information. Valid ranges: -1 (Suspended), 30 seconds or greater.')
uxsConfigLoadPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigLoadPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigLoadPollMethod.setDescription('&<caiUxOs.135>Defines whether the load average information is collected. Valid values: disable(1) or use-polling-period(2).')
uxsConfigMemPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigMemPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigMemPollInterval.setDescription('&<caiUxOs.136>The time, in seconds, between the collections of the real memory information. Valid ranges: -1 (Suspended), 30 seconds or greater.')
uxsConfigMemPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigMemPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigMemPollMethod.setDescription('&<caiUxOs.137>Defines whether the real memory information is collected. Valid values: disable(1) or use-polling-period(2).')
uxsConfigSwapPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigSwapPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigSwapPollInterval.setDescription('&<caiUxOs.138>The time, in seconds, between the collections of the swap usage information. Valid ranges: -1 (Suspended), 30 seconds or greater.')
uxsConfigSwapPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigSwapPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigSwapPollMethod.setDescription('&<caiUxOs.139>Defines whether the swap usage information is collected. Valid values: disable(1) or use-polling-period(2).')
uxsConfigSwapLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigSwapLag.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigSwapLag.setDescription('&<caiUxOs.140>The number of times that the threshold has to be reached before the state changes. Valid range: Greater than 0.')
uxsConfigSwapWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 6, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigSwapWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigSwapWarn.setDescription('&<caiUxOs.141>The value for used swap space, either as a percentage or in kilobytes, that is considered a warning level for that resource. Valid ranges: Greater than 0, less than total swap - 1, not greater than or equal to the critical threshold.')
uxsConfigSwapCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigSwapCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigSwapCrit.setDescription('&<caiUxOs.142>The value for used swap space, either as a percentage or in kilobytes, that is considered a critical level for that resource. Valid ranges: Greater than 1, less than total swap, not less than or equal to the warning threshold.')
uxsConfigSwapMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigSwapMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigSwapMonitor.setDescription("&<caiUxOs.143>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsConfigSwapLossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigSwapLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigSwapLossAction.setDescription('&<caiUxOs.144>Defines the action to take if the swap partition is removed from the machine. Valid values: remove(1), up(2) or down(3).')
uxsConfigFSysPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysPollInterval.setDescription('&<caiUxOs.145>The time, in seconds, between the collections of the file system information. Valid ranges: -1 (Suspended), 30 seconds or greater.')
uxsConfigFSysPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysPollMethod.setDescription('&<caiUxOs.146>Defines whether the file system information is collected. Valid values: disable(1) or use-polling-period(2).')
uxsConfigFSysSpaceWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysSpaceWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysSpaceWarn.setDescription('&<caiUxOs.147>The value for file system space, either as a percentage or in kilobytes, that is considered a warning level for that resource. Valid ranges: Greater than 0, less than file system size - 1, not greater than or equal to the critical threshold.')
uxsConfigFSysSpaceCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysSpaceCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysSpaceCrit.setDescription('&<caiUxOs.148>The value for file system space, either as a percentage or in kilobytes, that is considered a critical level for that resource. Valid ranges: Greater than 1, less than file system size, not less than or equal to the warning threshold.')
uxsConfigFSysSpaceMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysSpaceMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysSpaceMonitor.setDescription("&<caiUxOs.149>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsConfigFSysSpaceDWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysSpaceDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysSpaceDWarn.setDescription('&<caiUxOs.150>The value for file system delta space, either as a percentage or in kilobytes, that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsConfigFSysSpaceDCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysSpaceDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysSpaceDCrit.setDescription('&<caiUxOs.151>The value for file system delta space, either as a percentage or in kilobytes, that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsConfigFSysSpaceDMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysSpaceDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysSpaceDMonitor.setDescription("&<caiUxOs.152>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsConfigFSysInodesWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysInodesWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysInodesWarn.setDescription('&<caiUxOs.153>The value for inodes, either as a percentage or absolute value, that is considered a warning level for that resource. Valid ranges: Greater than 0, less than total inodes - 1, not greater than or equal to the critical threshold.')
uxsConfigFSysInodesCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysInodesCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysInodesCrit.setDescription('&<caiUxOs.154>The value for inodes, either as percentage or absolute value, that is considered a critical level for that resource. Valid ranges: Greater than 1, less than total inodes, not less than or equal to the warning threshold.')
uxsConfigFSysInodesMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysInodesMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysInodesMonitor.setDescription("&<caiUxOs.155>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsConfigFSysInodesDWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysInodesDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysInodesDWarn.setDescription('&<caiUxOs.156>The value for inodes delta, either as a percentage or absolute value, that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsConfigFSysInodesDCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysInodesDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysInodesDCrit.setDescription('&<caiUxOs.157>The value for inodes delta, either as a percentage or absolute value, that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsConfigFSysInodesDMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysInodesDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysInodesDMonitor.setDescription("&<caiUxOs.158>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsConfigFSysMountedMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysMountedMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysMountedMonitor.setDescription("&<caiUxOs.159>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1) or monitor(2).")
uxsConfigFSysLossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysLossAction.setDescription('&<caiUxOs.160>Defines the action to take if the file system is removed from the file system table. Valid values: remove(1), up(2) or down(3).')
uxsConfigFSysNameAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysNameAdd.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysNameAdd.setDescription('&<caiUxOs.161>Defines the name of the file system watcher to add.')
uxsConfigFSysNameRemove = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysNameRemove.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFSysNameRemove.setDescription('&<caiUxOs.162>Defines the name of the file system watcher to remove.')
uxsConfigDiskPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigDiskPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigDiskPollInterval.setDescription('&<caiUxOs.163>The time, in seconds, between the collections of the physical disk information. Valid ranges: -1 (Suspended), 30 seconds or greater.')
uxsConfigDiskPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigDiskPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigDiskPollMethod.setDescription('&<caiUxOs.164>Defines whether the physical disk information is collected. Valid values: disable(1) or use-polling-period(2).')
uxsConfigDiskTPutWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigDiskTPutWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigDiskTPutWarn.setDescription('&<caiUxOs.165>The value for physical disk throughput in kilobytes per second that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsConfigDiskTPutCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigDiskTPutCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigDiskTPutCrit.setDescription('&<caiUxOs.166>The value for physical disk throughput in kilobytes per second that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsConfigDiskTPutMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigDiskTPutMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigDiskTPutMonitor.setDescription("&<caiUxOs.167>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsConfigDiskLossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigDiskLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigDiskLossAction.setDescription('&<caiUxOs.168>Defines the action to take if the physical disk is removed from the machine. Valid values: remove(1), up(2) or down(3).')
uxsConfigDiskNameAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigDiskNameAdd.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigDiskNameAdd.setDescription('&<caiUxOs.169>Defines the name of the physical disk watcher to add.')
uxsConfigDiskNameRemove = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigDiskNameRemove.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigDiskNameRemove.setDescription('&<caiUxOs.170>Defines the name of the physical disk watcher to remove.')
uxsConfigFilePollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFilePollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFilePollInterval.setDescription('&<caiUxOs.171>The time, in seconds, between the collections of the file information. Valid ranges: -1 (Suspended), 30 seconds or greater.')
uxsConfigFilePollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFilePollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFilePollMethod.setDescription('&<caiUxOs.172>Defines whether the file information is collected. Valid values: disable(1) or use-polling-period(2).')
uxsConfigFileDesc = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileDesc.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFileDesc.setDescription('&<caiUxOs.173>The description associated with the file watcher.')
uxsConfigFileExist = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileExist.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFileExist.setDescription('&<caiUxOs.174>The type of existence monitoring to apply to the file watcher. Valid values: should-exist(1) or should-not-exist(2)')
uxsConfigFileExistMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileExistMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFileExistMonitor.setDescription("&<caiUxOs.175>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1) or monitor(2).")
uxsConfigFileModTimeMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileModTimeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFileModTimeMonitor.setDescription("&<caiUxOs.176>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1) or monitor(2).")
uxsConfigFileSizeWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileSizeWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFileSizeWarn.setDescription('&<caiUxOs.177>The value for file size, either as a percentage of the total or as an absolute value, that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsConfigFileSizeCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileSizeCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFileSizeCrit.setDescription('&<caiUxOs.178>The value for file size, either as a percentage of the total or as an absolute value, that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsConfigFileSizeMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileSizeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFileSizeMonitor.setDescription("&<caiUxOs.179>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsConfigFileSizeDWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileSizeDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFileSizeDWarn.setDescription('&<caiUxOs.180>The value for file size delta, either as a percentage of the total or as an absolute value, that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsConfigFileSizeDCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileSizeDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFileSizeDCrit.setDescription('&<caiUxOs.181>The value for file size delta, either as a percentage of the total or as an absolute value, that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsConfigFileSizeDMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileSizeDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFileSizeDMonitor.setDescription("&<caiUxOs.182>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsConfigFileNameAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileNameAdd.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFileNameAdd.setDescription('&<caiUxOs.183>Defines the name of the file watcher to add.')
uxsConfigFileNameRemove = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileNameRemove.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigFileNameRemove.setDescription('&<caiUxOs.184>Defines the name of the file watcher to remove.')
uxsConfigProcPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcPollInterval.setDescription('&<caiUxOs.185>The time, in seconds, between the collections of the process information. Valid ranges: -1 (Suspended), 30 seconds or greater.')
uxsConfigProcPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcPollMethod.setDescription('&<caiUxOs.186>Defines whether the process information is collected. Valid values: disable(1) or use-polling-period(2).')
uxsConfigProcPath = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcPath.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcPath.setDescription('&<caiUxOs.187>The path of the process to match. Valid values are a string with an optional * at the end of the string for wild card matching.')
uxsConfigProcArgs = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcArgs.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcArgs.setDescription('&<caiUxOs.188>A section of the processes arguments to match.')
uxsConfigProcUsers = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcUsers.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcUsers.setDescription('&<caiUxOs.189>List of users to match. Format details of the string are documented in the online help.')
uxsConfigProcInstMin = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcInstMin.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcInstMin.setDescription('&<caiUxOs.190>Minimum number of instances expected to match the key. Valid values: -1, 0 or greater.')
uxsConfigProcInstMax = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcInstMax.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcInstMax.setDescription('&<caiUxOs.191>Maximum number of instances expected to match the key. Valid values: -1, 0 or greater.')
uxsConfigProcInstMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcInstMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcInstMonitor.setDescription("&<caiUxOs.192>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1) or monitor(2).")
uxsConfigProcChldMin = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcChldMin.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcChldMin.setDescription('&<caiUxOs.193>Minimum number of children (based on lowest for all instances). Valid values: -1, 0 or greater.')
uxsConfigProcChldMax = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcChldMax.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcChldMax.setDescription('&<caiUxOs.194>Maximum number of children (based on highest for all instances). Valid values: -1, 0 or greater.')
uxsConfigProcChldMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcChldMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcChldMonitor.setDescription("&<caiUxOs.195>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1) or monitor(2).")
uxsConfigProcSizeMin = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcSizeMin.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcSizeMin.setDescription('&<caiUxOs.196>Minimum size in kilobytes (based on lowest for all instances). Valid values: -1, 0 or greater.')
uxsConfigProcSizeMax = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcSizeMax.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcSizeMax.setDescription('&<caiUxOs.197>Maximum size in kilobytes (based on highest for all instances). Valid values: -1, 0 or greater.')
uxsConfigProcSizeMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcSizeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcSizeMonitor.setDescription("&<caiUxOs.198>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1) or monitor(2).")
uxsConfigProcCPUWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcCPUWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcCPUWarn.setDescription('&<caiUxOs.199>The percentage of used CPU that is considered a warning level for that resource. Valid ranges: Greater than 0, less than 100, not greater than or equal to the critical threshold.')
uxsConfigProcCPUCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcCPUCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcCPUCrit.setDescription('&<caiUxOs.200>The percentage of used CPU, that is considered a critical level for that resource. Valid ranges: Greater than 1, less than or equal to 100, not less than or equal to the warning threshold.')
uxsConfigProcCPUMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcCPUMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcCPUMonitor.setDescription("&<caiUxOs.201>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsConfigProcNameAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcNameAdd.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcNameAdd.setDescription('&<caiUxOs.202>The name of the process to monitor. Valid values are a string with an optional * at the end of the string for wild card matching. Note: Setting this attribute causes the watcher to be added.')
uxsConfigProcNameRemove = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcNameRemove.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcNameRemove.setDescription('&<caiUxOs.203>The process name of the watcher to delete. Set this attribute with the other KEY fields. Setting this causes the delete action.')
uxsConfigProcNameSig = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigProcNameSig.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcNameSig.setDescription('&<caiUxOs.204>The number of significant bytes that the agent uses for matching the process name against.')
uxsConfigProcPathSig = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigProcPathSig.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcPathSig.setDescription('&<caiUxOs.205>The number of significant bytes that the agent uses for matching the process path against.')
uxsConfigProcArgsSig = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigProcArgsSig.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigProcArgsSig.setDescription('&<caiUxOs.206>The number of significant bytes that the agent uses for matching the process arguments against.')
uxsConfigPrnPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigPrnPollInterval.setDescription('&<caiUxOs.207>The time, in seconds, between the collections of the printer queue information. Valid ranges: -1 (Suspended), 30 seconds or greater.')
uxsConfigPrnPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigPrnPollMethod.setDescription('&<caiUxOs.208>Defines whether the printer queue information is collected. Valid values: disable(1) or use-polling-period(2).')
uxsConfigPrnDesc = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnDesc.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigPrnDesc.setDescription('&<caiUxOs.209>Description of the printer queue watcher.')
uxsConfigPrnItemsWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnItemsWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigPrnItemsWarn.setDescription('&<caiUxOs.210>The number of items on the printer queue that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsConfigPrnItemsCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnItemsCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigPrnItemsCrit.setDescription('&<caiUxOs.211>The number of items on the printer queue that is considered a critical level for that resource. Valid ranges: Greater than 0, not less than or equal to the warning threshold.')
uxsConfigPrnItemsMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnItemsMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigPrnItemsMonitor.setDescription("&<caiUxOs.212>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsConfigPrnLossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigPrnLossAction.setDescription('&<caiUxOs.213>Defines the action to take if the printer queue configuration is removed from the machine. Valid values: remove(1), up(2) or down(3).')
uxsConfigPrnNameAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnNameAdd.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigPrnNameAdd.setDescription('&<caiUxOs.214>Setting this attribute causes a new watcher to be added for the printer queue name specified.')
uxsConfigPrnNameRemove = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnNameRemove.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigPrnNameRemove.setDescription('&<caiUxOs.215>Setting this attribute causes the watcher with the printer queue name specified to be deleted.')
uxsConfigNetPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetPollInterval.setDescription('&<caiUxOs.216>The time, in seconds, between the collections of the Network Interface information. Valid ranges: -1 (Suspended), 30 seconds or greater.')
uxsConfigNetPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetPollMethod.setDescription('&<caiUxOs.217>Defines whether the Network Interface information is collected. Valid values: disable(1) or use-polling-period(2).')
uxsConfigNetIPktWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetIPktWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetIPktWarn.setDescription('&<caiUxOs.218>The number of input packets per second that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsConfigNetIPktCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetIPktCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetIPktCrit.setDescription('&<caiUxOs.219>The number of input packets per second that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsConfigNetIPktMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetIPktMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetIPktMonitor.setDescription("&<caiUxOs.220>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsConfigNetIErrWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetIErrWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetIErrWarn.setDescription('&<caiUxOs.221>The number of input errors per second that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsConfigNetIErrCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetIErrCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetIErrCrit.setDescription('&<caiUxOs.222>The number of input errors per second that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsConfigNetIErrMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetIErrMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetIErrMonitor.setDescription("&<caiUxOs.223>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsConfigNetOPktWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetOPktWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetOPktWarn.setDescription('&<caiUxOs.224>The number of output packets per second that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsConfigNetOPktCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetOPktCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetOPktCrit.setDescription('&<caiUxOs.225>The number of output packets per second that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsConfigNetOPktMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetOPktMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetOPktMonitor.setDescription("&<caiUxOs.226>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsConfigNetOErrWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetOErrWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetOErrWarn.setDescription('&<caiUxOs.227>The number of output errors per second that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsConfigNetOErrCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetOErrCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetOErrCrit.setDescription('&<caiUxOs.228>The number of output errors per second that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsConfigNetOErrMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetOErrMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetOErrMonitor.setDescription("&<caiUxOs.229>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsConfigNetCollWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetCollWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetCollWarn.setDescription('&<caiUxOs.230>The number of collisions per second that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsConfigNetCollCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetCollCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetCollCrit.setDescription('&<caiUxOs.231>The number of collisions per second that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsConfigNetCollMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetCollMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetCollMonitor.setDescription("&<caiUxOs.232>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsConfigNetLossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigNetLossAction.setDescription('&<caiUxOs.233>Defines the action to take if the Network Interface is removed from the machine. Valid values: remove(1), up(2) or down(3).')
uxsConfigIPCPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigIPCPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigIPCPollInterval.setDescription('&<caiUxOs.234>The time, in seconds, between the collections of the Inter Process Communications information. Valid ranges: -1 (Suspended), 30 seconds or greater.')
uxsConfigIPCPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigIPCPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigIPCPollMethod.setDescription('&<caiUxOs.235>Defines whether the Inter Process Communications information is collected. Valid values: disable(1) or use-polling-period(2).')
uxsConfigIPCMQBytesLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigIPCMQBytesLag.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigIPCMQBytesLag.setDescription('&<caiUxOs.236>The number of times that the threshold has to be reached before the state changes. Valid range: Greater than 0.')
uxsConfigIPCMQBytesWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 13, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigIPCMQBytesWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigIPCMQBytesWarn.setDescription('&<caiUxOs.237>The value for used message queue bytes that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsConfigIPCMQBytesCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 13, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigIPCMQBytesCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigIPCMQBytesCrit.setDescription('&<caiUxOs.238>The value for used message queue bytes that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsConfigIPCMQBytesMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigIPCMQBytesMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsConfigIPCMQBytesMonitor.setDescription("&<caiUxOs.239>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusGeneralTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralTotalCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralTotalCount.setDescription('&<caiUxOs.240>Total number of resources that the agent is configured to monitor.')
uxsStatusGeneralTotalWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralTotalWarning.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralTotalWarning.setDescription('&<caiUxOs.241>Total number of the resources that the agent is configured to monitor that are in a warning state.')
uxsStatusGeneralTotalCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralTotalCritical.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralTotalCritical.setDescription('&<caiUxOs.242>Total number of the resources that the agent is configured to monitor that are in a critical state.')
uxsStatusGeneralCPUCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralCPUCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralCPUCount.setDescription('&<caiUxOs.243>The total number of this resource type that are being monitored.')
uxsStatusGeneralCPUWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralCPUWarning.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralCPUWarning.setDescription('&<caiUxOs.244>The total number of this resource type that are being monitored and are in a warning state.')
uxsStatusGeneralCPUCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralCPUCritical.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralCPUCritical.setDescription('&<caiUxOs.245>The total number of this resource type that are being monitored and are in a critical state.')
uxsStatusGeneralLoadCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralLoadCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralLoadCount.setDescription('&<caiUxOs.246>The total number of this resource type that are being monitored.')
uxsStatusGeneralLoadWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralLoadWarning.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralLoadWarning.setDescription('&<caiUxOs.247>The total number of this resource type that are being monitored and are in a warning state.')
uxsStatusGeneralLoadCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralLoadCritical.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralLoadCritical.setDescription('&<caiUxOs.248>The total number of this resource type that are being monitored and are in a critical state.')
uxsStatusGeneralMemCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralMemCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralMemCount.setDescription('&<caiUxOs.249>The total number of this resource type that are being monitored.')
uxsStatusGeneralMemWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralMemWarning.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralMemWarning.setDescription('&<caiUxOs.250>The total number of this resource type that are being monitored and are in a warning state.')
uxsStatusGeneralMemCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralMemCritical.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralMemCritical.setDescription('&<caiUxOs.251>The total number of this resource type that are being monitored and are in a critical state.')
uxsStatusGeneralSwapCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralSwapCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralSwapCount.setDescription('&<caiUxOs.252>The total number of this resource type that are being monitored.')
uxsStatusGeneralSwapWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralSwapWarning.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralSwapWarning.setDescription('&<caiUxOs.253>The total number of this resource type that are being monitored and are in a warning state.')
uxsStatusGeneralSwapCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralSwapCritical.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralSwapCritical.setDescription('&<caiUxOs.254>The total number of this resource type that are being monitored and are in a critical state.')
uxsStatusGeneralFSysCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralFSysCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralFSysCount.setDescription('&<caiUxOs.255>The total number of this resource type that are being monitored.')
uxsStatusGeneralFSysWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralFSysWarning.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralFSysWarning.setDescription('&<caiUxOs.256>The total number of this resource type that are being monitored and are in a warning state.')
uxsStatusGeneralFSysCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralFSysCritical.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralFSysCritical.setDescription('&<caiUxOs.257>The total number of this resource type that are being monitored and are in a critical state.')
uxsStatusGeneralDiskCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralDiskCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralDiskCount.setDescription('&<caiUxOs.258>The total number of this resource type that are being monitored.')
uxsStatusGeneralDiskWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralDiskWarning.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralDiskWarning.setDescription('&<caiUxOs.259>The total number of this resource type that are being monitored and are in a warning state.')
uxsStatusGeneralDiskCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralDiskCritical.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralDiskCritical.setDescription('&<caiUxOs.260>The total number of this resource type that are being monitored and are in a critical state.')
uxsStatusGeneralFileCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralFileCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralFileCount.setDescription('&<caiUxOs.261>The total number of this resource type that are being monitored.')
uxsStatusGeneralFileWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralFileWarning.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralFileWarning.setDescription('&<caiUxOs.262>The total number of this resource type that are being monitored and are in a warning state.')
uxsStatusGeneralFileCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralFileCritical.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralFileCritical.setDescription('&<caiUxOs.263>The total number of this resource type that are being monitored and are in a critical state.')
uxsStatusGeneralProcCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralProcCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralProcCount.setDescription('&<caiUxOs.264>The total number of this resource type that are being monitored.')
uxsStatusGeneralProcWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralProcWarning.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralProcWarning.setDescription('&<caiUxOs.265>The total number of this resource type that are being monitored and are in a warning state.')
uxsStatusGeneralProcCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralProcCritical.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralProcCritical.setDescription('&<caiUxOs.266>The total number of this resource type that are being monitored and are in a critical state.')
uxsStatusGeneralPrnCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralPrnCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralPrnCount.setDescription('&<caiUxOs.267>The total number of this resource type that are being monitored.')
uxsStatusGeneralPrnWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralPrnWarning.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralPrnWarning.setDescription('&<caiUxOs.268>The total number of this resource type that are being monitored and are in a warning state.')
uxsStatusGeneralPrnCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralPrnCritical.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralPrnCritical.setDescription('&<caiUxOs.269>The total number of this resource type that are being monitored and are in a critical state.')
uxsStatusGeneralNetCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralNetCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralNetCount.setDescription('&<caiUxOs.270>The total number of this resource type that are being monitored.')
uxsStatusGeneralNetWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralNetWarning.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralNetWarning.setDescription('&<caiUxOs.271>The total number of this resource type that are being monitored and are in a warning state.')
uxsStatusGeneralNetCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralNetCritical.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralNetCritical.setDescription('&<caiUxOs.272>The total number of this resource type that are being monitored and are in a critical state.')
uxsStatusGeneralIPCCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralIPCCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralIPCCount.setDescription('&<caiUxOs.273>The total number of this resource type that are being monitored.')
uxsStatusGeneralIPCWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralIPCWarning.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralIPCWarning.setDescription('&<caiUxOs.274>The total number of this resource type that are being monitored and are in a warning state.')
uxsStatusGeneralIPCCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralIPCCritical.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusGeneralIPCCritical.setDescription('&<caiUxOs.275>The total number of this resource type that are being monitored and are in a critical state.')
uxsStatusCPUTotalName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUTotalName.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUTotalName.setDescription('&<caiUxOs.276>The name the agent gives for the total number of CPUs.')
uxsStatusCPUTotalUser = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUTotalUser.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUTotalUser.setDescription('&<caiUxOs.277>The percentage of time that the CPUs spent servicing user requests.')
uxsStatusCPUTotalSys = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUTotalSys.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUTotalSys.setDescription('&<caiUxOs.278>The percentage of time that the CPUs spent servicing system requests.')
uxsStatusCPUTotalIdle = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUTotalIdle.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUTotalIdle.setDescription('&<caiUxOs.279>The percentage of time that the CPUs were idle.')
uxsStatusCPUTotalWIO = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUTotalWIO.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUTotalWIO.setDescription('&<caiUxOs.280>The percentage of time that the CPUs spent waiting for blocking I/O requests.')
uxsStatusCPUTotalUsedValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUTotalUsedValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUTotalUsedValue.setDescription("&<caiUxOs.281>The total percentage of the CPUs' time that the processors were busy. i.e. 100 - idle%.")
uxsStatusCPUTotalLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUTotalLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUTotalLagValue.setDescription('&<caiUxOs.282>The number of times that the threshold has been reached.')
uxsStatusCPUTotalLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPUTotalLag.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUTotalLag.setDescription('&<caiUxOs.283>The number of times that the threshold has to be reached before the state changes. Valid range: Greater than 0.')
uxsStatusCPUTotalWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPUTotalWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUTotalWarn.setDescription('&<caiUxOs.284>The percentage of total CPU usage that is considered a warning level for that resource. Valid ranges: Greater than 0, less than 99, not greater than or equal to the critical threshold.')
uxsStatusCPUTotalCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPUTotalCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUTotalCrit.setDescription('&<caiUxOs.285>The percentage of total CPU usage that is considered a critical level for that resource. Valid ranges: Greater than 1, less than 100, not less than or equal to the warning threshold.')
uxsStatusCPUTotalMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPUTotalMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUTotalMonitor.setDescription("&<caiUxOs.286>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusCPUTotalStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUTotalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUTotalStatus.setDescription('&<caiUxOs.287>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusCPUCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUCount.setDescription('&<caiUxOs.288>The number of CPU instances in the table.')
uxsStatusCPUTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14), )
if mibBuilder.loadTexts: uxsStatusCPUTable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUTable.setDescription('&<caiUxOs.289>The table of CPU instances.')
uxsStatusCPUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusCPUName"))
if mibBuilder.loadTexts: uxsStatusCPUEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUEntry.setDescription('&<caiUxOs.290>')
uxsStatusCPUName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUName.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUName.setDescription('&<caiUxOs.291>The name the agent gives the first CPU on which it gets details. No assumptions should be made about which slot the CPU is in from the CPU name.')
uxsStatusCPUUser = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUUser.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUUser.setDescription('&<caiUxOs.292>The percentage of time that the processor was doing user work.')
uxsStatusCPUSys = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUSys.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUSys.setDescription('&<caiUxOs.293>The percentage of time that the processor was doing system work.')
uxsStatusCPUIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUIdle.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUIdle.setDescription('&<caiUxOs.294>The percentage of time that the processor was idle.')
uxsStatusCPUWIO = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUWIO.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUWIO.setDescription('&<caiUxOs.295>The percentage of time that the processor was waiting for I/O.')
uxsStatusCPUAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUAggStatus.setDescription('&<caiUxOs.296>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold, down(5) - The resource is in a down state.')
uxsStatusCPUUsedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUUsedValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUUsedValue.setDescription('&<caiUxOs.297>The percentage of time that the processor was busy. i.e. 100 - idle%.')
uxsStatusCPULagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPULagValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPULagValue.setDescription('&<caiUxOs.298>The number of times that the threshold has been reached.')
uxsStatusCPULag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPULag.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPULag.setDescription('&<caiUxOs.299>The number of times that the threshold has to be reached before the state changes. Valid range: Greater than 0.')
uxsStatusCPUWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPUWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUWarn.setDescription('&<caiUxOs.300>The value for the CPU used percentage that is considered a warning level for that resource. Valid ranges: Greater than 0, less than 99, not greater than or equal to the critical threshold.')
uxsStatusCPUCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPUCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUCrit.setDescription('&<caiUxOs.301>The value for the CPU used percentage that is considered a critical level for that resource. Valid ranges: Greater than 1, less than 100, not less than or equal to the warning threshold.')
uxsStatusCPUMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPUMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUMonitor.setDescription("&<caiUxOs.302>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusCPUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPUStatus.setDescription('&<caiUxOs.303>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusCPULossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPULossAction.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPULossAction.setDescription('&<caiUxOs.304>Defines the action to take if the CPU is removed from the machine. Valid values: remove(1), up(2) or down(3).')
uxsStatusCPULossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPULossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusCPULossStatus.setDescription('&<caiUxOs.305>The status relating to the existence of the object. Valid values: unknown(1), up(2) or down(3).')
uxsStatusLoad1MinValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusLoad1MinValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusLoad1MinValue.setDescription('&<caiUxOs.306>The current 1 minute average value.')
uxsStatusLoad1MinWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad1MinWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusLoad1MinWarn.setDescription('&<caiUxOs.307>The value for load average that is considered a warning level for that resource. Valid ranges: Greater than 0.000000, not greater than or equal to the critical threshold.')
uxsStatusLoad1MinCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad1MinCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusLoad1MinCrit.setDescription('&<caiUxOs.308>The value for load average that is considered a critical level for that resource. Valid ranges: Greater than 0.000001, not less than or equal to the warning threshold.')
uxsStatusLoad1MinMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad1MinMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusLoad1MinMonitor.setDescription("&<caiUxOs.309>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusLoad1MinStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusLoad1MinStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusLoad1MinStatus.setDescription('&<caiUxOs.310>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusLoad5MinValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusLoad5MinValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusLoad5MinValue.setDescription('&<caiUxOs.311>The current 5 minute average value.')
uxsStatusLoad5MinWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad5MinWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusLoad5MinWarn.setDescription('&<caiUxOs.312>The value for load average that is considered a warning level for that resource. Valid ranges: Greater than 0.000000, not greater than or equal to the critical threshold.')
uxsStatusLoad5MinCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad5MinCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusLoad5MinCrit.setDescription('&<caiUxOs.313>The value for load average that is considered a critical level for that resource. Valid ranges: Greater than 0.000001, not less than or equal to the warning threshold.')
uxsStatusLoad5MinMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad5MinMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusLoad5MinMonitor.setDescription("&<caiUxOs.314>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusLoad5MinStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusLoad5MinStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusLoad5MinStatus.setDescription('&<caiUxOs.315>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusLoad15MinValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusLoad15MinValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusLoad15MinValue.setDescription('&<caiUxOs.316>The current 15 minute average value.')
uxsStatusLoad15MinWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad15MinWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusLoad15MinWarn.setDescription('&<caiUxOs.317>The value for load average that is considered a warning level for that resource. Valid ranges: Greater than 0.000000, not greater than or equal to the critical threshold.')
uxsStatusLoad15MinCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad15MinCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusLoad15MinCrit.setDescription('&<caiUxOs.318>The value for load average that is considered a critical level for that resource. Valid ranges: Greater than 0.000001, not less than or equal to the warning threshold.')
uxsStatusLoad15MinMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad15MinMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusLoad15MinMonitor.setDescription("&<caiUxOs.319>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusLoad15MinStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusLoad15MinStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusLoad15MinStatus.setDescription('&<caiUxOs.320>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusMemTotal.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusMemTotal.setDescription('&<caiUxOs.321>The total memory configured on the machine in kilobytes.')
uxsStatusMemValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusMemValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusMemValue.setDescription('&<caiUxOs.322>The memory used by the machine in kilobytes.')
uxsStatusMemLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusMemLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusMemLagValue.setDescription('&<caiUxOs.323>The number of times that the threshold has been reached.')
uxsStatusMemLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusMemLag.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusMemLag.setDescription('&<caiUxOs.324>The number of times that the threshold has to be reached before the state changes. Valid range: Greater than 0.')
uxsStatusMemWarnValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusMemWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusMemWarnValue.setDescription('&<caiUxOs.325>The absolute value used for threshold calculation based on the configured warning value.')
uxsStatusMemCritValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusMemCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusMemCritValue.setDescription('&<caiUxOs.326>The absolute value used for threshold calculation based on the configured critical value.')
uxsStatusMemWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusMemWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusMemWarn.setDescription('&<caiUxOs.327>The value for used memory, either as a percentage or in kilobytes, that is considered a warning level for that resource. Valid ranges: Greater than 0, less than total memory - 1, not greater than or equal to the critical threshold.')
uxsStatusMemCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusMemCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusMemCrit.setDescription('&<caiUxOs.328>The value for used memory, either as a percentage or in kilobytes, that is considered a critical level for that resource. Valid ranges: Greater than 1, less than total memory, not less than or equal to the warning threshold.')
uxsStatusMemMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusMemMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusMemMonitor.setDescription("&<caiUxOs.329>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusMemStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusMemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusMemStatus.setDescription('&<caiUxOs.330>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusSwapTotalName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapTotalName.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapTotalName.setDescription('&<caiUxOs.331>The name the agent gives the total swap information.')
uxsStatusSwapTotalAvailable = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapTotalAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapTotalAvailable.setDescription('&<caiUxOs.332>The total amount of swap configured on the machine in kilobytes.')
uxsStatusSwapTotalUsedValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapTotalUsedValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapTotalUsedValue.setDescription('&<caiUxOs.333>The total amount of swap space in use on the machine in kilobytes.')
uxsStatusSwapTotalLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapTotalLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapTotalLagValue.setDescription('&<caiUxOs.334>The number of times that the threshold has been reached.')
uxsStatusSwapTotalLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapTotalLag.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapTotalLag.setDescription('&<caiUxOs.335>The number of times that the threshold has to be reached before the state changes. Valid range: Greater than 0.')
uxsStatusSwapTotalWarnValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapTotalWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapTotalWarnValue.setDescription('&<caiUxOs.336>The absolute value used for threshold calculation based on the configured warning value.')
uxsStatusSwapTotalCritValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapTotalCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapTotalCritValue.setDescription('&<caiUxOs.337>The absolute value used for threshold calculation based on the configured critical value.')
uxsStatusSwapTotalWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapTotalWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapTotalWarn.setDescription('&<caiUxOs.338>The value for total swap space, either as a percentage or in kilobytes, that is considered a warning level for that resource. Valid ranges: Greater than 0, less than total swap space - 1, not greater than or equal to the critical threshold.')
uxsStatusSwapTotalCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapTotalCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapTotalCrit.setDescription('&<caiUxOs.339>The value for total swap space, either as a percentage or in kilobytes, that is considered a critical level for that resource. Valid ranges: Greater than 1, less than total swap space, not less than or equal to the warning threshold.')
uxsStatusSwapTotalMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapTotalMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapTotalMonitor.setDescription("&<caiUxOs.340>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusSwapTotalStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapTotalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapTotalStatus.setDescription('&<caiUxOs.341>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusSwapCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapCount.setDescription('&<caiUxOs.342>Number of swap partitions in the swap table.')
uxsStatusSwapTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13), )
if mibBuilder.loadTexts: uxsStatusSwapTable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapTable.setDescription('&<caiUxOs.343>The table detailing the individual swap devices.')
uxsStatusSwapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusSwapName"))
if mibBuilder.loadTexts: uxsStatusSwapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapEntry.setDescription('&<caiUxOs.344>')
uxsStatusSwapName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapName.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapName.setDescription('&<caiUxOs.345>The name of the swap device that this watcher monitors.')
uxsStatusSwapAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapAggStatus.setDescription('&<caiUxOs.346>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold, down(5) - The resource is in a down state.')
uxsStatusSwapAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapAvailable.setDescription('&<caiUxOs.347>The amount of swap configured on the device in kilobytes.')
uxsStatusSwapUsedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapUsedValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapUsedValue.setDescription('&<caiUxOs.348>The amount of swap space in use on the device in kilobytes.')
uxsStatusSwapLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapLagValue.setDescription('&<caiUxOs.349>The number of times that the threshold has been reached.')
uxsStatusSwapLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapLag.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapLag.setDescription('&<caiUxOs.350>The number of times that the threshold has to be reached before the state changes. Valid range: Greater than 0.')
uxsStatusSwapWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapWarnValue.setDescription('&<caiUxOs.351>The absolute value used for threshold calculation based on the configured warning value.')
uxsStatusSwapCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapCritValue.setDescription('&<caiUxOs.352>The absolute value used for threshold calculation based on the configured critical value.')
uxsStatusSwapWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapWarn.setDescription('&<caiUxOs.353>The value for device swap space, either as a percentage or in kilobytes, that is considered a warning level for that resource. Valid ranges: Greater than 0, less than device swap space - 1, not greater than or equal to the critical threshold.')
uxsStatusSwapCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapCrit.setDescription('&<caiUxOs.354>The value for device swap space, either as a percentage or in kilobytes, that is considered a critical level for that resource. Valid ranges: Greater than 1, less than device swap space, not less than or equal to the warning threshold.')
uxsStatusSwapMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapMonitor.setDescription("&<caiUxOs.355>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusSwapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapStatus.setDescription('&<caiUxOs.356>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusSwapLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapLossAction.setDescription('&<caiUxOs.357>Defines the action to take if the swap file is removed from the machine. Valid values: remove(1), up(2) or down(3).')
uxsStatusSwapLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusSwapLossStatus.setDescription('&<caiUxOs.358>The status relating to the existence of the object. Valid values: unknown(1), up(2) or down(3).')
uxsStatusFSysCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysCount.setDescription('&<caiUxOs.359>The number of monitored file systems.')
uxsStatusFSysTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2), )
if mibBuilder.loadTexts: uxsStatusFSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysTable.setDescription('&<caiUxOs.360>The table of monitored file systems.')
uxsStatusFSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusFSysName"))
if mibBuilder.loadTexts: uxsStatusFSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysEntry.setDescription('&<caiUxOs.361>')
uxsStatusFSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysName.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysName.setDescription('&<caiUxOs.362>The file system mount name.')
uxsStatusFSysRelatedTo = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysRelatedTo.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysRelatedTo.setDescription('&<caiUxOs.363>The device from which the file system is mounted.')
uxsStatusFSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysType.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysType.setDescription('&<caiUxOs.364>The type of the mounted file system. The value is platform dependent.')
uxsStatusFSysStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysStatus.setDescription('&<caiUxOs.365>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold, down(5) - The resource is in a down state.')
uxsStatusFSysSpaceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceTotal.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysSpaceTotal.setDescription('&<caiUxOs.366>The amount of space available on the file system in kilobytes.')
uxsStatusFSysSpaceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysSpaceValue.setDescription('&<caiUxOs.367>The amount of space used on the file system in kilobytes.')
uxsStatusFSysSpaceWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysSpaceWarnValue.setDescription('&<caiUxOs.368>The absolute value used for threshold calculation based on the configured warning value.')
uxsStatusFSysSpaceCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysSpaceCritValue.setDescription('&<caiUxOs.369>The absolute value used for threshold calculation based on the configured critical value.')
uxsStatusFSysSpaceWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysSpaceWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysSpaceWarn.setDescription('&<caiUxOs.370>The value for used file system space, either as a percentage or in kilobytes, that is considered a warning level for that resource. Valid ranges: Greater than 0, less than total space - 1, not greater than or equal to the critical threshold.')
uxsStatusFSysSpaceCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysSpaceCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysSpaceCrit.setDescription('&<caiUxOs.371>The value for used file system space, either as a percentage or in kilobytes, that is considered a critical level for that resource. Valid ranges: Greater than 1, less than total space, not less than or equal to the warning threshold.')
uxsStatusFSysSpaceMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysSpaceMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysSpaceMonitor.setDescription("&<caiUxOs.372>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusFSysSpaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysSpaceStatus.setDescription('&<caiUxOs.373>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusFSysSpaceDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceDValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysSpaceDValue.setDescription('&<caiUxOs.374>The difference of used space, in kilobytes, since the last poll.')
uxsStatusFSysSpaceDWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceDWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysSpaceDWarnValue.setDescription('&<caiUxOs.375>The absolute value used for threshold calculation based on the configured warning value.')
uxsStatusFSysSpaceDCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceDCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysSpaceDCritValue.setDescription('&<caiUxOs.376>The absolute value used for threshold calculation based on the configured critical value.')
uxsStatusFSysSpaceDWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysSpaceDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysSpaceDWarn.setDescription('&<caiUxOs.377>The value for used file system space delta, either as a percentage or in kilobytes, that is considered a warning level for that resource. Valid ranges: Greater than 0, less than total space - 1, not greater than or equal to the critical threshold.')
uxsStatusFSysSpaceDCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysSpaceDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysSpaceDCrit.setDescription('&<caiUxOs.378>The value for used file system space delta, either as a percentage or in kilobytes, that is considered a critical level for that resource. Valid ranges: Greater than 1, less than total memory, not less than or equal to the warning threshold.')
uxsStatusFSysSpaceDMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysSpaceDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysSpaceDMonitor.setDescription("&<caiUxOs.379>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusFSysSpaceDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceDStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysSpaceDStatus.setDescription('&<caiUxOs.380>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusFSysInodesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesTotal.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysInodesTotal.setDescription('&<caiUxOs.381>The amount of inodes configured on the file system.')
uxsStatusFSysInodesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysInodesValue.setDescription('&<caiUxOs.382>The amount of used inodes on the file system.')
uxsStatusFSysInodesWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysInodesWarnValue.setDescription('&<caiUxOs.383>The absolute value used for threshold calculation based on the configured warning value.')
uxsStatusFSysInodesCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysInodesCritValue.setDescription('&<caiUxOs.384>The absolute value used for threshold calculation based on the configured critical value.')
uxsStatusFSysInodesWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysInodesWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysInodesWarn.setDescription('&<caiUxOs.385>The value for inodes, either as a percentage or absolute value, that is considered a warning level for that resource. Valid ranges: Greater than 0, less than total inodes - 1, not greater than or equal to the critical threshold.')
uxsStatusFSysInodesCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysInodesCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysInodesCrit.setDescription('&<caiUxOs.386>The value for inodes, either as a percentage or absolute value, that is considered a critical level for that resource. Valid ranges: Greater than 1, less than total space, not less than or equal to the warning threshold.')
uxsStatusFSysInodesMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysInodesMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysInodesMonitor.setDescription("&<caiUxOs.387>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusFSysInodesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysInodesStatus.setDescription('&<caiUxOs.388>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusFSysInodesDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesDValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysInodesDValue.setDescription('&<caiUxOs.389>The difference in the number of used inodes since the last poll.')
uxsStatusFSysInodesDWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesDWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysInodesDWarnValue.setDescription('&<caiUxOs.390>The absolute value used for threshold calculation based on the configured warning value.')
uxsStatusFSysInodesDCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesDCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysInodesDCritValue.setDescription('&<caiUxOs.391>The absolute value used for threshold calculation based on the configured critical value.')
uxsStatusFSysInodesDWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysInodesDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysInodesDWarn.setDescription('&<caiUxOs.392>The value for inodes delta, either as a percentage or absolute value, that is considered a warning level for that resource. Valid ranges: Greater than 0, less than total inodes - 1, not greater than or equal to the critical threshold.')
uxsStatusFSysInodesDCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysInodesDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysInodesDCrit.setDescription('&<caiUxOs.393>The value for inodes delta, either as a percentage or absolute value, that is considered a critical level for that resource. Valid ranges: Greater than 1, less than total space, not less than or equal to the warning threshold.')
uxsStatusFSysInodesDMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysInodesDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysInodesDMonitor.setDescription("&<caiUxOs.394>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusFSysInodesDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesDStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysInodesDStatus.setDescription('&<caiUxOs.395>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusFSysMountedMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysMountedMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysMountedMonitor.setDescription("&<caiUxOs.396>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1) or monitor(2).")
uxsStatusFSysMountedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysMountedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysMountedStatus.setDescription('&<caiUxOs.397>The mounted status of the device: unknown(1) - An error occurred collecting the file system information. up(2) - The file system is mounted, down(3) The file system is not mounted.')
uxsStatusFSysLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysLossAction.setDescription('&<caiUxOs.398>Defines the action to take if the file system is removed from the file system table. Valid values: remove(1), up(2) or down(3).')
uxsStatusFSysLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysLossStatus.setDescription('&<caiUxOs.399>The status relating to the existence of the object. Valid values: unknown(1), up(2) or down(3).')
uxsStatusFSysRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysRemove.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFSysRemove.setDescription('&<caiUxOs.400>Removes the file system watcher from the agent.')
uxsStatusDiskCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusDiskCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusDiskCount.setDescription('&<caiUxOs.401>The number of physical disks monitored by the agent.')
uxsStatusDiskTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2), )
if mibBuilder.loadTexts: uxsStatusDiskTable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusDiskTable.setDescription('&<caiUxOs.402>The table of monitored physical disks.')
uxsStatusDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusDiskName"))
if mibBuilder.loadTexts: uxsStatusDiskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusDiskEntry.setDescription('&<caiUxOs.403>')
uxsStatusDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusDiskName.setDescription('&<caiUxOs.404>The device name of the physical disk that is being monitored.')
uxsStatusDiskAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusDiskAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusDiskAggStatus.setDescription('&<caiUxOs.405>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold, down(5) - The resource is in a down state.')
uxsStatusDiskTPutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusDiskTPutValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusDiskTPutValue.setDescription('&<caiUxOs.406>The kilobytes in blocks per second.')
uxsStatusDiskTPutWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusDiskTPutWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusDiskTPutWarn.setDescription('&<caiUxOs.407>The value for physical disk kilobytes per second throughput that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsStatusDiskTPutCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusDiskTPutCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusDiskTPutCrit.setDescription('&<caiUxOs.408>The value for physical disk kilobytes per second throughput that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsStatusDiskTPutMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusDiskTPutMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusDiskTPutMonitor.setDescription("&<caiUxOs.409>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusDiskTPutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusDiskTPutStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusDiskTPutStatus.setDescription('&<caiUxOs.410>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusDiskLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusDiskLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusDiskLossAction.setDescription('&<caiUxOs.411>Defines the action to take if the physical disk is removed from the machine. Valid values: remove(1), up(2) or down(3).')
uxsStatusDiskLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusDiskLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusDiskLossStatus.setDescription('&<caiUxOs.412>The status relating to the existence of the object. Valid values: unknown(1), up(2) or down(3).')
uxsStatusDiskRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusDiskRemove.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusDiskRemove.setDescription('&<caiUxOs.413>Removes the physical disk watcher from the agent.')
uxsStatusFileCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileCount.setDescription('&<caiUxOs.414>The number of file watchers configured for the agent.')
uxsStatusFileTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2), )
if mibBuilder.loadTexts: uxsStatusFileTable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileTable.setDescription('&<caiUxOs.415>The table of file watchers.')
uxsStatusFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusFileName"))
if mibBuilder.loadTexts: uxsStatusFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileEntry.setDescription('&<caiUxOs.416>')
uxsStatusFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileName.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileName.setDescription('&<caiUxOs.417>The name of the file being monitored.')
uxsStatusFileDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileDesc.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileDesc.setDescription('&<caiUxOs.418>The description of the watcher provided when the watcher was created.')
uxsStatusFileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileStatus.setDescription('&<caiUxOs.419>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold, down(5) - The resource is in a down state.')
uxsStatusFileExist = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileExist.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileExist.setDescription('&<caiUxOs.420>The test to perform for file existence. Valid values: should-exist(1) or should-not-exist(2).')
uxsStatusFileExistMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileExistMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileExistMonitor.setDescription("&<caiUxOs.421>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1) or monitor(2).")
uxsStatusFileExistStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileExistStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileExistStatus.setDescription('&<caiUxOs.422>The status of the files existence based on the uxsStatusFileExist attribute.')
uxsStatusFileModTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileModTime.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileModTime.setDescription('&<caiUxOs.423>The files last modified date and time.')
uxsStatusFileModTimeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileModTimeValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileModTimeValue.setDescription('&<caiUxOs.424>The time the agent compares with for the file timestamp status.')
uxsStatusFileModTimeMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileModTimeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileModTimeMonitor.setDescription("&<caiUxOs.425>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1) or monitor(2).")
uxsStatusFileModTimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3), ("reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileModTimeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileModTimeStatus.setDescription('&<caiUxOs.426>The status of the timestamp monitoring. unknown(1) - An error occurred collecting the data, up(2) - The timestamp is unchanged, down(3) - The timestamp has changed, reset(4) - Reset the uxsStatusFileModTimeValue to the files current timestamp and sets the status to OK.')
uxsStatusFileSizeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileSizeValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileSizeValue.setDescription('&<caiUxOs.427>The size of the file in kilobytes.')
uxsStatusFileSizeWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileSizeWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileSizeWarn.setDescription('&<caiUxOs.428>The value for file size that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsStatusFileSizeCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileSizeCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileSizeCrit.setDescription('&<caiUxOs.429>The value for file size that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsStatusFileSizeMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileSizeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileSizeMonitor.setDescription("&<caiUxOs.430>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusFileSizeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileSizeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileSizeStatus.setDescription('&<caiUxOs.431>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusFileSizeDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileSizeDValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileSizeDValue.setDescription('&<caiUxOs.432>The difference in file size since the last poll.')
uxsStatusFileSizeDWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileSizeDWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileSizeDWarn.setDescription('&<caiUxOs.433>The value for file size change that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsStatusFileSizeDCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileSizeDCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileSizeDCrit.setDescription('&<caiUxOs.434>The value for file size change that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsStatusFileSizeDMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileSizeDMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileSizeDMonitor.setDescription("&<caiUxOs.435>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusFileSizeDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileSizeDStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileSizeDStatus.setDescription('&<caiUxOs.436>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusFileRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileRemove.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusFileRemove.setDescription('&<caiUxOs.437>Removes the file watcher from the agent.')
uxsStatusProcCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcCount.setDescription('&<caiUxOs.438>The count of the number of process watchers.')
uxsStatusProcTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2), )
if mibBuilder.loadTexts: uxsStatusProcTable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcTable.setDescription('&<caiUxOs.439>The table of process watchers.')
uxsStatusProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusProcName"), (0, "CAIUXOS", "uxsStatusProcPath"), (0, "CAIUXOS", "uxsStatusProcArgs"), (0, "CAIUXOS", "uxsStatusProcUsers"))
if mibBuilder.loadTexts: uxsStatusProcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcEntry.setDescription('&<caiUxOs.440>')
uxsStatusProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcName.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcName.setDescription('&<caiUxOs.441>The name of the process to monitor. Valid values are a string with an optional * at the end of the string for wild card matching.')
uxsStatusProcPath = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcPath.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcPath.setDescription('&<caiUxOs.442>The path of the process to match. Valid values are a string with an optional * at the end of the string for wild card matching.')
uxsStatusProcArgs = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcArgs.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcArgs.setDescription('&<caiUxOs.443>A section of the processes arguments to match.')
uxsStatusProcUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcUsers.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcUsers.setDescription('&<caiUxOs.444>List of users to match. Details format of the string are documented in the online help.')
uxsStatusProcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcStatus.setDescription('&<caiUxOs.445>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold, down(5) - The resource is in a down state.')
uxsStatusProcPIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcPIDs.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcPIDs.setDescription('&<caiUxOs.446>The list of process IDs that caused the watcher to be in a bad state. This string is limited to 256 characters.')
uxsStatusProcInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcInstValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcInstValue.setDescription('&<caiUxOs.447>The current number of instances that match the key fields.')
uxsStatusProcInstMin = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcInstMin.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcInstMin.setDescription('&<caiUxOs.448>Minimum number of instances expected to match the key. Valid values: -1, 0 or greater.')
uxsStatusProcInstMax = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcInstMax.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcInstMax.setDescription('&<caiUxOs.449>Maximum number of instances expected to match the key. Valid values: -1, 0 or greater.')
uxsStatusProcInstMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcInstMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcInstMonitor.setDescription('&<caiUxOs.450>Defines the level of monitoring for process instances. Valid values: do-not-monitor(1) or monitor(2).')
uxsStatusProcInstStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcInstStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcInstStatus.setDescription('&<caiUxOs.451>The current status of the resource: unknown(1) - An error occurred collecting the data, up(2) - The resource is within the monitoring parameters, down(3) - The resource is outside the monitoring parameters.')
uxsStatusProcChldValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcChldValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcChldValue.setDescription('&<caiUxOs.452>The number of children of the process. See the documentation for additional information.')
uxsStatusProcChldMin = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcChldMin.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcChldMin.setDescription('&<caiUxOs.453>Minimum number of children (based on lowest for all instances). Valid values: -1, 0 or greater.')
uxsStatusProcChldMax = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcChldMax.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcChldMax.setDescription('&<caiUxOs.454>Maximum number of children (based on highest for all instances). Valid values: -1, 0 or greater.')
uxsStatusProcChldMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcChldMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcChldMonitor.setDescription('&<caiUxOs.455>Defines the level of monitoring for the number of children of the process. Valid values: do-not-monitor(1) or monitor(2).')
uxsStatusProcChldStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcChldStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcChldStatus.setDescription('&<caiUxOs.456>The status of the number of children of the process: unknown(1) - An error occurred collecting the data, up(2) - The resource is within the monitoring parameters, down(3) - The resource is outside the monitoring parameters.')
uxsStatusProcSizeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcSizeValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcSizeValue.setDescription("&<caiUxOs.457>The size of the process in kilobytes. See the documentation for rules for which match's value is displayed.")
uxsStatusProcSizeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcSizeMin.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcSizeMin.setDescription('&<caiUxOs.458>Minimum size of the process in kilobytes (based on lowest for all instances). Valid values: -1, 0 or greater.')
uxsStatusProcSizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcSizeMax.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcSizeMax.setDescription('&<caiUxOs.459>Maximum size of the process in kilobytes (based on highest for all instances). Valid values: -1, 0 or greater.')
uxsStatusProcSizeMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcSizeMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcSizeMonitor.setDescription('&<caiUxOs.460>Defines the level of monitoring for the size of the process. Valid values: do-not-monitor(1) or monitor(2).')
uxsStatusProcSizeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcSizeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcSizeStatus.setDescription('&<caiUxOs.461>The status of the process size. unknown(1) - An error occurred collecting the data, up(2) - The resource is within the monitoring parameters, down(3) - The resource is outside the monitoring parameters.')
uxsStatusProcCPUValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcCPUValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcCPUValue.setDescription('&<caiUxOs.462>The highest of all CPU (user and system time) usage since the last poll as a percentage.')
uxsStatusProcCPUWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcCPUWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcCPUWarn.setDescription('&<caiUxOs.463>The percentage of used CPU that is considered a warning level for that resource. Valid ranges: Greater than 0, less than 100, not greater than or equal to the critical threshold.')
uxsStatusProcCPUCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcCPUCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcCPUCrit.setDescription('&<caiUxOs.464>The percentage of used CPU that is considered a critical level for that resource. Valid ranges: Greater than 1, less than or equal to 100, not less than or equal to the warning threshold.')
uxsStatusProcCPUMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcCPUMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcCPUMonitor.setDescription('&<caiUxOs.465>Defines the level of monitoring for used CPU. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).')
uxsStatusProcCPUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcCPUStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcCPUStatus.setDescription('&<caiUxOs.466>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusProcRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcRemove.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusProcRemove.setDescription('&<caiUxOs.467>Removes the process watcher from the agent.')
uxsStatusPrnCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusPrnCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusPrnCount.setDescription('&<caiUxOs.468>The number of configured printer queue watchers.')
uxsStatusPrnTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2), )
if mibBuilder.loadTexts: uxsStatusPrnTable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusPrnTable.setDescription('&<caiUxOs.469>The table of printer queue watchers.')
uxsStatusPrnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusPrnName"))
if mibBuilder.loadTexts: uxsStatusPrnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusPrnEntry.setDescription('&<caiUxOs.470>')
uxsStatusPrnName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusPrnName.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusPrnName.setDescription('&<caiUxOs.471>The name of the printer queue being monitored.')
uxsStatusPrnAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusPrnAggStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusPrnAggStatus.setDescription('&<caiUxOs.472>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold, down(5) - The resource is in a down state.')
uxsStatusPrnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusPrnDesc.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusPrnDesc.setDescription('&<caiUxOs.473>The description given to the printer queue watcher when it was added.')
uxsStatusPrnItemsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusPrnItemsValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusPrnItemsValue.setDescription('&<caiUxOs.474>The number of printer queue items on the queue.')
uxsStatusPrnItemsWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusPrnItemsWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusPrnItemsWarn.setDescription('&<caiUxOs.475>The number of printer queue items that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsStatusPrnItemsCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusPrnItemsCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusPrnItemsCrit.setDescription('&<caiUxOs.476>The number of printer queue items that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsStatusPrnItemsMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusPrnItemsMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusPrnItemsMonitor.setDescription("&<caiUxOs.477>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusPrnItemsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusPrnItemsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusPrnItemsStatus.setDescription('&<caiUxOs.478>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusPrnLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusPrnLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusPrnLossAction.setDescription('&<caiUxOs.479>Defines the action to take if the printer queue configuration is removed from the machine. Valid values: remove(1), up(2) or down(3).')
uxsStatusPrnLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusPrnLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusPrnLossStatus.setDescription('&<caiUxOs.480>The status relating to the existence of the object. Valid values: unknown(1), up(2) or down(3).')
uxsStatusPrnRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusPrnRemove.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusPrnRemove.setDescription('&<caiUxOs.481>Removes the printer watcher from the agent.')
uxsStatusNetTotalStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalStatus.setDescription('&<caiUxOs.482>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusNetTotalIPktValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalIPktValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalIPktValue.setDescription('&<caiUxOs.483>The total number of input packets per second for all interfaces since the last poll.')
uxsStatusNetTotalIPktWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalIPktWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalIPktWarn.setDescription('&<caiUxOs.484>The number of total input packets that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsStatusNetTotalIPktCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalIPktCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalIPktCrit.setDescription('&<caiUxOs.485>The number of total input packets that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsStatusNetTotalIPktMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalIPktMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalIPktMonitor.setDescription("&<caiUxOs.486>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusNetTotalIPktStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalIPktStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalIPktStatus.setDescription('&<caiUxOs.487>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusNetTotalIErrValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalIErrValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalIErrValue.setDescription('&<caiUxOs.488>The total number of input errors per second for all interfaces since the last poll.')
uxsStatusNetTotalIErrWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalIErrWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalIErrWarn.setDescription('&<caiUxOs.489>The number of total input errors that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsStatusNetTotalIErrCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalIErrCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalIErrCrit.setDescription('&<caiUxOs.490>The number of total input errors that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsStatusNetTotalIErrMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalIErrMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalIErrMonitor.setDescription("&<caiUxOs.491>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusNetTotalIErrStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalIErrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalIErrStatus.setDescription('&<caiUxOs.492>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusNetTotalOPktValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalOPktValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalOPktValue.setDescription('&<caiUxOs.493>The total number of output packets per second for all interfaces since the last poll.')
uxsStatusNetTotalOPktWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalOPktWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalOPktWarn.setDescription('&<caiUxOs.494>The number of total output packets that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsStatusNetTotalOPktCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalOPktCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalOPktCrit.setDescription('&<caiUxOs.495>The number of total output packets that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsStatusNetTotalOPktMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalOPktMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalOPktMonitor.setDescription("&<caiUxOs.496>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusNetTotalOPktStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalOPktStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalOPktStatus.setDescription('&<caiUxOs.497>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusNetTotalOErrValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalOErrValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalOErrValue.setDescription('&<caiUxOs.498>The total number of output errors per second for all interfaces since the last poll.')
uxsStatusNetTotalOErrWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalOErrWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalOErrWarn.setDescription('&<caiUxOs.499>The number of total output errors that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsStatusNetTotalOErrCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalOErrCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalOErrCrit.setDescription('&<caiUxOs.500>The number of total output errors that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsStatusNetTotalOErrMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalOErrMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalOErrMonitor.setDescription("&<caiUxOs.501>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusNetTotalOErrStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalOErrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalOErrStatus.setDescription('&<caiUxOs.502>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusNetTotalCollValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalCollValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalCollValue.setDescription('&<caiUxOs.503>The total number of collisions per second for all interfaces since the last poll.')
uxsStatusNetTotalCollWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalCollWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalCollWarn.setDescription('&<caiUxOs.504>The number of total collisions that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsStatusNetTotalCollCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalCollCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalCollCrit.setDescription('&<caiUxOs.505>The number of total collisions that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsStatusNetTotalCollMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalCollMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalCollMonitor.setDescription("&<caiUxOs.506>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusNetTotalCollStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalCollStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTotalCollStatus.setDescription('&<caiUxOs.507>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusNetCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetCount.setDescription('&<caiUxOs.508>The number of network interfaces in the network table.')
uxsStatusNetTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28), )
if mibBuilder.loadTexts: uxsStatusNetTable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetTable.setDescription('&<caiUxOs.509>The network table containing the network interfaces.')
uxsStatusNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusNetName"))
if mibBuilder.loadTexts: uxsStatusNetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetEntry.setDescription('&<caiUxOs.510>')
uxsStatusNetName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetName.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetName.setDescription('&<caiUxOs.511>The name by which the network interface is known.')
uxsStatusNetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetIP.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetIP.setDescription('&<caiUxOs.512>The IP address of the interface.')
uxsStatusNetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetStatus.setDescription('&<caiUxOs.513>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusNetIPktValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetIPktValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetIPktValue.setDescription('&<caiUxOs.514>The number of input packets per second for the interface since the last poll.')
uxsStatusNetIPktWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetIPktWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetIPktWarn.setDescription('&<caiUxOs.515>The number of input packets that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsStatusNetIPktCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetIPktCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetIPktCrit.setDescription('&<caiUxOs.516>The number of input packets that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsStatusNetIPktMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetIPktMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetIPktMonitor.setDescription("&<caiUxOs.517>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusNetIPktStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetIPktStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetIPktStatus.setDescription('&<caiUxOs.518>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusNetIErrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetIErrValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetIErrValue.setDescription('&<caiUxOs.519>The number of input errors per second for the interface since the last poll.')
uxsStatusNetIErrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetIErrWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetIErrWarn.setDescription('&<caiUxOs.520>The number of input errors that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsStatusNetIErrCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetIErrCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetIErrCrit.setDescription('&<caiUxOs.521>The number of input errors that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsStatusNetIErrMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetIErrMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetIErrMonitor.setDescription("&<caiUxOs.522>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusNetIErrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetIErrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetIErrStatus.setDescription('&<caiUxOs.523>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusNetOPktValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetOPktValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetOPktValue.setDescription('&<caiUxOs.524>The number of output packets per second for the interface since the last poll.')
uxsStatusNetOPktWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetOPktWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetOPktWarn.setDescription('&<caiUxOs.525>The number of output packets that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsStatusNetOPktCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetOPktCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetOPktCrit.setDescription('&<caiUxOs.526>The number of output packets that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsStatusNetOPktMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetOPktMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetOPktMonitor.setDescription("&<caiUxOs.527>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusNetOPktStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetOPktStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetOPktStatus.setDescription('&<caiUxOs.528>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusNetOErrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetOErrValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetOErrValue.setDescription('&<caiUxOs.529>The number of output errors per second for the interface since the last poll.')
uxsStatusNetOErrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetOErrWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetOErrWarn.setDescription('&<caiUxOs.530>The number of output errors that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsStatusNetOErrCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetOErrCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetOErrCrit.setDescription('&<caiUxOs.531>The number of output errors that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsStatusNetOErrMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetOErrMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetOErrMonitor.setDescription("&<caiUxOs.532>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusNetOErrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetOErrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetOErrStatus.setDescription('&<caiUxOs.533>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusNetCollValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetCollValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetCollValue.setDescription('&<caiUxOs.534>The number of collisions per second for the interface since the last poll.')
uxsStatusNetCollWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetCollWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetCollWarn.setDescription('&<caiUxOs.535>The number of collisions that is considered a warning level for that resource. Valid ranges: Greater than 0, not greater than or equal to the critical threshold.')
uxsStatusNetCollCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetCollCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetCollCrit.setDescription('&<caiUxOs.536>The number of collisions that is considered a critical level for that resource. Valid ranges: Greater than 1, not less than or equal to the warning threshold.')
uxsStatusNetCollMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetCollMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetCollMonitor.setDescription("&<caiUxOs.537>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusNetCollStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetCollStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetCollStatus.setDescription('&<caiUxOs.538>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusNetLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetLossAction.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetLossAction.setDescription('&<caiUxOs.539>Defines the action to take if the network interface is removed from the machine. Valid values: remove(1), up(2) or down(3).')
uxsStatusNetLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusNetLossStatus.setDescription('&<caiUxOs.540>The status relating to the existence of the object. Valid values: unknown(1), up(2) or down(3).')
uxsStatusIPCSHMIDSAvailable = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSAvailable.setDescription('&<caiUxOs.541>The number of configured shared memory IDs.')
uxsStatusIPCSHMIDSValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSValue.setDescription('&<caiUxOs.542>The number of shared memory IDs in use.')
uxsStatusIPCSHMIDSLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSLagValue.setDescription('&<caiUxOs.543>The number of times that the threshold has been reached.')
uxsStatusIPCSHMIDSLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSLag.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSLag.setDescription('&<caiUxOs.544>The number of times that the threshold has to be reached before the state changes. Valid range: Greater than 0.')
uxsStatusIPCSHMIDSWarnValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSWarnValue.setDescription('&<caiUxOs.545>The absolute value used for threshold calculation based on the configured warning value.')
uxsStatusIPCSHMIDSCritValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSCritValue.setDescription('&<caiUxOs.546>The absolute value used for threshold calculation based on the configured critical value.')
uxsStatusIPCSHMIDSWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSWarn.setDescription('&<caiUxOs.547>The value for used IDs, either as a percentage or absolute value, that is considered a warning level for that resource. Valid ranges: Greater than 0, less than total IDs - 1, not greater than or equal to the critical threshold.')
uxsStatusIPCSHMIDSCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSCrit.setDescription('&<caiUxOs.548>The value for used IDs, either as a percentage or absolute value, that is considered a critical level for that resource. Valid ranges: Greater than 1, less than total IDs, not less than or equal to the warning threshold.')
uxsStatusIPCSHMIDSMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSMonitor.setDescription("&<caiUxOs.549>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusIPCSHMIDSStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSStatus.setDescription('&<caiUxOs.550>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusIPCSEMIDSAvailable = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSAvailable.setDescription('&<caiUxOs.551>The number of configured semaphore IDs.')
uxsStatusIPCSEMIDSValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSValue.setDescription('&<caiUxOs.552>The number of semaphore IDs in use.')
uxsStatusIPCSEMIDSLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSLagValue.setDescription('&<caiUxOs.553>The number of times that the threshold has been reached.')
uxsStatusIPCSEMIDSLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSLag.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSLag.setDescription('&<caiUxOs.554>The number of times that the threshold has to be reached before the state changes. Valid range: Greater than 0.')
uxsStatusIPCSEMIDSWarnValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSWarnValue.setDescription('&<caiUxOs.555>The absolute value used for threshold calculation based on the configured warning value.')
uxsStatusIPCSEMIDSCritValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSCritValue.setDescription('&<caiUxOs.556>The absolute value used for threshold calculation based on the configured critical value.')
uxsStatusIPCSEMIDSWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSWarn.setDescription('&<caiUxOs.557>The value for used IDs, either as a percentage or absolute value, that is considered a warning level for that resource. Valid ranges: Greater than 0, less than total IDs - 1, not greater than or equal to the critical threshold.')
uxsStatusIPCSEMIDSCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSCrit.setDescription('&<caiUxOs.558>The value for used IDs, either as a percentage or absolute value, that is considered a critical level for that resource. Valid ranges: Greater than 1, less than total IDs, not less than or equal to the warning threshold.')
uxsStatusIPCSEMIDSMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSMonitor.setDescription("&<caiUxOs.559>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusIPCSEMIDSStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSStatus.setDescription('&<caiUxOs.560>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusIPCMQIDSAvailable = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQIDSAvailable.setDescription('&<caiUxOs.561>The number of configured message queue IDs.')
uxsStatusIPCMQIDSValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQIDSValue.setDescription('&<caiUxOs.562>The number of message queue IDs in use.')
uxsStatusIPCMQIDSLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQIDSLagValue.setDescription('&<caiUxOs.563>The number of times that the threshold has been reached.')
uxsStatusIPCMQIDSLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSLag.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQIDSLag.setDescription('&<caiUxOs.564>The number of times that the threshold has to be reached before the state changes. Valid range: Greater than 0.')
uxsStatusIPCMQIDSWarnValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQIDSWarnValue.setDescription('&<caiUxOs.565>The absolute value used for threshold calculation based on the configured warning value.')
uxsStatusIPCMQIDSCritValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQIDSCritValue.setDescription('&<caiUxOs.566>The absolute value used for threshold calculation based on the configured critical value.')
uxsStatusIPCMQIDSWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQIDSWarn.setDescription('&<caiUxOs.567>The value for used IDs, either as a percentage or absolute value, that is considered a warning level for that resource. Valid ranges: Greater than 0, less than total IDs - 1, not greater than or equal to the critical threshold.')
uxsStatusIPCMQIDSCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQIDSCrit.setDescription('&<caiUxOs.568>The value for used IDs, either as a percentage or absolute value, that is considered a critical level for that resource. Valid ranges: Greater than 1, less than total IDs, not less than or equal to the warning threshold.')
uxsStatusIPCMQIDSMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQIDSMonitor.setDescription("&<caiUxOs.569>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusIPCMQIDSStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQIDSStatus.setDescription('&<caiUxOs.570>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsStatusIPCMQMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQMonitor.setDescription("&<caiUxOs.571>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1) or monitor(2).")
uxsStatusIPCMQCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQCount.setDescription('&<caiUxOs.572>The number of monitored message queues.')
uxsStatusIPCMQTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33), )
if mibBuilder.loadTexts: uxsStatusIPCMQTable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQTable.setDescription('&<caiUxOs.573>The table of monitored message queues.')
uxsStatusIPCMQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusIPCMQID"))
if mibBuilder.loadTexts: uxsStatusIPCMQEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQEntry.setDescription('&<caiUxOs.574>')
uxsStatusIPCMQID = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQID.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQID.setDescription('&<caiUxOs.575>The message queue ID.')
uxsStatusIPCMQKey = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQKey.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQKey.setDescription('&<caiUxOs.576>The message queue key.')
uxsStatusIPCMQMode = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQMode.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQMode.setDescription('&<caiUxOs.577>The message queue access rights.')
uxsStatusIPCMQOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQOwner.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQOwner.setDescription('&<caiUxOs.578>The message queue owner.')
uxsStatusIPCMQGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQGroup.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQGroup.setDescription('&<caiUxOs.579>The message queue group.')
uxsStatusIPCMQBytesAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQBytesAvailable.setDescription('&<caiUxOs.580>The number of bytes available for messages.')
uxsStatusIPCMQBytesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQBytesValue.setDescription('&<caiUxOs.581>The bytes used in the message queue.')
uxsStatusIPCMQBytesLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesLagValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQBytesLagValue.setDescription('&<caiUxOs.582>The number of times that the threshold has been reached.')
uxsStatusIPCMQBytesLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesLag.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQBytesLag.setDescription('&<caiUxOs.583>The number of times that the threshold has to be reached before the state changes. Valid range: Greater than 0.')
uxsStatusIPCMQBytesWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesWarnValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQBytesWarnValue.setDescription('&<caiUxOs.584>The absolute value used for threshold calculation based on the configured warning value.')
uxsStatusIPCMQBytesCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesCritValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQBytesCritValue.setDescription('&<caiUxOs.585>The absolute value used for threshold calculation based on the configured critical value.')
uxsStatusIPCMQBytesWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesWarn.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQBytesWarn.setDescription('&<caiUxOs.586>The value for used message queue bytes, either as a percentage or in kilobytes, that is considered a warning level for that resource. Valid ranges: Greater than 0, less than total queue size - 1, not greater than or equal to the critical threshold.')
uxsStatusIPCMQBytesCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesCrit.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQBytesCrit.setDescription('&<caiUxOs.587>The value for used message queue bytes, either as a percentage or in kilobytes, that is considered a critical level for that resource. Valid ranges: Greater than 1, less than total Queue size, not less than or equal to the warning threshold.')
uxsStatusIPCMQBytesMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQBytesMonitor.setDescription("&<caiUxOs.588>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1), warning-only(2), critical-only(3) or both(4).")
uxsStatusIPCMQBytesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uxsStatusIPCMQBytesStatus.setDescription('&<caiUxOs.589>The current status of the resource: unknown(1) - An error occurred during data collection, ok(2) - The resource is within the defined limits, warning(3) - The resource has breached the warning threshold, critical(4) - The resource has breached the critical threshold.')
uxsAvailFSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 2, 1), ).setIndexNames((0, "CAIUXOS", "uxsAvailFSysName"))
if mibBuilder.loadTexts: uxsAvailFSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uxsAvailFSysEntry.setDescription('&<caiUxOs.590>')
uxsAvailFSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsAvailFSysName.setStatus('mandatory')
if mibBuilder.loadTexts: uxsAvailFSysName.setDescription('&<caiUxOs.591>The file system name.')
uxsAvailFSysRelatedTo = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsAvailFSysRelatedTo.setStatus('mandatory')
if mibBuilder.loadTexts: uxsAvailFSysRelatedTo.setDescription('&<caiUxOs.592>The device to which the file system is related.')
uxsAvailFSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsAvailFSysType.setStatus('mandatory')
if mibBuilder.loadTexts: uxsAvailFSysType.setDescription('&<caiUxOs.593>The type of the file system. Values are platform dependent.')
uxsAvailDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 4, 1), ).setIndexNames((0, "CAIUXOS", "uxsAvailDiskName"))
if mibBuilder.loadTexts: uxsAvailDiskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uxsAvailDiskEntry.setDescription('&<caiUxOs.594>')
uxsAvailDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsAvailDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: uxsAvailDiskName.setDescription('&<caiUxOs.595>The device name.')
uxsAvailPrnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 6, 1), ).setIndexNames((0, "CAIUXOS", "uxsAvailPrnName"))
if mibBuilder.loadTexts: uxsAvailPrnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uxsAvailPrnEntry.setDescription('&<caiUxOs.596>')
uxsAvailPrnName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsAvailPrnName.setStatus('mandatory')
if mibBuilder.loadTexts: uxsAvailPrnName.setDescription('&<caiUxOs.597>The local printer queue name.')
uxsPollNetTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1), )
if mibBuilder.loadTexts: uxsPollNetTable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollNetTable.setDescription('&<caiUxOs.598>The table of raw network statistics.')
uxsPollNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1, 1), ).setIndexNames((0, "CAIUXOS", "uxsPollNetName"))
if mibBuilder.loadTexts: uxsPollNetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollNetEntry.setDescription('&<caiUxOs.599>')
uxsPollNetName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollNetName.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollNetName.setDescription('&<caiUxOs.600>The name by which the network interface is known.')
uxsPollNetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollNetIP.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollNetIP.setDescription('&<caiUxOs.601>The IP address of the interface.')
uxsPollNetIPktValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollNetIPktValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollNetIPktValue.setDescription('&<caiUxOs.602>The number of input packets since the machine started.')
uxsPollNetIErrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollNetIErrValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollNetIErrValue.setDescription('&<caiUxOs.603>The number of input errors since the machine started.')
uxsPollNetOPktValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollNetOPktValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollNetOPktValue.setDescription('&<caiUxOs.604>The number of output packets since the machine started.')
uxsPollNetOErrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollNetOErrValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollNetOErrValue.setDescription('&<caiUxOs.605>The number of output errors since the machine started.')
uxsPollNetCollValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollNetCollValue.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollNetCollValue.setDescription('&<caiUxOs.606>The number of collisions since the machine started.')
uxsPollIPCSHMMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsPollIPCSHMMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSHMMonitor.setDescription("&<caiUxOs.607>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1) or monitor(2).")
uxsPollIPCSHMCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSHMCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSHMCount.setDescription('&<caiUxOs.608>The number of shared memory segments in the table.')
uxsPollIPCSHMTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3), )
if mibBuilder.loadTexts: uxsPollIPCSHMTable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSHMTable.setDescription('&<caiUxOs.609>The table of shared memory segments.')
uxsPollIPCSEMMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsPollIPCSEMMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSEMMonitor.setDescription("&<caiUxOs.610>Defines the level of monitoring for the resource's status. Valid values: do-not-monitor(1) or monitor(2).")
uxsPollIPCSEMCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSEMCount.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSEMCount.setDescription('&<caiUxOs.611>The number of semaphores in the table.')
uxsPollIPCSEMTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 6), )
if mibBuilder.loadTexts: uxsPollIPCSEMTable.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSEMTable.setDescription('&<caiUxOs.612>The table of semaphore information.')
uxsPollIPCSHMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3, 1), ).setIndexNames((0, "CAIUXOS", "uxsPollIPCSHMID"))
if mibBuilder.loadTexts: uxsPollIPCSHMEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSHMEntry.setDescription('&<caiUxOs.613>')
uxsPollIPCSHMID = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSHMID.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSHMID.setDescription('&<caiUxOs.614>The shared memory ID.')
uxsPollIPCSHMKey = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSHMKey.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSHMKey.setDescription('&<caiUxOs.615>The shared memory key.')
uxsPollIPCSHMMode = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSHMMode.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSHMMode.setDescription('&<caiUxOs.616>The shared memory access rights.')
uxsPollIPCSHMOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSHMOwner.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSHMOwner.setDescription('&<caiUxOs.617>The shared memory segment owner.')
uxsPollIPCSHMGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSHMGroup.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSHMGroup.setDescription('&<caiUxOs.618>The shared memory segments group.')
uxsPollIPCSHMMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSHMMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSHMMaxSize.setDescription('&<caiUxOs.619>The shared memory segment size.')
uxsPollIPCSHMAttached = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSHMAttached.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSHMAttached.setDescription('&<caiUxOs.620>The number of processes using the shared memory segment.')
uxsPollIPCSEMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 6, 1), ).setIndexNames((0, "CAIUXOS", "uxsPollIPCSEMID"))
if mibBuilder.loadTexts: uxsPollIPCSEMEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSEMEntry.setDescription('&<caiUxOs.621>')
uxsPollIPCSEMID = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSEMID.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSEMID.setDescription('&<caiUxOs.622>The semaphore ID.')
uxsPollIPCSEMKey = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSEMKey.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSEMKey.setDescription('&<caiUxOs.623>The semaphore key.')
uxsPollIPCSEMMode = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSEMMode.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSEMMode.setDescription('&<caiUxOs.624>The semaphore access rights.')
uxsPollIPCSEMOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSEMOwner.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSEMOwner.setDescription('&<caiUxOs.625>The semaphore owner.')
uxsPollIPCSEMGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSEMGroup.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSEMGroup.setDescription('&<caiUxOs.626>The semaphore group.')
uxsPollIPCSEMMaxNums = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSEMMaxNums.setStatus('mandatory')
if mibBuilder.loadTexts: uxsPollIPCSEMMaxNums.setDescription('&<caiUxOs.627>The number of semaphores.')
uxsCPUTotalUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10000))
if mibBuilder.loadTexts: uxsCPUTotalUnknown.setDescription('&<caiUxOs.628>')
uxsCPUTotalOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10001))
if mibBuilder.loadTexts: uxsCPUTotalOK.setDescription('&<caiUxOs.629>')
uxsCPUTotalWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10002))
if mibBuilder.loadTexts: uxsCPUTotalWarning.setDescription('&<caiUxOs.630>')
uxsCPUTotalCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10003))
if mibBuilder.loadTexts: uxsCPUTotalCritical.setDescription('&<caiUxOs.631>')
uxsCPUUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10990))
if mibBuilder.loadTexts: uxsCPUUnknown.setDescription('&<caiUxOs.632>')
uxsCPUOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10991))
if mibBuilder.loadTexts: uxsCPUOK.setDescription('&<caiUxOs.633>')
uxsCPUWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10992))
if mibBuilder.loadTexts: uxsCPUWarning.setDescription('&<caiUxOs.634>')
uxsCPUCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10993))
if mibBuilder.loadTexts: uxsCPUCritical.setDescription('&<caiUxOs.635>')
uxsCPUDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10995))
if mibBuilder.loadTexts: uxsCPUDown.setDescription('&<caiUxOs.636>')
uxsCPUAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10996))
if mibBuilder.loadTexts: uxsCPUAdded.setDescription('&<caiUxOs.637>')
uxsCPUDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10997))
if mibBuilder.loadTexts: uxsCPUDeleted.setDescription('&<caiUxOs.638>')
uxsLoad1Unknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11010))
if mibBuilder.loadTexts: uxsLoad1Unknown.setDescription('&<caiUxOs.639>')
uxsLoad1OK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11011))
if mibBuilder.loadTexts: uxsLoad1OK.setDescription('&<caiUxOs.640>')
uxsLoad1Warning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11012))
if mibBuilder.loadTexts: uxsLoad1Warning.setDescription('&<caiUxOs.641>')
uxsLoad1Critical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11013))
if mibBuilder.loadTexts: uxsLoad1Critical.setDescription('&<caiUxOs.642>')
uxsLoad5Unknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11050))
if mibBuilder.loadTexts: uxsLoad5Unknown.setDescription('&<caiUxOs.643>')
uxsLoad5OK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11051))
if mibBuilder.loadTexts: uxsLoad5OK.setDescription('&<caiUxOs.644>')
uxsLoad5Warning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11052))
if mibBuilder.loadTexts: uxsLoad5Warning.setDescription('&<caiUxOs.645>')
uxsLoad5Critical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11053))
if mibBuilder.loadTexts: uxsLoad5Critical.setDescription('&<caiUxOs.646>')
uxsLoad15Unknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11150))
if mibBuilder.loadTexts: uxsLoad15Unknown.setDescription('&<caiUxOs.647>')
uxsLoad15OK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11151))
if mibBuilder.loadTexts: uxsLoad15OK.setDescription('&<caiUxOs.648>')
uxsLoad15Warning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11152))
if mibBuilder.loadTexts: uxsLoad15Warning.setDescription('&<caiUxOs.649>')
uxsLoad15Critical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11153))
if mibBuilder.loadTexts: uxsLoad15Critical.setDescription('&<caiUxOs.650>')
uxsMemUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,12010))
if mibBuilder.loadTexts: uxsMemUnknown.setDescription('&<caiUxOs.651>')
uxsMemOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,12011))
if mibBuilder.loadTexts: uxsMemOK.setDescription('&<caiUxOs.652>')
uxsMemWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,12012))
if mibBuilder.loadTexts: uxsMemWarning.setDescription('&<caiUxOs.653>')
uxsMemCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,12013))
if mibBuilder.loadTexts: uxsMemCritical.setDescription('&<caiUxOs.654>')
uxsSwapTotalUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13000))
if mibBuilder.loadTexts: uxsSwapTotalUnknown.setDescription('&<caiUxOs.655>')
uxsSwapTotalOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13001))
if mibBuilder.loadTexts: uxsSwapTotalOK.setDescription('&<caiUxOs.656>')
uxsSwapTotalWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13002))
if mibBuilder.loadTexts: uxsSwapTotalWarning.setDescription('&<caiUxOs.657>')
uxsSwapTotalCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13003))
if mibBuilder.loadTexts: uxsSwapTotalCritical.setDescription('&<caiUxOs.658>')
uxsSwapUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13990))
if mibBuilder.loadTexts: uxsSwapUnknown.setDescription('&<caiUxOs.659>')
uxsSwapOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13991))
if mibBuilder.loadTexts: uxsSwapOK.setDescription('&<caiUxOs.660>')
uxsSwapWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13992))
if mibBuilder.loadTexts: uxsSwapWarning.setDescription('&<caiUxOs.661>')
uxsSwapCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13993))
if mibBuilder.loadTexts: uxsSwapCritical.setDescription('&<caiUxOs.662>')
uxsSwapDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13995))
if mibBuilder.loadTexts: uxsSwapDown.setDescription('&<caiUxOs.663>')
uxsSwapAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13996))
if mibBuilder.loadTexts: uxsSwapAdded.setDescription('&<caiUxOs.664>')
uxsSwapDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13997))
if mibBuilder.loadTexts: uxsSwapDeleted.setDescription('&<caiUxOs.665>')
uxsFSysUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,14980))
if mibBuilder.loadTexts: uxsFSysUnknown.setDescription('&<caiUxOs.666>')
uxsFSysOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,14981))
if mibBuilder.loadTexts: uxsFSysOK.setDescription('&<caiUxOs.667>')
uxsFSysWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,14982))
if mibBuilder.loadTexts: uxsFSysWarning.setDescription('&<caiUxOs.668>')
uxsFSysCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,14983))
if mibBuilder.loadTexts: uxsFSysCritical.setDescription('&<caiUxOs.669>')
uxsFSysDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,14985))
if mibBuilder.loadTexts: uxsFSysDown.setDescription('&<caiUxOs.670>')
uxsFSysAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,14986))
if mibBuilder.loadTexts: uxsFSysAdded.setDescription('&<caiUxOs.671>')
uxsFSysDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,14987))
if mibBuilder.loadTexts: uxsFSysDeleted.setDescription('&<caiUxOs.672>')
uxsDiskUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,15980))
if mibBuilder.loadTexts: uxsDiskUnknown.setDescription('&<caiUxOs.673>')
uxsDiskOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,15981))
if mibBuilder.loadTexts: uxsDiskOK.setDescription('&<caiUxOs.674>')
uxsDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,15982))
if mibBuilder.loadTexts: uxsDiskWarning.setDescription('&<caiUxOs.675>')
uxsDiskCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,15983))
if mibBuilder.loadTexts: uxsDiskCritical.setDescription('&<caiUxOs.676>')
uxsDiskDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,15985))
if mibBuilder.loadTexts: uxsDiskDown.setDescription('&<caiUxOs.677>')
uxsDiskAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,15986))
if mibBuilder.loadTexts: uxsDiskAdded.setDescription('&<caiUxOs.678>')
uxsDiskDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,15987))
if mibBuilder.loadTexts: uxsDiskDeleted.setDescription('&<caiUxOs.679>')
uxsProcUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,16980))
if mibBuilder.loadTexts: uxsProcUnknown.setDescription('&<caiUxOs.680>')
uxsProcOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,16981))
if mibBuilder.loadTexts: uxsProcOK.setDescription('&<caiUxOs.681>')
uxsProcWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,16982))
if mibBuilder.loadTexts: uxsProcWarning.setDescription('&<caiUxOs.682>')
uxsProcCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,16983))
if mibBuilder.loadTexts: uxsProcCritical.setDescription('&<caiUxOs.683>')
uxsProcDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,16985))
if mibBuilder.loadTexts: uxsProcDown.setDescription('&<caiUxOs.684>')
uxsProcAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,16986))
if mibBuilder.loadTexts: uxsProcAdded.setDescription('&<caiUxOs.685>')
uxsProcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,16987))
if mibBuilder.loadTexts: uxsProcDeleted.setDescription('&<caiUxOs.686>')
uxsFilesUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,17980))
if mibBuilder.loadTexts: uxsFilesUnknown.setDescription('&<caiUxOs.687>')
uxsFilesOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,17981))
if mibBuilder.loadTexts: uxsFilesOK.setDescription('&<caiUxOs.688>')
uxsFilesWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,17982))
if mibBuilder.loadTexts: uxsFilesWarning.setDescription('&<caiUxOs.689>')
uxsFilesCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,17983))
if mibBuilder.loadTexts: uxsFilesCritical.setDescription('&<caiUxOs.690>')
uxsFilesDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,17985))
if mibBuilder.loadTexts: uxsFilesDown.setDescription('&<caiUxOs.691>')
uxsFilesAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,17986))
if mibBuilder.loadTexts: uxsFilesAdded.setDescription('&<caiUxOs.692>')
uxsFilesDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,17987))
if mibBuilder.loadTexts: uxsFilesDeleted.setDescription('&<caiUxOs.693>')
uxsPrnUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,18980))
if mibBuilder.loadTexts: uxsPrnUnknown.setDescription('&<caiUxOs.694>')
uxsPrnOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,18981))
if mibBuilder.loadTexts: uxsPrnOK.setDescription('&<caiUxOs.695>')
uxsPrnWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,18982))
if mibBuilder.loadTexts: uxsPrnWarning.setDescription('&<caiUxOs.696>')
uxsPrnCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,18983))
if mibBuilder.loadTexts: uxsPrnCritical.setDescription('&<caiUxOs.697>')
uxsPrnDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,18985))
if mibBuilder.loadTexts: uxsPrnDown.setDescription('&<caiUxOs.698>')
uxsPrnAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,18986))
if mibBuilder.loadTexts: uxsPrnAdded.setDescription('&<caiUxOs.699>')
uxsPrnDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,18987))
if mibBuilder.loadTexts: uxsPrnDeleted.setDescription('&<caiUxOs.700>')
uxsNetTotalUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19000))
if mibBuilder.loadTexts: uxsNetTotalUnknown.setDescription('&<caiUxOs.701>')
uxsNetTotalOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19001))
if mibBuilder.loadTexts: uxsNetTotalOK.setDescription('&<caiUxOs.702>')
uxsNetTotalWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19002))
if mibBuilder.loadTexts: uxsNetTotalWarning.setDescription('&<caiUxOs.703>')
uxsNetTotalCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19003))
if mibBuilder.loadTexts: uxsNetTotalCritical.setDescription('&<caiUxOs.704>')
uxsNetUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19990))
if mibBuilder.loadTexts: uxsNetUnknown.setDescription('&<caiUxOs.705>')
uxsNetOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19991))
if mibBuilder.loadTexts: uxsNetOK.setDescription('&<caiUxOs.706>')
uxsNetWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19992))
if mibBuilder.loadTexts: uxsNetWarning.setDescription('&<caiUxOs.707>')
uxsNetCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19993))
if mibBuilder.loadTexts: uxsNetCritical.setDescription('&<caiUxOs.708>')
uxsNetDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19995))
if mibBuilder.loadTexts: uxsNetDown.setDescription('&<caiUxOs.709>')
uxsNetAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19996))
if mibBuilder.loadTexts: uxsNetAdded.setDescription('&<caiUxOs.710>')
uxsNetDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19997))
if mibBuilder.loadTexts: uxsNetDeleted.setDescription('&<caiUxOs.711>')
uxsIPCSHMUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20010))
if mibBuilder.loadTexts: uxsIPCSHMUnknown.setDescription('&<caiUxOs.712>')
uxsIPCSHMOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20011))
if mibBuilder.loadTexts: uxsIPCSHMOK.setDescription('&<caiUxOs.713>')
uxsIPCSHMWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20012))
if mibBuilder.loadTexts: uxsIPCSHMWarning.setDescription('&<caiUxOs.714>')
uxsIPCSHMCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20013))
if mibBuilder.loadTexts: uxsIPCSHMCritical.setDescription('&<caiUxOs.715>')
uxsIPCSEMUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20020))
if mibBuilder.loadTexts: uxsIPCSEMUnknown.setDescription('&<caiUxOs.716>')
uxsIPCSEMOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20021))
if mibBuilder.loadTexts: uxsIPCSEMOK.setDescription('&<caiUxOs.717>')
uxsIPCSEMWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20022))
if mibBuilder.loadTexts: uxsIPCSEMWarning.setDescription('&<caiUxOs.718>')
uxsIPCSEMCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20023))
if mibBuilder.loadTexts: uxsIPCSEMCritical.setDescription('&<caiUxOs.719>')
uxsIPCMQUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20030))
if mibBuilder.loadTexts: uxsIPCMQUnknown.setDescription('&<caiUxOs.720>')
uxsIPCMQOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20031))
if mibBuilder.loadTexts: uxsIPCMQOK.setDescription('&<caiUxOs.721>')
uxsIPCMQWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20032))
if mibBuilder.loadTexts: uxsIPCMQWarning.setDescription('&<caiUxOs.722>')
uxsIPCMQCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20033))
if mibBuilder.loadTexts: uxsIPCMQCritical.setDescription('&<caiUxOs.723>')
uxsIPCMQSUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20980))
if mibBuilder.loadTexts: uxsIPCMQSUnknown.setDescription('&<caiUxOs.724>')
uxsIPCMQSOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20981))
if mibBuilder.loadTexts: uxsIPCMQSOK.setDescription('&<caiUxOs.725>')
uxsIPCMQSWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20982))
if mibBuilder.loadTexts: uxsIPCMQSWarning.setDescription('&<caiUxOs.726>')
uxsIPCMQSCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20983))
if mibBuilder.loadTexts: uxsIPCMQSCritical.setDescription('&<caiUxOs.727>')
uxsIPCMQSDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20985))
if mibBuilder.loadTexts: uxsIPCMQSDown.setDescription('&<caiUxOs.728>')
uxsIPCMQSAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20986))
if mibBuilder.loadTexts: uxsIPCMQSAdded.setDescription('&<caiUxOs.729>')
uxsIPCMQSDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20987))
if mibBuilder.loadTexts: uxsIPCMQSDeleted.setDescription('&<caiUxOs.730>')
mibBuilder.exportSymbols("CAIUXOS", uxsStatusFileModTimeStatus=uxsStatusFileModTimeStatus, uxsStatusPrnAggStatus=uxsStatusPrnAggStatus, uxsStatusSwapWarn=uxsStatusSwapWarn, uxsLoad1Critical=uxsLoad1Critical, uxsStatusIPCMQMode=uxsStatusIPCMQMode, uxsConfigSysVersion=uxsConfigSysVersion, uxsPrnDeleted=uxsPrnDeleted, uxsStatusFSysInodesMonitor=uxsStatusFSysInodesMonitor, uxsStatusProcTable=uxsStatusProcTable, uxsStatusNetTotalIErrStatus=uxsStatusNetTotalIErrStatus, uxsStatusNetIPktStatus=uxsStatusNetIPktStatus, uxsFSysWarning=uxsFSysWarning, uxsStatusIPCSHMIDSCritValue=uxsStatusIPCSHMIDSCritValue, uxsStatusLoad1MinWarn=uxsStatusLoad1MinWarn, uxsStatusNetStatus=uxsStatusNetStatus, uxsStatusNetTotalOPktCrit=uxsStatusNetTotalOPktCrit, uxsStatusSwapCrit=uxsStatusSwapCrit, uxsStatusProcInstValue=uxsStatusProcInstValue, uxsIPCSHMUnknown=uxsIPCSHMUnknown, uxsStatusSwapLag=uxsStatusSwapLag, uxsStatusDiskCount=uxsStatusDiskCount, uxsStatusSwapUsedValue=uxsStatusSwapUsedValue, uxsIPCSHMOK=uxsIPCSHMOK, uxsConfigPrnNameAdd=uxsConfigPrnNameAdd, uxsStatusGeneralTotalCritical=uxsStatusGeneralTotalCritical, uxsStatusSwapCount=uxsStatusSwapCount, uxsStatusIPCSHMIDSMonitor=uxsStatusIPCSHMIDSMonitor, uxsStatusFSysSpaceStatus=uxsStatusFSysSpaceStatus, uxsFSysUnknown=uxsFSysUnknown, uxsConfigSwapGroup=uxsConfigSwapGroup, uxsStatusIPCSEMIDSLag=uxsStatusIPCSEMIDSLag, uxsSwapTotalCritical=uxsSwapTotalCritical, uxsStatusGeneralTotalCount=uxsStatusGeneralTotalCount, uxsConfigLoadGroup=uxsConfigLoadGroup, uxsIPCMQUnknown=uxsIPCMQUnknown, uxsPrnUnknown=uxsPrnUnknown, uxsStatusCPUTotalLag=uxsStatusCPUTotalLag, uxsFilesWarning=uxsFilesWarning, cai=cai, uxsConfigCPUPollInterval=uxsConfigCPUPollInterval, uxsDiskOK=uxsDiskOK, uxsStatusNetIP=uxsStatusNetIP, uxsAvailFSysName=uxsAvailFSysName, uxsNetAdded=uxsNetAdded, uxsStatusNetIPktCrit=uxsStatusNetIPktCrit, uxsStatusLoad5MinStatus=uxsStatusLoad5MinStatus, uxsProcDown=uxsProcDown, uxsConfigDiskTPutMonitor=uxsConfigDiskTPutMonitor, uxsAvailFSysRelatedTo=uxsAvailFSysRelatedTo, uxsConfigFileModTimeMonitor=uxsConfigFileModTimeMonitor, uxsLoad15Warning=uxsLoad15Warning, uxsCPUTotalCritical=uxsCPUTotalCritical, uxsStatusGeneralNetCritical=uxsStatusGeneralNetCritical, uxsConfigPrnItemsCrit=uxsConfigPrnItemsCrit, uxsStatusIPCMQIDSWarnValue=uxsStatusIPCMQIDSWarnValue, uxsStatusSwapCritValue=uxsStatusSwapCritValue, uxsStatusFileModTime=uxsStatusFileModTime, uxsStatusFileSizeDMonitor=uxsStatusFileSizeDMonitor, uxsAvailFSysEntry=uxsAvailFSysEntry, uxsDiskDeleted=uxsDiskDeleted, uxsStatusGeneralProcCritical=uxsStatusGeneralProcCritical, uxsNetWarning=uxsNetWarning, uxsStatusProcStatus=uxsStatusProcStatus, uxsCPUTotalOK=uxsCPUTotalOK, uxsStatusFSysInodesDMonitor=uxsStatusFSysInodesDMonitor, uxsStatusPrnLossStatus=uxsStatusPrnLossStatus, uxsStatusNetTotalOPktMonitor=uxsStatusNetTotalOPktMonitor, uxsPollIPCSHMMode=uxsPollIPCSHMMode, uxsStatusGeneralNetCount=uxsStatusGeneralNetCount, uxsIPCMQCritical=uxsIPCMQCritical, uxsConfigProcNameAdd=uxsConfigProcNameAdd, uxsConfigSysSystemName=uxsConfigSysSystemName, uxsStatusCPUMonitor=uxsStatusCPUMonitor, uxsConfigFileSizeDMonitor=uxsConfigFileSizeDMonitor, uxsAvailDiskEntry=uxsAvailDiskEntry, uxsSwapCritical=uxsSwapCritical, uxsIPCMQSUnknown=uxsIPCMQSUnknown, uxsPollNetIErrValue=uxsPollNetIErrValue, uxsStatusFSysGroup=uxsStatusFSysGroup, uxsStatusFSysInodesDStatus=uxsStatusFSysInodesDStatus, uxsStatusCPUUser=uxsStatusCPUUser, uxsStatusIPCSHMIDSWarnValue=uxsStatusIPCSHMIDSWarnValue, uxsStatusFSysInodesDWarnValue=uxsStatusFSysInodesDWarnValue, uxsStatusFileName=uxsStatusFileName, uxsStatusIPCMQIDSLag=uxsStatusIPCMQIDSLag, uxsStatusDiskLossStatus=uxsStatusDiskLossStatus, uxsPollNetGroup=uxsPollNetGroup, uxsCPUCritical=uxsCPUCritical, uxsAvailDiskTable=uxsAvailDiskTable, uxsStatusFSysSpaceWarnValue=uxsStatusFSysSpaceWarnValue, uxsConfigGeneralPrnPollTime=uxsConfigGeneralPrnPollTime, uxsConfigPrnDesc=uxsConfigPrnDesc, uxsStatusGeneralSwapCritical=uxsStatusGeneralSwapCritical, uxsConfigNetIErrMonitor=uxsConfigNetIErrMonitor, uxsStatusProcCPUStatus=uxsStatusProcCPUStatus, uxsStatusFSysInodesDCritValue=uxsStatusFSysInodesDCritValue, uxsStatusDiskAggStatus=uxsStatusDiskAggStatus, uxsStatusMemCrit=uxsStatusMemCrit, uxsStatusFSysLossAction=uxsStatusFSysLossAction, uxsStatusGeneralLoadCount=uxsStatusGeneralLoadCount, uxsSwapTotalOK=uxsSwapTotalOK, uxsCPUUnknown=uxsCPUUnknown, uxsConfigProcSizeMax=uxsConfigProcSizeMax, uxsIPCMQSAdded=uxsIPCMQSAdded, uxsStatusIPCSEMIDSWarn=uxsStatusIPCSEMIDSWarn, uxsStatusCPULossStatus=uxsStatusCPULossStatus, uxsStatusSwapAvailable=uxsStatusSwapAvailable, uxsConfigMemPollInterval=uxsConfigMemPollInterval, uxsStatusNetTotalOErrMonitor=uxsStatusNetTotalOErrMonitor, uxsAvailPrnEntry=uxsAvailPrnEntry, uxsSwapUnknown=uxsSwapUnknown, uxsStatusSwapTotalStatus=uxsStatusSwapTotalStatus, uxsStatusDiskTPutCrit=uxsStatusDiskTPutCrit, uxsStatusGeneralMemWarning=uxsStatusGeneralMemWarning, uxsStatusMemTotal=uxsStatusMemTotal, uxsStatusSwapAggStatus=uxsStatusSwapAggStatus, uxsStatusFileSizeDStatus=uxsStatusFileSizeDStatus, uxsAvailDiskName=uxsAvailDiskName, uxsStatusMemGroup=uxsStatusMemGroup, uxsPollIPCSHMOwner=uxsPollIPCSHMOwner, uxsStatusIPCMQEntry=uxsStatusIPCMQEntry, uxsStatusProcChldValue=uxsStatusProcChldValue, uxsStatusGeneralNetWarning=uxsStatusGeneralNetWarning, uxsStatusNetOPktStatus=uxsStatusNetOPktStatus, uxsPollNetCollValue=uxsPollNetCollValue, uxsStatusFSysSpaceDWarnValue=uxsStatusFSysSpaceDWarnValue, uxsStatusFileGroup=uxsStatusFileGroup, uxsConfigFileExist=uxsConfigFileExist, uxsStatusIPCMQBytesValue=uxsStatusIPCMQBytesValue, uxsConfigSysRelease=uxsConfigSysRelease, uxsConfigFileSizeDCrit=uxsConfigFileSizeDCrit, uxsStatusIPCSEMIDSValue=uxsStatusIPCSEMIDSValue, uxsNetUnknown=uxsNetUnknown, uxsStatusFileExistMonitor=uxsStatusFileExistMonitor, uxsStatusProcSizeMin=uxsStatusProcSizeMin, uxsStatusIPCSHMIDSWarn=uxsStatusIPCSHMIDSWarn, uxsStatusMemMonitor=uxsStatusMemMonitor, uxsStatusNetLossAction=uxsStatusNetLossAction, uxsStatusIPCMQBytesStatus=uxsStatusIPCMQBytesStatus, uxsConfigGeneralFilePollTime=uxsConfigGeneralFilePollTime, uxsStatusProcInstMin=uxsStatusProcInstMin, uxsStatusIPCMQBytesLagValue=uxsStatusIPCMQBytesLagValue, uxsConfigPrnLossAction=uxsConfigPrnLossAction, uxsConfigNetOPktMonitor=uxsConfigNetOPktMonitor, uxsStatusNetOErrStatus=uxsStatusNetOErrStatus, uxsStatusFSysInodesDWarn=uxsStatusFSysInodesDWarn, uxsConfigDiskNameAdd=uxsConfigDiskNameAdd, uxsStatusFileExistStatus=uxsStatusFileExistStatus, uxsStatusIPCSHMIDSLagValue=uxsStatusIPCSHMIDSLagValue, uxsStatusIPCMQIDSLagValue=uxsStatusIPCMQIDSLagValue, uxsConfigMemGroup=uxsConfigMemGroup, uxsStatusCPUGroup=uxsStatusCPUGroup, uxsConfigNetIErrCrit=uxsConfigNetIErrCrit, uxsStatusProcName=uxsStatusProcName, uxsConfigCPUPollMethod=uxsConfigCPUPollMethod, uxsPollIPCSEMID=uxsPollIPCSEMID, uxsConfigCPULossAction=uxsConfigCPULossAction, uxsStatusDiskEntry=uxsStatusDiskEntry, uxsStatusMemLagValue=uxsStatusMemLagValue, uxsLoad5Warning=uxsLoad5Warning, uxsIPCMQSCritical=uxsIPCMQSCritical, uxsStatusNetIErrWarn=uxsStatusNetIErrWarn, uxsStatusProcChldMin=uxsStatusProcChldMin, uxsStatusProcInstStatus=uxsStatusProcInstStatus, uxsStatusNetIErrStatus=uxsStatusNetIErrStatus, uxsPollIPCSHMID=uxsPollIPCSHMID, uxsStatusPrnRemove=uxsStatusPrnRemove, uxsStatusFSysSpaceWarn=uxsStatusFSysSpaceWarn, uxsConfigFilePollMethod=uxsConfigFilePollMethod, uxsStatusSwapTotalName=uxsStatusSwapTotalName, uxsConfigCPUMonitor=uxsConfigCPUMonitor, uxsConfigProcPathSig=uxsConfigProcPathSig, uxsConfigNetIErrWarn=uxsConfigNetIErrWarn, uxsSwapTotalWarning=uxsSwapTotalWarning, uxsStatusIPCSEMIDSCrit=uxsStatusIPCSEMIDSCrit, uxsPollIPCGroup=uxsPollIPCGroup, uxsStatusFSysInodesValue=uxsStatusFSysInodesValue, uxsStatusFSysSpaceCritValue=uxsStatusFSysSpaceCritValue, uxsStatusFSysSpaceDCritValue=uxsStatusFSysSpaceDCritValue, uxsConfigSysBootTime=uxsConfigSysBootTime, uxsStatusProcSizeStatus=uxsStatusProcSizeStatus, uxsStatusNetTotalIErrWarn=uxsStatusNetTotalIErrWarn, uxsStatusGeneralDiskCritical=uxsStatusGeneralDiskCritical, uxsSwapDeleted=uxsSwapDeleted, uxsIPCMQSWarning=uxsIPCMQSWarning, uxsStatusFSysRelatedTo=uxsStatusFSysRelatedTo, uxsStatusCPUCrit=uxsStatusCPUCrit, uxsStatusNetIErrCrit=uxsStatusNetIErrCrit, uxsStatusCPUWarn=uxsStatusCPUWarn, uxsStatusNetGroup=uxsStatusNetGroup, uxsConfigGroup=uxsConfigGroup, uxsFSysOK=uxsFSysOK, uxsIPCMQSDeleted=uxsIPCMQSDeleted, uxsPrnWarning=uxsPrnWarning, uxsStatusPrnDesc=uxsStatusPrnDesc, uxsStatusCPULagValue=uxsStatusCPULagValue, uxsStatusNetCollMonitor=uxsStatusNetCollMonitor, uxsStatusFSysInodesDCrit=uxsStatusFSysInodesDCrit, uxsStatusFSysLossStatus=uxsStatusFSysLossStatus, uxsStatusLoadGroup=uxsStatusLoadGroup, uxsStatusIPCSEMIDSLagValue=uxsStatusIPCSEMIDSLagValue, uxsConfigPrnPollMethod=uxsConfigPrnPollMethod, uxsStatusGeneralFSysCount=uxsStatusGeneralFSysCount, uxsCPUTotalUnknown=uxsCPUTotalUnknown, caiSysMgr=caiSysMgr, uxsConfigNetGroup=uxsConfigNetGroup, uxsStatusGeneralProcCount=uxsStatusGeneralProcCount, uxsStatusSwapTotalCrit=uxsStatusSwapTotalCrit, uxsStatusProcChldMonitor=uxsStatusProcChldMonitor, uxsStatusNetCount=uxsStatusNetCount, uxsStatusGeneralIPCCount=uxsStatusGeneralIPCCount, uxsStatusLoad1MinValue=uxsStatusLoad1MinValue, uxsStatusNetTotalCollWarn=uxsStatusNetTotalCollWarn, uxsStatusGeneralPrnCritical=uxsStatusGeneralPrnCritical, uxsStatusIPCSHMIDSCrit=uxsStatusIPCSHMIDSCrit, uxsPollIPCSHMTable=uxsPollIPCSHMTable, uxsStatusPrnLossAction=uxsStatusPrnLossAction, uxsStatusCPUUsedValue=uxsStatusCPUUsedValue, uxsConfigGeneralIPCPollTime=uxsConfigGeneralIPCPollTime, uxsIPCSEMCritical=uxsIPCSEMCritical, uxsProcAdded=uxsProcAdded, uxsConfigFileNameRemove=uxsConfigFileNameRemove, uxsPollIPCSHMAttached=uxsPollIPCSHMAttached, uxsConfigProcUsers=uxsConfigProcUsers, uxsStatusGeneralFileCount=uxsStatusGeneralFileCount, uxsStatusDiskTable=uxsStatusDiskTable, uxsStatusNetTotalOPktValue=uxsStatusNetTotalOPktValue, uxsStatusGeneralIPCWarning=uxsStatusGeneralIPCWarning, uxsPollIPCSHMEntry=uxsPollIPCSHMEntry, uxsConfigDiskPollMethod=uxsConfigDiskPollMethod, uxsStatusNetOErrCrit=uxsStatusNetOErrCrit, uxsFSysAdded=uxsFSysAdded, uxsAvailFSysType=uxsAvailFSysType, uxsConfigCPULag=uxsConfigCPULag, uxsStatusIPCSHMIDSLag=uxsStatusIPCSHMIDSLag, uxsProcWarning=uxsProcWarning, uxsCPUOK=uxsCPUOK, uxsConfigFSysInodesMonitor=uxsConfigFSysInodesMonitor, uxsConfigMemPollMethod=uxsConfigMemPollMethod, uxsCPUDeleted=uxsCPUDeleted, uxsStatusFileSizeDWarn=uxsStatusFileSizeDWarn, uxsLoad1OK=uxsLoad1OK, uxsStatusPrnName=uxsStatusPrnName, uxsConfigProcSizeMonitor=uxsConfigProcSizeMonitor, uxsStatusIPCSEMIDSAvailable=uxsStatusIPCSEMIDSAvailable, uxsStatusNetCollStatus=uxsStatusNetCollStatus, uxsAvailPrnName=uxsAvailPrnName, uxsConfigGeneralLoadPollTime=uxsConfigGeneralLoadPollTime, uxsStatusProcChldStatus=uxsStatusProcChldStatus, uxsConfigFSysNameRemove=uxsConfigFSysNameRemove, uxsConfigLoadPollInterval=uxsConfigLoadPollInterval, uxsStatusIPCSEMIDSCritValue=uxsStatusIPCSEMIDSCritValue, uxsStatusGeneralCPUWarning=uxsStatusGeneralCPUWarning, uxsSwapTotalUnknown=uxsSwapTotalUnknown)
mibBuilder.exportSymbols("CAIUXOS", uxsStatusDiskName=uxsStatusDiskName, uxsConfigNetOErrMonitor=uxsConfigNetOErrMonitor, uxsStatusNetOPktValue=uxsStatusNetOPktValue, uxsStatusIPCMQIDSStatus=uxsStatusIPCMQIDSStatus, uxsPollIPCSEMEntry=uxsPollIPCSEMEntry, uxsStatusNetOPktMonitor=uxsStatusNetOPktMonitor, uxsConfigGeneralWarmStartTime=uxsConfigGeneralWarmStartTime, uxsConfigFSysGroup=uxsConfigFSysGroup, uxsConfigFSysPollInterval=uxsConfigFSysPollInterval, uxsConfigFSysSpaceDWarn=uxsConfigFSysSpaceDWarn, uxsConfigGeneralFSysPollTime=uxsConfigGeneralFSysPollTime, uxsStatusLoad15MinValue=uxsStatusLoad15MinValue, uxsStatusGeneralCPUCritical=uxsStatusGeneralCPUCritical, uxsStatusIPCMQOwner=uxsStatusIPCMQOwner, uxsConfigFSysPollMethod=uxsConfigFSysPollMethod, uxsStatusFSysCount=uxsStatusFSysCount, uxsStatusDiskTPutWarn=uxsStatusDiskTPutWarn, uxsConfigPrnGroup=uxsConfigPrnGroup, uxsStatusGeneralTotalWarning=uxsStatusGeneralTotalWarning, uxsDiskDown=uxsDiskDown, uxsPollIPCSHMMaxSize=uxsPollIPCSHMMaxSize, uxsStatusIPCGroup=uxsStatusIPCGroup, uxsConfigFSysMountedMonitor=uxsConfigFSysMountedMonitor, uxsAvailableGroup=uxsAvailableGroup, uxsConfigProcSizeMin=uxsConfigProcSizeMin, uxsStatusSwapTotalCritValue=uxsStatusSwapTotalCritValue, uxsAvailFSysRefresh=uxsAvailFSysRefresh, uxsStatusFSysType=uxsStatusFSysType, uxsConfigFileDesc=uxsConfigFileDesc, uxsStatusCPUTotalUsedValue=uxsStatusCPUTotalUsedValue, uxsStatusLoad5MinMonitor=uxsStatusLoad5MinMonitor, uxsNetTotalOK=uxsNetTotalOK, uxsStatusFSysSpaceTotal=uxsStatusFSysSpaceTotal, uxsConfigFileSizeDWarn=uxsConfigFileSizeDWarn, agentWorks=agentWorks, uxsLoad15Unknown=uxsLoad15Unknown, uxsConfigCPUWarn=uxsConfigCPUWarn, uxsStatusNetTotalCollStatus=uxsStatusNetTotalCollStatus, uxsStatusMemWarnValue=uxsStatusMemWarnValue, uxsStatusLoad5MinWarn=uxsStatusLoad5MinWarn, uxsConfigFSysSpaceWarn=uxsConfigFSysSpaceWarn, uxsCPUAdded=uxsCPUAdded, uxsPollIPCSEMGroup=uxsPollIPCSEMGroup, uxsStatusNetTotalOErrValue=uxsStatusNetTotalOErrValue, uxsStatusCPUAggStatus=uxsStatusCPUAggStatus, uxsStatusIPCMQBytesWarnValue=uxsStatusIPCMQBytesWarnValue, uxsStatusCPUWIO=uxsStatusCPUWIO, uxsFSysDeleted=uxsFSysDeleted, uxsStatusMemValue=uxsStatusMemValue, uxsPollIPCSEMOwner=uxsPollIPCSEMOwner, uxsStatusIPCSEMIDSMonitor=uxsStatusIPCSEMIDSMonitor, uxsStatusIPCMQBytesLag=uxsStatusIPCMQBytesLag, uxsProcUnknown=uxsProcUnknown, uxsConfigProcInstMin=uxsConfigProcInstMin, uxsIPCSEMOK=uxsIPCSEMOK, uxsStatusSwapEntry=uxsStatusSwapEntry, uxsConfigDiskTPutWarn=uxsConfigDiskTPutWarn, uxsConfigGeneralCPUPollTime=uxsConfigGeneralCPUPollTime, uxsStatusNetTotalIErrCrit=uxsStatusNetTotalIErrCrit, uxsStatusDiskTPutValue=uxsStatusDiskTPutValue, uxsFilesAdded=uxsFilesAdded, uxsConfigSwapLossAction=uxsConfigSwapLossAction, uxsStatusLoad1MinStatus=uxsStatusLoad1MinStatus, uxsConfigSwapCrit=uxsConfigSwapCrit, uxsStatusNetTotalOErrStatus=uxsStatusNetTotalOErrStatus, uxsStatusIPCMQIDSAvailable=uxsStatusIPCMQIDSAvailable, uxsConfigFileSizeCrit=uxsConfigFileSizeCrit, uxsPollNetEntry=uxsPollNetEntry, uxsLoad5Critical=uxsLoad5Critical, uxsLoad15OK=uxsLoad15OK, uxsStatusIPCMQID=uxsStatusIPCMQID, uxsStatusProcPIDs=uxsStatusProcPIDs, uxsNetTotalUnknown=uxsNetTotalUnknown, uxsFilesCritical=uxsFilesCritical, uxsStatusIPCSEMIDSWarnValue=uxsStatusIPCSEMIDSWarnValue, uxsStatusIPCMQBytesCrit=uxsStatusIPCMQBytesCrit, uxsConfigDiskNameRemove=uxsConfigDiskNameRemove, uxsConfigGeneralAgentVersion=uxsConfigGeneralAgentVersion, uxsStatusIPCMQIDSMonitor=uxsStatusIPCMQIDSMonitor, uxsPollNetIPktValue=uxsPollNetIPktValue, uxsAvailFSysTable=uxsAvailFSysTable, uxsIPCMQWarning=uxsIPCMQWarning, uxsStatusMemCritValue=uxsStatusMemCritValue, uxsConfigProcCPUMonitor=uxsConfigProcCPUMonitor, uxsConfigDiskLossAction=uxsConfigDiskLossAction, uxsStatusFSysInodesWarn=uxsStatusFSysInodesWarn, uxsConfigGeneralDiskPollTime=uxsConfigGeneralDiskPollTime, uxsConfigFSysNameAdd=uxsConfigFSysNameAdd, uxsStatusFileExist=uxsStatusFileExist, uxsSwapDown=uxsSwapDown, uxsPollNetName=uxsPollNetName, uxsStatusGeneralFSysCritical=uxsStatusGeneralFSysCritical, uxsStatusCPUIdle=uxsStatusCPUIdle, uxsStatusProcCPUCrit=uxsStatusProcCPUCrit, uxsStatusGeneralGroup=uxsStatusGeneralGroup, uxsStatusGeneralFileCritical=uxsStatusGeneralFileCritical, uxsStatusIPCMQIDSValue=uxsStatusIPCMQIDSValue, uxsConfigFSysSpaceCrit=uxsConfigFSysSpaceCrit, uxsConfigIPCPollMethod=uxsConfigIPCPollMethod, uxsIPCSEMWarning=uxsIPCSEMWarning, uxsStatusSwapTable=uxsStatusSwapTable, unix=unix, uxsStatusCPUTotalLagValue=uxsStatusCPUTotalLagValue, uxsConfigIPCMQBytesWarn=uxsConfigIPCMQBytesWarn, uxsConfigFSysInodesDCrit=uxsConfigFSysInodesDCrit, uxsAvailPrnTable=uxsAvailPrnTable, uxsStatusGeneralDiskWarning=uxsStatusGeneralDiskWarning, uxsConfigLoadPollMethod=uxsConfigLoadPollMethod, uxsStatusNetIErrMonitor=uxsStatusNetIErrMonitor, uxsConfigIPCMQBytesLag=uxsConfigIPCMQBytesLag, uxsPrnCritical=uxsPrnCritical, uxsStatusProcSizeMonitor=uxsStatusProcSizeMonitor, uxsStatusNetOPktCrit=uxsStatusNetOPktCrit, uxsStatusNetTotalIErrMonitor=uxsStatusNetTotalIErrMonitor, uxsStatusIPCSEMIDSStatus=uxsStatusIPCSEMIDSStatus, uxsCPUDown=uxsCPUDown, uxsStatusSwapGroup=uxsStatusSwapGroup, uxsStatusNetOErrValue=uxsStatusNetOErrValue, uxsConfigFileExistMonitor=uxsConfigFileExistMonitor, uxsFilesDown=uxsFilesDown, uxsStatusFSysStatus=uxsStatusFSysStatus, uxsPrnAdded=uxsPrnAdded, uxsStatusGeneralDiskCount=uxsStatusGeneralDiskCount, uxsDiskWarning=uxsDiskWarning, uxsConfigIPCPollInterval=uxsConfigIPCPollInterval, uxsConfigProcCPUWarn=uxsConfigProcCPUWarn, uxsStatusIPCSHMIDSAvailable=uxsStatusIPCSHMIDSAvailable, uxsStatusFSysInodesCrit=uxsStatusFSysInodesCrit, uxsStatusDiskRemove=uxsStatusDiskRemove, uxsStatusPrnItemsCrit=uxsStatusPrnItemsCrit, uxsPollIPCSEMKey=uxsPollIPCSEMKey, uxsConfigFSysSpaceMonitor=uxsConfigFSysSpaceMonitor, uxsStatusProcUsers=uxsStatusProcUsers, uxsPollIPCSHMKey=uxsPollIPCSHMKey, uxsConfigFilePollInterval=uxsConfigFilePollInterval, uxsStatusGeneralFileWarning=uxsStatusGeneralFileWarning, uxsStatusGeneralMemCount=uxsStatusGeneralMemCount, uxsStatusFSysSpaceMonitor=uxsStatusFSysSpaceMonitor, uxsConfigDiskGroup=uxsConfigDiskGroup, uxsConfigNetOErrWarn=uxsConfigNetOErrWarn, uxsConfigFileSizeMonitor=uxsConfigFileSizeMonitor, uxsStatusSwapLossStatus=uxsStatusSwapLossStatus, uxsStatusGeneralFSysWarning=uxsStatusGeneralFSysWarning, uxsStatusPrnCount=uxsStatusPrnCount, uxsPrnOK=uxsPrnOK, uxsStatusFSysEntry=uxsStatusFSysEntry, uxsConfigPrnNameRemove=uxsConfigPrnNameRemove, uxsStatusMemLag=uxsStatusMemLag, uxsStatusNetTotalIPktMonitor=uxsStatusNetTotalIPktMonitor, uxsConfigNetPollMethod=uxsConfigNetPollMethod, uxsConfigIPCMQBytesMonitor=uxsConfigIPCMQBytesMonitor, uxsStatusFileSizeMonitor=uxsStatusFileSizeMonitor, uxsConfigDiskTPutCrit=uxsConfigDiskTPutCrit, uxsStatusNetOErrMonitor=uxsStatusNetOErrMonitor, uxsConfigSwapLag=uxsConfigSwapLag, uxsStatusFileEntry=uxsStatusFileEntry, uxsIPCSEMUnknown=uxsIPCSEMUnknown, uxsStatusNetTotalOPktStatus=uxsStatusNetTotalOPktStatus, uxsStatusCPUTotalMonitor=uxsStatusCPUTotalMonitor, uxsStatusMemStatus=uxsStatusMemStatus, uxsStatusSwapTotalMonitor=uxsStatusSwapTotalMonitor, uxsConfigFSysInodesDMonitor=uxsConfigFSysInodesDMonitor, uxsConfigProcPath=uxsConfigProcPath, uxsStatusNetName=uxsStatusNetName, uxsStatusCPUTotalStatus=uxsStatusCPUTotalStatus, uxsStatusNetCollValue=uxsStatusNetCollValue, uxsSwapWarning=uxsSwapWarning, uxsStatusFSysMountedMonitor=uxsStatusFSysMountedMonitor, caiUxOs=caiUxOs, uxsConfigPrnItemsWarn=uxsConfigPrnItemsWarn, uxsPollIPCSHMMonitor=uxsPollIPCSHMMonitor, uxsStatusProcSizeMax=uxsStatusProcSizeMax, uxsStatusCPULag=uxsStatusCPULag, uxsConfigGeneralMemPollTime=uxsConfigGeneralMemPollTime, uxsPollIPCSEMMaxNums=uxsPollIPCSEMMaxNums, uxsStatusCPUTotalName=uxsStatusCPUTotalName, uxsConfigNetOErrCrit=uxsConfigNetOErrCrit, uxsConfigFSysLossAction=uxsConfigFSysLossAction, uxsStatusNetCollWarn=uxsStatusNetCollWarn, uxsIPCSHMWarning=uxsIPCSHMWarning, uxsConfigProcGroup=uxsConfigProcGroup, uxsStatusFSysSpaceCrit=uxsStatusFSysSpaceCrit, uxsSwapOK=uxsSwapOK, uxsStatusProcSizeValue=uxsStatusProcSizeValue, uxsStatusSwapTotalLag=uxsStatusSwapTotalLag, uxsStatusFileTable=uxsStatusFileTable, uxsStatusIPCMQBytesAvailable=uxsStatusIPCMQBytesAvailable, uxsPollIPCSEMCount=uxsPollIPCSEMCount, uxsStatusFSysInodesWarnValue=uxsStatusFSysInodesWarnValue, uxsMemUnknown=uxsMemUnknown, uxsStatusPrnGroup=uxsStatusPrnGroup, uxsStatusGeneralPrnWarning=uxsStatusGeneralPrnWarning, uxsStatusNetTotalIPktCrit=uxsStatusNetTotalIPktCrit, uxsConfigFileSizeWarn=uxsConfigFileSizeWarn, uxsConfigProcChldMonitor=uxsConfigProcChldMonitor, uxsStatusPrnItemsStatus=uxsStatusPrnItemsStatus, uxsStatusDiskTPutMonitor=uxsStatusDiskTPutMonitor, uxsStatusFSysInodesTotal=uxsStatusFSysInodesTotal, uxsStatusCPUStatus=uxsStatusCPUStatus, uxsConfigGeneralGroup=uxsConfigGeneralGroup, uxsStatusCPULossAction=uxsStatusCPULossAction, uxsStatusPrnItemsValue=uxsStatusPrnItemsValue, uxsFilesDeleted=uxsFilesDeleted, uxsConfigFSysInodesWarn=uxsConfigFSysInodesWarn, uxsStatusProcInstMax=uxsStatusProcInstMax, uxsNetOK=uxsNetOK, uxsStatusProcEntry=uxsStatusProcEntry, uxsConfigNetIPktMonitor=uxsConfigNetIPktMonitor, uxsStatusDiskGroup=uxsStatusDiskGroup, uxsConfigDiskPollInterval=uxsConfigDiskPollInterval, uxsStatusFileSizeDCrit=uxsStatusFileSizeDCrit, uxsAvailDiskRefresh=uxsAvailDiskRefresh, uxsStatusCPUTotalWIO=uxsStatusCPUTotalWIO, uxsStatusCPUEntry=uxsStatusCPUEntry, uxsStatusGeneralProcWarning=uxsStatusGeneralProcWarning, uxsFilesUnknown=uxsFilesUnknown, uxsNetTotalCritical=uxsNetTotalCritical, uxsStatusFSysInodesStatus=uxsStatusFSysInodesStatus, uxsStatusLoad15MinWarn=uxsStatusLoad15MinWarn, uxsStatusPrnTable=uxsStatusPrnTable, uxsStatusIPCMQMonitor=uxsStatusIPCMQMonitor, uxsStatusSwapWarnValue=uxsStatusSwapWarnValue, uxsStatusNetIPktWarn=uxsStatusNetIPktWarn, uxsStatusFileModTimeValue=uxsStatusFileModTimeValue, uxsConfigProcChldMin=uxsConfigProcChldMin, uxsStatusLoad5MinCrit=uxsStatusLoad5MinCrit, uxsStatusNetEntry=uxsStatusNetEntry, uxsConfigNetIPktCrit=uxsConfigNetIPktCrit, uxsStatusGeneralMemCritical=uxsStatusGeneralMemCritical, uxsStatusNetTotalStatus=uxsStatusNetTotalStatus, uxsStatusIPCMQTable=uxsStatusIPCMQTable, uxsConfigProcCPUCrit=uxsConfigProcCPUCrit, uxsStatusCPUTotalUser=uxsStatusCPUTotalUser, uxsStatusGeneralPrnCount=uxsStatusGeneralPrnCount, uxsStatusSwapName=uxsStatusSwapName, uxsStatusIPCMQBytesCritValue=uxsStatusIPCMQBytesCritValue, uxsConfigProcArgsSig=uxsConfigProcArgsSig, uxsStatusNetIPktMonitor=uxsStatusNetIPktMonitor, uxsStatusCPUTotalWarn=uxsStatusCPUTotalWarn, uxsStatusIPCMQBytesMonitor=uxsStatusIPCMQBytesMonitor, uxsDiskCritical=uxsDiskCritical, uxsStatusFileSizeValue=uxsStatusFileSizeValue, uxsConfigPrnItemsMonitor=uxsConfigPrnItemsMonitor, uxsConfigProcPollMethod=uxsConfigProcPollMethod, uxsStatusPrnEntry=uxsStatusPrnEntry, uxsStatusIPCMQKey=uxsStatusIPCMQKey, uxsStatusIPCSHMIDSValue=uxsStatusIPCSHMIDSValue, uxsStatusNetTotalIPktWarn=uxsStatusNetTotalIPktWarn, uxsConfigFileGroup=uxsConfigFileGroup, uxsStatusPrnItemsWarn=uxsStatusPrnItemsWarn, uxsConfigSwapPollInterval=uxsConfigSwapPollInterval, uxsStatusFSysSpaceValue=uxsStatusFSysSpaceValue, uxsPollGroup=uxsPollGroup, uxsStatusFSysName=uxsStatusFSysName)
mibBuilder.exportSymbols("CAIUXOS", uxsStatusCPUTotalIdle=uxsStatusCPUTotalIdle, uxsStatusProcRemove=uxsStatusProcRemove, uxsStatusGeneralCPUCount=uxsStatusGeneralCPUCount, uxsPollNetOErrValue=uxsPollNetOErrValue, uxsStatusSwapMonitor=uxsStatusSwapMonitor, uxsStatusNetTotalIPktValue=uxsStatusNetTotalIPktValue, uxsConfigProcNameRemove=uxsConfigProcNameRemove, uxsStatusFSysSpaceDStatus=uxsStatusFSysSpaceDStatus, uxsStatusNetTotalIPktStatus=uxsStatusNetTotalIPktStatus, uxsStatusNetTotalIErrValue=uxsStatusNetTotalIErrValue, uxsStatusLoad5MinValue=uxsStatusLoad5MinValue, uxsLoad15Critical=uxsLoad15Critical, uxsFSysDown=uxsFSysDown, uxsNetDown=uxsNetDown, uxsStatusProcChldMax=uxsStatusProcChldMax, uxsConfigGeneralProcPollTime=uxsConfigGeneralProcPollTime, uxsStatusFSysInodesDValue=uxsStatusFSysInodesDValue, uxsLoad5OK=uxsLoad5OK, uxsStatusIPCMQIDSCrit=uxsStatusIPCMQIDSCrit, uxsStatusLoad15MinMonitor=uxsStatusLoad15MinMonitor, uxsStatusIPCMQIDSCritValue=uxsStatusIPCMQIDSCritValue, uxsStatusCPUCount=uxsStatusCPUCount, uxsConfigProcNameSig=uxsConfigProcNameSig, uxsConfigNetOPktCrit=uxsConfigNetOPktCrit, uxsPollNetIP=uxsPollNetIP, uxsStatusIPCMQBytesWarn=uxsStatusIPCMQBytesWarn, uxsConfigGeneralColdStartTime=uxsConfigGeneralColdStartTime, uxsFilesOK=uxsFilesOK, uxsConfigNetPollInterval=uxsConfigNetPollInterval, uxsStatusFSysMountedStatus=uxsStatusFSysMountedStatus, uxsConfigNetOPktWarn=uxsConfigNetOPktWarn, uxsConfigNetCollWarn=uxsConfigNetCollWarn, uxsStatusFileSizeCrit=uxsStatusFileSizeCrit, uxsStatusProcCPUMonitor=uxsStatusProcCPUMonitor, uxsProcOK=uxsProcOK, uxsPollNetTable=uxsPollNetTable, uxsConfigProcChldMax=uxsConfigProcChldMax, uxsPollIPCSHMGroup=uxsPollIPCSHMGroup, uxsConfigFSysSpaceDCrit=uxsConfigFSysSpaceDCrit, uxsStatusSwapLagValue=uxsStatusSwapLagValue, uxsStatusProcCPUValue=uxsStatusProcCPUValue, uxsConfigSwapMonitor=uxsConfigSwapMonitor, uxsStatusSwapTotalWarn=uxsStatusSwapTotalWarn, uxsProcDeleted=uxsProcDeleted, uxsStatusProcGroup=uxsStatusProcGroup, uxsConfigProcInstMonitor=uxsConfigProcInstMonitor, uxsStatusFileSizeDValue=uxsStatusFileSizeDValue, uxsConfigPrnPollInterval=uxsConfigPrnPollInterval, uxsConfigSysHardware=uxsConfigSysHardware, uxsStatusSwapTotalLagValue=uxsStatusSwapTotalLagValue, uxsStatusFSysSpaceDMonitor=uxsStatusFSysSpaceDMonitor, uxsStatusCPUTable=uxsStatusCPUTable, uxsStatusFileSizeWarn=uxsStatusFileSizeWarn, uxsPollIPCSEMMode=uxsPollIPCSEMMode, uxsConfigFileNameAdd=uxsConfigFileNameAdd, uxsStatusCPUName=uxsStatusCPUName, uxsConfigNetCollCrit=uxsConfigNetCollCrit, uxsStatusNetTotalCollValue=uxsStatusNetTotalCollValue, uxsStatusDiskLossAction=uxsStatusDiskLossAction, uxsStatusIPCMQCount=uxsStatusIPCMQCount, uxsStatusFileRemove=uxsStatusFileRemove, uxsCPUTotalWarning=uxsCPUTotalWarning, uxsPollNetOPktValue=uxsPollNetOPktValue, uxsStatusNetTotalOErrCrit=uxsStatusNetTotalOErrCrit, uxsIPCMQSOK=uxsIPCMQSOK, uxsIPCSHMCritical=uxsIPCSHMCritical, uxsNetCritical=uxsNetCritical, uxsStatusNetCollCrit=uxsStatusNetCollCrit, uxsConfigSwapPollMethod=uxsConfigSwapPollMethod, uxsStatusPrnItemsMonitor=uxsStatusPrnItemsMonitor, uxsConfigFSysInodesCrit=uxsConfigFSysInodesCrit, uxsStatusGeneralLoadCritical=uxsStatusGeneralLoadCritical, uxsStatusFSysTable=uxsStatusFSysTable, uxsStatusNetTotalOErrWarn=uxsStatusNetTotalOErrWarn, uxsStatusGroup=uxsStatusGroup, uxsStatusCPUSys=uxsStatusCPUSys, uxsStatusDiskTPutStatus=uxsStatusDiskTPutStatus, uxsProcCritical=uxsProcCritical, uxsStatusSwapTotalAvailable=uxsStatusSwapTotalAvailable, uxsStatusSwapLossAction=uxsStatusSwapLossAction, uxsConfigProcArgs=uxsConfigProcArgs, uxsStatusProcPath=uxsStatusProcPath, uxsConfigNetIPktWarn=uxsConfigNetIPktWarn, uxsStatusFileSizeStatus=uxsStatusFileSizeStatus, uxsPrnDown=uxsPrnDown, uxsConfigIPCGroup=uxsConfigIPCGroup, uxsConfigSysGroup=uxsConfigSysGroup, uxsSwapAdded=uxsSwapAdded, uxsStatusGeneralIPCCritical=uxsStatusGeneralIPCCritical, uxsStatusLoad1MinMonitor=uxsStatusLoad1MinMonitor, uxsIPCMQOK=uxsIPCMQOK, uxsStatusFileModTimeMonitor=uxsStatusFileModTimeMonitor, uxsStatusLoad15MinStatus=uxsStatusLoad15MinStatus, uxsStatusGeneralSwapWarning=uxsStatusGeneralSwapWarning, uxsStatusNetTotalCollCrit=uxsStatusNetTotalCollCrit, uxsIPCMQSDown=uxsIPCMQSDown, uxsStatusNetTable=uxsStatusNetTable, uxsStatusSwapTotalUsedValue=uxsStatusSwapTotalUsedValue, uxsStatusNetIErrValue=uxsStatusNetIErrValue, uxsStatusNetOPktWarn=uxsStatusNetOPktWarn, uxsStatusNetOErrWarn=uxsStatusNetOErrWarn, uxsPollIPCSEMMonitor=uxsPollIPCSEMMonitor, uxsStatusNetTotalOPktWarn=uxsStatusNetTotalOPktWarn, uxsStatusSwapStatus=uxsStatusSwapStatus, uxsLoad1Unknown=uxsLoad1Unknown, uxsStatusCPUTotalSys=uxsStatusCPUTotalSys, uxsConfigCPUGroup=uxsConfigCPUGroup, uxsStatusSwapTotalWarnValue=uxsStatusSwapTotalWarnValue, uxsMemCritical=uxsMemCritical, uxsStatusFSysInodesCritValue=uxsStatusFSysInodesCritValue, uxsMemWarning=uxsMemWarning, uxsStatusFileDesc=uxsStatusFileDesc, uxsStatusIPCMQGroup=uxsStatusIPCMQGroup, uxsConfigFSysInodesDWarn=uxsConfigFSysInodesDWarn, uxsConfigProcPollInterval=uxsConfigProcPollInterval, uxsDiskAdded=uxsDiskAdded, uxsDiskUnknown=uxsDiskUnknown, uxsConfigFSysSpaceDMonitor=uxsConfigFSysSpaceDMonitor, uxsMemOK=uxsMemOK, uxsConfigGeneralSwapPollTime=uxsConfigGeneralSwapPollTime, uxsStatusFSysRemove=uxsStatusFSysRemove, uxsStatusFileCount=uxsStatusFileCount, uxsConfigIPCMQBytesCrit=uxsConfigIPCMQBytesCrit, uxsStatusProcCount=uxsStatusProcCount, uxsConfigCPUCrit=uxsConfigCPUCrit, uxsConfigSysRunLevel=uxsConfigSysRunLevel, uxsConfigNetCollMonitor=uxsConfigNetCollMonitor, uxsStatusMemWarn=uxsStatusMemWarn, uxsStatusFSysSpaceDWarn=uxsStatusFSysSpaceDWarn, uxsCPUWarning=uxsCPUWarning, uxsLoad5Unknown=uxsLoad5Unknown, uxsPollIPCSEMTable=uxsPollIPCSEMTable, uxsConfigSwapWarn=uxsConfigSwapWarn, uxsStatusGeneralLoadWarning=uxsStatusGeneralLoadWarning, uxsNetDeleted=uxsNetDeleted, uxsStatusFSysSpaceDValue=uxsStatusFSysSpaceDValue, uxsConfigNetLossAction=uxsConfigNetLossAction, uxsConfigSysNodeName=uxsConfigSysNodeName, uxsStatusLoad1MinCrit=uxsStatusLoad1MinCrit, uxsConfigGeneralNetPollTime=uxsConfigGeneralNetPollTime, uxsStatusIPCMQIDSWarn=uxsStatusIPCMQIDSWarn, uxsNetTotalWarning=uxsNetTotalWarning, uxsPollIPCSHMCount=uxsPollIPCSHMCount, uxsStatusProcInstMonitor=uxsStatusProcInstMonitor, uxsStatusNetIPktValue=uxsStatusNetIPktValue, uxsStatusGeneralSwapCount=uxsStatusGeneralSwapCount, uxsStatusIPCSHMIDSStatus=uxsStatusIPCSHMIDSStatus, uxsStatusProcArgs=uxsStatusProcArgs, uxsStatusNetTotalCollMonitor=uxsStatusNetTotalCollMonitor, uxsStatusFileStatus=uxsStatusFileStatus, uxsConfigProcInstMax=uxsConfigProcInstMax, uxsStatusLoad15MinCrit=uxsStatusLoad15MinCrit, uxsFSysCritical=uxsFSysCritical, uxsStatusNetLossStatus=uxsStatusNetLossStatus, uxsLoad1Warning=uxsLoad1Warning, uxsStatusFSysSpaceDCrit=uxsStatusFSysSpaceDCrit, uxsAvailPrnRefresh=uxsAvailPrnRefresh, uxsStatusProcCPUWarn=uxsStatusProcCPUWarn, uxsStatusCPUTotalCrit=uxsStatusCPUTotalCrit)
