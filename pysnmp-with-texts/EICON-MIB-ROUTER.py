#
# PySNMP MIB module EICON-MIB-ROUTER (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EICON-MIB-ROUTER
# Produced by pysmi-0.3.4 at Wed May  1 12:59:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, ModuleIdentity, NotificationType, enterprises, NotificationType, Counter64, IpAddress, ObjectIdentity, Unsigned32, Counter32, MibIdentifier, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "ModuleIdentity", "NotificationType", "enterprises", "NotificationType", "Counter64", "IpAddress", "ObjectIdentity", "Unsigned32", "Counter32", "MibIdentifier", "iso", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
eicon = MibIdentifier((1, 3, 6, 1, 4, 1, 434))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2))
mibv2 = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4))
router = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 8))
class OperState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("disabled", 2), ("ready", 3), ("active", 4), ("busy", 5))

class AdminState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("start", 1), ("stop", 2), ("dump", 3), ("test", 4), ("invalid", 5))

class ActionState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("done", 1), ("failed", 2), ("in-progress", 3))

class EntryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

class EntryStatusV2(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4), ("modifyRequest", 5), ("underModification", 6))

class ConnectionStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("invalid", 1), ("listening", 2), ("calling", 3), ("connected", 4), ("hangingup", 5), ("hungup", 6), ("pending-hungup", 7))

class ControlOnOff(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("stop", 1), ("start", 2), ("invalid", 3))

class CardRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 6)

class PortRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 48)

class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

rtName = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtName.setStatus('mandatory')
if mibBuilder.loadTexts: rtName.setDescription('The name advertised by the router agent using SAP.')
rtProductName = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtProductName.setStatus('mandatory')
if mibBuilder.loadTexts: rtProductName.setDescription('The Product name ie. Router for Netware.')
rtReleaseVersion = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtReleaseVersion.setStatus('mandatory')
if mibBuilder.loadTexts: rtReleaseVersion.setDescription('Ex.: Ver. 3 Rel. 2.')
rtReleaseDate = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtReleaseDate.setStatus('mandatory')
if mibBuilder.loadTexts: rtReleaseDate.setDescription('Format: 1993/03/25.')
rtOperState = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 5), OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtOperState.setStatus('mandatory')
if mibBuilder.loadTexts: rtOperState.setDescription('The operational state of the router.')
rtAdminStateCtr = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 6), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtAdminStateCtr.setStatus('mandatory')
if mibBuilder.loadTexts: rtAdminStateCtr.setDescription('The administrative state of the router. Management station will change this value to start or stop the router.')
rtType = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("typeNetWareRouter", 1), ("typeOS2Router", 2), ("typeUnixRouter", 3), ("typeNTRouter", 4), ("typeSynOpticsRouter", 5), ("typeMadrasRouter", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtType.setStatus('mandatory')
if mibBuilder.loadTexts: rtType.setDescription('Type of router.')
rtTimeUp = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtTimeUp.setStatus('mandatory')
if mibBuilder.loadTexts: rtTimeUp.setDescription('The time elapsed since the router was started.')
rtNumberOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtNumberOfPorts.setStatus('mandatory')
if mibBuilder.loadTexts: rtNumberOfPorts.setDescription('The number of Eicon ports currently used by the router.')
rtMaxCircuits = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtMaxCircuits.setStatus('mandatory')
if mibBuilder.loadTexts: rtMaxCircuits.setDescription('The maximum number of connections that can be configured for this router.')
rtAvailableCircuits = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtAvailableCircuits.setStatus('mandatory')
if mibBuilder.loadTexts: rtAvailableCircuits.setDescription('The number of connections still available for this router.')
rtAvailableLANMapping = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtAvailableLANMapping.setStatus('mandatory')
if mibBuilder.loadTexts: rtAvailableLANMapping.setDescription('The available number of LAN protocol mappings for all connections.')
rtMaxLANMapping = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtMaxLANMapping.setStatus('mandatory')
if mibBuilder.loadTexts: rtMaxLANMapping.setDescription('The maximum number of LAN protocol mappings for all connections.')
rtGlobalTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalTxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rtGlobalTxPackets.setDescription('The number of packets transmitted by the router on all ports')
rtGlobalTxBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalTxBytesLow.setStatus('mandatory')
if mibBuilder.loadTexts: rtGlobalTxBytesLow.setDescription('The number of bytes transmitted by the router on all ports - the low 32 bits of the 64 bits counter.')
rtGlobalTxBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalTxBytesHigh.setStatus('mandatory')
if mibBuilder.loadTexts: rtGlobalTxBytesHigh.setDescription('The number of bytes transmitted by the router on all ports - the high 32 bits of the 64 bits counter.')
rtGlobalRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalRxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rtGlobalRxPackets.setDescription('The number of packets received by the router on all ports')
rtGlobalRxBytesLow = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalRxBytesLow.setStatus('mandatory')
if mibBuilder.loadTexts: rtGlobalRxBytesLow.setDescription('The number of bytes received by the router on all ports - the low 32 bits of the 64 bits counter.')
rtGlobalRxBytesHigh = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalRxBytesHigh.setStatus('mandatory')
if mibBuilder.loadTexts: rtGlobalRxBytesHigh.setDescription('The number of bytes received by the router on all ports - the high 32 bits of the 64 bits counter.')
rtGlobalTxDropNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalTxDropNoRoute.setStatus('mandatory')
if mibBuilder.loadTexts: rtGlobalTxDropNoRoute.setDescription('The number of transmit packets dropped on all ports because no route was found.')
rtGlobalTxDropNoResource = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalTxDropNoResource.setStatus('mandatory')
if mibBuilder.loadTexts: rtGlobalTxDropNoResource.setDescription('The number of transmit packets dropped on all ports because resources were exhausted.')
rtGlobalTxDropUnknownProt = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalTxDropUnknownProt.setStatus('mandatory')
if mibBuilder.loadTexts: rtGlobalTxDropUnknownProt.setDescription('The number of transmit packets dropped because the WAN protocol is not supported.')
rtGlobalRxDropNoResource = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalRxDropNoResource.setStatus('mandatory')
if mibBuilder.loadTexts: rtGlobalRxDropNoResource.setDescription('The number of received packets dropped on all ports because resources were exhausted.')
rtGlobalRxDropUnknownProt = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalRxDropUnknownProt.setStatus('mandatory')
if mibBuilder.loadTexts: rtGlobalRxDropUnknownProt.setDescription('The number of received packets dropped because a LAN protocol is not supported.')
rtGlobalRxError = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtGlobalRxError.setStatus('mandatory')
if mibBuilder.loadTexts: rtGlobalRxError.setDescription('The number of errors encountered when receiving from the EiconCard(s).')
rtGlobalCountersReset = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 26), ControlOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtGlobalCountersReset.setStatus('mandatory')
if mibBuilder.loadTexts: rtGlobalCountersReset.setDescription('This variable is used to reset all router global counters.')
rtTraceCtrl = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 27), ControlOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtTraceCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: rtTraceCtrl.setDescription('This object is used to start or stop the trace with the parameters specified by the following trace objects.')
rtTraceFileName = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtTraceFileName.setStatus('mandatory')
if mibBuilder.loadTexts: rtTraceFileName.setDescription('The (fully qualified) file name for the file which will hold the trace.')
rtTraceInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtTraceInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: rtTraceInterfaceType.setDescription('The mask which indicates to the Agent the interface type(s) to be traced. The trace value for the lower layer is (1) and for the upper layer is (2).')
rtPortTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30), )
if mibBuilder.loadTexts: rtPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: rtPortTable.setDescription('The router port table.')
rtPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1), ).setIndexNames((0, "EICON-MIB-ROUTER", "rtPortIndex"))
if mibBuilder.loadTexts: rtPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rtPortEntry.setDescription('The router information for one port.')
rtPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rtPortIndex.setDescription('Index of this table')
rtPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rtPortNumber.setDescription('EiconCard port number.')
rtPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: rtPortProtocol.setDescription('Mask indicating the choice of WAN protocols: x25 (1), fr (2), ppp (4), sna (8), hdlc (16).')
rtPortTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: rtPortTxThroughput.setDescription('Throughput calculated for the transmision.')
rtPortRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: rtPortRxThroughput.setDescription('Throughput calculated for the reception.')
rtPortTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortTxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rtPortTxPackets.setDescription('Number of packets transmitted for this port.')
rtPortTxBytesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortTxBytesLow.setStatus('mandatory')
if mibBuilder.loadTexts: rtPortTxBytesLow.setDescription('Number of bytes transmitted for this port; the low 32 bits of the 64 bits counter.')
rtPortTxBytesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortTxBytesHigh.setStatus('mandatory')
if mibBuilder.loadTexts: rtPortTxBytesHigh.setDescription('Number of bytes transmitted for this port; the high 32 bits of the 64 bits counter.')
rtPortRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortRxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rtPortRxPackets.setDescription('Number of packets received for this port.')
rtPortRxBytesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortRxBytesLow.setStatus('mandatory')
if mibBuilder.loadTexts: rtPortRxBytesLow.setDescription('Number of bytes received for this port; the low 32 bits of the 64 bits counter.')
rtPortRxBytesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortRxBytesHigh.setStatus('mandatory')
if mibBuilder.loadTexts: rtPortRxBytesHigh.setDescription('Number of bytes received for this port; the high 32 bits of the 64 bits counter.')
rtPortTxDropNoResource = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortTxDropNoResource.setStatus('mandatory')
if mibBuilder.loadTexts: rtPortTxDropNoResource.setDescription('Number of transmit packets dropped because no resources were available.')
rtPortRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtPortRxError.setStatus('mandatory')
if mibBuilder.loadTexts: rtPortRxError.setDescription('Number of packets received with an EiconCard error.')
rtPortCountersReset = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 30, 1, 14), ControlOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtPortCountersReset.setStatus('mandatory')
if mibBuilder.loadTexts: rtPortCountersReset.setDescription('This object is used to reset the values of all counters for this port.')
rtConnFreeIndex = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtConnFreeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnFreeIndex.setDescription('The index value used by the Management station to create the row in the rtConnTable. This value will be used to identify new instance of rtConnEntryStatus object when the Management station attempts to write its value to createRequest (2). If the Agent accepts this value it will change it to underCreation (3). After that, the Management station has a limited time to create all remaining objects in the rtConnEntry and change rtConnEntryStatus to valid (1) or abandon and change rtConnEntryStatus to invalid (4). The entries with the invalid (4) state can be deleted from the table by the Agent.')
rtConnTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32), )
if mibBuilder.loadTexts: rtConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnTable.setDescription('The table of WAN connections to peer routers.')
rtConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1), ).setIndexNames((0, "EICON-MIB-ROUTER", "rtConnIndex"))
if mibBuilder.loadTexts: rtConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnEntry.setDescription('The routing information for one destination.')
rtConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtConnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnIndex.setDescription('The index used to identify the connection entry.')
rtConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnName.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnName.setDescription('The name used to identify the connection entry.')
rtConnComment = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnComment.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnComment.setDescription('Optional comment about the connection entry.')
rtConnEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 4), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnEntryStatus.setDescription('The object used to reserve the connection entry during the row creation. It also indicates if the entry is valid or not.')
rtConnOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 5), OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtConnOperState.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnOperState.setDescription('The object describing the state of the connection.')
rtConnAdminStateCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 6), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnAdminStateCtr.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnAdminStateCtr.setDescription('The object used to start and stop the circuit for this connection entry.')
rtConnAutoStart = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("startYes", 1), ("startNo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnAutoStart.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnAutoStart.setDescription('The object used to indicate if the connnection should be activated every time the router starts. Yes is the default.')
rtConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("typeIn", 1), ("typeOut", 2), ("typeTwoWay", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnType.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnType.setDescription('The type of connection.')
rtConnInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnInactivityTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnInactivityTimeout.setDescription('The connection inactivity timeout in seconds.')
rtConnPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 10), PortRef()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnPortNumber.setDescription('The EiconCard port number for this connection.')
rtConnCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("comprNo", 1), ("comprStac", 2), ("comprOther", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnCompression.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnCompression.setDescription('The object indicating the type of compression to use, if any.')
rtConnRetryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnRetryNum.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnRetryNum.setDescription('The connection retry count; value (0) indicates no retry, value (100) indicates infinite retry, value (5) is the default.')
rtConnRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnRetryDelay.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnRetryDelay.setDescription('The connection retry delay in seconds.')
rtConnPeerRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("peerNetWareV2", 1), ("peerNetWareNLM", 2), ("peerUniversal", 3), ("peerCISCO", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnPeerRouter.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnPeerRouter.setDescription('The type of the peer router for this connection.')
rtConnLanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnLanProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnLanProtocol.setDescription('The mask used to indicate the type of LAN protocols used for this connection. IPX =1, IP=2, AT=4.')
rtConnWanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("connX25Svc", 1), ("connX25Pvc", 2), ("connFr", 3), ("connPpp", 4), ("connSna", 5), ("connHdlc", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnWanProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnWanProtocol.setDescription('The object indicates which WAN protocol will be used for this connection.')
rtConnX25LocalDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnX25LocalDTE.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnX25LocalDTE.setDescription('The X25 Local DTE Address configured for this connection.')
rtConnX25RemoteDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnX25RemoteDTE.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnX25RemoteDTE.setDescription('The X25 Remote DTE Address configured for this connection.')
rtConnX25CallingFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnX25CallingFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnX25CallingFacilities.setDescription('The X25 Calling Facilities configured for this connection.')
rtConnX25ListeningFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 218))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnX25ListeningFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnX25ListeningFacilities.setDescription('The X25 Listening Facilities configured for this connection.')
rtConnX25UserData = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnX25UserData.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnX25UserData.setDescription('The X25 User Data configured for this connection.')
rtConnX25Pvc = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnX25Pvc.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnX25Pvc.setDescription('The X25 PVC configured for this connection.')
rtConnFrDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnFrDlci.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnFrDlci.setDescription('The Frame Relay DLCI configured for this connection.')
rtConnSnaPuName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaPuName.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnSnaPuName.setDescription('Physical Unit Name.')
rtConnSnaLocalFqName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaLocalFqName.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnSnaLocalFqName.setDescription('Local fully qualified name.')
rtConnSnaRemoteFqName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaRemoteFqName.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnSnaRemoteFqName.setDescription('Remote fully qualified name.')
rtConnSnaModeName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaModeName.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnSnaModeName.setDescription('Mode name.')
rtConnSnaSendPaceWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaSendPaceWindow.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnSnaSendPaceWindow.setDescription('Send Pace Window.')
rtConnSnaReceivePaceWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaReceivePaceWindow.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnSnaReceivePaceWindow.setDescription('Receive Pace Window.')
rtConnSnaRuSendLow = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(133, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaRuSendLow.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnSnaRuSendLow.setDescription('Request Unit send low.')
rtConnSnaRuReceiveLow = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(133, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaRuReceiveLow.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnSnaRuReceiveLow.setDescription('Request Unit receive low.')
rtConnSnaRuSendHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(133, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaRuSendHigh.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnSnaRuSendHigh.setDescription('Request Unit send high.')
rtConnSnaRuReceiveHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(133, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSnaRuReceiveHigh.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnSnaRuReceiveHigh.setDescription('Request unit receive high.')
rtConnUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uSagePrimary", 1), ("uSageBackup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnUsage.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnUsage.setDescription('The connection can be defined as a primary or a backup connection for a primary.')
rtConnFrSegmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("inProgress", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnFrSegmentation.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnFrSegmentation.setDescription('The object used to indicate if the Frame Relay segmentation (RFC1490) can be used on this connection.')
rtConnFrXid = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("inProgress", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnFrXid.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnFrXid.setDescription('The object used to indicate if the Frame-relay XID (RFC1490) can be used on this connection')
rtConnPrimOrBackName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnPrimOrBackName.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnPrimOrBackName.setDescription('This parameter applies only if the rtConnFunction field=FuncPrimary. This is the name used to identify primary connection entry.')
rtConnRipSapUpdateType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("onchange", 2), ("periodic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnRipSapUpdateType.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnRipSapUpdateType.setDescription('The update type of RIP / SAP.')
rtConnSAPDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnSAPDelay.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnSAPDelay.setDescription('The delay in minutes between the SAP updates on this WAN connection.')
rtConnRIPDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 32, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtConnRIPDelay.setStatus('mandatory')
if mibBuilder.loadTexts: rtConnRIPDelay.setDescription('The delay in minutes between the RIP updates on this WAN connection.')
rtIPMapFreeIndex = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPMapFreeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPMapFreeIndex.setDescription('The index value used by the Management station to create the row in the rtIPMappingTable. This value will be used to identify new instance of rtIPMapEntryStatus object when the Management station attempts to write its value to createRequest (2). If the Agent accepts this value it will change it to underCreation (3). After that, the Management station has a limited time to create all remaining objects in the rtIPMappingEntry and change rtIPMapEntryStatus to valid (1) or abandon and change rtIPMapEntryStatus to invalid (4). The entries with the invalid (4) state can be deleted from the table by the Agent.')
rtIPMappingTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34), )
if mibBuilder.loadTexts: rtIPMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPMappingTable.setDescription('The IP mapping table.')
rtIPMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34, 1), ).setIndexNames((0, "EICON-MIB-ROUTER", "rtIPMapConnIndex"), (0, "EICON-MIB-ROUTER", "rtIPMapIndex"))
if mibBuilder.loadTexts: rtIPMappingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPMappingEntry.setDescription('One mapping information entry.')
rtIPMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPMapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPMapIndex.setDescription('The index used to identify the mapping entry. It is possible to have multiple LAN mapping entries for one connection.')
rtIPMapConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPMapConnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPMapConnIndex.setDescription('Indicates the connection which uses this mapping. It is equal to one of the rtConnIndex values from the rtConnTable.')
rtIPMapEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34, 1, 3), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPMapEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPMapEntryStatus.setDescription('The object used to reserve the mapping entry during the row creation. It also indicates if the entry is valid or not.')
rtIPMapNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPMapNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPMapNextHop.setDescription('The address of the next hop. It is indicated if the Management station knows the address and it can not be discovered by the router.')
rtIPMapBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("broadNo", 1), ("broadYes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPMapBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPMapBroadcast.setDescription("The object which indicates to the router if it may send broadcasts for this connection. 'Yes' is the default value.")
rtIPMapIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPMapIPMask.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPMapIPMask.setDescription('The IP address mask to be used for this mapping.')
rtIPMapVJCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 34, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vjNo", 1), ("vjYes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPMapVJCompress.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPMapVJCompress.setDescription('The object which indicates if the VanJacobsen compression is to be used for this mapping.')
rtCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35), )
if mibBuilder.loadTexts: rtCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitTable.setDescription('The router circuit table.')
rtCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1), ).setIndexNames((0, "EICON-MIB-ROUTER", "rtCircuitConnIndex"))
if mibBuilder.loadTexts: rtCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitEntry.setDescription('The circuit information for one WAN connection. An entry in this table will be created by the Agent when the circuit is opened for a specified connection.')
rtCircuitConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitConnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitConnIndex.setDescription('Indicates the connection which generated this circuit. It is equal to one of the rtConnIndex values from the rtConnTable.')
rtCircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("listening", 1), ("calling", 2), ("connected", 3), ("hangingup", 4), ("hungup", 5), ("aborted", 6), ("idle", 7), ("portdisconnected", 8), ("notbound", 9), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitStatus.setDescription('Indicates the circuit status.')
rtCircuitTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitTimeUp.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitTimeUp.setDescription('Time elapsed since this circuit was started.')
rtCircuitErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitErrCode.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitErrCode.setDescription('Last error code returned from the EiconCard.')
rtCircuitSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitSessionType.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitSessionType.setDescription('Type of circuit session.')
rtCircuitConnLSN = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitConnLSN.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitConnLSN.setDescription('Connection Manager LSN used for management.')
rtCircuitDataLSN = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitDataLSN.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitDataLSN.setDescription('Connection Manager LSN used for data.')
rtCircuitCmSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitCmSelector.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitCmSelector.setDescription('Handle returned by Connection Manager for this circuit.')
rtCircuitCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitCompression.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitCompression.setDescription('Compression on/off, after negotiation.')
rtCircuitCompAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitCompAlgorithm.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitCompAlgorithm.setDescription('Compression type, after negotiation.')
rtCircuitBeforeComp = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitBeforeComp.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitBeforeComp.setDescription('Number of bytes sent before compression.')
rtCircuitAfterComp = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitAfterComp.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitAfterComp.setDescription('Number of bytes sent after compression.')
rtCircuitTxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitTxErr.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitTxErr.setDescription('The number of Transmit errors')
rtCircuitBoundLANProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitBoundLANProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitBoundLANProtocol.setDescription('The mask used to indicate the type of LAN protocols used for this connection. Possible values are: IPX=1, IP=2, AT=4.')
rtCircuitRemoteRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitRemoteRouter.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitRemoteRouter.setDescription('The name of the remote router discovered by the local router.')
rtCircuitCountersReset = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 16), ControlOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtCircuitCountersReset.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitCountersReset.setDescription('The object is used to reset all counters for this circuit.')
rtCircuitWanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("connX25Svc", 1), ("connX25Pvc", 2), ("connFr", 3), ("connPpp", 4), ("connSna", 5), ("connHdlc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitWanProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitWanProtocol.setDescription('The object indicates which WAN protocol will be used for this connection.')
rtCircuitX25LocalDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitX25LocalDTE.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitX25LocalDTE.setDescription('The X25 Local DTE Address for this circuit')
rtCircuitX25RemoteDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitX25RemoteDTE.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitX25RemoteDTE.setDescription('The X25 Remote DTE Address for this circuit')
rtCircuitX25CallingFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 218))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitX25CallingFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitX25CallingFacilities.setDescription('The X25 Calling Facilities for this circuit')
rtCircuitX25ListeningFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 218))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitX25ListeningFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitX25ListeningFacilities.setDescription('The X25 Listening Facilities for this circuit')
rtCircuitX25UserData = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitX25UserData.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitX25UserData.setDescription('The X25 User Data for this circuit')
rtCircuitX25Cause = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitX25Cause.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitX25Cause.setDescription('The Cause of Circuit connection failure')
rtCircuitX25Diag = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitX25Diag.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitX25Diag.setDescription('Diagnostics code of the Circuit connection failure.')
rtCircuitX25Pvc = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitX25Pvc.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitX25Pvc.setDescription('The X25 PVC for this circuit.')
rtCircuitFrDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitFrDlci.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitFrDlci.setDescription('The Frame Relay DLCI for this circuit.')
rtCircuitFrSegmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("inProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitFrSegmentation.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitFrSegmentation.setDescription('The object used to indicate if the Frame Relay segmentation (RFC1490) can be used on this circuit.')
rtCircuitFrXIDNegot = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("inProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitFrXIDNegot.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitFrXIDNegot.setDescription('The object used to indicate if the Frame Relay XID (RFC1490) can be used on this circuit.')
rtCircuitFrXIDPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitFrXIDPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitFrXIDPacketSize.setDescription('The size of the Frame Relay XID packet.')
rtCircuitFrCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 35, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noCongestion", 1), ("congested", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitFrCongestion.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitFrCongestion.setDescription('The object indicates if Frame Relay can be congested on this circuit.')
rtCircuitIPTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36), )
if mibBuilder.loadTexts: rtCircuitIPTable.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPTable.setDescription('The router IP info table.')
rtCircuitIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36, 1), ).setIndexNames((0, "EICON-MIB-ROUTER", "rtCircuitIPConnIndex"))
if mibBuilder.loadTexts: rtCircuitIPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPEntry.setDescription('The circuit information specific to IP.')
rtCircuitIPConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPConnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPConnIndex.setDescription('Indicates the connection which generated this circuit. It is equal to one of the rtConnIndex values from the rtConnTable.')
rtCircuitIPRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPRemoteAddress.setDescription('Remote router IP address.')
rtCircuitIPLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPLocalAddress.setDescription('Local router IP address.')
rtCircuitIPTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPTxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPTxPackets.setDescription('Number of transmit packets which carry IP.')
rtCircuitIPTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPTxBytes.setDescription('Number of transmit bytes which carry IP.')
rtCircuitIPRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPRxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPRxPackets.setDescription('Number of received packets which carry IP.')
rtCircuitIPRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 36, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPRxBytes.setDescription('Number of received bytes which carry IP.')
rtCircuitIPXTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37), )
if mibBuilder.loadTexts: rtCircuitIPXTable.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPXTable.setDescription('The router IPX info table.')
rtCircuitIPXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1), ).setIndexNames((0, "EICON-MIB-ROUTER", "rtCircuitIPXConnIndex"))
if mibBuilder.loadTexts: rtCircuitIPXEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPXEntry.setDescription('The circuit information.')
rtCircuitIPXConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXConnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPXConnIndex.setDescription('Indicates the connection which generated this circuit.It is equal to one of the rtConnIndex values from the rtConnTable.')
rtCircuitIPXRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXRemoteNode.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPXRemoteNode.setDescription('Remote router node address.')
rtCircuitIPXRemoteNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXRemoteNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPXRemoteNetwork.setDescription('Remote router network address.')
rtCircuitIPXLocalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXLocalNode.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPXLocalNode.setDescription('Local router node address.')
rtCircuitIPXLocalNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXLocalNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPXLocalNetwork.setDescription('Local router network address.')
rtCircuitIPXTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXTxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPXTxPackets.setDescription('Number of transmit packets which carry IPX.')
rtCircuitIPXTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPXTxBytes.setDescription('Number of transmit bytes which carry IPX.')
rtCircuitIPXRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXRxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPXRxPackets.setDescription('Number of received packets which carry IPX.')
rtCircuitIPXRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 37, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitIPXRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitIPXRxBytes.setDescription('Number of received bytes which carry IPX.')
rtCircuitATTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38), )
if mibBuilder.loadTexts: rtCircuitATTable.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitATTable.setDescription('The router AT info table.')
rtCircuitATEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1), ).setIndexNames((0, "EICON-MIB-ROUTER", "rtCircuitATConnIndex"))
if mibBuilder.loadTexts: rtCircuitATEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitATEntry.setDescription('The AT circuit information.')
rtCircuitATConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATConnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitATConnIndex.setDescription('Indicates the connection which generated this circuit.It is equal to one of the rtConnIndex values from the rtConnTable.')
rtCircuitATRemoteNet = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATRemoteNet.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitATRemoteNet.setDescription('Remote router network address.')
rtCircuitATRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATRemoteNode.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitATRemoteNode.setDescription('Remote router node address.')
rtCircuitATLocalNet = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATLocalNet.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitATLocalNet.setDescription('Local router network address.')
rtCircuitATLocalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATLocalNode.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitATLocalNode.setDescription('Local router node address.')
rtCircuitATTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATTxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitATTxPackets.setDescription('Number of transmit packets which carry AT.')
rtCircuitATTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitATTxBytes.setDescription('Number of transmit bytes which carry AT.')
rtCircuitATRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATRxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitATRxPackets.setDescription('Number of received packets which carry AT.')
rtCircuitATRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 38, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtCircuitATRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: rtCircuitATRxBytes.setDescription('Number of received bytes which carry AT.')
rtMaxIPFilter = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtMaxIPFilter.setStatus('mandatory')
if mibBuilder.loadTexts: rtMaxIPFilter.setDescription('The maximum number of IP Filters that can be configured for this router.')
rtAvailableIPFilter = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtAvailableIPFilter.setStatus('mandatory')
if mibBuilder.loadTexts: rtAvailableIPFilter.setDescription('The number of IP Filters still available for this router.')
rtIPFilterDropStatsIn = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterDropStatsIn.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterDropStatsIn.setDescription('Total number of incoming packets dropped.')
rtIPFilterDropStatsOut = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterDropStatsOut.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterDropStatsOut.setDescription('Total number of outgoing packets dropped.')
rtIPFilterForwardStatsIn = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterForwardStatsIn.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterForwardStatsIn.setDescription('Total number of incoming packets forwarded.')
rtIPFilterForwardStatsOut = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterForwardStatsOut.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterForwardStatsOut.setDescription('Total number of outgoing packets forwarded.')
rtIPFilterFreeIndex = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterFreeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterFreeIndex.setDescription('This number indicating to the Manager the next available rtIPFilterIndex for a new Entry in the rtIPFilterTable (0 for none). The Manager will first get this value from the Agent and then use it to attempt to create an entry with that index value for any connection.')
rtIPFilterTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46), )
if mibBuilder.loadTexts: rtIPFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterTable.setDescription('The IP Filter table.')
rtIPFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1), ).setIndexNames((0, "EICON-MIB-ROUTER", "rtIPFilterConnIndex"), (0, "EICON-MIB-ROUTER", "rtIPFilterIndex"))
if mibBuilder.loadTexts: rtIPFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterEntry.setDescription('Information on an IP Filter.')
rtIPFilterConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterConnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterConnIndex.setDescription('Same as rtConnIndex.')
rtIPFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterIndex.setDescription('Index of IP Filter for the connection.')
rtIPFilterEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 3), EntryStatusV2()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterEntryStatus.setDescription('The object used to reserve the connection entry during the row creation. It also indicates if the entry is valid or not.')
rtIPFilterOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 4), OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterOperState.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterOperState.setDescription('The object indicates the state of the IP Filter.')
rtIPFilterAdminStateCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterAdminStateCtr.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterAdminStateCtr.setDescription('The object used to start and stop the IP Filter.')
rtIPFilterPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterPosition.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterPosition.setDescription('This variable indicates the order that the router should apply each filter. This field can be set only when adding a new IP Filter for a connection. The manager should use a valid rtIPFilterIndex to set this variable. The new filter will be inserted after the corresponding filter. To insert the filter at the beginning for the connection, set the variable to 0.')
rtIPFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterAction.setDescription('Drop (1) or Forward (2) the information.')
rtIPFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterDirection.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterDirection.setDescription('Specifies if the filter is applied to outgoing, incoming or both ways packets.')
rtIPFilterPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterPortType.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterPortType.setDescription('Protocol type.')
rtIPFilterLowSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterLowSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterLowSrcPort.setDescription('Low Source Port.')
rtIPFilterHighSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterHighSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterHighSrcPort.setDescription('High Source Port.')
rtIPFilterLowDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterLowDestPort.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterLowDestPort.setDescription('Low Destination Port.')
rtIPFilterHighDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterHighDestPort.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterHighDestPort.setDescription('High Destination Port.')
rtIPFilterIPAddressSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterIPAddressSrc.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterIPAddressSrc.setDescription('Source IP Address.')
rtIPFilterIPMaskSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterIPMaskSrc.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterIPMaskSrc.setDescription('Mask of the source IP Address.')
rtIPFilterIPAddressDest = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterIPAddressDest.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterIPAddressDest.setDescription('Destination IP Address.')
rtIPFilterIPMaskDest = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtIPFilterIPMaskDest.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterIPMaskDest.setDescription('Mask of the destination IP Address.')
rtIPFilterStatsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterStatsIn.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterStatsIn.setDescription('The number of incoming packets that match the filter.')
rtIPFilterStatsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 46, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtIPFilterStatsOut.setStatus('mandatory')
if mibBuilder.loadTexts: rtIPFilterStatsOut.setDescription('The number of outgoing packets that match the filter.')
rtActionState = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 47), ActionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtActionState.setStatus('mandatory')
if mibBuilder.loadTexts: rtActionState.setDescription("The state of the operation performed on the router by the Agent as a result of setting the values to the 'rtAdminStateCtrl'. The Management station will poll that variable after initiating an action on the router. The value done(1) indicates that the action terminated successfully. The value failed(2) indicates that the action terminated with an error. In this case the variable 'rtActionError' indicates the error code.")
rtActionError = MibScalar((1, 3, 6, 1, 4, 1, 434, 2, 2, 8, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("no-error", 0), ("err-ALREADY-STARTED", 1), ("err-NOT-STARTED", 2), ("err-STACK-NOT-BOUND", 3), ("err-SHUTDOWN-FAILURE", 4), ("err-General", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtActionError.setStatus('mandatory')
if mibBuilder.loadTexts: rtActionError.setDescription('The error code after the unsuccessful operation.')
mibBuilder.exportSymbols("EICON-MIB-ROUTER", rtPortRxBytesHigh=rtPortRxBytesHigh, rtConnFreeIndex=rtConnFreeIndex, rtCircuitATLocalNet=rtCircuitATLocalNet, rtCircuitIPConnIndex=rtCircuitIPConnIndex, rtGlobalTxDropNoRoute=rtGlobalTxDropNoRoute, AdminState=AdminState, rtCircuitIPXRemoteNode=rtCircuitIPXRemoteNode, rtConnRetryDelay=rtConnRetryDelay, rtConnSnaSendPaceWindow=rtConnSnaSendPaceWindow, rtConnInactivityTimeout=rtConnInactivityTimeout, rtCircuitIPXRxBytes=rtCircuitIPXRxBytes, rtAvailableLANMapping=rtAvailableLANMapping, rtIPFilterStatsIn=rtIPFilterStatsIn, rtReleaseDate=rtReleaseDate, rtIPFilterLowSrcPort=rtIPFilterLowSrcPort, EntryStatus=EntryStatus, ConnectionStatus=ConnectionStatus, rtConnName=rtConnName, PositiveInteger=PositiveInteger, rtConnSAPDelay=rtConnSAPDelay, rtConnEntry=rtConnEntry, rtPortRxPackets=rtPortRxPackets, rtConnOperState=rtConnOperState, rtGlobalRxBytesHigh=rtGlobalRxBytesHigh, rtPortIndex=rtPortIndex, rtConnAutoStart=rtConnAutoStart, rtIPFilterIndex=rtIPFilterIndex, rtIPFilterForwardStatsIn=rtIPFilterForwardStatsIn, rtIPFilterHighDestPort=rtIPFilterHighDestPort, rtConnIndex=rtConnIndex, rtCircuitStatus=rtCircuitStatus, rtConnWanProtocol=rtConnWanProtocol, rtGlobalRxPackets=rtGlobalRxPackets, rtConnRIPDelay=rtConnRIPDelay, rtCircuitIPTxPackets=rtCircuitIPTxPackets, rtIPFilterTable=rtIPFilterTable, rtPortRxThroughput=rtPortRxThroughput, ControlOnOff=ControlOnOff, rtIPMapIndex=rtIPMapIndex, rtGlobalTxBytesLow=rtGlobalTxBytesLow, rtActionError=rtActionError, rtIPFilterLowDestPort=rtIPFilterLowDestPort, rtIPFilterDropStatsIn=rtIPFilterDropStatsIn, rtCircuitFrXIDNegot=rtCircuitFrXIDNegot, rtIPFilterEntry=rtIPFilterEntry, rtConnPeerRouter=rtConnPeerRouter, rtCircuitIPTable=rtCircuitIPTable, rtIPFilterIPAddressSrc=rtIPFilterIPAddressSrc, rtName=rtName, eicon=eicon, rtMaxCircuits=rtMaxCircuits, rtConnAdminStateCtr=rtConnAdminStateCtr, rtConnSnaRuSendLow=rtConnSnaRuSendLow, rtIPMappingEntry=rtIPMappingEntry, rtIPMapVJCompress=rtIPMapVJCompress, rtCircuitFrCongestion=rtCircuitFrCongestion, rtGlobalRxDropUnknownProt=rtGlobalRxDropUnknownProt, rtCircuitCmSelector=rtCircuitCmSelector, rtConnX25ListeningFacilities=rtConnX25ListeningFacilities, rtConnSnaRuReceiveLow=rtConnSnaRuReceiveLow, mibv2=mibv2, rtGlobalTxDropUnknownProt=rtGlobalTxDropUnknownProt, rtPortTxPackets=rtPortTxPackets, rtPortTxBytesLow=rtPortTxBytesLow, rtCircuitCompAlgorithm=rtCircuitCompAlgorithm, rtGlobalTxDropNoResource=rtGlobalTxDropNoResource, rtCircuitIPXTxPackets=rtCircuitIPXTxPackets, rtPortTable=rtPortTable, rtCircuitCompression=rtCircuitCompression, rtPortProtocol=rtPortProtocol, rtMaxIPFilter=rtMaxIPFilter, rtCircuitIPXLocalNetwork=rtCircuitIPXLocalNetwork, rtTimeUp=rtTimeUp, rtIPMapBroadcast=rtIPMapBroadcast, rtCircuitTimeUp=rtCircuitTimeUp, rtIPFilterHighSrcPort=rtIPFilterHighSrcPort, rtIPFilterIPMaskDest=rtIPFilterIPMaskDest, rtConnSnaPuName=rtConnSnaPuName, rtCircuitTable=rtCircuitTable, rtReleaseVersion=rtReleaseVersion, rtCircuitIPTxBytes=rtCircuitIPTxBytes, rtConnFrSegmentation=rtConnFrSegmentation, rtIPMappingTable=rtIPMappingTable, rtCircuitX25LocalDTE=rtCircuitX25LocalDTE, rtAdminStateCtr=rtAdminStateCtr, rtConnSnaRuReceiveHigh=rtConnSnaRuReceiveHigh, PortRef=PortRef, rtOperState=rtOperState, rtConnSnaReceivePaceWindow=rtConnSnaReceivePaceWindow, rtGlobalRxError=rtGlobalRxError, rtCircuitErrCode=rtCircuitErrCode, rtConnFrDlci=rtConnFrDlci, rtGlobalCountersReset=rtGlobalCountersReset, ActionState=ActionState, rtCircuitX25RemoteDTE=rtCircuitX25RemoteDTE, rtIPFilterOperState=rtIPFilterOperState, rtCircuitRemoteRouter=rtCircuitRemoteRouter, rtPortTxThroughput=rtPortTxThroughput, router=router, rtIPMapFreeIndex=rtIPMapFreeIndex, rtCircuitAfterComp=rtCircuitAfterComp, rtCircuitATRxBytes=rtCircuitATRxBytes, rtIPMapIPMask=rtIPMapIPMask, rtIPFilterIPAddressDest=rtIPFilterIPAddressDest, rtCircuitIPXRxPackets=rtCircuitIPXRxPackets, rtCircuitIPXRemoteNetwork=rtCircuitIPXRemoteNetwork, rtConnX25LocalDTE=rtConnX25LocalDTE, rtGlobalRxBytesLow=rtGlobalRxBytesLow, rtPortRxError=rtPortRxError, rtConnLanProtocol=rtConnLanProtocol, rtCircuitCountersReset=rtCircuitCountersReset, rtCircuitIPXConnIndex=rtCircuitIPXConnIndex, rtCircuitDataLSN=rtCircuitDataLSN, rtIPMapEntryStatus=rtIPMapEntryStatus, rtIPMapNextHop=rtIPMapNextHop, rtCircuitIPXTxBytes=rtCircuitIPXTxBytes, rtAvailableIPFilter=rtAvailableIPFilter, rtCircuitATRxPackets=rtCircuitATRxPackets, CardRef=CardRef, rtCircuitIPEntry=rtCircuitIPEntry, rtIPFilterAdminStateCtr=rtIPFilterAdminStateCtr, EntryStatusV2=EntryStatusV2, rtCircuitATRemoteNet=rtCircuitATRemoteNet, rtConnUsage=rtConnUsage, rtIPFilterAction=rtIPFilterAction, OperState=OperState, rtConnX25RemoteDTE=rtConnX25RemoteDTE, rtConnPrimOrBackName=rtConnPrimOrBackName, rtCircuitSessionType=rtCircuitSessionType, rtCircuitIPXEntry=rtCircuitIPXEntry, rtConnX25CallingFacilities=rtConnX25CallingFacilities, rtConnX25Pvc=rtConnX25Pvc, rtCircuitX25Pvc=rtCircuitX25Pvc, rtCircuitFrDlci=rtCircuitFrDlci, rtConnFrXid=rtConnFrXid, rtCircuitIPXLocalNode=rtCircuitIPXLocalNode, rtMaxLANMapping=rtMaxLANMapping, rtCircuitIPXTable=rtCircuitIPXTable, rtCircuitWanProtocol=rtCircuitWanProtocol, rtPortEntry=rtPortEntry, rtTraceCtrl=rtTraceCtrl, rtCircuitX25Diag=rtCircuitX25Diag, management=management, rtIPMapConnIndex=rtIPMapConnIndex, rtConnSnaLocalFqName=rtConnSnaLocalFqName, rtIPFilterDirection=rtIPFilterDirection, rtCircuitATLocalNode=rtCircuitATLocalNode, rtCircuitX25Cause=rtCircuitX25Cause, rtPortRxBytesLow=rtPortRxBytesLow, rtCircuitATTable=rtCircuitATTable, rtIPFilterEntryStatus=rtIPFilterEntryStatus, rtAvailableCircuits=rtAvailableCircuits, rtActionState=rtActionState, rtIPFilterPosition=rtIPFilterPosition, rtConnSnaRuSendHigh=rtConnSnaRuSendHigh, rtConnComment=rtConnComment, rtConnCompression=rtConnCompression, rtPortTxBytesHigh=rtPortTxBytesHigh, rtIPFilterDropStatsOut=rtIPFilterDropStatsOut, rtGlobalTxPackets=rtGlobalTxPackets, rtCircuitConnLSN=rtCircuitConnLSN, rtPortCountersReset=rtPortCountersReset, rtCircuitATConnIndex=rtCircuitATConnIndex, rtPortTxDropNoResource=rtPortTxDropNoResource, module=module, rtConnRetryNum=rtConnRetryNum, rtCircuitTxErr=rtCircuitTxErr, rtCircuitFrXIDPacketSize=rtCircuitFrXIDPacketSize, rtCircuitATTxBytes=rtCircuitATTxBytes, rtIPFilterIPMaskSrc=rtIPFilterIPMaskSrc, rtCircuitATEntry=rtCircuitATEntry, rtCircuitX25UserData=rtCircuitX25UserData, rtCircuitIPRxPackets=rtCircuitIPRxPackets, rtCircuitATTxPackets=rtCircuitATTxPackets, rtGlobalRxDropNoResource=rtGlobalRxDropNoResource, rtConnX25UserData=rtConnX25UserData, rtCircuitIPLocalAddress=rtCircuitIPLocalAddress, rtNumberOfPorts=rtNumberOfPorts, rtCircuitBeforeComp=rtCircuitBeforeComp, rtConnTable=rtConnTable, rtIPFilterPortType=rtIPFilterPortType, rtCircuitIPRxBytes=rtCircuitIPRxBytes, rtCircuitConnIndex=rtCircuitConnIndex, rtGlobalTxBytesHigh=rtGlobalTxBytesHigh, rtIPFilterForwardStatsOut=rtIPFilterForwardStatsOut, rtTraceFileName=rtTraceFileName, rtCircuitATRemoteNode=rtCircuitATRemoteNode, rtCircuitFrSegmentation=rtCircuitFrSegmentation, rtIPFilterConnIndex=rtIPFilterConnIndex, rtCircuitEntry=rtCircuitEntry, rtTraceInterfaceType=rtTraceInterfaceType, rtCircuitBoundLANProtocol=rtCircuitBoundLANProtocol, rtConnType=rtConnType, rtCircuitIPRemoteAddress=rtCircuitIPRemoteAddress, rtType=rtType, rtConnEntryStatus=rtConnEntryStatus, rtConnPortNumber=rtConnPortNumber, rtCircuitX25ListeningFacilities=rtCircuitX25ListeningFacilities, rtCircuitX25CallingFacilities=rtCircuitX25CallingFacilities, rtConnSnaRemoteFqName=rtConnSnaRemoteFqName, rtPortNumber=rtPortNumber, rtProductName=rtProductName, rtConnRipSapUpdateType=rtConnRipSapUpdateType, rtIPFilterFreeIndex=rtIPFilterFreeIndex, rtIPFilterStatsOut=rtIPFilterStatsOut, rtConnSnaModeName=rtConnSnaModeName)
