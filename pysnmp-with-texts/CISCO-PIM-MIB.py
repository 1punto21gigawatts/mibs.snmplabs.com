#
# PySNMP MIB module CISCO-PIM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-PIM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:00:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
pimRPSetHoldTime, pimInterfaceStatus = mibBuilder.importSymbols("PIM-MIB", "pimRPSetHoldTime", "pimInterfaceStatus")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, MibIdentifier, Unsigned32, Bits, iso, Counter64, ObjectIdentity, Counter32, TimeTicks, IpAddress, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "MibIdentifier", "Unsigned32", "Bits", "iso", "Counter64", "ObjectIdentity", "Counter32", "TimeTicks", "IpAddress", "ModuleIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoPimMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 184))
ciscoPimMIB.setRevisions(('2000-11-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoPimMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoPimMIB.setLastUpdated('200011020000Z')
if mibBuilder.loadTexts: ciscoPimMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoPimMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS EMail: cs-ipmulticast@cisco.com ')
if mibBuilder.loadTexts: ciscoPimMIB.setDescription('This MIB module defines the cisco specific variables for Protocol Independent Multicast (PIM) management. These definitions are an extension of those defined in the IETF PIM MIB (RFC 2934).')
ciscoPimMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 184, 1))
cpim = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 184, 1, 1))
cpimInvalidRegisterMsgsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 184, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimInvalidRegisterMsgsRcvd.setStatus('current')
if mibBuilder.loadTexts: cpimInvalidRegisterMsgsRcvd.setDescription('A count of the number of invalid PIM Register messages received by this device. A PIM Register message is termed invalid if o the encapsulated IP header is malformed, o the destination of the PIM Register message is not the RP (Rendezvous Point) for the group in question, o the source/DR (Designated Router) address is not a valid unicast address.')
cpimInvalidJoinPruneMsgsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 184, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimInvalidJoinPruneMsgsRcvd.setStatus('current')
if mibBuilder.loadTexts: cpimInvalidJoinPruneMsgsRcvd.setDescription('A count of the number of invalid PIM Join/Prune messages received by this device. A PIM Join/Prune message is termed invalid if o the RP specified in the packet is not the RP for the group in question.')
cpimLastErrorType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 184, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("invalidRegister", 2), ("invalidJoinPrune", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimLastErrorType.setStatus('current')
if mibBuilder.loadTexts: cpimLastErrorType.setDescription('The type of the last invalid message that was received by this device.')
cpimLastErrorOriginType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 184, 1, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimLastErrorOriginType.setStatus('current')
if mibBuilder.loadTexts: cpimLastErrorOriginType.setDescription('Represents the type of address stored in cpimLastErrorOrigin. The value of this object is irrelevant if the value of cpimLastErrorType is none(1).')
cpimLastErrorOrigin = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 184, 1, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimLastErrorOrigin.setStatus('current')
if mibBuilder.loadTexts: cpimLastErrorOrigin.setDescription('This object represents the Network Layer Address of the source that originated the last invalid packet. The type of address stored depends on the value in cpimLastErrorOriginType. The value of this object represents the Network Layer Address of the Designated Router (DR) whenever the value of cpimLastErrorGroup is a zero-length address, for eg. when encapsulated IP header is malformed. The value of this object is irrelevant if the value of cpimLastErrorType is none(1).')
cpimLastErrorGroupType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 184, 1, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimLastErrorGroupType.setStatus('current')
if mibBuilder.loadTexts: cpimLastErrorGroupType.setDescription('Represents the type of address stored in cpimLastErrorGroup. The value of this object is unknown(0) if there is a problem in the packet received from the DR. The value of this object is irrelevant if the value of cpimLastErrorType is none(1).')
cpimLastErrorGroup = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 184, 1, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimLastErrorGroup.setStatus('current')
if mibBuilder.loadTexts: cpimLastErrorGroup.setDescription('The IP multicast group address to which the last invalid packet was addressed. The type of address stored depends on the value in cpimLastErrorGroupType. The value of this object is a zero-length InetAddress if there is a problem in the packet received from the DR, for eg. a malformed encapsulated IP header. The value of this object is irrelevant if the value of cpimLastErrorType is none(1).')
cpimLastErrorRPType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 184, 1, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimLastErrorRPType.setStatus('current')
if mibBuilder.loadTexts: cpimLastErrorRPType.setDescription('Represents the type of address stored in cpimLastErrorRP. The value of this object is irrelevant if the value of cpimLastErrorType is none(1).')
cpimLastErrorRP = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 184, 1, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimLastErrorRP.setStatus('current')
if mibBuilder.loadTexts: cpimLastErrorRP.setDescription('The address of the RP, as per the last invalid packet. The type of address stored depends on the value in cpimLastErrorRPType. The value of this object is irrelevant if the value of cpimLastErrorType is none(1).')
ciscoPimMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 184, 2))
ciscoPimMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 184, 2, 0))
ciscoPimMIBNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 184, 2, 1))
cpimRPMappingChangeType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 184, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("newMapping", 1), ("deletedMapping", 2), ("modifiedOldMapping", 3), ("modifiedNewMapping", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimRPMappingChangeType.setStatus('current')
if mibBuilder.loadTexts: cpimRPMappingChangeType.setDescription('Describes the operation that resulted in generation of cpimRPMappingChange notification. o newMapping, as the name suggests indicates that a new mapping has been added into the pimRPSetTable, o deletedMapping indicates that a mapping has been deleted from the pimRPSetTable, and, o modifiedXXXMapping indicates that an RP mapping (which already existed in the table) has been modified. The two modifications types i.e. modifiedOldMapping and modifiedNewMapping, are defined to differentiate the notification generated before modification from that generated after modification.')
ciscoPimInterfaceUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 184, 2, 0, 1)).setObjects(("PIM-MIB", "pimInterfaceStatus"))
if mibBuilder.loadTexts: ciscoPimInterfaceUp.setStatus('current')
if mibBuilder.loadTexts: ciscoPimInterfaceUp.setDescription("A ciscoPimInterfaceUp notification signifies the restoration of a PIM interface. This notification should be generated whenever pimInterfaceStatus transitions into the 'active' state. pimInterfaceStatus identifies the interface which was involved in the generation of this notification.")
ciscoPimInterfaceDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 184, 2, 0, 2)).setObjects(("PIM-MIB", "pimInterfaceStatus"))
if mibBuilder.loadTexts: ciscoPimInterfaceDown.setStatus('current')
if mibBuilder.loadTexts: ciscoPimInterfaceDown.setDescription('A ciscoPimInterfaceDown notification signifies the loss of a PIM interface. This notification should be generated whenever an entry is about to be deleted from the PimInterfaceTable. pimInterfaceStatus identifies the interface which was involved in the generation of this notification.')
ciscoPimRPMappingChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 184, 2, 0, 3)).setObjects(("PIM-MIB", "pimRPSetHoldTime"), ("CISCO-PIM-MIB", "cpimRPMappingChangeType"))
if mibBuilder.loadTexts: ciscoPimRPMappingChange.setStatus('current')
if mibBuilder.loadTexts: ciscoPimRPMappingChange.setDescription('A ciscoPimRPMappingChange notification signifies a change in the RP Mapping on the device in question. A change in RP Mapping could be because of addition of new entries to the RP Mapping cache, deletion of existing entries, or a modification to an existing mapping. The type of change is indicated by cpimRPMappingChangeType. pimRPSetHoldTime is used to identify the row in the pimRPSetTable that is responsible for the generation of this notification. In case of modification to existing entries, a notification should be generated once before the modification (with cpimRPMappingChangeType set to modifiedOldMapping) and once after modification (with cpimRPMappingChangeType set to modifiedNewMapping). NOTE: A high frequency of RP Mapping change could result in a large number of ciscoPimRPMappingChange notifications being generated. Hence, in environments where the possibility of a high frequency of RP Mapping change exists, enable this notification with utmost care.')
ciscoPimInvalidRegister = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 184, 2, 0, 4)).setObjects(("CISCO-PIM-MIB", "cpimLastErrorOriginType"), ("CISCO-PIM-MIB", "cpimLastErrorOrigin"), ("CISCO-PIM-MIB", "cpimLastErrorGroupType"), ("CISCO-PIM-MIB", "cpimLastErrorGroup"), ("CISCO-PIM-MIB", "cpimLastErrorRPType"), ("CISCO-PIM-MIB", "cpimLastErrorRP"), ("CISCO-PIM-MIB", "cpimInvalidRegisterMsgsRcvd"))
if mibBuilder.loadTexts: ciscoPimInvalidRegister.setStatus('current')
if mibBuilder.loadTexts: ciscoPimInvalidRegister.setDescription('A ciscoPimInvalidRegister notification signifies that an invalid Register message was received by this device. This notification is generated whenever the cpimInvalidRegisterMsgsRcvd counter is incremented. cpimLastErrorOrigin, cpimLastErrorGroup, and cpimLastErrorRP should signify the source address, group address and the RP address in the invalid register packet.')
ciscoPimInvalidJoinPrune = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 184, 2, 0, 5)).setObjects(("CISCO-PIM-MIB", "cpimLastErrorOriginType"), ("CISCO-PIM-MIB", "cpimLastErrorOrigin"), ("CISCO-PIM-MIB", "cpimLastErrorGroupType"), ("CISCO-PIM-MIB", "cpimLastErrorGroup"), ("CISCO-PIM-MIB", "cpimLastErrorRPType"), ("CISCO-PIM-MIB", "cpimLastErrorRP"), ("CISCO-PIM-MIB", "cpimInvalidJoinPruneMsgsRcvd"))
if mibBuilder.loadTexts: ciscoPimInvalidJoinPrune.setStatus('current')
if mibBuilder.loadTexts: ciscoPimInvalidJoinPrune.setDescription('A ciscoPimInvalidJoinPrune notification signifies the receipt of an invalid join/prune message. This notification is generated whenever the cpimInvalidJoinPruneMsgsRcvd counter is incremented. cpimLastErrorOrigin, cpimLastErrorGroup, and cpimLastErrorRP should signify the source address, group address and the RP address in the invalid join/prune packet.')
ciscoPimMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 184, 3))
ciscoPimMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 184, 3, 1))
ciscoPimMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 184, 3, 2))
ciscoPimSparseMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 184, 3, 1, 1)).setObjects(("CISCO-PIM-MIB", "ciscoPimSparseMIBGroup"), ("CISCO-PIM-MIB", "ciscoPimNotificationObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPimSparseMIBCompliance = ciscoPimSparseMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoPimSparseMIBCompliance.setDescription('The compliance statement for devices running PIM Sparse Mode and implementing the CISCO PIM MIB.')
ciscoPimSparseMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 184, 3, 2, 1)).setObjects(("CISCO-PIM-MIB", "cpimInvalidRegisterMsgsRcvd"), ("CISCO-PIM-MIB", "cpimInvalidJoinPruneMsgsRcvd"), ("CISCO-PIM-MIB", "cpimLastErrorType"), ("CISCO-PIM-MIB", "cpimLastErrorOriginType"), ("CISCO-PIM-MIB", "cpimLastErrorOrigin"), ("CISCO-PIM-MIB", "cpimLastErrorGroupType"), ("CISCO-PIM-MIB", "cpimLastErrorGroup"), ("CISCO-PIM-MIB", "cpimLastErrorRPType"), ("CISCO-PIM-MIB", "cpimLastErrorRP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPimSparseMIBGroup = ciscoPimSparseMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoPimSparseMIBGroup.setDescription('A collection of objects to support management of PIM Sparse mode on Cisco devices.')
ciscoPimNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 184, 3, 2, 2)).setObjects(("CISCO-PIM-MIB", "cpimRPMappingChangeType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPimNotificationObjectGroup = ciscoPimNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoPimNotificationObjectGroup.setDescription('A collection of objects that are supported only for notification purpose.')
mibBuilder.exportSymbols("CISCO-PIM-MIB", ciscoPimInterfaceUp=ciscoPimInterfaceUp, cpimLastErrorRP=cpimLastErrorRP, ciscoPimMIBCompliances=ciscoPimMIBCompliances, ciscoPimMIBNotificationObjects=ciscoPimMIBNotificationObjects, ciscoPimMIB=ciscoPimMIB, cpimLastErrorOriginType=cpimLastErrorOriginType, PYSNMP_MODULE_ID=ciscoPimMIB, ciscoPimMIBNotificationPrefix=ciscoPimMIBNotificationPrefix, cpimLastErrorOrigin=cpimLastErrorOrigin, ciscoPimMIBConformance=ciscoPimMIBConformance, cpimLastErrorGroup=cpimLastErrorGroup, cpimLastErrorRPType=cpimLastErrorRPType, ciscoPimMIBGroups=ciscoPimMIBGroups, cpimLastErrorType=cpimLastErrorType, ciscoPimInterfaceDown=ciscoPimInterfaceDown, ciscoPimInvalidJoinPrune=ciscoPimInvalidJoinPrune, cpimLastErrorGroupType=cpimLastErrorGroupType, ciscoPimMIBNotifications=ciscoPimMIBNotifications, ciscoPimNotificationObjectGroup=ciscoPimNotificationObjectGroup, ciscoPimInvalidRegister=ciscoPimInvalidRegister, cpimInvalidRegisterMsgsRcvd=cpimInvalidRegisterMsgsRcvd, ciscoPimSparseMIBCompliance=ciscoPimSparseMIBCompliance, cpimRPMappingChangeType=cpimRPMappingChangeType, cpim=cpim, ciscoPimSparseMIBGroup=ciscoPimSparseMIBGroup, ciscoPimMIBObjects=ciscoPimMIBObjects, ciscoPimRPMappingChange=ciscoPimRPMappingChange, cpimInvalidJoinPruneMsgsRcvd=cpimInvalidJoinPruneMsgsRcvd)
