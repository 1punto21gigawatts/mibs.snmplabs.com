#
# PySNMP MIB module NIMBLE-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NIMBLE-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:21:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
nimble, = mibBuilder.importSymbols("NIMBLE-MIB", "nimble")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Integer32, Counter64, Bits, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, ObjectIdentity, MibIdentifier, IpAddress, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "Counter64", "Bits", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "ObjectIdentity", "MibIdentifier", "IpAddress", "ModuleIdentity", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nimble_traps = ModuleIdentity((1, 3, 6, 1, 4, 1, 37447, 2)).setLabel("nimble-traps")
nimble_traps.setRevisions(('2014-06-13 00:00', '2014-05-09 00:00', '2012-07-12 00:00', '2012-06-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nimble_traps.setRevisionsDescriptions(('Nimble Storage 2.2.0.0 Trap MIB', 'Nimble Storage 2.0.8.0 Trap MIB', 'Nimble Storage 1.4.0.0 Trap MIB', 'Initial revision',))
if mibBuilder.loadTexts: nimble_traps.setLastUpdated('201406130000Z')
if mibBuilder.loadTexts: nimble_traps.setOrganization('Nimble Storage, Inc.')
if mibBuilder.loadTexts: nimble_traps.setContactInfo('Nimble Storage support@nimblestorage.com')
if mibBuilder.loadTexts: nimble_traps.setDescription('Alert SMI Information for Nimble')
trapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 37447, 2, 1))
trapvariables = MibIdentifier((1, 3, 6, 1, 4, 1, 37447, 2, 1, 1))
trapMsg = MibScalar((1, 3, 6, 1, 4, 1, 37447, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMsg.setStatus('current')
if mibBuilder.loadTexts: trapMsg.setDescription('Message string. This is the full text of the alert message.')
trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 37447, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSeverity.setStatus('current')
if mibBuilder.loadTexts: trapSeverity.setDescription('The severity level of the trap (informational, notice, warning, error, critical).')
trapOriginatorName = MibScalar((1, 3, 6, 1, 4, 1, 37447, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapOriginatorName.setStatus('current')
if mibBuilder.loadTexts: trapOriginatorName.setDescription('The array name that originated the trap.')
trapOriginatorSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 37447, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapOriginatorSerialNumber.setStatus('current')
if mibBuilder.loadTexts: trapOriginatorSerialNumber.setDescription('The serial number of the array that originated the trap.')
trapOriginatorGroupName = MibScalar((1, 3, 6, 1, 4, 1, 37447, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapOriginatorGroupName.setStatus('current')
if mibBuilder.loadTexts: trapOriginatorGroupName.setDescription('The name of the group that originated the trap.')
trapOriginatorGroupID = MibScalar((1, 3, 6, 1, 4, 1, 37447, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapOriginatorGroupID.setStatus('current')
if mibBuilder.loadTexts: trapOriginatorGroupID.setDescription('The ID of the group that originated the trap.')
trapTarget = MibScalar((1, 3, 6, 1, 4, 1, 37447, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapTarget.setStatus('current')
if mibBuilder.loadTexts: trapTarget.setDescription('The object for which this trap was generated.')
trapTargetType = MibScalar((1, 3, 6, 1, 4, 1, 37447, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapTargetType.setStatus('current')
if mibBuilder.loadTexts: trapTargetType.setDescription('The type of object for which this trap was generated.')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2))
nimbleDsdRedEntry0101Deprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 101)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDsdRedEntry0101Deprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleDsdRedEntry0101Deprecated.setDescription('Low writable space')
nimbleDsdSpaceRedExit = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 102)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDsdSpaceRedExit.setStatus('current')
if mibBuilder.loadTexts: nimbleDsdSpaceRedExit.setDescription('Writable space reclaimed')
nimbleDsdSpaceCrit0103Deprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 103)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDsdSpaceCrit0103Deprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleDsdSpaceCrit0103Deprecated.setDescription('Critically low writable space')
nimbleDsdSpaceUtilizationHigh = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 104)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDsdSpaceUtilizationHigh.setStatus('current')
if mibBuilder.loadTexts: nimbleDsdSpaceUtilizationHigh.setDescription('High system utilization')
nimbleDsdSpaceUtilizationOk = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 105)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDsdSpaceUtilizationOk.setStatus('current')
if mibBuilder.loadTexts: nimbleDsdSpaceUtilizationOk.setDescription('System utilization OK')
nimbleDsdSpaceUtilizationCrit = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 106)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDsdSpaceUtilizationCrit.setStatus('current')
if mibBuilder.loadTexts: nimbleDsdSpaceUtilizationCrit.setDescription('Critically high system utilization')
nimbleDsdSpaceRedEntry0107Deprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 107)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDsdSpaceRedEntry0107Deprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleDsdSpaceRedEntry0107Deprecated.setDescription('Critically low writable space')
nimbleDsdSpaceCrit0110Deprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 110)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDsdSpaceCrit0110Deprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleDsdSpaceCrit0110Deprecated.setDescription('Critically low writable space')
nimbleDsdSpaceRedEntry = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 111)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDsdSpaceRedEntry.setStatus('current')
if mibBuilder.loadTexts: nimbleDsdSpaceRedEntry.setDescription('Critically low writable space')
nimbleDsdSpaceCrit = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 112)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDsdSpaceCrit.setStatus('current')
if mibBuilder.loadTexts: nimbleDsdSpaceCrit.setDescription('Critically low writable space')
nimbleCtrlrException = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2001)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCtrlrException.setStatus('current')
if mibBuilder.loadTexts: nimbleCtrlrException.setDescription('Unhandled controller exception')
nimbleCtrlrTakeover = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2002)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCtrlrTakeover.setStatus('current')
if mibBuilder.loadTexts: nimbleCtrlrTakeover.setDescription('Controller takeover occurred')
nimbleCtrlrStandbyAvail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2003)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCtrlrStandbyAvail.setStatus('current')
if mibBuilder.loadTexts: nimbleCtrlrStandbyAvail.setDescription('Standby controller available')
nimbleCtrlrStandbyUnavail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2004)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCtrlrStandbyUnavail.setStatus('current')
if mibBuilder.loadTexts: nimbleCtrlrStandbyUnavail.setDescription('Standby controller not available')
nimbleCtrlrExcessiveRestarts = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2005)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCtrlrExcessiveRestarts.setStatus('current')
if mibBuilder.loadTexts: nimbleCtrlrExcessiveRestarts.setDescription('Excessive controller restarts detected')
nimbleServiceReboot = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2006)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleServiceReboot.setStatus('current')
if mibBuilder.loadTexts: nimbleServiceReboot.setDescription('Restarting controller to recover service')
nimbleUserReboot = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2007)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUserReboot.setStatus('current')
if mibBuilder.loadTexts: nimbleUserReboot.setDescription('Rebooting controller on user request')
nimbleUserRebootFailed = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2008)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUserRebootFailed.setStatus('current')
if mibBuilder.loadTexts: nimbleUserRebootFailed.setDescription('Failed to reboot controller per user request')
nimbleUserHalt = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2009)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUserHalt.setStatus('current')
if mibBuilder.loadTexts: nimbleUserHalt.setDescription('Halting controller on user request')
nimbleUserHaltFailed = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2010)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUserHaltFailed.setStatus('current')
if mibBuilder.loadTexts: nimbleUserHaltFailed.setDescription('Failed to halt controller per user request')
nimbleCtrlrStandbyUnavailInfo = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2011)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCtrlrStandbyUnavailInfo.setStatus('current')
if mibBuilder.loadTexts: nimbleCtrlrStandbyUnavailInfo.setDescription('Standby controller not available')
nimbleCtrlrStandbyUnavailWarn = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2012)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCtrlrStandbyUnavailWarn.setStatus('current')
if mibBuilder.loadTexts: nimbleCtrlrStandbyUnavailWarn.setDescription('Standby controller not available for an extended period')
nimbleCtrlrExceptionWarn = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2013)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCtrlrExceptionWarn.setStatus('current')
if mibBuilder.loadTexts: nimbleCtrlrExceptionWarn.setDescription('Unhandled controller exception')
nimbleCtrlrExceptionCrit = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2014)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCtrlrExceptionCrit.setStatus('current')
if mibBuilder.loadTexts: nimbleCtrlrExceptionCrit.setDescription('Unhandled controller exception')
nimbleCtrlrStandbyUnavailWarnTimeDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2015)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCtrlrStandbyUnavailWarnTimeDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleCtrlrStandbyUnavailWarnTimeDeprecated.setDescription('Standby controller not available for an extended period')
nimbleCtrlrStandbyUnavailWarnTime = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2016)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCtrlrStandbyUnavailWarnTime.setStatus('current')
if mibBuilder.loadTexts: nimbleCtrlrStandbyUnavailWarnTime.setDescription('Standby controller not available for an extended period')
nimbleCtrlrTakeoverWarn = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2017)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCtrlrTakeoverWarn.setStatus('current')
if mibBuilder.loadTexts: nimbleCtrlrTakeoverWarn.setDescription('Controller takeover occurred')
nimbleCtrlrFailoverDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2018)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCtrlrFailoverDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleCtrlrFailoverDeprecated.setDescription('Controller failover occurred')
nimbleCtrlrFailover = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2019)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCtrlrFailover.setStatus('current')
if mibBuilder.loadTexts: nimbleCtrlrFailover.setDescription('Controller failover occurred')
nimbleServiceStarted = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2101)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleServiceStarted.setStatus('current')
if mibBuilder.loadTexts: nimbleServiceStarted.setDescription('Service started')
nimbleServiceDeadRestart = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2102)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleServiceDeadRestart.setStatus('current')
if mibBuilder.loadTexts: nimbleServiceDeadRestart.setDescription('Service stopped unexpectedly')
nimbleServiceDeadNoRestart = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2103)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleServiceDeadNoRestart.setStatus('current')
if mibBuilder.loadTexts: nimbleServiceDeadNoRestart.setDescription('Service stopped unexpectedly')
nimbleServiceCreateTunnel = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2104)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleServiceCreateTunnel.setStatus('current')
if mibBuilder.loadTexts: nimbleServiceCreateTunnel.setDescription('Created secure tunnel to Nimble Storage Support')
nimbleServiceTerminateTunnel = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2105)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleServiceTerminateTunnel.setStatus('current')
if mibBuilder.loadTexts: nimbleServiceTerminateTunnel.setDescription('Tunnel to Nimble Storage Support has been terminated')
nimbleServiceEssentialStoppedDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2106)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleServiceEssentialStoppedDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleServiceEssentialStoppedDeprecated.setDescription('Service stopped unexpectedly')
nimbleServiceEssentialStopped = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2107)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleServiceEssentialStopped.setStatus('current')
if mibBuilder.loadTexts: nimbleServiceEssentialStopped.setDescription('Service stopped unexpectedly')
nimbleServiceEmailAlertFailedDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2108)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleServiceEmailAlertFailedDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleServiceEmailAlertFailedDeprecated.setDescription('Failed to send alert e-mail')
nimbleServiceEmailAlertFailed = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 2109)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleServiceEmailAlertFailed.setStatus('current')
if mibBuilder.loadTexts: nimbleServiceEmailAlertFailed.setDescription('Failed to send alert e-mail')
nimbleTestDbg = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 5000)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTestDbg.setStatus('current')
if mibBuilder.loadTexts: nimbleTestDbg.setDescription('Test alert')
nimbleTestInfo = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 5001)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTestInfo.setStatus('current')
if mibBuilder.loadTexts: nimbleTestInfo.setDescription('Test alert')
nimbleTestErr = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 5002)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTestErr.setStatus('current')
if mibBuilder.loadTexts: nimbleTestErr.setDescription('Test alert')
nimbleTestNot = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 5003)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTestNot.setStatus('current')
if mibBuilder.loadTexts: nimbleTestNot.setDescription('Test alert')
nimbleTestNoteDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 5004)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTestNoteDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleTestNoteDeprecated.setDescription('Test alert')
nimbleTestWarn = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 5005)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTestWarn.setStatus('current')
if mibBuilder.loadTexts: nimbleTestWarn.setDescription('Test alert')
nimbleTestCrit = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 5006)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTestCrit.setStatus('current')
if mibBuilder.loadTexts: nimbleTestCrit.setDescription('Test alert')
nimbleTestNote = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 5007)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTestNote.setStatus('current')
if mibBuilder.loadTexts: nimbleTestNote.setDescription('Test alert')
nimbleUpdateUnpackFail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6000)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateUnpackFail.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateUnpackFail.setDescription('Unpacking update package failed')
nimbleUpdateStartedDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6001)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateStartedDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleUpdateStartedDeprecated.setDescription('Software update started')
nimbleUpdateRevert = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6002)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateRevert.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateRevert.setDescription('Reverting software to previous version')
nimbleUpdateSuccessDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6003)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateSuccessDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleUpdateSuccessDeprecated.setDescription('Successfully updated software')
nimbleUpdateRollback = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6004)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateRollback.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateRollback.setDescription('Rolling back software')
nimbleUpdatePrecheckFail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6005)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdatePrecheckFail.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdatePrecheckFail.setDescription('Update package pre-check failed')
nimbleUpdateFailMsg = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6007)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateFailMsg.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateFailMsg.setDescription('Software update failed')
nimbleUpdateUnpackStarted = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6008)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateUnpackStarted.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateUnpackStarted.setDescription('Unpacking update package')
nimbleUpdateUnpackDone = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6009)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateUnpackDone.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateUnpackDone.setDescription('Unpacked update package')
nimbleUpdateSwitchRoot = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6010)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateSwitchRoot.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateSwitchRoot.setDescription('Software update reboot')
nimbleUpdateDownloadFailed = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6011)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateDownloadFailed.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateDownloadFailed.setDescription('Failed to download software update package')
nimbleUpdateFailTmpFsFull = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6012)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateFailTmpFsFull.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateFailTmpFsFull.setDescription('Software update failed. /tmp is full')
nimbleUpdateFailScratchFsFull = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6013)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateFailScratchFsFull.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateFailScratchFsFull.setDescription('Software update failed. scratch space is full')
nimbleUpdateFailVarFsFull = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6014)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateFailVarFsFull.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateFailVarFsFull.setDescription('Software update failed. /var is full')
nimbleUpdateFailConfigFsFull = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6015)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateFailConfigFsFull.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateFailConfigFsFull.setDescription('Software update failed. Configuration space is full')
nimbleUpdateFailUsbFsFull = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6016)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateFailUsbFsFull.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateFailUsbFsFull.setDescription('Software update failed. Recovery OS space is full')
nimbleUpdatePkgNotFound = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6017)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdatePkgNotFound.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdatePkgNotFound.setDescription('Software update package was not found')
nimbleUpdatePkgWrongSig = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6018)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdatePkgWrongSig.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdatePkgWrongSig.setDescription('Software update package has wrong signature')
nimbleUpdatePkgWrongCksum = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6019)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdatePkgWrongCksum.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdatePkgWrongCksum.setDescription('Software update package has wrong checksum')
nimbleUpdateNetDegradeDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6020)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateNetDegradeDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleUpdateNetDegradeDeprecated.setDescription('Software update precheck failed. Network connectivity will degrade after software update')
nimbleUpdateDisallowSoloDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6021)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateDisallowSoloDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleUpdateDisallowSoloDeprecated.setDescription('Software update failed. Update cannot be applied while services cannot be failed over to other controller')
nimbleUpdateDisallowSolo = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6022)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateDisallowSolo.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateDisallowSolo.setDescription('Software update cannot be applied.')
nimbleUpdateNetDegrade = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6023)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateNetDegrade.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateNetDegrade.setDescription('Software update precheck failed. Network connectivity will degrade after software update')
nimbleUpdateRaidDegrade = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6024)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateRaidDegrade.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateRaidDegrade.setDescription('Software update precheck failed. RAID assembly failed on standby controller and prevents software update to proceed')
nimbleUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6025)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateStarted.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateStarted.setDescription('Software update started')
nimbleUpdateSuccess = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6026)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateSuccess.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateSuccess.setDescription('Successfully updated software')
nimbleUpdateArrayUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6501)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateArrayUnreachable.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateArrayUnreachable.setDescription('Failed to contact a member array during software update')
nimbleUpdateArrayFailed = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6502)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateArrayFailed.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateArrayFailed.setDescription('Failed to update software on a member array')
nimbleUpdateArrayTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 6503)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateArrayTimedOut.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateArrayTimedOut.setDescription('Software update on a member array timed out')
nimbleArrayUnreachableDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10010)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleArrayUnreachableDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleArrayUnreachableDeprecated.setDescription('A member array became unreachable')
nimbleArrayReachableDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10011)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleArrayReachableDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleArrayReachableDeprecated.setDescription('A member array became reachable')
nimbleArrayUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10012)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleArrayUnreachable.setStatus('current')
if mibBuilder.loadTexts: nimbleArrayUnreachable.setDescription('A member array is unreachable')
nimbleArrayReachable = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10013)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleArrayReachable.setStatus('current')
if mibBuilder.loadTexts: nimbleArrayReachable.setDescription('A member array is reachable')
nimbleUserClearedSysCache = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10101)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUserClearedSysCache.setStatus('current')
if mibBuilder.loadTexts: nimbleUserClearedSysCache.setDescription('Cache cleared by user')
nimbleVolSpcCurWarningUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10200)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleVolSpcCurWarningUp.setStatus('current')
if mibBuilder.loadTexts: nimbleVolSpcCurWarningUp.setDescription('Volume space usage over warning limit')
nimbleVolSpcCurWarningDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10201)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleVolSpcCurWarningDown.setStatus('current')
if mibBuilder.loadTexts: nimbleVolSpcCurWarningDown.setDescription('Volume space usage below warning limit')
nimbleVolSpcCurQuotaUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10202)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleVolSpcCurQuotaUp.setStatus('current')
if mibBuilder.loadTexts: nimbleVolSpcCurQuotaUp.setDescription('Volume space usage over quota')
nimbleVolSpcCurQuotaDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10203)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleVolSpcCurQuotaDown.setStatus('current')
if mibBuilder.loadTexts: nimbleVolSpcCurQuotaDown.setDescription('Volume space usage below quota')
nimbleVolSpcSnapWarningUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10204)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleVolSpcSnapWarningUp.setStatus('current')
if mibBuilder.loadTexts: nimbleVolSpcSnapWarningUp.setDescription('Volume snapshot space usage over warning limit')
nimbleVolSpcSnapWarningDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10205)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleVolSpcSnapWarningDown.setStatus('current')
if mibBuilder.loadTexts: nimbleVolSpcSnapWarningDown.setDescription('Volume snapshot space usage below warning limit')
nimbleVolSpcSnapQuotaUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10206)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleVolSpcSnapQuotaUp.setStatus('current')
if mibBuilder.loadTexts: nimbleVolSpcSnapQuotaUp.setDescription('Volume snapshot space usage over quota')
nimbleVolSpcSnapQuotaDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10207)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleVolSpcSnapQuotaDown.setStatus('current')
if mibBuilder.loadTexts: nimbleVolSpcSnapQuotaDown.setDescription('Volume snapshot space usage below quota')
nimbleGmVolSpcCurCritUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10208)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcCurCritUp.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcCurCritUp.setDescription('Volume space usage approaching quota')
nimbleGmVolSpcCurCritDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10209)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcCurCritDown.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcCurCritDown.setDescription('Volume space usage below critical limit')
nimbleGmSnapSpcCurCritUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10210)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmSnapSpcCurCritUp.setStatus('current')
if mibBuilder.loadTexts: nimbleGmSnapSpcCurCritUp.setDescription('Volume snapshot space usage approaching quota')
nimbleGmSnapSpcCurCritDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10211)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmSnapSpcCurCritDown.setStatus('current')
if mibBuilder.loadTexts: nimbleGmSnapSpcCurCritDown.setDescription('Volume snapshot space usage below critical limit')
nimbleGmVolSpcCurQuotaOffline = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10212)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcCurQuotaOffline.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcCurQuotaOffline.setDescription('Volume being taken offline because it is above its quota')
nimbleGmVolSpcCurQuotaSet = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10213)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcCurQuotaSet.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcCurQuotaSet.setDescription('The quota for volume is being set to 100%% because it is above its current quota')
nimbleGmVolSpcSnapQuotaOffline = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10214)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcSnapQuotaOffline.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcSnapQuotaOffline.setDescription('Volume being taken offline because it is above its snapshot quota')
nimbleGmVolSpcSnapQuotaSet = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10215)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcSnapQuotaSet.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcSnapQuotaSet.setDescription('The snapshot quota for volume is being set to unlimited because it is above its snapshot quota')
nimbleGmVolSpcCurReserveOffline = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10216)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcCurReserveOffline.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcCurReserveOffline.setDescription('Volume being taken offline because it is above its reserve and system is out of free space')
nimbleGmVolSpcCurReserveSet = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10217)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcCurReserveSet.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcCurReserveSet.setDescription('Volume reserve is being set to zero because it is above its reserve and system is out of free space')
nimbleGmVolSpcSnapReserveOffline = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10218)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcSnapReserveOffline.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcSnapReserveOffline.setDescription('Volume being taken offline because it is above its snapshot reserve and system is out of free space')
nimbleGmVolSpcSnapReserveSet = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10219)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcSnapReserveSet.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcSnapReserveSet.setDescription('Volume snapshot reserve is being set to zero because it is above its reserve and system is out of free space')
nimbleGmVolSpcCurWarningUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10220)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcCurWarningUp.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcCurWarningUp.setDescription('Volume space usage over warning limit')
nimbleGmVolSpcCurWarningDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10221)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcCurWarningDown.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcCurWarningDown.setDescription('Volume space usage below warning limit')
nimbleGmVolSpcCurQuotaUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10222)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcCurQuotaUp.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcCurQuotaUp.setDescription('Volume space usage is over the configured quota')
nimbleGmVolSpcCurQuotaDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10223)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcCurQuotaDown.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcCurQuotaDown.setDescription('Volume space usage is now below the configured quota')
nimbleGmVolSpcSnapWarningUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10224)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcSnapWarningUp.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcSnapWarningUp.setDescription('Volume snapshot space usage over warning limit')
nimbleGmVolSpcSnapWarningDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10225)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcSnapWarningDown.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcSnapWarningDown.setDescription('Volume snapshot space usage below warning limit')
nimbleGmVolSpcSnapQuotaUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10226)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcSnapQuotaUp.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcSnapQuotaUp.setDescription('Volume snapshot space usage over quota')
nimbleGmVolSpcSnapQuotaDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10227)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcSnapQuotaDown.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcSnapQuotaDown.setDescription('Volume snapshot space usage below quota')
nimbleVolAttrSyncDelay = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10228)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleVolAttrSyncDelay.setStatus('current')
if mibBuilder.loadTexts: nimbleVolAttrSyncDelay.setDescription('Volume attributes synchronization to arrays in the pool delayed')
nimbleGmPoolArrAssgnDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10229)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolArrAssgnDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGmPoolArrAssgnDeprecated.setDescription('Failed to assign array to pool')
nimbleGmPoolArrUnassgnDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10230)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolArrUnassgnDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGmPoolArrUnassgnDeprecated.setDescription('Failed to unassign array from pool')
nimbleGmVolSpcCurCritUpUnlim = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10231)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcCurCritUpUnlim.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcCurCritUpUnlim.setDescription('Volume space usage approaching quota')
nimbleGmSnapSpcCurCritUpUnlim = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10232)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmSnapSpcCurCritUpUnlim.setStatus('current')
if mibBuilder.loadTexts: nimbleGmSnapSpcCurCritUpUnlim.setDescription('Volume snapshot space usage approaching quota')
nimbleGmVolSpcReserveUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10233)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcReserveUp.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcReserveUp.setDescription('Volume space usage is above its reserve')
nimbleGmVolSpcReserveDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10234)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcReserveDown.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcReserveDown.setDescription('Volume space usage is below its reserve')
nimbleGmSnapSpcReserveUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10235)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmSnapSpcReserveUp.setStatus('current')
if mibBuilder.loadTexts: nimbleGmSnapSpcReserveUp.setDescription('Volume snapshot space usage is above its reserve')
nimbleGmSnapSpcReserveDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10236)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmSnapSpcReserveDown.setStatus('current')
if mibBuilder.loadTexts: nimbleGmSnapSpcReserveDown.setDescription('Volume snapshot space usage is below its reserve')
nimbleGmPoolMrgDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10240)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolMrgDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGmPoolMrgDeprecated.setDescription('Failed to merge pools.')
nimbleVolAttrSyncSuccess = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10241)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleVolAttrSyncSuccess.setStatus('current')
if mibBuilder.loadTexts: nimbleVolAttrSyncSuccess.setDescription('Volume attributes synchronization to arrays in the pool succeeded')
nimbleSnapAttrSyncDelay = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10242)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSnapAttrSyncDelay.setStatus('current')
if mibBuilder.loadTexts: nimbleSnapAttrSyncDelay.setDescription('Snapshot attributes synchronization to arrays in the pool delayed')
nimbleSnapAttrSyncSuccess = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10243)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSnapAttrSyncSuccess.setStatus('current')
if mibBuilder.loadTexts: nimbleSnapAttrSyncSuccess.setDescription('Snapshot attributes synchronization to arrays in the pool succeeded')
nimbleGroupAttrSyncDelay = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10244)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGroupAttrSyncDelay.setStatus('current')
if mibBuilder.loadTexts: nimbleGroupAttrSyncDelay.setDescription('Configuration synchronization to array delayed')
nimbleGroupAttrSyncComplete = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10245)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGroupAttrSyncComplete.setStatus('current')
if mibBuilder.loadTexts: nimbleGroupAttrSyncComplete.setDescription('Configuration synchronization completed for array')
nimbleGlCtrlrAttrSyncDelayDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10246)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGlCtrlrAttrSyncDelayDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGlCtrlrAttrSyncDelayDeprecated.setDescription('Group Leader Platform Configuration synchronization is delayed')
nimbleGlCtrlrAttrSyncCompleteDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10247)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGlCtrlrAttrSyncCompleteDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGlCtrlrAttrSyncCompleteDeprecated.setDescription('Group Leader Configuration synchronization completed')
nimbleGlCtrlrAttrSyncDelay = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10248)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGlCtrlrAttrSyncDelay.setStatus('current')
if mibBuilder.loadTexts: nimbleGlCtrlrAttrSyncDelay.setDescription('Configuration synchronization to array delayed')
nimbleGlCtrlrAttrSyncComplete = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10249)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGlCtrlrAttrSyncComplete.setStatus('current')
if mibBuilder.loadTexts: nimbleGlCtrlrAttrSyncComplete.setDescription('Configuration synchronization completed for array')
nimbleVolMoveComplete = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10250)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleVolMoveComplete.setStatus('current')
if mibBuilder.loadTexts: nimbleVolMoveComplete.setDescription('Volume completed move to destination pool')
nimbleVolMoveAbortComplete = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10251)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleVolMoveAbortComplete.setStatus('current')
if mibBuilder.loadTexts: nimbleVolMoveAbortComplete.setDescription('Volume completed aborting move to destination pool')
nimbleGmPoolArrUnassgnCompleteDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10252)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolArrUnassgnCompleteDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGmPoolArrUnassgnCompleteDeprecated.setDescription('Completed unassign of array from pool')
nimbleGmPoolArrUnassgnComplete = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10253)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolArrUnassgnComplete.setStatus('current')
if mibBuilder.loadTexts: nimbleGmPoolArrUnassgnComplete.setDescription('Completed unassign of array from pool')
nimbleGmPoolArrAssgn = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10256)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolArrAssgn.setStatus('current')
if mibBuilder.loadTexts: nimbleGmPoolArrAssgn.setDescription('Failed to assign array to pool')
nimbleGmPoolArrUnassgn = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10257)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolArrUnassgn.setStatus('current')
if mibBuilder.loadTexts: nimbleGmPoolArrUnassgn.setDescription('Failed to unassign array from pool')
nimbleGmPoolMrg = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10260)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolMrg.setStatus('current')
if mibBuilder.loadTexts: nimbleGmPoolMrg.setDescription('Failed to merge pools.')
nimbleGmVolSpcCurCritUpNonWritable = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10261)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcCurCritUpNonWritable.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcCurCritUpNonWritable.setDescription('Volume space usage approaching volume quota')
nimbleGmVolSpcCurQuotaNonWritable = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10262)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcCurQuotaNonWritable.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcCurQuotaNonWritable.setDescription('Volume being set to non-writable because it is above its volume quota')
nimbleGmSnapSpcCurCritUpNonWritable = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10263)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmSnapSpcCurCritUpNonWritable.setStatus('current')
if mibBuilder.loadTexts: nimbleGmSnapSpcCurCritUpNonWritable.setDescription('Volume snapshot space usage approaching snapshot quota')
nimbleGmVolSpcSnapQuotaNonWritable = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10264)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcSnapQuotaNonWritable.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcSnapQuotaNonWritable.setDescription('Volume being set to non-writable because it is above its snapshot quota')
nimbleGmVolSpcCurReserveNonWritable = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10265)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcCurReserveNonWritable.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcCurReserveNonWritable.setDescription('Volume being set to non-writable because it is above its reserve and system is out of free space')
nimbleGmVolSpcSnapReserveNonWritable = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10266)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmVolSpcSnapReserveNonWritable.setStatus('current')
if mibBuilder.loadTexts: nimbleGmVolSpcSnapReserveNonWritable.setDescription('Volume being set to non-writable because it is above its snapshot reserve and system is out of free space')
nimbleSchedSnapSucceededDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10300)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapSucceededDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapSucceededDeprecated.setDescription('Scheduled snapshot succeeded')
nimbleSchedSnapFailed = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10301)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailed.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailed.setDescription('Scheduled snapshot failed')
nimbleSchedSnapSkippedExists = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10302)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapSkippedExists.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapSkippedExists.setDescription('Scheduled snapshot skipped')
nimbleSchedSnapSkippedHandover = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10303)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapSkippedHandover.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapSkippedHandover.setDescription('Scheduled snapshot skipped')
nimbleSchedSnapSucceededLagInfoDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10304)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapSucceededLagInfoDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapSucceededLagInfoDeprecated.setDescription('Scheduled snapshot succeeded')
nimbleSchedSnapFailedVmwareCredentialDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10305)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareCredentialDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareCredentialDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareConnectionTimeoutDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10306)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionTimeoutDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionTimeoutDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareConnectionRefusedDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10307)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionRefusedDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionRefusedDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareConnectionResetDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10308)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionResetDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionResetDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareConnectionNorouteDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10309)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionNorouteDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionNorouteDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareConnectionSocketDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10310)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionSocketDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionSocketDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareConnectionUnreachableDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10311)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionUnreachableDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionUnreachableDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareDisabledDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10312)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareDisabledDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareDisabledDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareObjectnfDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10313)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareObjectnfDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareObjectnfDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwarePermissionDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10314)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwarePermissionDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwarePermissionDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareUkhostDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10315)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareUkhostDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareUkhostDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareEncodingPlainDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10316)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareEncodingPlainDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareEncodingPlainDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareNullDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10317)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareNullDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareNullDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareDcnotfoundDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10318)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareDcnotfoundDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareDcnotfoundDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareVolsnemptyDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10319)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareVolsnemptyDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareVolsnemptyDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareUnknownDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10320)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareUnknownDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareUnknownDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareBsizeDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10321)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareBsizeDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareBsizeDeprecated.setDescription('Scheduled snapshot succeeded with warning')
nimbleSchedSnapSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10322)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapSucceeded.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapSucceeded.setDescription('Scheduled snapshot succeeded')
nimbleSchedSnapSucceededLagInfo = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10323)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapSucceededLagInfo.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapSucceededLagInfo.setDescription('Scheduled snapshot succeeded')
nimbleSchedSnapFailedVmwareDisabledDeprecatedTwo = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10324)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareDisabledDeprecatedTwo.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareDisabledDeprecatedTwo.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareTimeoutDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10325)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareTimeoutDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareTimeoutDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareSnapNameMaxLengthExceededDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10326)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareSnapNameMaxLengthExceededDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareSnapNameMaxLengthExceededDeprecated.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFallback = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10327)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFallback.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFallback.setDescription('Application synchronization failed')
nimbleSchedSnapFailedVmwarePermissionPerVm = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10340)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwarePermissionPerVm.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwarePermissionPerVm.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareObjectnfPerVm = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10341)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareObjectnfPerVm.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareObjectnfPerVm.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareEncodingPlainPerVm = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10342)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareEncodingPlainPerVm.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareEncodingPlainPerVm.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareNullPerVm = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10343)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareNullPerVm.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareNullPerVm.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareDcnotfoundPerVm = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10344)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareDcnotfoundPerVm.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareDcnotfoundPerVm.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareVolsnemptyPerVm = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10345)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareVolsnemptyPerVm.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareVolsnemptyPerVm.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareUnknownPerVmDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10346)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareUnknownPerVmDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareUnknownPerVmDeprecated.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareBsizePerVm = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10347)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareBsizePerVm.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareBsizePerVm.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareDisabledPerVm = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10348)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareDisabledPerVm.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareDisabledPerVm.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareTimeoutPerVm = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10349)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareTimeoutPerVm.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareTimeoutPerVm.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareSnapNameMaxLengthExceededPerVm = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10350)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareSnapNameMaxLengthExceededPerVm.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareSnapNameMaxLengthExceededPerVm.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareGuestToolsNotRunningPerVm = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10351)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareGuestToolsNotRunningPerVm.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareGuestToolsNotRunningPerVm.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareInvalidVcenter = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10352)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareInvalidVcenter.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareInvalidVcenter.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareBusy = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10353)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareBusy.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareBusy.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVssIncompatible = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10354)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVssIncompatible.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVssIncompatible.setDescription('Scheduled snapshot failed')
nimbleSchedSnapFailedVmwareCredentialNw = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10355)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareCredentialNw.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareCredentialNw.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareConnectionTimeoutNw = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10356)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionTimeoutNw.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionTimeoutNw.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareConnectionRefusedNw = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10357)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionRefusedNw.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionRefusedNw.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareConnectionResetNw = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10358)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionResetNw.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionResetNw.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareConnectionNorouteNw = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10359)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionNorouteNw.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionNorouteNw.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareConnectionSocketNw = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10360)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionSocketNw.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionSocketNw.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareConnectionUnreachableNw = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10361)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionUnreachableNw.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionUnreachableNw.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareUkhostNw = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10362)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareUkhostNw.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareUkhostNw.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareConnectionUnknownNw = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10363)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionUnknownNw.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareConnectionUnknownNw.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareTimeoutNw = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10364)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareTimeoutNw.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareTimeoutNw.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareUnknownNw = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10365)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareUnknownNw.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareUnknownNw.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareUnknownPerVm = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10366)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareUnknownPerVm.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareUnknownPerVm.setDescription('Failed to synchronize with VMware vCenter')
nimbleSchedSnapFailedVmwareQuiescingVmFailed = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10367)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareQuiescingVmFailed.setStatus('current')
if mibBuilder.loadTexts: nimbleSchedSnapFailedVmwareQuiescingVmFailed.setDescription('Failed to synchronize with VMware vCenter')
nimbleGmSpaceReserveWarnUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10401)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmSpaceReserveWarnUp.setStatus('current')
if mibBuilder.loadTexts: nimbleGmSpaceReserveWarnUp.setDescription('Used space above warning limit')
nimbleGmSpaceReserveWarnDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10402)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmSpaceReserveWarnDown.setStatus('current')
if mibBuilder.loadTexts: nimbleGmSpaceReserveWarnDown.setDescription('Used space below warning limits')
nimbleGmSpaceReserveCritUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10403)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmSpaceReserveCritUp.setStatus('current')
if mibBuilder.loadTexts: nimbleGmSpaceReserveCritUp.setDescription('Used space above critical level')
nimbleGmSpaceReserveCritDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10404)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmSpaceReserveCritDown.setStatus('current')
if mibBuilder.loadTexts: nimbleGmSpaceReserveCritDown.setDescription('Used space below critical limits')
nimbleGmSpaceUtilizationOk = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10405)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmSpaceUtilizationOk.setStatus('current')
if mibBuilder.loadTexts: nimbleGmSpaceUtilizationOk.setDescription('Array space utilization OK')
nimbleGmSpaceUtilizationInfo = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10406)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmSpaceUtilizationInfo.setStatus('current')
if mibBuilder.loadTexts: nimbleGmSpaceUtilizationInfo.setDescription('High array space utilization')
nimbleGmSpaceUtilizationHigh = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10407)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmSpaceUtilizationHigh.setStatus('current')
if mibBuilder.loadTexts: nimbleGmSpaceUtilizationHigh.setDescription('High array space utilization')
nimbleGmSpaceUtilizationCrit = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10408)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmSpaceUtilizationCrit.setStatus('current')
if mibBuilder.loadTexts: nimbleGmSpaceUtilizationCrit.setDescription('Critically high array space utilization')
nimbleGmPoolSpaceReserveWarnUpDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10409)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolSpaceReserveWarnUpDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGmPoolSpaceReserveWarnUpDeprecated.setDescription('Used space in the pool above warning limit')
nimbleGmPoolSpaceReserveWarnDownDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10410)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolSpaceReserveWarnDownDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGmPoolSpaceReserveWarnDownDeprecated.setDescription('Used space in the pool below warning limits')
nimbleGmPoolSpaceReserveCritUpDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10411)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolSpaceReserveCritUpDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGmPoolSpaceReserveCritUpDeprecated.setDescription('Used space in the pool above critical level')
nimbleGmPoolSpaceReserveCritDownDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10412)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolSpaceReserveCritDownDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGmPoolSpaceReserveCritDownDeprecated.setDescription('Used space in the pool below critical limits')
nimbleGmPoolSpaceUtilizationOkDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10413)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolSpaceUtilizationOkDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGmPoolSpaceUtilizationOkDeprecated.setDescription('Pool space utilization OK')
nimbleGmPoolSpaceUtilizationInfoDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10414)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolSpaceUtilizationInfoDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGmPoolSpaceUtilizationInfoDeprecated.setDescription('High pool space utilization')
nimbleGmPoolSpaceUtilizationHighDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10415)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolSpaceUtilizationHighDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGmPoolSpaceUtilizationHighDeprecated.setDescription('High pool space utilization')
nimbleGmPoolSpaceUtilizationCritDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10416)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolSpaceUtilizationCritDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGmPoolSpaceUtilizationCritDeprecated.setDescription('Critically high pool space utilization')
nimbleGmPoolSpaceReserveWarnUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10417)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolSpaceReserveWarnUp.setStatus('current')
if mibBuilder.loadTexts: nimbleGmPoolSpaceReserveWarnUp.setDescription('Used space in the pool above warning limit')
nimbleGmPoolSpaceReserveWarnDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10418)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolSpaceReserveWarnDown.setStatus('current')
if mibBuilder.loadTexts: nimbleGmPoolSpaceReserveWarnDown.setDescription('Used space in the pool below warning limits')
nimbleGmPoolSpaceReserveCritUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10419)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolSpaceReserveCritUp.setStatus('current')
if mibBuilder.loadTexts: nimbleGmPoolSpaceReserveCritUp.setDescription('Used space in the pool above critical level')
nimbleGmPoolSpaceReserveCritDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10420)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolSpaceReserveCritDown.setStatus('current')
if mibBuilder.loadTexts: nimbleGmPoolSpaceReserveCritDown.setDescription('Used space in the pool below critical limits')
nimbleGmPoolSpaceUtilizationOk = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10421)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolSpaceUtilizationOk.setStatus('current')
if mibBuilder.loadTexts: nimbleGmPoolSpaceUtilizationOk.setDescription('Pool space utilization OK')
nimbleGmPoolSpaceUtilizationInfo = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10422)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolSpaceUtilizationInfo.setStatus('current')
if mibBuilder.loadTexts: nimbleGmPoolSpaceUtilizationInfo.setDescription('High pool space utilization')
nimbleGmPoolSpaceUtilizationHigh = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10423)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolSpaceUtilizationHigh.setStatus('current')
if mibBuilder.loadTexts: nimbleGmPoolSpaceUtilizationHigh.setDescription('High pool space utilization')
nimbleGmPoolSpaceUtilizationCrit = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10424)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmPoolSpaceUtilizationCrit.setStatus('current')
if mibBuilder.loadTexts: nimbleGmPoolSpaceUtilizationCrit.setDescription('Critically high pool space utilization')
nimbleLimitMaxOver = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10500)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleLimitMaxOver.setStatus('current')
if mibBuilder.loadTexts: nimbleLimitMaxOver.setDescription('Object count reached maximum limit')
nimbleLimitMaxUnder = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10501)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleLimitMaxUnder.setStatus('current')
if mibBuilder.loadTexts: nimbleLimitMaxUnder.setDescription('Object count under maximum limit')
nimbleLimitWarnOver = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10502)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleLimitWarnOver.setStatus('current')
if mibBuilder.loadTexts: nimbleLimitWarnOver.setDescription('Object count over warning limit')
nimbleLimitWarnUnder = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 10503)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleLimitWarnUnder.setStatus('current')
if mibBuilder.loadTexts: nimbleLimitWarnUnder.setDescription('Object count under warning limit')
nimbleReplSnapcollSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11000)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplSnapcollSucceeded.setStatus('current')
if mibBuilder.loadTexts: nimbleReplSnapcollSucceeded.setDescription('Replication succeeded')
nimbleReplSnapcollDelayedInfo = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11001)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplSnapcollDelayedInfo.setStatus('current')
if mibBuilder.loadTexts: nimbleReplSnapcollDelayedInfo.setDescription('Excessive replication delay')
nimbleReplSnapcollDelayedWarn = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11002)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplSnapcollDelayedWarn.setStatus('current')
if mibBuilder.loadTexts: nimbleReplSnapcollDelayedWarn.setDescription('Excessive replication delay')
nimbleReplPartnerSyncFail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11003)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplPartnerSyncFail.setStatus('current')
if mibBuilder.loadTexts: nimbleReplPartnerSyncFail.setDescription('Partner synchronization failed')
nimbleReplBranchPinned = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11004)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplBranchPinned.setStatus('current')
if mibBuilder.loadTexts: nimbleReplBranchPinned.setDescription('Volume replication stalled')
nimbleReplHandoverCompleted = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11005)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplHandoverCompleted.setStatus('current')
if mibBuilder.loadTexts: nimbleReplHandoverCompleted.setDescription('Volume collection handover completed')
nimbleReplMultiArrayGroup = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11006)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplMultiArrayGroup.setStatus('current')
if mibBuilder.loadTexts: nimbleReplMultiArrayGroup.setDescription('Replication between multi-array scaleout group and pre-scaleout array is not supported')
nimbleReplPartnerMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11007)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplPartnerMisconfiguration.setStatus('current')
if mibBuilder.loadTexts: nimbleReplPartnerMisconfiguration.setDescription('Replication between a scaleout group and pre-scaleout array must be configured over the management network')
nimbleReplSnapshotCorrectedDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11008)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplSnapshotCorrectedDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleReplSnapshotCorrectedDeprecated.setDescription('Replication resynchronized')
nimbleReplCbrRequestedDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11009)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplCbrRequestedDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleReplCbrRequestedDeprecated.setDescription('Resynchronization not supported')
nimbleReplCbrNeeded = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11010)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplCbrNeeded.setStatus('current')
if mibBuilder.loadTexts: nimbleReplCbrNeeded.setDescription('Resynchronization not supported')
nimbleReplSnapshotCorrectedDeprecated2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11011)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplSnapshotCorrectedDeprecated2.setStatus('current')
if mibBuilder.loadTexts: nimbleReplSnapshotCorrectedDeprecated2.setDescription('Replication resynchronized')
nimbleReplCbrRequestedDeprecated2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11012)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplCbrRequestedDeprecated2.setStatus('current')
if mibBuilder.loadTexts: nimbleReplCbrRequestedDeprecated2.setDescription('Resynchronization not supported')
nimbleReplPartnerAuthFailDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11013)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplPartnerAuthFailDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleReplPartnerAuthFailDeprecated.setDescription('Partner authentication failed')
nimbleReplSnapshotCorrected = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11014)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplSnapshotCorrected.setStatus('current')
if mibBuilder.loadTexts: nimbleReplSnapshotCorrected.setDescription('Replicated snapshot resynchronized')
nimbleReplCbrRequested = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11015)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplCbrRequested.setStatus('current')
if mibBuilder.loadTexts: nimbleReplCbrRequested.setDescription('Replicated snapshot resynchronization not supported')
nimbleReplPartnerAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 11016)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleReplPartnerAuthFail.setStatus('current')
if mibBuilder.loadTexts: nimbleReplPartnerAuthFail.setDescription('Replication partner authentication failed')
nimbleOvertempShutdownDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12000)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleOvertempShutdownDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleOvertempShutdownDeprecated.setDescription('Overtemperature shutdown')
nimbleCtrlrOvertempDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12001)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCtrlrOvertempDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleCtrlrOvertempDeprecated.setDescription('Controller overtemperature')
nimbleBackplaneOvertempDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12002)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleBackplaneOvertempDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleBackplaneOvertempDeprecated.setDescription('Backplane over-temperature')
nimbleDiskFailedCritDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12100)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDiskFailedCritDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleDiskFailedCritDeprecated.setDescription('Disk failed')
nimbleDiskFailedDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12101)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDiskFailedDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleDiskFailedDeprecated.setDescription('Disk failed')
nimbleDiskAbsentDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12102)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDiskAbsentDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleDiskAbsentDeprecated.setDescription('Disk missing')
nimbleDiskAddedDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12103)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDiskAddedDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleDiskAddedDeprecated.setDescription('Disk added')
nimbleDiskRemovedDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12104)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDiskRemovedDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleDiskRemovedDeprecated.setDescription('Disk removed')
nimbleSsdFailedDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12105)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSsdFailedDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSsdFailedDeprecated.setDescription('SSD failed')
nimbleSsdAbsentDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12106)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSsdAbsentDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSsdAbsentDeprecated.setDescription('SSD missing')
nimbleSsdAddedDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12107)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSsdAddedDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSsdAddedDeprecated.setDescription('SSD added')
nimbleSsdRemovedDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12108)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSsdRemovedDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSsdRemovedDeprecated.setDescription('SSD removed')
nimbleDiskInvalidLabel = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12109)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDiskInvalidLabel.setStatus('current')
if mibBuilder.loadTexts: nimbleDiskInvalidLabel.setDescription('Foreign disk detected')
nimbleSsdInvalidLabel = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12110)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSsdInvalidLabel.setStatus('current')
if mibBuilder.loadTexts: nimbleSsdInvalidLabel.setDescription('Foreign SSD detected')
nimbleDiskSizeMismatchDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12111)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDiskSizeMismatchDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleDiskSizeMismatchDeprecated.setDescription('Invalid disk size for this model')
nimbleHddFailedV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12112)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleHddFailedV2.setStatus('current')
if mibBuilder.loadTexts: nimbleHddFailedV2.setDescription('Disk failed')
nimbleHddAbsentV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12113)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleHddAbsentV2.setStatus('current')
if mibBuilder.loadTexts: nimbleHddAbsentV2.setDescription('Disk missing')
nimbleHddAddedV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12114)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleHddAddedV2.setStatus('current')
if mibBuilder.loadTexts: nimbleHddAddedV2.setDescription('Disk added')
nimbleHddRemovedV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12115)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleHddRemovedV2.setStatus('current')
if mibBuilder.loadTexts: nimbleHddRemovedV2.setDescription('Disk removed')
nimbleSsdFailedV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12116)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSsdFailedV2.setStatus('current')
if mibBuilder.loadTexts: nimbleSsdFailedV2.setDescription('SSD failed')
nimbleSsdAbsentV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12117)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSsdAbsentV2.setStatus('current')
if mibBuilder.loadTexts: nimbleSsdAbsentV2.setDescription('SSD missing')
nimbleSsdAddedV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12118)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSsdAddedV2.setStatus('current')
if mibBuilder.loadTexts: nimbleSsdAddedV2.setDescription('SSD added')
nimbleSsdRemovedV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12119)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSsdRemovedV2.setStatus('current')
if mibBuilder.loadTexts: nimbleSsdRemovedV2.setDescription('SSD removed')
nimbleSsdLastOne = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12120)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSsdLastOne.setStatus('current')
if mibBuilder.loadTexts: nimbleSsdLastOne.setDescription('Only one SSD drive left')
nimbleHddFailedV3 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12121)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleHddFailedV3.setStatus('current')
if mibBuilder.loadTexts: nimbleHddFailedV3.setDescription('Disk failed')
nimbleHddAddedV3 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12122)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleHddAddedV3.setStatus('current')
if mibBuilder.loadTexts: nimbleHddAddedV3.setDescription('Disk added')
nimbleHddRemovedV3 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12123)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleHddRemovedV3.setStatus('current')
if mibBuilder.loadTexts: nimbleHddRemovedV3.setDescription('Disk removed')
nimbleSsdFailedV3 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12124)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSsdFailedV3.setStatus('current')
if mibBuilder.loadTexts: nimbleSsdFailedV3.setDescription('SSD failed')
nimbleSsdAddedV3 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12125)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSsdAddedV3.setStatus('current')
if mibBuilder.loadTexts: nimbleSsdAddedV3.setDescription('SSD added')
nimbleSsdRemovedV3 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12126)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSsdRemovedV3.setStatus('current')
if mibBuilder.loadTexts: nimbleSsdRemovedV3.setDescription('SSD removed')
nimbleDiskSizeMismatchV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12127)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleDiskSizeMismatchV2.setStatus('current')
if mibBuilder.loadTexts: nimbleDiskSizeMismatchV2.setDescription('Invalid disk size for this shelf')
nimbleSsdSizeMismatchV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12128)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSsdSizeMismatchV2.setStatus('current')
if mibBuilder.loadTexts: nimbleSsdSizeMismatchV2.setDescription('Invalid SSD size for this shelf')
nimbleHddFailedAfsDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12129)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleHddFailedAfsDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleHddFailedAfsDeprecated.setDescription('Disk not supported on All Flash Shelf')
nimbleHddFailedAfs = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12130)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleHddFailedAfs.setStatus('current')
if mibBuilder.loadTexts: nimbleHddFailedAfs.setDescription('Disk not supported on All-Flash Shelf')
nimbleIpIfDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12200)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpIfDown.setStatus('current')
if mibBuilder.loadTexts: nimbleIpIfDown.setDescription('IP interface down')
nimbleIpIfUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12201)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpIfUp.setStatus('current')
if mibBuilder.loadTexts: nimbleIpIfUp.setDescription('IP interface up')
nimbleIpIfGroupUnavailDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12202)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpIfGroupUnavailDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleIpIfGroupUnavailDeprecated.setDescription('Group IP interface unavailable')
nimbleIpIfDataUnavailDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12203)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpIfDataUnavailDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleIpIfDataUnavailDeprecated.setDescription('All Data IP interfaces unavailable')
nimbleIpIfCantFailoverDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12204)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpIfCantFailoverDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleIpIfCantFailoverDeprecated.setDescription('IP connectivity lost')
nimbleSubnetNicMigrationDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12205)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSubnetNicMigrationDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSubnetNicMigrationDeprecated.setDescription('Migrating subnet NIC configuration')
nimbleSubnetNicMissingDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12206)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSubnetNicMissingDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleSubnetNicMissingDeprecated.setDescription('NIC for subnet missing')
nimbleIpNicMigrationDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12207)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpNicMigrationDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleIpNicMigrationDeprecated.setDescription('Migrating IP NIC configuration')
nimbleIpNicMissingDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12208)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpNicMissingDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleIpNicMissingDeprecated.setDescription('NIC for IP missing')
nimbleRouteNicMigrationDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12209)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRouteNicMigrationDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleRouteNicMigrationDeprecated.setDescription('Migrating route NIC configuration')
nimbleRouteNicMissingDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12210)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRouteNicMissingDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleRouteNicMissingDeprecated.setDescription('NIC for route missing')
nimbleIpIfFailover = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12211)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpIfFailover.setStatus('current')
if mibBuilder.loadTexts: nimbleIpIfFailover.setDescription('Standby controller has better network connectivity. Failing services over to standby controller')
nimbleIpDupFound = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12212)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpDupFound.setStatus('current')
if mibBuilder.loadTexts: nimbleIpDupFound.setDescription('Duplicate IP Address Detected')
nimbleIpIfDiscoveryUnavailDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12213)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpIfDiscoveryUnavailDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleIpIfDiscoveryUnavailDeprecated.setDescription('Discovery IP interface unavailable')
nimbleIpIfTargetUnavailDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12214)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpIfTargetUnavailDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleIpIfTargetUnavailDeprecated.setDescription('Target IP interfaces unavailable')
nimbleIpIfGroupUnavail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12215)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpIfGroupUnavail.setStatus('current')
if mibBuilder.loadTexts: nimbleIpIfGroupUnavail.setDescription('Link down for Group IP interface(s)')
nimbleIpIfDiscoveryUnavail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12216)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpIfDiscoveryUnavail.setStatus('current')
if mibBuilder.loadTexts: nimbleIpIfDiscoveryUnavail.setDescription('Link down for Discovery IP interface(s)')
nimbleIpIfTargetUnavail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12217)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpIfTargetUnavail.setStatus('current')
if mibBuilder.loadTexts: nimbleIpIfTargetUnavail.setDescription('Link down for Target IP interface(s)')
nimbleIpIfDataUnavail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12218)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpIfDataUnavail.setStatus('current')
if mibBuilder.loadTexts: nimbleIpIfDataUnavail.setDescription('Link down for Data IP interface(s)')
nimbleIpIfIscsiDataUnavail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12219)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpIfIscsiDataUnavail.setStatus('current')
if mibBuilder.loadTexts: nimbleIpIfIscsiDataUnavail.setDescription('Link down for iSCSI Data IP interface(s)')
nimbleIpIfClusterDataUnavail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12220)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpIfClusterDataUnavail.setStatus('current')
if mibBuilder.loadTexts: nimbleIpIfClusterDataUnavail.setDescription('Link down for cluster Data IP interface(s)')
nimbleUnresponsiveNicDetected = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12221)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUnresponsiveNicDetected.setStatus('current')
if mibBuilder.loadTexts: nimbleUnresponsiveNicDetected.setDescription('Unresponsive NIC Port Detected')
nimbleIpIfCantFailoverDeprecated2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12222)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpIfCantFailoverDeprecated2.setStatus('current')
if mibBuilder.loadTexts: nimbleIpIfCantFailoverDeprecated2.setDescription('IP connectivity lost')
nimbleIpIfCantFailover = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12223)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIpIfCantFailover.setStatus('current')
if mibBuilder.loadTexts: nimbleIpIfCantFailover.setDescription('Network connectivity lost')
nimbleSensorLinearWarn = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12301)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSensorLinearWarn.setStatus('current')
if mibBuilder.loadTexts: nimbleSensorLinearWarn.setDescription('Sensor: Alert raised')
nimbleSensorLinearClear = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12302)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSensorLinearClear.setStatus('current')
if mibBuilder.loadTexts: nimbleSensorLinearClear.setDescription('Sensor: Alert cleared')
nimbleSensorBoolWarn = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12303)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSensorBoolWarn.setStatus('current')
if mibBuilder.loadTexts: nimbleSensorBoolWarn.setDescription('Sensor: Alert raised')
nimbleSensorBoolClear = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12304)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSensorBoolClear.setStatus('current')
if mibBuilder.loadTexts: nimbleSensorBoolClear.setDescription('Sensor: Alert cleared')
nimbleSensorDoesNotExist = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12305)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleSensorDoesNotExist.setStatus('current')
if mibBuilder.loadTexts: nimbleSensorDoesNotExist.setDescription('Sensor: is missing?:')
nimbleNvramBattDisabled = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12306)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleNvramBattDisabled.setStatus('current')
if mibBuilder.loadTexts: nimbleNvramBattDisabled.setDescription('NVRAM battery is disabled')
nimbleNvramBattDisabledCrit = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12307)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleNvramBattDisabledCrit.setStatus('current')
if mibBuilder.loadTexts: nimbleNvramBattDisabledCrit.setDescription('NVRAM batteries are disabled')
nimbleNvramBattOk = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12308)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleNvramBattOk.setStatus('current')
if mibBuilder.loadTexts: nimbleNvramBattOk.setDescription('NVRAM battery is OK')
nimbleTempSensorHighDep = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12310)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorHighDep.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleTempSensorHighDep.setDescription('System temperature is warm')
nimbleTempSensorLowDep = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12311)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorLowDep.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleTempSensorLowDep.setDescription('System temperature is cold')
nimbleTempSensorOkDep = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12312)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorOkDep.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleTempSensorOkDep.setDescription('System temperature is ok')
nimbleTempSensorMissingDep = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12313)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorMissingDep.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleTempSensorMissingDep.setDescription('Temperature sensor failed')
nimbleTempSensorOperationalDep = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12314)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorOperationalDep.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleTempSensorOperationalDep.setDescription('Temperature sensor is ok')
nimbleFanSensorHighDep = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12315)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFanSensorHighDep.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleFanSensorHighDep.setDescription('Fan in high speed')
nimbleFanSensorLowDep = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12316)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFanSensorLowDep.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleFanSensorLowDep.setDescription('Fan in low speed')
nimbleFanSensorOkDep = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12317)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFanSensorOkDep.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleFanSensorOkDep.setDescription('Fan is ok')
nimbleFanSensorStoppedDep = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12318)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFanSensorStoppedDep.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleFanSensorStoppedDep.setDescription('Fan stopped')
nimbleFanSensorMissingDep = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12319)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFanSensorMissingDep.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleFanSensorMissingDep.setDescription('Fan missing')
nimblePwrSupplySensorFailDep = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12320)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimblePwrSupplySensorFailDep.setStatus('obsolete')
if mibBuilder.loadTexts: nimblePwrSupplySensorFailDep.setDescription('Power supply fail')
nimblePwrSupplySensorMissingDep = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12321)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimblePwrSupplySensorMissingDep.setStatus('obsolete')
if mibBuilder.loadTexts: nimblePwrSupplySensorMissingDep.setDescription('Power supply missing')
nimblePwrSupplySensorOkDep = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12322)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimblePwrSupplySensorOkDep.setStatus('obsolete')
if mibBuilder.loadTexts: nimblePwrSupplySensorOkDep.setDescription('Power supply is ok')
nimbleTempSensorHighDep2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12323)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorHighDep2.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleTempSensorHighDep2.setDescription('System temperature is warm')
nimbleTempSensorLowDep2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12324)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorLowDep2.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleTempSensorLowDep2.setDescription('System temperature is cold')
nimbleTempSensorOkDep2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12325)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorOkDep2.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleTempSensorOkDep2.setDescription('System temperature is ok')
nimbleTempSensorMissingDep2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12326)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorMissingDep2.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleTempSensorMissingDep2.setDescription('Temperature sensor failed')
nimbleTempSensorOperationalDep2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12327)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorOperationalDep2.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleTempSensorOperationalDep2.setDescription('Temperature sensor is ok')
nimbleFanSensorHighDep2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12328)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFanSensorHighDep2.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleFanSensorHighDep2.setDescription('Fan in high speed')
nimbleFanSensorLowDep2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12329)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFanSensorLowDep2.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleFanSensorLowDep2.setDescription('Fan in low speed')
nimbleFanSensorOkDep2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12330)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFanSensorOkDep2.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleFanSensorOkDep2.setDescription('Fan is ok')
nimbleFanSensorStoppedDep2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12331)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFanSensorStoppedDep2.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleFanSensorStoppedDep2.setDescription('Fan stopped')
nimbleFanSensorMissingDep2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12332)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFanSensorMissingDep2.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleFanSensorMissingDep2.setDescription('Fan missing')
nimblePwrSupplySensorFailDep2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12333)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimblePwrSupplySensorFailDep2.setStatus('obsolete')
if mibBuilder.loadTexts: nimblePwrSupplySensorFailDep2.setDescription('Power supply fail')
nimblePwrSupplySensorMissingDep2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12334)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimblePwrSupplySensorMissingDep2.setStatus('obsolete')
if mibBuilder.loadTexts: nimblePwrSupplySensorMissingDep2.setDescription('Power supply missing')
nimblePwrSupplySensorOkDep2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12335)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimblePwrSupplySensorOkDep2.setStatus('obsolete')
if mibBuilder.loadTexts: nimblePwrSupplySensorOkDep2.setDescription('Power supply is ok')
nimbleTempSensorHighDeprecatedDep2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12336)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorHighDeprecatedDep2.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleTempSensorHighDeprecatedDep2.setDescription('System temperature is warm')
nimbleTempSensorLow = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12337)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorLow.setStatus('current')
if mibBuilder.loadTexts: nimbleTempSensorLow.setDescription('System temperature is cold')
nimbleTempSensorOk = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12338)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorOk.setStatus('current')
if mibBuilder.loadTexts: nimbleTempSensorOk.setDescription('System temperature is OK')
nimbleTempSensorMissing = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12339)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorMissing.setStatus('current')
if mibBuilder.loadTexts: nimbleTempSensorMissing.setDescription('Temperature sensor failed')
nimbleTempSensorOperational = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12340)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorOperational.setStatus('current')
if mibBuilder.loadTexts: nimbleTempSensorOperational.setDescription('Temperature sensor is OK')
nimbleFanSensorHigh = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12341)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFanSensorHigh.setStatus('current')
if mibBuilder.loadTexts: nimbleFanSensorHigh.setDescription('Fan is at high speed')
nimbleFanSensorLow = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12342)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFanSensorLow.setStatus('current')
if mibBuilder.loadTexts: nimbleFanSensorLow.setDescription('Fan is at low speed')
nimbleFanSensorOk = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12343)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFanSensorOk.setStatus('current')
if mibBuilder.loadTexts: nimbleFanSensorOk.setDescription('Fan is OK')
nimbleFanSensorStopped = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12344)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFanSensorStopped.setStatus('current')
if mibBuilder.loadTexts: nimbleFanSensorStopped.setDescription('Fan stopped')
nimbleFanSensorMissing = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12345)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFanSensorMissing.setStatus('current')
if mibBuilder.loadTexts: nimbleFanSensorMissing.setDescription('Fan missing')
nimblePwrSupplySensorFail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12346)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimblePwrSupplySensorFail.setStatus('current')
if mibBuilder.loadTexts: nimblePwrSupplySensorFail.setDescription('Power supply fail')
nimblePwrSupplySensorMissing = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12347)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimblePwrSupplySensorMissing.setStatus('current')
if mibBuilder.loadTexts: nimblePwrSupplySensorMissing.setDescription('Power supply missing')
nimblePwrSupplySensorOk = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12348)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimblePwrSupplySensorOk.setStatus('current')
if mibBuilder.loadTexts: nimblePwrSupplySensorOk.setDescription('Power supply is OK')
nimbleRaidDegraded = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12400)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidDegraded.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidDegraded.setDescription('RAID array degraded')
nimbleRaidRebuildStart = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12401)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidRebuildStart.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidRebuildStart.setDescription('RAID array rebuild started')
nimbleRaidRebuildDone = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12402)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidRebuildDone.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidRebuildDone.setDescription('RAID array rebuild is done')
nimbleRaidRebuildFailRead = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12403)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidRebuildFailRead.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidRebuildFailRead.setDescription('RAID array rebuild failed')
nimbleRaidRebuildFail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12404)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidRebuildFail.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidRebuildFail.setDescription('RAID array rebuild failed')
nimbleRaidDisksMissing = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12405)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidDisksMissing.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidDisksMissing.setDescription('Disks missing from RAID array')
nimbleRaidSpare = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12406)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidSpare.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidSpare.setDescription('Disk marked as spare')
nimbleRaidAssemblyFailed = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12407)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidAssemblyFailed.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidAssemblyFailed.setDescription('Could not assemble RAID array')
nimbleRaidDegradedV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12408)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidDegradedV2.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidDegradedV2.setDescription('RAID array degraded')
nimbleRaidRebuildStartV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12409)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidRebuildStartV2.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidRebuildStartV2.setDescription('RAID array rebuild started')
nimbleRaidRebuildDoneV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12410)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidRebuildDoneV2.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidRebuildDoneV2.setDescription('RAID array rebuild is done')
nimbleRaidRebuildFailReadV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12411)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidRebuildFailReadV2.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidRebuildFailReadV2.setDescription('RAID array rebuild failed')
nimbleRaidRebuildFailV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12412)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidRebuildFailV2.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidRebuildFailV2.setDescription('RAID array rebuild failed')
nimbleRaidDisksMissingV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12413)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidDisksMissingV2.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidDisksMissingV2.setDescription('Disks missing from RAID array')
nimbleRaidSpareV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12414)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidSpareV2.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidSpareV2.setDescription('Disk marked as spare')
nimbleRaidAssemblyFailedV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12415)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidAssemblyFailedV2.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidAssemblyFailedV2.setDescription('Could not assemble RAID array')
nimbleRaidRebuildScheduledV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12416)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidRebuildScheduledV2.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidRebuildScheduledV2.setDescription('RAID array rebuild scheduled')
nimbleRaidRebuildStopV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12417)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleRaidRebuildStopV2.setStatus('current')
if mibBuilder.loadTexts: nimbleRaidRebuildStopV2.setDescription('RAID array rebuild stopped')
nimbleIscsiMultiInitiatorDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12500)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIscsiMultiInitiatorDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleIscsiMultiInitiatorDeprecated.setDescription('Multi initiator login')
nimbleIscsiConnHardLimitDeprecated1 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12501)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIscsiConnHardLimitDeprecated1.setStatus('current')
if mibBuilder.loadTexts: nimbleIscsiConnHardLimitDeprecated1.setDescription('Too many iscsi connections')
nimbleIscsiUnalignedOpsDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12502)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIscsiUnalignedOpsDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleIscsiUnalignedOpsDeprecated.setDescription('Too many unaligned iscsi reads/writes')
nimbleIscsiMultiInitiator = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12503)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIscsiMultiInitiator.setStatus('current')
if mibBuilder.loadTexts: nimbleIscsiMultiInitiator.setDescription('Multi initiator login')
nimbleIscsiConnHardLimitDeprecated2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12504)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIscsiConnHardLimitDeprecated2.setStatus('current')
if mibBuilder.loadTexts: nimbleIscsiConnHardLimitDeprecated2.setDescription('Too many iSCSI connections')
nimbleIscsiUnalignedOps = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12505)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIscsiUnalignedOps.setStatus('current')
if mibBuilder.loadTexts: nimbleIscsiUnalignedOps.setDescription('Too many unaligned iSCSI reads/writes')
nimbleIscsiConnHardLimit = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12506)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIscsiConnHardLimit.setStatus('current')
if mibBuilder.loadTexts: nimbleIscsiConnHardLimit.setDescription('Too many iSCSI connections')
nimbleIscsiErroneousItorConns = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12057)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleIscsiErroneousItorConns.setStatus('current')
if mibBuilder.loadTexts: nimbleIscsiErroneousItorConns.setDescription('iSCSI connections from initiator repeatedly closed by array due to improper target IP configuration')
nimbleNvramBattCharging = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12601)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleNvramBattCharging.setStatus('current')
if mibBuilder.loadTexts: nimbleNvramBattCharging.setDescription('NVRAM battery is charging')
nimbleNvramBattCharged = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12602)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleNvramBattCharged.setStatus('current')
if mibBuilder.loadTexts: nimbleNvramBattCharged.setDescription('NVRAM battery has finished charging')
nimbleNvramFpgaVersion = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12603)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleNvramFpgaVersion.setStatus('current')
if mibBuilder.loadTexts: nimbleNvramFpgaVersion.setDescription('NVRAM version is incompatible')
nimbleNvramMbeDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12604)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleNvramMbeDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleNvramMbeDeprecated.setDescription('NVRAM card multi-bit error (MBE) detected')
nimbleNvramSbeDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12605)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleNvramSbeDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleNvramSbeDeprecated.setDescription('NVRAM card single-bit error (SBE) detected')
nimbleNvramMbe = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12606)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleNvramMbe.setStatus('current')
if mibBuilder.loadTexts: nimbleNvramMbe.setDescription('NVRAM card non-correctable multi-bit error (MBE) detected')
nimbleNvramSbe = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12607)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleNvramSbe.setStatus('current')
if mibBuilder.loadTexts: nimbleNvramSbe.setDescription('NVRAM card correctable single-bit error (SBE) detected')
nimbleNvdimmReservedBlocksWarn = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12608)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleNvdimmReservedBlocksWarn.setStatus('current')
if mibBuilder.loadTexts: nimbleNvdimmReservedBlocksWarn.setDescription('NVDIMM reserved flash blocks reached the upper threshold')
nimbleNvdimmReservedBlocksCrit = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12609)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleNvdimmReservedBlocksCrit.setStatus('current')
if mibBuilder.loadTexts: nimbleNvdimmReservedBlocksCrit.setDescription('NVDIMM reserved flash blocks reached the lower threshold')
nimbleNvdimmUltracapDischargedDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12610)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleNvdimmUltracapDischargedDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleNvdimmUltracapDischargedDeprecated.setDescription('NVDIMM ultracap cacapcitance discharged')
nimbleNtbBadLink = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12611)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleNtbBadLink.setStatus('current')
if mibBuilder.loadTexts: nimbleNtbBadLink.setDescription('NTB_BAD_LINK')
nimbleNvdimmUltracapDischarged = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12612)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleNvdimmUltracapDischarged.setStatus('current')
if mibBuilder.loadTexts: nimbleNvdimmUltracapDischarged.setDescription('NVDIMM ultracap capacitance discharged')
nimbleNvramMissing = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12613)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleNvramMissing.setStatus('current')
if mibBuilder.loadTexts: nimbleNvramMissing.setDescription('NVRAM module missing')
nimbleShelfCtrlrSide = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12701)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfCtrlrSide.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfCtrlrSide.setDescription('Shelf controller connected to wrong side of host controller')
nimbleShelfSesErr = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12702)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfSesErr.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfSesErr.setDescription('Shelf SES device not ready')
nimbleShelfDiskSasLink = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12703)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfDiskSasLink.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfDiskSasLink.setDescription('SAS link of a shelf slot is degraded')
nimbleShelfDiskCount = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12704)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfDiskCount.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfDiskCount.setDescription('Not enough disk in shelf')
nimbleShelfInvalidEeprom = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12705)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfInvalidEeprom.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfInvalidEeprom.setDescription('System cannot read shelf serial number')
nimbleShelfWrongSasPortDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12706)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfWrongSasPortDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleShelfWrongSasPortDeprecated.setDescription('SAS cable connected to wrong port')
nimbleShelfSasLink = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12707)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfSasLink.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfSasLink.setDescription('SAS link(s) between the shelves is(are) degraded')
nimbleShelfSasExpErr = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12708)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfSasExpErr.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfSasExpErr.setDescription('SAS expander error')
nimbleShelfCtrlrLoop = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12709)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfCtrlrLoop.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfCtrlrLoop.setDescription('Shelf SAS loop detected')
nimbleShelfMissing = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12710)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfMissing.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfMissing.setDescription('Shelf appear only on one side of host controllers')
nimbleShelfOrder = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12711)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfOrder.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfOrder.setDescription('Shelf controller connection order mismatched')
nimbleShelfSesMshipErrDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12712)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfSesMshipErrDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleShelfSesMshipErrDeprecated.setDescription('Cannot access shelf SES device')
nimbleShelfFailover = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12713)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfFailover.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfFailover.setDescription('Controller failover due to shelf problem')
nimbleShelfNewShelf = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12714)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfNewShelf.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfNewShelf.setDescription('New Shelf detected')
nimbleShelfDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12715)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfDisconnect.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfDisconnect.setDescription('Shelf is disconnected')
nimbleShelfChassisSwap = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12716)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfChassisSwap.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfChassisSwap.setDescription('Shelf chassis swap detected')
nimbleShelfLocIdOverLimit = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12717)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfLocIdOverLimit.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfLocIdOverLimit.setDescription('Shelf daisy chain too long')
nimbleShelfActivatedDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12718)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfActivatedDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleShelfActivatedDeprecated.setDescription('New shelf is activated')
nimbleShelfReconnect = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12719)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfReconnect.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfReconnect.setDescription('Connection to shelf is restored')
nimbleShelfSasLinkDisabledDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12720)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfSasLinkDisabledDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleShelfSasLinkDisabledDeprecated.setDescription('SAS link disabled')
nimbleShelfDiskSasLinkErrDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12721)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfDiskSasLinkErrDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleShelfDiskSasLinkErrDeprecated.setDescription('Excessive link error on disk')
nimbleShelfWrongSasPortDeprecated2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12730)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfWrongSasPortDeprecated2.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfWrongSasPortDeprecated2.setDescription('SAS cable connected to wrong port')
nimbleShelfSesMshipErrDeprecated2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12731)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfSesMshipErrDeprecated2.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfSesMshipErrDeprecated2.setDescription('Cannot access shelf SES device')
nimbleShelfSasLinkDisabled = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12732)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfSasLinkDisabled.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfSasLinkDisabled.setDescription('SAS link disabled')
nimbleShelfDiskSasLinkErr = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12733)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfDiskSasLinkErr.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfDiskSasLinkErr.setDescription('Excessive link error on disk')
nimbleShelfWrongSasPort = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12734)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfWrongSasPort.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfWrongSasPort.setDescription('SAS cable connected to wrong port')
nimbleShelfSesMshipErrDeprecated3 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12735)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfSesMshipErrDeprecated3.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfSesMshipErrDeprecated3.setDescription('Cannot access shelf SES device')
nimbleShelfSesMshipErrDeprecated4 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12736)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfSesMshipErrDeprecated4.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfSesMshipErrDeprecated4.setDescription('Cannot access shelf SES device')
nimbleShelfActivatedV2Deprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12737)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfActivatedV2Deprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleShelfActivatedV2Deprecated.setDescription('New shelf is activated')
nimbleShelfSesMshipErr = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12738)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfSesMshipErr.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfSesMshipErr.setDescription('Cannot access shelf SES device')
nimbleShelfActivatedV2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12739)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleShelfActivatedV2.setStatus('current')
if mibBuilder.loadTexts: nimbleShelfActivatedV2.setDescription('New shelf activated')
nimblePhysMemMismatch = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 12901)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimblePhysMemMismatch.setStatus('current')
if mibBuilder.loadTexts: nimblePhysMemMismatch.setDescription('Physical memory detected is less than installed')
nimbleVolSysLimitWarnEnter = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 13101)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleVolSysLimitWarnEnter.setStatus('current')
if mibBuilder.loadTexts: nimbleVolSysLimitWarnEnter.setDescription('Total number of volumes approaching system limit')
nimbleVolSysLimitWarnExit = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 13102)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleVolSysLimitWarnExit.setStatus('current')
if mibBuilder.loadTexts: nimbleVolSysLimitWarnExit.setDescription('Total number of volumes below warning threshold')
nimbleGmTakeoverSuccessDeprecatedDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 13501)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmTakeoverSuccessDeprecatedDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGmTakeoverSuccessDeprecatedDeprecated.setDescription('Group Leader role takeover succeeded')
nimbleGmTakeoverSuccessDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 13504)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmTakeoverSuccessDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGmTakeoverSuccessDeprecated.setDescription('Group Leader role takeover succeeded')
nimbleGmTakeoverSuccess = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 13505)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmTakeoverSuccess.setStatus('current')
if mibBuilder.loadTexts: nimbleGmTakeoverSuccess.setDescription('Group Leader role take over succeeded')
nimbleGmMigrateFailure = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 13506)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmMigrateFailure.setStatus('current')
if mibBuilder.loadTexts: nimbleGmMigrateFailure.setDescription('Group Leader role migrate failed')
nimbleGmTakeoverRejectByArrayDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 13502)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmTakeoverRejectByArrayDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGmTakeoverRejectByArrayDeprecated.setDescription('Group Leader role takeover has been rejected by a member array')
nimbleGmTakeoverRejectByArray = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 13503)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmTakeoverRejectByArray.setStatus('current')
if mibBuilder.loadTexts: nimbleGmTakeoverRejectByArray.setDescription('Group Leader role takeover has been rejected by a member array')
nimbleGmGrpMrgDone = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 13601)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmGrpMrgDone.setStatus('current')
if mibBuilder.loadTexts: nimbleGmGrpMrgDone.setDescription('Group merge completed successfully')
nimbleGmGrpQscFail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 13602)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmGrpQscFail.setStatus('current')
if mibBuilder.loadTexts: nimbleGmGrpQscFail.setDescription('Failed to stop services on source group for group merge')
nimbleGmGrpMrgRollbackDone = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 13603)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmGrpMrgRollbackDone.setStatus('current')
if mibBuilder.loadTexts: nimbleGmGrpMrgRollbackDone.setDescription('Completed rollback of group merge operation')
nimbleGmGrpMrgReassFail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 13604)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmGrpMrgReassFail.setStatus('current')
if mibBuilder.loadTexts: nimbleGmGrpMrgReassFail.setDescription('Group merge operation is not complete on some arrays')
nimbleGmGrpMrgDbFail = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 13605)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmGrpMrgDbFail.setStatus('current')
if mibBuilder.loadTexts: nimbleGmGrpMrgDbFail.setDescription('Failed to merge configuration from source group')
nimbleGmBinMigContAbortDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 13701)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmBinMigContAbortDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleGmBinMigContAbortDeprecated.setDescription('Data Migration is getting delayed because of continuous restarts')
nimbleGmBinMigContAbort = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 13702)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleGmBinMigContAbort.setStatus('current')
if mibBuilder.loadTexts: nimbleGmBinMigContAbort.setDescription('Data migration is delayed because of repeated restarts')
nimbleCsmodelChanged = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14000)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCsmodelChanged.setStatus('current')
if mibBuilder.loadTexts: nimbleCsmodelChanged.setDescription('CS-Model changed')
nimbleCsmodelUnknown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14001)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCsmodelUnknown.setStatus('current')
if mibBuilder.loadTexts: nimbleCsmodelUnknown.setDescription('CS-Model unknown')
nimbleTempSensorHighDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14002)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorHighDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleTempSensorHighDeprecated.setDescription('The system temperature is beginning to exceed the allowable operating temperature. If it continues to exceed allowed operating temperature')
nimbleOvertempShutdownDeprecated2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14003)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleOvertempShutdownDeprecated2.setStatus('current')
if mibBuilder.loadTexts: nimbleOvertempShutdownDeprecated2.setDescription('Controller shutdown occurred due to excessive temperature')
nimbleCtrlrOvertemp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14004)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleCtrlrOvertemp.setStatus('current')
if mibBuilder.loadTexts: nimbleCtrlrOvertemp.setDescription('Controller exceeds allowable operating temperature')
nimbleBackplaneOvertemp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14005)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleBackplaneOvertemp.setStatus('current')
if mibBuilder.loadTexts: nimbleBackplaneOvertemp.setDescription('Backplane exceeds allowable operating temperature')
nimbleTempSensorHighDeprecated2 = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14006)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorHighDeprecated2.setStatus('current')
if mibBuilder.loadTexts: nimbleTempSensorHighDeprecated2.setDescription('System temperature is too high.')
nimbleTempSensorCrithighDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14007)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorCrithighDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimbleTempSensorCrithighDeprecated.setDescription('System temperature continues to be high.')
nimblePwrSupplySensorCallsupportDeprecated = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14008)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimblePwrSupplySensorCallsupportDeprecated.setStatus('obsolete')
if mibBuilder.loadTexts: nimblePwrSupplySensorCallsupportDeprecated.setDescription('Power supply down revisioned')
nimbleOvertempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14009)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleOvertempShutdown.setStatus('current')
if mibBuilder.loadTexts: nimbleOvertempShutdown.setDescription('Controller shutdown occurred due to excessive temperature')
nimblePwrSupplySensorCallsupport = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14010)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimblePwrSupplySensorCallsupport.setStatus('current')
if mibBuilder.loadTexts: nimblePwrSupplySensorCallsupport.setDescription('Power supply down revisioned')
nimbleTempSensorHigh = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14011)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorHigh.setStatus('current')
if mibBuilder.loadTexts: nimbleTempSensorHigh.setDescription('Array temperature is too high')
nimbleTempSensorCrithigh = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14012)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleTempSensorCrithigh.setStatus('current')
if mibBuilder.loadTexts: nimbleTempSensorCrithigh.setDescription('Array temperature continues to be high')
nimbleUpdateUnknownFirmware = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14200)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleUpdateUnknownFirmware.setStatus('current')
if mibBuilder.loadTexts: nimbleUpdateUnknownFirmware.setDescription('An unknown firmware version was detected')
nimbleFcLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14400)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFcLinkUp.setStatus('current')
if mibBuilder.loadTexts: nimbleFcLinkUp.setDescription('Fibre Channel link up')
nimbleFcLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14401)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFcLinkDown.setStatus('current')
if mibBuilder.loadTexts: nimbleFcLinkDown.setDescription('Fibre Channel link down')
nimbleFcLinkNotConnected = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14402)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleFcLinkNotConnected.setStatus('current')
if mibBuilder.loadTexts: nimbleFcLinkNotConnected.setDescription('Fibre Channel link not connected')
nimbleEventPurging = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14700)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleEventPurging.setStatus('current')
if mibBuilder.loadTexts: nimbleEventPurging.setDescription('Oldest events removed from the system')
nimbleEventWarnOver = NotificationType((1, 3, 6, 1, 4, 1, 37447, 2, 1, 2, 14701)).setObjects(("NIMBLE-TRAP-MIB", "trapMsg"), ("NIMBLE-TRAP-MIB", "trapSeverity"), ("NIMBLE-TRAP-MIB", "trapOriginatorName"), ("NIMBLE-TRAP-MIB", "trapOriginatorSerialNumber"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupName"), ("NIMBLE-TRAP-MIB", "trapOriginatorGroupID"), ("NIMBLE-TRAP-MIB", "trapTarget"), ("NIMBLE-TRAP-MIB", "trapTargetType"))
if mibBuilder.loadTexts: nimbleEventWarnOver.setStatus('current')
if mibBuilder.loadTexts: nimbleEventWarnOver.setDescription('Events count reached warning threshold')
mibBuilder.exportSymbols("NIMBLE-TRAP-MIB", nimbleNvramMbeDeprecated=nimbleNvramMbeDeprecated, nimbleFcLinkUp=nimbleFcLinkUp, nimbleUpdateUnknownFirmware=nimbleUpdateUnknownFirmware, nimbleSchedSnapFailedVmwareConnectionRefusedNw=nimbleSchedSnapFailedVmwareConnectionRefusedNw, nimbleGmVolSpcCurReserveOffline=nimbleGmVolSpcCurReserveOffline, nimbleReplSnapcollDelayedWarn=nimbleReplSnapcollDelayedWarn, nimbleSubnetNicMigrationDeprecated=nimbleSubnetNicMigrationDeprecated, nimbleSchedSnapFailedVmwareTimeoutNw=nimbleSchedSnapFailedVmwareTimeoutNw, trapTarget=trapTarget, nimblePwrSupplySensorFail=nimblePwrSupplySensorFail, nimbleDsdSpaceRedEntry=nimbleDsdSpaceRedEntry, nimbleSsdInvalidLabel=nimbleSsdInvalidLabel, nimbleIscsiMultiInitiator=nimbleIscsiMultiInitiator, nimbleSsdAddedDeprecated=nimbleSsdAddedDeprecated, nimbleShelfActivatedDeprecated=nimbleShelfActivatedDeprecated, nimbleSchedSnapFailedVmwareBusy=nimbleSchedSnapFailedVmwareBusy, nimbleSchedSnapFailedVmwareDisabledDeprecated=nimbleSchedSnapFailedVmwareDisabledDeprecated, nimbleVolSysLimitWarnEnter=nimbleVolSysLimitWarnEnter, nimbleRaidSpare=nimbleRaidSpare, nimbleServiceEssentialStopped=nimbleServiceEssentialStopped, trapvariables=trapvariables, nimbleSchedSnapFailedVmwareUnknownNw=nimbleSchedSnapFailedVmwareUnknownNw, nimbleNvramMissing=nimbleNvramMissing, nimbleCtrlrExceptionWarn=nimbleCtrlrExceptionWarn, nimbleHddRemovedV3=nimbleHddRemovedV3, nimbleGmPoolSpaceReserveWarnDownDeprecated=nimbleGmPoolSpaceReserveWarnDownDeprecated, nimbleGmPoolSpaceUtilizationHigh=nimbleGmPoolSpaceUtilizationHigh, nimbleSchedSnapFailedVmwareNullPerVm=nimbleSchedSnapFailedVmwareNullPerVm, nimbleIpIfCantFailover=nimbleIpIfCantFailover, nimbleGmPoolSpaceUtilizationInfoDeprecated=nimbleGmPoolSpaceUtilizationInfoDeprecated, nimbleDiskInvalidLabel=nimbleDiskInvalidLabel, nimbleFanSensorStopped=nimbleFanSensorStopped, nimbleSchedSnapFailedVmwareTimeoutDeprecated=nimbleSchedSnapFailedVmwareTimeoutDeprecated, nimbleSchedSnapFailedVmwareObjectnfPerVm=nimbleSchedSnapFailedVmwareObjectnfPerVm, nimbleOvertempShutdown=nimbleOvertempShutdown, nimbleShelfActivatedV2=nimbleShelfActivatedV2, nimbleServiceDeadNoRestart=nimbleServiceDeadNoRestart, nimbleSchedSnapFailedVmwareQuiescingVmFailed=nimbleSchedSnapFailedVmwareQuiescingVmFailed, nimbleVolSpcSnapQuotaDown=nimbleVolSpcSnapQuotaDown, nimbleTempSensorHighDeprecated2=nimbleTempSensorHighDeprecated2, nimbleSchedSnapFailedVmwareConnectionNorouteNw=nimbleSchedSnapFailedVmwareConnectionNorouteNw, nimbleSchedSnapSucceededDeprecated=nimbleSchedSnapSucceededDeprecated, nimbleUserReboot=nimbleUserReboot, nimbleGmPoolSpaceReserveWarnDown=nimbleGmPoolSpaceReserveWarnDown, nimbleTestNot=nimbleTestNot, nimbleGmVolSpcSnapReserveOffline=nimbleGmVolSpcSnapReserveOffline, nimbleShelfMissing=nimbleShelfMissing, nimbleSchedSnapFailedVmwareGuestToolsNotRunningPerVm=nimbleSchedSnapFailedVmwareGuestToolsNotRunningPerVm, nimbleUpdatePkgWrongSig=nimbleUpdatePkgWrongSig, nimbleIpIfGroupUnavailDeprecated=nimbleIpIfGroupUnavailDeprecated, nimbleFanSensorHighDep2=nimbleFanSensorHighDep2, nimbleGmPoolArrAssgn=nimbleGmPoolArrAssgn, nimbleRaidRebuildStartV2=nimbleRaidRebuildStartV2, nimbleUpdateNetDegrade=nimbleUpdateNetDegrade, nimbleGmVolSpcSnapWarningDown=nimbleGmVolSpcSnapWarningDown, nimbleRouteNicMigrationDeprecated=nimbleRouteNicMigrationDeprecated, nimbleGmGrpMrgReassFail=nimbleGmGrpMrgReassFail, nimbleCtrlrOvertemp=nimbleCtrlrOvertemp, nimbleSsdLastOne=nimbleSsdLastOne, nimbleSchedSnapFailedVssIncompatible=nimbleSchedSnapFailedVssIncompatible, nimbleUpdateUnpackFail=nimbleUpdateUnpackFail, nimbleIscsiConnHardLimitDeprecated1=nimbleIscsiConnHardLimitDeprecated1, nimbleSnapAttrSyncSuccess=nimbleSnapAttrSyncSuccess, nimbleTestNoteDeprecated=nimbleTestNoteDeprecated, nimbleShelfLocIdOverLimit=nimbleShelfLocIdOverLimit, nimbleSensorLinearClear=nimbleSensorLinearClear, nimbleGmVolSpcReserveUp=nimbleGmVolSpcReserveUp, nimbleTempSensorLowDep2=nimbleTempSensorLowDep2, nimbleFanSensorStoppedDep=nimbleFanSensorStoppedDep, nimbleSchedSnapSkippedExists=nimbleSchedSnapSkippedExists, nimbleShelfWrongSasPortDeprecated2=nimbleShelfWrongSasPortDeprecated2, nimbleArrayReachableDeprecated=nimbleArrayReachableDeprecated, nimbleSchedSnapFailedVmwareVolsnemptyDeprecated=nimbleSchedSnapFailedVmwareVolsnemptyDeprecated, nimbleUpdateArrayUnreachable=nimbleUpdateArrayUnreachable, nimbleVolMoveComplete=nimbleVolMoveComplete, nimbleGmPoolArrUnassgnComplete=nimbleGmPoolArrUnassgnComplete, nimbleSsdRemovedV2=nimbleSsdRemovedV2, nimbleTempSensorCrithighDeprecated=nimbleTempSensorCrithighDeprecated, nimbleGmSnapSpcReserveUp=nimbleGmSnapSpcReserveUp, nimbleGmPoolArrUnassgn=nimbleGmPoolArrUnassgn, nimbleTestNote=nimbleTestNote, nimbleReplPartnerMisconfiguration=nimbleReplPartnerMisconfiguration, nimbleRaidDisksMissing=nimbleRaidDisksMissing, nimbleSensorDoesNotExist=nimbleSensorDoesNotExist, nimbleHddFailedV2=nimbleHddFailedV2, nimbleUpdateSwitchRoot=nimbleUpdateSwitchRoot, nimbleGlCtrlrAttrSyncDelay=nimbleGlCtrlrAttrSyncDelay, nimbleServiceEmailAlertFailed=nimbleServiceEmailAlertFailed, trapObjects=trapObjects, nimbleGmSpaceReserveCritDown=nimbleGmSpaceReserveCritDown, nimbleDiskFailedDeprecated=nimbleDiskFailedDeprecated, nimbleCtrlrExceptionCrit=nimbleCtrlrExceptionCrit, nimbleTempSensorOkDep2=nimbleTempSensorOkDep2, nimblePwrSupplySensorCallsupportDeprecated=nimblePwrSupplySensorCallsupportDeprecated, nimbleNvramBattDisabledCrit=nimbleNvramBattDisabledCrit, nimbleTempSensorOkDep=nimbleTempSensorOkDep, nimbleUpdateFailMsg=nimbleUpdateFailMsg, nimbleVolSpcSnapWarningUp=nimbleVolSpcSnapWarningUp, nimbleGmPoolSpaceUtilizationCritDeprecated=nimbleGmPoolSpaceUtilizationCritDeprecated, nimbleSchedSnapFailedVmwareConnectionTimeoutDeprecated=nimbleSchedSnapFailedVmwareConnectionTimeoutDeprecated, nimbleGmVolSpcCurReserveSet=nimbleGmVolSpcCurReserveSet, nimbleSchedSnapSkippedHandover=nimbleSchedSnapSkippedHandover, nimbleIpIfIscsiDataUnavail=nimbleIpIfIscsiDataUnavail, nimbleTestCrit=nimbleTestCrit, nimbleUpdateDownloadFailed=nimbleUpdateDownloadFailed, nimblePwrSupplySensorFailDep2=nimblePwrSupplySensorFailDep2, nimblePhysMemMismatch=nimblePhysMemMismatch, nimbleGmGrpQscFail=nimbleGmGrpQscFail, nimbleRaidRebuildDoneV2=nimbleRaidRebuildDoneV2, nimbleGlCtrlrAttrSyncDelayDeprecated=nimbleGlCtrlrAttrSyncDelayDeprecated, nimbleTempSensorCrithigh=nimbleTempSensorCrithigh, nimbleSchedSnapFailedVmwareUnknownPerVm=nimbleSchedSnapFailedVmwareUnknownPerVm, nimbleDsdSpaceCrit0103Deprecated=nimbleDsdSpaceCrit0103Deprecated, nimbleSchedSnapSucceededLagInfoDeprecated=nimbleSchedSnapSucceededLagInfoDeprecated, nimbleArrayUnreachableDeprecated=nimbleArrayUnreachableDeprecated, nimbleGmVolSpcSnapQuotaSet=nimbleGmVolSpcSnapQuotaSet, nimbleNvdimmReservedBlocksCrit=nimbleNvdimmReservedBlocksCrit, nimbleUpdateUnpackStarted=nimbleUpdateUnpackStarted, nimbleGmPoolMrgDeprecated=nimbleGmPoolMrgDeprecated, nimbleIscsiConnHardLimit=nimbleIscsiConnHardLimit, nimbleGmPoolSpaceReserveCritUp=nimbleGmPoolSpaceReserveCritUp, nimbleGroupAttrSyncComplete=nimbleGroupAttrSyncComplete, nimblePwrSupplySensorOk=nimblePwrSupplySensorOk, nimbleGmGrpMrgRollbackDone=nimbleGmGrpMrgRollbackDone, nimbleNvramSbe=nimbleNvramSbe, nimbleSsdRemovedV3=nimbleSsdRemovedV3, nimbleVolSpcSnapQuotaUp=nimbleVolSpcSnapQuotaUp, nimbleLimitMaxOver=nimbleLimitMaxOver, nimbleGmSpaceReserveWarnUp=nimbleGmSpaceReserveWarnUp, nimbleShelfActivatedV2Deprecated=nimbleShelfActivatedV2Deprecated, nimbleGmPoolArrUnassgnDeprecated=nimbleGmPoolArrUnassgnDeprecated, trapSeverity=trapSeverity, nimbleGmSnapSpcReserveDown=nimbleGmSnapSpcReserveDown, nimbleFanSensorOkDep2=nimbleFanSensorOkDep2, nimbleIscsiUnalignedOps=nimbleIscsiUnalignedOps, nimbleDiskAbsentDeprecated=nimbleDiskAbsentDeprecated, nimbleFanSensorHigh=nimbleFanSensorHigh, nimbleIpIfDataUnavailDeprecated=nimbleIpIfDataUnavailDeprecated, nimbleUserHaltFailed=nimbleUserHaltFailed, trapTargetType=trapTargetType, nimbleGmVolSpcCurQuotaUp=nimbleGmVolSpcCurQuotaUp, nimbleSchedSnapFailedVmwareUnknownDeprecated=nimbleSchedSnapFailedVmwareUnknownDeprecated, nimbleNvramBattCharging=nimbleNvramBattCharging, nimbleDiskFailedCritDeprecated=nimbleDiskFailedCritDeprecated, nimbleGmVolSpcCurQuotaSet=nimbleGmVolSpcCurQuotaSet, nimbleUpdateFailConfigFsFull=nimbleUpdateFailConfigFsFull, nimbleSchedSnapSucceeded=nimbleSchedSnapSucceeded, nimbleGmVolSpcCurCritUpUnlim=nimbleGmVolSpcCurCritUpUnlim, nimbleCtrlrOvertempDeprecated=nimbleCtrlrOvertempDeprecated, nimbleRaidSpareV2=nimbleRaidSpareV2, nimbleUserRebootFailed=nimbleUserRebootFailed, nimbleBackplaneOvertemp=nimbleBackplaneOvertemp, nimbleReplCbrRequestedDeprecated=nimbleReplCbrRequestedDeprecated, nimbleGmVolSpcSnapQuotaUp=nimbleGmVolSpcSnapQuotaUp, nimbleNtbBadLink=nimbleNtbBadLink, nimbleTempSensorHighDep2=nimbleTempSensorHighDep2, nimbleReplSnapshotCorrectedDeprecated2=nimbleReplSnapshotCorrectedDeprecated2, nimbleDiskSizeMismatchDeprecated=nimbleDiskSizeMismatchDeprecated, nimbleCtrlrStandbyUnavailWarnTime=nimbleCtrlrStandbyUnavailWarnTime, nimbleHddFailedV3=nimbleHddFailedV3, nimbleNvramMbe=nimbleNvramMbe, nimbleGmTakeoverRejectByArrayDeprecated=nimbleGmTakeoverRejectByArrayDeprecated, nimbleHddAbsentV2=nimbleHddAbsentV2, nimbleDiskSizeMismatchV2=nimbleDiskSizeMismatchV2, nimbleShelfDiskCount=nimbleShelfDiskCount, nimbleRaidRebuildStopV2=nimbleRaidRebuildStopV2, nimbleEventPurging=nimbleEventPurging, nimbleIscsiMultiInitiatorDeprecated=nimbleIscsiMultiInitiatorDeprecated, nimbleRaidDisksMissingV2=nimbleRaidDisksMissingV2, nimbleIpNicMigrationDeprecated=nimbleIpNicMigrationDeprecated, nimbleTempSensorMissing=nimbleTempSensorMissing, nimbleFanSensorStoppedDep2=nimbleFanSensorStoppedDep2, nimbleShelfCtrlrLoop=nimbleShelfCtrlrLoop, nimbleSchedSnapFailedVmwareDisabledDeprecatedTwo=nimbleSchedSnapFailedVmwareDisabledDeprecatedTwo, nimbleSsdRemovedDeprecated=nimbleSsdRemovedDeprecated, nimbleShelfSesMshipErrDeprecated=nimbleShelfSesMshipErrDeprecated, nimbleNvramBattOk=nimbleNvramBattOk, nimbleSchedSnapFailedVmwareUkhostDeprecated=nimbleSchedSnapFailedVmwareUkhostDeprecated, nimbleShelfDisconnect=nimbleShelfDisconnect, nimbleUpdateSuccessDeprecated=nimbleUpdateSuccessDeprecated, nimbleSchedSnapFailedVmwareConnectionNorouteDeprecated=nimbleSchedSnapFailedVmwareConnectionNorouteDeprecated, nimbleShelfSasLinkDisabled=nimbleShelfSasLinkDisabled, nimbleDsdSpaceCrit=nimbleDsdSpaceCrit, nimbleGmTakeoverRejectByArray=nimbleGmTakeoverRejectByArray, nimbleGmVolSpcCurWarningDown=nimbleGmVolSpcCurWarningDown, nimbleGlCtrlrAttrSyncComplete=nimbleGlCtrlrAttrSyncComplete, nimbleIpIfCantFailoverDeprecated2=nimbleIpIfCantFailoverDeprecated2, nimbleGmVolSpcSnapWarningUp=nimbleGmVolSpcSnapWarningUp, nimbleFanSensorHighDep=nimbleFanSensorHighDep, nimbleLimitMaxUnder=nimbleLimitMaxUnder, nimbleGmBinMigContAbortDeprecated=nimbleGmBinMigContAbortDeprecated, nimbleSchedSnapFailedVmwareEncodingPlainPerVm=nimbleSchedSnapFailedVmwareEncodingPlainPerVm, nimblePwrSupplySensorCallsupport=nimblePwrSupplySensorCallsupport, nimbleSchedSnapFailedVmwareNullDeprecated=nimbleSchedSnapFailedVmwareNullDeprecated, nimblePwrSupplySensorFailDep=nimblePwrSupplySensorFailDep, nimbleSensorLinearWarn=nimbleSensorLinearWarn, nimbleTempSensorOperational=nimbleTempSensorOperational, nimbleHddFailedAfs=nimbleHddFailedAfs, nimbleSchedSnapFailedVmwareConnectionRefusedDeprecated=nimbleSchedSnapFailedVmwareConnectionRefusedDeprecated, nimbleSsdFailedV2=nimbleSsdFailedV2, nimbleArrayReachable=nimbleArrayReachable, nimbleDsdSpaceCrit0110Deprecated=nimbleDsdSpaceCrit0110Deprecated, nimbleUpdateArrayFailed=nimbleUpdateArrayFailed, nimbleTempSensorHighDeprecatedDep2=nimbleTempSensorHighDeprecatedDep2, trapOriginatorSerialNumber=trapOriginatorSerialNumber, nimbleDsdSpaceRedExit=nimbleDsdSpaceRedExit, nimbleIscsiConnHardLimitDeprecated2=nimbleIscsiConnHardLimitDeprecated2, nimbleGmVolSpcReserveDown=nimbleGmVolSpcReserveDown, nimbleRaidRebuildFail=nimbleRaidRebuildFail, nimbleNvramBattCharged=nimbleNvramBattCharged, nimbleUpdatePkgWrongCksum=nimbleUpdatePkgWrongCksum, nimbleSchedSnapFailedVmwareDisabledPerVm=nimbleSchedSnapFailedVmwareDisabledPerVm, nimbleGmSpaceReserveWarnDown=nimbleGmSpaceReserveWarnDown, nimbleGmPoolSpaceUtilizationOkDeprecated=nimbleGmPoolSpaceUtilizationOkDeprecated, nimbleSchedSnapFailedVmwareConnectionResetNw=nimbleSchedSnapFailedVmwareConnectionResetNw, nimbleGmBinMigContAbort=nimbleGmBinMigContAbort, nimbleGmPoolSpaceReserveCritDownDeprecated=nimbleGmPoolSpaceReserveCritDownDeprecated, nimbleShelfSesMshipErrDeprecated4=nimbleShelfSesMshipErrDeprecated4, nimbleServiceReboot=nimbleServiceReboot, nimbleVolSysLimitWarnExit=nimbleVolSysLimitWarnExit, nimbleCtrlrTakeover=nimbleCtrlrTakeover, nimbleCtrlrExcessiveRestarts=nimbleCtrlrExcessiveRestarts, nimbleDsdSpaceRedEntry0107Deprecated=nimbleDsdSpaceRedEntry0107Deprecated, trapOriginatorName=trapOriginatorName, nimbleCtrlrStandbyUnavailInfo=nimbleCtrlrStandbyUnavailInfo, nimbleUpdateDisallowSoloDeprecated=nimbleUpdateDisallowSoloDeprecated, nimbleGmSnapSpcCurCritDown=nimbleGmSnapSpcCurCritDown, nimbleSchedSnapFailedVmwarePermissionPerVm=nimbleSchedSnapFailedVmwarePermissionPerVm, nimbleReplPartnerAuthFailDeprecated=nimbleReplPartnerAuthFailDeprecated, nimbleShelfOrder=nimbleShelfOrder, nimbleSnapAttrSyncDelay=nimbleSnapAttrSyncDelay, nimbleFanSensorOkDep=nimbleFanSensorOkDep, nimbleCtrlrTakeoverWarn=nimbleCtrlrTakeoverWarn, nimbleFcLinkDown=nimbleFcLinkDown, nimbleUpdateArrayTimedOut=nimbleUpdateArrayTimedOut, nimbleSchedSnapFailedVmwareConnectionTimeoutNw=nimbleSchedSnapFailedVmwareConnectionTimeoutNw, nimbleGmMigrateFailure=nimbleGmMigrateFailure, nimbleGmVolSpcSnapQuotaDown=nimbleGmVolSpcSnapQuotaDown, nimbleReplPartnerAuthFail=nimbleReplPartnerAuthFail, nimbleGmGrpMrgDone=nimbleGmGrpMrgDone, nimbleSchedSnapFailedVmwareUkhostNw=nimbleSchedSnapFailedVmwareUkhostNw, nimbleRouteNicMissingDeprecated=nimbleRouteNicMissingDeprecated, nimbleGmSnapSpcCurCritUpNonWritable=nimbleGmSnapSpcCurCritUpNonWritable, nimbleSchedSnapFailedVmwareDcnotfoundPerVm=nimbleSchedSnapFailedVmwareDcnotfoundPerVm, nimbleShelfDiskSasLink=nimbleShelfDiskSasLink, nimbleSsdAbsentV2=nimbleSsdAbsentV2, nimbleServiceTerminateTunnel=nimbleServiceTerminateTunnel, PYSNMP_MODULE_ID=nimble_traps, nimbleRaidRebuildDone=nimbleRaidRebuildDone, nimbleVolMoveAbortComplete=nimbleVolMoveAbortComplete, nimblePwrSupplySensorOkDep=nimblePwrSupplySensorOkDep, nimbleRaidAssemblyFailedV2=nimbleRaidAssemblyFailedV2, nimbleRaidRebuildFailRead=nimbleRaidRebuildFailRead, nimbleRaidRebuildFailV2=nimbleRaidRebuildFailV2)
mibBuilder.exportSymbols("NIMBLE-TRAP-MIB", nimbleGmSpaceUtilizationHigh=nimbleGmSpaceUtilizationHigh, nimbleUnresponsiveNicDetected=nimbleUnresponsiveNicDetected, nimbleRaidAssemblyFailed=nimbleRaidAssemblyFailed, nimbleCtrlrStandbyUnavailWarnTimeDeprecated=nimbleCtrlrStandbyUnavailWarnTimeDeprecated, nimbleShelfReconnect=nimbleShelfReconnect, nimbleVolAttrSyncDelay=nimbleVolAttrSyncDelay, nimbleCtrlrFailoverDeprecated=nimbleCtrlrFailoverDeprecated, nimbleGmVolSpcCurReserveNonWritable=nimbleGmVolSpcCurReserveNonWritable, nimbleServiceDeadRestart=nimbleServiceDeadRestart, nimbleHddRemovedV2=nimbleHddRemovedV2, nimbleNvdimmUltracapDischargedDeprecated=nimbleNvdimmUltracapDischargedDeprecated, nimbleRaidDegradedV2=nimbleRaidDegradedV2, nimbleHddAddedV3=nimbleHddAddedV3, nimbleNvramFpgaVersion=nimbleNvramFpgaVersion, nimbleSchedSnapFailedVmwareCredentialNw=nimbleSchedSnapFailedVmwareCredentialNw, nimbleDsdRedEntry0101Deprecated=nimbleDsdRedEntry0101Deprecated, nimbleUserClearedSysCache=nimbleUserClearedSysCache, nimbleGmSpaceReserveCritUp=nimbleGmSpaceReserveCritUp, nimble_traps=nimble_traps, nimbleSchedSnapFailedVmwareConnectionUnreachableNw=nimbleSchedSnapFailedVmwareConnectionUnreachableNw, nimbleIpIfFailover=nimbleIpIfFailover, nimbleGmTakeoverSuccess=nimbleGmTakeoverSuccess, nimbleShelfSasLinkDisabledDeprecated=nimbleShelfSasLinkDisabledDeprecated, nimbleShelfFailover=nimbleShelfFailover, nimbleGmTakeoverSuccessDeprecatedDeprecated=nimbleGmTakeoverSuccessDeprecatedDeprecated, nimbleIpNicMissingDeprecated=nimbleIpNicMissingDeprecated, nimbleTempSensorMissingDep=nimbleTempSensorMissingDep, nimbleGmSpaceUtilizationInfo=nimbleGmSpaceUtilizationInfo, nimbleNvramBattDisabled=nimbleNvramBattDisabled, nimbleGmPoolSpaceReserveCritUpDeprecated=nimbleGmPoolSpaceReserveCritUpDeprecated, nimbleIscsiUnalignedOpsDeprecated=nimbleIscsiUnalignedOpsDeprecated, nimbleFanSensorMissingDep=nimbleFanSensorMissingDep, nimbleGmPoolSpaceUtilizationOk=nimbleGmPoolSpaceUtilizationOk, nimbleGmVolSpcCurCritUpNonWritable=nimbleGmVolSpcCurCritUpNonWritable, nimbleSsdFailedDeprecated=nimbleSsdFailedDeprecated, nimbleGroupAttrSyncDelay=nimbleGroupAttrSyncDelay, nimbleIpIfDown=nimbleIpIfDown, nimbleSchedSnapFailedVmwarePermissionDeprecated=nimbleSchedSnapFailedVmwarePermissionDeprecated, nimbleIpIfDataUnavail=nimbleIpIfDataUnavail, nimbleSsdAddedV2=nimbleSsdAddedV2, nimbleVolSpcCurQuotaDown=nimbleVolSpcCurQuotaDown, nimbleFcLinkNotConnected=nimbleFcLinkNotConnected, nimbleShelfSasExpErr=nimbleShelfSasExpErr, nimbleCsmodelChanged=nimbleCsmodelChanged, nimbleGmPoolSpaceUtilizationCrit=nimbleGmPoolSpaceUtilizationCrit, nimbleFanSensorLowDep=nimbleFanSensorLowDep, nimbleSchedSnapFailedVmwareConnectionSocketDeprecated=nimbleSchedSnapFailedVmwareConnectionSocketDeprecated, nimbleIpIfTargetUnavail=nimbleIpIfTargetUnavail, nimbleDiskAddedDeprecated=nimbleDiskAddedDeprecated, nimbleDsdSpaceUtilizationOk=nimbleDsdSpaceUtilizationOk, nimbleTempSensorOperationalDep2=nimbleTempSensorOperationalDep2, nimbleSchedSnapFailedVmwareTimeoutPerVm=nimbleSchedSnapFailedVmwareTimeoutPerVm, nimbleTempSensorHighDep=nimbleTempSensorHighDep, nimbleReplHandoverCompleted=nimbleReplHandoverCompleted, nimbleReplSnapcollSucceeded=nimbleReplSnapcollSucceeded, nimbleVolAttrSyncSuccess=nimbleVolAttrSyncSuccess, nimbleUpdateStarted=nimbleUpdateStarted, nimbleTempSensorLowDep=nimbleTempSensorLowDep, nimbleSensorBoolClear=nimbleSensorBoolClear, nimbleShelfDiskSasLinkErrDeprecated=nimbleShelfDiskSasLinkErrDeprecated, nimbleIpIfClusterDataUnavail=nimbleIpIfClusterDataUnavail, nimbleCsmodelUnknown=nimbleCsmodelUnknown, nimbleVolSpcCurQuotaUp=nimbleVolSpcCurQuotaUp, nimbleSsdAddedV3=nimbleSsdAddedV3, nimbleShelfWrongSasPortDeprecated=nimbleShelfWrongSasPortDeprecated, nimbleSchedSnapFailedVmwareUnknownPerVmDeprecated=nimbleSchedSnapFailedVmwareUnknownPerVmDeprecated, nimbleShelfCtrlrSide=nimbleShelfCtrlrSide, nimbleGmVolSpcCurCritDown=nimbleGmVolSpcCurCritDown, nimbleSchedSnapFailedVmwareDcnotfoundDeprecated=nimbleSchedSnapFailedVmwareDcnotfoundDeprecated, nimbleReplSnapshotCorrected=nimbleReplSnapshotCorrected, nimbleGmPoolArrUnassgnCompleteDeprecated=nimbleGmPoolArrUnassgnCompleteDeprecated, nimbleIpIfUp=nimbleIpIfUp, nimbleSchedSnapFailedVmwareInvalidVcenter=nimbleSchedSnapFailedVmwareInvalidVcenter, nimbleFanSensorMissing=nimbleFanSensorMissing, nimblePwrSupplySensorMissing=nimblePwrSupplySensorMissing, nimbleRaidRebuildScheduledV2=nimbleRaidRebuildScheduledV2, nimbleGmPoolSpaceReserveWarnUp=nimbleGmPoolSpaceReserveWarnUp, nimbleShelfSesMshipErr=nimbleShelfSesMshipErr, nimbleNvdimmReservedBlocksWarn=nimbleNvdimmReservedBlocksWarn, nimbleSchedSnapFailedVmwareBsizePerVm=nimbleSchedSnapFailedVmwareBsizePerVm, nimbleIpIfTargetUnavailDeprecated=nimbleIpIfTargetUnavailDeprecated, nimbleShelfNewShelf=nimbleShelfNewShelf, nimbleReplSnapcollDelayedInfo=nimbleReplSnapcollDelayedInfo, nimbleGmVolSpcSnapReserveNonWritable=nimbleGmVolSpcSnapReserveNonWritable, nimbleVolSpcCurWarningUp=nimbleVolSpcCurWarningUp, nimbleShelfSesErr=nimbleShelfSesErr, nimbleTestWarn=nimbleTestWarn, traps=traps, nimbleGmSnapSpcCurCritUp=nimbleGmSnapSpcCurCritUp, nimbleLimitWarnUnder=nimbleLimitWarnUnder, nimblePwrSupplySensorMissingDep=nimblePwrSupplySensorMissingDep, nimbleTestErr=nimbleTestErr, nimblePwrSupplySensorOkDep2=nimblePwrSupplySensorOkDep2, nimbleUpdatePrecheckFail=nimbleUpdatePrecheckFail, nimbleFanSensorLow=nimbleFanSensorLow, nimbleGmVolSpcSnapQuotaOffline=nimbleGmVolSpcSnapQuotaOffline, nimbleSchedSnapFailedVmwareConnectionUnreachableDeprecated=nimbleSchedSnapFailedVmwareConnectionUnreachableDeprecated, nimbleReplCbrNeeded=nimbleReplCbrNeeded, nimbleSubnetNicMissingDeprecated=nimbleSubnetNicMissingDeprecated, nimbleGmPoolSpaceReserveCritDown=nimbleGmPoolSpaceReserveCritDown, nimbleIpIfDiscoveryUnavail=nimbleIpIfDiscoveryUnavail, nimbleHddAddedV2=nimbleHddAddedV2, nimbleShelfDiskSasLinkErr=nimbleShelfDiskSasLinkErr, nimbleUpdateStartedDeprecated=nimbleUpdateStartedDeprecated, nimbleReplCbrRequested=nimbleReplCbrRequested, nimbleShelfSasLink=nimbleShelfSasLink, nimbleGmPoolSpaceUtilizationHighDeprecated=nimbleGmPoolSpaceUtilizationHighDeprecated, nimbleCtrlrFailover=nimbleCtrlrFailover, nimbleFanSensorMissingDep2=nimbleFanSensorMissingDep2, nimbleGmSpaceUtilizationCrit=nimbleGmSpaceUtilizationCrit, nimbleGmPoolMrg=nimbleGmPoolMrg, nimbleTempSensorMissingDep2=nimbleTempSensorMissingDep2, nimbleUpdateFailTmpFsFull=nimbleUpdateFailTmpFsFull, nimbleTestInfo=nimbleTestInfo, nimbleCtrlrException=nimbleCtrlrException, nimbleUpdateDisallowSolo=nimbleUpdateDisallowSolo, nimbleIpIfCantFailoverDeprecated=nimbleIpIfCantFailoverDeprecated, nimbleOvertempShutdownDeprecated2=nimbleOvertempShutdownDeprecated2, nimbleSsdSizeMismatchV2=nimbleSsdSizeMismatchV2, nimbleTempSensorOperationalDep=nimbleTempSensorOperationalDep, nimbleUpdateRevert=nimbleUpdateRevert, nimbleIscsiErroneousItorConns=nimbleIscsiErroneousItorConns, nimbleDsdSpaceUtilizationHigh=nimbleDsdSpaceUtilizationHigh, nimbleUpdateSuccess=nimbleUpdateSuccess, nimbleShelfChassisSwap=nimbleShelfChassisSwap, nimbleServiceEssentialStoppedDeprecated=nimbleServiceEssentialStoppedDeprecated, nimbleGmVolSpcSnapQuotaNonWritable=nimbleGmVolSpcSnapQuotaNonWritable, nimbleBackplaneOvertempDeprecated=nimbleBackplaneOvertempDeprecated, nimbleHddFailedAfsDeprecated=nimbleHddFailedAfsDeprecated, nimbleGmVolSpcCurWarningUp=nimbleGmVolSpcCurWarningUp, nimbleTempSensorOk=nimbleTempSensorOk, trapMsg=trapMsg, nimbleSchedSnapFailedVmwareObjectnfDeprecated=nimbleSchedSnapFailedVmwareObjectnfDeprecated, nimbleUpdateFailUsbFsFull=nimbleUpdateFailUsbFsFull, nimbleGmPoolSpaceReserveWarnUpDeprecated=nimbleGmPoolSpaceReserveWarnUpDeprecated, nimbleSensorBoolWarn=nimbleSensorBoolWarn, nimbleEventWarnOver=nimbleEventWarnOver, nimbleReplCbrRequestedDeprecated2=nimbleReplCbrRequestedDeprecated2, nimbleTestDbg=nimbleTestDbg, nimbleGmPoolArrAssgnDeprecated=nimbleGmPoolArrAssgnDeprecated, nimbleUpdateUnpackDone=nimbleUpdateUnpackDone, nimbleShelfWrongSasPort=nimbleShelfWrongSasPort, nimbleShelfSesMshipErrDeprecated3=nimbleShelfSesMshipErrDeprecated3, nimbleGmSnapSpcCurCritUpUnlim=nimbleGmSnapSpcCurCritUpUnlim, nimbleGmSpaceUtilizationOk=nimbleGmSpaceUtilizationOk, nimbleUpdateRaidDegrade=nimbleUpdateRaidDegrade, nimbleUpdateNetDegradeDeprecated=nimbleUpdateNetDegradeDeprecated, nimbleLimitWarnOver=nimbleLimitWarnOver, nimbleUpdateFailScratchFsFull=nimbleUpdateFailScratchFsFull, nimbleGmPoolSpaceUtilizationInfo=nimbleGmPoolSpaceUtilizationInfo, nimbleSchedSnapFailedVmwareConnectionSocketNw=nimbleSchedSnapFailedVmwareConnectionSocketNw, trapOriginatorGroupID=trapOriginatorGroupID, nimbleGmVolSpcCurQuotaNonWritable=nimbleGmVolSpcCurQuotaNonWritable, nimbleReplSnapshotCorrectedDeprecated=nimbleReplSnapshotCorrectedDeprecated, nimbleSchedSnapFailedVmwareConnectionResetDeprecated=nimbleSchedSnapFailedVmwareConnectionResetDeprecated, nimbleIpIfGroupUnavail=nimbleIpIfGroupUnavail, nimbleNvdimmUltracapDischarged=nimbleNvdimmUltracapDischarged, nimbleOvertempShutdownDeprecated=nimbleOvertempShutdownDeprecated, nimblePwrSupplySensorMissingDep2=nimblePwrSupplySensorMissingDep2, nimbleTempSensorHigh=nimbleTempSensorHigh, nimbleRaidDegraded=nimbleRaidDegraded, nimbleCtrlrStandbyUnavailWarn=nimbleCtrlrStandbyUnavailWarn, nimbleSchedSnapFailedVmwareSnapNameMaxLengthExceededDeprecated=nimbleSchedSnapFailedVmwareSnapNameMaxLengthExceededDeprecated, nimbleFanSensorLowDep2=nimbleFanSensorLowDep2, nimbleRaidRebuildStart=nimbleRaidRebuildStart, nimbleSsdFailedV3=nimbleSsdFailedV3, nimbleNvramSbeDeprecated=nimbleNvramSbeDeprecated, nimbleGmVolSpcSnapReserveSet=nimbleGmVolSpcSnapReserveSet, nimbleUpdateRollback=nimbleUpdateRollback, nimbleIpIfDiscoveryUnavailDeprecated=nimbleIpIfDiscoveryUnavailDeprecated, nimbleReplMultiArrayGroup=nimbleReplMultiArrayGroup, nimbleDiskRemovedDeprecated=nimbleDiskRemovedDeprecated, nimbleDsdSpaceUtilizationCrit=nimbleDsdSpaceUtilizationCrit, nimbleVolSpcSnapWarningDown=nimbleVolSpcSnapWarningDown, nimbleUpdateFailVarFsFull=nimbleUpdateFailVarFsFull, nimbleServiceStarted=nimbleServiceStarted, nimbleTempSensorHighDeprecated=nimbleTempSensorHighDeprecated, nimbleGmVolSpcCurQuotaOffline=nimbleGmVolSpcCurQuotaOffline, nimbleRaidRebuildFailReadV2=nimbleRaidRebuildFailReadV2, nimbleGmVolSpcCurQuotaDown=nimbleGmVolSpcCurQuotaDown, nimbleSchedSnapFailedVmwareConnectionUnknownNw=nimbleSchedSnapFailedVmwareConnectionUnknownNw, nimbleSchedSnapFailedVmwareSnapNameMaxLengthExceededPerVm=nimbleSchedSnapFailedVmwareSnapNameMaxLengthExceededPerVm, nimbleGlCtrlrAttrSyncCompleteDeprecated=nimbleGlCtrlrAttrSyncCompleteDeprecated, nimbleServiceEmailAlertFailedDeprecated=nimbleServiceEmailAlertFailedDeprecated, nimbleServiceCreateTunnel=nimbleServiceCreateTunnel, nimbleReplBranchPinned=nimbleReplBranchPinned, nimbleSchedSnapSucceededLagInfo=nimbleSchedSnapSucceededLagInfo, nimbleArrayUnreachable=nimbleArrayUnreachable, nimbleSchedSnapFailedVmwareBsizeDeprecated=nimbleSchedSnapFailedVmwareBsizeDeprecated, nimbleShelfInvalidEeprom=nimbleShelfInvalidEeprom, nimbleIpDupFound=nimbleIpDupFound, nimbleVolSpcCurWarningDown=nimbleVolSpcCurWarningDown, nimbleTempSensorLow=nimbleTempSensorLow, nimbleSchedSnapFailed=nimbleSchedSnapFailed, nimbleGmTakeoverSuccessDeprecated=nimbleGmTakeoverSuccessDeprecated, nimbleReplPartnerSyncFail=nimbleReplPartnerSyncFail, nimbleCtrlrStandbyAvail=nimbleCtrlrStandbyAvail, nimbleSchedSnapFallback=nimbleSchedSnapFallback, nimbleGmGrpMrgDbFail=nimbleGmGrpMrgDbFail, nimbleSchedSnapFailedVmwareVolsnemptyPerVm=nimbleSchedSnapFailedVmwareVolsnemptyPerVm, nimbleUpdatePkgNotFound=nimbleUpdatePkgNotFound, nimbleSchedSnapFailedVmwareCredentialDeprecated=nimbleSchedSnapFailedVmwareCredentialDeprecated, nimbleSsdAbsentDeprecated=nimbleSsdAbsentDeprecated, trapOriginatorGroupName=trapOriginatorGroupName, nimbleSchedSnapFailedVmwareEncodingPlainDeprecated=nimbleSchedSnapFailedVmwareEncodingPlainDeprecated, nimbleShelfSesMshipErrDeprecated2=nimbleShelfSesMshipErrDeprecated2, nimbleUserHalt=nimbleUserHalt, nimbleCtrlrStandbyUnavail=nimbleCtrlrStandbyUnavail, nimbleGmVolSpcCurCritUp=nimbleGmVolSpcCurCritUp, nimbleFanSensorOk=nimbleFanSensorOk)
