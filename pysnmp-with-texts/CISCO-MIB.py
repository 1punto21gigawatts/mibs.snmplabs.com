#
# PySNMP MIB module CISCO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:07:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ipAdEntAddr, = mibBuilder.importSymbols("IP-MIB", "ipAdEntAddr")
ipRouteDest, = mibBuilder.importSymbols("RFC1213-MIB", "ipRouteDest")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Bits, Gauge32, MibIdentifier, Integer32, TimeTicks, iso, Counter32, enterprises, Counter64, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "Gauge32", "MibIdentifier", "Integer32", "TimeTicks", "iso", "Counter32", "enterprises", "Counter64", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tcpConnLocalPort, tcpConnRemPort, tcpConnLocalAddress, tcpConnRemAddress = mibBuilder.importSymbols("TCP-MIB", "tcpConnLocalPort", "tcpConnRemPort", "tcpConnLocalAddress", "tcpConnRemAddress")
cisco = MibIdentifier((1, 3, 6, 1, 4, 1, 9))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1))
local = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2))
temporary = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3))
gateway_server = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 1)).setLabel("gateway-server")
terminal_server = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 2)).setLabel("terminal-server")
trouter = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 3))
protocol_translator = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 4)).setLabel("protocol-translator")
igs_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 5)).setLabel("igs-sysID")
c3000_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 6)).setLabel("c3000-sysID")
c4000_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 7)).setLabel("c4000-sysID")
c7000_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 8)).setLabel("c7000-sysID")
cs_500_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 9)).setLabel("cs-500-sysID")
c2000_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 10)).setLabel("c2000-sysID")
agsplus_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 11)).setLabel("agsplus-sysID")
c7010_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 12)).setLabel("c7010-sysID")
c2500_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 13)).setLabel("c2500-sysID")
c4500_sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 14)).setLabel("c4500-sysID")
lsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 1))
linterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 2))
lat = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 3))
lip = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 4))
licmp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 5))
ltcp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 6))
ludp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 7))
legp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 8))
lts = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 9))
lflash = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 10))
tmpdecnet = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 1))
tmpxns = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 2))
tmpappletalk = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 3))
tmpnovell = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 4))
tmpvines = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 5))
tmpchassis = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 3, 6))
romId = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: romId.setStatus('mandatory')
if mibBuilder.loadTexts: romId.setDescription('This variable contains a printable octet string which contains the System Bootstrap description and version identification.')
whyReload = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whyReload.setStatus('mandatory')
if mibBuilder.loadTexts: whyReload.setDescription('This variable contains a printable octet -- cisco MIB [Page 3] -- -- Request for Comments: Draft cisco Systems, Inc. string which contains the reason why the system was last restarted.')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostName.setStatus('mandatory')
if mibBuilder.loadTexts: hostName.setDescription('This variable represents the name of the host in printable ascii characters.')
domainName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainName.setStatus('mandatory')
if mibBuilder.loadTexts: domainName.setDescription('This variable is the domain portion of the domain name of the host.')
authAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authAddr.setStatus('mandatory')
if mibBuilder.loadTexts: authAddr.setDescription('This variable contains the last SNMP authorization failure IP address.')
bootHost = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootHost.setStatus('mandatory')
if mibBuilder.loadTexts: bootHost.setDescription('Contains the IP address of the host that supplied the currently running software.')
ping = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ping.setStatus('mandatory')
if mibBuilder.loadTexts: ping.setDescription('Supplies a way to ping a host from this entity. The ping variable takes the following instance identifiers: 1 - IP protocol ping. IP - address to ping. integer - count of packets to send. integer - size of ping packet. integer - timeout delay between packets.')
freeMem = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMem.setStatus('mandatory')
if mibBuilder.loadTexts: freeMem.setDescription('Return the amount of free memory in bytes.')
bufferElFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferElFree.setDescription('Contains the number of free buffer elements.')
bufferElMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferElMax.setDescription('Contains the maximum number of buffer elements.')
bufferElHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferElHit.setDescription('Contains the number of buffer element hits.')
bufferElMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferElMiss.setDescription('Contains the number of buffer element misses.')
bufferElCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferElCreate.setDescription('Contains the number of buffer element creates.')
bufferSmSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmSize.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmSize.setDescription('Contains the size of small buffers.')
bufferSmTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmTotal.setDescription('Contains the total number of small buffers.')
bufferSmFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmFree.setDescription('Contains the number of free small buffers.')
bufferSmMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmMax.setDescription('Contains the maximum number of small buffers.')
bufferSmHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmHit.setDescription('Contains the number of small buffer hits.')
bufferSmMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmMiss.setDescription('Contains the number of small buffer misses.')
bufferSmTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmTrim.setDescription('Contains the number of small buffer trims.')
bufferSmCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmCreate.setDescription('Contains the number of small buffer creates.')
bufferMdSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdSize.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdSize.setDescription('Contains the size of medium buffers.')
bufferMdTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdTotal.setDescription('Contains the total number of medium buffers.')
bufferMdFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdFree.setDescription('Contains the number of free medium buffers.')
bufferMdMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdMax.setDescription('Contains the maximum number of medium buffers.')
bufferMdHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdHit.setDescription('Contains the number of medium buffer hits.')
bufferMdMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdMiss.setDescription('Contains the number of medium buffer misses.')
bufferMdTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdTrim.setDescription('Contains the number of medium buffer trims.')
bufferMdCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdCreate.setDescription('Contains the number of medium buffer creates.')
bufferBgSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgSize.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgSize.setDescription('Contains the size of big buffers.')
bufferBgTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgTotal.setDescription('Contains the total number of big buffers.')
bufferBgFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgFree.setDescription('Contains the number of free big buffers.')
bufferBgMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgMax.setDescription('Contains the maximum number of big buffers.')
bufferBgHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgHit.setDescription('Contains the number of big buffer hits.')
bufferBgMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgMiss.setDescription('Contains the number of big buffer misses.')
bufferBgTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgTrim.setDescription('Contains the number of big buffer trims.')
bufferBgCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgCreate.setDescription('Contains the number of big buffer creates.')
bufferLgSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgSize.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgSize.setDescription('Contains the size of large buffers.')
bufferLgTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgTotal.setDescription('Contains the total number of large buffers.')
bufferLgFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgFree.setDescription('Contains the number of free large buffers.')
bufferLgMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgMax.setDescription('Contains the maximum number of large buffers.')
bufferLgHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgHit.setDescription('Contains the number of large buffer hits.')
bufferLgMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgMiss.setDescription('Contains the number of large buffer misses.')
bufferLgTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgTrim.setDescription('Contains the number of large buffer trims.')
bufferLgCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgCreate.setDescription('Contains the number of large buffer creates.')
bufferFail = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferFail.setStatus('mandatory')
if mibBuilder.loadTexts: bufferFail.setDescription('Count of the number of buffer allocation failures.')
bufferNoMem = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferNoMem.setStatus('mandatory')
if mibBuilder.loadTexts: bufferNoMem.setDescription('Count of the number of buffer create failures due to no free memory.')
netConfigAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 48), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigAddr.setStatus('mandatory')
if mibBuilder.loadTexts: netConfigAddr.setDescription('Holds the address of the host that supplied the network-confg file.')
netConfigName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: netConfigName.setDescription('Holds the name of the network configuration file.')
netConfigSet = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 50), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: netConfigSet.setStatus('mandatory')
if mibBuilder.loadTexts: netConfigSet.setDescription('Permit the loading of a new network-confg file using TFTP.')
hostConfigAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 51), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostConfigAddr.setStatus('mandatory')
if mibBuilder.loadTexts: hostConfigAddr.setDescription('Contains the address of the host that provided the host-config file.')
hostConfigName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: hostConfigName.setDescription('Contains the name of the last configured host-confg file.')
hostConfigSet = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 53), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: hostConfigSet.setStatus('mandatory')
if mibBuilder.loadTexts: hostConfigSet.setDescription('Permit the loading of a new host-confg file using TFTP.')
writeMem = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 54), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: writeMem.setStatus('mandatory')
if mibBuilder.loadTexts: writeMem.setDescription('Write configuration into non-volatile memory / erase config memory if 0.')
writeNet = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 55), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: writeNet.setStatus('mandatory')
if mibBuilder.loadTexts: writeNet.setDescription('Write configuration to host using TFTP.')
busyPer = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busyPer.setStatus('mandatory')
if mibBuilder.loadTexts: busyPer.setDescription('CPU busy percentage in the last 5 second period. Not the last 5 realtime seconds but the last 5 second period in the scheduler.')
avgBusy1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgBusy1.setStatus('mandatory')
if mibBuilder.loadTexts: avgBusy1.setDescription('1 minute exponentially-decayed moving average of the CPU busy percentage.')
avgBusy5 = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgBusy5.setStatus('mandatory')
if mibBuilder.loadTexts: avgBusy5.setDescription('5 minute exponentially-decayed moving average of the CPU busy percentage.')
idleCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleCount.setStatus('mandatory')
if mibBuilder.loadTexts: idleCount.setDescription('cisco internal variable. not to be used')
idleWired = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleWired.setStatus('mandatory')
if mibBuilder.loadTexts: idleWired.setDescription('cisco internal variable. not to be used')
ciscoContactInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoContactInfo.setStatus('mandatory')
if mibBuilder.loadTexts: ciscoContactInfo.setDescription("cisco's name and address")
bufferHgSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgSize.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgSize.setDescription('Contains the size of huge buffers.')
bufferHgTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgTotal.setDescription('Contains the total number of huge buffers.')
bufferHgFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgFree.setDescription('Contains the number of free huge buffers.')
bufferHgMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgMax.setDescription('Contains the maximum number of huge -- cisco MIB [Page 15] -- -- Request for Comments: Draft cisco Systems, Inc. buffers.')
bufferHgHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgHit.setDescription('Contains the number of huge buffer hits.')
bufferHgMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgMiss.setDescription('Contains the number of huge buffer misses.')
bufferHgTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgTrim.setDescription('Contains the number of huge buffer trims.')
bufferHgCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgCreate.setDescription('Contains the number of huge buffer creates.')
netConfigProto = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigProto.setStatus('mandatory')
if mibBuilder.loadTexts: netConfigProto.setDescription('Holds the protocol that supplied the network-confg file.')
hostConfigProto = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostConfigProto.setStatus('mandatory')
if mibBuilder.loadTexts: hostConfigProto.setDescription('Holds the protocol that supplied the host- confg file.')
sysConfigAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 72), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sysConfigAddr.setDescription('Holds the address of the host that supplied the system boot image.')
sysConfigName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 73), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: sysConfigName.setDescription('Holds the name of the system boot image.')
sysConfigProto = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigProto.setStatus('mandatory')
if mibBuilder.loadTexts: sysConfigProto.setDescription('Holds the protocol that supplied the system boot image.')
sysClearARP = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 75), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sysClearARP.setStatus('mandatory')
if mibBuilder.loadTexts: sysClearARP.setDescription('Perform a clearing of the entire ARP cache and invalidation of route caches.')
sysClearInt = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 76), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sysClearInt.setStatus('mandatory')
if mibBuilder.loadTexts: sysClearInt.setDescription('Clear interface given IfIndex as value.')
envPresent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPresent.setStatus('mandatory')
if mibBuilder.loadTexts: envPresent.setDescription('Is there an environmental monitor card in this box?, 0 - No, 1-AGS card present, wrong firmware, 2-AGS CARD present, firmware ok, 3-7000 support')
envTestPt1Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 78), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt1Descr.setDescription('Description of the test point 1. Typically ambient air or the temperature of air entering the router')
envTestPt1Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt1Measure.setDescription('Current value of test point 1. Typically a temperature in centigrade.')
envTestPt2Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 80), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt2Descr.setDescription('Description of the test point 2. Typically airflow or the temperature of air leaving the router')
envTestPt2Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt2Measure.setDescription('Current value of test point 2. Typically a temperature in centigrade.')
envTestPt3Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 82), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt3Descr.setDescription('Description of the test point 3. Typically +5 volt')
envTestPt3Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt3Measure.setDescription('Current value of test point 3. Typically the value in millivolts of the +5v supply')
envTestPt4Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 84), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt4Descr.setDescription('Description of the test point 4. Typically +12 volt')
envTestPt4Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt4Measure.setDescription('Current value of test point 4. Typically the value in millivolts of the +12v supply')
envTestPt5Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 86), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt5Descr.setDescription('Description of the test point 5. Typically -12 volt')
envTestPt5Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt5Measure.setDescription('Current value of test point 5. Typically the value in millivolts of the -12v supply')
envTestPt6Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 88), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt6Descr.setDescription('Description of the test point 6. Typically -5 volt')
envTestPt6Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt6Measure.setDescription('Current value of test point 6. Typically the value in millivolts of the -5v supply')
envTestPt1MarginVal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1MarginVal.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt1MarginVal.setDescription('Value at which the router will shutdown. Typically the ambient air temperature that will shut the router down. (e.g. 43)')
envTestPt2MarginVal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2MarginVal.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt2MarginVal.setDescription('Value at which the router will shutdown. Typically the airflow air temperature that will shut the router down. (e.g. 58)')
envTestPt3MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3MarginPercent.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt3MarginPercent.setDescription('+/- Percentage that will shut the router down, (e.g. 10%) typically +5 volt')
envTestPt4MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4MarginPercent.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt4MarginPercent.setDescription('+/- Percentage that will shut the router down, (e.g. 15%) typically +12 volt')
envTestPt5MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5MarginPercent.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt5MarginPercent.setDescription('+/- Percentage that will shut the router down, (e.g. 15%) typically -12 volt')
envTestPt6MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6MarginPercent.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt6MarginPercent.setDescription('+/- Percentage that will shut the router down, (e.g. 10%) typically -5 volt')
envTestPt1last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt1last.setDescription('Value of TestPt1 when last shutdown occurred.')
envTestPt2last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt2last.setDescription('Value of TestPt2 when last shutdown occurred.')
envTestPt3last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt3last.setDescription('Value of TestPt3 when last shutdown occurred.')
envTestPt4last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt4last.setDescription('Value of TestPt4 when last shutdown occurred.')
envTestPt5last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt5last.setDescription('Value of TestPt5 when last shutdown occurred.')
envTestPt6last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt6last.setDescription('Value of TestPt6 when last shutdown occurred.')
envTestPt1warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt1warn.setDescription('Is this test point at a warning level?')
envTestPt2warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt2warn.setDescription('Is this test point at a warning level?')
envTestPt3warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt3warn.setDescription('Is this test point at a warning level?')
envTestPt4warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt4warn.setDescription('Is this test point at a warning level?')
envTestPt5warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt5warn.setDescription('Is this test point at a warning level?')
envTestPt6warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt6warn.setDescription('Is this test point at a warning level?')
envFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 108), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFirmVersion.setStatus('mandatory')
if mibBuilder.loadTexts: envFirmVersion.setDescription('Description of Environmental Card firmware')
envTechnicianID = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 109), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTechnicianID.setStatus('mandatory')
if mibBuilder.loadTexts: envTechnicianID.setDescription('Technician ID')
envType = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 110), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envType.setStatus('mandatory')
if mibBuilder.loadTexts: envType.setDescription('The type of environmental card')
envBurnDate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 111), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envBurnDate.setStatus('mandatory')
if mibBuilder.loadTexts: envBurnDate.setDescription('The calibration / burn in date')
envSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 112), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: envSerialNumber.setDescription('Serial Number of environmental monitor card')
lifTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 2, 1), )
if mibBuilder.loadTexts: lifTable.setStatus('mandatory')
if mibBuilder.loadTexts: lifTable.setDescription('A list of interface entries.')
lifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lifEntry.setDescription('A collection of additional objects in the cisco interface.')
locIfHardType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfHardType.setStatus('mandatory')
if mibBuilder.loadTexts: locIfHardType.setDescription('Returns the type of interface.')
locIfLineProt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLineProt.setStatus('mandatory')
if mibBuilder.loadTexts: locIfLineProt.setDescription('Boolean whether interface line protocol is up or not.')
locIfLastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLastIn.setStatus('mandatory')
if mibBuilder.loadTexts: locIfLastIn.setDescription('Elapsed time in milliseconds since last line protocol input packet was received.')
locIfLastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLastOut.setStatus('mandatory')
if mibBuilder.loadTexts: locIfLastOut.setDescription('Elapsed time in milliseconds since last line protocol output packet was transmitted.')
locIfLastOutHang = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLastOutHang.setStatus('mandatory')
if mibBuilder.loadTexts: locIfLastOutHang.setDescription('Elapsed time in milliseconds since last line protocol output packet could not be successfully transmitted.')
locIfInBitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInBitsSec.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInBitsSec.setDescription('Five minute exponentially-decayed moving average of input bits per second.')
locIfInPktsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInPktsSec.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInPktsSec.setDescription('Five minute exponentially-decayed moving average of input packets per second.')
locIfOutBitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfOutBitsSec.setStatus('mandatory')
if mibBuilder.loadTexts: locIfOutBitsSec.setDescription('Five minute exponentially-decayed moving average of output bits per second.')
locIfOutPktsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfOutPktsSec.setStatus('mandatory')
if mibBuilder.loadTexts: locIfOutPktsSec.setDescription('Five minute exponentially-decayed moving average of output packets per second.')
locIfInRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInRunts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInRunts.setDescription('Number of packets input which were smaller then the allowable physical media permitted.')
locIfInGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInGiants.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInGiants.setDescription('Number of input packets which were larger then the physical media permitted.')
locIfInCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInCRC.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInCRC.setDescription('Number of input packets which had cyclic redundancy checksum errors.')
locIfInFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInFrame.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInFrame.setDescription('Number of input packet which were misaligned.')
locIfInOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInOverrun.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInOverrun.setDescription('Count of input which arrived too quickly for the to hardware receive.')
locIfInIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInIgnored.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInIgnored.setDescription('Number of input packets which were simply ignored by this interface.')
locIfInAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInAbort.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInAbort.setDescription('Number of input packets which were aborted.')
locIfResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfResets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfResets.setDescription('Number of times the interface internally reset.')
locIfRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfRestarts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfRestarts.setDescription('Number of times interface needed to be completely restarted.')
locIfKeep = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfKeep.setStatus('mandatory')
if mibBuilder.loadTexts: locIfKeep.setDescription('Boolean whether keepalives are enabled on this interface.')
locIfReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfReason.setStatus('mandatory')
if mibBuilder.loadTexts: locIfReason.setDescription('Reason for interface last status change.')
locIfCarTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfCarTrans.setStatus('mandatory')
if mibBuilder.loadTexts: locIfCarTrans.setDescription('Number of times interface saw the carrier signal transition.')
locIfReliab = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfReliab.setStatus('mandatory')
if mibBuilder.loadTexts: locIfReliab.setDescription('The reliability of the interface. Used by IGRP.')
locIfDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfDelay.setStatus('mandatory')
if mibBuilder.loadTexts: locIfDelay.setDescription('The amount of delay in microseconds of the interface. Used by IGRP.')
locIfLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLoad.setStatus('mandatory')
if mibBuilder.loadTexts: locIfLoad.setDescription('The loading factor of the interface. Used by IGRP.')
locIfCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: locIfCollisions.setDescription('The number of output collisions detected on this interface.')
locIfInputQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInputQueueDrops.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInputQueueDrops.setDescription('The number of packets dropped because the input queue was full.')
locIfOutputQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfOutputQueueDrops.setStatus('mandatory')
if mibBuilder.loadTexts: locIfOutputQueueDrops.setDescription('The number of packets dropped because the output queue was full.')
locIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locIfDescr.setStatus('mandatory')
if mibBuilder.loadTexts: locIfDescr.setDescription('User configurable interface description.')
locIfSlowInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfSlowInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfSlowInPkts.setDescription('Packet count for Inbound traffic routed with slow switching')
locIfSlowOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfSlowOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfSlowOutPkts.setDescription('Packet count for Outbound traffic routed with slow switching')
locIfSlowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfSlowInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfSlowInOctets.setDescription('Octet count for Inbound traffic routed with slow switching')
locIfSlowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfSlowOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfSlowOutOctets.setDescription('Octet count for Outbound traffic routed with slow switching')
locIfFastInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFastInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFastInPkts.setDescription('Packet count for Inbound traffic routed with fast switching')
locIfFastOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFastOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFastOutPkts.setDescription('Packet count for Outbound traffic routed with fast switching')
locIfFastInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFastInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFastInOctets.setDescription('Octet count for Inbound traffic routed with fast switching')
locIfFastOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFastOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFastOutOctets.setDescription('Octet count for Outbound traffic routed with fast switching')
locIfotherInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfotherInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfotherInPkts.setDescription('Other protocol input packet count')
locIfotherOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfotherOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfotherOutPkts.setDescription('Other protocol output packet count')
locIfotherInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfotherInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfotherInOctets.setDescription('Other protocol input octet count')
locIfotherOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfotherOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfotherOutOctets.setDescription('Other protocol output octet count')
locIfipInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfipInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfipInPkts.setDescription('ip protocol input packet count')
locIfipOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfipOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfipOutPkts.setDescription('ip protocol output packet count')
locIfipInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfipInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfipInOctets.setDescription('ip protocol input octet count')
locIfipOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfipOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfipOutOctets.setDescription('ip protocol output octet count')
locIfdecnetInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfdecnetInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfdecnetInPkts.setDescription('Decnet protocol input packet count')
locIfdecnetOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfdecnetOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfdecnetOutPkts.setDescription('Decnet protocol output packet count')
locIfdecnetInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfdecnetInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfdecnetInOctets.setDescription('Decnet protocol input byte count')
locIfdecnetOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfdecnetOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfdecnetOutOctets.setDescription('Decnet protocol output byte count')
locIfxnsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfxnsInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfxnsInPkts.setDescription('XNS protocol input packet count')
locIfxnsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfxnsOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfxnsOutPkts.setDescription('XNS protocol output packet count')
locIfxnsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfxnsInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfxnsInOctets.setDescription('XNS protocol input byte count')
locIfxnsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfxnsOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfxnsOutOctets.setDescription('XNS protocol output byte count')
locIfclnsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfclnsInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfclnsInPkts.setDescription('CLNS protocol input packet count')
locIfclnsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfclnsOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfclnsOutPkts.setDescription('CLNS protocol output packet count')
locIfclnsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfclnsInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfclnsInOctets.setDescription('CLNS protocol input byte count')
locIfclnsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfclnsOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfclnsOutOctets.setDescription('CLNS protocol output byte count')
locIfappletalkInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfappletalkInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfappletalkInPkts.setDescription('Appletalk protocol input packet count')
locIfappletalkOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfappletalkOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfappletalkOutPkts.setDescription('Appletalk protocol output packet count')
locIfappletalkInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfappletalkInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfappletalkInOctets.setDescription('Appletalk protocol input octet count')
locIfappletalkOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfappletalkOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfappletalkOutOctets.setDescription('Appletalk protocol output octet count')
locIfnovellInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfnovellInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfnovellInPkts.setDescription('Novell protocol input packet count')
locIfnovellOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfnovellOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfnovellOutPkts.setDescription('Novell protocol output packet count')
locIfnovellInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfnovellInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfnovellInOctets.setDescription('Novell protocol input octet count')
locIfnovellOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfnovellOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfnovellOutOctets.setDescription('Novell protocol output octet count')
locIfapolloInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfapolloInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfapolloInPkts.setDescription('Apollo protocol input packet count')
locIfapolloOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfapolloOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfapolloOutPkts.setDescription('Apollo protocol output packet count')
locIfapolloInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfapolloInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfapolloInOctets.setDescription('Apollo protocol input octet count')
locIfapolloOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfapolloOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfapolloOutOctets.setDescription('Apollo protocol output octet count')
locIfvinesInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfvinesInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfvinesInPkts.setDescription('Vines protocol input packet count')
locIfvinesOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfvinesOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfvinesOutPkts.setDescription('Vines protocol output packet count')
locIfvinesInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfvinesInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfvinesInOctets.setDescription('Vines protocol input octet count')
locIfvinesOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfvinesOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfvinesOutOctets.setDescription('Vines protocol output octet count')
locIfbridgedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfbridgedInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfbridgedInPkts.setDescription('Bridged protocol input packet count')
locIfbridgedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfbridgedOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfbridgedOutPkts.setDescription('Bridged protocol output packet count')
locIfbridgedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfbridgedInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfbridgedInOctets.setDescription('Bridged protocol input octet count')
locIfbridgedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfbridgedOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfbridgedOutOctets.setDescription('Bridged protocol output octet count')
locIfsrbInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfsrbInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfsrbInPkts.setDescription('SRB protocol input packet count')
locIfsrbOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfsrbOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfsrbOutPkts.setDescription('SRB protocol output packet count')
locIfsrbInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfsrbInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfsrbInOctets.setDescription('SRB protocol input octet count')
locIfsrbOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfsrbOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfsrbOutOctets.setDescription('SRB protocol output octet count')
locIfchaosInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfchaosInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfchaosInPkts.setDescription('Choas protocol input packet count')
locIfchaosOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfchaosOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfchaosOutPkts.setDescription('Choas protocol output packet count')
locIfchaosInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfchaosInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfchaosInOctets.setDescription('Choas protocol input octet count')
locIfchaosOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfchaosOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfchaosOutOctets.setDescription('Choas protocol output octet count')
locIfpupInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfpupInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfpupInPkts.setDescription('PUP protocol input packet count')
locIfpupOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfpupOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfpupOutPkts.setDescription('PUP protocol output packet count')
locIfpupInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfpupInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfpupInOctets.setDescription('PUP protocol input octet count')
locIfpupOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfpupOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfpupOutOctets.setDescription('PUP protocol output octet count')
locIfmopInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfmopInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfmopInPkts.setDescription('MOP protocol input packet count')
locIfmopOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfmopOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfmopOutPkts.setDescription('MOP protocol output packet count')
locIfmopInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfmopInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfmopInOctets.setDescription('MOP protocol input octet count')
locIfmopOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfmopOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfmopOutOctets.setDescription('MOP protocol output octet count')
locIflanmanInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIflanmanInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIflanmanInPkts.setDescription('LanMan protocol input packet count')
locIflanmanOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIflanmanOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIflanmanOutPkts.setDescription('LanMan protocol output packet count')
locIflanmanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIflanmanInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIflanmanInOctets.setDescription('LanMan protocol input octet count')
locIflanmanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIflanmanOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIflanmanOutOctets.setDescription('LanMan protocol output octet count')
locIfstunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfstunInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfstunInPkts.setDescription('STUN protocol input packet count')
locIfstunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfstunOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfstunOutPkts.setDescription('STUN protocol output packet count')
locIfstunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfstunInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfstunInOctets.setDescription('STUN protocol input octet count')
locIfstunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfstunOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfstunOutOctets.setDescription('STUN protocol output octet count')
locIfspanInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfspanInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfspanInPkts.setDescription('Spanning tree input protocol packet count')
locIfspanOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfspanOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfspanOutPkts.setDescription('Spanning tree output protocol packet count')
locIfspanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfspanInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfspanInOctets.setDescription('Spanning tree input octet packet count')
locIfspanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfspanOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfspanOutOctets.setDescription('Spanning tree output octet packet count')
locIfarpInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfarpInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfarpInPkts.setDescription('Arp protocol input packet count')
locIfarpOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfarpOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfarpOutPkts.setDescription('Arp protocol output packet count')
locIfarpInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfarpInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfarpInOctets.setDescription('Arp protocol input octet count')
locIfarpOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfarpOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfarpOutOctets.setDescription('Arp protocol output octet count')
locIfprobeInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfprobeInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfprobeInPkts.setDescription('Probe protocol input packet count')
locIfprobeOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfprobeOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfprobeOutPkts.setDescription('Probe protocol output packet count')
locIfprobeInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfprobeInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfprobeInOctets.setDescription('Probe protocol input octet count')
locIfprobeOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfprobeOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfprobeOutOctets.setDescription('Probe protocol output octet count')
locIfDribbleInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 114), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfDribbleInputs.setStatus('mandatory')
if mibBuilder.loadTexts: locIfDribbleInputs.setDescription('The number of good packets received with the dribble condition present')
lfsipTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 2, 2), )
if mibBuilder.loadTexts: lfsipTable.setStatus('mandatory')
if mibBuilder.loadTexts: lfsipTable.setDescription('A list of FSIP card entries.')
lFSIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1), ).setIndexNames((0, "CISCO-MIB", "locIfFSIPIndex"))
if mibBuilder.loadTexts: lFSIPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lFSIPEntry.setDescription('A collection of objects specific to the FSIP card.')
locIfFSIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPIndex.setDescription('Interface index of this card corresponding to its ifIndex')
locIfFSIPtype = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("dte", 2), ("dce", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPtype.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPtype.setDescription('Is this FSIP line DCE or DTE')
locIfFSIPrts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPrts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPrts.setDescription('Is the RTS signal up or down')
locIfFSIPcts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPcts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPcts.setDescription('Is the CTS signal up or down')
locIfFSIPdtr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPdtr.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPdtr.setDescription('Is the DTR signal up or down')
locIfFSIPdcd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPdcd.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPdcd.setDescription('Is the DCD signal up or down')
locIfFSIPdsr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPdsr.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPdsr.setDescription('Is the DSR signal up or down')
lipAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 4, 1), )
if mibBuilder.loadTexts: lipAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: lipAddrTable.setDescription('A list of IP address entries.')
lipAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1), ).setIndexNames((0, "IP-MIB", "ipAdEntAddr"))
if mibBuilder.loadTexts: lipAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lipAddrEntry.setDescription('A collection of additional objects in the cisco IP implementation.')
locIPHow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPHow.setStatus('mandatory')
if mibBuilder.loadTexts: locIPHow.setDescription('Method of how this interface obtained its IP address.')
locIPWho = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPWho.setStatus('mandatory')
if mibBuilder.loadTexts: locIPWho.setDescription('IP address of who supplied this interface its IP address.')
locIPHelper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPHelper.setStatus('mandatory')
if mibBuilder.loadTexts: locIPHelper.setDescription('IP helper address for broadcast forwarding support.')
locIPSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: locIPSecurity.setDescription('IP security level. See RFC 1038.')
locIPRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPRedirects.setStatus('mandatory')
if mibBuilder.loadTexts: locIPRedirects.setDescription('Boolean whether ICMP redirects will be sent or not.')
locIPUnreach = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIPUnreach.setStatus('mandatory')
if mibBuilder.loadTexts: locIPUnreach.setDescription('Boolean whether ICMP unreachables will be sent or not.')
lipRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 4, 2), )
if mibBuilder.loadTexts: lipRoutingTable.setStatus('mandatory')
if mibBuilder.loadTexts: lipRoutingTable.setDescription('A list of IP routing entries.')
lipRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 4, 2, 1), ).setIndexNames((0, "RFC1213-MIB", "ipRouteDest"))
if mibBuilder.loadTexts: lipRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lipRouteEntry.setDescription('A collection of additional objects in the cisco IP routing implementation.')
locRtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locRtMask.setStatus('mandatory')
if mibBuilder.loadTexts: locRtMask.setDescription('Routing table network mask.')
locRtCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locRtCount.setStatus('mandatory')
if mibBuilder.loadTexts: locRtCount.setDescription('Number of parallel routes within routing table.')
locRtUses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locRtUses.setStatus('mandatory')
if mibBuilder.loadTexts: locRtUses.setDescription('Number of times this route was used in a forward operation.')
actThresh = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actThresh.setStatus('mandatory')
if mibBuilder.loadTexts: actThresh.setDescription('Threshold of IP accounting records in use before IP traffic will be unaccounted.')
actLostPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actLostPkts.setStatus('mandatory')
if mibBuilder.loadTexts: actLostPkts.setDescription('Lost IP packets due to memory limitations.')
actLostByts = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actLostByts.setStatus('mandatory')
if mibBuilder.loadTexts: actLostByts.setDescription('Total bytes of lost IP packets.')
lipAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 4, 7), )
if mibBuilder.loadTexts: lipAccountingTable.setStatus('mandatory')
if mibBuilder.loadTexts: lipAccountingTable.setDescription('A list of IP accounting entries.')
lipAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 4, 7, 1), ).setIndexNames((0, "CISCO-MIB", "actSrc"), (0, "CISCO-MIB", "actDst"))
if mibBuilder.loadTexts: lipAccountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lipAccountEntry.setDescription('A collection of objects necessary for IP accounting.')
actSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actSrc.setStatus('mandatory')
if mibBuilder.loadTexts: actSrc.setDescription('IP Source address for host traffic matrix.')
actDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actDst.setStatus('mandatory')
if mibBuilder.loadTexts: actDst.setDescription('IP Destination address for host traffic matrix.')
actPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actPkts.setStatus('mandatory')
if mibBuilder.loadTexts: actPkts.setDescription('Number of IP packets sent from source to destination.')
actByts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actByts.setStatus('mandatory')
if mibBuilder.loadTexts: actByts.setDescription('Total number of bytes in IP packets from source to destination.')
actAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAge.setStatus('mandatory')
if mibBuilder.loadTexts: actAge.setDescription('The age of the data in the current data matrix.')
lipCkAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 4, 9), )
if mibBuilder.loadTexts: lipCkAccountingTable.setStatus('mandatory')
if mibBuilder.loadTexts: lipCkAccountingTable.setDescription('A list of IP checkpoint accounting entries.')
lipCkAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 4, 9, 1), ).setIndexNames((0, "CISCO-MIB", "ckactSrc"), (0, "CISCO-MIB", "ckactDst"))
if mibBuilder.loadTexts: lipCkAccountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lipCkAccountEntry.setDescription('A collection of objects necessary for IP checkpoint accounting.')
ckactSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ckactSrc.setStatus('mandatory')
if mibBuilder.loadTexts: ckactSrc.setDescription('IP Source address for host in checkpoint traffic matrix.')
ckactDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ckactDst.setStatus('mandatory')
if mibBuilder.loadTexts: ckactDst.setDescription('IP Destination address for host in checkpoint traffic matrix.')
ckactPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ckactPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ckactPkts.setDescription('Number of IP packets sent from source to destination in checkpoint matrix.')
ckactByts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 4, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ckactByts.setStatus('mandatory')
if mibBuilder.loadTexts: ckactByts.setDescription('Total number of bytes in IP packets from source to destination in checkpoint matrix.')
ckactAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ckactAge.setStatus('mandatory')
if mibBuilder.loadTexts: ckactAge.setDescription('Age of data in the checkpoint matrix.')
actCheckPoint = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actCheckPoint.setStatus('mandatory')
if mibBuilder.loadTexts: actCheckPoint.setDescription('Check points the accounting database. This mib variable must be read and then set with the same value for the check point to succeed. The value read and then set will be incremented after a successful set request')
ipNoaccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNoaccess.setStatus('mandatory')
if mibBuilder.loadTexts: ipNoaccess.setDescription('Total number of packets dropped due to access control failure.')
ltcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 6, 1), )
if mibBuilder.loadTexts: ltcpConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: ltcpConnTable.setDescription('A list of TCP connection entries.')
ltcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 6, 1, 1), ).setIndexNames((0, "TCP-MIB", "tcpConnLocalAddress"), (0, "TCP-MIB", "tcpConnLocalPort"), (0, "TCP-MIB", "tcpConnRemAddress"), (0, "TCP-MIB", "tcpConnRemPort"))
if mibBuilder.loadTexts: ltcpConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ltcpConnEntry.setDescription('A collection of additional objects in the cisco TCP implementation.')
loctcpConnInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loctcpConnInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: loctcpConnInBytes.setDescription('Bytes input for this TCP connection.')
loctcpConnOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loctcpConnOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: loctcpConnOutBytes.setDescription('Bytes output for this TCP connection.')
loctcpConnInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loctcpConnInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: loctcpConnInPkts.setDescription('Packets input for this TCP connection.')
loctcpConnOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loctcpConnOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: loctcpConnOutPkts.setDescription('Packets output for this TCP connection.')
loctcpConnElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 6, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loctcpConnElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: loctcpConnElapsed.setDescription('How long this TCP connection has been established.')
tsLines = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLines.setStatus('mandatory')
if mibBuilder.loadTexts: tsLines.setDescription('Number of terminal lines on this device. Includes virtual lines.')
ltsLineTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 9, 2), )
if mibBuilder.loadTexts: ltsLineTable.setStatus('mandatory')
if mibBuilder.loadTexts: ltsLineTable.setDescription('A list of terminal server line entries.')
ltsLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1), ).setIndexNames((0, "CISCO-MIB", "tsLineNum"))
if mibBuilder.loadTexts: ltsLineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ltsLineEntry.setDescription('A collection of per TTY objects in the cisco Terminal Server implementation.')
tsLineActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineActive.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineActive.setDescription('Boolean whether this line is active or not.')
tsLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("console", 2), ("terminal", 3), ("line-printer", 4), ("virtual-terminal", 5), ("auxiliary", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineType.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineType.setDescription('Type of line.')
tsLineAutobaud = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineAutobaud.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineAutobaud.setDescription('Boolean whether line will autobaud or not.')
tsLineSpeedin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineSpeedin.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineSpeedin.setDescription('What input speed the line is running at.')
tsLineSpeedout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineSpeedout.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineSpeedout.setDescription('What output speed the line is running at.')
tsLineFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("software-input", 3), ("software-output", 4), ("software-both", 5), ("hardware-input", 6), ("hardware-output", 7), ("hardware-both", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineFlow.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineFlow.setDescription('What kind of flow control the line is using.')
tsLineModem = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("call-in", 3), ("call-out", 4), ("cts-required", 5), ("ri-is-cd", 6), ("inout", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineModem.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineModem.setDescription('What kind of modem control the line is using.')
tsLineLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineLoc.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineLoc.setDescription("Describes the line's physical location.")
tsLineTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineTerm.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineTerm.setDescription("Describes the line's terminal type.")
tsLineScrlen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineScrlen.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineScrlen.setDescription('Length in lines of the screen of terminal attached to this line.')
tsLineScrwid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineScrwid.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineScrwid.setDescription('Width in characters of the screen of terminal attached to this line.')
tsLineEsc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineEsc.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineEsc.setDescription('Escape character used to break out of active sessions.')
tsLineTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineTmo.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineTmo.setDescription('Line idleness timeout in seconds.')
tsLineSestmo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineSestmo.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineSestmo.setDescription('Session idleness timeout in seconds.')
tsLineRotary = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineRotary.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineRotary.setDescription('Rotary group number the line belongs in.')
tsLineUses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineUses.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineUses.setDescription('Number of times a connection has been made to or from this line.')
tsLineNses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineNses.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineNses.setDescription('Current number of sessions in use on this line.')
tsLineUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineUser.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineUser.setDescription('TACACS user name, if TACACS enabled, of user on this line.')
tsLineNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineNoise.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineNoise.setDescription('Count of garbage characters received when line inactive.')
tsLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 20), Integer32())
if mibBuilder.loadTexts: tsLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineNum.setDescription('The line number (table index).')
ltsLineSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 9, 3), )
if mibBuilder.loadTexts: ltsLineSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: ltsLineSessionTable.setDescription('A list of terminal server line and session entries.')
ltsLineSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1), ).setIndexNames((0, "CISCO-MIB", "tslineSesLine"), (0, "CISCO-MIB", "tslineSesSession"))
if mibBuilder.loadTexts: ltsLineSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ltsLineSessionEntry.setDescription('A collection of per session and per TTY objects in the cisco Terminal Server implementation.')
tslineSesType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("pad", 2), ("stream", 3), ("rlogin", 4), ("telnet", 5), ("tcp", 6), ("lat", 7), ("mop", 8), ("slip", 9), ("xremote", 10), ("rshell", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesType.setStatus('mandatory')
if mibBuilder.loadTexts: tslineSesType.setDescription('Type of session.')
tslineSesDir = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("incoming", 2), ("outgoing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesDir.setStatus('mandatory')
if mibBuilder.loadTexts: tslineSesDir.setDescription('Direction of session.')
tslineSesAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesAddr.setStatus('mandatory')
if mibBuilder.loadTexts: tslineSesAddr.setDescription('Remote host address of session. [What about PAD connections?]')
tslineSesName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesName.setStatus('mandatory')
if mibBuilder.loadTexts: tslineSesName.setDescription('Remote host name of session.')
tslineSesCur = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesCur.setStatus('mandatory')
if mibBuilder.loadTexts: tslineSesCur.setDescription('Boolean whether session is the currently active one.')
tslineSesIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesIdle.setStatus('mandatory')
if mibBuilder.loadTexts: tslineSesIdle.setDescription('Time in seconds session has been idle.')
tslineSesLine = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 7), Integer32())
if mibBuilder.loadTexts: tslineSesLine.setStatus('mandatory')
if mibBuilder.loadTexts: tslineSesLine.setDescription('The line number (primary index).')
tslineSesSession = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 8), Integer32())
if mibBuilder.loadTexts: tslineSesSession.setStatus('mandatory')
if mibBuilder.loadTexts: tslineSesSession.setDescription('The session number (secondary index).')
tsMsgTtyLine = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgTtyLine.setStatus('mandatory')
if mibBuilder.loadTexts: tsMsgTtyLine.setDescription('tty line to send the message to. -1 will send it to all tty lines')
tsMsgIntervaltim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgIntervaltim.setStatus('mandatory')
if mibBuilder.loadTexts: tsMsgIntervaltim.setDescription('Interval between reissuing message in milliseconds. Minimum non-zero setting is 10000. 0 will cause the routine to choose its own intervals becoming more frequent as MessageDuration gets close to expiring. 2hr, 1hr, 30min, 5min, 1min')
tsMsgDuration = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgDuration.setStatus('mandatory')
if mibBuilder.loadTexts: tsMsgDuration.setDescription('Length of time to reissue message in milliseconds. Minimum non-zero setting is 10000. A setting of 0 will not repeat the message.')
tsMsgText = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgText.setStatus('mandatory')
if mibBuilder.loadTexts: tsMsgText.setDescription('Up to 256 characters that will make up the message')
tsMsgTmpBanner = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("additive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgTmpBanner.setStatus('mandatory')
if mibBuilder.loadTexts: tsMsgTmpBanner.setDescription('Should the message be used as a temporary banner. 1 - No. 2 - In addition to the normal banner')
tsMsgSend = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nothing", 1), ("reload", 2), ("messagedone", 3), ("abort", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgSend.setStatus('mandatory')
if mibBuilder.loadTexts: tsMsgSend.setDescription('Sends the message. The value determines what to do after the message has completed.')
flashSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashSize.setStatus('mandatory')
if mibBuilder.loadTexts: flashSize.setDescription('Total Size in Octets of Flash memory')
flashFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashFree.setStatus('mandatory')
if mibBuilder.loadTexts: flashFree.setDescription('Unused Size in Octets of Flash memory')
flashController = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashController.setStatus('mandatory')
if mibBuilder.loadTexts: flashController.setDescription('flash controller')
flashCard = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashCard.setStatus('mandatory')
if mibBuilder.loadTexts: flashCard.setDescription('flash card')
flashVPP = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("installed", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashVPP.setStatus('mandatory')
if mibBuilder.loadTexts: flashVPP.setDescription('State of the VPP DIP')
flashErase = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: flashErase.setStatus('mandatory')
if mibBuilder.loadTexts: flashErase.setDescription('Request to erase flash memory')
flashEraseTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashEraseTime.setStatus('mandatory')
if mibBuilder.loadTexts: flashEraseTime.setDescription('Last time the flash was erased')
flashEraseStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("flashOpInProgress", 1), ("flashOpSuccess", 2), ("flashOpFailure", 3), ("flashReadOnly", 4), ("flashOpenFailure", 5), ("bufferAllocationFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashEraseStatus.setStatus('mandatory')
if mibBuilder.loadTexts: flashEraseStatus.setDescription('Status of current or last flash erasing')
flashToNet = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 9), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: flashToNet.setStatus('mandatory')
if mibBuilder.loadTexts: flashToNet.setDescription('Write flash entry to tftp server. Value should be the name of the flash entry to send. Instance is the IP address of the tftp host.')
flashToNetTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashToNetTime.setStatus('mandatory')
if mibBuilder.loadTexts: flashToNetTime.setDescription('Last time a copy from the flash to the net took place')
flashToNetStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("flashOpInProgress", 1), ("flashOpSuccess", 2), ("flashOpFailure", 3), ("flashReadOnly", 4), ("flashOpenFailure", 5), ("bufferAllocationFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashToNetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: flashToNetStatus.setDescription('Status of current or last flash to net transfer')
netToFlash = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 12), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: netToFlash.setStatus('mandatory')
if mibBuilder.loadTexts: netToFlash.setDescription('Write flash entry from tftp server. Value should be the name of the flash entry to write. Instance is the IP address of the tftp host.')
netToFlashTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netToFlashTime.setStatus('mandatory')
if mibBuilder.loadTexts: netToFlashTime.setDescription('Last time a copy from the net to the flash took place')
netToFlashStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("flashOpInProgress", 1), ("flashOpSuccess", 2), ("flashOpFailure", 3), ("flashReadOnly", 4), ("flashOpenFailure", 5), ("bufferAllocationFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netToFlashStatus.setStatus('mandatory')
if mibBuilder.loadTexts: netToFlashStatus.setDescription('Status of current or last net to flash transfer')
flashStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("busy", 1), ("available", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashStatus.setStatus('mandatory')
if mibBuilder.loadTexts: flashStatus.setDescription('Status of the availablity of flash')
flashEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 10, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashEntries.setStatus('mandatory')
if mibBuilder.loadTexts: flashEntries.setDescription('Number of entries in the flash directory')
lflashFileDirTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 10, 17), )
if mibBuilder.loadTexts: lflashFileDirTable.setStatus('mandatory')
if mibBuilder.loadTexts: lflashFileDirTable.setDescription(' A list of flash file entries.')
lflashFileDirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 10, 17, 1), ).setIndexNames((0, "CISCO-MIB", "flashEntries"))
if mibBuilder.loadTexts: lflashFileDirEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lflashFileDirEntry.setDescription('A collection of flash eprom objects')
flashDirName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 10, 17, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDirName.setStatus('mandatory')
if mibBuilder.loadTexts: flashDirName.setDescription('Name associated with the flash entry')
flashDirSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 10, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDirSize.setStatus('mandatory')
if mibBuilder.loadTexts: flashDirSize.setDescription('Size in Octets of a flash entry')
flashDirStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 10, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("deleted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flashDirStatus.setStatus('mandatory')
if mibBuilder.loadTexts: flashDirStatus.setDescription('Indicates the status of the entry')
dnForward = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnForward.setStatus('mandatory')
if mibBuilder.loadTexts: dnForward.setDescription('Total count of DECNET packets forwarded.')
dnReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnReceived.setStatus('mandatory')
if mibBuilder.loadTexts: dnReceived.setDescription('Count of total DECNET packets received.')
dnFormaterr = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnFormaterr.setStatus('mandatory')
if mibBuilder.loadTexts: dnFormaterr.setDescription('Total number of DECNET packets received with header errors.')
dnNotgateway = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNotgateway.setStatus('mandatory')
if mibBuilder.loadTexts: dnNotgateway.setDescription('Total number of packets received while not routing.')
dnNotimp = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNotimp.setStatus('mandatory')
if mibBuilder.loadTexts: dnNotimp.setDescription('Total number of unknown control packets received.')
dnHellos = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHellos.setStatus('mandatory')
if mibBuilder.loadTexts: dnHellos.setDescription('Total number of Hellos received.')
dnBadhello = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnBadhello.setStatus('mandatory')
if mibBuilder.loadTexts: dnBadhello.setDescription('Total number of received bad Hellos.')
dnNotlong = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNotlong.setStatus('mandatory')
if mibBuilder.loadTexts: dnNotlong.setDescription('Total number of received packets not in long format.')
dnDatas = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnDatas.setStatus('mandatory')
if mibBuilder.loadTexts: dnDatas.setDescription('Total number of received data packets.')
dnBigaddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnBigaddr.setStatus('mandatory')
if mibBuilder.loadTexts: dnBigaddr.setDescription('Total number of too large addresses.')
dnNoroute = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNoroute.setStatus('mandatory')
if mibBuilder.loadTexts: dnNoroute.setDescription('Total number of packets dropped due to no route present.')
dnNoencap = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNoencap.setStatus('mandatory')
if mibBuilder.loadTexts: dnNoencap.setDescription('Total number of packets dropped due to output encapsulation failure.')
dnLevel1s = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnLevel1s.setStatus('mandatory')
if mibBuilder.loadTexts: dnLevel1s.setDescription('Total number of Level 1 routing packets received.')
dnBadlevel1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnBadlevel1.setStatus('mandatory')
if mibBuilder.loadTexts: dnBadlevel1.setDescription('Total number of bad Level 1 routing packets received.')
dnToomanyhops = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnToomanyhops.setStatus('mandatory')
if mibBuilder.loadTexts: dnToomanyhops.setDescription('Total number of packets received which visited too many nodes.')
dnHellosent = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHellosent.setStatus('mandatory')
if mibBuilder.loadTexts: dnHellosent.setDescription('Total number of Hellos output.')
dnLevel1sent = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnLevel1sent.setStatus('mandatory')
if mibBuilder.loadTexts: dnLevel1sent.setDescription('Total number of Level 1 routing packets sent.')
dnNomemory = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNomemory.setStatus('mandatory')
if mibBuilder.loadTexts: dnNomemory.setDescription('Total number of memory requests denied.')
dnOtherhello = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnOtherhello.setStatus('mandatory')
if mibBuilder.loadTexts: dnOtherhello.setDescription('Total number of Hellos received from another area.')
dnOtherlevel1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnOtherlevel1.setStatus('mandatory')
if mibBuilder.loadTexts: dnOtherlevel1.setDescription('Total number of Level 1 routing packets received from another area.')
dnLevel2s = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnLevel2s.setStatus('mandatory')
if mibBuilder.loadTexts: dnLevel2s.setDescription('Total number of Level 2 routing packets received.')
dnLevel2sent = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnLevel2sent.setStatus('mandatory')
if mibBuilder.loadTexts: dnLevel2sent.setDescription('Total number of Level 2 routing packets sent.')
dnNovector = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNovector.setStatus('mandatory')
if mibBuilder.loadTexts: dnNovector.setDescription('Total number of missing routing vectors.')
dnOtherlevel2 = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnOtherlevel2.setStatus('mandatory')
if mibBuilder.loadTexts: dnOtherlevel2.setDescription('Total number of received Level 2 routing packets from another area.')
dnNoaccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnNoaccess.setStatus('mandatory')
if mibBuilder.loadTexts: dnNoaccess.setDescription('Total number of packets dropped due to access control failure.')
dnAreaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 1, 26), )
if mibBuilder.loadTexts: dnAreaTable.setStatus('mandatory')
if mibBuilder.loadTexts: dnAreaTable.setDescription('DECNET area routing table')
dnAreaTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1), ).setIndexNames((0, "CISCO-MIB", "dnArea"))
if mibBuilder.loadTexts: dnAreaTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dnAreaTableEntry.setDescription('DECNET area routing table')
dnArea = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnArea.setStatus('mandatory')
if mibBuilder.loadTexts: dnArea.setDescription('DECNet area from the area table.')
dnACost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnACost.setStatus('mandatory')
if mibBuilder.loadTexts: dnACost.setDescription('Cost of area in the area table.')
dnAHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnAHop.setStatus('mandatory')
if mibBuilder.loadTexts: dnAHop.setDescription('Number of hops to area in the area table.')
dnAIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnAIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dnAIfIndex.setDescription('Index of interface to the next hop address to the area. 0 denotes self.')
dnANextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnANextHop.setStatus('mandatory')
if mibBuilder.loadTexts: dnANextHop.setDescription('Next hop DECNet address.')
dnAAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnAAge.setStatus('mandatory')
if mibBuilder.loadTexts: dnAAge.setDescription('Age in seconds of area route.')
dnAPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 26, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnAPrio.setStatus('mandatory')
if mibBuilder.loadTexts: dnAPrio.setDescription('Priority of next hop router for area route.')
dnHostTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 1, 27), )
if mibBuilder.loadTexts: dnHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: dnHostTable.setDescription('DECNET routing table')
dnHostTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1), ).setIndexNames((0, "CISCO-MIB", "dnHIdx1"), (0, "CISCO-MIB", "dnHIdx2"))
if mibBuilder.loadTexts: dnHostTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dnHostTableEntry.setDescription('DECNET routing table')
dnHost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHost.setStatus('mandatory')
if mibBuilder.loadTexts: dnHost.setDescription('DECNet node address from the routing table.')
dnHCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHCost.setStatus('mandatory')
if mibBuilder.loadTexts: dnHCost.setDescription('Cost of path to node in the routing table.')
dnHHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHHop.setStatus('mandatory')
if mibBuilder.loadTexts: dnHHop.setDescription('Number of hops to node in the routing table.')
dnHIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dnHIfIndex.setDescription('Index of interface to the next hop address to the node. 0 denotes self.')
dnHNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: dnHNextHop.setDescription('Next hop DECNet address.')
dnHAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHAge.setStatus('mandatory')
if mibBuilder.loadTexts: dnHAge.setDescription('Age in seconds of route to node.')
dnHPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnHPrio.setStatus('mandatory')
if mibBuilder.loadTexts: dnHPrio.setDescription('Priority of next hop router for node.')
dnHIdx1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 8), Integer32())
if mibBuilder.loadTexts: dnHIdx1.setStatus('mandatory')
if mibBuilder.loadTexts: dnHIdx1.setDescription('table index 1.')
dnHIdx2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 27, 1, 9), Integer32())
if mibBuilder.loadTexts: dnHIdx2.setStatus('mandatory')
if mibBuilder.loadTexts: dnHIdx2.setDescription('table index 2.')
dnIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 1, 28), )
if mibBuilder.loadTexts: dnIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: dnIfTable.setDescription('DECNET interface table')
dnIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 1, 28, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dnIfTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dnIfTableEntry.setDescription('DECNET interface table')
dnIfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 1, 28, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnIfCost.setStatus('mandatory')
if mibBuilder.loadTexts: dnIfCost.setDescription('Cost of this interface.')
xnsInput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsInput.setStatus('mandatory')
if mibBuilder.loadTexts: xnsInput.setDescription('Total input count of number of XNS packets.')
xnsLocal = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsLocal.setStatus('mandatory')
if mibBuilder.loadTexts: xnsLocal.setDescription('Total count of XNS input packets for this host.')
xnsBcastin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsBcastin.setStatus('mandatory')
if mibBuilder.loadTexts: xnsBcastin.setDescription('Total count of number of XNS input broadcast packets.')
xnsForward = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsForward.setStatus('mandatory')
if mibBuilder.loadTexts: xnsForward.setDescription('Total count of number of XNS packets forwarded.')
xnsBcastout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsBcastout.setStatus('mandatory')
if mibBuilder.loadTexts: xnsBcastout.setDescription('Total count of number of XNS output broadcast packets.')
xnsErrin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsErrin.setStatus('mandatory')
if mibBuilder.loadTexts: xnsErrin.setDescription('Total count of number of XNS Error input packets.')
xnsErrout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsErrout.setStatus('mandatory')
if mibBuilder.loadTexts: xnsErrout.setDescription('Total count of number of XNS Error output packets.')
xnsFormerr = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsFormerr.setStatus('mandatory')
if mibBuilder.loadTexts: xnsFormerr.setDescription('Total count of number of XNS input packets with header errors.')
xnsChksum = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsChksum.setStatus('mandatory')
if mibBuilder.loadTexts: xnsChksum.setDescription('Total count of number of XNS input packets with checksum errors.')
xnsNotgate = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsNotgate.setStatus('mandatory')
if mibBuilder.loadTexts: xnsNotgate.setDescription('Total count of number of XNS input packets received while not routing.')
xnsHopcnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsHopcnt.setStatus('mandatory')
if mibBuilder.loadTexts: xnsHopcnt.setDescription('Total count of number of XNS input packets that have exceeded the maximum hop count.')
xnsNoroute = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsNoroute.setStatus('mandatory')
if mibBuilder.loadTexts: xnsNoroute.setDescription('Total count of number of XNS packets dropped due to no route.')
xnsNoencap = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsNoencap.setStatus('mandatory')
if mibBuilder.loadTexts: xnsNoencap.setDescription('Total count of number of XNS packets dropped due to output encapsulation failure.')
xnsOutput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsOutput.setStatus('mandatory')
if mibBuilder.loadTexts: xnsOutput.setDescription('Total count of number of XNS output packets.')
xnsInmult = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsInmult.setStatus('mandatory')
if mibBuilder.loadTexts: xnsInmult.setDescription('Total count of number of XNS input multicast packets.')
xnsUnknown = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsUnknown.setStatus('mandatory')
if mibBuilder.loadTexts: xnsUnknown.setDescription('Total count of number of unknown XNS input packets.')
xnsFwdbrd = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsFwdbrd.setStatus('mandatory')
if mibBuilder.loadTexts: xnsFwdbrd.setDescription('Total count of number of XNS broadcast packets forwarded.')
xnsEchoreqin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsEchoreqin.setStatus('mandatory')
if mibBuilder.loadTexts: xnsEchoreqin.setDescription('Total count of number of XNS Echo request packets received.')
xnsEchoreqout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsEchoreqout.setStatus('mandatory')
if mibBuilder.loadTexts: xnsEchoreqout.setDescription('Total count of number of XNS Echo request packets sent.')
xnsEchorepin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsEchorepin.setStatus('mandatory')
if mibBuilder.loadTexts: xnsEchorepin.setDescription('Total count of number of XNS Echo reply packets received.')
xnsEchorepout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xnsEchorepout.setStatus('mandatory')
if mibBuilder.loadTexts: xnsEchorepout.setDescription('Total count of number of XNS Echo reply packets sent.')
atInput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atInput.setStatus('mandatory')
if mibBuilder.loadTexts: atInput.setDescription('Total input count of number of AppleTalk packets.')
atLocal = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atLocal.setStatus('mandatory')
if mibBuilder.loadTexts: atLocal.setDescription('Total count of AppleTalk input packets for this host.')
atBcastin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atBcastin.setStatus('mandatory')
if mibBuilder.loadTexts: atBcastin.setDescription('Total count of number of AppleTalk input broadcast packets.')
atForward = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atForward.setStatus('mandatory')
if mibBuilder.loadTexts: atForward.setDescription('Total count of number of AppleTalk packets forwarded.')
atBcastout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atBcastout.setStatus('mandatory')
if mibBuilder.loadTexts: atBcastout.setDescription('Total count of number of AppleTalk output broadcast packets.')
atChksum = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atChksum.setStatus('mandatory')
if mibBuilder.loadTexts: atChksum.setDescription('Total count of number of AppleTalk input packets with checksum erors.')
atNotgate = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNotgate.setStatus('mandatory')
if mibBuilder.loadTexts: atNotgate.setDescription('Total count of AppleTalk input packets received while not routing.')
atHopcnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atHopcnt.setStatus('mandatory')
if mibBuilder.loadTexts: atHopcnt.setDescription('Total count of number of AppleTalk input packets that have exceeded the maximum hop count.')
atNoaccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNoaccess.setStatus('mandatory')
if mibBuilder.loadTexts: atNoaccess.setDescription('Total number of AppleTalk packets dropped due to access control.')
atNoroute = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNoroute.setStatus('mandatory')
if mibBuilder.loadTexts: atNoroute.setDescription('Total count of number of AppleTalk packets -- cisco MIB [Page 97] -- -- Request for Comments: Draft cisco Systems, Inc. dropped due to no route.')
atNoencap = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNoencap.setStatus('mandatory')
if mibBuilder.loadTexts: atNoencap.setDescription('Total count of number of AppleTalk packets dropped due to output encapsulation failure.')
atOutput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atOutput.setStatus('mandatory')
if mibBuilder.loadTexts: atOutput.setDescription('Total count of number of AppleTalk output packets.')
atInmult = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atInmult.setStatus('mandatory')
if mibBuilder.loadTexts: atInmult.setDescription('Total count of number of AppleTalk input multicast packets.')
atRtmpin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atRtmpin.setStatus('mandatory')
if mibBuilder.loadTexts: atRtmpin.setDescription('Total count of number of AppleTalk RTMP packets received.')
atRtmpout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atRtmpout.setStatus('mandatory')
if mibBuilder.loadTexts: atRtmpout.setDescription('Total count of number of AppleTalk RTMP -- cisco MIB [Page 98] -- -- Request for Comments: Draft cisco Systems, Inc. packets sent.')
atNbpin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNbpin.setStatus('mandatory')
if mibBuilder.loadTexts: atNbpin.setDescription('Total count of number of AppleTalk NBP packets received.')
atNbpout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNbpout.setStatus('mandatory')
if mibBuilder.loadTexts: atNbpout.setDescription('Total count of number of AppleTalk NBP packets sent.')
atAtp = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atAtp.setStatus('mandatory')
if mibBuilder.loadTexts: atAtp.setDescription('Total count of number of AppleTalk ATP packets received.')
atZipin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atZipin.setStatus('mandatory')
if mibBuilder.loadTexts: atZipin.setDescription('Total count of number of AppleTalk ZIP packets received.')
atZipout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atZipout.setStatus('mandatory')
if mibBuilder.loadTexts: atZipout.setDescription('Total count of number of AppleTalk ZIP -- cisco MIB [Page 99] -- -- Request for Comments: Draft cisco Systems, Inc. packets sent.')
atEcho = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEcho.setStatus('mandatory')
if mibBuilder.loadTexts: atEcho.setDescription('Total count of number of AppleTalk Echo packets received.')
atEchoill = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atEchoill.setStatus('mandatory')
if mibBuilder.loadTexts: atEchoill.setDescription('Total count of number of illegal AppleTalk Echo packets received.')
atDdpshort = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atDdpshort.setStatus('mandatory')
if mibBuilder.loadTexts: atDdpshort.setDescription('Total count of number of short AppleTalk DDP packets received.')
atDdplong = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atDdplong.setStatus('mandatory')
if mibBuilder.loadTexts: atDdplong.setDescription('Total count of number of long AppleTalk DDP packets received.')
atDdpbad = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atDdpbad.setStatus('mandatory')
if mibBuilder.loadTexts: atDdpbad.setDescription('Total count of number of illegal sized -- cisco MIB [Page 100] -- -- Request for Comments: Draft cisco Systems, Inc. AppleTalk DDP packets received.')
atNobuffer = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atNobuffer.setStatus('mandatory')
if mibBuilder.loadTexts: atNobuffer.setDescription('Total count of number of AppleTalk packets lost due to no memory.')
atArpreq = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atArpreq.setStatus('mandatory')
if mibBuilder.loadTexts: atArpreq.setDescription('Total count of number of input AppleTalk ARP request packets.')
atArpreply = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atArpreply.setStatus('mandatory')
if mibBuilder.loadTexts: atArpreply.setDescription('Total count of number of AppleTalk ARP reply packets output.')
atArpprobe = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atArpprobe.setStatus('mandatory')
if mibBuilder.loadTexts: atArpprobe.setDescription('Total count of number of input AppleTalk ARP probe packets.')
atUnknown = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 3, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atUnknown.setStatus('mandatory')
if mibBuilder.loadTexts: atUnknown.setDescription('Total count of number of unknown AppleTalk -- cisco MIB [Page 101] -- -- Request for Comments: Draft cisco Systems, Inc. input packets.')
novellInput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellInput.setStatus('mandatory')
if mibBuilder.loadTexts: novellInput.setDescription('Total input count of number of NOVELL packets.')
novellBcastin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellBcastin.setStatus('mandatory')
if mibBuilder.loadTexts: novellBcastin.setDescription('Total count of number of NOVELL input broadcast packets.')
novellForward = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellForward.setStatus('mandatory')
if mibBuilder.loadTexts: novellForward.setDescription('Total count of number of NOVELL packets forwarded.')
novellBcastout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellBcastout.setStatus('mandatory')
if mibBuilder.loadTexts: novellBcastout.setDescription('Total count of number of NOVELL output broadcast packets.')
novellFormerr = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellFormerr.setStatus('mandatory')
if mibBuilder.loadTexts: novellFormerr.setDescription('Total count of number of NOVELL input packets with header errors.')
novellChksum = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellChksum.setStatus('mandatory')
if mibBuilder.loadTexts: novellChksum.setDescription('Total count of number of NOVELL input packets with checksum erors.')
novellHopcnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellHopcnt.setStatus('mandatory')
if mibBuilder.loadTexts: novellHopcnt.setDescription('Total count of number of NOVELL input packets that have exceeded the maximum hop count.')
novellNoroute = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellNoroute.setStatus('mandatory')
if mibBuilder.loadTexts: novellNoroute.setDescription('Total count of number of NOVELL packets dropped due to no route.')
novellNoencap = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellNoencap.setStatus('mandatory')
if mibBuilder.loadTexts: novellNoencap.setDescription('Total count of number of NOVELL packets dropped due to output encapsulation failure.')
novellOutput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellOutput.setStatus('mandatory')
if mibBuilder.loadTexts: novellOutput.setDescription('Total count of number of NOVELL output packets.')
novellInmult = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellInmult.setStatus('mandatory')
if mibBuilder.loadTexts: novellInmult.setDescription('Total count of number of NOVELL input multicast packets.')
novellLocal = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellLocal.setStatus('mandatory')
if mibBuilder.loadTexts: novellLocal.setDescription('Total count of NOVELL input packets for this host.')
novellUnknown = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellUnknown.setStatus('mandatory')
if mibBuilder.loadTexts: novellUnknown.setDescription('Total count of number of unknown NOVELL input packets.')
novellSapreqin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellSapreqin.setStatus('mandatory')
if mibBuilder.loadTexts: novellSapreqin.setDescription('Total count of number of NOVELL SAP request packets received.')
novellSapresin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellSapresin.setStatus('mandatory')
if mibBuilder.loadTexts: novellSapresin.setDescription('Total count of number of NOVELL SAP response packets received.')
novellSapout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellSapout.setStatus('mandatory')
if mibBuilder.loadTexts: novellSapout.setDescription('Total count of number of NOVELL SAP request packets sent.')
novellSapreply = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: novellSapreply.setStatus('mandatory')
if mibBuilder.loadTexts: novellSapreply.setDescription('Total count of number of NOVELL SAP reply packets sent.')
ipxActThresh = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActThresh.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActThresh.setDescription('Threshold of IPX accounting records in use before IPX traffic will be unaccounted.')
ipxActLostPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActLostPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActLostPkts.setDescription('Lost IPX packets due to memory limitations.')
ipxActLostByts = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActLostByts.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActLostByts.setDescription('Total bytes of lost IPX packets.')
lipxAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 4, 21), )
if mibBuilder.loadTexts: lipxAccountingTable.setStatus('mandatory')
if mibBuilder.loadTexts: lipxAccountingTable.setDescription('A list of IPX accounting entries.')
lipxAccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1), ).setIndexNames((0, "CISCO-MIB", "ipxActSrc"), (0, "CISCO-MIB", "ipxActDst"))
if mibBuilder.loadTexts: lipxAccountingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lipxAccountingEntry.setDescription('IPX accounting entry')
ipxActSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActSrc.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActSrc.setDescription('IPX Source address for host traffic matrix.')
ipxActDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActDst.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActDst.setDescription('IPX Destination address for host traffic matrix.')
ipxActPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActPkts.setDescription('Number of IPX packets sent from source to destination.')
ipxActByts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActByts.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActByts.setDescription('Total number of bytes in IPX packets from source to destination.')
ipxActAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 22), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxActAge.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActAge.setDescription('The age of the data in the current IPX data matrix.')
lipxCkAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 4, 23), )
if mibBuilder.loadTexts: lipxCkAccountingTable.setStatus('mandatory')
if mibBuilder.loadTexts: lipxCkAccountingTable.setDescription('A list of IPX checkpoint accounting entries.')
lipxCkAccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1), ).setIndexNames((0, "CISCO-MIB", "ipxCkactSrc"), (0, "CISCO-MIB", "ipxCkactDst"))
if mibBuilder.loadTexts: lipxCkAccountingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lipxCkAccountingEntry.setDescription('IPX checkpoint accounting entry')
ipxCkactSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactSrc.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCkactSrc.setDescription('IPX Source address for host in checkpoint traffic matrix.')
ipxCkactDst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactDst.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCkactDst.setDescription('IPX Destination address for host in checkpoint traffic matrix.')
ipxCkactPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCkactPkts.setDescription('Number of IPX packets sent from source to destination in checkpoint matrix.')
ipxCkactByts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 4, 23, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactByts.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCkactByts.setDescription('Total number of bytes in IPX packets from source to destination in checkpoint matrix.')
ipxCkactAge = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCkactAge.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCkactAge.setDescription('Age of data in the IPX checkpoint matrix.')
ipxActCheckPoint = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 4, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxActCheckPoint.setStatus('mandatory')
if mibBuilder.loadTexts: ipxActCheckPoint.setDescription('Check points the IPX accounting database. This mib variable must be read and then set with the same value for the check point to succeed. The value read and then set will be incremented aftera successful set request')
vinesInput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesInput.setStatus('mandatory')
if mibBuilder.loadTexts: vinesInput.setDescription('Total input count of number of Vines packets.')
vinesOutput = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesOutput.setStatus('mandatory')
if mibBuilder.loadTexts: vinesOutput.setDescription('Total count of number of Vines output packets.')
vinesLocaldest = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesLocaldest.setStatus('mandatory')
if mibBuilder.loadTexts: vinesLocaldest.setDescription('Total count of Vines input packets for this host.')
vinesForwarded = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: vinesForwarded.setDescription('Total count of number of Vines packets forwarded.')
vinesBcastin = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesBcastin.setStatus('mandatory')
if mibBuilder.loadTexts: vinesBcastin.setDescription('Total count of number of Vines input broadcast packets.')
vinesBcastout = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesBcastout.setStatus('mandatory')
if mibBuilder.loadTexts: vinesBcastout.setDescription('Total count of number of Vines output broadcast packets.')
vinesBcastfwd = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesBcastfwd.setStatus('mandatory')
if mibBuilder.loadTexts: vinesBcastfwd.setDescription('Total count of number of Vines broadcast packets forwarded.')
vinesNotlan = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesNotlan.setStatus('mandatory')
if mibBuilder.loadTexts: vinesNotlan.setDescription('Total count of number of Vines broadcast packets not forwarded to all interfaces because the LAN ONLY bit was set.')
vinesNotgt4800 = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesNotgt4800.setStatus('mandatory')
if mibBuilder.loadTexts: vinesNotgt4800.setDescription('Total count of number of Vines broadcast packets not forwarded to all interfaces because the OVER 4800 BPS bit was set.')
vinesNocharges = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesNocharges.setStatus('mandatory')
if mibBuilder.loadTexts: vinesNocharges.setDescription('Total count of number of Vines broadcast packets not forwarded to all interfaces because the NO CHARGES only bit was set.')
vinesFormaterror = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesFormaterror.setStatus('mandatory')
if mibBuilder.loadTexts: vinesFormaterror.setDescription('Total count of number of Vines input packets with header errors.')
vinesCksumerr = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesCksumerr.setStatus('mandatory')
if mibBuilder.loadTexts: vinesCksumerr.setDescription('Total count of number of Vines input packets with checksum erors.')
vinesHopcount = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesHopcount.setStatus('mandatory')
if mibBuilder.loadTexts: vinesHopcount.setDescription('Total count of number of Vines input packets that have exceeded the maximum hop count.')
vinesNoroute = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesNoroute.setStatus('mandatory')
if mibBuilder.loadTexts: vinesNoroute.setDescription('Total count of number of Vines packets dropped due to no route.')
vinesEncapsfailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesEncapsfailed.setStatus('mandatory')
if mibBuilder.loadTexts: vinesEncapsfailed.setDescription('Total count of number of Vines packets dropped due to output encapsulation failed.')
vinesUnknown = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesUnknown.setStatus('mandatory')
if mibBuilder.loadTexts: vinesUnknown.setDescription('Total count of number of unknown Vines input packets.')
vinesIcpIn = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIcpIn.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIcpIn.setDescription('Total count of number of Vines ICP packets received.')
vinesIcpOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIcpOut.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIcpOut.setDescription('Total count of number of Vines ICP packets generaed.')
vinesMetricOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesMetricOut.setStatus('mandatory')
if mibBuilder.loadTexts: vinesMetricOut.setDescription('Total count of number of Vines ICP Metric Notification packets generated.')
vinesMacEchoIn = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesMacEchoIn.setStatus('mandatory')
if mibBuilder.loadTexts: vinesMacEchoIn.setDescription('Total count of number of Vines MAC level Echo packets received.')
vinesMacEchoOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesMacEchoOut.setStatus('mandatory')
if mibBuilder.loadTexts: vinesMacEchoOut.setDescription('Total count of number of Vines MAC level Echo packets generated.')
vinesEchoIn = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesEchoIn.setStatus('mandatory')
if mibBuilder.loadTexts: vinesEchoIn.setDescription('Total count of number of Vines Echo packets received.')
vinesEchoOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesEchoOut.setStatus('mandatory')
if mibBuilder.loadTexts: vinesEchoOut.setDescription('Total count of number of Vines Echo packets generated.')
vinesProxyCnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesProxyCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesProxyCnt.setDescription('Total count of proxy packets sent.')
vinesProxyReplyCnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesProxyReplyCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesProxyReplyCnt.setDescription('Total count of responses to proxy packets.')
vinesNet = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesNet.setStatus('mandatory')
if mibBuilder.loadTexts: vinesNet.setDescription('Vines network number of this router.')
vinesSubNet = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesSubNet.setStatus('mandatory')
if mibBuilder.loadTexts: vinesSubNet.setDescription('Vines sub-network number of this router.')
vinesClient = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 5, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesClient.setStatus('mandatory')
if mibBuilder.loadTexts: vinesClient.setDescription('Next Vines client sub-network number to be assigned by this router.')
tmpvinesIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 5, 29), )
if mibBuilder.loadTexts: tmpvinesIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: tmpvinesIfTable.setDescription('Vines interface table')
tmpvinesIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tmpvinesIfTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tmpvinesIfTableEntry.setDescription('VINES interface table')
vinesIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfMetric.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfMetric.setDescription('Vines protocol metric value.')
vinesIfEnctype = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfEnctype.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfEnctype.setDescription('Vines protocol default encapsulation')
vinesIfAccesslist = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfAccesslist.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfAccesslist.setDescription('Vines protocol outgoing access list number.')
vinesIfPropagate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfPropagate.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfPropagate.setDescription("Vines protocol 'propagate' enabled.")
vinesIfArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfArpEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfArpEnabled.setDescription('Vines protocol arp replies enabled.')
vinesIfServerless = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfServerless.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfServerless.setDescription('Vines protocol serverless support enabled.')
vinesIfServerlessBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfServerlessBcast.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfServerlessBcast.setDescription('Vines protocol serverless broadcasting support enabled.')
vinesIfRedirectInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRedirectInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRedirectInterval.setDescription('Vines protocol redirect interval (in ms).')
vinesIfSplitDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfSplitDisabled.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfSplitDisabled.setDescription('Vines protocol split horizon disabled')
vinesIfLineup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfLineup.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfLineup.setDescription('Vines protocol line up/down.')
vinesIfFastokay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfFastokay.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfFastokay.setDescription('Vines protocol fast switching supported.')
vinesIfRouteCache = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRouteCache.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRouteCache.setDescription('Vines protocol fast switching requested')
vinesIfIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfIns.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfIns.setDescription('Vines protocol input packet count')
vinesIfOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfOuts.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfOuts.setDescription('Vines protocol output packet count')
vinesIfInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfInBytes.setDescription('Vines protocol input octet count')
vinesIfOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfOutBytes.setDescription('Vines protocol output octet count')
vinesIfRxNotEnabledCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxNotEnabledCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxNotEnabledCnt.setDescription('Vines protocol count of input packets -- cisco MIB [Page 122] -- -- Request for Comments: Draft cisco Systems, Inc. discarded because interface not configured.')
vinesIfRxFormatErrorCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxFormatErrorCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxFormatErrorCnt.setDescription('Vines protocol count of input packets with format errors.')
vinesIfRxLocalDestCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxLocalDestCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxLocalDestCnt.setDescription('Vines protocol count of input packets destined for this router.')
vinesIfRxBcastinCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxBcastinCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxBcastinCnt.setDescription('Vines protocol input broadcast count.')
vinesIfRxForwardedCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxForwardedCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxForwardedCnt.setDescription('Vines protocol count of input packets forwarded to another interface.')
vinesIfRxNoRouteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxNoRouteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxNoRouteCnt.setDescription('Vines protocol count of input packets dropped because there was no route to the -- cisco MIB [Page 123] -- -- Request for Comments: Draft cisco Systems, Inc. destination.')
vinesIfRxZeroHopCountCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxZeroHopCountCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxZeroHopCountCnt.setDescription('Vines protocol count of input packets dropped due to a zero hop count.')
vinesIfRxChecksumErrorCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxChecksumErrorCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxChecksumErrorCnt.setDescription('Vines protocol count of input packets with checksum errors.')
vinesIfRxArp0Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxArp0Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxArp0Cnt.setDescription('Vines protocol count of input ARP Query Request messages.')
vinesIfRxArp1Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxArp1Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxArp1Cnt.setDescription('Vines protocol count of input ARP Query Response messages.')
vinesIfRxArp2Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxArp2Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxArp2Cnt.setDescription('Vines protocol count of input ARP Assignment -- cisco MIB [Page 124] -- -- Request for Comments: Draft cisco Systems, Inc. Request messages.')
vinesIfRxArp3Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxArp3Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxArp3Cnt.setDescription('Vines protocol count of input ARP Assignment Response messages.')
vinesIfRxArpIllegalCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxArpIllegalCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxArpIllegalCnt.setDescription('Vines protocol count of input illegal ARP messages.')
vinesIfRxIcpErrorCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxIcpErrorCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxIcpErrorCnt.setDescription('Vines protocol count of input ICP error messages.')
vinesIfRxIcpMetricCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxIcpMetricCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxIcpMetricCnt.setDescription('Vines protocol count of input ICP metric messages.')
vinesIfRxIcpIllegalCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxIcpIllegalCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxIcpIllegalCnt.setDescription('Vines protocol count of input illegal ICP -- cisco MIB [Page 125] -- -- Request for Comments: Draft cisco Systems, Inc. messages.')
vinesIfRxIpcCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxIpcCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxIpcCnt.setDescription('Vines protocol count of input IPC messages.')
vinesIfRxRtp0Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxRtp0Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxRtp0Cnt.setDescription('Vines protocol count of input RTP type 0 messages.')
vinesIfRxRtp1Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxRtp1Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxRtp1Cnt.setDescription('Vines protocol count of input RTP Request messages.')
vinesIfRxRtp2Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxRtp2Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxRtp2Cnt.setDescription('Vines protocol count of input RTP type 2 messages.')
vinesIfRxRtp3Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxRtp3Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxRtp3Cnt.setDescription('Vines protocol count of input RTP type 3 messages.')
vinesIfRxRtp4Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxRtp4Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxRtp4Cnt.setDescription('Vines protocol count of input RTP Update messages.')
vinesIfRxRtp5Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxRtp5Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxRtp5Cnt.setDescription('Vines protocol count of input RTP Response messages.')
vinesIfRxRtp6Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxRtp6Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxRtp6Cnt.setDescription('Vines protocol count of input RTP Redirect messages.')
vinesIfRxRtpIllegalCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxRtpIllegalCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxRtpIllegalCnt.setDescription('Vines protocol count of input illegal RTP messages.')
vinesIfRxSppCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxSppCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxSppCnt.setDescription('Vines protocol count of input SPP messages.')
vinesIfRxIpUnknownCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxIpUnknownCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxIpUnknownCnt.setDescription('Vines protocol count of input packets of unknown Vines protocols.')
vinesIfRxIpcUnknownCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxIpcUnknownCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxIpcUnknownCnt.setDescription('Vines protocol count of input packets of unknown Vines IPC ports.')
vinesIfRxBcastHelperedCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxBcastHelperedCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxBcastHelperedCnt.setDescription('Vines protocol count of input packets helpered to another server.')
vinesIfRxBcastForwardedCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxBcastForwardedCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxBcastForwardedCnt.setDescription('Vines protocol input broadcast forwarded to other interface(s).')
vinesIfRxBcastDuplicateCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxBcastDuplicateCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxBcastDuplicateCnt.setDescription('Vines protocol input duplicate broadcast count.')
vinesIfRxEchoCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxEchoCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxEchoCnt.setDescription('Vines protocol count of input IPC echo messages.')
vinesIfRxMacEchoCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxMacEchoCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxMacEchoCnt.setDescription('Vines protocol count of input MAC layer echo frames.')
vinesIfRxProxyReplyCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfRxProxyReplyCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfRxProxyReplyCnt.setDescription('Vines protocol count of responses to proxy packets.')
vinesIfTxUnicastCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxUnicastCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxUnicastCnt.setDescription('Vines protocol unicast packets generated.')
vinesIfTxBcastCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxBcastCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxBcastCnt.setDescription('Vines protocol broadcastcast packets generated.')
vinesIfTxForwardedCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxForwardedCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxForwardedCnt.setDescription('Vines protocol count of forwarded packets.')
vinesIfTxFailedEncapsCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxFailedEncapsCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxFailedEncapsCnt.setDescription('Vines protocol output encapsulation failures.')
vinesIfTxFailedAccessCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxFailedAccessCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxFailedAccessCnt.setDescription('Vines protocol output access list failures.')
vinesIfTxFailedDownCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxFailedDownCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxFailedDownCnt.setDescription('Vines protocol output interface down count.')
vinesIfTxNotBcastToSourceCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxNotBcastToSourceCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxNotBcastToSourceCnt.setDescription('Vines protocol output broadcast not sent because interfaceleads back to the source.')
vinesIfTxNotBcastNotlanCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxNotBcastNotlanCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxNotBcastNotlanCnt.setDescription("Vines protocol output broadcast not sent due to 'Lan Only' class.")
vinesIfTxNotBcastNotgt4800Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxNotBcastNotgt4800Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxNotBcastNotgt4800Cnt.setDescription("Vines protocol output broadcast not sent due to 'High Speed' class.")
vinesIfTxNotBcastPpchargeCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxNotBcastPpchargeCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxNotBcastPpchargeCnt.setDescription("Vines protocol output broadcast not sent due to 'No Charges' class.")
vinesIfTxBcastForwardedCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxBcastForwardedCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxBcastForwardedCnt.setDescription('Vines protocol output broadcast forwarded from another interface.')
vinesIfTxBcastHelperedCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxBcastHelperedCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxBcastHelperedCnt.setDescription('Vines protocol output broadcast helpered to a vines server.')
vinesIfTxArp0Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxArp0Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxArp0Cnt.setDescription('Vines protocol count of output ARP Query Request messages.')
vinesIfTxArp1Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxArp1Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxArp1Cnt.setDescription('Vines protocol count of output ARP Query Response messages.')
vinesIfTxArp2Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxArp2Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxArp2Cnt.setDescription('Vines protocol count of output ARP Assignment Request messages.')
vinesIfTxArp3Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxArp3Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxArp3Cnt.setDescription('Vines protocol count of input ARP Assignment Response messages.')
vinesIfTxIcpErrorCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxIcpErrorCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxIcpErrorCnt.setDescription('Vines protocol count of output IPC Error messages.')
vinesIfTxIcpMetricCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxIcpMetricCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxIcpMetricCnt.setDescription('Vines protocol count of output IPC metric messages.')
vinesIfTxIpcCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxIpcCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxIpcCnt.setDescription('Vines protocol count of output ICP messages.')
vinesIfTxRtp0Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxRtp0Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxRtp0Cnt.setDescription('Vines protocol count of output RTP type 0 messages.')
vinesIfTxRtp1Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxRtp1Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxRtp1Cnt.setDescription('Vines protocol count of output RTP Request messages.')
vinesIfTxRtp2Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxRtp2Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxRtp2Cnt.setDescription('Vines protocol count of output RTP type 2 messages.')
vinesIfTxRtp3Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxRtp3Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxRtp3Cnt.setDescription('Vines protocol count of output RTP type 3 messages.')
vinesIfTxRtp4Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxRtp4Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxRtp4Cnt.setDescription('Vines protocol count of output RTP Update messages.')
vinesIfTxRtp5Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxRtp5Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxRtp5Cnt.setDescription('Vines protocol count of output RTP Response messages.')
vinesIfTxRtp6Cnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxRtp6Cnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxRtp6Cnt.setDescription('Vines protocol count of output RTP Redirect messages.')
vinesIfTxSppCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxSppCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxSppCnt.setDescription('Vines protocol count of output SPP messages.')
vinesIfTxEchoCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxEchoCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxEchoCnt.setDescription('Vines protocol count of output IPC echo messages.')
vinesIfTxMacEchoCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxMacEchoCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxMacEchoCnt.setDescription('Vines protocol count of output IPCMAC layer echo frames.')
vinesIfTxProxyCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfTxProxyCnt.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfTxProxyCnt.setDescription('Vines protocol count of proxy packets sent.')
vinesIfInputRouterFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfInputRouterFilter.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfInputRouterFilter.setDescription('Vines protocol filter on received routing information source address.')
vinesIfInputNetworkFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfInputNetworkFilter.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfInputNetworkFilter.setDescription('Vines protocol filter on received routing information content.')
vinesIfOutputNetworkFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 5, 29, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vinesIfOutputNetworkFilter.setStatus('mandatory')
if mibBuilder.loadTexts: vinesIfOutputNetworkFilter.setDescription('Vines protocol filter on transmitted routing information content.')
chassisType = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("multibus", 2), ("agsplus", 3), ("igs", 4), ("c2000", 5), ("c3000", 6), ("c4000", 7), ("c7000", 8), ("cs-500", 9), ("c7010", 10), ("c2500", 11), ("c4500", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisType.setStatus('mandatory')
if mibBuilder.loadTexts: chassisType.setDescription('Chassis type.')
chassisVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisVersion.setStatus('mandatory')
if mibBuilder.loadTexts: chassisVersion.setDescription('Chassis hardware revision level, or an empty string if unavailable.')
chassisId = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisId.setStatus('mandatory')
if mibBuilder.loadTexts: chassisId.setDescription("Unique ID string. Defaults to chassis serial number if available, otherwise empty. Can also be set with 'snmp-server chassis-id'.")
romVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: romVersion.setStatus('mandatory')
if mibBuilder.loadTexts: romVersion.setDescription('ROM monitor version.')
romSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: romSysVersion.setStatus('mandatory')
if mibBuilder.loadTexts: romSysVersion.setDescription('ROM system software version, or an empty string if unavailable.')
processorRam = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorRam.setStatus('mandatory')
if mibBuilder.loadTexts: processorRam.setDescription('Bytes of RAM available to CPU.')
nvRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRAMSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvRAMSize.setDescription('Bytes of non-volatile configuration memory.')
nvRAMUsed = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRAMUsed.setStatus('mandatory')
if mibBuilder.loadTexts: nvRAMUsed.setDescription('Bytes of non-volatile configuration memory in use.')
configRegister = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configRegister.setStatus('mandatory')
if mibBuilder.loadTexts: configRegister.setDescription('Value of configuration register.')
configRegNext = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configRegNext.setStatus('mandatory')
if mibBuilder.loadTexts: configRegNext.setDescription('Value of configuration register at next reload.')
cardTable = MibTable((1, 3, 6, 1, 4, 1, 9, 3, 6, 11), )
if mibBuilder.loadTexts: cardTable.setStatus('mandatory')
if mibBuilder.loadTexts: cardTable.setDescription('Chassis card table.')
cardTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 3, 6, 11, 1), ).setIndexNames((0, "CISCO-MIB", "cardIndex"))
if mibBuilder.loadTexts: cardTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cardTableEntry.setDescription('Chassis card table.')
cardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 6, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cardIndex.setDescription('Index into cardTable (not physical chassis slot number).')
cardType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 6, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 20, 21, 22, 23, 24, 40, 41, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 81, 82, 83, 84, 100, 101, 110, 111, 112, 113, 114, 115, 116, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209))).clone(namedValues=NamedValues(("unknown", 1), ("csc1", 2), ("csc2", 3), ("csc3", 4), ("csc4", 5), ("rp", 6), ("csc-m", 20), ("csc-mt", 21), ("csc-mc", 22), ("csc-mcplus", 23), ("csc-envm", 24), ("csc-16", 40), ("csc-p", 41), ("csc-a", 50), ("csc-e1", 51), ("csc-e2", 52), ("csc-y", 53), ("csc-s", 54), ("csc-t", 55), ("sci4s", 56), ("sci2s2t", 57), ("sci4t", 58), ("mci1t", 59), ("mci2t", 60), ("mci1s", 61), ("mci1s1t", 62), ("mci2s", 63), ("mci1e", 64), ("mci1e1t", 65), ("mci1e2t", 66), ("mci1e1s", 67), ("mci1e1s1t", 68), ("mci1e2s", 69), ("mci2e", 70), ("mci2e1t", 71), ("mci2e2t", 72), ("mci2e1s", 73), ("mci2e1s1t", 74), ("mci2e2s", 75), ("csc-r", 80), ("csc-r16", 81), ("csc-r16m", 82), ("csc-1r", 83), ("csc-2r", 84), ("csc-cctl1", 100), ("csc-cctl2", 101), ("csc-mec2", 110), ("csc-mec4", 111), ("csc-mec6", 112), ("csc-fci", 113), ("csc-fcit", 114), ("csc-hsci", 115), ("csc-ctr", 116), ("sp", 150), ("eip", 151), ("fip", 152), ("hip", 153), ("sip", 154), ("trip", 155), ("fsip", 156), ("aip", 157), ("mip", 158), ("ssp", 159), ("npm-4000-fddi-sas", 200), ("npm-4000-fddi-das", 201), ("npm-4000-1e", 202), ("npm-4000-1r", 203), ("npm-4000-2s", 204), ("npm-4000-2e1", 205), ("npm-4000-2e", 206), ("npm-4000-2r1", 207), ("npm-4000-2r", 208), ("npm-4000-4t", 209)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardType.setStatus('mandatory')
if mibBuilder.loadTexts: cardType.setDescription('Functional type of this card.')
cardDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 6, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardDescr.setStatus('mandatory')
if mibBuilder.loadTexts: cardDescr.setDescription('Text description of this card.')
cardSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 6, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSerial.setStatus('mandatory')
if mibBuilder.loadTexts: cardSerial.setDescription('The serial number of this card, or zero if unavailable.')
cardHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 6, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardHwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cardHwVersion.setDescription('Hardware revision level of this card, or an empty string if unavailable.')
cardSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 6, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cardSwVersion.setDescription('Version of the firmware or microcode installed on this card, or an empty string if unavailable.')
cardSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 3, 6, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cardSlotNumber.setDescription('Chassis slot number, or -1 if neither applicable nor determinable.')
chassisSlots = MibScalar((1, 3, 6, 1, 4, 1, 9, 3, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlots.setStatus('mandatory')
if mibBuilder.loadTexts: chassisSlots.setDescription('Number of slots in this chassis, or -1 of neither applicable nor determinable.')
mibBuilder.exportSymbols("CISCO-MIB", bufferHgMiss=bufferHgMiss, envTestPt4MarginPercent=envTestPt4MarginPercent, vinesIfRxBcastDuplicateCnt=vinesIfRxBcastDuplicateCnt, vinesIfTxEchoCnt=vinesIfTxEchoCnt, vinesIfTxMacEchoCnt=vinesIfTxMacEchoCnt, vinesIfRxZeroHopCountCnt=vinesIfRxZeroHopCountCnt, dnACost=dnACost, flashStatus=flashStatus, vinesNotgt4800=vinesNotgt4800, vinesIfPropagate=vinesIfPropagate, vinesIfRouteCache=vinesIfRouteCache, ltsLineSessionEntry=ltsLineSessionEntry, lifEntry=lifEntry, locIfstunOutPkts=locIfstunOutPkts, bufferMdSize=bufferMdSize, dnAHop=dnAHop, locIfvinesOutOctets=locIfvinesOutOctets, cardIndex=cardIndex, netConfigAddr=netConfigAddr, envTestPt4warn=envTestPt4warn, novellInmult=novellInmult, authAddr=authAddr, locIfInGiants=locIfInGiants, bufferElMiss=bufferElMiss, linterfaces=linterfaces, locIfInAbort=locIfInAbort, lipAccountEntry=lipAccountEntry, dnReceived=dnReceived, dnBigaddr=dnBigaddr, vinesIfAccesslist=vinesIfAccesslist, tslineSesIdle=tslineSesIdle, bufferSmTrim=bufferSmTrim, locIfnovellOutOctets=locIfnovellOutOctets, ltsLineSessionTable=ltsLineSessionTable, actDst=actDst, flashToNetStatus=flashToNetStatus, agsplus_sysID=agsplus_sysID, vinesIfTxNotBcastNotgt4800Cnt=vinesIfTxNotBcastNotgt4800Cnt, locIfpupOutOctets=locIfpupOutOctets, locIflanmanInPkts=locIflanmanInPkts, dnForward=dnForward, locIfvinesInOctets=locIfvinesInOctets, flashCard=flashCard, vinesIfRedirectInterval=vinesIfRedirectInterval, whyReload=whyReload, atNobuffer=atNobuffer, tslineSesSession=tslineSesSession, atRtmpin=atRtmpin, dnIfTable=dnIfTable, locIfInBitsSec=locIfInBitsSec, atLocal=atLocal, tsLineLoc=tsLineLoc, atUnknown=atUnknown, locIfclnsOutOctets=locIfclnsOutOctets, vinesIfRxIcpIllegalCnt=vinesIfRxIcpIllegalCnt, dnLevel1s=dnLevel1s, novellForward=novellForward, locIfFSIPdtr=locIfFSIPdtr, atDdpbad=atDdpbad, tmpvines=tmpvines, xnsEchorepin=xnsEchorepin, dnHIfIndex=dnHIfIndex, ckactDst=ckactDst, vinesIfTxIcpErrorCnt=vinesIfTxIcpErrorCnt, locIfFSIPdsr=locIfFSIPdsr, atArpprobe=atArpprobe, dnLevel1sent=dnLevel1sent, configRegister=configRegister, locIfclnsInOctets=locIfclnsInOctets, actSrc=actSrc, lipxCkAccountingEntry=lipxCkAccountingEntry, vinesIfRxRtp5Cnt=vinesIfRxRtp5Cnt, bootHost=bootHost, dnHCost=dnHCost, vinesIfArpEnabled=vinesIfArpEnabled, locIfInRunts=locIfInRunts, locIfvinesInPkts=locIfvinesInPkts, locIfdecnetInPkts=locIfdecnetInPkts, locIfInIgnored=locIfInIgnored, locIfpupInPkts=locIfpupInPkts, locIfipInOctets=locIfipInOctets, envTestPt3Descr=envTestPt3Descr, flashEntries=flashEntries, locIfapolloInOctets=locIfapolloInOctets, cardTable=cardTable, locIfReliab=locIfReliab, vinesIfFastokay=vinesIfFastokay, lfsipTable=lfsipTable, tsLineUses=tsLineUses, tsLineFlow=tsLineFlow, locIfsrbInPkts=locIfsrbInPkts, locIfFSIPtype=locIfFSIPtype, vinesIfServerless=vinesIfServerless, vinesIfTxRtp6Cnt=vinesIfTxRtp6Cnt, xnsEchorepout=xnsEchorepout, tsLineNoise=tsLineNoise, vinesIfTxArp2Cnt=vinesIfTxArp2Cnt, locIfFastInOctets=locIfFastInOctets, ping=ping, locIfdecnetOutOctets=locIfdecnetOutOctets, locIfnovellInOctets=locIfnovellInOctets, novellInput=novellInput, dnBadhello=dnBadhello, locIfspanInPkts=locIfspanInPkts, lsystem=lsystem, envPresent=envPresent, sysClearARP=sysClearARP, envTestPt5Measure=envTestPt5Measure, envTestPt3Measure=envTestPt3Measure, locIfLastOut=locIfLastOut, lFSIPEntry=lFSIPEntry, lipAddrEntry=lipAddrEntry, sysConfigAddr=sysConfigAddr, vinesIfMetric=vinesIfMetric, locIfapolloInPkts=locIfapolloInPkts, bufferLgTotal=bufferLgTotal, bufferMdFree=bufferMdFree, protocol_translator=protocol_translator, vinesIfTxArp1Cnt=vinesIfTxArp1Cnt, envTestPt1warn=envTestPt1warn, vinesIfRxBcastinCnt=vinesIfRxBcastinCnt, vinesIfTxForwardedCnt=vinesIfTxForwardedCnt, envTestPt4Descr=envTestPt4Descr, vinesClient=vinesClient, locIfprobeOutPkts=locIfprobeOutPkts, vinesIfTxSppCnt=vinesIfTxSppCnt, ipxCkactPkts=ipxCkactPkts, dnLevel2s=dnLevel2s, envTestPt5Descr=envTestPt5Descr, xnsHopcnt=xnsHopcnt, dnNotlong=dnNotlong, vinesOutput=vinesOutput, nvRAMUsed=nvRAMUsed, locIfnovellInPkts=locIfnovellInPkts, atNbpout=atNbpout, configRegNext=configRegNext, novellNoroute=novellNoroute, vinesIfSplitDisabled=vinesIfSplitDisabled, dnHostTableEntry=dnHostTableEntry, vinesBcastout=vinesBcastout, atNoencap=atNoencap, vinesIfRxRtp2Cnt=vinesIfRxRtp2Cnt, cardType=cardType, locIfdecnetOutPkts=locIfdecnetOutPkts, cardSlotNumber=cardSlotNumber, ipxCkactAge=ipxCkactAge, vinesIfRxArpIllegalCnt=vinesIfRxArpIllegalCnt, bufferHgHit=bufferHgHit, locIfmopInOctets=locIfmopInOctets, envTestPt6last=envTestPt6last, c7000_sysID=c7000_sysID, c4500_sysID=c4500_sysID, ckactByts=ckactByts, avgBusy5=avgBusy5, vinesSubNet=vinesSubNet, vinesIfRxIpcCnt=vinesIfRxIpcCnt, tsLines=tsLines, tslineSesAddr=tslineSesAddr, dnLevel2sent=dnLevel2sent, bufferBgTotal=bufferBgTotal, bufferElMax=bufferElMax, lflashFileDirEntry=lflashFileDirEntry, tmpnovell=tmpnovell, dnFormaterr=dnFormaterr, locIfReason=locIfReason, actCheckPoint=actCheckPoint, dnHPrio=dnHPrio, atZipout=atZipout, locIfxnsOutOctets=locIfxnsOutOctets, netConfigProto=netConfigProto, dnNoaccess=dnNoaccess, vinesIfRxRtpIllegalCnt=vinesIfRxRtpIllegalCnt, vinesIfTxRtp5Cnt=vinesIfTxRtp5Cnt, atArpreq=atArpreq, tmpxns=tmpxns, c4000_sysID=c4000_sysID, vinesIfTxNotBcastNotlanCnt=vinesIfTxNotBcastNotlanCnt, envTestPt2Measure=envTestPt2Measure, flashFree=flashFree, tsLineModem=tsLineModem, flashDirSize=flashDirSize, locIfmopInPkts=locIfmopInPkts, busyPer=busyPer, xnsBcastin=xnsBcastin, locIfarpOutPkts=locIfarpOutPkts, romVersion=romVersion, vinesIfTxNotBcastToSourceCnt=vinesIfTxNotBcastToSourceCnt, locIPWho=locIPWho, locIfOutPktsSec=locIfOutPktsSec, locRtCount=locRtCount, sysConfigProto=sysConfigProto, tsLineScrwid=tsLineScrwid, terminal_server=terminal_server, locIfbridgedInPkts=locIfbridgedInPkts, vinesFormaterror=vinesFormaterror, tsLineSpeedout=tsLineSpeedout, vinesIcpOut=vinesIcpOut, novellBcastout=novellBcastout, atArpreply=atArpreply, locIfCarTrans=locIfCarTrans, vinesIfRxBcastHelperedCnt=vinesIfRxBcastHelperedCnt, bufferMdMiss=bufferMdMiss, vinesIfRxRtp1Cnt=vinesIfRxRtp1Cnt, loctcpConnOutBytes=loctcpConnOutBytes, tsLineAutobaud=tsLineAutobaud, vinesIfRxRtp4Cnt=vinesIfRxRtp4Cnt, locIfipOutOctets=locIfipOutOctets, locIfDelay=locIfDelay, ipxCkactByts=ipxCkactByts, dnHellos=dnHellos, vinesIfRxIcpMetricCnt=vinesIfRxIcpMetricCnt, bufferLgTrim=bufferLgTrim, xnsErrin=xnsErrin, locIfprobeOutOctets=locIfprobeOutOctets, locIfOutputQueueDrops=locIfOutputQueueDrops, bufferHgSize=bufferHgSize, locIfspanOutPkts=locIfspanOutPkts, netConfigSet=netConfigSet, hostName=hostName, tslineSesDir=tslineSesDir, locIflanmanOutPkts=locIflanmanOutPkts, novellUnknown=novellUnknown, vinesIfRxProxyReplyCnt=vinesIfRxProxyReplyCnt, tsLineScrlen=tsLineScrlen, lipRoutingTable=lipRoutingTable, vinesIfRxRtp3Cnt=vinesIfRxRtp3Cnt, dnNomemory=dnNomemory, atNoaccess=atNoaccess, envTestPt2last=envTestPt2last, bufferNoMem=bufferNoMem, xnsNoroute=xnsNoroute, novellSapresin=novellSapresin, atNoroute=atNoroute, locIflanmanInOctets=locIflanmanInOctets, vinesIfInBytes=vinesIfInBytes, vinesIfRxArp3Cnt=vinesIfRxArp3Cnt, netToFlashTime=netToFlashTime, tsLineType=tsLineType, bufferLgMax=bufferLgMax, locIfDescr=locIfDescr, dnHHop=dnHHop, ltsLineTable=ltsLineTable, vinesIfRxSppCnt=vinesIfRxSppCnt, envTestPt5MarginPercent=envTestPt5MarginPercent, xnsEchoreqout=xnsEchoreqout, locIfchaosOutOctets=locIfchaosOutOctets, actThresh=actThresh, gateway_server=gateway_server, envTestPt3last=envTestPt3last, locIfOutBitsSec=locIfOutBitsSec, bufferHgTrim=bufferHgTrim, locIfInFrame=locIfInFrame, flashEraseTime=flashEraseTime, tsLineTerm=tsLineTerm)
mibBuilder.exportSymbols("CISCO-MIB", vinesBcastfwd=vinesBcastfwd, locIfSlowOutOctets=locIfSlowOutOctets, atNbpin=atNbpin, locIfpupInOctets=locIfpupInOctets, atHopcnt=atHopcnt, tmpappletalk=tmpappletalk, locIfotherInPkts=locIfotherInPkts, locIfmopOutPkts=locIfmopOutPkts, ipxActSrc=ipxActSrc, bufferHgCreate=bufferHgCreate, dnNotgateway=dnNotgateway, ipxActByts=ipxActByts, locIfFSIPcts=locIfFSIPcts, locIfHardType=locIfHardType, envTestPt6MarginPercent=envTestPt6MarginPercent, novellHopcnt=novellHopcnt, products=products, netToFlash=netToFlash, idleCount=idleCount, freeMem=freeMem, sysConfigName=sysConfigName, dnHNextHop=dnHNextHop, lifTable=lifTable, locIfFSIPrts=locIfFSIPrts, dnToomanyhops=dnToomanyhops, locIfpupOutPkts=locIfpupOutPkts, tsMsgText=tsMsgText, netConfigName=netConfigName, actAge=actAge, novellSapout=novellSapout, locIfSlowInOctets=locIfSlowInOctets, locIfxnsInOctets=locIfxnsInOctets, bufferSmMiss=bufferSmMiss, locIfFastInPkts=locIfFastInPkts, locIfchaosOutPkts=locIfchaosOutPkts, vinesIfEnctype=vinesIfEnctype, vinesIfRxEchoCnt=vinesIfRxEchoCnt, locIfFastOutPkts=locIfFastOutPkts, dnIfCost=dnIfCost, bufferElHit=bufferElHit, flashToNet=flashToNet, atInmult=atInmult, cardTableEntry=cardTableEntry, locIPSecurity=locIPSecurity, locIfarpOutOctets=locIfarpOutOctets, bufferLgMiss=bufferLgMiss, dnArea=dnArea, local=local, lipCkAccountingTable=lipCkAccountingTable, tmpvinesIfTable=tmpvinesIfTable, dnHost=dnHost, ipxActPkts=ipxActPkts, atEcho=atEcho, bufferBgHit=bufferBgHit, atRtmpout=atRtmpout, lat=lat, cardSwVersion=cardSwVersion, bufferElFree=bufferElFree, writeMem=writeMem, envTestPt1MarginVal=envTestPt1MarginVal, vinesIfTxUnicastCnt=vinesIfTxUnicastCnt, locIfFSIPdcd=locIfFSIPdcd, envTestPt6Measure=envTestPt6Measure, locIfLastOutHang=locIfLastOutHang, locIfFastOutOctets=locIfFastOutOctets, envTestPt1Descr=envTestPt1Descr, hostConfigSet=hostConfigSet, ipxCkactDst=ipxCkactDst, dnAIfIndex=dnAIfIndex, vinesIfTxNotBcastPpchargeCnt=vinesIfTxNotBcastPpchargeCnt, envTestPt4Measure=envTestPt4Measure, actLostByts=actLostByts, bufferSmSize=bufferSmSize, locIfFSIPIndex=locIfFSIPIndex, tsLineNum=tsLineNum, locIfstunInOctets=locIfstunInOctets, atZipin=atZipin, cardHwVersion=cardHwVersion, locIfappletalkOutPkts=locIfappletalkOutPkts, locIfKeep=locIfKeep, tsMsgSend=tsMsgSend, cardSerial=cardSerial, flashDirStatus=flashDirStatus, bufferLgCreate=bufferLgCreate, cisco=cisco, locIfapolloOutOctets=locIfapolloOutOctets, locIfotherOutPkts=locIfotherOutPkts, temporary=temporary, tmpdecnet=tmpdecnet, tsMsgTmpBanner=tsMsgTmpBanner, ipxActCheckPoint=ipxActCheckPoint, locIfprobeInOctets=locIfprobeInOctets, tsLineRotary=tsLineRotary, lflashFileDirTable=lflashFileDirTable, dnDatas=dnDatas, vinesIfTxRtp1Cnt=vinesIfTxRtp1Cnt, loctcpConnInPkts=loctcpConnInPkts, vinesIfTxRtp3Cnt=vinesIfTxRtp3Cnt, vinesIfInputNetworkFilter=vinesIfInputNetworkFilter, bufferBgTrim=bufferBgTrim, vinesNotlan=vinesNotlan, tslineSesLine=tslineSesLine, bufferBgSize=bufferBgSize, vinesIfOutputNetworkFilter=vinesIfOutputNetworkFilter, vinesIfTxArp3Cnt=vinesIfTxArp3Cnt, tsLineTmo=tsLineTmo, xnsFormerr=xnsFormerr, actLostPkts=actLostPkts, locIfbridgedOutPkts=locIfbridgedOutPkts, envTestPt2Descr=envTestPt2Descr, atOutput=atOutput, flashDirName=flashDirName, novellOutput=novellOutput, vinesIfRxNoRouteCnt=vinesIfRxNoRouteCnt, bufferBgCreate=bufferBgCreate, dnOtherlevel2=dnOtherlevel2, locIfclnsOutPkts=locIfclnsOutPkts, locIfipOutPkts=locIfipOutPkts, locIfxnsOutPkts=locIfxnsOutPkts, tslineSesName=tslineSesName, vinesIfTxIcpMetricCnt=vinesIfTxIcpMetricCnt, locIfInOverrun=locIfInOverrun, flashEraseStatus=flashEraseStatus, locIfbridgedInOctets=locIfbridgedInOctets, atDdpshort=atDdpshort, loctcpConnInBytes=loctcpConnInBytes, flashErase=flashErase, locIfLineProt=locIfLineProt, novellNoencap=novellNoencap, novellLocal=novellLocal, dnNovector=dnNovector, writeNet=writeNet, vinesIfServerlessBcast=vinesIfServerlessBcast, vinesNocharges=vinesNocharges, dnIfTableEntry=dnIfTableEntry, locIfipInPkts=locIfipInPkts, xnsNotgate=xnsNotgate, locIfsrbOutPkts=locIfsrbOutPkts, tsLineSestmo=tsLineSestmo, domainName=domainName, vinesIfRxRtp6Cnt=vinesIfRxRtp6Cnt, tsMsgTtyLine=tsMsgTtyLine, dnHellosent=dnHellosent, legp=legp, xnsOutput=xnsOutput, tslineSesCur=tslineSesCur, bufferBgFree=bufferBgFree, tslineSesType=tslineSesType, bufferMdMax=bufferMdMax, envSerialNumber=envSerialNumber, lipRouteEntry=lipRouteEntry, vinesIfOuts=vinesIfOuts, c3000_sysID=c3000_sysID, vinesIfOutBytes=vinesIfOutBytes, ltcp=ltcp, lflash=lflash, vinesForwarded=vinesForwarded, locIfchaosInPkts=locIfchaosInPkts, ciscoContactInfo=ciscoContactInfo, lipAccountingTable=lipAccountingTable, xnsForward=xnsForward, locIPHelper=locIPHelper, ltsLineEntry=ltsLineEntry, bufferSmMax=bufferSmMax, vinesLocaldest=vinesLocaldest, vinesIfTxBcastHelperedCnt=vinesIfTxBcastHelperedCnt, ckactAge=ckactAge, ludp=ludp, bufferLgHit=bufferLgHit, cs_500_sysID=cs_500_sysID, bufferFail=bufferFail, locIfotherInOctets=locIfotherInOctets, dnHIdx1=dnHIdx1, nvRAMSize=nvRAMSize, locIfInPktsSec=locIfInPktsSec, locIfCollisions=locIfCollisions, lip=lip, bufferMdTotal=bufferMdTotal, locIfxnsInPkts=locIfxnsInPkts, vinesIfInputRouterFilter=vinesIfInputRouterFilter, dnNoroute=dnNoroute, dnAPrio=dnAPrio, ipxActThresh=ipxActThresh, actByts=actByts, vinesIfTxProxyCnt=vinesIfTxProxyCnt, xnsUnknown=xnsUnknown, hostConfigName=hostConfigName, locIfmopOutOctets=locIfmopOutOctets, locIfotherOutOctets=locIfotherOutOctets, locIfdecnetInOctets=locIfdecnetInOctets, ipxActLostPkts=ipxActLostPkts, vinesIfTxFailedDownCnt=vinesIfTxFailedDownCnt, xnsInput=xnsInput, licmp=licmp, locIfSlowInPkts=locIfSlowInPkts, novellChksum=novellChksum, locIfstunInPkts=locIfstunInPkts, vinesIfTxFailedAccessCnt=vinesIfTxFailedAccessCnt, atBcastout=atBcastout, ipxActDst=ipxActDst, lipxCkAccountingTable=lipxCkAccountingTable, bufferHgTotal=bufferHgTotal, dnOtherhello=dnOtherhello, envTestPt3MarginPercent=envTestPt3MarginPercent, tmpchassis=tmpchassis, dnAreaTable=dnAreaTable, dnAreaTableEntry=dnAreaTableEntry, vinesIfRxLocalDestCnt=vinesIfRxLocalDestCnt, vinesMacEchoOut=vinesMacEchoOut, locIfappletalkOutOctets=locIfappletalkOutOctets, tsMsgDuration=tsMsgDuration, vinesInput=vinesInput, dnOtherlevel1=dnOtherlevel1, ipNoaccess=ipNoaccess, locIfnovellOutPkts=locIfnovellOutPkts, vinesHopcount=vinesHopcount, ipxCkactSrc=ipxCkactSrc, hostConfigProto=hostConfigProto, dnBadlevel1=dnBadlevel1, envTechnicianID=envTechnicianID, xnsChksum=xnsChksum, atChksum=atChksum, vinesUnknown=vinesUnknown, envTestPt6warn=envTestPt6warn, locIPRedirects=locIPRedirects, bufferHgFree=bufferHgFree, netToFlashStatus=netToFlashStatus, vinesIfTxIpcCnt=vinesIfTxIpcCnt, novellSapreply=novellSapreply, c2000_sysID=c2000_sysID, lipxAccountingEntry=lipxAccountingEntry, vinesIfRxRtp0Cnt=vinesIfRxRtp0Cnt, locIfvinesOutPkts=locIfvinesOutPkts, actPkts=actPkts, bufferBgMax=bufferBgMax, vinesIfTxRtp0Cnt=vinesIfTxRtp0Cnt, locIfbridgedOutOctets=locIfbridgedOutOctets, locIPUnreach=locIPUnreach, ltcpConnTable=ltcpConnTable, chassisVersion=chassisVersion, novellBcastin=novellBcastin, locIfLoad=locIfLoad, vinesNoroute=vinesNoroute, envBurnDate=envBurnDate, bufferSmTotal=bufferSmTotal, atInput=atInput, locIfSlowOutPkts=locIfSlowOutPkts, lipxAccountingTable=lipxAccountingTable, locIfspanOutOctets=locIfspanOutOctets, xnsNoencap=xnsNoencap, vinesCksumerr=vinesCksumerr, chassisSlots=chassisSlots, vinesIfTxFailedEncapsCnt=vinesIfTxFailedEncapsCnt, bufferSmCreate=bufferSmCreate)
mibBuilder.exportSymbols("CISCO-MIB", tsLineNses=tsLineNses, locIfappletalkInOctets=locIfappletalkInOctets, dnANextHop=dnANextHop, locIfInputQueueDrops=locIfInputQueueDrops, dnAAge=dnAAge, xnsLocal=xnsLocal, novellSapreqin=novellSapreqin, tsLineActive=tsLineActive, envTestPt2MarginVal=envTestPt2MarginVal, tsLineSpeedin=tsLineSpeedin, envTestPt1last=envTestPt1last, bufferHgMax=bufferHgMax, ckactSrc=ckactSrc, avgBusy1=avgBusy1, vinesIfRxNotEnabledCnt=vinesIfRxNotEnabledCnt, vinesIfRxMacEchoCnt=vinesIfRxMacEchoCnt, vinesIfRxIcpErrorCnt=vinesIfRxIcpErrorCnt, dnHostTable=dnHostTable, idleWired=idleWired, bufferMdHit=bufferMdHit, locIfprobeInPkts=locIfprobeInPkts, xnsInmult=xnsInmult, atEchoill=atEchoill, vinesProxyCnt=vinesProxyCnt, atForward=atForward, tsMsgIntervaltim=tsMsgIntervaltim, locIfRestarts=locIfRestarts, vinesMetricOut=vinesMetricOut, bufferElCreate=bufferElCreate, loctcpConnOutPkts=loctcpConnOutPkts, vinesIfRxForwardedCnt=vinesIfRxForwardedCnt, ipxActLostByts=ipxActLostByts, ipxActAge=ipxActAge, xnsEchoreqin=xnsEchoreqin, flashToNetTime=flashToNetTime, bufferSmFree=bufferSmFree, xnsErrout=xnsErrout, atDdplong=atDdplong, flashController=flashController, atBcastin=atBcastin, locIfInCRC=locIfInCRC, vinesIcpIn=vinesIcpIn, envTestPt1Measure=envTestPt1Measure, dnNoencap=dnNoencap, vinesEncapsfailed=vinesEncapsfailed, atAtp=atAtp, lipCkAccountEntry=lipCkAccountEntry, locRtMask=locRtMask, locIfchaosInOctets=locIfchaosInOctets, xnsBcastout=xnsBcastout, tmpvinesIfTableEntry=tmpvinesIfTableEntry, vinesIfTxBcastCnt=vinesIfTxBcastCnt, bufferLgFree=bufferLgFree, c7010_sysID=c7010_sysID, vinesMacEchoIn=vinesMacEchoIn, romId=romId, processorRam=processorRam, vinesIfRxFormatErrorCnt=vinesIfRxFormatErrorCnt, locIfapolloOutPkts=locIfapolloOutPkts, envTestPt4last=envTestPt4last, vinesIfTxArp0Cnt=vinesIfTxArp0Cnt, envTestPt6Descr=envTestPt6Descr, bufferMdTrim=bufferMdTrim, locIflanmanOutOctets=locIflanmanOutOctets, vinesIfRxIpcUnknownCnt=vinesIfRxIpcUnknownCnt, locIfResets=locIfResets, dnHAge=dnHAge, vinesIfTxRtp2Cnt=vinesIfTxRtp2Cnt, vinesProxyReplyCnt=vinesProxyReplyCnt, vinesBcastin=vinesBcastin, locIfspanInOctets=locIfspanInOctets, locIfLastIn=locIfLastIn, vinesIfRxArp0Cnt=vinesIfRxArp0Cnt, bufferBgMiss=bufferBgMiss, envTestPt5warn=envTestPt5warn, romSysVersion=romSysVersion, c2500_sysID=c2500_sysID, tsLineUser=tsLineUser, locIfsrbInOctets=locIfsrbInOctets, novellFormerr=novellFormerr, igs_sysID=igs_sysID, vinesEchoOut=vinesEchoOut, bufferSmHit=bufferSmHit, vinesIfIns=vinesIfIns, vinesIfRxBcastForwardedCnt=vinesIfRxBcastForwardedCnt, locIfDribbleInputs=locIfDribbleInputs, bufferMdCreate=bufferMdCreate, vinesIfRxChecksumErrorCnt=vinesIfRxChecksumErrorCnt, sysClearInt=sysClearInt, bufferLgSize=bufferLgSize, cardDescr=cardDescr, locRtUses=locRtUses, chassisType=chassisType, dnHIdx2=dnHIdx2, vinesNet=vinesNet, chassisId=chassisId, xnsFwdbrd=xnsFwdbrd, tsLineEsc=tsLineEsc, locIfarpInOctets=locIfarpInOctets, hostConfigAddr=hostConfigAddr, ckactPkts=ckactPkts, locIfclnsInPkts=locIfclnsInPkts, vinesIfRxIpUnknownCnt=vinesIfRxIpUnknownCnt, locIfarpInPkts=locIfarpInPkts, vinesEchoIn=vinesEchoIn, vinesIfLineup=vinesIfLineup, loctcpConnElapsed=loctcpConnElapsed, lts=lts, locIPHow=locIPHow, locIfstunOutOctets=locIfstunOutOctets, flashVPP=flashVPP, vinesIfRxArp2Cnt=vinesIfRxArp2Cnt, envTestPt3warn=envTestPt3warn, locIfappletalkInPkts=locIfappletalkInPkts, dnNotimp=dnNotimp, ltcpConnEntry=ltcpConnEntry, envTestPt2warn=envTestPt2warn, atNotgate=atNotgate, trouter=trouter, vinesIfTxBcastForwardedCnt=vinesIfTxBcastForwardedCnt, lipAddrTable=lipAddrTable, flashSize=flashSize, envType=envType, locIfsrbOutOctets=locIfsrbOutOctets, vinesIfTxRtp4Cnt=vinesIfTxRtp4Cnt, vinesIfRxArp1Cnt=vinesIfRxArp1Cnt, envFirmVersion=envFirmVersion, envTestPt5last=envTestPt5last)
