#
# PySNMP MIB module H323-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H323-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:21:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
timeOccurred, percent, comment, csType, reason, port, gwType, csID, registrationStatus, gwID, gwIP, moduleID, code = mibBuilder.importSymbols("AGGREGATED-EXT-MIB", "timeOccurred", "percent", "comment", "csType", "reason", "port", "gwType", "csID", "registrationStatus", "gwID", "gwIP", "moduleID", "code")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, TimeTicks, NotificationType, ObjectName, MibIdentifier, Counter32, snmpModules, enterprises, ObjectIdentity, Bits, IpAddress, Integer32, Gauge32, Unsigned32, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "NotificationType", "ObjectName", "MibIdentifier", "Counter32", "snmpModules", "enterprises", "ObjectIdentity", "Bits", "IpAddress", "Integer32", "Gauge32", "Unsigned32", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TimeStamp, TestAndIncr, DisplayString, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TestAndIncr", "DisplayString", "RowStatus", "TruthValue", "TextualConvention")
lucent = MibIdentifier((1, 3, 6, 1, 4, 1, 1751))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1))
softSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198))
h323DeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 3))
h323Traps = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 3, 0))
if mibBuilder.loadTexts: h323Traps.setLastUpdated('240701')
if mibBuilder.loadTexts: h323Traps.setOrganization('Lucent Technologies')
if mibBuilder.loadTexts: h323Traps.setContactInfo('')
if mibBuilder.loadTexts: h323Traps.setDescription('The MIB module for entities implementing the xxxx protocol.')
h323CSConnectionStatus = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 3, 0, 0)).setObjects(("AGGREGATED-EXT-MIB", "timeOccurred"), ("AGGREGATED-EXT-MIB", "code"), ("AGGREGATED-EXT-MIB", "csID"), ("AGGREGATED-EXT-MIB", "csType"), ("AGGREGATED-EXT-MIB", "registrationStatus"), ("AGGREGATED-EXT-MIB", "reason"), ("AGGREGATED-EXT-MIB", "comment"))
if mibBuilder.loadTexts: h323CSConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: h323CSConnectionStatus.setDescription("Indicates the registration status of the device server(registered, unregistered or registration failed). VARIABLE DEFINITIONS: 1) timeStamp - time when the alarm occured, in <sec>.<usec> format 2) code - bitwise OR of severity, facility, errorCode, instanceID, severity<<28 | facility<<24 | errorCode<<16 | instanceid 3) csID - call server identifier which will be returned by the call server when any device server registers to it. 4) csType - call server type, 'primary' or 'secondary'. (Right now this information does not come from the call server. It is set to 'primary'.), value = 0 for primary, value = 1 for secondary 5) registrationStatus - 'registered' | 'unregistred' | 'registrationFailed' depending on whether the device server is registered, unregistered or could not register to the call server respectively. 6) reason - {'unreachable' | 'unknown' | 'invalidParam'}, indicates the cause for the registration failure. 7) comment - Any comment sent along with this NOTIFICATION. Severity: INFO for registration/unregistration. CRITICAL for failed registration.")
h323GatewayUtilization = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 3, 0, 1)).setObjects(("AGGREGATED-EXT-MIB", "timeOccurred"), ("AGGREGATED-EXT-MIB", "code"), ("AGGREGATED-EXT-MIB", "gwID"), ("AGGREGATED-EXT-MIB", "moduleID"), ("AGGREGATED-EXT-MIB", "percent"), ("AGGREGATED-EXT-MIB", "comment"))
if mibBuilder.loadTexts: h323GatewayUtilization.setStatus('current')
if mibBuilder.loadTexts: h323GatewayUtilization.setDescription('It is triggered when a preset utilization value is set for a gateway and it has met that utilization. VARIABLE DEFINITIONS: 1) timeOccurred - time when the alarm occured, in <sec>.<usec> format 2) code - bitwise OR of severity, facility, errorCode, instanceID, severity<<28 | facility<<24 | errorCode<<16 | instanceid 2) gwID - unique identifier assigned to the gateway. 3) moduleID - The module of the gateway that reports utilization. 4) percent - The percent of utilization being reported. 5) comment - Any comment sent along with this trap Severity: INFO/MINOR depending on the preset value.')
h323DSError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 3, 0, 2)).setObjects(("AGGREGATED-EXT-MIB", "timeOccurred"), ("AGGREGATED-EXT-MIB", "code"), ("AGGREGATED-EXT-MIB", "reason"), ("AGGREGATED-EXT-MIB", "comment"))
if mibBuilder.loadTexts: h323DSError.setStatus('current')
if mibBuilder.loadTexts: h323DSError.setDescription("When any error occurs in the device server. VARIABLE DEFINITIONS: 1) timeOccurred - time when the alarm occured, in <sec>.<usec> format 2) code - bitwise OR of severity, facility, errorCode, instanceID, severity<<28 | facility<<24 | errorCode<<16 | instanceid 3) reason - the reason for the error that occurs in the device server. Takes one of these values: 'internalError' | 'systemResourceUnavailable' | 'invalidGatewayID' | 'unknown' 4) comment - Any comment sent along with this trap. Severity: INFO (internalError), MAJOR (systemResourceUnavailable), INFO (invalidGatewayID - gateway ID is invalid or no such gateway exists) INFO (unknownError - any other errors).")
h323UnreachableGateway = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 3, 0, 3)).setObjects(("AGGREGATED-EXT-MIB", "timeOccurred"), ("AGGREGATED-EXT-MIB", "code"), ("AGGREGATED-EXT-MIB", "gwID"), ("AGGREGATED-EXT-MIB", "gwType"), ("AGGREGATED-EXT-MIB", "gwIP"), ("AGGREGATED-EXT-MIB", "port"), ("AGGREGATED-EXT-MIB", "comment"))
if mibBuilder.loadTexts: h323UnreachableGateway.setStatus('current')
if mibBuilder.loadTexts: h323UnreachableGateway.setDescription("When any gateway is unreachable . Either the TCP/IP address is wrong or the gateway is down. VARIABLE DEFINITIONS: 1) timeOccurred - time when the alarm occured, in <sec>.<usec> format 2) code - bitwise OR of severity, facility, errorCode, instanceID, severity<<28 | facility<<24 | errorCode<<16 | instanceid 2) gwID - unique identifier of the gateway 3) gwType - protocol handled by the gateway, { 'sip' | 'h323' } 4) gwIP - IP Address of the gateway, the device server tries to connect to, in order to place a call. 5) port - call signalling port of the gateway, the device server tries to connect to. 6) comment - Any comment sent along with this trap Severity: MINOR depending on the preset value.")
h323CommandFailed = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 3, 0, 4)).setObjects(("AGGREGATED-EXT-MIB", "timeOccurred"), ("AGGREGATED-EXT-MIB", "code"), ("AGGREGATED-EXT-MIB", "reason"), ("AGGREGATED-EXT-MIB", "comment"))
if mibBuilder.loadTexts: h323CommandFailed.setStatus('current')
if mibBuilder.loadTexts: h323CommandFailed.setDescription("Triggered when any request is failed by the device server. VARIABLE DEFINITIONS: 1) timeOccurred - time when the alarm occured, in <sec>.<usec> format 2) code - bitwise OR of severity, facility, errorCode, instanceID, severity<<28 | facility<<24 | errorCode<<16 | instanceid 3) reason - reason for the failure of the command. {'internalError' | 'systemResourceUnavailable' |'notSupported' | 'unknown' } 4) comment - Any comment along with this trap. Severity: MINOR (or may be command sensitive).")
mibBuilder.exportSymbols("H323-TRAP-MIB", h323CommandFailed=h323CommandFailed, h323DSError=h323DSError, PYSNMP_MODULE_ID=h323Traps, products=products, h323CSConnectionStatus=h323CSConnectionStatus, h323Traps=h323Traps, h323DeviceServer=h323DeviceServer, h323GatewayUtilization=h323GatewayUtilization, h323UnreachableGateway=h323UnreachableGateway, softSwitch=softSwitch, lucent=lucent)
