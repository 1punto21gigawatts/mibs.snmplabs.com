#
# PySNMP MIB module Wellfleet-APPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-APPN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, NotificationType, ObjectIdentity, iso, Unsigned32, MibIdentifier, ModuleIdentity, Gauge32, IpAddress, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "NotificationType", "ObjectIdentity", "iso", "Unsigned32", "MibIdentifier", "ModuleIdentity", "Gauge32", "IpAddress", "Counter64", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfAppnGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfAppnGroup")
wfAppnNode = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1))
wfAppnNodeInfoAndCaps = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1))
wfAppnNn = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2))
wfAppnNnTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3))
wfAppnLocalTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3))
wfAppnLocalThisNode = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1))
wfAppnDirectory = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4))
wfAppnCos = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5))
wfAppnTps = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6))
wfAppnDlu = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7))
wfAppnNodeDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete the APPN Node.')
wfAppnNodeDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable the APPN Node.')
wfAppnNodeState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeState.setDescription('The current state of the APPN CP.')
wfAppnNodeCpName = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeCpName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCpName.setDescription('Administratively-assigned network name for this node in the format NETID.CPNAME.')
wfAppnNodeNetid = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeNetid.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNetid.setDescription('Administratively-assigned APPN network identification, which can be from one to eight characters. This ID is used with the control point name to create a fully-qualified control point name.')
wfAppnNodeBlockNum = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeBlockNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeBlockNum.setDescription('The block number is the first three digits of the node_id. These 3 hexadecimal digits identify the product.')
wfAppnNodeIdNum = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeIdNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIdNum.setDescription('The ID number is the last 5 digits of the node_id. These 5 hexadecimal digits are administratively defined and combined with the 3 digit block number from the node_id. This node_id is used to identify the local node and is included in APPN alerts as well as being included in XIDs. A unique value is required for connections to SNA sub-area.')
wfAppnNodeType = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("nn", 1), ("en", 2), ("len", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeType.setDescription('Type of APPN node, either Network Node, End Node, or Low Entry Networking Node. This node is always a Network Node.')
wfAppnNodeUpTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeUpTime.setDescription('Time (in hundredths of a second) since this APPN node was initialized.')
wfAppnNodeNegotLs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeNegotLs.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNegotLs.setDescription('Indicates whether this node supports negotiable link stations.')
wfAppnNodeSegReasm = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeSegReasm.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeSegReasm.setDescription('Indicates whether this node supports segment reassembly. This is only supported when segment generation is also supported.')
wfAppnNodeBindReasm = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeBindReasm.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeBindReasm.setDescription('Indicates whether this node supports Bind segment reassembly. This will only be supported when Bind segment generation is also supported.')
wfAppnNodeParallelTg = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeParallelTg.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeParallelTg.setDescription('Indicates whether this node supports parallel TGs.')
wfAppnNodeService = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeService.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeService.setDescription('Indicates whether this node allows call-in from nodes not defined locally.')
wfAppnNodeAdaptiveBindPacing = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeAdaptiveBindPacing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeAdaptiveBindPacing.setDescription('Indicates whether this node supports adaptive bind pacing.')
wfAppnNodeNnRcvRegChar = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeNnRcvRegChar.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnRcvRegChar.setDescription('Indicates whether this node supports receiving registered characteristics.')
wfAppnNodeNnGateway = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeNnGateway.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnGateway.setDescription('Indicates whether this is a gateway node.')
wfAppnNodeNnCentralDirectory = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeNnCentralDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnCentralDirectory.setDescription('Indicates whether this node supports central directory cache.')
wfAppnNodeNnTreeCache = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeNnTreeCache.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnTreeCache.setDescription('Indicates whether this node supports Route Tree caching.')
wfAppnNodeNnTreeUpdate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeNnTreeUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnTreeUpdate.setDescription('Indicates whether this node supports incremental_tree_update, which is only supported when tree caching is supported.')
wfAppnNodeNnRouteAddResist = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnRouteAddResist.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnRouteAddResist.setDescription('Route addition resistance is a value that indicates the relative desirability of using this node for intermediate session traffic. The value, which can be any integer 0-255, is used in route computation. The lower the value, the more desirable the node is for intermediate routing.')
wfAppnNodeNnIsr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeNnIsr.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnIsr.setDescription('Indicates whether the node supports intermediate session routing.')
wfAppnNodeNnFrsn = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeNnFrsn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnFrsn.setDescription('Flow reduction sequence numbers (FRSNs) are associated with Topology Database Updates (TDUs) and are unique only within each APPN network node. A TDU can be associated with multiple APPN resources. This object is the last FRSN sent in a topology update to adjacent network nodes.')
wfAppnNodeModeToCosDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeModeToCosDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeModeToCosDisable.setDescription('Indicates whether Mode to Cos mapping is supported')
wfAppnNodeMdsDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeMdsDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeMdsDisable.setDescription('Enables Multiple Domain Support')
wfAppnNodeRegWithCdsDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeRegWithCdsDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRegWithCdsDisable.setDescription('Enable Registration of Local and Domain resources with Central Directory Server')
wfAppnNodeAlertQSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeAlertQSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeAlertQSize.setDescription('Size of the MDS Send Alert Queue Size')
wfAppnNodeCosCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 2147483647)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeCosCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCosCacheSize.setDescription('Size of the COS Database weights cache This should be set to the number of COSs defined')
wfAppnNodeStoreEndpointRscvsDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeStoreEndpointRscvsDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeStoreEndpointRscvsDisable.setDescription('Store RSCVs for Endpoint sessions?')
wfAppnNodeNnMaxLocates = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 2147483647)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnMaxLocates.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnMaxLocates.setDescription('Maximum simultaneous Locates that this node will process')
wfAppnNodeNnDirCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100))).clone(namedValues=NamedValues(("def", 100))).clone('def')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnDirCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnDirCacheSize.setDescription('Maximum size (entry count) of the Directory Services cache.')
wfAppnNodeNnMaxDirEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnMaxDirEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnMaxDirEntries.setDescription('Maximum Number of entries in Directory Database. A value of zero means unlimited')
wfAppnNodeNnLocateTimeout = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(60))).clone(namedValues=NamedValues(("def", 60))).clone('def')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnLocateTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnLocateTimeout.setDescription('Specifies a time (in seconds) before a network search will timeout. A value of zero means no timeout')
wfAppnNodeNnTreeCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 2147483647)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnTreeCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnTreeCacheSize.setDescription('Size of the Topology Database routing tree cache.')
wfAppnNodeNnTreeCacheUseLimit = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnTreeCacheUseLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnTreeCacheUseLimit.setDescription('Number of times a cached Routing Tree will be used before it is recalculated')
wfAppnNodeNnMaxTdmNodes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnMaxTdmNodes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnMaxTdmNodes.setDescription('Maximum number of nodes in the topology database. A value of zero means unlimited')
wfAppnNodeNnMaxTdmTgs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnMaxTdmTgs.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnMaxTdmTgs.setDescription('Maximum number of TGs in the topology database. A value of zero means unlimited')
wfAppnNodeNnMaxIsrSessions = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 2147483647)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnMaxIsrSessions.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnMaxIsrSessions.setDescription('Maximum number of Intermediate Sessions that this node will route')
wfAppnNodeNnIsrSessionUpperThresh = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(900))).clone(namedValues=NamedValues(("def", 900))).clone('def')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnIsrSessionUpperThresh.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnIsrSessionUpperThresh.setDescription('ISR Session Threshold at which the node is considered congested. This value must be less than that of wfAppnNodeNnMaxIsrSessions')
wfAppnNodeNnIsrSessionLowerThresh = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(800))).clone(namedValues=NamedValues(("def", 800))).clone('def')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnIsrSessionLowerThresh.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnIsrSessionLowerThresh.setDescription('ISR Session Threshold at which the node is no longer considered congested. This value must be less than that of wfAppnNodeNnIsrSessionUpperThresh')
wfAppnNodeNnIsrMaxRuSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 4096)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnIsrMaxRuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnIsrMaxRuSize.setDescription('Maximum RU size supported for intermediate sessions')
wfAppnNodeNnIsrRcvPacingWindow = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnIsrRcvPacingWindow.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnIsrRcvPacingWindow.setDescription('Receive Pacing window for intermediate sessions')
wfAppnNodeNnStoreIsrRscvsDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnStoreIsrRscvsDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnStoreIsrRscvsDisable.setDescription('Store RSCVs for intermediate sessions? (for network monitoring)')
wfAppnNodeNnStoreDlurRscvsDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnStoreDlurRscvsDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnStoreDlurRscvsDisable.setDescription('Store RSCVs for DLUR sessions? (for network monitoring)')
wfAppnNodeNnDlurDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeNnDlurDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeNnDlurDisable.setDescription('This enables DLUR support for the Node')
wfAppnNodeTotalAvailableMemory = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeTotalAvailableMemory.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeTotalAvailableMemory.setDescription('Total memory available to APPN')
wfAppnNodeInUseMemory = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeInUseMemory.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeInUseMemory.setDescription('Memory in use by APPN')
wfAppnNodeMemoryWarningThreshold = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeMemoryWarningThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeMemoryWarningThreshold.setDescription('Warning memory threshold')
wfAppnNodeMemoryCriticalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeMemoryCriticalThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeMemoryCriticalThreshold.setDescription('Critical memory threshold')
wfAppnNodeHprDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeHprDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeHprDisable.setDescription('This enables HPR support for the Node')
wfAppnNodeHprPathSwitchCtrlrDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeHprPathSwitchCtrlrDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeHprPathSwitchCtrlrDisable.setDescription('This enables HPR Path Switch Controller support for the Node')
wfAppnNodeDebugIpsTraceDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeDebugIpsTraceDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDebugIpsTraceDisable.setDescription('This enables tracing of internal messages for debugging')
wfAppnNodeDebugIpsTraceSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 53), Integer32().clone(50000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeDebugIpsTraceSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDebugIpsTraceSize.setDescription('This specifies the size of the IPS trace file for debugging')
wfAppnNodeDefaultDlusName = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 54), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeDefaultDlusName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDefaultDlusName.setDescription('Fully-qualified name of the default primary DLUS node.')
wfAppnNodeDefaultBackupDlusName = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 55), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeDefaultBackupDlusName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDefaultBackupDlusName.setDescription('Fully-qualified name of the default backup DLUS node.')
wfAppnNodePdLogDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePdLogDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePdLogDisable.setDescription('This enables logging of problem determination messages')
wfAppnNodeDlusRetryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 90)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeDlusRetryTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDlusRetryTimeout.setDescription('This controls the timeout between retying pipe to the DLUS')
wfAppnNodeDlusRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeDlusRetryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDlusRetryLimit.setDescription('This controls the nubmer of retries for the pipe to the DLUS; 65535 means forever')
wfAppnNodeSoloistSlotNum = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeSoloistSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeSoloistSlotNum.setDescription('Indicates the slot which runs the appn_cp soloist')
wfAppnNodeBrNNSupport = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeBrNNSupport.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeBrNNSupport.setDescription('Enables the BrNN support for this node.')
wfAppnNodeRegisterWithNN = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("local", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeRegisterWithNN.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRegisterWithNN.setDescription(' Used for BrNN only. Indicates whether the resources will be registered with the NNS. When register_local is selected only local LUs ( not domain-served ) will be registered. The NNS will forward all the broadcast searches to the Node. ')
wfAppnNodeBranchAwarenessEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeBranchAwarenessEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeBranchAwarenessEnable.setDescription(' Indicates whether the TG between the local Node and served BrNNs will appear in the topology database ')
wfAppnNodeDlcTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 2), )
if mibBuilder.loadTexts: wfAppnNodeDlcTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDlcTable.setDescription('this table contains entries for each DLC configured for APPN use')
wfAppnNodeDlcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 2, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnNodeDlcName"))
if mibBuilder.loadTexts: wfAppnNodeDlcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDlcEntry.setDescription('An entry in wfAppnNodeDlcTable.')
wfAppnNodeDlcDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeDlcDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDlcDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete a DLC definition.')
wfAppnNodeDlcDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeDlcDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDlcDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this DLC.')
wfAppnNodeDlcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeDlcName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDlcName.setDescription('This is the 8-character name given to this DLC')
wfAppnNodeDlcState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeDlcState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDlcState.setDescription('Indicates the current state of this DLC.')
wfAppnNodeDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sdlc", 1), ("srb", 2), ("tb", 3), ("fr", 4), ("dls", 5), ("qllc", 6))).clone('srb')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeDlcType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDlcType.setDescription('This indicates the type of DLC')
wfAppnNodeDlcNegLsSupportDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeDlcNegLsSupportDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDlcNegLsSupportDisable.setDescription('This indicates if Link Station roles can be negotiated on this DLC')
wfAppnNodeDlcCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeDlcCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDlcCct.setDescription('This is the circuit used by this DLC')
wfAppnNodeDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeDlcData.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeDlcData.setDescription('comment - Is this used? -P2')
wfAppnNodePortTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3), )
if mibBuilder.loadTexts: wfAppnNodePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortTable.setDescription('this table contains entries for each Port defined')
wfAppnNodePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnNodePortName"))
if mibBuilder.loadTexts: wfAppnNodePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortEntry.setDescription('The Port Name is used as the index to this table.')
wfAppnNodePortDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete a Port definition.')
wfAppnNodePortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this Port.')
wfAppnNodePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodePortName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortName.setDescription('Administratively-assigned name for this APPN port. The name can be from one to eight characters.')
wfAppnNodePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodePortState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortState.setDescription('Indicates the current state of this port.')
wfAppnNodePortDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("sdlc", 2), ("dls", 3), ("socket", 4), ("ethernet", 5), ("tokenring", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodePortDlcType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortDlcType.setDescription('Indicates the DLC type of this port.')
wfAppnNodePortPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leased", 1), ("switched", 2), ("fac", 3))).clone('fac')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortPortType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortPortType.setDescription('Identifies the type of line used by this port.')
wfAppnNodePortSIMRIM = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodePortSIMRIM.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortSIMRIM.setDescription('Indicates whether Set Initialization Mode (SIM) and Receive Initialization Mode (RIM) are supported.')
wfAppnNodePortLsRole = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("negot", 3), ("abm", 4))).clone('negot')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortLsRole.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortLsRole.setDescription("Initial role for LSs activated through this port, where 'abm' indicates asynchronous balance mode.")
wfAppnNodePortMaxRcvBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 4105)).clone(1470)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortMaxRcvBtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortMaxRcvBtuSize.setDescription('Maximum Basic Transmission Size (BTU) that a link station on this port can receive.')
wfAppnNodePortMaxIframeWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortMaxIframeWindow.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortMaxIframeWindow.setDescription('Maximum number of I-frames that can be received by the XID sender before an acknowledgement is received.')
wfAppnNodePortDefLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodePortDefLsGoodXids.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortDefLsGoodXids.setDescription('The total number of successful XIDs that have occurred on all defined link stations on this port since the last time this port was started.')
wfAppnNodePortDefLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodePortDefLsBadXids.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortDefLsBadXids.setDescription('The total number of unsuccessful XIDs that have occurred on all defined link stations on this port since the last time this port was started.')
wfAppnNodePortDynLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodePortDynLsGoodXids.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortDynLsGoodXids.setDescription('The total number of successful XIDs that have occurred on all dynamic link stations on this port since the last time this port was started.')
wfAppnNodePortDynLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodePortDynLsBadXids.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortDynLsBadXids.setDescription('The total number of unsuccessful XIDs that have occurred on all dynamic link stations on this port since the last time this port was started.')
wfAppnNodePortDlcName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortDlcName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortDlcName.setDescription('This is the 8-character name of the DLC which supports this Port')
wfAppnNodePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortNumber.setDescription('This is a unique number for this Port on the DLC')
wfAppnNodePortTotLinkActLim = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 256))).clone(namedValues=NamedValues(("neg", 1), ("pri", 256))).clone('pri')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortTotLinkActLim.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortTotLinkActLim.setDescription('This specifies the maximum link activation limit for this Port. The maximum value depends on the LS Role and Port Type, as follows: Port Type LS Role Max Act Lim Inb Out Switched <any> 1 1 1 Leased Secondary 1 1 0 Leased Negotiable 1 0 0 Leased Primary 256 0 256 SATF <any> 256 128 128')
wfAppnNodePortInbLinkActLim = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 128))).clone(namedValues=NamedValues(("sec", 1), ("satf", 128))).clone('satf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortInbLinkActLim.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortInbLinkActLim.setDescription('This specifies the maximum inbound link activation limit for this Port. This value plus next one must total less than or equal to the total link activation limit.')
wfAppnNodePortOutLinkActLim = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 128, 256))).clone(namedValues=NamedValues(("switched", 1), ("satf", 128), ("pri", 256))).clone('satf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortOutLinkActLim.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortOutLinkActLim.setDescription('This specifies the maximum outbound link activation limit for this Port. This value plus previous one must total less than or equal to the total link activation limit.')
wfAppnNodePortActXidExchangeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12))).clone(namedValues=NamedValues(("def", 12))).clone('def')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortActXidExchangeLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortActXidExchangeLimit.setDescription('This specifies the maximum number of activation XIDs which will be sent before the Port is considered inoperable')
wfAppnNodePortNonActXidExchangeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("def", 5))).clone('def')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortNonActXidExchangeLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortNonActXidExchangeLimit.setDescription('This specifies the maximum number of non-activation XIDs which will be sent before the Port is considered inoperable')
wfAppnNodePortLsXmitRcvCap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tws", 1), ("twa", 2))).clone('tws')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortLsXmitRcvCap.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortLsXmitRcvCap.setDescription('This specifies if the Port can receive Two-Way Simultaneous or Two-Way Alternate')
wfAppnNodePortTargetPacingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortTargetPacingCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortTargetPacingCount.setDescription('This specifies the target pacing count for BINDs on this Port')
wfAppnNodePortMaxSendBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 4105)).clone(1470)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortMaxSendBtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortMaxSendBtuSize.setDescription('This specifies the Maximum BTU Size which can be sent out this Port')
wfAppnNodePortImplicitCpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortImplicitCpSessions.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortImplicitCpSessions.setDescription('This specifies whether CP-CP sessions are permitted with implicit link stations on this Port')
wfAppnNodePortImplicitLimResource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortImplicitLimResource.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortImplicitLimResource.setDescription('This specifies whether implicit link stations on this Port should be defined as limited resources')
wfAppnNodePortImplicitEffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(133)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortImplicitEffCap.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortImplicitEffCap.setDescription('The effective capacity is an integer value that indicates the kilo bits per second. It is derived from the link bandwidth and maximum load factor with the range of 0 thru 255. This is an administratively assigned value for use with TGs to implicit link stations on this Port. DEVIATION: 6611 mib uses range of 0 thru 603,979,776.')
wfAppnNodePortImplicitConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortImplicitConnCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortImplicitConnCost.setDescription('Cost per connect time: a value representing the relative cost per unit of time to use the TG. Range is from 0, which means no cost, to 255, which indicates maximum cost. This is an administratively assigned value for use with TGs to implicit link stations on this Port.')
wfAppnNodePortImplicitByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortImplicitByteCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortImplicitByteCost.setDescription('Relative cost of transmitting a byte over this link. Range is from 0 (lowest cost) to 255. This is an administratively assigned value for use with TGs to implicit link stations on this Port.')
wfAppnNodePortImplicitSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortImplicitSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortImplicitSecurity.setDescription('The security is represented as an integer with a range of 1 thru 255 with the most common values enumerated as defined above. This is an administratively assigned value for use with TGs to implicit link stations on this Port.')
wfAppnNodePortImplicitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("negligible", 1), ("terrestrial", 2), ("packet", 3), ("long", 4), ("maximum", 5))).clone('negligible')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortImplicitDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortImplicitDelay.setDescription('Relative amount of time that it takes for a signal to travel the length of the logical link. This is an administratively assigned value for use with TGs to implicit link stations on this Port. DEVIATION: 6611 MIB, uses units of microseconds.')
wfAppnNodePortImplicitUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortImplicitUsr1.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortImplicitUsr1.setDescription('First user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value for use with TGs to implicit link stations on this Port.')
wfAppnNodePortImplicitUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortImplicitUsr2.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortImplicitUsr2.setDescription('Second user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value for use with TGs to implicit link stations on this Port.')
wfAppnNodePortImplicitUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortImplicitUsr3.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortImplicitUsr3.setDescription('Third user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value for use with TGs to implicit link stations on this Port.')
wfAppnNodePortImplicitHprDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortImplicitHprDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortImplicitHprDisable.setDescription('This specifies if HPR can be used with implicit link stations on this Port')
wfAppnNodePortImplicitHprLlErrorDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortImplicitHprLlErrorDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortImplicitHprLlErrorDisable.setDescription('This specifies if Link-Level Error recovery is to be used on implicit link stations which support HPR on this Port. NOTE: This field does not enable/disable HPRs selective retransmission algorithm. HPR will perform selective retransmission on data whether or not error recovery is also done by the link level protocol.')
wfAppnNodePortImplicitLinkDeactTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 2147483647)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortImplicitLinkDeactTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortImplicitLinkDeactTime.setDescription('This indicates the time in seconds before implicit Link Stations on this Port will be deactivated if it is an HPR limited Resource.')
wfAppnNodePortDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 38), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortDlcData.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortDlcData.setDescription('This specifies the local DLC address to be used by this port')
wfAppnNodePortHprDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 39), OctetString().clone(hexValue="c8")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortHprDlcData.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortHprDlcData.setDescription('This specifies the HPR address to be used by this port')
wfAppnNodePortImplicitDlurDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortImplicitDlurDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortImplicitDlurDisable.setDescription('This specifies if HPR can be used with implicit link stations on this Port')
wfAppnNodePortImplicitUplinkToEN = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodePortImplicitUplinkToEN.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodePortImplicitUplinkToEN.setDescription(' For BrNN specifies whether the implicit Link Stations off this port are uplink or downlink if the adjacent node is an EN. ')
wfAppnNodeLsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4), )
if mibBuilder.loadTexts: wfAppnNodeLsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsTable.setDescription('This table contains detail information about link station configuration')
wfAppnNodeLsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnNodeLsName"))
if mibBuilder.loadTexts: wfAppnNodeLsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsEntry.setDescription('An entry in wfAppnNodePortTable. This table is indexed by the link station name')
wfAppnNodeLsDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete a Link Station definition.')
wfAppnNodeLsDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this Link Station.')
wfAppnNodeLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsName.setDescription('Administratively-assigned name for the link station. The name can be from one to eight characters.')
wfAppnNodeLsPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsPortName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsPortName.setDescription('Administratively-assigned name for the port. The name can be from one to eight characters.')
wfAppnNodeLsState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsState.setDescription('State of this link station.')
wfAppnNodeLsCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsCpName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsCpName.setDescription('Fully-qualified name of the adjacent node for this link station. The name can be from three to seventeen characters. Format is netid.cpname.')
wfAppnNodeLsTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsTgNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsTgNum.setDescription('Number associated with the TG to this link station. Range ( 1 - 20) Predefined values for auto-activation')
wfAppnNodeLsLimResource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsLimResource.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsLimResource.setDescription('Indicates whether the link station is a limited resource. If it is, the TG is deactivated when there are no sessions.')
wfAppnNodeLsMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("xid0", 1), ("uplevel", 2), ("xid3", 3), ("noxid", 4))).clone('uplevel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsMigration.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsMigration.setDescription('Indicates whether this link station will be used for connections to down-level or migration partners. 1 Indicates that this is a back-level node supporting XID0 protocols. 2 Indicates that this is an up-level node supporting XID3 protocols including the Network Name CV 3 Indicates that this is a back-level node supporting XID3 protocols (but does not include the Network Name CV) 4 Indicates that this is a back-level node which does not support XID protocols. (This is valid on NONSWITCHED ports, and is not valid on negotiable ports.')
wfAppnNodeLsBlockNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsBlockNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsBlockNum.setDescription('The block number is the first three digits of the node_id. These 3 hexideimal digits identify the product and are not configurable.')
wfAppnNodeLsIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsIdNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsIdNum.setDescription('The ID number is the last 5 digits of the node_id. These 5 hexadecimal digits are administratively defined and combined with the 3 digit block number form the node_id. This node_id is used to identify the local node and is include in APPN alerts as well as being included in XIDs. A unique value is required for connections to SNA sub-area.')
wfAppnNodeLsCpCpSession = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsCpCpSession.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsCpCpSession.setDescription('Indicates whether CP-CP sessions are supported by this link station.')
wfAppnNodeLsTargetPacingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsTargetPacingCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsTargetPacingCount.setDescription('Numeric value between 0 and 32767 inclusive indicating the desired pacing window size for BINDs on this TG. The number is significant only when fixed bind pacing is being performed.')
wfAppnNodeLsMaxSendBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4105)).clone(1470)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsMaxSendBtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsMaxSendBtuSize.setDescription('Numeric value between 0 and 4105 inclusive indicating the desired number of bytes in a Basic Transmission Unit (BTU) that can be sent on this TG. This is an administratively assigned value.')
wfAppnNodeLsEffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(133)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsEffCap.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsEffCap.setDescription('The effective capacity is an integer value that indicates the kilo bits per second. It is derived from the link bandwidth and maximum load factor with the range of 0 thru 255. This is an administratively assigned value for use with this TG. DEVIATION: 6611 mib uses range of 0 thru 603,979,776.')
wfAppnNodeLsConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsConnCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsConnCost.setDescription('Cost per connect time: a value representing the relative cost per unit of time to use the TG. Range is from 0, which means no cost, to 255, which indicates maximum cost. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeLsByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsByteCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsByteCost.setDescription('Relative cost of transmitting a byte over this link. Range is from 0 (lowest cost) to 255. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeLsSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsSecurity.setDescription('The security is represented as an integer with a range of 1 thru 255 with the most common values enumerated as defined above. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeLsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("negligible", 1), ("terrestrial", 2), ("packet", 3), ("long", 4), ("maximum", 5))).clone('negligible')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsDelay.setDescription('Relative amount of time that it takes for a signal to travel the length of the logical link. This is an administratively assigned value associated with the TG using this link station. DEVIATION: 6611 MIB, uses units of microseconds.')
wfAppnNodeLsUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsUsr1.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsUsr1.setDescription('First user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeLsUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsUsr2.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsUsr2.setDescription('Second user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeLsUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsUsr3.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsUsr3.setDescription('Third user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeLsCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("learn", 1), ("nn", 2), ("en", 3), ("bllen", 4), ("hostxid3", 5), ("hostxid0", 6), ("dspuxid", 7), ("dspunoxid", 8))).clone('learn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsCpType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsCpType.setDescription('This specifies the APPN Node type of Link Station.')
wfAppnNodeLsAutoActivateDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsAutoActivateDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsAutoActivateDisable.setDescription('This specifies if the link should be automatically activated when the Port becomes active. Should be disabled if CP-CP sessions are enabled.')
wfAppnNodeLsSolicitSscpSessionsDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsSolicitSscpSessionsDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsSolicitSscpSessionsDisable.setDescription('This specifies if SSCP Sessions should be solicited from this Link Station')
wfAppnNodeLsUseDefaultTgChars = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsUseDefaultTgChars.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsUseDefaultTgChars.setDescription('Indicates whether the default TG characteristics specified for the Port should be used for this link station, or if explicit TG characteristics will be supplied.')
wfAppnNodeLsLinkData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsLinkData.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsLinkData.setDescription('this for Link Address (MAC/SAP, SDLC Address)')
wfAppnNodeLsDlurDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsDlurDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsDlurDisable.setDescription('This specifies if the adjacent Link Station is a node to be serviced by DLUR.')
wfAppnNodeLsDspuName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsDspuName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsDspuName.setDescription('8-byte name of the downstream PU supported by DLUR.')
wfAppnNodeLsDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsDlusName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsDlusName.setDescription('Fully-qualified name of the DLUS node which will serve this DLUR Link Station.')
wfAppnNodeLsBackupDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsBackupDlusName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsBackupDlusName.setDescription('Fully-qualified name of the backup DLUS node which may serve this DLUR Link Station.')
wfAppnNodeLsHprDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsHprDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsHprDisable.setDescription('This specifies if HPR is supported on this Link Station')
wfAppnNodeLsHprLlErrorDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsHprLlErrorDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsHprLlErrorDisable.setDescription('This specifies if Link-Level Error recovery is to be used on this link station. NOTE: This field does not enable/disable HPRs selective retransmission algorithm. HPR will perform selective retransmission on data whether or not error recovery is also done by the link level protocol.')
wfAppnNodeLsLinkDeactTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 2147483647)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsLinkDeactTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsLinkDeactTime.setDescription('This indicates the time in seconds before this Link Station will be deactivated if it is an HPR limited Resource.')
wfAppnNodeLsLinkRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(99)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsLinkRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsLinkRetryCount.setDescription('This indicates for how many times will APPN CP component retry to restart the link station before it gives up, 99 default is forever.')
wfAppnNodeLsBranchLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uplink", 1), ("downlink", 2))).clone('uplink')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsBranchLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsBranchLinkType.setDescription(' For BrNN specifies whether the link is an uplink or a downlink ')
wfAppnNodeLsAdjBrNNLinkSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allowed", 1), ("required", 2), ("prohibited", 3))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsAdjBrNNLinkSupp.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsAdjBrNNLinkSupp.setDescription(' Specifies whether the adjacent node is required, allowed or prohibited from being a BrNN ( i.e. an BrNN showing its NN face ).')
wfAppnNodeLsDefaultNNS = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 4, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeLsDefaultNNS.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsDefaultNNS.setDescription(' This field can be set to yes to indicate that the adjacent CP is the preferred NN server ')
wfAppnNodeLsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5), )
if mibBuilder.loadTexts: wfAppnNodeLsStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusTable.setDescription('This table contains detailed status information about link stations')
wfAppnNodeLsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnNodeLsStatusName"))
if mibBuilder.loadTexts: wfAppnNodeLsStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusEntry.setDescription('An entry in wfAppnNodeLsStatusTable. This table is indexed by the link station name')
wfAppnNodeLsStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusName.setDescription('Administratively-assigned name for the link station. The name can be from one to eight characters.')
wfAppnNodeLsStatusPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusPortName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusPortName.setDescription('Administratively-assigned name for the port. The name can be from one to eight characters.')
wfAppnNodeLsStatusDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("sdlc", 2), ("dls", 3), ("socket", 4), ("ethernet", 5), ("tokenring", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusDlcType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusDlcType.setDescription("The type of DLC interface, distinguished according to the protocol immediately 'below' this layer.")
wfAppnNodeLsStatusDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusDynamic.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusDynamic.setDescription('Identifies whether this resource is a dynamic link station. Dynamic link stations are created when adjacent nodes that have not been locally defined establish a connection with this node.')
wfAppnNodeLsStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusState.setDescription('State of this link station.')
wfAppnNodeLsStatusCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusCpName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusCpName.setDescription('Fully-qualified name of the adjacent node for this link station. The name can be from three to seventeen characters. Format is netid.cpname.')
wfAppnNodeLsStatusTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusTgNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusTgNum.setDescription('Number associated with the TG to this link station.')
wfAppnNodeLsStatusLimResource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusLimResource.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusLimResource.setDescription('Indicates whether the link station is a limited resource. If it is, the TG is deactivated when there are no sessions.')
wfAppnNodeLsStatusMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("xid0", 1), ("uplevel", 2), ("xid3", 3), ("noxid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusMigration.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusMigration.setDescription('Indicates whether this link station will be used for connections to down-level or migration partners. 1 Indicates that this is a back-level node supporting XID0 protocols. 2 Indicates that this is an up-level node supporting XID3 protocols including the Network Name CV 3 Indicates that this is a back-level node supporting XID3 protocols (but does not include the Network Name CV) 4 Indicates that this is a back-level node which does not support XID protocols. (This is valid on NONSWITCHED ports, and is not valid on negotiable ports.')
wfAppnNodeLsStatusBlockNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusBlockNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusBlockNum.setDescription('The block number is the first three digits of the node_id. These 3 hexideimal digits identify the product and are not configurable.')
wfAppnNodeLsStatusIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusIdNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusIdNum.setDescription('The ID number is the last 5 digits of the node_id. These 5 hexadecimal digits are administratively defined and combined with the 3 digit block number form the node_id. This node_id is used to identify the local node and is include in APPN alerts as well as being included in XIDs. A unique value is required for connections to SNA sub-area.')
wfAppnNodeLsStatusCpCpSession = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusCpCpSession.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusCpCpSession.setDescription('Indicates whether CP-CP sessions are supported by this link station.')
wfAppnNodeLsStatusTargetPacingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusTargetPacingCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusTargetPacingCount.setDescription('Numeric value between 0 and 32767 inclusive indicating the desired pacing window size for BINDs on this TG. The number is significant only when fixed bind pacing is being performed.')
wfAppnNodeLsStatusMaxSendBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusMaxSendBtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusMaxSendBtuSize.setDescription('Numeric value between 0 and 32767 inclusive indicating the desired number of bytes in a Basic Transmission Unit (BTU) that can be sent on this TG. This is an administratively assigned value.')
wfAppnNodeLsStatusEffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusEffCap.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusEffCap.setDescription('The effective capacity is an integer value that indicates the kilo bits per second. It is derived from the link bandwidth and maximum load factor with the range of 0 thru 255. This is an administratively assigned value for use with this TG. DEVIATION: 6611 mib uses range of 0 thru 603,979,776.')
wfAppnNodeLsStatusConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusConnCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusConnCost.setDescription('Cost per connect time: a value representing the relative cost per unit of time to use the TG. Range is from 0, which means no cost, to 255, which indicates maximum cost. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeLsStatusByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusByteCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusByteCost.setDescription('Relative cost of transmitting a byte over this link. Range is from 0 (lowest cost) to 255. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeLsStatusSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusSecurity.setDescription('The security is represented as an integer with a range of 1 thru 255 with the most common values enumerated as defined above. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeLsStatusDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("negligible", 1), ("terrestrial", 2), ("packet", 3), ("long", 4), ("maximum", 5))).clone('negligible')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusDelay.setDescription('Relative amount of time that it takes for a signal to travel the length of the logical link. This is an administratively assigned value associated with the TG using this link station. DEVIATION: 6611 MIB, uses units of microseconds.')
wfAppnNodeLsStatusUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusUsr1.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusUsr1.setDescription('First user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeLsStatusUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusUsr2.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusUsr2.setDescription('Second user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeLsStatusUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusUsr3.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusUsr3.setDescription('Third user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeLsStatusInXidBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusInXidBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusInXidBytes.setDescription('Number of XID bytes received.')
wfAppnNodeLsStatusInMsgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusInMsgBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusInMsgBytes.setDescription('Number of message (I-frame) bytes received.')
wfAppnNodeLsStatusInXidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusInXidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusInXidFrames.setDescription('Number of XID frames received.')
wfAppnNodeLsStatusInMsgFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusInMsgFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusInMsgFrames.setDescription('Number of message (I-frame) frames received.')
wfAppnNodeLsStatusOutXidBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusOutXidBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusOutXidBytes.setDescription('Number of XID bytes sent.')
wfAppnNodeLsStatusOutMsgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusOutMsgBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusOutMsgBytes.setDescription('Number of message (I-frame) bytes sent.')
wfAppnNodeLsStatusOutXidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusOutXidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusOutXidFrames.setDescription('Number of XID frames sent.')
wfAppnNodeLsStatusOutMsgFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusOutMsgFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusOutMsgFrames.setDescription('Number of message (I-frame) frames sent.')
wfAppnNodeLsStatusEchoRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusEchoRsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusEchoRsps.setDescription('Number of responses returned from adjacent link station. A response should be returned for each test frame sent by this node. Test frames are sent to adjacent nodes periodically to verify connectivity and to measure that actual round trip time, that is the time the test frame is sent until the response is received.')
wfAppnNodeLsStatusCurrentDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusCurrentDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusCurrentDelay.setDescription('The time that it took for the last test signal to be sent and returned from this link station to the adjacent links station. This time is represented in milliseconds.')
wfAppnNodeLsStatusMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusMaxDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusMaxDelay.setDescription('The longest time it took for a test signal to be sent and returned from this link station to the adjacent links station. This time is represented in milliseconds .')
wfAppnNodeLsStatusMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusMinDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusMinDelay.setDescription('The shortest time it took for a test signal to be sent and returned from this link station to the adjacent links station. This time is represented in milliseconds.')
wfAppnNodeLsStatusMaxDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusMaxDelayTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusMaxDelayTime.setDescription('The time (since system up in hundredth of seconds) when the longest delay occurred. This time can be used to identify when this high water mark occurred in relation to the last initialization of the APPN node.')
wfAppnNodeLsStatusGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusGoodXids.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusGoodXids.setDescription('The total number of successful XIDs that have occurred on this link station since the time it was started.')
wfAppnNodeLsStatusBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusBadXids.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusBadXids.setDescription('The total number of unsuccessful XIDs that have occurred on this link station since the time it was started.')
wfAppnNodeLsStatusActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusActiveSessions.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusActiveSessions.setDescription('Number of Active Sessions (Endpoint and ISR) using this Link Station.')
wfAppnNodeLsStatusInvalidSnaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusInvalidSnaFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusInvalidSnaFrames.setDescription('Number of Invalid SNA Frames received from this Link Station.')
wfAppnNodeLsStatusInScFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusInScFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusInScFrames.setDescription('Number of Session Control frames received from this Link Station.')
wfAppnNodeLsStatusOutScFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusOutScFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusOutScFrames.setDescription('Number of Session Control frames sent to the Link Station.')
wfAppnNodeLsStatusCpType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("learn", 1), ("nn", 2), ("en", 3), ("bllen", 4), ("hostxid3", 5), ("hostxid0", 6), ("dspuxid", 7), ("dspunoxid", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusCpType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusCpType.setDescription('This specifies the APPN Node type of Link Station')
wfAppnNodeLsStatusStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusStartTime.setDescription('Time since system startup (in hundreths of seconds) when Link Station was activated.')
wfAppnNodeLsStatusStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusStopTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusStopTime.setDescription('Time since system startup (in hundreths of seconds) when Link Station was deactivated.')
wfAppnNodeLsStatusUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusUpTime.setDescription('Time (in hundreths of seconds) that this Link Station has been up.')
wfAppnNodeLsStatusDeactCause = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusDeactCause.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusDeactCause.setDescription('Deactivation Cause')
wfAppnNodeLsStatusHprSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusHprSupport.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusHprSupport.setDescription('Indicates if HPR is supported by this Link Station')
wfAppnNodeLsStatusHprLlErrSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusHprLlErrSupport.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusHprLlErrSupport.setDescription('Indicates if HPR Link-level Error recovery is supported by this Link Station')
wfAppnNodeLsStatusAnrLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusAnrLabel.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusAnrLabel.setDescription('ANR Label of this Link Station')
wfAppnNodeLsStatusLinkData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 5, 1, 50), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeLsStatusLinkData.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeLsStatusLinkData.setDescription('Link Address, e.g.Mac Address/SAP')
wfAppnNodeCnTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 6), )
if mibBuilder.loadTexts: wfAppnNodeCnTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnTable.setDescription('This Table contains entries for each configured Connection Network')
wfAppnNodeCnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 6, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnNodeCnFqName"))
if mibBuilder.loadTexts: wfAppnNodeCnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnEntry.setDescription('An entry in wfAppnNodeCnTable.')
wfAppnNodeCnDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeCnDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete a Connection Network definition.')
wfAppnNodeCnDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeCnDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this Connection Network.')
wfAppnNodeCnFqName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeCnFqName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnFqName.setDescription('The Fully-qualified name of the Connection Network')
wfAppnNodeCnState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeCnState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnState.setDescription('State of this connection network.')
wfAppnNodeCnEffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(133)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeCnEffCap.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnEffCap.setDescription('The effective capacity is an integer value that indicates the kilo bits per second. It is derived from the link bandwidth and maximum load factor with the range of 0 thru 255. This is an administratively assigned value for use with this connection network. DEVIATION: 6611 mib uses range of 0 thru 603,979,776.')
wfAppnNodeCnConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeCnConnCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnConnCost.setDescription('Cost per connect time: a value representing the relative cost per unit of time to use the TG. Range is from 0, which means no cost, to 255, which indicates maximum cost. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeCnByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeCnByteCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnByteCost.setDescription('Relative cost of transmitting a byte over this link. Range is from 0 (lowest cost) to 255. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeCnSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeCnSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnSecurity.setDescription('The security is represented as an integer with a range of 1 thru 255 with the most common values enumerated as defined above. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeCnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("negligible", 1), ("terrestrial", 2), ("packet", 3), ("long", 4), ("maximum", 5))).clone('negligible')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeCnDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnDelay.setDescription('Relative amount of time that it takes for a signal to travel the length of the logical link. This is an administratively assigned value associated with this connection network. DEVIATION: 6611 MIB, uses units of microseconds.')
wfAppnNodeCnUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeCnUsr1.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnUsr1.setDescription('First user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeCnUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeCnUsr2.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnUsr2.setDescription('Second user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeCnUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeCnUsr3.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnUsr3.setDescription('Third user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with the TG using this link station.')
wfAppnNodeCnPortTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 7), )
if mibBuilder.loadTexts: wfAppnNodeCnPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnPortTable.setDescription('Table containing an entry for every Port associated with a connection network.')
wfAppnNodeCnPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 7, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnNodeCnPortCnName"), (0, "Wellfleet-APPN-MIB", "wfAppnNodeCnPortPortName"))
if mibBuilder.loadTexts: wfAppnNodeCnPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnPortEntry.setDescription('an entry in wfAppnNodeCnPortTable')
wfAppnNodeCnPortDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeCnPortDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnPortDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete a Connection Network Port instance.')
wfAppnNodeCnPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeCnPortDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnPortDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this Connection Network Port.')
wfAppnNodeCnPortCnName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeCnPortCnName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnPortCnName.setDescription('The name of the cn.')
wfAppnNodeCnPortPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeCnPortPortName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnPortPortName.setDescription('The name of the port. FIX to READ_ONLY')
wfAppnNodeCnPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeCnPortState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeCnPortState.setDescription('State of this connection network.')
wfAppnNodeIsrSessionTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8), )
if mibBuilder.loadTexts: wfAppnNodeIsrSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionTable.setDescription('This table contains entries for every session that is currently being routed by this Node')
wfAppnNodeIsrSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnNodeIsrSessionPcid"), (0, "Wellfleet-APPN-MIB", "wfAppnNodeIsrSessionFqCpName"))
if mibBuilder.loadTexts: wfAppnNodeIsrSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionEntry.setDescription('The fqpcid is the index for this table.')
wfAppnNodeIsrSessionPcid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPcid.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPcid.setDescription('This is the PCID of this session')
wfAppnNodeIsrSessionFqCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionFqCpName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionFqCpName.setDescription('This is the Fully-qualified CP name of the node assigning the PCID for this session')
wfAppnNodeIsrSessionTransPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("network", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionTransPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionTransPriority.setDescription('This indicates the transmission priority being used by this session')
wfAppnNodeIsrSessionCos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionCos.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionCos.setDescription('This indicates the Class-of-Service being used by this session')
wfAppnNodeIsrSessionLimResource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionLimResource.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionLimResource.setDescription('This indicates if this session is traversing a Limited Resource')
wfAppnNodeIsrSessionRscv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionRscv.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionRscv.setDescription('This is the Route Selection Control Vector in use by this session')
wfAppnNodeIsrSessionPriSendRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriSendRuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriSendRuSize.setDescription('This is the send RU size used on the primary hop of this session')
wfAppnNodeIsrSessionPriRcvRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriRcvRuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriRcvRuSize.setDescription('This is the receive RU size used on the primary hop of this session')
wfAppnNodeIsrSessionPriMaxSendBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriMaxSendBtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriMaxSendBtuSize.setDescription('This is the maximum send BTU size on the primary hop of this session')
wfAppnNodeIsrSessionPriMaxRcvBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriMaxRcvBtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriMaxRcvBtuSize.setDescription('This is the maximum receive BTU size on the primary hop of this session')
wfAppnNodeIsrSessionPriMaxSendPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriMaxSendPacing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriMaxSendPacing.setDescription('This is the maximum send pacing on the primary hop of this session')
wfAppnNodeIsrSessionPriCurSendPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriCurSendPacing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriCurSendPacing.setDescription('This is the current send pacing on the primary hop of this session')
wfAppnNodeIsrSessionPriMaxRcvPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriMaxRcvPacing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriMaxRcvPacing.setDescription('This is the maximum receive pacing on the primary hop of this session')
wfAppnNodeIsrSessionPriCurRcvPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriCurRcvPacing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriCurRcvPacing.setDescription('This is the current receive pacing on the primary hop of this session')
wfAppnNodeIsrSessionPriSendFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriSendFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriSendFrames.setDescription('This is the number of Normal-flow frames sent on the primary hop of this session')
wfAppnNodeIsrSessionPriSendBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriSendBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriSendBytes.setDescription('This is the number of bytes sent on the primary hop of this session')
wfAppnNodeIsrSessionPriSendFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriSendFmdFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriSendFmdFrames.setDescription('This is the number of FMD frames sent on the primary hop of this session')
wfAppnNodeIsrSessionPriRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriRcvFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriRcvFrames.setDescription('This is the number of Normal-flow frames received on the primary hop of this session')
wfAppnNodeIsrSessionPriRcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriRcvBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriRcvBytes.setDescription('This is the number of bytes received on the primary hop of this session')
wfAppnNodeIsrSessionPriRcvFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriRcvFmdFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriRcvFmdFrames.setDescription('This is the number of FMD frames received on the primary hop of this session')
wfAppnNodeIsrSessionPriSidh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriSidh.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriSidh.setDescription('This is the SIDH value used on the primary hop of this session')
wfAppnNodeIsrSessionPriSidl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriSidl.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriSidl.setDescription('This is the SIDL value used on the primary hop of this session')
wfAppnNodeIsrSessionPriOdai = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriOdai.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriOdai.setDescription('This is the ODAI value used on the primary hop of this session')
wfAppnNodeIsrSessionPriLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriLsName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionPriLsName.setDescription('This is the adjacent Link Station used on the primary hop of this session')
wfAppnNodeIsrSessionSecSendRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecSendRuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecSendRuSize.setDescription('This is the send RU size used on the secondary hop of this session')
wfAppnNodeIsrSessionSecRcvRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecRcvRuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecRcvRuSize.setDescription('This is the receive RU size used on the secondary hop of this session')
wfAppnNodeIsrSessionSecMaxSendBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecMaxSendBtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecMaxSendBtuSize.setDescription('This is the maximum send BTU size on the secondary hop of this session')
wfAppnNodeIsrSessionSecMaxRcvBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecMaxRcvBtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecMaxRcvBtuSize.setDescription('This is the maximum receive BTU size on the secondary hop of this session')
wfAppnNodeIsrSessionSecMaxSendPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecMaxSendPacing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecMaxSendPacing.setDescription('This is the maximum send pacing on the secondary hop of this session')
wfAppnNodeIsrSessionSecCurSendPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecCurSendPacing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecCurSendPacing.setDescription('This is the current send pacing on the secondary hop of this session')
wfAppnNodeIsrSessionSecMaxRcvPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecMaxRcvPacing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecMaxRcvPacing.setDescription('This is the maximum receive pacing on the secondary hop of this session')
wfAppnNodeIsrSessionSecCurRcvPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecCurRcvPacing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecCurRcvPacing.setDescription('This is the current receive pacing on the secondary hop of this session')
wfAppnNodeIsrSessionSecSendFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecSendFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecSendFrames.setDescription('This is the number of Normal-flow frames sent on the secondary hop of this session')
wfAppnNodeIsrSessionSecSendBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecSendBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecSendBytes.setDescription('This is the number of bytes sent on the secondary hop of this session')
wfAppnNodeIsrSessionSecSendFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecSendFmdFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecSendFmdFrames.setDescription('This is the number of FMD frames sent on the secondary hop of this session')
wfAppnNodeIsrSessionSecRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecRcvFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecRcvFrames.setDescription('This is the number of Normal-flow frames received on the secondary hop of this session')
wfAppnNodeIsrSessionSecRcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecRcvBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecRcvBytes.setDescription('This is the number of bytes received on the secondary hop of this session')
wfAppnNodeIsrSessionSecRcvFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecRcvFmdFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecRcvFmdFrames.setDescription('This is the number of FMD frames received on the secondary hop of this session')
wfAppnNodeIsrSessionSecSidh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecSidh.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecSidh.setDescription('This is the SIDH value used on the secondary hop of this session')
wfAppnNodeIsrSessionSecSidl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecSidl.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecSidl.setDescription('This is the SIDL value used on the secondary hop of this session')
wfAppnNodeIsrSessionSecOdai = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecOdai.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecOdai.setDescription('This is the ODAI value used on the secondary hop of this session')
wfAppnNodeIsrSessionSecLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecLsName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionSecLsName.setDescription('This is the adjacent Link Station used on the secondary hop of this session')
wfAppnNodeIsrSessionRscvText = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 8, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeIsrSessionRscvText.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeIsrSessionRscvText.setDescription('This is the Route Selection Control Vector in use by this session, in a DSP_STR format')
wfAppnNodeEndptSessionTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9), )
if mibBuilder.loadTexts: wfAppnNodeEndptSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionTable.setDescription('This table contains entries for every endpoint session that is currently active on this Node')
wfAppnNodeEndptSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnNodeEndptSessionId"), (0, "Wellfleet-APPN-MIB", "wfAppnNodeEndptSessionFqPluName"))
if mibBuilder.loadTexts: wfAppnNodeEndptSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionEntry.setDescription('The fqpcid is the index for this table.')
wfAppnNodeEndptSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionId.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionId.setDescription('This is the session ID of this session')
wfAppnNodeEndptSessionPcid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionPcid.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionPcid.setDescription('This is the PCID of this session')
wfAppnNodeEndptSessionFqCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionFqCpName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionFqCpName.setDescription('This is the Fully-qualified CP name of the node assigning the PCID for this session')
wfAppnNodeEndptSessionFqPluName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionFqPluName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionFqPluName.setDescription('This is the name of the Partner LU being used by this session')
wfAppnNodeEndptSessionTransPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("network", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionTransPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionTransPriority.setDescription('This indicates the transmission priority being used by this session')
wfAppnNodeEndptSessionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionMode.setDescription('This indicates the Mode being used by this session')
wfAppnNodeEndptSessionCos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionCos.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionCos.setDescription('This indicates the Class-of-Service being used by this session')
wfAppnNodeEndptSessionLimResource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionLimResource.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionLimResource.setDescription('This indicates if this session is traversing a Limited Resource')
wfAppnNodeEndptSessionPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionPolarity.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionPolarity.setDescription('This indicates whether the local LU was the BIND sender (Primary) or if the local LU was the BIND receiver (Secondary)')
wfAppnNodeEndptSessionContention = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("conwinner", 1), ("conloser", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionContention.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionContention.setDescription('This indicates whether this session is a contention-winner or a contention-loser session')
wfAppnNodeEndptSessionRscv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionRscv.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionRscv.setDescription('This is the Route Selection Control Vector in use by this session')
wfAppnNodeEndptSessionSendRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionSendRuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionSendRuSize.setDescription('This is the maximum RU size sent on this session')
wfAppnNodeEndptSessionRcvRuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionRcvRuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionRcvRuSize.setDescription('This is the maximum RU size received this session')
wfAppnNodeEndptSessionMaxSendBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionMaxSendBtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionMaxSendBtuSize.setDescription('This is the maximum send BTU size for this session')
wfAppnNodeEndptSessionMaxRcvBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionMaxRcvBtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionMaxRcvBtuSize.setDescription('This is the maximum receive BTU size for this session')
wfAppnNodeEndptSessionMaxSendPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionMaxSendPacing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionMaxSendPacing.setDescription('This is the maximum send pacing for this session')
wfAppnNodeEndptSessionCurSendPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionCurSendPacing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionCurSendPacing.setDescription('This is the current send pacing used by this session')
wfAppnNodeEndptSessionMaxRcvPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionMaxRcvPacing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionMaxRcvPacing.setDescription('This is the maximum receive pacing for this session')
wfAppnNodeEndptSessionCurRcvPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionCurRcvPacing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionCurRcvPacing.setDescription('This is the current receive pacing used by this session')
wfAppnNodeEndptSessionSendFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionSendFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionSendFrames.setDescription('This is the number of data frames sent by this session')
wfAppnNodeEndptSessionSendBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionSendBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionSendBytes.setDescription('This is the number of data bytes sent by this session')
wfAppnNodeEndptSessionSendFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionSendFmdFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionSendFmdFrames.setDescription('This is the number of FMD frames sent by this session')
wfAppnNodeEndptSessionRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionRcvFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionRcvFrames.setDescription('This is the number of data frames received by this session')
wfAppnNodeEndptSessionRcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionRcvBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionRcvBytes.setDescription('This is the number of bytes received by this session')
wfAppnNodeEndptSessionRcvFmdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionRcvFmdFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionRcvFmdFrames.setDescription('This is the number of FMD frames received by this session')
wfAppnNodeEndptSessionSidh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionSidh.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionSidh.setDescription('This is the number of bytes received by this session')
wfAppnNodeEndptSessionSidl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionSidl.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionSidl.setDescription('This is the SIDL value used by this session')
wfAppnNodeEndptSessionOdai = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionOdai.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionOdai.setDescription('This is the ODAI value used by this session')
wfAppnNodeEndptSessionLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionLsName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionLsName.setDescription('This is the adjacent Link Station used by this session')
wfAppnNodeEndptSessionRscvText = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 9, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeEndptSessionRscvText.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeEndptSessionRscvText.setDescription('This is a text string representing the RSCV used by this session')
wfAppnNodeTraceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 10))
wfAppnNodeTraceDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeTraceDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeTraceDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete a Trace.')
wfAppnNodeTraceDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeTraceDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeTraceDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this Trace.')
wfAppnNodeTraceFile = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 10, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNodeTraceFile.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeTraceFile.setDescription('This is the path and file name for the Trace file to be created')
wfAppnNodeRtpConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11), )
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionTable.setDescription('This table contains entries for every RTP connection that is currently active on this Node')
wfAppnNodeRtpConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnNodeRtpConnectionName"))
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionEntry.setDescription('The fqpcid is the index for this table.')
wfAppnNodeRtpConnectionName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionName.setDescription('This is the local name of the RTP connection')
wfAppnNodeRtpConnectionDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionDestName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionDestName.setDescription('This is the fully-qualified name of the node at the other end of this RTP connection')
wfAppnNodeRtpConnectionFirstHopLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionFirstHopLsName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionFirstHopLsName.setDescription('This is the LS name of the first hop for this RTP connection')
wfAppnNodeRtpConnectionCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionCosName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionCosName.setDescription('This is the Class-of-Service name for this RTP connection')
wfAppnNodeRtpConnectionMaxBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionMaxBtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionMaxBtuSize.setDescription('This is the maximum size (in bytes) of packets which can be carried by this RTP connection')
wfAppnNodeRtpConnectionLivenessTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionLivenessTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionLivenessTimer.setDescription('This is the Liveness Timer (in seconds) for this RTP connection')
wfAppnNodeRtpConnectionLivenessTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionLivenessTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionLivenessTimeouts.setDescription('This is the number Liveness Timeouts for this RTP connection')
wfAppnNodeRtpConnectionLocalTcid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionLocalTcid.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionLocalTcid.setDescription('This is the Local TCID for this RTP connection')
wfAppnNodeRtpConnectionRemoteTcid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRemoteTcid.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRemoteTcid.setDescription('This is the remote TCID for this RTP connection')
wfAppnNodeRtpConnectionActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionActiveSessions.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionActiveSessions.setDescription('This is the number of sessions currently active on this RTP connection')
wfAppnNodeRtpConnectionSendBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionSendBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionSendBytes.setDescription('This is the number of bytes that have been sent on this RTP connection')
wfAppnNodeRtpConnectionSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionSendPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionSendPackets.setDescription('This is the number of packets that have been sent on this RTP connection')
wfAppnNodeRtpConnectionSendSessionControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionSendSessionControlFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionSendSessionControlFrames.setDescription('This is the number of Session Control that have been sent on this RTP connection')
wfAppnNodeRtpConnectionSendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionSendRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionSendRate.setDescription('This is the current sending rate (in Kbits per second) for this RTP connection')
wfAppnNodeRtpConnectionMaxSendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionMaxSendRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionMaxSendRate.setDescription('This is the Maximum sending rate (in Kbits per second) for this RTP connection')
wfAppnNodeRtpConnectionMinSendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionMinSendRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionMinSendRate.setDescription('This is the Minimum sending rate (in Kbits per second) for this RTP connection')
wfAppnNodeRtpConnectionRcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRcvBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRcvBytes.setDescription('This is the number of bytes that have been received on this RTP connection')
wfAppnNodeRtpConnectionRcvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRcvPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRcvPackets.setDescription('This is the number of packets that have been received on this RTP connection')
wfAppnNodeRtpConnectionRcvSessionControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRcvSessionControlFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRcvSessionControlFrames.setDescription('This is the number of Session Control that have been received on this RTP connection')
wfAppnNodeRtpConnectionRcvInvalidSnaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRcvInvalidSnaFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRcvInvalidSnaFrames.setDescription('This is the number of invalid SNA frames that have been received on this RTP connection')
wfAppnNodeRtpConnectionRcvRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRcvRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRcvRate.setDescription('This is the current receiving rate (in Kbits per second) for this RTP connection')
wfAppnNodeRtpConnectionMaxRcvRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionMaxRcvRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionMaxRcvRate.setDescription('This is the Maximum receive rate (in Kbits per second) for this RTP connection')
wfAppnNodeRtpConnectionMinRcvRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionMinRcvRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionMinRcvRate.setDescription('This is the Minimum receive rate (in Kbits per second) for this RTP connection')
wfAppnNodeRtpConnectionDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionDiscardedBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionDiscardedBytes.setDescription('This is the number of bytes that have been discarded on this RTP connection')
wfAppnNodeRtpConnectionDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionDiscardedPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionDiscardedPackets.setDescription('This is the number of packets that have been discarded on this RTP connection')
wfAppnNodeRtpConnectionResentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionResentBytes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionResentBytes.setDescription('This is the number of bytes that have been retransmitted this RTP connection')
wfAppnNodeRtpConnectionResentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionResentPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionResentPackets.setDescription('This is the number of packets that have been retransmitted this RTP connection')
wfAppnNodeRtpConnectionUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionUpTime.setDescription('This is the time (in seconds) that this RTP connection has been active')
wfAppnNodeRtpConnectionRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRoundTripTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRoundTripTime.setDescription('This is the last round-trip time (in milliseconds) for this RTP connection')
wfAppnNodeRtpConnectionSmoothRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionSmoothRoundTripTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionSmoothRoundTripTime.setDescription('This is the smoothed round-trip time (in milliseconds) for this RTP connection')
wfAppnNodeRtpConnectionBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionBurstSize.setDescription('This is the current burst size for this RTP connection')
wfAppnNodeRtpConnectionSrtExpiries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionSrtExpiries.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionSrtExpiries.setDescription('This is the number of times the SR Timer has expired on this RTP connection')
wfAppnNodeRtpConnectionShortReqTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionShortReqTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionShortReqTimer.setDescription('This is the SHORT_REQ timer duration (in seconds) for this RTP connection')
wfAppnNodeRtpConnectionGapsDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionGapsDetected.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionGapsDetected.setDescription('This is the number of gaps detected for this RTP connection')
wfAppnNodeRtpConnectionRscv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRscv.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRscv.setDescription('This is the RSCV (in hex) for this RTP connection')
wfAppnNodeRtpConnectionRscvText = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 1, 11, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRscvText.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNodeRtpConnectionRscvText.setDescription('This is the RSCV (in a human-readable format) for this RTP connection')
wfAppnNnTopo = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1))
wfAppnNnTopoMaxNodes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoMaxNodes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoMaxNodes.setDescription('Maximum number of nodes allowed in the APPN topology database This administratively assigned value must be equal to or greater than the maximum total number of end nodes and network nodes. If the number of nodes exceeds this value, APPN will issue an Alert and the node can no longer participate as a network node.')
wfAppnNnTopoCurNumNodes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoCurNumNodes.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoCurNumNodes.setDescription("Current number of nodes in this node's topology database. If this value exceeds the maximum number of nodes allowed (NnTopoMaxNodes), APPN alert CPDB002 is issued.")
wfAppnNnTopoInTdus = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoInTdus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoInTdus.setDescription('Total number of TDUs received from all adjacent NN since last initialization.')
wfAppnNnTopoOutTdus = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoOutTdus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoOutTdus.setDescription('Total number of TDUs built by this node to be sent to all adjacent NN since last initialization.')
wfAppnNnTopoNodeLowRsns = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoNodeLowRsns.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoNodeLowRsns.setDescription("Total number of topology node updates received by this node with a RSN less than the current RSN. Both even and odd RSN are included in this count. These TDUs are not errors, but result when TDUs are broadcast to all adjacent network nodes. No update to this node's topology database occurs, but this node will send a TDU with it's higher RSN to the adjacent node that sent this low RSN.")
wfAppnNnTopoNodeEqualRsns = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoNodeEqualRsns.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoNodeEqualRsns.setDescription("Total number of topology node updates received by this node with a RSN equal to the current RSN. Both even and odd RSN are included in this count. These TDUs are not errors, but result when TDUs are broadcast to all adjacent network nodes. No update to this node's topology database occurs.")
wfAppnNnTopoNodeGoodHighRsns = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoNodeGoodHighRsns.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoNodeGoodHighRsns.setDescription('Total number of topology node updates received by this node with a RSN greater than the current RSN. This results in updating this nodes topology and broadcasting a TDU to all adjacent network nodes. It is not required to send a TDU to the sender of this update because that node already has the update.')
wfAppnNnTopoNodeBadHighRsns = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoNodeBadHighRsns.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoNodeBadHighRsns.setDescription('Total number of topology node updates received by this node with an odd RSN greater than the current RSN. These updates represent a topology inconsistency detected by one of the APPN network nodes. This results in updating this nodes topology and broadcasting a TDU to all adjacent network nodes.')
wfAppnNnTopoNodeStateUpdates = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoNodeStateUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoNodeStateUpdates.setDescription('Total number of topology Node records built as a result of internally detected node state changes that affect APPN topology and routing. Updates are sent via TDUs to all adjacent network nodes.')
wfAppnNnTopoNodeErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoNodeErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoNodeErrors.setDescription('Total number of topology node records inconsistencies detected by this node. This occurs when this node attempts to update its topology database and detects a data inconsistency. This node will create a TDU with the current RSN incremented to the next odd number and broadcast it to all adjacent NNs.')
wfAppnNnTopoNodeTimerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoNodeTimerUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoNodeTimerUpdates.setDescription("Total number of topology node records built for this node's resource due to timer updates. Updates are sent via TDUs to all adjacent network nodes. These updates insure other network nodes do not delete this node's resources from their topology database.")
wfAppnNnTopoNodePurges = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoNodePurges.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoNodePurges.setDescription("Total number of topology node records purged from this node's topology database. This occurs when a node has not been updated in a specified amount of time. The owning node is responsible for broadcasting updates for its resource that it wants kept in the network topology.")
wfAppnNnTopoTgLowRsns = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoTgLowRsns.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoTgLowRsns.setDescription("Total number of topology TG updates received by this node with a RSN less than the current RSN. Both even and odd RSN are included in this count. These TDUs are not errors, but result when TDUs are broadcast to all adjacent network nodes. No update to this node's topology database occurs, but this node will send a TDU with it's higher RSN to the sender of the low RSN.")
wfAppnNnTopoTgEqualRsns = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoTgEqualRsns.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoTgEqualRsns.setDescription("Total number of topology TG updates received by this node with a RSN equal to the current RSN. Both even and odd RSN are included in this count. These TDUs are not errors, but result when TDUs are broadcast to all adjacent network nodes. No update to this node's topology database occurs.")
wfAppnNnTopoTgGoodHighRsns = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoTgGoodHighRsns.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoTgGoodHighRsns.setDescription('Total number of topology TG updates received by this node with a RSN greater than the current RSN. This results in updating this nodes topology and broadcasting the update to all adjacent network nodes.')
wfAppnNnTopoTgBadHighRsns = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoTgBadHighRsns.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoTgBadHighRsns.setDescription('Total number of topology TG updates received by this node with an odd RSN greater than the current RSN. These updates represent a topology inconsistency detected by one of the APPN network nodes. This results in updating this nodes topology and broadcasting a TDU to all adjacent network nodes.')
wfAppnNnTopoTgStateUpdates = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoTgStateUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoTgStateUpdates.setDescription('Total number of topology TG records built as a result of internally detected node state changes that affect APPN topology and routing. Updates are sent via TDUs to all adjacent network nodes.')
wfAppnNnTopoTgErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoTgErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoTgErrors.setDescription('Total number of topology TG records inconsistencies detected by this node. This occurs when this node attempts to update its topology database and detects a data inconsistency. This node will create a TDU with the current RSN incremented to the next odd number and broadcast it to all adjacent NNs.')
wfAppnNnTopoTgTimerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoTgTimerUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoTgTimerUpdates.setDescription("Total number of topology TG records built for this node's resource due to timer updates. Updates are sent via TDUs to all adjacent network nodes. These updates insure other network nodes do not delete this node's resources from their topology database.")
wfAppnNnTopoTgPurges = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoTgPurges.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoTgPurges.setDescription("Total number of topology TG records purged from this node's topology database. This occurs when a TG has not been updated in a specified amount of time. The owning node is responsible for broadcasting updates for its resource that it wants to keep in the network topology.")
wfAppnNnTopoTotalRouteCalcs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoTotalRouteCalcs.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoTotalRouteCalcs.setDescription('Number of routes calculated for all class of services since the last initialization.')
wfAppnNnTopoTotalRouteRejs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTopoTotalRouteRejs.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopoTotalRouteRejs.setDescription('Number of route requests for all class of services that could not be calculated since last initialization.')
wfAppnNnAdjNodeTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 2), )
if mibBuilder.loadTexts: wfAppnNnAdjNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnAdjNodeTable.setDescription('Table containing an entry for every adjacent node. The information kept in this table is the last FRSN sent and received, the status of the CP-CP sessions, and a gauge that indicates the number of outstanding TDUs.')
wfAppnNnAdjNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 2, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnNnAdjNodeAdjName"))
if mibBuilder.loadTexts: wfAppnNnAdjNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnAdjNodeEntry.setDescription('The adjacent node name is the index for this table.')
wfAppnNnAdjNodeAdjName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnAdjNodeAdjName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnAdjNodeAdjName.setDescription("An administratively-assigned fully-qualified name of this node's adjacent network node.")
wfAppnNnAdjNodeCpCpSessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("loser", 2), ("winner", 3), ("inactive", 4))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnAdjNodeCpCpSessStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnAdjNodeCpCpSessStatus.setDescription('Indicates the state of CP-CP sessions between this node and adjacent network and end nodes. Inactive indicates no CP-CP sessions exists between this node and the adjacent node. Active indicates CP-CP sessons are active using both the ConWinner and ConLoser sessions. The session initiated by this node is referred to as the ConWinner session and is used by this node to send to the adjacent node. The ConLoserr session is initiated by the adjacent node and is used by this node to receive from the adjacent node.')
wfAppnNnAdjNodeOutOfSeqTdus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnAdjNodeOutOfSeqTdus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnAdjNodeOutOfSeqTdus.setDescription('Number of out of sequence Topology Database Updates (TDUs). In a quiesced state, this value is zero. In normal operation, the value varies depending on the network environment.')
wfAppnNnAdjNodeLastFrsnSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnAdjNodeLastFrsnSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnAdjNodeLastFrsnSent.setDescription('Flow reduction sequence numbers (FRSNs) are associated with Topology Database Updates (TDUs) and are unique only within each APPN network node. A TDU can be associated with multiple APPN resources. This FRSN indicates the last TDU sent to this adjacent node.')
wfAppnNnAdjNodeLastFrsnRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnAdjNodeLastFrsnRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnAdjNodeLastFrsnRcvd.setDescription('Flow reduction sequence numbers (FRSNs) are associated with Topology Database Updates (TDUs) and are unique only within each APPN network node. A TDU can be associated with multiple APPN resources. This FRSN indicates the last TDU received from this adjacent node.')
wfAppnNnTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1), )
if mibBuilder.loadTexts: wfAppnNnTopologyTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopologyTable.setDescription('Portion of the APPN routing table that describes all of the APPN network nodes and virtual nodes known to this node.')
wfAppnNnTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnNnNodeName"))
if mibBuilder.loadTexts: wfAppnNnTopologyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopologyEntry.setDescription('The fully-qualified node name is used to index this table.')
wfAppnNnNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeName.setDescription('Administratively-assigned network name that is locally defined at each network node in the format NETID.CPNAME.')
wfAppnNnNodeFrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFrsn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFrsn.setDescription('Flow reduction sequence numbers (FRSNs) are associated with Topology Database Updates (TDUs) and are unique only within each APPN network node. A TDU can be associated with multiple APPN resources. This FRSN indicates the last time this resource was updated at this node.')
wfAppnNnNodeEntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeEntryTimeLeft.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeEntryTimeLeft.setDescription('Number of days before deletion of this network node entry. Range is 0-31.')
wfAppnNnNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("nn", 1), ("vn", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeType.setDescription('Type of APPN node.')
wfAppnNnNodeRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeRsn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeRsn.setDescription('Resource sequence number that is assigned and controlled by the network node that owns this resource. This is always an even 32-bit number unless an error has occurred.')
wfAppnNnNodeRouteAddResist = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeRouteAddResist.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeRouteAddResist.setDescription('Route addition resistance indicates the relative desirability of using this node for intermediate session traffic. The value, which can be any integer 0-255, is used in route computation. The lower the value, the more desirable the node is for intermediate routing.')
wfAppnNnNodeCongested = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeCongested.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeCongested.setDescription('Indicates whether this node is congested. This node is not be included in route selection by other nodes when this congestion exists.')
wfAppnNnNodeIsrDepleted = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeIsrDepleted.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeIsrDepleted.setDescription('Indicates whether intermediate session routing resources are depleted. This node is not included in intermediate route selection by other nodes when resources are depleted.')
wfAppnNnNodeEndptDepleted = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeEndptDepleted.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeEndptDepleted.setDescription('Indicates whether session endpoint resources are depleted.')
wfAppnNnNodeQuiescing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeQuiescing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeQuiescing.setDescription('Indicates whether the node is quiescing. This node is not included in route selection by other nodes when the node is quiescing.')
wfAppnNnNodeGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeGateway.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeGateway.setDescription('Indicates whether the node provide gateway functions.')
wfAppnNnNodeCentralDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeCentralDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeCentralDirectory.setDescription('Indicates whether the node is central directory.')
wfAppnNnNodeIsr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeIsr.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeIsr.setDescription('Indicates whether the node supports intermediate session routing (ISR).')
wfAppnNnNodeChainSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeChainSupport.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeChainSupport.setDescription('Indicates whether this node supports chaining.')
wfAppnNnNodeHprBase = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeHprBase.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeHprBase.setDescription('Indicates whether this node supports HPR base functionality.')
wfAppnNnNodeRtpTower = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeRtpTower.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeRtpTower.setDescription('Indicates whether this node supports RTP tower functionality.')
wfAppnNnTgTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2), )
if mibBuilder.loadTexts: wfAppnNnTgTopologyTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgTopologyTable.setDescription('Portion of the APPN topology database that describes all of the APPN transmissions groups used by the APPN network nodes.')
wfAppnNnTgTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnNnTgOwner"), (0, "Wellfleet-APPN-MIB", "wfAppnNnTgDest"), (0, "Wellfleet-APPN-MIB", "wfAppnNnTgNum"))
if mibBuilder.loadTexts: wfAppnNnTgTopologyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgTopologyEntry.setDescription('This table requires three indexes to provide a unique index. The indexes are the owning or originating CPname, the destination CPname, and the TG number.')
wfAppnNnTgOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgOwner.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgOwner.setDescription('Administratively-assigned name for the originating node for this TG. The format is NETID.CPNAME and is the same name specified in the node table.')
wfAppnNnTgDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgDest.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgDest.setDescription('Administratively-assigned fully-qualified network name for the destination node for this TG.')
wfAppnNnTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgNum.setDescription('Number associated with this transmission group. Range is 0-255.')
wfAppnNnTgFrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFrsn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFrsn.setDescription('Flow reduction sequence numbers (FRSNs) are associated with Topology Database Updates (TDUs) and are unique only within each APPN network node. A TDU can be associated with multiple APPN resources. This FRSN indicates the last time this resource was updated at this node.')
wfAppnNnTgEntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgEntryTimeLeft.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgEntryTimeLeft.setDescription('Number of days before deletion of this network node TG entry. Range is 0-31.')
wfAppnNnTgDestVirtual = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgDestVirtual.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgDestVirtual.setDescription('Indicates whether the destination node is a virtual node.')
wfAppnNnTgDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgDlcData.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgDlcData.setDescription('DLC specific data related to the link connection network. Token-Ring - MAC/SAP X.25 Switched - dial digits X.21 Switched - dial digits Circuit Swtch - dial digits.')
wfAppnNnTgRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgRsn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgRsn.setDescription("Current owning node's resource sequence number for this resource.")
wfAppnNnTgOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgOperational.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgOperational.setDescription('Indicates whether the transmission group is operational.')
wfAppnNnTgQuiescing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgQuiescing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgQuiescing.setDescription('Indicates whether the transmission group is quiescing.')
wfAppnNnTgCpCpSession = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgCpCpSession.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgCpCpSession.setDescription('Indicates whether CP-CP sessions are supported on this TG.')
wfAppnNnTgEffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgEffCap.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgEffCap.setDescription('The effective capacity is an integer value that indicates the kilo bits per second. It is derived from the link bandwidth and maximum load factor with the range of 0 thru 255. This is an administratively assigned value for this TG. DEVIATION: 6611 mib uses range of 0 thru 603,979,776.')
wfAppnNnTgConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgConnCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgConnCost.setDescription('Cost per connect time: a value representing the relative cost per unit of time to use the TG. Range is from 0, which means no cost, to 255, which indicates maximum cost. This is an administratively assigned value associated with this TG.')
wfAppnNnTgByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgByteCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgByteCost.setDescription('Relative cost of transmitting a byte over this link. Range is from 0 (lowest cost) to 255. This is an administratively assigned value associated with this TG.')
wfAppnNnTgSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgSecurity.setDescription('The security is represented as an integer with a range of 1 thru 255 with the most common values enumerated as defined above. This is an administratively assigned value associated with this TG.')
wfAppnNnTgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("negligible", 1), ("terrestrial", 2), ("packet", 3), ("long", 4), ("maximum", 5))).clone('negligible')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNnTgDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgDelay.setDescription('Relative amount of time that it takes for a signal to travel the length of the logical link. This is an administratively assigned value associated with this TG. DEVIATION: 6611 MIB, uses units of microseconds.')
wfAppnNnTgModemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgModemClass.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgModemClass.setDescription("This is used to have multiple images for a connection network. For a connection network it is the same as in the TG vector; for a non-connection network it is X'00'.")
wfAppnNnTgUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgUsr1.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgUsr1.setDescription('First user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with this TG.')
wfAppnNnTgUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgUsr2.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgUsr2.setDescription('Second user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with this TG.')
wfAppnNnTgUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgUsr3.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgUsr3.setDescription('Third user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with this TG.')
wfAppnNnTgHprBase = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgHprBase.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgHprBase.setDescription('Indicates whether HPR base functionality is supported on this TG.')
wfAppnNnTgRtpTower = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgRtpTower.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgRtpTower.setDescription('Indicates whether RTP Tower functionality is supported on this TG.')
wfAppnNnTopologyFRTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3), )
if mibBuilder.loadTexts: wfAppnNnTopologyFRTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopologyFRTable.setDescription('Portion of the APPN routing table that describes all of the APPN network nodes and virtual nodes known to this node.')
wfAppnNnTopologyFREntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnNnNodeFRFrsn"), (0, "Wellfleet-APPN-MIB", "wfAppnNnNodeFRName"))
if mibBuilder.loadTexts: wfAppnNnTopologyFREntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTopologyFREntry.setDescription('The fully-qualified node name is used to index this table.')
wfAppnNnNodeFRName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFRName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFRName.setDescription('Administratively-assigned network name that is locally defined at each network node in the format NETID.CPNAME.')
wfAppnNnNodeFRFrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFRFrsn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFRFrsn.setDescription('Flow reduction sequence numbers (FRSNs) are associated with Topology Database Updates (TDUs) and are unique only within each APPN network node. A TDU can be associated with multiple APPN resources. This FRSN indicates the last time this resource was updated at this node.')
wfAppnNnNodeFREntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFREntryTimeLeft.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFREntryTimeLeft.setDescription('Number of days before deletion of this network node entry. Range is 0-31.')
wfAppnNnNodeFRType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("nn", 1), ("vn", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFRType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFRType.setDescription('Type of APPN node.')
wfAppnNnNodeFRRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFRRsn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFRRsn.setDescription('Resource sequence number that is assigned and controlled by the network node that owns this resource. This is always an even 32-bit number unless an error has occurred.')
wfAppnNnNodeFRRouteAddResist = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFRRouteAddResist.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFRRouteAddResist.setDescription('Route addition resistance indicates the relative desirability of using this node for intermediate session traffic. The value, which can be any integer 0-255, is used in route computation. The lower the value, the more desirable the node is for intermediate routing.')
wfAppnNnNodeFRCongested = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFRCongested.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFRCongested.setDescription('Indicates whether this node is congested. This node is not be included in route selection by other nodes when this congestion exists.')
wfAppnNnNodeFRIsrDepleted = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFRIsrDepleted.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFRIsrDepleted.setDescription('Indicates whether intermediate session routing resources are depleted. This node is not included in intermediate route selection by other nodes when resources are depleted.')
wfAppnNnNodeFREndptDepleted = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFREndptDepleted.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFREndptDepleted.setDescription('Indicates whether session endpoint resources are depleted.')
wfAppnNnNodeFRQuiescing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFRQuiescing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFRQuiescing.setDescription('Indicates whether the node is quiescing. This node is not included in route selection by other nodes when the node is quiescing.')
wfAppnNnNodeFRGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFRGateway.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFRGateway.setDescription('Indicates whether the node provide gateway functions.')
wfAppnNnNodeFRCentralDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFRCentralDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFRCentralDirectory.setDescription('Indicates whether the node is central directory.')
wfAppnNnNodeFRIsr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFRIsr.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFRIsr.setDescription('Indicates whether the node supports intermediate session routing (ISR).')
wfAppnNnNodeFRChainSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFRChainSupport.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFRChainSupport.setDescription('Indicates whether this node supports chaining.')
wfAppnNnNodeFRHprBase = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFRHprBase.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFRHprBase.setDescription('Indicates whether this node supports HPR base functionality.')
wfAppnNnNodeFRRtpTower = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnNodeFRRtpTower.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnNodeFRRtpTower.setDescription('Indicates whether this node supports RTP tower functionality.')
wfAppnNnTgTopologyFRTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4), )
if mibBuilder.loadTexts: wfAppnNnTgTopologyFRTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgTopologyFRTable.setDescription('This table contains entries which describes the TGs associated with the Network Nodes in the network')
wfAppnNnTgTopologyFREntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnNnTgFRFrsn"), (0, "Wellfleet-APPN-MIB", "wfAppnNnTgFROwner"), (0, "Wellfleet-APPN-MIB", "wfAppnNnTgFRDest"), (0, "Wellfleet-APPN-MIB", "wfAppnNnTgFRNum"))
if mibBuilder.loadTexts: wfAppnNnTgTopologyFREntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgTopologyFREntry.setDescription('This table requires four indexes to provide a unique index. The indexes are the FRSN, the owning or originating CPname, the destination CPname, and the TG number.')
wfAppnNnTgFROwner = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFROwner.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFROwner.setDescription('Administratively-assigned name for the originating node for this TG. The format is NETID.CPNAME and is the same name specified in the node table.')
wfAppnNnTgFRDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRDest.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRDest.setDescription('Administratively-assigned fully-qualified network name for the destination node for this TG.')
wfAppnNnTgFRNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRNum.setDescription('Number associated with this transmission group. Range is 0-255.')
wfAppnNnTgFRFrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRFrsn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRFrsn.setDescription('Flow reduction sequence numbers (FRSNs) are associated with Topology Database Updates (TDUs) and are unique only within each APPN network node. A TDU can be associated with multiple APPN resources. This FRSN indicates the last time this resource was updated at this node.')
wfAppnNnTgFREntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFREntryTimeLeft.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFREntryTimeLeft.setDescription('Number of days before deletion of this network node TG entry. Range is 0-31.')
wfAppnNnTgFRDestVirtual = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRDestVirtual.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRDestVirtual.setDescription('Indicates whether the destination node is a virtual node.')
wfAppnNnTgFRDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRDlcData.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRDlcData.setDescription('DLC specific data related to the link connection network. Token-Ring - MAC/SAP X.25 Switched - dial digits X.21 Switched - dial digits Circuit Swtch - dial digits.')
wfAppnNnTgFRRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRRsn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRRsn.setDescription("Current owning node's resource sequence number for this resource.")
wfAppnNnTgFROperational = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFROperational.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFROperational.setDescription('Indicates whether the transmission group is operational.')
wfAppnNnTgFRQuiescing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRQuiescing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRQuiescing.setDescription('Indicates whether the transmission group is quiescing.')
wfAppnNnTgFRCpCpSession = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRCpCpSession.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRCpCpSession.setDescription('Indicates whether CP-CP sessions are supported on this TG.')
wfAppnNnTgFREffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFREffCap.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFREffCap.setDescription('The effective capacity is an integer value that indicates the kilo bits per second. It is derived from the link bandwidth and maximum load factor with the range of 0 thru 255. This is an administratively assigned value for this TG. DEVIATION: 6611 mib uses range of 0 thru 603,979,776.')
wfAppnNnTgFRConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRConnCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRConnCost.setDescription('Cost per connect time: a value representing the relative cost per unit of time to use the TG. Range is from 0, which means no cost, to 255, which indicates maximum cost. This is an administratively assigned value associated with this TG.')
wfAppnNnTgFRByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRByteCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRByteCost.setDescription('Relative cost of transmitting a byte over this link. Range is from 0 (lowest cost) to 255. This is an administratively assigned value associated with this TG.')
wfAppnNnTgFRSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRSecurity.setDescription('The security is represented as an integer with a range of 1 thru 255 with the most common values enumerated as defined above. This is an administratively assigned value associated with this TG.')
wfAppnNnTgFRDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("negligible", 1), ("terrestrial", 2), ("packet", 3), ("long", 4), ("maximum", 5))).clone('negligible')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnNnTgFRDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRDelay.setDescription('Relative amount of time that it takes for a signal to travel the length of the logical link. This is an administratively assigned value associated with this TG. DEVIATION: 6611 MIB, uses units of microseconds.')
wfAppnNnTgFRModemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRModemClass.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRModemClass.setDescription("This is used to have multiple images for a connection network. For a connection network it is the same as in the TG vector; for a non-connection network it is X'00'.")
wfAppnNnTgFRUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRUsr1.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRUsr1.setDescription('First user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with this TG.')
wfAppnNnTgFRUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRUsr2.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRUsr2.setDescription('Second user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with this TG.')
wfAppnNnTgFRUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRUsr3.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRUsr3.setDescription('Third user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with this TG.')
wfAppnNnTgFRHprBase = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRHprBase.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRHprBase.setDescription('Indicates whether HPR base functionality is supported on this TG.')
wfAppnNnTgFRRtpTower = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 2, 3, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnNnTgFRRtpTower.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnNnTgFRRtpTower.setDescription('Indicates whether RTP Tower functionality is supported on this TG.')
wfAppnLocalInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 1))
wfAppnLocalNodeName = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalNodeName.setDescription('Administratively-assigned network name for this node in the format NETID.CPNAME.')
wfAppnLocalNodeType = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("nn", 1), ("en", 2), ("len", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalNodeType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalNodeType.setDescription('Type of APPN node.')
wfAppnLocalNnRsn = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalNnRsn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalNnRsn.setDescription('Resource sequence number that is assigned and controlled by the network node that owns this resource. This is always an even 32-bit number unless an error has occurred.')
wfAppnLocalNnRouteAddResist = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalNnRouteAddResist.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalNnRouteAddResist.setDescription('Route addition resistance indicates the relative desirability of using this node for intermediate session traffic. The value, which can be any integer 0-255, is used in route computation. The lower the value, the more desirable the node is for intermediate routing.')
wfAppnLocalNnCongested = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalNnCongested.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalNnCongested.setDescription('Indicates whether this node is congested. This node is not be included in route selection by other nodes when this congestion exists.')
wfAppnLocalNnIsrDepleted = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalNnIsrDepleted.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalNnIsrDepleted.setDescription('Indicates whether intermediate session routing resources are depleted. This node is not included in intermediate route selection by other nodes when resources are depleted.')
wfAppnLocalNnEndptDepleted = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalNnEndptDepleted.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalNnEndptDepleted.setDescription('Indicates whether session endpoint resources are depleted.')
wfAppnLocalNnQuiescing = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalNnQuiescing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalNnQuiescing.setDescription('Indicates whether the node is quiescing. This node is not included in route selection by other nodes when the node is quiescing.')
wfAppnLocalNnGateway = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalNnGateway.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalNnGateway.setDescription('Indicates whether the node provide gateway functions.')
wfAppnLocalNnCentralDirectory = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalNnCentralDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalNnCentralDirectory.setDescription('Indicates whether the node is central directory.')
wfAppnLocalNnIsr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalNnIsr.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalNnIsr.setDescription('Indicates whether the node supports intermediate session routing (ISR).')
wfAppnLocalNnChainSupport = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalNnChainSupport.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalNnChainSupport.setDescription('Indicates whether the node supports chaining.')
wfAppnLocalNnFrsn = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalNnFrsn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalNnFrsn.setDescription('Flow reduction sequence numbers (FRSNs) are associated with Topology Database Updates (TDUs) and are unique only within each APPN network node. A TDU can be associated with multiple APPN resources. This object is the last FRSN sent in a topology update to adjacent network nodes.')
wfAppnLocalTgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3), )
if mibBuilder.loadTexts: wfAppnLocalTgTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgTable.setDescription('TG Table describes all of the TGs owned by this node. The TG destination can be a virtual node, network node, len, or end node.')
wfAppnLocalTgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnLocalTgDest"), (0, "Wellfleet-APPN-MIB", "wfAppnLocalTgNum"))
if mibBuilder.loadTexts: wfAppnLocalTgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgEntry.setDescription('This table is indexed by the destination CPname and the TG number.')
wfAppnLocalTgDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalTgDest.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgDest.setDescription('Administratively-assigned fully-qualified network name for the destination node for this TG.')
wfAppnLocalTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalTgNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgNum.setDescription('Number associated with this transmission group. Range is 0-255.')
wfAppnLocalTgDestVirtual = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalTgDestVirtual.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgDestVirtual.setDescription('Indicates whether the destination node is a virtual node.')
wfAppnLocalTgDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalTgDlcData.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgDlcData.setDescription('DLC specific data related to the link connection network. Token-Ring - MAC/SAP X.25 Switched - dial digits X.21 Switched - dial digits Circuit Swtch - dial digits.')
wfAppnLocalTgRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalTgRsn.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgRsn.setDescription("Current owning node's resource sequence number for this resource.")
wfAppnLocalTgOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalTgOperational.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgOperational.setDescription('Indicates whether the transmission group is operational.')
wfAppnLocalTgQuiescing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalTgQuiescing.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgQuiescing.setDescription('Indicates whether the transmission group is quiescing.')
wfAppnLocalTgCpCpSession = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalTgCpCpSession.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgCpCpSession.setDescription('Indicates whether CP-CP sessions are supported on this TG.')
wfAppnLocalTgEffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalTgEffCap.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgEffCap.setDescription('The effective capacity is an integer value that indicates the kilo bits per second. It is derived from the link bandwidth and maximum load factor with the range of 0 thru 255. This is an administratively assigned value for this TG. DEVIATION: 6611 mib uses range of 0 thru 603,979,776.')
wfAppnLocalTgConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalTgConnCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgConnCost.setDescription('Cost per connect time: a value representing the relative cost per unit of time to use the TG. Range is from 0, which means no cost, to 255, which indicates maximum cost. This is an administratively assigned value associated with this TG.')
wfAppnLocalTgByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalTgByteCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgByteCost.setDescription('Relative cost of transmitting a byte over this link. Range is from 0 (lowest cost) to 255. This is an administratively assigned value associated with this TG.')
wfAppnLocalTgSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalTgSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgSecurity.setDescription('The security is represented as an integer with a range of 1 thru 255 with the most common values enumerated as defined above. This is an administratively assigned value associated with this TG.')
wfAppnLocalTgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("negligible", 1), ("terrestrial", 2), ("packet", 3), ("long", 4), ("maximum", 5))).clone('negligible')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnLocalTgDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgDelay.setDescription('Relative amount of time that it takes for a signal to travel the length of the logical link, with a range of 0 through 255 with some of the more common values enumerated. This is an administratively assigned value associated with this TG. DEVIATION: 6611 MIB, uses units of microseconds.')
wfAppnLocalTgModemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalTgModemClass.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgModemClass.setDescription("This is used to have multiple images for a connection network. For a connection network it is the same as in the TG vector; for a non-connection network it is X'00'.")
wfAppnLocalTgUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalTgUsr1.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgUsr1.setDescription('First user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with this TG.')
wfAppnLocalTgUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalTgUsr2.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgUsr2.setDescription('Second user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with this TG.')
wfAppnLocalTgUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 3, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnLocalTgUsr3.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnLocalTgUsr3.setDescription('Third user-defined TG characteristic for this TG with a range of 0-255. This is an administratively assigned value associated with this TG.')
wfAppnDirectoryPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 1))
wfAppnDirMaxCaches = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirMaxCaches.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirMaxCaches.setDescription('Maximum number of cache entries allowed. This is an administratively assigned value.')
wfAppnDirCurCaches = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirCurCaches.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirCurCaches.setDescription('Current number of cache entries.')
wfAppnDirCurHomeEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirCurHomeEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirCurHomeEntries.setDescription('Current number of home entries.')
wfAppnDirRegEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirRegEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirRegEntries.setDescription('Current number of registered entries.')
wfAppnDirInLocates = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirInLocates.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirInLocates.setDescription('Number of directed locates received.')
wfAppnDirInBcastLocates = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirInBcastLocates.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirInBcastLocates.setDescription('Number of broadcast locates received.')
wfAppnDirOutLocates = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirOutLocates.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirOutLocates.setDescription('Number of directed locates sent.')
wfAppnDirOutBcastLocates = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirOutBcastLocates.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirOutBcastLocates.setDescription('Number of broadcast locates sent.')
wfAppnDirNotFoundLocates = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirNotFoundLocates.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirNotFoundLocates.setDescription("Number of directed locates returned with a 'not found'.")
wfAppnDirNotFoundBcastLocates = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirNotFoundBcastLocates.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirNotFoundBcastLocates.setDescription('Number of broadcast locates returned with a not found.')
wfAppnDirLocateOutstands = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirLocateOutstands.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirLocateOutstands.setDescription('Current number of outstanding locates, both directed and broadcast. This value varies. A value of zero indicates that no locates are unanswered.')
wfAppnDirTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 2), )
if mibBuilder.loadTexts: wfAppnDirTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirTable.setDescription('Table containing information about all known LUs and TPs.')
wfAppnDirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 2, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnDirLuName"))
if mibBuilder.loadTexts: wfAppnDirEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirEntry.setDescription('This table is indexed by the LU name.')
wfAppnDirLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirLuName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirLuName.setDescription('Fully-qualified network LU name in the domain of the serving network node.')
wfAppnDirServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirServerName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirServerName.setDescription('Fully-qualified control point (CP) name of the network node server. For unassociated end node entries, the end node fully-qualified name is returned.')
wfAppnDirLuOwnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirLuOwnerName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirLuOwnerName.setDescription('Fully-qualified CP name of the node at which the LU is located. This name is the same as the serving NN name when the LU is located at a network node or an unassociated end node. It is also the same as the fully-qualified LU name when this is the control point LU for this node.')
wfAppnDirLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("domain", 2), ("xdomain", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirLocation.setDescription('Specifies the location of the LU.')
wfAppnDirType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("home", 1), ("cache", 2), ("registered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirType.setDescription('Directory types are: 1 - Home The LU is in the domain of the local network node and the LU information has been configured at the local node. 2 - Cache The LU has previously been located by a broadcast search and the location information has been saved. 3 - Register The LU is at an end node that is in the domain of the local network node. Registered entries are registered by the served end node.')
wfAppnDirWildCard = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("entry", 2), ("partial", 3), ("full", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirWildCard.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirWildCard.setDescription('1 - Other means unknown type of LU entry. 2 - Expliced-entry means the full LUNAME will be used for locating this LU. 3 - Partial-wildcard means only the non-blank portions of the LUNAME will be used for locating this LU. 4 - Full-wildcard means all LUNAMES will be directed to this LU.')
wfAppnDirDefineTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 3), )
if mibBuilder.loadTexts: wfAppnDirDefineTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirDefineTable.setDescription('this table contains entries which define Directory entries')
wfAppnDirDefineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 3, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnDirDefineResourceName"))
if mibBuilder.loadTexts: wfAppnDirDefineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirDefineEntry.setDescription('An entry in wfAppnDirDefineTable.')
wfAppnDirDefineDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnDirDefineDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirDefineDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete a Directory Entry instance.')
wfAppnDirDefineDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnDirDefineDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirDefineDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this Directory Entry.')
wfAppnDirDefineResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDirDefineResourceName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirDefineResourceName.setDescription('This specifies the resource name in the local Directory')
wfAppnDirDefineResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lu", 1), ("encp", 2), ("nncp", 3), ("wildcard", 4))).clone('lu')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnDirDefineResourceType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirDefineResourceType.setDescription('This specifies the resource type in the local Directory')
wfAppnDirDefineParentName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnDirDefineParentName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirDefineParentName.setDescription('This specifies the name of the parent of the resource, if the resource is an LU')
wfAppnDirDefineParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("encp", 2), ("nncp", 3))).clone('nncp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnDirDefineParentType.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDirDefineParentType.setDescription('This specifies the type of the parent of the resource, if the resource is an LU')
wfAppnCosModeTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 1), )
if mibBuilder.loadTexts: wfAppnCosModeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosModeTable.setDescription('Table representing all of the defined mode names for this node. The table contains the matching COS name.')
wfAppnCosModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 1, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnCosModeName"))
if mibBuilder.loadTexts: wfAppnCosModeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosModeEntry.setDescription('This table is indexed by the Mode Name.')
wfAppnCosModeName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosModeName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosModeName.setDescription('Administratively-assigned name for this mode entry.')
wfAppnCosModeCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosModeCosName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosModeCosName.setDescription('An administratively assigned name for this Class of Service.')
wfAppnCosNameTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 2), )
if mibBuilder.loadTexts: wfAppnCosNameTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosNameTable.setDescription('Table representing all of the defined class-of-service names for this node. The COS node and TG tables are accessed using the same index, which is the COS name.')
wfAppnCosNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 2, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnCosName"))
if mibBuilder.loadTexts: wfAppnCosNameEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosNameEntry.setDescription('The COS name is the index to this table.')
wfAppnCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosName.setDescription('Administratively-assigned name for this class of service.')
wfAppnCosTransPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("network", 4))).clone('low')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTransPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTransPriority.setDescription('Transmission priority for this class of service. Values are: Low Medium High Network')
wfAppnCosNodeRowTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 3), )
if mibBuilder.loadTexts: wfAppnCosNodeRowTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosNodeRowTable.setDescription('This table contains all node-row information for all class of service in this node.')
wfAppnCosNodeRowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 3, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnCosNodeRowName"), (0, "Wellfleet-APPN-MIB", "wfAppnCosNodeRowIndex"))
if mibBuilder.loadTexts: wfAppnCosNodeRowEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosNodeRowEntry.setDescription('The COS name is the first index and a integer is the second index to insure a unique index.')
wfAppnCosNodeRowName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosNodeRowName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosNodeRowName.setDescription('Administratively-assigned name for this class of service.')
wfAppnCosNodeRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosNodeRowIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosNodeRowIndex.setDescription('Index of COS name. This same value is used to access the node and TG COS tables. Range of values is 0-255.')
wfAppnCosNodeRowWgt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosNodeRowWgt.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosNodeRowWgt.setDescription('Weight to be associated with the nodes that fit the criteria specified by this node row.')
wfAppnCosNodeRowResistMin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosNodeRowResistMin.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosNodeRowResistMin.setDescription('Minimum route addition resistance value for this node. Range of values is 0-255. The lower the value, the more desirable the node is for intermediate routing.')
wfAppnCosNodeRowResistMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosNodeRowResistMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosNodeRowResistMax.setDescription('Maximum route addition resistance value for this node. Range of values is 0-255. The lower the value, the more desirable the node is for intermediate routing.')
wfAppnCosNodeRowMinCongestAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosNodeRowMinCongestAllow.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosNodeRowMinCongestAllow.setDescription('Indicates whether low congestion will be tolerated. The minimum and maximum parameters will allow specifying either low-congested, high-congested, or either to be used.')
wfAppnCosNodeRowMaxCongestAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosNodeRowMaxCongestAllow.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosNodeRowMaxCongestAllow.setDescription('Indicates whether high congestion will be tolerated. The minimum and maximum parameters will allow specifying either low-congested, high-congested, or either to be used.')
wfAppnCosTgRowTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4), )
if mibBuilder.loadTexts: wfAppnCosTgRowTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowTable.setDescription('Table containing all the Tg-row information for all class of service defined in this node.')
wfAppnCosTgRowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnCosTgRowName"), (0, "Wellfleet-APPN-MIB", "wfAppnCosTgRowIndex"))
if mibBuilder.loadTexts: wfAppnCosTgRowEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowEntry.setDescription('The TgRowName and the TgRowIndex are the index for this table.')
wfAppnCosTgRowName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowName.setDescription('Administratively-assigned name for this class of service.')
wfAppnCosTgRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowIndex.setDescription('Index of COS name. This same value is used to access the node and TG COS tables.')
wfAppnCosTgRowWgt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowWgt.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowWgt.setDescription('Weight to be associated with the nodes that fit the criteria specified by this tg-row.')
wfAppnCosTgRowEffCapMin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(133)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowEffCapMin.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowEffCapMin.setDescription('Minimum acceptable speed for this Class of Service. The effective capacity is an integer value that indicates the actual kilo bits per second. It is derived from the link bandwidth and maximum load factor with the range of 0 thru 255 DEVIATION: 6611 mib uses range of 0 thru 603,979,776.')
wfAppnCosTgRowEffCapMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(133)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowEffCapMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowEffCapMax.setDescription('Maximum acceptable speed for this Class of Service. The effective capacity is an integer value that indicates the actual kilo bits per second. It is derived from the link bandwidth and maximum load factor with the range of 0 thru 255. DEVIATION: 6611 mib uses range of 0 thru 603,979,776.')
wfAppnCosTgRowConnCostMin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowConnCostMin.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowConnCostMin.setDescription('Minimum acceptable cost per connect time for this Class of Service. Cost per connect time: a value representing the relative cost per unit of time to use the TG. Range is from 0, which means no cost, to 255.')
wfAppnCosTgRowConnCostMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowConnCostMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowConnCostMax.setDescription('Maximum acceptable cost per connect time for this Class of Service. Cost per connect time: a value representing the relative cost per unit of time to use the TG. Range is from 0, which means no cost, to 255.')
wfAppnCosTgRowByteCostMin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowByteCostMin.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowByteCostMin.setDescription('Minimum acceptable cost per byte for this Class of Service.')
wfAppnCosTgRowByteCostMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowByteCostMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowByteCostMax.setDescription('Maximum acceptable cost per byte for this Class of Service.')
wfAppnCosTgRowSecurityMin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowSecurityMin.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowSecurityMin.setDescription('Minimum acceptable security for this Class of Service.')
wfAppnCosTgRowSecurityMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowSecurityMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowSecurityMax.setDescription('Maximum acceptable security for this Class of Service.')
wfAppnCosTgRowDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("negligible", 1), ("terrestrial", 2), ("packet", 3), ("long", 4), ("maximum", 5))).clone('negligible')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnCosTgRowDelayMin.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowDelayMin.setDescription('Minimum acceptable propagation delay for this class of service. Relative amount of time that it takes for a signal to travel the length of the logical link. DEVIATION: 6611 MIB, uses units of microseconds.')
wfAppnCosTgRowDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("negligible", 1), ("terrestrial", 2), ("packet", 3), ("long", 4), ("maximum", 5))).clone('negligible')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnCosTgRowDelayMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowDelayMax.setDescription('Maximum acceptable propagation delay for this class of service. Relative amount of time that it takes for a signal to travel the length of the logical link. DEVIATION: 6611 MIB, uses units of microseconds.')
wfAppnCosTgRowUsr1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowUsr1Min.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowUsr1Min.setDescription('Minimum acceptable value for this user defined characteristic. Range of values is 0-255.')
wfAppnCosTgRowUsr1Max = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowUsr1Max.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowUsr1Max.setDescription('Maximum acceptable value for this user defined characteristic. Range of values is 0-255.')
wfAppnCosTgRowUsr2Min = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowUsr2Min.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowUsr2Min.setDescription('Minimum acceptable value for this user defined characteristic. Range of values is 0-255.')
wfAppnCosTgRowUsr2Max = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowUsr2Max.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowUsr2Max.setDescription('Maximum acceptable value for this user defined characteristic. Range of values is 0-255.')
wfAppnCosTgRowUsr3Min = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowUsr3Min.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowUsr3Min.setDescription('Minimum acceptable value for this user defined characteristic. Range of values is 0-255.')
wfAppnCosTgRowUsr3Max = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 5, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnCosTgRowUsr3Max.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnCosTgRowUsr3Max.setDescription('Maximum acceptable value for this user defined characteristic. Range of values is 0-255.')
wfAppnTpPingTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1), )
if mibBuilder.loadTexts: wfAppnTpPingTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingTable.setDescription('This table contains an entry for each instance of the APING application')
wfAppnTpPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnTpPingIndex"))
if mibBuilder.loadTexts: wfAppnTpPingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingEntry.setDescription('An entry in wfAppnTpPingTable.')
wfAppnTpPingDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnTpPingDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete a APING instance.')
wfAppnTpPingDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnTpPingDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this APING instance.')
wfAppnTpPingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnTpPingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingIndex.setDescription('This is the index of the Ping entry')
wfAppnTpPingFqPluName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnTpPingFqPluName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingFqPluName.setDescription('This is the Fully-Qualified name of the Partner LU running the APINGD TP')
wfAppnTpPingDataLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1, 5), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnTpPingDataLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingDataLength.setDescription('This is the length of the test data to be sent to the LU being PING-ed')
wfAppnTpPingConsecutiveSends = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnTpPingConsecutiveSends.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingConsecutiveSends.setDescription('This specifies the number of consecutive sends that will be issued')
wfAppnTpPingEchoDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnTpPingEchoDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingEchoDisable.setDescription('This specifies whether the Target of the PING will be requested to echo the data')
wfAppnTpPingIterations = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1, 8), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnTpPingIterations.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingIterations.setDescription('This specifies the number of times the PING should be repeated')
wfAppnTpPingPartnerTpName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnTpPingPartnerTpName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingPartnerTpName.setDescription("This specifies the partner TP name to ping. If no name is specified 'APINGD' will be used")
wfAppnTpPingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnTpPingMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingMode.setDescription('This specifies the mode to be used for this PING')
wfAppnTpPingState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 1), ("started", 2), ("ok", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnTpPingState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingState.setDescription('This indicates the current state of the PING request')
wfAppnTpPingAllocTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnTpPingAllocTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingAllocTime.setDescription('This indicates the time (in milliseconds) it took to allocate the PING conversation')
wfAppnTpPingMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnTpPingMinTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingMinTime.setDescription('This indicates the minimum time (in milliseconds) it took to PING the partner')
wfAppnTpPingMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnTpPingMaxTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingMaxTime.setDescription('This indicates the maximum time (in milliseconds) it took to PING the partner')
wfAppnTpPingAvgTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnTpPingAvgTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingAvgTime.setDescription('This indicates the average time (in milliseconds) it took to PING the partner')
wfAppnTpPingPartnerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnTpPingPartnerVersion.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpPingPartnerVersion.setDescription('This is the version string returned by the partner')
wfAppnTpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 3), )
if mibBuilder.loadTexts: wfAppnTpTunnelTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpTunnelTable.setDescription('This table contains entries for each APPN Tunnel')
wfAppnTpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 3, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnTpTunnelCct"))
if mibBuilder.loadTexts: wfAppnTpTunnelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpTunnelEntry.setDescription('An entry in wfAppnTpTunnelTable.')
wfAppnTpTunnelDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnTpTunnelDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpTunnelDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete an APPN Tunnel instance.')
wfAppnTpTunnelDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnTpTunnelDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpTunnelDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this APPN Tunnel instance.')
wfAppnTpTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnTpTunnelState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpTunnelState.setDescription('The current state of the Tunnel.')
wfAppnTpTunnelCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnTpTunnelCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpTunnelCct.setDescription('This is the circuit number of the circuit running over this APPN Tunnel')
wfAppnTpTunnelFqPluName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnTpTunnelFqPluName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpTunnelFqPluName.setDescription('This specifies the Partner LU for this APPN Tunnel')
wfAppnTpTunnelModeName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnTpTunnelModeName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpTunnelModeName.setDescription('This specifies the Mode for this APPN Tunnel')
wfAppnTpTunnelMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("ring", 5))).clone('ring')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnTpTunnelMedia.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpTunnelMedia.setDescription('This specifies the media to be emulated by this tunnel')
wfAppnTpTunnelMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnTpTunnelMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpTunnelMacAddress.setDescription('This specifies the local MAC address to be used by this tunnel')
wfAppnTpTunnelTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnTpTunnelTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpTunnelTxFrames.setDescription('This indicates the number of frames transmitted over this APPN Tunnel')
wfAppnTpTunnelRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnTpTunnelRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpTunnelRxFrames.setDescription('This indicates the number of frames received over this APPN Tunnel')
wfAppnTpTunnelDropFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 6, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnTpTunnelDropFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnTpTunnelDropFrames.setDescription('This indicates the number of frames dropped by this APPN Tunnel')
wfAppnDlurLuTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 1), )
if mibBuilder.loadTexts: wfAppnDlurLuTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurLuTable.setDescription('This table contains an entry for each LU currently being serviced by DLUR')
wfAppnDlurLuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 1, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnDlurLuName"))
if mibBuilder.loadTexts: wfAppnDlurLuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurLuEntry.setDescription('An entry in wfAppnDlurLuTable.')
wfAppnDlurLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurLuName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurLuName.setDescription('This is the name of the LU')
wfAppnDlurLuPuName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurLuPuName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurLuPuName.setDescription('This is the name of the PU associated with the LU')
wfAppnDlurLuDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurLuDlusName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurLuDlusName.setDescription('This is the name of the DLUS node supporting this LU')
wfAppnDlurLuNauAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurLuNauAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurLuNauAddress.setDescription('This is the Network Addressable Unit address of this LU')
wfAppnDlurLuPluName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurLuPluName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurLuPluName.setDescription('This is the name of the Partner LU')
wfAppnDlurLuRscv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurLuRscv.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurLuRscv.setDescription('This is the RSCV being used by this LU session')
wfAppnDlurLuRscvText = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurLuRscvText.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurLuRscvText.setDescription('This is the RSCV (in a human-readable format) for this DLUR connection')
wfAppnDlurPuTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 2), )
if mibBuilder.loadTexts: wfAppnDlurPuTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurPuTable.setDescription('This table contains an entry for each PU currently being serviced by DLUR')
wfAppnDlurPuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 2, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnDlurPuName"))
if mibBuilder.loadTexts: wfAppnDlurPuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurPuEntry.setDescription('An entry in wfAppnDlurPuTable.')
wfAppnDlurPuName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurPuName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurPuName.setDescription('This is the name of the PU')
wfAppnDlurPuId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurPuId.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurPuId.setDescription('ID of this PU')
wfAppnDlurPuDefinedDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurPuDefinedDlusName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurPuDefinedDlusName.setDescription('This is the name of the primary DLUS node defined this PU')
wfAppnDlurPuBackupDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurPuBackupDlusName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurPuBackupDlusName.setDescription('This is the name of the backup DLUS node defined this PU')
wfAppnDlurPuActiveDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurPuActiveDlusName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurPuActiveDlusName.setDescription('This is the name of the DLUS node currently supporting this PU')
wfAppnDlurPuPcid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurPuPcid.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurPuPcid.setDescription("This is the PCID of the DLUR 'pipe' session")
wfAppnDlurPuFqCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurPuFqCpName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurPuFqCpName.setDescription("This is the Fully-qualified CP name of the node assigning the PCID for the DLUR 'pipe' session")
wfAppnDlurDlusTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3), )
if mibBuilder.loadTexts: wfAppnDlurDlusTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusTable.setDescription('This table contains an entry for each DLUS known to this DLUR')
wfAppnDlurDlusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1), ).setIndexNames((0, "Wellfleet-APPN-MIB", "wfAppnDlurDlusName"))
if mibBuilder.loadTexts: wfAppnDlurDlusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusEntry.setDescription('An entry in wfAppnDlurDlusTable.')
wfAppnDlurDlusName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusName.setDescription('This is the fully-qualified name of the DLUS node')
wfAppnDlurDlusIsDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusIsDefault.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusIsDefault.setDescription('This indicates if the DLUS is the default DLUS')
wfAppnDlurDlusIsBackupDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusIsBackupDefault.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusIsBackupDefault.setDescription('This indicates if the DLUS is the default backup DLUS')
wfAppnDlurDlusPipeState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusPipeState.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusPipeState.setDescription('This indicates the state of the DLUR-DLUS pipe')
wfAppnDlurDlusActivePus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusActivePus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusActivePus.setDescription('This indicates the number of PUs currently using this DLUR-DLUS pipe')
wfAppnDlurDlusSentReqactpus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusSentReqactpus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusSentReqactpus.setDescription('This indicates the number of REQACTPUs sent over this DLUR-DLUS pipe')
wfAppnDlurDlusRcvReqactpuRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusRcvReqactpuRsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusRcvReqactpuRsps.setDescription('This indicates the number of REQACTPU responses received over this DLUR-DLUS pipe')
wfAppnDlurDlusRcvActpus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusRcvActpus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusRcvActpus.setDescription('This indicates the number of ACTPUs received over this DLUR-DLUS pipe')
wfAppnDlurDlusSentActpuRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusSentActpuRsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusSentActpuRsps.setDescription('This indicates the number of ACTPU responses sent over this DLUR-DLUS pipe')
wfAppnDlurDlusSentReqdactpus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusSentReqdactpus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusSentReqdactpus.setDescription('This indicates the number of REQDACTPUs sent over this DLUR-DLUS pipe')
wfAppnDlurDlusRcvReqdactpuRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusRcvReqdactpuRsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusRcvReqdactpuRsps.setDescription('This indicates the number of REQDACTPU responses received over this DLUR-DLUS pipe')
wfAppnDlurDlusRcvDactpus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusRcvDactpus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusRcvDactpus.setDescription('This indicates the number of DACTPUs received over this DLUR-DLUS pipe')
wfAppnDlurDlusSentDactpuRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusSentDactpuRsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusSentDactpuRsps.setDescription('This indicates the number of DACTPU responses sent over this DLUR-DLUS pipe')
wfAppnDlurDlusRcvActlus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusRcvActlus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusRcvActlus.setDescription('This indicates the number of ACTLUs received over this DLUR-DLUS pipe')
wfAppnDlurDlusSentActluRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusSentActluRsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusSentActluRsps.setDescription('This indicates the number of ACTLU responses sent over this DLUR-DLUS pipe')
wfAppnDlurDlusRcvDactlus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusRcvDactlus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusRcvDactlus.setDescription('This indicates the number of DACTLUs received over this DLUR-DLUS pipe')
wfAppnDlurDlusSentDactluRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusSentDactluRsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusSentDactluRsps.setDescription('This indicates the number of DACTLU responses sent over this DLUR-DLUS pipe')
wfAppnDlurDlusRcvSscpPuMus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusRcvSscpPuMus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusRcvSscpPuMus.setDescription('This indicates the number of SSCP-PU MUs received over this DLUR-DLUS pipe')
wfAppnDlurDlusSentSscpPuMus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusSentSscpPuMus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusSentSscpPuMus.setDescription('This indicates the number of SSCP-PU MUs sent over this DLUR-DLUS pipe')
wfAppnDlurDlusRcvSscpLuMus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusRcvSscpLuMus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusRcvSscpLuMus.setDescription('This indicates the number of SSCP-LU MUs received over this DLUR-DLUS pipe')
wfAppnDlurDlusSentSscpLuMus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 7, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfAppnDlurDlusSentSscpLuMus.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnDlurDlusSentSscpLuMus.setDescription('This indicates the number of SSCP-LU MUs sent over this DLUR-DLUS pipe')
wfAppnPathSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 8))
wfAppnPathSwitchDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnPathSwitchDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnPathSwitchDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete a path switch.')
wfAppnPathSwitchDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnPathSwitchDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnPathSwitchDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable this path switch.')
wfAppnPathSwitchRtpConnName = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 14, 8, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAppnPathSwitchRtpConnName.setStatus('mandatory')
if mibBuilder.loadTexts: wfAppnPathSwitchRtpConnName.setDescription('This is the name of the RTP connection to path switch')
mibBuilder.exportSymbols("Wellfleet-APPN-MIB", wfAppnNodeLsStatusEchoRsps=wfAppnNodeLsStatusEchoRsps, wfAppnNnNodeEndptDepleted=wfAppnNnNodeEndptDepleted, wfAppnPathSwitchDelete=wfAppnPathSwitchDelete, wfAppnNnNodeRouteAddResist=wfAppnNnNodeRouteAddResist, wfAppnNodeLsUsr2=wfAppnNodeLsUsr2, wfAppnNodeRtpConnectionLivenessTimeouts=wfAppnNodeRtpConnectionLivenessTimeouts, wfAppnNnAdjNodeOutOfSeqTdus=wfAppnNnAdjNodeOutOfSeqTdus, wfAppnNodeCnByteCost=wfAppnNodeCnByteCost, wfAppnNodeLsCpCpSession=wfAppnNodeLsCpCpSession, wfAppnNodeEndptSessionFqCpName=wfAppnNodeEndptSessionFqCpName, wfAppnNodeTraceDisable=wfAppnNodeTraceDisable, wfAppnNodeLsEffCap=wfAppnNodeLsEffCap, wfAppnNodeRtpConnectionLocalTcid=wfAppnNodeRtpConnectionLocalTcid, wfAppnNodeLsBlockNum=wfAppnNodeLsBlockNum, wfAppnNodeCnPortState=wfAppnNodeCnPortState, wfAppnNnTopoCurNumNodes=wfAppnNnTopoCurNumNodes, wfAppnTpPingDataLength=wfAppnTpPingDataLength, wfAppnCosTgRowUsr1Max=wfAppnCosTgRowUsr1Max, wfAppnDlurDlusRcvReqdactpuRsps=wfAppnDlurDlusRcvReqdactpuRsps, wfAppnDlurPuActiveDlusName=wfAppnDlurPuActiveDlusName, wfAppnDlurPuFqCpName=wfAppnDlurPuFqCpName, wfAppnNodeNnIsrSessionLowerThresh=wfAppnNodeNnIsrSessionLowerThresh, wfAppnDlurPuBackupDlusName=wfAppnDlurPuBackupDlusName, wfAppnNodeTraceDelete=wfAppnNodeTraceDelete, wfAppnNodeIsrSessionPriRcvFrames=wfAppnNodeIsrSessionPriRcvFrames, wfAppnNodePortImplicitDlurDisable=wfAppnNodePortImplicitDlurDisable, wfAppnNodeCnPortEntry=wfAppnNodeCnPortEntry, wfAppnNodeRtpConnectionRcvRate=wfAppnNodeRtpConnectionRcvRate, wfAppnNnNodeCongested=wfAppnNnNodeCongested, wfAppnCosNodeRowMinCongestAllow=wfAppnCosNodeRowMinCongestAllow, wfAppnTpTunnelDelete=wfAppnTpTunnelDelete, wfAppnCosTgRowConnCostMin=wfAppnCosTgRowConnCostMin, wfAppnDirDefineEntry=wfAppnDirDefineEntry, wfAppnNodeCnSecurity=wfAppnNodeCnSecurity, wfAppnNodeEndptSessionMaxRcvBtuSize=wfAppnNodeEndptSessionMaxRcvBtuSize, wfAppnNodeLsStatusPortName=wfAppnNodeLsStatusPortName, wfAppnNnNodeType=wfAppnNnNodeType, wfAppnDirDefineDisable=wfAppnDirDefineDisable, wfAppnNodeRtpConnectionResentBytes=wfAppnNodeRtpConnectionResentBytes, wfAppnNodeRtpConnectionRcvSessionControlFrames=wfAppnNodeRtpConnectionRcvSessionControlFrames, wfAppnNodeLsTargetPacingCount=wfAppnNodeLsTargetPacingCount, wfAppnNodePortTotLinkActLim=wfAppnNodePortTotLinkActLim, wfAppnNodeNnIsrSessionUpperThresh=wfAppnNodeNnIsrSessionUpperThresh, wfAppnNodeHprPathSwitchCtrlrDisable=wfAppnNodeHprPathSwitchCtrlrDisable, wfAppnNodeIsrSessionSecSendRuSize=wfAppnNodeIsrSessionSecSendRuSize, wfAppnNodeRtpConnectionLivenessTimer=wfAppnNodeRtpConnectionLivenessTimer, wfAppnDirCurCaches=wfAppnDirCurCaches, wfAppnTps=wfAppnTps, wfAppnNodeLsStatusInXidFrames=wfAppnNodeLsStatusInXidFrames, wfAppnNodeLsState=wfAppnNodeLsState, wfAppnNodeEndptSessionId=wfAppnNodeEndptSessionId, wfAppnNodeNnMaxTdmNodes=wfAppnNodeNnMaxTdmNodes, wfAppnNnTgTopologyFRTable=wfAppnNnTgTopologyFRTable, wfAppnNodePortNumber=wfAppnNodePortNumber, wfAppnNnNodeRsn=wfAppnNnNodeRsn, wfAppnNodeLsStatusOutXidFrames=wfAppnNodeLsStatusOutXidFrames, wfAppnNodeIsrSessionPriSendFmdFrames=wfAppnNodeIsrSessionPriSendFmdFrames, wfAppnLocalTgDestVirtual=wfAppnLocalTgDestVirtual, wfAppnNodeLsMigration=wfAppnNodeLsMigration, wfAppnTpPingMinTime=wfAppnTpPingMinTime, wfAppnNodeStoreEndpointRscvsDisable=wfAppnNodeStoreEndpointRscvsDisable, wfAppnNodeLsStatusMinDelay=wfAppnNodeLsStatusMinDelay, wfAppnDirDefineResourceType=wfAppnDirDefineResourceType, wfAppnNodeNnIsrMaxRuSize=wfAppnNodeNnIsrMaxRuSize, wfAppnLocalTgSecurity=wfAppnLocalTgSecurity, wfAppnNodeBindReasm=wfAppnNodeBindReasm, wfAppnNodePortImplicitUsr3=wfAppnNodePortImplicitUsr3, wfAppnNodeDlcState=wfAppnNodeDlcState, wfAppnNodeLsStatusInvalidSnaFrames=wfAppnNodeLsStatusInvalidSnaFrames, wfAppnDlurLuName=wfAppnDlurLuName, wfAppnNodePortDefLsBadXids=wfAppnNodePortDefLsBadXids, wfAppnNodeCnPortDisable=wfAppnNodeCnPortDisable, wfAppnLocalNnRouteAddResist=wfAppnLocalNnRouteAddResist, wfAppnNodeDlcDelete=wfAppnNodeDlcDelete, wfAppnNnTopoNodeGoodHighRsns=wfAppnNnTopoNodeGoodHighRsns, wfAppnNnNodeGateway=wfAppnNnNodeGateway, wfAppnNodeCnUsr1=wfAppnNodeCnUsr1, wfAppnNodeNnMaxDirEntries=wfAppnNodeNnMaxDirEntries, wfAppnLocalTgDlcData=wfAppnLocalTgDlcData, wfAppnNodeSoloistSlotNum=wfAppnNodeSoloistSlotNum, wfAppnNodeRtpConnectionRemoteTcid=wfAppnNodeRtpConnectionRemoteTcid, wfAppnNnAdjNodeCpCpSessStatus=wfAppnNnAdjNodeCpCpSessStatus, wfAppnNodeEndptSessionRcvRuSize=wfAppnNodeEndptSessionRcvRuSize, wfAppnNodeRtpConnectionRscvText=wfAppnNodeRtpConnectionRscvText, wfAppnNodeLsStatusOutMsgBytes=wfAppnNodeLsStatusOutMsgBytes, wfAppnCosTgRowSecurityMax=wfAppnCosTgRowSecurityMax, wfAppnNodeLsLinkRetryCount=wfAppnNodeLsLinkRetryCount, wfAppnNodeLsStatusName=wfAppnNodeLsStatusName, wfAppnDlurPuPcid=wfAppnDlurPuPcid, wfAppnTpPingPartnerTpName=wfAppnTpPingPartnerTpName, wfAppnDirDefineDelete=wfAppnDirDefineDelete, wfAppnNodeCnPortCnName=wfAppnNodeCnPortCnName, wfAppnNnNodeFRType=wfAppnNnNodeFRType, wfAppnDlurPuId=wfAppnDlurPuId, wfAppnLocalTgEntry=wfAppnLocalTgEntry, wfAppnNodeLsStatusState=wfAppnNodeLsStatusState, wfAppnNodeBrNNSupport=wfAppnNodeBrNNSupport, wfAppnDlurDlusSentReqdactpus=wfAppnDlurDlusSentReqdactpus, wfAppnNodeAlertQSize=wfAppnNodeAlertQSize, wfAppnNnTopoTotalRouteRejs=wfAppnNnTopoTotalRouteRejs, wfAppnNodeLsStatusOutXidBytes=wfAppnNodeLsStatusOutXidBytes, wfAppnNnTopoNodeErrors=wfAppnNnTopoNodeErrors, wfAppnCosTgRowByteCostMax=wfAppnCosTgRowByteCostMax, wfAppnNodeLsUsr1=wfAppnNodeLsUsr1, wfAppnNodeLsCpName=wfAppnNodeLsCpName, wfAppnNode=wfAppnNode, wfAppnNodePortMaxRcvBtuSize=wfAppnNodePortMaxRcvBtuSize, wfAppnNnNodeIsr=wfAppnNnNodeIsr, wfAppnLocalTgNum=wfAppnLocalTgNum, wfAppnNn=wfAppnNn, wfAppnNodeLsDelete=wfAppnNodeLsDelete, wfAppnNodeDebugIpsTraceSize=wfAppnNodeDebugIpsTraceSize, wfAppnNnTgFRUsr2=wfAppnNnTgFRUsr2, wfAppnNodeRtpConnectionSmoothRoundTripTime=wfAppnNodeRtpConnectionSmoothRoundTripTime, wfAppnNodeCnTable=wfAppnNodeCnTable, wfAppnNodeCnPortDelete=wfAppnNodeCnPortDelete, wfAppnDlurLuEntry=wfAppnDlurLuEntry, wfAppnNodeDlusRetryTimeout=wfAppnNodeDlusRetryTimeout, wfAppnNodePortHprDlcData=wfAppnNodePortHprDlcData, wfAppnLocalNnFrsn=wfAppnLocalNnFrsn, wfAppnNodeRtpConnectionMaxSendRate=wfAppnNodeRtpConnectionMaxSendRate, wfAppnNodeIsrSessionPriRcvBytes=wfAppnNodeIsrSessionPriRcvBytes, wfAppnLocalInfo=wfAppnLocalInfo, wfAppnNodePortPortType=wfAppnNodePortPortType, wfAppnNodeIsrSessionSecMaxRcvPacing=wfAppnNodeIsrSessionSecMaxRcvPacing, wfAppnNodeDefaultDlusName=wfAppnNodeDefaultDlusName, wfAppnNodeLsStatusHprSupport=wfAppnNodeLsStatusHprSupport, wfAppnNodeIsrSessionSecSendBytes=wfAppnNodeIsrSessionSecSendBytes, wfAppnDlurLuDlusName=wfAppnDlurLuDlusName, wfAppnTpTunnelCct=wfAppnTpTunnelCct, wfAppnLocalNodeName=wfAppnLocalNodeName, wfAppnLocalNnEndptDepleted=wfAppnLocalNnEndptDepleted, wfAppnNodeRtpConnectionRscv=wfAppnNodeRtpConnectionRscv, wfAppnNnAdjNodeAdjName=wfAppnNnAdjNodeAdjName, wfAppnTpTunnelFqPluName=wfAppnTpTunnelFqPluName, wfAppnNodeRtpConnectionMaxRcvRate=wfAppnNodeRtpConnectionMaxRcvRate, wfAppnNodePortLsXmitRcvCap=wfAppnNodePortLsXmitRcvCap, wfAppnNodeLsStatusIdNum=wfAppnNodeLsStatusIdNum, wfAppnNodeIsrSessionSecLsName=wfAppnNodeIsrSessionSecLsName, wfAppnNodeIdNum=wfAppnNodeIdNum, wfAppnDlurDlusSentDactpuRsps=wfAppnDlurDlusSentDactpuRsps, wfAppnNnNodeChainSupport=wfAppnNnNodeChainSupport, wfAppnLocalNnRsn=wfAppnLocalNnRsn, wfAppnTpTunnelDropFrames=wfAppnTpTunnelDropFrames, wfAppnDirNotFoundLocates=wfAppnDirNotFoundLocates, wfAppnNodeType=wfAppnNodeType, wfAppnNodeEndptSessionOdai=wfAppnNodeEndptSessionOdai, wfAppnNodeNnGateway=wfAppnNodeNnGateway, wfAppnNodeMdsDisable=wfAppnNodeMdsDisable, wfAppnDlurDlusRcvDactpus=wfAppnDlurDlusRcvDactpus, wfAppnDirWildCard=wfAppnDirWildCard, wfAppnNodeEndptSessionTransPriority=wfAppnNodeEndptSessionTransPriority, wfAppnNnTgQuiescing=wfAppnNnTgQuiescing, wfAppnDirDefineParentType=wfAppnDirDefineParentType, wfAppnNodeRtpConnectionUpTime=wfAppnNodeRtpConnectionUpTime, wfAppnCosNodeRowResistMax=wfAppnCosNodeRowResistMax, wfAppnNodePortDefLsGoodXids=wfAppnNodePortDefLsGoodXids, wfAppnNodeNetid=wfAppnNodeNetid, wfAppnDlurDlusSentSscpPuMus=wfAppnDlurDlusSentSscpPuMus, wfAppnNnTgFRRtpTower=wfAppnNnTgFRRtpTower, wfAppnCosNodeRowMaxCongestAllow=wfAppnCosNodeRowMaxCongestAllow, wfAppnLocalTgQuiescing=wfAppnLocalTgQuiescing, wfAppnNodeIsrSessionSecSendFmdFrames=wfAppnNodeIsrSessionSecSendFmdFrames, wfAppnNodeRtpConnectionRcvPackets=wfAppnNodeRtpConnectionRcvPackets, wfAppnNodeNnDlurDisable=wfAppnNodeNnDlurDisable, wfAppnNodePortTargetPacingCount=wfAppnNodePortTargetPacingCount, wfAppnNodeEndptSessionSendBytes=wfAppnNodeEndptSessionSendBytes, wfAppnTpTunnelEntry=wfAppnTpTunnelEntry, wfAppnNodeIsrSessionSecSidh=wfAppnNodeIsrSessionSecSidh, wfAppnNodeLsHprDisable=wfAppnNodeLsHprDisable, wfAppnLocalTgModemClass=wfAppnLocalTgModemClass, wfAppnNnTopologyEntry=wfAppnNnTopologyEntry, wfAppnNodePortImplicitSecurity=wfAppnNodePortImplicitSecurity, wfAppnNnAdjNodeLastFrsnRcvd=wfAppnNnAdjNodeLastFrsnRcvd, wfAppnNnTopoTgTimerUpdates=wfAppnNnTopoTgTimerUpdates, wfAppnNodeLsStatusDlcType=wfAppnNodeLsStatusDlcType, wfAppnNodeDlcDisable=wfAppnNodeDlcDisable, wfAppnNodeEndptSessionMode=wfAppnNodeEndptSessionMode, wfAppnNodeNnDirCacheSize=wfAppnNodeNnDirCacheSize, wfAppnNodePortState=wfAppnNodePortState, wfAppnDlurDlusSentActpuRsps=wfAppnDlurDlusSentActpuRsps, wfAppnNnTgHprBase=wfAppnNnTgHprBase, wfAppnNnTgFRDlcData=wfAppnNnTgFRDlcData, wfAppnNodeNnIsrRcvPacingWindow=wfAppnNodeNnIsrRcvPacingWindow, wfAppnNodeCnEntry=wfAppnNodeCnEntry, wfAppnNodeIsrSessionSecCurSendPacing=wfAppnNodeIsrSessionSecCurSendPacing, wfAppnNodeEndptSessionRscvText=wfAppnNodeEndptSessionRscvText, wfAppnNodeLsConnCost=wfAppnNodeLsConnCost, wfAppnNodePortDlcType=wfAppnNodePortDlcType, wfAppnNodeIsrSessionSecSidl=wfAppnNodeIsrSessionSecSidl, wfAppnLocalTgUsr3=wfAppnLocalTgUsr3, wfAppnDirNotFoundBcastLocates=wfAppnDirNotFoundBcastLocates, wfAppnNodePortImplicitUsr1=wfAppnNodePortImplicitUsr1, wfAppnNodePortImplicitByteCost=wfAppnNodePortImplicitByteCost, wfAppnCosTgRowSecurityMin=wfAppnCosTgRowSecurityMin, wfAppnNodeLsStatusMaxDelayTime=wfAppnNodeLsStatusMaxDelayTime, wfAppnNodeLsStatusLinkData=wfAppnNodeLsStatusLinkData, wfAppnCosTgRowWgt=wfAppnCosTgRowWgt, wfAppnDlurLuPluName=wfAppnDlurLuPluName, wfAppnNodePortNonActXidExchangeLimit=wfAppnNodePortNonActXidExchangeLimit, wfAppnNodeLsTgNum=wfAppnNodeLsTgNum, wfAppnNodeEndptSessionContention=wfAppnNodeEndptSessionContention, wfAppnNnNodeFRGateway=wfAppnNnNodeFRGateway, wfAppnCosModeTable=wfAppnCosModeTable, wfAppnNodeIsrSessionPriMaxSendBtuSize=wfAppnNodeIsrSessionPriMaxSendBtuSize, wfAppnCosNodeRowTable=wfAppnCosNodeRowTable, wfAppnNodePortMaxSendBtuSize=wfAppnNodePortMaxSendBtuSize, wfAppnNodeRtpConnectionDestName=wfAppnNodeRtpConnectionDestName, wfAppnTpPingMode=wfAppnTpPingMode, wfAppnNodeEndptSessionRcvFrames=wfAppnNodeEndptSessionRcvFrames, wfAppnNodeLsStatusDelay=wfAppnNodeLsStatusDelay, wfAppnCosNodeRowEntry=wfAppnCosNodeRowEntry, wfAppnDlurLuNauAddress=wfAppnDlurLuNauAddress, wfAppnPathSwitchRtpConnName=wfAppnPathSwitchRtpConnName, wfAppnDlurDlusTable=wfAppnDlurDlusTable, wfAppnNodeEndptSessionRscv=wfAppnNodeEndptSessionRscv, wfAppnDlurLuRscvText=wfAppnDlurLuRscvText, wfAppnNnTgByteCost=wfAppnNnTgByteCost, wfAppnNodeLsStatusDynamic=wfAppnNodeLsStatusDynamic, wfAppnTpTunnelMacAddress=wfAppnTpTunnelMacAddress, wfAppnNodeNnStoreIsrRscvsDisable=wfAppnNodeNnStoreIsrRscvsDisable, wfAppnNodePortImplicitDelay=wfAppnNodePortImplicitDelay, wfAppnNodeEndptSessionLsName=wfAppnNodeEndptSessionLsName, wfAppnNnTopoTgGoodHighRsns=wfAppnNnTopoTgGoodHighRsns, wfAppnNnTgFRHprBase=wfAppnNnTgFRHprBase, wfAppnNodeLsStatusLimResource=wfAppnNodeLsStatusLimResource, wfAppnNnNodeName=wfAppnNnNodeName, wfAppnDlurDlusSentDactluRsps=wfAppnDlurDlusSentDactluRsps, wfAppnNodeIsrSessionPriMaxSendPacing=wfAppnNodeIsrSessionPriMaxSendPacing, wfAppnDlurLuRscv=wfAppnDlurLuRscv, wfAppnNodeIsrSessionPriCurRcvPacing=wfAppnNodeIsrSessionPriCurRcvPacing, wfAppnNnTgFREntryTimeLeft=wfAppnNnTgFREntryTimeLeft, wfAppnCosNodeRowName=wfAppnCosNodeRowName, wfAppnNnTopoNodeEqualRsns=wfAppnNnTopoNodeEqualRsns, wfAppnNodeIsrSessionSecRcvBytes=wfAppnNodeIsrSessionSecRcvBytes, wfAppnNodeLsStatusByteCost=wfAppnNodeLsStatusByteCost, wfAppnDirInBcastLocates=wfAppnDirInBcastLocates, wfAppnNodeRtpConnectionName=wfAppnNodeRtpConnectionName, wfAppnNodeNnFrsn=wfAppnNodeNnFrsn, wfAppnNodePortImplicitLinkDeactTime=wfAppnNodePortImplicitLinkDeactTime, wfAppnNodeLsLinkDeactTime=wfAppnNodeLsLinkDeactTime, wfAppnNnTgEffCap=wfAppnNnTgEffCap, wfAppnNodeEndptSessionTable=wfAppnNodeEndptSessionTable, wfAppnNodeLsStatusOutMsgFrames=wfAppnNodeLsStatusOutMsgFrames, wfAppnCosTransPriority=wfAppnCosTransPriority, wfAppnNnTgCpCpSession=wfAppnNnTgCpCpSession, wfAppnLocalTgDest=wfAppnLocalTgDest, wfAppnCosTgRowName=wfAppnCosTgRowName, wfAppnNodeNnRcvRegChar=wfAppnNodeNnRcvRegChar, wfAppnNnNodeFREntryTimeLeft=wfAppnNnNodeFREntryTimeLeft, wfAppnNodeLsStatusHprLlErrSupport=wfAppnNodeLsStatusHprLlErrSupport, wfAppnNnTgFRCpCpSession=wfAppnNnTgFRCpCpSession, wfAppnNodeRegWithCdsDisable=wfAppnNodeRegWithCdsDisable, wfAppnNodeNnMaxTdmTgs=wfAppnNodeNnMaxTdmTgs)
mibBuilder.exportSymbols("Wellfleet-APPN-MIB", wfAppnNodeLsHprLlErrorDisable=wfAppnNodeLsHprLlErrorDisable, wfAppnNodeBranchAwarenessEnable=wfAppnNodeBranchAwarenessEnable, wfAppnLocalNnIsrDepleted=wfAppnLocalNnIsrDepleted, wfAppnNnTopologyFREntry=wfAppnNnTopologyFREntry, wfAppnNodeLsDefaultNNS=wfAppnNodeLsDefaultNNS, wfAppnNodeIsrSessionPriOdai=wfAppnNodeIsrSessionPriOdai, wfAppnNodeIsrSessionPriSendFrames=wfAppnNodeIsrSessionPriSendFrames, wfAppnNodeEndptSessionRcvBytes=wfAppnNodeEndptSessionRcvBytes, wfAppnNnTopoInTdus=wfAppnNnTopoInTdus, wfAppnNodeIsrSessionSecCurRcvPacing=wfAppnNodeIsrSessionSecCurRcvPacing, wfAppnNodeLsUseDefaultTgChars=wfAppnNodeLsUseDefaultTgChars, wfAppnNodeHprDisable=wfAppnNodeHprDisable, wfAppnNodeLsBranchLinkType=wfAppnNodeLsBranchLinkType, wfAppnNodeRtpConnectionTable=wfAppnNodeRtpConnectionTable, wfAppnDlurDlusSentReqactpus=wfAppnDlurDlusSentReqactpus, wfAppnDlurDlusActivePus=wfAppnDlurDlusActivePus, wfAppnNodeLsPortName=wfAppnNodeLsPortName, wfAppnDlurDlusRcvDactlus=wfAppnDlurDlusRcvDactlus, wfAppnLocalTgRsn=wfAppnLocalTgRsn, wfAppnDlurDlusRcvSscpPuMus=wfAppnDlurDlusRcvSscpPuMus, wfAppnCosName=wfAppnCosName, wfAppnNodePortActXidExchangeLimit=wfAppnNodePortActXidExchangeLimit, wfAppnCosTgRowEffCapMax=wfAppnCosTgRowEffCapMax, wfAppnNodeNnMaxIsrSessions=wfAppnNodeNnMaxIsrSessions, wfAppnLocalNnCentralDirectory=wfAppnLocalNnCentralDirectory, wfAppnNodeIsrSessionCos=wfAppnNodeIsrSessionCos, wfAppnDlurPuDefinedDlusName=wfAppnDlurPuDefinedDlusName, wfAppnNodePortImplicitEffCap=wfAppnNodePortImplicitEffCap, wfAppnNodeNnTreeCacheUseLimit=wfAppnNodeNnTreeCacheUseLimit, wfAppnNodeRtpConnectionRoundTripTime=wfAppnNodeRtpConnectionRoundTripTime, wfAppnCosTgRowConnCostMax=wfAppnCosTgRowConnCostMax, wfAppnNnAdjNodeLastFrsnSent=wfAppnNnAdjNodeLastFrsnSent, wfAppnNodePortImplicitUsr2=wfAppnNodePortImplicitUsr2, wfAppnNodeIsrSessionPriRcvRuSize=wfAppnNodeIsrSessionPriRcvRuSize, wfAppnNodeDlcNegLsSupportDisable=wfAppnNodeDlcNegLsSupportDisable, wfAppnTpPingIterations=wfAppnTpPingIterations, wfAppnNnTopoNodeStateUpdates=wfAppnNnTopoNodeStateUpdates, wfAppnDirTable=wfAppnDirTable, wfAppnNodeDlcName=wfAppnNodeDlcName, wfAppnNodeTraceGroup=wfAppnNodeTraceGroup, wfAppnLocalTgOperational=wfAppnLocalTgOperational, wfAppnNodeRtpConnectionMinRcvRate=wfAppnNodeRtpConnectionMinRcvRate, wfAppnNodeDlcTable=wfAppnNodeDlcTable, wfAppnNodeLsStatusUsr3=wfAppnNodeLsStatusUsr3, wfAppnLocalTgTable=wfAppnLocalTgTable, wfAppnNodeDlusRetryLimit=wfAppnNodeDlusRetryLimit, wfAppnDirOutBcastLocates=wfAppnDirOutBcastLocates, wfAppnNodeEndptSessionSendFrames=wfAppnNodeEndptSessionSendFrames, wfAppnNodeCnState=wfAppnNodeCnState, wfAppnNnTopoNodeTimerUpdates=wfAppnNnTopoNodeTimerUpdates, wfAppnNodePdLogDisable=wfAppnNodePdLogDisable, wfAppnLocalTopology=wfAppnLocalTopology, wfAppnNodeUpTime=wfAppnNodeUpTime, wfAppnNodeLsSecurity=wfAppnNodeLsSecurity, wfAppnNodeLsStatusMaxDelay=wfAppnNodeLsStatusMaxDelay, wfAppnNodeEndptSessionMaxSendPacing=wfAppnNodeEndptSessionMaxSendPacing, wfAppnDlurDlusName=wfAppnDlurDlusName, wfAppnCosTgRowTable=wfAppnCosTgRowTable, wfAppnNodeEndptSessionEntry=wfAppnNodeEndptSessionEntry, wfAppnNnTgUsr3=wfAppnNnTgUsr3, wfAppnNodeState=wfAppnNodeState, wfAppnNodeLsIdNum=wfAppnNodeLsIdNum, wfAppnLocalTgUsr2=wfAppnLocalTgUsr2, wfAppnNodeNnTreeCacheSize=wfAppnNodeNnTreeCacheSize, wfAppnNodeBlockNum=wfAppnNodeBlockNum, wfAppnNnTopoTgBadHighRsns=wfAppnNnTopoTgBadHighRsns, wfAppnNnNodeFRRtpTower=wfAppnNnNodeFRRtpTower, wfAppnDirDefineTable=wfAppnDirDefineTable, wfAppnNodeParallelTg=wfAppnNodeParallelTg, wfAppnCosTgRowEntry=wfAppnCosTgRowEntry, wfAppnNodeLsName=wfAppnNodeLsName, wfAppnNodeEndptSessionLimResource=wfAppnNodeEndptSessionLimResource, wfAppnNodeLsStatusTable=wfAppnNodeLsStatusTable, wfAppnNodeLsStatusMaxSendBtuSize=wfAppnNodeLsStatusMaxSendBtuSize, wfAppnNodeIsrSessionRscvText=wfAppnNodeIsrSessionRscvText, wfAppnNnTopoTgLowRsns=wfAppnNnTopoTgLowRsns, wfAppnTpPingFqPluName=wfAppnTpPingFqPluName, wfAppnNnTgFRConnCost=wfAppnNnTgFRConnCost, wfAppnNodeIsrSessionSecOdai=wfAppnNodeIsrSessionSecOdai, wfAppnNodeRtpConnectionShortReqTimer=wfAppnNodeRtpConnectionShortReqTimer, wfAppnCosTgRowUsr3Min=wfAppnCosTgRowUsr3Min, wfAppnNnNodeFRCentralDirectory=wfAppnNnNodeFRCentralDirectory, wfAppnNodeNnLocateTimeout=wfAppnNodeNnLocateTimeout, wfAppnNodeLsAutoActivateDisable=wfAppnNodeLsAutoActivateDisable, wfAppnTpPingDisable=wfAppnTpPingDisable, wfAppnNodeRtpConnectionFirstHopLsName=wfAppnNodeRtpConnectionFirstHopLsName, wfAppnDlurPuEntry=wfAppnDlurPuEntry, wfAppnDlurDlusPipeState=wfAppnDlurDlusPipeState, wfAppnNodeLsAdjBrNNLinkSupp=wfAppnNodeLsAdjBrNNLinkSupp, wfAppnNnTopo=wfAppnNnTopo, wfAppnNodeLsDspuName=wfAppnNodeLsDspuName, wfAppnCosTgRowEffCapMin=wfAppnCosTgRowEffCapMin, wfAppnNodeCnUsr2=wfAppnNodeCnUsr2, wfAppnDlurPuTable=wfAppnDlurPuTable, wfAppnNodeLsDlusName=wfAppnNodeLsDlusName, wfAppnDlurDlusIsBackupDefault=wfAppnDlurDlusIsBackupDefault, wfAppnPathSwitchDisable=wfAppnPathSwitchDisable, wfAppnNodeRegisterWithNN=wfAppnNodeRegisterWithNN, wfAppnCosTgRowDelayMax=wfAppnCosTgRowDelayMax, wfAppnNodeInfoAndCaps=wfAppnNodeInfoAndCaps, wfAppnDirLuOwnerName=wfAppnDirLuOwnerName, wfAppnNnNodeFRFrsn=wfAppnNnNodeFRFrsn, wfAppnTpPingAvgTime=wfAppnTpPingAvgTime, wfAppnNnTopoNodeLowRsns=wfAppnNnTopoNodeLowRsns, wfAppnNodeLsStatusInXidBytes=wfAppnNodeLsStatusInXidBytes, wfAppnNodeCnConnCost=wfAppnNodeCnConnCost, wfAppnDirCurHomeEntries=wfAppnDirCurHomeEntries, wfAppnDlurDlusRcvReqactpuRsps=wfAppnDlurDlusRcvReqactpuRsps, wfAppnNodePortDisable=wfAppnNodePortDisable, wfAppnNodePortMaxIframeWindow=wfAppnNodePortMaxIframeWindow, wfAppnNodePortLsRole=wfAppnNodePortLsRole, wfAppnNodeLsStatusGoodXids=wfAppnNodeLsStatusGoodXids, wfAppnNodeIsrSessionPriMaxRcvBtuSize=wfAppnNodeIsrSessionPriMaxRcvBtuSize, wfAppnDirMaxCaches=wfAppnDirMaxCaches, wfAppnCosModeEntry=wfAppnCosModeEntry, wfAppnNodeIsrSessionPriSendBytes=wfAppnNodeIsrSessionPriSendBytes, wfAppnNodeIsrSessionSecRcvFmdFrames=wfAppnNodeIsrSessionSecRcvFmdFrames, wfAppnNnNodeIsrDepleted=wfAppnNnNodeIsrDepleted, wfAppnDirInLocates=wfAppnDirInLocates, wfAppnNodePortTable=wfAppnNodePortTable, wfAppnNodeSegReasm=wfAppnNodeSegReasm, wfAppnNnTgEntryTimeLeft=wfAppnNnTgEntryTimeLeft, wfAppnNnTopoTgPurges=wfAppnNnTopoTgPurges, wfAppnNnTgFREffCap=wfAppnNnTgFREffCap, wfAppnNnTgFRSecurity=wfAppnNnTgFRSecurity, wfAppnLocalTgCpCpSession=wfAppnLocalTgCpCpSession, wfAppnNodeIsrSessionTransPriority=wfAppnNodeIsrSessionTransPriority, wfAppnNodeIsrSessionPriSidh=wfAppnNodeIsrSessionPriSidh, wfAppnNodeDelete=wfAppnNodeDelete, wfAppnNodeIsrSessionRscv=wfAppnNodeIsrSessionRscv, wfAppnDirType=wfAppnDirType, wfAppnNodeCnUsr3=wfAppnNodeCnUsr3, wfAppnLocalNnChainSupport=wfAppnLocalNnChainSupport, wfAppnTpTunnelRxFrames=wfAppnTpTunnelRxFrames, wfAppnNodeIsrSessionSecMaxSendBtuSize=wfAppnNodeIsrSessionSecMaxSendBtuSize, wfAppnNnNodeFRName=wfAppnNnNodeFRName, wfAppnNnTgFRModemClass=wfAppnNnTgFRModemClass, wfAppnNodePortImplicitHprLlErrorDisable=wfAppnNodePortImplicitHprLlErrorDisable, wfAppnNodeLsMaxSendBtuSize=wfAppnNodeLsMaxSendBtuSize, wfAppnNodeCnDisable=wfAppnNodeCnDisable, wfAppnNodeLsBackupDlusName=wfAppnNodeLsBackupDlusName, wfAppnDlurLuPuName=wfAppnDlurLuPuName, wfAppnNnNodeHprBase=wfAppnNnNodeHprBase, wfAppnNodePortEntry=wfAppnNodePortEntry, wfAppnNodeCnPortTable=wfAppnNodeCnPortTable, wfAppnNodeModeToCosDisable=wfAppnNodeModeToCosDisable, wfAppnTpPingTable=wfAppnTpPingTable, wfAppnNodeIsrSessionPriRcvFmdFrames=wfAppnNodeIsrSessionPriRcvFmdFrames, wfAppnNodeDlcEntry=wfAppnNodeDlcEntry, wfAppnNodeLsStatusConnCost=wfAppnNodeLsStatusConnCost, wfAppnNodeRtpConnectionSendRate=wfAppnNodeRtpConnectionSendRate, wfAppnDlurDlusIsDefault=wfAppnDlurDlusIsDefault, wfAppnNodeNnTreeCache=wfAppnNodeNnTreeCache, wfAppnLocalNnCongested=wfAppnLocalNnCongested, wfAppnCosTgRowUsr1Min=wfAppnCosTgRowUsr1Min, wfAppnNodeEndptSessionFqPluName=wfAppnNodeEndptSessionFqPluName, wfAppnNodeRtpConnectionSendPackets=wfAppnNodeRtpConnectionSendPackets, wfAppnNnTgDestVirtual=wfAppnNnTgDestVirtual, wfAppnNnTgOwner=wfAppnNnTgOwner, wfAppnNodeLsDisable=wfAppnNodeLsDisable, wfAppnNodeLsStatusUsr1=wfAppnNodeLsStatusUsr1, wfAppnNodeMemoryWarningThreshold=wfAppnNodeMemoryWarningThreshold, wfAppnNodeRtpConnectionDiscardedBytes=wfAppnNodeRtpConnectionDiscardedBytes, wfAppnNodePortImplicitHprDisable=wfAppnNodePortImplicitHprDisable, wfAppnNnTopoTotalRouteCalcs=wfAppnNnTopoTotalRouteCalcs, wfAppnNodeInUseMemory=wfAppnNodeInUseMemory, wfAppnNodeCosCacheSize=wfAppnNodeCosCacheSize, wfAppnCosTgRowUsr3Max=wfAppnCosTgRowUsr3Max, wfAppnNodeRtpConnectionActiveSessions=wfAppnNodeRtpConnectionActiveSessions, wfAppnNodeCnDelete=wfAppnNodeCnDelete, wfAppnNnTopoOutTdus=wfAppnNnTopoOutTdus, wfAppnNodeLsLimResource=wfAppnNodeLsLimResource, wfAppnNodeLsStatusStopTime=wfAppnNodeLsStatusStopTime, wfAppnNnTgSecurity=wfAppnNnTgSecurity, wfAppnNodeRtpConnectionCosName=wfAppnNodeRtpConnectionCosName, wfAppnNnTopoTgErrors=wfAppnNnTopoTgErrors, wfAppnTpPingDelete=wfAppnTpPingDelete, wfAppnNnTgFRQuiescing=wfAppnNnTgFRQuiescing, wfAppnNnNodeFRRouteAddResist=wfAppnNnNodeFRRouteAddResist, wfAppnNodeDefaultBackupDlusName=wfAppnNodeDefaultBackupDlusName, wfAppnNodeEndptSessionSidh=wfAppnNodeEndptSessionSidh, wfAppnCosNodeRowIndex=wfAppnCosNodeRowIndex, wfAppnTpTunnelTxFrames=wfAppnTpTunnelTxFrames, wfAppnNodeEndptSessionSendRuSize=wfAppnNodeEndptSessionSendRuSize, wfAppnNodeRtpConnectionBurstSize=wfAppnNodeRtpConnectionBurstSize, wfAppnCosNameTable=wfAppnCosNameTable, wfAppnNodeLsStatusSecurity=wfAppnNodeLsStatusSecurity, wfAppnNodeIsrSessionSecMaxRcvBtuSize=wfAppnNodeIsrSessionSecMaxRcvBtuSize, wfAppnNodePortImplicitUplinkToEN=wfAppnNodePortImplicitUplinkToEN, wfAppnNodeIsrSessionFqCpName=wfAppnNodeIsrSessionFqCpName, wfAppnNnTopologyTable=wfAppnNnTopologyTable, wfAppnNodeRtpConnectionMinSendRate=wfAppnNodeRtpConnectionMinSendRate, wfAppnNodeRtpConnectionResentPackets=wfAppnNodeRtpConnectionResentPackets, wfAppnNnAdjNodeEntry=wfAppnNnAdjNodeEntry, wfAppnNodeIsrSessionSecRcvFrames=wfAppnNodeIsrSessionSecRcvFrames, wfAppnNodeLsStatusStartTime=wfAppnNodeLsStatusStartTime, wfAppnNodeLsStatusTgNum=wfAppnNodeLsStatusTgNum, wfAppnNodeRtpConnectionSrtExpiries=wfAppnNodeRtpConnectionSrtExpiries, wfAppnDlu=wfAppnDlu, wfAppnNodeRtpConnectionDiscardedPackets=wfAppnNodeRtpConnectionDiscardedPackets, wfAppnNnTgTopologyFREntry=wfAppnNnTgTopologyFREntry, wfAppnNnTgUsr2=wfAppnNnTgUsr2, wfAppnNnNodeFRIsr=wfAppnNnNodeFRIsr, wfAppnNodePortInbLinkActLim=wfAppnNodePortInbLinkActLim, wfAppnNnTgFRRsn=wfAppnNnTgFRRsn, wfAppnDirEntry=wfAppnDirEntry, wfAppnNnTgRsn=wfAppnNnTgRsn, wfAppnNodeCnEffCap=wfAppnNodeCnEffCap, wfAppnCosNodeRowWgt=wfAppnCosNodeRowWgt, wfAppnNodeLsUsr3=wfAppnNodeLsUsr3, wfAppnNodeIsrSessionPcid=wfAppnNodeIsrSessionPcid, wfAppnNodePortDlcData=wfAppnNodePortDlcData, wfAppnTpTunnelTable=wfAppnTpTunnelTable, wfAppnTpTunnelMedia=wfAppnTpTunnelMedia, wfAppnDirLuName=wfAppnDirLuName, wfAppnCosTgRowByteCostMin=wfAppnCosTgRowByteCostMin, wfAppnNnAdjNodeTable=wfAppnNnAdjNodeTable, wfAppnCos=wfAppnCos, wfAppnNodeIsrSessionLimResource=wfAppnNodeIsrSessionLimResource, wfAppnDirectoryPerformance=wfAppnDirectoryPerformance, wfAppnNodeLsCpType=wfAppnNodeLsCpType, wfAppnNodeLsStatusUpTime=wfAppnNodeLsStatusUpTime, wfAppnNnTopologyFRTable=wfAppnNnTopologyFRTable, wfAppnNnTgFRUsr3=wfAppnNnTgFRUsr3, wfAppnNnTopoMaxNodes=wfAppnNnTopoMaxNodes, wfAppnNodeDebugIpsTraceDisable=wfAppnNodeDebugIpsTraceDisable, wfAppnNodePortDynLsGoodXids=wfAppnNodePortDynLsGoodXids, wfAppnNnNodeFRCongested=wfAppnNnNodeFRCongested, wfAppnNodeEndptSessionSendFmdFrames=wfAppnNodeEndptSessionSendFmdFrames, wfAppnNodeEndptSessionCurRcvPacing=wfAppnNodeEndptSessionCurRcvPacing, wfAppnNodeLsStatusCpType=wfAppnNodeLsStatusCpType, wfAppnNodeLsStatusActiveSessions=wfAppnNodeLsStatusActiveSessions, wfAppnNodeLsStatusCpName=wfAppnNodeLsStatusCpName, wfAppnNnTgFRByteCost=wfAppnNnTgFRByteCost, wfAppnNnNodeFREndptDepleted=wfAppnNnNodeFREndptDepleted, wfAppnNnNodeFRChainSupport=wfAppnNnNodeFRChainSupport, wfAppnNodeRtpConnectionMaxBtuSize=wfAppnNodeRtpConnectionMaxBtuSize, wfAppnDirectory=wfAppnDirectory, wfAppnNodePortSIMRIM=wfAppnNodePortSIMRIM, wfAppnNodeLsStatusInMsgFrames=wfAppnNodeLsStatusInMsgFrames, wfAppnNnTgFROwner=wfAppnNnTgFROwner, wfAppnDlurDlusRcvActlus=wfAppnDlurDlusRcvActlus, wfAppnNnTgFRNum=wfAppnNnTgFRNum, wfAppnNodeRtpConnectionGapsDetected=wfAppnNodeRtpConnectionGapsDetected, wfAppnNodeLsDelay=wfAppnNodeLsDelay, wfAppnNodeIsrSessionSecSendFrames=wfAppnNodeIsrSessionSecSendFrames, wfAppnLocalThisNode=wfAppnLocalThisNode, wfAppnNodePortImplicitConnCost=wfAppnNodePortImplicitConnCost, wfAppnNodeLsStatusDeactCause=wfAppnNodeLsStatusDeactCause, wfAppnNodeEndptSessionCos=wfAppnNodeEndptSessionCos, wfAppnNodeNnTreeUpdate=wfAppnNodeNnTreeUpdate, wfAppnNnNodeCentralDirectory=wfAppnNnNodeCentralDirectory, wfAppnCosNameEntry=wfAppnCosNameEntry, wfAppnNnTgDelay=wfAppnNnTgDelay)
mibBuilder.exportSymbols("Wellfleet-APPN-MIB", wfAppnNodeIsrSessionSecMaxSendPacing=wfAppnNodeIsrSessionSecMaxSendPacing, wfAppnNodeTraceFile=wfAppnNodeTraceFile, wfAppnNodeLsStatusUsr2=wfAppnNodeLsStatusUsr2, wfAppnNodeIsrSessionEntry=wfAppnNodeIsrSessionEntry, wfAppnNodeRtpConnectionRcvBytes=wfAppnNodeRtpConnectionRcvBytes, wfAppnTpPingEntry=wfAppnTpPingEntry, wfAppnNodeDlcType=wfAppnNodeDlcType, wfAppnNodeMemoryCriticalThreshold=wfAppnNodeMemoryCriticalThreshold, wfAppnNodeEndptSessionCurSendPacing=wfAppnNodeEndptSessionCurSendPacing, wfAppnNnTgFRFrsn=wfAppnNnTgFRFrsn, wfAppnNodeTotalAvailableMemory=wfAppnNodeTotalAvailableMemory, wfAppnPathSwitch=wfAppnPathSwitch, wfAppnNodeLsSolicitSscpSessionsDisable=wfAppnNodeLsSolicitSscpSessionsDisable, wfAppnNodeCpName=wfAppnNodeCpName, wfAppnNodeNnIsr=wfAppnNodeNnIsr, wfAppnLocalTgEffCap=wfAppnLocalTgEffCap, wfAppnNodeLsStatusInScFrames=wfAppnNodeLsStatusInScFrames, wfAppnDirDefineParentName=wfAppnDirDefineParentName, wfAppnNodeNnRouteAddResist=wfAppnNodeNnRouteAddResist, wfAppnDlurDlusEntry=wfAppnDlurDlusEntry, wfAppnNnNodeFrsn=wfAppnNnNodeFrsn, wfAppnNodeLsTable=wfAppnNodeLsTable, wfAppnNnTgTopologyEntry=wfAppnNnTgTopologyEntry, wfAppnDlurDlusSentSscpLuMus=wfAppnDlurDlusSentSscpLuMus, wfAppnTpTunnelState=wfAppnTpTunnelState, wfAppnCosTgRowUsr2Min=wfAppnCosTgRowUsr2Min, wfAppnNodeCnFqName=wfAppnNodeCnFqName, wfAppnNodePortName=wfAppnNodePortName, wfAppnNodeService=wfAppnNodeService, wfAppnNnTgTopologyTable=wfAppnNnTgTopologyTable, wfAppnNodePortImplicitLimResource=wfAppnNodePortImplicitLimResource, wfAppnCosModeCosName=wfAppnCosModeCosName, wfAppnNodeIsrSessionPriSendRuSize=wfAppnNodeIsrSessionPriSendRuSize, wfAppnNnNodeRtpTower=wfAppnNnNodeRtpTower, wfAppnLocalTgByteCost=wfAppnLocalTgByteCost, wfAppnTpPingIndex=wfAppnTpPingIndex, wfAppnTpPingState=wfAppnTpPingState, wfAppnNnTgOperational=wfAppnNnTgOperational, wfAppnDirDefineResourceName=wfAppnDirDefineResourceName, wfAppnNnTgDlcData=wfAppnNnTgDlcData, wfAppnNodeIsrSessionTable=wfAppnNodeIsrSessionTable, wfAppnCosModeName=wfAppnCosModeName, wfAppnNodePortDynLsBadXids=wfAppnNodePortDynLsBadXids, wfAppnNodeIsrSessionSecRcvRuSize=wfAppnNodeIsrSessionSecRcvRuSize, wfAppnLocalNnIsr=wfAppnLocalNnIsr, wfAppnCosTgRowDelayMin=wfAppnCosTgRowDelayMin, wfAppnNnTopology=wfAppnNnTopology, wfAppnNodeRtpConnectionRcvInvalidSnaFrames=wfAppnNodeRtpConnectionRcvInvalidSnaFrames, wfAppnDlurPuName=wfAppnDlurPuName, wfAppnNodeAdaptiveBindPacing=wfAppnNodeAdaptiveBindPacing, wfAppnNodeEndptSessionPolarity=wfAppnNodeEndptSessionPolarity, wfAppnLocalNodeType=wfAppnLocalNodeType, wfAppnNodeLsByteCost=wfAppnNodeLsByteCost, wfAppnTpPingMaxTime=wfAppnTpPingMaxTime, wfAppnNodePortImplicitCpSessions=wfAppnNodePortImplicitCpSessions, wfAppnNodeRtpConnectionSendSessionControlFrames=wfAppnNodeRtpConnectionSendSessionControlFrames, wfAppnLocalNnGateway=wfAppnLocalNnGateway, wfAppnNnTgRtpTower=wfAppnNnTgRtpTower, wfAppnNodeNnCentralDirectory=wfAppnNodeNnCentralDirectory, wfAppnNodePortDelete=wfAppnNodePortDelete, wfAppnTpPingConsecutiveSends=wfAppnTpPingConsecutiveSends, wfAppnNnNodeFRQuiescing=wfAppnNnNodeFRQuiescing, wfAppnLocalTgUsr1=wfAppnLocalTgUsr1, wfAppnNodeLsEntry=wfAppnNodeLsEntry, wfAppnDlurDlusRcvSscpLuMus=wfAppnDlurDlusRcvSscpLuMus, wfAppnNodeLsStatusCpCpSession=wfAppnNodeLsStatusCpCpSession, wfAppnNodeLsStatusCurrentDelay=wfAppnNodeLsStatusCurrentDelay, wfAppnNodeNnMaxLocates=wfAppnNodeNnMaxLocates, wfAppnNnNodeEntryTimeLeft=wfAppnNnNodeEntryTimeLeft, wfAppnCosTgRowUsr2Max=wfAppnCosTgRowUsr2Max, wfAppnDirRegEntries=wfAppnDirRegEntries, wfAppnNodeLsStatusEntry=wfAppnNodeLsStatusEntry, wfAppnNnNodeFRRsn=wfAppnNnNodeFRRsn, wfAppnNodeRtpConnectionEntry=wfAppnNodeRtpConnectionEntry, wfAppnNnTopoTgStateUpdates=wfAppnNnTopoTgStateUpdates, wfAppnLocalTgConnCost=wfAppnLocalTgConnCost, wfAppnDlurLuTable=wfAppnDlurLuTable, wfAppnNodeDlcCct=wfAppnNodeDlcCct, wfAppnNnTgFROperational=wfAppnNnTgFROperational, wfAppnNodeIsrSessionPriSidl=wfAppnNodeIsrSessionPriSidl, wfAppnNodeLsStatusBadXids=wfAppnNodeLsStatusBadXids, wfAppnNodeRtpConnectionSendBytes=wfAppnNodeRtpConnectionSendBytes, wfAppnNodeCnDelay=wfAppnNodeCnDelay, wfAppnNodeLsStatusBlockNum=wfAppnNodeLsStatusBlockNum, wfAppnNodeEndptSessionPcid=wfAppnNodeEndptSessionPcid, wfAppnTpTunnelModeName=wfAppnTpTunnelModeName, wfAppnNodeEndptSessionMaxSendBtuSize=wfAppnNodeEndptSessionMaxSendBtuSize, wfAppnLocalTgDelay=wfAppnLocalTgDelay, wfAppnNnTopoTgEqualRsns=wfAppnNnTopoTgEqualRsns, wfAppnNnNodeFRIsrDepleted=wfAppnNnNodeFRIsrDepleted, wfAppnNodeNegotLs=wfAppnNodeNegotLs, wfAppnLocalNnQuiescing=wfAppnLocalNnQuiescing, wfAppnCosNodeRowResistMin=wfAppnCosNodeRowResistMin, wfAppnCosTgRowIndex=wfAppnCosTgRowIndex, wfAppnNodeIsrSessionPriLsName=wfAppnNodeIsrSessionPriLsName, wfAppnNodeNnStoreDlurRscvsDisable=wfAppnNodeNnStoreDlurRscvsDisable, wfAppnNnTgModemClass=wfAppnNnTgModemClass, wfAppnNodeLsStatusEffCap=wfAppnNodeLsStatusEffCap, wfAppnTpPingEchoDisable=wfAppnTpPingEchoDisable, wfAppnNnTgFRDestVirtual=wfAppnNnTgFRDestVirtual, wfAppnDlurDlusSentActluRsps=wfAppnDlurDlusSentActluRsps, wfAppnNodeCnPortPortName=wfAppnNodeCnPortPortName, wfAppnNodeLsStatusAnrLabel=wfAppnNodeLsStatusAnrLabel, wfAppnNodePortOutLinkActLim=wfAppnNodePortOutLinkActLim, wfAppnDirLocation=wfAppnDirLocation, wfAppnNodeEndptSessionSidl=wfAppnNodeEndptSessionSidl, wfAppnNodeLsLinkData=wfAppnNodeLsLinkData, wfAppnNodeEndptSessionRcvFmdFrames=wfAppnNodeEndptSessionRcvFmdFrames, wfAppnNodeLsStatusOutScFrames=wfAppnNodeLsStatusOutScFrames, wfAppnNodeIsrSessionPriCurSendPacing=wfAppnNodeIsrSessionPriCurSendPacing, wfAppnNodeLsStatusInMsgBytes=wfAppnNodeLsStatusInMsgBytes, wfAppnNnTgFrsn=wfAppnNnTgFrsn, wfAppnNnTgDest=wfAppnNnTgDest, wfAppnDlurDlusRcvActpus=wfAppnDlurDlusRcvActpus, wfAppnNnTgFRUsr1=wfAppnNnTgFRUsr1, wfAppnNnTgNum=wfAppnNnTgNum, wfAppnDirOutLocates=wfAppnDirOutLocates, wfAppnNnTopoNodeBadHighRsns=wfAppnNnTopoNodeBadHighRsns, wfAppnNnTgFRDest=wfAppnNnTgFRDest, wfAppnDirServerName=wfAppnDirServerName, wfAppnNnTgFRDelay=wfAppnNnTgFRDelay, wfAppnTpPingAllocTime=wfAppnTpPingAllocTime, wfAppnNodeDlcData=wfAppnNodeDlcData, wfAppnNodeLsDlurDisable=wfAppnNodeLsDlurDisable, wfAppnTpPingPartnerVersion=wfAppnTpPingPartnerVersion, wfAppnNodeLsStatusMigration=wfAppnNodeLsStatusMigration, wfAppnNodeDisable=wfAppnNodeDisable, wfAppnNodeLsStatusTargetPacingCount=wfAppnNodeLsStatusTargetPacingCount, wfAppnNnTgConnCost=wfAppnNnTgConnCost, wfAppnNnTgUsr1=wfAppnNnTgUsr1, wfAppnNodeEndptSessionMaxRcvPacing=wfAppnNodeEndptSessionMaxRcvPacing, wfAppnNodePortDlcName=wfAppnNodePortDlcName, wfAppnNnNodeQuiescing=wfAppnNnNodeQuiescing, wfAppnNnTopoNodePurges=wfAppnNnTopoNodePurges, wfAppnNnNodeFRHprBase=wfAppnNnNodeFRHprBase, wfAppnTpTunnelDisable=wfAppnTpTunnelDisable, wfAppnNodeIsrSessionPriMaxRcvPacing=wfAppnNodeIsrSessionPriMaxRcvPacing, wfAppnDirLocateOutstands=wfAppnDirLocateOutstands)
