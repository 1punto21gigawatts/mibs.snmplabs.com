#
# PySNMP MIB module CXLlcLanConv-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXLlcLanConv-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
cxLlcLanConv, Alias, SapIndex = mibBuilder.importSymbols("CXProduct-SMI", "cxLlcLanConv", "Alias", "SapIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, TimeTicks, NotificationType, MibIdentifier, Unsigned32, Gauge32, iso, ModuleIdentity, Counter32, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "TimeTicks", "NotificationType", "MibIdentifier", "Unsigned32", "Gauge32", "iso", "ModuleIdentity", "Counter32", "Counter64", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

llcLanSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10), )
if mibBuilder.loadTexts: llcLanSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapTable.setDescription('A table containing configuration information about each LLC-2 LAN Service Access Point.')
llcLanSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1), ).setIndexNames((0, "CXLlcLanConv-MIB", "llcLanSapNumber"))
if mibBuilder.loadTexts: llcLanSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapEntry.setDescription('The parameters for a particular LLC-2 LAN Service Access Point.')
llcLanSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcLanSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapNumber.setDescription('Identifies the Service Access Point by a numerical value. Values are unique per Service Access Point.')
llcLanSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcLanSapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapRowStatus.setDescription("Indicates whether the particular Service Access Point is configured within the MIB. Service Access Point entries (rows) may be created by setting this object value to 'valid', or deleted by changing this object value to 'invalid'. Whether or not the row actually disappears is left to the implementation so this object may actually read as 'invalid' for some arbitrary length of time.")
llcLanSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcLanSapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapAlias.setDescription('Identifies the Service Access Point by a textual name. Names are unique per Service Access Point.')
llcLanSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcLanSapCompanionAlias.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapCompanionAlias.setDescription('Identifies the LAN Service Access Point which provides LAN services for this LLC-2 LAN SAP. Different LLC-2 SAPs may use the same Companion Alias provided that they use a different llcLanSapRemoteAddress or llcLanSapSrcLlcSap/ llcLanSapDstLlcSap pair.')
llcLanSapRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcLanSapRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapRemoteAddress.setDescription('This object specifies the MAC address of the remote LAN station to which the LLC-2 LAN connection will be established.')
llcLanSapSrcLlcSap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcLanSapSrcLlcSap.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapSrcLlcSap.setDescription('Identifies the source LLC-2 SAP address associated with the connection. Only even values are allowed.')
llcLanSapDstLlcSap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcLanSapDstLlcSap.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapDstLlcSap.setDescription('Identifies the destination LLC SAP address associated with the connection. Only even values are allowed.')
llcLanSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearStats", 1), ("releaseRemoteAddress", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: llcLanSapControl.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapControl.setDescription("Control associated with the specified service access point. When set to 'clearStats, statistics counters are reset to zero.")
llcLanSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcLanSapState.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapState.setDescription("Indicates the current SAP state. This object is a bit map which represents the different SAP status: Type of Status llcLanSapState Object Value Hex Decimal SAP Offline 0x01 001 SAP Unbound from LAPBD 0x02 002 SAP Bound from LAPBD 0x04 004 SAP Connected from LAPBD 0x08 008 SAP Binding to LAN Driver 0x40 064 SAP Bound to LAN Driver 0x80 128 In data transfer mode, the value of this object should be: 128 + 8 + 4 = 140 The SAP is 'offLine' if it is not configured at the layer (i.e. just added to the configuration).")
llcLanSapTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcLanSapTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapTxFrames.setDescription('Indicates the number of frames sent from this Service Access Point.')
llcLanSapRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcLanSapRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapRxFrames.setDescription('Indicates the number of frames received at this Service Access Point.')
llcLanSapTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcLanSapTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapTxOctets.setDescription('Indicates the number of octets sent from this Service Access Point.')
llcLanSapRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llcLanSapRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapRxOctets.setDescription('Indicates the number of octets received at this Service Access Point.')
llcLanSapLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 19), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcLanSapLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapLocalAddress.setDescription('This object specifies the (Virtual/Real) MAC address of the local LAN port to which the LLC-2 layer will bind. LLC-2 will send the value of this object as Virtual MAC Address to LAN driver in the BindReq message ONLY if it is NOT 0x00000000. The final value of this object will be the MAC address provided by lower local LAN driver in BindConfirm message. Default value: 0x0000000000000000.')
llcLanSapPhysicalInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("tokenring", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llcLanSapPhysicalInterface.setStatus('mandatory')
if mibBuilder.loadTexts: llcLanSapPhysicalInterface.setDescription('Identifies the type of physical interface that this Service Access Point uses. Options ethernet (1) tokenring (2)')
cxLlcLanConvMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 47, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxLlcLanConvMibLevel.setStatus('mandatory')
if mibBuilder.loadTexts: cxLlcLanConvMibLevel.setDescription('Used to determine current MIB module release supported by the agent. Object is in decimal.')
mibBuilder.exportSymbols("CXLlcLanConv-MIB", llcLanSapSrcLlcSap=llcLanSapSrcLlcSap, llcLanSapDstLlcSap=llcLanSapDstLlcSap, llcLanSapTxOctets=llcLanSapTxOctets, llcLanSapLocalAddress=llcLanSapLocalAddress, llcLanSapAlias=llcLanSapAlias, llcLanSapRowStatus=llcLanSapRowStatus, llcLanSapTable=llcLanSapTable, llcLanSapCompanionAlias=llcLanSapCompanionAlias, llcLanSapTxFrames=llcLanSapTxFrames, llcLanSapNumber=llcLanSapNumber, llcLanSapControl=llcLanSapControl, llcLanSapRxFrames=llcLanSapRxFrames, llcLanSapState=llcLanSapState, MacAddress=MacAddress, llcLanSapRxOctets=llcLanSapRxOctets, llcLanSapRemoteAddress=llcLanSapRemoteAddress, llcLanSapPhysicalInterface=llcLanSapPhysicalInterface, cxLlcLanConvMibLevel=cxLlcLanConvMibLevel, llcLanSapEntry=llcLanSapEntry)
