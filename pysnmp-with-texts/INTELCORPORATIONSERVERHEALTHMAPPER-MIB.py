#
# PySNMP MIB module INTELCORPORATIONSERVERHEALTHMAPPER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATIONSERVERHEALTHMAPPER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:55:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, ObjectIdentity, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Bits, TimeTicks, Counter32, Gauge32, iso, Unsigned32, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "ObjectIdentity", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Bits", "TimeTicks", "Counter32", "Gauge32", "iso", "Unsigned32", "Integer32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiInteger(Integer32):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2))
server_management = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 10)).setLabel("server-management")
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 10, 7))
tServerHealthContributionTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 12), )
if mibBuilder.loadTexts: tServerHealthContributionTable.setStatus('mandatory')
if mibBuilder.loadTexts: tServerHealthContributionTable.setDescription('The groups that may contribute to the decision of the server health')
eServerHealthContributionTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 12, 1), ).setIndexNames((0, "INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a2ContributionTableIndex"))
if mibBuilder.loadTexts: eServerHealthContributionTable.setStatus('mandatory')
if mibBuilder.loadTexts: eServerHealthContributionTable.setDescription('')
a2ContributionTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 12, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ContributionTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a2ContributionTableIndex.setDescription('The index to identify each entry in the Server Health Contributi n table ')
a2Component = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 12, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Component.setStatus('mandatory')
if mibBuilder.loadTexts: a2Component.setDescription('the contributing component name')
a2Group = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 12, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Group.setStatus('mandatory')
if mibBuilder.loadTexts: a2Group.setDescription('The class name of the group that may contribute to the decision of the server health')
a2StatusStore = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vLocal", 0), ("vOperationalState", 1), ("vErrorControl", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2StatusStore.setStatus('mandatory')
if mibBuilder.loadTexts: a2StatusStore.setDescription('The flag to indicate where the health status attribute is stored. The health status for the instance of this group can be stored in one of the following groups: 1. locally in the same group; 2. in the operational state group Current Error Status attribute for DMTF group; 3. in the Error Control group Error Status attribute for Intel group. ')
a2LocalIndexAttributeIdToStoreGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 12, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2LocalIndexAttributeIdToStoreGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a2LocalIndexAttributeIdToStoreGroup.setDescription("The id of the contributing group's attribute that stores the instance of the Operational State group table or the Error Control Group table. This instance stores the health status.If the health status is stored locally in the contributing group, this value will be set to zero ")
a2HealthAttributeId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 12, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2HealthAttributeId.setStatus('mandatory')
if mibBuilder.loadTexts: a2HealthAttributeId.setDescription('The id of the attribute to check for health. This attribute locates in the group that is indicated in the Status Store attribute. If this is a local attribute, it should have the same type as the the operational status group Current Error Status attribute. In this case, the attribute value will have a one to one mapping to the health status type. If not the same type, the value of this attribute is 0. If this is the Error Control group Error Status attribute, the Health Agent will map OK value to OK s')
a2Contribution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2Contribution.setStatus('mandatory')
if mibBuilder.loadTexts: a2Contribution.setDescription('Is this group going to contribute to the decision of the server health? 1 for Yes, 0 for No ')
a2UpdateThroughPolling = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2UpdateThroughPolling.setStatus('mandatory')
if mibBuilder.loadTexts: a2UpdateThroughPolling.setDescription('This attribute is a boolean indicating if the Server Health Agent should update the health status of this group through polling in addition to DMI indication. If not through polling, the updatewill be done through DMI indication only. The value 1 means Yes, 0 means No. By default, the polling is turned off.')
tServerHealthFilterTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 13), )
if mibBuilder.loadTexts: tServerHealthFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: tServerHealthFilterTable.setDescription('the (component, group) that will not contribute to the server health. ')
eServerHealthFilterTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 13, 1), ).setIndexNames((0, "INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a3FilterTableIndex"))
if mibBuilder.loadTexts: eServerHealthFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: eServerHealthFilterTable.setDescription('')
a3FilterTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 13, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3FilterTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3FilterTableIndex.setDescription('The index to identify each entry in the Server Health Filter table ')
a3Component = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 13, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Component.setStatus('mandatory')
if mibBuilder.loadTexts: a3Component.setDescription("the filter's component name")
a3Group = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 13, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Group.setStatus('mandatory')
if mibBuilder.loadTexts: a3Group.setDescription("the filter's group class string. If the value is *, all groups of this component will be filtered.")
tServerHealthStatus = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 14), )
if mibBuilder.loadTexts: tServerHealthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tServerHealthStatus.setDescription('Status of server wellness.')
eServerHealthStatus = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 14, 1), ).setIndexNames((0, "INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eServerHealthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: eServerHealthStatus.setDescription('')
a4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Status.setStatus('mandatory')
if mibBuilder.loadTexts: a4Status.setDescription("This attribute indicates whether the server is healthy or not. Its type is an enumeration. For application which doesn't support DMI enumeration type, it can use the next attribute, Status in Integer, which stores the status in integer form")
a4StatusInInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 14, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4StatusInInteger.setStatus('mandatory')
if mibBuilder.loadTexts: a4StatusInInteger.setDescription("This attribute indicates whether the server is healthy or not. Since this instrumentation needs to support LDSM DCA which doesn't support enum type, the attribute type here is integer with the following meaning: 0x001 - Other 0x002 - Unknown 0x004 - OK 0x008 - Non-Critical 0x010 - Critical 0x020 - Non-Recoverable ")
a4PollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 14, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a4PollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: a4PollInterval.setDescription("This attribute is the Server Health Agent's polling interval of those CI group's status when the Update Through Polling attribute in the Server Health Contribution group is set to true for those groups. The unit of this attribute is in minute ")
tEventGenerationForServerHealthStatus = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 100), )
if mibBuilder.loadTexts: tEventGenerationForServerHealthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForServerHealthStatus.setDescription('')
eEventGenerationForServerHealthStatus = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 100, 1), ).setIndexNames((0, "INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForServerHealthStatus.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForServerHealthStatus.setDescription('')
a5EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8, 16, 32, 48, 64))).clone(namedValues=NamedValues(("vServerOk", 4), ("vServerNon-critical", 8), ("vServerCritical", 16), ("vServerNon-recoverable", 32), ("vServerHealthDetailChanged", 48), ("vServerHealthDetailRefresh", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a5EventType.setDescription('The type of event that has occurred.')
a5EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a5EventSeverity.setDescription('The severity of this event.')
a5IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a5IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a5IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a5IsEventState_based.setDescription('The value of this attributedetermines whether the Event being reportedis a state-based Event or not. If the valueof this attribute is TRUE then the Event isstate-based. Otherwise the Event is notstate-based.')
a5EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 100, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a5EventStateKey.setDescription("A unique, single integer key into the EventState group if this is a state-based Event.If this is not a state-based Event then thisthis attribute's value is not defined.")
a5AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 100, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a5AssociatedGroup.setDescription('The class name of the group that is associatedwith the events defined in this EventGeneration group.')
a5EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 100, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a5EventSystem.setDescription('The major functional aspect of the productcausing the fault.')
a5EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 100, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a5EventSubsystem.setDescription('The minor functional aspect of the productcausing the fault.')
a5IsInstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 100, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5IsInstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a5IsInstanceDataPresent.setDescription('Indicates whether the second event block containsinstance-specif c data.')
a5EventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 100, 1, 10), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5EventMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a5EventMessage.setDescription('Auxillary information releated to the eventThis text contains the name of the Probe')
tServerHealthDetail = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 15), )
if mibBuilder.loadTexts: tServerHealthDetail.setStatus('mandatory')
if mibBuilder.loadTexts: tServerHealthDetail.setDescription('the health detail of server. This group consists of a table of row with information on the associated unhealthy group, instance, associated attribute, and status of that attribute')
eServerHealthDetail = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 15, 1), ).setIndexNames((0, "INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a6HealthInstanceIndex"))
if mibBuilder.loadTexts: eServerHealthDetail.setStatus('mandatory')
if mibBuilder.loadTexts: eServerHealthDetail.setDescription('')
a6HealthInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 15, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6HealthInstanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a6HealthInstanceIndex.setDescription('The index to identify each entry in the Server Health Detail table ')
a6Component = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 15, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6Component.setStatus('mandatory')
if mibBuilder.loadTexts: a6Component.setDescription('The name of the unhealthy component that is associated')
a6Group = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 15, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6Group.setStatus('mandatory')
if mibBuilder.loadTexts: a6Group.setDescription('The class name of the unhealthy group that is associated')
a6InstancePath = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 15, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6InstancePath.setStatus('mandatory')
if mibBuilder.loadTexts: a6InstancePath.setDescription("The path to uniquely identifies the unhealthy instance that cause the error. The format for non scalar group is: componentID|groupID|attribu eID1=attributeValue+...+attributeIDn=attributeValue where attributeID1,...,a tributeIDn are the attributes that form the key to the group. For example, to uniquely identify the baseboard component, Physical Container Global Table group, Container Index attribute with value 1, the string to represent this instance is 7|64|9='1' For example, to uniquely identify ")
a6LastEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 15, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6LastEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a6LastEventType.setDescription('The type of last event that causes the unhealthy condition. The attribute type value zero means UNKONWN')
a6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6Status.setStatus('mandatory')
if mibBuilder.loadTexts: a6Status.setDescription('This attribute indicates the status of this unhealthy instance. ')
tServerHealthStatusTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 14, 0))
notification1ForServerHealthStatus = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 14, 0, 4)).setObjects(("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventType"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSeverity"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5IsEventState_based"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventStateKey"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5AssociatedGroup"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSystem"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSubsystem"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5IsInstanceDataPresent"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventMessage"))
if mibBuilder.loadTexts: notification1ForServerHealthStatus.setStatus('current')
if mibBuilder.loadTexts: notification1ForServerHealthStatus.setDescription('Server OK')
if mibBuilder.loadTexts: notification1ForServerHealthStatus.setReference("'Intel|Server Health Status|001' 4")
notification2ForServerHealthStatus = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 14, 0, 8)).setObjects(("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventType"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSeverity"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5IsEventState_based"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventStateKey"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5AssociatedGroup"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSystem"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSubsystem"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5IsInstanceDataPresent"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventMessage"))
if mibBuilder.loadTexts: notification2ForServerHealthStatus.setStatus('current')
if mibBuilder.loadTexts: notification2ForServerHealthStatus.setDescription('Server Non-Critical')
if mibBuilder.loadTexts: notification2ForServerHealthStatus.setReference("'Intel|Server Health Status|001' 8")
notification3ForServerHealthStatus = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 14, 0, 16)).setObjects(("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventType"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSeverity"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5IsEventState_based"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventStateKey"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5AssociatedGroup"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSystem"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSubsystem"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5IsInstanceDataPresent"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventMessage"))
if mibBuilder.loadTexts: notification3ForServerHealthStatus.setStatus('current')
if mibBuilder.loadTexts: notification3ForServerHealthStatus.setDescription('Server Critical')
if mibBuilder.loadTexts: notification3ForServerHealthStatus.setReference("'Intel|Server Health Status|001' 16")
notification4ForServerHealthStatus = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 14, 0, 32)).setObjects(("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventType"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSeverity"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5IsEventState_based"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventStateKey"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5AssociatedGroup"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSystem"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSubsystem"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5IsInstanceDataPresent"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventMessage"))
if mibBuilder.loadTexts: notification4ForServerHealthStatus.setStatus('current')
if mibBuilder.loadTexts: notification4ForServerHealthStatus.setDescription('Server Non-Recoverable')
if mibBuilder.loadTexts: notification4ForServerHealthStatus.setReference("'Intel|Server Health Status|001' 32")
notification5ForServerHealthStatus = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 14, 0, 48)).setObjects(("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventType"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSeverity"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5IsEventState_based"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventStateKey"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5AssociatedGroup"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSystem"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSubsystem"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5IsInstanceDataPresent"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventMessage"))
if mibBuilder.loadTexts: notification5ForServerHealthStatus.setStatus('current')
if mibBuilder.loadTexts: notification5ForServerHealthStatus.setDescription('Server Health Detail Changed')
if mibBuilder.loadTexts: notification5ForServerHealthStatus.setReference("'Intel|Server Health Status|001' 48")
notification6ForServerHealthStatus = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 10, 7, 14, 0, 64)).setObjects(("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventType"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSeverity"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5IsEventState_based"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventStateKey"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5AssociatedGroup"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSystem"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventSubsystem"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5IsInstanceDataPresent"), ("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", "a5EventMessage"))
if mibBuilder.loadTexts: notification6ForServerHealthStatus.setStatus('current')
if mibBuilder.loadTexts: notification6ForServerHealthStatus.setDescription('Server Health Detail Refresh')
if mibBuilder.loadTexts: notification6ForServerHealthStatus.setReference("'Intel|Server Health Status|001' 64")
mibBuilder.exportSymbols("INTELCORPORATIONSERVERHEALTHMAPPER-MIB", dmtfGroups=dmtfGroups, eServerHealthStatus=eServerHealthStatus, a5EventStateKey=a5EventStateKey, a3Group=a3Group, tServerHealthFilterTable=tServerHealthFilterTable, a5EventSystem=a5EventSystem, tServerHealthStatus=tServerHealthStatus, eServerHealthDetail=eServerHealthDetail, a2Component=a2Component, a2LocalIndexAttributeIdToStoreGroup=a2LocalIndexAttributeIdToStoreGroup, notification2ForServerHealthStatus=notification2ForServerHealthStatus, tServerHealthDetail=tServerHealthDetail, a5AssociatedGroup=a5AssociatedGroup, notification1ForServerHealthStatus=notification1ForServerHealthStatus, notification4ForServerHealthStatus=notification4ForServerHealthStatus, products=products, a6HealthInstanceIndex=a6HealthInstanceIndex, a3Component=a3Component, a4StatusInInteger=a4StatusInInteger, server_management=server_management, tEventGenerationForServerHealthStatus=tEventGenerationForServerHealthStatus, DmiInteger=DmiInteger, a2StatusStore=a2StatusStore, a5EventSeverity=a5EventSeverity, a4Status=a4Status, intel=intel, a3FilterTableIndex=a3FilterTableIndex, a2ContributionTableIndex=a2ContributionTableIndex, a4PollInterval=a4PollInterval, a5EventSubsystem=a5EventSubsystem, a6Status=a6Status, a2UpdateThroughPolling=a2UpdateThroughPolling, eServerHealthFilterTable=eServerHealthFilterTable, DmiDisplaystring=DmiDisplaystring, a6LastEventType=a6LastEventType, a6InstancePath=a6InstancePath, eEventGenerationForServerHealthStatus=eEventGenerationForServerHealthStatus, a6Component=a6Component, a6Group=a6Group, notification6ForServerHealthStatus=notification6ForServerHealthStatus, a2HealthAttributeId=a2HealthAttributeId, a2Contribution=a2Contribution, a5IsInstanceDataPresent=a5IsInstanceDataPresent, notification5ForServerHealthStatus=notification5ForServerHealthStatus, a5IsEventState_based=a5IsEventState_based, DmiDateX=DmiDateX, a2Group=a2Group, eServerHealthContributionTable=eServerHealthContributionTable, notification3ForServerHealthStatus=notification3ForServerHealthStatus, DmiComponentIndex=DmiComponentIndex, tServerHealthStatusTraps=tServerHealthStatusTraps, a5EventMessage=a5EventMessage, tServerHealthContributionTable=tServerHealthContributionTable, a5EventType=a5EventType)
