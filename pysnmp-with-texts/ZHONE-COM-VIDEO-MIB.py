#
# PySNMP MIB module ZHONE-COM-VIDEO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-COM-VIDEO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:47:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ifIndex, ifPhysAddress = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifPhysAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, IpAddress, ModuleIdentity, iso, MibIdentifier, NotificationType, Gauge32, ObjectIdentity, Counter32, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "IpAddress", "ModuleIdentity", "iso", "MibIdentifier", "NotificationType", "Gauge32", "ObjectIdentity", "Counter32", "Counter64", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
zhoneModules, zhoneVideo = mibBuilder.importSymbols("Zhone", "zhoneModules", "zhoneVideo")
ZhoneRowStatus, = mibBuilder.importSymbols("Zhone-TC", "ZhoneRowStatus")
comVideo = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 78))
comVideo.setRevisions(('2003-10-28 11:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: comVideo.setRevisionsDescriptions(('V01.00.00 - Initial Release',))
if mibBuilder.loadTexts: comVideo.setLastUpdated('200310281012Z')
if mibBuilder.loadTexts: comVideo.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: comVideo.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: comVideo.setDescription('Zhone Video MIB. ')
videoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 8, 1)).setObjects(("ZHONE-COM-VIDEO-MIB", "videoInterfaceRowStatus"), ("ZHONE-COM-VIDEO-MIB", "videoInterfaceType"), ("ZHONE-COM-VIDEO-MIB", "videoMulticastSourceRowStatus"), ("ZHONE-COM-VIDEO-MIB", "videoMulticastSourceIpAddress"), ("ZHONE-COM-VIDEO-MIB", "videoMulticastSourceNetMask"), ("ZHONE-COM-VIDEO-MIB", "videoMulticastSourceIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    videoGroup = videoGroup.setStatus('current')
if mibBuilder.loadTexts: videoGroup.setDescription('Description.')
videoInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 8, 2), )
if mibBuilder.loadTexts: videoInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: videoInterfaceTable.setDescription('Used to provision management, stream and client interfaces. This table resides on the Zhone Residential Gateway (ZRG) and is a CPE device. Each entry in this table is indexed by an IP interface, and subsequently points to an IP interface record. The videoInterfaceType can be either management, stream or client, and depending upon which it is, various fields within the IP interface are used as follows: managment: ip address. stream: ip address, netmask, vpi, vci. client: ip address, netmask. Management interface is used to send an IGMP request from the CPE to the upstream head-end video gateway or other device which interacts with the video gateway. Stream interface is used to associate an ip address to a vpi/vci (VCL). Client interface is used to define the netmask for a given ip address.')
videoInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: videoInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: videoInterfaceEntry.setDescription('See Table description above.')
videoInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 8, 2, 1, 1), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: videoInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: videoInterfaceRowStatus.setDescription('Row Status used to create, delete or modify a row.')
videoInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("management", 1), ("stream", 2), ("client", 3))).clone('management')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: videoInterfaceType.setStatus('current')
if mibBuilder.loadTexts: videoInterfaceType.setDescription('Defines which type of video interface this row represents. Either management, stream or client.')
videoMulticastSourceTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 8, 3), )
if mibBuilder.loadTexts: videoMulticastSourceTable.setStatus('current')
if mibBuilder.loadTexts: videoMulticastSourceTable.setDescription('Used to provision multicast source addresses used by the Zhone Residential Gateway.')
videoMulticastSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 8, 3, 1), ).setIndexNames((0, "ZHONE-COM-VIDEO-MIB", "videoMulticastSourceIndex"))
if mibBuilder.loadTexts: videoMulticastSourceEntry.setStatus('current')
if mibBuilder.loadTexts: videoMulticastSourceEntry.setDescription('See Table description above.')
videoMulticastSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: videoMulticastSourceIndex.setStatus('current')
if mibBuilder.loadTexts: videoMulticastSourceIndex.setDescription('Index value for this entry. videoMulticastSourceIndexNext must be queried first, and the result used to create an entry in this table.')
videoMulticastSourceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 8, 3, 1, 2), ZhoneRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoMulticastSourceRowStatus.setStatus('current')
if mibBuilder.loadTexts: videoMulticastSourceRowStatus.setDescription('Row Status used to create, delete or modify a row.')
videoMulticastSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 8, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoMulticastSourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: videoMulticastSourceIpAddress.setDescription('Multicast source address.')
videoMulticastSourceNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 8, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: videoMulticastSourceNetMask.setStatus('current')
if mibBuilder.loadTexts: videoMulticastSourceNetMask.setDescription('Multicast source netmask value.')
videoMulticastSourceIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoMulticastSourceIndexNext.setStatus('current')
if mibBuilder.loadTexts: videoMulticastSourceIndexNext.setDescription('This value is read in order to get the next available index to be used to create a new entry within the videoMulticastSourceTable.')
mibBuilder.exportSymbols("ZHONE-COM-VIDEO-MIB", videoMulticastSourceRowStatus=videoMulticastSourceRowStatus, videoMulticastSourceNetMask=videoMulticastSourceNetMask, videoMulticastSourceIndexNext=videoMulticastSourceIndexNext, videoInterfaceRowStatus=videoInterfaceRowStatus, videoInterfaceType=videoInterfaceType, videoInterfaceEntry=videoInterfaceEntry, PYSNMP_MODULE_ID=comVideo, comVideo=comVideo, videoGroup=videoGroup, videoMulticastSourceIndex=videoMulticastSourceIndex, videoMulticastSourceIpAddress=videoMulticastSourceIpAddress, videoMulticastSourceTable=videoMulticastSourceTable, videoInterfaceTable=videoInterfaceTable, videoMulticastSourceEntry=videoMulticastSourceEntry)
