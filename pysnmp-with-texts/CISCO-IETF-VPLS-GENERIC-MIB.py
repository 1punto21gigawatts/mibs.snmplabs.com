#
# PySNMP MIB module CISCO-IETF-VPLS-GENERIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-VPLS-GENERIC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:01:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
CpwVcIndexType, = mibBuilder.importSymbols("CISCO-IETF-PW-TC-MIB", "CpwVcIndexType")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Integer32, MibIdentifier, ObjectIdentity, IpAddress, Bits, Unsigned32, Counter64, Counter32, NotificationType, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "MibIdentifier", "ObjectIdentity", "IpAddress", "Bits", "Unsigned32", "Counter64", "Counter32", "NotificationType", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
TextualConvention, TruthValue, DisplayString, StorageType, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "StorageType", "RowStatus")
VPNIdOrZero, = mibBuilder.importSymbols("VPN-TC-STD-MIB", "VPNIdOrZero")
cvplsGenericMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 138))
cvplsGenericMIB.setRevisions(('2007-10-22 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cvplsGenericMIB.setRevisionsDescriptions(('Initial version of this MIB',))
if mibBuilder.loadTexts: cvplsGenericMIB.setLastUpdated('200710221200Z')
if mibBuilder.loadTexts: cvplsGenericMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: cvplsGenericMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-l2vpn@cisco.com')
if mibBuilder.loadTexts: cvplsGenericMIB.setDescription('This MIB module contains generic managed object definitions for Virtual Private LAN Services as in [L2VPN-VPLS-LDP] and [L2VPN-VPLS-BGP] This MIB module enables the use of any underlying Pseudo Wire network. This MIB is based on the following IETF document. http://www.ietf.org/internet-drafts/draft-ietf-l2vpn-vpls-mib-00.txt')
cvplsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 138, 0))
cvplsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 138, 1))
cvplsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 138, 2))
cvplsConfigIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvplsConfigIndexNext.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigIndexNext.setDescription('This object contains an appropriate value to be used for cvplsConfigIndex when creating entries in the cvplsConfigTable. The value 0 indicates that no unassigned entries are available. To obtain the value of cvplsConfigIndex for a new entry in the cvplsConfigTable, the manager issues a management protocol retrieval operation to obtain the current value of cvplsConfigIndex. After each retrieval operation, the agent should modify the value to reflect the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
cvplsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 2), )
if mibBuilder.loadTexts: cvplsConfigTable.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigTable.setDescription('This table specifies information for configuring and monitoring Virtual Private Lan Services(VPLS).')
cvplsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 2, 1), ).setIndexNames((0, "CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigIndex"))
if mibBuilder.loadTexts: cvplsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigEntry.setDescription('A row in this table represents a Virtual Private Lan Service(VPLS) in a packet network. It is indexed by cvplsConfigIndex, which uniquely identifies a single VPLS. A row is created by the operator or by the agent if a VPLS service is created by non-SNMP application or due to autodiscovery process. None of the read-create objects values can be changed when cvplsConfigRowStatus is in the active(1) state. Changes are allowed when the cvplsConfigRowStatus is in notInService(2) or notReady(3) states only. If the operator needs to change one of the values for an active row the cvplsConfigRowStatus should be first changed to notInService(2), the objects may be changed now, and later to active(1) in order to re-initiate the signaling process with the new values in effect.')
cvplsConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cvplsConfigIndex.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigIndex.setDescription('Unique index for the conceptual row identifying a VPLS service.')
cvplsConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvplsConfigName.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigName.setDescription('A textual name of the VPLS. If there is no local name, or this object is otherwise not applicable, then this object MUST contain a zero-length octet string.')
cvplsConfigDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 2, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvplsConfigDescr.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigDescr.setDescription('A textual string containing information about the VPLS service. If there is no information for this VPLS service, then this object MUST contain a zero-length octet string.')
cvplsConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvplsConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigAdminStatus.setDescription('The desired administrative state of the VPLS service. If the administrative status of the Vpls service is changed to enable then this service is able to utilize the pseudo wire to perform the tasks of a VPLS service. The testing(3) state indicates that no operational packets can be passed.')
cvplsConfigMacLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 2, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvplsConfigMacLearning.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigMacLearning.setDescription('This object specifies if MAC Learning is enabled in this service. If this object is true then Mac Learning is enabled. If false, then Mac Learning is disabled.')
cvplsConfigDiscardUnknownDest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvplsConfigDiscardUnknownDest.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigDiscardUnknownDest.setDescription("If the value of this object is 'true', then frames received with an unknown destination MAC are discarded in this VPLS. If 'false', then the packets are processed.")
cvplsConfigMacAging = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 2, 1, 8), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvplsConfigMacAging.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigMacAging.setDescription("If the value of this object is 'true' then the MAC aging process is enabled in this VPLS. If 'false', then the MAC aging process is disabled")
cvplsConfigFwdFullHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvplsConfigFwdFullHighWatermark.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigFwdFullHighWatermark.setDescription('This object specifies the utilization of the forwarding database for this VPLS instance at which the cvplsFwdFullAlarmRaised notification will be sent.')
cvplsConfigFwdFullLowWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvplsConfigFwdFullLowWatermark.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigFwdFullLowWatermark.setDescription('This object specifies the utilization of the forwarding database for this VPLS instance at which the cvplsFwdFullAlarmCleared notification will be sent.')
cvplsConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvplsConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigRowStatus.setDescription('For creating, modifying, and deleting this row. None of the read-create objects in the conceptual rows may be changed when this object is in the active(1) state.')
cvplsConfigMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 1518)).clone(1518)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvplsConfigMtu.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigMtu.setDescription('The value of this object specifies the MTU of this vpls instance.')
cvplsConfigVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 2, 1, 14), VPNIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvplsConfigVpnId.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigVpnId.setDescription('This object indicates the IEEE 802-1990 VPN ID of the associated VPLS service.')
cvplsConfigServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan", 1), ("ethernet", 2))).clone('vlan')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvplsConfigServiceType.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigServiceType.setDescription('The value of this object specifies the type of service emulated by this vpls instance.')
cvplsConfigStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 2, 1, 16), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvplsConfigStorageType.setStatus('current')
if mibBuilder.loadTexts: cvplsConfigStorageType.setDescription('This variable indicates the storage type for this row.')
cvplsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 3), )
if mibBuilder.loadTexts: cvplsStatusTable.setStatus('current')
if mibBuilder.loadTexts: cvplsStatusTable.setDescription('This table provides information for monitoring Virtual Private Lan Services(VPLS).')
cvplsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 3, 1), ).setIndexNames((0, "CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigIndex"))
if mibBuilder.loadTexts: cvplsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cvplsStatusEntry.setDescription('A row in this table represents a Virtual Private Lan Service(VPLS) in a packet network. It is indexed by cvplsConfigIndex, which uniquely identifies a single VPLS. A row in this table is automatically created by the agent when a VPLS service is configured.')
cvplsStatusOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvplsStatusOperStatus.setStatus('current')
if mibBuilder.loadTexts: cvplsStatusOperStatus.setDescription('The current operational state of this VPLS Service.')
cvplsStatusPeerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvplsStatusPeerCount.setStatus('current')
if mibBuilder.loadTexts: cvplsStatusPeerCount.setDescription('This object specifies the number of peers present in this vpls instance.')
cvplsPwBindTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 4), )
if mibBuilder.loadTexts: cvplsPwBindTable.setStatus('current')
if mibBuilder.loadTexts: cvplsPwBindTable.setDescription('This table provides an association between a VPLS service and the corresponding Pseudo Wires. A service can have more than one Pseudo Wire association. Pseudo Wires are defined in the pwTable')
cvplsPwBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 4, 1), ).setIndexNames((0, "CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigIndex"), (0, "CISCO-IETF-VPLS-GENERIC-MIB", "cvplsPwBindIndex"))
if mibBuilder.loadTexts: cvplsPwBindEntry.setStatus('current')
if mibBuilder.loadTexts: cvplsPwBindEntry.setDescription('Each row represents an association between a VPLS instance and one or more Pseudo Wires defined in the pwTable. Each index is unique in describing an entry in this table. However both indexes are required to define the one to many association of service to pseudowire.')
cvplsPwBindIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 4, 1, 1), CpwVcIndexType())
if mibBuilder.loadTexts: cvplsPwBindIndex.setStatus('current')
if mibBuilder.loadTexts: cvplsPwBindIndex.setDescription("Secondary Index for the conceptual row identifying a pseudowire within the PwEntry which MUST match an entry from the PW-STD-MIB's PwTable which represents an already-provisioned pseudowire that is then associated with this VPLS instance.")
cvplsPwBindConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("autodiscovery", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvplsPwBindConfigType.setStatus('current')
if mibBuilder.loadTexts: cvplsPwBindConfigType.setDescription('The value of this object indicates whether the Pseudo Wire binding was created manually or via autodiscovery. The value of this object must be specified when the row is created and cannot be changed while the row status is active(1)')
cvplsPwBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mesh", 1), ("spoke", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvplsPwBindType.setStatus('current')
if mibBuilder.loadTexts: cvplsPwBindType.setDescription('The value of this object indicates whether the Pseudo Wire binding is of type mesh or spoke. The value of this object must be specified when the row is created and cannot be changed while the row status is active(1)')
cvplsPwBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvplsPwBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: cvplsPwBindRowStatus.setDescription('For creating, modifying, and deleting this row. None of the read-create objects in the conceptual rows may be changed when this object is in the active(1) state')
cvplsPwBindStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 4, 1, 5), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvplsPwBindStorageType.setStatus('current')
if mibBuilder.loadTexts: cvplsPwBindStorageType.setDescription('This variable indicates the storage type for this row.')
cvplsStatusNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvplsStatusNotifEnable.setReference('See also [RFC3413] for explanation that notifications are under the ultimate control of the MIB module in this document.')
if mibBuilder.loadTexts: cvplsStatusNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cvplsStatusNotifEnable.setDescription('If this object is set to true(1), then it enables the emission of cvplsStatusChanged notification; otherwise this notification is not emitted.')
cvplsNotificationMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 138, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvplsNotificationMaxRate.setStatus('current')
if mibBuilder.loadTexts: cvplsNotificationMaxRate.setDescription('This object indicates the maximum number of notifications issued per second. If events occur more rapidly, the implementation may simply fail to emit these notifications during that period, or may queue them until an appropriate time. A value of 0 means no throttling is applied and events may be notified at the rate at which they occur.')
cvplsStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 138, 0, 1)).setObjects(("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigVpnId"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigAdminStatus"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsStatusOperStatus"))
if mibBuilder.loadTexts: cvplsStatusChanged.setStatus('current')
if mibBuilder.loadTexts: cvplsStatusChanged.setDescription('The cvplsStatusChanged notification is generated when there is a change in the administrative or operating status of a VPLS service.')
cvplsFwdFullAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 138, 0, 2)).setObjects(("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigVpnId"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigFwdFullHighWatermark"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigFwdFullLowWatermark"))
if mibBuilder.loadTexts: cvplsFwdFullAlarmRaised.setStatus('current')
if mibBuilder.loadTexts: cvplsFwdFullAlarmRaised.setDescription('The cvplsFwdFullAlarmRaised notification is generated when the utilization of the Forwarding database is above the value specified by cvplsConfigFwdFullHighWatermark.')
cvplsFwdFullAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 138, 0, 3)).setObjects(("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigVpnId"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigFwdFullHighWatermark"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigFwdFullLowWatermark"))
if mibBuilder.loadTexts: cvplsFwdFullAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: cvplsFwdFullAlarmCleared.setDescription('The cvplsFwdFullAlarmCleared notification is generated when the utilization of the Forwarding database is below the value specified by cvplsConfigFwdFullLowWatermark.')
cvplsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 138, 2, 1))
cvplsModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 138, 2, 1, 1)).setObjects(("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsGroup"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsPwBindGroup"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvplsModuleFullCompliance = cvplsModuleFullCompliance.setStatus('current')
if mibBuilder.loadTexts: cvplsModuleFullCompliance.setDescription('Compliance requirement for implementations that provide full support for CISCO-IETF-VPLS-GENERIC-MIB. Such devices can then be monitored and configured using this MIB module.')
cvplsModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 138, 2, 1, 2)).setObjects(("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsGroup"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsPwBindGroup"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvplsModuleReadOnlyCompliance = cvplsModuleReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: cvplsModuleReadOnlyCompliance.setDescription('Compliance requirement for implementations that only provide read-only support for CISCO-IETF-VPLS-GENERIC-MIB. Such devices can then be monitored but cannot be configured using this MIB modules.')
cvplsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 138, 2, 2))
cvplsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 138, 2, 2, 1)).setObjects(("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigName"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigDescr"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigAdminStatus"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigMacLearning"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigDiscardUnknownDest"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigMacAging"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigVpnId"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigFwdFullHighWatermark"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigFwdFullLowWatermark"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigRowStatus"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigIndexNext"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigMtu"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigServiceType"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsConfigStorageType"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsStatusOperStatus"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsStatusPeerCount"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsStatusNotifEnable"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsNotificationMaxRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvplsGroup = cvplsGroup.setStatus('current')
if mibBuilder.loadTexts: cvplsGroup.setDescription('The group of objects supporting management of L2VPN VPLS services')
cvplsPwBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 138, 2, 2, 2)).setObjects(("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsPwBindConfigType"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsPwBindType"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsPwBindRowStatus"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsPwBindStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvplsPwBindGroup = cvplsPwBindGroup.setStatus('current')
if mibBuilder.loadTexts: cvplsPwBindGroup.setDescription('The group of objects supporting management of Pseudo Wire (PW) Binding to VPLS.')
cvplsNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 138, 2, 2, 3)).setObjects(("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsStatusChanged"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsFwdFullAlarmRaised"), ("CISCO-IETF-VPLS-GENERIC-MIB", "cvplsFwdFullAlarmCleared"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvplsNotificationGroup = cvplsNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cvplsNotificationGroup.setDescription('The group of notifications supporting the Notifications generated for VPLS Services')
mibBuilder.exportSymbols("CISCO-IETF-VPLS-GENERIC-MIB", PYSNMP_MODULE_ID=cvplsGenericMIB, cvplsFwdFullAlarmRaised=cvplsFwdFullAlarmRaised, cvplsGroups=cvplsGroups, cvplsPwBindGroup=cvplsPwBindGroup, cvplsPwBindEntry=cvplsPwBindEntry, cvplsPwBindTable=cvplsPwBindTable, cvplsGroup=cvplsGroup, cvplsPwBindConfigType=cvplsPwBindConfigType, cvplsCompliances=cvplsCompliances, cvplsStatusTable=cvplsStatusTable, cvplsStatusOperStatus=cvplsStatusOperStatus, cvplsModuleReadOnlyCompliance=cvplsModuleReadOnlyCompliance, cvplsStatusNotifEnable=cvplsStatusNotifEnable, cvplsConfigAdminStatus=cvplsConfigAdminStatus, cvplsObjects=cvplsObjects, cvplsGenericMIB=cvplsGenericMIB, cvplsConfigEntry=cvplsConfigEntry, cvplsStatusPeerCount=cvplsStatusPeerCount, cvplsFwdFullAlarmCleared=cvplsFwdFullAlarmCleared, cvplsConfigName=cvplsConfigName, cvplsPwBindRowStatus=cvplsPwBindRowStatus, cvplsConfigMacLearning=cvplsConfigMacLearning, cvplsConfigDiscardUnknownDest=cvplsConfigDiscardUnknownDest, cvplsNotificationGroup=cvplsNotificationGroup, cvplsConfigTable=cvplsConfigTable, cvplsConfigMacAging=cvplsConfigMacAging, cvplsModuleFullCompliance=cvplsModuleFullCompliance, cvplsStatusChanged=cvplsStatusChanged, cvplsNotifications=cvplsNotifications, cvplsPwBindStorageType=cvplsPwBindStorageType, cvplsConformance=cvplsConformance, cvplsConfigIndex=cvplsConfigIndex, cvplsConfigDescr=cvplsConfigDescr, cvplsConfigVpnId=cvplsConfigVpnId, cvplsStatusEntry=cvplsStatusEntry, cvplsPwBindIndex=cvplsPwBindIndex, cvplsNotificationMaxRate=cvplsNotificationMaxRate, cvplsConfigServiceType=cvplsConfigServiceType, cvplsPwBindType=cvplsPwBindType, cvplsConfigIndexNext=cvplsConfigIndexNext, cvplsConfigMtu=cvplsConfigMtu, cvplsConfigFwdFullHighWatermark=cvplsConfigFwdFullHighWatermark, cvplsConfigStorageType=cvplsConfigStorageType, cvplsConfigFwdFullLowWatermark=cvplsConfigFwdFullLowWatermark, cvplsConfigRowStatus=cvplsConfigRowStatus)
