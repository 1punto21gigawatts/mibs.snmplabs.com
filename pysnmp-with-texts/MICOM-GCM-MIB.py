#
# PySNMP MIB module MICOM-GCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-GCM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
mcmSysAsciiTimeOfDay, = mibBuilder.importSymbols("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, Bits, Counter32, NotificationType, ModuleIdentity, ObjectIdentity, IpAddress, iso, TimeTicks, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "Bits", "Counter32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "IpAddress", "iso", "TimeTicks", "Unsigned32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
micom_gcm = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 25)).setLabel("micom-gcm")
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1))
status = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 2))
mcmGcmGlobalCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 1))
mcmGcmGlobalCfgAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmGlobalCfgAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmGlobalCfgAdminStatus.setDescription('NAME = ; DESC = The GCM admin status: \\ 1 - GCM is enabled. \\ 2 - GCM is disabled. \\ (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
mcmGcmGlobalCfgTraps = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmGlobalCfgTraps.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmGlobalCfgTraps.setDescription('NAME = ; DESC = This object indicates whether GCM traps will \\ be generated or not. (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
mcmGcmGlobalCfgAutoActSelMode = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hwCfgAutoSelect", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmGlobalCfgAutoActSelMode.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmGlobalCfgAutoActSelMode.setDescription('NAME = ; DESC = This object is used to set the mode of the unit \\ activation after reading the configuration file. \\ disabled (2): The GCM does not change the objects \\ mcmGcmUnitAdminStatus in the GCM Unit \\ table after reading the configuration file. \\ hwCfgAutoSelect (1): After reading the configuration \\ file, the GCM activates only one of the three GCM \\ Units depending on the hardware configuration. \\ The stored configuration for the object \\ mcmGcmUnitAdminStatus will be ignored. \\ The following association between the GCM Unit \\ rows and hardware configuration exists: \\ Row 1: Port 2 and (optional) 3 with Serial WAN \\ card; Port 2 is the Primary port. \\ Row 2: Port 2 with Serial WAN card, Port 3 with \\ ISDN card, Port 2 is the Primary port. \\ Row 3: Port 2 and (optional) 3 with ISDN, Port 2 \\ is the Primary port. \\ (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
mcmGcmLinkTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 2), )
if mibBuilder.loadTexts: mcmGcmLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmLinkTable.setDescription('NAME = ; DESC = The GCM Link Table. (Operational) ; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
mcmGcmLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 2, 1), ).setIndexNames((0, "MICOM-GCM-MIB", "mcmGcmLinkIndex"))
if mibBuilder.loadTexts: mcmGcmLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmLinkEntry.setDescription('NAME = ; DESC = An entry in the GCM Link Table. \\ (Operational) ; HELP = ; CAPABILITIES = ;')
mcmGcmLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmLinkIndex.setDescription('NAME = ; DESC = The index value which uniquely identifies an \\ entry in the GCM Link Table. (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmLinkUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmLinkUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmLinkUnitIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an \\ entry in the GCM Unit Table. (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmLinkName.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmLinkName.setDescription("NAME = ; DESC = The name of the GCM Link. Default value is \\ 'gcmLink<mcmGcmLinkIndex>'. (Operational); HELP = ; CAPABILITIES = ;")
mcmGcmLinkSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reserved", 1), ("isdn", 2), ("unusedEver-up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmLinkSigType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmLinkSigType.setDescription('NAME = ; DESC = The type of the signaling channel, if a signaling \\ protocol is used. (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmLinkSigPcmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmLinkSigPcmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmLinkSigPcmIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an entry \\ for the PCM. In the case of the ICM, this entry \\ represents an index for the dialCtlPeerCfgTable. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmLinkSigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("cfg-error", 1), ("info-wait", 2), ("inactive", 3), ("enable-wait", 4), ("deferred", 5), ("protocol-down", 6), ("activating", 7), ("active", 8), ("disconnecting", 9), ("ever-up", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmLinkSigOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmLinkSigOperStatus.setDescription('NAME = ; DESC = The status of the Signaling Link: \\ cfg-error (1): Configuration error. The signaling \\ link is not configured or activated from the \\ Signaling CM. \\ info-wait (2): the GCM has sent an information \\ request message to the Signaling CM to request \\ the status of this link. If the GCM receives an error \\ message, the status will be set to cfg-error (1). \\ inactive (3): the link is inactive. \\ enable-wait (4): the GCM is trying to enable the \\ hardware interface and is waiting for the response \\ from the Signaling CM. \\ deferred(5):the activation of link is being deferred \\ for 1 minute. protocol-down(6):this indicates PLM or MSM is down.\\ activating (7): the activation of this link is in \\ progress. \\ active (8): the Signaling link is established. \\ disconnecting (9): the Signaling CM deactivates \\ this link. \\ up (10): this link is up forever.; (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmLinkProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reserved", 1), ("frameRelay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmLinkProtoType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmLinkProtoType.setDescription('NAME = ; DESC = The type of the protocol. (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmLinkProtoPcmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmLinkProtoPcmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmLinkProtoPcmIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an entry \\ for the PCM. In the case of the FRCM, this entry \\ represents an index for the port. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmLinkProtoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("cfg-error", 1), ("info-wait", 2), ("inactive", 3), ("enable-wait", 4), ("deferred", 5), ("protocol-down", 6), ("activating", 7), ("wait-switch", 8), ("switching", 9), ("active", 10), ("disconnecting", 11), ("ever-up", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmLinkProtoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmLinkProtoStatus.setDescription('NAME = ; DESC = The status of the Protocol Link: \\ cfg-error (1): Configuration error. The protocol \\ link is not configured or activated from the CM. \\ info-wait (2): the GCM has sent an information \\ request message to the CM to request the status \\ of this link. If the GCM receives an error message, \\ the status will be set to cfg-error (1). \\ inactive (3): the link is inactive. \\ enable-wait (4): the GCM is trying to enable the \\ hardware interface and is waiting for the response \\ from the CM. \\ deferred(5):the activation of link is being deferred for 1 \\ minute. \\ protocol-down(6):this indicates PLM or MSM is down.\\ activating (7): the activation of this link is in progress. \\ wait-switch (8): the switching from the backup link \\ to the primary is delayed by the configuration. \\ switching (9): the switching of the link is in progress. \\ active (10): the link is established. \\ disconnecting (11): the CM deactivates this link. \\ up (12): this link is up forever. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmLinkVoiceCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmLinkVoiceCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmLinkVoiceCalls.setDescription('NAME = ; DESC = The number of active voice calls. (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmUnitTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3), )
if mibBuilder.loadTexts: mcmGcmUnitTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitTable.setDescription('NAME = ; DESC = The GCM Unit Table. (Operational) ; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
mcmGcmUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1), ).setIndexNames((0, "MICOM-GCM-MIB", "mcmGcmUnitIndex"))
if mibBuilder.loadTexts: mcmGcmUnitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitEntry.setDescription('NAME = ; DESC = An entry in the GCM Unit Table. \\ (Operational) ; HELP = ; CAPABILITIES = ;')
mcmGcmUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitIndex.setDescription('NAME = ; DESC = The index value which uniquely identifies an \\ entry in the GCM Unit Table. (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmUnitName.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitName.setDescription("NAME = ; DESC = The name of the GCM Unit. Default value is \\ 'gcmUnit <mcmGcmUnitIndex>'. (Operational); HELP = ; CAPABILITIES = ;")
mcmGcmUnitAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmUnitAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitAdminStatus.setDescription('NAME = ; DESC = The value shows the administration status of \\ the GCM Unit. If the status is set to down (1), \\ the administration is disabled for this unit and \\ all associated links. Only when the status is \\ up (2), the GCM controls and administrates this \\ unit. (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmUnitTimerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmUnitTimerAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitTimerAdminStatus.setDescription('NAME = ; DESC = The GCM Unit timer status. When set to enabled (1), \\ the GCM checks the configured timer entries. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmUnitSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fast-switch", 1), ("voice-switch", 2), ("manual-switch-backup", 3), ("manual-switching", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmUnitSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitSwitchType.setDescription('NAME = ; DESC = The type of the switching algorithm. \\ fast-switch (1): the GCM deactivates the backup \\ link after the primary link is re-established \\ regardless of the backup transmission activity. \\ voice-switch (2): the backup link will be deactivated \\ after the primary link is re-established and all voice \\ calls over the backup link are disconnected. \\ manual-switch-backup(3): the GCM switches to the \\ backup in case of the primary failure. The switching \\ back to the primary port mst be done manually.\\ manual-switch(4): the GCM could be manually switch \\ only.\\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmUnitSwitchDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmUnitSwitchDelay.setStatus('deprecated')
if mibBuilder.loadTexts: mcmGcmUnitSwitchDelay.setDescription("NAME = ; DESC = NOTE THAT THIS OBJECT IS DEPRECATED. It's \\ functionality has been replaced by \\ mcmGcmUnitBackupSwitchDelay object. \\ The number of minutes that the switching from \\ the active backup link to the active primary link \\ has to be delayed. (Operational); HELP = ; CAPABILITIES = ;")
mcmGcmUnitPrimaryLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmUnitPrimaryLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitPrimaryLinkIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an entry \\ in the GCM Link Table as the primary link. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmUnitBackupRemainTime = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmUnitBackupRemainTime.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitBackupRemainTime.setDescription('NAME = ; DESC = The maximum number of minutes that the backup link \\ remains active after the switching from the backup \\ to the primary. This object will be used if the \\ object mcmGcmUnitSwitchType is set to \\ voice-switch (2). (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmUnitBackupSwitchDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmUnitBackupSwitchDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitBackupSwitchDelay.setDescription('NAME = ; DESC = The number of minutes the switching \\ has to be delayed before switching \\ to the primary link.(Operational); HELP = ; CAPABILITIES = ;')
mcmGcmUnitPrimarySwitchDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmUnitPrimarySwitchDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitPrimarySwitchDelay.setDescription('NAME = ; DESC = The number of minutes the switching has \\ to be delayed before switching to the \\ backup link. (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmUnitRegionalLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmUnitRegionalLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitRegionalLinkIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an entry \\ in the GCM Link Table as the regional link index. \\ This GCM link is activated only during the down \\ time of the backup link. (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmUnitModeCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("branch-node", 1), ("regional-node", 2), ("central-site-node", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmUnitModeCfg.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitModeCfg.setDescription('NAME = ; DESC = branch-node(1): The GCM will try to \\ to activate at first the primary \\ link. In the case of a failure, \\ the GCM will activate one of the \\ the backup links. During the time \\ the primary link is active, the \\ backup port is deactivated. regional-node(2): This mode is \\ identical to the branch-mode(1) \\ except the backup link is not used.\\ When the primary link is active, the \\ GCM will not deactivate the backup \\ port. If the backup port is an \\ ISDN card, the GCM can be configured \\ to allow incoming calls by using the \\ link specified by the object \\ <gcmUnitRegionalLinkIndex>. When the primary link fails, the activated \\ link <gcmUnitRegionalLinkIndex> \\ (eg. configured for incoming connection \\ ISDN) will be disconnected and the \\ backup link will be activated. \\ Note that there is no deactivation \\ of the backup port and ISDN incomming \\ calls can be accepted when the backup \\ is not used for backing up the primary \\ connection.\\ central-site-node(3):Will not have a MPANL DTE connection. There is no \\ need to have the backup functionality. \\ The GCM will enable both ports. \\ In the case of ISDN, it is possible \\ to accept incomming calls. Primary link \\ and backup link will have the same \\ priority, there is no correlation \\ between them. The GCM will activate \\ all GCM links configured for this unit. (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmUnitPriLinkFailMonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmUnitPriLinkFailMonStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitPriLinkFailMonStatus.setDescription('NAME = ; DESC = The GCM link failure monitor \\ status. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmUnitPriLinkFailMonDurMin = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmUnitPriLinkFailMonDurMin.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitPriLinkFailMonDurMin.setDescription('NAME = ; DESC = The number of minutes to monitor \\ gcmLinkFailureMonitorThreshold(below)\\ activity. The duration timer \\ starts when first link failure \\ occured while the \\ gcmLinkFailureMonStatus(above) is \\ enabled(1). \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmUnitPriLinkFailMonThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmUnitPriLinkFailMonThrshld.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitPriLinkFailMonThrshld.setDescription('NAME = ; DESC = The maximum number of \\ gcmLinkFailureMonCount(below) \\ within gcmLinkFailureMonDurMin \\ (above)before switching from primary \\ to backup.\\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmUnitPriLinkFailMonCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmUnitPriLinkFailMonCount.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitPriLinkFailMonCount.setDescription('NAME = ; DESC = The number of link failures within \\ gcmLinkFailureMonitorDurMin(above). \\ HELP = ; CAPABILITIES = ;')
mcmGcmUnitCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch-to-primary", 1), ("switch-to-backup", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mcmGcmUnitCmd.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmUnitCmd.setDescription('NAME = ; DESC = Switches the units link from primary to \\ backup (1) or backup to primary (2) \\ HELP = ; CAPABILITIES = ;')
mcmGcmBackupCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 4), )
if mibBuilder.loadTexts: mcmGcmBackupCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmBackupCfgTable.setDescription('NAME = ; DESC = The GCM Backup Configuration Table. \\ (Operational) ; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
mcmGcmBackupCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 4, 1), ).setIndexNames((0, "MICOM-GCM-MIB", "mcmGcmBackupCfgIndex"))
if mibBuilder.loadTexts: mcmGcmBackupCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmBackupCfgEntry.setDescription('NAME = ; DESC = An entry in the GCM Backup Configuration \\ Table. (Operational) ; HELP = ; CAPABILITIES = ;')
mcmGcmBackupCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmBackupCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmBackupCfgIndex.setDescription('NAME = ; DESC = The index value which uniquely identifies an \\ entry in the GCM Backup Configuration Table. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmBackupCfgUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmBackupCfgUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmBackupCfgUnitIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an \\ entry in the GCM Unit Table. (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmBackupCfgLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmBackupCfgLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmBackupCfgLinkIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an \\ entry in the GCM Link Table. This GCM Link \\ will be used for Backup Link activation. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmTimerTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 5), )
if mibBuilder.loadTexts: mcmGcmTimerTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmTimerTable.setDescription('NAME = ; DESC = The GCM Timer Table. (Operational) ; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
mcmGcmTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 5, 1), ).setIndexNames((0, "MICOM-GCM-MIB", "mcmGcmTimerIndex"))
if mibBuilder.loadTexts: mcmGcmTimerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmTimerEntry.setDescription('NAME = ; DESC = An entry in the GCM Timer Table. \\ (Operational) ; HELP = ; CAPABILITIES = ;')
mcmGcmTimerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmTimerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmTimerIndex.setDescription('NAME = ; DESC = The index value which uniquely identifies an \\ entry in the GCM Timer Table. (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmTimerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmTimerUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmTimerUnitIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an \\ entry into the GCM Unit Table. (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmTimerInactStartHr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmTimerInactStartHr.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmTimerInactStartHr.setDescription('NAME = ; DESC = The hours designation to start inactivity. The \\ connection will be automatically disconnected \\ if the system time is equal to the \\ mcmGcmTimerInactStartHr/Min. \\ Similarly, if the Inactivity Timer is configured \\ as a periodic timer (mcmGcmTimerInactPeriodic), \\ this object designates the hour to start inactivity.\\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmTimerInactStartMin = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmTimerInactStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmTimerInactStartMin.setDescription('NAME = ; DESC = The minutes designation to start inactivity. The \\ connection will be automatically disconnected \\ if the system time is equal to the \\ mcmGcmTimerInactStartHr/Min. \\ If the Inactivity Timer is configured as a periodic \\ timer (mcmGcmTimerInactPeriodic), this object \\ designates the minute to start inactivity. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmTimerInactDurationHr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 167))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmTimerInactDurationHr.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmTimerInactDurationHr.setDescription('NAME = ; DESC = The hours designation for inactivity duration. \\ The inactivity time duration of the GCM Unit is \\ defined by mcmGcmTimerInactDurationHr/Min. \\ Similarly, if the Inactivity Timer is configured as \\ a periodic timer (mcmGcmTimerInactPeriodic), \\ this object designates the inactive connection \\ duration (hours) period. (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmTimerInactDurationMin = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmTimerInactDurationMin.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmTimerInactDurationMin.setDescription('NAME = ; DESC = The minutes designation for inactivity duration. \\ The inactivity time duration of the GCM Unit is \\ defined by mcmGcmTimerInactDurationHr/Min. \\ Similarly, if the Inactivity Timer is configured as \\ a periodic timer (mcmGcmTimerInactPeriodic), \\ this object designates the inactive connection \\ duration (minutes) period. (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmTimerInactMonday = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmTimerInactMonday.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmTimerInactMonday.setDescription('NAME = ; DESC = Enables (1) or disables (2) the timer inactivity \\ administration for the day Monday. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmTimerInactTuesday = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmTimerInactTuesday.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmTimerInactTuesday.setDescription('NAME = ; DESC = Enables (1) or disables (2) the timer inactivity \\ administration for the day Tuesday. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmTimerInactWednesday = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmTimerInactWednesday.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmTimerInactWednesday.setDescription('NAME = ; DESC = Enables (1) or disables (2) the timer inactivity \\ administration for the day Wednesday. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmTimerInactThursday = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmTimerInactThursday.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmTimerInactThursday.setDescription('NAME = ; DESC = Enables (1) or disables (2) the timer inactivity \\ administration for the day Thursday. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmTimerInactFriday = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmTimerInactFriday.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmTimerInactFriday.setDescription('NAME = ; DESC = Enables (1) or disables (2) the timer inactivity \\ administration for the day Friday. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmTimerInactSaturday = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmTimerInactSaturday.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmTimerInactSaturday.setDescription('NAME = ; DESC = Enables (1) or disables (2) the timer inactivity \\ administration for the day Saturday. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmTimerInactSunday = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmTimerInactSunday.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmTimerInactSunday.setDescription('NAME = ; DESC = Enables (1) or disables (2) the timer inactivity \\ administration for the day Sunday. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmGcmTimerInactPeriodic = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmTimerInactPeriodic.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmTimerInactPeriodic.setDescription('NAME = ; DESC = Enables (1) or disables (2) the Periodic Timer \\ inactivity administration functionality. \\ (Operational); HELP = ; CAPABILITIES = ;')
nvmGcmGlobalCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 6))
nvmGcmGlobalCfgAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmGlobalCfgAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmGlobalCfgAdminStatus.setDescription('NAME = ; DESC = The GCM admin status: \\ 1 - GCM is enabled. \\ 2 - GCM is disabled. \\ (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
nvmGcmGlobalCfgTraps = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmGlobalCfgTraps.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmGlobalCfgTraps.setDescription('NAME = ; DESC = This object indicates whether GCM traps will \\ be generated or not. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
nvmGcmGlobalCfgAutoActSelMode = MibScalar((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hwCfgAutoSelect", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmGlobalCfgAutoActSelMode.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmGlobalCfgAutoActSelMode.setDescription('NAME = ; DESC = This object is used to set the mode of the unit \\ activation after reading the configuration file. \\ disabled (2): The GCM does not change the objects \\ nvmGcmUnitAdminStatus in the GCM Unit \\ table after reading the configuration file. \\ hwCfgAutoSelect (1): After reading the configuration \\ file, the GCM activates only one of the three GCM \\ Units depending on the hardware configuration. \\ The stored configuration for the object \\ nvmGcmUnitAdminStatus will be ignored. \\ The following association between the GCM Unit \\ rows and hardware configuration exists: \\ Row 1: Port 2 and (optional) 3 with Serial WAN \\ card; Port 2 is the Primary port. \\ Row 2: Port 2 with Serial WAN card, Port 3 with \\ ISDN card, Port 2 is the Primary port. \\ Row 3: Port 2 and (optional) 3 with ISDN, Port 2 \\ is the Primary port. \\ (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
nvmGcmLinkTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 7), )
if mibBuilder.loadTexts: nvmGcmLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmLinkTable.setDescription('NAME = ; DESC = The GCM Link Table. (Configuration) ; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
nvmGcmLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 7, 1), ).setIndexNames((0, "MICOM-GCM-MIB", "nvmGcmLinkIndex"))
if mibBuilder.loadTexts: nvmGcmLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmLinkEntry.setDescription('NAME = ; DESC = An entry in the GCM Link Table. \\ (Configuration) ; HELP = ; CAPABILITIES = ;')
nvmGcmLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmGcmLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmLinkIndex.setDescription('NAME = ; DESC = The index value which uniquely identifies an \\ entry in the GCM Link Table. (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmLinkUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmGcmLinkUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmLinkUnitIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an \\ entry in the GCM Unit Table. (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmLinkName.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmLinkName.setDescription("NAME = ; DESC = The name of the GCM Link. Default value is \\ 'gcmLink<nvmGcmLinkIndex>'. (Configuration); HELP = ; CAPABILITIES = ;")
nvmGcmLinkSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reserved", 1), ("isdn", 2), ("unusedEver-up", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmLinkSigType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmLinkSigType.setDescription('NAME = ; DESC = The type of the signaling channel, if a signaling \\ protocol is used. (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmLinkSigPcmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmLinkSigPcmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmLinkSigPcmIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an entry \\ for the PCM. In the case of the ICM, this entry \\ represents an index for the dialCtlPeerCfgTable. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmLinkProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reserved", 1), ("frameRelay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmLinkProtoType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmLinkProtoType.setDescription('NAME = ; DESC = The type of the protocol. (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmLinkProtoPcmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmLinkProtoPcmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmLinkProtoPcmIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an entry \\ for the PCM. In the case of the FRCM, this entry \\ represents an index for a port. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmLinkRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmLinkRowStatus.setDescription('NAME = ; DESC = This object is used to create and delete rows in the \\ GCM Link Table. (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmUnitTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8), )
if mibBuilder.loadTexts: nvmGcmUnitTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmUnitTable.setDescription('NAME = ; DESC = The GCM Unit Table. (Configuration) ; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
nvmGcmUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8, 1), ).setIndexNames((0, "MICOM-GCM-MIB", "nvmGcmUnitIndex"))
if mibBuilder.loadTexts: nvmGcmUnitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmUnitEntry.setDescription('NAME = ; DESC = An entry in the GCM Unit Table. \\ (Configuration) ; HELP = ; CAPABILITIES = ;')
nvmGcmUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmGcmUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmUnitIndex.setDescription('NAME = ; DESC = The index value which uniquely identifies an \\ entry in the GCM Unit Table. (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmUnitName.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmUnitName.setDescription("NAME = ; DESC = The name of the GCM Unit. Default value is \\ 'gcmUnit <nvmGcmUnitIndex>'. (Configuration); HELP = ; CAPABILITIES = ;")
nvmGcmUnitAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmUnitAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmUnitAdminStatus.setDescription('NAME = ; DESC = The value shows the administration status of \\ the GCM Unit. If the status is set to down (1), \\ the administration is disabled for this unit and \\ all associated links. Only when the status is \\ up (2), the GCM controls and administrates this \\ unit. (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmUnitTimerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmUnitTimerAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmUnitTimerAdminStatus.setDescription('NAME = ; DESC = The GCM Unit timer status. When set to enabled (1), \\ the GCM checks the configured timer entries. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmUnitSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fast-switch", 1), ("voice-switch", 2), ("manual-switch-backup", 3), ("manual-switching", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmUnitSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmUnitSwitchType.setDescription('NAME = ; DESC = The type of the switching algorithm. \\ fast-switch (1): the GCM deactivates the backup \\ link after the primary link is re-established \\ regardless of the backup transmission activity. \\ voice-switch (2): the backup link will be deactivated \\ after the primary link is re-established and all voice \\ calls over the backup link are disconnected. \\ calls over the backup link are disconnected. \\ manual-switch-backup(3): the GCM switches to the \\ backup in case of the primary failure. The switching \\ back to the primary port mst be done manually.\\ manual-switch(4): the GCM could be manually switch \\ only.\\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmUnitSwitchDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmUnitSwitchDelay.setStatus('deprecated')
if mibBuilder.loadTexts: nvmGcmUnitSwitchDelay.setDescription("NAME = ; DESC = NOTE THAT THIS OBJECT IS DEPRECATED. It's \\ functionality has been replaced by \\ nmvGcmUnitBackupSwitchDelay object. \\ The number of minutes that the switching from \\ the active backup link to the active primary link \\ has to be delayed. (Operational); HELP = ; CAPABILITIES = ;")
nvmGcmUnitPrimaryLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmUnitPrimaryLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmUnitPrimaryLinkIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an entry \\ in the GCM Link Table as the primary link. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmUnitBackupRemainTime = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmUnitBackupRemainTime.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmUnitBackupRemainTime.setDescription('NAME = ; DESC = The maximum number of minutes that the backup link \\ remains active after the switching from the backup \\ to the primary. This object will be used if the \\ object mcmGcmUnitSwitchType is set to \\ voice-switch (2). (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmUnitBackupSwitchDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmUnitBackupSwitchDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmUnitBackupSwitchDelay.setDescription('NAME = ; DESC = The number of minutes the switching \\ has to be delayed before switching \\ to the primary link.(Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmUnitPrimarySwitchDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmUnitPrimarySwitchDelay.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmUnitPrimarySwitchDelay.setDescription('NAME = ; DESC = The number of minutes the switching has \\ to be delayed before switching to the \\ backup link. (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmUnitRegionalLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmUnitRegionalLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmUnitRegionalLinkIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an entry \\ in the GCM Link Table as the regional link index. \\ This GCM link is activated only during the down \\ time of the backup link.\\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmUnitModeCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("branch-node", 1), ("regional-node", 2), ("central-site-node", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmUnitModeCfg.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmUnitModeCfg.setDescription('NAME = ; DESC = branch-node(1): The GCM will try to \\ to activate at first the primary \\ link. In the case of a failure, \\ the GCM will activate one of the \\ the backup links. During the time \\ the primary link is active, the \\ backup port is deactivated. regional-node(2): This mode is \\ identical to the branch-mode(1) \\ except the backup link is not used.\\ When the primary link is active, the \\ GCM will not deactivate the backup \\ port. If the backup port is an \\ ISDN card, the GCM can be configured \\ to allow incoming calls by using the \\ link specified by the object \\ <gcmUnitRegionalLinkIndex>. When the primary link fails, the activated \\ link <gcmUnitRegionalLinkIndex> \\ (eg. configured for incoming connection \\ ISDN) will be disconnected and the \\ backup link will be activated. \\ Note that there is no deactivation \\ of the backup port and ISDN incomming \\ calls can be accepted when the backup \\ is not used for backing up the primary \\ connection.\\ central-site-node(3):Will not have a MPANL DTE connection. There is no \\ need to have the backup functionality. \\ The GCM will enable both ports. \\ In the case of ISDN, it is possible \\ to accept incomming calls. Primary link \\ and backup link will have the same \\ priority, there is no correlation \\ between them. The GCM will activate \\ all GCM links configured for this unit. (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmUnitPriLinkFailMonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmUnitPriLinkFailMonStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmUnitPriLinkFailMonStatus.setDescription('NAME = ; DESC = The GCM link failure monitor \\ status. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmUnitPriLinkFailMonDurMin = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmUnitPriLinkFailMonDurMin.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmUnitPriLinkFailMonDurMin.setDescription('NAME = ; DESC = The number of minutes to monitor \\ gcmLinkFailureMonThreshold \\ activity. The duration timer \\ starts when first link failure \\ occured while the \\ gcmLinkFailureMonStatus is \\ enabled(1). \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmUnitPriLinkFailMonThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmUnitPriLinkFailMonThrshld.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmUnitPriLinkFailMonThrshld.setDescription('NAME = ; DESC = The maximum number of \\ gcmLinkFailureMonCount(below) \\ within gcmLinkFailureMonDurMin \\ (above)before switching from primary \\ to backup.\\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmBackupCfgTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 9), )
if mibBuilder.loadTexts: nvmGcmBackupCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmBackupCfgTable.setDescription('NAME = ; DESC = The GCM Backup Configuration Table. \\ (Configuration) ; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
nvmGcmBackupCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 9, 1), ).setIndexNames((0, "MICOM-GCM-MIB", "nvmGcmBackupCfgIndex"))
if mibBuilder.loadTexts: nvmGcmBackupCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmBackupCfgEntry.setDescription('NAME = ; DESC = An entry in the GCM Backup Configuration \\ Table. (Configuration) ; HELP = ; CAPABILITIES = ;')
nvmGcmBackupCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmGcmBackupCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmBackupCfgIndex.setDescription('NAME = ; DESC = The index value which uniquely identifies an \\ entry in the GCM Backup Configuration Table. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmBackupCfgUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmBackupCfgUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmBackupCfgUnitIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an \\ entry in the GCM Unit Table. (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmBackupCfgLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmBackupCfgLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmBackupCfgLinkIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an \\ entry in the GCM Link Table. This GCM Link \\ will be used for Backup Link activation. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmBackupCfgLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmBackupCfgLinkRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmBackupCfgLinkRowStatus.setDescription('NAME = ; DESC = This object is used to create and delete rows \\ in the GCM Backup Configuration Table. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmTimerTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10), )
if mibBuilder.loadTexts: nvmGcmTimerTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerTable.setDescription('NAME = ; DESC = The GCM Timer Table. (Configuration) ; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
nvmGcmTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10, 1), ).setIndexNames((0, "MICOM-GCM-MIB", "nvmGcmTimerIndex"))
if mibBuilder.loadTexts: nvmGcmTimerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerEntry.setDescription('NAME = ; DESC = An entry in the GCM Timer Table. \\ (Configuration) ; HELP = ; CAPABILITIES = ;')
nvmGcmTimerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmGcmTimerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerIndex.setDescription('NAME = ; DESC = The index value which uniquely identifies an \\ entry in the GCM Timer Table. (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmTimerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmTimerUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerUnitIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an \\ entry into the GCM Unit Table. (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmTimerInactStartHr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmTimerInactStartHr.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerInactStartHr.setDescription('NAME = ; DESC = The hours designation to start inactivity. The \\ connection will be automatically disconnected \\ if the system time is equal to the \\ nvmGcmTimerInactStartHr/Min. \\ Similarly, if the Inactivity Timer is configured \\ as a periodic timer (nvmGcmTimerInactPeriodic), \\ this object designates the hour to start inactivity. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmTimerInactStartMin = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmTimerInactStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerInactStartMin.setDescription('NAME = ; DESC = The minutes designation to start inactivity. The \\ connection will be automatically disconnected \\ if the system time is equal to the \\ nvmGcmTimerInactStartHr/Min. \\ Similarly, if the Inactivity Timer is configured \\ as a periodic timer (nvmGcmTimerInactPeriodic), \\ this object designates the minute to start inactivity.\\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmTimerInactDurationHr = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 167))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmTimerInactDurationHr.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerInactDurationHr.setDescription('NAME = ; DESC = The hours designation for inactivity duration. \\ The inactivity time duration of the GCM Unit is \\ defined by nvmGcmTimerInactDurationHr/Min. \\ Similarly, if the Inactivity Timer is configured as \\ a periodic timer (nvmGcmTimerInactPeriodic), \\ this object designates the inactive connection \\ duration (hours) period. (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmTimerInactDurationMin = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmTimerInactDurationMin.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerInactDurationMin.setDescription('NAME = ; DESC = The minutes designation for inactivity duration. \\ The inactivity time duration of the GCM Unit is \\ defined by nvmGcmTimerInactDurationHr/Min. \\ Similarly, if the Inactivity Timer is configured as \\ a periodic timer (nvmGcmTimerInactPeriodic), \\ this object designates the inactive connection \\ duration (minutes) period. (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmTimerInactMonday = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmTimerInactMonday.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerInactMonday.setDescription('NAME = ; DESC = Enables (1) or disables (2) the timer inactivity \\ administration for the day Monday. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmTimerInactTuesday = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmTimerInactTuesday.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerInactTuesday.setDescription('NAME = ; DESC = Enables (1) or disables (2) the timer inactivity \\ administration for the day Tuesday. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmTimerInactWednesday = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmTimerInactWednesday.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerInactWednesday.setDescription('NAME = ; DESC = Enables (1) or disables (2) the timer inactivity \\ administration for the day Wednesday. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmTimerInactThursday = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmTimerInactThursday.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerInactThursday.setDescription('NAME = ; DESC = Enables (1) or disables (2) the timer inactivity \\ administration for the day Thursday. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmTimerInactFriday = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmTimerInactFriday.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerInactFriday.setDescription('NAME = ; DESC = Enables (1) or disables (2) the timer inactivity \\ administration for the day Friday. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmTimerInactSaturday = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmTimerInactSaturday.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerInactSaturday.setDescription('NAME = ; DESC = Enables (1) or disables (2) the timer inactivity \\ administration for the day Saturday. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmTimerInactSunday = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmTimerInactSunday.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerInactSunday.setDescription('NAME = ; DESC = Enables (1) or disables (2) the timer inactivity \\ administration for the day Sunday. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmTimerInactPeriodic = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmTimerInactPeriodic.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerInactPeriodic.setDescription('NAME = ; DESC = Enables (1) or disables (2) the Periodic Timer \\ inactivity administration functionality. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmGcmTimerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 1, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmGcmTimerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmGcmTimerRowStatus.setDescription('NAME = ; DESC = This object is used to create and delete rows \\ in the GCM Timer Table. (Configuration); HELP = ; CAPABILITIES = ;')
mcmGcmHwStatusTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 2, 1), )
if mibBuilder.loadTexts: mcmGcmHwStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmHwStatusTable.setDescription('NAME = ; DESC = The GCM Hardware Status Table.; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP ;')
mcmGcmHwStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 2, 1, 1), ).setIndexNames((0, "MICOM-GCM-MIB", "mcmGcmHwStatusIndex"))
if mibBuilder.loadTexts: mcmGcmHwStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmHwStatusEntry.setDescription('NAME = ; DESC = An entry in the GCM Hardware Status \\ Table.; HELP = ; CAPABILITIES = ;')
mcmGcmHwStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("everDown", 1), ("everUp", 2), ("isdnPrimary", 3), ("isdnBackup", 4), ("frPrimary", 5), ("frBackup", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmHwStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmHwStatusIndex.setDescription('NAME = ; DESC = The index value that uniquely identifies an entry \\ in the GCM Hardware Status table. The first two \\ entries are internal ports. Entry 1 describes a port \\ that is ever down. The second entry is an ever-up \\ port. The GCM will not change the status of these \\ two ports. They are not connected to any physical \\ interface. To change the status of the other entries, \\ the GCM communicates with associated PCM.; HELP = ; CAPABILITIES = ;')
mcmGcmHwStatusDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmHwStatusDesc.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmHwStatusDesc.setDescription('NAME = ; DESC = The name of the GCM Hardware Interface.; HELP = ; CAPABILITIES = ;')
mcmGcmHwStatusOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ever-down", 1), ("up", 2), ("ever-up", 3), ("down", 4), ("enable-req", 5), ("disable-req", 6), ("link-error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmHwStatusOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmHwStatusOperStatus.setDescription('NAME = ; DESC = The status of the Hardware interface. After \\ reset the normal status of an entry is down (4). \\ To activate the hardware port, the GCM sends \\ a message to the PCM and changes the status to \\ enable-req(5). A positive activation changes the \\ status to up(2). If the activation fails (e.g., no \\ cable is plugged in), the status will be set to \\ link-error(7). Only in this state, the PCM monitors \\ the status of the port. In the state down(4), the \\ PCM does not monitor the port status.; HELP = ; CAPABILITIES = ;')
mcmGcmHwStatusActiveLink = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 25, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmGcmHwStatusActiveLink.setStatus('mandatory')
if mibBuilder.loadTexts: mcmGcmHwStatusActiveLink.setDescription('NAME = ; DESC = The number of active GCM links on this Hardware \\ port.; HELP = ; CAPABILITIES = ;')
mcmGCMPriLinkDownCausedByPhysicalConnection = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 25) + (0,1)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-GCM-MIB", "mcmGcmLinkIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkName"), ("MICOM-GCM-MIB", "mcmGcmLinkSigType"), ("MICOM-GCM-MIB", "mcmGcmLinkSigPcmIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoType"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoPcmIndex"))
if mibBuilder.loadTexts: mcmGCMPriLinkDownCausedByPhysicalConnection.setDescription('NAME = ; DESC = This trap will be generated from the GCM,\\ if a GCM Link changes the state from UP to \\ DOWN. The GCM Link is configured as primary \\ link. The disconnection is caused by the loss\\ of the physical connection.\\ Severity Level: CRITICAL ; HELP = Loss of primary link Physical conenction. Check \\ the cabling. Possible signalling problem with ISDN \\ D-channel, or Frame Relay protocol error.\\ If problem persists, please contact Sys Admin., or \\ Field Personnel.;')
mcmGCMPriLinkDownCausedByProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 25) + (0,2)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-GCM-MIB", "mcmGcmLinkIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkName"), ("MICOM-GCM-MIB", "mcmGcmLinkSigType"), ("MICOM-GCM-MIB", "mcmGcmLinkSigPcmIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoType"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoPcmIndex"))
if mibBuilder.loadTexts: mcmGCMPriLinkDownCausedByProtocolFailure.setDescription('NAME = ; DESC = This trap will be generated from the GCM,\\ if a GCM Link changes the state from UP to \\ DOWN. The GCM Link is configured as primary \\ link. The disconnection is caused by the loss\\ of the protocol connection.\\ Severity Level: CRITICAL ; HELP = Possible Frame Relay Protocol error. If problem \\ persist, contact System admin. or Field Personnel.; ')
mcmGcmPriLinkDownCausedByGcmTimerEvent = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 25) + (0,3)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-GCM-MIB", "mcmGcmLinkIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkName"), ("MICOM-GCM-MIB", "mcmGcmLinkSigType"), ("MICOM-GCM-MIB", "mcmGcmLinkSigPcmIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoType"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoPcmIndex"), ("MICOM-GCM-MIB", "mcmGcmTimerIndex"))
if mibBuilder.loadTexts: mcmGcmPriLinkDownCausedByGcmTimerEvent.setDescription('NAME = ; DESC = This trap will be generated from the GCM,\\ if a GCM Link changes the state from UP to \\ DOWN. The GCM Link is configured as primary \\ link. The disconnection is caused by a \\ GCM Timer event.\\ Severity Level: CRITICAL ; HELP = GCM Timer event (user activated) caused the Link \\ to go down. Please wait until the timer kicks in. If it \\ stays down, contact your Field Personnel.;')
mcmGcmPriLinkDownCausedByUnknownSource = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 25) + (0,4)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-GCM-MIB", "mcmGcmLinkIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkName"), ("MICOM-GCM-MIB", "mcmGcmLinkSigType"), ("MICOM-GCM-MIB", "mcmGcmLinkSigPcmIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoType"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoPcmIndex"))
if mibBuilder.loadTexts: mcmGcmPriLinkDownCausedByUnknownSource.setDescription('NAME = ; DESC = This trap will be generated from the GCM,\\ if a GCM Link changes the state from UP to \\ DOWN. The GCM Link is configured as primary \\ link. The disconnection is caused by the loss\\ of an unkown event.\\ Severity Level: CRITICAL ; HELP = Caused by unknown event . If Link does not come \\ back up, Please consult Field Personnel.;')
mcmGCMBakLinkDownCausedByPhysicalConnection = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 25) + (0,5)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-GCM-MIB", "mcmGcmLinkIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkName"), ("MICOM-GCM-MIB", "mcmGcmLinkSigType"), ("MICOM-GCM-MIB", "mcmGcmLinkSigPcmIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoType"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoPcmIndex"))
if mibBuilder.loadTexts: mcmGCMBakLinkDownCausedByPhysicalConnection.setDescription('NAME = ; DESC = This trap will be generated from the GCM,\\ if a GCM Link changes the state from UP to \\ DOWN. The GCM Link is configured as backup \\ link. The disconnection is caused by the loss\\ of the physical connection.\\ Severity Level: CRITICAL ; HELP = Loss of Backup link Physical conenction. Check \\ the cabling. Possible signalling problem with ISDN \\ D-channel, or Frame Relay protocol error.\\ If problem persists, please contact Sys Admin., or \\ Field Personnel.;')
mcmGCMBakLinkDownCausedByProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 25) + (0,6)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-GCM-MIB", "mcmGcmLinkIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkName"), ("MICOM-GCM-MIB", "mcmGcmLinkSigType"), ("MICOM-GCM-MIB", "mcmGcmLinkSigPcmIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoType"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoPcmIndex"))
if mibBuilder.loadTexts: mcmGCMBakLinkDownCausedByProtocolFailure.setDescription('NAME = ; DESC = This trap will be generated from the GCM,\\ if a GCM Link changes the state from UP to \\ DOWN. The GCM Link is configured as backup \\ link. The disconnection is caused by the loss\\ of the protocol connection.\\ Severity Level: CRITICAL ; HELP = Possible Frame Relay Protocol error. If problem \\ persist, contact System admin. or Field Personnel.; ')
mcmGcmBakLinkDownCausedByGcmTimerEvent = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 25) + (0,7)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-GCM-MIB", "mcmGcmLinkIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkName"), ("MICOM-GCM-MIB", "mcmGcmLinkSigType"), ("MICOM-GCM-MIB", "mcmGcmLinkSigPcmIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoType"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoPcmIndex"), ("MICOM-GCM-MIB", "mcmGcmTimerIndex"))
if mibBuilder.loadTexts: mcmGcmBakLinkDownCausedByGcmTimerEvent.setDescription('NAME = ; DESC = This trap will be generated from the GCM,\\ if a GCM Link changes the state from UP to \\ DOWN. The GCM Link is configured as backup \\ link. The disconnection is caused by GCM \\ timer event. \\ Severity Level: CRITICAL ; HELP = GCM Timer event (user activated) caused the Link \\ to go down. Please wait until the timer kicks in. If it \\ stays down, contact your Field Personnel.;')
mcmGcmBakLinkDownCausedByUnknownSource = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 25) + (0,8)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-GCM-MIB", "mcmGcmLinkIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkName"), ("MICOM-GCM-MIB", "mcmGcmLinkSigType"), ("MICOM-GCM-MIB", "mcmGcmLinkSigPcmIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoType"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoPcmIndex"))
if mibBuilder.loadTexts: mcmGcmBakLinkDownCausedByUnknownSource.setDescription('NAME = ; DESC = This trap will be generated from the GCM,\\ if a GCM Link changes the state from UP to \\ DOWN. The GCM Link is configured as backup \\ link. The disconnection is caused by the loss\\ of an unkown event. \\ Severity Level: CRITICAL ; HELP = Caused by unknown event . If Link does not come \\ back up, Please contact Field Personnel.;')
mcmGcmPriLinkEst = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 25) + (0,9)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-GCM-MIB", "mcmGcmLinkIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkName"), ("MICOM-GCM-MIB", "mcmGcmLinkSigType"), ("MICOM-GCM-MIB", "mcmGcmLinkSigPcmIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoType"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoPcmIndex"))
if mibBuilder.loadTexts: mcmGcmPriLinkEst.setDescription("NAME = ServerUnreachable; DESC = The connection between the access device and the PP is \\ established. The connection is is build on physical \\ and protocol level. Voice and Lan transfer is disabled \\ for the primary link.\\ Severity Level: INFORMATIVE ; HELP = Normal physical and protocol level connection. But, \\ Server is unreachable. Please check Server's status.;")
mcmGcmBakLinkEst = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 25) + (0,10)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-GCM-MIB", "mcmGcmLinkIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkName"), ("MICOM-GCM-MIB", "mcmGcmLinkSigType"), ("MICOM-GCM-MIB", "mcmGcmLinkSigPcmIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoType"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoPcmIndex"))
if mibBuilder.loadTexts: mcmGcmBakLinkEst.setDescription("NAME = ServerUnreachable; DESC = The connection between the access device and the PP is \\ established. The connection is is build on physical \\ and protocol level. Voice and Lan transferis disabled \\ for the backup link.;\\ Severity Level: INFORMATIVE ; HELP = Normal physical and protocol level connection. But, \\ Server is unreachable. Please check Server's status.;")
mcmGcmPriLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 25) + (0,11)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-GCM-MIB", "mcmGcmLinkIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkName"), ("MICOM-GCM-MIB", "mcmGcmLinkSigType"), ("MICOM-GCM-MIB", "mcmGcmLinkSigPcmIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoType"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoPcmIndex"))
if mibBuilder.loadTexts: mcmGcmPriLinkUp.setDescription('NAME = ; DESC = This trap indicates that the connection is established \\ and voice and LAN transfer is now actviated for the \\ primary link.\\ Severity Level: INFORMATIVE ; HELP = Normal Status Indicator!.;')
mcmGcmBakLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 25) + (0,12)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-GCM-MIB", "mcmGcmLinkIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkName"), ("MICOM-GCM-MIB", "mcmGcmLinkSigType"), ("MICOM-GCM-MIB", "mcmGcmLinkSigPcmIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoType"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoPcmIndex"))
if mibBuilder.loadTexts: mcmGcmBakLinkUp.setDescription('NAME = ; DESC = This trap indicates that the connection is established \\ and voice and LAN transfer is now actviated for the \\ backup link.\\ Severity Level: INFORMATIVE ; HELP = Normal Status Indicator!.;')
mcmGcmRegionalLinkEst = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 25) + (0,13)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-GCM-MIB", "mcmGcmLinkIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkName"), ("MICOM-GCM-MIB", "mcmGcmLinkSigType"), ("MICOM-GCM-MIB", "mcmGcmLinkSigPcmIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoType"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoPcmIndex"))
if mibBuilder.loadTexts: mcmGcmRegionalLinkEst.setDescription('NAME = ; DESC = This trap indicates that the connection is established \\ for the regional GCM link. \\ Severity Level: INFORMATIVE ; HELP = Normal Status Indicator!.;')
mcmGcmRegionalLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 25) + (0,14)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-GCM-MIB", "mcmGcmLinkIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkName"), ("MICOM-GCM-MIB", "mcmGcmLinkSigType"), ("MICOM-GCM-MIB", "mcmGcmLinkSigPcmIndex"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoType"), ("MICOM-GCM-MIB", "mcmGcmLinkProtoPcmIndex"))
if mibBuilder.loadTexts: mcmGcmRegionalLinkDown.setDescription('NAME = ; DESC = This trap indicates that the connection is deactivated \\ for the regional GCM link because of a primary link \\ failure or the disconnection by the remote peer. \\ Severity Level: INFORMATIVE ; HELP = Normal Status Indicator!.;')
mibBuilder.exportSymbols("MICOM-GCM-MIB", nvmGcmUnitName=nvmGcmUnitName, mcmGCMBakLinkDownCausedByProtocolFailure=mcmGCMBakLinkDownCausedByProtocolFailure, mcmGcmLinkTable=mcmGcmLinkTable, nvmGcmBackupCfgTable=nvmGcmBackupCfgTable, mcmGcmTimerInactPeriodic=mcmGcmTimerInactPeriodic, nvmGcmTimerIndex=nvmGcmTimerIndex, nvmGcmTimerEntry=nvmGcmTimerEntry, nvmGcmTimerInactSaturday=nvmGcmTimerInactSaturday, nvmGcmUnitPriLinkFailMonThrshld=nvmGcmUnitPriLinkFailMonThrshld, nvmGcmUnitRegionalLinkIndex=nvmGcmUnitRegionalLinkIndex, mcmGcmTimerInactMonday=mcmGcmTimerInactMonday, mcmGCMPriLinkDownCausedByPhysicalConnection=mcmGCMPriLinkDownCausedByPhysicalConnection, mcmGcmUnitPriLinkFailMonStatus=mcmGcmUnitPriLinkFailMonStatus, mcmGcmUnitPriLinkFailMonThrshld=mcmGcmUnitPriLinkFailMonThrshld, mcmGCMBakLinkDownCausedByPhysicalConnection=mcmGCMBakLinkDownCausedByPhysicalConnection, mcmGcmUnitSwitchType=mcmGcmUnitSwitchType, mcmGcmLinkSigType=mcmGcmLinkSigType, mcmGcmPriLinkEst=mcmGcmPriLinkEst, configuration=configuration, mcmGcmLinkVoiceCalls=mcmGcmLinkVoiceCalls, nvmGcmTimerInactThursday=nvmGcmTimerInactThursday, mcmGcmUnitAdminStatus=mcmGcmUnitAdminStatus, mcmGcmLinkUnitIndex=mcmGcmLinkUnitIndex, mcmGcmPriLinkDownCausedByUnknownSource=mcmGcmPriLinkDownCausedByUnknownSource, mcmGcmBakLinkDownCausedByGcmTimerEvent=mcmGcmBakLinkDownCausedByGcmTimerEvent, mcmGcmUnitRegionalLinkIndex=mcmGcmUnitRegionalLinkIndex, mcmGcmTimerInactDurationMin=mcmGcmTimerInactDurationMin, mcmGcmLinkIndex=mcmGcmLinkIndex, nvmGcmGlobalCfgAdminStatus=nvmGcmGlobalCfgAdminStatus, nvmGcmLinkProtoType=nvmGcmLinkProtoType, mcmGcmUnitPrimarySwitchDelay=mcmGcmUnitPrimarySwitchDelay, mcmGcmUnitBackupSwitchDelay=mcmGcmUnitBackupSwitchDelay, mcmGcmTimerInactFriday=mcmGcmTimerInactFriday, mcmGcmHwStatusEntry=mcmGcmHwStatusEntry, mcmGcmGlobalCfgGroup=mcmGcmGlobalCfgGroup, nvmGcmBackupCfgUnitIndex=nvmGcmBackupCfgUnitIndex, mcmGcmGlobalCfgTraps=mcmGcmGlobalCfgTraps, mcmGcmUnitName=mcmGcmUnitName, nvmGcmLinkSigPcmIndex=nvmGcmLinkSigPcmIndex, nvmGcmUnitAdminStatus=nvmGcmUnitAdminStatus, nvmGcmTimerInactStartMin=nvmGcmTimerInactStartMin, mcmGcmPriLinkDownCausedByGcmTimerEvent=mcmGcmPriLinkDownCausedByGcmTimerEvent, status=status, mcmGcmUnitTable=mcmGcmUnitTable, mcmGcmLinkProtoPcmIndex=mcmGcmLinkProtoPcmIndex, mcmGcmUnitTimerAdminStatus=mcmGcmUnitTimerAdminStatus, mcmGcmTimerInactSunday=mcmGcmTimerInactSunday, nvmGcmTimerInactSunday=nvmGcmTimerInactSunday, nvmGcmUnitPriLinkFailMonStatus=nvmGcmUnitPriLinkFailMonStatus, mcmGcmRegionalLinkEst=mcmGcmRegionalLinkEst, nvmGcmUnitBackupSwitchDelay=nvmGcmUnitBackupSwitchDelay, nvmGcmTimerInactPeriodic=nvmGcmTimerInactPeriodic, mcmGcmUnitModeCfg=mcmGcmUnitModeCfg, mcmGcmUnitPriLinkFailMonDurMin=mcmGcmUnitPriLinkFailMonDurMin, mcmGcmPriLinkUp=mcmGcmPriLinkUp, mcmGcmUnitPrimaryLinkIndex=mcmGcmUnitPrimaryLinkIndex, nvmGcmLinkTable=nvmGcmLinkTable, mcmGcmHwStatusActiveLink=mcmGcmHwStatusActiveLink, mcmGcmLinkEntry=mcmGcmLinkEntry, nvmGcmTimerInactTuesday=nvmGcmTimerInactTuesday, mcmGcmTimerInactStartHr=mcmGcmTimerInactStartHr, mcmGcmTimerEntry=mcmGcmTimerEntry, mcmGcmGlobalCfgAutoActSelMode=mcmGcmGlobalCfgAutoActSelMode, mcmGcmTimerUnitIndex=mcmGcmTimerUnitIndex, nvmGcmLinkUnitIndex=nvmGcmLinkUnitIndex, nvmGcmLinkRowStatus=nvmGcmLinkRowStatus, nvmGcmTimerInactFriday=nvmGcmTimerInactFriday, nvmGcmBackupCfgLinkRowStatus=nvmGcmBackupCfgLinkRowStatus, mcmGcmUnitIndex=mcmGcmUnitIndex, mcmGcmTimerIndex=mcmGcmTimerIndex, mcmGcmBakLinkDownCausedByUnknownSource=mcmGcmBakLinkDownCausedByUnknownSource, nvmGcmUnitSwitchType=nvmGcmUnitSwitchType, nvmGcmUnitModeCfg=nvmGcmUnitModeCfg, nvmGcmTimerRowStatus=nvmGcmTimerRowStatus, nvmGcmLinkEntry=nvmGcmLinkEntry, mcmGcmLinkProtoStatus=mcmGcmLinkProtoStatus, nvmGcmUnitEntry=nvmGcmUnitEntry, mcmGcmTimerInactSaturday=mcmGcmTimerInactSaturday, nvmGcmUnitIndex=nvmGcmUnitIndex, nvmGcmTimerInactDurationHr=nvmGcmTimerInactDurationHr, mcmGcmBakLinkUp=mcmGcmBakLinkUp, nvmGcmTimerInactMonday=nvmGcmTimerInactMonday, nvmGcmBackupCfgIndex=nvmGcmBackupCfgIndex, nvmGcmGlobalCfgAutoActSelMode=nvmGcmGlobalCfgAutoActSelMode, nvmGcmLinkSigType=nvmGcmLinkSigType, mcmGcmBackupCfgTable=mcmGcmBackupCfgTable, mcmGcmBackupCfgLinkIndex=mcmGcmBackupCfgLinkIndex, mcmGcmUnitSwitchDelay=mcmGcmUnitSwitchDelay, nvmGcmTimerInactStartHr=nvmGcmTimerInactStartHr, mcmGcmUnitCmd=mcmGcmUnitCmd, nvmGcmTimerUnitIndex=nvmGcmTimerUnitIndex, mcmGcmHwStatusDesc=mcmGcmHwStatusDesc, nvmGcmUnitPrimaryLinkIndex=nvmGcmUnitPrimaryLinkIndex, mcmGcmTimerInactDurationHr=mcmGcmTimerInactDurationHr, nvmGcmLinkIndex=nvmGcmLinkIndex, mcmGcmHwStatusOperStatus=mcmGcmHwStatusOperStatus, mcmGcmLinkName=mcmGcmLinkName, nvmGcmTimerInactWednesday=nvmGcmTimerInactWednesday, mcmGcmBackupCfgIndex=mcmGcmBackupCfgIndex, mcmGcmTimerInactTuesday=mcmGcmTimerInactTuesday, nvmGcmUnitPrimarySwitchDelay=nvmGcmUnitPrimarySwitchDelay, mcmGcmTimerInactWednesday=mcmGcmTimerInactWednesday, mcmGcmRegionalLinkDown=mcmGcmRegionalLinkDown, nvmGcmUnitTable=nvmGcmUnitTable, mcmGcmUnitBackupRemainTime=mcmGcmUnitBackupRemainTime, nvmGcmTimerInactDurationMin=nvmGcmTimerInactDurationMin, mcmGcmLinkSigOperStatus=mcmGcmLinkSigOperStatus, mcmGcmBackupCfgEntry=mcmGcmBackupCfgEntry, micom_gcm=micom_gcm, mcmGcmHwStatusIndex=mcmGcmHwStatusIndex, mcmGcmBackupCfgUnitIndex=mcmGcmBackupCfgUnitIndex, nvmGcmUnitSwitchDelay=nvmGcmUnitSwitchDelay, mcmGcmHwStatusTable=mcmGcmHwStatusTable, nvmGcmBackupCfgLinkIndex=nvmGcmBackupCfgLinkIndex, mcmGcmLinkSigPcmIndex=mcmGcmLinkSigPcmIndex, nvmGcmUnitBackupRemainTime=nvmGcmUnitBackupRemainTime, mcmGcmTimerInactThursday=mcmGcmTimerInactThursday, nvmGcmGlobalCfgTraps=nvmGcmGlobalCfgTraps, nvmGcmLinkName=nvmGcmLinkName, mcmGcmUnitEntry=mcmGcmUnitEntry, nvmGcmUnitPriLinkFailMonDurMin=nvmGcmUnitPriLinkFailMonDurMin, nvmGcmBackupCfgEntry=nvmGcmBackupCfgEntry, mcmGcmBakLinkEst=mcmGcmBakLinkEst, nvmGcmTimerTable=nvmGcmTimerTable, mcmGCMPriLinkDownCausedByProtocolFailure=mcmGCMPriLinkDownCausedByProtocolFailure, mcmGcmLinkProtoType=mcmGcmLinkProtoType, mcmGcmTimerTable=mcmGcmTimerTable, mcmGcmUnitPriLinkFailMonCount=mcmGcmUnitPriLinkFailMonCount, nvmGcmGlobalCfgGroup=nvmGcmGlobalCfgGroup, nvmGcmLinkProtoPcmIndex=nvmGcmLinkProtoPcmIndex, mcmGcmGlobalCfgAdminStatus=mcmGcmGlobalCfgAdminStatus, mcmGcmTimerInactStartMin=mcmGcmTimerInactStartMin, nvmGcmUnitTimerAdminStatus=nvmGcmUnitTimerAdminStatus)
