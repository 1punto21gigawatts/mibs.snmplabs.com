#
# PySNMP MIB module Wellfleet-IPXA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-IPXA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Unsigned32, iso, MibIdentifier, TimeTicks, Gauge32, Integer32, ObjectIdentity, NotificationType, ModuleIdentity, IpAddress, Opaque, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "iso", "MibIdentifier", "TimeTicks", "Gauge32", "Integer32", "ObjectIdentity", "NotificationType", "ModuleIdentity", "IpAddress", "Opaque", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfIpxGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfIpxGroup")
wfIpxBasicSysTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15), )
if mibBuilder.loadTexts: wfIpxBasicSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysTable.setDescription('Wellfleet IPX Basic System Table')
wfIpxBasicSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxBasicSysInstance"))
if mibBuilder.loadTexts: wfIpxBasicSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysEntry.setDescription('An entry in the IPX Circ Table')
wfIpxBasicSysDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBasicSysDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete IPX.')
wfIpxBasicSysDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBasicSysDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable IPX.')
wfIpxBasicSysState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBasicSysState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysState.setDescription('The current state of the entire IPX Router.')
wfIpxBasicSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBasicSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysInstance.setDescription('The unique identifier for the instance of IPX.')
wfIpxBasicSysPrimaryNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBasicSysPrimaryNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysPrimaryNetworkNumber.setDescription("The 'internal' network number, used for IPXWAN")
wfIpxBasicSysMultipleHostAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBasicSysMultipleHostAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysMultipleHostAddresses.setDescription("Allow the user to configure one host/mac addr for the whole box (default) where, if configured, the CfgHostAddress is used (becomes HostAddress) otherwise if left unconfigured the Host address is discerned from the backplane serial number. If Multiple host is Enabled and the host number is configured in the interface record the configured value is used as the hostid/mac addr of the interface (except Token Ring which can't go into promiscous mode, uses Token Ring Mac as hostid/mac of interface). If the host number in left unconfigured then the hostid/mac is gotten from the mac of the circuit.")
wfIpxBasicSysCfgHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBasicSysCfgHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysCfgHostAddress.setDescription('Host Number of Router and potential MAC address of box. This host number will be used to overide the default box generated host address.')
wfIpxBasicSysHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBasicSysHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysHostAddress.setDescription('Host Number of Router and potential MAC address of box. This is not a restart variable because this will be filled in from the IPX code after reading it from either the configurable host number or from a box generated variable.')
wfIpxBasicSysRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxBasicSysRouterName.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysRouterName.setDescription('The Name of the Router, used for IPXWAN')
wfIpxBasicSysInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBasicSysInReceives.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysInReceives.setDescription('The total number of IPX packets received, including errors')
wfIpxBasicSysInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBasicSysInHdrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysInHdrErrors.setDescription('The number of IPX packets discarded due to errors in their headers, including any IPX packet with a size less than the minimum of 30 bytes')
wfIpxBasicSysInUnknownSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBasicSysInUnknownSockets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysInUnknownSockets.setDescription('The number of IPX packets discarded because the destination was the router and the socket was not known')
wfIpxBasicSysInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBasicSysInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysInDiscards.setDescription('The number of IPX packets received but discarded due to reasons other than those accounted for by wfIpxBasicSysInHdrErrors , wfIpxBasicSysInUnknownSockets, wfIpxBasicSysAdvSysInDiscards, and wfIpxAdvSysInCompressDiscards')
wfIpxBasicSysInBadChecksums = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBasicSysInBadChecksums.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysInBadChecksums.setDescription('The number of IPX packets received with incorrect checksums')
wfIpxBasicSysInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBasicSysInDelivers.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysInDelivers.setDescription('The number of IPX packets delivered locally')
wfIpxBasicSysNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBasicSysNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysNoRoutes.setDescription('The number of times no route to a destination was found')
wfIpxBasicSysOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBasicSysOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysOutRequests.setDescription('The number of IPX packets supplied locally for transmission, not including any packets counted in wfIpxAdvSysForwPackets')
wfIpxBasicSysOutMalformedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBasicSysOutMalformedRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysOutMalformedRequests.setDescription('The number of outgoing IPX packets discarded due to reasons other than those accounted for in wfIpxBasicSysOutMalformedRequest, wfIpxAdvSysOutFiltered, and wfIpxAdvSysOutCompressDiscards')
wfIpxBasicSysOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBasicSysOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysOutPackets.setDescription('The total number of IPX packets transmitted')
wfIpxBasicSysOpenEncapsFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBasicSysOpenEncapsFails.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysOpenEncapsFails.setDescription('The number of IPX encaps open calls which failed')
wfIpxBasicSysOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 15, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxBasicSysOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxBasicSysOutDiscards.setDescription('The number of outgoing IPX packets discarded due to reasons other than those accounted for by wfIpxBasicSysOutMalformedRequests, wfIpxBasicSysAdvSysOutFiltered, and wfIpxAdvSysOutCompressDiscards')
wfIpxAdvSysTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16), )
if mibBuilder.loadTexts: wfIpxAdvSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysTable.setDescription('Wellfleet IPX Advanced System Table')
wfIpxAdvSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxAdvSysInstance"))
if mibBuilder.loadTexts: wfIpxAdvSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysEntry.setDescription('An entry in the IPX Circ Table')
wfIpxAdvSysDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete the IPX advanced system group.')
wfIpxAdvSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAdvSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysInstance.setDescription('The unique identifier for the instance of IPX.')
wfIpxAdvSysRoutingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hop", 1), ("tick", 2))).clone('tick')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysRoutingMethod.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysRoutingMethod.setDescription('Choose either Tick or Hop based routing')
wfIpxAdvSysLogFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 16, 3, 17, 18, 19))).clone(namedValues=NamedValues(("debug", 1), ("info", 2), ("trace", 16), ("debuginfo", 3), ("debugtrace", 17), ("infotrace", 18), ("debuginfotrace", 19))).clone('trace')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysLogFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysLogFilter.setDescription('Filter out some log messages, Default filters out trace messages.')
wfIpxAdvSysMaximumPath = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysMaximumPath.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysMaximumPath.setDescription('Declare Maximum number of paths stored for a given destination network')
wfIpxAdvSysMaxPathSplits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysMaxPathSplits.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysMaxPathSplits.setDescription('A non-zero value enables load sharing between equal cost paths with the best metric when forwarding packets')
wfIpxAdvSysMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 7), Integer32().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysMaxHops.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysMaxHops.setDescription('The maximum number of hops a packet may take')
wfIpxAdvSysInTooManyHops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAdvSysInTooManyHops.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysInTooManyHops.setDescription('The number of IPX packets discarded due to exceeding the maximum hop count.')
wfIpxAdvSysInFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAdvSysInFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysInFiltered.setDescription('The number of incoming IPX packets discarded due to filtering, not including those counted in wfIpxTrafficFilterCounter')
wfIpxAdvSysInCompressDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAdvSysInCompressDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysInCompressDiscards.setDescription('Then number of incoming IPX packets discarded due to decompression errors.')
wfIpxAdvSysNETBIOSPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAdvSysNETBIOSPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysNETBIOSPackets.setDescription('The number of NETBIOS packets received')
wfIpxAdvSysForwPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAdvSysForwPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysForwPackets.setDescription('The number of IPX packets forwarded')
wfIpxAdvSysOutFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAdvSysOutFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysOutFiltered.setDescription('The number of outgoing IPX packets discarded due to filtering')
wfIpxAdvSysOutCompressDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAdvSysOutCompressDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysOutCompressDiscards.setDescription('The number of outgoing IPX packets discarded due to compression errors')
wfIpxAdvSysNovellCertificationConformanceDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysNovellCertificationConformanceDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysNovellCertificationConformanceDisable.setDescription('enable/disable Novell certification, disable/enable Wellfleet specifics')
wfIpxAdvSysCircCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAdvSysCircCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysCircCount.setDescription('The number of IPX Circuits (interfaces).')
wfIpxAdvSysCfgDestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysCfgDestCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysCfgDestCount.setDescription('A value indicating the maximum destinations (networks) that the user expects the router to learn. This is used to pre-allocate table sizes for network tables. Changing this value can greatly effect the memory used by IPX, however it can also speed learning times.')
wfIpxAdvSysDestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAdvSysDestCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysDestCount.setDescription('The number of currently reachable destinations known to IPX')
wfIpxAdvSysCfgServCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysCfgServCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysCfgServCount.setDescription('A value indicating the maximum services that the user expects the router to learn. This is used to pre-allocate table sizes for service tables. Changing this value can greatly effect the memory used by IPX, however it can also speed learning times.')
wfIpxAdvSysServCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAdvSysServCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysServCount.setDescription('The number of currently reachable services known to IPX')
wfIpxAdvSysCfgHostCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysCfgHostCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysCfgHostCount.setDescription('A value indicating the maximum next hop hosts that the user expects the router to learn. This is used to pre-allocate table sizes for host tables. Changing this value can greatly effect the memory used by IPX, however it can also speed learning times.')
wfIpxAdvSysHostCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAdvSysHostCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysHostCount.setDescription('The number of currently reachable hosts known to IPX')
wfIpxAdvSysAgingFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 23), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysAgingFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysAgingFrequency.setDescription('The frequency, in seconds, for aging RIP and SAP information.')
wfIpxAdvSysAgingPendingFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 24), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysAgingPendingFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysAgingPendingFrequency.setDescription('The number of routes and services to age before pending.')
wfIpxAdvSysDefaultRouteEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysDefaultRouteEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysDefaultRouteEnable.setDescription('This parameter indicates whether or not default route is used for unknown networks.')
wfIpxAdvSysSapViaDefaultRouteEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysSapViaDefaultRouteEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysSapViaDefaultRouteEnable.setDescription('This parameter indicates whether or not a SAP advertisement can be learned from an interface if the network number advertised in the SAP advertisement is unreachable but default route is accessible from that interface. Note that the router may not be compatible with other router implementations when this feature is enabled.')
wfIpxAdvSysCT = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysCT.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysCT.setDescription('The NLSP Certification Test compatibility flag.')
wfIpxAdvSysMibReplySlots = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysMibReplySlots.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysMibReplySlots.setDescription('The slots running IPX which should reply to MIB Proxy requests')
wfIpxAdvSysGNSRespMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alphabetical", 1), ("lastlearned", 2))).clone('alphabetical')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysGNSRespMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysGNSRespMode.setDescription('Algorithm used to determine the server to choose when responding to a Get Nearest Server Request')
wfIpxAdvSysMaxNetTblSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysMaxNetTblSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysMaxNetTblSize.setDescription('maximum allowed size of the network table')
wfIpxAdvSysNetTblFillNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysNetTblFillNotify.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysNetTblFillNotify.setDescription('notify when (configured) percentage is reached')
wfIpxAdvSysGlobalTrigUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysGlobalTrigUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysGlobalTrigUpdate.setDescription('enable/disable triggered rip/sap updates box wide.')
wfIpxAdvSysTrigUpdateDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysTrigUpdateDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysTrigUpdateDelay.setDescription('Delay before performing immediate update (10ths)')
wfIpxAdvSysLostRouteDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 16, 1, 34), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAdvSysLostRouteDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAdvSysLostRouteDelay.setDescription('Delay before performing lost route algorithm (10ths)')
wfIpxCircTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17), )
if mibBuilder.loadTexts: wfIpxCircTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircTable.setDescription('Wellfleet IPX Circuit Table')
wfIpxCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxCircSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxCircIndex"))
if mibBuilder.loadTexts: wfIpxCircEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircEntry.setDescription('An entry in the IPX Circuit Table')
wfIpxCircDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this entry.')
wfIpxCircDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an entry.')
wfIpxCircState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircState.setDescription('The current state of this entry')
wfIpxCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircIndex.setDescription('The identifier of this circuit, unique within the instance of RIP. This value corresponds to the IPX circuit identifier found in wfIpxCircIndex.')
wfIpxCircIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircIfIndex.setDescription('The identifier of the DP circuit to which this IPX circuit is linked.')
wfIpxCircName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircName.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircName.setDescription('The Name of this IPX circuit')
wfIpxCircCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128))).clone(namedValues=NamedValues(("other", 1), ("broadcast", 2), ("pt", 4), ("wanrip", 8), ("unnumberedrip", 16), ("dynamic", 32), ("ws", 64), ("nlsp", 128))).clone('dynamic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircCfgType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCfgType.setDescription('The type assigned by the user to this IPX circuit. To enable IPXWAN negotiations on this (WAN) circuit, set one or more of WAN_RIP, UNNUMBERED_RIP, and WAN_NLSP.')
wfIpxCircLocalMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircLocalMaxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircLocalMaxPacketSize.setDescription('The maximum size (including header), in bytes that the media supports on this DP circuit.')
wfIpxCircCfgCompressState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircCfgCompressState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCfgCompressState.setDescription('The configured compression state of this IPX circuit.')
wfIpxCircCompressState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircCompressState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCompressState.setDescription('The actual compression state on this IPX circuit.')
wfIpxCircCompressSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 12), Integer32().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircCompressSlots.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCompressSlots.setDescription('The number of compression slots available on this circuit.')
wfIpxCircCompressedSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircCompressedSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCompressedSent.setDescription('The number of compressed packets sent.')
wfIpxCircCompressedInitSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircCompressedInitSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCompressedInitSent.setDescription('The number of compression initialization packets sent.')
wfIpxCircCompressedRejectsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircCompressedRejectsSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCompressedRejectsSent.setDescription('The number of compressed packet rejected packets sent.')
wfIpxCircUncompressedSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircUncompressedSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircUncompressedSent.setDescription('The number of uncompressed packets sent without being compressed even though compression was turned on for this IPX circuit.')
wfIpxCircCompressedReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircCompressedReceived.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCompressedReceived.setDescription('The number of compressed packets received.')
wfIpxCircCompressedInitReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircCompressedInitReceived.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCompressedInitReceived.setDescription('The number of compression initialization packets received.')
wfIpxCircCompressedRejectsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircCompressedRejectsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCompressedRejectsReceived.setDescription('The number of compressed packet rejected packets received.')
wfIpxCircUncompressedReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircUncompressedReceived.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircUncompressedReceived.setDescription('The number of packets received without having been compressed even though compression was turned on for this IPX circuit.')
wfIpxCircMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircMediaType.setDescription('The media type used on this IPX circuit.')
wfIpxCircCfgNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircCfgNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCfgNetworkNumber.setDescription('The IPX network number assigned by the user to this IPX circuit.')
wfIpxCircNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircNetworkNumber.setDescription('The IPX network number of this IPX circuit.')
wfIpxCircCommonNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 24), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircCommonNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCommonNetworkNumber.setDescription('The IPX common network number assigned to this IPX circuit.')
wfIpxCircCfgHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircCfgHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCfgHostAddress.setDescription('The IPX Host Address assigned by the user to this IPX circuit.')
wfIpxCircHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircHostAddress.setDescription('The IPX Host Address of this IPX circuit.')
wfIpxCircMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircMacAddress.setDescription('The IPX Host Address of this IPX circuit.')
wfIpxCircCfgBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircCfgBroadcastAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCfgBroadcastAddress.setDescription('The Broadcast Address assigned by the user to this IPX circuit.')
wfIpxCircBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircBroadcastAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircBroadcastAddress.setDescription('The Broadcast Address of this IPX circuit.')
wfIpxCircCfgMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircCfgMulticastAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCfgMulticastAddress.setDescription('The Multicast Address assigned by the user to this IPX circuit.')
wfIpxCircMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircMulticastAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircMulticastAddress.setDescription('The Multicast Address of this IPX circuit.')
wfIpxCircStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircStateChanges.setDescription('The number of times this IPX circuit has changed state.')
wfIpxCircInitFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircInitFails.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircInitFails.setDescription('The number of times that initialization of this circuit has failed.')
wfIpxCircDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircDelay.setDescription('The period of time, in microseconds, that it takes to transmit one byte of data, excluding protocol headers, to a destination on the other end of this IPX circuit, if the IPX circuit is free of other traffic. This value will be filled in by IPX to be either the value configured or a computed value.')
wfIpxCircThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircThroughput.setDescription('The amount of data, in bits per second, that may flow through this IPX circuit if there is no other traffic. This value will be filled in by IPX to be either the value configured or a computed value.')
wfIpxCircNeighRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircNeighRouterName.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircNeighRouterName.setDescription('The name of the neighboring router on a IPXWAN circuit.')
wfIpxCircNeighInternalNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircNeighInternalNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircNeighInternalNetNum.setDescription('The internal network number of the neighboring router on an IPXWAN circuit.')
wfIpxCircCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCost.setDescription('The cost of this interface, in ticks or hops dependant on the wfIpxAdvSysRoutingMethod field.')
wfIpxCircChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircChecksum.setDescription('Whether or not to check checksums of packets coming into this IPX circuit.')
wfIpxCircCfgEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ethernet", 1), ("lsap", 2), ("novell", 3), ("snap", 4), ("ppp", 5))).clone('ethernet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircCfgEncaps.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCfgEncaps.setDescription('The encapsulation assigned by the user to this IPX circuit.')
wfIpxCircEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ethernet", 1), ("lsap", 2), ("novell", 3), ("snap", 4), ("ppp", 5))).clone('ethernet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircEncaps.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircEncaps.setDescription('The encapsulation used on this IPX circuit.')
wfIpxCircInTooManyHops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircInTooManyHops.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircInTooManyHops.setDescription('The number of IPX packets discarded due to exceeding the maximum hops count set for this IPX circuit.')
wfIpxCircInFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircInFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircInFiltered.setDescription('The number of incoming IPX packets discarded due to filtering, not including those counted in wfIpxTrafficFilterCounter.')
wfIpxCircInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircInHdrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircInHdrErrors.setDescription('The number of IPX packets discarded due to errors in their headers, including any IPX packet with a size less than the minimum of 30 bytes.')
wfIpxCircInUnknownSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircInUnknownSockets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircInUnknownSockets.setDescription('The number of IPX packets discarded because the destination socket was not known.')
wfIpxCircNETBIOSPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircNETBIOSPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircNETBIOSPackets.setDescription('The number of NETBIOS packets received on this IPX circuit.')
wfIpxCircInBadChecksums = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircInBadChecksums.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircInBadChecksums.setDescription('The number of IPX packets discarded because the checksum was incorrect.')
wfIpxCircInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircInDelivers.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircInDelivers.setDescription('The number of IPX packets delivered locally')
wfIpxCircInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircInDiscards.setDescription('The number of IPX packets received but discarded due to reasons other than those accounted for by wfIpxCircInHdrErrors, wfIpxCircInUnknownSockets')
wfIpxCircNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircNoRoutes.setDescription('The number of times no route to a destination was found.')
wfIpxCircOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircOutRequests.setDescription('The number of IPX packets supplied locally for transmission.')
wfIpxCircOutMalformedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircOutMalformedRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircOutMalformedRequests.setDescription('The number of IPX packets supplied locally that contained errors in their structure.')
wfIpxCircOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircOutDiscards.setDescription('The number of outgoing IPX packets discarded due to reasons other than those accounted for in')
wfIpxCircOutFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircOutFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircOutFiltered.setDescription('The number of outgoing IPX packets diecarded due to filtering.')
wfIpxCircDestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircDestCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircDestCount.setDescription('The number of networks known to the IPX router from this IPX circuit.')
wfIpxCircServCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircServCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircServCount.setDescription('The number of services known to the IPX router from this IPX circuit.')
wfIpxCircHostCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircHostCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircHostCount.setDescription('The number of hosts known to the IPX router from this IPX circuit.')
wfIpxCircForwardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircForwardCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircForwardCount.setDescription('The number of forward entries in the IPX router forwarding table for this IPX circuit.')
wfIpxCircTrEndStation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircTrEndStation.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircTrEndStation.setDescription('Whether or not to do Source Routing, only valid on token ring media.')
wfIpxCircNetbiosAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircNetbiosAccept.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircNetbiosAccept.setDescription('Accept NetBios All Networks Broadcast Packets')
wfIpxCircNetbiosDeliver = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircNetbiosDeliver.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircNetbiosDeliver.setDescription('Deliver NetBios All Networks Broadcast Packets')
wfIpxCircSMDSIndividualAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 62), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircSMDSIndividualAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircSMDSIndividualAddress.setDescription('The SMDS individual address for this IPX circuit.')
wfIpxCircType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("broadcast", 2), ("pt", 3), ("wanrip", 4), ("unnumberedrip", 5), ("dynamic", 6), ("ws", 7), ("nlsp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircType.setDescription('The type of the circuit. If IPXWAN was enabled on this circuit, this attribute will indicate the negotiated routing type.')
wfIpxCircWatchdogSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircWatchdogSpoof.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircWatchdogSpoof.setDescription('Whether or not to do Watchdog Spoofing.')
wfIpxCircIPXOutWatchdogSpoofRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircIPXOutWatchdogSpoofRsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircIPXOutWatchdogSpoofRsps.setDescription('The number of Watchdog response packets sent to IPX servers in response to Watchdog queries.')
wfIpxCircCfgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 66), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircCfgDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCfgDelay.setDescription('The period of time, in microseconds, that it takes to transmit one byte of data, excluding protocol headers, to a destination on the other end of this IPX circuit, if the IPX circuit is free of other traffic. This value is assigned by the user.')
wfIpxCircCfgThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 67), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircCfgThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircCfgThroughput.setDescription('The amount of data, in bits per second, that may flow through this IPX circuit if there is no other traffic. This value is assigned by the user.')
wfIpxCircSPXOutWatchdogSpoofRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircSPXOutWatchdogSpoofRsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircSPXOutWatchdogSpoofRsps.setDescription('The number of SPX Watchdog response packets sent to SPX endpoint in response to Watchdog requests.')
wfIpxCircInitStabilizationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 69), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircInitStabilizationTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircInitStabilizationTimer.setDescription('The circuit RIP/SAP start delay timer to allow routes to stabilize, in seconds')
wfIpxCircSVCBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxCircSVCBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircSVCBroadcast.setDescription('Enable if Frame Relay SVCs should be established for all adjacent hosts before sending RIP and SAP updates.')
wfIpxCircVRRPTriggerState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 17, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxCircVRRPTriggerState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxCircVRRPTriggerState.setDescription('Indicates whether VRRP subsystem wants this IPX Intf to be enabled or disabled.')
wfIpxDestEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 18), )
if mibBuilder.loadTexts: wfIpxDestEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxDestEntryTable.setDescription('IPX Dest table, contains information about all known destinations.')
wfIpxDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 18, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxDestSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxDestNetNum"))
if mibBuilder.loadTexts: wfIpxDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxDestEntry.setDescription('Destination table contains information about all known destinations')
wfIpxDestSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxDestSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxDestSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxDestNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 18, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxDestNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxDestNetNum.setDescription('The identifier of this circuit, unique within the instance. This value corresponds to the IPX circuit identifier found in wfIpxCircIndex.')
wfIpxDestProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("rip", 3), ("nlsp", 4), ("static", 5))).clone('other')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxDestProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxDestProtocol.setDescription('The routing protocol from which knowledge of this destination was obtained.')
wfIpxDestTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxDestTicks.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxDestTicks.setDescription('The delay in ticks to reach this destination.')
wfIpxDestHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 18, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxDestHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxDestHopCount.setDescription('The number of hops necessary to reach the destination.')
wfIpxDestNextHopCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 18, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxDestNextHopCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxDestNextHopCircIndex.setDescription('The unique identifier of the IPX circuit used to reach the next hop.')
wfIpxDestNextHopHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 18, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxDestNextHopHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxDestNextHopHostAddress.setDescription('The Host address of the Next Hop.')
wfIpxDestNextHopNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 18, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxDestNextHopNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxDestNextHopNetNum.setDescription('The IPX network number of the next hop.')
wfIpxDestAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 18, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxDestAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxDestAge.setDescription('The current age of this entry, in seconds. Local, Static, and NLSP destinations are not aged.')
wfIpxUserStaticRouteEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 19), )
if mibBuilder.loadTexts: wfIpxUserStaticRouteEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticRouteEntryTable.setDescription('Wellfleet IPX Static Route Table')
wfIpxUserStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 19, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxUserStaticRouteSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxUserStaticRouteCircIndex"), (0, "Wellfleet-IPXA-MIB", "wfIpxUserStaticRouteNetNum"))
if mibBuilder.loadTexts: wfIpxUserStaticRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticRouteEntry.setDescription('The Static Routes table contains information about all destinations reached via user statically configured routes.')
wfIpxUserStaticRouteDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxUserStaticRouteDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticRouteDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this entry.')
wfIpxUserStaticRouteDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxUserStaticRouteDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticRouteDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an entry.')
wfIpxUserStaticRouteSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxUserStaticRouteSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticRouteSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxUserStaticRouteCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxUserStaticRouteCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticRouteCircIndex.setDescription('The identifier of this circuit, unique within the instance of RIP. This value corresponds to the IPX circuit identifier found in wfIpxCircIndex.')
wfIpxUserStaticRouteNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 19, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxUserStaticRouteNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticRouteNetNum.setDescription('The network number of this static route.')
wfIpxUserStaticRouteTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 19, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxUserStaticRouteTicks.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticRouteTicks.setDescription('The cost in ticks of this static route entry.')
wfIpxUserStaticRouteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 19, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxUserStaticRouteHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticRouteHopCount.setDescription('The hop count to this static route.')
wfIpxUserStaticRouteNextHopHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 19, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxUserStaticRouteNextHopHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticRouteNextHopHostAddress.setDescription('The next hop host address of this entry')
wfIpxAutoStaticRouteEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 20), )
if mibBuilder.loadTexts: wfIpxAutoStaticRouteEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticRouteEntryTable.setDescription('Wellfleet IPX Automatic Static Route Table')
wfIpxAutoStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 20, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxAutoStaticRouteSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxAutoStaticRouteCircIndex"), (0, "Wellfleet-IPXA-MIB", "wfIpxAutoStaticRouteNetNum"))
if mibBuilder.loadTexts: wfIpxAutoStaticRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticRouteEntry.setDescription('The Auto Static Routes table contains information about all destinations reached via Auto statically configured routes.')
wfIpxAutoStaticRouteDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAutoStaticRouteDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticRouteDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this entry.')
wfIpxAutoStaticRouteDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAutoStaticRouteDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticRouteDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an entry.')
wfIpxAutoStaticRouteSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticRouteSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticRouteSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxAutoStaticRouteCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticRouteCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticRouteCircIndex.setDescription('The identifier of this circuit, unique within the instance of RIP. This value corresponds to the IPX circuit identifier found in wfIpxCircIndex.')
wfIpxAutoStaticRouteNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 20, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticRouteNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticRouteNetNum.setDescription('The network number of this static route.')
wfIpxAutoStaticRouteTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticRouteTicks.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticRouteTicks.setDescription('The cost in ticks of this static route entry.')
wfIpxAutoStaticRouteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 20, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticRouteHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticRouteHopCount.setDescription('The hop count to this static route.')
wfIpxAutoStaticRouteNextHopHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 20, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticRouteNextHopHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticRouteNextHopHostAddress.setDescription('The next hop host address of this entry')
wfIpxStaticRouteMaskEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 21), )
if mibBuilder.loadTexts: wfIpxStaticRouteMaskEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticRouteMaskEntryTable.setDescription('Wellfleet IPX Static Route Mask Table')
wfIpxStaticRouteMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 21, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxStaticRouteMaskSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxStaticRouteMaskCircIndex"), (0, "Wellfleet-IPXA-MIB", "wfIpxStaticRouteMaskNetwork"), (0, "Wellfleet-IPXA-MIB", "wfIpxStaticRouteMaskNetworkMask"))
if mibBuilder.loadTexts: wfIpxStaticRouteMaskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticRouteMaskEntry.setDescription('The static route mask table only allows auto static route entries to be made when the net fits the netmask.')
wfIpxStaticRouteMaskDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxStaticRouteMaskDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticRouteMaskDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this entry.')
wfIpxStaticRouteMaskDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxStaticRouteMaskDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticRouteMaskDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an entry.')
wfIpxStaticRouteMaskSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticRouteMaskSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticRouteMaskSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxStaticRouteMaskCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticRouteMaskCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticRouteMaskCircIndex.setDescription('The identifier of this circuit, unique within the instance of RIP. This value corresponds to the IPX circuit identifier found in wfIpxCircIndex.')
wfIpxStaticRouteMaskNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 21, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticRouteMaskNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticRouteMaskNetwork.setDescription('The network')
wfIpxStaticRouteMaskNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 21, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticRouteMaskNetworkMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticRouteMaskNetworkMask.setDescription('The network mask.')
wfIpxServEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 22), )
if mibBuilder.loadTexts: wfIpxServEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServEntryTable.setDescription('Wellfleet IPX service Table')
wfIpxServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 22, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxServSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxServType"), (0, "Wellfleet-IPXA-MIB", "wfIpxServName"))
if mibBuilder.loadTexts: wfIpxServEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServEntry.setDescription("Table of services, indexed by type and name. NOTE: In the instance id wfIpxServName is prefixed by the service name's length.")
wfIpxServSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxServType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 22, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServType.setDescription('The Service type.')
wfIpxServName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 22, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServName.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServName.setDescription('The Service name. NOTE: This is a variable length field, 2-47 chars.')
wfIpxServProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("nlsp", 4), ("static", 5), ("sap", 6))).clone('other')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServProtocol.setDescription('The protocol from which knowledge of service was obtained.')
wfIpxServNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 22, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetNum.setDescription('The IPX network number portion of the IPX address of the service.')
wfIpxServNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 22, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServNode.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNode.setDescription('The node portion of the IPX address of the service.')
wfIpxServSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 22, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServSocket.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServSocket.setDescription('The socket portion of the IPX address of the service.')
wfIpxServHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 22, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServHopCount.setDescription('The number of hops to the service.')
wfIpxServNextHopCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 22, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServNextHopCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNextHopCircIndex.setDescription('The unique identifier of the IPX circuit used to reach the next hop.')
wfIpxServNextHopHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 22, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServNextHopHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNextHopHostAddress.setDescription('The Host address of the Next Hop.')
wfIpxServNextHopNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 22, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServNextHopNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNextHopNetNum.setDescription('The IPX network number of the next hop.')
wfIpxServAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 22, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServAge.setDescription('The current age of this entry, in seconds. Local, Static, and NLSP services are not aged.')
wfIpxUserStaticServEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 23), )
if mibBuilder.loadTexts: wfIpxUserStaticServEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticServEntryTable.setDescription('Wellfleet IPX User Static Service Table')
wfIpxUserStaticServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 23, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxUserStaticServSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxUserStaticServCircIndex"), (0, "Wellfleet-IPXA-MIB", "wfIpxUserStaticServName"), (0, "Wellfleet-IPXA-MIB", "wfIpxUserStaticServType"))
if mibBuilder.loadTexts: wfIpxUserStaticServEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticServEntry.setDescription("The Static Servs table contains information about all destinations reached via user statically configured Servs. NOTE: In the instance id wfIpxUserStaticServName is prefixed by the service name's length.")
wfIpxUserStaticServDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxUserStaticServDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticServDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this entry.')
wfIpxUserStaticServDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxUserStaticServDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticServDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an entry.')
wfIpxUserStaticServSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 23, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxUserStaticServSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticServSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxUserStaticServCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 23, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxUserStaticServCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticServCircIndex.setDescription('The identifier of this circuit, unique within the instance of RIP. This value corresponds to the IPX circuit identifier found in wfIpxCircIndex.')
wfIpxUserStaticServName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 23, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxUserStaticServName.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticServName.setDescription('The service name. NOTE: This is a variable length field, 2-47 chars.')
wfIpxUserStaticServType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 23, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxUserStaticServType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticServType.setDescription('The service type.')
wfIpxUserStaticServNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 23, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxUserStaticServNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticServNetNum.setDescription('The network number of this static service.')
wfIpxUserStaticServHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 23, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxUserStaticServHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticServHostAddress.setDescription('The host address of this static service.')
wfIpxUserStaticServSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 23, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxUserStaticServSocket.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticServSocket.setDescription('The socket of this static service.')
wfIpxUserStaticServHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 23, 1, 10), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxUserStaticServHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticServHopCount.setDescription('The hop count of this static service.')
wfIpxAutoStaticServEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 24), )
if mibBuilder.loadTexts: wfIpxAutoStaticServEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticServEntryTable.setDescription('Wellfleet IPX Auto Static Service Table')
wfIpxAutoStaticServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 24, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxAutoStaticServSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxAutoStaticServCircIndex"), (0, "Wellfleet-IPXA-MIB", "wfIpxAutoStaticServName"), (0, "Wellfleet-IPXA-MIB", "wfIpxAutoStaticServType"))
if mibBuilder.loadTexts: wfIpxAutoStaticServEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticServEntry.setDescription("The Static Servs table contains information about all destinations reached via Auto statically configured Servs. NOTE: In the instance id wfIpxAutoStaticServName is prefixed by the service name's length.")
wfIpxAutoStaticServDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAutoStaticServDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticServDelete.setDescription('Create/Delete parameter. Default is created. Autos perform an SNMP SET operation on this object in order to create/delete this entry.')
wfIpxAutoStaticServDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAutoStaticServDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticServDisable.setDescription('Enable/Disable parameter. Default is enabled. Autos perform an SNMP SET operation on this object in order to enable/disable an entry.')
wfIpxAutoStaticServSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 24, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticServSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticServSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxAutoStaticServCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticServCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticServCircIndex.setDescription('The identifier of this circuit, unique within the instance of RIP. This value corresponds to the IPX circuit identifier found in wfIpxCircIndex.')
wfIpxAutoStaticServName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 24, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticServName.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticServName.setDescription('The service name. NOTE: This is a variable length field, 2-47 chars.')
wfIpxAutoStaticServType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 24, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticServType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticServType.setDescription('The service type.')
wfIpxAutoStaticServNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 24, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticServNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticServNetNum.setDescription('The network number of this static service.')
wfIpxAutoStaticServHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 24, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticServHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticServHostAddress.setDescription('The host address of this static service.')
wfIpxAutoStaticServSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 24, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticServSocket.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticServSocket.setDescription('The socket of this static service.')
wfIpxAutoStaticServHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 24, 1, 10), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticServHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticServHopCount.setDescription('The hop count of this static service.')
wfIpxStaticServMaskEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 25), )
if mibBuilder.loadTexts: wfIpxStaticServMaskEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticServMaskEntryTable.setDescription('Wellfleet IPX Static Service Mask Table')
wfIpxStaticServMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 25, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxStaticServMaskSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxStaticServMaskCircIndex"), (0, "Wellfleet-IPXA-MIB", "wfIpxStaticServMaskNetwork"), (0, "Wellfleet-IPXA-MIB", "wfIpxStaticServMaskNetworkMask"))
if mibBuilder.loadTexts: wfIpxStaticServMaskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticServMaskEntry.setDescription('The Static Servs table contains information about all destinations reached via Auto statically configured Servs.')
wfIpxStaticServMaskDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxStaticServMaskDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticServMaskDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this entry.')
wfIpxStaticServMaskDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxStaticServMaskDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticServMaskDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an entry.')
wfIpxStaticServMaskSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 25, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticServMaskSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticServMaskSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxStaticServMaskCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 25, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticServMaskCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticServMaskCircIndex.setDescription('The identifier of this circuit, unique within the instance of RIP. This value corresponds to the IPX circuit identifier found in wfIpxCircIndex.')
wfIpxStaticServMaskNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 25, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticServMaskNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticServMaskNetwork.setDescription('The network')
wfIpxStaticServMaskNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 25, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticServMaskNetworkMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticServMaskNetworkMask.setDescription('The network mask.')
wfIpxStaticHostEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 26), )
if mibBuilder.loadTexts: wfIpxStaticHostEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticHostEntryTable.setDescription('Wellfleet IPX Static Host Table')
wfIpxStaticHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 26, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxStaticHostSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxStaticHostCircIndex"), (0, "Wellfleet-IPXA-MIB", "wfIpxStaticHostAddress"))
if mibBuilder.loadTexts: wfIpxStaticHostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticHostEntry.setDescription('The static host entries define mappings from circindex and host address to wan physical layer address.')
wfIpxStaticHostDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxStaticHostDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticHostDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this entry.')
wfIpxStaticHostDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxStaticHostDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticHostDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an entry.')
wfIpxStaticHostSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 26, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticHostSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticHostSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxStaticHostCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 26, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticHostCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticHostCircIndex.setDescription('The identifier of this circuit, unique within the instance of RIP. This value corresponds to the IPX circuit identifier found in wfIpxCircIndex.')
wfIpxStaticHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 26, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxStaticHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticHostAddress.setDescription('The host address of this static host.')
wfIpxStaticHostWanAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 26, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxStaticHostWanAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticHostWanAddress.setDescription('The wan address of this host.')
wfIpxStaticHostSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 26, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxStaticHostSubaddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticHostSubaddress.setDescription('The subaddress used to establish an SVC to the adjacent host.')
wfIpxStaticHostTypeOfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("international", 2))).clone('international')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxStaticHostTypeOfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticHostTypeOfNumber.setDescription('The type of number used to establish an SVC to the adjacent host.')
wfIpxStaticHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 26, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fre164", 1), ("default", 2), ("frx121", 3), ("frdlci", 4), ("gre", 5), ("atmsvc", 6))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxStaticHostType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticHostType.setDescription('The type of static host.')
wfIpxStaticHostGreConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 26, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxStaticHostGreConnName.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxStaticHostGreConnName.setDescription('The name of the remote GRE connection to which a static host is configured.')
wfIpxUserStaticNETBIOSTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 27), )
if mibBuilder.loadTexts: wfIpxUserStaticNETBIOSTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticNETBIOSTable.setDescription('Wellfleet IPX User Static NetBIOS Route Table')
wfIpxUserStaticNETBIOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 27, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxUserStaticNETBIOSSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxUserStaticNETBIOSName"))
if mibBuilder.loadTexts: wfIpxUserStaticNETBIOSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticNETBIOSEntry.setDescription('Contains entries that map NetBIOS names to destination addresses.')
wfIpxUserStaticNETBIOSDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxUserStaticNETBIOSDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticNETBIOSDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this entry.')
wfIpxUserStaticNETBIOSDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxUserStaticNETBIOSDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticNETBIOSDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an entry.')
wfIpxUserStaticNETBIOSSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 27, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxUserStaticNETBIOSSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticNETBIOSSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxUserStaticNETBIOSName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 27, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxUserStaticNETBIOSName.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticNETBIOSName.setDescription('The destination name for this NetBIOS static route.')
wfIpxUserStaticNETBIOSDestNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 27, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxUserStaticNETBIOSDestNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxUserStaticNETBIOSDestNetwork.setDescription('The destination network for this NetBIOS static route.')
wfIpxAutoStaticNETBIOSTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 28), )
if mibBuilder.loadTexts: wfIpxAutoStaticNETBIOSTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticNETBIOSTable.setDescription('Wellfleet IPX Auto Static NetBIOS Route Table')
wfIpxAutoStaticNETBIOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 28, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxAutoStaticNETBIOSSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxAutoStaticNETBIOSDestNetwork"))
if mibBuilder.loadTexts: wfIpxAutoStaticNETBIOSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticNETBIOSEntry.setDescription('Contains entries that map NetBIOS names to destination addresses.')
wfIpxAutoStaticNETBIOSDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAutoStaticNETBIOSDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticNETBIOSDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this entry.')
wfIpxAutoStaticNETBIOSDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxAutoStaticNETBIOSDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticNETBIOSDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an entry.')
wfIpxAutoStaticNETBIOSSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 28, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticNETBIOSSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticNETBIOSSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxAutoStaticNETBIOSDestNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 28, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticNETBIOSDestNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticNETBIOSDestNetwork.setDescription('The destination network for this NetBIOS static route.')
wfIpxAutoStaticNETBIOSName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 28, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxAutoStaticNETBIOSName.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxAutoStaticNETBIOSName.setDescription('The destination name for this NetBIOS static route.')
wfIpxRouteFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 29), )
if mibBuilder.loadTexts: wfIpxRouteFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRouteFilterTable.setDescription('Wellfleet IPX Route Filter Table')
wfIpxRouteFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 29, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxRouteFilterSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxRouteFilterCircIndex"), (0, "Wellfleet-IPXA-MIB", "wfIpxRouteFilterRuleNumber"))
if mibBuilder.loadTexts: wfIpxRouteFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRouteFilterEntry.setDescription('Each entry corresponds to one filter.')
wfIpxRouteFilterDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 29, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRouteFilterDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRouteFilterDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this entry.')
wfIpxRouteFilterDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 29, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRouteFilterDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRouteFilterDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an entry.')
wfIpxRouteFilterSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 29, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxRouteFilterSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRouteFilterSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxRouteFilterCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 29, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxRouteFilterCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRouteFilterCircIndex.setDescription('The identifier of this circuit, unique within the instance of IPX. This value corresponds to the IPX circuit identifier found in wfIpxCircIndex.')
wfIpxRouteFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 29, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxRouteFilterRuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRouteFilterRuleNumber.setDescription('The identifier of the filter, unique within the IPX circuit.')
wfIpxRouteFilterNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 29, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRouteFilterNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRouteFilterNetwork.setDescription('The network')
wfIpxRouteFilterNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 29, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRouteFilterNetworkMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRouteFilterNetworkMask.setDescription('The network mask')
wfIpxRouteFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 29, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outbound", 1), ("inbound", 2), ("both", 3))).clone('outbound')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRouteFilterMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRouteFilterMode.setDescription('The mode for filtering, Inbound, Outbound, or Both.')
wfIpxRouteFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 29, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("advertise", 1), ("suppress", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRouteFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRouteFilterAction.setDescription('The action for the filter.')
wfIpxRouteFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 29, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("local", 2), ("rip", 3), ("nlsp", 4), ("static", 5))).clone('any')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRouteFilterProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRouteFilterProtocol.setDescription('Apply this filter only to routes learned on protocol X when sending RIP updates. Does not apply to Inbound routes. A value of 1 (default) represents any protocol.')
wfIpxRouteFilterCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 29, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRouteFilterCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRouteFilterCost.setDescription("Cost for routes matching this filter. A Zero cost indicates that the route's actual cost should be used. Value only used when action is Advertise.")
wfIpxRouteFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 29, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxRouteFilterCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRouteFilterCounter.setDescription('The number of packets matching this filter.')
wfIpxRouteFilterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 29, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRouteFilterPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRouteFilterPriority.setDescription('Priority of this filter in relation to other filters of the same type.')
wfIpxServNetFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 30), )
if mibBuilder.loadTexts: wfIpxServNetFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetFilterTable.setDescription('Wellfleet IPX Service Net Filter Table')
wfIpxServNetFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 30, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxServNetFilterSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxServNetFilterCircIndex"), (0, "Wellfleet-IPXA-MIB", "wfIpxServNetFilterRuleNumber"))
if mibBuilder.loadTexts: wfIpxServNetFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetFilterEntry.setDescription('Each entry corresponds to one service filter.')
wfIpxServNetFilterDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNetFilterDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetFilterDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this entry.')
wfIpxServNetFilterDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNetFilterDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetFilterDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an entry.')
wfIpxServNetFilterSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 30, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServNetFilterSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetFilterSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxServNetFilterCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 30, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServNetFilterCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetFilterCircIndex.setDescription('The identifier of this circuit, unique within the instance of RIP. This value corresponds to the IPX circuit identifier found in wfIpxCircIndex.')
wfIpxServNetFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 30, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServNetFilterRuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetFilterRuleNumber.setDescription('The identifier of the filter, unique within the IPX circuit.')
wfIpxServNetFilterNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 30, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNetFilterNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetFilterNetwork.setDescription('The network.')
wfIpxServNetFilterNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 30, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNetFilterNetworkMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetFilterNetworkMask.setDescription('The network mask.')
wfIpxServNetFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 30, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNetFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetFilterType.setDescription('The service type.')
wfIpxServNetFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 30, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outbound", 1), ("inbound", 2), ("both", 3))).clone('outbound')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNetFilterMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetFilterMode.setDescription('The mode for filtering, Inbound, Outbound, or Both.')
wfIpxServNetFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 30, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("advertise", 1), ("suppress", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNetFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetFilterAction.setDescription('The action for the filter.')
wfIpxServNetFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 30, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("any", 1), ("local", 2), ("nlsp", 4), ("static", 5), ("sap", 6))).clone('any')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNetFilterProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetFilterProtocol.setDescription('Apply this filter only to services learned on protocol X when sending SAP updates. Does not apply to Inbound services. A value of 1 (default) represents any protocol.')
wfIpxServNetFilterCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 30, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNetFilterCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetFilterCost.setDescription("Cost for services matching this filter. A Zero cost indicates that the service's actual cost should be used. Value only used when action is Advertise.")
wfIpxServNetFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 30, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServNetFilterCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetFilterCounter.setDescription('The number of packets matching this filter.')
wfIpxServNetFilterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 30, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNetFilterPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNetFilterPriority.setDescription('Priority of this filter in relation to other filters of the same type.')
wfIpxServNameFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 31), )
if mibBuilder.loadTexts: wfIpxServNameFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNameFilterTable.setDescription('Wellfleet IPX Service Name Filter Table')
wfIpxServNameFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 31, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxServNameFilterSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxServNameFilterCircIndex"), (0, "Wellfleet-IPXA-MIB", "wfIpxServNameFilterRuleNumber"))
if mibBuilder.loadTexts: wfIpxServNameFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNameFilterEntry.setDescription("Each entry corresponds to one service filter. NOTE: In the instance id wfIpxServNameFilterName is prefixed by the service name's length.")
wfIpxServNameFilterDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 31, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNameFilterDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNameFilterDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this entry.')
wfIpxServNameFilterDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNameFilterDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNameFilterDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an entry.')
wfIpxServNameFilterSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 31, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServNameFilterSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNameFilterSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxServNameFilterCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 31, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServNameFilterCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNameFilterCircIndex.setDescription('The identifier of this circuit, unique within the instance of RIP. This value corresponds to the IPX circuit identifier found in wfIpxCircIndex.')
wfIpxServNameFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 31, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServNameFilterRuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNameFilterRuleNumber.setDescription('The identifier of the filter, unique within the IPX circuit.')
wfIpxServNameFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 31, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNameFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNameFilterName.setDescription('The name of the service to be filtered. NOTE: This is a variable length field, 2-47 chars. This field may be a regex matching pattern.')
wfIpxServNameFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 31, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNameFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNameFilterType.setDescription('The type of the service to be filtered.')
wfIpxServNameFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 31, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outbound", 1), ("inbound", 2), ("both", 3))).clone('outbound')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNameFilterMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNameFilterMode.setDescription('The mode for filtering, Inbound, Outbound, or Both.')
wfIpxServNameFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 31, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("advertise", 1), ("suppress", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNameFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNameFilterAction.setDescription('The action for the filter.')
wfIpxServNameFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 31, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("any", 1), ("local", 2), ("nlsp", 4), ("static", 5), ("sap", 6))).clone('any')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNameFilterProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNameFilterProtocol.setDescription('Apply this filter only to services learned on protocol X when sending SAP updates. Does not apply to Inbound services. A value of 1 (default) represents any protocol.')
wfIpxServNameFilterCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 31, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNameFilterCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNameFilterCost.setDescription("Cost for services matching this filter. A Zero cost indicates that the service's actual cost should be used. Value only used when action is Advertise.")
wfIpxServNameFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 31, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxServNameFilterCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNameFilterCounter.setDescription('The number of packets matching this filter.')
wfIpxServNameFilterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 31, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxServNameFilterPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxServNameFilterPriority.setDescription('Priority of this filter in relation to other filters of the same type.')
wfIpxRipCircTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32), )
if mibBuilder.loadTexts: wfIpxRipCircTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircTable.setDescription('IPX RIP Circuit MIB')
wfIpxRipCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxRipCircSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxRipCircIndex"))
if mibBuilder.loadTexts: wfIpxRipCircEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircEntry.setDescription('An entry in the IPX RIP circuit table')
wfIpxRipCircDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipCircDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this entry.')
wfIpxRipCircDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipCircDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an entry.')
wfIpxRipCircState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxRipCircState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircState.setDescription('The current state of this entry')
wfIpxRipCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxRipCircSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxRipCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxRipCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircIndex.setDescription('The identifier of this circuit, unique within the instance of RIP. This value corresponds to the IPX circuit identifier found in wfIpxCircIndex.')
wfIpxRipCircMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standard", 1), ("listen", 2), ("supply", 3), ("auto", 4))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipCircMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircMode.setDescription('Whether this RIP entry is in mode.')
wfIpxRipCircPace = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 7), Integer32().clone(18)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipCircPace.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircPace.setDescription('The maximum pace, in packets/second, at which RIP packets may be sent on this circuit.')
wfIpxRipCircUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 8), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipCircUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircUpdate.setDescription('The RIP periodic update interval, in seconds')
wfIpxRipCircAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 9), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipCircAgeMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircAgeMultiplier.setDescription('The holding multiplier for information received in RIP periodic updates.')
wfIpxRipCircPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 10), Integer32().clone(432)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipCircPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircPacketSize.setDescription('The Maximum RIP packet size used on this circuit')
wfIpxRipCircOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxRipCircOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircOutPackets.setDescription('The number of locally created RIP packets sent out this IPX RIP circuit.')
wfIpxRipCircInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxRipCircInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircInPackets.setDescription('The number of RIP packets received on this IPX circuit, destined locally.')
wfIpxRipCircBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxRipCircBadPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircBadPackets.setDescription('The number of bad RIP packets received on this IPX circuit.')
wfIpxRipCircUseMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipCircUseMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircUseMulticast.setDescription('Use multicast address to send RIP packets.')
wfIpxRipCircSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipCircSplitHorizon.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircSplitHorizon.setDescription('Enable/Disable split horizon on this RIP circuit.')
wfIpxRipCircGenAutoStaticRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipCircGenAutoStaticRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircGenAutoStaticRoutes.setDescription('Tell IPX to generate entries in the wfIpxAutoStaticRouteTable.')
wfIpxRipCircImmedUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("useglobal", 3))).clone('useglobal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipCircImmedUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircImmedUpdate.setDescription("Enable/Disable parameter. Users perform an SNMP SET operation on this object in order to enable/disable RIP immediate update on this particular circuit. The 'useglobal(3)' means the value of the global parameter wfIpxAdvSysGlobalTrigUpdate will be used on the circuit for this attribute. Default is useglobal.")
wfIpxRipCircDefaultRouteSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipCircDefaultRouteSupply.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircDefaultRouteSupply.setDescription('Advertise the default route, 0xFFFFFFFE, in RIP packets.')
wfIpxRipCircDefaultRouteListen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipCircDefaultRouteListen.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircDefaultRouteListen.setDescription('Accept the default route, 0xFFFFFFFE, in RIP packets.')
wfIpxRipCircLostRouteDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 32, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxRipCircLostRouteDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxRipCircLostRouteDisable.setDescription('Disable lost route on RIP circuit')
wfIpxSapCircTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33), )
if mibBuilder.loadTexts: wfIpxSapCircTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircTable.setDescription('IPX SAP Circuit MIB')
wfIpxSapCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxSapCircSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxSapCircIndex"))
if mibBuilder.loadTexts: wfIpxSapCircEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircEntry.setDescription('An entry in the IPX SAP circuit table')
wfIpxSapCircDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapCircDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete this entry.')
wfIpxSapCircDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapCircDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an entry.')
wfIpxSapCircState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxSapCircState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircState.setDescription('The current state of this entry')
wfIpxSapCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxSapCircSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxSapCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxSapCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircIndex.setDescription('The identifier of this circuit, unique within the instance of SAP. This value corresponds to the IPX circuit identifier found in wfIpxCircIndex.')
wfIpxSapCircMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standard", 1), ("listen", 2), ("supply", 3), ("auto", 4))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapCircMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircMode.setDescription('Whether this SAP entry is in mode.')
wfIpxSapCircPace = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 7), Integer32().clone(18)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapCircPace.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircPace.setDescription('The maximum pace, in packets/second, at which SAP packets may be sent on this circuit.')
wfIpxSapCircUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 8), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapCircUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircUpdate.setDescription('The SAP periodic update interval, in seconds')
wfIpxSapCircAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 9), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapCircAgeMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircAgeMultiplier.setDescription('The holding multiplier for information received in SAP periodic updates.')
wfIpxSapCircPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 10), Integer32().clone(480)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapCircPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircPacketSize.setDescription('The Maximum SAP packet size used on this circuit')
wfIpxSapCircGetNearestServerReply = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapCircGetNearestServerReply.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircGetNearestServerReply.setDescription('Enable/Disable responding to GNS requests on this circuit.')
wfIpxSapCircNSQAlphabetical = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapCircNSQAlphabetical.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircNSQAlphabetical.setDescription('Respond to NSQ in Alphabetical order, ie. first-best server.')
wfIpxSapCircOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxSapCircOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircOutPackets.setDescription('The number of locally created SAP packets sent out this IPX SAP circuit.')
wfIpxSapCircInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxSapCircInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircInPackets.setDescription('The number of SAP packets received on this IPX circuit, destined locally.')
wfIpxSapCircBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxSapCircBadPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircBadPackets.setDescription('The number of bad SAP packets received on this IPX circuit.')
wfIpxSapCircUseMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapCircUseMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircUseMulticast.setDescription('Use multicast address to send SAP packets.')
wfIpxSapCircSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapCircSplitHorizon.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircSplitHorizon.setDescription('Enable/Disable split horizon on this SAP circuit.')
wfIpxSapCircGenAutoStaticServices = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapCircGenAutoStaticServices.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircGenAutoStaticServices.setDescription('Tell IPX to generate entries in the wfIpxAutoStaticServTable.')
wfIpxSapCircImmedUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("useglobal", 3))).clone('useglobal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapCircImmedUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircImmedUpdate.setDescription("Enable/Disable parameter. Users perform an SNMP SET operation on this object in order to enable/disable RIP immediate update on this particular circuit. The 'useglobal(3)' means the value of the global parameter wfIpxAdvSysGlobalTrigUpdate will be used on the circuit for this attribute. Default is useglobal.")
wfIpxSapCircSaveFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 33, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxSapCircSaveFullName.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxSapCircSaveFullName.setDescription('This allows the Router to ignore all characters following the NULL character in the service name field of SAP packets. It is intended to be a memory and cpu saving option.')
wfIpxHostEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 34), )
if mibBuilder.loadTexts: wfIpxHostEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxHostEntryTable.setDescription('IPX Host table, contains information about all known hosts.')
wfIpxHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 34, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxHostSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxHostNextHopCircIndex"), (0, "Wellfleet-IPXA-MIB", "wfIpxHostHostAddress"))
if mibBuilder.loadTexts: wfIpxHostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxHostEntry.setDescription('Host table contains information about all known hosts.')
wfIpxHostSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 34, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxHostSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxHostSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxHostNextHopCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 34, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxHostNextHopCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxHostNextHopCircIndex.setDescription('The unique identifier of the IPX circuit used to reach the host.')
wfIpxHostHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 34, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxHostHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxHostHostAddress.setDescription('The Host address of the Host.')
wfIpxHostNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 34, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxHostNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxHostNetNum.setDescription('The network number of this host.')
wfIpxHostWanAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 34, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxHostWanAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxHostWanAddress.setDescription('The Wan Physical address of this Host. NOTE: Only valid on WAN media where there is no one-to-one mapping of host address to physical address.')
wfIpxHostProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 34, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("dynamic", 3), ("static", 4))).clone('other')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxHostProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxHostProtocol.setDescription('The routing protocol from which knowledge of this host was obtained.')
wfIpxHostAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 34, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxHostAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxHostAge.setDescription('The current age of this entry, in seconds. Local and Static hosts are not aged.')
wfIpxForwardEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 35), )
if mibBuilder.loadTexts: wfIpxForwardEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxForwardEntryTable.setDescription('IPX Forward table, contains information about all known forward entries.')
wfIpxForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 35, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxForwardSysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxForwardCircIndex"), (0, "Wellfleet-IPXA-MIB", "wfIpxForwardNetNum"))
if mibBuilder.loadTexts: wfIpxForwardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxForwardEntry.setDescription('Forward table contains information about all known forward entries.')
wfIpxForwardSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 35, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxForwardSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxForwardSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds.')
wfIpxForwardCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 35, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxForwardCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxForwardCircIndex.setDescription('The unique identifier of the IPX circuit forward table in which this forward entry resides.')
wfIpxForwardNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 35, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxForwardNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxForwardNetNum.setDescription('The network number of this forward entry.')
wfIpxForwardType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 35, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("remote", 3))).clone('other')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxForwardType.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxForwardType.setDescription('The type of this forward entry.')
wfIpxForwardProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 35, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("rip", 3), ("nlsp", 4), ("static", 5))).clone('other')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxForwardProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxForwardProtocol.setDescription('The routing protocol from which knowledge of this forward was obtained.')
wfIpxForwardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 35, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxForwardCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxForwardCount.setDescription('The number of equal cost paths for this forward entry.')
wfIpxTrafficFilter2Table = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 36), )
if mibBuilder.loadTexts: wfIpxTrafficFilter2Table.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxTrafficFilter2Table.setDescription('IPX Traffic Filters')
wfIpxTrafficFilter2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 36, 1), ).setIndexNames((0, "Wellfleet-IPXA-MIB", "wfIpxTrafficFilter2SysInstance"), (0, "Wellfleet-IPXA-MIB", "wfIpxTrafficFilter2CircIndex"), (0, "Wellfleet-IPXA-MIB", "wfIpxTrafficFilter2RuleNumber"), (0, "Wellfleet-IPXA-MIB", "wfIpxTrafficFilter2Fragment"))
if mibBuilder.loadTexts: wfIpxTrafficFilter2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxTrafficFilter2Entry.setDescription('A traffic filter definition')
wfIpxTrafficFilter2Create = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 36, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxTrafficFilter2Create.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxTrafficFilter2Create.setDescription('Defines the existence of the traffic filter rule: created - traffic filter exists delete - traffic filter does not exist and can be deleted.')
wfIpxTrafficFilter2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 36, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxTrafficFilter2Enable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxTrafficFilter2Enable.setDescription('Defines whether or not the traffic filter rule should be used: enabled - activate the rule. disabled - inactivate the rule.')
wfIpxTrafficFilter2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxTrafficFilter2Status.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxTrafficFilter2Status.setDescription('Defines the current status of the traffic filter: inactive - the rule is not in use. active - the rule is being used. error - the application detected an error in the rule.')
wfIpxTrafficFilter2Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 36, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxTrafficFilter2Counter.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxTrafficFilter2Counter.setDescription('The number of received packets that have matched this rule.')
wfIpxTrafficFilter2Definition = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 36, 1, 5), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxTrafficFilter2Definition.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxTrafficFilter2Definition.setDescription('The filter rule definition.')
wfIpxTrafficFilter2Reserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 36, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxTrafficFilter2Reserved.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxTrafficFilter2Reserved.setDescription('Reserved field.')
wfIpxTrafficFilter2SysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 36, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxTrafficFilter2SysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxTrafficFilter2SysInstance.setDescription('The unique identifier for the instance of IPX.')
wfIpxTrafficFilter2CircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 36, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxTrafficFilter2CircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxTrafficFilter2CircIndex.setDescription('The identifier of this IPX circuit. This value corresponds to the IPX circuit identifier found in wfIpxCircIndex.')
wfIpxTrafficFilter2RuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 36, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxTrafficFilter2RuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxTrafficFilter2RuleNumber.setDescription('ID for the rule.')
wfIpxTrafficFilter2Fragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 36, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpxTrafficFilter2Fragment.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxTrafficFilter2Fragment.setDescription('Fragment number - for large rules.')
wfIpxTrafficFilter2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 5, 36, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpxTrafficFilter2Name.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpxTrafficFilter2Name.setDescription('Name of the rule number.')
mibBuilder.exportSymbols("Wellfleet-IPXA-MIB", wfIpxBasicSysPrimaryNetworkNumber=wfIpxBasicSysPrimaryNetworkNumber, wfIpxUserStaticNETBIOSSysInstance=wfIpxUserStaticNETBIOSSysInstance, wfIpxServSocket=wfIpxServSocket, wfIpxSapCircOutPackets=wfIpxSapCircOutPackets, wfIpxCircMulticastAddress=wfIpxCircMulticastAddress, wfIpxCircStateChanges=wfIpxCircStateChanges, wfIpxServNetFilterRuleNumber=wfIpxServNetFilterRuleNumber, wfIpxStaticRouteMaskNetworkMask=wfIpxStaticRouteMaskNetworkMask, wfIpxAdvSysSapViaDefaultRouteEnable=wfIpxAdvSysSapViaDefaultRouteEnable, wfIpxAdvSysMaxPathSplits=wfIpxAdvSysMaxPathSplits, wfIpxUserStaticRouteCircIndex=wfIpxUserStaticRouteCircIndex, wfIpxServType=wfIpxServType, wfIpxCircNeighInternalNetNum=wfIpxCircNeighInternalNetNum, wfIpxSapCircInPackets=wfIpxSapCircInPackets, wfIpxServHopCount=wfIpxServHopCount, wfIpxServEntryTable=wfIpxServEntryTable, wfIpxAutoStaticRouteTicks=wfIpxAutoStaticRouteTicks, wfIpxCircInHdrErrors=wfIpxCircInHdrErrors, wfIpxStaticServMaskDisable=wfIpxStaticServMaskDisable, wfIpxRouteFilterCost=wfIpxRouteFilterCost, wfIpxBasicSysInDiscards=wfIpxBasicSysInDiscards, wfIpxAdvSysDefaultRouteEnable=wfIpxAdvSysDefaultRouteEnable, wfIpxStaticServMaskNetworkMask=wfIpxStaticServMaskNetworkMask, wfIpxAdvSysMaxHops=wfIpxAdvSysMaxHops, wfIpxAdvSysServCount=wfIpxAdvSysServCount, wfIpxUserStaticNETBIOSDestNetwork=wfIpxUserStaticNETBIOSDestNetwork, wfIpxServNetFilterCounter=wfIpxServNetFilterCounter, wfIpxServNameFilterEntry=wfIpxServNameFilterEntry, wfIpxRipCircDisable=wfIpxRipCircDisable, wfIpxForwardEntry=wfIpxForwardEntry, wfIpxRipCircBadPackets=wfIpxRipCircBadPackets, wfIpxServNetFilterNetwork=wfIpxServNetFilterNetwork, wfIpxBasicSysOutMalformedRequests=wfIpxBasicSysOutMalformedRequests, wfIpxHostAge=wfIpxHostAge, wfIpxStaticServMaskCircIndex=wfIpxStaticServMaskCircIndex, wfIpxAutoStaticServHopCount=wfIpxAutoStaticServHopCount, wfIpxAdvSysLostRouteDelay=wfIpxAdvSysLostRouteDelay, wfIpxServEntry=wfIpxServEntry, wfIpxCircCompressState=wfIpxCircCompressState, wfIpxAdvSysCfgServCount=wfIpxAdvSysCfgServCount, wfIpxServNetNum=wfIpxServNetNum, wfIpxUserStaticRouteDelete=wfIpxUserStaticRouteDelete, wfIpxServNameFilterProtocol=wfIpxServNameFilterProtocol, wfIpxAdvSysTable=wfIpxAdvSysTable, wfIpxAdvSysInFiltered=wfIpxAdvSysInFiltered, wfIpxBasicSysRouterName=wfIpxBasicSysRouterName, wfIpxHostProtocol=wfIpxHostProtocol, wfIpxCircOutDiscards=wfIpxCircOutDiscards, wfIpxStaticHostGreConnName=wfIpxStaticHostGreConnName, wfIpxServNameFilterName=wfIpxServNameFilterName, wfIpxDestEntry=wfIpxDestEntry, wfIpxUserStaticServName=wfIpxUserStaticServName, wfIpxDestSysInstance=wfIpxDestSysInstance, wfIpxRouteFilterPriority=wfIpxRouteFilterPriority, wfIpxTrafficFilter2Reserved=wfIpxTrafficFilter2Reserved, wfIpxServNameFilterDelete=wfIpxServNameFilterDelete, wfIpxCircHostCount=wfIpxCircHostCount, wfIpxSapCircPacketSize=wfIpxSapCircPacketSize, wfIpxSapCircBadPackets=wfIpxSapCircBadPackets, wfIpxHostNextHopCircIndex=wfIpxHostNextHopCircIndex, wfIpxAdvSysOutCompressDiscards=wfIpxAdvSysOutCompressDiscards, wfIpxStaticHostEntryTable=wfIpxStaticHostEntryTable, wfIpxStaticServMaskSysInstance=wfIpxStaticServMaskSysInstance, wfIpxCircCompressedSent=wfIpxCircCompressedSent, wfIpxCircDelete=wfIpxCircDelete, wfIpxCircOutFiltered=wfIpxCircOutFiltered, wfIpxAdvSysHostCount=wfIpxAdvSysHostCount, wfIpxStaticRouteMaskNetwork=wfIpxStaticRouteMaskNetwork, wfIpxSapCircImmedUpdate=wfIpxSapCircImmedUpdate, wfIpxTrafficFilter2Counter=wfIpxTrafficFilter2Counter, wfIpxCircTable=wfIpxCircTable, wfIpxCircDestCount=wfIpxCircDestCount, wfIpxUserStaticRouteHopCount=wfIpxUserStaticRouteHopCount, wfIpxRouteFilterTable=wfIpxRouteFilterTable, wfIpxAutoStaticRouteCircIndex=wfIpxAutoStaticRouteCircIndex, wfIpxStaticServMaskEntryTable=wfIpxStaticServMaskEntryTable, wfIpxCircCfgThroughput=wfIpxCircCfgThroughput, wfIpxAdvSysNETBIOSPackets=wfIpxAdvSysNETBIOSPackets, wfIpxAdvSysDestCount=wfIpxAdvSysDestCount, wfIpxStaticRouteMaskSysInstance=wfIpxStaticRouteMaskSysInstance, wfIpxUserStaticRouteTicks=wfIpxUserStaticRouteTicks, wfIpxSapCircAgeMultiplier=wfIpxSapCircAgeMultiplier, wfIpxServNetFilterProtocol=wfIpxServNetFilterProtocol, wfIpxServNextHopHostAddress=wfIpxServNextHopHostAddress, wfIpxCircUncompressedReceived=wfIpxCircUncompressedReceived, wfIpxCircWatchdogSpoof=wfIpxCircWatchdogSpoof, wfIpxAutoStaticNETBIOSDestNetwork=wfIpxAutoStaticNETBIOSDestNetwork, wfIpxCircCompressSlots=wfIpxCircCompressSlots, wfIpxBasicSysOutDiscards=wfIpxBasicSysOutDiscards, wfIpxAutoStaticServSysInstance=wfIpxAutoStaticServSysInstance, wfIpxTrafficFilter2Table=wfIpxTrafficFilter2Table, wfIpxAutoStaticServName=wfIpxAutoStaticServName, wfIpxTrafficFilter2Status=wfIpxTrafficFilter2Status, wfIpxCircForwardCount=wfIpxCircForwardCount, wfIpxCircCfgCompressState=wfIpxCircCfgCompressState, wfIpxAdvSysInTooManyHops=wfIpxAdvSysInTooManyHops, wfIpxCircDelay=wfIpxCircDelay, wfIpxCircEntry=wfIpxCircEntry, wfIpxBasicSysOpenEncapsFails=wfIpxBasicSysOpenEncapsFails, wfIpxForwardSysInstance=wfIpxForwardSysInstance, wfIpxDestHopCount=wfIpxDestHopCount, wfIpxBasicSysMultipleHostAddresses=wfIpxBasicSysMultipleHostAddresses, wfIpxRipCircState=wfIpxRipCircState, wfIpxAdvSysCircCount=wfIpxAdvSysCircCount, wfIpxCircCompressedReceived=wfIpxCircCompressedReceived, wfIpxRipCircTable=wfIpxRipCircTable, wfIpxServNameFilterCounter=wfIpxServNameFilterCounter, wfIpxServNameFilterSysInstance=wfIpxServNameFilterSysInstance, wfIpxCircEncaps=wfIpxCircEncaps, wfIpxRouteFilterEntry=wfIpxRouteFilterEntry, wfIpxDestNextHopCircIndex=wfIpxDestNextHopCircIndex, wfIpxDestProtocol=wfIpxDestProtocol, wfIpxBasicSysInDelivers=wfIpxBasicSysInDelivers, wfIpxCircDisable=wfIpxCircDisable, wfIpxSapCircMode=wfIpxSapCircMode, wfIpxTrafficFilter2Entry=wfIpxTrafficFilter2Entry, wfIpxBasicSysInstance=wfIpxBasicSysInstance, wfIpxBasicSysCfgHostAddress=wfIpxBasicSysCfgHostAddress, wfIpxAutoStaticRouteDisable=wfIpxAutoStaticRouteDisable, wfIpxSapCircUpdate=wfIpxSapCircUpdate, wfIpxAutoStaticRouteSysInstance=wfIpxAutoStaticRouteSysInstance, wfIpxCircInDiscards=wfIpxCircInDiscards, wfIpxStaticHostSubaddress=wfIpxStaticHostSubaddress, wfIpxRouteFilterNetworkMask=wfIpxRouteFilterNetworkMask, wfIpxBasicSysInHdrErrors=wfIpxBasicSysInHdrErrors, wfIpxUserStaticServHostAddress=wfIpxUserStaticServHostAddress, wfIpxCircNeighRouterName=wfIpxCircNeighRouterName, wfIpxAutoStaticNETBIOSDelete=wfIpxAutoStaticNETBIOSDelete, wfIpxUserStaticRouteEntryTable=wfIpxUserStaticRouteEntryTable, wfIpxCircCompressedRejectsSent=wfIpxCircCompressedRejectsSent, wfIpxUserStaticServSysInstance=wfIpxUserStaticServSysInstance, wfIpxForwardCircIndex=wfIpxForwardCircIndex, wfIpxUserStaticNETBIOSName=wfIpxUserStaticNETBIOSName, wfIpxAdvSysEntry=wfIpxAdvSysEntry, wfIpxStaticHostDisable=wfIpxStaticHostDisable, wfIpxRouteFilterDisable=wfIpxRouteFilterDisable, wfIpxUserStaticServEntryTable=wfIpxUserStaticServEntryTable, wfIpxRouteFilterCircIndex=wfIpxRouteFilterCircIndex, wfIpxHostNetNum=wfIpxHostNetNum, wfIpxServNetFilterPriority=wfIpxServNetFilterPriority, wfIpxStaticServMaskNetwork=wfIpxStaticServMaskNetwork, wfIpxRouteFilterRuleNumber=wfIpxRouteFilterRuleNumber, wfIpxForwardEntryTable=wfIpxForwardEntryTable, wfIpxRouteFilterCounter=wfIpxRouteFilterCounter, wfIpxAdvSysNovellCertificationConformanceDisable=wfIpxAdvSysNovellCertificationConformanceDisable, wfIpxBasicSysDelete=wfIpxBasicSysDelete, wfIpxHostEntry=wfIpxHostEntry, wfIpxRipCircUpdate=wfIpxRipCircUpdate, wfIpxUserStaticServType=wfIpxUserStaticServType, wfIpxTrafficFilter2Name=wfIpxTrafficFilter2Name, wfIpxCircInBadChecksums=wfIpxCircInBadChecksums, wfIpxStaticRouteMaskEntryTable=wfIpxStaticRouteMaskEntryTable, wfIpxRipCircMode=wfIpxRipCircMode, wfIpxForwardType=wfIpxForwardType, wfIpxCircCfgNetworkNumber=wfIpxCircCfgNetworkNumber, wfIpxUserStaticRouteEntry=wfIpxUserStaticRouteEntry, wfIpxAutoStaticServEntry=wfIpxAutoStaticServEntry, wfIpxStaticHostSysInstance=wfIpxStaticHostSysInstance, wfIpxBasicSysDisable=wfIpxBasicSysDisable, wfIpxRipCircImmedUpdate=wfIpxRipCircImmedUpdate, wfIpxHostSysInstance=wfIpxHostSysInstance, wfIpxUserStaticServHopCount=wfIpxUserStaticServHopCount, wfIpxAdvSysMibReplySlots=wfIpxAdvSysMibReplySlots, wfIpxBasicSysOutPackets=wfIpxBasicSysOutPackets, wfIpxAutoStaticServDelete=wfIpxAutoStaticServDelete, wfIpxStaticHostEntry=wfIpxStaticHostEntry, wfIpxServNameFilterTable=wfIpxServNameFilterTable, wfIpxRipCircUseMulticast=wfIpxRipCircUseMulticast, wfIpxAutoStaticServNetNum=wfIpxAutoStaticServNetNum, wfIpxRipCircSplitHorizon=wfIpxRipCircSplitHorizon, wfIpxUserStaticServSocket=wfIpxUserStaticServSocket, wfIpxCircCommonNetworkNumber=wfIpxCircCommonNetworkNumber, wfIpxUserStaticNETBIOSDelete=wfIpxUserStaticNETBIOSDelete, wfIpxAdvSysCT=wfIpxAdvSysCT, wfIpxAutoStaticNETBIOSName=wfIpxAutoStaticNETBIOSName, wfIpxStaticHostWanAddress=wfIpxStaticHostWanAddress, wfIpxCircNetworkNumber=wfIpxCircNetworkNumber, wfIpxServNetFilterDelete=wfIpxServNetFilterDelete, wfIpxRipCircSysInstance=wfIpxRipCircSysInstance, wfIpxAdvSysCfgHostCount=wfIpxAdvSysCfgHostCount, wfIpxStaticHostType=wfIpxStaticHostType, wfIpxAdvSysLogFilter=wfIpxAdvSysLogFilter, wfIpxAutoStaticNETBIOSTable=wfIpxAutoStaticNETBIOSTable, wfIpxBasicSysInBadChecksums=wfIpxBasicSysInBadChecksums, wfIpxCircInFiltered=wfIpxCircInFiltered, wfIpxServNetFilterSysInstance=wfIpxServNetFilterSysInstance, wfIpxServNextHopNetNum=wfIpxServNextHopNetNum, wfIpxTrafficFilter2Create=wfIpxTrafficFilter2Create, wfIpxCircInitFails=wfIpxCircInitFails, wfIpxCircThroughput=wfIpxCircThroughput, wfIpxAutoStaticRouteDelete=wfIpxAutoStaticRouteDelete, wfIpxUserStaticNETBIOSTable=wfIpxUserStaticNETBIOSTable, wfIpxServNetFilterMode=wfIpxServNetFilterMode, wfIpxAdvSysInstance=wfIpxAdvSysInstance, wfIpxSapCircIndex=wfIpxSapCircIndex, wfIpxAdvSysAgingFrequency=wfIpxAdvSysAgingFrequency, wfIpxBasicSysEntry=wfIpxBasicSysEntry, wfIpxCircCfgDelay=wfIpxCircCfgDelay, wfIpxServNetFilterAction=wfIpxServNetFilterAction, wfIpxServProtocol=wfIpxServProtocol, wfIpxAutoStaticRouteHopCount=wfIpxAutoStaticRouteHopCount, wfIpxServNameFilterAction=wfIpxServNameFilterAction, wfIpxCircIPXOutWatchdogSpoofRsps=wfIpxCircIPXOutWatchdogSpoofRsps, wfIpxAdvSysCfgDestCount=wfIpxAdvSysCfgDestCount, wfIpxSapCircDisable=wfIpxSapCircDisable, wfIpxCircOutRequests=wfIpxCircOutRequests, wfIpxRipCircPace=wfIpxRipCircPace, wfIpxCircCompressedRejectsReceived=wfIpxCircCompressedRejectsReceived, wfIpxCircCfgBroadcastAddress=wfIpxCircCfgBroadcastAddress, wfIpxDestAge=wfIpxDestAge, wfIpxRipCircOutPackets=wfIpxRipCircOutPackets, wfIpxServNameFilterCost=wfIpxServNameFilterCost, wfIpxServSysInstance=wfIpxServSysInstance, wfIpxCircSPXOutWatchdogSpoofRsps=wfIpxCircSPXOutWatchdogSpoofRsps, wfIpxCircBroadcastAddress=wfIpxCircBroadcastAddress, wfIpxCircServCount=wfIpxCircServCount, wfIpxBasicSysOutRequests=wfIpxBasicSysOutRequests, wfIpxRipCircLostRouteDisable=wfIpxRipCircLostRouteDisable, wfIpxCircOutMalformedRequests=wfIpxCircOutMalformedRequests, wfIpxAutoStaticRouteEntry=wfIpxAutoStaticRouteEntry, wfIpxAdvSysTrigUpdateDelay=wfIpxAdvSysTrigUpdateDelay, wfIpxBasicSysInUnknownSockets=wfIpxBasicSysInUnknownSockets, wfIpxServNetFilterEntry=wfIpxServNetFilterEntry, wfIpxRouteFilterAction=wfIpxRouteFilterAction, wfIpxDestNextHopNetNum=wfIpxDestNextHopNetNum, wfIpxUserStaticNETBIOSDisable=wfIpxUserStaticNETBIOSDisable, wfIpxCircMediaType=wfIpxCircMediaType, wfIpxBasicSysHostAddress=wfIpxBasicSysHostAddress, wfIpxCircInTooManyHops=wfIpxCircInTooManyHops, wfIpxHostEntryTable=wfIpxHostEntryTable, wfIpxBasicSysInReceives=wfIpxBasicSysInReceives, wfIpxRouteFilterNetwork=wfIpxRouteFilterNetwork, wfIpxDestEntryTable=wfIpxDestEntryTable, wfIpxServNode=wfIpxServNode, wfIpxServAge=wfIpxServAge, wfIpxRipCircGenAutoStaticRoutes=wfIpxRipCircGenAutoStaticRoutes, wfIpxDestTicks=wfIpxDestTicks, wfIpxAdvSysNetTblFillNotify=wfIpxAdvSysNetTblFillNotify, wfIpxSapCircSplitHorizon=wfIpxSapCircSplitHorizon, wfIpxCircIndex=wfIpxCircIndex, wfIpxCircInDelivers=wfIpxCircInDelivers, wfIpxAdvSysMaxNetTblSize=wfIpxAdvSysMaxNetTblSize, wfIpxCircNetbiosDeliver=wfIpxCircNetbiosDeliver, wfIpxRouteFilterProtocol=wfIpxRouteFilterProtocol, wfIpxRipCircEntry=wfIpxRipCircEntry, wfIpxSapCircSysInstance=wfIpxSapCircSysInstance, wfIpxCircChecksum=wfIpxCircChecksum, wfIpxUserStaticRouteNetNum=wfIpxUserStaticRouteNetNum, wfIpxUserStaticServDisable=wfIpxUserStaticServDisable, wfIpxRipCircInPackets=wfIpxRipCircInPackets, wfIpxUserStaticServNetNum=wfIpxUserStaticServNetNum, wfIpxSapCircState=wfIpxSapCircState, wfIpxAdvSysMaximumPath=wfIpxAdvSysMaximumPath, wfIpxStaticHostCircIndex=wfIpxStaticHostCircIndex)
mibBuilder.exportSymbols("Wellfleet-IPXA-MIB", wfIpxAdvSysForwPackets=wfIpxAdvSysForwPackets, wfIpxCircInitStabilizationTimer=wfIpxCircInitStabilizationTimer, wfIpxServName=wfIpxServName, wfIpxUserStaticRouteNextHopHostAddress=wfIpxUserStaticRouteNextHopHostAddress, wfIpxRipCircDefaultRouteListen=wfIpxRipCircDefaultRouteListen, wfIpxAutoStaticServType=wfIpxAutoStaticServType, wfIpxSapCircGetNearestServerReply=wfIpxSapCircGetNearestServerReply, wfIpxSapCircNSQAlphabetical=wfIpxSapCircNSQAlphabetical, wfIpxCircVRRPTriggerState=wfIpxCircVRRPTriggerState, wfIpxServNameFilterPriority=wfIpxServNameFilterPriority, wfIpxStaticRouteMaskDelete=wfIpxStaticRouteMaskDelete, wfIpxStaticServMaskDelete=wfIpxStaticServMaskDelete, wfIpxTrafficFilter2CircIndex=wfIpxTrafficFilter2CircIndex, wfIpxHostHostAddress=wfIpxHostHostAddress, wfIpxCircCfgEncaps=wfIpxCircCfgEncaps, wfIpxTrafficFilter2Definition=wfIpxTrafficFilter2Definition, wfIpxSapCircSaveFullName=wfIpxSapCircSaveFullName, wfIpxUserStaticServCircIndex=wfIpxUserStaticServCircIndex, wfIpxBasicSysTable=wfIpxBasicSysTable, wfIpxAdvSysRoutingMethod=wfIpxAdvSysRoutingMethod, wfIpxCircNETBIOSPackets=wfIpxCircNETBIOSPackets, wfIpxCircSMDSIndividualAddress=wfIpxCircSMDSIndividualAddress, wfIpxStaticServMaskEntry=wfIpxStaticServMaskEntry, wfIpxRouteFilterDelete=wfIpxRouteFilterDelete, wfIpxHostWanAddress=wfIpxHostWanAddress, wfIpxUserStaticServEntry=wfIpxUserStaticServEntry, wfIpxCircIfIndex=wfIpxCircIfIndex, wfIpxCircInUnknownSockets=wfIpxCircInUnknownSockets, wfIpxCircSVCBroadcast=wfIpxCircSVCBroadcast, wfIpxAutoStaticServHostAddress=wfIpxAutoStaticServHostAddress, wfIpxForwardCount=wfIpxForwardCount, wfIpxCircTrEndStation=wfIpxCircTrEndStation, wfIpxRipCircDelete=wfIpxRipCircDelete, wfIpxCircCfgMulticastAddress=wfIpxCircCfgMulticastAddress, wfIpxRouteFilterSysInstance=wfIpxRouteFilterSysInstance, wfIpxCircNoRoutes=wfIpxCircNoRoutes, wfIpxServNextHopCircIndex=wfIpxServNextHopCircIndex, wfIpxAdvSysOutFiltered=wfIpxAdvSysOutFiltered, wfIpxCircLocalMaxPacketSize=wfIpxCircLocalMaxPacketSize, wfIpxAdvSysInCompressDiscards=wfIpxAdvSysInCompressDiscards, wfIpxUserStaticNETBIOSEntry=wfIpxUserStaticNETBIOSEntry, wfIpxServNameFilterMode=wfIpxServNameFilterMode, wfIpxServNetFilterDisable=wfIpxServNetFilterDisable, wfIpxRipCircPacketSize=wfIpxRipCircPacketSize, wfIpxCircSysInstance=wfIpxCircSysInstance, wfIpxServNetFilterType=wfIpxServNetFilterType, wfIpxForwardProtocol=wfIpxForwardProtocol, wfIpxAutoStaticRouteNetNum=wfIpxAutoStaticRouteNetNum, wfIpxTrafficFilter2Enable=wfIpxTrafficFilter2Enable, wfIpxRipCircDefaultRouteSupply=wfIpxRipCircDefaultRouteSupply, wfIpxCircName=wfIpxCircName, wfIpxCircNetbiosAccept=wfIpxCircNetbiosAccept, wfIpxCircState=wfIpxCircState, wfIpxServNetFilterTable=wfIpxServNetFilterTable, wfIpxDestNetNum=wfIpxDestNetNum, wfIpxRipCircIndex=wfIpxRipCircIndex, wfIpxServNetFilterCircIndex=wfIpxServNetFilterCircIndex, wfIpxUserStaticRouteSysInstance=wfIpxUserStaticRouteSysInstance, wfIpxCircUncompressedSent=wfIpxCircUncompressedSent, wfIpxAdvSysAgingPendingFrequency=wfIpxAdvSysAgingPendingFrequency, wfIpxCircType=wfIpxCircType, wfIpxAutoStaticNETBIOSDisable=wfIpxAutoStaticNETBIOSDisable, wfIpxServNameFilterRuleNumber=wfIpxServNameFilterRuleNumber, wfIpxStaticHostTypeOfNumber=wfIpxStaticHostTypeOfNumber, wfIpxSapCircGenAutoStaticServices=wfIpxSapCircGenAutoStaticServices, wfIpxRipCircAgeMultiplier=wfIpxRipCircAgeMultiplier, wfIpxCircMacAddress=wfIpxCircMacAddress, wfIpxAutoStaticServCircIndex=wfIpxAutoStaticServCircIndex, wfIpxSapCircPace=wfIpxSapCircPace, wfIpxBasicSysNoRoutes=wfIpxBasicSysNoRoutes, wfIpxTrafficFilter2Fragment=wfIpxTrafficFilter2Fragment, wfIpxServNetFilterNetworkMask=wfIpxServNetFilterNetworkMask, wfIpxAutoStaticServDisable=wfIpxAutoStaticServDisable, wfIpxAdvSysDelete=wfIpxAdvSysDelete, wfIpxCircCfgHostAddress=wfIpxCircCfgHostAddress, wfIpxSapCircDelete=wfIpxSapCircDelete, wfIpxServNameFilterDisable=wfIpxServNameFilterDisable, wfIpxCircCost=wfIpxCircCost, wfIpxDestNextHopHostAddress=wfIpxDestNextHopHostAddress, wfIpxStaticRouteMaskEntry=wfIpxStaticRouteMaskEntry, wfIpxStaticHostDelete=wfIpxStaticHostDelete, wfIpxStaticRouteMaskCircIndex=wfIpxStaticRouteMaskCircIndex, wfIpxServNetFilterCost=wfIpxServNetFilterCost, wfIpxForwardNetNum=wfIpxForwardNetNum, wfIpxAutoStaticServEntryTable=wfIpxAutoStaticServEntryTable, wfIpxSapCircEntry=wfIpxSapCircEntry, wfIpxSapCircUseMulticast=wfIpxSapCircUseMulticast, wfIpxAutoStaticServSocket=wfIpxAutoStaticServSocket, wfIpxAutoStaticRouteEntryTable=wfIpxAutoStaticRouteEntryTable, wfIpxServNameFilterCircIndex=wfIpxServNameFilterCircIndex, wfIpxRouteFilterMode=wfIpxRouteFilterMode, wfIpxTrafficFilter2RuleNumber=wfIpxTrafficFilter2RuleNumber, wfIpxServNameFilterType=wfIpxServNameFilterType, wfIpxAdvSysGlobalTrigUpdate=wfIpxAdvSysGlobalTrigUpdate, wfIpxAutoStaticRouteNextHopHostAddress=wfIpxAutoStaticRouteNextHopHostAddress, wfIpxStaticHostAddress=wfIpxStaticHostAddress, wfIpxCircHostAddress=wfIpxCircHostAddress, wfIpxSapCircTable=wfIpxSapCircTable, wfIpxAutoStaticNETBIOSSysInstance=wfIpxAutoStaticNETBIOSSysInstance, wfIpxStaticRouteMaskDisable=wfIpxStaticRouteMaskDisable, wfIpxCircCompressedInitSent=wfIpxCircCompressedInitSent, wfIpxUserStaticRouteDisable=wfIpxUserStaticRouteDisable, wfIpxCircCompressedInitReceived=wfIpxCircCompressedInitReceived, wfIpxCircCfgType=wfIpxCircCfgType, wfIpxAdvSysGNSRespMode=wfIpxAdvSysGNSRespMode, wfIpxBasicSysState=wfIpxBasicSysState, wfIpxUserStaticServDelete=wfIpxUserStaticServDelete, wfIpxTrafficFilter2SysInstance=wfIpxTrafficFilter2SysInstance, wfIpxAutoStaticNETBIOSEntry=wfIpxAutoStaticNETBIOSEntry)
