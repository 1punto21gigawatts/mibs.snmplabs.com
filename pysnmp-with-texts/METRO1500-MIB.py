#
# PySNMP MIB module METRO1500-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/METRO1500-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:11:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, TimeTicks, Bits, Counter32, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, IpAddress, MibIdentifier, NotificationType, Gauge32, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "Bits", "Counter32", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "IpAddress", "MibIdentifier", "NotificationType", "Gauge32", "iso", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
adva = MibIdentifier((1, 3, 6, 1, 4, 1, 2544))
advaProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1))
metro1500 = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 3))
metro1500Main = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1))
metro1500Housing = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1))
metro1500Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500Manufacturer.setDescription('Manufacturer of the METRO1500 System')
metro1500MainType = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500MainType.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainType.setDescription('Type of the METRO1500 System')
metro1500MainSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500MainSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainSerialNumber.setDescription('Serial Number of the METRO1500 System')
metro1500MainHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500MainHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainHardwareVersion.setDescription('Hardware Version of the METRO1500 System')
metro1500MainSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500MainSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainSoftwareVersion.setDescription('Software Version of the METRO1500 System (Device Master).')
metro1500MainBusMessages = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500MainBusMessages.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainBusMessages.setDescription('Number of received internal Messages. This Number gives Information on the internal Activity of the METRO1500 System. This should be a large integer Number except when the System has just started. The Value is updated every five Seconds.')
metro1500MainBusErrors = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500MainBusErrors.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainBusErrors.setDescription('Number of dropped received internal Messages. This value should be 0 or a very small Integer.')
metro1500MainLastEvent = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500MainLastEvent.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainLastEvent.setDescription('Since SNMP Traps are not reliable, this Number can be polled periodically. The Value is set to a nonzero Integer when an Event occurs and cleared ten Minutes after the last Event.')
metro1500MainMotd = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500MainMotd.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainMotd.setDescription('Message Of The Day is the greeting when login via telnet. It shows the actual Kernel Version and the Software Update State. With the MOTD you get Information on the actual installed Software Packets.')
metro1500MainTrapsinkTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 10), )
if mibBuilder.loadTexts: metro1500MainTrapsinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainTrapsinkTable.setDescription('Table of Trapsinks')
metro1500MainTrapsinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 10, 1), ).setIndexNames((0, "METRO1500-MIB", "metro1500MainTrapsinkNumber"))
if mibBuilder.loadTexts: metro1500MainTrapsinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainTrapsinkEntry.setDescription('Entries in the Trapsink Table')
metro1500MainTrapsinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500MainTrapsinkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainTrapsinkNumber.setDescription('Number of Trapsink')
metro1500MainTrapsinkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500MainTrapsinkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainTrapsinkAddress.setDescription('IP Address of the Management System which should receive SNMP Traps. The Logfiles are also shown in this Table')
metro1500MainTrapsinkCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500MainTrapsinkCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainTrapsinkCommunity.setDescription('Community String which is sent with a SNMP Trap to the Management Station')
metro1500MainTrapsinkPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500MainTrapsinkPriority.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainTrapsinkPriority.setDescription('Priority of the Trapsink (lower level gets less Traps)')
metro1500MainLogfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 11), )
if mibBuilder.loadTexts: metro1500MainLogfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainLogfileTable.setDescription('Table of Log Files')
metro1500MainLogfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 11, 1), ).setIndexNames((0, "METRO1500-MIB", "metro1500MainLogfileNumber"))
if mibBuilder.loadTexts: metro1500MainLogfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainLogfileEntry.setDescription('Entries in the Logfile Table')
metro1500MainLogfileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500MainLogfileNumber.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainLogfileNumber.setDescription('Number of Logfile')
metro1500MainLogfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500MainLogfileName.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainLogfileName.setDescription('Name of Logfile')
metro1500MainLogfileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500MainLogfileSize.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainLogfileSize.setDescription('Size of Logfile')
metro1500MainLogfilePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500MainLogfilePriority.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500MainLogfilePriority.setDescription('Priority of Logfile')
metro1500SlotTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 2), )
if mibBuilder.loadTexts: metro1500SlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500SlotTable.setDescription('Table of installed METRO1500 Components. Since METRO1500 can handle many different Components, in this Section only the common Information is displayed. Component specific Information is stored in different Subtrees.')
metro1500SlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 2, 1), ).setIndexNames((0, "METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500SlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500SlotEntry.setDescription('Installed METRO1500 Components')
metro1500SlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500SlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500SlotNumber.setDescription('Slot Number of installed Component. The Device Master has always Slot Number 0 and is shown in the Main section.')
metro1500Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500Type.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500Type.setDescription('Type of installed Component')
metro1500SlotTypeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 7, 10, 32, 33, 39, 64, 255))).clone(namedValues=NamedValues(("metro1500Converter", 1), ("metro1000Converter", 2), ("metro1000EthernetConverter", 3), ("metro1500-2-5GbConverter", 5), ("metro1500-TRL-Converter", 7), ("metro1500-4PortTDMCard", 10), ("nemi", 32), ("demi", 33), ("metro1500-EthernetHubCard", 39), ("switch", 64), ("other", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500SlotTypeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500SlotTypeNumber.setDescription('Integer Number between 0 and 255 unique for a specific type of installed Component. This Number can be used for management Systems to handle automatically the different Options of installed Components.')
metro1500SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500SerialNumber.setDescription('Serial Number of installed Component')
metro1500HardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500HardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500HardwareVersion.setDescription('Hardware Version of installed Component')
metro1500SoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500SoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500SoftwareVersion.setDescription('SoftwareVersion of installed Component')
metro1500Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500Temperature.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500Temperature.setDescription('Temperature of installed Component in Celsius')
metro1500BoardVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500BoardVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500BoardVoltage.setDescription('Voltage measured directly on the board in mV')
metro1500DetailInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 2, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500DetailInfo.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500DetailInfo.setDescription('A Reference to the MIB Definition where the special Options of the Component are described with more Details')
metro1500EPLDVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EPLDVersion.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EPLDVersion.setDescription('Software Version on the programmable Logic Circuit')
metro1500PSTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 3), )
if mibBuilder.loadTexts: metro1500PSTable.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500PSTable.setDescription('Table of installed Power Supplies')
metro1500PSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 3, 1), ).setIndexNames((0, "METRO1500-MIB", "metro1500PSNumber"))
if mibBuilder.loadTexts: metro1500PSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500PSEntry.setDescription('Installed METRO1500 Power Supplies')
metro1500PSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500PSNumber.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500PSNumber.setDescription('Number of installed Power Supply')
metro1500PSOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500PSOn.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500PSOn.setDescription('Is installed Power Supply On or Off')
metro1500FanTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 4), )
if mibBuilder.loadTexts: metro1500FanTable.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500FanTable.setDescription('Table of installed Fans')
metro1500FanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 4, 1), ).setIndexNames((0, "METRO1500-MIB", "metro1500FanNumber"))
if mibBuilder.loadTexts: metro1500FanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500FanEntry.setDescription('Installed METRO1500 Fans')
metro1500FanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500FanNumber.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500FanNumber.setDescription('Number of installed Fan')
metro1500FanOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500FanOn.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500FanOn.setDescription('Is installed Fan On or Off')
metro1500Converter = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5))
metro1500ConverterTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1), )
if mibBuilder.loadTexts: metro1500ConverterTable.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500ConverterTable.setDescription('Table of installed METRO1500 Converters')
metro1500ConverterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1, 1), ).setIndexNames((0, "METRO1500-MIB", "metro1500ConverterNumber"))
if mibBuilder.loadTexts: metro1500ConverterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500ConverterEntry.setDescription('Installed METRO1500 Converters')
metro1500ConverterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500ConverterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500ConverterNumber.setDescription('Slot Number of installed Converter Card')
metro1500RxLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500RxLoc.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500RxLoc.setDescription('Local Receiver has Signal (On) or Loss of Signal (Off)')
metro1500TxLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("alwaysOn", 3), ("alwaysOff", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TxLoc.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TxLoc.setDescription('Local Transmitter is On or Off')
metro1500TxLocC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TxLocC.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TxLocC.setDescription('Current of the local Transmitter in mA. This Entry is only available if a Current Sensor is installed')
metro1500TxLocTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TxLocTemp.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TxLocTemp.setDescription('Temperature of the local Transmitter in Celsius. This Entry is only available if the Laser is cooled')
metro1500RxRem = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500RxRem.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500RxRem.setDescription('Remote Receiver has Signal (On) or Loss of Signal (Off)')
metro1500TxRem = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("alwaysOn", 3), ("alwaysOff", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TxRem.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TxRem.setDescription('Remote Transmitter is On or Off')
metro1500TxRemC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TxRemC.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TxRemC.setDescription('Current of the Remote Transmitter in Milli Ampere. This Entry is only available if a Current Sensor is installed')
metro1500TxRemTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TxRemTemp.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TxRemTemp.setDescription('Temperature of the Remote Transmitter in Celsius This Entry is only available if the Laser is cooled')
metro1500RxRem2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500RxRem2.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500RxRem2.setDescription('2nd Remote receiver has Signal (On) or Loss of Signal (Off). (Only available if a 2nd Remote Receiver is installed)')
metro1500ClockState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500ClockState.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500ClockState.setDescription('Status of the Clock. This Entry is only available if a Clock is installed. If the Clock is enabled, and has an error output, and cannot synchronize to the Signal, the Clock fails.')
metro1500ClockFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500ClockFreq.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500ClockFreq.setDescription('Frequency of the Clock in MBit/s. Only available if a Clock is installed.')
metro1500LocLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500LocLoop.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500LocLoop.setDescription('Local Loop is set to On or to Off')
metro1500RemLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500RemLoop.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500RemLoop.setDescription('Remote Loop is set to On or to Off')
metro1500ClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 7, 9, 11, 21, 22, 31, 32, 41, 42, 51, 52, 61, 62, 71, 72, 75, 76, 81, 82, 255))).clone(namedValues=NamedValues(("multiClockLSModule", 1), ("multiClockLS", 2), ("multiClockFCGbE", 3), ("multiClockOCxGbE", 5), ("multiClockOCxFC", 7), ("multiClockOCxGbEFC", 9), ("multiClockFCGbEOnBoard", 11), ("fixedClock125MbpsModule", 21), ("fixedClock125Mbps", 22), ("fixedClock155MbpsModule", 31), ("fixedClock155Mbps", 32), ("fixedClock200MbpsModule", 41), ("fixedClock200Mbps", 42), ("fixedClock266MbpsModule", 51), ("fixedClock266Mbps", 52), ("fixedClock622MbpsModule", 61), ("fixedClock622Mbps", 62), ("fixedClock1062MbpsModule", 71), ("fixedClock1062Mbps", 72), ("fixedClock1250MbpsModule", 75), ("fixedClock1250Mbps", 76), ("fixedClock2500MbpsModule", 81), ("fixedClock2500Mbps", 82), ("other", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500ClockType.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500ClockType.setDescription('Type of the Clock. Only available, if a Clock is installed.')
metro1500Switch = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 3, 10))
metro1500SwitchTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 3, 10, 1), )
if mibBuilder.loadTexts: metro1500SwitchTable.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500SwitchTable.setDescription('Table of installed METRO1500 Switches')
metro1500SwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 3, 10, 1, 1), ).setIndexNames((0, "METRO1500-MIB", "metro1500SwitchNumber"))
if mibBuilder.loadTexts: metro1500SwitchEntry.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500SwitchEntry.setDescription('Installed METRO1500 Switches')
metro1500SwitchNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500SwitchNumber.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500SwitchNumber.setDescription('Slot Number of installed Remote Optical Switch Card')
metro1500SwitchLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lineA", 1), ("lineB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500SwitchLine.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500SwitchLine.setDescription('Active Line of Remote Optical Switch')
metro1500SwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("locked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500SwitchMode.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500SwitchMode.setDescription('Mode of Transmit Line of Remote Optical Switch')
metro1500SwitchLaserOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500SwitchLaserOn.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500SwitchLaserOn.setDescription('Shows if the reference Laser is On or Off')
metro1500SwitchLineAavail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("notAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500SwitchLineAavail.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500SwitchLineAavail.setDescription('Is Line A of Remote Optical Switch available?')
metro1500SwitchLineBavail = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("notAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500SwitchLineBavail.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500SwitchLineBavail.setDescription('Is Line B of Remote Optical Switch available')
metro1500EthernetHub = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14))
metro1500EthernetHubTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1), )
if mibBuilder.loadTexts: metro1500EthernetHubTable.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubTable.setDescription('Table of installed FSP-II Hub Cards')
metro1500EthernetHubEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1), ).setIndexNames((0, "METRO1500-MIB", "metro1500EthernetHubNumber"))
if mibBuilder.loadTexts: metro1500EthernetHubEntry.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubEntry.setDescription('Installed FSP-II Hub Cards')
metro1500EthernetHubNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubNumber.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubNumber.setDescription('Slot Number of installed Hub Card')
metro1500EthernetHubPortEnable1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortEnable1.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortEnable1.setDescription('is Hub Port 1 enabled ?')
metro1500EthernetHubPortPartitionStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("partitioned", 1), ("notPartitioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortPartitionStatus1.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortPartitionStatus1.setDescription('is Port 1 partitioned ?')
metro1500EthernetHubPortLinkStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linked", 1), ("notLinked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortLinkStatus1.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortLinkStatus1.setDescription('does Port 1 receive Link Pulses ?')
metro1500EthernetHubPortPolarity1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("positive", 1), ("negative", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortPolarity1.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortPolarity1.setDescription('polarity of input signal at Port 1')
metro1500EthernetHubPortEnable2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortEnable2.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortEnable2.setDescription('is Hub Port 2 enabled ?')
metro1500EthernetHubPortPartitionStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("partitioned", 1), ("notPartitioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortPartitionStatus2.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortPartitionStatus2.setDescription('is Port 2 partitioned ?')
metro1500EthernetHubPortLinkStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linked", 1), ("notLinked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortLinkStatus2.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortLinkStatus2.setDescription('does Port 2 receive Link Pulses ?')
metro1500EthernetHubPortPolarity2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("positive", 1), ("negative", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortPolarity2.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortPolarity2.setDescription('polarity of input signal at Port 2')
metro1500EthernetHubPortEnable3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortEnable3.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortEnable3.setDescription('is Hub Port 3 enabled ?')
metro1500EthernetHubPortPartitionStatus3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("partitioned", 1), ("notPartitioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortPartitionStatus3.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortPartitionStatus3.setDescription('is Port 3 partitioned ?')
metro1500EthernetHubPortLinkStatus3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linked", 1), ("notLinked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortLinkStatus3.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortLinkStatus3.setDescription('does Port 3 receive Link Pulses ?')
metro1500EthernetHubPortPolarity3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("positive", 1), ("negative", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortPolarity3.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortPolarity3.setDescription('polarity of input signal at Port 3')
metro1500EthernetHubPortEnable4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortEnable4.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortEnable4.setDescription('is Hub Port 4 enabled ?')
metro1500EthernetHubPortPartitionStatus4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("partitioned", 1), ("notPartitioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortPartitionStatus4.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortPartitionStatus4.setDescription('is Port 4 partitioned ?')
metro1500EthernetHubPortLinkStatus4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linked", 1), ("notLinked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortLinkStatus4.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortLinkStatus4.setDescription('does Port 4 receive Link Pulses ?')
metro1500EthernetHubPortPolarity4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("positive", 1), ("negative", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortPolarity4.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortPolarity4.setDescription('polarity of input signal at Port 4')
metro1500EthernetHubPortEnable5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortEnable5.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortEnable5.setDescription('is Hub Port 5 enabled ?')
metro1500EthernetHubPortPartitionStatus5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("partitioned", 1), ("notPartitioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortPartitionStatus5.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortPartitionStatus5.setDescription('is Port 5 partitioned ?')
metro1500EthernetHubPortLinkStatus5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linked", 1), ("notLinked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortLinkStatus5.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortLinkStatus5.setDescription('does Port 5 receive Link Pulses ?')
metro1500EthernetHubPortPolarity5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 14, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("positive", 1), ("negative", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500EthernetHubPortPolarity5.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500EthernetHubPortPolarity5.setDescription('polarity of input signal at Port 5')
metro1500TDM = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15))
metro1500TDMTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1), )
if mibBuilder.loadTexts: metro1500TDMTable.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMTable.setDescription('Table of installed FSP-II TDM Cards')
metro1500TDMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1), ).setIndexNames((0, "METRO1500-MIB", "metro1500TDMNumber"))
if mibBuilder.loadTexts: metro1500TDMEntry.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMEntry.setDescription('Installed FSP-II TDM Cards')
metro1500TDMNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMNumber.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMNumber.setDescription('Slot Number of installed TDM Card')
metro1500TDMRxRem = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMRxRem.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMRxRem.setDescription('Does the remote receiver receive Light (on) or not (off)?')
metro1500TDMRxSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync", 1), ("noSync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMRxSync.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMRxSync.setDescription('Is the input signal synchronized with the corresponding TDM card?')
metro1500TDMTxRem = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("alwaysOn", 3), ("alwaysOff", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMTxRem.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMTxRem.setDescription('State of the Remote Transmitter')
metro1500TDMTxRemC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMTxRemC.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMTxRemC.setDescription('Current of the remote Transmitter in mA')
metro1500TDMTxRemTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMTxRemTemp.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMTxRemTemp.setDescription('Temperature of the remote Transmitter in Celsius')
metro1500TDMLocLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocLoop.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocLoop.setDescription('Loop for all Local Inputs enabled (on) or disabled (off)')
metro1500TDMLocModuleInst1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("installed", 1), ("notInstalled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleInst1.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleInst1.setDescription('is local Module 1 installed ?')
metro1500TDMLocModuleEnable1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("notEnabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleEnable1.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleEnable1.setDescription('is local Module 1 enabled ?')
metro1500TDMLocModuleRx1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleRx1.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleRx1.setDescription('local receiver 1 gets signal (on)')
metro1500TDMLocModuleTx1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("alwaysOn", 3), ("alwaysOff", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleTx1.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleTx1.setDescription('state of the local transmitter')
metro1500TDMLocModuleRemoteData1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("noData", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleRemoteData1.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleRemoteData1.setDescription('receiving data for this module from the remote side')
metro1500TDMLocModuleClockFrequency1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleClockFrequency1.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleClockFrequency1.setDescription('data rate of the clock installed on local Module 1 in MBit/s')
metro1500TDMLocModuleClockError1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("noError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleClockError1.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleClockError1.setDescription('data rate and clock frequency are not synchronized')
metro1500TDMLocModuleInst2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("installed", 1), ("notInstalled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleInst2.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleInst2.setDescription('is local Module 2 installed ?')
metro1500TDMLocModuleEnable2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("notEnabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleEnable2.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleEnable2.setDescription('is local Module 2 enabled ?')
metro1500TDMLocModuleRx2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleRx2.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleRx2.setDescription('local receiver 2 gets signal (on)')
metro1500TDMLocModuleTx2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("alwaysOn", 3), ("alwaysOff", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleTx2.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleTx2.setDescription('state of the local transmitter')
metro1500TDMLocModuleRemoteData2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("noData", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleRemoteData2.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleRemoteData2.setDescription('receiving data for this module from the remote side')
metro1500TDMLocModuleClockFrequency2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleClockFrequency2.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleClockFrequency2.setDescription('data rate of the clock installed on local Module 2 in MBit/s')
metro1500TDMLocModuleClockError2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("noError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleClockError2.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleClockError2.setDescription('data rate and clock frequency are not synchronized')
metro1500TDMLocModuleInst3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("installed", 1), ("notInstalled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleInst3.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleInst3.setDescription('is local Module 3 installed ?')
metro1500TDMLocModuleEnable3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("notEnabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleEnable3.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleEnable3.setDescription('is local Module 3 enabled ?')
metro1500TDMLocModuleRx3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleRx3.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleRx3.setDescription('local receiver 3 gets signal (on)')
metro1500TDMLocModuleTx3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("alwaysOn", 3), ("alwaysOff", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleTx3.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleTx3.setDescription('state of the local transmitter')
metro1500TDMLocModuleRemoteData3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("noData", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleRemoteData3.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleRemoteData3.setDescription('receiving data for this module from the remote side')
metro1500TDMLocModuleClockFrequency3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleClockFrequency3.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleClockFrequency3.setDescription('data rate of the clock installed on local Module 3 in MBit/s')
metro1500TDMLocModuleClockError3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("noError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleClockError3.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleClockError3.setDescription('data rate and clock frequency are not synchronized')
metro1500TDMLocModuleInst4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("installed", 1), ("notInstalled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleInst4.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleInst4.setDescription('is local Module 4 installed ?')
metro1500TDMLocModuleEnable4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("notEnabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleEnable4.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleEnable4.setDescription('is local Module 4 enabled ?')
metro1500TDMLocModuleRx4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleRx4.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleRx4.setDescription('local receiver 4 gets signal (on)')
metro1500TDMLocModuleTx4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("alwaysOn", 3), ("alwaysOff", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleTx4.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleTx4.setDescription('state of the local transmitter')
metro1500TDMLocModuleRemoteData4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("noData", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleRemoteData4.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleRemoteData4.setDescription('receiving data for this module from the remote side')
metro1500TDMLocModuleClockFrequency4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleClockFrequency4.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleClockFrequency4.setDescription('data rate of the clock installed on local Module 4 in MBit/s')
metro1500TDMLocModuleClockError4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 3, 15, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("noError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: metro1500TDMLocModuleClockError4.setStatus('mandatory')
if mibBuilder.loadTexts: metro1500TDMLocModuleClockError4.setDescription('data rate and clock frequency are not synchronized')
metro1500Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100))
metro1500HardwareAdded = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,1)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500HardwareAdded.setDescription('Trap is sent when a new Module is inserted into the FSP-I Box')
metro1500HardwareDeleted = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,2)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500HardwareDeleted.setDescription('Trap is sent when a Module is removed from the FSP-I Box')
metro1500PSNotFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,3)).setObjects(("METRO1500-MIB", "metro1500PSNumber"))
if mibBuilder.loadTexts: metro1500PSNotFail.setDescription('Trap is sent when a Power Supply starts working')
metro1500PSFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,4)).setObjects(("METRO1500-MIB", "metro1500PSNumber"))
if mibBuilder.loadTexts: metro1500PSFail.setDescription('Trap is sent when a Power Supply fails')
metro1500FanNotFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,5)).setObjects(("METRO1500-MIB", "metro1500FanNumber"))
if mibBuilder.loadTexts: metro1500FanNotFail.setDescription('Trap is sent when a Fan starts working')
metro1500FanFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,6)).setObjects(("METRO1500-MIB", "metro1500FanNumber"))
if mibBuilder.loadTexts: metro1500FanFail.setDescription('Trap is sent when a Fan fails')
metro1500BusNotFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,7))
if mibBuilder.loadTexts: metro1500BusNotFail.setDescription('Trap is sent when the internal Bus starts working again')
metro1500BusFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,8))
if mibBuilder.loadTexts: metro1500BusFail.setDescription('Trap is sent when an internal Bus Failure occurs')
metro1500RxLocOn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,20)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500RxLocOn.setDescription('Trap is sent when the local Receiver gets Signal')
metro1500RxLocOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,21)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500RxLocOff.setDescription('Trap is sent when the local Receiver has Loss of Signal')
metro1500TxLocOn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,22)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TxLocOn.setDescription('Trap is sent when the local Transmitter is switched on, Either this trap or Trap #20 should be disabled in the Configuration because they are typically sent at the same Time.')
metro1500TxLocOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,23)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TxLocOff.setDescription('Trap is sent when the local Transmitter is switched off, Either this trap or Trap #21 should be disabled in the Configuration because they are typically sent at the same Time.')
metro1500RxRemOn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,24)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500RxRemOn.setDescription('Trap is sent when the remote Receiver gets Signal')
metro1500RxRemOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,25)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500RxRemOff.setDescription('Trap is sent when the remote Receiver has Loss of Signal')
metro1500TxRemOn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,26)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TxRemOn.setDescription('Trap is sent when the remote Transmitter is switched on, Either this trap or Trap #24 should be disabled in the Configuration because they are typically sent at the same Time.')
metro1500TxRemOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,27)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TxRemOff.setDescription('Trap is sent when the remote Transmitter is switched off, Either this trap or Trap #25 should be disabled in the Configuration because they are typically sent at the same Time.')
metro1500RxRem2On = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,28)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500RxRem2On.setDescription('Trap is sent when the 2nd remote Receiver gets Signal. This Trap is only sent if there is a 2nd remote Receiver.')
metro1500RxRem2Off = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,29)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500RxRem2Off.setDescription('Trap is sent when the 2nd remote Receiver has Loss of Signal. This Trap is only sent if there is a 2nd remote Receiver.')
metro1500TxRem2On = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,30)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TxRem2On.setDescription('Trap is sent when the 2nd remote Transmitter is switched on, Either this Trap or Trap #28 should be disabled in the Configuration because they are typically sent at the same Time. This Trap is only sent if there is a 2nd remote Receiver.')
metro1500TxRem2Off = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,31)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TxRem2Off.setDescription('Trap is sent when the 2nd remote Transmitter is switched off, Either this trap or Trap #29 should be disabled in the Configuration because they are typically sent at the same Time.')
metro1500ClockNoFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,32)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500ClockNoFail.setDescription('Trap is sent if a Clock is installed and can synchronize with the input Signal. This Trap is not sent if the installed Clock does not have an error Output')
metro1500ClockFail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,33)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500ClockFail.setDescription('Trap is sent if a Clock is installed and can not synchronize with the input Signal. This trap is not sent if the installed Clock does not have an error Output')
metro1500ClockChangeFrequency = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,34)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500ClockChangeFrequency.setDescription('Trap is sent if a multi frequency Clock is installed and changes its frequency.')
metro1500LocLoopOn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,35)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500LocLoopOn.setDescription('Trap is sent if Local Loop is set to On.')
metro1500LocLoopOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,36)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500LocLoopOff.setDescription('Trap is sent if Local Loop is set to Off.')
metro1500RemLoopOn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,37)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500RemLoopOn.setDescription('Trap is sent if Remote Loop is set to On.')
metro1500RemLoopOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,38)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500RemLoopOff.setDescription('Trap is sent if Remote Loop is set to Off.')
metro1500switchReferenceLaserOn = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,40)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500switchReferenceLaserOn.setDescription('Trap is sent when the Reference Laser is switched on')
metro1500switchReferenceLaserOff = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,41)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500switchReferenceLaserOff.setDescription('Trap is sent when the Reference Laser is switched off')
metro1500switchToA = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,42)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500switchToA.setDescription('Trap is sent when the Switch switches to Line A')
metro1500switchToB = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,43)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500switchToB.setDescription('Trap is sent when the Switch switches to Line B')
metro1500switchAutomatic = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,44)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500switchAutomatic.setDescription('Trap is sent when the Switch is going to Automatic State')
metro1500switchLocked = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,45)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500switchLocked.setDescription('Trap is sent when the Switch is going to Locked State')
metro1500switchLineAavail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,46)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500switchLineAavail.setDescription('Trap is sent when the Switch Line A is available')
metro1500switchLineANotAvail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,47)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500switchLineANotAvail.setDescription('Trap is sent when the Switch Line A is not available')
metro1500switchLineBavail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,48)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500switchLineBavail.setDescription('Trap is sent when the Switch Line B is available')
metro1500switchLineBNotAvail = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,49)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500switchLineBNotAvail.setDescription('Trap is sent when the Switch Line B is not available')
metro1500repeatedMessage = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,50)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500repeatedMessage.setDescription('Trap is sent, after three times the same trap is sent (instead of the fourth one). The original trap is suppressed for one minute.')
metro1500INNCDown = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,51))
if mibBuilder.loadTexts: metro1500INNCDown.setDescription('Trap is sent, when the Inter NEMI Network Connection (INNC) is down.')
metro1500INNCUp = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,52))
if mibBuilder.loadTexts: metro1500INNCUp.setDescription('Trap is sent, when the Inter NEMI Network Connection (INNC) is up.')
metro1500EthernetHubPortEnable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,60)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500EthernetHubPortEnable.setDescription('Trap is sent, when one of the ports of the Ethernet Hub is enabled by the management software (default). Use SNMP Get to get the Port Number.')
metro1500EthernetHubPortDisable = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,61)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500EthernetHubPortDisable.setDescription('Trap is sent, when one of the ports of the Ethernet Hub is disabled by the management Software. Use SNMP Get to get the Port number.')
metro1500EthernetHubPortPartitioned = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,62)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500EthernetHubPortPartitioned.setDescription('Trap is sent, when a Hub Port is disabled by the Hub Hardware. Use SNMP Get to get the Port Number.')
metro1500EthernetHubPortNotPartitioned = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,63)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500EthernetHubPortNotPartitioned.setDescription('Trap is sent, when a Hub Port is enabled by the Hub Hardware (default). Use SNMP Get to get the Port Number.')
metro1500EthernetHubPortLinkPulses = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,64)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500EthernetHubPortLinkPulses.setDescription('Trap is sent, when a Hub Port starts receiving Link Pulses. Use SNMP Get to get the Port Number')
metro1500EthernetHubPortNoLinkPulses = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,65)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500EthernetHubPortNoLinkPulses.setDescription('Trap is sent, when a Hub Port stops receiving Link Pulses. Use SNMP Get to get the Port Number')
metro1500TDMRemoteSyncLoss = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,70)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMRemoteSyncLoss.setDescription('Trap is sent, when the synchronisation of the incoming remote data stream is lost')
metro1500TDMRemoteSync = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,71)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMRemoteSync.setDescription('Trap is sent, when the synchronisation of the incoming remote data stream is established')
metro1500TDMLocModuleEnabled1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,72)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleEnabled1.setDescription('Trap is sent, when local module 1 is enabled by software')
metro1500TDMLocModuleDisable1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,73)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleDisable1.setDescription('Trap is sent, when local module 1 is disabled by software')
metro1500TDMLocModuleEnabled2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,74)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleEnabled2.setDescription('Trap is sent, when local module 2 is enabled by software')
metro1500TDMLocModuleDisable2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,75)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleDisable2.setDescription('Trap is sent, when local module 2 is disabled by software')
metro1500TDMLocModuleEnabled3 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,76)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleEnabled3.setDescription('Trap is sent, when local module 3 is enabled by software')
metro1500TDMLocModuleDisable3 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,77)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleDisable3.setDescription('Trap is sent, when local module 3 is disabled by software')
metro1500TDMLocModuleEnabled4 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,78)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleEnabled4.setDescription('Trap is sent, when local module 4 is enabled by software')
metro1500TDMLocModuleDisable4 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,79)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleDisable4.setDescription('Trap is sent, when local module 4 is disabled by software')
metro1500TDMLocModuleRxOn1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,88)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleRxOn1.setDescription('Trap is sent, when the local receiver 1 of a TDM card gets modulated signal')
metro1500TDMLocModuleRxOff1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,89)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleRxOff1.setDescription("Trap is sent, when the local receiver 1 of a TDM card doesn't get modulated signal")
metro1500TDMLocModuleRxOn2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,90)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleRxOn2.setDescription('Trap is sent, when the local receiver 2 of a TDM card gets modulated signal')
metro1500TDMLocModuleRxOff2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,91)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleRxOff2.setDescription("Trap is sent, when the local receiver 2 of a TDM card doesn't get modulated signal")
metro1500TDMLocModuleRxOn3 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,92)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleRxOn3.setDescription('Trap is sent, when the local receiver 3 of a TDM card gets modulated signal')
metro1500TDMLocModuleRxOff3 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,93)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleRxOff3.setDescription("Trap is sent, when the local receiver 3 of a TDM card doesn't get modulated signal")
metro1500TDMLocModuleRxOn4 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,94)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleRxOn4.setDescription('Trap is sent, when the local receiver 4 of a TDM card gets modulated signal')
metro1500TDMLocModuleRxOff4 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,95)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleRxOff4.setDescription("Trap is sent, when the local receiver 4 of a TDM card doesn't get modulated signal")
metro1500TDMLocModuleData1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,104)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleData1.setDescription('Trap is sent, when data from the remote side is available for this TDM channel')
metro1500TDMLocModuleNoData1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,105)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleNoData1.setDescription('Trap is sent, when no data from the remote side is available for this TDM channel')
metro1500TDMLocModuleData2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,106)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleData2.setDescription('Trap is sent, when data from the remote side is available for this TDM channel')
metro1500TDMLocModuleNoData2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,107)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleNoData2.setDescription('Trap is sent, when no data from the remote side is available for this TDM channel')
metro1500TDMLocModuleData3 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,108)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleData3.setDescription('Trap is sent, when data from the remote side is available for this TDM channel')
metro1500TDMLocModuleNoData3 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,109)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleNoData3.setDescription('Trap is sent, when no data from the remote side is available for this TDM channel')
metro1500TDMLocModuleData4 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,110)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleData4.setDescription('Trap is sent, when data from the remote side is available for this TDM channel')
metro1500TDMLocModuleNoData4 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,111)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleNoData4.setDescription('Trap is sent, when no data from the remote side is available for this TDM channel')
metro1500TDMLocModuleClockFail1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,120)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleClockFail1.setDescription("Trap is sent, when the Data Rate of the local input signal doesn't match the Data Rate of the local clock")
metro1500TDMLocModuleClockNoFail1 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,121)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleClockNoFail1.setDescription('Trap is sent, when the Data Rate of the local input signal matches the Data Rate of the local clock')
metro1500TDMLocModuleClockFail2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,122)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleClockFail2.setDescription("Trap is sent, when the Data Rate of the local input signal doesn't match the Data Rate of the local clock")
metro1500TDMLocModuleClockNoFail2 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,123)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleClockNoFail2.setDescription('Trap is sent, when the Data Rate of the local input signal matches the Data Rate of the local clock')
metro1500TDMLocModuleClockFail3 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,124)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleClockFail3.setDescription("Trap is sent, when the Data Rate of the local input signal doesn't match the Data Rate of the local clock")
metro1500TDMLocModuleClockNoFail3 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,125)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleClockNoFail3.setDescription('Trap is sent, when the Data Rate of the local input signal matches the Data Rate of the local clock')
metro1500TDMLocModuleClockFail4 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,126)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleClockFail4.setDescription("Trap is sent, when the Data Rate of the local input signal doesn't match the Data Rate of the local clock")
metro1500TDMLocModuleClockNoFail4 = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 3, 100) + (0,127)).setObjects(("METRO1500-MIB", "metro1500SlotNumber"))
if mibBuilder.loadTexts: metro1500TDMLocModuleClockNoFail4.setDescription('Trap is sent, when the Data Rate of the local input signal matches the Data Rate of the local clock')
mibBuilder.exportSymbols("METRO1500-MIB", metro1500TDMNumber=metro1500TDMNumber, metro1500TDMLocModuleClockFail4=metro1500TDMLocModuleClockFail4, metro1500SlotNumber=metro1500SlotNumber, metro1500RxRem2=metro1500RxRem2, metro1500EthernetHubPortNotPartitioned=metro1500EthernetHubPortNotPartitioned, metro1500switchReferenceLaserOff=metro1500switchReferenceLaserOff, metro1500EthernetHubPortLinkStatus3=metro1500EthernetHubPortLinkStatus3, metro1500MainLogfileName=metro1500MainLogfileName, metro1500TxLoc=metro1500TxLoc, metro1500Trap=metro1500Trap, metro1500TDMLocModuleClockFrequency2=metro1500TDMLocModuleClockFrequency2, metro1500HardwareAdded=metro1500HardwareAdded, metro1500MainTrapsinkPriority=metro1500MainTrapsinkPriority, metro1500DetailInfo=metro1500DetailInfo, metro1500EPLDVersion=metro1500EPLDVersion, metro1500EthernetHubTable=metro1500EthernetHubTable, metro1500switchAutomatic=metro1500switchAutomatic, metro1500TDMLocModuleClockFail2=metro1500TDMLocModuleClockFail2, metro1500SwitchLine=metro1500SwitchLine, metro1500TDMLocModuleRemoteData3=metro1500TDMLocModuleRemoteData3, metro1500TDMLocModuleEnable2=metro1500TDMLocModuleEnable2, metro1500TxRem=metro1500TxRem, metro1500FanNumber=metro1500FanNumber, metro1500FanOn=metro1500FanOn, metro1500FanEntry=metro1500FanEntry, metro1500TDMLocModuleClockFrequency3=metro1500TDMLocModuleClockFrequency3, metro1500SwitchLineAavail=metro1500SwitchLineAavail, metro1500RxLocOff=metro1500RxLocOff, metro1500MainMotd=metro1500MainMotd, metro1500MainLogfilePriority=metro1500MainLogfilePriority, metro1500PSOn=metro1500PSOn, metro1500EthernetHubPortPartitioned=metro1500EthernetHubPortPartitioned, metro1500BusFail=metro1500BusFail, metro1500TxLocTemp=metro1500TxLocTemp, metro1500TDMRxSync=metro1500TDMRxSync, metro1500switchToB=metro1500switchToB, metro1500PSNumber=metro1500PSNumber, metro1500TDMLocModuleRx3=metro1500TDMLocModuleRx3, metro1500SwitchLaserOn=metro1500SwitchLaserOn, enterprises=enterprises, metro1500TDMLocModuleData4=metro1500TDMLocModuleData4, metro1500TDM=metro1500TDM, metro1500TDMLocModuleRxOff2=metro1500TDMLocModuleRxOff2, metro1500TxLocOn=metro1500TxLocOn, metro1500FanTable=metro1500FanTable, metro1500EthernetHubPortPolarity2=metro1500EthernetHubPortPolarity2, metro1500switchReferenceLaserOn=metro1500switchReferenceLaserOn, metro1500EthernetHubPortPolarity5=metro1500EthernetHubPortPolarity5, metro1500RemLoopOn=metro1500RemLoopOn, metro1500TDMLocModuleTx3=metro1500TDMLocModuleTx3, metro1500EthernetHubPortEnable=metro1500EthernetHubPortEnable, metro1500TDMRemoteSync=metro1500TDMRemoteSync, metro1500ConverterNumber=metro1500ConverterNumber, metro1500TDMRemoteSyncLoss=metro1500TDMRemoteSyncLoss, metro1500TDMLocModuleClockFrequency4=metro1500TDMLocModuleClockFrequency4, metro1500EthernetHubEntry=metro1500EthernetHubEntry, metro1500switchLocked=metro1500switchLocked, metro1500MainLogfileTable=metro1500MainLogfileTable, metro1500MainLogfileEntry=metro1500MainLogfileEntry, metro1500ClockFail=metro1500ClockFail, metro1500TDMLocModuleEnable3=metro1500TDMLocModuleEnable3, metro1500TDMLocModuleTx2=metro1500TDMLocModuleTx2, metro1500Switch=metro1500Switch, metro1500TDMLocModuleRx4=metro1500TDMLocModuleRx4, metro1500RxRem2On=metro1500RxRem2On, metro1500TDMLocModuleRxOff3=metro1500TDMLocModuleRxOff3, metro1500TxRemC=metro1500TxRemC, metro1500TDMLocModuleClockNoFail2=metro1500TDMLocModuleClockNoFail2, advaProducts=advaProducts, metro1500TxLocC=metro1500TxLocC, metro1500Type=metro1500Type, metro1500MainTrapsinkNumber=metro1500MainTrapsinkNumber, metro1500TDMLocModuleClockError1=metro1500TDMLocModuleClockError1, metro1500PSEntry=metro1500PSEntry, metro1500MainTrapsinkCommunity=metro1500MainTrapsinkCommunity, metro1500LocLoop=metro1500LocLoop, metro1500repeatedMessage=metro1500repeatedMessage, metro1500RxLoc=metro1500RxLoc, metro1500SwitchTable=metro1500SwitchTable, metro1500RxRemOn=metro1500RxRemOn, metro1500TxRemOff=metro1500TxRemOff, metro1500ConverterTable=metro1500ConverterTable, metro1500EthernetHubPortPolarity1=metro1500EthernetHubPortPolarity1, metro1500EthernetHubPortLinkPulses=metro1500EthernetHubPortLinkPulses, metro1500TDMLocModuleEnabled2=metro1500TDMLocModuleEnabled2, metro1500EthernetHubPortLinkStatus2=metro1500EthernetHubPortLinkStatus2, metro1500MainLastEvent=metro1500MainLastEvent, metro1500TDMLocLoop=metro1500TDMLocLoop, metro1500MainSerialNumber=metro1500MainSerialNumber, metro1500TDMLocModuleClockError3=metro1500TDMLocModuleClockError3, metro1500TDMLocModuleDisable4=metro1500TDMLocModuleDisable4, metro1500TDMEntry=metro1500TDMEntry, metro1500ClockState=metro1500ClockState, metro1500TDMLocModuleRxOn2=metro1500TDMLocModuleRxOn2, dod=dod, metro1500RxRem=metro1500RxRem, metro1500EthernetHubPortPolarity4=metro1500EthernetHubPortPolarity4, metro1500RemLoopOff=metro1500RemLoopOff, metro1500TDMLocModuleTx4=metro1500TDMLocModuleTx4, metro1500TDMLocModuleRemoteData1=metro1500TDMLocModuleRemoteData1, metro1500TxLocOff=metro1500TxLocOff, metro1500TxRem2Off=metro1500TxRem2Off, metro1500MainSoftwareVersion=metro1500MainSoftwareVersion, metro1500=metro1500, metro1500TDMLocModuleInst1=metro1500TDMLocModuleInst1, metro1500TDMLocModuleData3=metro1500TDMLocModuleData3, metro1500TDMTxRem=metro1500TDMTxRem, metro1500TDMLocModuleRxOn3=metro1500TDMLocModuleRxOn3, metro1500TDMTable=metro1500TDMTable, metro1500TDMLocModuleEnable4=metro1500TDMLocModuleEnable4, org=org, metro1500FanFail=metro1500FanFail, metro1500switchLineANotAvail=metro1500switchLineANotAvail, metro1500TDMLocModuleRemoteData4=metro1500TDMLocModuleRemoteData4, metro1500TDMLocModuleClockError4=metro1500TDMLocModuleClockError4, metro1500HardwareDeleted=metro1500HardwareDeleted, metro1500ConverterEntry=metro1500ConverterEntry, metro1500TDMLocModuleClockError2=metro1500TDMLocModuleClockError2, metro1500TDMLocModuleRxOff1=metro1500TDMLocModuleRxOff1, metro1500INNCUp=metro1500INNCUp, metro1500ClockFreq=metro1500ClockFreq, metro1500TDMLocModuleTx1=metro1500TDMLocModuleTx1, metro1500MainLogfileNumber=metro1500MainLogfileNumber, metro1500TDMTxRemC=metro1500TDMTxRemC, adva=adva, metro1500Main=metro1500Main, metro1500EthernetHub=metro1500EthernetHub, metro1500EthernetHubPortPartitionStatus1=metro1500EthernetHubPortPartitionStatus1, metro1500SlotTypeNumber=metro1500SlotTypeNumber, metro1500HardwareVersion=metro1500HardwareVersion, metro1500RemLoop=metro1500RemLoop, metro1500EthernetHubPortPartitionStatus4=metro1500EthernetHubPortPartitionStatus4, metro1500Converter=metro1500Converter, metro1500SlotTable=metro1500SlotTable, metro1500LocLoopOn=metro1500LocLoopOn, metro1500MainTrapsinkTable=metro1500MainTrapsinkTable, metro1500switchLineBavail=metro1500switchLineBavail, metro1500TDMLocModuleRemoteData2=metro1500TDMLocModuleRemoteData2, metro1500TDMLocModuleEnabled3=metro1500TDMLocModuleEnabled3, metro1500BusNotFail=metro1500BusNotFail, metro1500EthernetHubPortEnable5=metro1500EthernetHubPortEnable5, metro1500TxRem2On=metro1500TxRem2On, metro1500SerialNumber=metro1500SerialNumber, metro1500TDMLocModuleEnable1=metro1500TDMLocModuleEnable1, metro1500switchToA=metro1500switchToA, metro1500TDMLocModuleClockNoFail1=metro1500TDMLocModuleClockNoFail1, metro1500TDMLocModuleInst2=metro1500TDMLocModuleInst2, metro1500Manufacturer=metro1500Manufacturer, metro1500TDMLocModuleNoData4=metro1500TDMLocModuleNoData4, metro1500FanNotFail=metro1500FanNotFail, metro1500RxLocOn=metro1500RxLocOn, metro1500Temperature=metro1500Temperature, metro1500RxRemOff=metro1500RxRemOff, metro1500TDMLocModuleClockFrequency1=metro1500TDMLocModuleClockFrequency1, metro1500TDMRxRem=metro1500TDMRxRem, metro1500TDMLocModuleData1=metro1500TDMLocModuleData1, metro1500EthernetHubPortPolarity3=metro1500EthernetHubPortPolarity3, metro1500MainTrapsinkEntry=metro1500MainTrapsinkEntry, metro1500PSTable=metro1500PSTable, private=private, metro1500TxRemTemp=metro1500TxRemTemp, metro1500EthernetHubPortLinkStatus5=metro1500EthernetHubPortLinkStatus5, metro1500EthernetHubPortEnable1=metro1500EthernetHubPortEnable1, metro1500TDMLocModuleRxOff4=metro1500TDMLocModuleRxOff4, metro1500PSFail=metro1500PSFail, metro1500TDMLocModuleInst3=metro1500TDMLocModuleInst3, metro1500EthernetHubPortPartitionStatus5=metro1500EthernetHubPortPartitionStatus5, metro1500TDMLocModuleNoData3=metro1500TDMLocModuleNoData3, metro1500TDMLocModuleRx2=metro1500TDMLocModuleRx2, metro1500SoftwareVersion=metro1500SoftwareVersion, metro1500PSNotFail=metro1500PSNotFail, metro1500TDMLocModuleRxOn4=metro1500TDMLocModuleRxOn4, metro1500ClockType=metro1500ClockType, metro1500INNCDown=metro1500INNCDown, metro1500EthernetHubPortEnable2=metro1500EthernetHubPortEnable2, metro1500TDMLocModuleEnabled1=metro1500TDMLocModuleEnabled1, metro1500TDMLocModuleDisable1=metro1500TDMLocModuleDisable1, metro1500TDMLocModuleClockNoFail3=metro1500TDMLocModuleClockNoFail3, metro1500LocLoopOff=metro1500LocLoopOff, metro1500MainType=metro1500MainType, metro1500SlotEntry=metro1500SlotEntry, metro1500SwitchNumber=metro1500SwitchNumber, metro1500TDMLocModuleNoData1=metro1500TDMLocModuleNoData1, metro1500EthernetHubPortNoLinkPulses=metro1500EthernetHubPortNoLinkPulses, metro1500switchLineAavail=metro1500switchLineAavail, metro1500EthernetHubPortDisable=metro1500EthernetHubPortDisable, metro1500TDMLocModuleDisable2=metro1500TDMLocModuleDisable2, metro1500SwitchEntry=metro1500SwitchEntry, metro1500TDMLocModuleRx1=metro1500TDMLocModuleRx1, metro1500SwitchLineBavail=metro1500SwitchLineBavail, metro1500TDMLocModuleNoData2=metro1500TDMLocModuleNoData2, metro1500EthernetHubPortEnable3=metro1500EthernetHubPortEnable3, metro1500ClockChangeFrequency=metro1500ClockChangeFrequency, metro1500ClockNoFail=metro1500ClockNoFail, metro1500TDMTxRemTemp=metro1500TDMTxRemTemp, metro1500TDMLocModuleRxOn1=metro1500TDMLocModuleRxOn1, metro1500SwitchMode=metro1500SwitchMode, metro1500MainHardwareVersion=metro1500MainHardwareVersion, metro1500EthernetHubPortLinkStatus1=metro1500EthernetHubPortLinkStatus1, metro1500TDMLocModuleDisable3=metro1500TDMLocModuleDisable3, metro1500MainBusMessages=metro1500MainBusMessages, metro1500EthernetHubNumber=metro1500EthernetHubNumber, metro1500switchLineBNotAvail=metro1500switchLineBNotAvail, metro1500TDMLocModuleData2=metro1500TDMLocModuleData2, metro1500Housing=metro1500Housing, metro1500MainLogfileSize=metro1500MainLogfileSize, metro1500EthernetHubPortLinkStatus4=metro1500EthernetHubPortLinkStatus4, metro1500TDMLocModuleClockNoFail4=metro1500TDMLocModuleClockNoFail4, internet=internet, metro1500BoardVoltage=metro1500BoardVoltage, metro1500EthernetHubPortPartitionStatus3=metro1500EthernetHubPortPartitionStatus3, metro1500EthernetHubPortPartitionStatus2=metro1500EthernetHubPortPartitionStatus2, metro1500TDMLocModuleClockFail3=metro1500TDMLocModuleClockFail3, metro1500EthernetHubPortEnable4=metro1500EthernetHubPortEnable4, metro1500MainTrapsinkAddress=metro1500MainTrapsinkAddress, metro1500MainBusErrors=metro1500MainBusErrors, metro1500RxRem2Off=metro1500RxRem2Off, metro1500TDMLocModuleInst4=metro1500TDMLocModuleInst4, metro1500TDMLocModuleClockFail1=metro1500TDMLocModuleClockFail1, metro1500TDMLocModuleEnabled4=metro1500TDMLocModuleEnabled4, metro1500TxRemOn=metro1500TxRemOn)
