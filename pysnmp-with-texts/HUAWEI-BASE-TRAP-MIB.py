#
# PySNMP MIB module HUAWEI-BASE-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-BASE-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:43:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
entPhysicalIndex, entPhysicalName, entPhysicalClass, entPhysicalContainedIn = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "entPhysicalName", "entPhysicalClass", "entPhysicalContainedIn")
hwStorageSpace, hwStorageName, hwStorageSpaceFree = mibBuilder.importSymbols("HUAWEI-FLASH-MAN-MIB", "hwStorageSpace", "hwStorageName", "hwStorageSpaceFree")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
IANAItuEventType, IANAItuProbableCause = mibBuilder.importSymbols("IANA-ITU-ALARM-TC-MIB", "IANAItuEventType", "IANAItuProbableCause")
ifDescr, ifOperStatus, ifName, ifAdminStatus, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifOperStatus", "ifName", "ifAdminStatus", "ifIndex")
ItuPerceivedSeverity, = mibBuilder.importSymbols("ITU-ALARM-TC-MIB", "ItuPerceivedSeverity")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ObjectIdentity, TimeTicks, IpAddress, MibIdentifier, Unsigned32, Integer32, Counter64, Bits, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "IpAddress", "MibIdentifier", "Unsigned32", "Integer32", "Counter64", "Bits", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hwBaseTrapMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129))
hwBaseTrapMIB.setRevisions(('2015-06-02 14:11', '2014-10-13 14:11', '2014-10-09 14:11', '2014-09-01 14:11', '2013-06-25 14:11', '2013-05-24 00:00', '2007-01-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwBaseTrapMIB.setRevisionsDescriptions(('V2.06, hwVsDiskFullAlarm,hwVsDiskResume', 'V2.05, delete the content modified in V2.04 to rollback to V2.03', 'V2.04, add ifindex as VB binder under hwPortPhysicalUp, hwPortPhysicalDown', 'V2.03, add ifOperStatus and ifAdminStatus to objects of hwPortPhysicalDown and hwPortPhysicalUp ', 'V2.02, add hwPortPhysicalDownReason', 'V2.01, Add new nodes : hwFESInconsistencyForMemoryLack , hwFESInconsistencyForMemoryLackResume.', 'V1.0, the first draft.',))
if mibBuilder.loadTexts: hwBaseTrapMIB.setLastUpdated('201506021411Z')
if mibBuilder.loadTexts: hwBaseTrapMIB.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwBaseTrapMIB.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwBaseTrapMIB.setDescription('This is the base trap definition for DataCom.')
hwBaseTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1))
hwBaseTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 1), ItuPerceivedSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBaseTrapSeverity.setStatus('current')
if mibBuilder.loadTexts: hwBaseTrapSeverity.setDescription('To describe the level of trap.')
hwBaseTrapProbableCause = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 2), IANAItuProbableCause()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBaseTrapProbableCause.setStatus('current')
if mibBuilder.loadTexts: hwBaseTrapProbableCause.setDescription('To describe the probable cause of trap.')
hwBaseTrapEventType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 3), IANAItuEventType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBaseTrapEventType.setStatus('current')
if mibBuilder.loadTexts: hwBaseTrapEventType.setDescription('To describe the type of trap.')
hwBaseTrapRelativeResource = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBaseTrapRelativeResource.setStatus('current')
if mibBuilder.loadTexts: hwBaseTrapRelativeResource.setDescription("This object may contain a key word to indicate the relative resource of an entity. Such as: hwEntityCommunicateError alarm may relate to a resource named 'IPC01'(A specified channel). So the trap may contain such a varbind in DisplayString style.")
hwBaseTrapReasonDescr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBaseTrapReasonDescr.setStatus('current')
if mibBuilder.loadTexts: hwBaseTrapReasonDescr.setDescription('To describe the reason of trap in DisplayString style.')
hwBaseThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 6), )
if mibBuilder.loadTexts: hwBaseThresholdTable.setStatus('current')
if mibBuilder.loadTexts: hwBaseThresholdTable.setDescription('A table to config the threshold of each sensor.')
hwBaseThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdType"), (0, "HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdIndex"))
if mibBuilder.loadTexts: hwBaseThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: hwBaseThresholdEntry.setDescription('The entry of threshold table.')
hwBaseThresholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("temperatureSensor", 1), ("humiditySensor", 2), ("voltageSensor", 3), ("currentSensor", 4), ("powerSensor", 5), ("portTraffic", 6), ("portCrcError", 7), ("portBroadcast", 8))))
if mibBuilder.loadTexts: hwBaseThresholdType.setStatus('current')
if mibBuilder.loadTexts: hwBaseThresholdType.setDescription('The index to indicate the type of threshold for an entry.Such as temperature, humidity ,power supply......')
hwBaseThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwBaseThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: hwBaseThresholdIndex.setDescription('A subindex to identify each sensor on physical entity.')
hwBaseThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBaseThresholdValue.setStatus('current')
if mibBuilder.loadTexts: hwBaseThresholdValue.setDescription('The current value that been measured.')
hwBaseThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("percentage", 1), ("centigrade1", 2), ("centigrade2", 3), ("voltage1", 4), ("voltage2", 5), ("current1", 6), ("current2", 7), ("power1", 8), ("power2", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBaseThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: hwBaseThresholdUnit.setDescription('The unit for this threshold value. percentage(1) ---unit for humidity centigrade1(2) ---unit for temperature centigrade2(3) ---unit for hundredth of centigrade voltage1(4) ---unit for volt (V) voltage2(5) ---unit for thousandth of volt (mV) electric current: current1(6) ---unit for milliampere (mA) current2(7) ---unit for microampere (uA) power1(8) ---unit for dbm(decibels above one milliwatt in 600 ohms) power2(9) ---unit for hundredth of dbm(decibels above one milliwatt in 600 ohms)')
hwBaseThresholdLowCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBaseThresholdLowCritical.setStatus('current')
if mibBuilder.loadTexts: hwBaseThresholdLowCritical.setDescription("The critical alarm threshold for falling alarm. It could be used for a more dangerous instance than hwBaseThresholdLowWarning. It should be equal to hwBaseThresholdLowWarning when don't support this threshold. ")
hwBaseThresholdLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBaseThresholdLowWarning.setStatus('current')
if mibBuilder.loadTexts: hwBaseThresholdLowWarning.setDescription('The normal warning threshold for falling alarm. ')
hwBaseThresholdHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBaseThresholdHighWarning.setStatus('current')
if mibBuilder.loadTexts: hwBaseThresholdHighWarning.setDescription('The normal warning threshold for rising alarm. ')
hwBaseThresholdHighCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBaseThresholdHighCritical.setStatus('current')
if mibBuilder.loadTexts: hwBaseThresholdHighCritical.setDescription("The critical alarm threshold for rising alarm. It could be used for a more dangerous instance than hwBaseThresholdHighWarning. It should be equal to hwBaseThresholdHighWarning when don't support this threshold.")
hwBaseUsageTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 7), )
if mibBuilder.loadTexts: hwBaseUsageTable.setStatus('current')
if mibBuilder.loadTexts: hwBaseUsageTable.setDescription('A table to config the threshold for each storage device.')
hwBaseUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 7, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "HUAWEI-BASE-TRAP-MIB", "hwBaseUsageType"), (0, "HUAWEI-BASE-TRAP-MIB", "hwBaseUsageIndex"))
if mibBuilder.loadTexts: hwBaseUsageEntry.setStatus('current')
if mibBuilder.loadTexts: hwBaseUsageEntry.setDescription('The entry for hwBaseUsageTable.')
hwBaseUsageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("cpuUtilization", 1), ("memoryUtilization", 2), ("diskUtilizatino", 3), ("flashUtilizatino", 4), ("cfCardUtilization", 5))))
if mibBuilder.loadTexts: hwBaseUsageType.setStatus('current')
if mibBuilder.loadTexts: hwBaseUsageType.setDescription('The index to indicate the type of threshold for an entry.Such as cpu,memory,flash and so on.')
hwBaseUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwBaseUsageIndex.setStatus('current')
if mibBuilder.loadTexts: hwBaseUsageIndex.setDescription('A subindex to identify each sensor on physical entity.')
hwBaseUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBaseUsageValue.setStatus('current')
if mibBuilder.loadTexts: hwBaseUsageValue.setDescription('The current value that been measured.')
hwBaseUsageUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("percentage", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBaseUsageUnit.setStatus('current')
if mibBuilder.loadTexts: hwBaseUsageUnit.setDescription('The unit for this threshold value. percentage(1) ---unit for cpu/men/disk/flash/cfCard ')
hwBaseUsageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBaseUsageThreshold.setStatus('current')
if mibBuilder.loadTexts: hwBaseUsageThreshold.setDescription('The threshold of usage for storage device.')
hwFIBOverloadModule = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwFIBOverloadModule.setStatus('current')
if mibBuilder.loadTexts: hwFIBOverloadModule.setDescription('module is ipv4 or ipv6')
hwBaseFlowDirectionType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBaseFlowDirectionType.setStatus('current')
if mibBuilder.loadTexts: hwBaseFlowDirectionType.setDescription(' The direction of data flow is specified. ')
hwPowerDirection = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwPowerDirection.setStatus('current')
if mibBuilder.loadTexts: hwPowerDirection.setDescription('The direction of photoelectric power.')
hwBaseTrapTrafficDir = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trafficIn", 1), ("trafficOut", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBaseTrapTrafficDir.setStatus('current')
if mibBuilder.loadTexts: hwBaseTrapTrafficDir.setDescription('The traffic flows in or out of the port.')
hwEntityRatedPower = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 12), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEntityRatedPower.setStatus('current')
if mibBuilder.loadTexts: hwEntityRatedPower.setDescription('The rated power of board.')
hwDevAvailablePower = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 13), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwDevAvailablePower.setStatus('current')
if mibBuilder.loadTexts: hwDevAvailablePower.setDescription('Available power of the device.')
hwDeviceTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 14), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwDeviceTotalPower.setStatus('current')
if mibBuilder.loadTexts: hwDeviceTotalPower.setDescription('Total power of the device.')
hwBaseTrapCurPortType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 15), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBaseTrapCurPortType.setStatus('current')
if mibBuilder.loadTexts: hwBaseTrapCurPortType.setDescription('The current type of port.')
hwBaseTrapLastPortType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 16), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwBaseTrapLastPortType.setStatus('current')
if mibBuilder.loadTexts: hwBaseTrapLastPortType.setDescription('The last type of port.')
hwPortPhysicalDownReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 1, 17), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwPortPhysicalDownReason.setStatus('current')
if mibBuilder.loadTexts: hwPortPhysicalDownReason.setDescription('AUAIS: The RX detects administrative(A) unit(U) alarm(A) indication(I) signal(S). B1TCA: The RX detects b1(B1) threshold(T) crossing(C) alarm(A). B2TCA: The RX detects b2(B2) threshold(T) crossing(C) alarm(A). B3TCA: The RX detects b3(B3) threshold(T) crossing(C) alarm(A). LAIS: The RX detects line(L) alarm(A) indication(I) signal(S). LCD: The RX detects loss(L) of code-group(C) delineation(D). LOF: The RX detects loss(L) of(O) frame(F). LOM: The RX detects loss(L) of(O) multiframe(M). LOP: The RX detects loss(L) of(O) pointer(M). LOS: The RX detects loss(L) of(O) signal(S). LRDI: The RX detects line(L) remote(R) defect(D) indication(I). LREI: The RX detects line(L) remote(R) error(D) indication(I). OOF: The RX detects out(O) of(O) frame(F). PAIS: The RX detects path(P) alarm(A) indication(I) signal(S). PPLM: The RX detects path(P) payload(P) label(L) mismatch(M). PRDI: The RX detects path(P) remote(R) defect(D) indication(I). PREI: The RX detects path(P) remote(R) error(E) indication(I). PUNEQ: The RX detects path(P) unequipped(UNEQ). RDOOL: The RX detects receive(R) data(D) out(O) of(O) lock(L). RROOL: The RX detects receive(R) reference(R) out(O) of(O) lock(L). SD: The RX detects signal(S) degrade(D). SF: The RX detects signal(S) fail(F). TROOL: The TX detects transmit(T) reference(R) out(O) of(O) lock(L). WLINK: The RX detects pcs link has failed (wis mode). TRANSCEIVER_OFFLINE: The transceiver is not in position. TRANSCEIVER_FAIL: A hardware failure occurs when accessing the transceiver. TRANSCEIVER_MISMATCH: The transceiver does not match the port-mode. TRANSCEIVER_UNKNOWN: The transceiver is unknown type. PMA_LOS: The PMA(physical medium attachment) detects loss of signal. PMA_UNLOCK: The PMA(physical medium attachment) detects receive data out of lock. PCS_HIGHBER: The PCS(physical coding sublayer) enter High-BER status. PCS_UNLOCK: The PCS(physical coding sublayer) detects receive data out of lock. LOCAL_FAULT: The RX detects Local Fault signal. REMOTE_FAULT: The RX detects Remote Fault signal. NEGOTIATION_FAIL: Auto-negotiation is not successful. SOFT_FORCE_DOWN: The interface was DOWN triggered by a protocol module or was administratively shut down.')
hwBaseTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2))
hwEntityTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1))
hwEntityRemove = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwEntityRemove.setStatus('current')
if mibBuilder.loadTexts: hwEntityRemove.setDescription('Entity has been removed.')
hwEntityInsert = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 2)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwEntityInsert.setStatus('current')
if mibBuilder.loadTexts: hwEntityInsert.setDescription('Entity has been inserted.')
hwEntityUnstable = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 3)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwEntityUnstable.setStatus('current')
if mibBuilder.loadTexts: hwEntityUnstable.setDescription('Entity has been inserted but position unstable.')
hwEntityUnstableResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 4)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwEntityUnstableResume.setStatus('current')
if mibBuilder.loadTexts: hwEntityUnstableResume.setDescription('Resume from entity position unstable situation.')
hwEntityReset = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 5)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwEntityReset.setStatus('current')
if mibBuilder.loadTexts: hwEntityReset.setDescription('Entity will be reseted.')
hwEntityResetDone = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 6)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwEntityResetDone.setStatus('current')
if mibBuilder.loadTexts: hwEntityResetDone.setDescription('Entity has been reseted and in good health now.')
hwEntityCommunicateError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 7)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwEntityCommunicateError.setStatus('current')
if mibBuilder.loadTexts: hwEntityCommunicateError.setDescription('Communication error has been detected. Include all kinds of communication error between boards.')
hwEntityCommunicateResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 8)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwEntityCommunicateResume.setStatus('current')
if mibBuilder.loadTexts: hwEntityCommunicateResume.setDescription('Resume from communication error situation.')
hwEntityInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 9)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwEntityInvalid.setStatus('current')
if mibBuilder.loadTexts: hwEntityInvalid.setDescription('Entity is invalid for some reason.')
hwEntityResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 10)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwEntityResume.setStatus('current')
if mibBuilder.loadTexts: hwEntityResume.setDescription('Entity reusme from invalid situation.')
hwEntityLeaveMaster = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 11)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwEntityLeaveMaster.setStatus('current')
if mibBuilder.loadTexts: hwEntityLeaveMaster.setDescription('Redundant entity leave master role.')
hwEntityBecomeMaster = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 12)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwEntityBecomeMaster.setStatus('current')
if mibBuilder.loadTexts: hwEntityBecomeMaster.setDescription('Redundant entity become master role.')
hwEntityOffline = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 13)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwEntityOffline.setStatus('current')
if mibBuilder.loadTexts: hwEntityOffline.setDescription('Entity change to OFFLINE status.')
hwEntityOnline = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 14)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwEntityOnline.setStatus('current')
if mibBuilder.loadTexts: hwEntityOnline.setDescription('Entity change to ONLINE status.')
hwEntityCheckFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 15)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwEntityCheckFail.setStatus('current')
if mibBuilder.loadTexts: hwEntityCheckFail.setDescription(' Failure of self-check occurs to the board ')
hwEntityCheckResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 16)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwEntityCheckResume.setStatus('current')
if mibBuilder.loadTexts: hwEntityCheckResume.setDescription(' The status is recovered from the failure of board self-check ')
hwEntityRegFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 17)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwEntityRegFail.setStatus('current')
if mibBuilder.loadTexts: hwEntityRegFail.setDescription('Entity fail in registration.')
hwEntityRegSuccess = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 18)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwEntityRegSuccess.setStatus('current')
if mibBuilder.loadTexts: hwEntityRegSuccess.setDescription('Entity success in registration.')
hwEntityDyingGasp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 1, 19)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwEntityDyingGasp.setStatus('current')
if mibBuilder.loadTexts: hwEntityDyingGasp.setDescription('Dying gasp event is occurred.')
hwEnvironmentTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2))
hwTempRisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighWarning"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighCritical"))
if mibBuilder.loadTexts: hwTempRisingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwTempRisingAlarm.setDescription('Temperature rise over HIGH threshold.')
hwTempRisingResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 2)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighWarning"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighCritical"))
if mibBuilder.loadTexts: hwTempRisingResume.setStatus('current')
if mibBuilder.loadTexts: hwTempRisingResume.setDescription('Temperature back to normal level.')
hwTempFallingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 3)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowCritical"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowWarning"))
if mibBuilder.loadTexts: hwTempFallingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwTempFallingAlarm.setDescription('Temperature fall below LOW threshold.')
hwTempFallingResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 4)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowCritical"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowWarning"))
if mibBuilder.loadTexts: hwTempFallingResume.setStatus('current')
if mibBuilder.loadTexts: hwTempFallingResume.setDescription('Temperature back to normal level.')
hwHumidityRisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 5)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighWarning"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighCritical"))
if mibBuilder.loadTexts: hwHumidityRisingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwHumidityRisingAlarm.setDescription('Humidity rise over HIGH threshold.')
hwHumidityRisingResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 6)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighWarning"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighCritical"))
if mibBuilder.loadTexts: hwHumidityRisingResume.setStatus('current')
if mibBuilder.loadTexts: hwHumidityRisingResume.setDescription('Humidity back to normal level.')
hwHumidityFallingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 7)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowCritical"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowWarning"))
if mibBuilder.loadTexts: hwHumidityFallingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwHumidityFallingAlarm.setDescription('Humidity fall below LOW threshold.')
hwHumidityFallingResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 8)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowCritical"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowWarning"))
if mibBuilder.loadTexts: hwHumidityFallingResume.setStatus('current')
if mibBuilder.loadTexts: hwHumidityFallingResume.setDescription('Humidity back to normal level.')
hwVoltRisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 9)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighWarning"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighCritical"))
if mibBuilder.loadTexts: hwVoltRisingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwVoltRisingAlarm.setDescription('Voltage of power rise over HIGH threshold.')
hwVoltRisingResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 10)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighWarning"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighCritical"))
if mibBuilder.loadTexts: hwVoltRisingResume.setStatus('current')
if mibBuilder.loadTexts: hwVoltRisingResume.setDescription('Voltage back to normal level.')
hwVoltFallingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 11)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowCritical"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowWarning"))
if mibBuilder.loadTexts: hwVoltFallingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwVoltFallingAlarm.setDescription('Voltage of power fall below LOW threshold.')
hwVoltFallingResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 12)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowCritical"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowWarning"))
if mibBuilder.loadTexts: hwVoltFallingResume.setStatus('current')
if mibBuilder.loadTexts: hwVoltFallingResume.setDescription('Voltage back to normal level.')
hwCurrentRisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 13)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighWarning"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighCritical"))
if mibBuilder.loadTexts: hwCurrentRisingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwCurrentRisingAlarm.setDescription('Current rise over HIGH threshold.')
hwCurrentRisingResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 14)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighWarning"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighCritical"))
if mibBuilder.loadTexts: hwCurrentRisingResume.setStatus('current')
if mibBuilder.loadTexts: hwCurrentRisingResume.setDescription('Current back to normal level.')
hwCurrentFallingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 15)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowCritical"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowWarning"))
if mibBuilder.loadTexts: hwCurrentFallingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwCurrentFallingAlarm.setDescription('Current fall below LOW threshold.')
hwCurrentFallingResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 16)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowCritical"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowWarning"))
if mibBuilder.loadTexts: hwCurrentFallingResume.setStatus('current')
if mibBuilder.loadTexts: hwCurrentFallingResume.setDescription('Current back to normal level.')
hwPowerRisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 17)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighWarning"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighCritical"), ("HUAWEI-BASE-TRAP-MIB", "hwPowerDirection"))
if mibBuilder.loadTexts: hwPowerRisingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwPowerRisingAlarm.setDescription('Photoelectric power rise over HIGH threshold.')
hwPowerRisingResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 18)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighWarning"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighCritical"), ("HUAWEI-BASE-TRAP-MIB", "hwPowerDirection"))
if mibBuilder.loadTexts: hwPowerRisingResume.setStatus('current')
if mibBuilder.loadTexts: hwPowerRisingResume.setDescription('Photoelectric power back to normal level.')
hwPowerFallingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 19)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowCritical"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowWarning"), ("HUAWEI-BASE-TRAP-MIB", "hwPowerDirection"))
if mibBuilder.loadTexts: hwPowerFallingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwPowerFallingAlarm.setDescription('Photoelectric power fall below LOW threshold.')
hwPowerFallingResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 20)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowCritical"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowWarning"), ("HUAWEI-BASE-TRAP-MIB", "hwPowerDirection"))
if mibBuilder.loadTexts: hwPowerFallingResume.setStatus('current')
if mibBuilder.loadTexts: hwPowerFallingResume.setDescription('Photoelectric power back to normal level.')
hwPowerInsufficiencyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 21)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityRatedPower"), ("HUAWEI-BASE-TRAP-MIB", "hwDevAvailablePower"), ("HUAWEI-BASE-TRAP-MIB", "hwDeviceTotalPower"))
if mibBuilder.loadTexts: hwPowerInsufficiencyAlarm.setStatus('current')
if mibBuilder.loadTexts: hwPowerInsufficiencyAlarm.setDescription('The available power of device is not enough for the board.')
hwPowerInsufficiencyResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 22)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityRatedPower"), ("HUAWEI-BASE-TRAP-MIB", "hwDevAvailablePower"), ("HUAWEI-BASE-TRAP-MIB", "hwDeviceTotalPower"))
if mibBuilder.loadTexts: hwPowerInsufficiencyResume.setStatus('current')
if mibBuilder.loadTexts: hwPowerInsufficiencyResume.setDescription('The available power of device becomes sufficient for the board.')
hwAcuSoftwareUpgradeFailure = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 2, 23))
if mibBuilder.loadTexts: hwAcuSoftwareUpgradeFailure.setStatus('current')
if mibBuilder.loadTexts: hwAcuSoftwareUpgradeFailure.setDescription('ACU current startup system software and next startup system software are difference.')
hwPowerTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 3))
hwPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 3, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPowerOff.setStatus('current')
if mibBuilder.loadTexts: hwPowerOff.setDescription('One of the power is shutting down.')
hwPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 3, 2)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPowerOn.setStatus('current')
if mibBuilder.loadTexts: hwPowerOn.setDescription('One of the power is starting up.')
hwPowerMixed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 3, 3)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPowerMixed.setStatus('current')
if mibBuilder.loadTexts: hwPowerMixed.setDescription('The power is not of the same type!')
hwPowerMixedResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 3, 4)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPowerMixedResume.setStatus('current')
if mibBuilder.loadTexts: hwPowerMixedResume.setDescription('The power is changed to the same type!')
hwCPUTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 4))
hwCPUUtilizationRisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 4, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseUsageValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseUsageUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseUsageThreshold"))
if mibBuilder.loadTexts: hwCPUUtilizationRisingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwCPUUtilizationRisingAlarm.setDescription('CPU utilization exceed threshold.')
hwCPUUtilizationResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 4, 2)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseUsageValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseUsageUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseUsageThreshold"))
if mibBuilder.loadTexts: hwCPUUtilizationResume.setStatus('current')
if mibBuilder.loadTexts: hwCPUUtilizationResume.setDescription('CPU utilization back to normal level.')
hwPortTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 5))
hwPortPhysicalDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 5, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalDownReason"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifAdminStatus"))
if mibBuilder.loadTexts: hwPortPhysicalDown.setStatus('current')
if mibBuilder.loadTexts: hwPortPhysicalDown.setDescription('One of the port physical connect down.')
hwPortPhysicalUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 5, 2)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifAdminStatus"))
if mibBuilder.loadTexts: hwPortPhysicalUp.setStatus('current')
if mibBuilder.loadTexts: hwPortPhysicalUp.setDescription('One of the port physical connect up.')
hwPortPhysicalNoTrafficAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 5, 3)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapTrafficDir"))
if mibBuilder.loadTexts: hwPortPhysicalNoTrafficAlarm.setStatus('current')
if mibBuilder.loadTexts: hwPortPhysicalNoTrafficAlarm.setDescription('One of the port has none traffic.')
hwPortPhysicalNoTrafficClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 5, 4)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapTrafficDir"))
if mibBuilder.loadTexts: hwPortPhysicalNoTrafficClear.setStatus('current')
if mibBuilder.loadTexts: hwPortPhysicalNoTrafficClear.setDescription('One of the port traffic resume.')
hwPortPhysicalTrafficRisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 5, 5)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighWarning"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapTrafficDir"))
if mibBuilder.loadTexts: hwPortPhysicalTrafficRisingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwPortPhysicalTrafficRisingAlarm.setDescription('One of the port traffic rise over threshold.')
hwPortPhysicalTrafficClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 5, 6)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowWarning"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapTrafficDir"))
if mibBuilder.loadTexts: hwPortPhysicalTrafficClear.setStatus('current')
if mibBuilder.loadTexts: hwPortPhysicalTrafficClear.setDescription('One of the port traffic resume to normal level.')
hwPortPhysicalCrcErrorRisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 5, 7)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighWarning"))
if mibBuilder.loadTexts: hwPortPhysicalCrcErrorRisingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwPortPhysicalCrcErrorRisingAlarm.setDescription('One of the port CRC error rise over threshold.')
hwPortPhysicalCrcErrorClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 5, 8)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowWarning"))
if mibBuilder.loadTexts: hwPortPhysicalCrcErrorClear.setStatus('current')
if mibBuilder.loadTexts: hwPortPhysicalCrcErrorClear.setDescription('One of the port CRC error resume to normal level.')
hwPortPhysicalEthBroadcastRisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 5, 9)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighWarning"))
if mibBuilder.loadTexts: hwPortPhysicalEthBroadcastRisingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwPortPhysicalEthBroadcastRisingAlarm.setDescription('One of the Ethernet port broadcast rise over threshold.')
hwPortPhysicalEthBroadcastClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 5, 10)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowWarning"))
if mibBuilder.loadTexts: hwPortPhysicalEthBroadcastClear.setStatus('current')
if mibBuilder.loadTexts: hwPortPhysicalEthBroadcastClear.setDescription('One of the Ethernet port broadcast resume to normal level.')
hwPortPhysicalEthHalfDuplexAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 5, 11)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"))
if mibBuilder.loadTexts: hwPortPhysicalEthHalfDuplexAlarm.setStatus('current')
if mibBuilder.loadTexts: hwPortPhysicalEthHalfDuplexAlarm.setDescription('One of the Ethernet port works on the half-duplex mode.')
hwPortPhysicalEthFullDuplexClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 5, 12)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"))
if mibBuilder.loadTexts: hwPortPhysicalEthFullDuplexClear.setStatus('current')
if mibBuilder.loadTexts: hwPortPhysicalEthFullDuplexClear.setDescription('One of the Ethernet port works on the full-duplex mode.')
hwPortPhysicalPortTypeChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 5, 13)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapLastPortType"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapCurPortType"))
if mibBuilder.loadTexts: hwPortPhysicalPortTypeChange.setStatus('current')
if mibBuilder.loadTexts: hwPortPhysicalPortTypeChange.setDescription('One of the port type changed.')
hwPortPhysicalAutoNegotiateFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 5, 14)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"))
if mibBuilder.loadTexts: hwPortPhysicalAutoNegotiateFail.setStatus('current')
if mibBuilder.loadTexts: hwPortPhysicalAutoNegotiateFail.setDescription('One of the port auto-negotiation failed.')
hwPortPhysicalAutoNegotiateResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 5, 15)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"))
if mibBuilder.loadTexts: hwPortPhysicalAutoNegotiateResume.setStatus('current')
if mibBuilder.loadTexts: hwPortPhysicalAutoNegotiateResume.setDescription('One of the port auto-negotiation resumed.')
hwStorageTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 6))
hwStorageUtilizationRisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 6, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseUsageValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseUsageUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseUsageThreshold"))
if mibBuilder.loadTexts: hwStorageUtilizationRisingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwStorageUtilizationRisingAlarm.setDescription('Storage device utilization rise over threshold.')
hwStorageUtilizationResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 6, 2)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseUsageValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseUsageUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseUsageThreshold"))
if mibBuilder.loadTexts: hwStorageUtilizationResume.setStatus('current')
if mibBuilder.loadTexts: hwStorageUtilizationResume.setDescription('Storage utilization resume to normal level.')
hwVsDiskFullAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 6, 3)).setObjects(("HUAWEI-FLASH-MAN-MIB", "hwStorageSpace"), ("HUAWEI-FLASH-MAN-MIB", "hwStorageSpaceFree"), ("HUAWEI-FLASH-MAN-MIB", "hwStorageName"))
if mibBuilder.loadTexts: hwVsDiskFullAlarm.setStatus('current')
if mibBuilder.loadTexts: hwVsDiskFullAlarm.setDescription('The disk usage exceeded the overload threadhold.')
hwVsDiskResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 6, 4)).setObjects(("HUAWEI-FLASH-MAN-MIB", "hwStorageSpace"), ("HUAWEI-FLASH-MAN-MIB", "hwStorageSpaceFree"), ("HUAWEI-FLASH-MAN-MIB", "hwStorageName"))
if mibBuilder.loadTexts: hwVsDiskResume.setStatus('current')
if mibBuilder.loadTexts: hwVsDiskResume.setDescription('The disk usage fall below the clear threashold.')
hwClockTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 7))
hwFanTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 8))
hwFibTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 9))
hwFIBOverloadSuspend = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 9, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-BASE-TRAP-MIB", "hwFIBOverloadModule"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFIBOverloadSuspend.setStatus('current')
if mibBuilder.loadTexts: hwFIBOverloadSuspend.setDescription('The board is suspended for IPv4/IPv6 FIB capability overload.')
hwFIBOverloadSusResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 9, 2)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-BASE-TRAP-MIB", "hwFIBOverloadModule"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFIBOverloadSusResume.setStatus('current')
if mibBuilder.loadTexts: hwFIBOverloadSusResume.setDescription('The board is recovered for FIB capability overload suspend.')
hwFIBOverloadForward = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 9, 3)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-BASE-TRAP-MIB", "hwFIBOverloadModule"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFIBOverloadForward.setStatus('current')
if mibBuilder.loadTexts: hwFIBOverloadForward.setDescription('The board is forwarding for IPv4/IPv6 FIB capability overload.')
hwFIBOverloadFwResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 9, 4)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-BASE-TRAP-MIB", "hwFIBOverloadModule"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFIBOverloadFwResume.setStatus('current')
if mibBuilder.loadTexts: hwFIBOverloadFwResume.setDescription('The board is recovered for IPv4/IPv6 FIB capability overload forward.')
hwFESInconsistencyForMemoryLack = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 9, 5)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFESInconsistencyForMemoryLack.setStatus('current')
if mibBuilder.loadTexts: hwFESInconsistencyForMemoryLack.setDescription('Because the memory usage of the interface board exceeds the upper threshold, the FES cannot add new entries. As a result, the entries of the interface board is inconsistent with those of the main board.')
hwFESInconsistencyForMemoryLackResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 9, 6)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalIndex"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFESInconsistencyForMemoryLackResume.setStatus('current')
if mibBuilder.loadTexts: hwFESInconsistencyForMemoryLackResume.setDescription('The memory usage of the interface board reduces to the lower threshold, and the FES can add entries. The entries of the interface board is consistent with those of the main board.')
hwPppTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 10))
hwPppLoopbackDetect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 10, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwPppLoopbackDetect.setStatus('current')
if mibBuilder.loadTexts: hwPppLoopbackDetect.setDescription('The interface Loopback is detected.')
hwPppLoopbackDetResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 10, 2)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwPppLoopbackDetResume.setStatus('current')
if mibBuilder.loadTexts: hwPppLoopbackDetResume.setDescription('The interface is recovered from Loopback.')
hwFlowControlTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 11))
hwFlowCongestion = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 11, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalClass"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseFlowDirectionType"))
if mibBuilder.loadTexts: hwFlowCongestion.setStatus('current')
if mibBuilder.loadTexts: hwFlowCongestion.setDescription(' The object is in congested state and some of the frames are dropped. ')
hwFlowCongestionResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 11, 2)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalClass"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseFlowDirectionType"))
if mibBuilder.loadTexts: hwFlowCongestionResume.setStatus('current')
if mibBuilder.loadTexts: hwFlowCongestionResume.setDescription(' Alarms of the congested object are cleared. ')
hwDeviceAbnormalTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 12))
hwDeviceAbnormalRisingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 12, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"))
if mibBuilder.loadTexts: hwDeviceAbnormalRisingAlarm.setStatus('current')
if mibBuilder.loadTexts: hwDeviceAbnormalRisingAlarm.setDescription('Device abnormal or pulled out.')
hwResExhaustBfdTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 13))
hwResExhaustBfdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 13, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"))
if mibBuilder.loadTexts: hwResExhaustBfdAlarm.setStatus('current')
if mibBuilder.loadTexts: hwResExhaustBfdAlarm.setDescription('Failed to allocate resources for BFD because hardware resources were exhausted.')
hwResExhaustBfdResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 13, 2)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"))
if mibBuilder.loadTexts: hwResExhaustBfdResume.setStatus('current')
if mibBuilder.loadTexts: hwResExhaustBfdResume.setDescription('BFD recovered from alarms of hardware resources exhausting.')
hwResExhaustOamTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 14))
hwResExhaustOamAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 14, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"))
if mibBuilder.loadTexts: hwResExhaustOamAlarm.setStatus('current')
if mibBuilder.loadTexts: hwResExhaustOamAlarm.setDescription('Failed to allocate resources for OAM because hardware resources were exhausted. MPLS OAM is short for Operation Administration and Maintenance by MPLS. It is used for connectivity verification of MPLS LSP.')
hwResExhaustOamResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 14, 2)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"))
if mibBuilder.loadTexts: hwResExhaustOamResume.setStatus('current')
if mibBuilder.loadTexts: hwResExhaustOamResume.setDescription('OAM recovered from alarms of hardware resources exhausting. MPLS OAM is short for Operation Administration and Maintenance by MPLS. It is used for connectivity verification of MPLS LSP.')
hwHdlcTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 15))
hwHdlcLoopbackDetect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 15, 1)).setObjects(("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hwHdlcLoopbackDetect.setStatus('current')
if mibBuilder.loadTexts: hwHdlcLoopbackDetect.setDescription('The interface Loopback is detected.')
hwHdlcLoopbackDetResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 15, 2)).setObjects(("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hwHdlcLoopbackDetResume.setStatus('current')
if mibBuilder.loadTexts: hwHdlcLoopbackDetResume.setDescription('The interface is recovered from Loopback.')
hwAutoFtpTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 16))
hwAutoFtpFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 16, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"))
if mibBuilder.loadTexts: hwAutoFtpFailAlarm.setStatus('current')
if mibBuilder.loadTexts: hwAutoFtpFailAlarm.setDescription('This object indicates the software failure in the automatic upgrade system.')
hwBaseOpticalTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 17))
hwOpticalPowerAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 17, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwOpticalPowerAbnormal.setStatus('current')
if mibBuilder.loadTexts: hwOpticalPowerAbnormal.setDescription('Optical rxpower or txpower is exceed threshold value.')
hwOpticalPowerResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 2, 17, 2)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"))
if mibBuilder.loadTexts: hwOpticalPowerResume.setStatus('current')
if mibBuilder.loadTexts: hwOpticalPowerResume.setDescription('Optical power resume.')
hwBaseTrapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 3))
hwBaseTrapCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 3, 1))
hwBaseTrapCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 3, 1, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBaseTrapCompliance = hwBaseTrapCompliance.setStatus('current')
if mibBuilder.loadTexts: hwBaseTrapCompliance.setDescription('Compliance statement for agents that provide full support for hwBaseTrapMIB.')
hwBaseTrapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 3, 2))
hwBaseObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 3, 2, 1)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapSeverity"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapProbableCause"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapEventType"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowCritical"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdLowWarning"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighWarning"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseThresholdHighCritical"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseUsageValue"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseUsageUnit"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseUsageThreshold"), ("HUAWEI-BASE-TRAP-MIB", "hwDevAvailablePower"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityRatedPower"), ("HUAWEI-BASE-TRAP-MIB", "hwDeviceTotalPower"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapLastPortType"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalDownReason"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapCurPortType"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapReasonDescr"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapRelativeResource"), ("HUAWEI-BASE-TRAP-MIB", "hwFIBOverloadModule"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseFlowDirectionType"), ("HUAWEI-BASE-TRAP-MIB", "hwPowerDirection"), ("HUAWEI-BASE-TRAP-MIB", "hwBaseTrapTrafficDir"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBaseObjectGroup = hwBaseObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwBaseObjectGroup.setDescription('Group for base trap objects.')
hwBaseTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 129, 3, 2, 2)).setObjects(("HUAWEI-BASE-TRAP-MIB", "hwEntityRemove"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityInsert"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityUnstable"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityUnstableResume"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityReset"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityResetDone"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityCommunicateError"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityCommunicateResume"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityInvalid"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityResume"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityLeaveMaster"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityBecomeMaster"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityOffline"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityOnline"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityRegFail"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityRegSuccess"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityDyingGasp"), ("HUAWEI-BASE-TRAP-MIB", "hwTempRisingAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwTempRisingResume"), ("HUAWEI-BASE-TRAP-MIB", "hwTempFallingAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwTempFallingResume"), ("HUAWEI-BASE-TRAP-MIB", "hwHumidityRisingAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwHumidityRisingResume"), ("HUAWEI-BASE-TRAP-MIB", "hwHumidityFallingAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwHumidityFallingResume"), ("HUAWEI-BASE-TRAP-MIB", "hwVoltRisingAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwVoltRisingResume"), ("HUAWEI-BASE-TRAP-MIB", "hwVoltFallingAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwVoltFallingResume"), ("HUAWEI-BASE-TRAP-MIB", "hwCurrentRisingAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwCurrentRisingResume"), ("HUAWEI-BASE-TRAP-MIB", "hwCurrentFallingAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwCurrentFallingResume"), ("HUAWEI-BASE-TRAP-MIB", "hwPowerRisingAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwPowerRisingResume"), ("HUAWEI-BASE-TRAP-MIB", "hwPowerFallingAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwPowerInsufficiencyAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwPowerInsufficiencyResume"), ("HUAWEI-BASE-TRAP-MIB", "hwPowerFallingResume"), ("HUAWEI-BASE-TRAP-MIB", "hwPowerOff"), ("HUAWEI-BASE-TRAP-MIB", "hwPowerOn"), ("HUAWEI-BASE-TRAP-MIB", "hwPowerMixed"), ("HUAWEI-BASE-TRAP-MIB", "hwPowerMixedResume"), ("HUAWEI-BASE-TRAP-MIB", "hwCPUUtilizationRisingAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwCPUUtilizationResume"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalDown"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalUp"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalNoTrafficAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalNoTrafficClear"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalTrafficRisingAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalTrafficClear"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalCrcErrorRisingAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalCrcErrorClear"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalEthBroadcastRisingAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalEthBroadcastClear"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalEthHalfDuplexAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalEthFullDuplexClear"), ("HUAWEI-BASE-TRAP-MIB", "hwStorageUtilizationRisingAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwStorageUtilizationResume"), ("HUAWEI-BASE-TRAP-MIB", "hwVsDiskFullAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwVsDiskResume"), ("HUAWEI-BASE-TRAP-MIB", "hwFIBOverloadSuspend"), ("HUAWEI-BASE-TRAP-MIB", "hwFIBOverloadSusResume"), ("HUAWEI-BASE-TRAP-MIB", "hwFIBOverloadForward"), ("HUAWEI-BASE-TRAP-MIB", "hwFIBOverloadFwResume"), ("HUAWEI-BASE-TRAP-MIB", "hwFESInconsistencyForMemoryLack"), ("HUAWEI-BASE-TRAP-MIB", "hwFESInconsistencyForMemoryLackResume"), ("HUAWEI-BASE-TRAP-MIB", "hwPppLoopbackDetect"), ("HUAWEI-BASE-TRAP-MIB", "hwPppLoopbackDetResume"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityCheckFail"), ("HUAWEI-BASE-TRAP-MIB", "hwEntityCheckResume"), ("HUAWEI-BASE-TRAP-MIB", "hwFlowCongestion"), ("HUAWEI-BASE-TRAP-MIB", "hwFlowCongestionResume"), ("HUAWEI-BASE-TRAP-MIB", "hwDeviceAbnormalRisingAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwResExhaustBfdAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwResExhaustBfdResume"), ("HUAWEI-BASE-TRAP-MIB", "hwResExhaustOamAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwResExhaustOamResume"), ("HUAWEI-BASE-TRAP-MIB", "hwHdlcLoopbackDetect"), ("HUAWEI-BASE-TRAP-MIB", "hwAutoFtpFailAlarm"), ("HUAWEI-BASE-TRAP-MIB", "hwOpticalPowerResume"), ("HUAWEI-BASE-TRAP-MIB", "hwHdlcLoopbackDetResume"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalPortTypeChange"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalAutoNegotiateFail"), ("HUAWEI-BASE-TRAP-MIB", "hwPortPhysicalAutoNegotiateResume"), ("HUAWEI-BASE-TRAP-MIB", "hwOpticalPowerAbnormal"), ("HUAWEI-BASE-TRAP-MIB", "hwAcuSoftwareUpgradeFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBaseTrapGroup = hwBaseTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwBaseTrapGroup.setDescription('Group for all base traps.')
mibBuilder.exportSymbols("HUAWEI-BASE-TRAP-MIB", hwEntityRemove=hwEntityRemove, hwPortPhysicalEthFullDuplexClear=hwPortPhysicalEthFullDuplexClear, hwPowerFallingResume=hwPowerFallingResume, hwBaseUsageValue=hwBaseUsageValue, hwBaseUsageType=hwBaseUsageType, hwBaseTrapMIB=hwBaseTrapMIB, hwEntityResetDone=hwEntityResetDone, hwBaseUsageTable=hwBaseUsageTable, hwFIBOverloadForward=hwFIBOverloadForward, hwPortPhysicalCrcErrorClear=hwPortPhysicalCrcErrorClear, hwFESInconsistencyForMemoryLackResume=hwFESInconsistencyForMemoryLackResume, hwPortPhysicalDownReason=hwPortPhysicalDownReason, hwEntityCheckFail=hwEntityCheckFail, hwHumidityRisingResume=hwHumidityRisingResume, hwPortPhysicalTrafficClear=hwPortPhysicalTrafficClear, hwHdlcTrap=hwHdlcTrap, hwBaseTrapProbableCause=hwBaseTrapProbableCause, hwBaseUsageUnit=hwBaseUsageUnit, hwBaseTrapCompliances=hwBaseTrapCompliances, hwDevAvailablePower=hwDevAvailablePower, hwAutoFtpFailAlarm=hwAutoFtpFailAlarm, hwPowerMixed=hwPowerMixed, hwPortPhysicalNoTrafficAlarm=hwPortPhysicalNoTrafficAlarm, hwBaseTrapCompliance=hwBaseTrapCompliance, hwEntityInvalid=hwEntityInvalid, hwFlowCongestionResume=hwFlowCongestionResume, hwBaseTrapRelativeResource=hwBaseTrapRelativeResource, hwBaseThresholdUnit=hwBaseThresholdUnit, hwCPUTrap=hwCPUTrap, hwPowerRisingResume=hwPowerRisingResume, hwFIBOverloadModule=hwFIBOverloadModule, hwVoltRisingAlarm=hwVoltRisingAlarm, hwPppLoopbackDetect=hwPppLoopbackDetect, hwPowerTrap=hwPowerTrap, hwCurrentRisingAlarm=hwCurrentRisingAlarm, hwBaseThresholdValue=hwBaseThresholdValue, hwClockTrap=hwClockTrap, hwHumidityFallingAlarm=hwHumidityFallingAlarm, hwDeviceTotalPower=hwDeviceTotalPower, hwPortPhysicalTrafficRisingAlarm=hwPortPhysicalTrafficRisingAlarm, hwDeviceAbnormalRisingAlarm=hwDeviceAbnormalRisingAlarm, hwEnvironmentTrap=hwEnvironmentTrap, hwResExhaustOamAlarm=hwResExhaustOamAlarm, hwBaseTrapGroup=hwBaseTrapGroup, hwFIBOverloadFwResume=hwFIBOverloadFwResume, hwHumidityFallingResume=hwHumidityFallingResume, hwResExhaustBfdTrap=hwResExhaustBfdTrap, hwEntityResume=hwEntityResume, hwTempRisingAlarm=hwTempRisingAlarm, hwBaseThresholdLowWarning=hwBaseThresholdLowWarning, hwEntityCommunicateResume=hwEntityCommunicateResume, hwCurrentFallingResume=hwCurrentFallingResume, hwCurrentFallingAlarm=hwCurrentFallingAlarm, hwEntityRatedPower=hwEntityRatedPower, hwBaseTrapSeverity=hwBaseTrapSeverity, hwBaseTrapReasonDescr=hwBaseTrapReasonDescr, hwBaseTrapCurPortType=hwBaseTrapCurPortType, hwBaseThresholdIndex=hwBaseThresholdIndex, hwBaseTrapTrafficDir=hwBaseTrapTrafficDir, hwBaseTraps=hwBaseTraps, hwPortPhysicalUp=hwPortPhysicalUp, hwBaseUsageEntry=hwBaseUsageEntry, hwTempFallingResume=hwTempFallingResume, hwVoltFallingAlarm=hwVoltFallingAlarm, hwCPUUtilizationResume=hwCPUUtilizationResume, hwPortPhysicalCrcErrorRisingAlarm=hwPortPhysicalCrcErrorRisingAlarm, hwDeviceAbnormalTrap=hwDeviceAbnormalTrap, hwVoltFallingResume=hwVoltFallingResume, hwPowerRisingAlarm=hwPowerRisingAlarm, hwTempFallingAlarm=hwTempFallingAlarm, hwFESInconsistencyForMemoryLack=hwFESInconsistencyForMemoryLack, hwBaseTrapLastPortType=hwBaseTrapLastPortType, hwBaseTrapConformance=hwBaseTrapConformance, hwAutoFtpTrap=hwAutoFtpTrap, hwPortPhysicalEthBroadcastRisingAlarm=hwPortPhysicalEthBroadcastRisingAlarm, hwBaseUsageIndex=hwBaseUsageIndex, hwPowerOff=hwPowerOff, hwTempRisingResume=hwTempRisingResume, hwPortPhysicalEthHalfDuplexAlarm=hwPortPhysicalEthHalfDuplexAlarm, hwPortPhysicalAutoNegotiateFail=hwPortPhysicalAutoNegotiateFail, hwEntityTrap=hwEntityTrap, hwPortPhysicalAutoNegotiateResume=hwPortPhysicalAutoNegotiateResume, hwVsDiskFullAlarm=hwVsDiskFullAlarm, hwPppTrap=hwPppTrap, hwEntityCommunicateError=hwEntityCommunicateError, hwPortPhysicalPortTypeChange=hwPortPhysicalPortTypeChange, hwEntityRegFail=hwEntityRegFail, hwPowerMixedResume=hwPowerMixedResume, hwBaseUsageThreshold=hwBaseUsageThreshold, hwPowerInsufficiencyResume=hwPowerInsufficiencyResume, hwBaseTrapGroups=hwBaseTrapGroups, hwPowerInsufficiencyAlarm=hwPowerInsufficiencyAlarm, hwPortPhysicalNoTrafficClear=hwPortPhysicalNoTrafficClear, hwVoltRisingResume=hwVoltRisingResume, hwPowerFallingAlarm=hwPowerFallingAlarm, hwStorageUtilizationResume=hwStorageUtilizationResume, hwStorageTrap=hwStorageTrap, PYSNMP_MODULE_ID=hwBaseTrapMIB, hwEntityOffline=hwEntityOffline, hwPortPhysicalEthBroadcastClear=hwPortPhysicalEthBroadcastClear, hwPowerOn=hwPowerOn, hwBaseThresholdLowCritical=hwBaseThresholdLowCritical, hwBaseThresholdHighCritical=hwBaseThresholdHighCritical, hwBaseThresholdHighWarning=hwBaseThresholdHighWarning, hwCPUUtilizationRisingAlarm=hwCPUUtilizationRisingAlarm, hwFlowCongestion=hwFlowCongestion, hwResExhaustOamResume=hwResExhaustOamResume, hwBaseOpticalTrap=hwBaseOpticalTrap, hwBaseTrapEventType=hwBaseTrapEventType, hwOpticalPowerResume=hwOpticalPowerResume, hwResExhaustOamTrap=hwResExhaustOamTrap, hwHumidityRisingAlarm=hwHumidityRisingAlarm, hwEntityReset=hwEntityReset, hwPowerDirection=hwPowerDirection, hwHdlcLoopbackDetect=hwHdlcLoopbackDetect, hwPortPhysicalDown=hwPortPhysicalDown, hwEntityUnstable=hwEntityUnstable, hwEntityDyingGasp=hwEntityDyingGasp, hwBaseObjectGroup=hwBaseObjectGroup, hwBaseThresholdType=hwBaseThresholdType, hwBaseThresholdEntry=hwBaseThresholdEntry, hwEntityOnline=hwEntityOnline, hwStorageUtilizationRisingAlarm=hwStorageUtilizationRisingAlarm, hwEntityInsert=hwEntityInsert, hwPppLoopbackDetResume=hwPppLoopbackDetResume, hwEntityCheckResume=hwEntityCheckResume, hwOpticalPowerAbnormal=hwOpticalPowerAbnormal, hwBaseTrapObject=hwBaseTrapObject, hwBaseThresholdTable=hwBaseThresholdTable, hwFibTrap=hwFibTrap, hwEntityBecomeMaster=hwEntityBecomeMaster, hwPortTrap=hwPortTrap, hwResExhaustBfdResume=hwResExhaustBfdResume, hwVsDiskResume=hwVsDiskResume, hwEntityRegSuccess=hwEntityRegSuccess, hwAcuSoftwareUpgradeFailure=hwAcuSoftwareUpgradeFailure, hwEntityLeaveMaster=hwEntityLeaveMaster, hwFIBOverloadSusResume=hwFIBOverloadSusResume, hwFIBOverloadSuspend=hwFIBOverloadSuspend, hwResExhaustBfdAlarm=hwResExhaustBfdAlarm, hwBaseFlowDirectionType=hwBaseFlowDirectionType, hwEntityUnstableResume=hwEntityUnstableResume, hwHdlcLoopbackDetResume=hwHdlcLoopbackDetResume, hwFlowControlTrap=hwFlowControlTrap, hwCurrentRisingResume=hwCurrentRisingResume, hwFanTrap=hwFanTrap)
