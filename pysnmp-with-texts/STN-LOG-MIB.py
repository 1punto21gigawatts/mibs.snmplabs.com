#
# PySNMP MIB module STN-LOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-LOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:11:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, iso, Counter64, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, Unsigned32, MibIdentifier, Gauge32, TimeTicks, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "Counter64", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "Unsigned32", "MibIdentifier", "Gauge32", "TimeTicks", "ModuleIdentity", "Bits")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
stnNotification, stnSystems = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnNotification", "stnSystems")
stnEngineCpu, stnEngineIndex, stnEngineSlot = mibBuilder.importSymbols("STN-CHASSIS-MIB", "stnEngineCpu", "stnEngineIndex", "stnEngineSlot")
stnLog = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 13))
if mibBuilder.loadTexts: stnLog.setLastUpdated('0002160000Z')
if mibBuilder.loadTexts: stnLog.setOrganization('Spring Tide Networks, Inc.')
if mibBuilder.loadTexts: stnLog.setContactInfo(' Spring Tide Networks, Inc. Customer Service Postal: 3 Clock Tower Place Maynard, MA 01754 Tel: 1 888-786-4357 Email: stncs@springtidenet.com ')
if mibBuilder.loadTexts: stnLog.setDescription('The MIB module that describes managed objects of Spring Tide Networks Event Logger.')
stnLogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1))
stnLogMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 13, 2))
stnLogState = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogState.setStatus('current')
if mibBuilder.loadTexts: stnLogState.setDescription('Indicates whether the system logging is enabled.')
stnLogFlushTimer = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogFlushTimer.setStatus('current')
if mibBuilder.loadTexts: stnLogFlushTimer.setDescription('The log flush time interval in seconds.')
stnLogMaxDisplay = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogMaxDisplay.setStatus('current')
if mibBuilder.loadTexts: stnLogMaxDisplay.setDescription('The maximum number of rows in stnLogEventTable.')
stnLogServerTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 4), )
if mibBuilder.loadTexts: stnLogServerTable.setStatus('current')
if mibBuilder.loadTexts: stnLogServerTable.setDescription('A list of flush servers for the Event Logger.')
stnLogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 4, 1), ).setIndexNames((0, "STN-LOG-MIB", "stnLogServerIndex"))
if mibBuilder.loadTexts: stnLogServerEntry.setStatus('current')
if mibBuilder.loadTexts: stnLogServerEntry.setDescription('Entry contains a particular log event.')
stnLogServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogServerIndex.setStatus('current')
if mibBuilder.loadTexts: stnLogServerIndex.setDescription('A sequence number that identifies a flush server.')
stnLogServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("flash", 1), ("syslog", 2), ("nma", 3), ("serial", 4), ("debug-serial", 5))).clone('flash')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogServerType.setStatus('current')
if mibBuilder.loadTexts: stnLogServerType.setDescription('The type of this log server.')
stnLogServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: stnLogServerIpAddress.setDescription('The log server IP address if the type is Syslog or Network Management Application.')
stnLogServerFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogServerFacility.setStatus('current')
if mibBuilder.loadTexts: stnLogServerFacility.setDescription('The log server facility if the type is Syslog.')
stnLogServerFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogServerFileSize.setStatus('current')
if mibBuilder.loadTexts: stnLogServerFileSize.setDescription('The maximum file size when the log is written to flash, 0 when other types.')
stnLogFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 5), )
if mibBuilder.loadTexts: stnLogFilterTable.setStatus('current')
if mibBuilder.loadTexts: stnLogFilterTable.setDescription('Log filter per MC on each engine.')
stnLogFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 5, 1), ).setIndexNames((0, "STN-LOG-MIB", "stnLogFilterEngineId"), (0, "STN-LOG-MIB", "stnLogFilterMcId"))
if mibBuilder.loadTexts: stnLogFilterEntry.setStatus('current')
if mibBuilder.loadTexts: stnLogFilterEntry.setDescription('Each entry contains a particular log filter for a modular component on an engine.')
stnLogFilterEngineId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogFilterEngineId.setStatus('current')
if mibBuilder.loadTexts: stnLogFilterEngineId.setDescription('The engine ID.')
stnLogFilterMcId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogFilterMcId.setStatus('current')
if mibBuilder.loadTexts: stnLogFilterMcId.setDescription('The modular component ID.')
stnLogFilterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogFilterPriority.setStatus('current')
if mibBuilder.loadTexts: stnLogFilterPriority.setDescription('The priority filter level. 0 disable the log. This is now depricated')
stnLogFilterSeverityFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogFilterSeverityFatal.setStatus('current')
if mibBuilder.loadTexts: stnLogFilterSeverityFatal.setDescription('Status of logging Fatal Events')
stnLogFilterSeverityError = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 5, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogFilterSeverityError.setStatus('current')
if mibBuilder.loadTexts: stnLogFilterSeverityError.setDescription('Status of logging Error Events')
stnLogFilterSeverityWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 5, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogFilterSeverityWarning.setStatus('current')
if mibBuilder.loadTexts: stnLogFilterSeverityWarning.setDescription('Status of logging Warning Events')
stnLogFilterSeverityInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 5, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogFilterSeverityInfo.setStatus('current')
if mibBuilder.loadTexts: stnLogFilterSeverityInfo.setDescription('Status of logging Info Events')
stnLogFilterSeverityTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 5, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogFilterSeverityTrace.setStatus('current')
if mibBuilder.loadTexts: stnLogFilterSeverityTrace.setDescription('Status of logging Trace Events')
stnLogFilterSeverityDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 5, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogFilterSeverityDebug.setStatus('current')
if mibBuilder.loadTexts: stnLogFilterSeverityDebug.setDescription('Status of logging Debug Events')
stnLogEventTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 6), )
if mibBuilder.loadTexts: stnLogEventTable.setStatus('current')
if mibBuilder.loadTexts: stnLogEventTable.setDescription('A list of log entries.')
stnLogEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 6, 1), ).setIndexNames((0, "STN-LOG-MIB", "stnLogEventIndex"))
if mibBuilder.loadTexts: stnLogEventEntry.setStatus('current')
if mibBuilder.loadTexts: stnLogEventEntry.setDescription('Entry contains a particular log event.')
stnLogEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogEventIndex.setStatus('current')
if mibBuilder.loadTexts: stnLogEventIndex.setDescription('A sequence number that identifies a log event.')
stnLogEventEngineId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogEventEngineId.setStatus('current')
if mibBuilder.loadTexts: stnLogEventEngineId.setDescription('The engine ID where this log event occured.')
stnLogEventMcName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogEventMcName.setStatus('current')
if mibBuilder.loadTexts: stnLogEventMcName.setDescription('The name of moduler component this log event is from.')
stnLogEventPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogEventPriority.setStatus('current')
if mibBuilder.loadTexts: stnLogEventPriority.setDescription('The priority of this log event.')
stnLogEventTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogEventTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stnLogEventTimeStamp.setDescription('The time stamp of this log event.')
stnLogEventMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 13, 1, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLogEventMessage.setStatus('current')
if mibBuilder.loadTexts: stnLogEventMessage.setDescription('The log message.')
stnEventLogServerFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 24)).setObjects(("STN-LOG-MIB", "stnLogServerIndex"), ("STN-LOG-MIB", "stnLogServerType"), ("STN-LOG-MIB", "stnLogServerIpAddress"))
if mibBuilder.loadTexts: stnEventLogServerFailure.setStatus('current')
if mibBuilder.loadTexts: stnEventLogServerFailure.setDescription('A stnEventLogServerFailure trap signifies that the agent entity has detected that the device has lost contact to the external event log server. The generation of this trap can be controlled by the LogTraps configuration object.')
stnEventLogInternalFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 25)).setObjects(("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"))
if mibBuilder.loadTexts: stnEventLogInternalFailure.setStatus('current')
if mibBuilder.loadTexts: stnEventLogInternalFailure.setDescription('A stnEventLogInternalFailure trap signifies that the agent entity has detected an internal event log system failure. The generation of this trap can be controlled by the LogTraps configuration object.')
mibBuilder.exportSymbols("STN-LOG-MIB", stnLogMaxDisplay=stnLogMaxDisplay, stnLogFilterSeverityFatal=stnLogFilterSeverityFatal, stnLogEventTable=stnLogEventTable, stnLogEventPriority=stnLogEventPriority, stnLogServerIndex=stnLogServerIndex, stnLogFilterEntry=stnLogFilterEntry, stnLogServerFileSize=stnLogServerFileSize, stnLogEventTimeStamp=stnLogEventTimeStamp, stnLogServerEntry=stnLogServerEntry, stnLogFilterSeverityWarning=stnLogFilterSeverityWarning, stnLogServerType=stnLogServerType, stnLogFilterSeverityTrace=stnLogFilterSeverityTrace, stnLogMibConformance=stnLogMibConformance, PYSNMP_MODULE_ID=stnLog, stnLogState=stnLogState, stnLogFilterPriority=stnLogFilterPriority, stnEventLogServerFailure=stnEventLogServerFailure, stnLogObjects=stnLogObjects, stnLogFilterTable=stnLogFilterTable, stnLogFilterEngineId=stnLogFilterEngineId, stnLogFilterSeverityInfo=stnLogFilterSeverityInfo, stnLogEventMessage=stnLogEventMessage, stnLogEventMcName=stnLogEventMcName, stnLogFilterMcId=stnLogFilterMcId, stnLogEventIndex=stnLogEventIndex, stnLogServerTable=stnLogServerTable, stnLogEventEntry=stnLogEventEntry, stnLogFlushTimer=stnLogFlushTimer, stnLogFilterSeverityError=stnLogFilterSeverityError, stnLogEventEngineId=stnLogEventEngineId, stnLogServerIpAddress=stnLogServerIpAddress, stnEventLogInternalFailure=stnEventLogInternalFailure, stnLog=stnLog, stnLogServerFacility=stnLogServerFacility, stnLogFilterSeverityDebug=stnLogFilterSeverityDebug)
