#
# PySNMP MIB module GSM7324-QOS-DIFFSERV-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GSM7324-QOS-DIFFSERV-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:20:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
gsm7324QOS, = mibBuilder.importSymbols("GSM7324-QOS-MIB", "gsm7324QOS")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
InetPortNumber, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, iso, Bits, Counter32, Counter64, Gauge32, TimeTicks, ObjectIdentity, Integer32, ModuleIdentity, MibIdentifier, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "Bits", "Counter32", "Counter64", "Gauge32", "TimeTicks", "ObjectIdentity", "Integer32", "ModuleIdentity", "MibIdentifier", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
PhysAddress, TruthValue, RowStatus, StorageType, RowPointer, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TruthValue", "RowStatus", "StorageType", "RowPointer", "DisplayString", "MacAddress", "TextualConvention")
gsm7324QOSDiffServPrivate = ModuleIdentity((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4))
gsm7324QOSDiffServPrivate.setRevisions(('2003-05-06 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: gsm7324QOSDiffServPrivate.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: gsm7324QOSDiffServPrivate.setLastUpdated('200305061200Z')
if mibBuilder.loadTexts: gsm7324QOSDiffServPrivate.setOrganization('Netgear')
if mibBuilder.loadTexts: gsm7324QOSDiffServPrivate.setContactInfo('')
if mibBuilder.loadTexts: gsm7324QOSDiffServPrivate.setDescription('')
class QosBurstSize(TextualConvention, Unsigned32):
    description = 'The number of kilobytes (Kbytes) in a packet that may be sent in a traffic stream without regard for other traffic streams.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 128)

class IntfDirection(TextualConvention, Integer32):
    description = "IntfDirection specifies a direction of data travel on an interface. 'inbound' traffic is operated on during reception from the interface, while 'outbound' traffic is operated on prior to transmission on the interface."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("in", 1), ("out", 2))

agentDiffServGenStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 1))
agentDiffServGenStatusAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDiffServGenStatusAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusAdminMode.setDescription(' DiffServ Admin Mode')
agentDiffServGenStatusClassTableSize = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusClassTableSize.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusClassTableSize.setDescription(' Current size of the Class Table')
agentDiffServGenStatusClassTableMax = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusClassTableMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusClassTableMax.setDescription(' Max size of the Class Table')
agentDiffServGenStatusClassRuleTableSize = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusClassRuleTableSize.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusClassRuleTableSize.setDescription(' Current size of Class Rule Table')
agentDiffServGenStatusClassRuleTableMax = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusClassRuleTableMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusClassRuleTableMax.setDescription(' Max size of the Class Rule Table.')
agentDiffServGenStatusPolicyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyTableSize.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyTableSize.setDescription(' Current Size of the Policy Table.')
agentDiffServGenStatusPolicyTableMax = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyTableMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyTableMax.setDescription(' Max size of the Policy Table')
agentDiffServGenStatusPolicyInstTableSize = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyInstTableSize.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyInstTableSize.setDescription(' Current size of the Policy-Class Instance Table')
agentDiffServGenStatusPolicyInstTableMax = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyInstTableMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyInstTableMax.setDescription(' Max size of the Policy-Class Instance Table')
agentDiffServGenStatusPolicyAttrTableSize = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyAttrTableSize.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyAttrTableSize.setDescription(' Current size of the Policy Attribute Table')
agentDiffServGenStatusPolicyAttrTableMax = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyAttrTableMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusPolicyAttrTableMax.setDescription(' Max size of the Policy Attribute Table')
agentDiffServGenStatusServiceTableSize = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusServiceTableSize.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusServiceTableSize.setDescription(' Current size of the Service Table')
agentDiffServGenStatusServiceTableMax = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServGenStatusServiceTableMax.setStatus('current')
if mibBuilder.loadTexts: agentDiffServGenStatusServiceTableMax.setDescription(' Max size of the Service Table')
agentDiffServClassGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2))
agentDiffServClassIndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServClassIndexNextFree.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassIndexNextFree.setDescription('This object contains an unused value for classIndex, or a zero to indicate that none exists.')
agentDiffServClassTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 2), )
if mibBuilder.loadTexts: agentDiffServClassTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassTable.setDescription('A table of the DiffServ class entries')
agentDiffServClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 2, 1), ).setIndexNames((0, "GSM7324-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServClassIndex"))
if mibBuilder.loadTexts: agentDiffServClassEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassEntry.setDescription('Represents entry for a DiffServ traffic class')
agentDiffServClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentDiffServClassIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassIndex.setDescription('The identifier for DiffServ Class entry ')
agentDiffServClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassName.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassName.setDescription('Name of the DiffServ traffic class')
agentDiffServClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("any", 2), ("acl", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassType.setDescription('The class type indicates how the individual class match criteria are evaluated. For type all, all of the individual match conditions must be true for a packet to be considered a member of the class. For types any and acl, only one of the match criteria must be true for a packet to belong to the class; multiple matching criteria are evaluated in a sequential order, with the highest precedence awarded to the first criterion defined for the class. An acl class type copies its set of match criteria from the current rule definition of the specified ACL number.')
agentDiffServClassAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassAclNum.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassAclNum.setDescription('The access list number used to define the match conditions for the DiffServ class. This attribute is only valid if the value of agentDiffServClassType is set to acl(3). Match conditions are copied from the ACL definition at the time the class is created and do not reflect subsequent changes to the ACL definition.')
agentDiffServClassRuleIndexNextFree = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServClassRuleIndexNextFree.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleIndexNextFree.setDescription('This object contains an unused value for classRuleIndex, or a zero to indicate that none exists. This index is maintained on a per-class basis.')
agentDiffServClassStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 2, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassStorageType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassStorageType.setDescription('Storage-type for this conceptual row')
agentDiffServClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRowStatus.setDescription('The status of this conceptual row.')
agentDiffServClassRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3), )
if mibBuilder.loadTexts: agentDiffServClassRuleTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleTable.setDescription('A table of the DiffServ Class Rule entries')
agentDiffServClassRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1), ).setIndexNames((0, "GSM7324-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServClassIndex"), (0, "GSM7324-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServClassRuleIndex"))
if mibBuilder.loadTexts: agentDiffServClassRuleEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleEntry.setDescription('Represents entry for a set of class-match rules')
agentDiffServClassRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentDiffServClassRuleIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleIndex.setDescription('The identifier for DiffServ Class Rule Table entry within a class')
agentDiffServClassRuleMatchEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("cos", 1), ("dstip", 2), ("dstl4port", 3), ("dstmac", 4), ("every", 5), ("ipdscp", 6), ("ipprecedence", 7), ("iptos", 8), ("protocol", 9), ("refclass", 10), ("srcip", 11), ("srcl4port", 12), ("srcmac", 13), ("vlan", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchEntryType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchEntryType.setDescription('Class Rule match entry type, it determines which one of the individual match conditions is defined for the present class rule. This object must be created before any other match object in this row.')
agentDiffServClassRuleMatchCos = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchCos.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchCos.setDescription('Three-bit 802.1p priority field in the Ethernet frame used as a class-match parameter - only valid if the agentDiffServClassRuleMatchEntryType is set to cos(1).')
agentDiffServClassRuleMatchDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstIpAddr.setDescription('Destination IP address match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to dstip(2).')
agentDiffServClassRuleMatchDstIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstIpMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstIpMask.setDescription('Destination IP address mask match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to dstip(2). This mask value identifies the portion of agentDiffServClassRuleMatchDstIpAddr that is compared against a packet. A non-contiguous mask value is permitted.')
agentDiffServClassRuleMatchDstL4PortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 6), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstL4PortStart.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstL4PortStart.setDescription('Destination layer 4 port range start match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to dstl4port(3).')
agentDiffServClassRuleMatchDstL4PortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 7), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstL4PortEnd.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstL4PortEnd.setDescription('Destination layer 4 port range end match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to dstl4port(3).')
agentDiffServClassRuleMatchDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 8), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstMacAddr.setDescription('Destination MAC address match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to dstmac(4).')
agentDiffServClassRuleMatchDstMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstMacMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchDstMacMask.setDescription('Destination MAC address mask match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to dstmac(4). This mask value identifies the portion of agentDiffServClassRuleMatchDstMacAddr that is compared against a packet. A non-contiguous mask value is permitted.')
agentDiffServClassRuleMatchEvery = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchEvery.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchEvery.setDescription('Flag to indicate that the class rule is defined to match on every packet, regardless of content. - only valid if the agentDiffServClassRuleMatchEntryType is set to every(5).')
agentDiffServClassRuleMatchIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpDscp.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpDscp.setDescription('IP DiffServ Code Point (DSCP) match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to ipdscp(6). The DSCP is defined as the high-order six bits of the Service Type octet in the IPv4 header.')
agentDiffServClassRuleMatchIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpPrecedence.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpPrecedence.setDescription('IP Precedence match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to ipprecedence(7). The Precedence bits are defined as the high-order three bits of the Service Type octed in the IPv4 header.')
agentDiffServClassRuleMatchIpTosBits = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpTosBits.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpTosBits.setDescription('IP TOS bits match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to iptos(8). The TOS bits are defined as all eight bits of the Service Type octet in the IPv4 header.')
agentDiffServClassRuleMatchIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpTosMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchIpTosMask.setDescription('IP TOS bits mask match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to iptos(8). This mask value identifies the portion of agentDiffServClassRuleMatchIpTosBits that is compared against a packet. A non-contiguous mask value is permitted.')
agentDiffServClassRuleMatchProtocolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchProtocolNum.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchProtocolNum.setDescription('Protocol number match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to protocol(9).')
agentDiffServClassRuleMatchRefClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchRefClassIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchRefClassIndex.setDescription('Index of the corresponding referenced class - only valid if the agentDiffServClassRuleMatchEntryType is set to refclass(10). The set of match conditions defined for the reference class are directly inherited by the current class. Restrictions: 1) The class types of both, current class and the reference class must be identical (i.e., any vs. any, or all vs. all). 2) Self-referencing of class-name is not allowed. 3) Any attempt to delete the reference class while still referenced by any class shall fail. 4) The combined match criteria of classname and reference class name must be an allowed combination based on the class type. Any subsequent changes to the reference class name match criteria must maintain this validity, or the change attempt shall fail.')
agentDiffServClassRuleMatchSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 17), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcIpAddr.setDescription('Source IP address match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to srcip(11).')
agentDiffServClassRuleMatchSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 18), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcIpMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcIpMask.setDescription('Source IP address mask match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to srcip(11). This mask value identifies the portion of agentDiffServClassRuleMatchSrcIpAddr that is compared against a packet. A non-contiguous mask value is permitted.')
agentDiffServClassRuleMatchSrcL4PortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 19), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcL4PortStart.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcL4PortStart.setDescription('Source layer 4 port range start match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to srcl4port(12).')
agentDiffServClassRuleMatchSrcL4PortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 20), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcL4PortEnd.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcL4PortEnd.setDescription('Source layer 4 port range end match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to srcl4port(12).')
agentDiffServClassRuleMatchSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 21), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcMacAddr.setDescription('Source MAC address match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to srcmac(13).')
agentDiffServClassRuleMatchSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 22), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcMacMask.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchSrcMacMask.setDescription('Source MAC address mask match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to srcmac(13). This mask value identifies the portion of agentDiffServClassRuleMatchSrcMacAddr that is compared against a packet. A non-contiguous mask value is permitted.')
agentDiffServClassRuleMatchVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanId.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchVlanId.setDescription('VLAN ID match value for the class - only valid if the agentDiffServClassRuleMatchEntryType is set to vlan(14).')
agentDiffServClassRuleMatchExcludeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 24), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleMatchExcludeFlag.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleMatchExcludeFlag.setDescription('Class Rule exclude flag - when set to true(1), the match condition identified by agentDiffServClassRuleMatchEntryType is negated. This means that for a given field, every value is considered to be a match EXCEPT for the value specified in the class rule. This flag must be false(2) for an agendDiffServClassRuleMatchEntryType of refClass(10). This object must be set after the agentDiffServClassRuleMatchEntryType object, but before any other match object in this row')
agentDiffServClassRuleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 25), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleStorageType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleStorageType.setDescription('Storage-type for this conceptual row')
agentDiffServClassRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 2, 3, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServClassRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServClassRuleRowStatus.setDescription('The status of this conceptual row.')
agentDiffServPolicyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3))
agentDiffServPolicyIndexNextFree = MibScalar((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyIndexNextFree.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyIndexNextFree.setDescription('This object contains an unused value for agentDiffServPolicyIndex, or a zero to indicate that none exists.')
agentDiffServPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 2), )
if mibBuilder.loadTexts: agentDiffServPolicyTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyTable.setDescription('A table of the DiffServ policy entries.')
agentDiffServPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 2, 1), ).setIndexNames((0, "GSM7324-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyIndex"))
if mibBuilder.loadTexts: agentDiffServPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyEntry.setDescription('Represents entry for a DiffServ policy.')
agentDiffServPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentDiffServPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyIndex.setDescription('The identifier for DiffServ Policy table entry.')
agentDiffServPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyName.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyName.setDescription('Name of the policy')
agentDiffServPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 2, 1, 3), IntfDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyType.setDescription(' The policy type dictates whether inbound or outbound policy attribute statements are used in the policy definition.')
agentDiffServPolicyInstIndexNextFree = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyInstIndexNextFree.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyInstIndexNextFree.setDescription('This object contains an unused value for agentDiffServPolicyInstIndex, or a zero to indicate that none exists. This index is maintained on a per-policy basis.')
agentDiffServPolicyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 2, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyStorageType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyStorageType.setDescription('Storage-type for this conceptual row')
agentDiffServPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyRowStatus.setDescription('The status of this conceptual row.')
agentDiffServPolicyInstTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 3), )
if mibBuilder.loadTexts: agentDiffServPolicyInstTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyInstTable.setDescription('A table of the policy-class instance entries.')
agentDiffServPolicyInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 3, 1), ).setIndexNames((0, "GSM7324-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyIndex"), (0, "GSM7324-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyInstIndex"))
if mibBuilder.loadTexts: agentDiffServPolicyInstEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyInstEntry.setDescription('Represents entry for a policy-class instance.')
agentDiffServPolicyInstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentDiffServPolicyInstIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyInstIndex.setDescription('The identifier for policy-class Instance table entry within a policy.')
agentDiffServPolicyInstClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyInstClassIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyInstClassIndex.setDescription('Index of the DiffServ Class Table row, whose class definition is used as the policy class instance. The class index identifies the classifier definition used by the policy to establish an instance of that class (to which policy attributes can be attached). This is what connects a class (instance) to a policy.')
agentDiffServPolicyInstAttrIndexNextFree = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyInstAttrIndexNextFree.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyInstAttrIndexNextFree.setDescription('This object contains an unused value for agentDiffServPolicyAttrIndex, or a zero to indicate that none exists. This index is maintained on a per-policy-class-instance basis.')
agentDiffServPolicyInstStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 3, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyInstStorageType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyInstStorageType.setDescription('Storage-type for this conceptual row.')
agentDiffServPolicyInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyInstRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyInstRowStatus.setDescription('The status of this conceptual row.')
agentDiffServPolicyAttrTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4), )
if mibBuilder.loadTexts: agentDiffServPolicyAttrTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrTable.setDescription('A table of policy attribute entries')
agentDiffServPolicyAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1), ).setIndexNames((0, "GSM7324-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyIndex"), (0, "GSM7324-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyInstIndex"), (0, "GSM7324-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyAttrIndex"))
if mibBuilder.loadTexts: agentDiffServPolicyAttrEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrEntry.setDescription('Represents entry for policy attributes')
agentDiffServPolicyAttrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentDiffServPolicyAttrIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrIndex.setDescription('The identifier for policy-attribute entry ')
agentDiffServPolicyAttrStmtEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("bandwidth", 1), ("expedite", 2), ("markCosVal", 3), ("markIpDscpVal", 4), ("markIpPrecedenceVal", 5), ("policeSimple", 6), ("policeSinglerate", 7), ("policeTworate", 8), ("randomdrop", 9), ("shapeAverage", 10), ("shapePeak", 11)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtEntryType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtEntryType.setDescription('Policy attribute statement entry type -- this entry type is essential to determine which of the individual object(s) is defined for this policy attribute statement. This object must be created before any other policy attribute statement object in the row. The markIpDscpVal(4), markIpPrecedenceVal(5), policeSimple(6), policeSinglerate(7) and policeTworate(8) values are only allowed for an agentDiffServPolicyType of in(1). The remaining values are only allowed for an agentDiffServPolicyType of out(2).')
agentDiffServPolicyAttrStmtBandwidthCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtBandwidthCrate.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtBandwidthCrate.setDescription('Bandwidth committed rate attribute statement value -- identifies the minimum amount of bandwidth to be reserved for the specified class instance within the policy. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to bandwidth(1).')
agentDiffServPolicyAttrStmtBandwidthCrateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kbps", 1), ("percentage", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtBandwidthCrateUnits.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtBandwidthCrateUnits.setDescription('Bandwidth committed rate units attribute statement value -- this value determines the interpretation of the agentDiffServPolicyAttrStmtBandwidthCrate object as either kilobits-per-second or as a percentage of interface link speed. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to bandwidth(1).')
agentDiffServPolicyAttrStmtExpediteCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtExpediteCrate.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtExpediteCrate.setDescription('Expedited (bandwidth) committed rate attribute statement value -- it identifies the maximum guaranteed amount of bandwidth to be reserved for the specified class instance within the policy. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to expedite(2). ')
agentDiffServPolicyAttrStmtExpediteCrateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kbps", 1), ("percentage", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtExpediteCrateUnits.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtExpediteCrateUnits.setDescription('Expedited (bandwidth) committed rate units attribute statement value -- determines the interpretation of the agentDiffServPolicyAttrStmtExpediteCrate object as either kilobits-per-second or as a percentage of interface link speed. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to expedite(2).')
agentDiffServPolicyAttrStmtExpediteCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 7), QosBurstSize().clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtExpediteCburst.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtExpediteCburst.setDescription('Expedited (bandwidth) committed burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to expedite(2).')
agentDiffServPolicyAttrStmtMarkCosVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkCosVal.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkCosVal.setDescription('Three-bit 802.1p priority(CoS) value as part of the outbound policy for a class instance. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to markCosVal(3).')
agentDiffServPolicyAttrStmtMarkIpDscpVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkIpDscpVal.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkIpDscpVal.setDescription('Specified IP DSCP value to mark in all inbound packets belonging to the class-instance. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to markIpDscpVal(4).')
agentDiffServPolicyAttrStmtMarkIpPrecedenceVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkIpPrecedenceVal.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtMarkIpPrecedenceVal.setDescription('Specified IP Precedence value to mark in all inbound packets belonging to the class-instance. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to markIpPrecedenceVal(5).')
agentDiffServPolicyAttrStmtPoliceConformAct = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("drop", 1), ("markdscp", 2), ("markprec", 3), ("send", 4))).clone('send')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceConformAct.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceConformAct.setDescription('Policing conform action attribute statement value -- determines the action taken on conforming traffic for the policing style (simple,singlerate,tworate) currently configured for the specified class instance within the policy. The default conform action is send(3). This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is policeSimple(6), policeSinglerate(7), or policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceConformVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceConformVal.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceConformVal.setDescription('Policing conform DSCP or IP Precedence value attribute statement value -- used to mark the DSCP or IP Precedence field of conforming packets when the conform action is markdscp(2) or markprec(3), respectively. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is policeSimple(6), policeSinglerate(7), or policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceExceedAct = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("drop", 1), ("markdscp", 2), ("markprec", 3), ("send", 4))).clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceExceedAct.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceExceedAct.setDescription('Policing exceed action attribute statement value -- determines the action taken on excess traffic for the policing style (singlerate, tworate) currently configured for the specified class instance within the policy. The default exceed action is drop(1). This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is policeSinglerate(7) or policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceExceedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceExceedVal.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceExceedVal.setDescription('Policing exceed DSCP or IP Precedence value attribute statement value -- used to mark the DSCP or IP Precedence field of excess packets when the exceed action is markdscp(2) or markprec(3), respectively. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is policeSinglerate(7) or policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceNonconformAct = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("drop", 1), ("markdscp", 2), ("markprec", 3), ("send", 4))).clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceNonconformAct.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceNonconformAct.setDescription('Policing non-conform action attribute statement value -- determines the action taken on nonconforming traffic for the policing style (simple, singlerate,tworate) currently configured for the specified class instance within the policy. The default non-conform action is drop(1). This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is policeSimple(6), policeSinglerate(7), or policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceNonconformVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceNonconformVal.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceNonconformVal.setDescription('Policing non-conform DSCP or IP Precedence value attribute statement value -- used to mark the DSCP or IP Precedence field of nonconforming packets when the nonconform action is markdscp(2) or markprec(3), respectively. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is policeSimple(6), policeSinglerate(7), or policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceSimpleCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSimpleCrate.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSimpleCrate.setDescription('Simple policing committed rate attribute statement value, specified in kbps. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeSimple(6).')
agentDiffServPolicyAttrStmtPoliceSimpleCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 18), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSimpleCburst.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSimpleCburst.setDescription('Simple policing committed burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeSimple(6).')
agentDiffServPolicyAttrStmtPoliceSinglerateCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSinglerateCrate.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSinglerateCrate.setDescription('Single-rate policing committed rate attribute statement value, specified in kbps. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeSinglerate(7).')
agentDiffServPolicyAttrStmtPoliceSinglerateCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 20), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSinglerateCburst.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSinglerateCburst.setDescription('Single-rate policing committed burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeSinglerate(7).')
agentDiffServPolicyAttrStmtPoliceSinglerateEburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 21), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSinglerateEburst.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceSinglerateEburst.setDescription('Single-rate policing excess burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeSinglerate(7).')
agentDiffServPolicyAttrStmtPoliceTworateCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworateCrate.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworateCrate.setDescription('Two-rate policing committed rate attribute statement value, specified in kbps. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceTworateCburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 23), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworateCburst.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworateCburst.setDescription('Two-rate policing committed burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceTworatePrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworatePrate.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworatePrate.setDescription('Two-rate policing peak rate attribute statement value, specified in kbps. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeTworate(8).')
agentDiffServPolicyAttrStmtPoliceTworatePburst = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 25), QosBurstSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworatePburst.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtPoliceTworatePburst.setDescription('Two-rate policing peak burst size attribute statement value, specified in Kbytes. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to policeTworate(8).')
agentDiffServPolicyAttrStmtRandomdropMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 250000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropMinThresh.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropMinThresh.setDescription('Random drop minimum threshold attribute statement value -- the average queue depth minimum threshold in bytes used by the WRED algorithm. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to randomdrop(9).')
agentDiffServPolicyAttrStmtRandomdropMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropMaxThresh.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropMaxThresh.setDescription('Random drop maximum threshold attribute statement value -- the average queue depth maximum threshold in bytes used by the WRED algorithm. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to randomdrop(9).')
agentDiffServPolicyAttrStmtRandomdropMaxDropProb = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropMaxDropProb.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropMaxDropProb.setDescription('Random drop maximum drop probability attribute statement value -- the packet drop probability when the queue depth average reaches its maximum threshold. It is expressed as a percentage, and is an integer from 0 to 100. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to randomdrop(9).')
agentDiffServPolicyAttrStmtRandomdropSamplingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropSamplingRate.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropSamplingRate.setDescription('Random drop sampling rate attribute statement value -- the period at which the queue depth is sampled for computing an average, expressed in microseconds. This value is an integer from 0 to 1000000, with a default value of 0 (meaning per packet sampling). This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to randomdrop(9).')
agentDiffServPolicyAttrStmtRandomdropDecayExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropDecayExponent.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtRandomdropDecayExponent.setDescription('Random drop decay exponent attribute statement value -- determines how quickly the average queue length calculation decays over time, with a higher number causing a slower decay. This value is an integer from 0 to 16, with a default of 9. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to randomdrop(9).')
agentDiffServPolicyAttrStmtShapeAverageCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 31), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtShapeAverageCrate.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtShapeAverageCrate.setDescription('Average-rate shaping committed rate attribute statement value, specified in kbps -- used to establish average rate traffic shaping for the specified class , which limits transmissions for the class to the committed information rate, with any excess traffic delayed via queueing. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to shapeAverage(10).')
agentDiffServPolicyAttrStmtShapePeakCrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 32), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtShapePeakCrate.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtShapePeakCrate.setDescription('Peak-rate shaping committed rate attribute statement value, specified in kbps -- used to establish peak rate traffic shaping for the specified class , which allows transmissions for the class to exceed the committed information rate by sending excess traffic with the understanding that it could be dropped by a downstream network element. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to shapePeak(11).')
agentDiffServPolicyAttrStmtShapePeakPrate = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 33), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtShapePeakPrate.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStmtShapePeakPrate.setDescription('Peak-rate shaping peak rate attribute statement value, specified in kbps -- used to establish peak rate traffic shaping for the specified class, which allows transmissions for the class to exceed the committed information rate by sending excess traffic with the understanding that it could be dropped by a downstream network element. This attribute is only valid if the value of agentDiffServPolicyAttrStmtEntryType is set to shapePeak(11).')
agentDiffServPolicyAttrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 34), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrStorageType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrStorageType.setDescription('Storage-type for this conceptual row.')
agentDiffServPolicyAttrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 4, 1, 35), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServPolicyAttrRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyAttrRowStatus.setDescription('The status of this conceptual row.')
agentDiffServPolicyPerfInTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 5), )
if mibBuilder.loadTexts: agentDiffServPolicyPerfInTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInTable.setDescription('A table of inbound policy-class performance entries')
agentDiffServPolicyPerfInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 5, 1), ).setIndexNames((0, "GSM7324-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyIndex"), (0, "GSM7324-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyInstIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDiffServPolicyPerfInEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInEntry.setDescription('Represents entry for the performance attributes of the associated inbound policy-class instance')
agentDiffServPolicyPerfInOfferedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInOfferedOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInOfferedOctets.setDescription('Offered octets count for the inbound policy-class instance performance entry.')
agentDiffServPolicyPerfInOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInOfferedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInOfferedPackets.setDescription('Offered packets count for the inbound policy-class instance performance entry.')
agentDiffServPolicyPerfInDiscardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInDiscardedOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInDiscardedOctets.setDescription('Discarded octets count for the inbound policy-class instance performance entry.')
agentDiffServPolicyPerfInDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInDiscardedPackets.setDescription('Discarded packets count for the inbound policy-class instance performance entry.')
agentDiffServPolicyPerfInHCOfferedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInHCOfferedOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInHCOfferedOctets.setDescription('Offered octets high capacity count for the inbound policy-class instance performance entry.')
agentDiffServPolicyPerfInHCOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInHCOfferedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInHCOfferedPackets.setDescription('Offered packets high capacity count for the inbound policy-class instance performance entry.')
agentDiffServPolicyPerfInHCDiscardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInHCDiscardedOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInHCDiscardedOctets.setDescription('Discarded octets high capacity count for the inbound policy-class instance performance entry.')
agentDiffServPolicyPerfInHCDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInHCDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInHCDiscardedPackets.setDescription('Discarded packets high capacity count for the inbound policy-class instance performance entry.')
agentDiffServPolicyPerfInStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 5, 1, 9), StorageType().clone('nonVolatile')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInStorageType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInStorageType.setDescription('Storage-type for this conceptual row.')
agentDiffServPolicyPerfInRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 5, 1, 10), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfInRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfInRowStatus.setDescription('The status of this conceptual row.')
agentDiffServPolicyPerfOutTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6), )
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutTable.setDescription('A table of outbound policy-class performance entries')
agentDiffServPolicyPerfOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1), ).setIndexNames((0, "GSM7324-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyIndex"), (0, "GSM7324-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServPolicyInstIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutEntry.setDescription('Represents entry for the performance attributes of the associated outbound policy-class instance')
agentDiffServPolicyPerfOutTailDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutTailDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutTailDroppedOctets.setDescription('Tail-dropped octets count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutTailDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutTailDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutTailDroppedPackets.setDescription('Tail-dropped packets count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutRandomDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutRandomDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutRandomDroppedOctets.setDescription('Random-dropped octets count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutRandomDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutRandomDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutRandomDroppedPackets.setDescription('Random-dropped packets count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutShapeDelayedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutShapeDelayedOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutShapeDelayedOctets.setDescription('Shape-delayed octets count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutShapeDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutShapeDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutShapeDelayedPackets.setDescription('Shape-delayed packets count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutSentOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutSentOctets.setDescription('Sent octets count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutSentPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutSentPackets.setDescription('Sent packets count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutHCTailDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCTailDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCTailDroppedOctets.setDescription('Tail-dropped octets high capacity count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutHCTailDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCTailDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCTailDroppedPackets.setDescription('Tail-dropped packets high capacity count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutHCRandomDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCRandomDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCRandomDroppedOctets.setDescription('Random-dropped octets high capacity count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutHCRandomDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCRandomDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCRandomDroppedPackets.setDescription('Random-dropped packets high capacity count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutHCShapeDelayedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCShapeDelayedOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCShapeDelayedOctets.setDescription('Shape-delayed octets high capacity count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutHCShapeDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCShapeDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCShapeDelayedPackets.setDescription('Shape-delayed packets high capacity count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutHCSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCSentOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCSentOctets.setDescription('Sent octets high capacity count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutHCSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCSentPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutHCSentPackets.setDescription('Sent packets high capacity count for the outbound policy-class instance performance entry.')
agentDiffServPolicyPerfOutStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 17), StorageType().clone('nonVolatile')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutStorageType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutStorageType.setDescription('Storage-type for this conceptual row.')
agentDiffServPolicyPerfOutRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 3, 6, 1, 18), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServPolicyPerfOutRowStatus.setDescription('The status of this conceptual row.')
agentDiffServServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4))
agentDiffServServiceTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 1), )
if mibBuilder.loadTexts: agentDiffServServiceTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServiceTable.setDescription('A table of the service entries.')
agentDiffServServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 1, 1), ).setIndexNames((0, "GSM7324-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServServiceIfIndex"), (0, "GSM7324-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServServiceIfDirection"))
if mibBuilder.loadTexts: agentDiffServServiceEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServiceEntry.setDescription('Represents entry for policy assigned to an interface in a particular direction.')
agentDiffServServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: agentDiffServServiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServiceIfIndex.setDescription('External interface number of the interface to which policy is assigned.')
agentDiffServServiceIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 1, 1, 2), IntfDirection())
if mibBuilder.loadTexts: agentDiffServServiceIfDirection.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServiceIfDirection.setDescription('Interface direction to which the policy is assigned.')
agentDiffServServicePolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServServicePolicyIndex.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServicePolicyIndex.setDescription('Index of the Policy Table row whose policy definition is attached to the interface in the specified direction.')
agentDiffServServiceIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServiceIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServiceIfOperStatus.setDescription('The current operational state of the DiffServ service interface. If agentDiffServGenStatusAdminMode is disable(2) then agentDiffServServiceIfOperStatus should be down(2). If agentDiffServServiceGenStatusAdminMode is changed to enable(1) then agentDiffServServiceIfOperStatus should change to up(1) if the service interface is ready to send and receive DiffServ traffic; it should remain in the down(2) state if the underlying interface hardware is not in a link up condition, if the policy definition represented by agentDiffServServicePolicyIndex is incompatible with the interface (e.g., requires more bandwidth than the current capacity of the interface), or if the policy definition is considered to be incomplete (e.g., one or more composite rows is not in the active(1) state).')
agentDiffServServiceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 1, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServServiceStorageType.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServiceStorageType.setDescription('Storage-type for this conceptual row')
agentDiffServServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDiffServServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServiceRowStatus.setDescription('The status of this conceptual row.')
agentDiffServServicePerfTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 2), )
if mibBuilder.loadTexts: agentDiffServServicePerfTable.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServicePerfTable.setDescription('A table of service performance entries.')
agentDiffServServicePerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 2, 1), )
agentDiffServServiceEntry.registerAugmentions(("GSM7324-QOS-DIFFSERV-PRIVATE-MIB", "agentDiffServServicePerfEntry"))
agentDiffServServicePerfEntry.setIndexNames(*agentDiffServServiceEntry.getIndexNames())
if mibBuilder.loadTexts: agentDiffServServicePerfEntry.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServicePerfEntry.setDescription('Represents a service performance entry.')
agentDiffServServicePerfOfferedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfOfferedOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServicePerfOfferedOctets.setDescription('Offered octets count for the specified service interface and direction')
agentDiffServServicePerfOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfOfferedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServicePerfOfferedPackets.setDescription('Offered packets count for specified service interface and direction')
agentDiffServServicePerfDiscardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfDiscardedOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServicePerfDiscardedOctets.setDescription('Discarded octets count for the specified service interface and direction')
agentDiffServServicePerfDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServicePerfDiscardedPackets.setDescription('Discarded packets count for the specified service interface and direction')
agentDiffServServicePerfSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfSentOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServicePerfSentOctets.setDescription('Sent octets count for the specified service interface and direction')
agentDiffServServicePerfSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfSentPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServicePerfSentPackets.setDescription('Sent packets count for the specified service interface and direction')
agentDiffServServicePerfHCOfferedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfHCOfferedOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServicePerfHCOfferedOctets.setDescription('Offered octets high capacity count for the specified service interface and direction')
agentDiffServServicePerfHCOfferedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfHCOfferedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServicePerfHCOfferedPackets.setDescription('Offered packets high capacity count for the specified service interface and direction')
agentDiffServServicePerfHCDiscardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfHCDiscardedOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServicePerfHCDiscardedOctets.setDescription('Discarded octets high capacity count for the specified service interface and direction')
agentDiffServServicePerfHCDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfHCDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServicePerfHCDiscardedPackets.setDescription('Discarded packets high capacity count for the specified service interface and direction')
agentDiffServServicePerfHCSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfHCSentOctets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServicePerfHCSentOctets.setDescription('Sent octets high capacity count for the specified service interface and direction')
agentDiffServServicePerfHCSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 4, 4, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDiffServServicePerfHCSentPackets.setStatus('current')
if mibBuilder.loadTexts: agentDiffServServicePerfHCSentPackets.setDescription('Sent packets high capacity count for the specified service interface and direction')
mibBuilder.exportSymbols("GSM7324-QOS-DIFFSERV-PRIVATE-MIB", agentDiffServPolicyAttrStmtRandomdropSamplingRate=agentDiffServPolicyAttrStmtRandomdropSamplingRate, agentDiffServServiceIfOperStatus=agentDiffServServiceIfOperStatus, agentDiffServClassRuleIndexNextFree=agentDiffServClassRuleIndexNextFree, agentDiffServPolicyAttrStmtExpediteCrateUnits=agentDiffServPolicyAttrStmtExpediteCrateUnits, agentDiffServPolicyEntry=agentDiffServPolicyEntry, agentDiffServClassType=agentDiffServClassType, agentDiffServPolicyAttrStmtPoliceSimpleCburst=agentDiffServPolicyAttrStmtPoliceSimpleCburst, agentDiffServPolicyAttrStmtPoliceExceedAct=agentDiffServPolicyAttrStmtPoliceExceedAct, agentDiffServClassEntry=agentDiffServClassEntry, agentDiffServClassRuleMatchDstMacAddr=agentDiffServClassRuleMatchDstMacAddr, agentDiffServClassRuleMatchExcludeFlag=agentDiffServClassRuleMatchExcludeFlag, agentDiffServPolicyInstClassIndex=agentDiffServPolicyInstClassIndex, agentDiffServPolicyRowStatus=agentDiffServPolicyRowStatus, agentDiffServPolicyAttrStmtPoliceNonconformAct=agentDiffServPolicyAttrStmtPoliceNonconformAct, agentDiffServPolicyPerfInEntry=agentDiffServPolicyPerfInEntry, agentDiffServPolicyTable=agentDiffServPolicyTable, agentDiffServGenStatusAdminMode=agentDiffServGenStatusAdminMode, agentDiffServPolicyAttrStmtBandwidthCrateUnits=agentDiffServPolicyAttrStmtBandwidthCrateUnits, agentDiffServPolicyAttrStmtPoliceTworatePburst=agentDiffServPolicyAttrStmtPoliceTworatePburst, agentDiffServPolicyPerfInHCOfferedPackets=agentDiffServPolicyPerfInHCOfferedPackets, agentDiffServClassIndex=agentDiffServClassIndex, agentDiffServPolicyGroup=agentDiffServPolicyGroup, agentDiffServServicePerfHCOfferedOctets=agentDiffServServicePerfHCOfferedOctets, agentDiffServPolicyPerfOutRandomDroppedPackets=agentDiffServPolicyPerfOutRandomDroppedPackets, agentDiffServPolicyPerfOutHCShapeDelayedOctets=agentDiffServPolicyPerfOutHCShapeDelayedOctets, agentDiffServPolicyPerfOutRandomDroppedOctets=agentDiffServPolicyPerfOutRandomDroppedOctets, agentDiffServServicePerfHCSentPackets=agentDiffServServicePerfHCSentPackets, agentDiffServPolicyPerfInTable=agentDiffServPolicyPerfInTable, agentDiffServPolicyAttrStmtPoliceNonconformVal=agentDiffServPolicyAttrStmtPoliceNonconformVal, agentDiffServPolicyInstRowStatus=agentDiffServPolicyInstRowStatus, agentDiffServPolicyAttrStmtPoliceSinglerateCrate=agentDiffServPolicyAttrStmtPoliceSinglerateCrate, agentDiffServPolicyPerfInOfferedOctets=agentDiffServPolicyPerfInOfferedOctets, agentDiffServClassRuleEntry=agentDiffServClassRuleEntry, agentDiffServServiceIfDirection=agentDiffServServiceIfDirection, agentDiffServPolicyAttrStmtPoliceSimpleCrate=agentDiffServPolicyAttrStmtPoliceSimpleCrate, agentDiffServClassTable=agentDiffServClassTable, agentDiffServClassRuleMatchIpTosBits=agentDiffServClassRuleMatchIpTosBits, agentDiffServPolicyIndex=agentDiffServPolicyIndex, agentDiffServPolicyAttrStmtExpediteCburst=agentDiffServPolicyAttrStmtExpediteCburst, agentDiffServServiceRowStatus=agentDiffServServiceRowStatus, agentDiffServPolicyPerfInDiscardedOctets=agentDiffServPolicyPerfInDiscardedOctets, agentDiffServClassRuleMatchSrcIpAddr=agentDiffServClassRuleMatchSrcIpAddr, agentDiffServPolicyAttrStmtMarkIpDscpVal=agentDiffServPolicyAttrStmtMarkIpDscpVal, agentDiffServClassRuleMatchIpPrecedence=agentDiffServClassRuleMatchIpPrecedence, agentDiffServPolicyPerfOutHCRandomDroppedOctets=agentDiffServPolicyPerfOutHCRandomDroppedOctets, agentDiffServServicePerfSentOctets=agentDiffServServicePerfSentOctets, PYSNMP_MODULE_ID=gsm7324QOSDiffServPrivate, agentDiffServGenStatusGroup=agentDiffServGenStatusGroup, agentDiffServPolicyPerfOutEntry=agentDiffServPolicyPerfOutEntry, agentDiffServPolicyPerfOutShapeDelayedOctets=agentDiffServPolicyPerfOutShapeDelayedOctets, agentDiffServClassRuleMatchSrcIpMask=agentDiffServClassRuleMatchSrcIpMask, agentDiffServPolicyStorageType=agentDiffServPolicyStorageType, agentDiffServClassRuleStorageType=agentDiffServClassRuleStorageType, agentDiffServClassRuleMatchSrcMacAddr=agentDiffServClassRuleMatchSrcMacAddr, agentDiffServPolicyAttrStmtRandomdropMaxDropProb=agentDiffServPolicyAttrStmtRandomdropMaxDropProb, agentDiffServPolicyPerfOutHCSentPackets=agentDiffServPolicyPerfOutHCSentPackets, agentDiffServPolicyPerfInOfferedPackets=agentDiffServPolicyPerfInOfferedPackets, agentDiffServPolicyAttrStmtShapePeakPrate=agentDiffServPolicyAttrStmtShapePeakPrate, agentDiffServGenStatusPolicyTableSize=agentDiffServGenStatusPolicyTableSize, agentDiffServClassRuleMatchDstIpAddr=agentDiffServClassRuleMatchDstIpAddr, agentDiffServGenStatusClassRuleTableMax=agentDiffServGenStatusClassRuleTableMax, agentDiffServPolicyAttrStmtPoliceSinglerateEburst=agentDiffServPolicyAttrStmtPoliceSinglerateEburst, agentDiffServGenStatusServiceTableSize=agentDiffServGenStatusServiceTableSize, agentDiffServPolicyAttrStmtRandomdropMinThresh=agentDiffServPolicyAttrStmtRandomdropMinThresh, agentDiffServClassRuleMatchDstL4PortEnd=agentDiffServClassRuleMatchDstL4PortEnd, agentDiffServClassRuleMatchCos=agentDiffServClassRuleMatchCos, agentDiffServClassRuleMatchSrcMacMask=agentDiffServClassRuleMatchSrcMacMask, agentDiffServPolicyAttrStmtMarkIpPrecedenceVal=agentDiffServPolicyAttrStmtMarkIpPrecedenceVal, agentDiffServPolicyAttrStmtPoliceTworateCrate=agentDiffServPolicyAttrStmtPoliceTworateCrate, agentDiffServPolicyPerfOutTailDroppedOctets=agentDiffServPolicyPerfOutTailDroppedOctets, agentDiffServServicePerfHCDiscardedOctets=agentDiffServServicePerfHCDiscardedOctets, agentDiffServGenStatusServiceTableMax=agentDiffServGenStatusServiceTableMax, agentDiffServPolicyAttrStmtRandomdropMaxThresh=agentDiffServPolicyAttrStmtRandomdropMaxThresh, agentDiffServPolicyPerfInDiscardedPackets=agentDiffServPolicyPerfInDiscardedPackets, agentDiffServPolicyAttrStmtRandomdropDecayExponent=agentDiffServPolicyAttrStmtRandomdropDecayExponent, agentDiffServServicePerfHCSentOctets=agentDiffServServicePerfHCSentOctets, agentDiffServPolicyAttrEntry=agentDiffServPolicyAttrEntry, agentDiffServPolicyAttrIndex=agentDiffServPolicyAttrIndex, agentDiffServPolicyAttrStmtPoliceTworateCburst=agentDiffServPolicyAttrStmtPoliceTworateCburst, agentDiffServServiceIfIndex=agentDiffServServiceIfIndex, agentDiffServGenStatusClassRuleTableSize=agentDiffServGenStatusClassRuleTableSize, agentDiffServPolicyAttrStmtPoliceTworatePrate=agentDiffServPolicyAttrStmtPoliceTworatePrate, agentDiffServServicePerfDiscardedPackets=agentDiffServServicePerfDiscardedPackets, agentDiffServPolicyPerfOutHCTailDroppedPackets=agentDiffServPolicyPerfOutHCTailDroppedPackets, agentDiffServPolicyName=agentDiffServPolicyName, agentDiffServPolicyPerfInHCDiscardedOctets=agentDiffServPolicyPerfInHCDiscardedOctets, agentDiffServPolicyPerfOutHCRandomDroppedPackets=agentDiffServPolicyPerfOutHCRandomDroppedPackets, agentDiffServGenStatusClassTableMax=agentDiffServGenStatusClassTableMax, agentDiffServClassAclNum=agentDiffServClassAclNum, agentDiffServServicePerfHCOfferedPackets=agentDiffServServicePerfHCOfferedPackets, agentDiffServPolicyInstIndex=agentDiffServPolicyInstIndex, agentDiffServGenStatusPolicyInstTableMax=agentDiffServGenStatusPolicyInstTableMax, agentDiffServPolicyInstStorageType=agentDiffServPolicyInstStorageType, agentDiffServPolicyPerfInHCOfferedOctets=agentDiffServPolicyPerfInHCOfferedOctets, agentDiffServPolicyAttrRowStatus=agentDiffServPolicyAttrRowStatus, agentDiffServPolicyAttrStmtPoliceConformVal=agentDiffServPolicyAttrStmtPoliceConformVal, agentDiffServPolicyPerfOutShapeDelayedPackets=agentDiffServPolicyPerfOutShapeDelayedPackets, agentDiffServPolicyInstTable=agentDiffServPolicyInstTable, agentDiffServClassGroup=agentDiffServClassGroup, agentDiffServPolicyPerfInRowStatus=agentDiffServPolicyPerfInRowStatus, agentDiffServPolicyAttrStmtBandwidthCrate=agentDiffServPolicyAttrStmtBandwidthCrate, agentDiffServPolicyPerfOutHCSentOctets=agentDiffServPolicyPerfOutHCSentOctets, agentDiffServServiceGroup=agentDiffServServiceGroup, agentDiffServClassRuleMatchDstMacMask=agentDiffServClassRuleMatchDstMacMask, agentDiffServGenStatusPolicyAttrTableMax=agentDiffServGenStatusPolicyAttrTableMax, agentDiffServServicePerfEntry=agentDiffServServicePerfEntry, agentDiffServServicePerfOfferedPackets=agentDiffServServicePerfOfferedPackets, agentDiffServPolicyAttrStmtShapePeakCrate=agentDiffServPolicyAttrStmtShapePeakCrate, agentDiffServServiceTable=agentDiffServServiceTable, QosBurstSize=QosBurstSize, agentDiffServGenStatusClassTableSize=agentDiffServGenStatusClassTableSize, agentDiffServPolicyPerfInStorageType=agentDiffServPolicyPerfInStorageType, agentDiffServClassRuleMatchSrcL4PortStart=agentDiffServClassRuleMatchSrcL4PortStart, agentDiffServClassRuleMatchEntryType=agentDiffServClassRuleMatchEntryType, agentDiffServPolicyAttrStmtPoliceSinglerateCburst=agentDiffServPolicyAttrStmtPoliceSinglerateCburst, agentDiffServPolicyAttrStmtEntryType=agentDiffServPolicyAttrStmtEntryType, agentDiffServPolicyPerfOutRowStatus=agentDiffServPolicyPerfOutRowStatus, agentDiffServPolicyPerfOutSentOctets=agentDiffServPolicyPerfOutSentOctets, agentDiffServServicePerfTable=agentDiffServServicePerfTable, agentDiffServServicePerfSentPackets=agentDiffServServicePerfSentPackets, agentDiffServClassRuleMatchProtocolNum=agentDiffServClassRuleMatchProtocolNum, agentDiffServPolicyInstIndexNextFree=agentDiffServPolicyInstIndexNextFree, agentDiffServServicePerfOfferedOctets=agentDiffServServicePerfOfferedOctets, agentDiffServClassRuleMatchSrcL4PortEnd=agentDiffServClassRuleMatchSrcL4PortEnd, agentDiffServClassRuleMatchVlanId=agentDiffServClassRuleMatchVlanId, agentDiffServPolicyAttrStmtShapeAverageCrate=agentDiffServPolicyAttrStmtShapeAverageCrate, agentDiffServServicePerfDiscardedOctets=agentDiffServServicePerfDiscardedOctets, agentDiffServClassIndexNextFree=agentDiffServClassIndexNextFree, agentDiffServPolicyAttrStmtPoliceConformAct=agentDiffServPolicyAttrStmtPoliceConformAct, agentDiffServPolicyPerfOutTable=agentDiffServPolicyPerfOutTable, agentDiffServPolicyPerfOutTailDroppedPackets=agentDiffServPolicyPerfOutTailDroppedPackets, agentDiffServPolicyInstAttrIndexNextFree=agentDiffServPolicyInstAttrIndexNextFree, agentDiffServServiceStorageType=agentDiffServServiceStorageType, agentDiffServClassStorageType=agentDiffServClassStorageType, agentDiffServClassRuleTable=agentDiffServClassRuleTable, agentDiffServPolicyPerfOutStorageType=agentDiffServPolicyPerfOutStorageType, agentDiffServGenStatusPolicyAttrTableSize=agentDiffServGenStatusPolicyAttrTableSize, agentDiffServClassRuleMatchIpDscp=agentDiffServClassRuleMatchIpDscp, agentDiffServServiceEntry=agentDiffServServiceEntry, agentDiffServClassRowStatus=agentDiffServClassRowStatus, agentDiffServPolicyIndexNextFree=agentDiffServPolicyIndexNextFree, agentDiffServPolicyPerfOutSentPackets=agentDiffServPolicyPerfOutSentPackets, agentDiffServClassRuleMatchIpTosMask=agentDiffServClassRuleMatchIpTosMask, agentDiffServClassRuleRowStatus=agentDiffServClassRuleRowStatus, agentDiffServClassRuleMatchEvery=agentDiffServClassRuleMatchEvery, IntfDirection=IntfDirection, agentDiffServPolicyAttrStorageType=agentDiffServPolicyAttrStorageType, agentDiffServPolicyAttrStmtMarkCosVal=agentDiffServPolicyAttrStmtMarkCosVal, agentDiffServPolicyAttrStmtExpediteCrate=agentDiffServPolicyAttrStmtExpediteCrate, agentDiffServPolicyType=agentDiffServPolicyType, agentDiffServPolicyPerfOutHCTailDroppedOctets=agentDiffServPolicyPerfOutHCTailDroppedOctets, agentDiffServServicePolicyIndex=agentDiffServServicePolicyIndex, agentDiffServClassRuleMatchDstL4PortStart=agentDiffServClassRuleMatchDstL4PortStart, agentDiffServPolicyPerfOutHCShapeDelayedPackets=agentDiffServPolicyPerfOutHCShapeDelayedPackets, agentDiffServServicePerfHCDiscardedPackets=agentDiffServServicePerfHCDiscardedPackets, gsm7324QOSDiffServPrivate=gsm7324QOSDiffServPrivate, agentDiffServClassRuleMatchDstIpMask=agentDiffServClassRuleMatchDstIpMask, agentDiffServPolicyAttrStmtPoliceExceedVal=agentDiffServPolicyAttrStmtPoliceExceedVal, agentDiffServPolicyInstEntry=agentDiffServPolicyInstEntry, agentDiffServGenStatusPolicyInstTableSize=agentDiffServGenStatusPolicyInstTableSize, agentDiffServPolicyAttrTable=agentDiffServPolicyAttrTable, agentDiffServClassRuleMatchRefClassIndex=agentDiffServClassRuleMatchRefClassIndex, agentDiffServPolicyPerfInHCDiscardedPackets=agentDiffServPolicyPerfInHCDiscardedPackets, agentDiffServClassRuleIndex=agentDiffServClassRuleIndex, agentDiffServGenStatusPolicyTableMax=agentDiffServGenStatusPolicyTableMax, agentDiffServClassName=agentDiffServClassName)
