#
# PySNMP MIB module DHCP-Server-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DHCP-SERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:46:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, Counter64, Unsigned32, Counter32, Gauge32, Bits, NotificationType, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "Counter32", "Gauge32", "Bits", "NotificationType", "Integer32", "ObjectIdentity")
DisplayString, MacAddress, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "RowStatus", "TextualConvention")
swDHCPServerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 38))
if mibBuilder.loadTexts: swDHCPServerMIB.setLastUpdated('200706080000Z')
if mibBuilder.loadTexts: swDHCPServerMIB.setOrganization('D-Link Crop.')
if mibBuilder.loadTexts: swDHCPServerMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swDHCPServerMIB.setDescription('The structure of DHCP Server management for the proprietary enterprise.')
swDHCPServerCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 38, 1))
swDHCPServerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 38, 2))
swDHCPServerMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 38, 3))
swDHCPServerPoolMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2))
swDHCPServerBindingMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 4))
swDHCPServerState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 38, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerState.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerState.setDescription('This object enables/disables the DHCP server status of the device.')
swDHCPServerPingPktNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 38, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerPingPktNumber.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerPingPktNumber.setDescription('This object specifies the number of ping packets the DHCP server sends to an IP address before assigning this address to a requesting client.')
swDHCPServerPingTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 38, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerPingTimeOut.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerPingTimeOut.setDescription('This object specifies the amount of time the DHCP server must wait before timing out a ping packet.')
swDHCPServerExcludedAddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 1), )
if mibBuilder.loadTexts: swDHCPServerExcludedAddressTable.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerExcludedAddressTable.setDescription('A table that contains an IP addresses group that the DHCP server should not assign to DHCP client.')
swDHCPServerExcludedAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 1, 1), ).setIndexNames((0, "DHCP-Server-MIB", "swDHCPServerExcludedAddressBegin"), (0, "DHCP-Server-MIB", "swDHCPServerExcludedAddressEnd"))
if mibBuilder.loadTexts: swDHCPServerExcludedAddressEntry.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerExcludedAddressEntry.setDescription('A group of IP addresses that the DHCP server should not assign to DHCP client.')
swDHCPServerExcludedAddressBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerExcludedAddressBegin.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerExcludedAddressBegin.setDescription('The start address of this address range.')
swDHCPServerExcludedAddressEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerExcludedAddressEnd.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerExcludedAddressEnd.setDescription('The end address of this address range.')
swDHCPServerExcludedAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swDHCPServerExcludedAddressStatus.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerExcludedAddressStatus.setDescription('This object manages this entry.')
swDHCPServerPoolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 1), )
if mibBuilder.loadTexts: swDHCPServerPoolTable.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerPoolTable.setDescription('A table that contains DHCP server pool information.')
swDHCPServerPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 1, 1), ).setIndexNames((0, "DHCP-Server-MIB", "swDHCPServerPoolName"))
if mibBuilder.loadTexts: swDHCPServerPoolEntry.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerPoolEntry.setDescription('A list of DHCP server pool information.')
swDHCPServerPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerPoolName.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerPoolName.setDescription('The name of this pool entry.')
swDHCPServerPoolNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerPoolNetworkAddress.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerPoolNetworkAddress.setDescription('The network address of this DHCP pool entry.')
swDHCPServerPoolNetworkAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerPoolNetworkAddressMask.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerPoolNetworkAddressMask.setDescription('The network address mask of this DHCP pool entry.')
swDHCPServerPoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerPoolDomainName.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerPoolDomainName.setDescription('The domain name for the client if the server allocates the address for the client from this pool.')
swDHCPServerPoolNetBIOSNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("broadcast", 1), ("peer-to-peer", 2), ("mixed", 3), ("hybid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerPoolNetBIOSNodeType.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerPoolNetBIOSNodeType.setDescription('The NetBIOS node type for a Microsoft DHCP client.')
swDHCPServerPoolLeaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("predefined", 1), ("infinite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerPoolLeaseState.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerPoolLeaseState.setDescription('The pool lease state. When configured to infinity, the following nodes include swDHCPServerPoolLeaseDay, swDHCPServerPoolLeaseHour and swDHCPServerPoolLeaseMinute have no significance any more.')
swDHCPServerPoolLeaseDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerPoolLeaseDay.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerPoolLeaseDay.setDescription('The day of the lease.')
swDHCPServerPoolLeaseHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerPoolLeaseHour.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerPoolLeaseHour.setDescription('The hour of the lease.')
swDHCPServerPoolLeaseMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerPoolLeaseMinute.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerPoolLeaseMinute.setDescription('The minute of the lease.')
swDHCPServerPoolBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerPoolBootFile.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerPoolBootFile.setDescription('The name of the file that is used as a boot image.')
swDHCPServerPoolNextServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerPoolNextServer.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerPoolNextServer.setDescription('The next server to be used in the DHCP client boot process.')
swDHCPServerPoolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swDHCPServerPoolStatus.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerPoolStatus.setDescription('This object manages this entry.')
swDHCPServerDNSServerAddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 2), )
if mibBuilder.loadTexts: swDHCPServerDNSServerAddressTable.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerDNSServerAddressTable.setDescription('A table that contains the IP address of a DNS server that is available to a DHCP client.')
swDHCPServerDNSServerAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 2, 1), ).setIndexNames((0, "DHCP-Server-MIB", "swDHCPServerDNSServerPoolName"), (0, "DHCP-Server-MIB", "swDHCPServerDNSServerAddressIndex"))
if mibBuilder.loadTexts: swDHCPServerDNSServerAddressEntry.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerDNSServerAddressEntry.setDescription('A list of DNS server information.')
swDHCPServerDNSServerPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerDNSServerPoolName.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerDNSServerPoolName.setDescription('The pool name of this entry.')
swDHCPServerDNSServerAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerDNSServerAddressIndex.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerDNSServerAddressIndex.setDescription('The DNS server address number.')
swDHCPServerDNSServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerDNSServerAddress.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerDNSServerAddress.setDescription('The IP address of a DNS server that is available to a DHCP client.')
swDHCPServerDNSServerAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swDHCPServerDNSServerAddressStatus.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerDNSServerAddressStatus.setDescription('This object manages this entry.')
swDHCPServerNetBIOSNameServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 3), )
if mibBuilder.loadTexts: swDHCPServerNetBIOSNameServerTable.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerNetBIOSNameServerTable.setDescription('A table containing the NetBIOS WINS server address information that is available to a Microsoft DHCP client.')
swDHCPServerNetBIOSNameServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 3, 1), ).setIndexNames((0, "DHCP-Server-MIB", "swDHCPServerNetBIOSNameServerPoolName"), (0, "DHCP-Server-MIB", "swDHCPServerNetBIOSNameServerIndex"))
if mibBuilder.loadTexts: swDHCPServerNetBIOSNameServerEntry.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerNetBIOSNameServerEntry.setDescription('A list of NetBIOS WINS server infomation.')
swDHCPServerNetBIOSNameServerPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerNetBIOSNameServerPoolName.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerNetBIOSNameServerPoolName.setDescription('The pool name of this entry.')
swDHCPServerNetBIOSNameServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerNetBIOSNameServerIndex.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerNetBIOSNameServerIndex.setDescription('The NetBIOS WINS server number.')
swDHCPServerNetBIOSNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerNetBIOSNameServer.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerNetBIOSNameServer.setDescription('The NetBIOS WINS server that is available to a DHCP client.')
swDHCPServerNetBIOSNameServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swDHCPServerNetBIOSNameServerStatus.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerNetBIOSNameServerStatus.setDescription('This object manages this entry.')
swDHCPServerDefaultRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 4), )
if mibBuilder.loadTexts: swDHCPServerDefaultRouterTable.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerDefaultRouterTable.setDescription('A table that contains the IP address of the default router for a DHCP client.')
swDHCPServerDefaultRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 4, 1), ).setIndexNames((0, "DHCP-Server-MIB", "swDHCPServerDefaultRouterPoolName"), (0, "DHCP-Server-MIB", "swDHCPServerDefaultRouterIndex"))
if mibBuilder.loadTexts: swDHCPServerDefaultRouterEntry.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerDefaultRouterEntry.setDescription('A list of default router information.')
swDHCPServerDefaultRouterPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerDefaultRouterPoolName.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerDefaultRouterPoolName.setDescription('The pool name of this entry.')
swDHCPServerDefaultRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerDefaultRouterIndex.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerDefaultRouterIndex.setDescription('The default router index.')
swDHCPServerDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerDefaultRouter.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerDefaultRouter.setDescription('The address of the default router for a DHCP client.')
swDHCPServerDefaultRouterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 2, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swDHCPServerDefaultRouterStatus.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerDefaultRouterStatus.setDescription('This object manages this entry.')
swDHCPServerManualBindingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 3), )
if mibBuilder.loadTexts: swDHCPServerManualBindingTable.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerManualBindingTable.setDescription('A table that contains information regarding the binding of a pool of IP addresses to a DHCP server.')
swDHCPServerManualBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 3, 1), ).setIndexNames((0, "DHCP-Server-MIB", "swDHCPServerManualBindingPoolName"), (0, "DHCP-Server-MIB", "swDHCPServerManualBindingIpAddress"))
if mibBuilder.loadTexts: swDHCPServerManualBindingEntry.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerManualBindingEntry.setDescription('A list of manual pool binding.')
swDHCPServerManualBindingPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerManualBindingPoolName.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerManualBindingPoolName.setDescription('The pool name of this entry.')
swDHCPServerManualBindingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerManualBindingIpAddress.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerManualBindingIpAddress.setDescription('IP address which will be assigned to specified client.')
swDHCPServerManualBindingHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 3, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swDHCPServerManualBindingHardwareAddress.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerManualBindingHardwareAddress.setDescription('The MAC address of a client.')
swDHCPServerManualBindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee802", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swDHCPServerManualBindingType.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerManualBindingType.setDescription('The type of this manual binding. both(3): The client type has no significance, the entry could apply to either one. ')
swDHCPServerManualBindingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swDHCPServerManualBindingStatus.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerManualBindingStatus.setDescription('This object manages this entry.')
swDHCPServerBindingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 4), )
if mibBuilder.loadTexts: swDHCPServerBindingTable.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerBindingTable.setDescription('A table that contains information regarding dynamic binding information of a pool of IP addresses.')
swDHCPServerBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 4, 1), ).setIndexNames((0, "DHCP-Server-MIB", "swDHCPServerBindingPoolName"), (0, "DHCP-Server-MIB", "swDHCPServerBindingIpAddress"))
if mibBuilder.loadTexts: swDHCPServerBindingEntry.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerBindingEntry.setDescription('A pool of IP addresses that are listed as bound to a DHCP server.')
swDHCPServerBindingPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerBindingPoolName.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerBindingPoolName.setDescription('The name of this pool entry.')
swDHCPServerBindingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerBindingIpAddress.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerBindingIpAddress.setDescription('IP addresses which have been assigned to a specified client.')
swDHCPServerBindingHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerBindingHardwareAddress.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerBindingHardwareAddress.setDescription('The MAC address of a client.')
swDHCPServerBindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("iee802", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerBindingType.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerBindingType.setDescription('The type of this binding.')
swDHCPServerBindingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerBindingStatus.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerBindingStatus.setDescription('The status of this binding.')
swDHCPServerBindingLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerBindingLifeTime.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerBindingLifeTime.setDescription("The life time of the binding entry in seconds. The value '-1' means an infinite life time.")
swDHCPServerBindingClearState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerBindingClearState.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerBindingClearState.setDescription('This object is used to clear this entry.')
swDHCPServerConflictIPTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 5), )
if mibBuilder.loadTexts: swDHCPServerConflictIPTable.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerConflictIPTable.setDescription('A table that contains DHCP address conflicts.')
swDHCPServerConflictIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 5, 1), ).setIndexNames((0, "DHCP-Server-MIB", "swDHCPServerConflictIPIPAddress"))
if mibBuilder.loadTexts: swDHCPServerConflictIPEntry.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerConflictIPEntry.setDescription('A DHCP address conflict means a duplication of use of the same IP address by two hosts.')
swDHCPServerConflictIPIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerConflictIPIPAddress.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerConflictIPIPAddress.setDescription('IP address which is duplicated and used by two hosts.')
swDHCPServerConflictIPDetectionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ping", 1), ("gratuitous-arp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerConflictIPDetectionMethod.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerConflictIPDetectionMethod.setDescription('The server detects conflicts using ping. The client detects conflicts using gratuitous Address Resolution Protocol (ARP).')
swDHCPServerConflictIPDetectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDHCPServerConflictIPDetectionTime.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerConflictIPDetectionTime.setDescription('The time at which a DHCP address conflict happens.')
swDHCPServerConflictIPClearState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 38, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swDHCPServerConflictIPClearState.setStatus('current')
if mibBuilder.loadTexts: swDHCPServerConflictIPClearState.setDescription('This object is used to clear this entry.')
mibBuilder.exportSymbols("DHCP-Server-MIB", swDHCPServerPoolEntry=swDHCPServerPoolEntry, swDHCPServerPoolDomainName=swDHCPServerPoolDomainName, swDHCPServerState=swDHCPServerState, swDHCPServerBindingIpAddress=swDHCPServerBindingIpAddress, swDHCPServerExcludedAddressEntry=swDHCPServerExcludedAddressEntry, swDHCPServerConflictIPEntry=swDHCPServerConflictIPEntry, swDHCPServerPoolStatus=swDHCPServerPoolStatus, swDHCPServerDefaultRouterIndex=swDHCPServerDefaultRouterIndex, swDHCPServerManualBindingTable=swDHCPServerManualBindingTable, swDHCPServerConflictIPTable=swDHCPServerConflictIPTable, swDHCPServerPoolMgmt=swDHCPServerPoolMgmt, swDHCPServerDefaultRouterPoolName=swDHCPServerDefaultRouterPoolName, swDHCPServerMIB=swDHCPServerMIB, swDHCPServerPingTimeOut=swDHCPServerPingTimeOut, swDHCPServerConflictIPDetectionTime=swDHCPServerConflictIPDetectionTime, swDHCPServerBindingEntry=swDHCPServerBindingEntry, swDHCPServerPoolLeaseHour=swDHCPServerPoolLeaseHour, swDHCPServerInfo=swDHCPServerInfo, swDHCPServerManualBindingPoolName=swDHCPServerManualBindingPoolName, swDHCPServerManualBindingEntry=swDHCPServerManualBindingEntry, swDHCPServerPingPktNumber=swDHCPServerPingPktNumber, swDHCPServerMgmt=swDHCPServerMgmt, swDHCPServerDNSServerAddressEntry=swDHCPServerDNSServerAddressEntry, swDHCPServerNetBIOSNameServerTable=swDHCPServerNetBIOSNameServerTable, swDHCPServerNetBIOSNameServer=swDHCPServerNetBIOSNameServer, swDHCPServerManualBindingType=swDHCPServerManualBindingType, swDHCPServerBindingLifeTime=swDHCPServerBindingLifeTime, swDHCPServerDefaultRouterEntry=swDHCPServerDefaultRouterEntry, swDHCPServerPoolName=swDHCPServerPoolName, swDHCPServerCtrl=swDHCPServerCtrl, swDHCPServerManualBindingStatus=swDHCPServerManualBindingStatus, swDHCPServerPoolNextServer=swDHCPServerPoolNextServer, swDHCPServerExcludedAddressBegin=swDHCPServerExcludedAddressBegin, swDHCPServerNetBIOSNameServerEntry=swDHCPServerNetBIOSNameServerEntry, swDHCPServerBindingClearState=swDHCPServerBindingClearState, swDHCPServerConflictIPIPAddress=swDHCPServerConflictIPIPAddress, swDHCPServerBindingType=swDHCPServerBindingType, swDHCPServerPoolLeaseDay=swDHCPServerPoolLeaseDay, swDHCPServerDNSServerAddressStatus=swDHCPServerDNSServerAddressStatus, swDHCPServerPoolNetworkAddressMask=swDHCPServerPoolNetworkAddressMask, swDHCPServerDNSServerPoolName=swDHCPServerDNSServerPoolName, swDHCPServerNetBIOSNameServerIndex=swDHCPServerNetBIOSNameServerIndex, swDHCPServerDefaultRouter=swDHCPServerDefaultRouter, swDHCPServerBindingHardwareAddress=swDHCPServerBindingHardwareAddress, swDHCPServerConflictIPDetectionMethod=swDHCPServerConflictIPDetectionMethod, swDHCPServerBindingStatus=swDHCPServerBindingStatus, swDHCPServerConflictIPClearState=swDHCPServerConflictIPClearState, swDHCPServerBindingTable=swDHCPServerBindingTable, swDHCPServerNetBIOSNameServerPoolName=swDHCPServerNetBIOSNameServerPoolName, swDHCPServerManualBindingIpAddress=swDHCPServerManualBindingIpAddress, swDHCPServerNetBIOSNameServerStatus=swDHCPServerNetBIOSNameServerStatus, swDHCPServerPoolTable=swDHCPServerPoolTable, swDHCPServerPoolNetworkAddress=swDHCPServerPoolNetworkAddress, swDHCPServerBindingPoolName=swDHCPServerBindingPoolName, swDHCPServerExcludedAddressTable=swDHCPServerExcludedAddressTable, PYSNMP_MODULE_ID=swDHCPServerMIB, swDHCPServerManualBindingHardwareAddress=swDHCPServerManualBindingHardwareAddress, swDHCPServerPoolBootFile=swDHCPServerPoolBootFile, swDHCPServerBindingMgmt=swDHCPServerBindingMgmt, swDHCPServerDNSServerAddressIndex=swDHCPServerDNSServerAddressIndex, swDHCPServerExcludedAddressStatus=swDHCPServerExcludedAddressStatus, swDHCPServerDNSServerAddressTable=swDHCPServerDNSServerAddressTable, swDHCPServerDefaultRouterStatus=swDHCPServerDefaultRouterStatus, swDHCPServerExcludedAddressEnd=swDHCPServerExcludedAddressEnd, swDHCPServerPoolLeaseMinute=swDHCPServerPoolLeaseMinute, swDHCPServerDNSServerAddress=swDHCPServerDNSServerAddress, swDHCPServerDefaultRouterTable=swDHCPServerDefaultRouterTable, swDHCPServerPoolLeaseState=swDHCPServerPoolLeaseState, swDHCPServerPoolNetBIOSNodeType=swDHCPServerPoolNetBIOSNodeType)
