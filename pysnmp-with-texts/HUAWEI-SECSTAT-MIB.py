#
# PySNMP MIB module HUAWEI-SECSTAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-SECSTAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, Unsigned32, Bits, ModuleIdentity, TimeTicks, MibIdentifier, Integer32, iso, NotificationType, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "Bits", "ModuleIdentity", "TimeTicks", "MibIdentifier", "Integer32", "iso", "NotificationType", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
hwSECSTATCommon = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1))
if mibBuilder.loadTexts: hwSECSTATCommon.setLastUpdated('200304100900Z')
if mibBuilder.loadTexts: hwSECSTATCommon.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwSECSTATCommon.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwSECSTATCommon.setDescription(' V1.00 The HUAWEI-SECSTAT-MIB contains objects to manage the security statistics for router and firewall product. ')
hwSECSTAT = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11))
hwSecStatCfgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1))
hwSecStatGlobalStatEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatGlobalStatEnable.setStatus('current')
if mibBuilder.loadTexts: hwSecStatGlobalStatEnable.setDescription('The status indicate whether enable the global statistics.')
hwSecStatGlobalPktScale = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 2))
hwSecStatTcpPktScale = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatTcpPktScale.setStatus('current')
if mibBuilder.loadTexts: hwSecStatTcpPktScale.setDescription(' The percent of TCP packets. The hwSecStatTcpPktScale + hwSecStatUdpPktScale + hwSecStatIcmpPktScale must less than 100 ')
hwSecStatUdpPktScale = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatUdpPktScale.setStatus('current')
if mibBuilder.loadTexts: hwSecStatUdpPktScale.setDescription(' The percent of UDP packets. The hwSecStatTcpPktScale + hwSecStatUdpPktScale + hwSecStatIcmpPktScale must less than 100 ')
hwSecStatIcmpPktScale = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatIcmpPktScale.setStatus('current')
if mibBuilder.loadTexts: hwSecStatIcmpPktScale.setDescription(' The percent of ICMP packets. The hwSecStatTcpPktScale + hwSecStatUdpPktScale + hwSecStatIcmpPktScale must less than 100 ')
hwSecStatAlteration = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatAlteration.setStatus('current')
if mibBuilder.loadTexts: hwSecStatAlteration.setDescription('The proportion of change in the packets scale.')
hwSecStatCalcTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatCalcTime.setStatus('current')
if mibBuilder.loadTexts: hwSecStatCalcTime.setDescription('The period of packet scale statistics, the unit is minute.')
hwSecStatPktScaleSetDefault = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatPktScaleSetDefault.setStatus('current')
if mibBuilder.loadTexts: hwSecStatPktScaleSetDefault.setDescription(' This OID is used for setting the packet scale configuration to default. When you want to set the value to default, set this OID to 1. ')
hwSecStatGlobalSessNum = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 3))
hwSecStatTcpSessNumMax = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(500000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatTcpSessNumMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatTcpSessNumMax.setDescription('The maximun number of TCP session allowed.')
hwSecStatTcpSessNumMin = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(500000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatTcpSessNumMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatTcpSessNumMin.setDescription(' The minimum of TCP session. when the number of TCP session in one system arrive the maximum allowed, system would decrease the TCP session by some method, once the number of tcp session in one system arrive the minumim, system would stop decreasing the TCP session. ')
hwSecStatUdpSessNumMax = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(500000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatUdpSessNumMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatUdpSessNumMax.setDescription('The maximun number of UDP session allowed.')
hwSecStatUdpSessNumMin = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(500000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatUdpSessNumMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatUdpSessNumMin.setDescription(' The minimum of UDP session. when the number of UDP session in one system arrive the maximum allowed, system would decrease the UDP session by some method, once the number of tcp session in one system arrive the minumim, system would stop decreasing the UDP session. ')
hwSecStatGlobalSessSetDefault = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatGlobalSessSetDefault.setStatus('current')
if mibBuilder.loadTexts: hwSecStatGlobalSessSetDefault.setDescription(' This OID is used for setting the global session number configuration to default. When you want to set the value to default, set this OID to 1. ')
hwSecStatIcmpSessNumMax = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(500000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatIcmpSessNumMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatIcmpSessNumMax.setDescription('The maximun number of ICMP session allowed.')
hwSecStatIcmpSessNumMin = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(500000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatIcmpSessNumMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatIcmpSessNumMin.setDescription(' The minimum of ICMP session. when the number of ICMP session in one system arrive the maximum allowed, system would decrease the ICMP session by some method, once the number of ICMP session in one system arrive the minumim, system would stop decreasing the ICMP session. ')
hwSecStatTcpProxySessNumMax = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(500000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatTcpProxySessNumMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatTcpProxySessNumMax.setDescription('The maximun number of TcpProxy session allowed.')
hwSecStatTcpProxySessNumMin = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(500000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatTcpProxySessNumMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatTcpProxySessNumMin.setDescription(' The minimum of TcpProxy session. when the number of TcpProxy session in one system arrive the maximum allowed, system would decrease the TcpProxy session by some method, once the number of TcpProxy session in one system arrive the minumim, system would stop decreasing the TcpProxy session. ')
hwSecStatMonitorObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2))
hwSecStatMonitorGlobalSessFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1))
hwSecStatMonTotalBootConnNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonTotalBootConnNum.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonTotalBootConnNum.setDescription(' The total number of connection since device startup. This number is increased only. ')
hwSecStatMonPeakSessSpeed = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonPeakSessSpeed.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonPeakSessSpeed.setDescription('The maximun speed of session establishing since device startup.')
hwSecStatMonCurSessSpeed = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonCurSessSpeed.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonCurSessSpeed.setDescription('The current speed of session establishing.')
hwSecStatMonTotalSess = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonTotalSess.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonTotalSess.setDescription('The total session in the system currently.')
hwSecStatMonHalfConn = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonHalfConn.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonHalfConn.setDescription('The number of incomplete session in system currently.')
hwSecStatMonTcpSess = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonTcpSess.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonTcpSess.setDescription('The current number of TCP sessions.')
hwSecStatMonUdpSess = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonUdpSess.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonUdpSess.setDescription('The current number of UDP sessions.')
hwSecStatMonIcmpSess = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonIcmpSess.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonIcmpSess.setDescription('The current number of ICMP sessions.')
hwSecStatMonSvrMapTblNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonSvrMapTblNum.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonSvrMapTblNum.setDescription('The total number of server map.')
hwSecStatFragTblNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatFragTblNum.setStatus('current')
if mibBuilder.loadTexts: hwSecStatFragTblNum.setDescription('The number of entry in fragment table.')
hwSecStatMonRcvIcmpPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvIcmpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvIcmpPkts.setDescription('The total number of ICMP packets received by system.')
hwSecStatMonRcvIcmpOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvIcmpOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvIcmpOcts.setDescription('The total bytes of ICMP packets received by system.')
hwSecStatMonRcvTcpPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvTcpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvTcpPkts.setDescription('The total number of TCP packets received by system.')
hwSecStatMonRcvTcpOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvTcpOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvTcpOcts.setDescription('The total bytes of TCP packets received by system.')
hwSecStatMonRcvUdpPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvUdpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvUdpPkts.setDescription('The total number of UDP packets received by system.')
hwSecStatMonRcvUdpOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvUdpOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvUdpOcts.setDescription('The total bytes of UDP packets received by system.')
hwSecStatMonRcvEtcPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvEtcPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvEtcPkts.setDescription('The total number of other type packets received by system.')
hwSecStatMonRcvEtcOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvEtcOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvEtcOcts.setDescription('The total bytes of other type packets received by system.')
hwSecStatMonPassIcmpPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonPassIcmpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonPassIcmpPkts.setDescription('The total number of ICMP packets pass the system.')
hwSecStatMonPassIcmpOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonPassIcmpOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonPassIcmpOcts.setDescription('The total bytes of ICMP packets pass the system.')
hwSecStatMonPassTcpPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonPassTcpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonPassTcpPkts.setDescription('The total number of TCP packets pass the system.')
hwSecStatMonPassTcpOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonPassTcpOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonPassTcpOcts.setDescription('The total bytes of TCP packets pass the system.')
hwSecStatMonPassUdpPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonPassUdpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonPassUdpPkts.setDescription('The total number of UDP packets pass the system.')
hwSecStatMonPassUdpOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonPassUdpOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonPassUdpOcts.setDescription('The total bytes of UDP packets pass the system.')
hwSecStatMonPassEtcPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonPassEtcPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonPassEtcPkts.setDescription('The total number of other type packets pass the system.')
hwSecStatMonPassEtcOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonPassEtcOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonPassEtcOcts.setDescription('The total bytes of other type packets pass the system.')
hwSecStatMonSynPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonSynPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonSynPkts.setDescription('The total number of SYN packets arriving the system.')
hwSecStatMonFinPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonFinPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonFinPkts.setDescription('The total number of FIN packets arriving the system.')
hwSecStatMonSynAckPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonSynAckPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonSynAckPkts.setDescription('The total number of SYN-ACK packets arriving the system.')
hwSecStatMonRstPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRstPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRstPkts.setDescription('The total number of RESET packets arriving the system.')
hwSecStatMonRcvFragPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvFragPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvFragPkts.setDescription('The total number of fragment packets arriving the system.')
hwSecStatMonRcvFragOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvFragOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvFragOcts.setDescription('The total bytes of fragment packets arriving the system.')
hwSecStatMonAllPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonAllPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonAllPkts.setDescription('The number of received packets by the device.')
hwSecStatMonAllOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonAllOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonAllOcts.setDescription('The number of received bytes by the device.')
hwSecStatClearGlobalSessFlowInfo = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatClearGlobalSessFlowInfo.setStatus('current')
if mibBuilder.loadTexts: hwSecStatClearGlobalSessFlowInfo.setDescription(' Use this OID to clear the global session flow statistics information. When you want to clear the information, set this OID to 1. ')
hwSecStatMonitorGlobalAppInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2))
hwSecStatMonFtpSessions = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonFtpSessions.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonFtpSessions.setDescription('The total number of FTP sessions in the system currently.')
hwSecStatMonRcvFtpPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvFtpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvFtpPkts.setDescription('The total number of FTP packets received by system.')
hwSecStatMonRcvFtpOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvFtpOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvFtpOcts.setDescription('The total bytes of FTP packets received by system.')
hwSecStatMonSmtpSessions = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonSmtpSessions.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonSmtpSessions.setDescription('The total number of SMTP sessions in the system currently.')
hwSecStatMonRcvSmtpPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvSmtpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvSmtpPkts.setDescription('The total number of SMTP packets received by system.')
hwSecStatMonRcvSmtpOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvSmtpOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvSmtpOcts.setDescription('The total bytes of SMTP packets received by system.')
hwSecStatMonHttpSessions = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonHttpSessions.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonHttpSessions.setDescription('The total number of HTTP sessions in the system currently.')
hwSecStatMonRcvHttpPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvHttpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvHttpPkts.setDescription('The total number of HTTP packets received by system.')
hwSecStatMonRcvHttpOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvHttpOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvHttpOcts.setDescription('The total bytes of HTTP packets received by system.')
hwSecStatMonH323Sessions = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonH323Sessions.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonH323Sessions.setDescription('The total number of H323 sessions in the system currently.')
hwSecStatMonRcvH323Pkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvH323Pkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvH323Pkts.setDescription('The total number of H323 packets received by system.')
hwSecStatMonRcvH323Octs = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvH323Octs.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvH323Octs.setDescription('The total bytes of H323 packets received by system.')
hwSecStatMonRtspSessions = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRtspSessions.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRtspSessions.setDescription('The total number of RTSP sessions in the system currently.')
hwSecStatMonRcvRtspPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvRtspPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvRtspPkts.setDescription('The total number of RTSP packets received by system.')
hwSecStatMonRcvRtspOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonRcvRtspOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonRcvRtspOcts.setDescription('The total bytes of RTSP packets received by system.')
hwSecStatMonJavaAtckNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatMonJavaAtckNum.setStatus('current')
if mibBuilder.loadTexts: hwSecStatMonJavaAtckNum.setDescription('The number of JAVA attack detected by system.')
hwSecStatClearGlobalAppInfo = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatClearGlobalAppInfo.setStatus('current')
if mibBuilder.loadTexts: hwSecStatClearGlobalAppInfo.setDescription(' Use this OID to clear the global application statistics information. When you want to clear the information, set this OID to 1. ')
hwSecStatMonitorGlobalDrop = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3))
hwSecStatNoSessTblPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatNoSessTblPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatNoSessTblPkts.setDescription('The total number of packets dropped for no session.')
hwSecStatNoSessTblOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatNoSessTblOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatNoSessTblOcts.setDescription('The total bytes of packets dropped for no session.')
hwSecStatSeqErrPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatSeqErrPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatSeqErrPkts.setDescription('The total number of packets dropped for sequence number error.')
hwSecStatSeqErrOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatSeqErrOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatSeqErrOcts.setDescription('The total bytes of packets dropped for sequence number error.')
hwSecStatAclDenyNonIcmpPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatAclDenyNonIcmpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatAclDenyNonIcmpPkts.setDescription('The total number of non ICMP packets denied for acl rule.')
hwSecStatAclDenyNonIcmpOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatAclDenyNonIcmpOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatAclDenyNonIcmpOcts.setDescription('The total bytes of non ICMP packets denied for acl rule.')
hwSecStatAclDenyIcmpPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatAclDenyIcmpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatAclDenyIcmpPkts.setDescription('The total number of ICMP packets denied by acl rule.')
hwSecStatAclDenyIcmpOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatAclDenyIcmpOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatAclDenyIcmpOcts.setDescription('The total bytes of ICMP packets denied by acl rule.')
hwSecStatBlsDenyPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatBlsDenyPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatBlsDenyPkts.setDescription('The total number of packets denied by blacklist.')
hwSecStatBlsDenyOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatBlsDenyOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatBlsDenyOcts.setDescription('The total bytes of packets denied by blacklist.')
hwSecStatIcmpFloodDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatIcmpFloodDropPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatIcmpFloodDropPkts.setDescription('The total number of packets dropped due to ICMP Flood attack.')
hwSecStatIcmpFloodDropOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatIcmpFloodDropOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatIcmpFloodDropOcts.setDescription('The total bytes of packets dropped due to ICMP Flood attack.')
hwSecStatUdpFloodDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatUdpFloodDropPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatUdpFloodDropPkts.setDescription('The total number of packets dropped due to UDP Flood attack.')
hwSecStatUdpFloodDropOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatUdpFloodDropOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatUdpFloodDropOcts.setDescription('The total bytes of packets dropped due to UDP Flood attack.')
hwSecStatAlgDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatAlgDropPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatAlgDropPkts.setDescription('The total number of packets dropped by application layer gateway.')
hwSecStatAlgDropOcts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatAlgDropOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatAlgDropOcts.setDescription('The total bytes of packets dropped by application layer gateway.')
hwSecStatIPVerErrDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatIPVerErrDropPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatIPVerErrDropPkts.setDescription('The total number of packets dropped for IP version error.')
hwSecStatIpCrcDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatIpCrcDropPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatIpCrcDropPkts.setDescription('The total number of packets dropped for CRC error.')
hwSecStatIpTTLDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatIpTTLDropPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatIpTTLDropPkts.setDescription('The total number of packets dropped for TTL error.')
hwSecStatProtoErrDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatProtoErrDropPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatProtoErrDropPkts.setDescription('The total number of packets dropped for protocol error.')
hwSecStatClearGlobalDropInfo = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 2, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatClearGlobalDropInfo.setStatus('current')
if mibBuilder.loadTexts: hwSecStatClearGlobalDropInfo.setDescription(' Use this OID to clear the global dropped packets statistics information. When you want to clear the information, set this OID to 1. ')
hwSecStatConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 3))
hwSecStatCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 3, 1))
hwSecStatMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 3, 2))
hwSecStatGlobalCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 3, 2, 1)).setObjects(("HUAWEI-SECSTAT-MIB", "hwSecStatTcpPktScale"), ("HUAWEI-SECSTAT-MIB", "hwSecStatUdpPktScale"), ("HUAWEI-SECSTAT-MIB", "hwSecStatIcmpPktScale"), ("HUAWEI-SECSTAT-MIB", "hwSecStatAlteration"), ("HUAWEI-SECSTAT-MIB", "hwSecStatCalcTime"), ("HUAWEI-SECSTAT-MIB", "hwSecStatTcpSessNumMax"), ("HUAWEI-SECSTAT-MIB", "hwSecStatTcpSessNumMin"), ("HUAWEI-SECSTAT-MIB", "hwSecStatUdpSessNumMax"), ("HUAWEI-SECSTAT-MIB", "hwSecStatGlobalSessSetDefault"), ("HUAWEI-SECSTAT-MIB", "hwSecStatIcmpSessNumMax"), ("HUAWEI-SECSTAT-MIB", "hwSecStatIcmpSessNumMin"), ("HUAWEI-SECSTAT-MIB", "hwSecStatTcpProxySessNumMax"), ("HUAWEI-SECSTAT-MIB", "hwSecStatTcpProxySessNumMin"), ("HUAWEI-SECSTAT-MIB", "hwSecStatPktScaleSetDefault"), ("HUAWEI-SECSTAT-MIB", "hwSecStatUdpSessNumMin"), ("HUAWEI-SECSTAT-MIB", "hwSecStatGlobalStatEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSecStatGlobalCfgGroup = hwSecStatGlobalCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwSecStatGlobalCfgGroup.setDescription('Description.')
hwSecStatGlobalMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 1, 3, 2, 2)).setObjects(("HUAWEI-SECSTAT-MIB", "hwSecStatMonTotalSess"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonHalfConn"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvIcmpPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvIcmpOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvTcpPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvTcpOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvUdpPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvUdpOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvEtcPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvEtcOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonPassIcmpPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonPassIcmpOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonPassTcpPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonPassTcpOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonPassUdpPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonPassUdpOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonPassEtcPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonPassEtcOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonSynPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonFinPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonSynAckPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRstPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvFragPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvFragOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonFtpSessions"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvFtpPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvFtpOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonSmtpSessions"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvSmtpPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvSmtpOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonHttpSessions"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvHttpPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvHttpOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonH323Sessions"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvH323Pkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvH323Octs"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRtspSessions"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvRtspPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonRcvRtspOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonJavaAtckNum"), ("HUAWEI-SECSTAT-MIB", "hwSecStatNoSessTblPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatNoSessTblOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatSeqErrPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatSeqErrOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatIcmpFloodDropPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatIcmpFloodDropOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatUdpFloodDropPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatUdpFloodDropOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatAlgDropPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatAlgDropOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatIPVerErrDropPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatIpCrcDropPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatIpTTLDropPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonCurSessSpeed"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonPeakSessSpeed"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonTotalBootConnNum"), ("HUAWEI-SECSTAT-MIB", "hwSecStatProtoErrDropPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatAclDenyNonIcmpPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatAclDenyNonIcmpOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatAclDenyIcmpPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatAclDenyIcmpOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatBlsDenyPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatClearGlobalDropInfo"), ("HUAWEI-SECSTAT-MIB", "hwSecStatClearGlobalAppInfo"), ("HUAWEI-SECSTAT-MIB", "hwSecStatClearGlobalSessFlowInfo"), ("HUAWEI-SECSTAT-MIB", "hwSecStatBlsDenyOcts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonTcpSess"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonUdpSess"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonIcmpSess"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonSvrMapTblNum"), ("HUAWEI-SECSTAT-MIB", "hwSecStatFragTblNum"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonAllPkts"), ("HUAWEI-SECSTAT-MIB", "hwSecStatMonAllOcts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSecStatGlobalMonitorGroup = hwSecStatGlobalMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: hwSecStatGlobalMonitorGroup.setDescription('Description.')
mibBuilder.exportSymbols("HUAWEI-SECSTAT-MIB", hwSecStatMonRcvUdpOcts=hwSecStatMonRcvUdpOcts, hwSecStatGlobalStatEnable=hwSecStatGlobalStatEnable, hwSecStatMonH323Sessions=hwSecStatMonH323Sessions, hwSecStatNoSessTblOcts=hwSecStatNoSessTblOcts, hwSecStatSeqErrOcts=hwSecStatSeqErrOcts, hwSecStatMonPassUdpOcts=hwSecStatMonPassUdpOcts, hwSecStatMonRcvTcpPkts=hwSecStatMonRcvTcpPkts, hwSecStatMonPeakSessSpeed=hwSecStatMonPeakSessSpeed, hwSecStatGlobalMonitorGroup=hwSecStatGlobalMonitorGroup, hwSecStatMonRcvSmtpOcts=hwSecStatMonRcvSmtpOcts, hwSecStatUdpPktScale=hwSecStatUdpPktScale, hwSecStatAclDenyIcmpPkts=hwSecStatAclDenyIcmpPkts, hwSecStatMonRcvUdpPkts=hwSecStatMonRcvUdpPkts, hwSecStatMonRcvH323Octs=hwSecStatMonRcvH323Octs, hwSecStatMonSvrMapTblNum=hwSecStatMonSvrMapTblNum, hwSecStatPktScaleSetDefault=hwSecStatPktScaleSetDefault, hwSecStatMonRcvH323Pkts=hwSecStatMonRcvH323Pkts, hwSecStatMonTotalBootConnNum=hwSecStatMonTotalBootConnNum, hwSecStatMonRcvHttpPkts=hwSecStatMonRcvHttpPkts, hwSecStatMonRcvIcmpPkts=hwSecStatMonRcvIcmpPkts, hwSecStatMonPassTcpOcts=hwSecStatMonPassTcpOcts, hwSecStatMonFtpSessions=hwSecStatMonFtpSessions, hwSecStatCalcTime=hwSecStatCalcTime, hwSecStatMonRcvFragOcts=hwSecStatMonRcvFragOcts, hwSecStatAclDenyNonIcmpOcts=hwSecStatAclDenyNonIcmpOcts, hwSecStatGlobalSessSetDefault=hwSecStatGlobalSessSetDefault, hwSecStatMonRcvEtcOcts=hwSecStatMonRcvEtcOcts, hwSecStatMonAllPkts=hwSecStatMonAllPkts, hwSecStatMonHttpSessions=hwSecStatMonHttpSessions, hwSecStatMonPassIcmpOcts=hwSecStatMonPassIcmpOcts, hwSecStatAlgDropPkts=hwSecStatAlgDropPkts, hwSecStatMonPassUdpPkts=hwSecStatMonPassUdpPkts, hwSecStatMonRcvRtspPkts=hwSecStatMonRcvRtspPkts, PYSNMP_MODULE_ID=hwSECSTATCommon, hwSecStatClearGlobalAppInfo=hwSecStatClearGlobalAppInfo, hwSecStatGlobalPktScale=hwSecStatGlobalPktScale, hwSecStatCfgObjects=hwSecStatCfgObjects, hwSecStatIcmpSessNumMin=hwSecStatIcmpSessNumMin, hwSecStatGlobalCfgGroup=hwSecStatGlobalCfgGroup, hwSecStatMonFinPkts=hwSecStatMonFinPkts, hwSecStatGlobalSessNum=hwSecStatGlobalSessNum, hwSecStatMonSynPkts=hwSecStatMonSynPkts, hwSecStatMonPassEtcPkts=hwSecStatMonPassEtcPkts, hwSecStatMonTotalSess=hwSecStatMonTotalSess, hwSecStatMonSynAckPkts=hwSecStatMonSynAckPkts, hwSecStatMonHalfConn=hwSecStatMonHalfConn, hwSecStatMonRcvSmtpPkts=hwSecStatMonRcvSmtpPkts, hwSecStatIcmpFloodDropOcts=hwSecStatIcmpFloodDropOcts, hwSecStatMonitorGlobalDrop=hwSecStatMonitorGlobalDrop, hwSecStatCompliance=hwSecStatCompliance, hwSecStatMonRcvFtpPkts=hwSecStatMonRcvFtpPkts, hwSecStatMonUdpSess=hwSecStatMonUdpSess, hwSecStatMonIcmpSess=hwSecStatMonIcmpSess, hwSecStatMonitorGlobalAppInfo=hwSecStatMonitorGlobalAppInfo, hwSecStatMonRcvEtcPkts=hwSecStatMonRcvEtcPkts, hwSecStatUdpFloodDropPkts=hwSecStatUdpFloodDropPkts, hwSecStatAclDenyIcmpOcts=hwSecStatAclDenyIcmpOcts, hwSecStatMonPassEtcOcts=hwSecStatMonPassEtcOcts, hwSecStatUdpSessNumMax=hwSecStatUdpSessNumMax, hwSecStatSeqErrPkts=hwSecStatSeqErrPkts, hwSecStatTcpSessNumMax=hwSecStatTcpSessNumMax, hwSecStatTcpSessNumMin=hwSecStatTcpSessNumMin, hwSecStatNoSessTblPkts=hwSecStatNoSessTblPkts, hwSecStatClearGlobalSessFlowInfo=hwSecStatClearGlobalSessFlowInfo, hwSECSTATCommon=hwSECSTATCommon, hwSecStatTcpProxySessNumMax=hwSecStatTcpProxySessNumMax, hwSecStatMonRtspSessions=hwSecStatMonRtspSessions, hwSecStatMonPassIcmpPkts=hwSecStatMonPassIcmpPkts, hwSecStatMonAllOcts=hwSecStatMonAllOcts, hwSecStatIpTTLDropPkts=hwSecStatIpTTLDropPkts, hwSecStatTcpPktScale=hwSecStatTcpPktScale, hwSecStatBlsDenyPkts=hwSecStatBlsDenyPkts, hwSECSTAT=hwSECSTAT, hwSecStatFragTblNum=hwSecStatFragTblNum, hwSecStatMonJavaAtckNum=hwSecStatMonJavaAtckNum, hwSecStatMonSmtpSessions=hwSecStatMonSmtpSessions, hwSecStatMonRcvRtspOcts=hwSecStatMonRcvRtspOcts, hwSecStatBlsDenyOcts=hwSecStatBlsDenyOcts, hwSecStatMonRcvFragPkts=hwSecStatMonRcvFragPkts, hwSecStatUdpSessNumMin=hwSecStatUdpSessNumMin, hwSecStatMonRcvTcpOcts=hwSecStatMonRcvTcpOcts, hwSecStatUdpFloodDropOcts=hwSecStatUdpFloodDropOcts, hwSecStatMonRcvIcmpOcts=hwSecStatMonRcvIcmpOcts, hwSecStatMonitorGlobalSessFlow=hwSecStatMonitorGlobalSessFlow, hwSecStatIcmpSessNumMax=hwSecStatIcmpSessNumMax, hwSecStatIpCrcDropPkts=hwSecStatIpCrcDropPkts, hwSecStatConformance=hwSecStatConformance, hwSecStatAlgDropOcts=hwSecStatAlgDropOcts, hwSecStatMonitorObjects=hwSecStatMonitorObjects, hwSecStatClearGlobalDropInfo=hwSecStatClearGlobalDropInfo, hwSecStatIPVerErrDropPkts=hwSecStatIPVerErrDropPkts, hwSecStatMonRcvHttpOcts=hwSecStatMonRcvHttpOcts, hwSecStatAclDenyNonIcmpPkts=hwSecStatAclDenyNonIcmpPkts, hwSecStatMonCurSessSpeed=hwSecStatMonCurSessSpeed, hwSecStatMibGroups=hwSecStatMibGroups, hwSecStatTcpProxySessNumMin=hwSecStatTcpProxySessNumMin, hwSecStatMonTcpSess=hwSecStatMonTcpSess, hwSecStatIcmpPktScale=hwSecStatIcmpPktScale, hwSecStatProtoErrDropPkts=hwSecStatProtoErrDropPkts, hwSecStatIcmpFloodDropPkts=hwSecStatIcmpFloodDropPkts, hwSecStatMonRcvFtpOcts=hwSecStatMonRcvFtpOcts, hwSecStatMonPassTcpPkts=hwSecStatMonPassTcpPkts, hwSecStatMonRstPkts=hwSecStatMonRstPkts, hwSecStatAlteration=hwSecStatAlteration)
