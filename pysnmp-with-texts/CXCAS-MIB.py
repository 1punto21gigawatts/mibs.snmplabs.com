#
# PySNMP MIB module CXCAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXCAS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
cxCAS, = mibBuilder.importSymbols("CXProduct-SMI", "cxCAS")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, TimeTicks, NotificationType, Counter64, Unsigned32, MibIdentifier, ModuleIdentity, iso, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "TimeTicks", "NotificationType", "Counter64", "Unsigned32", "MibIdentifier", "ModuleIdentity", "iso", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dsx1ExtAbcdTxSignalingTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10), )
if mibBuilder.loadTexts: dsx1ExtAbcdTxSignalingTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdTxSignalingTable.setDescription('ABCD bits pattern table for T1/E1 transmit signaling protocols')
dsx1ExtAbcdTxSignalingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10, 1), ).setIndexNames((0, "CXCAS-MIB", "dsx1ExtAbcdTxSignalingTypeIndex"))
if mibBuilder.loadTexts: dsx1ExtAbcdTxSignalingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdTxSignalingEntry.setDescription('ABCD transmit signaling bits row definition.')
dsx1ExtAbcdTxSignalingTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtAbcdTxSignalingTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdTxSignalingTypeIndex.setDescription('The index of the emulated interface type: 1=E&M, 2=FXS, 3=FXO')
dsx1ExtAbcdEmOnHook = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtAbcdEmOnHook.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdEmOnHook.setDescription("ABCD bits pattern to signal the 'on-hook' state of an emulated E&M interface type. Range of Values: 0 to 15")
dsx1ExtAbcdEmOffHook = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtAbcdEmOffHook.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdEmOffHook.setDescription("ABCD bits pattern to signal the 'off-hook' state of an emulated E&M interface type. Range of Values: 0 to 15")
dsx1ExtAbcdEmSeizeAck = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtAbcdEmSeizeAck.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdEmSeizeAck.setDescription("ABCD bits pattern to signal the 'seizure acknowledge' state of an emulated R2 signaling line.")
dsx1ExtAbcdEmClearForward = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtAbcdEmClearForward.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdEmClearForward.setDescription("ABCD bits pattern to signal the 'clear forward' state of an emulated R2 signaling line.")
dsx1ExtAbcdEmClearBackward = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtAbcdEmClearBackward.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdEmClearBackward.setDescription("ABCD bits pattern to signal the 'clear backward' state of an emulated R2 signaling line.")
dsx1ExtAbcdFxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtAbcdFxLo.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdFxLo.setDescription("ABCD bits pattern to signal the 'loop open' state of an emulated FXS or FXO interface type. Range of Values: 0 to 15")
dsx1ExtAbcdFxLc = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtAbcdFxLc.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdFxLc.setDescription("ABCD bits pattern to signal the 'loop closed' state of an emulated FXS or FXO interface type. Range of Values: 0 to 15")
dsx1ExtAbcdFxRingingOn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtAbcdFxRingingOn.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdFxRingingOn.setDescription("ABCD bits pattern to signal the 'ringing' state of an emulated FXS or FXO interface type. Range of Values: 0 to 15")
dsx1ExtAbcdFxLcf = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtAbcdFxLcf.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdFxLcf.setDescription("ABCD bits pattern to signal the 'loop current feed' state of an emulated FXS or FXO interface type. Range of Values: 0 to 15 ")
dsx1ExtAbcdFxLcfo = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtAbcdFxLcfo.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdFxLcfo.setDescription("ABCD bits pattern to signal the 'loop current feed open' state of an emulated FXS or FXO interface type. Range of Values: 0 to 15")
dsx1ExtAbcdFxRingingOff = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtAbcdFxRingingOff.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdFxRingingOff.setDescription("ABCD bits pattern to signal the 'ringing off' state of an emulated FXO interface type, only if E1 CAS is used. Range of Values: 0 to 15")
dsx1ExtAbcdAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtAbcdAnswer.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdAnswer.setDescription("ABCD bits pattern to signal the 'answer' state of an emulated interface type (FXS, FXO or E&M), only if E1 CAS is used. Range of Values: 0 to 15")
dsx1ExtAbcdBusyOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtAbcdBusyOut.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdBusyOut.setDescription('ABCD bits pattern to signal a disabled channel. Range of Values: 0 to 15')
dsx1ExtAbcdFaultyLink = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 10, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtAbcdFaultyLink.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdFaultyLink.setDescription('ABCD bits pattern to signal a faulty link (line). Range of Values: 0 to 15')
dsx1ExtAbcdRxSignalingTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 20), )
if mibBuilder.loadTexts: dsx1ExtAbcdRxSignalingTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdRxSignalingTable.setDescription('ABCD bits pattern table for T1/E1 receive signaling protocols')
dsx1ExtAbcdRxSignalingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 20, 1), ).setIndexNames((0, "CXCAS-MIB", "dsx1ExtAbcdRxSignalingTypeIndex"), (0, "CXCAS-MIB", "dsx1ExtAbcdRxSignalingAbcdValue"))
if mibBuilder.loadTexts: dsx1ExtAbcdRxSignalingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdRxSignalingEntry.setDescription('ABCD receive signaling bits row definition.')
dsx1ExtAbcdRxSignalingTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtAbcdRxSignalingTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdRxSignalingTypeIndex.setDescription('The index of the emulated interface type: 1=E&M, 2=FXS, 3=FXO')
dsx1ExtAbcdRxSignalingAbcdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtAbcdRxSignalingAbcdValue.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdRxSignalingAbcdValue.setDescription('The index for all four ABCD bits patterns.')
dsx1ExtAbcdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 59, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("on-hook", 1), ("off-hook", 2), ("ring-on", 3), ("lcf", 4), ("lcfo", 5), ("answer", 6), ("ring-off", 7), ("busy-out", 8), ("faulty-link", 9), ("seize", 10), ("proceed", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtAbcdValue.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtAbcdValue.setDescription('Signaling value assigned to selected ABCD bits pattern. Range of Values: 1 to 11')
mibBuilder.exportSymbols("CXCAS-MIB", dsx1ExtAbcdFxRingingOn=dsx1ExtAbcdFxRingingOn, dsx1ExtAbcdRxSignalingAbcdValue=dsx1ExtAbcdRxSignalingAbcdValue, dsx1ExtAbcdRxSignalingTable=dsx1ExtAbcdRxSignalingTable, dsx1ExtAbcdFxRingingOff=dsx1ExtAbcdFxRingingOff, dsx1ExtAbcdValue=dsx1ExtAbcdValue, dsx1ExtAbcdTxSignalingTable=dsx1ExtAbcdTxSignalingTable, dsx1ExtAbcdFxLcfo=dsx1ExtAbcdFxLcfo, dsx1ExtAbcdFxLcf=dsx1ExtAbcdFxLcf, dsx1ExtAbcdFxLc=dsx1ExtAbcdFxLc, dsx1ExtAbcdAnswer=dsx1ExtAbcdAnswer, dsx1ExtAbcdEmSeizeAck=dsx1ExtAbcdEmSeizeAck, dsx1ExtAbcdFxLo=dsx1ExtAbcdFxLo, dsx1ExtAbcdTxSignalingEntry=dsx1ExtAbcdTxSignalingEntry, dsx1ExtAbcdTxSignalingTypeIndex=dsx1ExtAbcdTxSignalingTypeIndex, dsx1ExtAbcdEmOnHook=dsx1ExtAbcdEmOnHook, dsx1ExtAbcdEmClearBackward=dsx1ExtAbcdEmClearBackward, dsx1ExtAbcdFaultyLink=dsx1ExtAbcdFaultyLink, dsx1ExtAbcdBusyOut=dsx1ExtAbcdBusyOut, dsx1ExtAbcdEmOffHook=dsx1ExtAbcdEmOffHook, dsx1ExtAbcdRxSignalingEntry=dsx1ExtAbcdRxSignalingEntry, dsx1ExtAbcdRxSignalingTypeIndex=dsx1ExtAbcdRxSignalingTypeIndex, dsx1ExtAbcdEmClearForward=dsx1ExtAbcdEmClearForward)
