#
# PySNMP MIB module GENERAL-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GENERAL-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:19:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ObjectIdentity, Unsigned32, IpAddress, iso, Counter64, NotificationType, Integer32, Bits, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "Unsigned32", "IpAddress", "iso", "Counter64", "NotificationType", "Integer32", "Bits", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier")
TruthValue, TextualConvention, DisplayString, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "MacAddress", "RowStatus")
dXS_3600_32S, = mibBuilder.importSymbols("SW3600PRIMGMT-MIB", "dXS-3600-32S")
swGeneralMgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20))
if mibBuilder.loadTexts: swGeneralMgmtMIB.setLastUpdated('201205250000Z')
if mibBuilder.loadTexts: swGeneralMgmtMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swGeneralMgmtMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swGeneralMgmtMIB.setDescription('The structure of general management information for enterprise.')
class Ipv6Address(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 addresses. This is a binary string of 16 octets in network byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class UnitList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 3)

swGenMgmtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 0))
swGenMgmtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1))
swGenMgmtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1))
swGenFileSystemMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 1))
swGenFileSystemMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 1, 1), )
if mibBuilder.loadTexts: swGenFileSystemMgmtTable.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemMgmtTable.setDescription('A list of MIB File System Basic Configuration entries supported by the file update of this agent.')
swGenFileSystemMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 1, 1, 1), ).setIndexNames((0, "GENERAL-MGMT-MIB", "swGenFileSystemMgmtIndex"))
if mibBuilder.loadTexts: swGenFileSystemMgmtEntry.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemMgmtEntry.setDescription('A File System basic configuration entry that contains objects describing a particular MIB supported by this agent.')
swGenFileSystemMgmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: swGenFileSystemMgmtIndex.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemMgmtIndex.setDescription('The table index for the file entry. This object describes the file type. runtime-code (1), cfg-file (2), log-file (3)')
swGenFileSystemMgmtDscr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGenFileSystemMgmtDscr.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemMgmtDscr.setDescription('The description of the software file purpose in this entry.')
swGenFileSystemMgmtServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 1, 1, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenFileSystemMgmtServerAddrType.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemMgmtServerAddrType.setDescription('The address type where the file to be downloaded is located, or the address type where the file will be uploaded to.')
swGenFileSystemMgmtServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 1, 1, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenFileSystemMgmtServerAddr.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemMgmtServerAddr.setDescription('The address where the file is to be downloaded from or uploaded to.')
swGenFileSystemMgmtInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenFileSystemMgmtInterfaceName.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemMgmtInterfaceName.setDescription('This node is used to specify the interface name when swGenFileSystemMgmtServerAddr is the local link address.')
swGenFileSystemMgmtTranserProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tftp", 1), ("ftp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenFileSystemMgmtTranserProtocol.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemMgmtTranserProtocol.setDescription('The file transfer protocol.')
swGenFileSystemMgmtUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 1, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenFileSystemMgmtUserName.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemMgmtUserName.setDescription('The user name to access the server.')
swGenFileSystemMgmtPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 1, 1, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenFileSystemMgmtPassword.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemMgmtPassword.setDescription('The password to access the server.')
swGenFileSystemMgmtServerFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenFileSystemMgmtServerFileName.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemMgmtServerFileName.setDescription('The name of the file to be downloaded from or uploaded to the server.')
swGenFileSystemMgmtDeviceFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenFileSystemMgmtDeviceFileName.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemMgmtDeviceFileName.setDescription('The name of the file to be downloaded to the device, or uploaded from the device. When downloading or uploading, the swGenFileSystemMgmtServerFileName object must also be set.')
swGenFileSystemMgmtLoadType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("upload", 2), ("download", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenFileSystemMgmtLoadType.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemMgmtLoadType.setDescription('This object allows the user to select a download or upload function for the file. Note: For systems that do not support changes to this object, setting a value for this object will cause the system to return a bad-value error message.')
swGenFileSystemMgmtCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 1, 1, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("start", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenFileSystemMgmtCtrl.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemMgmtCtrl.setDescription('This object allows the user to download runtime software. The settings will take effect when the system restarts. See Note (1) below Note 1: For systems which do not support value changes to this object, setting these values will cause the system to return a bad-value error message. start (3) - activate firmware.')
swGenFileSystemBootupFileMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 5), )
if mibBuilder.loadTexts: swGenFileSystemBootupFileMgmtTable.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemBootupFileMgmtTable.setDescription('This table indicates the information about the bootup files.')
swGenFileSystemBootupFileMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 5, 1), ).setIndexNames((0, "GENERAL-MGMT-MIB", "swGenMgmtUnitID"))
if mibBuilder.loadTexts: swGenFileSystemBootupFileMgmtEntry.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemBootupFileMgmtEntry.setDescription('A list of information about the bootup files for each unit of the switch stack.')
swGenMgmtUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: swGenMgmtUnitID.setStatus('current')
if mibBuilder.loadTexts: swGenMgmtUnitID.setDescription('The object indicates the unit ID.')
swGenFileSystemBootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenFileSystemBootImage.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemBootImage.setDescription('When displayed, it shows the current bootup image file name. When set, the bootup image file with the set name will be set as the bootup image.')
swGenFileSystemBootConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenFileSystemBootConfig.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemBootConfig.setDescription('When displayed, it shows the current bootup configuration file name. When set, the configuration file with the set name will be set as the bootup configuration.')
swGenFileSystemActiveConfigIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 5, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenFileSystemActiveConfigIncrement.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemActiveConfigIncrement.setDescription('If increment is specified, then the existing configuration will not be cleared before applying of the new configuration. If it is not specified, then the existing configuration will be cleared before applying of the new configuration. True : keep valid False : erase.')
swGenFileSystemActiveConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenFileSystemActiveConfig.setStatus('current')
if mibBuilder.loadTexts: swGenFileSystemActiveConfig.setDescription('When displayed, it shows NULL. When set, the configuration file with the set name will be active at once, but the set name will not be set as the bootup configuration.')
swGenExpansionModuleMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 8), )
if mibBuilder.loadTexts: swGenExpansionModuleMgmtTable.setStatus('current')
if mibBuilder.loadTexts: swGenExpansionModuleMgmtTable.setDescription('This table indicates the information about the Boot-up Expansion Module and current Expansion Module.')
swGenExpansionModuleMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 8, 1), ).setIndexNames((0, "GENERAL-MGMT-MIB", "swGenMgmtUnitID"), (0, "GENERAL-MGMT-MIB", "swGenExpansionModuleMgmtSlotID"))
if mibBuilder.loadTexts: swGenExpansionModuleMgmtEntry.setStatus('current')
if mibBuilder.loadTexts: swGenExpansionModuleMgmtEntry.setDescription('A list of information about the bootup files for each unit of the switch stack.')
swGenExpansionModuleMgmtSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 8, 1, 2), Integer32())
if mibBuilder.loadTexts: swGenExpansionModuleMgmtSlotID.setStatus('current')
if mibBuilder.loadTexts: swGenExpansionModuleMgmtSlotID.setDescription('The object indicates the expansion module slot ID.')
swGenExpansionModuleMgmtBootup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGenExpansionModuleMgmtBootup.setStatus('current')
if mibBuilder.loadTexts: swGenExpansionModuleMgmtBootup.setDescription("It displays the expansion module name which the device boot up with. if no expansion module exist when boot up, it displays 'none'.")
swGenExpansionModuleMgmtCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGenExpansionModuleMgmtCurrent.setStatus('current')
if mibBuilder.loadTexts: swGenExpansionModuleMgmtCurrent.setDescription("It displays the current exsit expansion module name. if no expansion module exist, it displays 'none'.")
swGenExpansionModuleBootupPortModeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGenExpansionModuleBootupPortModeInfo.setStatus('current')
if mibBuilder.loadTexts: swGenExpansionModuleBootupPortModeInfo.setDescription('This object is a set of port mode for boot up DXS-3600-EM-4QXS module indications. Every bytes are presented to a port of the DXS-3600-EM-4QXS, if the module is not DXS-3600-EM-4QXS, cannot get any value. Port mode: 01 = 4*10G. 02 = 40G.')
swGenExpansionModuleCurrentPortModeMGT = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenExpansionModuleCurrentPortModeMGT.setStatus('current')
if mibBuilder.loadTexts: swGenExpansionModuleCurrentPortModeMGT.setDescription('This object is a set of port mode for current insert DXS-3600-EM-4QXS module indications. Every bytes are presented to a port of the DXS-3600-EM-4QXS, it will not write to Equipped module until excute save configuration. Port mode: 01 = 4*10G. 02 = 40G.')
swGenExpansionModuleEquippedModulePortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swGenExpansionModuleEquippedModulePortMode.setStatus('current')
if mibBuilder.loadTexts: swGenExpansionModuleEquippedModulePortMode.setDescription('This object is a set of port mode for current insert DXS-3600-EM-4QXS module indications. Every bytes are presented to a port of the DXS-3600-EM-4QXS, if the module boot up with and current insert is not DXS-3600-EM-4QXS, cannot set the port mode management value to Equipped module. Port mode: 01 = 4*10G. 02 = 40G.')
swGenMgmtReboot = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenMgmtReboot.setStatus('current')
if mibBuilder.loadTexts: swGenMgmtReboot.setDescription('Used to restart the switch.')
swGenMgmtSaveConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenMgmtSaveConfigFileName.setStatus('current')
if mibBuilder.loadTexts: swGenMgmtSaveConfigFileName.setDescription('The name of the configuration file that will be saved to the device. When swGenMgmtSave is set to configuration(2): If the swGenMgmtSaveConfigFileName is no NULL, the configuration file will be saved to the set file name. If NULL, the configuration file will be saved to the start-up configuration file.')
swGenMgmtSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 127, 1, 20, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("configuration", 2), ("log", 3), ("all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swGenMgmtSave.setStatus('current')
if mibBuilder.loadTexts: swGenMgmtSave.setDescription('This indicates the method of saving information to the NV-RAM of the device. other(1) - No action. configuration(2) - Save configuration. log(3) - Save log. all(4) - Save both ( active configuration and log).')
mibBuilder.exportSymbols("GENERAL-MGMT-MIB", swGenFileSystemBootupFileMgmtEntry=swGenFileSystemBootupFileMgmtEntry, swGenExpansionModuleMgmtSlotID=swGenExpansionModuleMgmtSlotID, swGenFileSystemMgmtServerFileName=swGenFileSystemMgmtServerFileName, swGenFileSystemBootImage=swGenFileSystemBootImage, PYSNMP_MODULE_ID=swGeneralMgmtMIB, swGenFileSystemMgmtTranserProtocol=swGenFileSystemMgmtTranserProtocol, swGenExpansionModuleMgmtCurrent=swGenExpansionModuleMgmtCurrent, swGenMgmtGroup=swGenMgmtGroup, swGenFileSystemMgmtUserName=swGenFileSystemMgmtUserName, swGenExpansionModuleMgmtEntry=swGenExpansionModuleMgmtEntry, swGenFileSystemMgmtEntry=swGenFileSystemMgmtEntry, Ipv6Address=Ipv6Address, swGenFileSystemBootConfig=swGenFileSystemBootConfig, swGenFileSystemMgmtDeviceFileName=swGenFileSystemMgmtDeviceFileName, swGenExpansionModuleMgmtBootup=swGenExpansionModuleMgmtBootup, swGenFileSystemMgmtInterfaceName=swGenFileSystemMgmtInterfaceName, swGenMgmtNotifications=swGenMgmtNotifications, swGenMgmtSave=swGenMgmtSave, swGenFileSystemActiveConfig=swGenFileSystemActiveConfig, swGenFileSystemMgmtCtrl=swGenFileSystemMgmtCtrl, swGenExpansionModuleEquippedModulePortMode=swGenExpansionModuleEquippedModulePortMode, swGenExpansionModuleCurrentPortModeMGT=swGenExpansionModuleCurrentPortModeMGT, swGenMgmtReboot=swGenMgmtReboot, swGenFileSystemMgmt=swGenFileSystemMgmt, swGenFileSystemMgmtDscr=swGenFileSystemMgmtDscr, swGeneralMgmtMIB=swGeneralMgmtMIB, swGenMgmtUnitID=swGenMgmtUnitID, swGenFileSystemMgmtIndex=swGenFileSystemMgmtIndex, swGenFileSystemMgmtTable=swGenFileSystemMgmtTable, UnitList=UnitList, swGenFileSystemMgmtLoadType=swGenFileSystemMgmtLoadType, swGenMgmtSaveConfigFileName=swGenMgmtSaveConfigFileName, swGenFileSystemBootupFileMgmtTable=swGenFileSystemBootupFileMgmtTable, swGenFileSystemMgmtServerAddr=swGenFileSystemMgmtServerAddr, swGenExpansionModuleBootupPortModeInfo=swGenExpansionModuleBootupPortModeInfo, swGenFileSystemActiveConfigIncrement=swGenFileSystemActiveConfigIncrement, swGenFileSystemMgmtServerAddrType=swGenFileSystemMgmtServerAddrType, swGenExpansionModuleMgmtTable=swGenExpansionModuleMgmtTable, swGenMgmtMIBObjects=swGenMgmtMIBObjects, swGenFileSystemMgmtPassword=swGenFileSystemMgmtPassword)
