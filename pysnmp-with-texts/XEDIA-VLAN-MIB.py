#
# PySNMP MIB module XEDIA-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XEDIA-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:43:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, ModuleIdentity, Counter32, MibIdentifier, TimeTicks, NotificationType, Bits, Gauge32, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "ModuleIdentity", "Counter32", "MibIdentifier", "TimeTicks", "NotificationType", "Bits", "Gauge32", "iso", "IpAddress")
DisplayString, TruthValue, TimeInterval, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TimeInterval", "TextualConvention")
xediaMibs, = mibBuilder.importSymbols("XEDIA-REG", "xediaMibs")
xediaVlanMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 838, 3, 34))
if mibBuilder.loadTexts: xediaVlanMIB.setLastUpdated('9905212155Z')
if mibBuilder.loadTexts: xediaVlanMIB.setOrganization('Xedia Corp.')
if mibBuilder.loadTexts: xediaVlanMIB.setContactInfo('support@xedia.com')
if mibBuilder.loadTexts: xediaVlanMIB.setDescription("This module defines objects for management of Xedia's support for VLANs and 802.1p and 802.1q Ethernet tagged frames.")
xVlanObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 34, 1))
xVlanConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 34, 2))
class Unsigned32(Gauge32):
    pass

xVlanIDTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 34, 1, 1), )
if mibBuilder.loadTexts: xVlanIDTable.setStatus('current')
if mibBuilder.loadTexts: xVlanIDTable.setDescription('A table of VLAN IDs configured on Ethernet subinterfaces.')
xVlanIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 34, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xVlanIDEntry.setStatus('current')
if mibBuilder.loadTexts: xVlanIDEntry.setDescription('An association between an Ethernet subinterface and a VLAN ID.')
xVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 34, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xVlanID.setStatus('current')
if mibBuilder.loadTexts: xVlanID.setDescription('The 12-bit VLAN ID used in the VLAN Tag header.')
xVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 34, 1, 2), )
if mibBuilder.loadTexts: xVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: xVlanConfigTable.setDescription('A table of configuration information applicable to VLANs indexed by Ethernet physical (integral) interface.')
xVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 34, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: xVlanConfigEntry.setDescription('VLAN configuration information for a particular Ethernet physical (integral) interface.')
xVlanConfigAdmitTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 34, 1, 2, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xVlanConfigAdmitTaggedFrames.setStatus('current')
if mibBuilder.loadTexts: xVlanConfigAdmitTaggedFrames.setDescription('Whether 802.1q/802.1p tagged frames will be received by the box. If this value is false, the frames will be dropped.')
xVlanConfigAdmitConfiguredVlansOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 34, 1, 2, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xVlanConfigAdmitConfiguredVlansOnly.setStatus('current')
if mibBuilder.loadTexts: xVlanConfigAdmitConfiguredVlansOnly.setDescription('Whether only those 802.1q tagged frames that contain a VLAN ID that has been configured on the box will be received. If this value is true, frames from VLANs with other VLAN IDs will be dropped. This variable does not apply to bridged traffic.')
xVlanConfigStripBridgedTags = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 34, 1, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xVlanConfigStripBridgedTags.setStatus('current')
if mibBuilder.loadTexts: xVlanConfigStripBridgedTags.setDescription('Whether 802.1q/802.1p tagged frames that are being bridged will have the tag stripped out of the packet before it is forwarded. This variable does not apply to routed traffic.')
xVlanConfigGVRP = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 34, 1, 2, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xVlanConfigGVRP.setStatus('current')
if mibBuilder.loadTexts: xVlanConfigGVRP.setDescription('Whether the GVRP protocol for dynamically informing the network of the VLAN IDs configured in the box is enabled.')
xVlanConfigGARPJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 34, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 21474800)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xVlanConfigGARPJoinTime.setStatus('current')
if mibBuilder.loadTexts: xVlanConfigGARPJoinTime.setDescription('The GARP Join time, in centiseconds. This variable is a component of the GVRP protocol.')
xVlanCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 34, 2, 1))
xVlanGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 34, 2, 2))
xVlanCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 838, 3, 34, 2, 1, 1)).setObjects(("XEDIA-VLAN-MIB", "xVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xVlanCompliance = xVlanCompliance.setStatus('current')
if mibBuilder.loadTexts: xVlanCompliance.setDescription('The compliance statement for all agents that support this MIB. A compliant agent implements all objects defined in this MIB.')
xVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 34, 2, 2, 1)).setObjects(("XEDIA-VLAN-MIB", "xVlanID"), ("XEDIA-VLAN-MIB", "xVlanConfigAdmitTaggedFrames"), ("XEDIA-VLAN-MIB", "xVlanConfigAdmitConfiguredVlansOnly"), ("XEDIA-VLAN-MIB", "xVlanConfigStripBridgedTags"), ("XEDIA-VLAN-MIB", "xVlanConfigGVRP"), ("XEDIA-VLAN-MIB", "xVlanConfigGARPJoinTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xVlanGroup = xVlanGroup.setStatus('current')
if mibBuilder.loadTexts: xVlanGroup.setDescription('The set of all accessible objects in this MIB.')
mibBuilder.exportSymbols("XEDIA-VLAN-MIB", xVlanObjects=xVlanObjects, xVlanID=xVlanID, xVlanConformance=xVlanConformance, xVlanConfigAdmitConfiguredVlansOnly=xVlanConfigAdmitConfiguredVlansOnly, xediaVlanMIB=xediaVlanMIB, xVlanConfigStripBridgedTags=xVlanConfigStripBridgedTags, xVlanConfigGARPJoinTime=xVlanConfigGARPJoinTime, xVlanIDTable=xVlanIDTable, xVlanIDEntry=xVlanIDEntry, xVlanGroup=xVlanGroup, xVlanConfigEntry=xVlanConfigEntry, xVlanCompliance=xVlanCompliance, xVlanConfigGVRP=xVlanConfigGVRP, xVlanConfigAdmitTaggedFrames=xVlanConfigAdmitTaggedFrames, xVlanGroups=xVlanGroups, xVlanCompliances=xVlanCompliances, PYSNMP_MODULE_ID=xediaVlanMIB, xVlanConfigTable=xVlanConfigTable, Unsigned32=Unsigned32)
