#
# PySNMP MIB module PRAROUTERMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PRAROUTERMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:41:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, MibIdentifier, Gauge32, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, ModuleIdentity, Unsigned32, NotificationType, Bits, Counter32, Counter64, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "Gauge32", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "ModuleIdentity", "Unsigned32", "NotificationType", "Bits", "Counter32", "Counter64", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
itk = MibIdentifier((1, 3, 6, 1, 4, 1, 1195))
pramib = MibIdentifier((1, 3, 6, 1, 4, 1, 1195, 3))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 1195, 3, 1))
prasoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 1195, 3, 1, 3))
status = MibIdentifier((1, 3, 6, 1, 4, 1, 1195, 3, 2))
channels = MibIdentifier((1, 3, 6, 1, 4, 1, 1195, 3, 2, 1))
watchdog = MibIdentifier((1, 3, 6, 1, 4, 1, 1195, 3, 2, 2))
fault = MibIdentifier((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3))
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 1195, 3, 3))
cpu = MibIdentifier((1, 3, 6, 1, 4, 1, 1195, 3, 3, 1))
sessions = MibIdentifier((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2))
praVersion = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 1, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: praVersion.setStatus('mandatory')
if mibBuilder.loadTexts: praVersion.setDescription('Version of Suprimo-Software')
asIpTable = MibTable((1, 3, 6, 1, 4, 1, 1195, 3, 1, 3, 2), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: asIpTable.setStatus('mandatory')
if mibBuilder.loadTexts: asIpTable.setDescription('A table of ApplicationServer Ip-Addresses')
asIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1195, 3, 1, 3, 2, 1), ).setMaxAccess("readonly").setIndexNames((0, "PRAROUTERMIB", "asNumber"))
if mibBuilder.loadTexts: asIpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: asIpEntry.setDescription('An entry in applicationservertable')
asNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asNumber.setStatus('mandatory')
if mibBuilder.loadTexts: asNumber.setDescription('index')
asIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 1, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: asIpAddr.setDescription('IP-Address of Authentication-Servers')
linecntPspdn = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linecntPspdn.setStatus('mandatory')
if mibBuilder.loadTexts: linecntPspdn.setDescription('Max number of logical connections to PH (type X.25).')
linecntPspdnPerBchannel = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linecntPspdnPerBchannel.setStatus('mandatory')
if mibBuilder.loadTexts: linecntPspdnPerBchannel.setDescription('Max number of logical connections per B-Channel to PH')
linecntPspdnPh = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linecntPspdnPh.setStatus('mandatory')
if mibBuilder.loadTexts: linecntPspdnPh.setDescription('Max number of physical connections to PH')
linecntMax = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linecntMax.setStatus('mandatory')
if mibBuilder.loadTexts: linecntMax.setDescription('Number of physical b-channels')
asIpAddrTableMaxIndex = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asIpAddrTableMaxIndex.setStatus('mandatory')
if mibBuilder.loadTexts: asIpAddrTableMaxIndex.setDescription('Max number of AS-IP-Addresses')
numberOfEngagedBchan = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfEngagedBchan.setStatus('mandatory')
if mibBuilder.loadTexts: numberOfEngagedBchan.setDescription('Number of engaged B-Channel.')
numberOfFreeBchan = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfFreeBchan.setStatus('mandatory')
if mibBuilder.loadTexts: numberOfFreeBchan.setDescription('Number of free B-Channel.')
numberOfTransToAs = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfTransToAs.setStatus('mandatory')
if mibBuilder.loadTexts: numberOfTransToAs.setDescription('Number of transmissionconnections to AS.')
numberOfRecvToAs = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfRecvToAs.setStatus('mandatory')
if mibBuilder.loadTexts: numberOfRecvToAs.setDescription('Number of receiveconnections to AS.')
temperature = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperature.setStatus('mandatory')
if mibBuilder.loadTexts: temperature.setDescription('Temperature inside the Suprimo-Housing (in ten-th-degrees)')
isdnMuxOk = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnMuxOk.setStatus('mandatory')
if mibBuilder.loadTexts: isdnMuxOk.setDescription('status of ISDN-Adapter')
modemAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 2), )
if mibBuilder.loadTexts: modemAdapterTable.setStatus('mandatory')
if mibBuilder.loadTexts: modemAdapterTable.setDescription('A table of Modems. ')
modemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 2, 1), ).setIndexNames((0, "PRAROUTERMIB", "modemCardNumber"))
if mibBuilder.loadTexts: modemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: modemEntry.setDescription('An entry in the modemAdapterTable.')
modemCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCardNumber.setStatus('mandatory')
if mibBuilder.loadTexts: modemCardNumber.setDescription('Index.')
modemAdapterOk = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemAdapterOk.setStatus('mandatory')
if mibBuilder.loadTexts: modemAdapterOk.setDescription('status of Modem-Adapter')
modem1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modem1.setStatus('mandatory')
if mibBuilder.loadTexts: modem1.setDescription('status of Modem1')
modem2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modem2.setStatus('mandatory')
if mibBuilder.loadTexts: modem2.setDescription('status of Modem2')
modem3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modem3.setStatus('mandatory')
if mibBuilder.loadTexts: modem3.setDescription('status of Modem3')
modem4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modem4.setStatus('mandatory')
if mibBuilder.loadTexts: modem4.setDescription('status of Modem4')
modem5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modem5.setStatus('mandatory')
if mibBuilder.loadTexts: modem5.setDescription('status of Modem5')
modem6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modem6.setStatus('mandatory')
if mibBuilder.loadTexts: modem6.setDescription('status of Modem6')
modem7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modem7.setStatus('mandatory')
if mibBuilder.loadTexts: modem7.setDescription('status of Modem7')
modem8 = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modem8.setStatus('mandatory')
if mibBuilder.loadTexts: modem8.setDescription('status of Modem8')
practrlOk = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: practrlOk.setStatus('mandatory')
if mibBuilder.loadTexts: practrlOk.setDescription('status of process practrl')
isdnInOk = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnInOk.setStatus('mandatory')
if mibBuilder.loadTexts: isdnInOk.setDescription('status of process isdn_in')
isdnOutOk = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnOutOk.setStatus('mandatory')
if mibBuilder.loadTexts: isdnOutOk.setDescription('status of process isdn_out')
pstnInOk = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pstnInOk.setStatus('mandatory')
if mibBuilder.loadTexts: pstnInOk.setDescription('status of process pstn_in')
pspdnOk = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pspdnOk.setStatus('mandatory')
if mibBuilder.loadTexts: pspdnOk.setDescription('status of process pspdn')
modemCardMax = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 2, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCardMax.setStatus('mandatory')
if mibBuilder.loadTexts: modemCardMax.setDescription('Max number of Modem-Adapter')
cpuCapacity = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: cpuCapacity.setDescription('Free capacity of Cpu (per cent).')
sessionTable = MibTable((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 1), )
if mibBuilder.loadTexts: sessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: sessionTable.setDescription('A table of Sessions.')
sessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 1, 1), ).setIndexNames((0, "PRAROUTERMIB", "sessionNumber"))
if mibBuilder.loadTexts: sessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sessionEntry.setDescription('An entry in the Session table.')
sessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sessionNumber.setDescription('The Sessionnumber to identify this Session. (1 - maxSessionNumber)')
sessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionType.setStatus('mandatory')
if mibBuilder.loadTexts: sessionType.setDescription('The Sessiontype of this Session.')
b2Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: b2Protocol.setStatus('mandatory')
if mibBuilder.loadTexts: b2Protocol.setDescription('B2-Channel Protocol.')
cntRcvByteCapi = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRcvByteCapi.setStatus('mandatory')
if mibBuilder.loadTexts: cntRcvByteCapi.setDescription('Number of Bytes received from T-Interface.')
cntSndByteCapi = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSndByteCapi.setStatus('mandatory')
if mibBuilder.loadTexts: cntSndByteCapi.setDescription('Number of Bytes sent to T-Interface.')
cntRcvMsgCapi = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRcvMsgCapi.setStatus('mandatory')
if mibBuilder.loadTexts: cntRcvMsgCapi.setDescription('Number of Messages received from T-Interface.')
cntSndMsgCapi = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSndMsgCapi.setStatus('mandatory')
if mibBuilder.loadTexts: cntSndMsgCapi.setDescription('Number of Messages sent to T-Interface.')
cntRcvBytePsp = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRcvBytePsp.setStatus('mandatory')
if mibBuilder.loadTexts: cntRcvBytePsp.setDescription('Number of Bytes received from R-Interface.')
cntSndBytePsp = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSndBytePsp.setStatus('mandatory')
if mibBuilder.loadTexts: cntSndBytePsp.setDescription('Number of Bytes sent to R-Interface.')
cntRcvMsgPsp = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRcvMsgPsp.setStatus('mandatory')
if mibBuilder.loadTexts: cntRcvMsgPsp.setDescription('Number of Messages received from R-Interface.')
cntSndMsgPsp = MibTableColumn((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSndMsgPsp.setStatus('mandatory')
if mibBuilder.loadTexts: cntSndMsgPsp.setDescription('Number of Messages sent to R-Interface.')
cntRcvTotalByteCapi = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRcvTotalByteCapi.setStatus('mandatory')
if mibBuilder.loadTexts: cntRcvTotalByteCapi.setDescription('Number of Total Bytes[KBytes] received from T-Interface.')
cntSndTotalByteCapi = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSndTotalByteCapi.setStatus('mandatory')
if mibBuilder.loadTexts: cntSndTotalByteCapi.setDescription('Number of Total Bytes[KBytes] sent to T-Interface.')
cntRcvTotalMsgCapi = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRcvTotalMsgCapi.setStatus('mandatory')
if mibBuilder.loadTexts: cntRcvTotalMsgCapi.setDescription('Number of Total Messages received from T-Interface.')
cntSndTotalMsgCapi = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSndTotalMsgCapi.setStatus('mandatory')
if mibBuilder.loadTexts: cntSndTotalMsgCapi.setDescription('Number of Total Messages sent to T-Interface.')
cntRcvTotalBytePsp = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRcvTotalBytePsp.setStatus('mandatory')
if mibBuilder.loadTexts: cntRcvTotalBytePsp.setDescription('Number of Total Bytes[KBytes] received from R-Interface.')
cntSndTotalBytePsp = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSndTotalBytePsp.setStatus('mandatory')
if mibBuilder.loadTexts: cntSndTotalBytePsp.setDescription('Number of Total Bytes[KBytes] sent to R-Interface.')
cntRcvTotalMsgPsp = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntRcvTotalMsgPsp.setStatus('mandatory')
if mibBuilder.loadTexts: cntRcvTotalMsgPsp.setDescription('Number of Total Messages received from R-Interface.')
cntSndTotalMsgPsp = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntSndTotalMsgPsp.setStatus('mandatory')
if mibBuilder.loadTexts: cntSndTotalMsgPsp.setDescription('Number of Total Messages sent to R-Interface.')
sessionTableMaxIndex = MibScalar((1, 3, 6, 1, 4, 1, 1195, 3, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionTableMaxIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sessionTableMaxIndex.setDescription('Max Number of Sessionnumber')
mibBuilder.exportSymbols("PRAROUTERMIB", temperature=temperature, modemAdapterOk=modemAdapterOk, isdnOutOk=isdnOutOk, sessionTable=sessionTable, cntSndTotalMsgCapi=cntSndTotalMsgCapi, config=config, b2Protocol=b2Protocol, cntRcvByteCapi=cntRcvByteCapi, cntSndTotalByteCapi=cntSndTotalByteCapi, modemAdapterTable=modemAdapterTable, modemCardMax=modemCardMax, cntSndByteCapi=cntSndByteCapi, asIpAddrTableMaxIndex=asIpAddrTableMaxIndex, numberOfTransToAs=numberOfTransToAs, modem8=modem8, modem7=modem7, pramib=pramib, modem5=modem5, cntSndTotalBytePsp=cntSndTotalBytePsp, linecntPspdnPerBchannel=linecntPspdnPerBchannel, cntRcvTotalBytePsp=cntRcvTotalBytePsp, prasoftware=prasoftware, cntSndBytePsp=cntSndBytePsp, linecntPspdn=linecntPspdn, modem3=modem3, modem4=modem4, pstnInOk=pstnInOk, sessionEntry=sessionEntry, asIpEntry=asIpEntry, modemEntry=modemEntry, cntSndMsgCapi=cntSndMsgCapi, sessionTableMaxIndex=sessionTableMaxIndex, practrlOk=practrlOk, cntRcvTotalByteCapi=cntRcvTotalByteCapi, cntRcvMsgCapi=cntRcvMsgCapi, cntSndTotalMsgPsp=cntSndTotalMsgPsp, sessionType=sessionType, performance=performance, asNumber=asNumber, modemCardNumber=modemCardNumber, numberOfEngagedBchan=numberOfEngagedBchan, isdnMuxOk=isdnMuxOk, cntRcvMsgPsp=cntRcvMsgPsp, cntRcvTotalMsgCapi=cntRcvTotalMsgCapi, modem6=modem6, linecntPspdnPh=linecntPspdnPh, asIpAddr=asIpAddr, sessions=sessions, modem1=modem1, cntRcvTotalMsgPsp=cntRcvTotalMsgPsp, sessionNumber=sessionNumber, cntRcvBytePsp=cntRcvBytePsp, asIpTable=asIpTable, praVersion=praVersion, fault=fault, cntSndMsgPsp=cntSndMsgPsp, linecntMax=linecntMax, modem2=modem2, isdnInOk=isdnInOk, cpuCapacity=cpuCapacity, itk=itk, channels=channels, numberOfFreeBchan=numberOfFreeBchan, numberOfRecvToAs=numberOfRecvToAs, pspdnOk=pspdnOk, status=status, cpu=cpu, watchdog=watchdog)
