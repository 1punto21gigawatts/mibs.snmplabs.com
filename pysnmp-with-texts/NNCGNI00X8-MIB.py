#
# PySNMP MIB module NNCGNI00X8-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NNCGNI00X8-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:23:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
nncExtRptr, = mibBuilder.importSymbols("NNCGNI00X1-SMI", "nncExtRptr")
PositionIndex, = mibBuilder.importSymbols("NNCGNI00X4-MIB", "PositionIndex")
PortIndex, = mibBuilder.importSymbols("NNCGNI00X7-MIB", "PortIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Gauge32, TimeTicks, Integer32, IpAddress, Counter64, ObjectIdentity, Unsigned32, MibIdentifier, Bits, ModuleIdentity, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "TimeTicks", "Integer32", "IpAddress", "Counter64", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Bits", "ModuleIdentity", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class RptrPortStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("inService", 1), ("forcedIsolate", 2), ("busyOut", 3), ("autoIsolate", 4), ("linkDown", 5))

class RptrIsolationStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("noPartitioning", 1), ("partitionedPort", 2))

nncExtRptrModuleTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 11, 1), )
if mibBuilder.loadTexts: nncExtRptrModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrModuleTable.setDescription('Configuration information for the Rptr modules in the system')
nncExtRptrModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 11, 1, 1), ).setIndexNames((0, "NNCGNI00X8-MIB", "nncExtRptrModulePositionIndex"))
if mibBuilder.loadTexts: nncExtRptrModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrModuleEntry.setDescription('Configuration information for a Rptr module')
nncExtRptrModulePositionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 11, 1, 1, 1), PositionIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtRptrModulePositionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrModulePositionIndex.setDescription('The position index of the module of interest')
nncExtRptrModuleAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("repeater", 1), ("cascade", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nncExtRptrModuleAdminMode.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrModuleAdminMode.setDescription('Whether the module should try to operate as a repeater or cascade module. The actual mode, which depends on the installed modules, is reported in nncExtRptrModuleOperMode')
nncExtRptrModuleOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("repeater", 1), ("cascade", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtRptrModuleOperMode.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrModuleOperMode.setDescription('What mode the module is operating in.')
nncExtRptrModuleStatisticsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nncExtRptrModuleStatisticsMask.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrModuleStatisticsMask.setDescription('The statistics to be collected, represented as a sum. The bit positions are defined as: Bit Name Meaning --- --------------------- ------------ 0 Jabber Protection 1 Elastic Buffer Error 2 Phase Lock Error 3 Non SFD Packet 4 Pygmy Packet Reception A runt packet 5 Packet Reception 6 Partition 7 Bad Link 8 ROR 9 FWF 10 Not Used 11 Transmit Collision 12 Receive Collision 13 Out of Window Collosion 14 Not Used 15 Not Used ')
nncExtRptrPortTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 11, 2), )
if mibBuilder.loadTexts: nncExtRptrPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrPortTable.setDescription('Configuration information for the repeater ports in the system')
nncExtRptrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 11, 2, 1), ).setIndexNames((0, "NNCGNI00X8-MIB", "nncExtRptrPortPositionIndex"), (0, "NNCGNI00X8-MIB", "nncExtRptrPortIndex"))
if mibBuilder.loadTexts: nncExtRptrPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrPortEntry.setDescription('Configuration information for a repeater ports')
nncExtRptrPortPositionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 11, 2, 1, 1), PositionIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtRptrPortPositionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrPortPositionIndex.setDescription('The position index of the Port of interest')
nncExtRptrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 11, 2, 1, 2), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtRptrPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrPortIndex.setDescription('The port number on the position of the port of interest.')
nncExtRptrPortAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nncExtRptrPortAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrPortAlarmEnable.setDescription('Whether or not an alarm should be generated on a loss of link event.')
nncExtRptrPortLinkIntegrityLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 11, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtRptrPortLinkIntegrityLosses.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrPortLinkIntegrityLosses.setDescription('The number of times link integrity has been lost.')
nncExtRptrPortAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 11, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtRptrPortAutoPartitions.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrPortAutoPartitions.setDescription('The number of times the port has been auto-partitioned.')
nncExtRptrPortAdminDisables = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 11, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtRptrPortAdminDisables.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrPortAdminDisables.setDescription('The number of times the port has been disabled at the request of a management entity.')
nncExtRptrPortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 11, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtRptrPortEvents.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrPortEvents.setDescription('The number of times an event matching any of the events described by ...ModuleStatisticsMask has occurred on this port')
nncExtRptrPortLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 11, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtRptrPortLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrPortLastChange.setDescription('The last time rptrPortOperStatus changed for this port.')
nncExtRptrPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 11, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inService", 1), ("forcedIsolate", 2), ("busyOut", 3), ("autoIsolate", 4), ("linkDown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncExtRptrPortOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nncExtRptrPortOperStatus.setDescription('The current state of this repeater port')
nncExtRptrPortIsolation = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 11, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPartitioning", 1), ("partitionedPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nncExtRptrPortIsolation.setStatus('mandatory')
mibBuilder.exportSymbols("NNCGNI00X8-MIB", nncExtRptrPortIsolation=nncExtRptrPortIsolation, nncExtRptrModuleEntry=nncExtRptrModuleEntry, nncExtRptrModulePositionIndex=nncExtRptrModulePositionIndex, nncExtRptrModuleOperMode=nncExtRptrModuleOperMode, nncExtRptrPortLastChange=nncExtRptrPortLastChange, nncExtRptrPortIndex=nncExtRptrPortIndex, nncExtRptrPortAdminDisables=nncExtRptrPortAdminDisables, RptrPortStatus=RptrPortStatus, nncExtRptrModuleAdminMode=nncExtRptrModuleAdminMode, nncExtRptrPortAlarmEnable=nncExtRptrPortAlarmEnable, nncExtRptrPortEntry=nncExtRptrPortEntry, nncExtRptrPortLinkIntegrityLosses=nncExtRptrPortLinkIntegrityLosses, nncExtRptrPortTable=nncExtRptrPortTable, nncExtRptrModuleStatisticsMask=nncExtRptrModuleStatisticsMask, nncExtRptrPortEvents=nncExtRptrPortEvents, nncExtRptrModuleTable=nncExtRptrModuleTable, nncExtRptrPortOperStatus=nncExtRptrPortOperStatus, nncExtRptrPortAutoPartitions=nncExtRptrPortAutoPartitions, RptrIsolationStatus=RptrIsolationStatus, nncExtRptrPortPositionIndex=nncExtRptrPortPositionIndex)
