#
# PySNMP MIB module HP-ICF-RPVST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-RPVST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:35:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
StpPortRole, = mibBuilder.importSymbols("HP-ICF-TC", "StpPortRole")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Integer32, IpAddress, MibIdentifier, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, iso, Gauge32, ModuleIdentity, NotificationType, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "MibIdentifier", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "iso", "Gauge32", "ModuleIdentity", "NotificationType", "Bits", "Counter64")
DateAndTime, TruthValue, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "DisplayString", "MacAddress", "TextualConvention")
hpicfRpvstMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88))
hpicfRpvstMIB.setRevisions(('2017-08-08 00:00', '2013-03-21 00:28', '2011-08-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfRpvstMIB.setRevisionsDescriptions(('Added object hpicfRpvstPortIeeeRstBpdu. Deprecated compliance hpicfRpvstCompliance1. Added compliance hpicfRpvstCompliance3. Deprecated group hpicfRpvstPortGroup. Added hpicfRpvstPortGroup1.', 'Added objects hpicfRpvstLogPortStateTransitions, hpicfRpvstNewPortRole, hpicfRpvstOldPortRole, hpicfRpvstPathCostMode, hpicfRpvstPortRoleChangeCurrentPortRole, hpicfRpvstPortRoleChangeEntry, hpicfRpvstPortRoleChangeIndex, hpicfRpvstPortRoleChangePreviousPortRole, hpicfRpvstPortRoleChangeTable, hpicfRpvstPortRoleChangeTime, hpicfRpvstPortVlanInconsistencyReason, hpicfRpvstSendTopoChangeCtrl, hpicfRpvstTopoChangeTime, hpicfRpvstTopologyChange, hpicfRpvstVlanTopologyChangeRxEntry, hpicfRpvstVlanTopologyChangeRxIndex, hpicfRpvstVlanTopologyChangeRxMacAddress, hpicfRpvstVlanTopologyChangeRxPortId, hpicfRpvstVlanTopologyChangeRxTable, hpicfRpvstVlanTopologyChangeRxTime, hpicfRpvstVlanTopologyChangeTxCurrentPortRole, hpicfRpvstVlanTopologyChangeTxEntry, hpicfRpvstVlanTopologyChangeTxIndex, hpicfRpvstVlanTopologyChangeTxPortId, hpicfRpvstVlanTopologyChangeTxPreviousPortRole, hpicfRpvstVlanTopologyChangeTxTable, hpicfRpvstVlanTopologyChangeTxTime. Added groups hpicfRpvstPvst1, hpicfRpvstNotificationGroupPvst1, hpicfRpvstNotificationObjectGrpPvst1, hpicfRpvstTopologyRxGroup, hpicfRpvstTopologyTxGroup, hpicfRpvstPortRoleChangeGroup. Added complaince hpicfRpvstCompliance2. ', 'Initial version of this MIB module',))
if mibBuilder.loadTexts: hpicfRpvstMIB.setLastUpdated('201708080000Z')
if mibBuilder.loadTexts: hpicfRpvstMIB.setOrganization(' HP Networking')
if mibBuilder.loadTexts: hpicfRpvstMIB.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfRpvstMIB.setDescription('The MIB module Rapid Per VLAN Spanning Tree(RPVST).')
class PointToPoint(TextualConvention, Integer32):
    description = ' forceTrue: This value indicates that the administrator requires the MAC to be treated as if it is connected to a point-to-point LAN segment, regardless of any indications to the contrary that are generated by the MAC entity. forceFalse: This value indicates that the administrator requires the MAC to be treated as if it is connected to a non-point-to-point LAN segment, regardless of any indications to the contrary that are generated by the MAC entity. auto: This value indicates that the administrator requires the point-to-point status of the MAC to be determined in accordance with the specific MAC procedures defined in 6.5.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("forceTrue", 1), ("forceFalse", 2), ("auto", 3))

hpicfRpvstNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0))
hpicfRpvstObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1))
hpicfRpvstConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2))
hpicfRpvstGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 1))
hpicfRpvstResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstResetCounters.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstResetCounters.setDescription(' Setting this object to true(1) will reset all the RPVST counters. Setting this to false(2) is no operation.')
hpicfRpvstExtendedSystemID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstExtendedSystemID.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstExtendedSystemID.setDescription(' Indicates whether Extended System ID feature is enabled or not.')
hpicfRpvstIgnorePVIDInconsistency = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstIgnorePVIDInconsistency.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstIgnorePVIDInconsistency.setDescription('Setting this object to True(1) will enable RPVST to run on mismatched PVID links.Once set it will apply to all RPVST instances')
hpicfRpvstPathCostMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pathCost8021d", 1), ("pathCost8021t", 2), ("proprietary", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstPathCostMode.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPathCostMode.setDescription('hpicfRpvstPathCostMode controls which pathcost mode to use. A device can function in one of the 2 modes defined below. pathCost8021d - The device calculates the default path cost for ports based on IEEE 802.1d. pathCost8021t - The device calculates the default path cost for ports based on IEEE 802.1t. proprietary -The device calculates the default path cost for ports based on the proprietary standard. Link Speed Vs Pathcost Table ---------------------------------------------------------- |Link speed| Pathcost in | Pathcost in | Pathcost in | | | IEEE802.1d | IEEE 802.1t | private standard| ---------------------------------------------------------- | 0 | 65535 | 200,000,000 | 200,000 | ---------------------------------------------------------- | 10 Mbps | 100 | 2,000,000 | 2,000 | ---------------------------------------------------------- | 100 Mbp | 19 | 200,000 | 200 | ---------------------------------------------------------- | 1000 Mbp | 4 | 20,000 | 20 | ---------------------------------------------------------- | 10 Gbps | 2 | 2,000 | 2 | ---------------------------------------------------------- ')
hpicfRpvstVlanTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2), )
if mibBuilder.loadTexts: hpicfRpvstVlanTable.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanTable.setDescription('Information describing the RPVST configuration and statistics of the VLANs.')
hpicfRpvstVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1), ).setIndexNames((0, "HP-ICF-RPVST-MIB", "hpicfRpvstVlanId"))
if mibBuilder.loadTexts: hpicfRpvstVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanEntry.setDescription('Information describing the RPVST configuration and statistics of each of the VLANs.')
hpicfRpvstVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hpicfRpvstVlanId.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanId.setDescription('A VLAN ID to uniquely identifying the entries. ')
hpicfRpvstVlanHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstVlanHelloTime.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanHelloTime.setDescription(' The amount of time between the transmission of configuration BPDUs by this node on any port in this VLAN when it is root of the spanning tree, or trying to become so for this VLAN.')
hpicfRpvstVlanForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstVlanForwardDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanForwardDelay.setDescription(' The amount of time between transitioning from listening to learning and learning to forwarding by this node on any port when it is acting as a root for this VLAN.')
hpicfRpvstVlanMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstVlanMaxAge.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanMaxAge.setDescription(' The maximum age of RPVST information learned from the network on any port before it is discarded.')
hpicfRpvstVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstVlanPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanPriority.setDescription('The value of the write-able portion of the Bridge ID (i.e., the first two octets of the (8 octet long) Bridge ID). The other (last) 6 octets of the Bridge ID are given by the value dot1dBridgeBaseAddress.')
hpicfRpvstVlanRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("secondary", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstVlanRoot.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanRoot.setDescription(' To explicitly configure this switch to be primary/secondary root for this VLAN.')
hpicfRpvstVlanRpvstStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstVlanRpvstStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanRpvstStatus.setDescription(' To enable/disable RPVST on the VLAN.')
hpicfRpvstVlanResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstVlanResetCounters.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanResetCounters.setDescription(' Setting this object to true(1) will reset the RPVST counters for this VLAN.')
hpicfRpvstVlanOperHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstVlanOperHelloTime.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanOperHelloTime.setDescription(' The amount of time between the transmission of BPDUs by this node on any port in this VLAN when it is root of the spanning tree, or trying to become so for this VLAN. This is the actual value that this bridge is using.')
hpicfRpvstVlanRootPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstVlanRootPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanRootPriority.setDescription('The priority of root bridge in this VLAN.')
hpicfRpvstVlanRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstVlanRootPort.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanRootPort.setDescription('The root port for this VLAN.')
hpicfRpvstVlanRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstVlanRootPathCost.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanRootPathCost.setDescription('The path cost to the Root from this bridge in this VLAN.')
hpicfRpvstVlanRootMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstVlanRootMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanRootMacAddress.setDescription('MAC address of the Root in this VLAN.')
hpicfRpvstVlanRootChangeCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstVlanRootChangeCounter.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanRootChangeCounter.setDescription('The number of times the root has changed for this VLAN.')
hpicfRpvstVlanTimeSinceLastTopoChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstVlanTimeSinceLastTopoChange.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanTimeSinceLastTopoChange.setDescription('The time (in hundredths of a second) since the last time a topology change was detected by the bridge entity for this VLAN.')
hpicfVlanTopoChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVlanTopoChangeCount.setStatus('current')
if mibBuilder.loadTexts: hpicfVlanTopoChangeCount.setDescription('The total number of topology changes detected by this bridge in this VLAN since the management entity was last reset or initialized.')
hpicfRpvstSendTopoChangeCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstSendTopoChangeCtrl.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstSendTopoChangeCtrl.setDescription('Setting this object to true(1) will enable sending of SNMP notifications for all topology change events on this VLAN.')
hpicfRpvstLogPortStateTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 2, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstLogPortStateTransitions.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstLogPortStateTransitions.setDescription('Setting this object to true(1) will enable event logging of PVST port state transitions for this VLAN.')
hpicfRpvstPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 3), )
if mibBuilder.loadTexts: hpicfRpvstPortTable.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortTable.setDescription('Information describing the RPVST specific configuration and statistics of the ports.')
hpicfRpvstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 3, 1), ).setIndexNames((0, "HP-ICF-RPVST-MIB", "hpicfRpvstPortIndex"))
if mibBuilder.loadTexts: hpicfRpvstPortEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortEntry.setDescription('Information describing the RPVST specific configuration and statistics of the ports.')
hpicfRpvstPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfRpvstPortIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortIndex.setDescription(' The port number ')
hpicfRpvstPortAdminEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 3, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstPortAdminEdge.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortAdminEdge.setDescription("The administrative value of the Edge Port parameter. A value of true(1) indicates that this port should be assumed as an edge-port, and a value of false(2) indicates that this port should be assumed as a non-edge-port. Note that even when this object's value is true(1), the hpicfRpvstOperEdgePort can be false(2) if a BPDU has been received.")
hpicfRpvstPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 3, 1, 3), PointToPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstPortAdminPointToPoint.setReference('IEEE P802.1w; IEEE P802.1t')
if mibBuilder.loadTexts: hpicfRpvstPortAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortAdminPointToPoint.setDescription('Refer the PointToPoint textual-convention.')
hpicfRpvstPortAutoEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 3, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstPortAutoEdge.setReference('IEEE 802.1D-2004')
if mibBuilder.loadTexts: hpicfRpvstPortAutoEdge.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortAutoEdge.setDescription('It is used by the Bridge detection state machine for the automatic identification of edge ports. ')
hpicfRpvstPortBpduFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 3, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstPortBpduFiltering.setReference('IEEE P802.1w')
if mibBuilder.loadTexts: hpicfRpvstPortBpduFiltering.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortBpduFiltering.setDescription('This value indicates whether or not BPDUs need to be filtered on this port. If the value is true(1) the received BPDUs will be dropped and no BPDUs will be transmitted on the port. If the value is false (2) the BPDUs will be processed as usual. ')
hpicfRpvstPortRestrictedTcn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstPortRestrictedTcn.setReference('IEEE 802.1Q-REV/5.0 (13.25.15)')
if mibBuilder.loadTexts: hpicfRpvstPortRestrictedTcn.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortRestrictedTcn.setDescription(' This value indicates whether or not to propagate topology changes to other ports. true(1) causes the port not to propagate topology changes to other ports.')
hpicfRpvstPortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstPortRootGuard.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortRootGuard.setDescription(' Setting this object to true(1) forces port to not to be selected as root port even if this port has best spanning-tree. ')
hpicfRpvstPortLoopGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstPortLoopGuard.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortLoopGuard.setDescription(' Setting this object to true(1) causes the forwarding port to move to the blocking state and prevent the blocking port to move to forwarding state when no BPDUs are received, instead goes to loop inconsistent state.')
hpicfRpvstPortBpduProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstPortBpduProtection.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortBpduProtection.setDescription(' Setting this true (1) indicates that no BPDUs are expected to be received on this port. At the reception of BPDUs the BPDU protection mechanism will disable this port and port will transition into bpduError state.')
hpicfRpvstPortIeeeRstBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 3, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstPortIeeeRstBpdu.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortIeeeRstBpdu.setDescription('The hpicfRpvstPortIeeeRstBpdu controls, on a per port basis, whether or not IEEE RST BPDUs will be transmitted and received on VLANs that the port is an untagged member of. The value true(1) means that the port will allow transmission and reception of IEEE RST BPDUs on ports untagged to a VLAN while false(2) means it will not.')
hpicfRpvstPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 4), )
if mibBuilder.loadTexts: hpicfRpvstPortVlanTable.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTable.setDescription('Information describing the RPVST configuration and statistics of the ports in the given VLAN.')
hpicfRpvstPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 4, 1), ).setIndexNames((0, "HP-ICF-RPVST-MIB", "hpicfRpvstVlanId"), (0, "HP-ICF-RPVST-MIB", "hpicfRpvstPortIndex"))
if mibBuilder.loadTexts: hpicfRpvstPortVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanEntry.setDescription('Information describing the RPVST configuration and statistics of the ports in the given VLAN.')
hpicfRpvstPortVlanPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstPortVlanPathCost.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanPathCost.setDescription(' The contribution of this port to the path cost of paths towards the root which include this port. auto(0) ')
hpicfRpvstPortVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstPortVlanPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanPriority.setDescription('The value of the port priority field that is contained in the first (in network byte order) octet of the (2 octet long) Port ID. ')
hpicfRpvstPortVlanResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRpvstPortVlanResetCounters.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanResetCounters.setDescription(' Setting this object to true(1) will reset the RPVST counters for this port-vlan pair. Get on this object will always return false(2)')
hpicfRpvstPortVlanRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 4, 1, 4), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanRole.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanRole.setDescription(' Role played by the port in a given VLAN.')
hpicfRpvstPortVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6), ("bpduError", 7), ("loopInconsistent", 8), ("pvidInconsistent", 9), ("rootGuard", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanState.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanState.setDescription("The port's current state. This state controls what action a port takes on reception of a frame.")
hpicfRpvstPortVlanDesigBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 4, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanDesigBridge.setReference('12.8.2.1.3')
if mibBuilder.loadTexts: hpicfRpvstPortVlanDesigBridge.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanDesigBridge.setDescription(" The Bridge Identifier of the bridge that this port considers to be the Designated Bridge for this port's segment.")
hpicfRpvstPortVlanOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 4, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanOperPointToPoint.setDescription(' true : This value indicates that the MAC is connected to a point-to-point LAN segment; i.e., there is at most one other system attached to the LAN segment. false: This value indicates that the MAC is connected to a non-point-to-point LAN segment; i.e., there can be more than one other system attached to the LAN segment.')
hpicfRpvstPortVlanOperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 4, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanOperEdge.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanOperEdge.setDescription('The operational status of the edge port parameter. A value of true(1) indicates that this port should be assumed as an edge-port, and a value of false(2) indicates that this port should be assumed as a non-edge-port. ')
hpicfRpvstPortVlanInconsistencyReason = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rootProtected", 1), ("loopProtected", 2), ("inconsistentPvidprotected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanInconsistencyReason.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanInconsistencyReason.setDescription('The reason for which port is blocked by spanning tree protection function.')
hpicfRpvstPortVlanRxCountersTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5), )
if mibBuilder.loadTexts: hpicfRpvstPortVlanRxCountersTable.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanRxCountersTable.setDescription('A table which contains information about each port-vlan pair.')
hpicfRpvstPortVlanRxCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1), ).setIndexNames((0, "HP-ICF-RPVST-MIB", "hpicfRpvstVlanId"), (0, "HP-ICF-RPVST-MIB", "hpicfRpvstPortIndex"))
if mibBuilder.loadTexts: hpicfRpvstPortVlanRxCountersEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanRxCountersEntry.setDescription('Statistics for each port-vlan pair.')
hpicfRpvstPortVlanRpvstBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanRpvstBpduRx.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanRpvstBpduRx.setDescription('The number of RPVST BPDUs received on this port-vlan pair.')
hpicfRpvstPortVlanRpvstBpduRxLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanRpvstBpduRxLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanRpvstBpduRxLastUpdated.setDescription('Time when hpicfRpvstPortVlanRpvstBpduRxCount counter was last updated.')
hpicfRpvstPortVlanRstBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanRstBpduRx.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanRstBpduRx.setDescription('The number of RSTP BPDUs received on this port-vlan pair.')
hpicfRpvstPortVlanRstBpduRxLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanRstBpduRxLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanRstBpduRxLastUpdated.setDescription('Time when hpicfRpvstPortVlanRstBpduRxCount counter was last updated.')
hpicfRpvstPortVlanConfigBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanConfigBpduRx.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanConfigBpduRx.setDescription('The number of STP config BPDUs received on this port-vlan pair.')
hpicfRpvstPortVlanConfigBpduRxLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanConfigBpduRxLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanConfigBpduRxLastUpdated.setDescription('Time when hpicfRpvstPortVlanConfigBpduRxCount counter was last updated.')
hpicfRpvstPortVlanTcnBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcnBpduRx.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcnBpduRx.setDescription('The number of Topology Change Notification BPDUs received on this port-vlan pair.')
hpicfRpvstPortVlanTcnBpduRxLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcnBpduRxLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcnBpduRxLastUpdated.setDescription('Time when hpicfRpvstPortVlanTcnBpduRxCount counter was last updated.')
hpicfRpvstPortVlanTcDetectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcDetectCount.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcDetectCount.setDescription('The number of times Topology Change detected on this port-vlan pair.')
hpicfRpvstPortVlanTcDetectCountLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcDetectCountLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcDetectCountLastUpdated.setDescription('Time when hpicfRpvstPortVlanTcDetectCount counter was last updated.')
hpicfRpvstPortVlanTcFlagRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcFlagRx.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcFlagRx.setDescription('The number of times Topology Change bit was set in the BPDUs received on this port-vlan pair.')
hpicfRpvstPortVlanTcFlagRxLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcFlagRxLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcFlagRxLastUpdated.setDescription('Time when hpicfRpvstPortVlanTcFlagRxCount counter was last updated.')
hpicfRpvstPortVlanTcAckFlagRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcAckFlagRx.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcAckFlagRx.setDescription('The number of times TC-ACK bit was set in the BPDUs received on this port-vlan pair.')
hpicfRpvstPortVlanTcAckFlagRxLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcAckFlagRxLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcAckFlagRxLastUpdated.setDescription('Time when hpicfRpvstPortVlanTcAckFlagRxCount counter was last updated.')
hpicfRpvstPortVlanStarvedBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanStarvedBpduCount.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanStarvedBpduCount.setDescription('The number of times BPDU was not received at scheduled time on this port-vlan pair.')
hpicfRpvstPortVlanStarvedBpduCountLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanStarvedBpduCountLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanStarvedBpduCountLastUpdated.setDescription('Time when hpicfRpvstPortVlanStarvedBpduRxCount counter was last updated.')
hpicfRpvstPortVlanInvalidBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanInvalidBpduRx.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanInvalidBpduRx.setDescription('The number of invalid BPDUs received on this port-vlan pair.')
hpicfRpvstPortVlanInvalidBpduRxLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanInvalidBpduRxLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanInvalidBpduRxLastUpdated.setDescription('Time when hpicfRpvstPortVlanInvalidBpduRxCount counter was last updated.')
hpicfRpvstPortVlanLoopedBackBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanLoopedBackBpduRx.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanLoopedBackBpduRx.setDescription('The number of times a BPDU is received on the same port from where it was sent on the same VLAN.')
hpicfRpvstPortVlanLoopedBackBpduRxLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanLoopedBackBpduRxLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanLoopedBackBpduRxLastUpdated.setDescription('Time when hpicfRpvstPortVlanLoopedBackBpduRxCount counter was last updated.')
hpicfRpvstPortVlanErrantBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanErrantBpduRxCount.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanErrantBpduRxCount.setDescription('The number of BPDUs received on a BPDU-filtering or BPDU-protected enabled port.')
hpicfRpvstPortVlanErrantBpduRxCountLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanErrantBpduRxCountLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanErrantBpduRxCountLastUpdated.setDescription('Time when hpicfRpvstPortVlanErrantBpduRxCount counter was last updated.')
hpicfRpvstPortVlanAgedBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanAgedBpduRx.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanAgedBpduRx.setDescription('The number of aged BPDUs received on this port-vlan pair.')
hpicfRpvstPortVlanAgedBpduRxLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 5, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanAgedBpduRxLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanAgedBpduRxLastUpdated.setDescription('Time when hpicfRpvstPortVlanAgedBpduRx counter was last updated.')
hpicfRpvstPortVlanTxCountersTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 6), )
if mibBuilder.loadTexts: hpicfRpvstPortVlanTxCountersTable.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTxCountersTable.setDescription('A table which contains statistics for each port-vlan pair.')
hpicfRpvstPortVlanTxCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 6, 1), ).setIndexNames((0, "HP-ICF-RPVST-MIB", "hpicfRpvstVlanId"), (0, "HP-ICF-RPVST-MIB", "hpicfRpvstPortIndex"))
if mibBuilder.loadTexts: hpicfRpvstPortVlanTxCountersEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTxCountersEntry.setDescription('A list of statistics for each port-vlan pair.')
hpicfRpvstPortVlanRpvstBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanRpvstBpduTx.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanRpvstBpduTx.setDescription('The number of RPVST BPDUs sent on this port-vlan pair.')
hpicfRpvstPortVlanRpvstBpduTxLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 6, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanRpvstBpduTxLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanRpvstBpduTxLastUpdated.setDescription('The time when hpicfRpvstPortVlanBpduTx counter was last updated.')
hpicfRpvstPortVlanRstBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanRstBpduTx.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanRstBpduTx.setDescription('The number of RSTP BPDUs sent on this port-vlan pair.')
hpicfRpvstPortVlanRstBpduTxLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 6, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanRstBpduTxLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanRstBpduTxLastUpdated.setDescription('Time when hpicfRpvstPortVlanRstBpduTx was last updated.')
hpicfRpvstPortVlanConfigBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanConfigBpduTx.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanConfigBpduTx.setDescription('The number of STP config BPDUs sent on this port-vlan pair.')
hpicfRpvstPortVlanConfigBpduTxLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 6, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanConfigBpduTxLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanConfigBpduTxLastUpdated.setDescription('Time when hpicfRpvstPortVlanConfigBpduTx counter was last updated.')
hpicfRpvstPortVlanTcnBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcnBpduTx.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcnBpduTx.setDescription('The number of Topology Change Notification BPDUs sent on this port-vlan pair.')
hpicfRpvstPortVlanTcnBpduTxLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 6, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcnBpduTxLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcnBpduTxLastUpdated.setDescription('Time when hpicfRpvstPortVlanTcnBpduTx counter was last updated.')
hpicfRpvstPortVlanTcFlagTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcFlagTx.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcFlagTx.setDescription('The number of times Topology Change bit was set in BPDUs sent on this port-vlan pair.')
hpicfRpvstPortVlanTcFlagTxLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 6, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcFlagTxLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcFlagTxLastUpdated.setDescription('Time when hpicfRpvstPortVlanTcFlagTx counter was last updated.')
hpicfRpvstPortVlanTcAckFlagTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcAckFlagTx.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcAckFlagTx.setDescription('The number of times TC-ACK bit was set in BPDUs sent on this port-vlan pair.')
hpicfRpvstPortVlanTcAckFlagTxLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 6, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcAckFlagTxLastUpdated.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanTcAckFlagTxLastUpdated.setDescription('Time when hpicfRpvstPortVlanTcAckFlagTx Counter was last updated.')
hpicfRpvstVlanRootHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 7), )
if mibBuilder.loadTexts: hpicfRpvstVlanRootHistoryTable.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanRootHistoryTable.setDescription('A table containing the information describing the RPVST root history for each VLAN.')
hpicfRpvstVlanRootHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 7, 1), ).setIndexNames((0, "HP-ICF-RPVST-MIB", "hpicfRpvstVlanId"), (0, "HP-ICF-RPVST-MIB", "hpicfRpvstVlanRootHistoryIndex"))
if mibBuilder.loadTexts: hpicfRpvstVlanRootHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanRootHistoryEntry.setDescription('History of the Roots for the VLANs.')
hpicfRpvstVlanRootHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: hpicfRpvstVlanRootHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanRootHistoryIndex.setDescription('An index which uniquely identifies a row in root history table.The lowest numerical index always holds the most recent root entry.Currently last 10 entries are supported.')
hpicfRpvstVlanRootBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 7, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstVlanRootBridgeId.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanRootBridgeId.setDescription('Root bridge Id consisting of Root priority and Root MAC address.')
hpicfRpvstVlanRootHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 7, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstVlanRootHistoryTime.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanRootHistoryTime.setDescription('Time when a new root was elected.')
hpicfRpvstVlanTopologyChangeRxTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 8), )
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeRxTable.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeRxTable.setDescription('A list of entries,one for every topology change event that the switch received on per vlan basis. This table holds entries for last 10 topology change events received on the switch.')
hpicfRpvstVlanTopologyChangeRxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 8, 1), ).setIndexNames((0, "HP-ICF-RPVST-MIB", "hpicfRpvstVlanId"), (0, "HP-ICF-RPVST-MIB", "hpicfRpvstVlanTopologyChangeRxIndex"))
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeRxEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeRxEntry.setDescription('Set of parameters corresponding to topology change event that the switch received on per vlan basis.')
hpicfRpvstVlanTopologyChangeRxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeRxIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeRxIndex.setDescription('An index which uniquely identifies a row in VLAN TC history table. Currently only last 10 entries are supported.')
hpicfRpvstVlanTopologyChangeRxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 8, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeRxTime.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeRxTime.setDescription('Time at which topology change event was received .')
hpicfRpvstVlanTopologyChangeRxMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 8, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeRxMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeRxMacAddress.setDescription('MAC address form which TC change is received.')
hpicfRpvstVlanTopologyChangeRxPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeRxPortId.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeRxPortId.setDescription('Port on which an RPVST topology change message is recieved.')
hpicfRpvstVlanTopologyChangeTxTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 9), )
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeTxTable.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeTxTable.setDescription('A list of entries,one for every topology change event that switch originated on per vlan basis . This table holds for last 10 topology change events originated on switch')
hpicfRpvstVlanTopologyChangeTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 9, 1), ).setIndexNames((0, "HP-ICF-RPVST-MIB", "hpicfRpvstVlanId"), (0, "HP-ICF-RPVST-MIB", "hpicfRpvstVlanTopologyChangeTxIndex"))
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeTxEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeTxEntry.setDescription('Set of parameters corresponding to topology change event that switch originated on per vlan basis.')
hpicfRpvstVlanTopologyChangeTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeTxIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeTxIndex.setDescription('Agent assigned index to uniquely identify an entry in this table. The lowest numerical index always holds the most recent topoogy change event entry. Currently only last 10 entries are supported.')
hpicfRpvstVlanTopologyChangeTxCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 9, 1, 2), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeTxCurrentPortRole.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeTxCurrentPortRole.setDescription('Current port Role in the topology.')
hpicfRpvstVlanTopologyChangeTxPreviousPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 9, 1, 3), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeTxPreviousPortRole.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeTxPreviousPortRole.setDescription('Previous port Role in the topology')
hpicfRpvstVlanTopologyChangeTxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 9, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeTxTime.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeTxTime.setDescription('Time at which topology change event was generated.')
hpicfRpvstVlanTopologyChangeTxPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeTxPortId.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanTopologyChangeTxPortId.setDescription('Port on which an RPVST topology change message originated.')
hpicfRpvstPortRoleChangeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 10), )
if mibBuilder.loadTexts: hpicfRpvstPortRoleChangeTable.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortRoleChangeTable.setDescription('A table containing the information describing the RPVST port change history.')
hpicfRpvstPortRoleChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 10, 1), ).setIndexNames((0, "HP-ICF-RPVST-MIB", "hpicfRpvstVlanId"), (0, "HP-ICF-RPVST-MIB", "hpicfRpvstPortIndex"), (0, "HP-ICF-RPVST-MIB", "hpicfRpvstPortRoleChangeIndex"))
if mibBuilder.loadTexts: hpicfRpvstPortRoleChangeEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortRoleChangeEntry.setDescription('History of the port change state.')
hpicfRpvstPortRoleChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfRpvstPortRoleChangeIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortRoleChangeIndex.setDescription('An index which uniquely identifies a row in port role change table. Currently only last 10 entries are supported.')
hpicfRpvstPortRoleChangeCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 10, 1, 2), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortRoleChangeCurrentPortRole.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortRoleChangeCurrentPortRole.setDescription('Current port Role.')
hpicfRpvstPortRoleChangePreviousPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 10, 1, 3), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortRoleChangePreviousPortRole.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortRoleChangePreviousPortRole.setDescription('Previous port Role .')
hpicfRpvstPortRoleChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 1, 10, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfRpvstPortRoleChangeTime.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortRoleChangeTime.setDescription('Time when port role changed took place.')
hpicfRpvstErrantBpduDetector = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bpduFilter", 1), ("bpduProtection", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRpvstErrantBpduDetector.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstErrantBpduDetector.setDescription('The identifier of the feature generating Errant BPDU trap.')
hpicfRpvstErrantBpduSrcMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRpvstErrantBpduSrcMac.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstErrantBpduSrcMac.setDescription('The source MAC address of the port sending Errant BPDU.')
hpicfRpvstNewRootBridgeId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 3), BridgeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRpvstNewRootBridgeId.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstNewRootBridgeId.setDescription('Bridge ID of the new Root. Bridge Id consists of priority and MAC address.')
hpicfRpvstPreviousRootBridgeId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 4), BridgeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRpvstPreviousRootBridgeId.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPreviousRootBridgeId.setDescription('Bridge ID of the previous Root. Bridge Id consists of priority and MAC address.')
hpicfRpvstDesignatedPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRpvstDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstDesignatedPort.setDescription('Designated Port of the Bridge.')
hpicfRpvstVlanIndex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 6), VlanIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRpvstVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanIndex.setDescription('VLAN ID ')
hpicfRpvstPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRpvstPortNumber.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortNumber.setDescription('Port number ')
hpicfRpvstRootBridgeChangeTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 8), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRpvstRootBridgeChangeTimeStamp.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstRootBridgeChangeTimeStamp.setDescription('Time when the root changed')
hpicfRpvstSuperiorBpduSrcMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 9), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRpvstSuperiorBpduSrcMac.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstSuperiorBpduSrcMac.setDescription('The source MAC address of the port sending superior BPDU.')
hpicfRpvstSuperiorBpduSrcPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRpvstSuperiorBpduSrcPort.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstSuperiorBpduSrcPort.setDescription('Port belonging to the Bridge from which the superior BPDU was received.')
hpicfRpvstErrantBpduReceived = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 11)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstVlanIndex"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortNumber"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanErrantBpduRxCount"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanState"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanDesigBridge"), ("HP-ICF-RPVST-MIB", "hpicfRpvstDesignatedPort"), ("HP-ICF-RPVST-MIB", "hpicfRpvstErrantBpduSrcMac"), ("HP-ICF-RPVST-MIB", "hpicfRpvstErrantBpduDetector"))
if mibBuilder.loadTexts: hpicfRpvstErrantBpduReceived.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstErrantBpduReceived.setDescription('This trap generated when an unexpected (errant) BPDU has been received on a port. hpicfRpvstVlanIndex - VLAN instance to which BPDU belongs. hpicfRpvstPortNumber - Port ID on which BPDU received. hpicfRpvstPortVlanErrantBpduRxCount - Total number of errant BPDU received on the port which belongs to VLAN hpicfRpvstVlanId. hpicfRpvstPortState - State of this port. hpicfRpvstPortVlanDesigBridge - Designated Bridge that transmitted this BPDU. hpicfRpvstDesignatedPort - Designated port of the Bridge that transmitted this BPDU. hpicfRpvstErrantBpduSrcMac- Source MAC address of the port sending this Errant trap. hpicfRpvstErrantBpduDetector - The identifier of the feature generating Errant BPDU Trap.')
hpicfRpvstNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 12)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstVlanIndex"), ("HP-ICF-RPVST-MIB", "hpicfRpvstNewRootBridgeId"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPreviousRootBridgeId"), ("HP-ICF-RPVST-MIB", "hpicfRpvstRootBridgeChangeTimeStamp"))
if mibBuilder.loadTexts: hpicfRpvstNewRoot.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstNewRoot.setDescription('Trap generated when sending agent has become the new root of spanning Tree for the specified VLAN; the notification is sent by a bridge soon after its election as the new root, e.g., upon expiration of the Topology Change Timer, immediately subsequent to its election. hpicfRpvstVlanIndex - VLAN instance in which new root is elected. hpicfRpvstNewRootBridgeId - Bridge ID of the new root elected. hpicfRpvstPreviousRootBridgeId - Bridge ID of the previous root. hpicfRpvstRootBridgeChangeTimeStamp - Time when the root bridge changed.')
hpicfRpvstRootGuardInconsistency = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 13)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstVlanIndex"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortNumber"), ("HP-ICF-RPVST-MIB", "hpicfRpvstSuperiorBpduSrcMac"), ("HP-ICF-RPVST-MIB", "hpicfRpvstSuperiorBpduSrcPort"))
if mibBuilder.loadTexts: hpicfRpvstRootGuardInconsistency.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstRootGuardInconsistency.setDescription(' Trap generated when a Root Guard feature enabled port receives superior BPDUs on its interface for a given VLAN instance. hpicfRpvstVlanIndex - Vlan Instance to which BPDU belongs. hpicfRpvstPortNumber - Port ID where root-inconsistency occurred. hpicfRpvstSuperiorBpduSrcMac - The source MAC address of the port sending superior BPDU. hpicfRpvstSuperiorBpduSrcPort - Port belonging to the Bridge, which transmitted the superior BPDU.')
hpicfRpvstLoopGuardInconsistency = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 14)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstVlanIndex"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortNumber"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanDesigBridge"))
if mibBuilder.loadTexts: hpicfRpvstLoopGuardInconsistency.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstLoopGuardInconsistency.setDescription(' Trap generated when a Loop Guard feature enabled port stops receiving BPDUs from its designated port for a given VLAN instance but keeps the port in blocked state. hpicfRpvstVlanIndex - Vlan Instance in which no BPDU received. hpicfRpvstPortNumber - Port ID where loop-inconsistency occurred. hpicfRpvstPortVlanDesigBridge - Designated Bridge this port was expecting to receive the BPDU.')
hpicfRpvstOldPortRole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRpvstOldPortRole.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstOldPortRole.setDescription('Old Port state ')
hpicfRpvstNewPortRole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRpvstNewPortRole.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstNewPortRole.setDescription('new port state ')
hpicfRpvstTopoChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 17), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfRpvstTopoChangeTime.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstTopoChangeTime.setDescription('topo change time ')
hpicfRpvstTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 0, 18)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstVlanIndex"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortNumber"), ("HP-ICF-RPVST-MIB", "hpicfRpvstOldPortRole"), ("HP-ICF-RPVST-MIB", "hpicfRpvstNewPortRole"), ("HP-ICF-RPVST-MIB", "hpicfRpvstTopoChangeTime"))
if mibBuilder.loadTexts: hpicfRpvstTopologyChange.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstTopologyChange.setDescription(' Trap generated whenever topology change detected on this port- vlan pair. hpicfRpvstVlanIndex - Vlan Instance for which topology change detected. hpicfRpvstPortNumber - Port ID for which topology change detected. hpicfRpvstOldPortRole - Old role of this port before topology change. hpicfRpvstNewPortRole - New state of this port after topology change. hpicfRpvstTopoChangeTime - Time at which the topology change happened for this port.')
hpicfRpvstGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 1))
hpicfRpvstCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 2))
hpicfRpvstCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 2, 1)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstGroup"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanGroup"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanGroup"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortGroup"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanCounterGroup"), ("HP-ICF-RPVST-MIB", "hpicfRpvstRootHistoryGroup"), ("HP-ICF-RPVST-MIB", "hpicfRpvstNotificationObjectGrp"), ("HP-ICF-RPVST-MIB", "hpicfRpvstNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstCompliance1 = hpicfRpvstCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfRpvstCompliance1.setDescription('The compliance statement')
hpicfRpvstCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 2, 2)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstPvst1"), ("HP-ICF-RPVST-MIB", "hpicfRpvstNotificationGroupPvst1"), ("HP-ICF-RPVST-MIB", "hpicfRpvstNotificationObjectGrpPvst1"), ("HP-ICF-RPVST-MIB", "hpicfRpvstTopologyRxGroup"), ("HP-ICF-RPVST-MIB", "hpicfRpvstTopologyTxGroup"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortRoleChangeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstCompliance2 = hpicfRpvstCompliance2.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstCompliance2.setDescription('The compliance statement')
hpicfRpvstCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 2, 3)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstGroup"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanGroup"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanGroup"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortGroup1"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanCounterGroup"), ("HP-ICF-RPVST-MIB", "hpicfRpvstRootHistoryGroup"), ("HP-ICF-RPVST-MIB", "hpicfRpvstNotificationObjectGrp"), ("HP-ICF-RPVST-MIB", "hpicfRpvstNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstCompliance3 = hpicfRpvstCompliance3.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstCompliance3.setDescription('The compliance statement')
hpicfRpvstGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 1, 1)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstResetCounters"), ("HP-ICF-RPVST-MIB", "hpicfRpvstExtendedSystemID"), ("HP-ICF-RPVST-MIB", "hpicfRpvstIgnorePVIDInconsistency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstGroup = hpicfRpvstGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstGroup.setDescription('These objects are used for managing/monitoring RPVST global parameters.')
hpicfRpvstVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 1, 2)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstVlanHelloTime"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanForwardDelay"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanMaxAge"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanPriority"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanRoot"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanRpvstStatus"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanResetCounters"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanOperHelloTime"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanRootPriority"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanRootPort"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanRootPathCost"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanRootMacAddress"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanRootChangeCounter"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanTimeSinceLastTopoChange"), ("HP-ICF-RPVST-MIB", "hpicfVlanTopoChangeCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstVlanGroup = hpicfRpvstVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstVlanGroup.setDescription('These objects are used for managing/monitoring RPVST VLAN parameters.')
hpicfRpvstPortVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 1, 3)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanPathCost"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanPriority"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanResetCounters"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanRole"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanState"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanDesigBridge"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanOperPointToPoint"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanOperEdge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstPortVlanGroup = hpicfRpvstPortVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanGroup.setDescription('These objects are used for managing/monitoring RPVST port parameters for the VLANs.')
hpicfRpvstPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 1, 4)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstPortAdminEdge"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortAdminPointToPoint"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortAutoEdge"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortBpduFiltering"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortRestrictedTcn"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortRootGuard"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortLoopGuard"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortBpduProtection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstPortGroup = hpicfRpvstPortGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfRpvstPortGroup.setDescription('These objects are used for managing/monitoring RPVST port parameters')
hpicfRpvstPortVlanCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 1, 5)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanRpvstBpduRx"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanRpvstBpduRxLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanRpvstBpduTx"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanRpvstBpduTxLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanRstBpduRx"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanRstBpduRxLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanRstBpduTx"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanRstBpduTxLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanConfigBpduRx"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanConfigBpduRxLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanConfigBpduTx"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanConfigBpduTxLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanTcnBpduRx"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanTcnBpduRxLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanTcnBpduTx"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanTcnBpduTxLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanTcDetectCount"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanTcDetectCountLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanTcFlagRx"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanTcFlagRxLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanTcFlagTx"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanTcFlagTxLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanTcAckFlagRx"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanTcAckFlagRxLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanTcAckFlagTx"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanTcAckFlagTxLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanAgedBpduRx"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanAgedBpduRxLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanStarvedBpduCount"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanStarvedBpduCountLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanInvalidBpduRx"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanInvalidBpduRxLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanLoopedBackBpduRx"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanLoopedBackBpduRxLastUpdated"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanErrantBpduRxCount"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanErrantBpduRxCountLastUpdated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstPortVlanCounterGroup = hpicfRpvstPortVlanCounterGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortVlanCounterGroup.setDescription('Group of port-vlan counter objects.')
hpicfRpvstRootHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 1, 6)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstVlanRootBridgeId"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanRootHistoryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstRootHistoryGroup = hpicfRpvstRootHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstRootHistoryGroup.setDescription('Group of VLAN Root history objects.')
hpicfRpvstNotificationObjectGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 1, 7)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstErrantBpduDetector"), ("HP-ICF-RPVST-MIB", "hpicfRpvstErrantBpduSrcMac"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanIndex"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortNumber"), ("HP-ICF-RPVST-MIB", "hpicfRpvstNewRootBridgeId"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPreviousRootBridgeId"), ("HP-ICF-RPVST-MIB", "hpicfRpvstDesignatedPort"), ("HP-ICF-RPVST-MIB", "hpicfRpvstRootBridgeChangeTimeStamp"), ("HP-ICF-RPVST-MIB", "hpicfRpvstSuperiorBpduSrcMac"), ("HP-ICF-RPVST-MIB", "hpicfRpvstSuperiorBpduSrcPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstNotificationObjectGrp = hpicfRpvstNotificationObjectGrp.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstNotificationObjectGrp.setDescription('Group of objects required for notifications.')
hpicfRpvstNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 1, 8)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstErrantBpduReceived"), ("HP-ICF-RPVST-MIB", "hpicfRpvstNewRoot"), ("HP-ICF-RPVST-MIB", "hpicfRpvstRootGuardInconsistency"), ("HP-ICF-RPVST-MIB", "hpicfRpvstLoopGuardInconsistency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstNotificationGroup = hpicfRpvstNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstNotificationGroup.setDescription('Group of notifications.')
hpicfRpvstPvst1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 1, 9)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstPathCostMode"), ("HP-ICF-RPVST-MIB", "hpicfRpvstSendTopoChangeCtrl"), ("HP-ICF-RPVST-MIB", "hpicfRpvstLogPortStateTransitions"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortVlanInconsistencyReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstPvst1 = hpicfRpvstPvst1.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPvst1.setDescription('Group of object added part of pvst1.')
hpicfRpvstNotificationGroupPvst1 = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 1, 10)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstTopologyChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstNotificationGroupPvst1 = hpicfRpvstNotificationGroupPvst1.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstNotificationGroupPvst1.setDescription('Group of notifications.')
hpicfRpvstNotificationObjectGrpPvst1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 1, 11)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstOldPortRole"), ("HP-ICF-RPVST-MIB", "hpicfRpvstNewPortRole"), ("HP-ICF-RPVST-MIB", "hpicfRpvstTopoChangeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstNotificationObjectGrpPvst1 = hpicfRpvstNotificationObjectGrpPvst1.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstNotificationObjectGrpPvst1.setDescription('Group of objects required for notifications.')
hpicfRpvstTopologyRxGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 1, 12)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstVlanTopologyChangeRxTime"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanTopologyChangeRxMacAddress"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanTopologyChangeRxPortId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstTopologyRxGroup = hpicfRpvstTopologyRxGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstTopologyRxGroup.setDescription('Group of objects required for vlan topo change rx.')
hpicfRpvstTopologyTxGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 1, 13)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstVlanTopologyChangeTxCurrentPortRole"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanTopologyChangeTxPreviousPortRole"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanTopologyChangeTxTime"), ("HP-ICF-RPVST-MIB", "hpicfRpvstVlanTopologyChangeTxPortId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstTopologyTxGroup = hpicfRpvstTopologyTxGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstTopologyTxGroup.setDescription('Group of objects required for vlan topo change tx.')
hpicfRpvstPortRoleChangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 1, 14)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstPortRoleChangeCurrentPortRole"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortRoleChangePreviousPortRole"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortRoleChangeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstPortRoleChangeGroup = hpicfRpvstPortRoleChangeGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortRoleChangeGroup.setDescription('Group of objects required for port role change.')
hpicfRpvstPortGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 88, 2, 1, 15)).setObjects(("HP-ICF-RPVST-MIB", "hpicfRpvstPortAdminEdge"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortAdminPointToPoint"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortAutoEdge"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortBpduFiltering"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortRestrictedTcn"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortRootGuard"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortLoopGuard"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortBpduProtection"), ("HP-ICF-RPVST-MIB", "hpicfRpvstPortIeeeRstBpdu"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRpvstPortGroup1 = hpicfRpvstPortGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfRpvstPortGroup1.setDescription('These objects are used for managing/monitoring RPVST port parameters')
mibBuilder.exportSymbols("HP-ICF-RPVST-MIB", hpicfVlanTopoChangeCount=hpicfVlanTopoChangeCount, hpicfRpvstVlanTable=hpicfRpvstVlanTable, hpicfRpvstNewRoot=hpicfRpvstNewRoot, hpicfRpvstVlanRootHistoryTable=hpicfRpvstVlanRootHistoryTable, hpicfRpvstConformance=hpicfRpvstConformance, hpicfRpvstSuperiorBpduSrcPort=hpicfRpvstSuperiorBpduSrcPort, hpicfRpvstPortIndex=hpicfRpvstPortIndex, hpicfRpvstPortVlanErrantBpduRxCount=hpicfRpvstPortVlanErrantBpduRxCount, hpicfRpvstPortVlanTcAckFlagRx=hpicfRpvstPortVlanTcAckFlagRx, hpicfRpvstPortVlanInvalidBpduRx=hpicfRpvstPortVlanInvalidBpduRx, hpicfRpvstPortAdminPointToPoint=hpicfRpvstPortAdminPointToPoint, hpicfRpvstVlanTimeSinceLastTopoChange=hpicfRpvstVlanTimeSinceLastTopoChange, PYSNMP_MODULE_ID=hpicfRpvstMIB, hpicfRpvstPortAutoEdge=hpicfRpvstPortAutoEdge, hpicfRpvstPortVlanRpvstBpduRx=hpicfRpvstPortVlanRpvstBpduRx, hpicfRpvstPortVlanConfigBpduTxLastUpdated=hpicfRpvstPortVlanConfigBpduTxLastUpdated, hpicfRpvstPortVlanTcnBpduTxLastUpdated=hpicfRpvstPortVlanTcnBpduTxLastUpdated, hpicfRpvstPortRootGuard=hpicfRpvstPortRootGuard, hpicfRpvstPortBpduProtection=hpicfRpvstPortBpduProtection, hpicfRpvstPortVlanDesigBridge=hpicfRpvstPortVlanDesigBridge, hpicfRpvstPortVlanAgedBpduRxLastUpdated=hpicfRpvstPortVlanAgedBpduRxLastUpdated, hpicfRpvstPortVlanTxCountersTable=hpicfRpvstPortVlanTxCountersTable, hpicfRpvstPortVlanStarvedBpduCountLastUpdated=hpicfRpvstPortVlanStarvedBpduCountLastUpdated, hpicfRpvstPortVlanPathCost=hpicfRpvstPortVlanPathCost, hpicfRpvstVlanHelloTime=hpicfRpvstVlanHelloTime, hpicfRpvstTopoChangeTime=hpicfRpvstTopoChangeTime, hpicfRpvstPortVlanState=hpicfRpvstPortVlanState, hpicfRpvstPortVlanTcAckFlagTxLastUpdated=hpicfRpvstPortVlanTcAckFlagTxLastUpdated, hpicfRpvstPortVlanPriority=hpicfRpvstPortVlanPriority, hpicfRpvstPortRoleChangeIndex=hpicfRpvstPortRoleChangeIndex, hpicfRpvstPortVlanResetCounters=hpicfRpvstPortVlanResetCounters, hpicfRpvstPortVlanTcnBpduRxLastUpdated=hpicfRpvstPortVlanTcnBpduRxLastUpdated, hpicfRpvstDesignatedPort=hpicfRpvstDesignatedPort, hpicfRpvstSuperiorBpduSrcMac=hpicfRpvstSuperiorBpduSrcMac, hpicfRpvstCompliance1=hpicfRpvstCompliance1, hpicfRpvstNotificationObjectGrpPvst1=hpicfRpvstNotificationObjectGrpPvst1, hpicfRpvstPortVlanCounterGroup=hpicfRpvstPortVlanCounterGroup, hpicfRpvstPortGroup1=hpicfRpvstPortGroup1, hpicfRpvstPortVlanInvalidBpduRxLastUpdated=hpicfRpvstPortVlanInvalidBpduRxLastUpdated, hpicfRpvstVlanTopologyChangeTxTime=hpicfRpvstVlanTopologyChangeTxTime, hpicfRpvstNotifications=hpicfRpvstNotifications, hpicfRpvstPortVlanTcAckFlagRxLastUpdated=hpicfRpvstPortVlanTcAckFlagRxLastUpdated, hpicfRpvstGroup=hpicfRpvstGroup, hpicfRpvstVlanRootMacAddress=hpicfRpvstVlanRootMacAddress, hpicfRpvstTopologyTxGroup=hpicfRpvstTopologyTxGroup, hpicfRpvstPortVlanLoopedBackBpduRxLastUpdated=hpicfRpvstPortVlanLoopedBackBpduRxLastUpdated, hpicfRpvstPortVlanRstBpduTxLastUpdated=hpicfRpvstPortVlanRstBpduTxLastUpdated, hpicfRpvstPortVlanTcFlagRx=hpicfRpvstPortVlanTcFlagRx, hpicfRpvstVlanId=hpicfRpvstVlanId, hpicfRpvstPreviousRootBridgeId=hpicfRpvstPreviousRootBridgeId, hpicfRpvstPortVlanConfigBpduRxLastUpdated=hpicfRpvstPortVlanConfigBpduRxLastUpdated, hpicfRpvstPortRoleChangePreviousPortRole=hpicfRpvstPortRoleChangePreviousPortRole, hpicfRpvstPortTable=hpicfRpvstPortTable, hpicfRpvstPortNumber=hpicfRpvstPortNumber, hpicfRpvstExtendedSystemID=hpicfRpvstExtendedSystemID, hpicfRpvstErrantBpduSrcMac=hpicfRpvstErrantBpduSrcMac, hpicfRpvstLoopGuardInconsistency=hpicfRpvstLoopGuardInconsistency, hpicfRpvstPortVlanRole=hpicfRpvstPortVlanRole, hpicfRpvstVlanTopologyChangeRxPortId=hpicfRpvstVlanTopologyChangeRxPortId, hpicfRpvstPortVlanRpvstBpduTx=hpicfRpvstPortVlanRpvstBpduTx, hpicfRpvstVlanRootPort=hpicfRpvstVlanRootPort, hpicfRpvstPortVlanRstBpduRx=hpicfRpvstPortVlanRstBpduRx, hpicfRpvstVlanTopologyChangeRxTable=hpicfRpvstVlanTopologyChangeRxTable, hpicfRpvstMIB=hpicfRpvstMIB, hpicfRpvstVlanPriority=hpicfRpvstVlanPriority, hpicfRpvstPortVlanStarvedBpduCount=hpicfRpvstPortVlanStarvedBpduCount, hpicfRpvstVlanRoot=hpicfRpvstVlanRoot, hpicfRpvstPortIeeeRstBpdu=hpicfRpvstPortIeeeRstBpdu, hpicfRpvstVlanTopologyChangeRxEntry=hpicfRpvstVlanTopologyChangeRxEntry, hpicfRpvstPortVlanAgedBpduRx=hpicfRpvstPortVlanAgedBpduRx, hpicfRpvstPortVlanRstBpduRxLastUpdated=hpicfRpvstPortVlanRstBpduRxLastUpdated, hpicfRpvstPortRoleChangeTime=hpicfRpvstPortRoleChangeTime, hpicfRpvstTopologyChange=hpicfRpvstTopologyChange, hpicfRpvstPortVlanGroup=hpicfRpvstPortVlanGroup, hpicfRpvstPortVlanTcnBpduTx=hpicfRpvstPortVlanTcnBpduTx, hpicfRpvstCompliance2=hpicfRpvstCompliance2, hpicfRpvstVlanGroup=hpicfRpvstVlanGroup, hpicfRpvstVlanRootPriority=hpicfRpvstVlanRootPriority, hpicfRpvstVlanRootPathCost=hpicfRpvstVlanRootPathCost, hpicfRpvstVlanRootChangeCounter=hpicfRpvstVlanRootChangeCounter, hpicfRpvstVlanTopologyChangeRxIndex=hpicfRpvstVlanTopologyChangeRxIndex, hpicfRpvstVlanRootBridgeId=hpicfRpvstVlanRootBridgeId, hpicfRpvstOldPortRole=hpicfRpvstOldPortRole, hpicfRpvstPortRoleChangeTable=hpicfRpvstPortRoleChangeTable, hpicfRpvstPortVlanTcFlagRxLastUpdated=hpicfRpvstPortVlanTcFlagRxLastUpdated, hpicfRpvstNotificationGroup=hpicfRpvstNotificationGroup, hpicfRpvstPortAdminEdge=hpicfRpvstPortAdminEdge, hpicfRpvstNewRootBridgeId=hpicfRpvstNewRootBridgeId, hpicfRpvstNotificationObjectGrp=hpicfRpvstNotificationObjectGrp, hpicfRpvstVlanTopologyChangeTxPreviousPortRole=hpicfRpvstVlanTopologyChangeTxPreviousPortRole, hpicfRpvstVlanResetCounters=hpicfRpvstVlanResetCounters, hpicfRpvstCompliances=hpicfRpvstCompliances, hpicfRpvstPortEntry=hpicfRpvstPortEntry, hpicfRpvstPortVlanRxCountersTable=hpicfRpvstPortVlanRxCountersTable, hpicfRpvstVlanIndex=hpicfRpvstVlanIndex, hpicfRpvstObjects=hpicfRpvstObjects, hpicfRpvstPortVlanConfigBpduRx=hpicfRpvstPortVlanConfigBpduRx, hpicfRpvstPortVlanTcFlagTx=hpicfRpvstPortVlanTcFlagTx, hpicfRpvstPortVlanRxCountersEntry=hpicfRpvstPortVlanRxCountersEntry, hpicfRpvstVlanEntry=hpicfRpvstVlanEntry, hpicfRpvstVlanMaxAge=hpicfRpvstVlanMaxAge, hpicfRpvstGeneralGroup=hpicfRpvstGeneralGroup, hpicfRpvstPortVlanOperPointToPoint=hpicfRpvstPortVlanOperPointToPoint, hpicfRpvstPortRestrictedTcn=hpicfRpvstPortRestrictedTcn, hpicfRpvstResetCounters=hpicfRpvstResetCounters, hpicfRpvstPortVlanInconsistencyReason=hpicfRpvstPortVlanInconsistencyReason, hpicfRpvstRootBridgeChangeTimeStamp=hpicfRpvstRootBridgeChangeTimeStamp, hpicfRpvstPortVlanTcDetectCountLastUpdated=hpicfRpvstPortVlanTcDetectCountLastUpdated, hpicfRpvstVlanRpvstStatus=hpicfRpvstVlanRpvstStatus, hpicfRpvstPortVlanOperEdge=hpicfRpvstPortVlanOperEdge, hpicfRpvstVlanTopologyChangeTxIndex=hpicfRpvstVlanTopologyChangeTxIndex, hpicfRpvstCompliance3=hpicfRpvstCompliance3, hpicfRpvstPvst1=hpicfRpvstPvst1, hpicfRpvstPortVlanRpvstBpduTxLastUpdated=hpicfRpvstPortVlanRpvstBpduTxLastUpdated, hpicfRpvstTopologyRxGroup=hpicfRpvstTopologyRxGroup, hpicfRpvstPortRoleChangeEntry=hpicfRpvstPortRoleChangeEntry, hpicfRpvstPortVlanConfigBpduTx=hpicfRpvstPortVlanConfigBpduTx, hpicfRpvstNotificationGroupPvst1=hpicfRpvstNotificationGroupPvst1, hpicfRpvstPortVlanTcFlagTxLastUpdated=hpicfRpvstPortVlanTcFlagTxLastUpdated, hpicfRpvstRootGuardInconsistency=hpicfRpvstRootGuardInconsistency, hpicfRpvstPortLoopGuard=hpicfRpvstPortLoopGuard, hpicfRpvstPortVlanEntry=hpicfRpvstPortVlanEntry, hpicfRpvstVlanRootHistoryTime=hpicfRpvstVlanRootHistoryTime, hpicfRpvstVlanTopologyChangeTxTable=hpicfRpvstVlanTopologyChangeTxTable, hpicfRpvstPortRoleChangeGroup=hpicfRpvstPortRoleChangeGroup, hpicfRpvstPathCostMode=hpicfRpvstPathCostMode, hpicfRpvstPortVlanRpvstBpduRxLastUpdated=hpicfRpvstPortVlanRpvstBpduRxLastUpdated, hpicfRpvstPortGroup=hpicfRpvstPortGroup, hpicfRpvstPortVlanTcAckFlagTx=hpicfRpvstPortVlanTcAckFlagTx, hpicfRpvstVlanRootHistoryEntry=hpicfRpvstVlanRootHistoryEntry, hpicfRpvstVlanRootHistoryIndex=hpicfRpvstVlanRootHistoryIndex, hpicfRpvstPortVlanRstBpduTx=hpicfRpvstPortVlanRstBpduTx, hpicfRpvstPortVlanTable=hpicfRpvstPortVlanTable, hpicfRpvstPortVlanTcnBpduRx=hpicfRpvstPortVlanTcnBpduRx, hpicfRpvstVlanTopologyChangeRxMacAddress=hpicfRpvstVlanTopologyChangeRxMacAddress, hpicfRpvstPortVlanTxCountersEntry=hpicfRpvstPortVlanTxCountersEntry, hpicfRpvstRootHistoryGroup=hpicfRpvstRootHistoryGroup, hpicfRpvstVlanTopologyChangeTxEntry=hpicfRpvstVlanTopologyChangeTxEntry, hpicfRpvstPortVlanErrantBpduRxCountLastUpdated=hpicfRpvstPortVlanErrantBpduRxCountLastUpdated, hpicfRpvstNewPortRole=hpicfRpvstNewPortRole, hpicfRpvstPortRoleChangeCurrentPortRole=hpicfRpvstPortRoleChangeCurrentPortRole, hpicfRpvstErrantBpduDetector=hpicfRpvstErrantBpduDetector, hpicfRpvstVlanTopologyChangeTxPortId=hpicfRpvstVlanTopologyChangeTxPortId, hpicfRpvstGroups=hpicfRpvstGroups, hpicfRpvstVlanOperHelloTime=hpicfRpvstVlanOperHelloTime, hpicfRpvstLogPortStateTransitions=hpicfRpvstLogPortStateTransitions, hpicfRpvstVlanTopologyChangeTxCurrentPortRole=hpicfRpvstVlanTopologyChangeTxCurrentPortRole, hpicfRpvstSendTopoChangeCtrl=hpicfRpvstSendTopoChangeCtrl, hpicfRpvstPortBpduFiltering=hpicfRpvstPortBpduFiltering, PointToPoint=PointToPoint, hpicfRpvstPortVlanTcDetectCount=hpicfRpvstPortVlanTcDetectCount, hpicfRpvstPortVlanLoopedBackBpduRx=hpicfRpvstPortVlanLoopedBackBpduRx, hpicfRpvstVlanForwardDelay=hpicfRpvstVlanForwardDelay, hpicfRpvstIgnorePVIDInconsistency=hpicfRpvstIgnorePVIDInconsistency, hpicfRpvstVlanTopologyChangeRxTime=hpicfRpvstVlanTopologyChangeRxTime, hpicfRpvstErrantBpduReceived=hpicfRpvstErrantBpduReceived)
