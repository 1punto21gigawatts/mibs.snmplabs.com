#
# PySNMP MIB module ZYXEL-LOOPGUARD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-LOOPGUARD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:50:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter64, IpAddress, ModuleIdentity, NotificationType, Bits, iso, MibIdentifier, Unsigned32, Counter32, Gauge32, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "IpAddress", "ModuleIdentity", "NotificationType", "Bits", "iso", "MibIdentifier", "Unsigned32", "Counter32", "Gauge32", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelLoopGuard = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 45))
if mibBuilder.loadTexts: zyxelLoopGuard.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelLoopGuard.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelLoopGuard.setContactInfo('')
if mibBuilder.loadTexts: zyxelLoopGuard.setDescription('The subtree for loop guard')
zyxelLoopGuardSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 45, 1))
zyxelLoopGuardNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 45, 2))
zyLoopGuardState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 45, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyLoopGuardState.setStatus('current')
if mibBuilder.loadTexts: zyLoopGuardState.setDescription('Enable/Disable loop guard on the switch. Loop guard allows you to configure the switch to shut down a port if it detects that packets sent out on that port loop back to the switch. Loop guard is designed to handle loop problems on the edge of your network. This can occur when a port is connected to a switch that is in a loop state. Loop state occurs as a result of human error. For example, it happens when two ports on a switch are connected with the same cable. When a switch in loop state sends out broadcast messages the messages loop back to the switch and are re-broadcast again and again causing a broadcast storm.')
zyxelLoopGuardPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 45, 1, 2), )
if mibBuilder.loadTexts: zyxelLoopGuardPortTable.setStatus('current')
if mibBuilder.loadTexts: zyxelLoopGuardPortTable.setDescription('The table contains loop guard port configuration.')
zyxelLoopGuardPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 45, 1, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelLoopGuardPortEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelLoopGuardPortEntry.setDescription('An entry contains loop guard port configuration.')
zyLoopGuardPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 45, 1, 2, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyLoopGuardPortState.setStatus('current')
if mibBuilder.loadTexts: zyLoopGuardPortState.setDescription('Enable/Disable loop guard on the port.')
zyLoopGuardLoopDetect = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 45, 2, 1)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: zyLoopGuardLoopDetect.setStatus('current')
if mibBuilder.loadTexts: zyLoopGuardLoopDetect.setDescription('Loop guard shuts down the port for loop is detected.')
mibBuilder.exportSymbols("ZYXEL-LOOPGUARD-MIB", zyxelLoopGuardSetup=zyxelLoopGuardSetup, PYSNMP_MODULE_ID=zyxelLoopGuard, zyxelLoopGuardNotifications=zyxelLoopGuardNotifications, zyxelLoopGuardPortTable=zyxelLoopGuardPortTable, zyxelLoopGuard=zyxelLoopGuard, zyLoopGuardState=zyLoopGuardState, zyLoopGuardPortState=zyLoopGuardPortState, zyLoopGuardLoopDetect=zyLoopGuardLoopDetect, zyxelLoopGuardPortEntry=zyxelLoopGuardPortEntry)
