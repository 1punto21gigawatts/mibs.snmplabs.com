#
# PySNMP MIB module ASCEND-MIBSCRTY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBSCRTY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:28:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, IpAddress, TimeTicks, iso, Gauge32, MibIdentifier, Integer32, ModuleIdentity, Unsigned32, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "TimeTicks", "iso", "Gauge32", "MibIdentifier", "Integer32", "ModuleIdentity", "Unsigned32", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

mibsecurityProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 107))
mibsecurityProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 107, 1), )
if mibBuilder.loadTexts: mibsecurityProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibsecurityProfileTable.setDescription('A list of mibsecurityProfile profile entries.')
mibsecurityProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1), ).setIndexNames((0, "ASCEND-MIBSCRTY-MIB", "securityProfile-Name"))
if mibBuilder.loadTexts: mibsecurityProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibsecurityProfileEntry.setDescription('A mibsecurityProfile entry containing objects that maps to the parameters of mibsecurityProfile profile.')
securityProfile_Name = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 1), DisplayString()).setLabel("securityProfile-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: securityProfile_Name.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_Name.setDescription('Profile name.')
securityProfile_Password = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 2), DisplayString()).setLabel("securityProfile-Password").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_Password.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_Password.setDescription('Password to access the security levels defined by this profile.')
securityProfile_Operations = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-Operations").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_Operations.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_Operations.setDescription('TRUE = able to do things other than look.')
securityProfile_EditSecurity = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-EditSecurity").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_EditSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_EditSecurity.setDescription('TRUE = able to edit the security profiles.')
securityProfile_EditSystem = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-EditSystem").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_EditSystem.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_EditSystem.setDescription('TRUE = able to edit the system profiles.')
securityProfile_EditLine = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-EditLine").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_EditLine.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_EditLine.setDescription('TRUE = able to edit the line profile.')
securityProfile_EditOwnPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-EditOwnPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_EditOwnPort.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_EditOwnPort.setDescription('TRUE = able to edit port associated port profile (for remote terminal).')
securityProfile_EditAllPort = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-EditAllPort").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_EditAllPort.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_EditAllPort.setDescription('TRUE = able to edit all port profiles.')
securityProfile_EditCurCall = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-EditCurCall").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_EditCurCall.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_EditCurCall.setDescription('TRUE = able to edit the current call profile.')
securityProfile_EditOwnCall = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-EditOwnCall").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_EditOwnCall.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_EditOwnCall.setDescription('TRUE = able to edit port associated call profiles (for remote terminal).')
securityProfile_EditComCall = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-EditComCall").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_EditComCall.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_EditComCall.setDescription('TRUE = able to edit the common call profiles (for remote terminal).')
securityProfile_EditAllCall = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-EditAllCall").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_EditAllCall.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_EditAllCall.setDescription('TRUE = able to edit all call profiles.')
securityProfile_SysDiag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-SysDiag").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_SysDiag.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_SysDiag.setDescription('TRUE = able to perform system diagnostics.')
securityProfile_OwnPortDiag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-OwnPortDiag").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_OwnPortDiag.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_OwnPortDiag.setDescription('TRUE = able to perform port associated port diagnostics (for remote terminal).')
securityProfile_AllPortDiag = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-AllPortDiag").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_AllPortDiag.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_AllPortDiag.setDescription('TRUE = able to perform port diagnostics for all ports.')
securityProfile_Download = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-Download").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_Download.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_Download.setDescription('TRUE = able to download configuration.')
securityProfile_Upload = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-Upload").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_Upload.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_Upload.setDescription('TRUE = able to upload configuration.')
securityProfile_FieldService = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-FieldService").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_FieldService.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_FieldService.setDescription('TRUE = able to perform field service.')
securityProfile_UseTacacsPlus = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("securityProfile-UseTacacsPlus").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_UseTacacsPlus.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_UseTacacsPlus.setDescription('Use TACACS+ to authenticate security level changes')
securityProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 107, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("securityProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: securityProfile_Action_o.setDescription('')
mibBuilder.exportSymbols("ASCEND-MIBSCRTY-MIB", securityProfile_Action_o=securityProfile_Action_o, mibsecurityProfileEntry=mibsecurityProfileEntry, securityProfile_EditComCall=securityProfile_EditComCall, securityProfile_EditLine=securityProfile_EditLine, securityProfile_FieldService=securityProfile_FieldService, securityProfile_EditOwnCall=securityProfile_EditOwnCall, securityProfile_Upload=securityProfile_Upload, DisplayString=DisplayString, mibsecurityProfile=mibsecurityProfile, securityProfile_EditCurCall=securityProfile_EditCurCall, securityProfile_Name=securityProfile_Name, securityProfile_Download=securityProfile_Download, securityProfile_UseTacacsPlus=securityProfile_UseTacacsPlus, securityProfile_OwnPortDiag=securityProfile_OwnPortDiag, securityProfile_Operations=securityProfile_Operations, securityProfile_EditSecurity=securityProfile_EditSecurity, securityProfile_AllPortDiag=securityProfile_AllPortDiag, securityProfile_Password=securityProfile_Password, securityProfile_EditSystem=securityProfile_EditSystem, securityProfile_SysDiag=securityProfile_SysDiag, securityProfile_EditAllPort=securityProfile_EditAllPort, mibsecurityProfileTable=mibsecurityProfileTable, securityProfile_EditAllCall=securityProfile_EditAllCall, securityProfile_EditOwnPort=securityProfile_EditOwnPort)
