#
# PySNMP MIB module BAS-FTD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-FTD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
basFtd, = mibBuilder.importSymbols("BAS-MIB", "basFtd")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, Integer32, Gauge32, ModuleIdentity, TimeTicks, NotificationType, MibIdentifier, Unsigned32, Counter32, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "Integer32", "Gauge32", "ModuleIdentity", "TimeTicks", "NotificationType", "MibIdentifier", "Unsigned32", "Counter32", "IpAddress", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
basFtdMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1))
if mibBuilder.loadTexts: basFtdMib.setLastUpdated('9810071415Z')
if mibBuilder.loadTexts: basFtdMib.setOrganization('Broadband Access Systems')
if mibBuilder.loadTexts: basFtdMib.setContactInfo(' Tech Support Broadband Access Systems 4 Technology Drive Westborough, MA 01581 U.S.A. 508-366-8833 support@basystems.com')
if mibBuilder.loadTexts: basFtdMib.setDescription('This MIB module defines the configuration and status MIB objects for a Broadband Access System FTD objects.')
basFtdObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1))
basFtdHeartBeatTimer = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basFtdHeartBeatTimer.setStatus('current')
if mibBuilder.loadTexts: basFtdHeartBeatTimer.setDescription('Timer value in seconds for the FTD heartbeat.')
basFtdTableEligibilityCounter = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdTableEligibilityCounter.setStatus('current')
if mibBuilder.loadTexts: basFtdTableEligibilityCounter.setDescription('Count of the FTD heartbeat timeouts since receiving a table request, i.e. an eligibility cycle.')
basFtdTableEligibilityCounterThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basFtdTableEligibilityCounterThreshold.setStatus('current')
if mibBuilder.loadTexts: basFtdTableEligibilityCounterThreshold.setDescription('Counter threshold (table eligibility counter) defining a time window used to accumulate table requests and stagger their distribution.')
basFtdIdleCounter = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdIdleCounter.setStatus('current')
if mibBuilder.loadTexts: basFtdIdleCounter.setDescription('Count of the FTD heartbeat timeouts in an idle state.')
basFtdIdleCounterThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basFtdIdleCounterThreshold.setStatus('current')
if mibBuilder.loadTexts: basFtdIdleCounterThreshold.setDescription('Counter threshold (idle counter) defining a time window ( in heartbeat units ) used to stagger the transmission of revision packets.')
basFtdTableRequestCounter = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdTableRequestCounter.setStatus('current')
if mibBuilder.loadTexts: basFtdTableRequestCounter.setDescription('Count of FTD table requests during an eligibility cycle.')
basFtdPendingCallbackCounter = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdPendingCallbackCounter.setStatus('current')
if mibBuilder.loadTexts: basFtdPendingCallbackCounter.setDescription('Count of the FTD heartbeat timeouts accumulated while a callback is pending, i.e. a pending cycle.')
basFtdPendingCallbackThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basFtdPendingCallbackThreshold.setStatus('current')
if mibBuilder.loadTexts: basFtdPendingCallbackThreshold.setDescription('Counter threshold (pending callback counter) defining a maximum time window to wait for a callback.')
basFtdBootState = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("null", 1), ("cold", 2), ("warm", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basFtdBootState.setStatus('current')
if mibBuilder.loadTexts: basFtdBootState.setDescription('FTD objects boot state')
basFtdPurgeConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("immediate", 1), ("delayed", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basFtdPurgeConfiguration.setStatus('current')
if mibBuilder.loadTexts: basFtdPurgeConfiguration.setDescription('Configuration for when to purge the forwarding table: immediately or delayed (after a new table has been received).')
basFtdUpdateRequests = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdUpdateRequests.setStatus('current')
if mibBuilder.loadTexts: basFtdUpdateRequests.setDescription('Count of the total number of update requests.')
basFtdUpdatepackets = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdUpdatepackets.setStatus('current')
if mibBuilder.loadTexts: basFtdUpdatepackets.setDescription('Count of the total number of update packets.')
basFtdTableRequests = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdTableRequests.setStatus('current')
if mibBuilder.loadTexts: basFtdTableRequests.setDescription('Count of the total number of table requests.')
basFtdTablePackets = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdTablePackets.setStatus('current')
if mibBuilder.loadTexts: basFtdTablePackets.setDescription('Count of the total number of table packets.')
basFtdAllocatedPackets = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdAllocatedPackets.setStatus('current')
if mibBuilder.loadTexts: basFtdAllocatedPackets.setDescription('Count of the total number of allocated packets.')
basFtdSentPackets = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdSentPackets.setStatus('current')
if mibBuilder.loadTexts: basFtdSentPackets.setDescription('Count of the total number of packets sent.')
basFtdFreedPackets = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdFreedPackets.setStatus('current')
if mibBuilder.loadTexts: basFtdFreedPackets.setDescription('Count of the total number of packets freed.')
basFtdSpuriousUpdatePackets = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdSpuriousUpdatePackets.setStatus('current')
if mibBuilder.loadTexts: basFtdSpuriousUpdatePackets.setDescription('Count of the total number of spurious update packets.')
basFtdSpuriousTablePackets = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdSpuriousTablePackets.setStatus('current')
if mibBuilder.loadTexts: basFtdSpuriousTablePackets.setDescription('Count of the total number of spurious table packets.')
basFtdIgnoredUpdatePackets = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdIgnoredUpdatePackets.setStatus('current')
if mibBuilder.loadTexts: basFtdIgnoredUpdatePackets.setDescription('Count of the total number of ignored update packets.')
basFtdIgnoredTablePackets = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdIgnoredTablePackets.setStatus('current')
if mibBuilder.loadTexts: basFtdIgnoredTablePackets.setDescription('Count of the total number of ignored table packets.')
basFtdInstalledUpdatePackets = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdInstalledUpdatePackets.setStatus('current')
if mibBuilder.loadTexts: basFtdInstalledUpdatePackets.setDescription('Count of the total number of installed update packets.')
basFtdInstalledTablePackets = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdInstalledTablePackets.setStatus('current')
if mibBuilder.loadTexts: basFtdInstalledTablePackets.setDescription('Count of the total number of installed table packets.')
basFtdStoredTablePackets = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdStoredTablePackets.setStatus('current')
if mibBuilder.loadTexts: basFtdStoredTablePackets.setDescription('Count of the total number of stored table packets.')
basFtdRevisionPackets = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdRevisionPackets.setStatus('current')
if mibBuilder.loadTexts: basFtdRevisionPackets.setDescription('Count of the total number of sent(rs) or received (fwd) revision packets.')
basFtdFailureCode = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109))).clone(namedValues=NamedValues(("finite-state-machine", 1), ("dequeue", 2), ("null-table-fia", 3), ("nonnull-update-pkt", 4), ("nonnull-table-pkt", 5), ("pending-threshold", 6), ("uninitialized-storage", 7), ("external", 100), ("rbp-registration", 101), ("unknown-pkt", 102), ("rbp-send", 103), ("rbp-callback", 104), ("packet-allocation", 105), ("packet-corruption", 106), ("rte-error-bad-prefix", 107), ("rte-error-bad-version", 108), ("add-route-failure", 109)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdFailureCode.setStatus('current')
if mibBuilder.loadTexts: basFtdFailureCode.setDescription('Log of the most recent failure code.')
basFtdRevision = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 27), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basFtdRevision.setStatus('current')
if mibBuilder.loadTexts: basFtdRevision.setDescription('FTD update revision (write only for testing).')
basFtdPresentFsmState = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdPresentFsmState.setStatus('current')
if mibBuilder.loadTexts: basFtdPresentFsmState.setDescription('Current FTD finite state maching state.')
basFtdFsmRestarts = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 5, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basFtdFsmRestarts.setStatus('current')
if mibBuilder.loadTexts: basFtdFsmRestarts.setDescription('Count of the total number of FTD object restarts since a cold boot.')
mibBuilder.exportSymbols("BAS-FTD-MIB", basFtdFsmRestarts=basFtdFsmRestarts, basFtdIdleCounterThreshold=basFtdIdleCounterThreshold, basFtdInstalledUpdatePackets=basFtdInstalledUpdatePackets, basFtdIgnoredUpdatePackets=basFtdIgnoredUpdatePackets, basFtdTableRequests=basFtdTableRequests, basFtdUpdateRequests=basFtdUpdateRequests, basFtdObjects=basFtdObjects, basFtdInstalledTablePackets=basFtdInstalledTablePackets, basFtdSpuriousUpdatePackets=basFtdSpuriousUpdatePackets, basFtdBootState=basFtdBootState, basFtdTableEligibilityCounterThreshold=basFtdTableEligibilityCounterThreshold, basFtdIdleCounter=basFtdIdleCounter, basFtdPurgeConfiguration=basFtdPurgeConfiguration, basFtdIgnoredTablePackets=basFtdIgnoredTablePackets, basFtdTableEligibilityCounter=basFtdTableEligibilityCounter, basFtdSpuriousTablePackets=basFtdSpuriousTablePackets, basFtdTableRequestCounter=basFtdTableRequestCounter, basFtdPendingCallbackThreshold=basFtdPendingCallbackThreshold, basFtdMib=basFtdMib, basFtdStoredTablePackets=basFtdStoredTablePackets, basFtdRevisionPackets=basFtdRevisionPackets, basFtdTablePackets=basFtdTablePackets, basFtdFailureCode=basFtdFailureCode, basFtdUpdatepackets=basFtdUpdatepackets, basFtdPresentFsmState=basFtdPresentFsmState, basFtdPendingCallbackCounter=basFtdPendingCallbackCounter, PYSNMP_MODULE_ID=basFtdMib, basFtdHeartBeatTimer=basFtdHeartBeatTimer, basFtdAllocatedPackets=basFtdAllocatedPackets, basFtdSentPackets=basFtdSentPackets, basFtdRevision=basFtdRevision, basFtdFreedPackets=basFtdFreedPackets)
