#
# PySNMP MIB module CISCO-WIRELESS-P2MP-PHY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WIRELESS-P2MP-PHY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:21:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Unsigned32, = mibBuilder.importSymbols("CISCO-TC", "Unsigned32")
CwrOscState, CwrRfFreqRange, CwrRfType = mibBuilder.importSymbols("CISCO-WIRELESS-TC-MIB", "CwrOscState", "CwrRfFreqRange", "CwrRfType")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, MibIdentifier, Gauge32, iso, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, ModuleIdentity, TimeTicks, ObjectIdentity, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "Gauge32", "iso", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "Counter64", "NotificationType")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
ciscoWirelessPhyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 170))
ciscoWirelessPhyMIB.setRevisions(('2000-10-22 19:10', '2000-10-04 19:10', '2000-07-21 19:10',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWirelessPhyMIB.setRevisionsDescriptions(('Changed propWirelessDocsMAC to propDocsWirelessMaclayer', 'Fixed minor typo in spelling of Duplexer Changed valid range for p2mpSuMeasuredPower', 'Redefined p2mpDenyService Redefined p2mpLoopbackTable Added a second index for p2mpSuPowerScanTable',))
if mibBuilder.loadTexts: ciscoWirelessPhyMIB.setLastUpdated('200010221910Z')
if mibBuilder.loadTexts: ciscoWirelessPhyMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoWirelessPhyMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: wireless-nms@cisco.com')
if mibBuilder.loadTexts: ciscoWirelessPhyMIB.setDescription('This is the MIB Module for the Cisco Wireless Radio Point to MultiPoint interface.')
p2mpRadioObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1))
p2mpRadioBaseObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1))
p2mpRadioSuObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2))
p2mpRadioHeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3))
p2mpPhyConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1))
p2mpFreqResourceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2))
p2mpRadioTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 3))
p2mpLedGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 4))
p2mpRadioPhyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1), )
if mibBuilder.loadTexts: p2mpRadioPhyTable.setStatus('current')
if mibBuilder.loadTexts: p2mpRadioPhyTable.setDescription('This table provides facilities to configure the physical layer characteristics of the radio link. The objects in this table are supported on the head end and at the subscriber unit.')
p2mpRadioPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: p2mpRadioPhyEntry.setStatus('current')
if mibBuilder.loadTexts: p2mpRadioPhyEntry.setDescription('The entry of this table is created when the managed system detects a propDocsWirelessMaclayer interface. The entry is removed when the associated propDocsWirelessMaclayer interface is deleted from the ifTable.')
p2mpSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpSelfTest.setStatus('current')
if mibBuilder.loadTexts: p2mpSelfTest.setDescription('This object is used to enable/disable self test. When set to true(1), the software tests the memory and hardware integrity shortly after the router powers up.')
p2mpDiversityAntennaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpDiversityAntennaPresent.setStatus('current')
if mibBuilder.loadTexts: p2mpDiversityAntennaPresent.setDescription('When true(1), this object indicates that a diversity antenna is being used to receive the wireless transmissions. When false(2), the radio system is using a single antenna to transmit and receive.')
p2mpCableLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpCableLoss.setStatus('current')
if mibBuilder.loadTexts: p2mpCableLoss.setDescription('This object indicates the measured signal power loss in dB due to the cable connecting the radio to the main antenna. The hardware compensates for this cable loss by adjusting the receive and transmit gain appropriately. A value of 0 indicates no degradation in the signal due to the cable. The radio hardware can compensate for a cable loss of no more than 15 db. This cable loss applies to the main antenna only.')
p2mpCableLossDiversity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpCableLossDiversity.setStatus('current')
if mibBuilder.loadTexts: p2mpCableLossDiversity.setDescription('This object indicates the measured signal power loss in dB due to the cable connecting the radio to the diversity antenna. The hardware compensates for this loss by adjusting the receive and transmit gain appropriately. A value of 0 indicates no degradation in the signal due to the cable. The radio hardware can compensate for a cable loss of no more than 15 dB. This cable loss applies to the diversity antenna only.')
p2mpDenyService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDenyService.setStatus('current')
if mibBuilder.loadTexts: p2mpDenyService.setDescription("Indicates if the service is disabled in the unit. For Head-end unit, if this object has the value of 'true', the link is in loopback mode; otherwise the link is enabled for transmitting / receiving data. For Subscriber unit, if this object has the value of 'true', the subscriber unit service is disabled; otherwise, the subscriber unit is enabled for transmitting / receiving data")
p2mpClockRefExt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpClockRefExt.setStatus('current')
if mibBuilder.loadTexts: p2mpClockRefExt.setDescription("This object controls the use of external reference clock for IF module as follows: 'true(1)' - an external reference clock is used 'false(2)' - an internal reference clock is used.")
p2mpCommonTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpCommonTrapEnable.setStatus('current')
if mibBuilder.loadTexts: p2mpCommonTrapEnable.setDescription('When set to true(1), the notifications common to the head end and subscriber unit are enabled. When set to false(2), these notifications are disabled. The notification controlled by this object are: - p2mpRadioPhyFailNotification - p2mpTrapRfSupplyVoltage - p2mpTrapRfRxOsc - p2mpTrapRfTxOsc - p2mpTrapRfTemp - p2mpTrapRfCommLinkError - p2mpTrapTxPower - p2mpTrapRfStatusChange')
p2mpLastPhyFailureType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("p2mpHwConfigUnsupported", 2), ("p2mpHwConfigMismatch", 3), ("p2mpHwInitFailure", 4), ("p2mpHostIfCommLinkError", 5), ("p2mpAutoCableCompFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpLastPhyFailureType.setStatus('current')
if mibBuilder.loadTexts: p2mpLastPhyFailureType.setDescription('This object indicates the last physical link failure that resulted in a p2mpRadioPhyFailNotification trap. none(1) - no failure p2mpHwConfigUnsupported(2) - The radio subsystem has detected that the configuration requested is not supported by the hardware. The p2mpLastPhyFailureReason variable will indicate which configuration parameter is not supported. p2mpHwConfigMismatch(3) - The radio subsystem has detected that the combination of the configuration parameters requested is inconsistent and cannot be supported. The p2mpLastPhyFailReason variable will indicate the configuration parameter that causes the mismatch. p2mpHwInitFailure(4) - The radio subsystem has failed to initialize the hardware. This implies that there is a critical error condition in the associated hardware. The p2mpLastPhyFailReason specifies the reason why the init failed. p2mpHostIfCommLinkError(5) - The host could not communicate with the IF module. p2mpAutoCableCompFailure(6) - Failed to achieve automatic cable compensation due to loss of Tx signal.')
p2mpLastPhyFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpLastPhyFailureReason.setStatus('current')
if mibBuilder.loadTexts: p2mpLastPhyFailureReason.setDescription('This is a text string that describes the last physical link failure identified by p2mpLastPhyFailureType.')
p2mpRfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1), )
if mibBuilder.loadTexts: p2mpRfTable.setStatus('current')
if mibBuilder.loadTexts: p2mpRfTable.setDescription('This table contains information about the state of the radio frequency resources used by the radio system. Physically each RF resource may be realized by one antenna and its associated control hardware. A single antenna and its associated electronics may act as more than 1 RF resource. When an RF resource acts as both a transmit and receive resource, the transmit and receive frequency ranges may overlap.')
p2mpRfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfIndex"))
if mibBuilder.loadTexts: p2mpRfEntry.setStatus('current')
if mibBuilder.loadTexts: p2mpRfEntry.setDescription('This represents one entry in the p2mpRfTable. An entry is created in this table when the managed system detects a RF resource. The entry is removed when the RF resource is removed from the wireless system.')
p2mpRfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: p2mpRfIndex.setStatus('current')
if mibBuilder.loadTexts: p2mpRfIndex.setDescription('This object, along with the ifIndex of the MAC layer, represents the index of this entry in the p2mpRfTable. Each entry in the table provides details on the state of the RF resources available in the system.')
p2mpRfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 2), CwrRfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfType.setStatus('current')
if mibBuilder.loadTexts: p2mpRfType.setDescription('This object identifies the RF resource.')
p2mpRfOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("receiveOnly", 1), ("transmitOnly", 2), ("transmitAndReceive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfOpMode.setStatus('current')
if mibBuilder.loadTexts: p2mpRfOpMode.setDescription('This object specifies whether this RF resource can either transmit, receive, or do both.')
p2mpTxFreqRangeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 4), CwrRfFreqRange()).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpTxFreqRangeMin.setStatus('current')
if mibBuilder.loadTexts: p2mpTxFreqRangeMin.setDescription('This object represents the minimum frequency at which this RF resource can transmit.')
p2mpTxFreqRangeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 5), CwrRfFreqRange()).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpTxFreqRangeMax.setStatus('current')
if mibBuilder.loadTexts: p2mpTxFreqRangeMax.setDescription('This object represents the maximum frequency at which this RF resource can transmit.')
p2mpRxFreqRangeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 6), CwrRfFreqRange()).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRxFreqRangeMin.setStatus('current')
if mibBuilder.loadTexts: p2mpRxFreqRangeMin.setDescription('This object represents the lowest transmission frequency this RF resource can receive. ')
p2mpRxFreqRangeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 7), CwrRfFreqRange()).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRxFreqRangeMax.setStatus('current')
if mibBuilder.loadTexts: p2mpRxFreqRangeMax.setDescription('This object represents the highest transmission frequency that this RF resource can receive.')
p2mpMinTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, 50))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpMinTxPower.setStatus('current')
if mibBuilder.loadTexts: p2mpMinTxPower.setDescription('This object represents the minimum power that the RF subsystem can supply the antenna. ')
p2mpMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, 50))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpMaxTxPower.setStatus('current')
if mibBuilder.loadTexts: p2mpMaxTxPower.setDescription('This object represents the maximum power that the RF subsystem can supply the antenna.')
p2mpRfTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 100))).setUnits('Degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfTemperature.setStatus('current')
if mibBuilder.loadTexts: p2mpRfTemperature.setDescription('This object represents the current temperature of the RF unit')
p2mpRfTxOscState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 11), CwrOscState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfTxOscState.setStatus('current')
if mibBuilder.loadTexts: p2mpRfTxOscState.setDescription('This object represents the state of the transmit oscillator. The oscillator must be in oscillatorOk(1) state for the system to function properly.')
p2mpRfRxOscState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 12), CwrOscState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfRxOscState.setStatus('current')
if mibBuilder.loadTexts: p2mpRfRxOscState.setDescription('This object represents the state of the receive oscillator. The oscillator must be in oscillatorOk(1) state for the system to function properly.')
p2mpRfSupplyVoltageState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("withinSpecification", 1), ("outsideSpecification", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfSupplyVoltageState.setStatus('current')
if mibBuilder.loadTexts: p2mpRfSupplyVoltageState.setDescription('This object specifies whether the voltage supply to the RF unit is within specifications or not. Voltage specifications are hardware dependent.')
p2mpRfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfStatus.setStatus('current')
if mibBuilder.loadTexts: p2mpRfStatus.setDescription('This object specifies whether the RF resource is functioning properly. If it is functioning properly then it will be online(1), else offline(2). At the Subscriber Unit, this object will reflect offline(2) if p2mpTxMuteEnable in the p2mpSuRadioPhyTable is true(1).')
p2mpRfLoopbackSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfLoopbackSupported.setStatus('current')
if mibBuilder.loadTexts: p2mpRfLoopbackSupported.setDescription('This object indicates if the RF unit supports loopback. When true(1), the user can configure loopback using the objects in p2mpLoopbackTable. When false(2), any attempt to configure RF loopback will fail. ')
p2mpDuplexerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2), )
if mibBuilder.loadTexts: p2mpDuplexerTable.setStatus('current')
if mibBuilder.loadTexts: p2mpDuplexerTable.setDescription('This table contains information about the Duplexers available for use on the system. A Duplexer is a mechanical device, that acts as a band pass filter when installed in an RF resource. Normally a RF resource is capable of operating over a wide frequency range. To operate at restricted frequencies, the user has to own that part of the frequency spectrum. Since the user may not own parts of the frequency spectrum over which the RF resource may operate, a duplexer is installed at the RF. This restricts the RF resource to operate in the passband defined by the duplexer.')
p2mpDuplexerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerIndex"))
if mibBuilder.loadTexts: p2mpDuplexerEntry.setStatus('current')
if mibBuilder.loadTexts: p2mpDuplexerEntry.setDescription('This represents one entry in the p2mpDuplexerTable. Each entry contains information about the duplexers capabilities and the associated RF resource. An entry is created in this table when the managed system detects a RF resource. The entry is removed when the RF resource is removed from the wireless system.')
p2mpDuplexerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: p2mpDuplexerIndex.setStatus('current')
if mibBuilder.loadTexts: p2mpDuplexerIndex.setDescription("This object, along with ifIndex, uniquely identifies an entry in this table. Each entry contains information about the duplexer's capabilities and also identifies the associated RF resource.")
p2mpDuplexerRF = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 2), CwrRfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDuplexerRF.setStatus('current')
if mibBuilder.loadTexts: p2mpDuplexerRF.setDescription('This object identifies the RF resource associated with this duplexer.')
p2mpDuplexerLoPassbandMinFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 3), CwrRfFreqRange()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDuplexerLoPassbandMinFreq.setStatus('current')
if mibBuilder.loadTexts: p2mpDuplexerLoPassbandMinFreq.setDescription('This object identifies the minimum frequency in the low passband that this duplexer will pass through without attenuation.')
p2mpDuplexerLoPassbandMaxFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 4), CwrRfFreqRange()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDuplexerLoPassbandMaxFreq.setStatus('current')
if mibBuilder.loadTexts: p2mpDuplexerLoPassbandMaxFreq.setDescription('This object identifies the maximum frequency in the low passband that this duplexer will pass through without attenuation.')
p2mpDuplexerHiPassbandMinFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 5), CwrRfFreqRange()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDuplexerHiPassbandMinFreq.setStatus('current')
if mibBuilder.loadTexts: p2mpDuplexerHiPassbandMinFreq.setDescription('This object identifies the minimum frequency in the high passband that this duplexer will pass through without attenuation.')
p2mpDuplexerHiPassbandMaxFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 6), CwrRfFreqRange()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDuplexerHiPassbandMaxFreq.setStatus('current')
if mibBuilder.loadTexts: p2mpDuplexerHiPassbandMaxFreq.setDescription('This object identifies the maximum frequency in the high passband that this duplexer will pass through without attenuation.')
p2mpDuplexerReceivePassband = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loPassband", 1), ("hiPassband", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDuplexerReceivePassband.setStatus('current')
if mibBuilder.loadTexts: p2mpDuplexerReceivePassband.setDescription('This object indicates which of the two passbands are being used to receive transmissions. The RF Resource can receive on either of the duplexer passbands. loPassband(1) - The RF Resource is receiving on a frequency in the low passband. hiPassband(2) - The RF Resource is receiving on a frequency in the high passband.')
p2mpDuplexerTxInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 8), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDuplexerTxInsertionLoss.setStatus('current')
if mibBuilder.loadTexts: p2mpDuplexerTxInsertionLoss.setDescription("This object represents the loss in 'dB' that would result in the transmission path due to the duplexer.")
p2mpDuplexerBurnDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDuplexerBurnDate.setStatus('current')
if mibBuilder.loadTexts: p2mpDuplexerBurnDate.setDescription('This object indicates the date when the revision information was programmed into non-volatile memory.')
p2mpAntennaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3), )
if mibBuilder.loadTexts: p2mpAntennaTable.setStatus('current')
if mibBuilder.loadTexts: p2mpAntennaTable.setDescription('This table contains information about the antennas available in the system.')
p2mpAntennaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpAntennaIndex"))
if mibBuilder.loadTexts: p2mpAntennaEntry.setStatus('current')
if mibBuilder.loadTexts: p2mpAntennaEntry.setDescription('An entry is created in this table when the managed system detects a RF resource. The entry is removed when the RF resource is removed from the wireless system.')
p2mpAntennaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: p2mpAntennaIndex.setStatus('current')
if mibBuilder.loadTexts: p2mpAntennaIndex.setDescription('This object, along with ifIndex, represents the index of this entry in the p2mpAntennaTable.')
p2mpRfResource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1, 2), CwrRfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfResource.setStatus('current')
if mibBuilder.loadTexts: p2mpRfResource.setDescription('This object identifies if the antenna is connected to the main or the diversity RF resource.')
p2mpAntennaXDim = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setUnits('Inches').setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpAntennaXDim.setStatus('current')
if mibBuilder.loadTexts: p2mpAntennaXDim.setDescription('This object represents the dimension of the antenna in the X direction.')
p2mpAntennaYDim = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setUnits('Inches').setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpAntennaYDim.setStatus('current')
if mibBuilder.loadTexts: p2mpAntennaYDim.setDescription('This object represents the dimension of the antenna in the Y direction.')
p2mpAntennaType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpAntennaType.setStatus('current')
if mibBuilder.loadTexts: p2mpAntennaType.setDescription("This object represents the antenna type. For example, 'dish-antenna'.")
p2mpAntennaDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpAntennaDescr.setStatus('current')
if mibBuilder.loadTexts: p2mpAntennaDescr.setDescription("This object is used to describe the antenna. For example, it could be used to identify the manufacturer like in 'Manufactured by Watkins Johnson'.")
p2mpAntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('dBi : decibel Isotropic').setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpAntennaGain.setStatus('current')
if mibBuilder.loadTexts: p2mpAntennaGain.setDescription('This object represents the receive and transmit gain of this antenna.')
p2mpAntennaPolarization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vertical", 1), ("horizontal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpAntennaPolarization.setStatus('current')
if mibBuilder.loadTexts: p2mpAntennaPolarization.setDescription('This object represents the polarization of the antanna.')
p2mpLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 3, 1), )
if mibBuilder.loadTexts: p2mpLoopbackTable.setStatus('current')
if mibBuilder.loadTexts: p2mpLoopbackTable.setDescription('This table provides facilities to establish loopback points to exercise various sections of the hardware.')
p2mpLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: p2mpLoopbackEntry.setStatus('current')
if mibBuilder.loadTexts: p2mpLoopbackEntry.setDescription('This represents one entry in the p2mpLoopbackTable. It is created when the managed system detects a propDocsWirelessMaclayer interface. The entry is removed when the associated propDocsWirelessMaclayer interface is deleted from the ifTable.')
p2mpLocalLoopbackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoopback", 1), ("fir", 2), ("if", 3), ("rf", 4))).clone('noLoopback')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpLocalLoopbackMode.setStatus('current')
if mibBuilder.loadTexts: p2mpLocalLoopbackMode.setDescription('This object is used to configure the system in loopback mode prior to executing some system diagnostic tests. The user selects the point in the system where the data signal should be looped back. The diagnostic tests outlined in the user manual have to be manually executed to determine success or failure. Once all the tests are completed, normal operation is restored by setting this object to noLoopback(1). noLoopback(1) - no loopback fir(2) - loopback at the Finite Impulse Response (FIR) module. if(3) - loopback at the IF module. This exercises the FIR, and IF modules. rf(4) - loopback at the RF unit. This exercises the FIR, IF, and RF modules. This mode is supported only when p2mpRfLoopbackSupported is true(1).')
p2mpLocalLoopbackAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 3, 1, 1, 2), CwrRfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpLocalLoopbackAntenna.setStatus('current')
if mibBuilder.loadTexts: p2mpLocalLoopbackAntenna.setDescription("This object identifies the RF resource used for loopback testing. This object is not applicable for loopback testing when p2mpLocalLoopbackMode has a value of 'noLoopback(1)'.")
p2mpLocalLoopbackChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpLocalLoopbackChannel.setStatus('current')
if mibBuilder.loadTexts: p2mpLocalLoopbackChannel.setDescription("This object identifies the channel being used to loopback the data. This object is not applicable for loopback testing when p2mpLocalLoopbackMode has a value of 'noLoopback(1)'.")
p2mpLedTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 4, 1), )
if mibBuilder.loadTexts: p2mpLedTable.setStatus('current')
if mibBuilder.loadTexts: p2mpLedTable.setDescription('Entity (Light emitting diode) LED information. For each LED on the entity, an entry will exist in this table, describing the location and current status of that LED.')
p2mpLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 4, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLedIndex"))
if mibBuilder.loadTexts: p2mpLedEntry.setStatus('current')
if mibBuilder.loadTexts: p2mpLedEntry.setDescription("An entry in the table, containing the LED information. The entPhysicalIndex identifies the entity on which the LED's are present.")
p2mpLedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: p2mpLedIndex.setStatus('current')
if mibBuilder.loadTexts: p2mpLedIndex.setDescription('For a given entPhysicalIndex, this index value uniquely identifies an entry in the p2mpLedTable.')
p2mpLedType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("interfaceEnable", 0), ("majorAlarm", 1), ("minorAlarm", 2), ("outOfService", 3), ("carrier", 4), ("transmitData", 5), ("receiveData", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpLedType.setStatus('current')
if mibBuilder.loadTexts: p2mpLedType.setDescription('Indicates the type or label of the LED.')
p2mpLedState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("green", 1), ("yellow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpLedState.setStatus('current')
if mibBuilder.loadTexts: p2mpLedState.setDescription('Indicates the state of the LED.')
p2mpSuRadioPhyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 1), )
if mibBuilder.loadTexts: p2mpSuRadioPhyTable.setStatus('current')
if mibBuilder.loadTexts: p2mpSuRadioPhyTable.setDescription('This table contains information about the currently configured physical layer interfaces in the subscriber unit.')
p2mpSuRadioPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: p2mpSuRadioPhyEntry.setStatus('current')
if mibBuilder.loadTexts: p2mpSuRadioPhyEntry.setDescription('An entry containing the radio configuration information of the propDocsWirelessMaclayer interface in the subscriber unit. The entry is created when a propDocsWirelessMaclayer interface is detected in the subscriber unit. The entry is deleted when the associated propDocsWirelessMaclayer interface is removed.')
p2mpSuTxMuteEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpSuTxMuteEnable.setStatus('current')
if mibBuilder.loadTexts: p2mpSuTxMuteEnable.setDescription('When true(1), this object indicates the subscriber unit transmission has been turned off for a duration indicated by p2mpSuTxMuteDuration. When false(2), this object indicates that the subscriber unit is transmitting.')
p2mpSuTxMuteDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpSuTxMuteDuration.setStatus('current')
if mibBuilder.loadTexts: p2mpSuTxMuteDuration.setDescription(' This object indicates the duration of time (in minutes) for which the subscriber transmission will be turned off. ')
p2mpSuPowerScanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 2), )
if mibBuilder.loadTexts: p2mpSuPowerScanTable.setStatus('current')
if mibBuilder.loadTexts: p2mpSuPowerScanTable.setDescription('This table contains information about the receive power measured at the different possible center frequencies.')
p2mpSuPowerScanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpSuPowerScanIndex"))
if mibBuilder.loadTexts: p2mpSuPowerScanEntry.setStatus('current')
if mibBuilder.loadTexts: p2mpSuPowerScanEntry.setDescription('An entry containing the power related status information of the propDocsWirelessMaclayer interface in the subscriber unit. The entry is created when a propDocsWirelessMaclayer interface is detected in the subscriber unit. The entry is deleted after the associated propDocsWirelessMaylayer interface is removed.')
p2mpSuPowerScanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: p2mpSuPowerScanIndex.setStatus('current')
if mibBuilder.loadTexts: p2mpSuPowerScanIndex.setDescription('For a given ifIndex, this index value uniquely identifies an entry in the p2mpSuPowerScanTable.')
p2mpSuCenterFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 2, 1, 2), CwrRfFreqRange()).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpSuCenterFrequency.setStatus('current')
if mibBuilder.loadTexts: p2mpSuCenterFrequency.setDescription('This object indicates the frequency at which the receive power at the subscriber unit was measured.')
p2mpSuMeasuredPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 50))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpSuMeasuredPower.setStatus('current')
if mibBuilder.loadTexts: p2mpSuMeasuredPower.setDescription('This object represents the power measured at the frequency indicated by p2mpSuCenterFrequency.')
p2mpHeAlcTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 1), )
if mibBuilder.loadTexts: p2mpHeAlcTable.setStatus('current')
if mibBuilder.loadTexts: p2mpHeAlcTable.setDescription('This table contains Automatic Line Control (ALC) configuration information. It is supported at the head end only.')
p2mpHeAlcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: p2mpHeAlcEntry.setStatus('current')
if mibBuilder.loadTexts: p2mpHeAlcEntry.setDescription('An entry containing the ALC configuration information the propDocsWirelessMaylayer interface at the head end. The entry is created when a propDocsWirelessMaclayer interface is detected in the head end unit. The entry is deleted after the associated propDocsWirelessMaclayer interface is removed.')
p2mpHeAlcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpHeAlcEnable.setStatus('current')
if mibBuilder.loadTexts: p2mpHeAlcEnable.setDescription('This object is used to enable/disable ALC at the Head End. A value of true(1), indicates that ALC is enabled.')
p2mpHeAlcInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32, 1024))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpHeAlcInterval.setStatus('current')
if mibBuilder.loadTexts: p2mpHeAlcInterval.setDescription("This object represents the scheduling interval. It is the regular interval at which the ALC grant in Map is transmitted to the SU's")
p2mpHeAlcNumMiniSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpHeAlcNumMiniSlots.setStatus('current')
if mibBuilder.loadTexts: p2mpHeAlcNumMiniSlots.setDescription('This indicates the number of minislots within each grant.')
p2mpHeIntFreqTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 2), )
if mibBuilder.loadTexts: p2mpHeIntFreqTable.setStatus('current')
if mibBuilder.loadTexts: p2mpHeIntFreqTable.setDescription('This table contains information about the state of the intermediate frequency subsystem in the radio system. This table is supported at the head end only.')
p2mpHeIntFreqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: p2mpHeIntFreqEntry.setStatus('current')
if mibBuilder.loadTexts: p2mpHeIntFreqEntry.setDescription('The entry of this table is created when the managed system detects a propDocsWirelessMaclayer interface in the head end unit. The entry is deleted when the associated propDocsWirelessMaclayer interface is removed.')
p2mpHeIfTxOscState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 2, 1, 1), CwrOscState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpHeIfTxOscState.setStatus('current')
if mibBuilder.loadTexts: p2mpHeIfTxOscState.setDescription('This object indicates the state of the IF transmit oscillator. The oscillator must be in oscillatorOk(1) state for the system to function properly.')
p2mpHeIfRxOscState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 2, 1, 2), CwrOscState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpHeIfRxOscState.setStatus('current')
if mibBuilder.loadTexts: p2mpHeIfRxOscState.setDescription('This object indicates the state of the IF receive oscillator. The oscillator must be in oscillatorOk(1) state for the system to function properly.')
p2mpHeIfRefOscState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 2, 1, 3), CwrOscState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpHeIfRefOscState.setStatus('current')
if mibBuilder.loadTexts: p2mpHeIfRefOscState.setDescription('This object indicates the state of the IF reference oscillator. The oscillator must be in oscillatorOk(1) state for the system to function properly.')
p2mpHeIfInpFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 500000))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpHeIfInpFreq.setStatus('current')
if mibBuilder.loadTexts: p2mpHeIfInpFreq.setDescription('This object represents the IF input frequency.')
p2mpHeIfOutFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 500000))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpHeIfOutFreq.setStatus('current')
if mibBuilder.loadTexts: p2mpHeIfOutFreq.setDescription('This object represents the IF output frequency.')
p2mpHeTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 2, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpHeTrapEnable.setStatus('current')
if mibBuilder.loadTexts: p2mpHeTrapEnable.setDescription('When set to true(1), this enables the notifications that are specific to the head end. When set to false(2), these notifications are disabled.')
p2mpPhyMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 2))
p2mpPhyMIBNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0))
p2mpRadioPhyFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 1)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLastPhyFailureType"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLastPhyFailureReason"))
if mibBuilder.loadTexts: p2mpRadioPhyFailNotification.setStatus('current')
if mibBuilder.loadTexts: p2mpRadioPhyFailNotification.setDescription('A p2mpRadioPhyFailNotification is sent if the value of p2mpLastPhyFailureType changes due to the new failure being detected in the Radio interface.')
p2mpTrapRfSupplyVoltage = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 2)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfSupplyVoltageState"))
if mibBuilder.loadTexts: p2mpTrapRfSupplyVoltage.setStatus('current')
if mibBuilder.loadTexts: p2mpTrapRfSupplyVoltage.setDescription('The supply voltage to the RF resource has changed. The p2mpRfSupplyVoltageState specifies whether the supply voltage is in spec or not.')
p2mpTrapRfRxOsc = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 3)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfRxOscState"))
if mibBuilder.loadTexts: p2mpTrapRfRxOsc.setStatus('current')
if mibBuilder.loadTexts: p2mpTrapRfRxOsc.setDescription('The RF receive frequency oscillator has changed state. The p2mpRfRxOscState specifies the current state of the oscillator.')
p2mpTrapRfTxOsc = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 4)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfTxOscState"))
if mibBuilder.loadTexts: p2mpTrapRfTxOsc.setStatus('current')
if mibBuilder.loadTexts: p2mpTrapRfTxOsc.setDescription('The RF transmit frequency oscillator has changed state. The p2mpRfRxOscState specifies the state of the oscillator.')
p2mpTrapRfTemp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 5)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfTemperature"))
if mibBuilder.loadTexts: p2mpTrapRfTemp.setStatus('current')
if mibBuilder.loadTexts: p2mpTrapRfTemp.setDescription('The temperature of the RF module identified by p2mpRfIndex has exceeded a defined reference.')
p2mpTrapRfCommLinkError = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 6)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfType"))
if mibBuilder.loadTexts: p2mpTrapRfCommLinkError.setStatus('current')
if mibBuilder.loadTexts: p2mpTrapRfCommLinkError.setDescription('This trap indicates that the host and the IF module cannot communicate with the RF resource identified by p2mpRfType.')
p2mpTrapTxPower = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 7)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfType"))
if mibBuilder.loadTexts: p2mpTrapTxPower.setStatus('current')
if mibBuilder.loadTexts: p2mpTrapTxPower.setDescription('This trap indicates that the transmit power for the RF resource identified by p2mpRfType exceeded a predefined threshold.')
p2mpTrapRfStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 8)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfStatus"))
if mibBuilder.loadTexts: p2mpTrapRfStatusChange.setStatus('current')
if mibBuilder.loadTexts: p2mpTrapRfStatusChange.setDescription('This trap indicates that the RF resource either came online(1) or went offline(2).')
p2mpTrapHeIfRxOsc = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 9)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeIfRxOscState"))
if mibBuilder.loadTexts: p2mpTrapHeIfRxOsc.setStatus('current')
if mibBuilder.loadTexts: p2mpTrapHeIfRxOsc.setDescription('The IF receive frequency oscillator has changed state.')
p2mpTrapHeIfTxOsc = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 10)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeIfTxOscState"))
if mibBuilder.loadTexts: p2mpTrapHeIfTxOsc.setStatus('current')
if mibBuilder.loadTexts: p2mpTrapHeIfTxOsc.setDescription('The IF transmit frequency oscillator has changed state.')
p2mpTrapHeIfExtRefOsc = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 11)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeIfRefOscState"))
if mibBuilder.loadTexts: p2mpTrapHeIfExtRefOsc.setStatus('current')
if mibBuilder.loadTexts: p2mpTrapHeIfExtRefOsc.setDescription('The IF Reference Frequency oscillator has changed state.')
p2mpRadioPhyConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4))
p2mpRadioPhyCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 1))
p2mpRadioPhyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 2))
p2mpRadioPhyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 1, 1)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpCommonRadioGroup"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpCommonRfGroup"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpCommonTestGroup"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRadioSuGroup"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRadioHeGroup"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRadioAntennaGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    p2mpRadioPhyCompliance = p2mpRadioPhyCompliance.setStatus('current')
if mibBuilder.loadTexts: p2mpRadioPhyCompliance.setDescription('The compliance statement for devices that implement Point to Multipoint wireless interfaces compliant with the Cisco Systems Inc. specification.')
p2mpCommonRadioGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 2, 1)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpSelfTest"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDiversityAntennaPresent"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpCableLoss"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpCableLossDiversity"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDenyService"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpClockRefExt"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpCommonTrapEnable"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLastPhyFailureType"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLastPhyFailureReason"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLedType"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLedState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    p2mpCommonRadioGroup = p2mpCommonRadioGroup.setStatus('current')
if mibBuilder.loadTexts: p2mpCommonRadioGroup.setDescription('Mandatory group of objects implemented to configure a point to multipoint wireless radio.')
p2mpCommonRfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 2, 2)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfType"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfOpMode"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpTxFreqRangeMin"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpTxFreqRangeMax"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRxFreqRangeMin"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRxFreqRangeMax"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpMinTxPower"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpMaxTxPower"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfTxOscState"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfRxOscState"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfTemperature"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfSupplyVoltageState"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfStatus"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfLoopbackSupported"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerRF"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerLoPassbandMinFreq"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerLoPassbandMaxFreq"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerHiPassbandMinFreq"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerHiPassbandMaxFreq"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerReceivePassband"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerTxInsertionLoss"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerBurnDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    p2mpCommonRfGroup = p2mpCommonRfGroup.setStatus('current')
if mibBuilder.loadTexts: p2mpCommonRfGroup.setDescription('Mandatory group of objects implemented to tune the phy quality in a point to multipoint wireless radio.')
p2mpCommonTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 2, 3)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLocalLoopbackMode"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLocalLoopbackAntenna"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLocalLoopbackChannel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    p2mpCommonTestGroup = p2mpCommonTestGroup.setStatus('current')
if mibBuilder.loadTexts: p2mpCommonTestGroup.setDescription('Mandatory group of objects implemented in the point to multi point wireless system for Testing the link.')
p2mpRadioSuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 2, 5)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpSuTxMuteEnable"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpSuTxMuteDuration"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpSuCenterFrequency"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpSuMeasuredPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    p2mpRadioSuGroup = p2mpRadioSuGroup.setStatus('current')
if mibBuilder.loadTexts: p2mpRadioSuGroup.setDescription('Group of objects implemented at the Subscriber unit.')
p2mpRadioHeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 2, 6)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeAlcEnable"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeAlcInterval"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeAlcNumMiniSlots"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeIfTxOscState"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeIfRxOscState"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeIfRefOscState"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeIfInpFreq"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeIfOutFreq"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    p2mpRadioHeGroup = p2mpRadioHeGroup.setStatus('current')
if mibBuilder.loadTexts: p2mpRadioHeGroup.setDescription('Group of objects implemented at the Head End.')
p2mpRadioAntennaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 2, 8)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfResource"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpAntennaXDim"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpAntennaYDim"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpAntennaType"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpAntennaDescr"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpAntennaGain"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpAntennaPolarization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    p2mpRadioAntennaGroup = p2mpRadioAntennaGroup.setStatus('current')
if mibBuilder.loadTexts: p2mpRadioAntennaGroup.setDescription('Group of objects implemented in the point to multi point wireless system for managing the antennas available in the system.')
mibBuilder.exportSymbols("CISCO-WIRELESS-P2MP-PHY-MIB", p2mpDuplexerLoPassbandMaxFreq=p2mpDuplexerLoPassbandMaxFreq, p2mpRadioPhyGroups=p2mpRadioPhyGroups, p2mpAntennaIndex=p2mpAntennaIndex, p2mpAntennaDescr=p2mpAntennaDescr, p2mpLedState=p2mpLedState, p2mpRfEntry=p2mpRfEntry, p2mpHeIfInpFreq=p2mpHeIfInpFreq, p2mpSuPowerScanIndex=p2mpSuPowerScanIndex, p2mpRadioPhyCompliances=p2mpRadioPhyCompliances, p2mpSuTxMuteEnable=p2mpSuTxMuteEnable, p2mpAntennaTable=p2mpAntennaTable, p2mpHeTrapEnable=p2mpHeTrapEnable, p2mpCommonRadioGroup=p2mpCommonRadioGroup, p2mpSuPowerScanEntry=p2mpSuPowerScanEntry, p2mpTrapRfTxOsc=p2mpTrapRfTxOsc, p2mpRadioSuObjects=p2mpRadioSuObjects, p2mpDuplexerTable=p2mpDuplexerTable, p2mpRadioObjects=p2mpRadioObjects, p2mpTxFreqRangeMax=p2mpTxFreqRangeMax, p2mpDuplexerRF=p2mpDuplexerRF, p2mpRfStatus=p2mpRfStatus, p2mpLoopbackEntry=p2mpLoopbackEntry, p2mpLedTable=p2mpLedTable, p2mpFreqResourceGroup=p2mpFreqResourceGroup, p2mpPhyConfigGroup=p2mpPhyConfigGroup, p2mpLastPhyFailureReason=p2mpLastPhyFailureReason, p2mpRfType=p2mpRfType, p2mpSuMeasuredPower=p2mpSuMeasuredPower, p2mpHeAlcInterval=p2mpHeAlcInterval, p2mpHeIfTxOscState=p2mpHeIfTxOscState, p2mpLastPhyFailureType=p2mpLastPhyFailureType, p2mpRadioPhyTable=p2mpRadioPhyTable, p2mpTrapHeIfTxOsc=p2mpTrapHeIfTxOsc, p2mpDuplexerIndex=p2mpDuplexerIndex, p2mpHeIfRxOscState=p2mpHeIfRxOscState, p2mpTrapRfTemp=p2mpTrapRfTemp, p2mpRfTxOscState=p2mpRfTxOscState, p2mpAntennaType=p2mpAntennaType, p2mpSelfTest=p2mpSelfTest, p2mpDuplexerHiPassbandMaxFreq=p2mpDuplexerHiPassbandMaxFreq, p2mpSuRadioPhyTable=p2mpSuRadioPhyTable, p2mpRadioPhyCompliance=p2mpRadioPhyCompliance, p2mpDuplexerBurnDate=p2mpDuplexerBurnDate, p2mpLedGroup=p2mpLedGroup, p2mpRadioAntennaGroup=p2mpRadioAntennaGroup, p2mpPhyMIBNotification=p2mpPhyMIBNotification, p2mpLoopbackTable=p2mpLoopbackTable, p2mpHeAlcEntry=p2mpHeAlcEntry, p2mpLocalLoopbackAntenna=p2mpLocalLoopbackAntenna, p2mpSuPowerScanTable=p2mpSuPowerScanTable, p2mpAntennaXDim=p2mpAntennaXDim, p2mpSuTxMuteDuration=p2mpSuTxMuteDuration, p2mpRadioHeGroup=p2mpRadioHeGroup, p2mpAntennaGain=p2mpAntennaGain, p2mpTrapHeIfExtRefOsc=p2mpTrapHeIfExtRefOsc, p2mpSuRadioPhyEntry=p2mpSuRadioPhyEntry, p2mpHeIntFreqTable=p2mpHeIntFreqTable, p2mpPhyMIBNotificationPrefix=p2mpPhyMIBNotificationPrefix, p2mpHeAlcEnable=p2mpHeAlcEnable, p2mpRadioPhyConformance=p2mpRadioPhyConformance, p2mpCommonTestGroup=p2mpCommonTestGroup, p2mpTrapTxPower=p2mpTrapTxPower, p2mpLocalLoopbackChannel=p2mpLocalLoopbackChannel, p2mpAntennaYDim=p2mpAntennaYDim, p2mpMaxTxPower=p2mpMaxTxPower, p2mpHeIfRefOscState=p2mpHeIfRefOscState, p2mpHeAlcTable=p2mpHeAlcTable, p2mpHeAlcNumMiniSlots=p2mpHeAlcNumMiniSlots, p2mpRfTemperature=p2mpRfTemperature, p2mpRfSupplyVoltageState=p2mpRfSupplyVoltageState, p2mpDuplexerEntry=p2mpDuplexerEntry, p2mpTrapHeIfRxOsc=p2mpTrapHeIfRxOsc, ciscoWirelessPhyMIB=ciscoWirelessPhyMIB, PYSNMP_MODULE_ID=ciscoWirelessPhyMIB, p2mpRfTable=p2mpRfTable, p2mpRfResource=p2mpRfResource, p2mpRfIndex=p2mpRfIndex, p2mpDenyService=p2mpDenyService, p2mpCableLossDiversity=p2mpCableLossDiversity, p2mpHeIntFreqEntry=p2mpHeIntFreqEntry, p2mpRxFreqRangeMin=p2mpRxFreqRangeMin, p2mpRadioPhyEntry=p2mpRadioPhyEntry, p2mpLocalLoopbackMode=p2mpLocalLoopbackMode, p2mpRfRxOscState=p2mpRfRxOscState, p2mpRfOpMode=p2mpRfOpMode, p2mpRadioTestGroup=p2mpRadioTestGroup, p2mpLedType=p2mpLedType, p2mpLedIndex=p2mpLedIndex, p2mpTrapRfRxOsc=p2mpTrapRfRxOsc, p2mpTrapRfSupplyVoltage=p2mpTrapRfSupplyVoltage, p2mpAntennaPolarization=p2mpAntennaPolarization, p2mpLedEntry=p2mpLedEntry, p2mpDuplexerLoPassbandMinFreq=p2mpDuplexerLoPassbandMinFreq, p2mpMinTxPower=p2mpMinTxPower, p2mpDuplexerHiPassbandMinFreq=p2mpDuplexerHiPassbandMinFreq, p2mpHeIfOutFreq=p2mpHeIfOutFreq, p2mpDuplexerReceivePassband=p2mpDuplexerReceivePassband, p2mpRadioSuGroup=p2mpRadioSuGroup, p2mpRfLoopbackSupported=p2mpRfLoopbackSupported, p2mpTrapRfStatusChange=p2mpTrapRfStatusChange, p2mpTxFreqRangeMin=p2mpTxFreqRangeMin, p2mpRadioHeObjects=p2mpRadioHeObjects, p2mpTrapRfCommLinkError=p2mpTrapRfCommLinkError, p2mpDiversityAntennaPresent=p2mpDiversityAntennaPresent, p2mpSuCenterFrequency=p2mpSuCenterFrequency, p2mpAntennaEntry=p2mpAntennaEntry, p2mpCableLoss=p2mpCableLoss, p2mpClockRefExt=p2mpClockRefExt, p2mpCommonTrapEnable=p2mpCommonTrapEnable, p2mpRadioBaseObjects=p2mpRadioBaseObjects, p2mpRxFreqRangeMax=p2mpRxFreqRangeMax, p2mpDuplexerTxInsertionLoss=p2mpDuplexerTxInsertionLoss, p2mpCommonRfGroup=p2mpCommonRfGroup, p2mpRadioPhyFailNotification=p2mpRadioPhyFailNotification)
