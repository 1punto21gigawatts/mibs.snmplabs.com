#
# PySNMP MIB module CA-SNMP-MIB8 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CA-SNMP-MIB8
# Produced by pysmi-0.3.4 at Wed May  1 11:43:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Bits, NotificationType, iso, MibIdentifier, Integer32, Opaque, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, TimeTicks, IpAddress, Unsigned32, Counter32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "iso", "MibIdentifier", "Integer32", "Opaque", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "TimeTicks", "IpAddress", "Unsigned32", "Counter32", "enterprises")
TimeStamp, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TruthValue", "DisplayString")
arrayNetworks = ModuleIdentity((1, 3, 6, 1, 4, 1, 7564))
arrayNetworks.setRevisions(('2005-09-14 00:00', '1999-12-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: arrayNetworks.setRevisionsDescriptions(('Added raw CPU and IO counters.', 'SMIv2 version converted from older MIB definitions.',))
if mibBuilder.loadTexts: arrayNetworks.setLastUpdated('201203090000Z')
if mibBuilder.loadTexts: arrayNetworks.setOrganization('Array Networks, Inc.')
if mibBuilder.loadTexts: arrayNetworks.setContactInfo(' Array Networks Customer Service postal: 1371 McCarthy Blvd Milpitas, CA 95035 USA phone: +1 877 992-7729 email: support@arraynetworks.net')
if mibBuilder.loadTexts: arrayNetworks.setDescription('This file defines the private CA SNMP MIB extensions.')
class Float(TextualConvention, Opaque):
    description = "A single precision floating-point number. The semantics and encoding are identical for type 'single' defined in IEEE Standard for Binary Floating-Point, ANSI/IEEE Std 754-1985. The value is restricted to the BER serialization of the following ASN.1 type: FLOATTYPE ::= [120] IMPLICIT FloatType (note: the value 120 is the sum of '30'h and '48'h) The BER serialization of the length for values of this type must use the definite length, short encoding form. For example, the BER serialization of value 123 of type FLOATTYPE is '9f780442f60000'h. (The tag is '9f78'h; the length is '04'h; and the value is '42f60000'h.) The BER serialization of value '9f780442f60000'h of data type Opaque is '44079f780442f60000'h. (The tag is '44'h; the length is '07'h; and the value is '9f780442f60000'h."
    status = 'current'
    subtypeSpec = Opaque.subtypeSpec + ValueSizeConstraint(7, 7)
    fixedLength = 7

caTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 251))
caStart = NotificationType((1, 3, 6, 1, 4, 1, 7564, 251, 1))
if mibBuilder.loadTexts: caStart.setStatus('current')
if mibBuilder.loadTexts: caStart.setDescription('This trap is sent when the agent starts')
caShutdown = NotificationType((1, 3, 6, 1, 4, 1, 7564, 251, 2))
if mibBuilder.loadTexts: caShutdown.setStatus('current')
if mibBuilder.loadTexts: caShutdown.setDescription('This trap is sent when the agent terminates')
licenseRemainingDays = NotificationType((1, 3, 6, 1, 4, 1, 7564, 251, 3))
if mibBuilder.loadTexts: licenseRemainingDays.setStatus('current')
if mibBuilder.loadTexts: licenseRemainingDays.setDescription('license remaining days')
revProxyCache = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 16))
cacheBasicStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 16, 1))
cacheStatus = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheStatus.setStatus('current')
if mibBuilder.loadTexts: cacheStatus.setDescription('Current status of the reverse proxy cache - on or off')
requestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestsReceived.setStatus('current')
if mibBuilder.loadTexts: requestsReceived.setDescription('Total number of requests received by the reverse proxy cache.')
getRequests = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: getRequests.setStatus('current')
if mibBuilder.loadTexts: getRequests.setDescription('Total GET requests received by the reverse proxy cache.')
headRequests = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: headRequests.setStatus('current')
if mibBuilder.loadTexts: headRequests.setDescription('Total HEAD requests received by the reverse proxy cache.')
purgeRequests = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: purgeRequests.setStatus('current')
if mibBuilder.loadTexts: purgeRequests.setDescription('Total PURGE requests received by the reverse proxy cache.')
postRequests = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postRequests.setStatus('current')
if mibBuilder.loadTexts: postRequests.setDescription('Total POST requests received by the reverse proxy cache.')
clientEstabConn = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientEstabConn.setStatus('current')
if mibBuilder.loadTexts: clientEstabConn.setDescription('Number of current client connections (e.g. from the browsers).')
serverEstabConn = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverEstabConn.setStatus('current')
if mibBuilder.loadTexts: serverEstabConn.setDescription('Number of current backend server connections.')
requestsToHttps = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestsToHttps.setStatus('current')
if mibBuilder.loadTexts: requestsToHttps.setDescription('Requests redirected to HTTPS.')
requestsOnRegex = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestsOnRegex.setStatus('current')
if mibBuilder.loadTexts: requestsOnRegex.setDescription('Requests redirected based on regex match')
requestsToUrl = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestsToUrl.setStatus('current')
if mibBuilder.loadTexts: requestsToUrl.setDescription('Requests forwarded with rewritten url.')
responsesToHttps = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: responsesToHttps.setStatus('current')
if mibBuilder.loadTexts: responsesToHttps.setDescription('Locations rewritten to HTTPS.')
responsesOnRegex = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: responsesOnRegex.setStatus('current')
if mibBuilder.loadTexts: responsesOnRegex.setDescription('Locations rewritten based on regex match.')
cacheSkip = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheSkip.setStatus('current')
if mibBuilder.loadTexts: cacheSkip.setDescription('Cache skip, cache off.')
hitsReply = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hitsReply.setStatus('current')
if mibBuilder.loadTexts: hitsReply.setDescription('We found the requested URL in the cache. The object was fresh and we did not have to revalidate. The object was served from our cache.')
hitsReplyWNotModified = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hitsReplyWNotModified.setStatus('current')
if mibBuilder.loadTexts: hitsReplyWNotModified.setDescription("We got an IMS header in the request. We validated the timestamp and decided that the client's copy of this object is fresh. So we generated a 304 response and sent it out to the client.")
hitsReplyWPreFailed = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hitsReplyWPreFailed.setStatus('current')
if mibBuilder.loadTexts: hitsReplyWPreFailed.setDescription('Cache hit, reply with Precondition Failed.')
hitRevalidate = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hitRevalidate.setStatus('current')
if mibBuilder.loadTexts: hitRevalidate.setDescription('The requested object was found in the cache. However, the request required revalidation (due to client generated revalidate, proxy generated revalidate or proxy generated forced miss).')
cacheMissWNoncacheReq = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissWNoncacheReq.setStatus('current')
if mibBuilder.loadTexts: cacheMissWNoncacheReq.setDescription("The request does not result in a cache table search. Something in the request made us deem it non-cacheable (eg. very long URL, a 'Cache-Control: no-store' header etc.")
cacheMissWNewEntry = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissWNewEntry.setStatus('current')
if mibBuilder.loadTexts: cacheMissWNewEntry.setDescription('Count of times the cache table was searched, no matching entry was found and a new entry was created. However, note that sometimes, an entry is created temporarily (eg. for an IMS request resulting in a 304) and is deleted after sending it out to the client (delayed delete).')
cacheMissWRespNo = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheMissWRespNo.setStatus('current')
if mibBuilder.loadTexts: cacheMissWRespNo.setDescription('Cache miss, create new entry, resp noncacheable.')
cacheHitRatio = MibScalar((1, 3, 6, 1, 4, 1, 7564, 16, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cacheHitRatio.setStatus('current')
if mibBuilder.loadTexts: cacheHitRatio.setDescription("Cache hit reply using cache + cache reply with 'not modified'.")
slbMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19))
slbGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19, 1))
slbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19, 2))
realServer = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1))
virtualServer = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2))
groupCurCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19, 1, 3))
realStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1))
virtualStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2))
groupStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 19, 2, 3))
rsCount = MibScalar((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCount.setStatus('current')
if mibBuilder.loadTexts: rsCount.setDescription('Number of real services currently configured.')
rsTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2), )
if mibBuilder.loadTexts: rsTable.setStatus('current')
if mibBuilder.loadTexts: rsTable.setDescription('A table containing the configuration of real services.')
rsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "rsIndex"))
if mibBuilder.loadTexts: rsEntry.setStatus('current')
if mibBuilder.loadTexts: rsEntry.setDescription('A rsTable entry containing the information of one real service.')
rsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIndex.setStatus('current')
if mibBuilder.loadTexts: rsIndex.setDescription('Reference index for each real service.')
rsID = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsID.setStatus('current')
if mibBuilder.loadTexts: rsID.setDescription('The name of the real service')
rsProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("tcp", 0), ("udp", 1), ("ftp", 2), ("ftps", 3), ("http", 4), ("https", 5), ("tcps", 6), ("dns", 7), ("l2ip", 8), ("l2mac", 9), ("ip", 10), ("siptcp", 11), ("sipudp", 12), ("radacct", 13), ("radauth", 14), ("rtsp", 15), ("vlink", 16), ("rdp", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsProtocol.setStatus('current')
if mibBuilder.loadTexts: rsProtocol.setDescription('The protocol of the real service.')
rsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpAddr.setStatus('current')
if mibBuilder.loadTexts: rsIpAddr.setDescription('The real service IP address.')
rsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPort.setStatus('current')
if mibBuilder.loadTexts: rsPort.setDescription('The port number of the real service.')
rsMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 6), Integer32().clone(1000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsMaxConn.setStatus('current')
if mibBuilder.loadTexts: rsMaxConn.setDescription('Maximum number of connections per real service.')
rsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("up", 1), ("down", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsStatus.setStatus('current')
if mibBuilder.loadTexts: rsStatus.setDescription('The current status of real service - up or down.')
rsAvgRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsAvgRespTime.setStatus('current')
if mibBuilder.loadTexts: rsAvgRespTime.setDescription('Server Average Response Time (in microseconds)')
rsIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpAddressType.setStatus('current')
if mibBuilder.loadTexts: rsIpAddressType.setDescription('The IP address type of rsIpAddress.')
rsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 1, 2, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsIpAddress.setStatus('current')
if mibBuilder.loadTexts: rsIpAddress.setDescription('The real service IP address.')
vsCount = MibScalar((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsCount.setStatus('current')
if mibBuilder.loadTexts: vsCount.setDescription('Number of virtual services currently configured.')
vsTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2), )
if mibBuilder.loadTexts: vsTable.setStatus('current')
if mibBuilder.loadTexts: vsTable.setDescription('A table containing the configuration of virtual services.')
vsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "vsIndex"))
if mibBuilder.loadTexts: vsEntry.setStatus('current')
if mibBuilder.loadTexts: vsEntry.setDescription('A vsTable entry containing the configuration of one virtual service.')
vsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsIndex.setStatus('current')
if mibBuilder.loadTexts: vsIndex.setDescription('Reference index for each virtual service.')
vsID = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsID.setStatus('current')
if mibBuilder.loadTexts: vsID.setDescription('Name of the virtual service.')
vsProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("tcp", 0), ("udp", 1), ("ftp", 2), ("ftps", 3), ("http", 4), ("https", 5), ("tcps", 6), ("dns", 7), ("l2ip", 8), ("l2mac", 9), ("ip", 10), ("siptcp", 11), ("sipudp", 12), ("radacct", 13), ("radauth", 14), ("rtsp", 15), ("vlink", 16), ("rdp", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsProtocol.setStatus('current')
if mibBuilder.loadTexts: vsProtocol.setDescription('The protocol of the virtual service.')
vsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsIpAddr.setStatus('current')
if mibBuilder.loadTexts: vsIpAddr.setDescription('The virtual service IP address.')
vsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsPort.setStatus('current')
if mibBuilder.loadTexts: vsPort.setDescription('The port of the virtual service.')
vsMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsMaxConn.setStatus('current')
if mibBuilder.loadTexts: vsMaxConn.setDescription('Maximum number of connections of the virtual service.')
vsIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsIpAddressType.setStatus('current')
if mibBuilder.loadTexts: vsIpAddressType.setDescription('The IP address type of vsIpAddress.')
vsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 2, 2, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsIpAddress.setStatus('current')
if mibBuilder.loadTexts: vsIpAddress.setDescription('The virtual service IP address.')
groupCount = MibScalar((1, 3, 6, 1, 4, 1, 7564, 19, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupCount.setStatus('current')
if mibBuilder.loadTexts: groupCount.setDescription('Number of groups currently configured.')
gpTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 19, 1, 3, 2), )
if mibBuilder.loadTexts: gpTable.setStatus('current')
if mibBuilder.loadTexts: gpTable.setDescription('A table containing group member configuration.')
gpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 19, 1, 3, 2, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "gpIndex"))
if mibBuilder.loadTexts: gpEntry.setStatus('current')
if mibBuilder.loadTexts: gpEntry.setDescription('A gpTable entry containing one group member configuration.')
gpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpIndex.setStatus('current')
if mibBuilder.loadTexts: gpIndex.setDescription('Reference index for each group member.')
gpID = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpID.setStatus('current')
if mibBuilder.loadTexts: gpID.setDescription('Name of the group.')
realID = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realID.setStatus('current')
if mibBuilder.loadTexts: realID.setDescription('Name of the real service.')
gpMetrics = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("invalid", 0), ("rr", 1), ("lc", 2), ("sr", 3), ("pu", 4), ("ph", 5), ("pi", 6), ("pc", 7), ("hc", 8), ("hh", 9), ("ic", 10), ("rc", 11), ("sslsid", 12), ("hi", 13), ("hip", 14), ("chi", 15), ("prox", 16), ("snmp", 17), ("sipcid", 18), ("sipuid", 19), ("ec", 20), ("chh", 21), ("radchu", 22), ("radchs", 23), ("hq", 24), ("rdprt", 25), ("persistence", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpMetrics.setStatus('current')
if mibBuilder.loadTexts: gpMetrics.setDescription('Metric used to balance real services within the group.')
rsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1), )
if mibBuilder.loadTexts: rsStatsTable.setStatus('current')
if mibBuilder.loadTexts: rsStatsTable.setDescription('Real service statistics table.')
rsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "realIndex"))
if mibBuilder.loadTexts: rsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rsStatsEntry.setDescription('A rsStatsTable entry containing the statistics of one real service.')
realIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realIndex.setStatus('current')
if mibBuilder.loadTexts: realIndex.setDescription('Reference index for each real service.')
realServerID = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realServerID.setStatus('current')
if mibBuilder.loadTexts: realServerID.setDescription('Name of the real service.')
realAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realAddr.setStatus('current')
if mibBuilder.loadTexts: realAddr.setDescription('Real service IP address.')
realPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: realPort.setStatus('current')
if mibBuilder.loadTexts: realPort.setDescription('The port number of the real service.')
rsCntOfReq = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCntOfReq.setStatus('current')
if mibBuilder.loadTexts: rsCntOfReq.setDescription('Number of outstanding requests to the real service.')
rsConnCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsConnCnt.setStatus('current')
if mibBuilder.loadTexts: rsConnCnt.setDescription('Number of open connections to the real service.')
rsTotalHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTotalHits.setStatus('current')
if mibBuilder.loadTexts: rsTotalHits.setDescription('The total number of requests sent to the real service.')
realStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("up", 1), ("down", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: realStatus.setStatus('current')
if mibBuilder.loadTexts: realStatus.setDescription('The health status (up or down) of the real service.')
realAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realAddressType.setStatus('current')
if mibBuilder.loadTexts: realAddressType.setDescription('The IP address type of realAddress.')
realAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 1, 1, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realAddress.setStatus('current')
if mibBuilder.loadTexts: realAddress.setDescription('Real service IP address.')
vsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1), )
if mibBuilder.loadTexts: vsStatsTable.setStatus('current')
if mibBuilder.loadTexts: vsStatsTable.setDescription('A statistics table for virtual service.')
vsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "virtualIndex"))
if mibBuilder.loadTexts: vsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: vsStatsEntry.setDescription('A vsStatsTable entry containing the statistics of one virtual service.')
virtualIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIndex.setStatus('current')
if mibBuilder.loadTexts: virtualIndex.setDescription('Reference index for each virtual service.')
virtServerID = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtServerID.setStatus('current')
if mibBuilder.loadTexts: virtServerID.setDescription('Name of the virtual service.')
virtualAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAddr.setStatus('current')
if mibBuilder.loadTexts: virtualAddr.setDescription('IP address of the virtual service.')
virtualPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualPort.setStatus('current')
if mibBuilder.loadTexts: virtualPort.setDescription('Port number of the virtual service.')
vsURLHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsURLHits.setStatus('current')
if mibBuilder.loadTexts: vsURLHits.setDescription('Number of QoS URL policy hits for the virtual service.')
vsHostnameHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsHostnameHits.setStatus('current')
if mibBuilder.loadTexts: vsHostnameHits.setDescription('Number of QoS Hostname policy hits for the virtual service.')
vsPerstntCookieHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsPerstntCookieHits.setStatus('current')
if mibBuilder.loadTexts: vsPerstntCookieHits.setDescription('Number of Persistent Cookie policy hits for the virtual service.')
vsQosCookieHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsQosCookieHits.setStatus('current')
if mibBuilder.loadTexts: vsQosCookieHits.setDescription('Number of QoS Cookie hits for the virtual service.')
vsDefaultHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsDefaultHits.setStatus('current')
if mibBuilder.loadTexts: vsDefaultHits.setDescription('Number of Default policy hits for the virtual service.')
vsPerstntURLHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsPerstntURLHits.setStatus('current')
if mibBuilder.loadTexts: vsPerstntURLHits.setDescription('Number of Persistent URL policy hits for the virtual service.')
vsStaticHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsStaticHits.setStatus('current')
if mibBuilder.loadTexts: vsStaticHits.setDescription('Number of Static policy hits for the virtual service.')
vsQosNetworkHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsQosNetworkHits.setStatus('current')
if mibBuilder.loadTexts: vsQosNetworkHits.setDescription('Number of QoS Network policy hits for the virtual service.')
vsQosURLHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsQosURLHits.setStatus('current')
if mibBuilder.loadTexts: vsQosURLHits.setDescription('Number of QoS URL policy hits for the virtual service.')
vsBackupHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsBackupHits.setStatus('current')
if mibBuilder.loadTexts: vsBackupHits.setDescription('Number of Backup policy hits for the virtual service.')
vsCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsCacheHits.setStatus('current')
if mibBuilder.loadTexts: vsCacheHits.setDescription('Number of Cache hits for the virtual service.')
vsRegexHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRegexHits.setStatus('current')
if mibBuilder.loadTexts: vsRegexHits.setDescription('Number of Regex policy hits for the virtual service.')
vsRCookieHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRCookieHits.setStatus('current')
if mibBuilder.loadTexts: vsRCookieHits.setDescription('Number of Rewrite Cookie policy hits for the virtual service.')
vsICookieHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsICookieHits.setStatus('current')
if mibBuilder.loadTexts: vsICookieHits.setDescription('Number of Insert Cookie policy hits for the virtual service.')
vsConnCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsConnCnt.setStatus('current')
if mibBuilder.loadTexts: vsConnCnt.setDescription('Number of open connections to the virtual service.')
virtualAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 20), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAddressType.setStatus('current')
if mibBuilder.loadTexts: virtualAddressType.setDescription('The IP address type of virtualAddress.')
virtualAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 21), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAddress.setStatus('current')
if mibBuilder.loadTexts: virtualAddress.setDescription('IP address of the virtual service.')
vsQosClientPortHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsQosClientPortHits.setStatus('current')
if mibBuilder.loadTexts: vsQosClientPortHits.setDescription('Number of QoS Client Port policy hits for the virtual service.')
vsQosBodyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsQosBodyHits.setStatus('current')
if mibBuilder.loadTexts: vsQosBodyHits.setDescription('Number of QoS Body policy hits for the virtual service.')
vsHeaderHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsHeaderHits.setStatus('current')
if mibBuilder.loadTexts: vsHeaderHits.setDescription('Number of Header policy hits for the virtual service.')
vsHashURLHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsHashURLHits.setStatus('current')
if mibBuilder.loadTexts: vsHashURLHits.setDescription('Number of Hash URL policy hits for the virtual service.')
vsRedirectHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsRedirectHits.setStatus('current')
if mibBuilder.loadTexts: vsRedirectHits.setDescription('Number of Redirect policy hits for the virtual service.')
gpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 19, 2, 3, 1), )
if mibBuilder.loadTexts: gpStatsTable.setStatus('current')
if mibBuilder.loadTexts: gpStatsTable.setDescription('A statistics table of the group.')
gpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 19, 2, 3, 1, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "groupIndex"))
if mibBuilder.loadTexts: gpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: gpStatsEntry.setDescription('A gpStatsTable entry containing the statistics of one group.')
groupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupIndex.setStatus('current')
if mibBuilder.loadTexts: groupIndex.setDescription('Reference index for each group.')
groupID = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupID.setStatus('current')
if mibBuilder.loadTexts: groupID.setDescription('Name of the group.')
gpTotalHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 19, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpTotalHits.setStatus('current')
if mibBuilder.loadTexts: gpTotalHits.setDescription('Total hits for the group.')
healthCheck = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 27))
hcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 27, 1))
hcRSCount = MibScalar((1, 3, 6, 1, 4, 1, 7564, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcRSCount.setStatus('current')
if mibBuilder.loadTexts: hcRSCount.setDescription('The number of real services being checked.')
hcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2), )
if mibBuilder.loadTexts: hcStatsTable.setStatus('current')
if mibBuilder.loadTexts: hcStatsTable.setDescription('Health Check statistics table.')
hcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "hcIndex"))
if mibBuilder.loadTexts: hcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hcStatsEntry.setDescription('A hcStatsTable entry containing health check statistics for one real service.')
hcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcIndex.setStatus('current')
if mibBuilder.loadTexts: hcIndex.setDescription('Reference index for each real service being checked.')
hcName = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcName.setStatus('current')
if mibBuilder.loadTexts: hcName.setDescription('Real service name.')
hcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcAddr.setStatus('current')
if mibBuilder.loadTexts: hcAddr.setDescription('Health Check IP address.')
hcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcPort.setStatus('current')
if mibBuilder.loadTexts: hcPort.setDescription('Health Check port.')
hcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("up", 1), ("down", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcStatus.setStatus('current')
if mibBuilder.loadTexts: hcStatus.setDescription('The status (UP/DOWN) of the health check.')
hcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcCause.setStatus('current')
if mibBuilder.loadTexts: hcCause.setDescription('The reason why the health check is being marked UP/DOWN.')
hcNumDowns = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcNumDowns.setStatus('current')
if mibBuilder.loadTexts: hcNumDowns.setDescription('The number of times the health check is down.')
hcNumUps = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcNumUps.setStatus('current')
if mibBuilder.loadTexts: hcNumUps.setDescription('The number of times the health check is up.')
hcConnAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcConnAttempt.setStatus('current')
if mibBuilder.loadTexts: hcConnAttempt.setDescription('The number of connections attempted.')
hcConnSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcConnSuccess.setStatus('current')
if mibBuilder.loadTexts: hcConnSuccess.setDescription('The number of successful connections.')
hcConnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcConnFail.setStatus('current')
if mibBuilder.loadTexts: hcConnFail.setDescription('The number of connection failures.')
hcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcAddressType.setStatus('current')
if mibBuilder.loadTexts: hcAddressType.setDescription('The IP address type of hcAddress.')
hcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 27, 1, 2, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcAddress.setStatus('current')
if mibBuilder.loadTexts: hcAddress.setDescription('Health Check IP address.')
compression = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 28))
totalBytesRcvd = MibScalar((1, 3, 6, 1, 4, 1, 7564, 28, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesRcvd.setStatus('current')
if mibBuilder.loadTexts: totalBytesRcvd.setDescription('Total number of bytes received.')
totalBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 7564, 28, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesSent.setStatus('current')
if mibBuilder.loadTexts: totalBytesSent.setDescription('Total number of bytes sent.')
rcvdBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 28, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvdBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: rcvdBytesPerSec.setDescription('Number of bytes received per second.')
sentBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 28, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sentBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: sentBytesPerSec.setDescription('Number of bytes sent per second.')
peakRcvdBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 28, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakRcvdBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: peakRcvdBytesPerSec.setDescription('Peak received bytes per second')
peakSentBytesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 28, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakSentBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: peakSentBytesPerSec.setDescription('Peak sent bytes per second')
activeTransac = MibScalar((1, 3, 6, 1, 4, 1, 7564, 28, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeTransac.setStatus('current')
if mibBuilder.loadTexts: activeTransac.setDescription('Number of currently active transactions')
memory = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 4))
sysMemory = MibScalar((1, 3, 6, 1, 4, 1, 7564, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemory.setStatus('current')
if mibBuilder.loadTexts: sysMemory.setDescription('Curren system total available memory')
sysMemoryUtilization = MibScalar((1, 3, 6, 1, 4, 1, 7564, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemoryUtilization.setStatus('current')
if mibBuilder.loadTexts: sysMemoryUtilization.setDescription('Current percentage of Network memory utilization')
sysSwapUsed = MibScalar((1, 3, 6, 1, 4, 1, 7564, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwapUsed.setStatus('current')
if mibBuilder.loadTexts: sysSwapUsed.setDescription('Currently used swap space in MB')
sysSwapCapacity = MibScalar((1, 3, 6, 1, 4, 1, 7564, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSwapCapacity.setStatus('current')
if mibBuilder.loadTexts: sysSwapCapacity.setDescription('Current swap space usage')
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 30))
cpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 7564, 30, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilization.setStatus('current')
if mibBuilder.loadTexts: cpuUtilization.setDescription('Current percentage of CPU utilization')
connectionsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 30, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionsPerSec.setStatus('current')
if mibBuilder.loadTexts: connectionsPerSec.setDescription('Number of connections per second')
requestsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 30, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestsPerSec.setStatus('current')
if mibBuilder.loadTexts: requestsPerSec.setDescription('Number of requests per second')
monitor = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 32))
cputemp = MibScalar((1, 3, 6, 1, 4, 1, 7564, 32, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cputemp.setStatus('current')
if mibBuilder.loadTexts: cputemp.setDescription('current cpu temprature of cpu and sys')
fanspeed = MibScalar((1, 3, 6, 1, 4, 1, 7564, 32, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanspeed.setStatus('current')
if mibBuilder.loadTexts: fanspeed.setDescription('current fan speed')
powerstate = MibScalar((1, 3, 6, 1, 4, 1, 7564, 32, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("one-of-the-power-supply-modules-has-failed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerstate.setStatus('current')
if mibBuilder.loadTexts: powerstate.setDescription('current dual power supply state (0 (ok),1(error))')
sdns = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 31))
totalReq = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalReq.setStatus('current')
if mibBuilder.loadTexts: totalReq.setDescription('Total DNS requests.')
totalSucc = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalSucc.setStatus('current')
if mibBuilder.loadTexts: totalSucc.setDescription('Total successful DNS resolvings.')
totalFail = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalFail.setStatus('current')
if mibBuilder.loadTexts: totalFail.setDescription('Total failed DNS resolvings.')
reqLastSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqLastSec.setStatus('current')
if mibBuilder.loadTexts: reqLastSec.setDescription('Total DNS requests in the last second.')
succLastSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succLastSec.setStatus('current')
if mibBuilder.loadTexts: succLastSec.setDescription('Total successful DNS resolvings in the last second.')
failLastSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failLastSec.setStatus('current')
if mibBuilder.loadTexts: failLastSec.setDescription('Total failed DNS resolvings in the last second.')
reqPeakSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqPeakSec.setStatus('current')
if mibBuilder.loadTexts: reqPeakSec.setDescription('Peak DNS requests in a second.')
succPeakSec = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succPeakSec.setStatus('current')
if mibBuilder.loadTexts: succPeakSec.setDescription('Peak successful DNS resolvings in a second.')
reqLastMin = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqLastMin.setStatus('current')
if mibBuilder.loadTexts: reqLastMin.setDescription('Total DNS requests in the last minute.')
succLastMin = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succLastMin.setStatus('current')
if mibBuilder.loadTexts: succLastMin.setDescription('Total successful DNS resolvings in the last minute.')
failLastMin = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failLastMin.setStatus('current')
if mibBuilder.loadTexts: failLastMin.setDescription('Total failed DNS resolvings in the last minute.')
reqPeakMin = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqPeakMin.setStatus('current')
if mibBuilder.loadTexts: reqPeakMin.setDescription('Peak DNS requests in a minute.')
succPeakMin = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succPeakMin.setStatus('current')
if mibBuilder.loadTexts: succPeakMin.setDescription('Peak successful DNS resolvings in a minute.')
reqLastHour = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqLastHour.setStatus('current')
if mibBuilder.loadTexts: reqLastHour.setDescription('Total DNS requests in the last hour.')
succLastHour = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succLastHour.setStatus('current')
if mibBuilder.loadTexts: succLastHour.setDescription('Total successful DNS resolvings in the last hour.')
failLastHour = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failLastHour.setStatus('current')
if mibBuilder.loadTexts: failLastHour.setDescription('Total failed DNS resolvings in the last hour.')
reqPeakHour = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqPeakHour.setStatus('current')
if mibBuilder.loadTexts: reqPeakHour.setDescription('Peak DNS requests in an hour.')
succPeakHour = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succPeakHour.setStatus('current')
if mibBuilder.loadTexts: succPeakHour.setDescription('Peak successful DNS resolvings in an hour.')
reqLastDay = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqLastDay.setStatus('current')
if mibBuilder.loadTexts: reqLastDay.setDescription('Total DNS requests in the last day.')
succLastDay = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succLastDay.setStatus('current')
if mibBuilder.loadTexts: succLastDay.setDescription('Total successful DNS resolvings in the last day.')
failLastDay = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failLastDay.setStatus('current')
if mibBuilder.loadTexts: failLastDay.setDescription('Total failed DNS resolvings in the last day.')
reqPeakDay = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqPeakDay.setStatus('current')
if mibBuilder.loadTexts: reqPeakDay.setDescription('Peak DNS requests in a day.')
succPeakDay = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succPeakDay.setStatus('current')
if mibBuilder.loadTexts: succPeakDay.setDescription('Peak successful DNS resolvings in a day.')
reqLastSec5 = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqLastSec5.setStatus('current')
if mibBuilder.loadTexts: reqLastSec5.setDescription('Total DNS requests in the last 5 seconds.')
succLastSec5 = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succLastSec5.setStatus('current')
if mibBuilder.loadTexts: succLastSec5.setDescription('Total successful DNS resolvings in the last 5 seconds.')
failLastSec5 = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: failLastSec5.setStatus('current')
if mibBuilder.loadTexts: failLastSec5.setDescription('Total failed DNS resolvings in the last 5 seconds.')
reqPeakSec5 = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqPeakSec5.setStatus('current')
if mibBuilder.loadTexts: reqPeakSec5.setDescription('Peak DNS requests in 5 seconds.')
succPeakSec5 = MibScalar((1, 3, 6, 1, 4, 1, 7564, 31, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: succPeakSec5.setStatus('current')
if mibBuilder.loadTexts: succPeakSec5.setDescription('Peak successful DNS resolvings in 5 seconds.')
vrrp = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 18))
clusterVrrp = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 18, 1))
maxCluster = MibScalar((1, 3, 6, 1, 4, 1, 7564, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxCluster.setStatus('current')
if mibBuilder.loadTexts: maxCluster.setDescription('Current maximum possible number of entries in the vrrpTable, which is 255 * (number of interfaces for which a cluster is defined). 255 is the max number of VIPs in a cluster.')
clusterNum = MibScalar((1, 3, 6, 1, 4, 1, 7564, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterNum.setStatus('current')
if mibBuilder.loadTexts: clusterNum.setDescription('Current number of entries in the vrrpTable.')
vrrpTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3), )
if mibBuilder.loadTexts: vrrpTable.setStatus('current')
if mibBuilder.loadTexts: vrrpTable.setDescription('A table containing clustering configuration')
vrrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "clusterVirIndex"))
if mibBuilder.loadTexts: vrrpEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpEntry.setDescription('An entry in the vrrpTable. Each entry represents a cluster VIP and not the cluster itself. If a cluster has n VIPs, then there will be n entries for the cluster in the vrrpTable (0 <= n <= 255). All the entries in the vrrpTable belonging to a single cluster will have the same values for all the fields except clusterVirIndex and clusterVirAddr')
clusterVirIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirIndex.setStatus('current')
if mibBuilder.loadTexts: clusterVirIndex.setDescription('The cluster virtual table index')
clusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterId.setStatus('current')
if mibBuilder.loadTexts: clusterId.setDescription('Cluster identifier')
clusterVirState = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("incomplete", 0), ("reserverd", 1), ("init", 2), ("backup", 3), ("master", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirState.setStatus('current')
if mibBuilder.loadTexts: clusterVirState.setDescription('The current state of the cluster')
clusterVirIfname = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirIfname.setStatus('current')
if mibBuilder.loadTexts: clusterVirIfname.setDescription('The interface name on which the cluster is defined')
clusterVirAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirAddr.setStatus('current')
if mibBuilder.loadTexts: clusterVirAddr.setDescription('A virtual ip address (VIP) in the cluster')
clusterVirAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("simple-text-password", 1))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirAuthType.setStatus('current')
if mibBuilder.loadTexts: clusterVirAuthType.setDescription('Type of authentication being used. none(0) - no authentication simple-text-password(1) - use password specified in cluster virtual for authentication.')
clusterVirAuthPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirAuthPasswd.setStatus('current')
if mibBuilder.loadTexts: clusterVirAuthPasswd.setDescription('The password for authentication.')
clusterVirPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirPreempt.setStatus('current')
if mibBuilder.loadTexts: clusterVirPreempt.setDescription('This is for controling whether a higher priority Backup VRRP virtual preempts a low priority Master.')
clusterVirInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60)).clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirInterval.setStatus('current')
if mibBuilder.loadTexts: clusterVirInterval.setDescription('VRRP advertisement interval')
clusterVirPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirPriority.setStatus('current')
if mibBuilder.loadTexts: clusterVirPriority.setDescription('Priority of the local node in the cluster')
clusterVirAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 11), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirAddressType.setStatus('current')
if mibBuilder.loadTexts: clusterVirAddressType.setDescription('The IP address type of clusterVirAddress.')
clusterVirAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 18, 1, 3, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterVirAddress.setStatus('current')
if mibBuilder.loadTexts: clusterVirAddress.setDescription('A virtual ip address (VIP) in the cluster')
sslMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 20))
sslGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 20, 1))
sslStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 20, 2))
vhostNum = MibScalar((1, 3, 6, 1, 4, 1, 7564, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vhostNum.setStatus('current')
if mibBuilder.loadTexts: vhostNum.setDescription('Number of SSL hosts currently configured.')
totalOpenSSLConns = MibScalar((1, 3, 6, 1, 4, 1, 7564, 20, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalOpenSSLConns.setStatus('current')
if mibBuilder.loadTexts: totalOpenSSLConns.setDescription('Total number of open SSL connections (all SSL hosts)')
totalAcceptedConns = MibScalar((1, 3, 6, 1, 4, 1, 7564, 20, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalAcceptedConns.setStatus('current')
if mibBuilder.loadTexts: totalAcceptedConns.setDescription('Total number of accepted SSL connections (all SSL hosts)')
totalRequestedConns = MibScalar((1, 3, 6, 1, 4, 1, 7564, 20, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRequestedConns.setStatus('current')
if mibBuilder.loadTexts: totalRequestedConns.setDescription('Total number of requested SSL connections (all SSL hosts)')
sslTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4), )
if mibBuilder.loadTexts: sslTable.setStatus('current')
if mibBuilder.loadTexts: sslTable.setDescription('SSL host statistics table')
sslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "sslIndex"))
if mibBuilder.loadTexts: sslEntry.setStatus('current')
if mibBuilder.loadTexts: sslEntry.setDescription('sslTable entry for one SSL host')
sslIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslIndex.setStatus('current')
if mibBuilder.loadTexts: sslIndex.setDescription('The SSL table index ')
vhostName = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vhostName.setStatus('current')
if mibBuilder.loadTexts: vhostName.setDescription('Name of the SSL host')
openSSLConns = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: openSSLConns.setStatus('current')
if mibBuilder.loadTexts: openSSLConns.setDescription('Open SSL connections for SSL hostName')
acceptedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acceptedConns.setStatus('current')
if mibBuilder.loadTexts: acceptedConns.setDescription('Number of accepted SSL connections for SSL hostName')
requestedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: requestedConns.setStatus('current')
if mibBuilder.loadTexts: requestedConns.setDescription('Number of requested SSL connections for SSL hostName')
resumedSess = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resumedSess.setStatus('current')
if mibBuilder.loadTexts: resumedSess.setDescription('Number of resumed SSL sessions for SSL hostName')
resumableSess = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resumableSess.setStatus('current')
if mibBuilder.loadTexts: resumableSess.setDescription('Number of resumable SSL sessions for SSL hostName')
missSess = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: missSess.setStatus('current')
if mibBuilder.loadTexts: missSess.setDescription('Number of SSL session misses for SSL hostName')
connsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 20, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connsPerSec.setStatus('current')
if mibBuilder.loadTexts: connsPerSec.setDescription('Number of SSL connections established per second')
caSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 24))
logBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 24, 1))
logHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 24, 2))
caSyslogTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 24, 3))
class SyslogSeverity(TextualConvention, Integer32):
    description = 'The severity of a syslog message. The enumeration values are equal to the values that syslog uses + 1. For example, with syslog, emergency=0.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7))

logNotificationsSent = MibScalar((1, 3, 6, 1, 4, 1, 7564, 24, 1, 1), Counter32()).setUnits('notifications').setMaxAccess("readonly")
if mibBuilder.loadTexts: logNotificationsSent.setStatus('current')
if mibBuilder.loadTexts: logNotificationsSent.setDescription('The number of syslog notifications that have been sent. This number may include notifications that were prevented from being transmitted due to reasons such as resource limitations and/or non-connectivity. If one is receiving notifications, one can periodically poll this object to determine if any notifications were missed. If so, a poll of the logHistoryTable might be appropriate.')
logNotificationsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 7564, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: logNotificationsEnabled.setStatus('current')
if mibBuilder.loadTexts: logNotificationsEnabled.setDescription('Indicates whether logMessageGenerated notifications will or will not be sent when a syslog message is generated by the device. Disabling notifications does not prevent syslog messages from being added to the logHistoryTable.')
logMaxSeverity = MibScalar((1, 3, 6, 1, 4, 1, 7564, 24, 1, 3), SyslogSeverity().clone('warning')).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMaxSeverity.setStatus('current')
if mibBuilder.loadTexts: logMaxSeverity.setDescription('Indicates which syslog severity levels will be processed. Any syslog message with a severity value greater than this value will be ignored by the agent. note: severity numeric values increase as their severity decreases, e.g. error(3) is more severe than debug(7).')
logHistTableMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 7564, 24, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(1)).setUnits('entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: logHistTableMaxLength.setStatus('current')
if mibBuilder.loadTexts: logHistTableMaxLength.setDescription('The upper limit on the number of entries that the logHistoryTable may contain. A value of 0 will prevent any history from being retained. When this table is full, the oldest entry will be deleted and a new one will be created.')
logHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 24, 2, 2), )
if mibBuilder.loadTexts: logHistoryTable.setStatus('current')
if mibBuilder.loadTexts: logHistoryTable.setDescription("A table of syslog messages generated by this device. All 'interesting' syslog messages (i.e. severity <= logMaxSeverity) are entered into this table.")
logHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 24, 2, 2, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "index"))
if mibBuilder.loadTexts: logHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: logHistoryEntry.setDescription('A syslog message that was previously generated by this device. Each entry is indexed by a message index.')
index = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 24, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: index.setStatus('current')
if mibBuilder.loadTexts: index.setDescription('A monotonically increasing integer for the sole purpose of indexing messages. When it reaches the maximum value the agent flushes the table and wraps the value back to 1.')
severity = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 24, 2, 2, 1, 2), SyslogSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: severity.setStatus('current')
if mibBuilder.loadTexts: severity.setDescription('The severity of the message.')
msgText = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 24, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgText.setStatus('current')
if mibBuilder.loadTexts: msgText.setDescription("The text of the message. If the text of the message exceeds 255 bytes, the message will be truncated to 254 bytes and a '*' character will be appended, indicating that the message has been truncated.")
syslogTrap = NotificationType((1, 3, 6, 1, 4, 1, 7564, 24, 3, 1)).setObjects(("CA-SNMP-MIB8", "severity"), ("CA-SNMP-MIB8", "msgText"))
if mibBuilder.loadTexts: syslogTrap.setStatus('current')
if mibBuilder.loadTexts: syslogTrap.setDescription('When a syslogTrap message is generated by the device a syslogTrap notification is sent. The sending of these notifications can be enabled/disabled via the logNotificationsEnabled object.')
vipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 22))
vipStatus = MibScalar((1, 3, 6, 1, 4, 1, 7564, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vipStatus.setStatus('current')
if mibBuilder.loadTexts: vipStatus.setDescription('Status of VIP statistics gathering - on or off')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 7564, 22, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostName.setStatus('current')
if mibBuilder.loadTexts: hostName.setDescription('The hostname that the VIP is representing (hostname of the appliance)')
currentTime = MibScalar((1, 3, 6, 1, 4, 1, 7564, 22, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentTime.setStatus('current')
if mibBuilder.loadTexts: currentTime.setDescription('The current time in the format of MM/DD/YY HH:MM ')
totalIPPktsIn = MibScalar((1, 3, 6, 1, 4, 1, 7564, 22, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIPPktsIn.setStatus('current')
if mibBuilder.loadTexts: totalIPPktsIn.setDescription('Total number of ip packets received on all VIPs')
totalIPPktsOut = MibScalar((1, 3, 6, 1, 4, 1, 7564, 22, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIPPktsOut.setStatus('current')
if mibBuilder.loadTexts: totalIPPktsOut.setDescription('Total number of ip packets sent out on all VIPs')
totalIPBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 7564, 22, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIPBytesIn.setStatus('current')
if mibBuilder.loadTexts: totalIPBytesIn.setDescription('Total number of IP bytes received on all VIPs')
totalIPBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 7564, 22, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalIPBytesOut.setStatus('current')
if mibBuilder.loadTexts: totalIPBytesOut.setDescription('Total number of IP bytes sent out on all VIPs')
ipStatsTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 22, 8), )
if mibBuilder.loadTexts: ipStatsTable.setStatus('current')
if mibBuilder.loadTexts: ipStatsTable.setDescription('A table of VIP statistics.')
ipStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "ipAddrType"), (0, "CA-SNMP-MIB8", "ipAddr"))
if mibBuilder.loadTexts: ipStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ipStatsEntry.setDescription('An entry in the ipStatsTable is created for each VIP.')
ipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIndex.setStatus('current')
if mibBuilder.loadTexts: ipIndex.setDescription('The VIP statistics table index')
ipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddress.setStatus('current')
if mibBuilder.loadTexts: ipAddress.setDescription('The VIP address')
ipPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPktsIn.setStatus('current')
if mibBuilder.loadTexts: ipPktsIn.setDescription('Total number of IP packets received on the VIP')
ipBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipBytesIn.setStatus('current')
if mibBuilder.loadTexts: ipBytesIn.setDescription('Total number of bytes received on the VIP')
ipPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPktsOut.setStatus('current')
if mibBuilder.loadTexts: ipPktsOut.setDescription('Total number of packets sent out on the VIP')
ipBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipBytesOut.setStatus('current')
if mibBuilder.loadTexts: ipBytesOut.setDescription('Total number of bytes sent out on the VIP')
startTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: startTime.setStatus('current')
if mibBuilder.loadTexts: startTime.setDescription('The time statistics gathering was enabled for the VIP')
ipAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddrType.setStatus('current')
if mibBuilder.loadTexts: ipAddrType.setDescription('The IP address type of ipAddress')
ipAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 22, 8, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddr.setStatus('current')
if mibBuilder.loadTexts: ipAddr.setDescription('The VIP address')
ifTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 23))
infNumber = MibScalar((1, 3, 6, 1, 4, 1, 7564, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infNumber.setStatus('current')
if mibBuilder.loadTexts: infNumber.setDescription('The number of network interfaces present on this system.')
infTotalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 7564, 23, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infTotalInOctets.setStatus('current')
if mibBuilder.loadTexts: infTotalInOctets.setDescription('The total accumulated number of octets received on all the active interfaces (loopback is not included)')
infTotalOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 7564, 23, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infTotalOutOctets.setStatus('current')
if mibBuilder.loadTexts: infTotalOutOctets.setDescription('The total accumulated number of octets transmitted out on all the active interfaces (loopback is not included)')
infTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 23, 4), )
if mibBuilder.loadTexts: infTable.setStatus('current')
if mibBuilder.loadTexts: infTable.setDescription('A table of interface statistics. The number of entries is given by the value of infNumber.')
infEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "infIndex"))
if mibBuilder.loadTexts: infEntry.setStatus('current')
if mibBuilder.loadTexts: infEntry.setDescription('An infTable entry for one interface')
infIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infIndex.setStatus('current')
if mibBuilder.loadTexts: infIndex.setDescription("A unique value for each interface. Its value ranges between 1 and the value of infNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
infDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infDescr.setStatus('current')
if mibBuilder.loadTexts: infDescr.setDescription('Name of the interface')
infOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infOperStatus.setStatus('current')
if mibBuilder.loadTexts: infOperStatus.setDescription('The current operational state of the interface (up or down).')
infAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infAddress.setStatus('current')
if mibBuilder.loadTexts: infAddress.setDescription("The interface's IP address")
infInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInOctets.setStatus('current')
if mibBuilder.loadTexts: infInOctets.setDescription('The total number of octets received on the interface, including framing characters.')
infInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: infInUcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were not addressed to a multicast or broadcast address at this sub-layer.')
infInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInNUcastPkts.setStatus('deprecated')
if mibBuilder.loadTexts: infInNUcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a multicast or broadcast address at this sub-layer.')
infInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInDiscards.setStatus('current')
if mibBuilder.loadTexts: infInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
infInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInErrors.setStatus('current')
if mibBuilder.loadTexts: infInErrors.setDescription('For packet-oriented interfaces, the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. For character- oriented or fixed-length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher-layer protocol.')
infInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: infInUnknownProtos.setDescription('For packet-oriented interfaces, the number of packets received via the interface which were discarded because of an unknown or unsupported protocol. For character-oriented or fixed-length interfaces that support protocol multiplexing the number of transmission units received via the interface which were discarded because of an unknown or unsupported protocol. For any interface that does not support protocol multiplexing, this counter will always be 0.')
infOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infOutOctets.setStatus('current')
if mibBuilder.loadTexts: infOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters.')
infOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: infOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent.')
infOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infOutNUcastPkts.setStatus('deprecated')
if mibBuilder.loadTexts: infOutNUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent.')
infOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infOutErrors.setStatus('current')
if mibBuilder.loadTexts: infOutErrors.setDescription('For packet-oriented interfaces, the number of outbound packets that could not be transmitted because of errors. For character-oriented or fixed-length interfaces, the number of outbound transmission units that could not be transmitted because of errors.')
infIpv4AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infIpv4AddressType.setStatus('current')
if mibBuilder.loadTexts: infIpv4AddressType.setDescription('The IP address type of infIpv4Address(should always ipv4).')
infIpv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 16), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infIpv4Address.setStatus('current')
if mibBuilder.loadTexts: infIpv4Address.setDescription("The interface's IPv4 address")
infIpv6AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infIpv6AddressType.setStatus('current')
if mibBuilder.loadTexts: infIpv6AddressType.setDescription('The IP address type of infIpv6Address(should always ipv6).')
infIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infIpv6Address.setStatus('current')
if mibBuilder.loadTexts: infIpv6Address.setDescription("The interface's IPv6 address")
infInBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInBandwidth.setStatus('deprecated')
if mibBuilder.loadTexts: infInBandwidth.setDescription('Inside throughput(bits/second) of the last 5 minutes for the interfaces.')
infOutBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infOutBandwidth.setStatus('deprecated')
if mibBuilder.loadTexts: infOutBandwidth.setDescription('Outside throughput(bits/second) of the last 5 minutes for the interfaces.')
infInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInMcastPkts.setStatus('current')
if mibBuilder.loadTexts: infInMcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a multicast address at this sub-layer.')
infOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: infOutMcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a multicast address at this sub-layer, including those that were discarded or not sent.')
infInBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infInBcastPkts.setStatus('current')
if mibBuilder.loadTexts: infInBcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a broadcast address at this sub-layer.')
infOutBcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 23, 4, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infOutBcastPkts.setStatus('current')
if mibBuilder.loadTexts: infOutBcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent.')
clickTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 25))
ctcpActiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpActiveOpens.setStatus('current')
if mibBuilder.loadTexts: ctcpActiveOpens.setDescription('The number of times ClickTCP connections have made a direct transition to the SYN-SENT state from the CLOSED state.')
ctcpPassiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpPassiveOpens.setStatus('current')
if mibBuilder.loadTexts: ctcpPassiveOpens.setDescription('The number of times ClickTCP connections have made a direct transition to the SYN-RCVD state from the LISTEN state.')
ctcpAttemptFails = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpAttemptFails.setStatus('current')
if mibBuilder.loadTexts: ctcpAttemptFails.setDescription('The number of times ClickTCP connections have made a direct transition to the CLOSED state from either the SYN-SENT state or the SYN-RCVD state, plus the number of times TCP connections have made a direct transition to the LISTEN state from the SYN-RCVD state.')
ctcpEstabResets = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpEstabResets.setStatus('current')
if mibBuilder.loadTexts: ctcpEstabResets.setDescription('The number of times ClickTCP connections have made a direct transition to the CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state.')
ctcpCurrEstab = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpCurrEstab.setStatus('current')
if mibBuilder.loadTexts: ctcpCurrEstab.setDescription('The number of ClickTCP connections for which the current state is either ESTABLISHED or CLOSE-WAIT.')
ctcpInSegs = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpInSegs.setStatus('current')
if mibBuilder.loadTexts: ctcpInSegs.setDescription('The total number of ClickTCP segments received, including those received in error. This count includes segments received on currently established connections.')
ctcpOutSegs = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpOutSegs.setStatus('current')
if mibBuilder.loadTexts: ctcpOutSegs.setDescription('The total number of ClickTCP segments sent, including those on current connections but excluding those containing only retransmitted octets.')
ctcpRetransSegs = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpRetransSegs.setStatus('current')
if mibBuilder.loadTexts: ctcpRetransSegs.setDescription('The total number of segments retransmitted - that is, the number of ClickTCP segments transmitted containing one or more previously transmitted octets.')
ctcpInErrs = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpInErrs.setStatus('current')
if mibBuilder.loadTexts: ctcpInErrs.setDescription('The total number of segments received in error (e.g., bad ClickTCP checksums).')
ctcpOutRsts = MibScalar((1, 3, 6, 1, 4, 1, 7564, 25, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpOutRsts.setStatus('current')
if mibBuilder.loadTexts: ctcpOutRsts.setDescription('The number of ClickTCP segments sent containing the RST flag.')
ctcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 7564, 25, 11), )
if mibBuilder.loadTexts: ctcpConnTable.setStatus('current')
if mibBuilder.loadTexts: ctcpConnTable.setDescription('A table containing ClickTCP connection-specific information.')
ctcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1), ).setIndexNames((0, "CA-SNMP-MIB8", "ctcpIndex"))
if mibBuilder.loadTexts: ctcpConnEntry.setStatus('current')
if mibBuilder.loadTexts: ctcpConnEntry.setDescription('A conceptual row of the ctcpConnTable containing information about a particular current TCP connection. Each row of this table is transient, in that it ceases to exist when (or soon after) the connection makes the transition to the CLOSED state.')
ctcpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpIndex.setStatus('current')
if mibBuilder.loadTexts: ctcpIndex.setDescription('A unique value for each clicktcp connection. ')
ctcpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("synSent", 3), ("synReceived", 4), ("established", 5), ("finWait1", 6), ("finWait2", 7), ("closeWait", 8), ("lastAck", 9), ("closing", 10), ("timeWait", 11), ("deleteTCB", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnState.setStatus('current')
if mibBuilder.loadTexts: ctcpConnState.setDescription('The state of this TCP connection.')
ctcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnLocalAddress.setStatus('current')
if mibBuilder.loadTexts: ctcpConnLocalAddress.setDescription('The local IP address for this TCP connection. In the case of a connection in the listen state which is willing to accept connections for any IP interface associated with the node, the value 0.0.0.0 is used.')
ctcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnLocalPort.setStatus('current')
if mibBuilder.loadTexts: ctcpConnLocalPort.setDescription('The local port number for this TCP connection.')
ctcpConnRemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnRemAddress.setStatus('current')
if mibBuilder.loadTexts: ctcpConnRemAddress.setDescription('The remote IP address for this TCP connection.')
ctcpConnRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnRemPort.setStatus('current')
if mibBuilder.loadTexts: ctcpConnRemPort.setDescription('The remote port number for this TCP connection.')
ctcpConnLocalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnLocalAddrType.setStatus('current')
if mibBuilder.loadTexts: ctcpConnLocalAddrType.setDescription('The IP address type of ctcpConnLocalAddress.')
ctcpConnLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnLocalAddr.setStatus('current')
if mibBuilder.loadTexts: ctcpConnLocalAddr.setDescription('The local IP address for this TCP connection. In the case of a connection in the listen state which is willing to accept connections for any IP interface associated with the node, the value 0.0.0.0/:: is used.')
ctcpConnRemAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnRemAddrType.setStatus('current')
if mibBuilder.loadTexts: ctcpConnRemAddrType.setDescription('The IP address type of ctcpConnRemAddress.')
ctcpConnRemAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7564, 25, 11, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcpConnRemAddr.setStatus('current')
if mibBuilder.loadTexts: ctcpConnRemAddr.setDescription('The remote IP address for this TCP connection.')
systemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 7564, 3))
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 7564, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('Serial Number of the equipment')
mibBuilder.exportSymbols("CA-SNMP-MIB8", clickTcp=clickTcp, postRequests=postRequests, sysSwapCapacity=sysSwapCapacity, rsIpAddressType=rsIpAddressType, succLastMin=succLastMin, resumedSess=resumedSess, slbGeneral=slbGeneral, infAddress=infAddress, clusterVirPreempt=clusterVirPreempt, ctcpRetransSegs=ctcpRetransSegs, totalAcceptedConns=totalAcceptedConns, ctcpConnLocalAddress=ctcpConnLocalAddress, realPort=realPort, openSSLConns=openSSLConns, succPeakSec5=succPeakSec5, logHistoryEntry=logHistoryEntry, vsStatsEntry=vsStatsEntry, ipBytesOut=ipBytesOut, requestsOnRegex=requestsOnRegex, clusterVirInterval=clusterVirInterval, rsTotalHits=rsTotalHits, arrayNetworks=arrayNetworks, cacheMissWNewEntry=cacheMissWNewEntry, vsIpAddress=vsIpAddress, totalReq=totalReq, reqPeakHour=reqPeakHour, virtualIndex=virtualIndex, ctcpIndex=ctcpIndex, totalIPBytesOut=totalIPBytesOut, syslogTrap=syslogTrap, connectionsPerSec=connectionsPerSec, sdns=sdns, vsMaxConn=vsMaxConn, realServer=realServer, memory=memory, infInBcastPkts=infInBcastPkts, infTotalInOctets=infTotalInOctets, caSyslogTrap=caSyslogTrap, hcStatus=hcStatus, clusterVirAddressType=clusterVirAddressType, totalIPBytesIn=totalIPBytesIn, purgeRequests=purgeRequests, connsPerSec=connsPerSec, sslGeneral=sslGeneral, vsID=vsID, succLastDay=succLastDay, missSess=missSess, sslStats=sslStats, licenseRemainingDays=licenseRemainingDays, ctcpConnRemAddrType=ctcpConnRemAddrType, ctcpPassiveOpens=ctcpPassiveOpens, infOutUcastPkts=infOutUcastPkts, ipBytesIn=ipBytesIn, infTable=infTable, ipStatsTable=ipStatsTable, hcConnAttempt=hcConnAttempt, infIpv6Address=infIpv6Address, reqPeakSec5=reqPeakSec5, vsQosBodyHits=vsQosBodyHits, vsICookieHits=vsICookieHits, groupID=groupID, realAddressType=realAddressType, vsRedirectHits=vsRedirectHits, failLastMin=failLastMin, hitsReplyWNotModified=hitsReplyWNotModified, vsRegexHits=vsRegexHits, cacheMissWRespNo=cacheMissWRespNo, totalBytesSent=totalBytesSent, vipStatus=vipStatus, infOutNUcastPkts=infOutNUcastPkts, virtualServer=virtualServer, hitsReply=hitsReply, logHistTableMaxLength=logHistTableMaxLength, realAddress=realAddress, vsHashURLHits=vsHashURLHits, gpID=gpID, groupCurCfg=groupCurCfg, realServerID=realServerID, hcStatsTable=hcStatsTable, caShutdown=caShutdown, hcName=hcName, vipStats=vipStats, monitor=monitor, rsCount=rsCount, infOutBandwidth=infOutBandwidth, reqPeakDay=reqPeakDay, requestsToHttps=requestsToHttps, rsPort=rsPort, succPeakDay=succPeakDay, cpuUtilization=cpuUtilization, infNumber=infNumber, serverEstabConn=serverEstabConn, vsRCookieHits=vsRCookieHits, succLastHour=succLastHour, ctcpInSegs=ctcpInSegs, startTime=startTime, failLastSec=failLastSec, realAddr=realAddr, sslEntry=sslEntry, vsStaticHits=vsStaticHits, gpTotalHits=gpTotalHits, rsIndex=rsIndex, logMaxSeverity=logMaxSeverity, hostName=hostName, peakRcvdBytesPerSec=peakRcvdBytesPerSec, hitRevalidate=hitRevalidate, vsStatsTable=vsStatsTable, vsConnCnt=vsConnCnt, infOutBcastPkts=infOutBcastPkts, currentTime=currentTime, ctcpConnLocalAddr=ctcpConnLocalAddr, ipStatsEntry=ipStatsEntry, vrrpEntry=vrrpEntry, succPeakMin=succPeakMin, infInErrors=infInErrors, hcStats=hcStats, logHistory=logHistory, getRequests=getRequests, infIpv4Address=infIpv4Address, revProxyCache=revProxyCache, infInNUcastPkts=infInNUcastPkts, gpMetrics=gpMetrics, clusterVirAuthType=clusterVirAuthType, vsIpAddressType=vsIpAddressType, cacheStatus=cacheStatus, cacheHitRatio=cacheHitRatio, clusterVirAddress=clusterVirAddress, responsesToHttps=responsesToHttps, requestsToUrl=requestsToUrl, reqLastSec=reqLastSec, infIndex=infIndex, rsStatsTable=rsStatsTable, hcIndex=hcIndex, hitsReplyWPreFailed=hitsReplyWPreFailed, vsURLHits=vsURLHits, totalBytesRcvd=totalBytesRcvd, index=index, vsPerstntURLHits=vsPerstntURLHits, succPeakHour=succPeakHour, realStats=realStats, infInMcastPkts=infInMcastPkts, powerstate=powerstate, ctcpConnLocalPort=ctcpConnLocalPort, caTraps=caTraps, infIpv6AddressType=infIpv6AddressType, cacheSkip=cacheSkip, ifTraffic=ifTraffic, performance=performance, ctcpActiveOpens=ctcpActiveOpens, clusterVirIndex=clusterVirIndex, ctcpConnTable=ctcpConnTable, serialNumber=serialNumber, groupCount=groupCount, sysMemoryUtilization=sysMemoryUtilization, totalFail=totalFail, headRequests=headRequests, rcvdBytesPerSec=rcvdBytesPerSec, failLastDay=failLastDay, compression=compression, acceptedConns=acceptedConns, logBasic=logBasic, totalRequestedConns=totalRequestedConns, requestsReceived=requestsReceived, rsAvgRespTime=rsAvgRespTime, infOutErrors=infOutErrors, logNotificationsEnabled=logNotificationsEnabled, failLastSec5=failLastSec5, rsEntry=rsEntry, logHistoryTable=logHistoryTable, clusterId=clusterId, cacheBasicStats=cacheBasicStats, SyslogSeverity=SyslogSeverity, requestedConns=requestedConns, gpIndex=gpIndex, hcAddr=hcAddr, vrrp=vrrp, clusterVirAuthPasswd=clusterVirAuthPasswd, msgText=msgText, sslTable=sslTable, reqLastDay=reqLastDay, slbStats=slbStats, vhostName=vhostName, totalSucc=totalSucc, systemInfo=systemInfo, rsTable=rsTable, succLastSec=succLastSec, cputemp=cputemp, infInUcastPkts=infInUcastPkts, hcCause=hcCause, infDescr=infDescr, gpStatsEntry=gpStatsEntry, ctcpOutSegs=ctcpOutSegs, rsMaxConn=rsMaxConn, reqLastMin=reqLastMin, PYSNMP_MODULE_ID=arrayNetworks, clusterVirPriority=clusterVirPriority, ctcpAttemptFails=ctcpAttemptFails, fanspeed=fanspeed, totalOpenSSLConns=totalOpenSSLConns, vsProtocol=vsProtocol, ctcpEstabResets=ctcpEstabResets, infInUnknownProtos=infInUnknownProtos, maxCluster=maxCluster, clusterNum=clusterNum, realIndex=realIndex, clusterVrrp=clusterVrrp, vsIndex=vsIndex, groupStats=groupStats, vsCount=vsCount, activeTransac=activeTransac, sysSwapUsed=sysSwapUsed, ipPktsIn=ipPktsIn, sslIndex=sslIndex, caSyslog=caSyslog, hcConnSuccess=hcConnSuccess, severity=severity, vsTable=vsTable, rsConnCnt=rsConnCnt, vsIpAddr=vsIpAddr, ipIndex=ipIndex, rsCntOfReq=rsCntOfReq, virtualAddress=virtualAddress, vsCacheHits=vsCacheHits, rsID=rsID, ctcpConnRemAddr=ctcpConnRemAddr, hcPort=hcPort, ipPktsOut=ipPktsOut, failLastHour=failLastHour, gpStatsTable=gpStatsTable, vsQosURLHits=vsQosURLHits, hcConnFail=hcConnFail, caStart=caStart, totalIPPktsIn=totalIPPktsIn, ctcpConnState=ctcpConnState, infOutOctets=infOutOctets, infIpv4AddressType=infIpv4AddressType, hcNumUps=hcNumUps, hcStatsEntry=hcStatsEntry, ctcpOutRsts=ctcpOutRsts, virtualPort=virtualPort, logNotificationsSent=logNotificationsSent, realID=realID, clusterVirIfname=clusterVirIfname, sentBytesPerSec=sentBytesPerSec, peakSentBytesPerSec=peakSentBytesPerSec, ipAddrType=ipAddrType, rsStatus=rsStatus, requestsPerSec=requestsPerSec, infInBandwidth=infInBandwidth, groupIndex=groupIndex, vsHeaderHits=vsHeaderHits, rsProtocol=rsProtocol, rsStatsEntry=rsStatsEntry, succPeakSec=succPeakSec)
mibBuilder.exportSymbols("CA-SNMP-MIB8", reqLastSec5=reqLastSec5, sysMemory=sysMemory, reqPeakSec=reqPeakSec, ctcpCurrEstab=ctcpCurrEstab, ctcpConnRemPort=ctcpConnRemPort, virtualAddr=virtualAddr, infOutMcastPkts=infOutMcastPkts, clusterVirState=clusterVirState, ctcpConnRemAddress=ctcpConnRemAddress, ipAddr=ipAddr, ctcpConnLocalAddrType=ctcpConnLocalAddrType, responsesOnRegex=responsesOnRegex, ctcpInErrs=ctcpInErrs, infEntry=infEntry, virtualAddressType=virtualAddressType, totalIPPktsOut=totalIPPktsOut, clientEstabConn=clientEstabConn, vsQosNetworkHits=vsQosNetworkHits, infInOctets=infInOctets, ipAddress=ipAddress, vsEntry=vsEntry, vsPerstntCookieHits=vsPerstntCookieHits, hcAddressType=hcAddressType, rsIpAddr=rsIpAddr, vsQosClientPortHits=vsQosClientPortHits, clusterVirAddr=clusterVirAddr, virtServerID=virtServerID, rsIpAddress=rsIpAddress, ctcpConnEntry=ctcpConnEntry, slbMIB=slbMIB, vsBackupHits=vsBackupHits, gpEntry=gpEntry, hcRSCount=hcRSCount, vsHostnameHits=vsHostnameHits, vrrpTable=vrrpTable, realStatus=realStatus, Float=Float, hcNumDowns=hcNumDowns, gpTable=gpTable, succLastSec5=succLastSec5, hcAddress=hcAddress, vsQosCookieHits=vsQosCookieHits, healthCheck=healthCheck, infTotalOutOctets=infTotalOutOctets, infOperStatus=infOperStatus, infInDiscards=infInDiscards, sslMIB=sslMIB, resumableSess=resumableSess, vhostNum=vhostNum, reqPeakMin=reqPeakMin, vsDefaultHits=vsDefaultHits, virtualStats=virtualStats, cacheMissWNoncacheReq=cacheMissWNoncacheReq, reqLastHour=reqLastHour, vsPort=vsPort)
