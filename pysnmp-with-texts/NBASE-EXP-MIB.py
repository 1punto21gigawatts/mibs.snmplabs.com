#
# PySNMP MIB module NBASE-EXP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NBASE-EXP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:17:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, enterprises, iso, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, TimeTicks, Counter64, Gauge32, ModuleIdentity, Unsigned32, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "enterprises", "iso", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "TimeTicks", "Counter64", "Gauge32", "ModuleIdentity", "Unsigned32", "IpAddress", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nbase = MibIdentifier((1, 3, 6, 1, 4, 1, 629))
nbSwitchG1 = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1))
nbsMegaMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 16))
nbsExpansionPortMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 16, 1))
nbsAtmLanePortMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 16, 2))
nbsFddiPortMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 1, 16, 3))
nbsExpPortMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortMaxNum.setStatus('mandatory')
nbsExpPortTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2), )
if mibBuilder.loadTexts: nbsExpPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsExpPortTable.setDescription('A table of Expansion Ports in the devices.')
nbsExpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1), ).setIndexNames((0, "NBASE-EXP-MIB", "nbsExpPortTblPortNumber"))
if mibBuilder.loadTexts: nbsExpPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsExpPortEntry.setDescription('Contains the features general to NBase Expansion port modules.')
nbsExpPortTblPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortTblPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsExpPortTblPortNumber.setDescription('The Port Number of the Expansion Port. This port number is the same as the port number used for all other purposes.')
nbsExpPortTblHwType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("cpu-card", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortTblHwType.setStatus('mandatory')
if mibBuilder.loadTexts: nbsExpPortTblHwType.setDescription('The Hardware Type of the Expansion port.')
nbsExpPortTblSwType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("atm-lec", 2), ("atm-mpoa", 3), ("fddi", 4), ("wan-router", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortTblSwType.setStatus('mandatory')
if mibBuilder.loadTexts: nbsExpPortTblSwType.setDescription('The Software Type of the Expansion port.')
nbsExpPortTblSquall = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortTblSquall.setStatus('mandatory')
if mibBuilder.loadTexts: nbsExpPortTblSquall.setDescription('The Squall Module, if any, attached to this Expansion Port.')
nbsExpPortTblHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortTblHwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nbsExpPortTblHwVersion.setDescription('A description of the Hardware Version of the Expansion Port.')
nbsExpPortTblMCodeVrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortTblMCodeVrsn.setStatus('mandatory')
if mibBuilder.loadTexts: nbsExpPortTblMCodeVrsn.setDescription('A description of the Hardware Version of the Expansion Port.')
nbsExpPortTblSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortTblSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nbsExpPortTblSwVersion.setDescription('A description of the Software Version of the Expansion Port.')
nbsExpPortTblStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsExpPortTblStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nbsExpPortTblStatus.setDescription('The status of the Expansion Port.')
nbsExpPortTftpSwFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsExpPortTftpSwFileName.setStatus('mandatory')
if mibBuilder.loadTexts: nbsExpPortTftpSwFileName.setDescription('The Software File Name for the Expansion Port. This is the remote file name string provided to the TFTP client application when starting a Firmware Update process. This value is stored in the system NVRAM as well as in the SNMP Agent current configuration.')
nbsExpPortInitDownload = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsExpPortInitDownload.setStatus('mandatory')
if mibBuilder.loadTexts: nbsExpPortInitDownload.setDescription('This is used to initiate a download session from the TFTP server. The filename which will be requested my be modified via the nbsExpPortTftpSwFileName object. Note that the only writeable value is active(1), if no session is active at this moment.')
nbsAtmLanePortMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 16, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsAtmLanePortMaxNum.setStatus('mandatory')
nbsAtmLanePortTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 16, 2, 2), )
if mibBuilder.loadTexts: nbsAtmLanePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsAtmLanePortTable.setDescription('A table of Lan Emulation Clients, indexed by the physical port number.')
nbsAtmLanePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 16, 2, 2, 1), ).setIndexNames((0, "NBASE-EXP-MIB", "nbsAtmLanePortNumber"))
if mibBuilder.loadTexts: nbsAtmLanePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsAtmLanePortEntry.setDescription('Contains the features specific to the ATM Lan Emulation Client.')
nbsAtmLanePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsAtmLanePortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsAtmLanePortNumber.setDescription('The Port Number of the Lan Emulation Client.')
laneLecsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laneLecsAddress.setStatus('mandatory')
if mibBuilder.loadTexts: laneLecsAddress.setDescription('The ATM Address (20 Octet string) of the desired Lan Emulation Configuration Server.')
sonetCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetCircuitId.setStatus('mandatory')
if mibBuilder.loadTexts: sonetCircuitId.setDescription('The Circuit Identifier, if any for the SONET interface. This information is typically provided by the owner of the SONET physical line.')
signalingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: signalingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: signalingStatus.setDescription('The Status of the ATM UNI signaling between the uplink and the ATM switch')
nbsFddiPortMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 629, 1, 16, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsFddiPortMaxNum.setStatus('mandatory')
nbsFddiPortTable = MibTable((1, 3, 6, 1, 4, 1, 629, 1, 16, 3, 2), )
if mibBuilder.loadTexts: nbsFddiPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsFddiPortTable.setDescription('A table of FDDI ports, indexed by the physical port number.')
nbsFddiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 1, 16, 3, 2, 1), ).setIndexNames((0, "NBASE-EXP-MIB", "nbsFddiPortNumber"))
if mibBuilder.loadTexts: nbsFddiPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsFddiPortEntry.setDescription('Contains the features specific to the FDDI Port.')
nbsFddiPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsFddiPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsFddiPortNumber.setDescription('The Port Number of the Lan Emulation Client.')
nbsFddiSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 1, 16, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsFddiSmtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsFddiSmtIndex.setDescription('The FDDI MIB SMT index number of this port')
mibBuilder.exportSymbols("NBASE-EXP-MIB", nbsFddiPortMIB=nbsFddiPortMIB, nbsFddiPortEntry=nbsFddiPortEntry, laneLecsAddress=laneLecsAddress, nbsExpPortInitDownload=nbsExpPortInitDownload, signalingStatus=signalingStatus, nbsMegaMibs=nbsMegaMibs, nbsAtmLanePortNumber=nbsAtmLanePortNumber, nbsExpPortMaxNum=nbsExpPortMaxNum, nbsAtmLanePortMIB=nbsAtmLanePortMIB, nbsExpPortTftpSwFileName=nbsExpPortTftpSwFileName, nbsFddiPortTable=nbsFddiPortTable, nbsFddiPortNumber=nbsFddiPortNumber, nbSwitchG1=nbSwitchG1, nbsExpPortTable=nbsExpPortTable, nbsExpPortTblStatus=nbsExpPortTblStatus, nbsExpansionPortMIB=nbsExpansionPortMIB, nbsExpPortTblPortNumber=nbsExpPortTblPortNumber, nbsExpPortTblSwType=nbsExpPortTblSwType, nbsExpPortEntry=nbsExpPortEntry, sonetCircuitId=sonetCircuitId, nbase=nbase, nbsAtmLanePortTable=nbsAtmLanePortTable, nbsExpPortTblHwVersion=nbsExpPortTblHwVersion, nbsExpPortTblSquall=nbsExpPortTblSquall, nbsFddiPortMaxNum=nbsFddiPortMaxNum, nbsExpPortTblHwType=nbsExpPortTblHwType, nbsExpPortTblSwVersion=nbsExpPortTblSwVersion, nbsExpPortTblMCodeVrsn=nbsExpPortTblMCodeVrsn, nbsAtmLanePortEntry=nbsAtmLanePortEntry, nbsFddiSmtIndex=nbsFddiSmtIndex, nbsAtmLanePortMaxNum=nbsAtmLanePortMaxNum)
