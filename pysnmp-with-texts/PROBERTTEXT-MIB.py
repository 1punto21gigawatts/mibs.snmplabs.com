#
# PySNMP MIB module PROBERTTEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PROBERTTEXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:42:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
probeRttExt, = mibBuilder.importSymbols("APENT-MIB", "probeRttExt")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Integer32, ModuleIdentity, Bits, NotificationType, iso, Counter32, IpAddress, MibIdentifier, Gauge32, Unsigned32, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "ModuleIdentity", "Bits", "NotificationType", "iso", "Counter32", "IpAddress", "MibIdentifier", "Gauge32", "Unsigned32", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
apProbeRttExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2467, 1, 55, 1))
if mibBuilder.loadTexts: apProbeRttExtMib.setLastUpdated('9707202000Z')
if mibBuilder.loadTexts: apProbeRttExtMib.setOrganization('ArrowPoint Communications Inc.')
if mibBuilder.loadTexts: apProbeRttExtMib.setContactInfo(' Customer Support Postal: ArrowPoint Communications, Inc. 50 Nagog Park Acton, Massachusetts 01720 Tel: +1 978 206 3000 E-Mail: mibsupport@arrowpoint.com')
if mibBuilder.loadTexts: apProbeRttExtMib.setDescription('The MIB module used to describe the ArrowPoint Communications Tiered Proximity Service RTT Probe Module functionality.')
apProbeRttEnable = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttEnable.setStatus('current')
if mibBuilder.loadTexts: apProbeRttEnable.setDescription("This object specifies the state of the Proximity RTT Probe Module. When 'enable' the RTT PM is running on this system. When 'disable' it is not. This object is valid only if apProximityEnable is 'enable'")
apProbeRttMethod0 = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("icmp", 0), ("tcp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apProbeRttMethod0.setStatus('current')
if mibBuilder.loadTexts: apProbeRttMethod0.setDescription("This object specifies which probe method is to be tried first. This object is valid only if apProbeRttEnable is 'enable'")
apProbeRttMethod1 = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("icmp", 0), ("tcp", 1), ("none", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apProbeRttMethod1.setStatus('current')
if mibBuilder.loadTexts: apProbeRttMethod1.setDescription("This object specifies which probe method is to be tried second. This object is valid only if apProbeRttEnable is 'enable'")
apProbeRttIcmpSamples = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apProbeRttIcmpSamples.setStatus('current')
if mibBuilder.loadTexts: apProbeRttIcmpSamples.setDescription("This object specifies the number of ICMP probe requests to be used to calculate the RTT mean. This object is valid only if apProbeRttEnable is 'enable'")
apProbeRttIcmpInterval = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apProbeRttIcmpInterval.setStatus('current')
if mibBuilder.loadTexts: apProbeRttIcmpInterval.setDescription("This object specifies the time delay in seconds between consecutive ICMP requests to an individual client. This object is valid only if apProbeRttEnable is 'enable'")
apProbeRttTcpPort0 = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apProbeRttTcpPort0.setStatus('current')
if mibBuilder.loadTexts: apProbeRttTcpPort0.setDescription("The first TCP port number to be probed on the client's local name server.")
apProbeRttTcpPort1 = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(21)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apProbeRttTcpPort1.setStatus('current')
if mibBuilder.loadTexts: apProbeRttTcpPort1.setDescription("The second TCP port number to be probed on the client's local name server. Used only if the first port fails.")
apProbeRttTcpPort2 = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apProbeRttTcpPort2.setStatus('current')
if mibBuilder.loadTexts: apProbeRttTcpPort2.setDescription("The third TCP port number to be probed on the client's local name server. Used only if the first and second ports fail.")
apProbeRttTcpPort3 = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apProbeRttTcpPort3.setStatus('current')
if mibBuilder.loadTexts: apProbeRttTcpPort3.setDescription("The fourth TCP port number to be probed on the client's local name server. Used only if the first, second and third ports fail.")
apProbeRttLastReset = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttLastReset.setStatus('current')
if mibBuilder.loadTexts: apProbeRttLastReset.setDescription('Elapsed time since the Proximity RTT Probe statistics were reset.')
apProbeRttTtlProbes = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttTtlProbes.setStatus('current')
if mibBuilder.loadTexts: apProbeRttTtlProbes.setDescription('The total number of times that the PDB has probed a client to measure the RTT. This may be more than the total number of unique clients, and may be less than the actual number of ICMP or TCP requests.')
apProbeRttAvgProbes = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttAvgProbes.setStatus('current')
if mibBuilder.loadTexts: apProbeRttAvgProbes.setDescription('The cumulative average number of probes per minute since last reset.')
apProbeRttICMPReqSent = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttICMPReqSent.setStatus('current')
if mibBuilder.loadTexts: apProbeRttICMPReqSent.setDescription('The total number of ICMP requests that have been successfully sent from the PDB in order to measure RTT.')
apProbeRttICMPResp = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttICMPResp.setStatus('current')
if mibBuilder.loadTexts: apProbeRttICMPResp.setDescription('The total number of valid ICMP responses that the PDB has received. Valid ICMP responses are used to measure RTT.')
apProbeRttICMPNoResp = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttICMPNoResp.setStatus('current')
if mibBuilder.loadTexts: apProbeRttICMPNoResp.setDescription('The total number of ICMP requests that were successfully sent that did not receive a reply. The ICMP requests that do not recieve a response are not used to measure RTT.')
apProbeRttICMPAvgReq = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttICMPAvgReq.setStatus('current')
if mibBuilder.loadTexts: apProbeRttICMPAvgReq.setDescription('The cumulative average number of ICMP requests per minute that were successfully sent during the time period since last reset.')
apProbeRttICMPSendFail = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttICMPSendFail.setStatus('current')
if mibBuilder.loadTexts: apProbeRttICMPSendFail.setDescription('The total number of ICMP requests that the PDB tried to send, but that failed internally, due to a missing route or other problem.')
apProbeRttTCPReqSent = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttTCPReqSent.setStatus('current')
if mibBuilder.loadTexts: apProbeRttTCPReqSent.setDescription('The total number of TCP requests that have been successfully sent from the PDB in order to measure RTT.')
apProbeRttTCPResp = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttTCPResp.setStatus('current')
if mibBuilder.loadTexts: apProbeRttTCPResp.setDescription('The total number of valid TCP responses that the PDB has recieved. Valid TCP responses are used to measure RTT.')
apProbeRttTCPNoResp = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttTCPNoResp.setStatus('current')
if mibBuilder.loadTexts: apProbeRttTCPNoResp.setDescription('The total number of TCP request that were successfully sent that did not recieve a usable response. The RCP requests that do not receive a response are not used to measure RTT.')
apProbeRttTCPAvgReq = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttTCPAvgReq.setStatus('current')
if mibBuilder.loadTexts: apProbeRttTCPAvgReq.setDescription('The cumulative average number of TCP requests per minute that were successfully sent during the time period since the last reset.')
apProbeRttTCPSendFail = MibScalar((1, 3, 6, 1, 4, 1, 2467, 1, 55, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttTCPSendFail.setStatus('current')
if mibBuilder.loadTexts: apProbeRttTCPSendFail.setDescription('The total number of TCP requests that the PDB tried to send, but that failed internally, due to a missing route or other problem.')
apProbeRttPortTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 55, 24), )
if mibBuilder.loadTexts: apProbeRttPortTable.setStatus('current')
if mibBuilder.loadTexts: apProbeRttPortTable.setDescription('Statistics table for the TCP ports that are used for probing clients.')
apProbeRttPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 55, 24, 1), ).setIndexNames((0, "PROBERTTEXT-MIB", "apProbeRttPortIndex"))
if mibBuilder.loadTexts: apProbeRttPortEntry.setStatus('current')
if mibBuilder.loadTexts: apProbeRttPortEntry.setDescription('Statistics table entries for TCP ports used for probing clients.')
apProbeRttPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 55, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttPortIndex.setStatus('current')
if mibBuilder.loadTexts: apProbeRttPortIndex.setDescription('The index for port information. Not the actual port number')
apProbeRttPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 55, 24, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttPortNumber.setStatus('current')
if mibBuilder.loadTexts: apProbeRttPortNumber.setDescription("The TCP port number used for probing the client's name server.")
apProbeRttPortRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 55, 24, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttPortRequests.setStatus('current')
if mibBuilder.loadTexts: apProbeRttPortRequests.setDescription("Total number of successful TCP requests to this port on the client's name server.")
apProbeRttPortResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 55, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttPortResponses.setStatus('current')
if mibBuilder.loadTexts: apProbeRttPortResponses.setDescription("Total number of respones to TCP requests that were sent to this port on the client's local name server.")
apProbeRttPortFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 55, 24, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apProbeRttPortFailures.setStatus('current')
if mibBuilder.loadTexts: apProbeRttPortFailures.setDescription("Total number of failed TCP requests that were destined for this port on the client's local name server.")
mibBuilder.exportSymbols("PROBERTTEXT-MIB", apProbeRttTCPAvgReq=apProbeRttTCPAvgReq, apProbeRttTtlProbes=apProbeRttTtlProbes, apProbeRttPortResponses=apProbeRttPortResponses, apProbeRttAvgProbes=apProbeRttAvgProbes, apProbeRttPortEntry=apProbeRttPortEntry, apProbeRttTcpPort3=apProbeRttTcpPort3, apProbeRttIcmpInterval=apProbeRttIcmpInterval, apProbeRttExtMib=apProbeRttExtMib, apProbeRttMethod1=apProbeRttMethod1, apProbeRttPortIndex=apProbeRttPortIndex, apProbeRttPortFailures=apProbeRttPortFailures, apProbeRttICMPAvgReq=apProbeRttICMPAvgReq, apProbeRttPortRequests=apProbeRttPortRequests, PYSNMP_MODULE_ID=apProbeRttExtMib, apProbeRttICMPNoResp=apProbeRttICMPNoResp, apProbeRttLastReset=apProbeRttLastReset, apProbeRttICMPSendFail=apProbeRttICMPSendFail, apProbeRttIcmpSamples=apProbeRttIcmpSamples, apProbeRttICMPResp=apProbeRttICMPResp, apProbeRttTCPResp=apProbeRttTCPResp, apProbeRttTcpPort2=apProbeRttTcpPort2, apProbeRttMethod0=apProbeRttMethod0, apProbeRttTcpPort1=apProbeRttTcpPort1, apProbeRttTCPSendFail=apProbeRttTCPSendFail, apProbeRttICMPReqSent=apProbeRttICMPReqSent, apProbeRttTCPReqSent=apProbeRttTCPReqSent, apProbeRttTcpPort0=apProbeRttTcpPort0, apProbeRttEnable=apProbeRttEnable, apProbeRttPortNumber=apProbeRttPortNumber, apProbeRttPortTable=apProbeRttPortTable, apProbeRttTCPNoResp=apProbeRttTCPNoResp)
