#
# PySNMP MIB module EDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EDS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:59:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter64, Counter32, Gauge32, Integer32, ObjectIdentity, ModuleIdentity, Unsigned32, Bits, IpAddress, enterprises, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "Counter32", "Gauge32", "Integer32", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "Bits", "IpAddress", "enterprises", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
edsProducts = ModuleIdentity((1, 3, 6, 1, 4, 1, 31440, 1, 6))
edsProducts.setRevisions(('2016-06-30 00:00', '1970-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: edsProducts.setRevisionsDescriptions(('Corrected notification example definitions', 'v2.1',))
if mibBuilder.loadTexts: edsProducts.setLastUpdated('201606300000Z')
if mibBuilder.loadTexts: edsProducts.setOrganization('www.embeddeddatasystems.com')
if mibBuilder.loadTexts: edsProducts.setContactInfo('postal: David Cooley 2019 Fortune Drive Lawrenceburg, KY 40342 email: david@embeddedatasystems.com')
if mibBuilder.loadTexts: edsProducts.setDescription('MIB objects for Embedded Data Systems')
edsMain = MibIdentifier((1, 3, 6, 1, 4, 1, 31440))
edsEnterprise = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 1))
eCompanyName = MibScalar((1, 3, 6, 1, 4, 1, 31440, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eCompanyName.setStatus('current')
if mibBuilder.loadTexts: eCompanyName.setDescription('Company owner of this enterprise number')
eProductName = MibScalar((1, 3, 6, 1, 4, 1, 31440, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eProductName.setStatus('current')
if mibBuilder.loadTexts: eProductName.setDescription('Name of this product')
eMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 31440, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eMIBVersion.setStatus('current')
if mibBuilder.loadTexts: eMIBVersion.setDescription('Version of the MIB file in the product')
eFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 31440, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: eFirmwareVersion.setDescription('Firmware version')
eFirmwareDate = MibScalar((1, 3, 6, 1, 4, 1, 31440, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eFirmwareDate.setStatus('current')
if mibBuilder.loadTexts: eFirmwareDate.setDescription('Date of firmware')
dTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 2))
dTrapTable = MibTable((1, 3, 6, 1, 4, 1, 31440, 2, 1), )
if mibBuilder.loadTexts: dTrapTable.setStatus('current')
if mibBuilder.loadTexts: dTrapTable.setDescription('Trap table')
dTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 2, 1, 1), ).setIndexNames((0, "EDS-MIB", "dTrapIndex"))
if mibBuilder.loadTexts: dTrapEntry.setStatus('current')
if mibBuilder.loadTexts: dTrapEntry.setDescription('Trap row')
dTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dTrapIndex.setStatus('current')
if mibBuilder.loadTexts: dTrapIndex.setDescription('Index of table.')
dTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dTrapEnable.setStatus('current')
if mibBuilder.loadTexts: dTrapEnable.setDescription('Zero disables the trap, one enables it.')
dTrapIP = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dTrapIP.setStatus('current')
if mibBuilder.loadTexts: dTrapIP.setDescription('Address to send trap to.')
dTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 2, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dTrapCommunity.setStatus('current')
if mibBuilder.loadTexts: dTrapCommunity.setDescription('Community string to send with trap message.')
dTrapDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 31440, 2, 2), )
if mibBuilder.loadTexts: dTrapDeviceTable.setStatus('current')
if mibBuilder.loadTexts: dTrapDeviceTable.setDescription('Trap device table')
dTrapDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 2, 2, 1), ).setIndexNames((0, "EDS-MIB", "dTrapDeviceIndex"))
if mibBuilder.loadTexts: dTrapDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: dTrapDeviceEntry.setDescription('Trap row')
dTrapDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dTrapDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: dTrapDeviceIndex.setDescription('Index of table. Traps are sent with this OID followed by the index number of the table entry that generated the trap. For example, if the values at index 5 of this table generated a trap, the name of the trap would be .iso.org.dod.internet.private.enterprises.edsMain.dTrap. dTrapDeviceTable.dTrapDeviceEntry.dTrapDeviceIndex.5. The numeric value is 1.3.6.1.4.1.31440.2.2.1.1.5. An integer value is sent with the trap, which indicates what state change caused the trap. Using the dTrapDeviceHighThreshold, dTrapDeviceLowThreshold and dTrapDeviceHysteresis values, 3 windows are created. Transitions between these windows generates a trap. The integer value indicates which transition caused the trap as follows: 1 -> middle to high window transition 2 -> high to middle window transition 3 -> middle to low window transition 4 -> low to middle window transition Note the following when programming traps: 1) Programming the HighThreshold lower than the LowThreshold is invalid and will disable trap generation. 2) dTrapDeviceHysteresis values are not checked for validity, use them with caution. 3) A trap must be enabled to be sent. 4) The dTrapDeviceROM must be set to an active device or a trap will not be sent. 5) The health of the 1-wire device must be greater than 0 or no trap will be sent. 6) The dTrapDeviceVariable must be valid. For exmaple, the DS18S20 has 3 variables as follows: Temperature, UserByte1 and UserByte2. These are numbered 0, 1 and 2 respectively. A setting of 3 or above is invalid. 7) The dTrapTable must be programmed correctly for traps to be sent. The respective table entry must be enabled and have a valid IP address. Community strings are not used by the SNMP server.')
dTrapDeviceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dTrapDeviceEnable.setStatus('current')
if mibBuilder.loadTexts: dTrapDeviceEnable.setDescription('Zero disables the trap, one enables it.')
dTrapDeviceSendPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dTrapDeviceSendPointer.setStatus('current')
if mibBuilder.loadTexts: dTrapDeviceSendPointer.setDescription('Indicates which entry in the Trap Table to use to determine where to send the trap. The Trap Table contains the destination IP address.')
dTrapDeviceROM = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dTrapDeviceROM.setStatus('current')
if mibBuilder.loadTexts: dTrapDeviceROM.setDescription('Device ROM code to base sending trap message on.')
dTrapDeviceVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dTrapDeviceVariable.setStatus('current')
if mibBuilder.loadTexts: dTrapDeviceVariable.setDescription('Number of the variable to reference, as listed in the Devices section of this MIB. For example, the DS2406 has 9 items, which would be numbered 0 - 8. So if dTrapDeviceVariable were set to 0 it would refer to owDS2406PIOAFlipFlop, if it were set to 3 it would refer to owDS2406PIOBLevel.')
dTrapDeviceHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 2, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dTrapDeviceHighThreshold.setStatus('current')
if mibBuilder.loadTexts: dTrapDeviceHighThreshold.setDescription('A trap will be generated when the variable is greater than this value or it is less than or equal to this value - dTrapDeviceHysteresis. This number may be positive or negative and may contain a decimal point.')
dTrapDeviceLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 2, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dTrapDeviceLowThreshold.setStatus('current')
if mibBuilder.loadTexts: dTrapDeviceLowThreshold.setDescription('A trap will be generated when the variable is less than this value or it is greater than or equal to this value + dTrapDeviceHysteresis. This number may be positive or negative and may contain a decimal point.')
dTrapDeviceHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 2, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dTrapDeviceHysteresis.setStatus('current')
if mibBuilder.loadTexts: dTrapDeviceHysteresis.setDescription('This value is used to limit repeated trap sends due to a value hovering around a threshold. If it is not used it should be set to zero. This number may be positive or negative and may contain a decimal point.')
owDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10))
owDeviceTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1))
owNone = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 0))
owUnknown = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 1))
owDS2406 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 2))
owDS18B20 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 3))
owDS18S20 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 4))
owDS2438 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 5))
owDS2423 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 6))
owDS2408 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 7))
owDS2450 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 8))
owEDS0064 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 9))
owEDS0065 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 10))
owEDS0066 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 11))
owEDS0067 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 12))
owEDS0068 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 13))
owEDS0069 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 14))
owEDS0070 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 15))
owEDS0071 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 16))
owEDS0080 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 17))
owEDS0082 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 18))
owEDS0083 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 19))
owEDS0085 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 20))
owEDS0090 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 21))
owEDS0091 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 22))
owEDS0092 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 23))
owDS28EA00 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 24))
owEDS0050 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 25))
owEDS0001 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 1, 26))
owDeviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 10, 2))
owDeviceNumActive = MibScalar((1, 3, 6, 1, 4, 1, 31440, 10, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDeviceNumActive.setStatus('current')
if mibBuilder.loadTexts: owDeviceNumActive.setDescription("Number of currently active 1-wire devices. A device is active if it's health is non-zero.")
owDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 3), )
if mibBuilder.loadTexts: owDeviceTable.setStatus('current')
if mibBuilder.loadTexts: owDeviceTable.setDescription('Device table')
owDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 3, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: owDeviceEntry.setDescription('Device row')
owDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: owDeviceIndex.setDescription('Index of table.')
owDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDeviceType.setStatus('current')
if mibBuilder.loadTexts: owDeviceType.setDescription('An indication of the device type. This is the last OID number to the owDeviceTypes group pointing to the name of the device. The corresponding device table will contain the specific information from the device. For example: if this entry is 2 (owDS2406) then the table owDS2406Table, at the appropriate index, will contain the data from the device.')
owDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDeviceName.setStatus('current')
if mibBuilder.loadTexts: owDeviceName.setDescription('Text description of the device.')
owDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDeviceDescription.setStatus('current')
if mibBuilder.loadTexts: owDeviceDescription.setDescription('Text description of the device.')
owDeviceFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDeviceFamily.setStatus('current')
if mibBuilder.loadTexts: owDeviceFamily.setDescription('Family number as read from 1-wire device.')
owDeviceROM = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDeviceROM.setStatus('current')
if mibBuilder.loadTexts: owDeviceROM.setDescription('Entire ROM code as read from 1-wire device (includes family number and CRC). Always 16 bytes long.')
owDeviceHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDeviceHealth.setStatus('current')
if mibBuilder.loadTexts: owDeviceHealth.setDescription('Health of device. Ranges between 0 and 8 where 0 worst case and 8 is best case. Incremented every time device responds to a search, decremented if it does not respond.')
owDS2406Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 4), )
if mibBuilder.loadTexts: owDS2406Table.setStatus('current')
if mibBuilder.loadTexts: owDS2406Table.setDescription('Table for DS2406 (dual addressable switch plus 1K bit memory).')
owDS2406Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 4, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owDS2406Entry.setStatus('current')
if mibBuilder.loadTexts: owDS2406Entry.setDescription('DS2406 row')
owDS2406PIOALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2406PIOALevel.setStatus('current')
if mibBuilder.loadTexts: owDS2406PIOALevel.setDescription('PIO-A logic level on pin. If PIO-A flip flop is low, this input will always read low.')
owDS2406PIOBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2406PIOBLevel.setStatus('current')
if mibBuilder.loadTexts: owDS2406PIOBLevel.setDescription('PIO-B logic level on pin. If PIO-B flip flop is low, this input will always read low.')
owDS2406PIOAFlipFlop = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2406PIOAFlipFlop.setStatus('current')
if mibBuilder.loadTexts: owDS2406PIOAFlipFlop.setDescription('DS2406 PIO-A Flip Flop. Sets output state of the FF. The output is open collector, so the FF must be high (1) to be able to read a pin state of low (0).')
owDS2406PIOBFlipFlop = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2406PIOBFlipFlop.setStatus('current')
if mibBuilder.loadTexts: owDS2406PIOBFlipFlop.setDescription('DS2406 PIO-B Flip Flop. Sets output state of the FF. The output is open collector, so the FF must be high (1) to be able to read a pin state of low (0).')
owDS2406PIOAActivityLatch = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noActivity", 0), ("yesActivity", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2406PIOAActivityLatch.setStatus('current')
if mibBuilder.loadTexts: owDS2406PIOAActivityLatch.setDescription('High (1) if the pin state had activity. Reset by writing to activity latch reset.')
owDS2406PIOBActivityLatch = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noActivity", 0), ("yesActivity", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2406PIOBActivityLatch.setStatus('current')
if mibBuilder.loadTexts: owDS2406PIOBActivityLatch.setDescription('High (1) if the pin state had activity. Reset by writing to activity latch reset.')
owDS2406NumChnls = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pioAonly", 0), ("pioAandB", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2406NumChnls.setStatus('current')
if mibBuilder.loadTexts: owDS2406NumChnls.setDescription('Number of PIO channels the device supports. PIO-A only is 0, PIO-A and PIO-B is 1.')
owDS2406PwrSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pwrParasite", 0), ("pwrExternal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2406PwrSupply.setStatus('current')
if mibBuilder.loadTexts: owDS2406PwrSupply.setDescription('Source of power for device. 0 is parasite powered, 1 is externally powered.')
owDS2406ActivityLatchReset = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noReset", 0), ("yesReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2406ActivityLatchReset.setStatus('current')
if mibBuilder.loadTexts: owDS2406ActivityLatchReset.setDescription('Activity latch reset is used to reset both PIO-A and PIO-B activity latch. Send 1 to reset the latch. Always reads 0.')
owDS18B20Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 5), )
if mibBuilder.loadTexts: owDS18B20Table.setStatus('current')
if mibBuilder.loadTexts: owDS18B20Table.setDescription('Table for DS18B20 (programmable resolution 1-wire digital thermometer).')
owDS18B20Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 5, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owDS18B20Entry.setStatus('current')
if mibBuilder.loadTexts: owDS18B20Entry.setDescription('DS18B20 row')
owDS18B20Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS18B20Temperature.setStatus('current')
if mibBuilder.loadTexts: owDS18B20Temperature.setDescription("current temperature from device, desplayed as a string with decimal point. Required since MIB's cannot contain floating point numbers.")
owDS18B20UserByte1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS18B20UserByte1.setStatus('current')
if mibBuilder.loadTexts: owDS18B20UserByte1.setDescription('User byte 1 as read from EEPROM.')
owDS18B20UserByte2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS18B20UserByte2.setStatus('current')
if mibBuilder.loadTexts: owDS18B20UserByte2.setDescription('User byte 2 as read from EEPROM.')
owDS18B20Resolution = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 10, 11, 12))).clone(namedValues=NamedValues(("nineBits", 9), ("tenBits", 10), ("elevenBits", 11), ("twelveBits", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS18B20Resolution.setStatus('current')
if mibBuilder.loadTexts: owDS18B20Resolution.setDescription('Resolution of temperature reading, can be 9, 10, 11 or 12 bits. Default is 12 bits. 0 is 9 bits, 1 is 10 bits, 2 is 11 bits and 3 is 12 bits.')
owDS18B20PwrSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 255))).clone(namedValues=NamedValues(("parasitePower", 0), ("externalPower", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS18B20PwrSupply.setStatus('current')
if mibBuilder.loadTexts: owDS18B20PwrSupply.setDescription('Power source. Parasite or external. Zero is parasite.')
owDS18S20Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 6), )
if mibBuilder.loadTexts: owDS18S20Table.setStatus('current')
if mibBuilder.loadTexts: owDS18S20Table.setDescription('Table for DS18S20 device data.')
owDS18S20Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 6, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owDS18S20Entry.setStatus('current')
if mibBuilder.loadTexts: owDS18S20Entry.setDescription('')
owDS18S20Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS18S20Temperature.setStatus('current')
if mibBuilder.loadTexts: owDS18S20Temperature.setDescription('Latest temperature reading, in degrees centigrade.')
owDS18S20UserByte1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS18S20UserByte1.setStatus('current')
if mibBuilder.loadTexts: owDS18S20UserByte1.setDescription('User byte from device EEPROM.')
owDS18S20UserByte2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS18S20UserByte2.setStatus('current')
if mibBuilder.loadTexts: owDS18S20UserByte2.setDescription('User byte from device EEPROM.')
owDS2423Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 7), )
if mibBuilder.loadTexts: owDS2423Table.setStatus('current')
if mibBuilder.loadTexts: owDS2423Table.setDescription('Table for DS2423 device data.')
owDS2423Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 7, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owDS2423Entry.setStatus('current')
if mibBuilder.loadTexts: owDS2423Entry.setDescription('DS2423 row')
owDS2423CounterA = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2423CounterA.setStatus('current')
if mibBuilder.loadTexts: owDS2423CounterA.setDescription('Counter A value.')
owDS2423CounterB = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2423CounterB.setStatus('current')
if mibBuilder.loadTexts: owDS2423CounterB.setDescription('Counter B value.')
owDS2438Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 8), )
if mibBuilder.loadTexts: owDS2438Table.setStatus('current')
if mibBuilder.loadTexts: owDS2438Table.setDescription('Table for DS2438 device data.')
owDS2438Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 8, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owDS2438Entry.setStatus('current')
if mibBuilder.loadTexts: owDS2438Entry.setDescription('')
owDS2438Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2438Temperature.setStatus('current')
if mibBuilder.loadTexts: owDS2438Temperature.setDescription('Temperature.')
owDS2438SupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2438SupplyVoltage.setStatus('current')
if mibBuilder.loadTexts: owDS2438SupplyVoltage.setDescription('Voltage of the power supply.')
owDS2438PinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2438PinVoltage.setStatus('current')
if mibBuilder.loadTexts: owDS2438PinVoltage.setDescription('Voltage at Pin Vad (pin 4).')
owDS2438current = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2438current.setStatus('current')
if mibBuilder.loadTexts: owDS2438current.setDescription('Voltage between the current pins.')
owDS2438Humidity = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2438Humidity.setStatus('current')
if mibBuilder.loadTexts: owDS2438Humidity.setDescription('Calculated humidity.')
owDS2408Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 9), )
if mibBuilder.loadTexts: owDS2408Table.setStatus('current')
if mibBuilder.loadTexts: owDS2408Table.setDescription('Table for DS2408 (8-channel addressable switch).')
owDS2408Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 9, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owDS2408Entry.setStatus('current')
if mibBuilder.loadTexts: owDS2408Entry.setDescription('DS2408 row')
owDS2408PIOLogicState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2408PIOLogicState.setStatus('current')
if mibBuilder.loadTexts: owDS2408PIOLogicState.setDescription('Logic level on the 8 IO pins.')
owDS2408PIOOutputLatchState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 9, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2408PIOOutputLatchState.setStatus('current')
if mibBuilder.loadTexts: owDS2408PIOOutputLatchState.setDescription('Output latch states. Sets output state of the FFs. The output is open collector, so the FF must be high (1) to be able to read a pin state of low (0).')
owDS2408PIOActivityLatchState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 255))).clone(namedValues=NamedValues(("low", 0), ("high", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2408PIOActivityLatchState.setStatus('current')
if mibBuilder.loadTexts: owDS2408PIOActivityLatchState.setDescription('High (1) if the pin state had activity. Reset by writing to activity latch reset.')
owDS2408RSTZConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2408RSTZConfiguration.setStatus('current')
if mibBuilder.loadTexts: owDS2408RSTZConfiguration.setDescription('Configures the RSTZ pin as a /RSTZ input (set to 0) or a /STRB output (set to 1).')
owDS2408PowerOnResetLatch = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2408PowerOnResetLatch.setStatus('current')
if mibBuilder.loadTexts: owDS2408PowerOnResetLatch.setDescription('Set high (1) with a power on reset. Reset by writing to a 0.')
owDS2408VCCPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2408VCCPowerStatus.setStatus('current')
if mibBuilder.loadTexts: owDS2408VCCPowerStatus.setDescription('High (1) if the VCC pin is connected to power, low (0) otherwise.')
owDS2450Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 10), )
if mibBuilder.loadTexts: owDS2450Table.setStatus('current')
if mibBuilder.loadTexts: owDS2450Table.setDescription('Table for DS2450 (8-channel addressable switch).')
owDS2450Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owDS2450Entry.setStatus('current')
if mibBuilder.loadTexts: owDS2450Entry.setDescription('DS2450 row')
owDS2450ChannelAConversionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2450ChannelAConversionValue.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelAConversionValue.setDescription('Conversion value of the channel, in volts.')
owDS2450ChannelAConversionResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450ChannelAConversionResolution.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelAConversionResolution.setDescription('Conversion resolution of the channel. Can be set between 1 and 16.')
owDS2450ChannelAConversionRange = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450ChannelAConversionRange.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelAConversionRange.setDescription('If high (1), the maximum voltage that can be measured is 5.10, low (0) sets the maximum voltage to 2.55.')
owDS2450ChannelAOutputEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450ChannelAOutputEnable.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelAOutputEnable.setDescription('A setting of 1 enables the output transistor, use ChannelXOutputControl to turn the transistor on / off.')
owDS2450ChannelAOutputControl = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450ChannelAOutputControl.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelAOutputControl.setDescription('Set to low (0) to turn on the output transistor. Has no effect if ChannelXOutputEnable is low (0).')
owDS2450ChannelBConversionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2450ChannelBConversionValue.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelBConversionValue.setDescription('Conversion value of the channel, in volts.')
owDS2450ChannelBConversionResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450ChannelBConversionResolution.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelBConversionResolution.setDescription('Conversion resolution of the channel. Can be set between 1 and 16.')
owDS2450ChannelBConversionRange = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450ChannelBConversionRange.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelBConversionRange.setDescription('If high (1), the maximum voltage that can be measured is 5.10, low (0) sets the maximum voltage to 2.55.')
owDS2450ChannelBOutputEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450ChannelBOutputEnable.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelBOutputEnable.setDescription('A setting of 1 enables the output transistor, use ChannelXOutputControl to turn the transistor on / off.')
owDS2450ChannelBOutputControl = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450ChannelBOutputControl.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelBOutputControl.setDescription('Set to low (0) to turn on the output transistor. Has no effect if ChannelXOutputEnable is low (0).')
owDS2450ChannelCConversionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2450ChannelCConversionValue.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelCConversionValue.setDescription('Conversion value of the channel, in volts.')
owDS2450ChannelCConversionResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450ChannelCConversionResolution.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelCConversionResolution.setDescription('Conversion resolution of the channel. Can be set between 1 and 16.')
owDS2450ChannelCConversionRange = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450ChannelCConversionRange.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelCConversionRange.setDescription('If high (1), the maximum voltage that can be measured is 5.10, low (0) sets the maximum voltage to 2.55.')
owDS2450ChannelCOutputEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450ChannelCOutputEnable.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelCOutputEnable.setDescription('A setting of 1 enables the output transistor, use ChannelXOutputControl to turn the transistor on / off.')
owDS2450ChannelCOutputControl = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450ChannelCOutputControl.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelCOutputControl.setDescription('Set to low (0) to turn on the output transistor. Has no effect if ChannelXOutputEnable is low (0).')
owDS2450ChannelDConversionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS2450ChannelDConversionValue.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelDConversionValue.setDescription('Conversion value of the channel, in volts.')
owDS2450ChannelDConversionResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450ChannelDConversionResolution.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelDConversionResolution.setDescription('Conversion resolution of the channel. Can be set between 1 and 16.')
owDS2450ChannelDConversionRange = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450ChannelDConversionRange.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelDConversionRange.setDescription('If high (1), the maximum voltage that can be measured is 5.10, low (0) sets the maximum voltage to 2.55.')
owDS2450ChannelDOutputEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450ChannelDOutputEnable.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelDOutputEnable.setDescription('A setting of 1 enables the output transistor, use ChannelXOutputControl to turn the transistor on / off.')
owDS2450ChannelDOutputControl = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450ChannelDOutputControl.setStatus('current')
if mibBuilder.loadTexts: owDS2450ChannelDOutputControl.setDescription('Set to low (0) to turn on the output transistor. Has no effect if ChannelXOutputEnable is low (0).')
owDS2450PowerOnReset = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450PowerOnReset.setStatus('current')
if mibBuilder.loadTexts: owDS2450PowerOnReset.setDescription('Set high (1) with a power on reset. Reset by writing any value.')
owDS2450VCCControl = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS2450VCCControl.setStatus('current')
if mibBuilder.loadTexts: owDS2450VCCControl.setDescription('Set high (1) if the VCC pin is connected to power, set low (0) otherwise.')
owEDS0064Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 11), )
if mibBuilder.loadTexts: owEDS0064Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0064Table.setDescription('Table for EDS0064 device data (temperature)')
owEDS0064Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 11, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0064Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0064Entry.setDescription('EDS0064 row')
owEDS0064Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0064Temperature.setStatus('current')
if mibBuilder.loadTexts: owEDS0064Temperature.setDescription('Temperature.')
owEDS0064Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0064Counter.setStatus('current')
if mibBuilder.loadTexts: owEDS0064Counter.setDescription('Counter.')
owEDS0065Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 12), )
if mibBuilder.loadTexts: owEDS0065Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0065Table.setDescription('Table for EDS0065 device data (temperature and humiditiy).')
owEDS0065Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 12, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0065Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0065Entry.setDescription('')
owEDS0065Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0065Temperature.setStatus('current')
if mibBuilder.loadTexts: owEDS0065Temperature.setDescription('Temperature.')
owEDS0065Humidity = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0065Humidity.setStatus('current')
if mibBuilder.loadTexts: owEDS0065Humidity.setDescription('Humidity.')
owEDS0065DewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0065DewPoint.setStatus('current')
if mibBuilder.loadTexts: owEDS0065DewPoint.setDescription('DewPoint.')
owEDS0065Humidex = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0065Humidex.setStatus('current')
if mibBuilder.loadTexts: owEDS0065Humidex.setDescription('Humidex.')
owEDS0065HeatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0065HeatIndex.setStatus('current')
if mibBuilder.loadTexts: owEDS0065HeatIndex.setDescription('Heat Index.')
owEDS0065Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0065Counter.setStatus('current')
if mibBuilder.loadTexts: owEDS0065Counter.setDescription('Counter.')
owEDS0066Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 13), )
if mibBuilder.loadTexts: owEDS0066Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0066Table.setDescription('Table for EDS0001 device data (temperature and barometric pressure).')
owEDS0066Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 13, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0066Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0066Entry.setDescription('')
owEDS0066Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0066Temperature.setStatus('current')
if mibBuilder.loadTexts: owEDS0066Temperature.setDescription('Temperature.')
owEDS0066BarometricPressureMb = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0066BarometricPressureMb.setStatus('current')
if mibBuilder.loadTexts: owEDS0066BarometricPressureMb.setDescription('Barometric Pressure in Millibars.')
owEDS0066BarometricPressureHg = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0066BarometricPressureHg.setStatus('current')
if mibBuilder.loadTexts: owEDS0066BarometricPressureHg.setDescription('Barometric Pressure in Inches of Mercury.')
owEDS0066Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0066Counter.setStatus('current')
if mibBuilder.loadTexts: owEDS0066Counter.setDescription('Counter.')
owEDS0067Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 14), )
if mibBuilder.loadTexts: owEDS0067Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0067Table.setDescription('Table for EDS0067 device data (temperature and light).')
owEDS0067Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 14, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0067Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0067Entry.setDescription('')
owEDS0067Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 14, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0067Temperature.setStatus('current')
if mibBuilder.loadTexts: owEDS0067Temperature.setDescription('Temperature.')
owEDS0067Light = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0067Light.setStatus('current')
if mibBuilder.loadTexts: owEDS0067Light.setDescription('Light.')
owEDS0067Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0067Counter.setStatus('current')
if mibBuilder.loadTexts: owEDS0067Counter.setDescription('Counter.')
owEDS0068Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 15), )
if mibBuilder.loadTexts: owEDS0068Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0068Table.setDescription('Table for EDS0068 device data (temperature, humidity, barometric pressure and light).')
owEDS0068Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 15, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0068Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0068Entry.setDescription('')
owEDS0068Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 15, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0068Temperature.setStatus('current')
if mibBuilder.loadTexts: owEDS0068Temperature.setDescription('Temperature.')
owEDS0068Humidity = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0068Humidity.setStatus('current')
if mibBuilder.loadTexts: owEDS0068Humidity.setDescription('Humidity.')
owEDS0068DewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 15, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0068DewPoint.setStatus('current')
if mibBuilder.loadTexts: owEDS0068DewPoint.setDescription('DewPoint.')
owEDS0068Humidex = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 15, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0068Humidex.setStatus('current')
if mibBuilder.loadTexts: owEDS0068Humidex.setDescription('Humidex.')
owEDS0068HeatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0068HeatIndex.setStatus('current')
if mibBuilder.loadTexts: owEDS0068HeatIndex.setDescription('Heat Index.')
owEDS0068BarometricPressureMb = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 15, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0068BarometricPressureMb.setStatus('current')
if mibBuilder.loadTexts: owEDS0068BarometricPressureMb.setDescription('Barometric Pressure in Millibars.')
owEDS0068BarometricPressureHg = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 15, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0068BarometricPressureHg.setStatus('current')
if mibBuilder.loadTexts: owEDS0068BarometricPressureHg.setDescription('Barometric Pressure in Inches of Mercury.')
owEDS0068Light = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 15, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0068Light.setStatus('current')
if mibBuilder.loadTexts: owEDS0068Light.setDescription('Light.')
owEDS0068Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0068Counter.setStatus('current')
if mibBuilder.loadTexts: owEDS0068Counter.setDescription('Counter.')
owEDS0069Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 16), )
if mibBuilder.loadTexts: owEDS0069Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0069Table.setDescription('Table for EDS0069 device data (temperature and motion).')
owEDS0069Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 16, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0069Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0069Entry.setDescription('')
owEDS0069Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 16, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0069Temperature.setStatus('current')
if mibBuilder.loadTexts: owEDS0069Temperature.setDescription('Temperature.')
owEDS0069Motion = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0069Motion.setStatus('current')
if mibBuilder.loadTexts: owEDS0069Motion.setDescription('Motion counter.')
owEDS0069Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0069Counter.setStatus('current')
if mibBuilder.loadTexts: owEDS0069Counter.setDescription('Counter.')
owEDS0070Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 17), )
if mibBuilder.loadTexts: owEDS0070Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0070Table.setDescription('Table for EDS0070 device data (vibration).')
owEDS0070Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 17, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0070Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0070Entry.setDescription('')
owEDS0070VibrationInstant = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 65535))).clone(namedValues=NamedValues(("low", 0), ("high", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0070VibrationInstant.setStatus('current')
if mibBuilder.loadTexts: owEDS0070VibrationInstant.setDescription('Vibration, instant value.')
owEDS0070VibrationPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 65535))).clone(namedValues=NamedValues(("low", 0), ("high", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0070VibrationPeak.setStatus('current')
if mibBuilder.loadTexts: owEDS0070VibrationPeak.setDescription('Vibration, instant value.')
owEDS0070VibrationMax = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 65535))).clone(namedValues=NamedValues(("low", 0), ("high", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0070VibrationMax.setStatus('current')
if mibBuilder.loadTexts: owEDS0070VibrationMax.setDescription('Vibration, instant value.')
owEDS0070VibrationMin = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 65535))).clone(namedValues=NamedValues(("low", 0), ("high", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0070VibrationMin.setStatus('current')
if mibBuilder.loadTexts: owEDS0070VibrationMin.setDescription('Vibration, instant value.')
owEDS0070Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0070Counter.setStatus('current')
if mibBuilder.loadTexts: owEDS0070Counter.setDescription('Counter.')
owEDS0071Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 18), )
if mibBuilder.loadTexts: owEDS0071Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0071Table.setDescription('Table for EDS0071 device data (RTD 4-wire).')
owEDS0071Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 18, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0071Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0071Entry.setDescription('')
owEDS0071Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 18, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0071Temperature.setStatus('current')
if mibBuilder.loadTexts: owEDS0071Temperature.setDescription('Temperature.')
owEDS0071Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0071Counter.setStatus('current')
if mibBuilder.loadTexts: owEDS0071Counter.setDescription('Counter.')
owEDS0080Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 19), )
if mibBuilder.loadTexts: owEDS0080Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0080Table.setDescription('Table for EDS0080 device data (octal 4-20ma).')
owEDS0080Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 19, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0080Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0080Entry.setDescription('')
owEDS0080Input1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 19, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0080Input1.setStatus('current')
if mibBuilder.loadTexts: owEDS0080Input1.setDescription('Input 1.')
owEDS0080Input2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 19, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0080Input2.setStatus('current')
if mibBuilder.loadTexts: owEDS0080Input2.setDescription('Input 2.')
owEDS0080Input3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 19, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0080Input3.setStatus('current')
if mibBuilder.loadTexts: owEDS0080Input3.setDescription('Input 3.')
owEDS0080Input4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 19, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0080Input4.setStatus('current')
if mibBuilder.loadTexts: owEDS0080Input4.setDescription('Input 4.')
owEDS0080Input5 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 19, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0080Input5.setStatus('current')
if mibBuilder.loadTexts: owEDS0080Input5.setDescription('Input 5.')
owEDS0080Input6 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 19, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0080Input6.setStatus('current')
if mibBuilder.loadTexts: owEDS0080Input6.setDescription('Input 6.')
owEDS0080Input7 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 19, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0080Input7.setStatus('current')
if mibBuilder.loadTexts: owEDS0080Input7.setDescription('Input 7.')
owEDS0080Input8 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 19, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0080Input8.setStatus('current')
if mibBuilder.loadTexts: owEDS0080Input8.setDescription('Input 8.')
owEDS0080Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0080Counter.setStatus('current')
if mibBuilder.loadTexts: owEDS0080Counter.setDescription('Counter.')
owEDS0082Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 20), )
if mibBuilder.loadTexts: owEDS0082Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0082Table.setDescription('Table for EDS0082 device data (octal 0-10v).')
owEDS0082Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 20, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0082Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0082Entry.setDescription('')
owEDS0082Input1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 20, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0082Input1.setStatus('current')
if mibBuilder.loadTexts: owEDS0082Input1.setDescription('Input 1.')
owEDS0082Input2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0082Input2.setStatus('current')
if mibBuilder.loadTexts: owEDS0082Input2.setDescription('Input 2.')
owEDS0082Input3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 20, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0082Input3.setStatus('current')
if mibBuilder.loadTexts: owEDS0082Input3.setDescription('Input 3.')
owEDS0082Input4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 20, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0082Input4.setStatus('current')
if mibBuilder.loadTexts: owEDS0082Input4.setDescription('Input 4.')
owEDS0082Input5 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 20, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0082Input5.setStatus('current')
if mibBuilder.loadTexts: owEDS0082Input5.setDescription('Input 5.')
owEDS0082Input6 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 20, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0082Input6.setStatus('current')
if mibBuilder.loadTexts: owEDS0082Input6.setDescription('Input 6.')
owEDS0082Input7 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 20, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0082Input7.setStatus('current')
if mibBuilder.loadTexts: owEDS0082Input7.setDescription('Input 7.')
owEDS0082Input8 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 20, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0082Input8.setStatus('current')
if mibBuilder.loadTexts: owEDS0082Input8.setDescription('Input 8.')
owEDS0082Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 20, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0082Counter.setStatus('current')
if mibBuilder.loadTexts: owEDS0082Counter.setDescription('Counter.')
owEDS0083Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 21), )
if mibBuilder.loadTexts: owEDS0083Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0083Table.setDescription('Table for EDS0083 device data (quad 4-20ma).')
owEDS0083Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 21, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0083Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0083Entry.setDescription('')
owEDS0083Input1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 21, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0083Input1.setStatus('current')
if mibBuilder.loadTexts: owEDS0083Input1.setDescription('Input 1.')
owEDS0083Input2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0083Input2.setStatus('current')
if mibBuilder.loadTexts: owEDS0083Input2.setDescription('Input 2.')
owEDS0083Input3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 21, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0083Input3.setStatus('current')
if mibBuilder.loadTexts: owEDS0083Input3.setDescription('Input 3.')
owEDS0083Input4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 21, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0083Input4.setStatus('current')
if mibBuilder.loadTexts: owEDS0083Input4.setDescription('Input 4.')
owEDS0083Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 21, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0083Counter.setStatus('current')
if mibBuilder.loadTexts: owEDS0083Counter.setDescription('Counter.')
owEDS0085Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 22), )
if mibBuilder.loadTexts: owEDS0085Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0085Table.setDescription('Table for EDS0085 device data (quad 0-10v).')
owEDS0085Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 22, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0085Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0085Entry.setDescription('')
owEDS0085Input1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 22, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0085Input1.setStatus('current')
if mibBuilder.loadTexts: owEDS0085Input1.setDescription('Input 1.')
owEDS0085Input2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 22, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0085Input2.setStatus('current')
if mibBuilder.loadTexts: owEDS0085Input2.setDescription('Input 2.')
owEDS0085Input3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 22, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0085Input3.setStatus('current')
if mibBuilder.loadTexts: owEDS0085Input3.setDescription('Input 3.')
owEDS0085Input4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 22, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0085Input4.setStatus('current')
if mibBuilder.loadTexts: owEDS0085Input4.setDescription('Input 4.')
owEDS0085Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 22, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0085Counter.setStatus('current')
if mibBuilder.loadTexts: owEDS0085Counter.setDescription('Counter.')
owEDS0090Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 23), )
if mibBuilder.loadTexts: owEDS0090Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Table.setDescription('Table for EDS0090 device data (octal discrete IO).')
owEDS0090Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0090Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Entry.setDescription('')
owEDS0090Input1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090Input1.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Input1.setDescription('Input 1.')
owEDS0090Input2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090Input2.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Input2.setDescription('Input 2.')
owEDS0090Input3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090Input3.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Input3.setDescription('Input 3.')
owEDS0090Input4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090Input4.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Input4.setDescription('Input 4.')
owEDS0090Input5 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090Input5.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Input5.setDescription('Input 5.')
owEDS0090Input6 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090Input6.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Input6.setDescription('Input 6.')
owEDS0090Input7 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090Input7.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Input7.setDescription('Input 7.')
owEDS0090Input8 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090Input8.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Input8.setDescription('Input 8.')
owEDS0090ActivityLatch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090ActivityLatch1.setStatus('current')
if mibBuilder.loadTexts: owEDS0090ActivityLatch1.setDescription('Activity Latch 1.')
owEDS0090ActivityLatch2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090ActivityLatch2.setStatus('current')
if mibBuilder.loadTexts: owEDS0090ActivityLatch2.setDescription('Activity Latch 2.')
owEDS0090ActivityLatch3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090ActivityLatch3.setStatus('current')
if mibBuilder.loadTexts: owEDS0090ActivityLatch3.setDescription('Activity Latch 3.')
owEDS0090ActivityLatch4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090ActivityLatch4.setStatus('current')
if mibBuilder.loadTexts: owEDS0090ActivityLatch4.setDescription('Activity Latch 4.')
owEDS0090ActivityLatch5 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090ActivityLatch5.setStatus('current')
if mibBuilder.loadTexts: owEDS0090ActivityLatch5.setDescription('Activity Latch 5.')
owEDS0090ActivityLatch6 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090ActivityLatch6.setStatus('current')
if mibBuilder.loadTexts: owEDS0090ActivityLatch6.setDescription('Activity Latch 6.')
owEDS0090ActivityLatch7 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090ActivityLatch7.setStatus('current')
if mibBuilder.loadTexts: owEDS0090ActivityLatch7.setDescription('Activity Latch 7.')
owEDS0090ActivityLatch8 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090ActivityLatch8.setStatus('current')
if mibBuilder.loadTexts: owEDS0090ActivityLatch8.setDescription('Activity Latch 8.')
owEDS0090PulseCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090PulseCounter1.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PulseCounter1.setDescription('Pulse Counter 1.')
owEDS0090PulseCounter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090PulseCounter2.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PulseCounter2.setDescription('Pulse Counter 2.')
owEDS0090PulseCounter3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090PulseCounter3.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PulseCounter3.setDescription('Pulse Counter 3.')
owEDS0090PulseCounter4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090PulseCounter4.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PulseCounter4.setDescription('Pulse Counter 4.')
owEDS0090PulseCounter5 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090PulseCounter5.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PulseCounter5.setDescription('Pulse Counter 5.')
owEDS0090PulseCounter6 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090PulseCounter6.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PulseCounter6.setDescription('Pulse Counter 6.')
owEDS0090PulseCounter7 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090PulseCounter7.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PulseCounter7.setDescription('Pulse Counter 7.')
owEDS0090PulseCounter8 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090PulseCounter8.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PulseCounter8.setDescription('Pulse Counter 8.')
owEDS0090Output1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090Output1.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Output1.setDescription('Output 1.')
owEDS0090Output2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090Output2.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Output2.setDescription('Output 2.')
owEDS0090Output3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090Output3.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Output3.setDescription('Output 3.')
owEDS0090Output4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090Output4.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Output4.setDescription('Output 4.')
owEDS0090Output5 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090Output5.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Output5.setDescription('Output 5.')
owEDS0090Output6 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090Output6.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Output6.setDescription('Output 6.')
owEDS0090Output7 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090Output7.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Output7.setDescription('Output 7.')
owEDS0090Output8 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090Output8.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Output8.setDescription('Output 8.')
owEDS0090PullDown1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090PullDown1.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PullDown1.setDescription('PullDown 1.')
owEDS0090PullDown2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090PullDown2.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PullDown2.setDescription('PullDown 1.')
owEDS0090PullDown3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090PullDown3.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PullDown3.setDescription('PullDown 1.')
owEDS0090PullDown4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090PullDown4.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PullDown4.setDescription('PullDown 1.')
owEDS0090PullDown5 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090PullDown5.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PullDown5.setDescription('PullDown 1.')
owEDS0090PullDown6 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090PullDown6.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PullDown6.setDescription('PullDown 1.')
owEDS0090PullDown7 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090PullDown7.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PullDown7.setDescription('PullDown 1.')
owEDS0090PullDown8 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090PullDown8.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PullDown8.setDescription('PullDown 1.')
owEDS0090ActivityLatchReset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090ActivityLatchReset1.setStatus('current')
if mibBuilder.loadTexts: owEDS0090ActivityLatchReset1.setDescription('Activity Latch Reset 1.')
owEDS0090ActivityLatchReset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090ActivityLatchReset2.setStatus('current')
if mibBuilder.loadTexts: owEDS0090ActivityLatchReset2.setDescription('Activity Latch Reset 2.')
owEDS0090ActivityLatchReset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090ActivityLatchReset3.setStatus('current')
if mibBuilder.loadTexts: owEDS0090ActivityLatchReset3.setDescription('Activity Latch Reset 3.')
owEDS0090ActivityLatchReset4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090ActivityLatchReset4.setStatus('current')
if mibBuilder.loadTexts: owEDS0090ActivityLatchReset4.setDescription('Activity Latch Reset 4.')
owEDS0090ActivityLatchReset5 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090ActivityLatchReset5.setStatus('current')
if mibBuilder.loadTexts: owEDS0090ActivityLatchReset5.setDescription('Activity Latch Reset 5.')
owEDS0090ActivityLatchReset6 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090ActivityLatchReset6.setStatus('current')
if mibBuilder.loadTexts: owEDS0090ActivityLatchReset6.setDescription('Activity Latch Reset 6.')
owEDS0090ActivityLatchReset7 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090ActivityLatchReset7.setStatus('current')
if mibBuilder.loadTexts: owEDS0090ActivityLatchReset7.setDescription('Activity Latch Reset 7.')
owEDS0090ActivityLatchReset8 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090ActivityLatchReset8.setStatus('current')
if mibBuilder.loadTexts: owEDS0090ActivityLatchReset8.setDescription('Activity Latch Reset 8.')
owEDS0090PulseCounterReset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090PulseCounterReset1.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PulseCounterReset1.setDescription('Pulse Counter Reset 1.')
owEDS0090PulseCounterReset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090PulseCounterReset2.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PulseCounterReset2.setDescription('Pulse Counter Reset 2.')
owEDS0090PulseCounterReset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090PulseCounterReset3.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PulseCounterReset3.setDescription('Pulse Counter Reset 3.')
owEDS0090PulseCounterReset4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090PulseCounterReset4.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PulseCounterReset4.setDescription('Pulse Counter Reset 4.')
owEDS0090PulseCounterReset5 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090PulseCounterReset5.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PulseCounterReset5.setDescription('Pulse Counter Reset 5.')
owEDS0090PulseCounterReset6 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090PulseCounterReset6.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PulseCounterReset6.setDescription('Pulse Counter Reset 6.')
owEDS0090PulseCounterReset7 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090PulseCounterReset7.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PulseCounterReset7.setDescription('Pulse Counter Reset 7.')
owEDS0090PulseCounterReset8 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0090PulseCounterReset8.setStatus('current')
if mibBuilder.loadTexts: owEDS0090PulseCounterReset8.setDescription('Pulse Counter Reset 8.')
owEDS0090Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 23, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0090Counter.setStatus('current')
if mibBuilder.loadTexts: owEDS0090Counter.setDescription('Counter.')
owEDS0091Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 24), )
if mibBuilder.loadTexts: owEDS0091Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0091Table.setDescription('Table for EDS0091 device data (quad opto input).')
owEDS0091Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0091Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0091Entry.setDescription('')
owEDS0091Input1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0091Input1.setStatus('current')
if mibBuilder.loadTexts: owEDS0091Input1.setDescription('Input 1.')
owEDS0091Input2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0091Input2.setStatus('current')
if mibBuilder.loadTexts: owEDS0091Input2.setDescription('Input 2.')
owEDS0091Input3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0091Input3.setStatus('current')
if mibBuilder.loadTexts: owEDS0091Input3.setDescription('Input 3.')
owEDS0091Input4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0091Input4.setStatus('current')
if mibBuilder.loadTexts: owEDS0091Input4.setDescription('Input 4.')
owEDS0091ActivityLatch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0091ActivityLatch1.setStatus('current')
if mibBuilder.loadTexts: owEDS0091ActivityLatch1.setDescription('Activity Latch 1.')
owEDS0091ActivityLatch2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0091ActivityLatch2.setStatus('current')
if mibBuilder.loadTexts: owEDS0091ActivityLatch2.setDescription('Activity Latch 2.')
owEDS0091ActivityLatch3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0091ActivityLatch3.setStatus('current')
if mibBuilder.loadTexts: owEDS0091ActivityLatch3.setDescription('Activity Latch 3.')
owEDS0091ActivityLatch4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0091ActivityLatch4.setStatus('current')
if mibBuilder.loadTexts: owEDS0091ActivityLatch4.setDescription('Activity Latch 4.')
owEDS0091PulseCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0091PulseCounter1.setStatus('current')
if mibBuilder.loadTexts: owEDS0091PulseCounter1.setDescription('Pulse Counter 1.')
owEDS0091PulseCounter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0091PulseCounter2.setStatus('current')
if mibBuilder.loadTexts: owEDS0091PulseCounter2.setDescription('Pulse Counter 1.')
owEDS0091PulseCounter3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0091PulseCounter3.setStatus('current')
if mibBuilder.loadTexts: owEDS0091PulseCounter3.setDescription('Pulse Counter 1.')
owEDS0091PulseCounter4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0091PulseCounter4.setStatus('current')
if mibBuilder.loadTexts: owEDS0091PulseCounter4.setDescription('Pulse Counter 1.')
owEDS0091PulseCounterReset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0091PulseCounterReset1.setStatus('current')
if mibBuilder.loadTexts: owEDS0091PulseCounterReset1.setDescription('Pulse Counter Reset 1.')
owEDS0091PulseCounterReset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0091PulseCounterReset2.setStatus('current')
if mibBuilder.loadTexts: owEDS0091PulseCounterReset2.setDescription('Pulse Counter Reset 2.')
owEDS0091PulseCounterReset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0091PulseCounterReset3.setStatus('current')
if mibBuilder.loadTexts: owEDS0091PulseCounterReset3.setDescription('Pulse Counter Reset 3.')
owEDS0091PulseCounterReset4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0091PulseCounterReset4.setStatus('current')
if mibBuilder.loadTexts: owEDS0091PulseCounterReset4.setDescription('Pulse Counter Reset 4.')
owEDS0091ActivityLatchReset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0091ActivityLatchReset1.setStatus('current')
if mibBuilder.loadTexts: owEDS0091ActivityLatchReset1.setDescription('Activity Latch Reset 1.')
owEDS0091ActivityLatchReset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0091ActivityLatchReset2.setStatus('current')
if mibBuilder.loadTexts: owEDS0091ActivityLatchReset2.setDescription('Activity Latch Reset 2.')
owEDS0091ActivityLatchReset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0091ActivityLatchReset3.setStatus('current')
if mibBuilder.loadTexts: owEDS0091ActivityLatchReset3.setDescription('Activity Latch Reset 3.')
owEDS0091ActivityLatchReset4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0091ActivityLatchReset4.setStatus('current')
if mibBuilder.loadTexts: owEDS0091ActivityLatchReset4.setDescription('Activity Latch Reset 4.')
owEDS0091Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 24, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0091Counter.setStatus('current')
if mibBuilder.loadTexts: owEDS0091Counter.setDescription('Counter.')
owEDS0092Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 25), )
if mibBuilder.loadTexts: owEDS0092Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0092Table.setDescription('Table for EDS0092 device data (quad relay output).')
owEDS0092Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 25, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0092Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0092Entry.setDescription('')
owEDS0092Output1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0092Output1.setStatus('current')
if mibBuilder.loadTexts: owEDS0092Output1.setDescription('Output 1.')
owEDS0092Output2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0092Output2.setStatus('current')
if mibBuilder.loadTexts: owEDS0092Output2.setDescription('Output 2.')
owEDS0092Output3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0092Output3.setStatus('current')
if mibBuilder.loadTexts: owEDS0092Output3.setDescription('Output 3.')
owEDS0092Output4 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0092Output4.setStatus('current')
if mibBuilder.loadTexts: owEDS0092Output4.setDescription('Output 4.')
owEDS0092Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 25, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0092Counter.setStatus('current')
if mibBuilder.loadTexts: owEDS0092Counter.setDescription('Counter.')
owDS28EA00Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 26), )
if mibBuilder.loadTexts: owDS28EA00Table.setStatus('current')
if mibBuilder.loadTexts: owDS28EA00Table.setDescription('Table for DS28EA00 (1-wire digital thermometer with PIO).')
owDS28EA00Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 26, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owDS28EA00Entry.setStatus('current')
if mibBuilder.loadTexts: owDS28EA00Entry.setDescription('DS28EA00 row')
owDS28EA00Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 26, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS28EA00Temperature.setStatus('current')
if mibBuilder.loadTexts: owDS28EA00Temperature.setDescription("current temperature from device, displayed as a string with decimal point. Required since MIB's cannot contain floating point numbers.")
owDS28EA00UserByte1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 26, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS28EA00UserByte1.setStatus('current')
if mibBuilder.loadTexts: owDS28EA00UserByte1.setDescription('User byte 1 as read from EEPROM.')
owDS28EA00UserByte2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 26, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS28EA00UserByte2.setStatus('current')
if mibBuilder.loadTexts: owDS28EA00UserByte2.setDescription('User byte 2 as read from EEPROM.')
owDS28EA00PIOALevel = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS28EA00PIOALevel.setStatus('current')
if mibBuilder.loadTexts: owDS28EA00PIOALevel.setDescription('PIO-A logic level on pin. If PIO-A flip flop is low, this input will always read low.')
owDS28EA00PIOBLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 26, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owDS28EA00PIOBLevel.setStatus('current')
if mibBuilder.loadTexts: owDS28EA00PIOBLevel.setDescription('PIO-B logic level on pin. If PIO-B flip flop is low, this input will always read low.')
owDS28EA00PIOAFlipFlop = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 26, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS28EA00PIOAFlipFlop.setStatus('current')
if mibBuilder.loadTexts: owDS28EA00PIOAFlipFlop.setDescription('PIO-A Flip Flop. Sets output state of the FF. The output is open collector, so the FF must be high (1) to be able to read a pin state of low (0).')
owDS28EA00PIOBFlipFlop = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 26, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owDS28EA00PIOBFlipFlop.setStatus('current')
if mibBuilder.loadTexts: owDS28EA00PIOBFlipFlop.setDescription('PIO-B Flip Flop. Sets output state of the FF. The output is open collector, so the FF must be high (1) to be able to read a pin state of low (0).')
owEDS0050Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 27), )
if mibBuilder.loadTexts: owEDS0050Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0050Table.setDescription('Table for EDS0050 (Temp, 2 discrete, 1 analog (0-10v)).')
owEDS0050Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 27, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0050Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0050Entry.setDescription('')
owEDS0050Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 27, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0050Temperature.setStatus('current')
if mibBuilder.loadTexts: owEDS0050Temperature.setDescription("current temperature from device, displayed as a string with decimal point. Required since MIB's cannot contain floating point numbers.")
owEDS0050InputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 27, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0050InputVoltage.setStatus('current')
if mibBuilder.loadTexts: owEDS0050InputVoltage.setDescription('Voltage at the analog input.')
owEDS0050Input1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0050Input1.setStatus('current')
if mibBuilder.loadTexts: owEDS0050Input1.setDescription('Discrete state at input 1.')
owEDS0050Input2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0050Input2.setStatus('current')
if mibBuilder.loadTexts: owEDS0050Input2.setDescription('Discrete state at input 2.')
owEDS0050ActivityLatch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 27, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0050ActivityLatch1.setStatus('current')
if mibBuilder.loadTexts: owEDS0050ActivityLatch1.setDescription('Set to 1 if input has changed.')
owEDS0050ActivityLatch2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 27, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0050ActivityLatch2.setStatus('current')
if mibBuilder.loadTexts: owEDS0050ActivityLatch2.setDescription('Set to 1 if input has changed.')
owEDS0050PulseCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 27, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0050PulseCounter1.setStatus('current')
if mibBuilder.loadTexts: owEDS0050PulseCounter1.setDescription('Count of the pulses on input 1.')
owEDS0050PulseCounter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 27, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0050PulseCounter2.setStatus('current')
if mibBuilder.loadTexts: owEDS0050PulseCounter2.setDescription('Count of the pulses on input 2.')
owEDS0050Output1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 27, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0050Output1.setStatus('current')
if mibBuilder.loadTexts: owEDS0050Output1.setDescription('Output 1.')
owEDS0050Output2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 27, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0050Output2.setStatus('current')
if mibBuilder.loadTexts: owEDS0050Output2.setDescription('Output 2.')
owEDS0050ActivityLatchReset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 27, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0050ActivityLatchReset1.setStatus('current')
if mibBuilder.loadTexts: owEDS0050ActivityLatchReset1.setDescription('Activity Latch Reset 1.')
owEDS0050ActivityLatchReset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 27, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofunction", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0050ActivityLatchReset2.setStatus('current')
if mibBuilder.loadTexts: owEDS0050ActivityLatchReset2.setDescription('Activity Latch Reset 2.')
owEDS0050PulseCounterReset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 27, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0050PulseCounterReset1.setStatus('current')
if mibBuilder.loadTexts: owEDS0050PulseCounterReset1.setDescription('Pulse Counter Reset 1.')
owEDS0050PulseCounterReset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 27, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: owEDS0050PulseCounterReset2.setStatus('current')
if mibBuilder.loadTexts: owEDS0050PulseCounterReset2.setDescription('Pulse Counter Reset 2.')
owEDS0050Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 27, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0050Counter.setStatus('current')
if mibBuilder.loadTexts: owEDS0050Counter.setDescription('Counter.')
owEDS0001Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 10, 28), )
if mibBuilder.loadTexts: owEDS0001Table.setStatus('current')
if mibBuilder.loadTexts: owEDS0001Table.setDescription('Table for EDS0001 (System parameters).')
owEDS0001Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1), ).setIndexNames((0, "EDS-MIB", "owDeviceIndex"))
if mibBuilder.loadTexts: owEDS0001Entry.setStatus('current')
if mibBuilder.loadTexts: owEDS0001Entry.setDescription('')
owEDS0001PollCount = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001PollCount.setStatus('current')
if mibBuilder.loadTexts: owEDS0001PollCount.setDescription('Number of times devices have been polled.')
owEDS0001DevicesConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001DevicesConnected.setStatus('current')
if mibBuilder.loadTexts: owEDS0001DevicesConnected.setDescription('Number of devices connected.')
owEDS0001LoopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001LoopTime.setStatus('current')
if mibBuilder.loadTexts: owEDS0001LoopTime.setDescription('Time in seconds devices are read.')
owEDS0001DevicesConnectedChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001DevicesConnectedChannel1.setStatus('current')
if mibBuilder.loadTexts: owEDS0001DevicesConnectedChannel1.setDescription('Devices connected on channel 1.')
owEDS0001DevicesConnectedChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001DevicesConnectedChannel2.setStatus('current')
if mibBuilder.loadTexts: owEDS0001DevicesConnectedChannel2.setDescription('Devices connected on channel 2.')
owEDS0001DevicesConnectedChannel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001DevicesConnectedChannel3.setStatus('current')
if mibBuilder.loadTexts: owEDS0001DevicesConnectedChannel3.setDescription('Devices connected on channel 3.')
owEDS0001ErrorsChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001ErrorsChannel1.setStatus('current')
if mibBuilder.loadTexts: owEDS0001ErrorsChannel1.setDescription('Errors on channel 1.')
owEDS0001ErrorsChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001ErrorsChannel2.setStatus('current')
if mibBuilder.loadTexts: owEDS0001ErrorsChannel2.setDescription('Errors on channel 2.')
owEDS0001ErrorsChannel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001ErrorsChannel3.setStatus('current')
if mibBuilder.loadTexts: owEDS0001ErrorsChannel3.setDescription('Errors on channel 3.')
owEDS0001VoltageChannel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001VoltageChannel1.setStatus('current')
if mibBuilder.loadTexts: owEDS0001VoltageChannel1.setDescription('Voltage on channel 1.')
owEDS0001VoltageChannel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001VoltageChannel2.setStatus('current')
if mibBuilder.loadTexts: owEDS0001VoltageChannel2.setDescription('Voltage on channel 2.')
owEDS0001VoltageChannel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001VoltageChannel3.setStatus('current')
if mibBuilder.loadTexts: owEDS0001VoltageChannel3.setDescription('Voltage on channel 3.')
owEDS0001InputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001InputVoltage.setStatus('current')
if mibBuilder.loadTexts: owEDS0001InputVoltage.setDescription('Power supply voltage.')
owEDS0001DeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001DeviceName.setStatus('current')
if mibBuilder.loadTexts: owEDS0001DeviceName.setDescription('Device name.')
owEDS0001HostName = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001HostName.setStatus('current')
if mibBuilder.loadTexts: owEDS0001HostName.setDescription('Host name.')
owEDS0001MACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001MACAddress.setStatus('current')
if mibBuilder.loadTexts: owEDS0001MACAddress.setDescription('Ethernet MAC address.')
owEDS0001TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 10, 28, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: owEDS0001TimeStamp.setStatus('current')
if mibBuilder.loadTexts: owEDS0001TimeStamp.setDescription('current date / time.')
wTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 3))
wTrapTable = MibTable((1, 3, 6, 1, 4, 1, 31440, 3, 1), )
if mibBuilder.loadTexts: wTrapTable.setStatus('current')
if mibBuilder.loadTexts: wTrapTable.setDescription('Wireless device trap table')
wTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 3, 1, 1), ).setIndexNames((0, "EDS-MIB", "wTrapIndex"))
if mibBuilder.loadTexts: wTrapEntry.setStatus('current')
if mibBuilder.loadTexts: wTrapEntry.setDescription('')
wTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wTrapIndex.setStatus('current')
if mibBuilder.loadTexts: wTrapIndex.setDescription('Index of table. Traps are sent with this OID followed by the index number of the table entry that generated the trap. An integer value is sent with the trap which indicates what state change caused the trap. Using the wTrapDeviceHighThreshold and wTrapDeviceLowThreshold values, 3 windows are created. Transitions between these windows generates a trap. The integer value indicates which transition caused the trap as follows: 1 -> middle to high window transition 2 -> high to middle window transition 3 -> middle to low window transition 4 -> low to middle window transition Note the following when programming traps: 1) Programming the HighThreshold lower than the LowThreshold is invalid and will disable trap generation. 2) The wTrapEUI must be set to an active device or a trap will not be sent. 3) The health of the device must be greater than 0 or no trap will be sent. 4) The wTrapVariable must match one of the XML names.')
wTrapIP = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 3, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wTrapIP.setStatus('current')
if mibBuilder.loadTexts: wTrapIP.setDescription('Address to send trap to.')
wTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 3, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wTrapCommunity.setStatus('current')
if mibBuilder.loadTexts: wTrapCommunity.setDescription('Community string to send with trap message.')
wTrapEUI = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wTrapEUI.setStatus('current')
if mibBuilder.loadTexts: wTrapEUI.setDescription('Device EUI code to base sending trap message on.')
wTrapVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 3, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wTrapVariable.setStatus('current')
if mibBuilder.loadTexts: wTrapVariable.setDescription("Name of the variable, as stated in the XML file. For example, the name of humidity for a EDS1068 is 'Humidity' (without the quotes).")
wTrapHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 3, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wTrapHighThreshold.setStatus('current')
if mibBuilder.loadTexts: wTrapHighThreshold.setDescription('A trap will be generated when the variable is greater than this value or less than or equal to this value. This number may be positive or negative and may contain a decimal point.')
wTrapLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 3, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wTrapLowThreshold.setStatus('current')
if mibBuilder.loadTexts: wTrapLowThreshold.setDescription('A trap will be generated when the variable is less than this value or greater than or equal to this value. This number may be positive or negative and may contain a decimal point.')
wDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11))
wDeviceTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11, 1))
wNone = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11, 1, 0))
wUnknown = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11, 1, 1))
wUnused1 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11, 1, 2))
wUnused2 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11, 1, 3))
wEDS1068 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11, 1, 4))
wEDS1067 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11, 1, 5))
wEDS1066 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11, 1, 6))
wEDS1065 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11, 1, 7))
wEDS1064 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11, 1, 8))
wEDS1101 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11, 1, 9))
wEDS2101 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11, 1, 10))
wEDS3030 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11, 1, 11))
wEDS3031 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11, 1, 12))
wEDS3032 = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11, 1, 13))
wDeviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 31440, 11, 2))
wDeviceNumActive = MibScalar((1, 3, 6, 1, 4, 1, 31440, 11, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wDeviceNumActive.setStatus('current')
if mibBuilder.loadTexts: wDeviceNumActive.setDescription("Number of currently active 1-wire devices. A device is active if it's health is non-zero.")
wDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 31440, 11, 3), )
if mibBuilder.loadTexts: wDeviceTable.setStatus('current')
if mibBuilder.loadTexts: wDeviceTable.setDescription('')
wDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 11, 3, 1), ).setIndexNames((0, "EDS-MIB", "wDeviceIndex"))
if mibBuilder.loadTexts: wDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: wDeviceEntry.setDescription('')
wDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: wDeviceIndex.setDescription('Index of table.')
wDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wDeviceType.setStatus('current')
if mibBuilder.loadTexts: wDeviceType.setDescription('An indication of the device type. This is the last OID number to the wDeviceTypes group pointing to the name of the device. The corresponding device table will contain the specific information from the device. For example: if this entry is 2 (owDS2406) then the table owDS2406Table, at the appropriate index, will contain the data from the device.')
wDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wDeviceName.setStatus('current')
if mibBuilder.loadTexts: wDeviceName.setDescription('Name of the device.')
wDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wDeviceDescription.setStatus('current')
if mibBuilder.loadTexts: wDeviceDescription.setDescription('Text description of the device.')
wDeviceFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wDeviceFamily.setStatus('current')
if mibBuilder.loadTexts: wDeviceFamily.setDescription('Family number.')
wDeviceEUI = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wDeviceEUI.setStatus('current')
if mibBuilder.loadTexts: wDeviceEUI.setDescription('Entire EUI as read from device.')
wDeviceHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wDeviceHealth.setStatus('current')
if mibBuilder.loadTexts: wDeviceHealth.setDescription('Health of device. Ranges between 0 and 7 where 0 worst case and 7 is best case. Incremented every time device responds to a search, decremented if it does not respond.')
wDeviceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wDeviceTag.setStatus('current')
if mibBuilder.loadTexts: wDeviceTag.setDescription('Tag from device.')
wEDS1068Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 11, 4), )
if mibBuilder.loadTexts: wEDS1068Table.setStatus('current')
if mibBuilder.loadTexts: wEDS1068Table.setDescription('Table for EDS1068 device data (temperature, humidity, barometric pressure and light).')
wEDS1068Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1), ).setIndexNames((0, "EDS-MIB", "wDeviceIndex"))
if mibBuilder.loadTexts: wEDS1068Entry.setStatus('current')
if mibBuilder.loadTexts: wEDS1068Entry.setDescription('')
wEDS1068Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1068Temperature.setStatus('current')
if mibBuilder.loadTexts: wEDS1068Temperature.setDescription('Temperature.')
wEDS1068Humidity = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1068Humidity.setStatus('current')
if mibBuilder.loadTexts: wEDS1068Humidity.setDescription('Humidity.')
wEDS1068DewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1068DewPoint.setStatus('current')
if mibBuilder.loadTexts: wEDS1068DewPoint.setDescription('DewPoint.')
wEDS1068Humidex = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1068Humidex.setStatus('current')
if mibBuilder.loadTexts: wEDS1068Humidex.setDescription('Humidex.')
wEDS1068HeatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1068HeatIndex.setStatus('current')
if mibBuilder.loadTexts: wEDS1068HeatIndex.setDescription('Heat Index.')
wEDS1068BarometricPressure = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1068BarometricPressure.setStatus('current')
if mibBuilder.loadTexts: wEDS1068BarometricPressure.setDescription('Barometric Pressure in Millibars.')
wEDS1068LEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1068LEDState.setStatus('current')
if mibBuilder.loadTexts: wEDS1068LEDState.setDescription('LED state.')
wEDS1068RelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1068RelayState.setStatus('current')
if mibBuilder.loadTexts: wEDS1068RelayState.setDescription('Relay state.')
wEDS1068Light = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1068Light.setStatus('current')
if mibBuilder.loadTexts: wEDS1068Light.setDescription('Light.')
wEDS1068Input1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1068Input1.setStatus('current')
if mibBuilder.loadTexts: wEDS1068Input1.setDescription('Input 1 state.')
wEDS1068ActivityLatch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1068ActivityLatch1.setStatus('current')
if mibBuilder.loadTexts: wEDS1068ActivityLatch1.setDescription('Activity latch 1 state.')
wEDS1068PulseCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1068PulseCounter1.setStatus('current')
if mibBuilder.loadTexts: wEDS1068PulseCounter1.setDescription('Pulse counter 1.')
wEDS1068Battery = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1068Battery.setStatus('current')
if mibBuilder.loadTexts: wEDS1068Battery.setDescription('Battery voltage.')
wEDS1068ReadCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1068ReadCounter.setStatus('current')
if mibBuilder.loadTexts: wEDS1068ReadCounter.setDescription('Read counter.')
wEDS1068LEDFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1068LEDFunction.setStatus('current')
if mibBuilder.loadTexts: wEDS1068LEDFunction.setDescription('LED function.')
wEDS1068RelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1068RelayFunction.setStatus('current')
if mibBuilder.loadTexts: wEDS1068RelayFunction.setDescription('Relay function.')
wEDS1068LEDSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1068LEDSetState.setStatus('current')
if mibBuilder.loadTexts: wEDS1068LEDSetState.setDescription('LED set state.')
wEDS1068RelaySetState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 4, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1068RelaySetState.setStatus('current')
if mibBuilder.loadTexts: wEDS1068RelaySetState.setDescription('Relay set state.')
wEDS1067Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 11, 5), )
if mibBuilder.loadTexts: wEDS1067Table.setStatus('current')
if mibBuilder.loadTexts: wEDS1067Table.setDescription('Table for EDS1067 device data (temperature, humidity, barometric pressure and light).')
wEDS1067Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 11, 5, 1), ).setIndexNames((0, "EDS-MIB", "wDeviceIndex"))
if mibBuilder.loadTexts: wEDS1067Entry.setStatus('current')
if mibBuilder.loadTexts: wEDS1067Entry.setDescription('')
wEDS1067Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1067Temperature.setStatus('current')
if mibBuilder.loadTexts: wEDS1067Temperature.setDescription('Temperature.')
wEDS1067LEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1067LEDState.setStatus('current')
if mibBuilder.loadTexts: wEDS1067LEDState.setDescription('LED state.')
wEDS1067RelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1067RelayState.setStatus('current')
if mibBuilder.loadTexts: wEDS1067RelayState.setDescription('Relay state.')
wEDS1067Light = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1067Light.setStatus('current')
if mibBuilder.loadTexts: wEDS1067Light.setDescription('Light.')
wEDS1067Input1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1067Input1.setStatus('current')
if mibBuilder.loadTexts: wEDS1067Input1.setDescription('Input 1 state.')
wEDS1067ActivityLatch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1067ActivityLatch1.setStatus('current')
if mibBuilder.loadTexts: wEDS1067ActivityLatch1.setDescription('Activity latch 1 state.')
wEDS1067PulseCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1067PulseCounter1.setStatus('current')
if mibBuilder.loadTexts: wEDS1067PulseCounter1.setDescription('Pulse counter 1.')
wEDS1067Battery = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1067Battery.setStatus('current')
if mibBuilder.loadTexts: wEDS1067Battery.setDescription('Battery voltage.')
wEDS1067ReadCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1067ReadCounter.setStatus('current')
if mibBuilder.loadTexts: wEDS1067ReadCounter.setDescription('Read counter.')
wEDS1067LEDFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1067LEDFunction.setStatus('current')
if mibBuilder.loadTexts: wEDS1067LEDFunction.setDescription('LED function.')
wEDS1067RelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1067RelayFunction.setStatus('current')
if mibBuilder.loadTexts: wEDS1067RelayFunction.setDescription('Relay function.')
wEDS1067LEDSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1067LEDSetState.setStatus('current')
if mibBuilder.loadTexts: wEDS1067LEDSetState.setDescription('LED set state.')
wEDS1067RelaySetState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1067RelaySetState.setStatus('current')
if mibBuilder.loadTexts: wEDS1067RelaySetState.setDescription('Relay set state.')
wEDS1066Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 11, 6), )
if mibBuilder.loadTexts: wEDS1066Table.setStatus('current')
if mibBuilder.loadTexts: wEDS1066Table.setDescription('Table for EDS1066 device data (temperature, humidity, barometric pressure and light).')
wEDS1066Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 11, 6, 1), ).setIndexNames((0, "EDS-MIB", "wDeviceIndex"))
if mibBuilder.loadTexts: wEDS1066Entry.setStatus('current')
if mibBuilder.loadTexts: wEDS1066Entry.setDescription('')
wEDS1066Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1066Temperature.setStatus('current')
if mibBuilder.loadTexts: wEDS1066Temperature.setDescription('Temperature.')
wEDS1066BarometricPressure = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1066BarometricPressure.setStatus('current')
if mibBuilder.loadTexts: wEDS1066BarometricPressure.setDescription('Barometric Pressure in Millibars.')
wEDS1066LEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1066LEDState.setStatus('current')
if mibBuilder.loadTexts: wEDS1066LEDState.setDescription('LED state.')
wEDS1066RelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1066RelayState.setStatus('current')
if mibBuilder.loadTexts: wEDS1066RelayState.setDescription('Relay state.')
wEDS1066Input1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1066Input1.setStatus('current')
if mibBuilder.loadTexts: wEDS1066Input1.setDescription('Input 1 state.')
wEDS1066ActivityLatch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1066ActivityLatch1.setStatus('current')
if mibBuilder.loadTexts: wEDS1066ActivityLatch1.setDescription('Activity latch 1 state.')
wEDS1066PulseCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1066PulseCounter1.setStatus('current')
if mibBuilder.loadTexts: wEDS1066PulseCounter1.setDescription('Pulse counter 1.')
wEDS1066Battery = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 6, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1066Battery.setStatus('current')
if mibBuilder.loadTexts: wEDS1066Battery.setDescription('Battery voltage.')
wEDS1066ReadCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1066ReadCounter.setStatus('current')
if mibBuilder.loadTexts: wEDS1066ReadCounter.setDescription('Read counter.')
wEDS1066LEDFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1066LEDFunction.setStatus('current')
if mibBuilder.loadTexts: wEDS1066LEDFunction.setDescription('LED function.')
wEDS1066RelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1066RelayFunction.setStatus('current')
if mibBuilder.loadTexts: wEDS1066RelayFunction.setDescription('Relay function.')
wEDS1066LEDSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1066LEDSetState.setStatus('current')
if mibBuilder.loadTexts: wEDS1066LEDSetState.setDescription('LED set state.')
wEDS1066RelaySetState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1066RelaySetState.setStatus('current')
if mibBuilder.loadTexts: wEDS1066RelaySetState.setDescription('Relay set state.')
wEDS1065Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 11, 7), )
if mibBuilder.loadTexts: wEDS1065Table.setStatus('current')
if mibBuilder.loadTexts: wEDS1065Table.setDescription('Table for EDS1065 device data (temperature, humidity, barometric pressure and light).')
wEDS1065Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1), ).setIndexNames((0, "EDS-MIB", "wDeviceIndex"))
if mibBuilder.loadTexts: wEDS1065Entry.setStatus('current')
if mibBuilder.loadTexts: wEDS1065Entry.setDescription('')
wEDS1065Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1065Temperature.setStatus('current')
if mibBuilder.loadTexts: wEDS1065Temperature.setDescription('Temperature.')
wEDS1065Humidity = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1065Humidity.setStatus('current')
if mibBuilder.loadTexts: wEDS1065Humidity.setDescription('Humidity.')
wEDS1065DewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1065DewPoint.setStatus('current')
if mibBuilder.loadTexts: wEDS1065DewPoint.setDescription('DewPoint.')
wEDS1065Humidex = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1065Humidex.setStatus('current')
if mibBuilder.loadTexts: wEDS1065Humidex.setDescription('Humidex.')
wEDS1065HeatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1065HeatIndex.setStatus('current')
if mibBuilder.loadTexts: wEDS1065HeatIndex.setDescription('Heat Index.')
wEDS1065LEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1065LEDState.setStatus('current')
if mibBuilder.loadTexts: wEDS1065LEDState.setDescription('LED state.')
wEDS1065RelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1065RelayState.setStatus('current')
if mibBuilder.loadTexts: wEDS1065RelayState.setDescription('Relay state.')
wEDS1065Input1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1065Input1.setStatus('current')
if mibBuilder.loadTexts: wEDS1065Input1.setDescription('Input 1 state.')
wEDS1065ActivityLatch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1065ActivityLatch1.setStatus('current')
if mibBuilder.loadTexts: wEDS1065ActivityLatch1.setDescription('Activity latch 1 state.')
wEDS1065PulseCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1065PulseCounter1.setStatus('current')
if mibBuilder.loadTexts: wEDS1065PulseCounter1.setDescription('Pulse counter 1.')
wEDS1065Battery = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1065Battery.setStatus('current')
if mibBuilder.loadTexts: wEDS1065Battery.setDescription('Battery voltage.')
wEDS1065ReadCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1065ReadCounter.setStatus('current')
if mibBuilder.loadTexts: wEDS1065ReadCounter.setDescription('Read counter.')
wEDS1065LEDFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1065LEDFunction.setStatus('current')
if mibBuilder.loadTexts: wEDS1065LEDFunction.setDescription('LED function.')
wEDS1065RelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1065RelayFunction.setStatus('current')
if mibBuilder.loadTexts: wEDS1065RelayFunction.setDescription('Relay function.')
wEDS1065LEDSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1065LEDSetState.setStatus('current')
if mibBuilder.loadTexts: wEDS1065LEDSetState.setDescription('LED set state.')
wEDS1065RelaySetState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 7, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1065RelaySetState.setStatus('current')
if mibBuilder.loadTexts: wEDS1065RelaySetState.setDescription('Relay set state.')
wEDS1064Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 11, 8), )
if mibBuilder.loadTexts: wEDS1064Table.setStatus('current')
if mibBuilder.loadTexts: wEDS1064Table.setDescription('Table for EDS1064 device data (temperature, humidity, barometric pressure and light).')
wEDS1064Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 11, 8, 1), ).setIndexNames((0, "EDS-MIB", "wDeviceIndex"))
if mibBuilder.loadTexts: wEDS1064Entry.setStatus('current')
if mibBuilder.loadTexts: wEDS1064Entry.setDescription('')
wEDS1064Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1064Temperature.setStatus('current')
if mibBuilder.loadTexts: wEDS1064Temperature.setDescription('Temperature.')
wEDS1064LEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1064LEDState.setStatus('current')
if mibBuilder.loadTexts: wEDS1064LEDState.setDescription('LED state.')
wEDS1064RelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1064RelayState.setStatus('current')
if mibBuilder.loadTexts: wEDS1064RelayState.setDescription('Relay state.')
wEDS1064Input1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1064Input1.setStatus('current')
if mibBuilder.loadTexts: wEDS1064Input1.setDescription('Input 1 state.')
wEDS1064ActivityLatch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1064ActivityLatch1.setStatus('current')
if mibBuilder.loadTexts: wEDS1064ActivityLatch1.setDescription('Activity latch 1 state.')
wEDS1064PulseCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1064PulseCounter1.setStatus('current')
if mibBuilder.loadTexts: wEDS1064PulseCounter1.setDescription('Pulse counter 1.')
wEDS1064Battery = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1064Battery.setStatus('current')
if mibBuilder.loadTexts: wEDS1064Battery.setDescription('Battery voltage.')
wEDS1064ReadCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1064ReadCounter.setStatus('current')
if mibBuilder.loadTexts: wEDS1064ReadCounter.setDescription('Read counter.')
wEDS1064LEDFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 8, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1064LEDFunction.setStatus('current')
if mibBuilder.loadTexts: wEDS1064LEDFunction.setDescription('LED function.')
wEDS1064RelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 8, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1064RelayFunction.setStatus('current')
if mibBuilder.loadTexts: wEDS1064RelayFunction.setDescription('Relay function.')
wEDS1064LEDSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 8, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1064LEDSetState.setStatus('current')
if mibBuilder.loadTexts: wEDS1064LEDSetState.setDescription('LED set state.')
wEDS1064RelaySetState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 8, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS1064RelaySetState.setStatus('current')
if mibBuilder.loadTexts: wEDS1064RelaySetState.setDescription('Relay set state.')
wEDS1101Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 11, 9), )
if mibBuilder.loadTexts: wEDS1101Table.setStatus('current')
if mibBuilder.loadTexts: wEDS1101Table.setDescription('Table for EDS1101 device data (repeater).')
wEDS1101Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 11, 9, 1), ).setIndexNames((0, "EDS-MIB", "wDeviceIndex"))
if mibBuilder.loadTexts: wEDS1101Entry.setStatus('current')
if mibBuilder.loadTexts: wEDS1101Entry.setDescription('')
wEDS1101DevicesConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1101DevicesConnected.setStatus('current')
if mibBuilder.loadTexts: wEDS1101DevicesConnected.setDescription('Number of devices connected.')
wEDS1101SendCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS1101SendCounter.setStatus('current')
if mibBuilder.loadTexts: wEDS1101SendCounter.setDescription('Send counter.')
wEDS2101Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 11, 10), )
if mibBuilder.loadTexts: wEDS2101Table.setStatus('current')
if mibBuilder.loadTexts: wEDS2101Table.setDescription('Table for EDS2101 device data (repeater).')
wEDS2101Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 11, 10, 1), ).setIndexNames((0, "EDS-MIB", "wDeviceIndex"))
if mibBuilder.loadTexts: wEDS2101Entry.setStatus('current')
if mibBuilder.loadTexts: wEDS2101Entry.setDescription('')
wEDS2101DevicesConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS2101DevicesConnected.setStatus('current')
if mibBuilder.loadTexts: wEDS2101DevicesConnected.setDescription('Number of devices connected.')
wEDS2101SendCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS2101SendCounter.setStatus('current')
if mibBuilder.loadTexts: wEDS2101SendCounter.setDescription('Send counter.')
wEDS3030Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 11, 11), )
if mibBuilder.loadTexts: wEDS3030Table.setStatus('current')
if mibBuilder.loadTexts: wEDS3030Table.setDescription('Table for EDS3030 device data (temperature, probe, light and input).')
wEDS3030Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 11, 11, 1), ).setIndexNames((0, "EDS-MIB", "wDeviceIndex"))
if mibBuilder.loadTexts: wEDS3030Entry.setStatus('current')
if mibBuilder.loadTexts: wEDS3030Entry.setDescription('')
wEDS3030Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3030Temperature.setStatus('current')
if mibBuilder.loadTexts: wEDS3030Temperature.setDescription('Temperature.')
wEDS3030Probe = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3030Probe.setStatus('current')
if mibBuilder.loadTexts: wEDS3030Probe.setDescription('Temperature probe.')
wEDS3030LEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3030LEDState.setStatus('current')
if mibBuilder.loadTexts: wEDS3030LEDState.setDescription('LED state.')
wEDS3030Light = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3030Light.setStatus('current')
if mibBuilder.loadTexts: wEDS3030Light.setDescription('Light.')
wEDS3030Input1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3030Input1.setStatus('current')
if mibBuilder.loadTexts: wEDS3030Input1.setDescription('Input 1 state.')
wEDS3030ActivityLatch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3030ActivityLatch1.setStatus('current')
if mibBuilder.loadTexts: wEDS3030ActivityLatch1.setDescription('Activity latch 1 state.')
wEDS3030PulseCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3030PulseCounter1.setStatus('current')
if mibBuilder.loadTexts: wEDS3030PulseCounter1.setDescription('Pulse counter 1.')
wEDS3030Battery = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 11, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3030Battery.setStatus('current')
if mibBuilder.loadTexts: wEDS3030Battery.setDescription('Battery voltage.')
wEDS3030ReadCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3030ReadCounter.setStatus('current')
if mibBuilder.loadTexts: wEDS3030ReadCounter.setDescription('Read counter.')
wEDS3030LEDFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 11, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS3030LEDFunction.setStatus('current')
if mibBuilder.loadTexts: wEDS3030LEDFunction.setDescription('LED function.')
wEDS3030LEDSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 11, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS3030LEDSetState.setStatus('current')
if mibBuilder.loadTexts: wEDS3030LEDSetState.setDescription('LED set state.')
wEDS3031Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 11, 12), )
if mibBuilder.loadTexts: wEDS3031Table.setStatus('current')
if mibBuilder.loadTexts: wEDS3031Table.setDescription('Table for EDS3031 device data (temperature and RTD).')
wEDS3031Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 11, 12, 1), ).setIndexNames((0, "EDS-MIB", "wDeviceIndex"))
if mibBuilder.loadTexts: wEDS3031Entry.setStatus('current')
if mibBuilder.loadTexts: wEDS3031Entry.setDescription('')
wEDS3031Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3031Temperature.setStatus('current')
if mibBuilder.loadTexts: wEDS3031Temperature.setDescription('Temperature.')
wEDS3031RTDTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3031RTDTemperature.setStatus('current')
if mibBuilder.loadTexts: wEDS3031RTDTemperature.setDescription('RTD Temperature.')
wEDS3031LEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3031LEDState.setStatus('current')
if mibBuilder.loadTexts: wEDS3031LEDState.setDescription('LED state.')
wEDS3031Input1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3031Input1.setStatus('current')
if mibBuilder.loadTexts: wEDS3031Input1.setDescription('Input 1 state.')
wEDS3031ActivityLatch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3031ActivityLatch1.setStatus('current')
if mibBuilder.loadTexts: wEDS3031ActivityLatch1.setDescription('Activity latch 1 state.')
wEDS3031PulseCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3031PulseCounter1.setStatus('current')
if mibBuilder.loadTexts: wEDS3031PulseCounter1.setDescription('Pulse counter 1.')
wEDS3031Battery = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 12, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3031Battery.setStatus('current')
if mibBuilder.loadTexts: wEDS3031Battery.setDescription('Battery voltage.')
wEDS3031ReadCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3031ReadCounter.setStatus('current')
if mibBuilder.loadTexts: wEDS3031ReadCounter.setDescription('Read counter.')
wEDS3031LEDFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 12, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS3031LEDFunction.setStatus('current')
if mibBuilder.loadTexts: wEDS3031LEDFunction.setDescription('LED function.')
wEDS3031LEDSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 12, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS3031LEDSetState.setStatus('current')
if mibBuilder.loadTexts: wEDS3031LEDSetState.setDescription('LED set state.')
wEDS3032Table = MibTable((1, 3, 6, 1, 4, 1, 31440, 11, 13), )
if mibBuilder.loadTexts: wEDS3032Table.setStatus('current')
if mibBuilder.loadTexts: wEDS3032Table.setDescription('Table for EDS3032 device data (temperature and dual RTD).')
wEDS3032Entry = MibTableRow((1, 3, 6, 1, 4, 1, 31440, 11, 13, 1), ).setIndexNames((0, "EDS-MIB", "wDeviceIndex"))
if mibBuilder.loadTexts: wEDS3032Entry.setStatus('current')
if mibBuilder.loadTexts: wEDS3032Entry.setDescription('')
wEDS3032Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3032Temperature.setStatus('current')
if mibBuilder.loadTexts: wEDS3032Temperature.setDescription('Temperature.')
wEDS3032RTD1Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3032RTD1Temperature.setStatus('current')
if mibBuilder.loadTexts: wEDS3032RTD1Temperature.setDescription('RTD 1 Temperature.')
wEDS3032RTD2Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3032RTD2Temperature.setStatus('current')
if mibBuilder.loadTexts: wEDS3032RTD2Temperature.setDescription('RTD 2 Temperature.')
wEDS3032LEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3032LEDState.setStatus('current')
if mibBuilder.loadTexts: wEDS3032LEDState.setDescription('LED state.')
wEDS3032Input1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3032Input1.setStatus('current')
if mibBuilder.loadTexts: wEDS3032Input1.setDescription('Input 1 state.')
wEDS3032ActivityLatch1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3032ActivityLatch1.setStatus('current')
if mibBuilder.loadTexts: wEDS3032ActivityLatch1.setDescription('Activity latch 1 state.')
wEDS3032PulseCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3032PulseCounter1.setStatus('current')
if mibBuilder.loadTexts: wEDS3032PulseCounter1.setDescription('Pulse counter 1.')
wEDS3032Battery = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 13, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3032Battery.setStatus('current')
if mibBuilder.loadTexts: wEDS3032Battery.setDescription('Battery voltage.')
wEDS3032ReadCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wEDS3032ReadCounter.setStatus('current')
if mibBuilder.loadTexts: wEDS3032ReadCounter.setDescription('Read counter.')
wEDS3032LEDFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 13, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS3032LEDFunction.setStatus('current')
if mibBuilder.loadTexts: wEDS3032LEDFunction.setDescription('LED function.')
wEDS3032LEDSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 31440, 11, 13, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wEDS3032LEDSetState.setStatus('current')
if mibBuilder.loadTexts: wEDS3032LEDSetState.setDescription('LED set state.')
mibBuilder.exportSymbols("EDS-MIB", owEDS0001LoopTime=owEDS0001LoopTime, owEDS0090PulseCounter3=owEDS0090PulseCounter3, owEDS0068BarometricPressureMb=owEDS0068BarometricPressureMb, owEDS0090Counter=owEDS0090Counter, wEDS1066Battery=wEDS1066Battery, edsProducts=edsProducts, owEDS0001DevicesConnectedChannel3=owEDS0001DevicesConnectedChannel3, eProductName=eProductName, owEDS0091ActivityLatch3=owEDS0091ActivityLatch3, owDS28EA00PIOAFlipFlop=owDS28EA00PIOAFlipFlop, wEDS1066LEDFunction=wEDS1066LEDFunction, owEDS0090PulseCounterReset8=owEDS0090PulseCounterReset8, owEDS0091ActivityLatch1=owEDS0091ActivityLatch1, owEDS0083Input1=owEDS0083Input1, owDeviceDescription=owDeviceDescription, owDS2450ChannelCConversionRange=owDS2450ChannelCConversionRange, owDS2450ChannelBConversionValue=owDS2450ChannelBConversionValue, owEDS0090PulseCounterReset4=owEDS0090PulseCounterReset4, wDeviceInfo=wDeviceInfo, owEDS0090Output4=owEDS0090Output4, owEDS0090Table=owEDS0090Table, owEDS0066Temperature=owEDS0066Temperature, owEDS0050ActivityLatch2=owEDS0050ActivityLatch2, dTrapDeviceROM=dTrapDeviceROM, owEDS0082Counter=owEDS0082Counter, owEDS0090ActivityLatch4=owEDS0090ActivityLatch4, owEDS0067Counter=owEDS0067Counter, owEDS0083Input2=owEDS0083Input2, owDS28EA00PIOBLevel=owDS28EA00PIOBLevel, owEDS0090PulseCounterReset3=owEDS0090PulseCounterReset3, owEDS0050Input1=owEDS0050Input1, owEDS0082Input3=owEDS0082Input3, owEDS0083Entry=owEDS0083Entry, owEDS0090ActivityLatch5=owEDS0090ActivityLatch5, owEDS0085Counter=owEDS0085Counter, owEDS0080Input6=owEDS0080Input6, wEDS1065DewPoint=wEDS1065DewPoint, wEDS1068LEDState=wEDS1068LEDState, owEDS0064=owEDS0064, owEDS0091Input1=owEDS0091Input1, owDevices=owDevices, owEDS0091PulseCounter1=owEDS0091PulseCounter1, owEDS0085Entry=owEDS0085Entry, owEDS0070=owEDS0070, owEDS0092Output2=owEDS0092Output2, owEDS0050ActivityLatchReset1=owEDS0050ActivityLatchReset1, wEDS3032LEDFunction=wEDS3032LEDFunction, wEDS1067LEDSetState=wEDS1067LEDSetState, wEDS3032LEDState=wEDS3032LEDState, wTrapVariable=wTrapVariable, owEDS0069Counter=owEDS0069Counter, owEDS0001Entry=owEDS0001Entry, owEDS0070VibrationPeak=owEDS0070VibrationPeak, owEDS0090PulseCounterReset1=owEDS0090PulseCounterReset1, owEDS0080=owEDS0080, wTrapCommunity=wTrapCommunity, wTrapIP=wTrapIP, owEDS0090PulseCounter7=owEDS0090PulseCounter7, wEDS3030Battery=wEDS3030Battery, owEDS0091PulseCounterReset1=owEDS0091PulseCounterReset1, owEDS0065Humidity=owEDS0065Humidity, owDS18B20Entry=owDS18B20Entry, wEDS1065LEDSetState=wEDS1065LEDSetState, owEDS0090ActivityLatchReset1=owEDS0090ActivityLatchReset1, owDS2450ChannelDOutputEnable=owDS2450ChannelDOutputEnable, owDS2406PIOBLevel=owDS2406PIOBLevel, owEDS0090Output5=owEDS0090Output5, wTrapLowThreshold=wTrapLowThreshold, dTrapIP=dTrapIP, owEDS0090ActivityLatch8=owEDS0090ActivityLatch8, owEDS0064Table=owEDS0064Table, owEDS0082Table=owEDS0082Table, owEDS0090PulseCounter2=owEDS0090PulseCounter2, owEDS0069Motion=owEDS0069Motion, wEDS3030Table=wEDS3030Table, wEDS1064RelayState=wEDS1064RelayState, owDS2408=owDS2408, owDeviceIndex=owDeviceIndex, owEDS0091Input3=owEDS0091Input3, wEDS3031PulseCounter1=wEDS3031PulseCounter1, owDS28EA00Table=owDS28EA00Table, owDS28EA00PIOALevel=owDS28EA00PIOALevel, wEDS3031Table=wEDS3031Table, owDS2450ChannelDConversionResolution=owDS2450ChannelDConversionResolution, owEDS0083Input4=owEDS0083Input4, owDS2438SupplyVoltage=owDS2438SupplyVoltage, owEDS0069Entry=owEDS0069Entry, wEDS2101Table=wEDS2101Table, owEDS0071Table=owEDS0071Table, owDeviceTable=owDeviceTable, owEDS0092Table=owEDS0092Table, wEDS1068LEDSetState=wEDS1068LEDSetState, owEDS0090PulseCounterReset6=owEDS0090PulseCounterReset6, wEDS1067PulseCounter1=wEDS1067PulseCounter1, owEDS0091Counter=owEDS0091Counter, owDS28EA00Entry=owDS28EA00Entry, wEDS1065ReadCounter=wEDS1065ReadCounter, wEDS1101Table=wEDS1101Table, wEDS3031LEDState=wEDS3031LEDState, owEDS0090PullDown1=owEDS0090PullDown1, owDS18S20Entry=owDS18S20Entry, owDS2406Table=owDS2406Table, owDS2423CounterB=owDS2423CounterB, wEDS1068LEDFunction=wEDS1068LEDFunction, owDS2438PinVoltage=owDS2438PinVoltage, owEDS0090Output2=owEDS0090Output2, owEDS0071=owEDS0071, owEDS0090PulseCounter1=owEDS0090PulseCounter1, owDS18S20Temperature=owDS18S20Temperature, wDeviceHealth=wDeviceHealth, owEDS0071Counter=owEDS0071Counter, owEDS0091PulseCounterReset3=owEDS0091PulseCounterReset3, owEDS0064Counter=owEDS0064Counter, wEDS1064Temperature=wEDS1064Temperature, owDS18S20Table=owDS18S20Table, wEDS3031LEDSetState=wEDS3031LEDSetState, wUnknown=wUnknown, owDS2450ChannelDOutputControl=owDS2450ChannelDOutputControl, owEDS0064Entry=owEDS0064Entry, owDS2450ChannelAConversionRange=owDS2450ChannelAConversionRange, owEDS0065Entry=owEDS0065Entry, owEDS0066Entry=owEDS0066Entry, owEDS0069=owEDS0069, wTrapEntry=wTrapEntry, wEDS3030Temperature=wEDS3030Temperature, owEDS0080Input4=owEDS0080Input4, owEDS0050Counter=owEDS0050Counter, wEDS1068RelaySetState=wEDS1068RelaySetState, owDS2438Table=owDS2438Table, owEDS0090PullDown7=owEDS0090PullDown7, owEDS0090Input2=owEDS0090Input2, owEDS0091PulseCounter3=owEDS0091PulseCounter3, owEDS0091PulseCounterReset4=owEDS0091PulseCounterReset4, wEDS2101Entry=wEDS2101Entry, owDS18S20=owDS18S20, owDS2408RSTZConfiguration=owDS2408RSTZConfiguration, owEDS0082Input5=owEDS0082Input5, owDS2438=owDS2438, wTrapHighThreshold=wTrapHighThreshold, owDS18S20UserByte1=owDS18S20UserByte1, owEDS0071Temperature=owEDS0071Temperature, wEDS3032Input1=wEDS3032Input1, owEDS0071Entry=owEDS0071Entry, dTrapDeviceSendPointer=dTrapDeviceSendPointer, wEDS3031RTDTemperature=wEDS3031RTDTemperature, owDS2450ChannelAConversionResolution=owDS2450ChannelAConversionResolution, wEDS1068ActivityLatch1=wEDS1068ActivityLatch1, owDS2408PIOOutputLatchState=owDS2408PIOOutputLatchState, owEDS0068Entry=owEDS0068Entry, wEDS3031ActivityLatch1=wEDS3031ActivityLatch1, owEDS0001ErrorsChannel2=owEDS0001ErrorsChannel2, dTrapDeviceEntry=dTrapDeviceEntry, owEDS0080Input1=owEDS0080Input1, owEDS0001DevicesConnected=owEDS0001DevicesConnected, wEDS3031Entry=wEDS3031Entry, owDS2438current=owDS2438current, owEDS0085Input2=owEDS0085Input2, wEDS1067Entry=wEDS1067Entry, wDeviceType=wDeviceType, owDS28EA00=owDS28EA00, owEDS0001ErrorsChannel1=owEDS0001ErrorsChannel1, wEDS3030LEDFunction=wEDS3030LEDFunction, owDS18B20Resolution=owDS18B20Resolution, wEDS1067RelayState=wEDS1067RelayState, wEDS1065Battery=wEDS1065Battery, eFirmwareDate=eFirmwareDate, owDeviceFamily=owDeviceFamily, wEDS3031Temperature=wEDS3031Temperature, owEDS0090ActivityLatchReset8=owEDS0090ActivityLatchReset8, owEDS0091ActivityLatch2=owEDS0091ActivityLatch2, owEDS0069Table=owEDS0069Table, owEDS0090PulseCounterReset5=owEDS0090PulseCounterReset5, wEDS1066RelayFunction=wEDS1066RelayFunction, dTrapEntry=dTrapEntry, owEDS0090ActivityLatchReset7=owEDS0090ActivityLatchReset7, owEDS0050ActivityLatch1=owEDS0050ActivityLatch1, owEDS0090ActivityLatchReset6=owEDS0090ActivityLatchReset6, owEDS0091ActivityLatchReset4=owEDS0091ActivityLatchReset4, owEDS0090ActivityLatchReset3=owEDS0090ActivityLatchReset3, owDS2450PowerOnReset=owDS2450PowerOnReset, wEDS1065Entry=wEDS1065Entry, wEDS3030=wEDS3030, wEDS3031ReadCounter=wEDS3031ReadCounter, wEDS1064Battery=wEDS1064Battery, owEDS0091ActivityLatchReset2=owEDS0091ActivityLatchReset2, owDS2450ChannelBOutputEnable=owDS2450ChannelBOutputEnable, owEDS0082Input4=owEDS0082Input4, owEDS0090Input3=owEDS0090Input3, wEDS3031=wEDS3031, wEDS1065Input1=wEDS1065Input1, owDS2450ChannelCOutputControl=owDS2450ChannelCOutputControl, owEDS0068=owEDS0068, owDS2406NumChnls=owDS2406NumChnls, wTrapIndex=wTrapIndex, owEDS0090Entry=owEDS0090Entry, wEDS1064LEDFunction=wEDS1064LEDFunction, owEDS0085Table=owEDS0085Table, owEDS0085=owEDS0085, owDS2450Table=owDS2450Table, owEDS0001=owEDS0001, owDS2450ChannelCConversionValue=owDS2450ChannelCConversionValue, wEDS1068BarometricPressure=wEDS1068BarometricPressure, owEDS0050Output1=owEDS0050Output1, wEDS3032Temperature=wEDS3032Temperature, owDS2406PIOBFlipFlop=owDS2406PIOBFlipFlop, owEDS0090Input6=owEDS0090Input6, owEDS0090Input8=owEDS0090Input8, wEDS1068Input1=wEDS1068Input1, owEDS0080Input5=owEDS0080Input5, wEDS1066PulseCounter1=wEDS1066PulseCounter1, wEDS1068RelayState=wEDS1068RelayState, wEDS1067Table=wEDS1067Table, wEDS3032=wEDS3032, wEDS1067Battery=wEDS1067Battery, owEDS0090ActivityLatchReset5=owEDS0090ActivityLatchReset5, wDeviceIndex=wDeviceIndex, wDeviceEntry=wDeviceEntry, wEDS1065PulseCounter1=wEDS1065PulseCounter1, owEDS0092Counter=owEDS0092Counter, wEDS1067Light=wEDS1067Light, owEDS0050=owEDS0050, owEDS0092Entry=owEDS0092Entry, owDS28EA00UserByte1=owDS28EA00UserByte1, owDeviceROM=owDeviceROM, owEDS0080Entry=owEDS0080Entry, owEDS0067Light=owEDS0067Light, owEDS0090PulseCounter4=owEDS0090PulseCounter4, owEDS0090Output7=owEDS0090Output7, wEDS1065RelayState=wEDS1065RelayState, wEDS1068Temperature=wEDS1068Temperature, owEDS0092Output3=owEDS0092Output3, owDS2406PIOBActivityLatch=owDS2406PIOBActivityLatch, owDS2450ChannelDConversionValue=owDS2450ChannelDConversionValue, wEDS2101SendCounter=wEDS2101SendCounter, wEDS1065LEDState=wEDS1065LEDState, wUnused1=wUnused1, owEDS0091ActivityLatch4=owEDS0091ActivityLatch4, wEDS3032ReadCounter=wEDS3032ReadCounter, wTrap=wTrap, wEDS1064Entry=wEDS1064Entry, owDS2438Temperature=owDS2438Temperature, wEDS1066LEDState=wEDS1066LEDState, wEDS1068HeatIndex=wEDS1068HeatIndex, owEDS0067=owEDS0067, wDeviceTypes=wDeviceTypes, wTrapTable=wTrapTable, owEDS0090PullDown5=owEDS0090PullDown5, owDS18B20PwrSupply=owDS18B20PwrSupply, owEDS0080Input3=owEDS0080Input3, eCompanyName=eCompanyName, owEDS0001InputVoltage=owEDS0001InputVoltage, wEDS1067ReadCounter=wEDS1067ReadCounter, owEDS0066Table=owEDS0066Table, owEDS0090PulseCounter5=owEDS0090PulseCounter5)
mibBuilder.exportSymbols("EDS-MIB", wEDS2101=wEDS2101, wEDS3032Battery=wEDS3032Battery, owDS18B20UserByte1=owDS18B20UserByte1, wEDS1066=wEDS1066, owEDS0090Output6=owEDS0090Output6, owEDS0090Output1=owEDS0090Output1, wEDS1101DevicesConnected=wEDS1101DevicesConnected, dTrapDeviceVariable=dTrapDeviceVariable, owEDS0090ActivityLatch3=owEDS0090ActivityLatch3, wEDS3032PulseCounter1=wEDS3032PulseCounter1, wEDS3030Probe=wEDS3030Probe, wEDS1065=wEDS1065, wEDS3032LEDSetState=wEDS3032LEDSetState, dTrapDeviceIndex=dTrapDeviceIndex, owDS2450ChannelAOutputEnable=owDS2450ChannelAOutputEnable, owEDS0085Input3=owEDS0085Input3, owUnknown=owUnknown, owEDS0090Input5=owEDS0090Input5, owEDS0050PulseCounterReset2=owEDS0050PulseCounterReset2, wEDS3030PulseCounter1=wEDS3030PulseCounter1, owDS28EA00PIOBFlipFlop=owDS28EA00PIOBFlipFlop, wEDS3032RTD2Temperature=wEDS3032RTD2Temperature, wEDS1068Entry=wEDS1068Entry, owEDS0083Input3=owEDS0083Input3, wNone=wNone, wEDS1064RelaySetState=wEDS1064RelaySetState, wEDS1067LEDState=wEDS1067LEDState, owEDS0065Table=owEDS0065Table, owDS2423Entry=owDS2423Entry, owEDS0001PollCount=owEDS0001PollCount, owEDS0001ErrorsChannel3=owEDS0001ErrorsChannel3, owEDS0082Input2=owEDS0082Input2, owEDS0082Input8=owEDS0082Input8, dTrapDeviceEnable=dTrapDeviceEnable, owEDS0069Temperature=owEDS0069Temperature, wEDS3032ActivityLatch1=wEDS3032ActivityLatch1, dTrapDeviceLowThreshold=dTrapDeviceLowThreshold, owEDS0068Temperature=owEDS0068Temperature, owEDS0065Humidex=owEDS0065Humidex, owDS2406PIOAActivityLatch=owDS2406PIOAActivityLatch, wUnused2=wUnused2, owEDS0090PullDown3=owEDS0090PullDown3, owDS2450ChannelCOutputEnable=owDS2450ChannelCOutputEnable, owEDS0082Input6=owEDS0082Input6, owEDS0050Table=owEDS0050Table, owEDS0080Table=owEDS0080Table, wEDS1065LEDFunction=wEDS1065LEDFunction, wEDS1068DewPoint=wEDS1068DewPoint, wEDS1065Humidity=wEDS1065Humidity, owEDS0066=owEDS0066, owEDS0090ActivityLatch7=owEDS0090ActivityLatch7, wEDS1066Temperature=wEDS1066Temperature, wEDS1066Entry=wEDS1066Entry, owDeviceEntry=owDeviceEntry, wEDS3031LEDFunction=wEDS3031LEDFunction, wEDS1068Light=wEDS1068Light, owEDS0050PulseCounter1=owEDS0050PulseCounter1, wDeviceFamily=wDeviceFamily, owNone=owNone, owEDS0050Temperature=owEDS0050Temperature, owDS18B20Table=owDS18B20Table, owEDS0068Humidex=owEDS0068Humidex, wEDS1067LEDFunction=wEDS1067LEDFunction, wEDS3031Input1=wEDS3031Input1, owEDS0066BarometricPressureMb=owEDS0066BarometricPressureMb, owEDS0090PulseCounterReset7=owEDS0090PulseCounterReset7, dTrapDeviceTable=dTrapDeviceTable, owEDS0085Input4=owEDS0085Input4, owEDS0070VibrationMin=owEDS0070VibrationMin, owEDS0090PulseCounterReset2=owEDS0090PulseCounterReset2, owEDS0001VoltageChannel3=owEDS0001VoltageChannel3, owEDS0067Entry=owEDS0067Entry, owEDS0090ActivityLatch6=owEDS0090ActivityLatch6, wEDS1064Table=wEDS1064Table, owDeviceNumActive=owDeviceNumActive, owDS2408PIOLogicState=owDS2408PIOLogicState, owDS18B20=owDS18B20, owEDS0067Table=owEDS0067Table, wEDS1065HeatIndex=wEDS1065HeatIndex, wEDS1065Temperature=wEDS1065Temperature, owEDS0001TimeStamp=owEDS0001TimeStamp, wEDS3030Input1=wEDS3030Input1, wEDS3030Entry=wEDS3030Entry, owDeviceTypes=owDeviceTypes, wDeviceName=wDeviceName, edsMain=edsMain, owEDS0050PulseCounter2=owEDS0050PulseCounter2, dTrapDeviceHighThreshold=dTrapDeviceHighThreshold, dTrapDeviceHysteresis=dTrapDeviceHysteresis, owEDS0065=owEDS0065, owEDS0090ActivityLatchReset4=owEDS0090ActivityLatchReset4, wEDS1065ActivityLatch1=wEDS1065ActivityLatch1, owEDS0091PulseCounter4=owEDS0091PulseCounter4, owEDS0001MACAddress=owEDS0001MACAddress, owEDS0001DevicesConnectedChannel2=owEDS0001DevicesConnectedChannel2, owEDS0070VibrationInstant=owEDS0070VibrationInstant, owEDS0090ActivityLatchReset2=owEDS0090ActivityLatchReset2, owEDS0080Counter=owEDS0080Counter, wDeviceTag=wDeviceTag, owDS2450ChannelCConversionResolution=owDS2450ChannelCConversionResolution, owEDS0068BarometricPressureHg=owEDS0068BarometricPressureHg, owEDS0050Entry=owEDS0050Entry, owDS2450=owDS2450, owEDS0090PullDown4=owEDS0090PullDown4, owDS2406PIOAFlipFlop=owDS2406PIOAFlipFlop, wEDS1064ActivityLatch1=wEDS1064ActivityLatch1, owEDS0090=owEDS0090, owDS2406=owDS2406, owEDS0091PulseCounterReset2=owEDS0091PulseCounterReset2, owEDS0091Table=owEDS0091Table, wEDS1066BarometricPressure=wEDS1066BarometricPressure, dTrapIndex=dTrapIndex, owEDS0068Table=owEDS0068Table, wEDS1066ActivityLatch1=wEDS1066ActivityLatch1, owEDS0082Input1=owEDS0082Input1, wEDS1068=wEDS1068, wEDS3030LEDSetState=wEDS3030LEDSetState, owDS2438Entry=owDS2438Entry, PYSNMP_MODULE_ID=edsProducts, wEDS1101Entry=wEDS1101Entry, dTrapTable=dTrapTable, owEDS0068Humidity=owEDS0068Humidity, owEDS0050ActivityLatchReset2=owEDS0050ActivityLatchReset2, wEDS1101=wEDS1101, wEDS1066Table=wEDS1066Table, owDS2408PowerOnResetLatch=owDS2408PowerOnResetLatch, owEDS0080Input2=owEDS0080Input2, owEDS0091ActivityLatchReset1=owEDS0091ActivityLatchReset1, owEDS0085Input1=owEDS0085Input1, wEDS1066Input1=wEDS1066Input1, owEDS0065Temperature=owEDS0065Temperature, wDeviceTable=wDeviceTable, wTrapEUI=wTrapEUI, owEDS0001HostName=owEDS0001HostName, owDS2406ActivityLatchReset=owDS2406ActivityLatchReset, owEDS0082Entry=owEDS0082Entry, wEDS1064RelayFunction=wEDS1064RelayFunction, owDS2423Table=owDS2423Table, owDS18B20Temperature=owDS18B20Temperature, owDS2408VCCPowerStatus=owDS2408VCCPowerStatus, owDS2450ChannelDConversionRange=owDS2450ChannelDConversionRange, wEDS1067ActivityLatch1=wEDS1067ActivityLatch1, owEDS0083=owEDS0083, dTrapCommunity=dTrapCommunity, wEDS1101SendCounter=wEDS1101SendCounter, wEDS1064PulseCounter1=wEDS1064PulseCounter1, owDS2408PIOActivityLatchState=owDS2408PIOActivityLatchState, owDS2406PIOALevel=owDS2406PIOALevel, wEDS3030Light=wEDS3030Light, owEDS0090PulseCounter6=owEDS0090PulseCounter6, wEDS1068Battery=wEDS1068Battery, owEDS0050Input2=owEDS0050Input2, dTrap=dTrap, wEDS1067RelayFunction=wEDS1067RelayFunction, owEDS0083Table=owEDS0083Table, owEDS0066BarometricPressureHg=owEDS0066BarometricPressureHg, owEDS0001VoltageChannel2=owEDS0001VoltageChannel2, wEDS3030LEDState=wEDS3030LEDState, owEDS0070Table=owEDS0070Table, owEDS0066Counter=owEDS0066Counter, owDS18B20UserByte2=owDS18B20UserByte2, owDeviceHealth=owDeviceHealth, owDS2438Humidity=owDS2438Humidity, wEDS3030ActivityLatch1=wEDS3030ActivityLatch1, owEDS0001DevicesConnectedChannel1=owEDS0001DevicesConnectedChannel1, owDS2450ChannelBOutputControl=owDS2450ChannelBOutputControl, owEDS0090ActivityLatch2=owEDS0090ActivityLatch2, owDS2450ChannelAOutputControl=owDS2450ChannelAOutputControl, owEDS0090PullDown6=owEDS0090PullDown6, owEDS0090PullDown8=owEDS0090PullDown8, owEDS0082Input7=owEDS0082Input7, wEDS1067Input1=wEDS1067Input1, wEDS1068ReadCounter=wEDS1068ReadCounter, wDevices=wDevices, owDeviceType=owDeviceType, owEDS0065DewPoint=owEDS0065DewPoint, owEDS0080Input8=owEDS0080Input8, owEDS0001DeviceName=owEDS0001DeviceName, wEDS1065Table=wEDS1065Table, owEDS0080Input7=owEDS0080Input7, owEDS0091Input2=owEDS0091Input2, owEDS0050InputVoltage=owEDS0050InputVoltage, wEDS1066RelayState=wEDS1066RelayState, owEDS0068DewPoint=owEDS0068DewPoint, wEDS1066LEDSetState=wEDS1066LEDSetState, owEDS0067Temperature=owEDS0067Temperature, wEDS1065Humidex=wEDS1065Humidex, owEDS0068Light=owEDS0068Light, owDS2450Entry=owDS2450Entry, owEDS0083Counter=owEDS0083Counter, owDS28EA00UserByte2=owDS28EA00UserByte2, owEDS0091ActivityLatchReset3=owEDS0091ActivityLatchReset3, owEDS0091PulseCounter2=owEDS0091PulseCounter2, wEDS1064LEDState=wEDS1064LEDState, owDS2450ChannelAConversionValue=owDS2450ChannelAConversionValue, wEDS1064=wEDS1064, wEDS3031Battery=wEDS3031Battery, owEDS0082=owEDS0082, owDeviceName=owDeviceName, owDS2423CounterA=owDS2423CounterA, edsEnterprise=edsEnterprise, owDS2408Entry=owDS2408Entry, owEDS0050PulseCounterReset1=owEDS0050PulseCounterReset1, wEDS1068Humidity=wEDS1068Humidity, owEDS0064Temperature=owEDS0064Temperature, wEDS1067Temperature=wEDS1067Temperature, owEDS0065Counter=owEDS0065Counter, owDS2408Table=owDS2408Table, owEDS0091Input4=owEDS0091Input4, wEDS1064ReadCounter=wEDS1064ReadCounter, owDS28EA00Temperature=owDS28EA00Temperature, owEDS0001VoltageChannel1=owEDS0001VoltageChannel1, eFirmwareVersion=eFirmwareVersion, owEDS0068HeatIndex=owEDS0068HeatIndex, owEDS0001Table=owEDS0001Table, dTrapEnable=dTrapEnable, wEDS3032Table=wEDS3032Table, wEDS1068PulseCounter1=wEDS1068PulseCounter1, owEDS0070VibrationMax=owEDS0070VibrationMax, wEDS1066ReadCounter=wEDS1066ReadCounter, owEDS0092=owEDS0092, wEDS3032Entry=wEDS3032Entry, wEDS2101DevicesConnected=wEDS2101DevicesConnected, owDS2406PwrSupply=owDS2406PwrSupply, owEDS0092Output4=owEDS0092Output4, owEDS0090Input4=owEDS0090Input4, owEDS0090PulseCounter8=owEDS0090PulseCounter8, owEDS0090Output3=owEDS0090Output3, owEDS0050Output2=owEDS0050Output2, owEDS0090Input1=owEDS0090Input1, wEDS1068Humidex=wEDS1068Humidex, wEDS1066RelaySetState=wEDS1066RelaySetState, wEDS1067RelaySetState=wEDS1067RelaySetState, wEDS1068Table=wEDS1068Table, owDeviceInfo=owDeviceInfo, owDS2450VCCControl=owDS2450VCCControl, wEDS1065RelayFunction=wEDS1065RelayFunction, owDS2450ChannelBConversionRange=owDS2450ChannelBConversionRange, owDS2406Entry=owDS2406Entry, wEDS1068RelayFunction=wEDS1068RelayFunction, wEDS1067=wEDS1067, owEDS0070Entry=owEDS0070Entry, wEDS1064LEDSetState=wEDS1064LEDSetState, wDeviceEUI=wDeviceEUI, owEDS0091Entry=owEDS0091Entry, owEDS0068Counter=owEDS0068Counter, owDS18S20UserByte2=owDS18S20UserByte2, wEDS3032RTD1Temperature=wEDS3032RTD1Temperature, owEDS0090Output8=owEDS0090Output8, wEDS3030ReadCounter=wEDS3030ReadCounter, wDeviceNumActive=wDeviceNumActive, owEDS0065HeatIndex=owEDS0065HeatIndex, owEDS0070Counter=owEDS0070Counter, owDS2423=owDS2423)
mibBuilder.exportSymbols("EDS-MIB", owEDS0090Input7=owEDS0090Input7, wEDS1065RelaySetState=wEDS1065RelaySetState, wEDS1064Input1=wEDS1064Input1, owEDS0090PullDown2=owEDS0090PullDown2, owEDS0092Output1=owEDS0092Output1, wDeviceDescription=wDeviceDescription, owEDS0091=owEDS0091, owDS2450ChannelBConversionResolution=owDS2450ChannelBConversionResolution, eMIBVersion=eMIBVersion, owEDS0090ActivityLatch1=owEDS0090ActivityLatch1)
