#
# PySNMP MIB module ADTRAN-FRPerform-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADTRAN-FRPerform-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:14:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
adProdPhysAddress, adMgmt, adtran, adProducts = mibBuilder.importSymbols("ADTRAN-MIB", "adProdPhysAddress", "adMgmt", "adtran", "adProducts")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, Counter32, IpAddress, Counter64, MibIdentifier, ObjectIdentity, NotificationType, ModuleIdentity, enterprises, NotificationType, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "Counter32", "IpAddress", "Counter64", "MibIdentifier", "ObjectIdentity", "NotificationType", "ModuleIdentity", "enterprises", "NotificationType", "iso", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
adPerform = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 4))
adFRPerformmg = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 4, 1))
adFRPerformHistoryControl = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 4, 1, 1))
adFRPerformCurrentPvcStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 4, 1, 2))
adFRPerformIntPvcStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 4, 1, 3))
adFRPerformIntPortStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 4, 1, 4))
adFRPerformIntPortError = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 4, 1, 5))
adFRPerformIntHistoryTime = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 4, 1, 6))
adFRPerformDayPvcStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 4, 1, 7))
adFRPerformDayPortStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 4, 1, 8))
adFRPerformDayPortError = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 4, 1, 9))
adFRPerformDayHistoryTime = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 4, 1, 10))
adFRPerformHistoryIntLength = MibScalar((1, 3, 6, 1, 4, 1, 664, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("min5", 1), ("min10", 2), ("min15", 3), ("min20", 4), ("min30", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adFRPerformHistoryIntLength.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformHistoryIntLength.setDescription('This value selects the sampling interval period for data collected in the interval tables.')
adFRPerformCurrentIntTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 664, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformCurrentIntTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformCurrentIntTimeRemaining.setDescription('Seconds remaining in current Interval.')
adFRPerformCompletedInts = MibScalar((1, 3, 6, 1, 4, 1, 664, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformCompletedInts.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformCompletedInts.setDescription('Number of completed intervals in interval tables.')
adFRPerformCompletedDays = MibScalar((1, 3, 6, 1, 4, 1, 664, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformCompletedDays.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformCompletedDays.setDescription('Number of completed days in day table.')
adFRPerformCurrentPvcStatusTable = MibTable((1, 3, 6, 1, 4, 1, 664, 4, 1, 2, 1), )
if mibBuilder.loadTexts: adFRPerformCurrentPvcStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformCurrentPvcStatusTable.setDescription('n/a.')
adFRPerformCurrentPvcStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 4, 1, 2, 1, 1), ).setIndexNames((0, "ADTRAN-FRPerform-MIB", "adFRPerformCurrentPvcIfIndex"), (0, "ADTRAN-FRPerform-MIB", "adFRPerformCurrentPvcStatusIndex"))
if mibBuilder.loadTexts: adFRPerformCurrentPvcStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformCurrentPvcStatusEntry.setDescription('n/a')
adFRPerformCurrentPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformCurrentPvcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformCurrentPvcIfIndex.setDescription('n/a.')
adFRPerformCurrentPvcStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformCurrentPvcStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformCurrentPvcStatusIndex.setDescription('n/a.')
adFRPerformCurrentPvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformCurrentPvcState.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformCurrentPvcState.setDescription('Current state for this PVC.')
adFRPerformCurrentPvcStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("not-available", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformCurrentPvcStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformCurrentPvcStatistics.setDescription('Indicates whether this PVC is managed and has statistics available or is not managed.')
adFRPerformIntPvcStatusTable = MibTable((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1), )
if mibBuilder.loadTexts: adFRPerformIntPvcStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPvcStatusTable.setDescription('n/a.')
adFRPerformIntPvcStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1), ).setIndexNames((0, "ADTRAN-FRPerform-MIB", "adFRPerformIntPvcIfIndex"), (0, "ADTRAN-FRPerform-MIB", "adFRPerformIntPvcIndex"), (0, "ADTRAN-FRPerform-MIB", "adFRPerformIntPvcSlotIndex"))
if mibBuilder.loadTexts: adFRPerformIntPvcStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPvcStatusEntry.setDescription('n/a')
adFRPerformIntPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPvcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPvcIfIndex.setDescription('n/a.')
adFRPerformIntPvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPvcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPvcIndex.setDescription('n/a.')
adFRPerformIntPvcSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPvcSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPvcSlotIndex.setDescription('n/a.')
adFRPerformIntPVCStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCStateChange.setDescription('The number of state changes for this PVC for the interval.')
adFRPerformIntPVCInactiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCInactiveTime.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCInactiveTime.setDescription('Time in seconds the PVC has been in the inactive state for the interval.')
adFRPerformIntPVCFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCFramesRx.setDescription('The number of Frames the PVC has received for the interval.')
adFRPerformIntPVCFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCFramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCFramesTx.setDescription('The number of Frames the PVC has transmitted for the interval.')
adFRPerformIntPVCBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCBytesRx.setDescription('The number of bytes the PVC has received for the interval.')
adFRPerformIntPVCBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCBytesTx.setDescription('The number of bytes the PVC has transmitted for the interval.')
adFRPerformIntPVCAvgThruputTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCAvgThruputTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCAvgThruputTx.setDescription('Average Throughput the PVC has transmitted for the interval.')
adFRPerformIntPVCAvgThruputRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCAvgThruputRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCAvgThruputRx.setDescription('Average throughput the PVC has received for the interval.')
adFRPerformIntPVCMaxThruputTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCMaxThruputTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCMaxThruputTx.setDescription('The Maximum Throughput the PVC has transmitted for the interval.')
adFRPerformIntPVCMaxThruputRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCMaxThruputRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCMaxThruputRx.setDescription('The Maximum Throughput the PVC has received for the interval.')
adFRPerformIntPVCAvgUtilizationTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCAvgUtilizationTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCAvgUtilizationTx.setDescription('The Average Utilization the PVC has transmitted for the interval.')
adFRPerformIntPVCAvgUtilizationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCAvgUtilizationRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCAvgUtilizationRx.setDescription('The Average Utilization the PVC has received for the interval.')
adFRPerformIntPVCMaxUtilizationTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCMaxUtilizationTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCMaxUtilizationTx.setDescription('The Maximum Utilization the PVC has transmitted for the interval.')
adFRPerformIntPVCMaxUtilizationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCMaxUtilizationRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCMaxUtilizationRx.setDescription('The Maximum Utilization the PVC has received for the interval.')
adFRPerformIntPVCBurstTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCBurstTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCBurstTx.setDescription('Amount of time (in seconds that throughput in the transmit direction is greater than CIR.')
adFRPerformIntPVCBurstRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCBurstRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCBurstRx.setDescription('Amount of time (in seconds that throughput in the receive direction is greater than CIR.')
adFRPerformIntPVCFecnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCFecnRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCFecnRx.setDescription('The number of FECNs the PVC has received for the interval.')
adFRPerformIntPVCFecnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCFecnTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCFecnTx.setDescription('The number of FECNs the PVC has transmitted for the interval.')
adFRPerformIntPVCBecnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCBecnRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCBecnRx.setDescription('The number of BECNs the PVC has received for the interval.')
adFRPerformIntPVCBecnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCBecnTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCBecnTx.setDescription('The number of BECNs the PVC has transmitted for the interval.')
adFRPerformIntPVCDeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCDeRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCDeRx.setDescription('The number of DEs the PVC has received for the interval.')
adFRPerformIntPVCDeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCDeTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCDeTx.setDescription('The number of DEs the PVC has transmitted for the interval.')
adFRPerformIntPVCCrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCCrRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCCrRx.setDescription('The number of CRs the PVC has received for the interval.')
adFRPerformIntPVCCrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCCrTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCCrTx.setDescription('The number of CRs the PVC has transmitted for the interval.')
adFRPerformIntPVCMinFrameSizeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCMinFrameSizeRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCMinFrameSizeRx.setDescription('The Minimum Frame Size the PVC received for the interval.')
adFRPerformIntPVCMinFrameSizeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCMinFrameSizeTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCMinFrameSizeTx.setDescription('The Minimum Frame Size the PVC transmitted for the interval.')
adFRPerformIntPVCMaxFrameSizeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCMaxFrameSizeRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCMaxFrameSizeRx.setDescription('The Maximum Frame Size the PVC received for the interval.')
adFRPerformIntPVCMaxFrameSizeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCMaxFrameSizeTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCMaxFrameSizeTx.setDescription('The Maximum Frame Size the PVC transmitted for the interval.')
adFRPerformIntPVCAvgFrameSizeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCAvgFrameSizeRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCAvgFrameSizeRx.setDescription('The Average Frame Size the PVC received for the interval.')
adFRPerformIntPVCAvgFrameSizeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCAvgFrameSizeTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCAvgFrameSizeTx.setDescription('The Average Frame Size the PVC transmitted for the interval.')
adFRPerformIntPVCLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCLostFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCLostFrames.setDescription('The number of Lost Frames on the PVC for the interval. Applies only if Sequence Numbering is Enabled on the PVC.')
adFRPerformIntPVCRemoteLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCRemoteLostFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCRemoteLostFrames.setDescription('The number of Remote Lost Frames on the PVC for the interval. Applies only if Sequence Numbering is Enabled on the PVC.')
adFRPerformIntPVCMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCMaxDelay.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCMaxDelay.setDescription('The Maximum Delay in milliseconds on the PVC for the interval. Applies only if Delay Measurement is Enabled for the PVC or PVC Diagnostics are being performed.')
adFRPerformIntPVCMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCMinDelay.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCMinDelay.setDescription('The Minimum Delay in milliseconds on the PVC for the interval. Applies only if Delay Measurement is Enabled for the PVC or PVC Diagnostics are being performed.')
adFRPerformIntPVCAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCAvgDelay.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCAvgDelay.setDescription('The Average Delay in milliseconds on the PVC for the interval. Applies only if Delay Measurement is Enabled for the PVC or PVC Diagnostics are being performed.')
adFRPerformIntPVCTimeInDBU = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 3, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPVCTimeInDBU.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPVCTimeInDBU.setDescription('Time in seconds the PVC is in the DBU state.')
adFRPerformIntPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1), )
if mibBuilder.loadTexts: adFRPerformIntPortStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortStatusTable.setDescription('n/a.')
adFRPerformIntPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1), ).setIndexNames((0, "ADTRAN-FRPerform-MIB", "adFRPerformIntIfIndex"), (0, "ADTRAN-FRPerform-MIB", "adFRPerformIntPortSlotIndex"))
if mibBuilder.loadTexts: adFRPerformIntPortStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortStatusEntry.setDescription('n/a')
adFRPerformIntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntIfIndex.setDescription('n/a.')
adFRPerformIntPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortSlotIndex.setDescription('n/a.')
adFRPerformIntPortFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortFramesRx.setDescription('The number of Frames the Port received for the interval.')
adFRPerformIntPortFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortFramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortFramesTx.setDescription('The number of Frames the Port transmitted for the interval.')
adFRPerformIntPortBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortBytesRx.setDescription('The number of Bytes the Port received for the interrval.')
adFRPerformIntPortBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortBytesTx.setDescription('The number of Bytes the Port transmitted for the interrval.')
adFRPerformIntPortAvgThruputTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortAvgThruputTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortAvgThruputTx.setDescription('The Average Throughput the Port transmitted for the interval.')
adFRPerformIntPortAvgThruputRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortAvgThruputRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortAvgThruputRx.setDescription('The Average Throughput the Port received for the interval.')
adFRPerformIntPortMaxThruputTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortMaxThruputTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortMaxThruputTx.setDescription('The Maximum Throughput the Port transmitted for the interval.')
adFRPerformIntPortMaxThruputRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortMaxThruputRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortMaxThruputRx.setDescription('The Maximum Throughput the Port received for the interval.')
adFRPerformIntPortAvgUtilizationTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortAvgUtilizationTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortAvgUtilizationTx.setDescription('The Average Utilization the Port transmitted for the interval.')
adFRPerformIntPortAvgUtilizationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortAvgUtilizationRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortAvgUtilizationRx.setDescription('The Average Utilization the Port received for the interval.')
adFRPerformIntPortMaxUtilizationTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortMaxUtilizationTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortMaxUtilizationTx.setDescription('The Maximum Utilization the Port transmitted for the interval.')
adFRPerformIntPortMaxUtilizationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortMaxUtilizationRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortMaxUtilizationRx.setDescription('The Maximum Utilization the Port received for the interval.')
adFRPerformIntPortFullStatusRX = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortFullStatusRX.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortFullStatusRX.setDescription('Number of PVC signaling full status frames received.')
adFRPerformIntPortFullStatusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortFullStatusTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortFullStatusTx.setDescription('Number of PVC signaling full status frames transmitted.')
adFRPerformIntPortLIOnlyRX = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortLIOnlyRX.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortLIOnlyRX.setDescription('Number of PVC signaling link integrity only frames received.')
adFRPerformIntPortLIOnlyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortLIOnlyTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortLIOnlyTx.setDescription('Number of PVC signaling link integrity only frames transmitted.')
adFRPerformIntPortAsyncStatusFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortAsyncStatusFrame.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortAsyncStatusFrame.setDescription('Number of single PVC status frames received.')
adFRPerformIntPortErrorTable = MibTable((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1), )
if mibBuilder.loadTexts: adFRPerformIntPortErrorTable.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortErrorTable.setDescription('n/a.')
adFRPerformIntPortErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1), ).setIndexNames((0, "ADTRAN-FRPerform-MIB", "adFRPerformIntPortIndex"), (0, "ADTRAN-FRPerform-MIB", "adFRPerformIntPortErrorSlotIndex"))
if mibBuilder.loadTexts: adFRPerformIntPortErrorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortErrorEntry.setDescription('n/a')
adFRPerformIntPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortIndex.setDescription('n/a.')
adFRPerformIntPortErrorSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortErrorSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortErrorSlotIndex.setDescription('n/a.')
adFRPerformIntPortUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntPortUnavailableTime.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntPortUnavailableTime.setDescription('Time in seconds the port is unavailable due to a physical or frame relay outage.')
adFRPerformIntCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntCrcErrors.setDescription('Number of frames received with CRC errors.')
adFRPerformIntAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntAbortFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntAbortFrames.setDescription('Number of frames received without proper flag termination.')
adFRPerformIntOctectViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntOctectViolations.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntOctectViolations.setDescription('Number of frames received with a bit count not divisible by eigth.')
adFRPerformIntDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntDiscardFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntDiscardFrames.setDescription('Number of frames discarded by the IQ unit')
adFRPerformIntLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntLengthErrors.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntLengthErrors.setDescription('Number of frames received that is less than 5 bytes or greater than 4500 bytes.')
adFRPerformIntEAViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntEAViolations.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntEAViolations.setDescription('Number of frames received with errors in the EA field of the frame relay header.')
adFRPerformIntEncapsulationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntEncapsulationErrors.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntEncapsulationErrors.setDescription('Number of frames destined for the IQ IP stack with that does not meet the FRF.3 IA.')
adFRPerformIntInactiveDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntInactiveDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntInactiveDLCI.setDescription('Number of frames received while the PVC is in the inactive state.')
adFRPerformIntInvalidDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntInvalidDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntInvalidDLCI.setDescription('Number of frames received with a DLCI value less than 16 or greater than 1007 not including PVC signaling frames.')
adFRPerformIntUnroutable = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntUnroutable.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntUnroutable.setDescription('Number of frames received on a management DLCI destined for the IQ unit and have the wrong IP address.')
adFRPerformIntSignalDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntSignalDownTime.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntSignalDownTime.setDescription('Time in seconds the signaling state has been down.')
adFRPerformIntSignalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntSignalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntSignalErrors.setDescription('Number of PVC signaling frames received with protocol violations.')
adFRPerformIntSignalTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntSignalTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntSignalTimeOut.setDescription('Number of PVC signal timeouts. Either T391 seconds elapsed without receiving a response to a poll or T392 elapsed seconds with receiving a poll.')
adFRPerformIntSignalStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntSignalStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntSignalStateChange.setDescription('Number of state changes for the PVC signaling protocol. This includes transitions from down state to up state and vice versa.')
adFRPerformIntHistoryTimeTable = MibTable((1, 3, 6, 1, 4, 1, 664, 4, 1, 6, 1), )
if mibBuilder.loadTexts: adFRPerformIntHistoryTimeTable.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntHistoryTimeTable.setDescription('n/a.')
adFRPerformIntHistoryTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 4, 1, 6, 1, 1), ).setIndexNames((0, "ADTRAN-FRPerform-MIB", "adFRPerformIntHistoryTimeSlotIndex"))
if mibBuilder.loadTexts: adFRPerformIntHistoryTimeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntHistoryTimeEntry.setDescription('n/a')
adFRPerformIntHistoryTimeSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntHistoryTimeSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntHistoryTimeSlotIndex.setDescription('n/a.')
adFRPerformIntHistorySlotTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntHistorySlotTotalTime.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntHistorySlotTotalTime.setDescription('Total time in seconds this interval slot represents.')
adFRPerformIntHistoryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformIntHistoryTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformIntHistoryTimeStamp.setDescription('Time interval started. Format H:M if not midnight else M-D')
adFRPerformDayPvcStatusTable = MibTable((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1), )
if mibBuilder.loadTexts: adFRPerformDayPvcStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPvcStatusTable.setDescription('n/a.')
adFRPerformDayPvcStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1), ).setIndexNames((0, "ADTRAN-FRPerform-MIB", "adFRPerformDayPvcIfIndex"), (0, "ADTRAN-FRPerform-MIB", "adFRPerformDayPvcIndex"), (0, "ADTRAN-FRPerform-MIB", "adFRPerformDayPvcSlotIndex"))
if mibBuilder.loadTexts: adFRPerformDayPvcStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPvcStatusEntry.setDescription('n/a')
adFRPerformDayPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPvcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPvcIfIndex.setDescription('n/a.')
adFRPerformDayPvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPvcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPvcIndex.setDescription('n/a.')
adFRPerformDayPvcSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPvcSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPvcSlotIndex.setDescription('n/a.')
adFRPerformDayPVCStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCStateChange.setDescription('The number of State Changes on the PVC for the day.')
adFRPerformDayPVCInactiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCInactiveTime.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCInactiveTime.setDescription('Time in seconds the PVC has been in the inactive state.')
adFRPerformDayPVCFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCFramesRx.setDescription('The number of Frames the PVC received for the day.')
adFRPerformDayPVCFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCFramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCFramesTx.setDescription('The number of Frames the PVC transmitted for the day.')
adFRPerformDayPVCBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCBytesRx.setDescription('The number of Bytes the PVC received for the day.')
adFRPerformDayPVCBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCBytesTx.setDescription('The number of Bytes the PVC transmitted for the day.')
adFRPerformDayPVCAvgThruputTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCAvgThruputTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCAvgThruputTx.setDescription('The Average Throughput the PVC transmitted for the day.')
adFRPerformDayPVCAvgThruputRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCAvgThruputRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCAvgThruputRx.setDescription('The Average Throughput the PVC received for the day.')
adFRPerformDayPVCMaxThruputTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCMaxThruputTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCMaxThruputTx.setDescription('The Maximum Throughput the PVC transmitted for the day.')
adFRPerformDayPVCMaxThruputRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCMaxThruputRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCMaxThruputRx.setDescription('The Maximum Throughput the PVC received for the day.')
adFRPerformDayPVCAvgUtilizationTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCAvgUtilizationTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCAvgUtilizationTx.setDescription('The Average Utilization the PVC transmitted for the day.')
adFRPerformDayPVCAvgUtilizationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCAvgUtilizationRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCAvgUtilizationRx.setDescription('The Average Utilization the PVC received for the day.')
adFRPerformDayPVCMaxUtilizationTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCMaxUtilizationTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCMaxUtilizationTx.setDescription('The Maximum Utilization the PVC transmitted for the day.')
adFRPerformDayPVCMaxUtilizationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCMaxUtilizationRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCMaxUtilizationRx.setDescription('The Maximum Utilization the PVC received for the day.')
adFRPerformDayPVCBurstTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCBurstTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCBurstTx.setDescription('n/a')
adFRPerformDayPVCBurstRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCBurstRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCBurstRx.setDescription('n/a')
adFRPerformDayPVCFecnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCFecnRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCFecnRx.setDescription('The number of FECNs the PVC received for the day.')
adFRPerformDayPVCFecnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCFecnTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCFecnTx.setDescription('The number of FECNs the PVC transmitted for the day.')
adFRPerformDayPVCBecnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCBecnRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCBecnRx.setDescription('The number of BECNs the PVC received for the day.')
adFRPerformDayPVCBecnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCBecnTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCBecnTx.setDescription('The number of BECNs the PVC transmitted for the day.')
adFRPerformDayPVCDeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCDeRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCDeRx.setDescription('The number of DEs the PVC received for the day.')
adFRPerformDayPVCDeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCDeTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCDeTx.setDescription('The number of DEs the PVC transmitted for the day.')
adFRPerformDayPVCCrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCCrRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCCrRx.setDescription('The number of CRs the PVC received for the day.')
adFRPerformDayPVCCrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCCrTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCCrTx.setDescription('The number of CRs the PVC transmitted for the day.')
adFRPerformDayPVCMinFrameSizeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCMinFrameSizeRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCMinFrameSizeRx.setDescription('The Minimum Frame Size the PVC received for the day.')
adFRPerformDayPVCMinFrameSizeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCMinFrameSizeTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCMinFrameSizeTx.setDescription('The Minimum Frame Size the PVC transmitted for the day.')
adFRPerformDayPVCMaxFrameSizeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCMaxFrameSizeRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCMaxFrameSizeRx.setDescription('The Maximum Frame Size the PVC received for the day.')
adFRPerformDayPVCMaxFrameSizeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCMaxFrameSizeTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCMaxFrameSizeTx.setDescription('The Maximum Frame Size the PVC transmitted for the day.')
adFRPerformDayPVCAvgFrameSizeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCAvgFrameSizeRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCAvgFrameSizeRx.setDescription('The Average Frame Size the PVC received for the day.')
adFRPerformDayPVCAvgFrameSizeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCAvgFrameSizeTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCAvgFrameSizeTx.setDescription('The Average Frame Size the PVC transmitted for the day.')
adFRPerformDayPVCLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCLostFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCLostFrames.setDescription('The number of Lost Frames on the PVC for the day. Applies only if Sequence Numbering is Enabled for the PVC.')
adFRPerformDayPVCRemoteLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCRemoteLostFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCRemoteLostFrames.setDescription('The number of Remote Lost Frames on the PVC for the day. Applies only if Sequence Numbering is Enabled for the PVC.')
adFRPerformDayPVCMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCMaxDelay.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCMaxDelay.setDescription('The Maximum Delay on the PVC for the day. Applies only if Delay Measurement or PVC Diagnostics are Enabled for the PVC.')
adFRPerformDayPVCMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCMinDelay.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCMinDelay.setDescription('The Minimum Delay on the PVC for the day. Applies only if Delay Measurement or PVC Diagnostics are Enabled for the PVC.')
adFRPerformDayPVCAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCAvgDelay.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCAvgDelay.setDescription('The Average Delay on the PVC for the day. Applies only if Delay Measurement or PVC Diagnostics are Enabled for the PVC.')
adFRPerformDayPVCTimeInDBU = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 7, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPVCTimeInDBU.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPVCTimeInDBU.setDescription('Time in seconds the PVC is in the DBU state.')
adFRPerformDayPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1), )
if mibBuilder.loadTexts: adFRPerformDayPortStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortStatusTable.setDescription('n/a.')
adFRPerformDayPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1), ).setIndexNames((0, "ADTRAN-FRPerform-MIB", "adFRPerformDayIfIndex"), (0, "ADTRAN-FRPerform-MIB", "adFRPerformDayPortSlotIndex"))
if mibBuilder.loadTexts: adFRPerformDayPortStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortStatusEntry.setDescription('n/a')
adFRPerformDayIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayIfIndex.setDescription('n/a.')
adFRPerformDayPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortSlotIndex.setDescription('n/a.')
adFRPerformDayPortFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortFramesRx.setDescription('The number of Frames the Port received for the day.')
adFRPerformDayPortFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortFramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortFramesTx.setDescription('The number of Frames the Port transmitted for the day.')
adFRPerformDayPortBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortBytesRx.setDescription('The number of Bytes the Port received for the day.')
adFRPerformDayPortBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortBytesTx.setDescription('he number of Bytes the Port transmitted for the day.')
adFRPerformDayPortAvgThruputTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortAvgThruputTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortAvgThruputTx.setDescription('The Average Throughput the Port transmitted for the day.')
adFRPerformDayPortAvgThruputRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortAvgThruputRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortAvgThruputRx.setDescription('The Average Throughput the Port received for the day.')
adFRPerformDayPortMaxThruputTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortMaxThruputTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortMaxThruputTx.setDescription('The Maximum Throughput the Port transmitted for the day.')
adFRPerformDayPortMaxThruputRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortMaxThruputRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortMaxThruputRx.setDescription('The Maximum Throughput the Port received for the day.')
adFRPerformDayPortAvgUtilizationTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortAvgUtilizationTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortAvgUtilizationTx.setDescription('The Average Utilization the Port transmitted for the day.')
adFRPerformDayPortAvgUtilizationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortAvgUtilizationRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortAvgUtilizationRx.setDescription('The Average Utilization the Port received for the day.')
adFRPerformDayPortMaxUtilizationTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortMaxUtilizationTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortMaxUtilizationTx.setDescription('The Maximum Utilization the Port transmitted for the day.')
adFRPerformDayPortMaxUtilizationRx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortMaxUtilizationRx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortMaxUtilizationRx.setDescription('The Maximum Utilization the Port received for the day.')
adFRPerformDayPortFullStatusRX = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortFullStatusRX.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortFullStatusRX.setDescription('Number of PVC signaling full status frames received.')
adFRPerformDayPortFullStatusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortFullStatusTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortFullStatusTx.setDescription('Number of PVC signaling full status frames transmitted.')
adFRPerformDayPortLIOnlyRX = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortLIOnlyRX.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortLIOnlyRX.setDescription('Number of PVC signaling link integrity only frames received.')
adFRPerformDayPortLIOnlyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortLIOnlyTx.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortLIOnlyTx.setDescription('Number of PVC signaling link integrity only frames transmitted.')
adFRPerformDayPortAsyncStatusFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 8, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortAsyncStatusFrame.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortAsyncStatusFrame.setDescription('Number of single PVC status frames received.')
adFRPerformDayPortErrorTable = MibTable((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1), )
if mibBuilder.loadTexts: adFRPerformDayPortErrorTable.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortErrorTable.setDescription('n/a.')
adFRPerformDayPortErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1), ).setIndexNames((0, "ADTRAN-FRPerform-MIB", "adFRPerformDayPortIndex"), (0, "ADTRAN-FRPerform-MIB", "adFRPerformDayPortErrorSlotIndex"))
if mibBuilder.loadTexts: adFRPerformDayPortErrorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortErrorEntry.setDescription('n/a')
adFRPerformDayPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortIndex.setDescription('n/a.')
adFRPerformDayPortErrorSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortErrorSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortErrorSlotIndex.setDescription('n/a.')
adFRPerformDayPortUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayPortUnavailableTime.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayPortUnavailableTime.setDescription('Time in seconds the port is unavailable due to a physical or frame relay outage.')
adFRPerformDayCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayCrcErrors.setDescription('Number of frames received with CRC errors.')
adFRPerformDayAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayAbortFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayAbortFrames.setDescription('Number of frames received without proper flag termination.')
adFRPerformDayOctectViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayOctectViolations.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayOctectViolations.setDescription('Number of frames received with a bit count not divisible by eigth.')
adFRPerformDayDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayDiscardFrames.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayDiscardFrames.setDescription('Number of frames discarded by the IQ unit')
adFRPerformDayLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayLengthErrors.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayLengthErrors.setDescription('Number of frames received that is less than 5 bytes or greater than 4500 bytes.')
adFRPerformDayEAViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayEAViolations.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayEAViolations.setDescription('Number of frames received with errors in the EA field of the frame relay header.')
adFRPerformDayEncapsulationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayEncapsulationErrors.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayEncapsulationErrors.setDescription('Number of frames destined for the IQ IP stack with that does not meet the FRF.3 IA.')
adFRPerformDayInactiveDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayInactiveDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayInactiveDLCI.setDescription('Number of frames received while the PVC is in the inactive state.')
adFRPerformDayInvalidDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayInvalidDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayInvalidDLCI.setDescription('Number of frames received with a DLCI value less than 16 or greater than 1007 not including PVC signaling frames.')
adFRPerformDayUnroutable = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayUnroutable.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayUnroutable.setDescription('Number of frames received on a management DLCI destined for the IQ unit and have the wrong IP address.')
adFRPerformDaySignalDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDaySignalDownTime.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDaySignalDownTime.setDescription('Time in seconds the signaling state has been down.')
adFRPerformDaySignalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDaySignalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDaySignalErrors.setDescription('Number of PVC signaling frames received with protocol violations.')
adFRPerformDaySignalTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDaySignalTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDaySignalTimeOut.setDescription('Number of PVC signal timeouts. Either T391 seconds elapsed without receiving a response to a poll or T392 elapsed seconds with receiving a poll.')
adFRPerformDaySignalStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 9, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDaySignalStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDaySignalStateChange.setDescription('Number of state changes for the PVC signaling protocol. This includes transitions from down state to up state and vice versa.')
adFRPerformDayHistoryTimeTable = MibTable((1, 3, 6, 1, 4, 1, 664, 4, 1, 10, 1), )
if mibBuilder.loadTexts: adFRPerformDayHistoryTimeTable.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayHistoryTimeTable.setDescription('n/a.')
adFRPerformDayHistoryTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 4, 1, 10, 1, 1), ).setIndexNames((0, "ADTRAN-FRPerform-MIB", "adFRPerformDayHistoryTimeSlotIndex"))
if mibBuilder.loadTexts: adFRPerformDayHistoryTimeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayHistoryTimeEntry.setDescription('n/a')
adFRPerformDayHistoryTimeSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayHistoryTimeSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayHistoryTimeSlotIndex.setDescription('n/a.')
adFRPerformDayHistorySlotTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayHistorySlotTotalTime.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayHistorySlotTotalTime.setDescription('Time in seconds this day slot represents.')
adFRPerformDayHistoryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 4, 1, 10, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adFRPerformDayHistoryTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: adFRPerformDayHistoryTimeStamp.setDescription('Date the day slot started. Format M-D')
mibBuilder.exportSymbols("ADTRAN-FRPerform-MIB", adFRPerformIntPVCAvgThruputRx=adFRPerformIntPVCAvgThruputRx, adFRPerformIntPortMaxThruputRx=adFRPerformIntPortMaxThruputRx, adFRPerformIntInactiveDLCI=adFRPerformIntInactiveDLCI, adFRPerformIntPVCBurstTx=adFRPerformIntPVCBurstTx, adFRPerformIntDiscardFrames=adFRPerformIntDiscardFrames, adFRPerformDayPvcStatusEntry=adFRPerformDayPvcStatusEntry, adFRPerformDayPVCBurstRx=adFRPerformDayPVCBurstRx, adFRPerformIntPVCFramesTx=adFRPerformIntPVCFramesTx, adFRPerformIntPVCMinDelay=adFRPerformIntPVCMinDelay, adFRPerformIntPVCAvgDelay=adFRPerformIntPVCAvgDelay, adFRPerformDaySignalErrors=adFRPerformDaySignalErrors, adFRPerformDayEAViolations=adFRPerformDayEAViolations, adFRPerformDayPvcSlotIndex=adFRPerformDayPvcSlotIndex, adFRPerformCurrentPvcIfIndex=adFRPerformCurrentPvcIfIndex, adFRPerformDayPortLIOnlyRX=adFRPerformDayPortLIOnlyRX, adFRPerformDayPVCBytesTx=adFRPerformDayPVCBytesTx, adFRPerformCurrentPvcStatus=adFRPerformCurrentPvcStatus, adFRPerformDayPortErrorSlotIndex=adFRPerformDayPortErrorSlotIndex, adFRPerformDaySignalStateChange=adFRPerformDaySignalStateChange, adFRPerformDayHistoryTimeSlotIndex=adFRPerformDayHistoryTimeSlotIndex, adFRPerformDayPVCFecnTx=adFRPerformDayPVCFecnTx, adFRPerformIntPVCBytesRx=adFRPerformIntPVCBytesRx, adFRPerformDayEncapsulationErrors=adFRPerformDayEncapsulationErrors, adFRPerformIntPortErrorEntry=adFRPerformIntPortErrorEntry, adFRPerformDayPVCMaxUtilizationRx=adFRPerformDayPVCMaxUtilizationRx, adFRPerformDayPortErrorTable=adFRPerformDayPortErrorTable, adFRPerformDayPVCDeTx=adFRPerformDayPVCDeTx, adFRPerformDayOctectViolations=adFRPerformDayOctectViolations, adFRPerformDayPVCAvgThruputRx=adFRPerformDayPVCAvgThruputRx, adFRPerformDayUnroutable=adFRPerformDayUnroutable, adFRPerformIntPvcIfIndex=adFRPerformIntPvcIfIndex, adFRPerformIntSignalErrors=adFRPerformIntSignalErrors, adFRPerformIntPortErrorTable=adFRPerformIntPortErrorTable, adFRPerformDayPVCBytesRx=adFRPerformDayPVCBytesRx, adFRPerformIntPortStatusTable=adFRPerformIntPortStatusTable, adFRPerformIntPortLIOnlyRX=adFRPerformIntPortLIOnlyRX, adFRPerformDayPortSlotIndex=adFRPerformDayPortSlotIndex, adFRPerformIntSignalTimeOut=adFRPerformIntSignalTimeOut, adFRPerformDayPortIndex=adFRPerformDayPortIndex, adFRPerformIntEncapsulationErrors=adFRPerformIntEncapsulationErrors, adFRPerformIntPVCMaxUtilizationRx=adFRPerformIntPVCMaxUtilizationRx, adFRPerformIntPVCMaxDelay=adFRPerformIntPVCMaxDelay, adFRPerformDayPortAvgUtilizationTx=adFRPerformDayPortAvgUtilizationTx, adFRPerformDayPortFramesTx=adFRPerformDayPortFramesTx, adFRPerformIntPortError=adFRPerformIntPortError, adFRPerformIntPortMaxUtilizationTx=adFRPerformIntPortMaxUtilizationTx, adFRPerformIntPVCBurstRx=adFRPerformIntPVCBurstRx, adFRPerformDayPVCAvgUtilizationRx=adFRPerformDayPVCAvgUtilizationRx, adFRPerformDaySignalTimeOut=adFRPerformDaySignalTimeOut, adFRPerformIntHistoryTime=adFRPerformIntHistoryTime, adFRPerformIntLengthErrors=adFRPerformIntLengthErrors, adFRPerformDayPortFullStatusRX=adFRPerformDayPortFullStatusRX, adFRPerformIntPortUnavailableTime=adFRPerformIntPortUnavailableTime, adFRPerformDayInvalidDLCI=adFRPerformDayInvalidDLCI, adFRPerformIntPVCBecnRx=adFRPerformIntPVCBecnRx, adFRPerformDayPVCMaxFrameSizeRx=adFRPerformDayPVCMaxFrameSizeRx, adFRPerformCurrentPvcStatusEntry=adFRPerformCurrentPvcStatusEntry, adFRPerformDayPvcIfIndex=adFRPerformDayPvcIfIndex, adFRPerformIntOctectViolations=adFRPerformIntOctectViolations, adFRPerformmg=adFRPerformmg, adFRPerformCurrentPvcStatusIndex=adFRPerformCurrentPvcStatusIndex, adFRPerformIntPortAvgUtilizationRx=adFRPerformIntPortAvgUtilizationRx, adFRPerformIntPVCAvgUtilizationTx=adFRPerformIntPVCAvgUtilizationTx, adFRPerformIntPvcSlotIndex=adFRPerformIntPvcSlotIndex, adFRPerformDayPVCFramesTx=adFRPerformDayPVCFramesTx, adFRPerformIntUnroutable=adFRPerformIntUnroutable, adFRPerformIntPortMaxThruputTx=adFRPerformIntPortMaxThruputTx, adFRPerformIntInvalidDLCI=adFRPerformIntInvalidDLCI, adFRPerformIntCrcErrors=adFRPerformIntCrcErrors, adFRPerformDayPvcStatus=adFRPerformDayPvcStatus, adFRPerformIntPvcStatusEntry=adFRPerformIntPvcStatusEntry, adFRPerformIntPvcIndex=adFRPerformIntPvcIndex, adFRPerformDayPVCDeRx=adFRPerformDayPVCDeRx, adFRPerformDayPortStatusEntry=adFRPerformDayPortStatusEntry, adFRPerformDayPvcStatusTable=adFRPerformDayPvcStatusTable, adFRPerformDayPVCInactiveTime=adFRPerformDayPVCInactiveTime, adFRPerformIntPVCCrRx=adFRPerformIntPVCCrRx, adFRPerformDayInactiveDLCI=adFRPerformDayInactiveDLCI, adFRPerformIntPortLIOnlyTx=adFRPerformIntPortLIOnlyTx, adFRPerformIntPortFullStatusTx=adFRPerformIntPortFullStatusTx, adFRPerformIntPortStatusEntry=adFRPerformIntPortStatusEntry, adFRPerformDayPVCMaxFrameSizeTx=adFRPerformDayPVCMaxFrameSizeTx, adFRPerformIntHistoryTimeTable=adFRPerformIntHistoryTimeTable, adFRPerformIntPortErrorSlotIndex=adFRPerformIntPortErrorSlotIndex, adFRPerformIntEAViolations=adFRPerformIntEAViolations, adFRPerformDayPortAsyncStatusFrame=adFRPerformDayPortAsyncStatusFrame, adFRPerformIntPVCAvgThruputTx=adFRPerformIntPVCAvgThruputTx, adFRPerformCurrentPvcStatistics=adFRPerformCurrentPvcStatistics, adFRPerformDayPVCFecnRx=adFRPerformDayPVCFecnRx, adFRPerformIntHistoryTimeSlotIndex=adFRPerformIntHistoryTimeSlotIndex, adFRPerformDayPortAvgThruputTx=adFRPerformDayPortAvgThruputTx, adFRPerformDayPortStatus=adFRPerformDayPortStatus, adFRPerformIntAbortFrames=adFRPerformIntAbortFrames, adFRPerformDayPVCBecnRx=adFRPerformDayPVCBecnRx, adFRPerformDayPortFramesRx=adFRPerformDayPortFramesRx, adFRPerformIntPortFullStatusRX=adFRPerformIntPortFullStatusRX, adFRPerformDayPVCMinDelay=adFRPerformDayPVCMinDelay, adFRPerformIntPVCMaxFrameSizeRx=adFRPerformIntPVCMaxFrameSizeRx, adFRPerformIntPVCBytesTx=adFRPerformIntPVCBytesTx, adFRPerformDayPVCFramesRx=adFRPerformDayPVCFramesRx, adFRPerformDayPortMaxUtilizationRx=adFRPerformDayPortMaxUtilizationRx, adFRPerformIntPvcStatusTable=adFRPerformIntPvcStatusTable, adFRPerformIntPVCMinFrameSizeRx=adFRPerformIntPVCMinFrameSizeRx, adFRPerformDayPVCTimeInDBU=adFRPerformDayPVCTimeInDBU, adFRPerformDayPVCAvgThruputTx=adFRPerformDayPVCAvgThruputTx, adFRPerformDayPVCRemoteLostFrames=adFRPerformDayPVCRemoteLostFrames, adFRPerformIntPVCAvgUtilizationRx=adFRPerformIntPVCAvgUtilizationRx, adFRPerformDayPVCMinFrameSizeRx=adFRPerformDayPVCMinFrameSizeRx, adFRPerformIntPVCBecnTx=adFRPerformIntPVCBecnTx, adFRPerformIntPVCStateChange=adFRPerformIntPVCStateChange, adFRPerformDayPortErrorEntry=adFRPerformDayPortErrorEntry, adFRPerformDayPortStatusTable=adFRPerformDayPortStatusTable, adFRPerformIntPVCAvgFrameSizeRx=adFRPerformIntPVCAvgFrameSizeRx, adFRPerformIntHistorySlotTotalTime=adFRPerformIntHistorySlotTotalTime, adFRPerformDayPVCStateChange=adFRPerformDayPVCStateChange, adFRPerformIntPVCCrTx=adFRPerformIntPVCCrTx, adFRPerformDayPvcIndex=adFRPerformDayPvcIndex, adFRPerformCurrentPvcStatusTable=adFRPerformCurrentPvcStatusTable, adFRPerformDayCrcErrors=adFRPerformDayCrcErrors, adFRPerformDayPortError=adFRPerformDayPortError, adFRPerformIntPVCFramesRx=adFRPerformIntPVCFramesRx, adFRPerformIntPVCMaxThruputRx=adFRPerformIntPVCMaxThruputRx, adFRPerformIntPortFramesRx=adFRPerformIntPortFramesRx, adFRPerformDayHistoryTimeTable=adFRPerformDayHistoryTimeTable, adFRPerformIntPVCAvgFrameSizeTx=adFRPerformIntPVCAvgFrameSizeTx, adFRPerformIntPVCInactiveTime=adFRPerformIntPVCInactiveTime, adFRPerformCurrentIntTimeRemaining=adFRPerformCurrentIntTimeRemaining, adFRPerformIntPvcStatus=adFRPerformIntPvcStatus, adFRPerformIntHistoryTimeStamp=adFRPerformIntHistoryTimeStamp, adFRPerformDayHistoryTimeEntry=adFRPerformDayHistoryTimeEntry, adFRPerformIntPVCFecnRx=adFRPerformIntPVCFecnRx, adFRPerformDayPVCAvgDelay=adFRPerformDayPVCAvgDelay, adFRPerformCompletedInts=adFRPerformCompletedInts, adFRPerformIntPortAsyncStatusFrame=adFRPerformIntPortAsyncStatusFrame, adFRPerformDayPortBytesRx=adFRPerformDayPortBytesRx, adFRPerformIntPortBytesTx=adFRPerformIntPortBytesTx, adFRPerformDayPVCLostFrames=adFRPerformDayPVCLostFrames, adFRPerformDayPVCMaxThruputRx=adFRPerformDayPVCMaxThruputRx, adFRPerformIntPortSlotIndex=adFRPerformIntPortSlotIndex, adFRPerformIntPVCMaxFrameSizeTx=adFRPerformIntPVCMaxFrameSizeTx, adFRPerformIntPortAvgThruputTx=adFRPerformIntPortAvgThruputTx, adFRPerformDayPortUnavailableTime=adFRPerformDayPortUnavailableTime, adFRPerformDayHistoryTime=adFRPerformDayHistoryTime, adFRPerformDayPVCAvgFrameSizeTx=adFRPerformDayPVCAvgFrameSizeTx, adFRPerformDayPVCCrRx=adFRPerformDayPVCCrRx, adFRPerformIntPVCDeTx=adFRPerformIntPVCDeTx, adFRPerformIntPVCLostFrames=adFRPerformIntPVCLostFrames, adFRPerformIntPVCMaxUtilizationTx=adFRPerformIntPVCMaxUtilizationTx, adFRPerformDayLengthErrors=adFRPerformDayLengthErrors, adFRPerformIntSignalDownTime=adFRPerformIntSignalDownTime, adFRPerformDayPVCAvgFrameSizeRx=adFRPerformDayPVCAvgFrameSizeRx, adPerform=adPerform, adFRPerformDaySignalDownTime=adFRPerformDaySignalDownTime, adFRPerformIntPortIndex=adFRPerformIntPortIndex, adFRPerformIntPortFramesTx=adFRPerformIntPortFramesTx, adFRPerformDayHistoryTimeStamp=adFRPerformDayHistoryTimeStamp, adFRPerformDayPVCBecnTx=adFRPerformDayPVCBecnTx, adFRPerformDayPVCMinFrameSizeTx=adFRPerformDayPVCMinFrameSizeTx, adFRPerformIntPortBytesRx=adFRPerformIntPortBytesRx, adFRPerformCompletedDays=adFRPerformCompletedDays, adFRPerformIntPortAvgThruputRx=adFRPerformIntPortAvgThruputRx, adFRPerformIntIfIndex=adFRPerformIntIfIndex, adFRPerformDayPVCBurstTx=adFRPerformDayPVCBurstTx, adFRPerformIntPVCMaxThruputTx=adFRPerformIntPVCMaxThruputTx, adFRPerformIntHistoryTimeEntry=adFRPerformIntHistoryTimeEntry, adFRPerformDayPVCCrTx=adFRPerformDayPVCCrTx, adFRPerformDayPVCAvgUtilizationTx=adFRPerformDayPVCAvgUtilizationTx, adFRPerformDayIfIndex=adFRPerformDayIfIndex, adFRPerformIntPortStatus=adFRPerformIntPortStatus, adFRPerformDayPortBytesTx=adFRPerformDayPortBytesTx, adFRPerformDayPVCMaxThruputTx=adFRPerformDayPVCMaxThruputTx, adFRPerformDayPortMaxThruputRx=adFRPerformDayPortMaxThruputRx, adFRPerformDayHistorySlotTotalTime=adFRPerformDayHistorySlotTotalTime, adFRPerformIntSignalStateChange=adFRPerformIntSignalStateChange, adFRPerformIntPVCRemoteLostFrames=adFRPerformIntPVCRemoteLostFrames, adFRPerformIntPortAvgUtilizationTx=adFRPerformIntPortAvgUtilizationTx, adFRPerformIntPortMaxUtilizationRx=adFRPerformIntPortMaxUtilizationRx, adFRPerformDayAbortFrames=adFRPerformDayAbortFrames, adFRPerformDayPortMaxThruputTx=adFRPerformDayPortMaxThruputTx, adFRPerformIntPVCMinFrameSizeTx=adFRPerformIntPVCMinFrameSizeTx, adFRPerformCurrentPvcState=adFRPerformCurrentPvcState, adFRPerformIntPVCFecnTx=adFRPerformIntPVCFecnTx, adFRPerformDayPortMaxUtilizationTx=adFRPerformDayPortMaxUtilizationTx, adFRPerformDayPortAvgThruputRx=adFRPerformDayPortAvgThruputRx, adFRPerformIntPVCDeRx=adFRPerformIntPVCDeRx, adFRPerformDayPVCMaxDelay=adFRPerformDayPVCMaxDelay, adFRPerformDayDiscardFrames=adFRPerformDayDiscardFrames, adFRPerformHistoryIntLength=adFRPerformHistoryIntLength, adFRPerformDayPortAvgUtilizationRx=adFRPerformDayPortAvgUtilizationRx, adFRPerformDayPortFullStatusTx=adFRPerformDayPortFullStatusTx, adFRPerformDayPortLIOnlyTx=adFRPerformDayPortLIOnlyTx, adFRPerformIntPVCTimeInDBU=adFRPerformIntPVCTimeInDBU, adFRPerformDayPVCMaxUtilizationTx=adFRPerformDayPVCMaxUtilizationTx, adFRPerformHistoryControl=adFRPerformHistoryControl)
