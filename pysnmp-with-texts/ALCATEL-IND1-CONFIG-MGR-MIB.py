#
# PySNMP MIB module ALCATEL-IND1-CONFIG-MGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-CONFIG-MGR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:17:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1Confmgr, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Confmgr")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter64, Integer32, iso, Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, Bits, Counter32, NotificationType, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "Integer32", "iso", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "Bits", "Counter32", "NotificationType", "Gauge32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
alcatelIND1ConfigMgrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1))
alcatelIND1ConfigMgrMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): For the Birds Of Prey Product Line Configuration Manager Subsystem. The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1ConfigMgrMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1))
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBObjects.setDescription('Branch For Configuration Manager Subsystem Managed Objects.')
alcatelIND1ConfigMgrMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2))
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBConformance.setDescription('Branch For Configuration Manager Subsystem Conformance Information.')
alcatelIND1ConfigMgrMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBGroups.setDescription('Branch For Configuration Manager Subsystem Units Of Conformance.')
alcatelIND1ConfigMgrMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBCompliances.setDescription('Branch For Configuration Manager Subsystem Compliance Statements.')
configManager = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1))
configFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFileName.setStatus('current')
if mibBuilder.loadTexts: configFileName.setDescription('The name of the configuration file to be read by the device. The file specified should be present on the device.')
configFileAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("checkSyntaxOnly", 2), ("apply", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFileAction.setStatus('current')
if mibBuilder.loadTexts: configFileAction.setDescription('Triggers application of the configuration file specified by the configInputFileName. A value of checkSyntax causes configInputFile to be checked for syntax, with no changes to device configuration. A value of checkSyntaxAndApply causes the configInputFile to be applied to the device configuration.A value of none indicates no action has been triggered.')
configErrorFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configErrorFileName.setStatus('current')
if mibBuilder.loadTexts: configErrorFileName.setDescription('The name of the file containing the error messages generated by the device during file configuration.')
configFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noneAvail", 1), ("inProgress", 2), ("completeNoErrors", 3), ("completeErrors", 4))).clone('noneAvail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: configFileStatus.setStatus('current')
if mibBuilder.loadTexts: configFileStatus.setDescription('Status of most recent application of configuration file to the device.')
configFileMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("verbose", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFileMode.setStatus('current')
if mibBuilder.loadTexts: configFileMode.setDescription('The verbose mode displays all configuration commands and errors when the file is applied on the console screen. Ignored unless set from command line interface.')
configTimerFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTimerFileName.setStatus('current')
if mibBuilder.loadTexts: configTimerFileName.setDescription('The name of the configuration file to be read later by the device.')
configTimerFileTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTimerFileTime.setStatus('current')
if mibBuilder.loadTexts: configTimerFileTime.setDescription("The local time when the configuration file will be read by the device. This object is only set if the configInputFile must be applied at a later time. The following formats are valid: MM/DD/YYYY hh:mm MM/DD/YY hh:mm MM/DD hh:mm - uses current year if after current date and time, next year otherwise. hh:mm - uses today's date if later than current time, tommorow's date otherwise. where YY - year (0-38,99) MM - month (1-12) DD - day (1-31) hh - hour (0-23) mm - minute (0-59)")
configTimerFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("pending", 2), ("inProgress", 3))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: configTimerFileStatus.setStatus('current')
if mibBuilder.loadTexts: configTimerFileStatus.setDescription('The current status of the ASCII configuration timer.')
configTimerClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTimerClear.setStatus('current')
if mibBuilder.loadTexts: configTimerClear.setDescription('A set of this object causes the ASCII configuration timer to be cleared.')
configSnapshotFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotFileName.setStatus('current')
if mibBuilder.loadTexts: configSnapshotFileName.setDescription('The name of the configuration snap-shot file to be generated by the device.')
configSnapshotAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAction.setStatus('current')
if mibBuilder.loadTexts: configSnapshotAction.setDescription('A set of this object causes the configuration snap-shot to be generated by the device.')
configSnapshotAllSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAllSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotAllSelect.setDescription('A set of this object causes all application configuration data to be included in the snap-shot file generated by the device.')
configSnapshotVlanSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotVlanSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotVlanSelect.setDescription('A set of this object causes Vlan configuration data to be included in the snap-shot file generated by the device.')
configSnapshotSpanningTreeSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSpanningTreeSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotSpanningTreeSelect.setDescription('A set of this object causes Spanning Tree configuration data to be included in the snap-shot file generated by the device.')
configSnapshotQOSSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotQOSSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotQOSSelect.setDescription('A set of this object causes QOS configuration data to be included in the snap-shot file generated by the the device.')
configSnapshotIPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotIPSelect.setDescription('A set of this object causes IP configuration data to be included in the snap-shot file generated by the the device.')
configSnapshotIPXSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPXSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotIPXSelect.setDescription('A set of this object causes IPX configuration data to be included in the snap-shot file generated by the the device.')
configSnapshotIPMSSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPMSSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotIPMSSelect.setDescription('A set of this object causes IPMS configuration data to be included in the snap-shot file generated by the the device.')
configSnapshotAAASelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAAASelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotAAASelect.setDescription('A set of this object causes AAA configuration data to be included in the snap-shot file generated by the the device.')
configSnapshotSNMPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSNMPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotSNMPSelect.setDescription('A set of this object causes SNMP configuration data to be included in the snap-shot file generated by the the device.')
configSnapshot8021QSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshot8021QSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshot8021QSelect.setDescription('A set of this object causes 802.1Q configuration data to be included in the snap-shot file generated by the the device.')
configSnapshotLinkAggregateSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotLinkAggregateSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotLinkAggregateSelect.setDescription('A set of this object causes link aggregation configuration data to be included in the snap-shot file generated by the device.')
configSnapshotPortMirrorSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPortMirrorSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotPortMirrorSelect.setDescription('A set of this object causes port mirroring configuration data to be included in the snap-shot file generated by the device.')
configSnapshotXIPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotXIPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotXIPSelect.setDescription('A set of this object causes proprietary inter-switch protocol configuration data to be included in the snap-shot file generated by the device.')
configSnapshotHealthMonitorSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotHealthMonitorSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotHealthMonitorSelect.setDescription('A set of this object causes health monitoring configuration data to be included in the snap-shot file generated by the device.')
configSnapshotBootPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotBootPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotBootPSelect.setDescription('A set of this object causes bootp configuration data to be included in the snap-shot file generated by the device.')
configSnapshotBridgeSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotBridgeSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotBridgeSelect.setDescription('A set of this object causes source-learning configuration data to be included in the snap-shot file generated by the device.')
configSnapshotChassisSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotChassisSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotChassisSelect.setDescription('A set of this object causes the chassis configuration data to be included in the snap-shot file generated by the device.')
configSnapshotInterfaceSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotInterfaceSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotInterfaceSelect.setDescription('A set of this object causes ethernet interface configuration data to be included in the snap-shot file generated by the device.')
configSnapshotPolicySelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPolicySelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotPolicySelect.setDescription('A set of this object causes policy manager configuration data to be included in the snap-shot file generated by the device.')
configSnapshotSessionSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSessionSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotSessionSelect.setDescription('A set of this object causes the user-session configuration data to be included in the snap-shot file generated by the device.')
configSnapshotServerLoadBalanceSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotServerLoadBalanceSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotServerLoadBalanceSelect.setDescription('A set of this object causes server load balancing configuration data to be included in the snap-shot file generated by the device.')
configSnapshotSystemServiceSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSystemServiceSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotSystemServiceSelect.setDescription('A set of this object causes system services configuration data to be included in the snap-shot file generated by the device.')
configSnapshotVRRPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotVRRPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotVRRPSelect.setDescription('A set of this object causes VRRP configuration data to be included in the snap-shot file generated by the device.')
configSnapshotWebSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotWebSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotWebSelect.setDescription('A set of this object causes web manager configuration data to be included in the snap-shot file generated by the device.')
configSnapshotRIPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotRIPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotRIPSelect.setDescription('A set of this object causes RIP configuration data to be included in the snap-shot file generated by the device.')
configSnapshotOSPFSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotOSPFSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotOSPFSelect.setDescription('A set of this object causes OSPF configuration data to be included in the snap-shot file generated by the device.')
configSnapshotBGPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotBGPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotBGPSelect.setDescription('A set of this object causes BGP configuration data to be included in the snap-shot file generated by the device.')
configSnapshotIPRMSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPRMSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotIPRMSelect.setDescription('A set of this object causes IPRM routing configuration data to be included in the snap-shot file generated by the device.')
configSnapshotIPMRSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPMRSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotIPMRSelect.setDescription('A set of this object causes IP multicast routing configuration data to be included in the snap-shot file generated by the device.')
configSnapshotModuleSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotModuleSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotModuleSelect.setDescription('A set of this object causes module configuration data to be included in the snap-shot file generated by the device.')
configTechSupportLogAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("notSiginificant", 0), ("techSupportBasic", 1), ("techSupportL2", 2), ("techSupportL3", 3), ("techSupportL3Rip", 4), ("techSupportL3Ipx", 5), ("techSupportL3Ospf", 6), ("techSupportL3Bgp", 7), ("techSupportL3Pimsm", 8), ("techSupportL3Mroute", 9), ("techSupportL3Dvmrp", 10), ("techSupportL3IPv6", 11), ("techSupportL3RIPng", 12), ("techSupportL3OSPF3", 13), ("techSupportL3Isis", 14), ("techSupportL3Pim6", 15), ("techSupportL3IPsec", 16), ("techSupportL3Bfd", 17))).clone('techSupportBasic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTechSupportLogAction.setStatus('current')
if mibBuilder.loadTexts: configTechSupportLogAction.setDescription('A set of this object causes a tech_support.log file to be created containing switch information useful to a technical support group.')
configWriteMemory = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configWriteMemory.setStatus('current')
if mibBuilder.loadTexts: configWriteMemory.setDescription('A set of this object causes the entire switch snap-shot configuration to be stored in the boot.cfg file in the working directory.')
configErrorFileMaximum = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configErrorFileMaximum.setStatus('current')
if mibBuilder.loadTexts: configErrorFileMaximum.setDescription('The maximum number of error files which may be present on a switch. Each time a new error file is created, all but the newest configErrorFileMaxNum error files are deleted.')
configChangeStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("identical", 1), ("different", 2))).clone('identical')).setMaxAccess("readonly")
if mibBuilder.loadTexts: configChangeStatus.setStatus('current')
if mibBuilder.loadTexts: configChangeStatus.setDescription('The current state of the running configuration with respect to the saved configuration.')
configSnapshotRDPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotRDPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotRDPSelect.setDescription('A set of this object causes RDP configuration data to be included in the snap-shot file generated by the device.')
configSnapshotIPv6Select = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPv6Select.setStatus('current')
if mibBuilder.loadTexts: configSnapshotIPv6Select.setDescription('A set of this object causes IPv6 configuration data to be included in the snap-shot file generated by the device.')
configSnapshotRIPngSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotRIPngSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotRIPngSelect.setDescription('A set of this object causes RIPng configuration data to be included in the snap-shot file generated by the device.')
configSnapshotAtmSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotAtmSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotAtmSelect.setDescription('A set of this object causes ATM configuration data to be included in the snap-shot file generated by the device. NOT SUPPORTED.')
configSnapshotSonetSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSonetSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotSonetSelect.setDescription('A set of this object causes Sonet configuration data to be included in the snap-shot file generated by the device. NOT SUPPORTED.')
configSnapshotNTPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotNTPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotNTPSelect.setDescription('A set of this object causes NTP configuration data to be included in the snap-shot file generated by the device.')
configSnapshotPortMappingSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotPortMappingSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotPortMappingSelect.setDescription('A set of this object causes Port Mapping configuration data to be included in the snap-shot file generated by the device.')
configSnapshotOSPF3Select = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotOSPF3Select.setStatus('current')
if mibBuilder.loadTexts: configSnapshotOSPF3Select.setDescription('A set of this object causes OSPF3 configuration data to be included in the snap-shot file generated by the device.')
configWriteMemoryStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noneAvail", 1), ("inProgress", 2), ("completeNoErrors", 3), ("completeErrors", 4))).clone('noneAvail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: configWriteMemoryStatus.setStatus('current')
if mibBuilder.loadTexts: configWriteMemoryStatus.setDescription('Status of most recent wwrite memory action.')
configSnapshotStackSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotStackSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotStackSelect.setDescription('A set of this object causes STack Manager configuration data to be included in the snap-shot file generated by the device.')
configSnapshotISISSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotISISSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotISISSelect.setDescription('A set of this object causes ISIS configuration data to be included in the snap-shot file generated by the device.')
configSnapshotEOAMSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotEOAMSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotEOAMSelect.setDescription('A set of this object causes Ethernet OAM configuration data to be included in the snap-shot file generated by the device.')
configSnapshotUDLDSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotUDLDSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotUDLDSelect.setDescription('A set of this object causes UDLD configuration data to be included in the snap-shot file generated by the device.')
configSnapshotNETSECSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotNETSECSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotNETSECSelect.setDescription('A set of this object causes NETSEC configuration data to be included in the snap-shot file generated by the device.')
configSnapshotIPsecSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotIPsecSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotIPsecSelect.setDescription('A set of this object causes IP Security configuration data to be included in the snap-shot file generated by the device.')
configSnapshotBFDSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotBFDSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotBFDSelect.setDescription('A set of this object causes BFD configuration data to be included in the snap-shot file generated by the device.')
configSnapshotErpSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotErpSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotErpSelect.setDescription('A set of this object causes ERP configuration data to be included in the snap-shot file generated by the device.')
configSnapshotMPLSSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotMPLSSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotMPLSSelect.setDescription('A set of this object causes MPLS configuration data to be included in the snap-shot file generated by the device.')
configSnapshotEFMOAMSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotEFMOAMSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotEFMOAMSelect.setDescription('A set of this object causes EFMOAM configuration data to be included in the snap-shot file generated by the device.')
configSnapshotLBDSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotLBDSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotLBDSelect.setDescription('A set of this object causes Loop Back Detection configuration data to be included in the snap-shot file generated by the device.')
configSnapshotSAASelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotSAASelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotSAASelect.setDescription('A set of this object causes SAA configuration data to be included in the snap-shot file generated by the device.')
configSnapshotDhcpSrvSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotDhcpSrvSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotDhcpSrvSelect.setDescription('A set of this object causes DHCP Server configuration data to be included in the snap-shot file generated by the device.')
configSnapshotLLDPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotLLDPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotLLDPSelect.setDescription('A set of this object causes LLDP configuration data to be included in the snap-shot file generated by the device.')
configSnapshotLFPSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotLFPSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotLFPSelect.setDescription('A set of this object causes LFP configuration data to be included in the snap-shot file generated by the device.')
configSnapshotDHLSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotDHLSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotDHLSelect.setDescription('A set of this object causes DHL configuration data to be included in the snap-shot file generated by the device.')
configSnapshotWccpSelect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 1, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSnapshotWccpSelect.setStatus('current')
if mibBuilder.loadTexts: configSnapshotWccpSelect.setDescription('A set of this object causes WCCP configuration data to be included in the snap-shot file generated by the device.')
alcatelIND1ConfigMgrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configFileGroup"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configTimerFileGroup"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotGroup"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configTechSupportLogGroup"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configWriteMemoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1ConfigMgrMIBCompliance = alcatelIND1ConfigMgrMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ConfigMgrMIBCompliance.setDescription('Compliance statement for Configuration Manager Subsystem.')
configFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configFileName"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configFileAction"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configErrorFileName"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configFileStatus"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configFileMode"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configErrorFileMaximum"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configChangeStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configFileGroup = configFileGroup.setStatus('current')
if mibBuilder.loadTexts: configFileGroup.setDescription('Collection of objects for file configuration.')
configTimerFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configTimerFileName"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configTimerFileTime"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configTimerFileStatus"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configTimerClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configTimerFileGroup = configTimerFileGroup.setStatus('current')
if mibBuilder.loadTexts: configTimerFileGroup.setDescription('Collection of objects for timer file configuration.')
configSnapshotGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAllSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotVlanSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSpanningTreeSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotQOSSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPXSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPMSSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAAASelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSNMPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshot8021QSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotLinkAggregateSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPortMirrorSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotXIPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotHealthMonitorSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotBootPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotBridgeSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotChassisSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotInterfaceSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPolicySelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSessionSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotServerLoadBalanceSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSystemServiceSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotVRRPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotWebSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotRIPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotOSPFSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotBGPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPRMSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPMRSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotModuleSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotRDPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPv6Select"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotOSPF3Select"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotStackSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configWriteMemoryStatus"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotISISSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotEOAMSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotUDLDSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotNETSECSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotIPsecSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotBFDSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotErpSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotEFMOAMSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotLBDSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSAASelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotLLDPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotLFPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotDHLSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotWccpSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotFileName"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAction"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotAtmSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotDhcpSrvSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotMPLSSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotNTPSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotPortMappingSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotRIPngSelect"), ("ALCATEL-IND1-CONFIG-MGR-MIB", "configSnapshotSonetSelect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configSnapshotGroup = configSnapshotGroup.setStatus('current')
if mibBuilder.loadTexts: configSnapshotGroup.setDescription('Collection of objects for snapshot configuration.')
configTechSupportLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configTechSupportLogAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configTechSupportLogGroup = configTechSupportLogGroup.setStatus('current')
if mibBuilder.loadTexts: configTechSupportLogGroup.setDescription('Collection of objects for technical support log file.')
configWriteMemoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 11, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-CONFIG-MGR-MIB", "configWriteMemory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configWriteMemoryGroup = configWriteMemoryGroup.setStatus('current')
if mibBuilder.loadTexts: configWriteMemoryGroup.setDescription('Collection of objects for write memory.')
mibBuilder.exportSymbols("ALCATEL-IND1-CONFIG-MGR-MIB", configSnapshotIPv6Select=configSnapshotIPv6Select, configTimerClear=configTimerClear, configSnapshotSAASelect=configSnapshotSAASelect, configSnapshotServerLoadBalanceSelect=configSnapshotServerLoadBalanceSelect, configSnapshotInterfaceSelect=configSnapshotInterfaceSelect, PYSNMP_MODULE_ID=alcatelIND1ConfigMgrMIB, configSnapshotIPRMSelect=configSnapshotIPRMSelect, alcatelIND1ConfigMgrMIBCompliance=alcatelIND1ConfigMgrMIBCompliance, configSnapshotNETSECSelect=configSnapshotNETSECSelect, configSnapshotSNMPSelect=configSnapshotSNMPSelect, configSnapshotOSPFSelect=configSnapshotOSPFSelect, configSnapshotRDPSelect=configSnapshotRDPSelect, configSnapshotErpSelect=configSnapshotErpSelect, configFileStatus=configFileStatus, configWriteMemoryStatus=configWriteMemoryStatus, configSnapshotVRRPSelect=configSnapshotVRRPSelect, configSnapshotSonetSelect=configSnapshotSonetSelect, configFileGroup=configFileGroup, configSnapshotEFMOAMSelect=configSnapshotEFMOAMSelect, alcatelIND1ConfigMgrMIBGroups=alcatelIND1ConfigMgrMIBGroups, configSnapshotBGPSelect=configSnapshotBGPSelect, configWriteMemory=configWriteMemory, configSnapshotIPMSSelect=configSnapshotIPMSSelect, configTimerFileName=configTimerFileName, configSnapshotUDLDSelect=configSnapshotUDLDSelect, configSnapshotRIPngSelect=configSnapshotRIPngSelect, configSnapshotModuleSelect=configSnapshotModuleSelect, configTechSupportLogAction=configTechSupportLogAction, configSnapshotFileName=configSnapshotFileName, configSnapshotSystemServiceSelect=configSnapshotSystemServiceSelect, configSnapshotPolicySelect=configSnapshotPolicySelect, configSnapshotPortMirrorSelect=configSnapshotPortMirrorSelect, configFileAction=configFileAction, configSnapshotStackSelect=configSnapshotStackSelect, configSnapshotWebSelect=configSnapshotWebSelect, configTechSupportLogGroup=configTechSupportLogGroup, alcatelIND1ConfigMgrMIBConformance=alcatelIND1ConfigMgrMIBConformance, configSnapshotOSPF3Select=configSnapshotOSPF3Select, configSnapshotNTPSelect=configSnapshotNTPSelect, configSnapshotIPMRSelect=configSnapshotIPMRSelect, configSnapshotChassisSelect=configSnapshotChassisSelect, configSnapshotISISSelect=configSnapshotISISSelect, configFileName=configFileName, configSnapshotDHLSelect=configSnapshotDHLSelect, configSnapshotLFPSelect=configSnapshotLFPSelect, configSnapshotHealthMonitorSelect=configSnapshotHealthMonitorSelect, configTimerFileStatus=configTimerFileStatus, configSnapshotBridgeSelect=configSnapshotBridgeSelect, configSnapshotBFDSelect=configSnapshotBFDSelect, configSnapshotEOAMSelect=configSnapshotEOAMSelect, configTimerFileGroup=configTimerFileGroup, configSnapshotIPsecSelect=configSnapshotIPsecSelect, alcatelIND1ConfigMgrMIBObjects=alcatelIND1ConfigMgrMIBObjects, configSnapshotBootPSelect=configSnapshotBootPSelect, configSnapshotLBDSelect=configSnapshotLBDSelect, alcatelIND1ConfigMgrMIBCompliances=alcatelIND1ConfigMgrMIBCompliances, configErrorFileName=configErrorFileName, configSnapshotLinkAggregateSelect=configSnapshotLinkAggregateSelect, configSnapshotMPLSSelect=configSnapshotMPLSSelect, configSnapshotXIPSelect=configSnapshotXIPSelect, configSnapshotSpanningTreeSelect=configSnapshotSpanningTreeSelect, configSnapshotWccpSelect=configSnapshotWccpSelect, configSnapshotIPXSelect=configSnapshotIPXSelect, configChangeStatus=configChangeStatus, configSnapshotAction=configSnapshotAction, configSnapshotPortMappingSelect=configSnapshotPortMappingSelect, configSnapshotDhcpSrvSelect=configSnapshotDhcpSrvSelect, configSnapshotVlanSelect=configSnapshotVlanSelect, configSnapshotRIPSelect=configSnapshotRIPSelect, configFileMode=configFileMode, configSnapshotLLDPSelect=configSnapshotLLDPSelect, configSnapshotIPSelect=configSnapshotIPSelect, configSnapshotGroup=configSnapshotGroup, configSnapshotSessionSelect=configSnapshotSessionSelect, configTimerFileTime=configTimerFileTime, configSnapshotAllSelect=configSnapshotAllSelect, configManager=configManager, configSnapshot8021QSelect=configSnapshot8021QSelect, alcatelIND1ConfigMgrMIB=alcatelIND1ConfigMgrMIB, configErrorFileMaximum=configErrorFileMaximum, configSnapshotQOSSelect=configSnapshotQOSSelect, configSnapshotAAASelect=configSnapshotAAASelect, configSnapshotAtmSelect=configSnapshotAtmSelect, configWriteMemoryGroup=configWriteMemoryGroup)
