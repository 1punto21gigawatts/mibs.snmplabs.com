#
# PySNMP MIB module PERLE-MCR-MGT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PERLE-MCR-MGT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:40:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
SnmpEngineID, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpEngineID")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Gauge32, ObjectIdentity, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, ModuleIdentity, Unsigned32, Counter64, MibIdentifier, TimeTicks, enterprises, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "ObjectIdentity", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "ModuleIdentity", "Unsigned32", "Counter64", "MibIdentifier", "TimeTicks", "enterprises", "IpAddress")
DisplayString, MacAddress, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "DateAndTime", "TextualConvention")
mcrMGTMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1))
mcrMGTMIB.setRevisions(('2014-09-03 00:00', '2013-03-02 00:00', '2012-11-15 00:00', '2012-02-01 00:00', '2011-01-20 00:00', '2011-01-12 00:00', '2010-09-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mcrMGTMIB.setRevisionsDescriptions(('Added support for SGMII mode on the CM-1110 Module and SNTP authentication', 'Added support for ex-1CM, CM-4GPT and CM-10GT Media Converter Modules', 'Added support for CM-10G Media Converter Modules', 'Added support for PerleView features, alarm/warning table, port status table and tftp file transfer', 'Added support for advanced switch features and dual-fiber modules', 'Added support for 2-slot chassis', 'Initial Release',))
if mibBuilder.loadTexts: mcrMGTMIB.setLastUpdated('201409030000Z')
if mibBuilder.loadTexts: mcrMGTMIB.setOrganization('Perle Systems Limited')
if mibBuilder.loadTexts: mcrMGTMIB.setContactInfo('Postal: Perle Systems Limited 60 Renfrew Drive Markham, Ontario Canada L3R 0E1 http://www.perle.com/')
if mibBuilder.loadTexts: mcrMGTMIB.setDescription('The private MIB module for the Perle Managed Media Converters')
perle = MibIdentifier((1, 3, 6, 1, 4, 1, 1966))
productId = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 20))
mediaConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 20, 1))
mcrMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 20, 1, 1))
productMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21))
mediaconverterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1))
mcrMGTMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0))
mcrMGTMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1))
mcrMGTMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 2))
mcrChassisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1))
mcrManagementGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2))
class YesNoValue(TextualConvention, Integer32):
    description = 'Represents a YES or NO value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1))
    namedValues = NamedValues(("notApplicable", -1), ("no", 0), ("yes", 1))

class OnOffValue(TextualConvention, Integer32):
    description = 'Represents an ON or OFF value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1))
    namedValues = NamedValues(("notApplicable", -1), ("off", 0), ("on", 1))

class EnableDisableValue(TextualConvention, Integer32):
    description = 'Represents an ON or OFF value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1))
    namedValues = NamedValues(("notApplicable", -1), ("disable", 0), ("enable", 1))

class Ipv4v6Address(TextualConvention, OctetString):
    description = 'An IPv4 or IPv6 address'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class GenericTableIndex(TextualConvention, Unsigned32):
    description = 'An arbitrary value that uniquely identifies the entity. The value should be a small, positive integer. Index values for different entities are not necessarily contiguous.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class SlotNumber(TextualConvention, Unsigned32):
    description = 'Chassis slot number. Valid values are 1 to the highest slot number the chassis supports. For example a MCR-1900 chassis the valid slot numbers are 1 to 19'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class ContainerStatus(TextualConvention, Integer32):
    description = 'When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module. 6-Indicates that the changes in the container folder are to be discarded.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))
    namedValues = NamedValues(("active", 1), ("modified", 2), ("applyChanges", 4), ("discardChanges", 6))

class AlertSeverityLevel(TextualConvention, Integer32):
    description = 'The alert severity level of an event.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("systemLevelFault", 0), ("moduleLevelFault", 1), ("persistantError", 2), ("oneTimeError", 3), ("significantEvent", 4), ("normalOperation", 5))

mcrChassisTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: mcrChassisTable.setStatus('current')
if mibBuilder.loadTexts: mcrChassisTable.setDescription('Table of chassis diagnostic type information.')
mcrChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrChassisEntry.setStatus('current')
if mibBuilder.loadTexts: mcrChassisEntry.setDescription('Entries of the table, each relating to a separate chassis.')
mcrChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcrChassisIndex.setStatus('current')
if mibBuilder.loadTexts: mcrChassisIndex.setDescription('This object identifies the chassis number.')
chassisModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisModelName.setStatus('current')
if mibBuilder.loadTexts: chassisModelName.setDescription('This object identifies the name of the chassis model. For the 2-slot chassis, this is the product model.')
chassisModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisModelDesc.setStatus('current')
if mibBuilder.loadTexts: chassisModelDesc.setDescription('This object identifies a static description of the chassis.')
chassisSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisSerialNumber.setStatus('current')
if mibBuilder.loadTexts: chassisSerialNumber.setDescription("This object identifies the chassis serial number. For the 2-slot chassis, this is writeable (and user-defined). For other chassis, this is read-only (and reflects the chassis' actual serial number).")
chassisBootloaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisBootloaderVersion.setStatus('current')
if mibBuilder.loadTexts: chassisBootloaderVersion.setDescription('This object identifies the chassis bootloader version. (Not applicable to 2-slot chassis.)')
chassisFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: chassisFirmwareVersion.setDescription('This object identifies the chassis firmware version. (Not applicable to 2-slot chassis.)')
chassisOutStandWarnAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisOutStandWarnAlarms.setStatus('current')
if mibBuilder.loadTexts: chassisOutStandWarnAlarms.setDescription('This object identifies the number of outstanding warnings and alarms for this chassis. If this value is not zero then user intervention is needed to resolve the outstanding warnings and alarms. (Not applicable to 2-slot chassis.)')
chassisDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisDiagStatus.setStatus('current')
if mibBuilder.loadTexts: chassisDiagStatus.setDescription('This object identifies the chassis self-test diagnostics result. It will return zero if it passed and non-zero error code if it failed. The following are possible non-zero error codes: 1 - Firmware download required 2 - Temperature sensor not functional (Not applicable to 2-slot chassis.)')
chassisTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperature.setStatus('current')
if mibBuilder.loadTexts: chassisTemperature.setDescription('This object identifies the current temperature of the chassis. The temperature returned will be either Celsius or Fahrenheit based on your current regional display settings. If the temperature returned is -1 then a problem with the temperature sensor has occurred and the current temperature is unknown. (Not applicable to 2-slot chassis.)')
chassisCfgHighTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisCfgHighTempThreshold.setStatus('current')
if mibBuilder.loadTexts: chassisCfgHighTempThreshold.setDescription('This object identifies the chassis temperature high threshold. If the chassis temperature exceeds this threshold then an alert will be generated. The value read/written will be either Celsius or Fahrenheit based on your current regional display settings. The valid range for this threshold is 0 to 70 degrees Celsius or 32 to 158 degrees Fahrenheit. (Not applicable to 2-slot chassis.)')
chassisReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 11), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisReset.setStatus('current')
if mibBuilder.loadTexts: chassisReset.setDescription('This object allows the resetting of the chassis (all modules). Reading this object always returns 0.')
chassisCfgMgmtSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisCfgMgmtSlot.setStatus('current')
if mibBuilder.loadTexts: chassisCfgMgmtSlot.setDescription('For the 2-slot chassis, this is the configured slot index of the management module. This value only needs to be changed if the management module is physically installed in slot 2, rather than slot 1. The management module should be restarted after changing this value.')
mcrPsmuTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2), )
if mibBuilder.loadTexts: mcrPsmuTable.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuTable.setDescription('Table of PSMU (Power Supply Monitoring Unit) diagnostic type information. (Not applicable to 2-slot chassis.)')
mcrPsmuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "mcrPsmuIndex"))
if mibBuilder.loadTexts: mcrPsmuEntry.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuEntry.setDescription('Entries of the table, each relating to a separate PSMU.')
mcrPsmuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("a", 1), ("b", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcrPsmuIndex.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuIndex.setDescription('This object identifies the PSMU bay as either A or B.')
mcrPsmuModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuModelName.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuModelName.setDescription('This object identifies the PSMU model.')
mcrPsmuModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuModelDesc.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuModelDesc.setDescription('This object identifies a static description of the power supply model present in the chassis')
mcrPsmuPsuSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuPsuSerialNumber.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuPsuSerialNumber.setDescription('This object identifies the PSU serial number.')
mcrPsmuBootloaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuBootloaderVersion.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuBootloaderVersion.setDescription('This object identifies the PSMU bootloader version.')
mcrPsmuFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuFirmwareVersion.setDescription('This object identifies the PSMU firmware version.')
mcrPsmuOutStandWarnAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuOutStandWarnAlarms.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuOutStandWarnAlarms.setDescription('This object identifies the number of outstanding warnings and alarms for this chassis. If this value is not zero then user intervention is needed to resolve the outstanding warnings and alarms')
mcrPsmuPsuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notPresent", 0), ("good", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuPsuStatus.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuPsuStatus.setDescription('This object identifies if the PSMU power supply unit (PSU) status.')
mcrPsmuPsuVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuPsuVoltage.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuPsuVoltage.setDescription('This object identifies the current PSU voltage being supplied.')
mcrPsmuPsuPowerUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuPsuPowerUsage.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuPsuPowerUsage.setDescription('This object identifies power currently being supplied to the chassis, in milliwatts. A value of 0 indicate that the power supply is not in use')
mcrPsmuFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notPresent", 0), ("good", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuFanStatus.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuFanStatus.setDescription('This object identifies the fan status.')
mcrPsmuFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrPsmuFanSpeed.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuFanSpeed.setDescription('This object identifies the speed of the fan in RPM.')
mcrChassisSlotTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3), )
if mibBuilder.loadTexts: mcrChassisSlotTable.setStatus('current')
if mibBuilder.loadTexts: mcrChassisSlotTable.setDescription('Table of chassis slot configuration, status and diagnostic type information.')
mcrChassisSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"))
if mibBuilder.loadTexts: mcrChassisSlotEntry.setStatus('current')
if mibBuilder.loadTexts: mcrChassisSlotEntry.setDescription('Entries of the table, each relating to a separate slot in a chassis.')
mcrChassisSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 2), SlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcrChassisSlotIndex.setStatus('current')
if mibBuilder.loadTexts: mcrChassisSlotIndex.setDescription('This object identifies the chassis slot number.')
mcrUserDefinedModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrUserDefinedModuleName.setStatus('current')
if mibBuilder.loadTexts: mcrUserDefinedModuleName.setDescription('This object identifies the user defined name of the module inserted in the slot. The default name is the model name of the media converter module')
mcrModuleModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleModelName.setStatus('current')
if mibBuilder.loadTexts: mcrModuleModelName.setDescription('This object identifies the model name of the module inserted in the slot.')
mcrUnManagedModuleSlotName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrUnManagedModuleSlotName.setStatus('current')
if mibBuilder.loadTexts: mcrUnManagedModuleSlotName.setDescription('This object identifies the user defined name for an unmanaged module inserted in the slot. Unmanaged modules include all perle C-1000, C-100, C-1110 and c-110 type modules.')
mcrModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleSerialNumber.setStatus('current')
if mibBuilder.loadTexts: mcrModuleSerialNumber.setDescription('This object identifies the serial number of the module inserted in the slot.')
mcrModuleBootloaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleBootloaderVersion.setStatus('current')
if mibBuilder.loadTexts: mcrModuleBootloaderVersion.setDescription('This object identifies the bootloader version of the module inserted in the slot.')
mcrModuleFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: mcrModuleFirmwareVersion.setDescription('This object identifies the firmware version of the module inserted in the slot.')
mcrModuleoOutStandWarnAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleoOutStandWarnAlarms.setStatus('current')
if mibBuilder.loadTexts: mcrModuleoOutStandWarnAlarms.setDescription('This object identifies the number of outstanding warnings and alarms for this module. If this value is not zero then user intervention is needed to resolve the outstanding warnings and alarms')
mcrModuleDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleDiagStatus.setStatus('current')
if mibBuilder.loadTexts: mcrModuleDiagStatus.setDescription("This object identifies the module's self-test diagnostics result. It will return zero if it passed and non-zero error code if the module has failed.The following are possible non-zero error codes: 1 - Media converter module's PHY is not functional. 2 - Firmware download required")
mcrModuleTypeInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unManaged", -3), ("mcrMgt", -2), ("unknown", -1), ("empty", 0), ("cm1000Fixed", 1), ("cm100Fixed", 2), ("cm1110RateConv", 3), ("cm110RateConv", 4), ("cm100mmFixed", 5), ("cm1000mmFixed", 6), ("cm10gFixed", 7), ("exCM", 8), ("cm10gt", 9), ("cm4gpt", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleTypeInserted.setStatus('current')
if mibBuilder.loadTexts: mcrModuleTypeInserted.setDescription('This object identifies the module type inserted for this chassis slot.')
mcrMediaConfigBackupRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMediaConfigBackupRestore.setStatus('current')
if mibBuilder.loadTexts: mcrMediaConfigBackupRestore.setDescription("This object is applicable to media converter modules only. It identifies whether the media configuration will be automatically backed up to or restored from the management card's non-volatile memory")
mcrMediaBackedupModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 0), ("cm1000Fixed", 1), ("cm100Fixed", 2), ("cm1110RateConv", 3), ("cm110RateConv", 4), ("cm100mmFixed", 5), ("cm1000mmFixed", 6), ("cm10gFixed", 7), ("exCM", 8), ("cm10gt", 9), ("cm4gpt", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMediaBackedupModuleType.setStatus('current')
if mibBuilder.loadTexts: mcrMediaBackedupModuleType.setDescription("This object identifies the media converter module type of the configuration that was backed up for the slot on the management card's non-volatile memory when the mcrMediaConfigBackupRestore object was enabled. ")
mcrChassisPwrUpSlotPwrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 14), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrChassisPwrUpSlotPwrState.setStatus('current')
if mibBuilder.loadTexts: mcrChassisPwrUpSlotPwrState.setDescription('This object identifies the default power state of the slot when the chassis is initially powered up. The current power state of the slot can be manually changed by writing to mcrCurrentPowerState object or dynamically changed via slot power schedule configuration. (Not applicable to 2-slot chassis.)')
mcrCurrentPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 15), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrCurrentPowerState.setStatus('current')
if mibBuilder.loadTexts: mcrCurrentPowerState.setDescription('Writing this object allows the current power state of the slot to be turned on or off. This object is not writable for management modules or the 2-slot chassis. Reading this object will return the current slot power state.')
mcrPowerScheduleEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrPowerScheduleEnable.setStatus('current')
if mibBuilder.loadTexts: mcrPowerScheduleEnable.setDescription('This object is not applicable to management modules. It identifies if power schedule is enabled for the slot. (Not applicable to 2-slot chassis.)')
mcrModuleReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrModuleReset.setStatus('current')
if mibBuilder.loadTexts: mcrModuleReset.setDescription('This object allows you to reset the module inserted in the slot.')
mcrModuleResetToFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrModuleResetToFactory.setStatus('current')
if mibBuilder.loadTexts: mcrModuleResetToFactory.setDescription('This object allows you to reset to factory the module inserted in the slot. ')
mcrModuleModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleModelDesc.setStatus('current')
if mibBuilder.loadTexts: mcrModuleModelDesc.setDescription('This object identifies a static description of the media converter module present in the slot.')
mcrModuleTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4))
cm1000Fixed = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1))
cm1000FixedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1), )
if mibBuilder.loadTexts: cm1000FixedTable.setStatus('current')
if mibBuilder.loadTexts: cm1000FixedTable.setDescription("Table of CM-1000 type media converter module's status type information.")
cm1000FixedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1000SlotIndex"))
if mibBuilder.loadTexts: cm1000FixedEntry.setStatus('current')
if mibBuilder.loadTexts: cm1000FixedEntry.setDescription('Entries of the table, each relating to a separate CM-1000 type media converter module.')
cm1000SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1000SlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm1000SlotIndex.setDescription('The Slot number the CM-1000 type module is currently inserted')
cm1000Modelname = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000Modelname.setStatus('current')
if mibBuilder.loadTexts: cm1000Modelname.setDescription('This object identifies the model of media converter module present in the chassis')
cm1000ModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000ModelDesc.setStatus('current')
if mibBuilder.loadTexts: cm1000ModelDesc.setDescription('This object identifies a static description of the media converter module present in the chassis')
cm1000HwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000HwJmp5ConfigMode.setStatus('current')
if mibBuilder.loadTexts: cm1000HwJmp5ConfigMode.setDescription("This object identifies the media converter module's ConfigMode, set by hardware jumper J5 on the media converter module. When this object is set to hardwareSwitches(0), the media converter module will disable configuration control from the management module's software and all configuration control comes from the media converter module's hardware switches or jumpers. ")
cm1000HwSw1FiberAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000HwSw1FiberAutoNeg.setStatus('current')
if mibBuilder.loadTexts: cm1000HwSw1FiberAutoNeg.setDescription("Media converter module's current switch setting for fiber Auto-Negotiation.")
cm1000HwSw2LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownSmartLinkPassthrough", 0), ("swUpStandard", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000HwSw2LinkMode.setStatus('current')
if mibBuilder.loadTexts: cm1000HwSw2LinkMode.setDescription("Media converter module's current switch setting for Link Mode.")
cm1000HwSw3FiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000HwSw3FiberFaultAlert.setStatus('current')
if mibBuilder.loadTexts: cm1000HwSw3FiberFaultAlert.setDescription("Media converter module's current switch setting for Fiber Fault Alert.")
cm1000HwSw4Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownHalf", 0), ("swUpAuto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000HwSw4Duplex.setStatus('current')
if mibBuilder.loadTexts: cm1000HwSw4Duplex.setDescription("Media converter module's current switch setting for copper duplex.")
cm1000HwSw5Pause = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000HwSw5Pause.setStatus('current')
if mibBuilder.loadTexts: cm1000HwSw5Pause.setDescription("Media converter module's current switch setting for copper pause (flow control).")
cm1000HwSw6Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000HwSw6Loopback.setStatus('current')
if mibBuilder.loadTexts: cm1000HwSw6Loopback.setDescription("Media converter module's current switch setting for fiber loopback mode.")
cm1000FiberLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000FiberLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm1000FiberLinkStatus.setDescription("Media converter module's current fiber link status.")
cm1000FiberConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000FiberConnType.setStatus('current')
if mibBuilder.loadTexts: cm1000FiberConnType.setDescription("Media converter module's fiber port connector type.")
cm1000FiberAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000FiberAutoNegState.setStatus('current')
if mibBuilder.loadTexts: cm1000FiberAutoNegState.setDescription("Media converter module's current fiber auto-negotiation state.")
cm1000FiberSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("speed1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000FiberSpeed.setStatus('current')
if mibBuilder.loadTexts: cm1000FiberSpeed.setDescription("Media converter module's fiber port speed in megabits per second.")
cm1000FiberDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000FiberDuplex.setStatus('current')
if mibBuilder.loadTexts: cm1000FiberDuplex.setDescription("If fiber auto-negotiation state is complete then this object indicates the media converter module's current fiber auto-negotiated duplex setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm1000FiberPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000FiberPauseEnh.setStatus('current')
if mibBuilder.loadTexts: cm1000FiberPauseEnh.setDescription("If fiber auto-negotiation state is complete then this object indicates the media converter module's current fiber auto-negotiated pause setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm1000FiberLPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("offline", 1), ("linkFault", 2), ("autoNegError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000FiberLPRFStatus.setStatus('current')
if mibBuilder.loadTexts: cm1000FiberLPRFStatus.setDescription("Media converter module's fiber Link Partner Remote Fault status.")
cm1000FiberReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000FiberReceiveStatus.setStatus('current')
if mibBuilder.loadTexts: cm1000FiberReceiveStatus.setDescription('This object identifies the status of whether light is being received on the fiber port')
cm1000FiberLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 20), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000FiberLoopBack.setStatus('current')
if mibBuilder.loadTexts: cm1000FiberLoopBack.setDescription("Media converter module's current fiber loopback mode setting. Writing to this object will change the current settings. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1000CopperLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000CopperLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm1000CopperLinkStatus.setDescription("Media converter module's current copper link status.")
cm1000CopperConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("rj45", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000CopperConnType.setStatus('current')
if mibBuilder.loadTexts: cm1000CopperConnType.setDescription("Media converter module's copper connector type.")
cm1000CopperAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000CopperAutoNegState.setStatus('current')
if mibBuilder.loadTexts: cm1000CopperAutoNegState.setDescription("Media converter module's current copper auto-negotiation state.")
cm1000CopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("speed1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000CopperSpeed.setStatus('current')
if mibBuilder.loadTexts: cm1000CopperSpeed.setDescription("Media converter module's copper port speed in megabits per second.")
cm1000CopperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000CopperDuplex.setStatus('current')
if mibBuilder.loadTexts: cm1000CopperDuplex.setDescription("If copper auto-negotiation state is complete then this object indicates the media converter module's current copper auto-negotiated duplex setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm1000CopperCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdi", 0), ("mdix", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000CopperCrossOver.setStatus('current')
if mibBuilder.loadTexts: cm1000CopperCrossOver.setDescription("If copper auto-negotiation state is complete then this object indicates the media converter module's current copper auto-negotiated MDI/MDI-X setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm1000CopperPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000CopperPauseEnh.setStatus('current')
if mibBuilder.loadTexts: cm1000CopperPauseEnh.setDescription("If copper auto-negotiation state is complete then this object indicates the media converter module's current copper auto-negotiated pause setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm1000CopperLPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("remoteFault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000CopperLPRFStatus.setStatus('current')
if mibBuilder.loadTexts: cm1000CopperLPRFStatus.setDescription("Media converter module's copper Link Partner Remote Fault status.")
cm1000ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2), )
if mibBuilder.loadTexts: cm1000ConfigTable.setStatus('current')
if mibBuilder.loadTexts: cm1000ConfigTable.setDescription("Table of CM-1000 type media converter module's configuration type information.")
cm1000ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1000ConfigSlotIndex"))
if mibBuilder.loadTexts: cm1000ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cm1000ConfigEntry.setDescription('Entries of the table, each relating to a separate CM-1000 type media converter module.')
cm1000ConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1000ConfigSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm1000ConfigSlotIndex.setDescription('The Slot number the CM-1000 type module is currently inserted')
cm1000ConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigStatus.setStatus('current')
if mibBuilder.loadTexts: cm1000ConfigStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module, verified and and saved to flash. 6-Indicates that the changes in the container folder are to be discarded.')
cm1000ConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigModuleName.setStatus('current')
if mibBuilder.loadTexts: cm1000ConfigModuleName.setDescription('This object identifies a user configurable name for the media converter module present in the chassis. ')
cm1000ConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("smartLinkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigLinkMode.setStatus('current')
if mibBuilder.loadTexts: cm1000ConfigLinkMode.setDescription("This object identifies the Link Mode for the media converter module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1000ConfigFiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigFiberFaultAlert.setStatus('current')
if mibBuilder.loadTexts: cm1000ConfigFiberFaultAlert.setDescription("This object identifies the Fiber Fault Alert setting for the media module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0). ")
cm1000ConfigJumboPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 7), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigJumboPackets.setStatus('current')
if mibBuilder.loadTexts: cm1000ConfigJumboPackets.setDescription('This object identifies the Jumbo Packet setting for the media converter module present in the chassis. ')
cm1000ConfigFiberPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigFiberPortName.setStatus('current')
if mibBuilder.loadTexts: cm1000ConfigFiberPortName.setDescription('This object identifies a user definable name for the fiber port.')
cm1000ConfigFiberPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 9), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigFiberPortEnable.setStatus('current')
if mibBuilder.loadTexts: cm1000ConfigFiberPortEnable.setDescription('This object identifies whether the fiber port is enabled. ')
cm1000ConfigFiberAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 10), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigFiberAutoNeg.setStatus('current')
if mibBuilder.loadTexts: cm1000ConfigFiberAutoNeg.setDescription("This object identifies the wither fiber auto-negotiation is enabled. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1000ConfigCopperPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigCopperPortName.setStatus('current')
if mibBuilder.loadTexts: cm1000ConfigCopperPortName.setDescription('This object identifies a user definable name for the copper port. ')
cm1000ConfigCopperPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 12), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigCopperPortEnable.setStatus('current')
if mibBuilder.loadTexts: cm1000ConfigCopperPortEnable.setDescription('This object identifies whether the fiber port is enabled. ')
cm1000ConfigCopperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigCopperDuplex.setStatus('current')
if mibBuilder.loadTexts: cm1000ConfigCopperDuplex.setDescription("This object identifies the duplex settings for the copper port. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1000ConfigCopperPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("symmAsymRx", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigCopperPauseEnh.setStatus('current')
if mibBuilder.loadTexts: cm1000ConfigCopperPauseEnh.setDescription("This object identifies the copper pause (flow control) setting that is a advertised. The settings can be disabled, advertise symmetrical, advertise asymmetrical TX or advertise symmetrical and asymmetrical RX. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1000ConfigCopperLowPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 2, 1, 15), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000ConfigCopperLowPower.setStatus('current')
if mibBuilder.loadTexts: cm1000ConfigCopperLowPower.setDescription('This object identifies the copper low power setting for the media converter module present in the chassis. ')
cm1000LedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 3), )
if mibBuilder.loadTexts: cm1000LedTable.setStatus('current')
if mibBuilder.loadTexts: cm1000LedTable.setDescription("Table of CM-1000 type media converter module's LED status information.")
cm1000LedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1000LedSlotIndex"))
if mibBuilder.loadTexts: cm1000LedEntry.setStatus('current')
if mibBuilder.loadTexts: cm1000LedEntry.setDescription('Entries of the table, each relating to a separate CM-1000 type media converter module.')
cm1000LedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1000LedSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm1000LedSlotIndex.setDescription('The Slot number the CM-1000 type module is currently inserted')
cm1000LedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000LedPWR.setStatus('current')
if mibBuilder.loadTexts: cm1000LedPWR.setDescription('This object identifies the status of the power (PWR) LED on the media converter module. Possible status values are: off(0) - No power to the module onGreen(1) - Power being applied to module blinking(2) - Fiber loopback enabled')
cm1000LedLKF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000LedLKF.setStatus('current')
if mibBuilder.loadTexts: cm1000LedLKF.setDescription('This object identifies the status of the link copper (LKC) LED on the media converter module. Possible status values are: off(0) - No fiber link on(1) - Fiber link present')
cm1000LedLKC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000LedLKC.setStatus('current')
if mibBuilder.loadTexts: cm1000LedLKC.setDescription('This object identifies the status of the link copper (LKC) LED on the media converter module. Possible status values are: off(0) - No copper link on(1) - Copper link present')
cm1000mmFixed = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6))
cm1000mmFixedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1), )
if mibBuilder.loadTexts: cm1000mmFixedTable.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFixedTable.setDescription("Table of CM-1000MM type media converter module's status type information.")
cm1000mmFixedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1000mmSlotIndex"))
if mibBuilder.loadTexts: cm1000mmFixedEntry.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFixedEntry.setDescription('Entries of the table, each relating to a separate CM-1000MM type media converter module.')
cm1000mmSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1000mmSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm1000mmSlotIndex.setDescription('The Slot number the CM-1000MM type module is currently inserted')
cm1000mmModelname = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmModelname.setStatus('current')
if mibBuilder.loadTexts: cm1000mmModelname.setDescription('This object identifies the model of media converter module present in the chassis')
cm1000mmModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmModelDesc.setStatus('current')
if mibBuilder.loadTexts: cm1000mmModelDesc.setDescription('This object identifies a static description of the media converter module present in the chassis')
cm1000mmHwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmHwJmp5ConfigMode.setStatus('current')
if mibBuilder.loadTexts: cm1000mmHwJmp5ConfigMode.setDescription("This object identifies the media converter module's ConfigMode, set by hardware jumper J5 on the media converter module. When this object is set to hardwareSwitches(0), the media converter module will disable configuration control from the management module's software and all configuration control comes from the media converter module's hardware switches or jumpers. ")
cm1000mmHwSw1FiberAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmHwSw1FiberAutoNeg.setStatus('current')
if mibBuilder.loadTexts: cm1000mmHwSw1FiberAutoNeg.setDescription("Media converter module's current switch setting for fiber Auto-Negotiation.")
cm1000mmHwSw2LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownSmartLinkPassthrough", 0), ("swUpStandard", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmHwSw2LinkMode.setStatus('current')
if mibBuilder.loadTexts: cm1000mmHwSw2LinkMode.setDescription("Media converter module's current switch setting for Link Mode.")
cm1000mmHwSw3FiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmHwSw3FiberFaultAlert.setStatus('current')
if mibBuilder.loadTexts: cm1000mmHwSw3FiberFaultAlert.setDescription("Media converter module's current switch setting for Fiber Fault Alert.")
cm1000mmHwSw4Loopback1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmHwSw4Loopback1.setStatus('current')
if mibBuilder.loadTexts: cm1000mmHwSw4Loopback1.setDescription("Media converter module's current switch setting for loopback (fiber port 1).")
cm1000mmHwSw5Loopback2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmHwSw5Loopback2.setStatus('current')
if mibBuilder.loadTexts: cm1000mmHwSw5Loopback2.setDescription("Media converter module's current switch setting for loopback (fiber port 2).")
cm1000mmFiber1LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber1LinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiber1LinkStatus.setDescription("Media converter module's current fiber link status (port 1).")
cm1000mmFiber1ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber1ConnType.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiber1ConnType.setDescription("Media converter module's fiber port connector type (port 1).")
cm1000mmFiber1AutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber1AutoNegState.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiber1AutoNegState.setDescription("Media converter module's current fiber auto-negotiation state (port 1).")
cm1000mmFiber1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("speed1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber1Speed.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiber1Speed.setDescription("Media converter module's fiber port speed in megabits per second (port 1).")
cm1000mmFiber1Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber1Duplex.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiber1Duplex.setDescription("If fiber auto-negotiation state is complete then this object indicates the media converter module's current fiber auto-negotiated duplex setting. If auto-negotiation is not complete then the value returned should be ignored. (Port 1)")
cm1000mmFiber1PauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber1PauseEnh.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiber1PauseEnh.setDescription("If fiber auto-negotiation state is complete then this object indicates the media converter module's current fiber auto-negotiated pause setting. If auto-negotiation is not complete then the value returned should be ignored. (Port 1)")
cm1000mmFiber1LPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("offline", 1), ("linkFault", 2), ("autoNegError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber1LPRFStatus.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiber1LPRFStatus.setDescription("Media converter module's fiber Link Partner Remote Fault status (port 1).")
cm1000mmFiber1ReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmFiber1ReceiveStatus.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiber1ReceiveStatus.setDescription('This object identifies the status of whether light is being received on the fiber port (port 1)')
cm1000mmFiber2LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber2LinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiber2LinkStatus.setDescription("Media converter module's current fiber link status (port 2).")
cm1000mmFiber2ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber2ConnType.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiber2ConnType.setDescription("Media converter module's fiber port connector type (port 2).")
cm1000mmFiber2AutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber2AutoNegState.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiber2AutoNegState.setDescription("Media converter module's current fiber auto-negotiation state (port 2).")
cm1000mmFiber2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("speed1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber2Speed.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiber2Speed.setDescription("Media converter module's fiber port speed in megabits per second (port 2).")
cm1000mmFiber2Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber2Duplex.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiber2Duplex.setDescription("If fiber auto-negotiation state is complete then this object indicates the media converter module's current fiber auto-negotiated duplex setting. If auto-negotiation is not complete then the value returned should be ignored. (Port 2)")
cm1000mmFiber2PauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber2PauseEnh.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiber2PauseEnh.setDescription("If fiber auto-negotiation state is complete then this object indicates the media converter module's current fiber auto-negotiated pause setting. If auto-negotiation is not complete then the value returned should be ignored. (Port 2)")
cm1000mmFiber2LPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("offline", 1), ("linkFault", 2), ("autoNegError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmFiber2LPRFStatus.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiber2LPRFStatus.setDescription("Media converter module's fiber Link Partner Remote Fault status (port 2).")
cm1000mmFiber2ReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmFiber2ReceiveStatus.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiber2ReceiveStatus.setDescription('This object identifies the status of whether light is being received on the fiber port (port 2)')
cm1000mmFiberLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("port1", 1), ("port2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmFiberLoopBack.setStatus('current')
if mibBuilder.loadTexts: cm1000mmFiberLoopBack.setDescription("Media converter module's current fiber loopback mode setting. Writing to this object will change the current settings. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1000mmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2), )
if mibBuilder.loadTexts: cm1000mmConfigTable.setStatus('current')
if mibBuilder.loadTexts: cm1000mmConfigTable.setDescription("Table of CM-1000MM type media converter module's configuration type information.")
cm1000mmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1000mmConfigSlotIndex"))
if mibBuilder.loadTexts: cm1000mmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cm1000mmConfigEntry.setDescription('Entries of the table, each relating to a separate CM-1000MM type media converter module.')
cm1000mmConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1000mmConfigSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm1000mmConfigSlotIndex.setDescription('The Slot number the CM-1000MM type module is currently inserted')
cm1000mmConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigStatus.setStatus('current')
if mibBuilder.loadTexts: cm1000mmConfigStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module, verified and and saved to flash. 6-Indicates that the changes in the container folder are to be discarded.')
cm1000mmConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigModuleName.setStatus('current')
if mibBuilder.loadTexts: cm1000mmConfigModuleName.setDescription('This object identifies a user configurable name for the media converter module present in the chassis. ')
cm1000mmConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("smartLinkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigLinkMode.setStatus('current')
if mibBuilder.loadTexts: cm1000mmConfigLinkMode.setDescription("This object identifies the Link Mode for the media converter module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1000mmConfigFiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigFiberFaultAlert.setStatus('current')
if mibBuilder.loadTexts: cm1000mmConfigFiberFaultAlert.setDescription("This object identifies the Fiber Fault Alert setting for the media module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0). ")
cm1000mmConfigJumboPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 7), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigJumboPackets.setStatus('current')
if mibBuilder.loadTexts: cm1000mmConfigJumboPackets.setDescription('This object identifies the Jumbo Packet setting for the media converter module present in the chassis. ')
cm1000mmConfigFiberAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 8), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigFiberAutoNeg.setStatus('current')
if mibBuilder.loadTexts: cm1000mmConfigFiberAutoNeg.setDescription("This object identifies the wither fiber auto-negotiation is enabled for both ports. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1000mmConfigFiber1PortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigFiber1PortName.setStatus('current')
if mibBuilder.loadTexts: cm1000mmConfigFiber1PortName.setDescription('This object identifies a user definable name for the fiber port (port 1).')
cm1000mmConfigFiber1PortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 10), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigFiber1PortEnable.setStatus('current')
if mibBuilder.loadTexts: cm1000mmConfigFiber1PortEnable.setDescription('This object identifies whether the fiber port is enabled (port 1).')
cm1000mmConfigFiber2PortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigFiber2PortName.setStatus('current')
if mibBuilder.loadTexts: cm1000mmConfigFiber2PortName.setDescription('This object identifies a user definable name for the fiber port (port 2).')
cm1000mmConfigFiber2PortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 2, 1, 12), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1000mmConfigFiber2PortEnable.setStatus('current')
if mibBuilder.loadTexts: cm1000mmConfigFiber2PortEnable.setDescription('This object identifies whether the fiber port is enabled (port 2).')
cm1000mmLedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 3), )
if mibBuilder.loadTexts: cm1000mmLedTable.setStatus('current')
if mibBuilder.loadTexts: cm1000mmLedTable.setDescription("Table of CM-1000MM type media converter module's LED status information.")
cm1000mmLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1000mmLedsSlotIndex"))
if mibBuilder.loadTexts: cm1000mmLedEntry.setStatus('current')
if mibBuilder.loadTexts: cm1000mmLedEntry.setDescription('Entries of the table, each relating to a separate CM-1000MM type media converter module.')
cm1000mmLedsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1000mmLedsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm1000mmLedsSlotIndex.setDescription('The Slot number the CM-1000 type module is currently inserted')
cm1000mmLedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmLedPWR.setStatus('current')
if mibBuilder.loadTexts: cm1000mmLedPWR.setDescription('This object identifies the status of the power (PWR) LED on the media converter module. Possible status values are: off(0) - No power to the module onGreen(1) - Power being applied to module blinking(2) - Fiber loopback enabled')
cm1000mmLedLK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmLedLK1.setStatus('current')
if mibBuilder.loadTexts: cm1000mmLedLK1.setDescription('This object identifies the status of the link fiber port 1 (LK1) LED on the media converter module. Possible status values are: off(0) - No fiber link on(1) - Fiber link present')
cm1000mmLedLK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1000mmLedLK2.setStatus('current')
if mibBuilder.loadTexts: cm1000mmLedLK2.setDescription('This object identifies the status of the link fiber port 2 (LK2) LED on the media converter module. Possible status values are: off(0) - No fiber link on(1) - Fiber link present')
cm100Fixed = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2))
cm100FixedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1), )
if mibBuilder.loadTexts: cm100FixedTable.setStatus('current')
if mibBuilder.loadTexts: cm100FixedTable.setDescription("Table of CM-100 type media converter module's configuration and status type information.")
cm100FixedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm100SlotIndex"))
if mibBuilder.loadTexts: cm100FixedEntry.setStatus('current')
if mibBuilder.loadTexts: cm100FixedEntry.setDescription('Entries of the table, each relating to a separate CM-1000 type media converter module.')
cm100SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm100SlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm100SlotIndex.setDescription('The Slot number the CM-100 type module is currently inserted')
cm100ModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100ModelName.setStatus('current')
if mibBuilder.loadTexts: cm100ModelName.setDescription('This object identifies the model of media converter module present in the chassis')
cm100ModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100ModelDesc.setStatus('current')
if mibBuilder.loadTexts: cm100ModelDesc.setDescription('This object identifies a static description of the media converter module present in the chassis')
cm100HwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100HwJmp5ConfigMode.setStatus('current')
if mibBuilder.loadTexts: cm100HwJmp5ConfigMode.setDescription("This object identifies the media converter module's ConfigMode, set by hardware switch on the media converter module. When this object is set to hardwareSwitches(0), the media converter module will disable configuration control from the management module's software and all configuration control comes from the media module's hardware switches or jumpers. ")
cm100HwJmp6AutoMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdi", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100HwJmp6AutoMDI.setStatus('current')
if mibBuilder.loadTexts: cm100HwJmp6AutoMDI.setDescription("This object identifies the media converter module's hardware Auto MDIX jumper settings. ")
cm100HwSw1AutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100HwSw1AutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: cm100HwSw1AutoNegotiation.setDescription("Media converter module's current switch setting for fiber Auto-Negotiation.")
cm100HwSw2LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownStandardMode", 0), ("swUpLinkPassthroughMode", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100HwSw2LinkMode.setStatus('current')
if mibBuilder.loadTexts: cm100HwSw2LinkMode.setDescription("Media converter module's current switch setting for Link Mode.")
cm100HwSw3FarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100HwSw3FarEndFault.setStatus('current')
if mibBuilder.loadTexts: cm100HwSw3FarEndFault.setDescription("Media converter module's current switch setting for Far End Fault.")
cm100HwSw5Pause = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100HwSw5Pause.setStatus('current')
if mibBuilder.loadTexts: cm100HwSw5Pause.setDescription("Media converter module's current switch setting for copper pause (flow control).")
cm100HwSw6Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100HwSw6Loopback.setStatus('current')
if mibBuilder.loadTexts: cm100HwSw6Loopback.setDescription("Media converter module's current switch setting for fiber loopback mode.")
cm100FiberLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100FiberLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm100FiberLinkStatus.setDescription("Media converter module's current fiber link status.")
cm100FiberConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100FiberConnType.setStatus('current')
if mibBuilder.loadTexts: cm100FiberConnType.setDescription("Media converter module's fiber port connector type.")
cm100FiberSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("speed100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100FiberSpeed.setStatus('current')
if mibBuilder.loadTexts: cm100FiberSpeed.setDescription("Media converter module's fiber port speed in megabits per second.")
cm100FiberFarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("ok", 1), ("receivingFEF", 2), ("sendingFEF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100FiberFarEndFault.setStatus('current')
if mibBuilder.loadTexts: cm100FiberFarEndFault.setDescription("Media converter module's current fiber Far End Fault status.")
cm100FiberReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100FiberReceiveStatus.setStatus('current')
if mibBuilder.loadTexts: cm100FiberReceiveStatus.setDescription('This object identifies the status of whether light is being received on the fiber port')
cm100FiberLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 17), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100FiberLoopBack.setStatus('current')
if mibBuilder.loadTexts: cm100FiberLoopBack.setDescription(" This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm100CopperLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100CopperLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm100CopperLinkStatus.setDescription("Media converter module's current copper link status.")
cm100CopperConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("rj45", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100CopperConnType.setStatus('current')
if mibBuilder.loadTexts: cm100CopperConnType.setDescription("Media converter module's copper connector type.")
cm100CopperAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100CopperAutoNegState.setStatus('current')
if mibBuilder.loadTexts: cm100CopperAutoNegState.setDescription("Media converter module's current copper auto-negotiation state.")
cm100CopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("speed100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100CopperSpeed.setStatus('current')
if mibBuilder.loadTexts: cm100CopperSpeed.setDescription('This object identifies the copper port speed in megabits per second.')
cm100CopperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100CopperDuplex.setStatus('current')
if mibBuilder.loadTexts: cm100CopperDuplex.setDescription("If copper auto-negotiation state is complete then this object indicates the media converter module's current copper auto-negotiated duplex setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm100CopperCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdi", 0), ("mdix", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100CopperCrossOver.setStatus('current')
if mibBuilder.loadTexts: cm100CopperCrossOver.setDescription("If copper auto-negotiation state is complete then this object indicates the media converter module's current copper auto-negotiated MDI/MDI-X setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm100CopperPause = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100CopperPause.setStatus('current')
if mibBuilder.loadTexts: cm100CopperPause.setDescription("If copper auto-negotiation state is complete then this object indicates the media converter module's current copper auto-negotiated pause (flow control) setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm100CopperLPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("remoteFault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100CopperLPRFStatus.setStatus('current')
if mibBuilder.loadTexts: cm100CopperLPRFStatus.setDescription("Media converter module's copper Link Partner Remote Fault status.")
cm100ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2), )
if mibBuilder.loadTexts: cm100ConfigTable.setStatus('current')
if mibBuilder.loadTexts: cm100ConfigTable.setDescription("Table of CM-100 type media converter module's configuration and status type information.")
cm100ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm100ConfigSlotIndex"))
if mibBuilder.loadTexts: cm100ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cm100ConfigEntry.setDescription('Entries of the table, each relating to a separate CM-1000 type media converter module.')
cm100ConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm100ConfigSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm100ConfigSlotIndex.setDescription('The Slot number the CM-1000 type module is currently inserted')
cm100ConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigStatus.setStatus('current')
if mibBuilder.loadTexts: cm100ConfigStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module, verified and and saved to flash. 6-Indicates that the changes in the container folder are to be discarded.')
cm100ConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigModuleName.setStatus('current')
if mibBuilder.loadTexts: cm100ConfigModuleName.setDescription('This object identifies a user configurable name for the media converter module present in the chassis. ')
cm100ConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("linkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigLinkMode.setStatus('current')
if mibBuilder.loadTexts: cm100ConfigLinkMode.setDescription("This object identifies the Link Mode for the media converter module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm100ConfigFiberFarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigFiberFarEndFault.setStatus('current')
if mibBuilder.loadTexts: cm100ConfigFiberFarEndFault.setDescription("This object identifies the fiber Far End Fault setting for the media module. This setting is always enabled if Link Mode is set to linkPassthrough. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0). ")
cm100ConfigFiberPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigFiberPortName.setStatus('current')
if mibBuilder.loadTexts: cm100ConfigFiberPortName.setDescription('This object identifies a user definable name for the fiber port.')
cm100ConfigFiberPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 8), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigFiberPortEnable.setStatus('current')
if mibBuilder.loadTexts: cm100ConfigFiberPortEnable.setDescription('This object identifies whether the fiber port is enabled. ')
cm100ConfigCopperPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigCopperPortName.setStatus('current')
if mibBuilder.loadTexts: cm100ConfigCopperPortName.setDescription('This object identifies a user definable name for the copper port. ')
cm100ConfigCopperPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 10), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigCopperPortEnable.setStatus('current')
if mibBuilder.loadTexts: cm100ConfigCopperPortEnable.setDescription('This object identifies whether the fiber port is enabled. ')
cm100ConfigCopperAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 11), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigCopperAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: cm100ConfigCopperAutoNegotiation.setDescription("This object identifies the whether copper auto-negotiation is enabled. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm100ConfigCopperCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("mdi", 1), ("mdix", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigCopperCrossOver.setStatus('current')
if mibBuilder.loadTexts: cm100ConfigCopperCrossOver.setDescription("This object identifies the copper MDI/MDI-X setting.This object is read-only if the media converter module's ConfigMode jumper is set to")
cm100ConfigCopperPause = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100ConfigCopperPause.setStatus('current')
if mibBuilder.loadTexts: cm100ConfigCopperPause.setDescription("This object identifies the copper's port pause (flow control) settings. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm100LedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 3), )
if mibBuilder.loadTexts: cm100LedTable.setStatus('current')
if mibBuilder.loadTexts: cm100LedTable.setDescription("Table of CM-100 type media converter module's LED status information.")
cm100LedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm100LedSlotIndex"))
if mibBuilder.loadTexts: cm100LedEntry.setStatus('current')
if mibBuilder.loadTexts: cm100LedEntry.setDescription('Entries of the table, each relating to a separate CM-100 type media converter module.')
cm100LedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm100LedSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm100LedSlotIndex.setDescription('The Slot number the CM-100 type module is currently inserted')
cm100LedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100LedPWR.setStatus('current')
if mibBuilder.loadTexts: cm100LedPWR.setDescription('This object identifies the status of the power (PWR) LED on the media converter module. Possible status values are: off(0) - No power to the module onGreen(1) - Power being applied to module blinking(2) - Fiber loopback enabled')
cm100LedLKF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100LedLKF.setStatus('current')
if mibBuilder.loadTexts: cm100LedLKF.setDescription('This object identifies the status of the link fiber (LKF) LED on the media converter module. Possible status values are: off(0) - No fiber link on(1) - Fiber link present')
cm100LedLKC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100LedLKC.setStatus('current')
if mibBuilder.loadTexts: cm100LedLKC.setDescription('This object identifies the status of the link copper (LKC) LED on the media converter module. Possible status values are: off(0) - No copper link on(1) - Copper link present')
cm100mmFixed = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7))
cm100mmFixedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1), )
if mibBuilder.loadTexts: cm100mmFixedTable.setStatus('current')
if mibBuilder.loadTexts: cm100mmFixedTable.setDescription("Table of CM-100MM type media converter module's configuration and status type information.")
cm100mmFixedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm100mmSlotIndex"))
if mibBuilder.loadTexts: cm100mmFixedEntry.setStatus('current')
if mibBuilder.loadTexts: cm100mmFixedEntry.setDescription('Entries of the table, each relating to a separate CM-100MM type media converter module.')
cm100mmSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm100mmSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm100mmSlotIndex.setDescription('The Slot number the CM-100MM type module is currently inserted')
cm100mmModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmModelName.setStatus('current')
if mibBuilder.loadTexts: cm100mmModelName.setDescription('This object identifies the model of media converter module present in the chassis')
cm100mmModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmModelDesc.setStatus('current')
if mibBuilder.loadTexts: cm100mmModelDesc.setDescription('This object identifies a static description of the media converter module present in the chassis')
cm100mmHwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmHwJmp5ConfigMode.setStatus('current')
if mibBuilder.loadTexts: cm100mmHwJmp5ConfigMode.setDescription("This object identifies the media converter module's ConfigMode, set by hardware switch on the media converter module. When this object is set to hardwareSwitches(0), the media converter module will disable configuration control from the management module's software and all configuration control comes from the media module's hardware switches or jumpers. ")
cm100mmHwSw1LinkPassthrough = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmHwSw1LinkPassthrough.setStatus('current')
if mibBuilder.loadTexts: cm100mmHwSw1LinkPassthrough.setDescription("Media converter module's current switch setting for Link Passthrough.")
cm100mmHwSw2FarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmHwSw2FarEndFault.setStatus('current')
if mibBuilder.loadTexts: cm100mmHwSw2FarEndFault.setDescription("Media converter module's current switch setting for Far-End Fault.")
cm100mmHwSw3Loopback1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmHwSw3Loopback1.setStatus('current')
if mibBuilder.loadTexts: cm100mmHwSw3Loopback1.setDescription("Media converter module's current switch setting for Loopback (fiber port 1).")
cm100mmHwSw4Loopback2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmHwSw4Loopback2.setStatus('current')
if mibBuilder.loadTexts: cm100mmHwSw4Loopback2.setDescription("Media converter module's current switch setting for Loopback (fiber port 2).")
cm100mmFiber1LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmFiber1LinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm100mmFiber1LinkStatus.setDescription("Media converter module's current fiber link status (port 1).")
cm100mmFiber1ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmFiber1ConnType.setStatus('current')
if mibBuilder.loadTexts: cm100mmFiber1ConnType.setDescription("Media converter module's fiber port connector type (port 1).")
cm100mmFiber1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("speed100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmFiber1Speed.setStatus('current')
if mibBuilder.loadTexts: cm100mmFiber1Speed.setDescription("Media converter module's fiber port speed in megabits per second (port 1).")
cm100mmFiber1FarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("ok", 1), ("receivingFEF", 2), ("sendingFEF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmFiber1FarEndFault.setStatus('current')
if mibBuilder.loadTexts: cm100mmFiber1FarEndFault.setDescription("Media converter module's current fiber Far End Fault status (port 1).")
cm100mmFiber1ReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmFiber1ReceiveStatus.setStatus('current')
if mibBuilder.loadTexts: cm100mmFiber1ReceiveStatus.setDescription('This object identifies the status of whether light is being received on the fiber port (port 1)')
cm100mmFiber2LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmFiber2LinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm100mmFiber2LinkStatus.setDescription("Media converter module's current fiber link status (port 2).")
cm100mmFiber2ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmFiber2ConnType.setStatus('current')
if mibBuilder.loadTexts: cm100mmFiber2ConnType.setDescription("Media converter module's fiber port connector type (port 2).")
cm100mmFiber2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("speed100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmFiber2Speed.setStatus('current')
if mibBuilder.loadTexts: cm100mmFiber2Speed.setDescription("Media converter module's fiber port speed in megabits per second (port 2).")
cm100mmFiber2FarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("ok", 1), ("receivingFEF", 2), ("sendingFEF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmFiber2FarEndFault.setStatus('current')
if mibBuilder.loadTexts: cm100mmFiber2FarEndFault.setDescription("Media converter module's current fiber Far End Fault status (port 2).")
cm100mmFiber2ReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmFiber2ReceiveStatus.setStatus('current')
if mibBuilder.loadTexts: cm100mmFiber2ReceiveStatus.setDescription('This object identifies the status of whether light is being received on the fiber port (port 2)')
cm100mmFiberLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("port1", 1), ("port2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmFiberLoopBack.setStatus('current')
if mibBuilder.loadTexts: cm100mmFiberLoopBack.setDescription(" This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm100mmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2), )
if mibBuilder.loadTexts: cm100mmConfigTable.setStatus('current')
if mibBuilder.loadTexts: cm100mmConfigTable.setDescription("Table of CM-100MM type media converter module's configuration and status type information.")
cm100mmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm100mmConfigSlotIndex"))
if mibBuilder.loadTexts: cm100mmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cm100mmConfigEntry.setDescription('Entries of the table, each relating to a separate CM-100MM type media converter module.')
cm100mmConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm100mmConfigSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm100mmConfigSlotIndex.setDescription('The Slot number the CM-100MM type module is currently inserted')
cm100mmConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmConfigStatus.setStatus('current')
if mibBuilder.loadTexts: cm100mmConfigStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module, verified and and saved to flash. 6-Indicates that the changes in the container folder are to be discarded.')
cm100mmConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmConfigModuleName.setStatus('current')
if mibBuilder.loadTexts: cm100mmConfigModuleName.setDescription('This object identifies a user configurable name for the media converter module present in the chassis. ')
cm100mmConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("linkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmConfigLinkMode.setStatus('current')
if mibBuilder.loadTexts: cm100mmConfigLinkMode.setDescription("This object identifies the Link Mode for the media converter module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm100mmConfigFiberFarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmConfigFiberFarEndFault.setStatus('current')
if mibBuilder.loadTexts: cm100mmConfigFiberFarEndFault.setDescription("This object identifies the fiber Far End Fault setting for the media module. This setting is always enabled if Link Mode is set to linkPassthrough. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0). ")
cm100mmConfigFiber1PortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmConfigFiber1PortName.setStatus('current')
if mibBuilder.loadTexts: cm100mmConfigFiber1PortName.setDescription('This object identifies a user definable name for the fiber port (port 1).')
cm100mmConfigFiber1PortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 8), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmConfigFiber1PortEnable.setStatus('current')
if mibBuilder.loadTexts: cm100mmConfigFiber1PortEnable.setDescription('This object identifies whether the fiber port is enabled (port 2). ')
cm100mmConfigFiber2PortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmConfigFiber2PortName.setStatus('current')
if mibBuilder.loadTexts: cm100mmConfigFiber2PortName.setDescription('This object identifies a user definable name for the fiber port (port 2).')
cm100mmConfigFiber2PortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 2, 1, 10), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm100mmConfigFiber2PortEnable.setStatus('current')
if mibBuilder.loadTexts: cm100mmConfigFiber2PortEnable.setDescription('This object identifies whether the fiber port is enabled (port 2). ')
cm100mmLedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 3), )
if mibBuilder.loadTexts: cm100mmLedTable.setStatus('current')
if mibBuilder.loadTexts: cm100mmLedTable.setDescription("Table of CM-100MM type media converter module's LED status information.")
cm100mmLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm100mmLedSlotIndex"))
if mibBuilder.loadTexts: cm100mmLedEntry.setStatus('current')
if mibBuilder.loadTexts: cm100mmLedEntry.setDescription('Entries of the table, each relating to a separate CM-100MM type media converter module.')
cm100mmLedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm100mmLedSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm100mmLedSlotIndex.setDescription('The Slot number the CM-100MM type module is currently inserted')
cm100mmLedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmLedPWR.setStatus('current')
if mibBuilder.loadTexts: cm100mmLedPWR.setDescription('This object identifies the status of the power (PWR) LED on the media converter module. Possible status values are: off(0) - No power to the module onGreen(1) - Power being applied to module blinking(2) - Fiber loopback enabled')
cm100mmLedLK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmLedLK1.setStatus('current')
if mibBuilder.loadTexts: cm100mmLedLK1.setDescription('This object identifies the status of the link fiber port 1 (LK1) LED on the media converter module. Possible status values are: off(0) - No fiber link on(1) - Fiber link present')
cm100mmLedLK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm100mmLedLK2.setStatus('current')
if mibBuilder.loadTexts: cm100mmLedLK2.setDescription('This object identifies the status of the link fiber port 2 (LK2) LED on the media converter module. Possible status values are: off(0) - No fiber link on(1) - Fiber link present')
cm1110RateConv = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3))
cm1110RateConvTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1), )
if mibBuilder.loadTexts: cm1110RateConvTable.setStatus('current')
if mibBuilder.loadTexts: cm1110RateConvTable.setDescription("Table of CM-1110 type media converter module's configuration and status type information.")
cm1110RateConvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1110SlotIndex"))
if mibBuilder.loadTexts: cm1110RateConvEntry.setStatus('current')
if mibBuilder.loadTexts: cm1110RateConvEntry.setDescription('Entries of the table, each relating to a separate CM-1110 type media converter module.')
cm1110SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1110SlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm1110SlotIndex.setDescription('The Slot number the CM-1110 type module is currently inserted')
cm1110ModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110ModelName.setStatus('current')
if mibBuilder.loadTexts: cm1110ModelName.setDescription('This object identifies the model of media converter module present in the chassis')
cm1110ModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110ModelDesc.setStatus('current')
if mibBuilder.loadTexts: cm1110ModelDesc.setDescription('This object identifies a static description of the media converter module present in the chassis')
cm1110HwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwJmp5ConfigMode.setStatus('current')
if mibBuilder.loadTexts: cm1110HwJmp5ConfigMode.setDescription("This object identifies the media converter module's ConfigMode, set by hardware switch on the media converter module. When this object is set to hardwareSwitches(0), the media converter module will disable configuration control from the management module's software and all configuration control comes from the media module's hardware switches or jumpers. ")
cm1110HwJmp6AutoMDIX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdix", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwJmp6AutoMDIX.setStatus('current')
if mibBuilder.loadTexts: cm1110HwJmp6AutoMDIX.setDescription("This object identifies the media converter module's hardware Auto MDIX jumper settings. ")
cm1110HwSw1TpAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwSw1TpAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: cm1110HwSw1TpAutoNegotiation.setDescription("Media converter module's current switch setting for copper Auto-Negotiation.")
cm1110HwSw2LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownNormalMode", 0), ("swUpSmartLinkPassthroughMode", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwSw2LinkMode.setStatus('current')
if mibBuilder.loadTexts: cm1110HwSw2LinkMode.setDescription("Media converter module's current switch setting for Link Mode.")
cm1110HwSw3FiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwSw3FiberFaultAlert.setStatus('current')
if mibBuilder.loadTexts: cm1110HwSw3FiberFaultAlert.setDescription("Media converter module's current switch setting for Fiber Fault Alert.")
cm1110HwSw4TpDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownHalf", 0), ("swUpFull", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwSw4TpDuplex.setStatus('current')
if mibBuilder.loadTexts: cm1110HwSw4TpDuplex.setDescription("Media converter module's current switch setting for copper duplex.")
cm1110HwSw5TpSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDown10Mbps", 0), ("swUp100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwSw5TpSpeed.setStatus('current')
if mibBuilder.loadTexts: cm1110HwSw5TpSpeed.setDescription("Media converter module's current switch setting for Link Mode.")
cm1110HwSw6FiberAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1), ("notApplicable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwSw6FiberAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: cm1110HwSw6FiberAutoNegotiation.setDescription("Media converter module's current switch setting for fiber Auto-Ngotiation. This object is not applicable if there is a 100 Mbps SFP modules inserted.")
cm1110HwSw6FiberSfp100Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("swDownHalfDuplex", 0), ("swUpFullDuplex", 1), ("notApplicable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwSw6FiberSfp100Duplex.setStatus('current')
if mibBuilder.loadTexts: cm1110HwSw6FiberSfp100Duplex.setDescription("Media converter module's current switch setting for fiber duplex if a 100 Mbps SFP module is inserted. Otherwise this object is not applicable.")
cm1110HwSw7Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110HwSw7Loopback.setStatus('current')
if mibBuilder.loadTexts: cm1110HwSw7Loopback.setDescription("Media converter module's current switch setting for fiber loopback mode.")
cm1110FiberLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110FiberLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm1110FiberLinkStatus.setDescription("Media converter module's current fiber link status.")
cm1110FiberConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110FiberConnType.setStatus('current')
if mibBuilder.loadTexts: cm1110FiberConnType.setDescription("Media converter module's fiber port connector type.")
cm1110FiberAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 99))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2), ("notApplicable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110FiberAutoNegState.setStatus('current')
if mibBuilder.loadTexts: cm1110FiberAutoNegState.setDescription("Media converter module's current fiber auto-negotiation state. This object is not applicable if the fiber connector type is a 100 Mbps SFP module.")
cm1110FiberSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("speed100Mbps", 1), ("speed1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110FiberSpeed.setStatus('current')
if mibBuilder.loadTexts: cm1110FiberSpeed.setDescription("If fiber auto-negotiation state is complete then this object indicates the media converter module's current fiber auto-negotiated duplex setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm1110FiberDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110FiberDuplex.setStatus('current')
if mibBuilder.loadTexts: cm1110FiberDuplex.setDescription('This object identifies the current fiber port duplex state. ')
cm1110FiberPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110FiberPauseEnh.setStatus('current')
if mibBuilder.loadTexts: cm1110FiberPauseEnh.setDescription("If fiber auto-negotiation state is complete then this object indicates the media converter module's current fiber auto-negotiated pause setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm1110FiberLPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 99))).clone(namedValues=NamedValues(("ok", 0), ("offline", 1), ("linkFault", 2), ("autoNegError", 3), ("notApplicable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110FiberLPRFStatus.setStatus('current')
if mibBuilder.loadTexts: cm1110FiberLPRFStatus.setDescription("Media converter module's fiber Link Partner Remote Fault status. This object is not applicable if there is a 100 Mbps SFP module inserted.")
cm1110FiberSfp100FarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 99))).clone(namedValues=NamedValues(("disable", 0), ("ok", 1), ("receivingFEF", 2), ("sendingFEF", 3), ("notApplicable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110FiberSfp100FarEndFault.setStatus('current')
if mibBuilder.loadTexts: cm1110FiberSfp100FarEndFault.setDescription("Media converter module's current fiber Far End Fault status if a 100 Mbps SFP module is inserted. Otherwise this object is not applicable.")
cm1110FiberReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110FiberReceiveStatus.setStatus('current')
if mibBuilder.loadTexts: cm1110FiberReceiveStatus.setDescription('This object identifies the status of whether light is being received on the fiber port')
cm1110FiberLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 24), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110FiberLoopBack.setStatus('current')
if mibBuilder.loadTexts: cm1110FiberLoopBack.setDescription(" This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1110CopperLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm1110CopperLinkStatus.setDescription("Media converter module's current copper link status.")
cm1110CopperConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("rj45", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperConnType.setStatus('current')
if mibBuilder.loadTexts: cm1110CopperConnType.setDescription("Media converter module's copper connector type.")
cm1110CopperAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperAutoNegState.setStatus('current')
if mibBuilder.loadTexts: cm1110CopperAutoNegState.setDescription("Media converter module's current copper auto-negotiation state.")
cm1110CopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("speed10Mbs", 0), ("speed100Mbps", 1), ("speed1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperSpeed.setStatus('current')
if mibBuilder.loadTexts: cm1110CopperSpeed.setDescription("If copper auto-negotiation state is complete then this object indicates the media converter module's current copper auto-negotiated speed setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm1110CopperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperDuplex.setStatus('current')
if mibBuilder.loadTexts: cm1110CopperDuplex.setDescription("If copper auto-negotiation state is complete then this object indicates the media converter module's current copper auto-negotiated duplex setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm1110CopperCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdi", 0), ("mdix", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperCrossOver.setStatus('current')
if mibBuilder.loadTexts: cm1110CopperCrossOver.setDescription("If copper auto-negotiation state is complete then this object indicates the media converter module's current copper auto-negotiated MDI/MDI-X setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm1110CopperPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperPauseEnh.setStatus('current')
if mibBuilder.loadTexts: cm1110CopperPauseEnh.setDescription("If copper auto-negotiation state is complete then this object indicates the media converter module's current copper auto-negotiated pause setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm1110CopperLPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("remoteFault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperLPRFStatus.setStatus('current')
if mibBuilder.loadTexts: cm1110CopperLPRFStatus.setDescription("Media converter module's copper Link Partner Remote Fault status.")
cm1110CopperAutoSpeedDownshift = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noDownshift", 0), ("downshift", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110CopperAutoSpeedDownshift.setStatus('current')
if mibBuilder.loadTexts: cm1110CopperAutoSpeedDownshift.setDescription('This object identifies the status of the copper auto speed downshift feature. noDownshift indicates that an automatic downshift of the copper speed has not occurred.')
cm1110ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2), )
if mibBuilder.loadTexts: cm1110ConfigTable.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigTable.setDescription("Table of CM-1110 type media converter module's configuration type information.")
cm1110ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1110ConfigSlotIndex"))
if mibBuilder.loadTexts: cm1110ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigEntry.setDescription('Entries of the table, each relating to a separate CM-1110 type media converter module.')
cm1110ConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1110ConfigSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigSlotIndex.setDescription('The Slot number the CM-1110 type module is currently inserted')
cm1110ConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigStatus.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module, verified and and saved to flash. 6-Indicates that the changes in the container folder are to be discarded.')
cm1110ConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigModuleName.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigModuleName.setDescription('This object identifies a user configurable name for the media converter module present in the chassis. ')
cm1110ConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("smartLinkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigLinkMode.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigLinkMode.setDescription("This object identifies the Link Mode for the media converter module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1110ConfigFiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberFaultAlert.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberFaultAlert.setDescription("This object identifies the Fiber Fault Alert setting for the media module. For 100 Mbps SFP modules, this setting is always effectively enabled if Link Mode is set to smartLinkPassthrough. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0). ")
cm1110ConfigMaxPacketsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("maxPacket1522", 0), ("maxPacket2048", 1), ("maxPacket10240", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigMaxPacketsSize.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigMaxPacketsSize.setDescription("This object identifies the media converter module's maximum packet size setting This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1110ConfigFiberPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPortName.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberPortName.setDescription('This object identifies a user definable name for the fiber port.')
cm1110ConfigFiberPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 9), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPortEnable.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberPortEnable.setDescription('This object identifies whether the fiber port is enabled. ')
cm1110ConfigFiberAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 10), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberAutoNegotiation.setDescription("This object identifies whether fiber auto-negotiation is enabled. This object does not apply if the fiber connector type is a 100 Mbps SFP module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1110ConfigFiberSfp100duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("full", 0), ("half", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberSfp100duplex.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberSfp100duplex.setDescription("If the fiber connector type is SFP and it is a 100 Mbps fiber module then this object identifies the duplex setting for the 100 Mbps fiber port. Duplex for 1000 Mbps has to be auto negotiated. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1110ConfigCopperPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPortName.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperPortName.setDescription('This object identifies a user definable name for the copper port. ')
cm1110ConfigCopperPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 13), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPortEnable.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperPortEnable.setDescription('This object identifies whether the fiber port is enabled. ')
cm1110ConfigCopperAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 14), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegotiation.setDescription("This object identifies the whether copper auto-negotiation is enabled. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1110ConfigCopperAutoNegAdv10HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 15), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegAdv10HDX.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegAdv10HDX.setDescription('This object controls whether or the copper port advertises willingness to connect at 10Mbps, half duplex. This setting is ignored when auto-negotiation is disabled.')
cm1110ConfigCopperAutoNegAdv10FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 16), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegAdv10FDX.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegAdv10FDX.setDescription('This object controls whether or the copper port advertises willingness to connect at 10Mbps, full duplex. This setting is ignored when auto-negotiation is disabled.')
cm1110ConfigCopperAutoNegAdv100HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 17), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegAdv100HDX.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegAdv100HDX.setDescription('This object controls whether or the copper port advertises willingness to connect at 100Mbps, half duplex. This setting is ignored when auto-negotiation is disabled.')
cm1110ConfigCopperAutoNegAdv100FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 18), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegAdv100FDX.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegAdv100FDX.setDescription('This object controls whether or the copper port advertises willingness to connect at 100Mbps, full duplex. This setting is ignored when auto-negotiation is disabled.')
cm1110ConfigCopperAutoNegAdv1000FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 19), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegAdv1000FDX.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperAutoNegAdv1000FDX.setDescription('This object controls whether or the copper port advertises willingness to connect at 1000Mbps, full duplex. This setting is ignored when auto-negotiation is disabled.')
cm1110ConfigCopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("speed10Mbs", 0), ("speed100Mbps", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperSpeed.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperSpeed.setDescription("If copper auto-negotiation is disabled then this object identifies the configured cooper speed. 1000 Mbps speed can only be auto negotiated. If copper auto-negotiation is enabled then this object is ignored. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1110ConfigCopperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("full", 0), ("half", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperDuplex.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperDuplex.setDescription("If copper auto-negotiation is disabled then this object identifies the duplex setting for 10 & 100 Mbps for the copper port. Duplex for 1000 Mbps has to be auto negotiated. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1110ConfigCopperCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("mdi", 1), ("mdix", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperCrossOver.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperCrossOver.setDescription("This object identifies the copper MDI/MDI-X setting.This object is read-only if the media converter module's ConfigMode jumper is set to")
cm1110ConfigCopperPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("symmAsymRx", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPauseEnh.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperPauseEnh.setDescription("This object identifies the copper pause (flow control) setting that is a advertised. The settings can be disabled, advertise symmetrical, advertise asymmetrical TX or advertise symmetrical and asymmetrical RX. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm1110ConfigCopperAutoSpeedDownshift = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperAutoSpeedDownshift.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperAutoSpeedDownshift.setDescription('This object identifies the number of times the PHY attempts to establish a Gigabit link before the PHY downshift to the next highest speed. A value of 0 indicates the auto downshift is disabled')
cm1110ConfigCopper10BaseTDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("extended", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopper10BaseTDistance.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopper10BaseTDistance.setDescription('When using cable exceeding 100 meters in 10BASE-T mode this feature should be set to extended(1).')
cm1110ConfigUnidirectionalEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", -1), ("disabled", 0), ("copperToFiber", 1), ("fiberToCopper", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigUnidirectionalEthernet.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigUnidirectionalEthernet.setDescription('Restrict the flow of Ethernet traffic to a single direction. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigPriorityToEgressQueueMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap0.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap0.setDescription('Set the egress queue of frames tagged with 802.1p priority 0. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigPriorityToEgressQueueMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap1.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap1.setDescription('Set the egress queue of frames tagged with 802.1p priority 1. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigPriorityToEgressQueueMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap2.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap2.setDescription('Set the egress queue of frames tagged with 802.1p priority 2. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigPriorityToEgressQueueMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap3.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap3.setDescription('Set the egress queue of frames tagged with 802.1p priority 3. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigPriorityToEgressQueueMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap4.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap4.setDescription('Set the egress queue of frames tagged with 802.1p priority 4. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigPriorityToEgressQueueMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap5.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap5.setDescription('Set the egress queue of frames tagged with 802.1p priority 5. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigPriorityToEgressQueueMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap6.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap6.setDescription('Set the egress queue of frames tagged with 802.1p priority 6. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigPriorityToEgressQueueMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap7.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigPriorityToEgressQueueMap7.setDescription('Set the egress queue of frames tagged with 802.1p priority 7. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopper8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 35), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopper8021pPriority.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopper8021pPriority.setDescription('Use 802.1p tag priority. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperIpTosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 36), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperIpTosPriority.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperIpTosPriority.setDescription('Use IP TOS priority. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperPriorityPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("priority8021p", 0), ("priorityIpTos", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityPrecedence.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityPrecedence.setDescription('Configure priority precedence. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperCongestionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("strict", 0), ("weighted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperCongestionPolicy.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperCongestionPolicy.setDescription('Configure priority congestion policy. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperPriorityMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap0.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap0.setDescription('Change the priority of frames tagged with 802.1p priority 0. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperPriorityMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap1.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap1.setDescription('Change the priority of frames tagged with 802.1p priority 1. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperPriorityMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap2.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap2.setDescription('Change the priority of frames tagged with 802.1p priority 2. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperPriorityMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap3.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap3.setDescription('Change the priority of frames tagged with 802.1p priority 3. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperPriorityMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap4.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap4.setDescription('Change the priority of frames tagged with 802.1p priority 4. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperPriorityMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap5.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap5.setDescription('Change the priority of frames tagged with 802.1p priority 5. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperPriorityMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap6.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap6.setDescription('Change the priority of frames tagged with 802.1p priority 6. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperPriorityMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap7.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperPriorityMap7.setDescription('Change the priority of frames tagged with 802.1p priority 7. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperIngressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26), ("rate100mbps", 27), ("rate200mbps", 28), ("rate300mbps", 29), ("rate400mbps", 30), ("rate500mbps", 31), ("rate600mbps", 32), ("rate700mbps", 33), ("rate800mbps", 34), ("rate900mbps", 35)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperIngressLimit.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperIngressLimit.setDescription('Set a limit on the rate of incoming packets. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperEgressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26), ("rate100mbps", 27), ("rate200mbps", 28), ("rate300mbps", 29), ("rate400mbps", 30), ("rate500mbps", 31), ("rate600mbps", 32), ("rate700mbps", 33), ("rate800mbps", 34), ("rate900mbps", 35)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperEgressLimit.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperEgressLimit.setDescription('Set a limit on the rate of outgoing packets. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperDiscardTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 49), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperDiscardTaggedFrames.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperDiscardTaggedFrames.setDescription('Enable discarding of tagged frames. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperDiscardUntaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 50), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperDiscardUntaggedFrames.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperDiscardUntaggedFrames.setDescription('Enable discarding of untagged frames. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperDefaultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperDefaultVlanId.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperDefaultVlanId.setDescription('Set the default VLAN ID to insert when tagging frames. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperDefaultPriority.setDescription('Set the default frame priority. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperVlanTaggingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("none", 0), ("untag", 1), ("tag", 2), ("doubleTag", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperVlanTaggingAction.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperVlanTaggingAction.setDescription('Set the default tagging action. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperFilterUnknownMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 54), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperFilterUnknownMulticast.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperFilterUnknownMulticast.setDescription('Enable filtering of multicast frames with an unknown destination (This feature may require a media converter module firmware upgrade).')
cm1110ConfigCopperFilterUnknownUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 55), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigCopperFilterUnknownUnicast.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigCopperFilterUnknownUnicast.setDescription('Enable filtering of unicast frames with an unknown destination (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiber8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 56), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiber8021pPriority.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiber8021pPriority.setDescription('Use 802.1p tag priority. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberIpTosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 57), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberIpTosPriority.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberIpTosPriority.setDescription('Use IP TOS priority. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberPriorityPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("priority8021p", 0), ("priorityIpTos", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityPrecedence.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityPrecedence.setDescription('Configure priority precedence. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberCongestionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("strict", 0), ("weighted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberCongestionPolicy.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberCongestionPolicy.setDescription('Configure priority congestion policy. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberPriorityMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap0.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap0.setDescription('Change the priority of frames tagged with 802.1p priority 0. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberPriorityMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap1.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap1.setDescription('Change the priority of frames tagged with 802.1p priority 1. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberPriorityMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap2.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap2.setDescription('Change the priority of frames tagged with 802.1p priority 2. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberPriorityMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap3.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap3.setDescription('Change the priority of frames tagged with 802.1p priority 3. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberPriorityMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap4.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap4.setDescription('Change the priority of frames tagged with 802.1p priority 4. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberPriorityMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap5.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap5.setDescription('Change the priority of frames tagged with 802.1p priority 5. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberPriorityMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap6.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap6.setDescription('Change the priority of frames tagged with 802.1p priority 6. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberPriorityMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap7.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberPriorityMap7.setDescription('Change the priority of frames tagged with 802.1p priority 7. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberIngressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26), ("rate100mbps", 27), ("rate200mbps", 28), ("rate300mbps", 29), ("rate400mbps", 30), ("rate500mbps", 31), ("rate600mbps", 32), ("rate700mbps", 33), ("rate800mbps", 34), ("rate900mbps", 35)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberIngressLimit.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberIngressLimit.setDescription('Set a limit on the rate of incoming packets. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberEgressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26), ("rate100mbps", 27), ("rate200mbps", 28), ("rate300mbps", 29), ("rate400mbps", 30), ("rate500mbps", 31), ("rate600mbps", 32), ("rate700mbps", 33), ("rate800mbps", 34), ("rate900mbps", 35)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberEgressLimit.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberEgressLimit.setDescription('Set a limit on the rate of outgoing packets. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberDiscardTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 70), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberDiscardTaggedFrames.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberDiscardTaggedFrames.setDescription('Enable discarding of tagged frames. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberDiscardUntaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 71), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberDiscardUntaggedFrames.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberDiscardUntaggedFrames.setDescription('Enable discarding of untagged frames. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberDefaultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberDefaultVlanId.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberDefaultVlanId.setDescription('Set the default VLAN ID to insert when tagging frames. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberDefaultPriority.setDescription('Set the default frame priority. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberVlanTaggingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("none", 0), ("untag", 1), ("tag", 2), ("doubleTag", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberVlanTaggingAction.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberVlanTaggingAction.setDescription('Set the default tagging action. (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberFilterUnknownMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 75), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberFilterUnknownMulticast.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberFilterUnknownMulticast.setDescription('Enable filtering of multicast frames with an unknown destination (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberFilterUnknownUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 76), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberFilterUnknownUnicast.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberFilterUnknownUnicast.setDescription('Enable filtering of unicast frames with an unknown destination (This feature may require a media converter module firmware upgrade).')
cm1110ConfigFiberSgmiiInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 2, 1, 77), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110ConfigFiberSgmiiInterface.setStatus('current')
if mibBuilder.loadTexts: cm1110ConfigFiberSgmiiInterface.setDescription('This object identifies whether fiber SGMII interface is enabled.')
cm1110LedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3), )
if mibBuilder.loadTexts: cm1110LedTable.setStatus('current')
if mibBuilder.loadTexts: cm1110LedTable.setDescription("Table of CM-1110 type media converter module's LED status information.")
cm1110LedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1110LedSlotIndex"))
if mibBuilder.loadTexts: cm1110LedEntry.setStatus('current')
if mibBuilder.loadTexts: cm1110LedEntry.setDescription('Entries of the table, each relating to a separate CM-1110 type media converter module.')
cm1110LedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1110LedSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm1110LedSlotIndex.setDescription('The Slot number the CM-1110 type module is currently inserted')
cm1110LedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110LedPWR.setStatus('current')
if mibBuilder.loadTexts: cm1110LedPWR.setDescription('This object identifies the status of the power (PWR) LED on the media converter module. Possible status values are: off(0) - No power to the module onGreen(1) - Power being applied to module blinking(2) - Fiber loopback enabled')
cm1110LedFDF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offHalfDuplex", 0), ("onFullDuplex", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110LedFDF.setStatus('current')
if mibBuilder.loadTexts: cm1110LedFDF.setDescription('This object identifies the status of the Full Duplex Fiber (FDF) LED on the media converter module.')
cm1110LedLKF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110LedLKF.setStatus('current')
if mibBuilder.loadTexts: cm1110LedLKF.setDescription('This object identifies the status of the link fiber (LKF) LED on the media converter module. Possible status values are: off(0) - No fiber link on(1) - Fiber link present')
cm1110LedCopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off10Mbps", 0), ("onYellow100Mbps", 1), ("onGreen1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110LedCopperSpeed.setStatus('current')
if mibBuilder.loadTexts: cm1110LedCopperSpeed.setDescription('This object identifies the status of the link copper speed (100/1000) LED on the management module.')
cm1110LedFDC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offHalfDuplex", 0), ("onFullDuplex", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110LedFDC.setStatus('current')
if mibBuilder.loadTexts: cm1110LedFDC.setDescription('This object identifies the status of the Full Duplex Copper (FDC) LED on the media converter module.')
cm1110LedLKC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110LedLKC.setStatus('current')
if mibBuilder.loadTexts: cm1110LedLKC.setDescription('This object identifies the status of the link copper (LKC) LED on the media converter module. Possible status values are: off(0) - No copper link on(1) - Copper link present')
cm1110RateConvStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4), )
if mibBuilder.loadTexts: cm1110RateConvStatsTable.setStatus('current')
if mibBuilder.loadTexts: cm1110RateConvStatsTable.setDescription("Table of CM-1110 type media converter module's configuration and status type information.")
cm1110RateConvStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1110StatsSlotIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1110MediaPortIndex"))
if mibBuilder.loadTexts: cm1110RateConvStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cm1110RateConvStatsEntry.setDescription('Entries of the table, each relating to a separate CM-1110 type media converter module.')
cm1110StatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1110StatsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm1110StatsSlotIndex.setDescription('The Slot number the CM-1110 type module is currently inserted')
cm1110MediaPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2))))
if mibBuilder.loadTexts: cm1110MediaPortIndex.setStatus('current')
if mibBuilder.loadTexts: cm1110MediaPortIndex.setDescription('Media converter module port index indicating which media port the statistical counters are associated with.')
cm1110PortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInDiscards.setStatus('current')
if mibBuilder.loadTexts: cm1110PortInDiscards.setDescription('A counter that counts the number of good, non-filtered frames that normally would have been forwarded, but could not due to lack of buffer space.')
cm1110PortInFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInFiltered.setStatus('current')
if mibBuilder.loadTexts: cm1110PortInFiltered.setDescription('A counter that counts the number of good frames that were filtered due to ingress switch policy rules. ')
cm1110PortInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInGoodOctets.setStatus('current')
if mibBuilder.loadTexts: cm1110PortInGoodOctets.setDescription('An ingress counter that is the sum of lengths of all good Ethernet frames received on the media port.')
cm1110PortHCInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortHCInGoodOctets.setStatus('current')
if mibBuilder.loadTexts: cm1110PortHCInGoodOctets.setDescription('An ingress counter that is the sum of lengths of all good Ethernet frames received on the media port. This object is a 64-bit version of cm1110PortInGoodOctets.')
cm1110PortInBadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInBadOctets.setStatus('current')
if mibBuilder.loadTexts: cm1110PortInBadOctets.setDescription('An ingress counter that is the sum of lengths of all bad Ethernet frames received on the media port..')
cm1110PortInUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInUnicasts.setStatus('current')
if mibBuilder.loadTexts: cm1110PortInUnicasts.setDescription('An ingress counter that counts the number of good frames received that have a Unicast destination MAC address.')
cm1110PortInBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInBroadcasts.setStatus('current')
if mibBuilder.loadTexts: cm1110PortInBroadcasts.setDescription('An ingress counter that counts the number of good frames received that have a Broadcast destination MAC address.')
cm1110PortInMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInMulticasts.setStatus('current')
if mibBuilder.loadTexts: cm1110PortInMulticasts.setDescription('An ingress counter that counts the number of good frames received that have a Multicast destination MAC address. This count does not include frames counted in the cm1110PortInPauses or the cm1110PortInBroadcasts objects.')
cm1110PortInPauses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInPauses.setStatus('current')
if mibBuilder.loadTexts: cm1110PortInPauses.setDescription('An ingress counter that counts the number of good frames reachieved that have a Pause destination MAC address.')
cm1110PortInUnderSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInUnderSizes.setStatus('current')
if mibBuilder.loadTexts: cm1110PortInUnderSizes.setDescription('An ingress counter that counts the number of frames received with a length less that 64 octets but with a valid FCS.')
cm1110PortInFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInFragments.setStatus('current')
if mibBuilder.loadTexts: cm1110PortInFragments.setDescription('An ingress counter that counts the number of frames received with a length less that 64 octets and an invalid FCS.')
cm1110PortInOversizes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInOversizes.setStatus('current')
if mibBuilder.loadTexts: cm1110PortInOversizes.setDescription('An ingress counter that counts the number of frames received with a length more than the maximum packet size but with a valid FCS. The maximum packet size can be set using the cm1110ConfigMaxPacketsSize object.')
cm1110PortInJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInJabbers.setStatus('current')
if mibBuilder.loadTexts: cm1110PortInJabbers.setDescription('An ingress counter that counts the number of frames received with a length more than the maximum packet size but with a invalid FCS. The maximum packet size can be set using the cm1110ConfigMaxPacketsSize object.')
cm1110PortInRxErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInRxErrs.setStatus('current')
if mibBuilder.loadTexts: cm1110PortInRxErrs.setDescription('An ingress counter that counts the number of frames received with an RxErr signal from the PHY.')
cm1110PortInFcsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortInFcsErrs.setStatus('current')
if mibBuilder.loadTexts: cm1110PortInFcsErrs.setDescription('An ingress counter that counts the number of frames received with a CRC error not counted in the cm1110PortInFragments, cm1110PortInFcsErr, or the cm1110PortInRxErr objects.')
cm1110PortPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: cm1110PortPkts64Octets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of exactly 64 Octets, including those with errors.')
cm1110PortPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortPkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: cm1110PortPkts65to127Octets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of between 65 and 127 Octets inclusive, including those with errors.')
cm1110PortPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortPkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: cm1110PortPkts128to255Octets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of between 128 and 255 Octets inclusive, including those with errors.')
cm1110PortPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortPkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: cm1110PortPkts256to511Octets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of between 256 and 511 Octets inclusive, including those with errors.')
cm1110PortPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortPkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: cm1110PortPkts512to1023Octets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of between 512 and 1023 Octets inclusive, including those with errors.')
cm1110PortPkts1024toMaxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortPkts1024toMaxOctets.setStatus('current')
if mibBuilder.loadTexts: cm1110PortPkts1024toMaxOctets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of between 1024 and maximum packet size octets inclusive, including those with errors. The maximum packet size can be set using the cm1110ConfigMaxPacketsSize object.')
cm1110PortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortOutOctets.setStatus('current')
if mibBuilder.loadTexts: cm1110PortOutOctets.setDescription('An Egress counter that is the sum of lengths of all good Ethernet frames sent on the media port.')
cm1110PortHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortHCOutOctets.setStatus('current')
if mibBuilder.loadTexts: cm1110PortHCOutOctets.setDescription('An Egress counter that is the sum of lengths of all good Ethernet frames sent on the media port. This object is a 64-bit version of cm1110PortOutOctets.')
cm1110PortOutFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortOutFiltered.setStatus('current')
if mibBuilder.loadTexts: cm1110PortOutFiltered.setDescription('A counter that counts the number of good frames that were filtered due to egress switch policy rules.')
cm1110PortOutUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortOutUnicasts.setStatus('current')
if mibBuilder.loadTexts: cm1110PortOutUnicasts.setDescription('An Egress counter that counts the number of good frames sent that have a Unicast destination MAC address.')
cm1110PortOutBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortOutBroadcasts.setStatus('current')
if mibBuilder.loadTexts: cm1110PortOutBroadcasts.setDescription('An Egress counter that counts the number of good frames sent that have a Broadcast destination MAC address.')
cm1110PortOutMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortOutMulticasts.setStatus('current')
if mibBuilder.loadTexts: cm1110PortOutMulticasts.setDescription('An Egress counter that counts the number of good frames sent that have a Multicast destination MAC address. This count does not include frames counted in the cm1110PortOutPauses or the cm1110PortOutBroadcasts objects.')
cm1110PortOutPauses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortOutPauses.setStatus('current')
if mibBuilder.loadTexts: cm1110PortOutPauses.setDescription('An Egress counter that counts the number of good frames reachieved that have a Pause destination MAC address.')
cm1110PortDeferreds = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortDeferreds.setStatus('current')
if mibBuilder.loadTexts: cm1110PortDeferreds.setDescription('An Egress counter that counts the number of successfully transmitted frames that experienced no collisions but are delayed because the medium was busy during the first attempt. This counter is applicable in half-duplex only.')
cm1110PortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortCollisions.setStatus('current')
if mibBuilder.loadTexts: cm1110PortCollisions.setDescription('An Egress counter that counts the number of collision events seen by the MAC not including those counted in cm1110PortSingles, cm1110PortMultiple , cm1110PortExcessives or cm1110PortLates objects. This counter is applicable in half-duplex only.')
cm1110PortSingles = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortSingles.setStatus('current')
if mibBuilder.loadTexts: cm1110PortSingles.setDescription('An Egress counter that counts the number of successfully transmitted frames that experienced exactly one collision. This counter is applicable in half-duplex only.')
cm1110PortMultiples = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortMultiples.setStatus('current')
if mibBuilder.loadTexts: cm1110PortMultiples.setDescription('An Egress counter that counts the number of successfully transmitted frames that experienced more than one collision. This counter is aplicable in half-duplex only.')
cm1110PortExcessives = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortExcessives.setStatus('current')
if mibBuilder.loadTexts: cm1110PortExcessives.setDescription('An Egress counter that counts the number frames dropped in the transmit MAC because the frame experienced 16 consecutive collisions. This counter is applicable in half-duplex only. ')
cm1110PortLates = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortLates.setStatus('current')
if mibBuilder.loadTexts: cm1110PortLates.setDescription('An Egress counter that counts the number times a collision is detected later than 512 bits-times into the transmission of a frame. This counter is applicable in half-duplex only.')
cm1110PortOutFcsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110PortOutFcsErrs.setStatus('current')
if mibBuilder.loadTexts: cm1110PortOutFcsErrs.setDescription('An Egress counter that counts the number frames transmitted with an invalid FCS. ')
cm1110PortResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 4, 1, 39), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110PortResetCounters.setStatus('current')
if mibBuilder.loadTexts: cm1110PortResetCounters.setDescription('Allows the resetting of all cm1110RateConvStats statistical counters for this port. ')
cm1110RateConvAvctTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5), )
if mibBuilder.loadTexts: cm1110RateConvAvctTable.setStatus('current')
if mibBuilder.loadTexts: cm1110RateConvAvctTable.setDescription("Table of CM-1110 type media converter module's ")
cm1110RateConvAvctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm1110AvctSlotIndex"))
if mibBuilder.loadTexts: cm1110RateConvAvctEntry.setStatus('current')
if mibBuilder.loadTexts: cm1110RateConvAvctEntry.setDescription('Entries of the table, each relating to a separate fiber or copper port on the CM-1110 type media converter module.')
cm1110AvctSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm1110AvctSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm1110AvctSlotIndex.setDescription('The Slot number the CM-1110 type module is currently inserted')
cm1110AvctStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 3), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm1110AvctStart.setStatus('current')
if mibBuilder.loadTexts: cm1110AvctStart.setDescription('Set this self-clearing variable to yes initiate the Advanced Virtual Cable Test. Note: During the test, no network data will be passed. ')
cm1110AvctStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notStarted", 0), ("inProgress", 1), ("testComplete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctStatus.setStatus('current')
if mibBuilder.loadTexts: cm1110AvctStatus.setDescription('This object identifies the state of the Advanced Virtual Cable Tester. ')
cm1110AvctTxRxPair1Results = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair1Results.setStatus('current')
if mibBuilder.loadTexts: cm1110AvctTxRxPair1Results.setDescription('Test result code returned from Virtual Cable Test of the Tx/Rx pair one.')
cm1110AvctTxRxPair1Amplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair1Amplitude.setStatus('current')
if mibBuilder.loadTexts: cm1110AvctTxRxPair1Amplitude.setDescription('Amplitude of Tx/Rx pair one in millivolts when test result codes is short or open.')
cm1110AvctTxRxPair1Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair1Distance.setStatus('current')
if mibBuilder.loadTexts: cm1110AvctTxRxPair1Distance.setDescription('Distance in meters to fault when test result codes for Tx/Rx pair one is short or open. ')
cm1110AvctTxRxPair2Results = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair2Results.setStatus('current')
if mibBuilder.loadTexts: cm1110AvctTxRxPair2Results.setDescription('Test result code returned from Virtual Cable Test of the Tx/Rx pair two.')
cm1110AvctTxRxPair2Amplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair2Amplitude.setStatus('current')
if mibBuilder.loadTexts: cm1110AvctTxRxPair2Amplitude.setDescription('Amplitude of Tx/Rx pair two in millivolts when test result codes is short or open.')
cm1110AvctTxRxPair2Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair2Distance.setStatus('current')
if mibBuilder.loadTexts: cm1110AvctTxRxPair2Distance.setDescription('Distance in meters to fault when test result codes for Tx/Rx pair two is short or open. ')
cm1110AvctTxRxPair3Results = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair3Results.setStatus('current')
if mibBuilder.loadTexts: cm1110AvctTxRxPair3Results.setDescription('Test result code returned from Virtual Cable Test of the Tx/Rx pair three.')
cm1110AvctTxRxPair3Amplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair3Amplitude.setStatus('current')
if mibBuilder.loadTexts: cm1110AvctTxRxPair3Amplitude.setDescription('Amplitude of Tx/Rx pair three in millivolts when test result codes is short or open.')
cm1110AvctTxRxPair3Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair3Distance.setStatus('current')
if mibBuilder.loadTexts: cm1110AvctTxRxPair3Distance.setDescription('Distance in meters to fault when test result codes for Tx/Rx pair three is short or open. ')
cm1110AvctTxRxPair4Results = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair4Results.setStatus('current')
if mibBuilder.loadTexts: cm1110AvctTxRxPair4Results.setDescription('Test result code returned from Virtual Cable Test of Tx/Rx pair four.')
cm1110AvctTxRxPair4Amplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair4Amplitude.setStatus('current')
if mibBuilder.loadTexts: cm1110AvctTxRxPair4Amplitude.setDescription('Amplitude of Tx/Rx pair four in millivolts when test result codes is short or open.')
cm1110AvctTxRxPair4Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 3, 5, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm1110AvctTxRxPair4Distance.setStatus('current')
if mibBuilder.loadTexts: cm1110AvctTxRxPair4Distance.setDescription('Distance in meters to fault when test result codes for Tx/Rx pair four is short or open. ')
cm110RateConv = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4))
cm110RateConvTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1), )
if mibBuilder.loadTexts: cm110RateConvTable.setStatus('current')
if mibBuilder.loadTexts: cm110RateConvTable.setDescription("Table of CM-110 type media converter module's configuration and status type information.")
cm110RateConvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm110SlotIndex"))
if mibBuilder.loadTexts: cm110RateConvEntry.setStatus('current')
if mibBuilder.loadTexts: cm110RateConvEntry.setDescription('Entries of the table, each relating to a separate CM-110 type media converter module.')
cm110SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm110SlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm110SlotIndex.setDescription('The Slot number the CM-110 type module is currently inserted')
cm110Modelname = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110Modelname.setStatus('current')
if mibBuilder.loadTexts: cm110Modelname.setDescription('This object identifies the model of media converter module present in the chassis')
cm110ModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110ModelDesc.setStatus('current')
if mibBuilder.loadTexts: cm110ModelDesc.setDescription('This object identifies a static description of the media converter module present in the chassis')
cm110HwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwJmp5ConfigMode.setStatus('current')
if mibBuilder.loadTexts: cm110HwJmp5ConfigMode.setDescription("This object identifies the media converter module's ConfigMode, set by hardware switch on the media converter module. When this object is set to hardwareSwitches(0), the media converter module will disable configuration control from the management module's software and all configuration control comes from the media module's hardware switches or jumpers. ")
cm110HwJmp6AutoMDIX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdix", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwJmp6AutoMDIX.setStatus('current')
if mibBuilder.loadTexts: cm110HwJmp6AutoMDIX.setDescription("This object identifies the media converter module's hardware Auto MDIX jumper settings. ")
cm110HwSw1TpAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwSw1TpAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: cm110HwSw1TpAutoNegotiation.setDescription("Media converter module's current switch setting for copper auto-negotiation.")
cm110HwSw2LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownNormalMode", 0), ("swUpSmartLinkPassthroughMode", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwSw2LinkMode.setStatus('current')
if mibBuilder.loadTexts: cm110HwSw2LinkMode.setDescription("Media converter module's current switch setting for Link Mode.")
cm110HwSw3FarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwSw3FarEndFault.setStatus('current')
if mibBuilder.loadTexts: cm110HwSw3FarEndFault.setDescription("Media converter module's current switch setting for Far End Fault.")
cm110HwSw4TpDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownHalf", 0), ("swUpFull", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwSw4TpDuplex.setStatus('current')
if mibBuilder.loadTexts: cm110HwSw4TpDuplex.setDescription("Media converter module's current switch setting for copper duplex.")
cm110HwSw5TpSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDown10Mbps", 0), ("swUp100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwSw5TpSpeed.setStatus('current')
if mibBuilder.loadTexts: cm110HwSw5TpSpeed.setDescription("Media converter module's current switch setting for Link Mode.")
cm110HwSw6FiberDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownHalf", 0), ("swUpFull", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwSw6FiberDuplex.setStatus('current')
if mibBuilder.loadTexts: cm110HwSw6FiberDuplex.setDescription("Media converter module's current switch setting for fiber duplex.")
cm110HwSw7Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110HwSw7Loopback.setStatus('current')
if mibBuilder.loadTexts: cm110HwSw7Loopback.setDescription("Media converter module's current switch setting for fiber loopback mode.")
cm110FiberLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110FiberLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm110FiberLinkStatus.setDescription("Media converter module's current fiber link status.")
cm110FiberConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110FiberConnType.setStatus('current')
if mibBuilder.loadTexts: cm110FiberConnType.setDescription("Media converter module's fiber port connector type.")
cm110FiberSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("speed100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110FiberSpeed.setStatus('current')
if mibBuilder.loadTexts: cm110FiberSpeed.setDescription("Media converter module's fiber port speed in megabits per second.")
cm110FiberFarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("ok", 1), ("receivingFEF", 2), ("sendingFEF", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110FiberFarEndFault.setStatus('current')
if mibBuilder.loadTexts: cm110FiberFarEndFault.setDescription("Media converter module's current fiber Far End Fault status.")
cm110FiberReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110FiberReceiveStatus.setStatus('current')
if mibBuilder.loadTexts: cm110FiberReceiveStatus.setDescription('This object identifies the status of whether light is being received on the fiber port')
cm110FiberLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 19), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110FiberLoopBack.setStatus('current')
if mibBuilder.loadTexts: cm110FiberLoopBack.setDescription(" This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm110CopperLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110CopperLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm110CopperLinkStatus.setDescription("Media converter module's current copper link status.")
cm110CopperConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("rj45", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110CopperConnType.setStatus('current')
if mibBuilder.loadTexts: cm110CopperConnType.setDescription("Media converter module's copper connector type.")
cm110CopperAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110CopperAutoNegState.setStatus('current')
if mibBuilder.loadTexts: cm110CopperAutoNegState.setDescription("Media converter module's current copper auto-negotiation state.")
cm110CopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("speed10Mbs", 0), ("speed100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110CopperSpeed.setStatus('current')
if mibBuilder.loadTexts: cm110CopperSpeed.setDescription("If copper auto-negotiation state is complete then this object indicates the media converter module's current copper auto-negotiated speed setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm110CopperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110CopperDuplex.setStatus('current')
if mibBuilder.loadTexts: cm110CopperDuplex.setDescription("If copper auto-negotiation state is complete then this object indicates the media converter module's current copper auto-negotiated duplex setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm110CopperCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdi", 0), ("mdix", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110CopperCrossOver.setStatus('current')
if mibBuilder.loadTexts: cm110CopperCrossOver.setDescription("If copper auto-negotiation state is complete then this object indicates the media converter module's current copper auto-negotiated MDI/MDI-X setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm110CopperPause = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110CopperPause.setStatus('current')
if mibBuilder.loadTexts: cm110CopperPause.setDescription("If copper auto-negotiation state is complete then this object indicates the media converter module's current copper auto-negotiated pause (flow control) setting. If auto-negotiation is not complete then the value returned should be ignored.")
cm110CopperLPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("remoteFault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110CopperLPRFStatus.setStatus('current')
if mibBuilder.loadTexts: cm110CopperLPRFStatus.setDescription("Media converter module's fiber Link Partner Remote Fault status.")
cm110ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2), )
if mibBuilder.loadTexts: cm110ConfigTable.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigTable.setDescription("Table of CM-110 type media converter module's configuration and status type information.")
cm110ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm110ConfigSlotIndex"))
if mibBuilder.loadTexts: cm110ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigEntry.setDescription('Entries of the table, each relating to a separate CM-110 type media converter module.')
cm110ConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm110ConfigSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigSlotIndex.setDescription('The Slot number the CM-110 type module is currently inserted')
cm110ConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigStatus.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module, verified and and saved to flash. 6-Indicates that the changes in the container folder are to be discarded.')
cm110ConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigModuleName.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigModuleName.setDescription('This object identifies a user configurable name for the media converter module present in the chassis. ')
cm110ConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("linkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigLinkMode.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigLinkMode.setDescription("This object identifies the Link Mode for the media converter module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm110ConfigFiberFarEndFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberFarEndFault.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberFarEndFault.setDescription("This object identifies the Fiber Fault Alert setting for the media module. This setting is always enabled if Link Mode is set to linkPassthrough. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0). ")
cm110ConfigMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("maxpacket1522", 0), ("maxpacket2048", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigMaxPacketSize.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigMaxPacketSize.setDescription("This object identifies the media converter module's maximum packet size setting This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm110ConfigFiberPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPortName.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberPortName.setDescription('This object identifies a user definable name for the fiber port.')
cm110ConfigFiberPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 9), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPortEnable.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberPortEnable.setDescription('This object identifies whether the fiber port is enabled. ')
cm110ConfigFiberDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("full", 0), ("half", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110ConfigFiberDuplex.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberDuplex.setDescription('This object identifies the fiber port duplex setting. ')
cm110ConfigCopperPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPortName.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperPortName.setDescription('This object identifies a user definable name for the copper port. ')
cm110ConfigCopperPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 12), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPortEnable.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperPortEnable.setDescription('This object identifies whether the fiber port is enabled. ')
cm110ConfigCopperAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperAutoNegotiation.setDescription("This object identifies the whether copper auto-negotiation is enabled. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm110ConfigCopperAutoNegAdv10HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 14), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperAutoNegAdv10HDX.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperAutoNegAdv10HDX.setDescription('This object controls whether or the copper port advertises willingness to connect at 10Mbps, half duplex. This setting is ignored when auto-negotiation is disabled.')
cm110ConfigCopperAutoNegAdv10FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 15), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperAutoNegAdv10FDX.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperAutoNegAdv10FDX.setDescription('This object controls whether or the copper port advertises willingness to connect at 10Mbps, full duplex. This setting is ignored when auto-negotiation is disabled.')
cm110ConfigCopperAutoNegAdv100HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 16), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperAutoNegAdv100HDX.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperAutoNegAdv100HDX.setDescription('This object controls whether or the copper port advertises willingness to connect at 100Mbps, half duplex. This setting is ignored when auto-negotiation is disabled.')
cm110ConfigCopperAutoNegAdv100FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 17), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperAutoNegAdv100FDX.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperAutoNegAdv100FDX.setDescription('This object controls whether or the copper port advertises willingness to connect at 100Mbps, full duplex. This setting is ignored when auto-negotiation is disabled.')
cm110ConfigCopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("speed10Mbs", 0), ("speed100Mbps", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperSpeed.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperSpeed.setDescription('This object identifies the current copper speed in megabits per second. This object is ignored if auto-negotiation is enabled. This object is ignored if auto-negotiation is enabled ')
cm110ConfigCopperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("full", 0), ("half", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperDuplex.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperDuplex.setDescription("This object identifies the copper duplex setting. This object is ignored if auto-negotiation is enabled This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm110ConfigCopperCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("mdi", 1), ("mdix", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperCrossOver.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperCrossOver.setDescription("This object identifies the copper MDI/MDI-X setting.This object is read-only if the media converter module's ConfigMode jumper is set to")
cm110ConfigCopperPause = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPause.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperPause.setDescription("This object identifies the copper's pause (flow control) settings. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm110ConfigCopperExtendDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 22), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperExtendDistance.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperExtendDistance.setDescription('When using cable exceeding 100 meters, the 10BASE-T this feature should be enabled.')
cm110ConfigUnidirectionalEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", -1), ("disabled", 0), ("copperToFiber", 1), ("fiberToCopper", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigUnidirectionalEthernet.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigUnidirectionalEthernet.setDescription('Restrict the flow of Ethernet traffic to a single direction. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigPriorityToEgressQueueMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap0.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap0.setDescription('Set the egress queue of frames tagged with 802.1p priority 0. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigPriorityToEgressQueueMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap1.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap1.setDescription('Set the egress queue of frames tagged with 802.1p priority 1. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigPriorityToEgressQueueMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap2.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap2.setDescription('Set the egress queue of frames tagged with 802.1p priority 2. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigPriorityToEgressQueueMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap3.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap3.setDescription('Set the egress queue of frames tagged with 802.1p priority 3. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigPriorityToEgressQueueMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap4.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap4.setDescription('Set the egress queue of frames tagged with 802.1p priority 4. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigPriorityToEgressQueueMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap5.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap5.setDescription('Set the egress queue of frames tagged with 802.1p priority 5. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigPriorityToEgressQueueMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap6.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap6.setDescription('Set the egress queue of frames tagged with 802.1p priority 6. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigPriorityToEgressQueueMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap7.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigPriorityToEgressQueueMap7.setDescription('Set the egress queue of frames tagged with 802.1p priority 7. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopper8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 32), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopper8021pPriority.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopper8021pPriority.setDescription('Use 802.1p tag priority. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperIpTosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 33), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperIpTosPriority.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperIpTosPriority.setDescription('Use IP TOS priority. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperPriorityPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("priority8021p", 0), ("priorityIpTos", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityPrecedence.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperPriorityPrecedence.setDescription('Configure priority precedence. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperCongestionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("strict", 0), ("weighted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperCongestionPolicy.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperCongestionPolicy.setDescription('Configure priority congestion policy. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperPriorityMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap0.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap0.setDescription('Change the priority of frames tagged with 802.1p priority 0. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperPriorityMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap1.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap1.setDescription('Change the priority of frames tagged with 802.1p priority 1. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperPriorityMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap2.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap2.setDescription('Change the priority of frames tagged with 802.1p priority 2. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperPriorityMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap3.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap3.setDescription('Change the priority of frames tagged with 802.1p priority 3. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperPriorityMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap4.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap4.setDescription('Change the priority of frames tagged with 802.1p priority 4. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperPriorityMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap5.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap5.setDescription('Change the priority of frames tagged with 802.1p priority 5. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperPriorityMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap6.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap6.setDescription('Change the priority of frames tagged with 802.1p priority 6. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperPriorityMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap7.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperPriorityMap7.setDescription('Change the priority of frames tagged with 802.1p priority 7. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperIngressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperIngressLimit.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperIngressLimit.setDescription('Set a limit on the rate of incoming packets. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperEgressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperEgressLimit.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperEgressLimit.setDescription('Set a limit on the rate of outgoing packets. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperDiscardTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 46), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperDiscardTaggedFrames.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperDiscardTaggedFrames.setDescription('Enable discarding of tagged frames. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperDiscardUntaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 47), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperDiscardUntaggedFrames.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperDiscardUntaggedFrames.setDescription('Enable discarding of untagged frames. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperDefaultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperDefaultVlanId.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperDefaultVlanId.setDescription('Set the default VLAN ID to insert when tagging frames. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperDefaultPriority.setDescription('Set the default frame priority. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperVlanTaggingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("none", 0), ("untag", 1), ("tag", 2), ("doubleTag", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperVlanTaggingAction.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperVlanTaggingAction.setDescription('Set the default tagging action. (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperFilterUnknownMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 51), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperFilterUnknownMulticast.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperFilterUnknownMulticast.setDescription('Enable filtering of multicast frames with an unknown destination (This feature may require a media converter module firmware upgrade).')
cm110ConfigCopperFilterUnknownUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 52), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigCopperFilterUnknownUnicast.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigCopperFilterUnknownUnicast.setDescription('Enable filtering of unicast frames with an unknown destination (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiber8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 53), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiber8021pPriority.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiber8021pPriority.setDescription('Use 802.1p tag priority. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberIpTosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 54), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberIpTosPriority.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberIpTosPriority.setDescription('Use IP TOS priority. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberPriorityPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("priority8021p", 0), ("priorityIpTos", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityPrecedence.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberPriorityPrecedence.setDescription('Configure priority precedence. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberCongestionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("strict", 0), ("weighted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberCongestionPolicy.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberCongestionPolicy.setDescription('Configure priority congestion policy. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberPriorityMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap0.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap0.setDescription('Change the priority of frames tagged with 802.1p priority 0. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberPriorityMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap1.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap1.setDescription('Change the priority of frames tagged with 802.1p priority 1. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberPriorityMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap2.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap2.setDescription('Change the priority of frames tagged with 802.1p priority 2. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberPriorityMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap3.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap3.setDescription('Change the priority of frames tagged with 802.1p priority 3. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberPriorityMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap4.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap4.setDescription('Change the priority of frames tagged with 802.1p priority 4. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberPriorityMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap5.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap5.setDescription('Change the priority of frames tagged with 802.1p priority 5. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberPriorityMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap6.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap6.setDescription('Change the priority of frames tagged with 802.1p priority 6. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberPriorityMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap7.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberPriorityMap7.setDescription('Change the priority of frames tagged with 802.1p priority 7. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberIngressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberIngressLimit.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberIngressLimit.setDescription('Set a limit on the rate of incoming packets. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberEgressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberEgressLimit.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberEgressLimit.setDescription('Set a limit on the rate of outgoing packets. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberDiscardTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 67), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberDiscardTaggedFrames.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberDiscardTaggedFrames.setDescription('Enable discarding of tagged frames. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberDiscardUntaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 68), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberDiscardUntaggedFrames.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberDiscardUntaggedFrames.setDescription('Enable discarding of untagged frames. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberDefaultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberDefaultVlanId.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberDefaultVlanId.setDescription('Set the default VLAN ID to insert when tagging frames. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberDefaultPriority.setDescription('Set the default frame priority. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberVlanTaggingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("none", 0), ("untag", 1), ("tag", 2), ("doubleTag", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberVlanTaggingAction.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberVlanTaggingAction.setDescription('Set the default tagging action. (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberFilterUnknownMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 72), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberFilterUnknownMulticast.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberFilterUnknownMulticast.setDescription('Enable filtering of multicast frames with an unknown destination (This feature may require a media converter module firmware upgrade).')
cm110ConfigFiberFilterUnknownUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 2, 1, 73), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110ConfigFiberFilterUnknownUnicast.setStatus('current')
if mibBuilder.loadTexts: cm110ConfigFiberFilterUnknownUnicast.setDescription('Enable filtering of unicast frames with an unknown destination (This feature may require a media converter module firmware upgrade).')
cm110LedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3), )
if mibBuilder.loadTexts: cm110LedTable.setStatus('current')
if mibBuilder.loadTexts: cm110LedTable.setDescription("Table of CM-110 type media converter module's LED status information.")
cm110LedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm110LedSlotIndex"))
if mibBuilder.loadTexts: cm110LedEntry.setStatus('current')
if mibBuilder.loadTexts: cm110LedEntry.setDescription('Entries of the table, each relating to a separate CM-110 type media converter module.')
cm110LedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm110LedSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm110LedSlotIndex.setDescription('The Slot number the CM-110 type module is currently inserted')
cm110LedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110LedPWR.setStatus('current')
if mibBuilder.loadTexts: cm110LedPWR.setDescription('This object identifies the status of the power (PWR) LED on the media converter module. Possible status values are: off(0) - No power to the module onGreen(1) - Power being applied to module blinking(2) - Fiber loopback enabled')
cm110LedFDF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offHalfDuplex", 0), ("onFullDuplex", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110LedFDF.setStatus('current')
if mibBuilder.loadTexts: cm110LedFDF.setDescription('This object identifies the status of the Full Duplex Fiber (FDF) LED on the media converter module.')
cm110LedLKF = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110LedLKF.setStatus('current')
if mibBuilder.loadTexts: cm110LedLKF.setDescription('This object identifies the status of the link fiber (LKF) LED on the media converter module. Possible status values are: off(0) - No fiber link on(1) - Fiber link present')
cm110LedCopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off10Mbps", 0), ("onGreen100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110LedCopperSpeed.setStatus('current')
if mibBuilder.loadTexts: cm110LedCopperSpeed.setDescription('This object identifies the status of the link copper speed (100/1000) LED on the media converter module.')
cm110LedFDC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offHalfDuplex", 0), ("onFullDuplex", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110LedFDC.setStatus('current')
if mibBuilder.loadTexts: cm110LedFDC.setDescription('This object identifies the status of the Full Duplex Copper (FDC) LED on the media converter module.')
cm110LedLKC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110LedLKC.setStatus('current')
if mibBuilder.loadTexts: cm110LedLKC.setDescription('This object identifies the status of the link copper (LKC) LED on the media converter module. Possible status values are: off(0) - No copper link on(1) - Copper link present')
cm110RateConvStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4), )
if mibBuilder.loadTexts: cm110RateConvStatsTable.setStatus('current')
if mibBuilder.loadTexts: cm110RateConvStatsTable.setDescription("Table of CM-110 media converter module's configuration and status type information.")
cm110RateConvStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm110StatsSlotIndex"), (0, "PERLE-MCR-MGT-MIB", "cm110MediaPortIndex"))
if mibBuilder.loadTexts: cm110RateConvStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cm110RateConvStatsEntry.setDescription('Entries of the table, each relating to a separate CM-110 type media converter module.')
cm110StatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm110StatsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm110StatsSlotIndex.setDescription('The Slot number the CM-110 type module is currently inserted')
cm110MediaPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2))))
if mibBuilder.loadTexts: cm110MediaPortIndex.setStatus('current')
if mibBuilder.loadTexts: cm110MediaPortIndex.setDescription('Media converter module port index indicating which media port the statistical counters are associated with.')
cm110PortRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortRxErrors.setStatus('current')
if mibBuilder.loadTexts: cm110PortRxErrors.setDescription('Total number of bad frames received.')
cm110PortTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortTxCollisions.setStatus('current')
if mibBuilder.loadTexts: cm110PortTxCollisions.setDescription('Total number of TX collisions encountered.')
cm110PortInFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInFiltered.setStatus('current')
if mibBuilder.loadTexts: cm110PortInFiltered.setDescription('A counter that counts the number of good frames that were filtered due to ingress switch policy rules. ')
cm110PortInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInGoodOctets.setStatus('current')
if mibBuilder.loadTexts: cm110PortInGoodOctets.setDescription('An ingress counter that is the sum of lengths of all good Ethernet frames received on the media port.')
cm110PortInBadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInBadOctets.setStatus('current')
if mibBuilder.loadTexts: cm110PortInBadOctets.setDescription('An ingress counter that is the sum of lengths of all bad Ethernet frames received on the media port..')
cm110PortInUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInUnicasts.setStatus('current')
if mibBuilder.loadTexts: cm110PortInUnicasts.setDescription('An ingress counter that counts the number of good frames received that have a Unicast destination MAC address.')
cm110PortInBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInBroadcasts.setStatus('current')
if mibBuilder.loadTexts: cm110PortInBroadcasts.setDescription('An ingress counter that counts the number of good frames received that have a Broadcast destination MAC address.')
cm110PortInMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInMulticasts.setStatus('current')
if mibBuilder.loadTexts: cm110PortInMulticasts.setDescription('An ingress counter that counts the number of good frames received that have a Multicast destination MAC address. This count does not include frames counted in the cm1110PortInPauses or the cm1110PortInBroadcasts objects.')
cm110PortInPauses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInPauses.setStatus('current')
if mibBuilder.loadTexts: cm110PortInPauses.setDescription('An ingress counter that counts the number of good frames received that have a Pause destination MAC address.')
cm110PortInUnderSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInUnderSizes.setStatus('current')
if mibBuilder.loadTexts: cm110PortInUnderSizes.setDescription('An ingress counter that counts the number of frames received with a length less that 64 octets but with a valid FCS.')
cm110PortInFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInFragments.setStatus('current')
if mibBuilder.loadTexts: cm110PortInFragments.setDescription('An ingress counter that counts the number of frames received with a length less that 64 octets and an invalid FCS.')
cm110PortInOversizes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInOversizes.setStatus('current')
if mibBuilder.loadTexts: cm110PortInOversizes.setDescription('An ingress counter that counts the number of frames received with a length more than the maximum packet size but with a valid FCS. The maximum packet size can be set using the cm110ConfigMaxPacketsSize object.')
cm110PortInJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInJabbers.setStatus('current')
if mibBuilder.loadTexts: cm110PortInJabbers.setDescription('An ingress counter that counts the number of frames received with a length more than the maximum packet size but with a invalid FCS. The maximum packet size can be set using the cm110ConfigMaxPacketsSize object.')
cm110PortInMACRcvErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInMACRcvErrs.setStatus('current')
if mibBuilder.loadTexts: cm110PortInMACRcvErrs.setDescription('An ingress counter of the number of Rx errors on the receive side of the MAC')
cm110PortInFcsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortInFcsErrs.setStatus('current')
if mibBuilder.loadTexts: cm110PortInFcsErrs.setDescription('An ingress counter of the number of FCS Errors.')
cm110PortPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: cm110PortPkts64Octets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of exactly 64 Octets, including those with errors.')
cm110PortPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortPkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: cm110PortPkts65to127Octets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of between 65 and 127 Octets inclusive, including those with errors.')
cm110PortPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortPkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: cm110PortPkts128to255Octets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of between 128 and 255 Octets inclusive, including those with errors.')
cm110PortPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortPkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: cm110PortPkts256to511Octets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of between 256 and 511 Octets inclusive, including those with errors.')
cm110PortPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortPkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: cm110PortPkts512to1023Octets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of between 512 and 1023 Octets inclusive, including those with errors.')
cm110PortPkts1024toMaxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortPkts1024toMaxOctets.setStatus('current')
if mibBuilder.loadTexts: cm110PortPkts1024toMaxOctets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of between 1024 and maximum packet size octets inclusive, including those with errors. The maximum packet size can be set using the cm1110ConfigMaxPacketsSize object.')
cm110PortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortOutOctets.setStatus('current')
if mibBuilder.loadTexts: cm110PortOutOctets.setDescription('An Egress counter that is the sum of lengths of all good Ethernet frames sent on the media port.')
cm110PortOutUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortOutUnicasts.setStatus('current')
if mibBuilder.loadTexts: cm110PortOutUnicasts.setDescription('An Egress counter that counts the number of good frames sent that have a Unicast destination MAC address.')
cm110PortOutBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortOutBroadcasts.setStatus('current')
if mibBuilder.loadTexts: cm110PortOutBroadcasts.setDescription('An Egress counter that counts the number of good frames sent that have a Broadcast destination MAC address.')
cm110PortOutMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortOutMulticasts.setStatus('current')
if mibBuilder.loadTexts: cm110PortOutMulticasts.setDescription('An Egress counter that counts the number of good frames sent that have a Multicast destination MAC address. This count does not include frames counted in the cm1110PortOutPauses or the cm1110PortOutBroadcasts objects.')
cm110PortOutPauses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortOutPauses.setStatus('current')
if mibBuilder.loadTexts: cm110PortOutPauses.setDescription('An Egress counter that counts the number of good frames received that have a Pause destination MAC address.')
cm110PortDeferreds = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortDeferreds.setStatus('current')
if mibBuilder.loadTexts: cm110PortDeferreds.setDescription('An Egress counter that counts the number of successfully transmitted frames that experienced no collsions but are delayed because the medium was busy during the first attempt. This counter is applicable in half-duplex only.')
cm110PortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortCollisions.setStatus('current')
if mibBuilder.loadTexts: cm110PortCollisions.setDescription('An Egress counter that counts the number of collision events seen by the MAC not including those counted in cm110PortSingles, cm110PortMultiple , cm1110PortExcessives or cm110PortLates objects. This counter is applicable in half-duplex only.')
cm110PortSingles = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortSingles.setStatus('current')
if mibBuilder.loadTexts: cm110PortSingles.setDescription('An Egress counter that counts the number of successfully transmitted frames that experienced exactly one collision. This counter is applicable in half-duplex only.')
cm110PortMultiples = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortMultiples.setStatus('current')
if mibBuilder.loadTexts: cm110PortMultiples.setDescription('An Egress counter that counts the number of successfully transmitted frames that experienced more than one collision. This counter is aplicable in half-duplex only.')
cm110PortExcessives = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortExcessives.setStatus('current')
if mibBuilder.loadTexts: cm110PortExcessives.setDescription('An Egress counter that counts the number frames dropped in the transmit MAC because the frame experienced 16 consecutive collisions. This counter is applicable in half-duplex only. ')
cm110PortLates = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortLates.setStatus('current')
if mibBuilder.loadTexts: cm110PortLates.setDescription('An Egress counter that counts the number times a collision is detected later than 512 bits-times into the transmission of a frame. This counter is applicable in half-duplex only.')
cm110PortOutFcsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110PortOutFcsErrs.setStatus('current')
if mibBuilder.loadTexts: cm110PortOutFcsErrs.setDescription('An Egress counter that counts the number frames transmitted with an invalid FCS. ')
cm110PortResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 4, 1, 37), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110PortResetCounters.setStatus('current')
if mibBuilder.loadTexts: cm110PortResetCounters.setDescription('Allows the resetting of all cm110RateConvStats statistical counters for this port.')
cm110RateConvVctTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5), )
if mibBuilder.loadTexts: cm110RateConvVctTable.setStatus('current')
if mibBuilder.loadTexts: cm110RateConvVctTable.setDescription("Table of CM-110 type media converter module's ")
cm110RateConvVctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm110VctSlotIndex"))
if mibBuilder.loadTexts: cm110RateConvVctEntry.setStatus('current')
if mibBuilder.loadTexts: cm110RateConvVctEntry.setDescription('Entries of the table, each relating to a separate fiber or copper port on the CM-110 type media converter module.')
cm110VctSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm110VctSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm110VctSlotIndex.setDescription('The Slot number the CM-1110 type module is currently inserted')
cm110VctStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 3), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm110VctStart.setStatus('current')
if mibBuilder.loadTexts: cm110VctStart.setDescription('Set this self-clearing variable to yes initiate the Advanced Virtual Cable Test. Note: During the test, no network data will be passed.')
cm110VctStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notStarted", 0), ("inProgress", 1), ("testComplete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110VctStatus.setStatus('current')
if mibBuilder.loadTexts: cm110VctStatus.setDescription('This object identifies the stat of the Advanced Virtual Cable Test. ')
cm110VctTxPairResults = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110VctTxPairResults.setStatus('current')
if mibBuilder.loadTexts: cm110VctTxPairResults.setDescription('Test result code returned from Virtual Cable Test of the Tx pair.')
cm110VctTxPairAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110VctTxPairAmplitude.setStatus('current')
if mibBuilder.loadTexts: cm110VctTxPairAmplitude.setDescription('Amplitude of Tx pair in Volts.')
cm110VctTxPairDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110VctTxPairDistance.setStatus('current')
if mibBuilder.loadTexts: cm110VctTxPairDistance.setDescription('Distance in meters to fault when test result codes is short or open. ')
cm110VctRxPairResults = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110VctRxPairResults.setStatus('current')
if mibBuilder.loadTexts: cm110VctRxPairResults.setDescription('Test result code returned from Virtual Cable Test of the Rx pair.')
cm110VctRxPairAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110VctRxPairAmplitude.setStatus('current')
if mibBuilder.loadTexts: cm110VctRxPairAmplitude.setDescription('Amplitude of Rx pair in Volts.')
cm110VctRxPairDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 4, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm110VctRxPairDistance.setStatus('current')
if mibBuilder.loadTexts: cm110VctRxPairDistance.setDescription('Distance in meters to fault when test result codes is short or open. ')
mcrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5))
mcrMgtTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 1), )
if mibBuilder.loadTexts: mcrMgtTable.setStatus('current')
if mibBuilder.loadTexts: mcrMgtTable.setDescription('Table of MCR-MGT management module status type information.')
mcrMgtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "mcrMgtSlotIndex"))
if mibBuilder.loadTexts: mcrMgtEntry.setStatus('current')
if mibBuilder.loadTexts: mcrMgtEntry.setDescription('Entries of the table, each relating to a separate MCR-MGT type management module.')
mcrMgtSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: mcrMgtSlotIndex.setStatus('current')
if mibBuilder.loadTexts: mcrMgtSlotIndex.setDescription('The Slot number the MCR-MGT module is currently inserted')
mcrMgtModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtModelName.setStatus('current')
if mibBuilder.loadTexts: mcrMgtModelName.setDescription('This object identifies the model name of management module present in the chassis')
mcrMgtModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtModelDesc.setStatus('current')
if mibBuilder.loadTexts: mcrMgtModelDesc.setDescription('This object identifies a static description of the management module present in the chassis')
mcrMgtFailSafeBootLoaderVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtFailSafeBootLoaderVer.setStatus('current')
if mibBuilder.loadTexts: mcrMgtFailSafeBootLoaderVer.setDescription('This object identifies the fail-safe bootloader version of the management module present in the chassis')
mcrMgtUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtUpTime.setStatus('current')
if mibBuilder.loadTexts: mcrMgtUpTime.setDescription('This object identifies the time (in hundredths of a second) since the management module was last re-initialized.')
mcrMgtConsoleDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 1, 1, 7), OnOffValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtConsoleDSR.setStatus('current')
if mibBuilder.loadTexts: mcrMgtConsoleDSR.setDescription('This object identifies the current status of the DSR signal, (active or inactive)')
mcrMgtConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2), )
if mibBuilder.loadTexts: mcrMgtConfigTable.setStatus('current')
if mibBuilder.loadTexts: mcrMgtConfigTable.setDescription('Table of MCR-MGT management module Hardware configuration type information.')
mcrMgtConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "mcrMgtConfigSlotIndex"))
if mibBuilder.loadTexts: mcrMgtConfigEntry.setStatus('current')
if mibBuilder.loadTexts: mcrMgtConfigEntry.setDescription('Entries of the table, each relating to a separate MCR-MGT type management module.')
mcrMgtConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: mcrMgtConfigSlotIndex.setStatus('current')
if mibBuilder.loadTexts: mcrMgtConfigSlotIndex.setDescription('The Slot number the MCR-MGT module is currently inserted')
mcrMgtConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigStatus.setStatus('current')
if mibBuilder.loadTexts: mcrMgtConfigStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module, verified and and saved to flash. 6-Indicates that the changes in the container folder are to be discarded.')
mcrMgtConfigEthSpeedDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 7))).clone(namedValues=NamedValues(("auto", 0), ("speed10Half", 1), ("speed10Full", 2), ("speed100Half", 3), ("speed100Full", 4), ("speed1000", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigEthSpeedDuplex.setStatus('current')
if mibBuilder.loadTexts: mcrMgtConfigEthSpeedDuplex.setDescription('Define the Ethernet connection speed/duplex of the twisted pair interface.')
mcrMgtConfigEthCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("mdi", 1), ("mdix", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigEthCrossover.setStatus('current')
if mibBuilder.loadTexts: mcrMgtConfigEthCrossover.setDescription('Define the Ethernet connection crossover TX/RX Pair orientation of the twisted pair interface as auto(0), mdi(1) (straight through) or mdix(2) (crossed over).')
mcrMgtConfigConsolePortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 6), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigConsolePortEnabled.setStatus('current')
if mibBuilder.loadTexts: mcrMgtConfigConsolePortEnabled.setDescription("Determines whether the management module's console port is enabled.")
mcrMgtConfigConsoleSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("b9600", 13), ("b19200", 14), ("b38400", 15), ("b57600", 16), ("b115200", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigConsoleSpeed.setStatus('current')
if mibBuilder.loadTexts: mcrMgtConfigConsoleSpeed.setDescription('Specifies the baud rate of the console port; keep in mind that speed is affected by the length of the cable.')
mcrMgtConfigConsoleDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("d7", 2), ("d8", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigConsoleDataBits.setStatus('current')
if mibBuilder.loadTexts: mcrMgtConfigConsoleDataBits.setDescription('Specifies the number of bits in a byte.')
mcrMgtConfigConsoleParity = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("odd", 1), ("even", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigConsoleParity.setStatus('current')
if mibBuilder.loadTexts: mcrMgtConfigConsoleParity.setDescription('Specifies if you are using Even, Odd, or No parity on the console.')
mcrMgtConfigConsoleStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("s1", 0), ("s2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigConsoleStopBits.setStatus('current')
if mibBuilder.loadTexts: mcrMgtConfigConsoleStopBits.setDescription('Specifies the number of stop bits that follow a byte.')
mcrMgtConfigConsoleFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("soft", 1), ("hard", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigConsoleFlowControl.setStatus('current')
if mibBuilder.loadTexts: mcrMgtConfigConsoleFlowControl.setDescription('Defines whether the data flow is handled by the software (Soft), hardware (Hard), both or None.')
mcrMgtConfigConsoleMonitorDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 2, 1, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcrMgtConfigConsoleMonitorDSR.setStatus('current')
if mibBuilder.loadTexts: mcrMgtConfigConsoleMonitorDSR.setDescription('Specifies whether the RS-232 signal DSR (Data Set Ready) should be monitored, for the console port. When DSR is monitored and the management module detects the DSR signal go inactive then the current console management session will be reset. ')
mcrMgtLedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 3), )
if mibBuilder.loadTexts: mcrMgtLedTable.setStatus('current')
if mibBuilder.loadTexts: mcrMgtLedTable.setDescription('Table of MCR-MGT management module LED information.')
mcrMgtLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "mcrMgtLedSlotIndex"))
if mibBuilder.loadTexts: mcrMgtLedEntry.setStatus('current')
if mibBuilder.loadTexts: mcrMgtLedEntry.setDescription('Entries of the table, each relating to a separate MCR-MGT type management module.')
mcrMgtLedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: mcrMgtLedSlotIndex.setStatus('current')
if mibBuilder.loadTexts: mcrMgtLedSlotIndex.setDescription('The Slot number the MCR-MGT module is currently inserted')
mcrMgtLedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtLedPWR.setStatus('current')
if mibBuilder.loadTexts: mcrMgtLedPWR.setDescription('This object identifies the status of the power (PWR) LED on the management module. Possible status values are: off(0) - No power to the module onGreen(1) - Power being applied to module')
mcrMgtLedALM = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offNoAlarms", 0), ("onRedAlarmsPresent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtLedALM.setStatus('current')
if mibBuilder.loadTexts: mcrMgtLedALM.setDescription('This object identifies the status of the alarm (ALM) LED on the management module. Possible status values are: offNoAlarms(0) - Normal operating condition onRedAlarmsPresent(1) - System hardware or software alarms present')
mcrMgtLedLKC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offLinkDown", 0), ("onGreenLinkUp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtLedLKC.setStatus('current')
if mibBuilder.loadTexts: mcrMgtLedLKC.setDescription('This object identifies the status of the link copper (LKC) LED on the management module. Possible status values are: offLinkDown(0) - Copper link status is DOWN onGreenLinkUp(1) - Copper link status is UP')
mcrMgtLedCopperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off10Mbps", 0), ("onYellow100Mbps", 1), ("onGreen1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMgtLedCopperSpeed.setStatus('current')
if mibBuilder.loadTexts: mcrMgtLedCopperSpeed.setDescription('This object identifies the status of the link copper speed (100/1000) LED on the management module.')
mcrMgtEthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4), )
if mibBuilder.loadTexts: mcrMgtEthStatsTable.setStatus('current')
if mibBuilder.loadTexts: mcrMgtEthStatsTable.setDescription('Table of MCR-MGT management module Ethernet status and statistics information.')
mcrMgtEthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "mgtEthSlotIndex"))
if mibBuilder.loadTexts: mcrMgtEthStatsEntry.setStatus('current')
if mibBuilder.loadTexts: mcrMgtEthStatsEntry.setDescription('An entry in the Ethernet statistics table, each relating to an Ethernet interface.')
mgtEthSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 2), SlotNumber())
if mibBuilder.loadTexts: mgtEthSlotIndex.setStatus('current')
if mibBuilder.loadTexts: mgtEthSlotIndex.setDescription('The Slot number the MCR-MGT module is currently inserted.')
mgtEthStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 3), GenericTableIndex())
if mibBuilder.loadTexts: mgtEthStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsIfIndex.setDescription('The Ethernet interface number.')
mgtEthStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsName.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsName.setDescription('Displays Ethernet interface name.')
mgtEthStatsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsMacAddress.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsMacAddress.setDescription('Displays the MAC address.')
mgtEthStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsStatus.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsStatus.setDescription('Displays the Ethernet link status - down(0) or up(1).')
mgtEthStatsSpeedDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("speed10Half", 1), ("speed10Full", 2), ("speed100Half", 3), ("speed100Full", 4), ("speed1000Half", 5), ("speed1000Full", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsSpeedDuplex.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsSpeedDuplex.setDescription('Current status of the Ethernet connection speed/duplex twisted pair interface. When the management module does not know the pair speed/duplex, this variable has the value unknown(0). ')
mgtEthStatsBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 8), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsBroadcast.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsBroadcast.setDescription("The management module's Ethernet Broadcast Flags status.")
mgtEthStatsDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 9), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsDebug.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsDebug.setDescription("The management module's Ethernet Debug Flags status.")
mgtEthStatsLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 10), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsLoopback.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsLoopback.setDescription("The management module's Ethernet Loopback Flags status.")
mgtEthStatsPointtoPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 11), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsPointtoPoint.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsPointtoPoint.setDescription("The management module's Ethernet Point to Point Flags status.")
mgtEthStatsNoTrailers = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 12), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsNoTrailers.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsNoTrailers.setDescription("The management module's Ethernet No Trailers Flags status.")
mgtEthStatsRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 13), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsRunning.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsRunning.setDescription("The management module's Ethernet Running Flags status.")
mgtEthStatsNoArp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 14), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsNoArp.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsNoArp.setDescription("The management module's Ethernet No Arp Protocol Flags status.")
mgtEthStatsPromiscuous = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 15), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsPromiscuous.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsPromiscuous.setDescription("The management module's Ethernet Promiscuous Flags status.")
mgtEthStatsRxMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 16), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsRxMulticast.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsRxMulticast.setDescription("The management module's Ethernet Receive all Multicast Flags status.")
mgtEthStatsMasterLoadBalancer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 17), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsMasterLoadBalancer.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsMasterLoadBalancer.setDescription("The management module's Ethernet Master Load Balancer Flags status.")
mgtEthStatsSlaveLoadBalancer = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 18), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsSlaveLoadBalancer.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsSlaveLoadBalancer.setDescription("The management module's Ethernet Slave Load Balancer Flags status.")
mgtEthStatsMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 19), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsMulticast.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsMulticast.setDescription("The management module's Ethernet Multicast Flags status.")
mgtEthStatsSetMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 20), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsSetMedia.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsSetMedia.setDescription("The management module's Ethernet Set Media Flags status.")
mgtEthStatsAutoMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 21), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsAutoMedia.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsAutoMedia.setDescription("The management module's Ethernet Auto Media Flags status.")
mgtEthStatsDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 22), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsDynamic.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsDynamic.setDescription("The management module's Ethernet Dynamic Flags status.")
mgtEthStatsLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsLocalAddress.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsLocalAddress.setDescription("The management module's Ethernet local IPv4 address.")
mgtEthStatsSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsSubnetMask.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsSubnetMask.setDescription("The management module's Ethernet IPv4 subnet mask.")
mgtEthStatsBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsBroadcastAddress.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsBroadcastAddress.setDescription("The management module's Ethernet Broadcast address.")
mgtEthStatsMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsMtu.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsMtu.setDescription("The management module's Ethernet MTU.")
mgtEthStatsTxQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsTxQLen.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsTxQLen.setDescription("The management module's Ethernet TX Queue Length.")
mgtEthStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsRxBytes.setDescription("The management module's Ethernet RX Bytes count.")
mgtEthStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsTxBytes.setDescription("The management module's Ethernet TX Bytes count.")
mgtEthStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsRxPackets.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsRxPackets.setDescription("The management module's Ethernet RX Packets count.")
mgtEthStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsTxPackets.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsTxPackets.setDescription("The management module's Ethernet TX Packets count.")
mgtEthStatsRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsRxErrors.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsRxErrors.setDescription("The management module's Ethernet RX Packets Errors count.")
mgtEthStatsTxPktErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsTxPktErrors.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsTxPktErrors.setDescription("The management module's Ethernet TX Packets Errors count.")
mgtEthStatsRxDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsRxDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsRxDroppedPkts.setDescription("The management module's Ethernet RX Dropped packets count.")
mgtEthStatsTxDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsTxDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsTxDroppedPkts.setDescription("The management module's Ethernet TX Dropped packets count.")
mgtEthStatsRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsRxOverruns.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsRxOverruns.setDescription("The management module's Ethernet RX Overruns count")
mgtEthStatsTxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsTxOverruns.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsTxOverruns.setDescription("The management module's Ethernet TX Overruns count.")
mgtEthStatsRxFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsRxFrameErrs.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsRxFrameErrs.setDescription("The management module's Ethernet RX Frame Errors count.")
mgtEthStatsTxCarrierErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsTxCarrierErrs.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsTxCarrierErrs.setDescription("The management module's Ethernet TX Carrier Errors count")
mgtEthStatsCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 5, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtEthStatsCollisions.setStatus('current')
if mibBuilder.loadTexts: mgtEthStatsCollisions.setDescription("The management module's Ethernet Collisions count.")
cm10gFixed = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8))
cm10gFixedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1), )
if mibBuilder.loadTexts: cm10gFixedTable.setStatus('current')
if mibBuilder.loadTexts: cm10gFixedTable.setDescription("Table of CM-10G type media converter module's status type information.")
cm10gFixedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm10gSlotIndex"))
if mibBuilder.loadTexts: cm10gFixedEntry.setStatus('current')
if mibBuilder.loadTexts: cm10gFixedEntry.setDescription('Entries of the table, each relating to a separate CM-10G type media converter module.')
cm10gSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm10gSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm10gSlotIndex.setDescription('The Slot number the CM-10G type module is currently inserted')
cm10gModelname = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gModelname.setStatus('current')
if mibBuilder.loadTexts: cm10gModelname.setDescription('This object identifies the model of media converter module present in the chassis')
cm10gModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gModelDesc.setStatus('current')
if mibBuilder.loadTexts: cm10gModelDesc.setDescription('This object identifies a static description of the media converter module present in the chassis')
cm10gHwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gHwJmp5ConfigMode.setStatus('current')
if mibBuilder.loadTexts: cm10gHwJmp5ConfigMode.setDescription("This object identifies the media converter module's ConfigMode, set by hardware jumper J5 on the media converter module. When this object is set to hardwareSwitches(0), the media converter module will disable configuration control from the management module's software and all configuration control comes from the media converter module's hardware switches or jumpers. ")
cm10gHwSw1OperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("test", 0), ("data", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gHwSw1OperationMode.setStatus('current')
if mibBuilder.loadTexts: cm10gHwSw1OperationMode.setDescription("Media converter module's current switch setting for operation mode. Data mode is for normal data transmission.")
cm10gHwSw2LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownSmartLinkPassthrough", 0), ("swUpStandard", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gHwSw2LinkMode.setStatus('current')
if mibBuilder.loadTexts: cm10gHwSw2LinkMode.setDescription("Media converter module's current switch setting for Link Mode. If the Operation switch is set to Test, then this object indicates whether the port is in loopback or performing the build in link-test.")
cm10gHwSw3FiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gHwSw3FiberFaultAlert.setStatus('current')
if mibBuilder.loadTexts: cm10gHwSw3FiberFaultAlert.setDescription("Media converter module's current switch setting for Fiber Fault Alert. If the Operation switch is set to Test, then this object indicates which port is in test mode")
cm10gHwSw4Port1EdcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gHwSw4Port1EdcMode.setStatus('current')
if mibBuilder.loadTexts: cm10gHwSw4Port1EdcMode.setDescription('This oject indicates the current switch setting for EDC auto mode for port 1. This object only applies to SFP moudles.')
cm10gHwSw5Port2EdcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gHwSw5Port2EdcMode.setStatus('current')
if mibBuilder.loadTexts: cm10gHwSw5Port2EdcMode.setDescription('This oject indicates the current switch setting for EDC auto mode for port 2. This object only applies to SFP moudles.')
cm10gPort1LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("shutdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort1LinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm10gPort1LinkStatus.setDescription("Media converter module's current fiber link status (port 1).")
cm10gPort1ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6), ("xfp", 7), ("sfpPlus", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort1ConnType.setStatus('current')
if mibBuilder.loadTexts: cm10gPort1ConnType.setDescription("Media converter module's fiber port connector type (port 1).")
cm10gPort1AutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort1AutoNegState.setStatus('current')
if mibBuilder.loadTexts: cm10gPort1AutoNegState.setDescription("Media converter module's current fiber auto-negotiation state (port 1).")
cm10gPort1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("speed10Mbps", 0), ("speed100Mbps", 1), ("speed1000Mbps", 2), ("speed10Gbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort1Speed.setStatus('current')
if mibBuilder.loadTexts: cm10gPort1Speed.setDescription("Media converter module's fiber port speed in megabits per second (port 1).")
cm10gPort1Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort1Duplex.setStatus('current')
if mibBuilder.loadTexts: cm10gPort1Duplex.setDescription("If fiber auto-negotiation state is complete then this object indicates the media converter module's current fiber auto-negotiated duplex setting. If auto-negotiation is not complete then the value returned should be ignored. (Port 1)")
cm10gPort1PauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort1PauseEnh.setStatus('current')
if mibBuilder.loadTexts: cm10gPort1PauseEnh.setDescription("If fiber auto-negotiation state is complete then this object indicates the media converter module's current fiber auto-negotiated pause setting. If auto-negotiation is not complete then the value returned should be ignored. (Port 1)")
cm10gPort1ReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort1ReceiveStatus.setStatus('current')
if mibBuilder.loadTexts: cm10gPort1ReceiveStatus.setDescription('This object identifies the status of whether light is being received on the fiber port (port 1)')
cm10gPort2LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("shutdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort2LinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm10gPort2LinkStatus.setDescription("Media converter module's current fiber link status (port 2).")
cm10gPort2ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6), ("xfp", 7), ("sfpPlus", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort2ConnType.setStatus('current')
if mibBuilder.loadTexts: cm10gPort2ConnType.setDescription("Media converter module's fiber port connector type (port 2).")
cm10gPort2AutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort2AutoNegState.setStatus('current')
if mibBuilder.loadTexts: cm10gPort2AutoNegState.setDescription("Media converter module's current fiber auto-negotiation state (port 2).")
cm10gPort2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("speed10Mbps", 0), ("speed100Mbps", 1), ("speed1000Mbps", 2), ("speed10Gbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort2Speed.setStatus('current')
if mibBuilder.loadTexts: cm10gPort2Speed.setDescription("Media converter module's fiber port speed in megabits per second (port 2).")
cm10gPort2Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort2Duplex.setStatus('current')
if mibBuilder.loadTexts: cm10gPort2Duplex.setDescription("If fiber auto-negotiation state is complete then this object indicates the media converter module's current fiber auto-negotiated duplex setting. If auto-negotiation is not complete then the value returned should be ignored. (Port 2)")
cm10gPort2PauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort2PauseEnh.setStatus('current')
if mibBuilder.loadTexts: cm10gPort2PauseEnh.setDescription("If fiber auto-negotiation state is complete then this object indicates the media converter module's current fiber auto-negotiated pause setting. If auto-negotiation is not complete then the value returned should be ignored. (Port 2)")
cm10gPort2ReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPort2ReceiveStatus.setStatus('current')
if mibBuilder.loadTexts: cm10gPort2ReceiveStatus.setDescription('This object identifies the status of whether light is being received on the fiber port (port 2)')
cm10gPortLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("port1", 1), ("port2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gPortLoopBack.setStatus('current')
if mibBuilder.loadTexts: cm10gPortLoopBack.setDescription("Media converter module's current port loopback mode setting. Writing to this object will change the current settings. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gPortTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("port1", 1), ("port2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gPortTestMode.setStatus('current')
if mibBuilder.loadTexts: cm10gPortTestMode.setDescription("Media converter module's current port test mode setting.")
cm10gConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2), )
if mibBuilder.loadTexts: cm10gConfigTable.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigTable.setDescription("Table of CM-10G type media converter module's configuration type information.")
cm10gConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm10gConfigSlotIndex"))
if mibBuilder.loadTexts: cm10gConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigEntry.setDescription('Entries of the table, each relating to a separate CM-10G type media converter module.')
cm10gConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm10gConfigSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigSlotIndex.setDescription('The Slot number the CM-10G type module is currently inserted')
cm10gConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigStatus.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module, verified and and saved to flash. 6-Indicates that the changes in the container folder are to be discarded.')
cm10gConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigModuleName.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigModuleName.setDescription('This object identifies a user configurable name for the media converter module present in the chassis. ')
cm10gConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("smartLinkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigLinkMode.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigLinkMode.setDescription("This object identifies the Link Mode for the media converter module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigFiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigFiberFaultAlert.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigFiberFaultAlert.setDescription("This object identifies the Fiber Fault Alert setting for the media module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0). ")
cm10gConfigFiberAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 7), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigFiberAutoNeg.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigFiberAutoNeg.setDescription("This object identifies the wither fiber auto-negotiation is enabled for both ports. This only applies if 1G SFP modules are in use. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1Name.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort1Name.setDescription('This object identifies a user definable name for port 1.')
cm10gConfigPort1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 9), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1Enable.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort1Enable.setDescription('This object identifies whether port 1 is enabled.')
cm10gConfigPort1EdcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 0), ("alternate", 1), ("linear", 2), ("limiting", 3), ("cx1", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1EdcMode.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort1EdcMode.setDescription("This object identifies the EDC mode for this port. This config option only applies for an SFP module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort1FecEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 11), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1FecEnable.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort1FecEnable.setDescription("This object identifies the whether FEC control is enabled for this port. This config option only applies for an XFP module. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort1FecAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1FecAmplitude.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort1FecAmplitude.setDescription("This object identifies the FEC Amplitude value for this port. This config option only applies for an XFP module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort1FecPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1FecPhase.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort1FecPhase.setDescription("This object identifies the FEC phase value for this port. This config option only applies for an XFP module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort1WavelengthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 14), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1WavelengthEnable.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort1WavelengthEnable.setDescription("This object identifies whether Wavelength fine tuning is enabled for this port. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort1WavelengthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1WavelengthValue.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort1WavelengthValue.setDescription("This object identifies Wavelength fine tuning value for this port. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort1ChannelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 16), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1ChannelEnable.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort1ChannelEnable.setDescription("This object identifies whether channel number fine tuning is enabled for this port. This config option only applies for an XFP module. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort1ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1ChannelNumber.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort1ChannelNumber.setDescription("This object identifies the channel number fine tuning value for this port. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort1TxDitherEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 18), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1TxDitherEnable.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort1TxDitherEnable.setDescription("This object identifies the whether TX Dither control is enabled on this port. If not enabled the default TX Dither value will be used. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort1TxDitherValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 19), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort1TxDitherValue.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort1TxDitherValue.setDescription("This object identifies the whether TX Dither is enabled for this port. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2Name.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort2Name.setDescription('This object identifies a user definable name for port 2.')
cm10gConfigPort2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 21), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2Enable.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort2Enable.setDescription('This object identifies whether port 2 is enabled.')
cm10gConfigPort2EdcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 0), ("alternate", 1), ("linear", 2), ("limiting", 3), ("cx1", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2EdcMode.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort2EdcMode.setDescription("This object identifies the EDC mode for this port. This config option only applies for an SFP module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort2FecEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 23), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2FecEnable.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort2FecEnable.setDescription("This object identifies the whether FEC control is enabled for this port. This config option only applies for an XFP module. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort2FecAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2FecAmplitude.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort2FecAmplitude.setDescription("This object identifies the FEC Amplitude value for this port. This config option only applies for an XFP module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort2FecPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2FecPhase.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort2FecPhase.setDescription("This object identifies the FEC phase value for this port. This config option only applies for an XFP module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort2WavelengthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 26), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2WavelengthEnable.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort2WavelengthEnable.setDescription("This object identifies whether Wavelength fine tuning is enabled for this port. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort2WavelengthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2WavelengthValue.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort2WavelengthValue.setDescription("This object identifies Wavelength fine tuning value for this port. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort2ChannelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 28), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2ChannelEnable.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort2ChannelEnable.setDescription("This object identifies whether channel number fine tuning is enabled for this port. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort2ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2ChannelNumber.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort2ChannelNumber.setDescription("This object identifies the channel number fine tuning value for this port. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort2TxDitherEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 30), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2TxDitherEnable.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort2TxDitherEnable.setDescription("This object identifies the whether TX Dither control is enabled on this port. If not enabled the default TX Dither value will be used. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gConfigPort2TxDitherValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 2, 1, 31), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gConfigPort2TxDitherValue.setStatus('current')
if mibBuilder.loadTexts: cm10gConfigPort2TxDitherValue.setDescription("This object identifies the whether TX Dither is enabled for this port. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gLedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 3), )
if mibBuilder.loadTexts: cm10gLedTable.setStatus('current')
if mibBuilder.loadTexts: cm10gLedTable.setDescription("Table of CM-10G type media converter module's LED status information.")
cm10gLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm10gLedsSlotIndex"))
if mibBuilder.loadTexts: cm10gLedEntry.setStatus('current')
if mibBuilder.loadTexts: cm10gLedEntry.setDescription('Entries of the table, each relating to a separate CM-10G type media converter module.')
cm10gLedsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm10gLedsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm10gLedsSlotIndex.setDescription('The Slot number the CM-10G type module is currently inserted')
cm10gLedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gLedPWR.setStatus('current')
if mibBuilder.loadTexts: cm10gLedPWR.setDescription('This object identifies the status of the power (PWR) LED on the media converter module. Possible status values are: off(0) - No power to the module onGreen(1) - Power being applied to module blinking(2) - Loopback or Link-Test enabled')
cm10gLedLK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gLedLK1.setStatus('current')
if mibBuilder.loadTexts: cm10gLedLK1.setDescription('This object identifies the status of the port 1 link (LK1) LED on the media converter module. Possible status values are: off(0) - No link on(1) - Port link present')
cm10gLedLK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gLedLK2.setStatus('current')
if mibBuilder.loadTexts: cm10gLedLK2.setDescription('This object identifies the status of the port 2 link (LK2) LED on the media converter module. Possible status values are: off(0) - No link on(1) - Port link present')
exCM = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9))
exCMTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1), )
if mibBuilder.loadTexts: exCMTable.setStatus('current')
if mibBuilder.loadTexts: exCMTable.setDescription("Table of CM-1110 type media converter module's configuration and status type information.")
exCMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMSlotIndex"))
if mibBuilder.loadTexts: exCMEntry.setStatus('current')
if mibBuilder.loadTexts: exCMEntry.setDescription('Entries of the table, each relating to a separate CM-1110 type media converter module.')
exCMSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: exCMSlotIndex.setStatus('current')
if mibBuilder.loadTexts: exCMSlotIndex.setDescription('The Slot number the CM-1110 type module is currently inserted')
exCMModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMModelName.setStatus('current')
if mibBuilder.loadTexts: exCMModelName.setDescription('This object identifies the model of media converter module present in the chassis')
exCMModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMModelDesc.setStatus('current')
if mibBuilder.loadTexts: exCMModelDesc.setDescription('This object identifies a static description of the media converter module present in the chassis')
exCMHwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwJmp5ConfigMode.setStatus('current')
if mibBuilder.loadTexts: exCMHwJmp5ConfigMode.setDescription("This object identifies the media converter module's ConfigMode, set by hardware switch on the media converter module. When this object is set to hardwareSwitches(0), the media converter module will disable configuration control from the management module's software and all configuration control comes from the media module's hardware switches or jumpers. ")
exCMHwSw1AutoLocalRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownRemote", 0), ("swUpAutoLocal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw1AutoLocalRemote.setStatus('current')
if mibBuilder.loadTexts: exCMHwSw1AutoLocalRemote.setDescription("Media converter module's current switch setting for VDSL role.")
exCMHwSw2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownLongRange", 0), ("swUpHighSpeed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw2Rate.setStatus('current')
if mibBuilder.loadTexts: exCMHwSw2Rate.setDescription("Media converter module's current switch setting for VDSL rate/reach.")
exCMHwSw3SymmetricAsymmetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw3SymmetricAsymmetric.setStatus('current')
if mibBuilder.loadTexts: exCMHwSw3SymmetricAsymmetric.setDescription("Media converter module's current switch setting for VDSL band plan.")
exCMHwSw4SnrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDown6db", 0), ("swUp9db", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw4SnrRatio.setStatus('current')
if mibBuilder.loadTexts: exCMHwSw4SnrRatio.setDescription("Media converter module's current switch setting for VDSL signal-to-noise ratio.")
exCMHwSw5Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw5Loopback.setStatus('current')
if mibBuilder.loadTexts: exCMHwSw5Loopback.setDescription("Media converter module's current switch setting for VDSL loopback.")
exCMHwSw6EthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw6EthAutoNeg.setStatus('current')
if mibBuilder.loadTexts: exCMHwSw6EthAutoNeg.setDescription("Media converter module's current switch setting for ethernet auto-negotiation.")
exCMHwSw7EthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDown10Mbps", 0), ("swUp100Mbps", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw7EthSpeed.setStatus('current')
if mibBuilder.loadTexts: exCMHwSw7EthSpeed.setDescription("Media converter module's current switch setting for ethernet speed (when auto-negotiation is disabled).")
exCMHwSw8EthDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownHalf", 0), ("swUpFull", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw8EthDuplex.setStatus('current')
if mibBuilder.loadTexts: exCMHwSw8EthDuplex.setDescription("Media converter module's current switch setting for ethernet duplex (when auto-negotiation is disabled).")
exCMHwSw9LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownLinkPassthrough", 0), ("swUpStandard", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw9LinkMode.setStatus('current')
if mibBuilder.loadTexts: exCMHwSw9LinkMode.setDescription("Media converter module's current switch setting for link mode.")
exCMHwSw10InterlinkFaultFeedback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownEnabled", 0), ("swUpDisabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMHwSw10InterlinkFaultFeedback.setStatus('current')
if mibBuilder.loadTexts: exCMHwSw10InterlinkFaultFeedback.setDescription("Media converter module's current switch setting for interlink fault feedback.")
exCMVdslLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("handshake", 1), ("training", 2), ("up", 3), ("upLogicallyDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslLinkStatus.setStatus('current')
if mibBuilder.loadTexts: exCMVdslLinkStatus.setDescription("Media converter module's current VDSL link status.")
exCMVdslConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 10, 11))).clone(namedValues=NamedValues(("rj45", 9), ("terminalBlock", 10), ("bnc", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslConnType.setStatus('current')
if mibBuilder.loadTexts: exCMVdslConnType.setDescription("Media converter module's VDSL port connector type.")
exCMVdslLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 18), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMVdslLoopBack.setStatus('current')
if mibBuilder.loadTexts: exCMVdslLoopBack.setDescription(" This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
exCMVdslRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("local", 0), ("remote", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslRole.setStatus('current')
if mibBuilder.loadTexts: exCMVdslRole.setDescription("This object identifies the VDSL port's current role.")
exCMVdslProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("notApplicable", 0), ("profile1-AnnexA-R-POTS-D-32-EU-32-30a", 1), ("profile2-AnnexA-R-POTS-D-32-EU-32-17a", 2), ("profile3-AnnexA-R-POTS-D-32-EU-32-12b", 3), ("profile4-AnnexA-R-POTS-D-32-EU-32-12a", 4), ("profile5-AnnexA-R-POTS-D-32-EU-32-8a", 5), ("profile6-AnnexA-R-POTS-D-32-EU-32-8b", 6), ("profile7-AnnexA-R-POTS-D-32-EU-32-8c", 7), ("profile8-AnnexA-R-POTS-D-32-EU-32-8d", 8), ("profile9-AnnexA-R-POTS-D-64-EU-64-30a-NUS0", 9), ("profile10-AnnexA-R-POTS-D-64-EU-64-17a", 10), ("profile11-AnnexB-B7-3-997-M1x-M", 11), ("profile12-AnnexB-B7-4-997-M2x-M-8", 12), ("profile13-AnnexB-B7-5-997-M2x-A", 13), ("profile14-AnnexB-B7-6-997-M2x-M", 14), ("profile15-AnnexB-B7-9-997E17-M2x-A", 15), ("profile16-AnnexB-B7-10-997E30-M2x-NUS0", 16), ("profile17-AnnexB-B8-1-998-M1x-A", 17), ("profile18-AnnexB-B8-2-998-M1x-B", 18), ("profile19-AnnexB-B8-4-998-M2x-A", 19), ("profile20-AnnexB-B8-5-998-M2x-M", 20), ("profile21-AnnexB-B8-6-998-M2x-B", 21), ("profile22-AnnexB-B8-8-998E17-M2x-NUS0", 22), ("profile23-AnnexB-B8-9-998E17-M2x-NUS0-M", 23), ("profile24-AnnexB-B8-10-998ADE17-M2x-NUS0-M", 24), ("profile25-AnnexB-B8-11-998E17-M2x-A", 25), ("profile26-AnnexB-B8-12-998E17-M2x-B", 26), ("profile27-AnnexB-B8-13-998E30-M2x-NUS0", 27), ("profile28-AnnexB-B8-14-998E30-M2x-NUS0-M", 28), ("profile29-AnnexB-B8-15-998ADE30-M2x-NUS0-M", 29), ("profile30-AnnexB-B8-16-998ADE30-M2x-NUS0-A", 30), ("profile31-AnnexC-POTS-25-138-b", 31), ("profile32-AnnexC-POTS-25-276-b", 32), ("profile33-AnnexC-TMC-ISDN", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslProfile.setStatus('current')
if mibBuilder.loadTexts: exCMVdslProfile.setDescription("This object identifies the VDSL port's current profile. This value has no meaning when the VDSL role is remote.")
exCMVdslBitswapping = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslBitswapping.setStatus('current')
if mibBuilder.loadTexts: exCMVdslBitswapping.setDescription("This object identifies the VDSL port's current bitswapping status. This value has no meaning when the VDSL role is remote.")
exCMVdslStatusAttainableDataRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusAttainableDataRateUp.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusAttainableDataRateUp.setDescription("This object identifies the VDSL port's attainable data rate (upstream) in kbps.")
exCMVdslStatusAttainableDataRateDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusAttainableDataRateDown.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusAttainableDataRateDown.setDescription("This object identifies the VDSL port's attainable data rate (downstream) in kbps.")
exCMVdslStatusActualDataRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualDataRateUp.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualDataRateUp.setDescription("This object identifies the VDSL port's actual data rate (upstream) in kbps.")
exCMVdslStatusActualDataRateDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualDataRateDown.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualDataRateDown.setDescription("This object identifies the VDSL port's actual data rate (downstream) in kbps.")
exCMVdslStatusPrevDataRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusPrevDataRateUp.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusPrevDataRateUp.setDescription("This object identifies the VDSL port's previous data rate (upstream) in kbps.")
exCMVdslStatusPrevDataRateDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusPrevDataRateDown.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusPrevDataRateDown.setDescription("This object identifies the VDSL port's previous data rate (downstream) in kbps.")
exCMVdslStatusActualSnrUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUp.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUp.setDescription("This object identifies the VDSL port's actual signal-to-noise ratio (upstream) in 0.1 dB.")
exCMVdslStatusActualSnrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrDown.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSnrDown.setDescription("This object identifies the VDSL port's actual signal-to-noise ratio (downstream) in 0.1 dB.")
exCMVdslStatusActualSnrUs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUs0.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUs0.setDescription("This object identifies the VDSL port's actual signal-to-noise ratio (upstream 0) in 0.1 dB.")
exCMVdslStatusActualSnrUs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUs1.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUs1.setDescription("This object identifies the VDSL port's actual signal-to-noise ratio (upstream 1) in 0.1 dB.")
exCMVdslStatusActualSnrDs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrDs1.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSnrDs1.setDescription("This object identifies the VDSL port's actual signal-to-noise ratio (downstream 1) in 0.1 dB.")
exCMVdslStatusActualSnrUs2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUs2.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUs2.setDescription("This object identifies the VDSL port's actual signal-to-noise ratio (upstream 2) in 0.2 dB.")
exCMVdslStatusActualSnrDs2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrDs2.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSnrDs2.setDescription("This object identifies the VDSL port's actual signal-to-noise ratio (downstream 2) in 0.2 dB.")
exCMVdslStatusActualSnrUs3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUs3.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUs3.setDescription("This object identifies the VDSL port's actual signal-to-noise ratio (upstream 3) in 0.3 dB.")
exCMVdslStatusActualSnrDs3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrDs3.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSnrDs3.setDescription("This object identifies the VDSL port's actual signal-to-noise ratio (downstream 3) in 0.3 dB.")
exCMVdslStatusActualSnrUs4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUs4.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSnrUs4.setDescription("This object identifies the VDSL port's actual signal-to-noise ratio (upstream 4) in 0.4 dB.")
exCMVdslStatusActualSnrDs4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSnrDs4.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSnrDs4.setDescription("This object identifies the VDSL port's actual signal-to-noise ratio (downstream 4) in 0.4 dB.")
exCMVdslStatusActualSignalAttenuationUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUp.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUp.setDescription("This object identifies the VDSL port's actual signal attenuation (upstream) in 0.1 dB.")
exCMVdslStatusActualSignalAttenuationDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationDown.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationDown.setDescription("This object identifies the VDSL port's actual signal attenuation (downstream) in 0.1 dB.")
exCMVdslStatusActualSignalAttenuationUs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUs0.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUs0.setDescription("This object identifies the VDSL port's actual signal attenuation (upstream 0) in 0.1 dB.")
exCMVdslStatusActualSignalAttenuationUs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUs1.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUs1.setDescription("This object identifies the VDSL port's actual signal attenuation (upstream 1) in 0.1 dB.")
exCMVdslStatusActualSignalAttenuationDs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationDs1.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationDs1.setDescription("This object identifies the VDSL port's actual signal attenuation (downstream 1) in 0.1 dB.")
exCMVdslStatusActualSignalAttenuationUs2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUs2.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUs2.setDescription("This object identifies the VDSL port's actual signal attenuation (upstream 2) in 0.2 dB.")
exCMVdslStatusActualSignalAttenuationDs2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationDs2.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationDs2.setDescription("This object identifies the VDSL port's actual signal attenuation (downstream 2) in 0.2 dB.")
exCMVdslStatusActualSignalAttenuationUs3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUs3.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUs3.setDescription("This object identifies the VDSL port's actual signal attenuation (upstream 3) in 0.3 dB.")
exCMVdslStatusActualSignalAttenuationDs3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationDs3.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationDs3.setDescription("This object identifies the VDSL port's actual signal attenuation (downstream 3) in 0.3 dB.")
exCMVdslStatusActualSignalAttenuationUs4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUs4.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationUs4.setDescription("This object identifies the VDSL port's actual signal attenuation (upstream 4) in 0.4 dB.")
exCMVdslStatusActualSignalAttenuationDs4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationDs4.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualSignalAttenuationDs4.setDescription("This object identifies the VDSL port's actual signal attenuation (downstream 4) in 0.4 dB.")
exCMVdslStatusActualLineAttenuationUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUp.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUp.setDescription("This object identifies the VDSL port's actual line attenuation (upstream) in 0.1 dB.")
exCMVdslStatusActualLineAttenuationDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationDown.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationDown.setDescription("This object identifies the VDSL port's actual line attenuation (downstream) in 0.1 dB.")
exCMVdslStatusActualLineAttenuationUs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUs0.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUs0.setDescription("This object identifies the VDSL port's actual line attenuation (upstream 0) in 0.1 dB.")
exCMVdslStatusActualLineAttenuationUs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUs1.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUs1.setDescription("This object identifies the VDSL port's actual line attenuation (upstream 1) in 0.1 dB.")
exCMVdslStatusActualLineAttenuationDs1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationDs1.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationDs1.setDescription("This object identifies the VDSL port's actual line attenuation (downstream 1) in 0.1 dB.")
exCMVdslStatusActualLineAttenuationUs2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUs2.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUs2.setDescription("This object identifies the VDSL port's actual line attenuation (upstream 2) in 0.2 dB.")
exCMVdslStatusActualLineAttenuationDs2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationDs2.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationDs2.setDescription("This object identifies the VDSL port's actual line attenuation (downstream 2) in 0.2 dB.")
exCMVdslStatusActualLineAttenuationUs3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUs3.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUs3.setDescription("This object identifies the VDSL port's actual line attenuation (upstream 3) in 0.3 dB.")
exCMVdslStatusActualLineAttenuationDs3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationDs3.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationDs3.setDescription("This object identifies the VDSL port's actual line attenuation (downstream 3) in 0.3 dB.")
exCMVdslStatusActualLineAttenuationUs4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUs4.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationUs4.setDescription("This object identifies the VDSL port's actual line attenuation (upstream 4) in 0.4 dB.")
exCMVdslStatusActualLineAttenuationDs4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationDs4.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualLineAttenuationDs4.setDescription("This object identifies the VDSL port's actual line attenuation (downstream 4) in 0.4 dB.")
exCMVdslStatusActualInterleaveDelayUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualInterleaveDelayUp.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualInterleaveDelayUp.setDescription("This object identifies the VDSL port's actual interleave delay (upstream) in ms.")
exCMVdslStatusActualInterleaveDelayDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualInterleaveDelayDown.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualInterleaveDelayDown.setDescription("This object identifies the VDSL port's actual interleave delay (downstream) in ms.")
exCMVdslStatusActualInpUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualInpUp.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualInpUp.setDescription("This object identifies the VDSL port's actual INP (impulse noise protection) (upstream).")
exCMVdslStatusActualInpDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualInpDown.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualInpDown.setDescription("This object identifies the VDSL port's actual INP (impulse noise protection) (downstream) in ms.")
exCMVdslStatusActualInterleavingDepthUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualInterleavingDepthUp.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualInterleavingDepthUp.setDescription("This object identifies the VDSL port's actual interleaving depth (upstream).")
exCMVdslStatusActualInterleavingDepthDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualInterleavingDepthDown.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualInterleavingDepthDown.setDescription("This object identifies the VDSL port's actual interleaving depth (impulse noise protection) (downstream) in ms.")
exCMVdslStatusActualInterleavingBlockUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualInterleavingBlockUp.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualInterleavingBlockUp.setDescription("This object identifies the VDSL port's actual interleaving block (upstream).")
exCMVdslStatusActualInterleavingBlockDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualInterleavingBlockDown.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualInterleavingBlockDown.setDescription("This object identifies the VDSL port's actual interleaving block (impulse noise protection) (downstream) in ms.")
exCMVdslStatusActualTransmitPowerUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualTransmitPowerUp.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualTransmitPowerUp.setDescription("This object identifies the VDSL port's actual transmit power (upstream) in 0.1 dBm.")
exCMVdslStatusActualTransmitPowerDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusActualTransmitPowerDown.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusActualTransmitPowerDown.setDescription("This object identifies the VDSL port's actual transmit power (downstream) in 0.1 dBm.")
exCMVdslStatusMaxDataRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusMaxDataRateUp.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusMaxDataRateUp.setDescription("This object identifies the VDSL port's maximum data rate (upstream) in kbps.")
exCMVdslStatusMaxDataRateDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusMaxDataRateDown.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusMaxDataRateDown.setDescription("This object identifies the VDSL port's maximum data rate (downstream) in kbps.")
exCMVdslStatusMinDataRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusMinDataRateUp.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusMinDataRateUp.setDescription("This object identifies the VDSL port's minimum data rate (upstream) in kbps.")
exCMVdslStatusMinDataRateDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusMinDataRateDown.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusMinDataRateDown.setDescription("This object identifies the VDSL port's minimum data rate (downstream) in kbps.")
exCMVdslStatusTargetSnrUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusTargetSnrUp.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusTargetSnrUp.setDescription("This object identifies the VDSL port's target signal-to-noise ratio (upstream) in 0.1 dB.")
exCMVdslStatusTargetSnrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusTargetSnrDown.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusTargetSnrDown.setDescription("This object identifies the VDSL port's target signal-to-noise ratio (downstream) in 0.1 dB.")
exCMVdslStatusMaxInterleaveDelayUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusMaxInterleaveDelayUp.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusMaxInterleaveDelayUp.setDescription("This object identifies the VDSL port's maximum interleave delay (upstream) in ms.")
exCMVdslStatusMaxInterleaveDelayDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusMaxInterleaveDelayDown.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusMaxInterleaveDelayDown.setDescription("This object identifies the VDSL port's maximum interleave delay (downstream) in ms.")
exCMVdslStatusMinInpUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusMinInpUp.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusMinInpUp.setDescription("This object identifies the VDSL port's minimum INP (impulse noise protection) (upstream).")
exCMVdslStatusMinInpDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatusMinInpDown.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatusMinInpDown.setDescription("This object identifies the VDSL port's minimum INP (impulse noise protection) (downstream) in ms.")
exCMVdslRemoteLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("remoteLoopbackOff", 1), ("remoteLoopbackOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMVdslRemoteLoopback.setStatus('current')
if mibBuilder.loadTexts: exCMVdslRemoteLoopback.setDescription("Write remoteLoopbackOff(1) or remoteLoopbackOn(2) to this object to set the loopback state of the remote VDSL peer. This object's value represents the last loopback command sent to the peer.")
exCMVdslRemoteReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notApplicable", 0), ("resetRemotePeer", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMVdslRemoteReset.setStatus('current')
if mibBuilder.loadTexts: exCMVdslRemoteReset.setDescription("Write resetRemotePeer(1) to this object to reset the remote VDSL peer. This object's value has no meaning")
exCMEthernetLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetLinkStatus.setStatus('current')
if mibBuilder.loadTexts: exCMEthernetLinkStatus.setDescription("Media converter module's current Ethernet link status.")
exCMEthernetConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("rj45", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetConnType.setStatus('current')
if mibBuilder.loadTexts: exCMEthernetConnType.setDescription("Media converter module's Ethernet connector type.")
exCMEthernetAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetAutoNegState.setStatus('current')
if mibBuilder.loadTexts: exCMEthernetAutoNegState.setDescription("Media converter module's current Ethernet auto-negotiation state.")
exCMEthernetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("speed10Mbs", 0), ("speed100Mbps", 1), ("speed1000Mbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetSpeed.setStatus('current')
if mibBuilder.loadTexts: exCMEthernetSpeed.setDescription("If Ethernet auto-negotiation state is complete then this object indicates the media converter module's current Ethernet auto-negotiated speed setting. If auto-negotiation is not complete then the value returned should be ignored.")
exCMEthernetDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetDuplex.setStatus('current')
if mibBuilder.loadTexts: exCMEthernetDuplex.setDescription("If Ethernet auto-negotiation state is complete then this object indicates the media converter module's current Ethernet auto-negotiated duplex setting. If auto-negotiation is not complete then the value returned should be ignored.")
exCMEthernetCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdi", 0), ("mdix", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetCrossOver.setStatus('current')
if mibBuilder.loadTexts: exCMEthernetCrossOver.setDescription("If Ethernet auto-negotiation state is complete then this object indicates the media converter module's current Ethernet auto-negotiated MDI/MDI-X setting. If auto-negotiation is not complete then the value returned should be ignored.")
exCMEthernetPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetPauseEnh.setStatus('current')
if mibBuilder.loadTexts: exCMEthernetPauseEnh.setDescription("If Ethernet auto-negotiation state is complete then this object indicates the media converter module's current Ethernet auto-negotiated pause setting. If auto-negotiation is not complete then the value returned should be ignored.")
exCMEthernetLPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("remoteFault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetLPRFStatus.setStatus('current')
if mibBuilder.loadTexts: exCMEthernetLPRFStatus.setDescription("Media converter module's Ethernet Link Partner Remote Fault status.")
exCMEthernetAutoSpeedDownshift = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noDownshift", 0), ("downshift", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetAutoSpeedDownshift.setStatus('current')
if mibBuilder.loadTexts: exCMEthernetAutoSpeedDownshift.setDescription('This object identifies the status of the Ethernet auto speed downshift feature. noDownshift indicates that an automatic downshift of the Ethernet speed has not occurred.')
exCMEthernetMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mdi", 0), ("mdix", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMEthernetMDI.setStatus('current')
if mibBuilder.loadTexts: exCMEthernetMDI.setDescription("This object identifies the Ethernet port's crossover status: MDI or MDI-X.")
exCMVdslFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 93), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: exCMVdslFirmwareVersion.setDescription('This object identifies the version of the VDSL firmware.')
exCMVdslFirmwareDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 94), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslFirmwareDate.setStatus('current')
if mibBuilder.loadTexts: exCMVdslFirmwareDate.setDescription('This object identifies the date of the VDSL firmware')
exCMVdslFirmwareDateString = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 1, 1, 95), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslFirmwareDateString.setStatus('current')
if mibBuilder.loadTexts: exCMVdslFirmwareDateString.setDescription('This object identifies the version of the VDSL firmware, in human-readable format.')
exCMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2), )
if mibBuilder.loadTexts: exCMConfigTable.setStatus('current')
if mibBuilder.loadTexts: exCMConfigTable.setDescription("Table of CM-1110 type media converter module's configuration type information.")
exCMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMConfigSlotIndex"))
if mibBuilder.loadTexts: exCMConfigEntry.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEntry.setDescription('Entries of the table, each relating to a separate CM-1110 type media converter module.')
exCMConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: exCMConfigSlotIndex.setStatus('current')
if mibBuilder.loadTexts: exCMConfigSlotIndex.setDescription('The Slot number the ex-CM type module is currently inserted')
exCMConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigStatus.setStatus('current')
if mibBuilder.loadTexts: exCMConfigStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module, verified and and saved to flash. 6-Indicates that the changes in the container folder are to be discarded.')
exCMConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigModuleName.setStatus('current')
if mibBuilder.loadTexts: exCMConfigModuleName.setDescription('This object identifies a user configurable name for the media converter module present in the chassis. ')
exCMConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("smartLinkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigLinkMode.setStatus('current')
if mibBuilder.loadTexts: exCMConfigLinkMode.setDescription("This object identifies the Link Mode for the media converter module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
exCMConfigInterlinkFaultFeedback = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigInterlinkFaultFeedback.setStatus('current')
if mibBuilder.loadTexts: exCMConfigInterlinkFaultFeedback.setDescription("This object identifies the interlink fault feedback setting for the media module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0). ")
exCMConfigVdslPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPortName.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslPortName.setDescription('This object identifies a user definable name for the VDSL port.')
exCMConfigVdslPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 8), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPortEnable.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslPortEnable.setDescription('This object identifies whether the VDSL port is enabled. ')
exCMConfigVdslProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("auto", 0), ("manual", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslProfileMode.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslProfileMode.setDescription('This object specifies how the VDSL profile is selected. Auto: select through exCMConfigVdslRate and exCMConfigVdslSymmetry Manual: select through exCMConfigVdslProfile.')
exCMConfigVdslRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslRole.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslRole.setDescription('This object specifies the VDSL role: auto, local (CO), or remote (CPE).')
exCMConfigVdslRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("highSpeed", 0), ("longRange", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslRate.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslRate.setDescription('This object specifies the VDSL rate/reach.')
exCMConfigVdslSymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("asymmetric", 0), ("symmetric", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslSymmetry.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslSymmetry.setDescription('This object specifies the VDSL band plan or symmetry.')
exCMConfigVdslProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("profile1-AnnexA-R-POTS-D-32-EU-32-30a", 1), ("profile2-AnnexA-R-POTS-D-32-EU-32-17a", 2), ("profile3-AnnexA-R-POTS-D-32-EU-32-12b", 3), ("profile4-AnnexA-R-POTS-D-32-EU-32-12a", 4), ("profile5-AnnexA-R-POTS-D-32-EU-32-8a", 5), ("profile6-AnnexA-R-POTS-D-32-EU-32-8b", 6), ("profile7-AnnexA-R-POTS-D-32-EU-32-8c", 7), ("profile8-AnnexA-R-POTS-D-32-EU-32-8d", 8), ("profile9-AnnexA-R-POTS-D-64-EU-64-30a-NUS0", 9), ("profile10-AnnexA-R-POTS-D-64-EU-64-17a", 10), ("profile11-AnnexB-B7-3-997-M1x-M", 11), ("profile12-AnnexB-B7-4-997-M2x-M-8", 12), ("profile13-AnnexB-B7-5-997-M2x-A", 13), ("profile14-AnnexB-B7-6-997-M2x-M", 14), ("profile15-AnnexB-B7-9-997E17-M2x-A", 15), ("profile16-AnnexB-B7-10-997E30-M2x-NUS0", 16), ("profile17-AnnexB-B8-1-998-M1x-A", 17), ("profile18-AnnexB-B8-2-998-M1x-B", 18), ("profile19-AnnexB-B8-4-998-M2x-A", 19), ("profile20-AnnexB-B8-5-998-M2x-M", 20), ("profile21-AnnexB-B8-6-998-M2x-B", 21), ("profile22-AnnexB-B8-8-998E17-M2x-NUS0", 22), ("profile23-AnnexB-B8-9-998E17-M2x-NUS0-M", 23), ("profile24-AnnexB-B8-10-998ADE17-M2x-NUS0-M", 24), ("profile25-AnnexB-B8-11-998E17-M2x-A", 25), ("profile26-AnnexB-B8-12-998E17-M2x-B", 26), ("profile27-AnnexB-B8-13-998E30-M2x-NUS0", 27), ("profile28-AnnexB-B8-14-998E30-M2x-NUS0-M", 28), ("profile29-AnnexB-B8-15-998ADE30-M2x-NUS0-M", 29), ("profile30-AnnexB-B8-16-998ADE30-M2x-NUS0-A", 30), ("profile31-AnnexC-POTS-25-138-b", 31), ("profile32-AnnexC-POTS-25-276-b", 32), ("profile33-AnnexC-TMC-ISDN", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslProfile.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslProfile.setDescription('This object specifies the VDSL profile.')
exCMConfigVdslOverrideProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 14), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslOverrideProfile.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslOverrideProfile.setDescription('This object specifies whether to override advanced VDSL profile settings (e.g exCMConfigVdslSignalToNoiseRatioUp).')
exCMConfigVdslSignalToNoiseRatioUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslSignalToNoiseRatioUp.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslSignalToNoiseRatioUp.setDescription('This object represents the advanced VDSL profile setting signal-to-noise ratio (upstream) in 0.1 dB.')
exCMConfigVdslMinDataRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 101064))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslMinDataRateUp.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslMinDataRateUp.setDescription('This object represents the advanced VDSL profile setting minimum data rate (upstream) in kbps.')
exCMConfigVdslMaxDataRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 101064))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslMaxDataRateUp.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslMaxDataRateUp.setDescription('This object represents the advanced VDSL profile setting maximum data rate (upstream) in kbps.')
exCMConfigVdslMaxInterleaveDelayUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslMaxInterleaveDelayUp.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslMaxInterleaveDelayUp.setDescription('This object represents the advanced VDSL profile setting maximum delay (upstream) in ms.')
exCMConfigVdslMinInpUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslMinInpUp.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslMinInpUp.setDescription('This object represents the advanced VDSL profile setting minimum INP (impulse noise protection) (upstream).')
exCMConfigVdslSignalToNoiseRatioDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslSignalToNoiseRatioDown.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslSignalToNoiseRatioDown.setDescription('This object represents the advanced VDSL profile setting signal-to-noise ratio (downstream) in 0.1 dB.')
exCMConfigVdslMinDataRateDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 101064))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslMinDataRateDown.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslMinDataRateDown.setDescription('This object represents the advanced VDSL profile setting minimum data rate (downstream) in kbps.')
exCMConfigVdslMaxDataRateDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 101064))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslMaxDataRateDown.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslMaxDataRateDown.setDescription('This object represents the advanced VDSL profile setting maximum data rate (downstream) in kbps.')
exCMConfigVdslMaxInterleaveDelayDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslMaxInterleaveDelayDown.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslMaxInterleaveDelayDown.setDescription('This object represents the advanced VDSL profile setting maximum delay (downstream) in ms.')
exCMConfigVdslMinInpDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslMinInpDown.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslMinInpDown.setDescription('This object represents the advanced VDSL profile setting minimum INP (impulse noise protection) (downstream).')
exCMConfigVdslBitswapping = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 25), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslBitswapping.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslBitswapping.setDescription('This object represents the advanced VDSL profile setting bitswapping.')
exCMConfigVdslLowBandwidthAlarmUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslLowBandwidthAlarmUp.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslLowBandwidthAlarmUp.setDescription('This object represents the VDSL low bandwidth alarm threshold (upstream) in kbps.')
exCMConfigVdslLowBandwidthAlarmDown = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslLowBandwidthAlarmDown.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslLowBandwidthAlarmDown.setDescription('This object represents the VDSL low bandwidth alarm threshold (downstream) in kbps.')
exCMConfigEthernetPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPortName.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetPortName.setDescription('This object identifies a user definable name for the ethernet port. ')
exCMConfigEthernetPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 29), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPortEnable.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetPortEnable.setDescription('This object identifies whether the VDSL port is enabled. ')
exCMConfigEthernetAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 30), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegotiation.setDescription("This object identifies the whether ethernet auto-negotiation is enabled. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
exCMConfigEthernetAutoNegAdv10HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 31), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegAdv10HDX.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegAdv10HDX.setDescription('This object controls whether or the ethernet port advertises willingness to connect at 10Mbps, half duplex. This setting is ignored when auto-negotiation is disabled.')
exCMConfigEthernetAutoNegAdv10FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 32), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegAdv10FDX.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegAdv10FDX.setDescription('This object controls whether or the ethernet port advertises willingness to connect at 10Mbps, full duplex. This setting is ignored when auto-negotiation is disabled.')
exCMConfigEthernetAutoNegAdv100HDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 33), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegAdv100HDX.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegAdv100HDX.setDescription('This object controls whether or the ethernet port advertises willingness to connect at 100Mbps, half duplex. This setting is ignored when auto-negotiation is disabled.')
exCMConfigEthernetAutoNegAdv100FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 34), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegAdv100FDX.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegAdv100FDX.setDescription('This object controls whether or the ethernet port advertises willingness to connect at 100Mbps, full duplex. This setting is ignored when auto-negotiation is disabled.')
exCMConfigEthernetAutoNegAdv1000FDX = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 35), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegAdv1000FDX.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetAutoNegAdv1000FDX.setDescription('This object controls whether or the ethernet port advertises willingness to connect at 1000Mbps, full duplex. This setting is ignored when auto-negotiation is disabled.')
exCMConfigEthernetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("speed10Mbs", 0), ("speed100Mbps", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetSpeed.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetSpeed.setDescription("If ethernet auto-negotiation is disabled then this object identifies the configured cooper speed. 1000 Mbps speed can only be auto negotiated. If ethernet auto-negotiation is enabled then this object is ignored. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
exCMConfigEthernetDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("full", 0), ("half", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetDuplex.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetDuplex.setDescription("If ethernet auto-negotiation is disabled then this object identifies the duplex setting for 10 & 100 Mbps for the ethernet port. Duplex for 1000 Mbps has to be auto negotiated. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
exCMConfigEthernetCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("mdi", 1), ("mdix", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetCrossOver.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetCrossOver.setDescription("This object identifies the ethernet MDI/MDI-X setting.This object is read-only if the media converter module's ConfigMode jumper is set to")
exCMConfigEthernetPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("symmAsymRx", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPauseEnh.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetPauseEnh.setDescription("This object identifies the ethernet pause (flow control) setting that is a advertised. The settings can be disabled, advertise symmetrical, advertise asymmetrical TX or advertise symmetrical and asymmetrical RX. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
exCMConfigEthernetAutoSpeedDownshift = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetAutoSpeedDownshift.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetAutoSpeedDownshift.setDescription('This object identifies the number of times the PHY attempts to establish a Gigabit link before the PHY downshift to the next highest speed. A value of 0 indicates the auto downshift is disabled')
exCMConfigEthernet10BaseTDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("extended", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernet10BaseTDistance.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernet10BaseTDistance.setDescription('When using cable exceeding 100 meters in 10BASE-T mode this feature should be set to extended(1).')
exCMConfigUnidirectionalEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", -1), ("disabled", 0), ("ethernetToVdsl", 1), ("vdslToEthernet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigUnidirectionalEthernet.setStatus('current')
if mibBuilder.loadTexts: exCMConfigUnidirectionalEthernet.setDescription('Restrict the flow of Ethernet traffic to a single direction. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigPriorityToEgressQueueMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap0.setStatus('current')
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap0.setDescription('Set the egress queue of frames tagged with 802.1p priority 0. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigPriorityToEgressQueueMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap1.setStatus('current')
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap1.setDescription('Set the egress queue of frames tagged with 802.1p priority 1. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigPriorityToEgressQueueMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap2.setStatus('current')
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap2.setDescription('Set the egress queue of frames tagged with 802.1p priority 2. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigPriorityToEgressQueueMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap3.setStatus('current')
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap3.setDescription('Set the egress queue of frames tagged with 802.1p priority 3. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigPriorityToEgressQueueMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap4.setStatus('current')
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap4.setDescription('Set the egress queue of frames tagged with 802.1p priority 4. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigPriorityToEgressQueueMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap5.setStatus('current')
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap5.setDescription('Set the egress queue of frames tagged with 802.1p priority 5. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigPriorityToEgressQueueMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap6.setStatus('current')
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap6.setDescription('Set the egress queue of frames tagged with 802.1p priority 6. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigPriorityToEgressQueueMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap7.setStatus('current')
if mibBuilder.loadTexts: exCMConfigPriorityToEgressQueueMap7.setDescription('Set the egress queue of frames tagged with 802.1p priority 7. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernet8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 51), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernet8021pPriority.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernet8021pPriority.setDescription('Use 802.1p tag priority. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetIpTosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 52), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetIpTosPriority.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetIpTosPriority.setDescription('Use IP TOS priority. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetPriorityPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("priority8021p", 0), ("priorityIpTos", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityPrecedence.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetPriorityPrecedence.setDescription('Configure priority precedence. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetCongestionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("strict", 0), ("weighted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetCongestionPolicy.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetCongestionPolicy.setDescription('Configure priority congestion policy. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetPriorityMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap0.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap0.setDescription('Change the priority of frames tagged with 802.1p priority 0. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetPriorityMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap1.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap1.setDescription('Change the priority of frames tagged with 802.1p priority 1. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetPriorityMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap2.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap2.setDescription('Change the priority of frames tagged with 802.1p priority 2. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetPriorityMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap3.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap3.setDescription('Change the priority of frames tagged with 802.1p priority 3. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetPriorityMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap4.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap4.setDescription('Change the priority of frames tagged with 802.1p priority 4. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetPriorityMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap5.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap5.setDescription('Change the priority of frames tagged with 802.1p priority 5. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetPriorityMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap6.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap6.setDescription('Change the priority of frames tagged with 802.1p priority 6. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetPriorityMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap7.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetPriorityMap7.setDescription('Change the priority of frames tagged with 802.1p priority 7. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetIngressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetIngressLimit.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetIngressLimit.setDescription('Set a limit on the rate of incoming packets. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetEgressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetEgressLimit.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetEgressLimit.setDescription('Set a limit on the rate of outgoing packets. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetDiscardTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 65), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetDiscardTaggedFrames.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetDiscardTaggedFrames.setDescription('Enable discarding of tagged frames. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetDiscardUntaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 66), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetDiscardUntaggedFrames.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetDiscardUntaggedFrames.setDescription('Enable discarding of untagged frames. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetDefaultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetDefaultVlanId.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetDefaultVlanId.setDescription('Set the default VLAN ID to insert when tagging frames. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetDefaultPriority.setDescription('Set the default frame priority. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetVlanTaggingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("none", 0), ("untag", 1), ("tag", 2), ("doubleTag", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetVlanTaggingAction.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetVlanTaggingAction.setDescription('Set the default tagging action. (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetFilterUnknownMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 70), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetFilterUnknownMulticast.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetFilterUnknownMulticast.setDescription('Enable filtering of multicast frames with an unknown destination (This feature may require a media converter module firmware upgrade).')
exCMConfigEthernetFilterUnknownUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 71), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigEthernetFilterUnknownUnicast.setStatus('current')
if mibBuilder.loadTexts: exCMConfigEthernetFilterUnknownUnicast.setDescription('Enable filtering of unicast frames with an unknown destination (This feature may require a media converter module firmware upgrade).')
exCMConfigVdsl8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 72), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdsl8021pPriority.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdsl8021pPriority.setDescription('Use 802.1p tag priority. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslIpTosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 73), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslIpTosPriority.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslIpTosPriority.setDescription('Use IP TOS priority. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslPriorityPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("priority8021p", 0), ("priorityIpTos", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityPrecedence.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslPriorityPrecedence.setDescription('Configure priority precedence. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslCongestionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("strict", 0), ("weighted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslCongestionPolicy.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslCongestionPolicy.setDescription('Configure priority congestion policy. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslPriorityMap0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap0.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap0.setDescription('Change the priority of frames tagged with 802.1p priority 0. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslPriorityMap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap1.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap1.setDescription('Change the priority of frames tagged with 802.1p priority 1. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslPriorityMap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap2.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap2.setDescription('Change the priority of frames tagged with 802.1p priority 2. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslPriorityMap3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap3.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap3.setDescription('Change the priority of frames tagged with 802.1p priority 3. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslPriorityMap4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap4.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap4.setDescription('Change the priority of frames tagged with 802.1p priority 4. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslPriorityMap5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap5.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap5.setDescription('Change the priority of frames tagged with 802.1p priority 5. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslPriorityMap6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap6.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap6.setDescription('Change the priority of frames tagged with 802.1p priority 6. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslPriorityMap7 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap7.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslPriorityMap7.setDescription('Change the priority of frames tagged with 802.1p priority 7. A value of -1 signifies that this feature is not supported by the current media converter module firmware. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslIngressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslIngressLimit.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslIngressLimit.setDescription('Set a limit on the rate of incoming packets. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslEgressLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("notApplicable", -1), ("rateUnlimited", 0), ("rate64kbps", 1), ("rate128kbps", 2), ("rate192kbps", 3), ("rate256kbps", 4), ("rate320kbps", 5), ("rate384kbps", 6), ("rate512kbps", 7), ("rate768kbps", 8), ("rate1mbps", 9), ("rate2mbps", 10), ("rate3mbps", 11), ("rate4mbps", 12), ("rate5mbps", 13), ("rate6mbps", 14), ("rate7mbps", 15), ("rate8mbps", 16), ("rate9mbps", 17), ("rate10mbps", 18), ("rate20mbps", 19), ("rate30mbps", 20), ("rate40mbps", 21), ("rate50mbps", 22), ("rate60mbps", 23), ("rate70mbps", 24), ("rate80mbps", 25), ("rate90mbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslEgressLimit.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslEgressLimit.setDescription('Set a limit on the rate of outgoing packets. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslDiscardTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 86), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslDiscardTaggedFrames.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslDiscardTaggedFrames.setDescription('Enable discarding of tagged frames. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslDiscardUntaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 87), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslDiscardUntaggedFrames.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslDiscardUntaggedFrames.setDescription('Enable discarding of untagged frames. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslDefaultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslDefaultVlanId.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslDefaultVlanId.setDescription('Set the default VLAN ID to insert when tagging frames. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslDefaultPriority.setDescription('Set the default frame priority. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslVlanTaggingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("none", 0), ("untag", 1), ("tag", 2), ("doubleTag", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslVlanTaggingAction.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslVlanTaggingAction.setDescription('Set the default tagging action. (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslFilterUnknownMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 91), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslFilterUnknownMulticast.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslFilterUnknownMulticast.setDescription('Enable filtering of multicast frames with an unknown destination (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslFilterUnknownUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 92), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslFilterUnknownUnicast.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslFilterUnknownUnicast.setDescription('Enable filtering of unicast frames with an unknown destination (This feature may require a media converter module firmware upgrade).')
exCMConfigVdslFastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 2, 1, 93), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMConfigVdslFastMode.setStatus('current')
if mibBuilder.loadTexts: exCMConfigVdslFastMode.setDescription('This object represents the VDSL fast mode setting.')
exCMLedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 3), )
if mibBuilder.loadTexts: exCMLedTable.setStatus('current')
if mibBuilder.loadTexts: exCMLedTable.setDescription("Table of CM-1110 type media converter module's LED status information.")
exCMLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMLedSlotIndex"))
if mibBuilder.loadTexts: exCMLedEntry.setStatus('current')
if mibBuilder.loadTexts: exCMLedEntry.setDescription('Entries of the table, each relating to a separate CM-1110 type media converter module.')
exCMLedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: exCMLedSlotIndex.setStatus('current')
if mibBuilder.loadTexts: exCMLedSlotIndex.setDescription('The Slot number of the module')
exCMLedILNK = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("slowBlinkingGreen", 1), ("fastBlinkingGreen", 2), ("green", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMLedILNK.setStatus('current')
if mibBuilder.loadTexts: exCMLedILNK.setDescription('This object identifies the status of the ILNK (InterLink) LED on the media converter module. Possible status values are: slowBlinkingGreen(1) - ILNK port is idle or handshaking fastBlinkingGreen(2) - ILNK port is training green(3) - ILNK port is up')
exCMLedLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("green", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMLedLOC.setStatus('current')
if mibBuilder.loadTexts: exCMLedLOC.setDescription("This object identifies the status of the Local (LOC) LED on the media converter module. When this LED is green, it indicates that the InterLink port's VDSL role is local.")
exCMLedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMLedPWR.setStatus('current')
if mibBuilder.loadTexts: exCMLedPWR.setDescription('This object identifies the status of the power (PWR) LED on the media converter module. Possible status values are: off(0) - No power to the module onGreen(1) - Power being applied to module blinking(2) - InterLink loopback enabled')
exCMLedETH = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("slowBlinkingGreen", 1), ("green", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMLedETH.setStatus('current')
if mibBuilder.loadTexts: exCMLedETH.setDescription('This object identifies the status of the ETH (Ethernet) LED on the media converter module. Possible status values are: off(0) - ETH port is down slowBlinkingGreen(1) - ETH port is down, due to the VDSL port or peer copper ethernet port being down green(2) - ETH port is up')
exCMLedRMT = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("green", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMLedRMT.setStatus('current')
if mibBuilder.loadTexts: exCMLedRMT.setDescription("This object identifies the status of the Remote (RMT) LED on the media converter module. When this LED is green, it indicates that the InterLink port's VDSL role is remote.")
exCMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4), )
if mibBuilder.loadTexts: exCMStatsTable.setStatus('current')
if mibBuilder.loadTexts: exCMStatsTable.setDescription("Table of CM-1110 type media converter module's configuration and status type information.")
exCMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMStatsSlotIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMMediaPortIndex"))
if mibBuilder.loadTexts: exCMStatsEntry.setStatus('current')
if mibBuilder.loadTexts: exCMStatsEntry.setDescription('Entries of the table, each relating to a separate CM-1110 type media converter module.')
exCMStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 2), SlotNumber())
if mibBuilder.loadTexts: exCMStatsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: exCMStatsSlotIndex.setDescription('The Slot number the ex-1CM type module is currently inserted')
exCMMediaPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: exCMMediaPortIndex.setStatus('current')
if mibBuilder.loadTexts: exCMMediaPortIndex.setDescription('Media converter module port index indicating which media port the statistical counters are associated with.')
exCMPortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInDiscards.setStatus('current')
if mibBuilder.loadTexts: exCMPortInDiscards.setDescription('A counter that counts the number of good, non-filtered frames that normally would have been forwarded, but could not due to lack of buffer space.')
exCMPortInFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInFiltered.setStatus('current')
if mibBuilder.loadTexts: exCMPortInFiltered.setDescription('A counter that counts the number of good frames that were filtered due to ingress switch policy rules. ')
exCMPortInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInGoodOctets.setStatus('current')
if mibBuilder.loadTexts: exCMPortInGoodOctets.setDescription('An ingress counter that is the sum of lengths of all good Ethernet frames received on the media port.')
exCMPortHCInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortHCInGoodOctets.setStatus('current')
if mibBuilder.loadTexts: exCMPortHCInGoodOctets.setDescription('An ingress counter that is the sum of lengths of all good Ethernet frames received on the media port. This object is a 64-bit version of exCMPortInGoodOctets.')
exCMPortInBadOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInBadOctets.setStatus('current')
if mibBuilder.loadTexts: exCMPortInBadOctets.setDescription('An ingress counter that is the sum of lengths of all bad Ethernet frames received on the media port..')
exCMPortInUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInUnicasts.setStatus('current')
if mibBuilder.loadTexts: exCMPortInUnicasts.setDescription('An ingress counter that counts the number of good frames received that have a Unicast destination MAC address.')
exCMPortInBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInBroadcasts.setStatus('current')
if mibBuilder.loadTexts: exCMPortInBroadcasts.setDescription('An ingress counter that counts the number of good frames received that have a Broadcast destination MAC address.')
exCMPortInMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInMulticasts.setStatus('current')
if mibBuilder.loadTexts: exCMPortInMulticasts.setDescription('An ingress counter that counts the number of good frames received that have a Multicast destination MAC address. This count does not include frames counted in the exCMPortInPauses or the exCMPortInBroadcasts objects.')
exCMPortInPauses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInPauses.setStatus('current')
if mibBuilder.loadTexts: exCMPortInPauses.setDescription('An ingress counter that counts the number of good frames reachieved that have a Pause destination MAC address.')
exCMPortInUnderSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInUnderSizes.setStatus('current')
if mibBuilder.loadTexts: exCMPortInUnderSizes.setDescription('An ingress counter that counts the number of frames received with a length less that 64 octets but with a valid FCS.')
exCMPortInFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInFragments.setStatus('current')
if mibBuilder.loadTexts: exCMPortInFragments.setDescription('An ingress counter that counts the number of frames received with a length less that 64 octets and an invalid FCS.')
exCMPortInOversizes = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInOversizes.setStatus('current')
if mibBuilder.loadTexts: exCMPortInOversizes.setDescription('An ingress counter that counts the number of frames received with a length more than the maximum packet size but with a valid FCS. The maximum packet size can be set using the exCMConfigMaxPacketsSize object.')
exCMPortInJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInJabbers.setStatus('current')
if mibBuilder.loadTexts: exCMPortInJabbers.setDescription('An ingress counter that counts the number of frames received with a length more than the maximum packet size but with a invalid FCS. The maximum packet size can be set using the exCMConfigMaxPacketsSize object.')
exCMPortInRxErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInRxErrs.setStatus('current')
if mibBuilder.loadTexts: exCMPortInRxErrs.setDescription('An ingress counter that counts the number of frames received with an RxErr signal from the PHY.')
exCMPortInFcsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortInFcsErrs.setStatus('current')
if mibBuilder.loadTexts: exCMPortInFcsErrs.setDescription('An ingress counter that counts the number of frames received with a CRC error not counted in the exCMPortInFragments, exCMPortInFcsErr, or the exCMPortInRxErr objects.')
exCMPortPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: exCMPortPkts64Octets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of exactly 64 Octets, including those with errors.')
exCMPortPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortPkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: exCMPortPkts65to127Octets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of between 65 and 127 Octets inclusive, including those with errors.')
exCMPortPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortPkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: exCMPortPkts128to255Octets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of between 128 and 255 Octets inclusive, including those with errors.')
exCMPortPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortPkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: exCMPortPkts256to511Octets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of between 256 and 511 Octets inclusive, including those with errors.')
exCMPortPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortPkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: exCMPortPkts512to1023Octets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of between 512 and 1023 Octets inclusive, including those with errors.')
exCMPortPkts1024toMaxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortPkts1024toMaxOctets.setStatus('current')
if mibBuilder.loadTexts: exCMPortPkts1024toMaxOctets.setDescription('A Histogram counter that counts the number of frames received and transmitted with a length of between 1024 and maximum packet size octets inclusive, including those with errors. The maximum packet size can be set using the exCMConfigMaxPacketsSize object.')
exCMPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortOutOctets.setStatus('current')
if mibBuilder.loadTexts: exCMPortOutOctets.setDescription('An Egress counter that is the sum of lengths of all good Ethernet frames sent on the media port.')
exCMPortHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortHCOutOctets.setStatus('current')
if mibBuilder.loadTexts: exCMPortHCOutOctets.setDescription('An Egress counter that is the sum of lengths of all good Ethernet frames sent on the media port. This object is a 64-bit version of exCMPortOutOctets.')
exCMPortOutFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortOutFiltered.setStatus('current')
if mibBuilder.loadTexts: exCMPortOutFiltered.setDescription('A counter that counts the number of good frames that were filtered due to egress switch policy rules.')
exCMPortOutUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortOutUnicasts.setStatus('current')
if mibBuilder.loadTexts: exCMPortOutUnicasts.setDescription('An Egress counter that counts the number of good frames sent that have a Unicast destination MAC address.')
exCMPortOutBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortOutBroadcasts.setStatus('current')
if mibBuilder.loadTexts: exCMPortOutBroadcasts.setDescription('An Egress counter that counts the number of good frames sent that have a Broadcast destination MAC address.')
exCMPortOutMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortOutMulticasts.setStatus('current')
if mibBuilder.loadTexts: exCMPortOutMulticasts.setDescription('An Egress counter that counts the number of good frames sent that have a Multicast destination MAC address. This count does not include frames counted in the exCMPortOutPauses or the exCMPortOutBroadcasts objects.')
exCMPortOutPauses = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortOutPauses.setStatus('current')
if mibBuilder.loadTexts: exCMPortOutPauses.setDescription('An Egress counter that counts the number of good frames reachieved that have a Pause destination MAC address.')
exCMPortDeferreds = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortDeferreds.setStatus('current')
if mibBuilder.loadTexts: exCMPortDeferreds.setDescription('An Egress counter that counts the number of successfully transmitted frames that experienced no collisions but are delayed because the medium was busy during the first attempt. This counter is applicable in half-duplex only.')
exCMPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortCollisions.setStatus('current')
if mibBuilder.loadTexts: exCMPortCollisions.setDescription('An Egress counter that counts the number of collision events seen by the MAC not including those counted in exCMPortSingles, exCMPortMultiple , exCMPortExcessives or exCMPortLates objects. This counter is applicable in half-duplex only.')
exCMPortSingles = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortSingles.setStatus('current')
if mibBuilder.loadTexts: exCMPortSingles.setDescription('An Egress counter that counts the number of successfully transmitted frames that experienced exactly one collision. This counter is applicable in half-duplex only.')
exCMPortMultiples = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortMultiples.setStatus('current')
if mibBuilder.loadTexts: exCMPortMultiples.setDescription('An Egress counter that counts the number of successfully transmitted frames that experienced more than one collision. This counter is aplicable in half-duplex only.')
exCMPortExcessives = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortExcessives.setStatus('current')
if mibBuilder.loadTexts: exCMPortExcessives.setDescription('An Egress counter that counts the number frames dropped in the transmit MAC because the frame experienced 16 consecutive collisions. This counter is applicable in half-duplex only. ')
exCMPortLates = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortLates.setStatus('current')
if mibBuilder.loadTexts: exCMPortLates.setDescription('An Egress counter that counts the number times a collision is detected later than 512 bits-times into the transmission of a frame. This counter is applicable in half-duplex only.')
exCMPortOutFcsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMPortOutFcsErrs.setStatus('current')
if mibBuilder.loadTexts: exCMPortOutFcsErrs.setDescription('An Egress counter that counts the number frames transmitted with an invalid FCS. ')
exCMPortResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 4, 1, 39), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMPortResetCounters.setStatus('current')
if mibBuilder.loadTexts: exCMPortResetCounters.setDescription('Allows the resetting of all exCMStats statistical counters for this port. ')
exCMVdslStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5), )
if mibBuilder.loadTexts: exCMVdslStatsTable.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsTable.setDescription("Table of CM-1110 type media converter module's configuration and status type information.")
exCMVdslStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMVdslStatsSlotIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMVdslStatsMediaPortIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMVdslStatsTimePeriod"))
if mibBuilder.loadTexts: exCMVdslStatsEntry.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsEntry.setDescription('Entries of the table, each relating to a separate CM-1110 type media converter module.')
exCMVdslStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 2), SlotNumber())
if mibBuilder.loadTexts: exCMVdslStatsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsSlotIndex.setDescription('The Slot number the ex-1CM type module is currently inserted')
exCMVdslStatsMediaPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 3), Unsigned32())
if mibBuilder.loadTexts: exCMVdslStatsMediaPortIndex.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsMediaPortIndex.setDescription('Media converter module port index indicating which media port the statistical counters are associated with.')
exCMVdslStatsTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sinceLinkup", 1), ("current15Minutes", 2), ("previous15Minutes", 3), ("current24Hours", 4), ("previous24Hours", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsTimePeriod.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsTimePeriod.setDescription('Media converter module port index indicating which media port the statistical counters are associated with.')
exCMVdslStatsFullInitLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsFullInitLocal.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsFullInitLocal.setDescription("The VDSL port's fully initialized (local) count.")
exCMVdslStatsCodeViolationLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsCodeViolationLocal.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsCodeViolationLocal.setDescription("The VDSL port's code violation (local) count.")
exCMVdslStatsCorrectedLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsCorrectedLocal.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsCorrectedLocal.setDescription("The VDSL port's corrected (local) count.")
exCMVdslStatsFecSecsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsFecSecsLocal.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsFecSecsLocal.setDescription("The VDSL port's forward error correction seconds (local) count.")
exCMVdslStatsErroredSecsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsErroredSecsLocal.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsErroredSecsLocal.setDescription("The VDSL port's errored seconds (local) count.")
exCMVdslStatsSeverelyErroredSecsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsSeverelyErroredSecsLocal.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsSeverelyErroredSecsLocal.setDescription("The VDSL port's severely errored seconds (local) count.")
exCMVdslStatsLossOfSignalSecsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsLossOfSignalSecsLocal.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsLossOfSignalSecsLocal.setDescription("The VDSL port's loss of signal seconds (local) count.")
exCMVdslStatsUnavailableSecsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsUnavailableSecsLocal.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsUnavailableSecsLocal.setDescription("The VDSL port's unavailable seconds (local) count.")
exCMVdslStatsTimeElapsedLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsTimeElapsedLocal.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsTimeElapsedLocal.setDescription("The VDSL port's elapsed time in seconds (local) count.")
exCMVdslStatsFullInitRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsFullInitRemote.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsFullInitRemote.setDescription("The VDSL port's fully initialized (remote) count.")
exCMVdslStatsCodeViolationRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsCodeViolationRemote.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsCodeViolationRemote.setDescription("The VDSL port's code violation (remote) count.")
exCMVdslStatsCorrectedRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsCorrectedRemote.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsCorrectedRemote.setDescription("The VDSL port's corrected (remote) count.")
exCMVdslStatsFecSecsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsFecSecsRemote.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsFecSecsRemote.setDescription("The VDSL port's forward error correction seconds (remote) count.")
exCMVdslStatsErroredSecsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsErroredSecsRemote.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsErroredSecsRemote.setDescription("The VDSL port's errored seconds (remote) count.")
exCMVdslStatsSeverelyErroredSecsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsSeverelyErroredSecsRemote.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsSeverelyErroredSecsRemote.setDescription("The VDSL port's severely errored seconds (remote) count.")
exCMVdslStatsLossOfSignalSecsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsLossOfSignalSecsRemote.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsLossOfSignalSecsRemote.setDescription("The VDSL port's loss of signal seconds (remote) count.")
exCMVdslStatsUnavailableSecsRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsUnavailableSecsRemote.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsUnavailableSecsRemote.setDescription("The VDSL port's unavailable seconds (remote) count.")
exCMVdslStatsTimeElapsedRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMVdslStatsTimeElapsedRemote.setStatus('current')
if mibBuilder.loadTexts: exCMVdslStatsTimeElapsedRemote.setDescription("The VDSL port's elapsed time in seconds (remote) count.")
exCMAvctTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6), )
if mibBuilder.loadTexts: exCMAvctTable.setStatus('current')
if mibBuilder.loadTexts: exCMAvctTable.setDescription('Table of ex-CM media converter modules.')
exCMAvctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "exCMAvctSlotIndex"))
if mibBuilder.loadTexts: exCMAvctEntry.setStatus('current')
if mibBuilder.loadTexts: exCMAvctEntry.setDescription('Entries of the table, each relating to a copper Ethernet port on the eX-CM type media converter module.')
exCMAvctSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 2), SlotNumber())
if mibBuilder.loadTexts: exCMAvctSlotIndex.setStatus('current')
if mibBuilder.loadTexts: exCMAvctSlotIndex.setDescription('The Slot number the eX-CM type module is currently inserted')
exCMAvctStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 3), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exCMAvctStart.setStatus('current')
if mibBuilder.loadTexts: exCMAvctStart.setDescription('Set this self-clearing variable to yes initiate the Advanced Virtual Cable Test. Note: During the test, no network data will be passed. ')
exCMAvctStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notStarted", 0), ("inProgress", 1), ("testComplete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctStatus.setStatus('current')
if mibBuilder.loadTexts: exCMAvctStatus.setDescription('This object identifies the state of the Advanced Virtual Cable Tester. ')
exCMAvctTxRxPair1Results = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair1Results.setStatus('current')
if mibBuilder.loadTexts: exCMAvctTxRxPair1Results.setDescription('Test result code returned from Virtual Cable Test of the Tx/Rx pair one.')
exCMAvctTxRxPair1Amplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair1Amplitude.setStatus('current')
if mibBuilder.loadTexts: exCMAvctTxRxPair1Amplitude.setDescription('Amplitude of Tx/Rx pair one in millivolts when test result codes is short or open.')
exCMAvctTxRxPair1Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair1Distance.setStatus('current')
if mibBuilder.loadTexts: exCMAvctTxRxPair1Distance.setDescription('Distance in meters to fault when test result codes for Tx/Rx pair one is short or open. ')
exCMAvctTxRxPair2Results = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair2Results.setStatus('current')
if mibBuilder.loadTexts: exCMAvctTxRxPair2Results.setDescription('Test result code returned from Virtual Cable Test of the Tx/Rx pair two.')
exCMAvctTxRxPair2Amplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair2Amplitude.setStatus('current')
if mibBuilder.loadTexts: exCMAvctTxRxPair2Amplitude.setDescription('Amplitude of Tx/Rx pair two in millivolts when test result codes is short or open.')
exCMAvctTxRxPair2Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair2Distance.setStatus('current')
if mibBuilder.loadTexts: exCMAvctTxRxPair2Distance.setDescription('Distance in meters to fault when test result codes for Tx/Rx pair two is short or open. ')
exCMAvctTxRxPair3Results = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair3Results.setStatus('current')
if mibBuilder.loadTexts: exCMAvctTxRxPair3Results.setDescription('Test result code returned from Virtual Cable Test of the Tx/Rx pair three.')
exCMAvctTxRxPair3Amplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair3Amplitude.setStatus('current')
if mibBuilder.loadTexts: exCMAvctTxRxPair3Amplitude.setDescription('Amplitude of Tx/Rx pair three in millivolts when test result codes is short or open.')
exCMAvctTxRxPair3Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair3Distance.setStatus('current')
if mibBuilder.loadTexts: exCMAvctTxRxPair3Distance.setDescription('Distance in meters to fault when test result codes for Tx/Rx pair three is short or open. ')
exCMAvctTxRxPair4Results = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("normal", 0), ("shortDetected", 1), ("openDetected", 2), ("testFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair4Results.setStatus('current')
if mibBuilder.loadTexts: exCMAvctTxRxPair4Results.setDescription('Test result code returned from Virtual Cable Test of Tx/Rx pair four.')
exCMAvctTxRxPair4Amplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair4Amplitude.setStatus('current')
if mibBuilder.loadTexts: exCMAvctTxRxPair4Amplitude.setDescription('Amplitude of Tx/Rx pair four in millivolts when test result codes is short or open.')
exCMAvctTxRxPair4Distance = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 9, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: exCMAvctTxRxPair4Distance.setStatus('current')
if mibBuilder.loadTexts: exCMAvctTxRxPair4Distance.setDescription('Distance in meters to fault when test result codes for Tx/Rx pair four is short or open. ')
cm10gt = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10))
cm10gtTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1), )
if mibBuilder.loadTexts: cm10gtTable.setStatus('current')
if mibBuilder.loadTexts: cm10gtTable.setDescription("Table of CM-10G type media converter module's status type information.")
cm10gtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm10gtSlotIndex"))
if mibBuilder.loadTexts: cm10gtEntry.setStatus('current')
if mibBuilder.loadTexts: cm10gtEntry.setDescription('Entries of the table, each relating to a separate CM-10G type media converter module.')
cm10gtSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm10gtSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm10gtSlotIndex.setDescription('The Slot number the CM-10G type module is currently inserted')
cm10gtModelname = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtModelname.setStatus('current')
if mibBuilder.loadTexts: cm10gtModelname.setDescription('This object identifies the model of media converter module present in the chassis')
cm10gtModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtModelDesc.setStatus('current')
if mibBuilder.loadTexts: cm10gtModelDesc.setDescription('This object identifies a static description of the media converter module present in the chassis')
cm10gtHwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtHwJmp5ConfigMode.setStatus('current')
if mibBuilder.loadTexts: cm10gtHwJmp5ConfigMode.setDescription("This object identifies the media converter module's ConfigMode, set by hardware jumper J5 on the media converter module. When this object is set to hardwareSwitches(0), the media converter module will disable configuration control from the management module's software and all configuration control comes from the media converter module's hardware switches or jumpers. ")
cm10gtHwSw1OperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("test", 0), ("data", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtHwSw1OperationMode.setStatus('current')
if mibBuilder.loadTexts: cm10gtHwSw1OperationMode.setDescription("Media converter module's current switch setting for operation mode. Data mode is for normal data transmission.")
cm10gtHwSw2LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownSmartLinkPassthrough", 0), ("swUpStandard", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtHwSw2LinkMode.setStatus('current')
if mibBuilder.loadTexts: cm10gtHwSw2LinkMode.setDescription("Media converter module's current switch setting for Link Mode. If the Operation switch is set to Test, then this object indicates whether the port is in loopback or performing the build in link-test.")
cm10gtHwSw3FiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtHwSw3FiberFaultAlert.setStatus('current')
if mibBuilder.loadTexts: cm10gtHwSw3FiberFaultAlert.setDescription("Media converter module's current switch setting for Fiber Fault Alert. If the Operation switch is set to Test, then this object indicates which port is in test mode")
cm10gtHwSw4EnergyEfficentEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtHwSw4EnergyEfficentEthernet.setStatus('current')
if mibBuilder.loadTexts: cm10gtHwSw4EnergyEfficentEthernet.setDescription('This object indicates the current switch setting for Energy Efficient Ethernet on port 2.')
cm10gtHwSw5Unused = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtHwSw5Unused.setStatus('current')
if mibBuilder.loadTexts: cm10gtHwSw5Unused.setDescription('This object indicates the current switch setting for dip switch 5, which is unused.')
cm10gtPort1LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("shutdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort1LinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm10gtPort1LinkStatus.setDescription("Media converter module's current fiber link status (port 1).")
cm10gtPort1ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6), ("xfp", 7), ("sfpPlus", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort1ConnType.setStatus('current')
if mibBuilder.loadTexts: cm10gtPort1ConnType.setDescription("Media converter module's fiber port connector type (port 1).")
cm10gtPort1AutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort1AutoNegState.setStatus('current')
if mibBuilder.loadTexts: cm10gtPort1AutoNegState.setDescription("Media converter module's current fiber auto-negotiation state (port 1).")
cm10gtPort1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("speed10Mbps", 0), ("speed100Mbps", 1), ("speed1000Mbps", 2), ("speed10Gbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort1Speed.setStatus('current')
if mibBuilder.loadTexts: cm10gtPort1Speed.setDescription("Media converter module's fiber port speed in megabits per second (port 1).")
cm10gtPort1Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort1Duplex.setStatus('current')
if mibBuilder.loadTexts: cm10gtPort1Duplex.setDescription("If fiber auto-negotiation state is complete then this object indicates the media converter module's current fiber auto-negotiated duplex setting. If auto-negotiation is not complete then the value returned should be ignored. (Port 1)")
cm10gtPort1PauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort1PauseEnh.setStatus('current')
if mibBuilder.loadTexts: cm10gtPort1PauseEnh.setDescription("If fiber auto-negotiation state is complete then this object indicates the media converter module's current fiber auto-negotiated pause setting. If auto-negotiation is not complete then the value returned should be ignored. (Port 1)")
cm10gtPort1ReceiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fault", 0), ("ok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort1ReceiveStatus.setStatus('current')
if mibBuilder.loadTexts: cm10gtPort1ReceiveStatus.setDescription('This object identifies the status of whether light is being received on the fiber port (port 1)')
cm10gtPort1LPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("ok", 0), ("offline", 1), ("linkFault", 2), ("autoNegError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort1LPRFStatus.setStatus('current')
if mibBuilder.loadTexts: cm10gtPort1LPRFStatus.setDescription("Media converter module's Link Partner Remote Fault status (port 1). This object only applies to SFP modules running at 1G, with auto-negotiation enabled.")
cm10gtPort2LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("shutdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort2LinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm10gtPort2LinkStatus.setDescription("Media converter module's current fiber link status (port 2).")
cm10gtPort2ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("rj45", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort2ConnType.setStatus('current')
if mibBuilder.loadTexts: cm10gtPort2ConnType.setDescription("Media converter module's fiber port connector type (port 2).")
cm10gtPort2AutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort2AutoNegState.setStatus('current')
if mibBuilder.loadTexts: cm10gtPort2AutoNegState.setDescription("Media converter module's current fiber auto-negotiation state (port 2).")
cm10gtPort2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("speed10Mbps", 0), ("speed100Mbps", 1), ("speed1000Mbps", 2), ("speed10Gbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort2Speed.setStatus('current')
if mibBuilder.loadTexts: cm10gtPort2Speed.setDescription("Media converter module's fiber port speed in megabits per second (port 2).")
cm10gtPort2Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort2Duplex.setStatus('current')
if mibBuilder.loadTexts: cm10gtPort2Duplex.setDescription("If fiber auto-negotiation state is complete then this object indicates the media converter module's current fiber auto-negotiated duplex setting. If auto-negotiation is not complete then the value returned should be ignored. (Port 2)")
cm10gtPort2PauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort2PauseEnh.setStatus('current')
if mibBuilder.loadTexts: cm10gtPort2PauseEnh.setDescription("If fiber auto-negotiation state is complete then this object indicates the media converter module's current fiber auto-negotiated pause setting. If auto-negotiation is not complete then the value returned should be ignored. (Port 2)")
cm10gtPort2LPRFStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("remoteFault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPort2LPRFStatus.setStatus('current')
if mibBuilder.loadTexts: cm10gtPort2LPRFStatus.setDescription("Media converter module's copper Link Partner Remote Fault status.")
cm10gtPortLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("port1", 1), ("port2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtPortLoopBack.setStatus('current')
if mibBuilder.loadTexts: cm10gtPortLoopBack.setDescription("Media converter module's current port loopback mode setting. Writing to this object will change the current settings. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gtPortTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("port1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtPortTestMode.setStatus('current')
if mibBuilder.loadTexts: cm10gtPortTestMode.setDescription("Media converter module's current port test mode setting.")
cm10gtConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2), )
if mibBuilder.loadTexts: cm10gtConfigTable.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigTable.setDescription("Table of CM-10G type media converter module's configuration type information.")
cm10gtConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm10gtConfigSlotIndex"))
if mibBuilder.loadTexts: cm10gtConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigEntry.setDescription('Entries of the table, each relating to a separate CM-10G type media converter module.')
cm10gtConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm10gtConfigSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigSlotIndex.setDescription('The Slot number the CM-10G type module is currently inserted')
cm10gtConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigStatus.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module, verified and and saved to flash. 6-Indicates that the changes in the container folder are to be discarded.')
cm10gtConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigModuleName.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigModuleName.setDescription('This object identifies a user configurable name for the media converter module present in the chassis. ')
cm10gtConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("smartLinkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigLinkMode.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigLinkMode.setDescription("This object identifies the Link Mode for the media converter module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gtConfigFiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigFiberFaultAlert.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigFiberFaultAlert.setDescription("This object identifies the Fiber Fault Alert setting for the media module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0). ")
cm10gtConfigFiberAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 7), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigFiberAutoNeg.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigFiberAutoNeg.setDescription("This object identifies the wither fiber auto-negotiation is enabled for both ports. This only applies if 1G SFP modules are in use. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gtConfigPort1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1Name.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigPort1Name.setDescription('This object identifies a user definable name for port 1.')
cm10gtConfigPort1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 9), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1Enable.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigPort1Enable.setDescription('This object identifies whether port 1 is enabled.')
cm10gtConfigPort1FecEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 10), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1FecEnable.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigPort1FecEnable.setDescription("This object identifies the whether FEC control is enabled for this port. This config option only applies for an XFP module. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gtConfigPort1FecAmplitude = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1FecAmplitude.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigPort1FecAmplitude.setDescription("This object identifies the FEC Amplitude value for this port. This config option only applies for an XFP module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gtConfigPort1FecPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1FecPhase.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigPort1FecPhase.setDescription("This object identifies the FEC phase value for this port. This config option only applies for an XFP module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gtConfigPort1WavelengthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 13), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1WavelengthEnable.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigPort1WavelengthEnable.setDescription("This object identifies whether Wavelength fine tuning is enabled for this port. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gtConfigPort1WavelengthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1WavelengthValue.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigPort1WavelengthValue.setDescription("This object identifies Wavelength fine tuning value for this port. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gtConfigPort1ChannelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 15), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1ChannelEnable.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigPort1ChannelEnable.setDescription("This object identifies whether channel number fine tuning is enabled for this port. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gtConfigPort1ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1ChannelNumber.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigPort1ChannelNumber.setDescription("This object identifies the channel number fine tuning value for this port. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gtConfigPort1TxDitherEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 17), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1TxDitherEnable.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigPort1TxDitherEnable.setDescription("This object identifies the whether TX Dither control is enabled on this port. If not enabled the default TX Dither value will be used. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gtConfigPort1TxDitherValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 18), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort1TxDitherValue.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigPort1TxDitherValue.setDescription("This object identifies the whether TX Dither is enabled for this port. This object is read-only if the media module's ConfigMode jumper is set to hardwareSwitches(0).")
cm10gtConfigPort2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort2Name.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigPort2Name.setDescription('This object identifies a user definable name for port 2.')
cm10gtConfigPort2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 20), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort2Enable.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigPort2Enable.setDescription('This object identifies whether port 2 is enabled.')
cm10gtConfigPort2CopperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort2CopperDuplex.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigPort2CopperDuplex.setDescription('This object identifies the duplex settings for the copper port.')
cm10gtConfigPort2CopperPauseEnh = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("symmAsymRx", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort2CopperPauseEnh.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigPort2CopperPauseEnh.setDescription('This object identifies the copper pause (flow control) setting that is a advertised. The settings can be disabled, advertise symmetrical, advertise asymmetrical TX or advertise symmetrical and asymmetrical RX.')
cm10gtConfigPort2CopperEnergyEfficientEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 2, 1, 23), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm10gtConfigPort2CopperEnergyEfficientEthernet.setStatus('current')
if mibBuilder.loadTexts: cm10gtConfigPort2CopperEnergyEfficientEthernet.setDescription('This object identifies the copper Energy-Efficient Ethernet setting for the media converter module present in the chassis. ')
cm10gtLedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 3), )
if mibBuilder.loadTexts: cm10gtLedTable.setStatus('current')
if mibBuilder.loadTexts: cm10gtLedTable.setDescription("Table of CM-10G type media converter module's LED status information.")
cm10gtLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm10gtLedsSlotIndex"))
if mibBuilder.loadTexts: cm10gtLedEntry.setStatus('current')
if mibBuilder.loadTexts: cm10gtLedEntry.setDescription('Entries of the table, each relating to a separate CM-10G type media converter module.')
cm10gtLedsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 3, 1, 2), SlotNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtLedsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm10gtLedsSlotIndex.setDescription('The Slot number the CM-10G type module is currently inserted')
cm10gtLedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtLedPWR.setStatus('current')
if mibBuilder.loadTexts: cm10gtLedPWR.setDescription('This object identifies the status of the power (PWR) LED on the media converter module. Possible status values are: off(0) - No power to the module onGreen(1) - Power being applied to module blinking(2) - Loopback or Link-Test enabled')
cm10gtLedLK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtLedLK1.setStatus('current')
if mibBuilder.loadTexts: cm10gtLedLK1.setDescription('This object identifies the status of the port 1 link (LK1) LED on the media converter module. Possible status values are: off(0) - No link on(1) - Port link present')
cm10gtLedLK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm10gtLedLK2.setStatus('current')
if mibBuilder.loadTexts: cm10gtLedLK2.setDescription('This object identifies the status of the port 2 link (LK2) LED on the media converter module. Possible status values are: off(0) - No link on(1) - Port link present')
cm4gpt = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11))
cm4gptTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1), )
if mibBuilder.loadTexts: cm4gptTable.setStatus('current')
if mibBuilder.loadTexts: cm4gptTable.setDescription("Table of CM-4GPT type media converter module's status type information.")
cm4gptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm4gptSlotIndex"))
if mibBuilder.loadTexts: cm4gptEntry.setStatus('current')
if mibBuilder.loadTexts: cm4gptEntry.setDescription('Entries of the table, each relating to a separate CM-4GPT type media converter module.')
cm4gptSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm4gptSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm4gptSlotIndex.setDescription('The Slot number the CM-4GPT type module is currently inserted')
cm4gptModelname = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptModelname.setStatus('current')
if mibBuilder.loadTexts: cm4gptModelname.setDescription('This object identifies the model of media converter module present in the chassis')
cm4gptModelDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptModelDesc.setStatus('current')
if mibBuilder.loadTexts: cm4gptModelDesc.setDescription('This object identifies a static description of the media converter module present in the chassis')
cm4gptHwJmp5ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("hardwareSwitches", 0), ("auto", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptHwJmp5ConfigMode.setStatus('current')
if mibBuilder.loadTexts: cm4gptHwJmp5ConfigMode.setDescription("This object identifies the media converter module's ConfigMode, set by hardware jumper J5 on the media converter module. When this object is set to hardwareSwitches(0), the media converter module will disable configuration control from the management module's software and all configuration control comes from the media converter module's hardware switches or jumpers. ")
cm4gptHwSw1LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownSmartLinkPassthrough", 0), ("swUpStandard", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptHwSw1LinkMode.setStatus('current')
if mibBuilder.loadTexts: cm4gptHwSw1LinkMode.setDescription("Media converter module's current switch setting for Link Mode.")
cm4gptHwSw2FiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownDisabled", 0), ("swUpEnabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptHwSw2FiberFaultAlert.setStatus('current')
if mibBuilder.loadTexts: cm4gptHwSw2FiberFaultAlert.setDescription("Media converter module's current switch setting for Fiber Fault Alert.")
cm4gptHwSw3RateSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("swDownLow", 0), ("swUpHigh", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptHwSw3RateSelect.setStatus('current')
if mibBuilder.loadTexts: cm4gptHwSw3RateSelect.setDescription("Media converter module's current switch setting for Rate Select.")
cm4gptHwSw4Unused = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptHwSw4Unused.setStatus('current')
if mibBuilder.loadTexts: cm4gptHwSw4Unused.setDescription('This object indicates the current switch setting for the 4th, unused switch.')
cm4gptPort1LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptPort1LinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm4gptPort1LinkStatus.setDescription("Media converter module's current fiber link status (port 1).")
cm4gptPort1ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6), ("xfp", 7), ("sfpPlus", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptPort1ConnType.setStatus('current')
if mibBuilder.loadTexts: cm4gptPort1ConnType.setDescription("Media converter module's fiber port connector type (port 1).")
cm4gptPort2LinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptPort2LinkStatus.setStatus('current')
if mibBuilder.loadTexts: cm4gptPort2LinkStatus.setDescription("Media converter module's current fiber link status (port 2).")
cm4gptPort2ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sc", 0), ("lc", 1), ("st", 2), ("sfp", 3), ("fc", 5), ("mtrj", 6), ("xfp", 7), ("sfpPlus", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptPort2ConnType.setStatus('current')
if mibBuilder.loadTexts: cm4gptPort2ConnType.setDescription("Media converter module's fiber port connector type (port 2).")
cm4gptConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2), )
if mibBuilder.loadTexts: cm4gptConfigTable.setStatus('current')
if mibBuilder.loadTexts: cm4gptConfigTable.setDescription("Table of CM-4GPT type media converter module's configuration type information.")
cm4gptConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm4gptConfigSlotIndex"))
if mibBuilder.loadTexts: cm4gptConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cm4gptConfigEntry.setDescription('Entries of the table, each relating to a separate CM-4GPT type media converter module.')
cm4gptConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm4gptConfigSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm4gptConfigSlotIndex.setDescription('The Slot number the CM-4GPT type module is currently inserted')
cm4gptConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 3), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigStatus.setStatus('current')
if mibBuilder.loadTexts: cm4gptConfigStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module, verified and and saved to flash. 6-Indicates that the changes in the container folder are to be discarded.')
cm4gptConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigModuleName.setStatus('current')
if mibBuilder.loadTexts: cm4gptConfigModuleName.setDescription('This object identifies a user configurable name for the media converter module present in the chassis. ')
cm4gptConfigLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("smartLinkPassthrough", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigLinkMode.setStatus('current')
if mibBuilder.loadTexts: cm4gptConfigLinkMode.setDescription("This object identifies the Link Mode for the media converter module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm4gptConfigFiberFaultAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 6), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigFiberFaultAlert.setStatus('current')
if mibBuilder.loadTexts: cm4gptConfigFiberFaultAlert.setDescription("This object identifies the Fiber Fault Alert setting for the media module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0). ")
cm4gptConfigRateSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigRateSelect.setStatus('current')
if mibBuilder.loadTexts: cm4gptConfigRateSelect.setDescription("This object identifies the Rate Select setting for the media converter module. This object is read-only if the media converter module's ConfigMode jumper is set to hardwareSwitches(0).")
cm4gptConfigPort1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigPort1Name.setStatus('current')
if mibBuilder.loadTexts: cm4gptConfigPort1Name.setDescription('This object identifies a user definable name for port 1.')
cm4gptConfigPort1Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 9), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigPort1Enable.setStatus('current')
if mibBuilder.loadTexts: cm4gptConfigPort1Enable.setDescription('This object identifies whether port 1 is enabled.')
cm4gptConfigPort2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigPort2Name.setStatus('current')
if mibBuilder.loadTexts: cm4gptConfigPort2Name.setDescription('This object identifies a user definable name for port 2.')
cm4gptConfigPort2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 2, 1, 11), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cm4gptConfigPort2Enable.setStatus('current')
if mibBuilder.loadTexts: cm4gptConfigPort2Enable.setDescription('This object identifies whether port 2 is enabled.')
cm4gptLedTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 3), )
if mibBuilder.loadTexts: cm4gptLedTable.setStatus('current')
if mibBuilder.loadTexts: cm4gptLedTable.setDescription("Table of CM-4GPT type media converter module's LED status information.")
cm4gptLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "cm4gptLedsSlotIndex"))
if mibBuilder.loadTexts: cm4gptLedEntry.setStatus('current')
if mibBuilder.loadTexts: cm4gptLedEntry.setDescription('Entries of the table, each relating to a separate CM-4GPT type media converter module.')
cm4gptLedsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 3, 1, 2), SlotNumber())
if mibBuilder.loadTexts: cm4gptLedsSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cm4gptLedsSlotIndex.setDescription('The Slot number the CM-4GPT type module is currently inserted')
cm4gptLedPWR = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onGreen", 1), ("blinking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptLedPWR.setStatus('current')
if mibBuilder.loadTexts: cm4gptLedPWR.setDescription('This object identifies the status of the power (PWR) LED on the media converter module. Possible status values are: off(0) - No power to the module onGreen(1) - Power being applied to module blinking(2) - Loopback or Link-Test enabled')
cm4gptLedLK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptLedLK1.setStatus('current')
if mibBuilder.loadTexts: cm4gptLedLK1.setDescription('This object identifies the status of the port 1 link (LK1) LED on the media converter module. Possible status values are: off(0) - No link on(1) - Port link present')
cm4gptLedLK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 4, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cm4gptLedLK2.setStatus('current')
if mibBuilder.loadTexts: cm4gptLedLK2.setDescription('This object identifies the status of the port 2 link (LK2) LED on the media converter module. Possible status values are: off(0) - No link on(1) - Port link present')
mcrSfpDmiModuleTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5), )
if mibBuilder.loadTexts: mcrSfpDmiModuleTable.setStatus('current')
if mibBuilder.loadTexts: mcrSfpDmiModuleTable.setDescription('Table of SFP Diagnostic Monitoring Interface information for Optical Transceivers')
mcrSfpDmiModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "sfpDmiSlotIndex"), (0, "PERLE-MCR-MGT-MIB", "sfpDmiMediaPortIndex"))
if mibBuilder.loadTexts: mcrSfpDmiModuleEntry.setStatus('current')
if mibBuilder.loadTexts: mcrSfpDmiModuleEntry.setDescription('Entries of the table, each relating to a separate SFP module.')
sfpDmiSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 2), SlotNumber())
if mibBuilder.loadTexts: sfpDmiSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sfpDmiSlotIndex.setDescription('The Slot number of the media converter module containing this SFP/XFP')
sfpDmiMediaPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 3), Unsigned32())
if mibBuilder.loadTexts: sfpDmiMediaPortIndex.setStatus('current')
if mibBuilder.loadTexts: sfpDmiMediaPortIndex.setDescription('Media converter module port index.')
sfpDmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 4), Bits().clone(namedValues=NamedValues(("sfpModuleInserted", 24), ("sfpCommFailed", 25), ("sfpDmiSupported", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiStatus.setStatus('current')
if mibBuilder.loadTexts: sfpDmiStatus.setDescription('This object identifies the status of the SFP module. If sfpCommFailed bit is set then the rest of the data in this entry is invalid')
sfpDmiConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33))).clone(namedValues=NamedValues(("unknownUnspecified", 0), ("sc", 1), ("fiberChannelStyle1Copper", 2), ("fiberChannelStyle2Copper", 3), ("bncTnc", 4), ("fiberChannelCoaxHeader", 5), ("fiberJack", 6), ("lc", 7), ("mtrj", 8), ("mu", 9), ("sg", 10), ("opticalPigtail", 11), ("hssdcII", 32), ("copperPigtail", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiConnectorType.setStatus('current')
if mibBuilder.loadTexts: sfpDmiConnectorType.setDescription('This object identifies the SFP DMI connector type.')
sfpDmiNominalBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiNominalBitRate.setStatus('current')
if mibBuilder.loadTexts: sfpDmiNominalBitRate.setDescription('This object identifies the SFP DMI nominal bit rate of fiber interface, in megabits per second.')
sfpDmiLinkReach9125 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLinkReach9125.setStatus('current')
if mibBuilder.loadTexts: sfpDmiLinkReach9125.setDescription('This object identifies the SFP DMI maximum length in meters of media supported by the fiber transceiver for 9 micron (125 micron jacket) single-mode fiber. ')
sfpDmiLinkReach50125 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLinkReach50125.setStatus('current')
if mibBuilder.loadTexts: sfpDmiLinkReach50125.setDescription('This object identifies the SFP DMI maximum length in meters of media supported by the fiber transceiver for 50 micron (125 micron jacket) multi-mode fiber.')
sfpDmiLinkReach625125 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLinkReach625125.setStatus('current')
if mibBuilder.loadTexts: sfpDmiLinkReach625125.setDescription('This object identifies the SFP DMI maximum length in meters of media supported by the fiber transceiver for 62.5 micron (125 micron jacket) multi-mode fiber.')
sfpDmiFiberWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiFiberWaveLength.setStatus('current')
if mibBuilder.loadTexts: sfpDmiFiberWaveLength.setDescription("This object identifies the wavelength of the fiber interface's optical transceiver, in nanometers.")
sfpDmiCurrentTempState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("notSupported", 1), ("normal", 2), ("highWarn", 3), ("highAlarm", 4), ("lowWarn", 5), ("lowAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiCurrentTempState.setStatus('current')
if mibBuilder.loadTexts: sfpDmiCurrentTempState.setDescription('This object identifies the current alarm status for SFP DMI internally measured temperature. ')
sfpDmiRealTimeTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiRealTimeTemp.setStatus('current')
if mibBuilder.loadTexts: sfpDmiRealTimeTemp.setDescription('This object identifies the SFP DMI real time temperature. The value displayed will be either Celsius or Fahrenheit based on your current regional display settings. ')
sfpDmiHighTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighTempWarn.setStatus('current')
if mibBuilder.loadTexts: sfpDmiHighTempWarn.setDescription('This object identifies the SFP DMI high temperature warning threshold. The value displayed will be either Celsius or Fahrenheit based on your current regional display settings. ')
sfpDmiHighTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighTempAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpDmiHighTempAlarm.setDescription('This object identifies the SFP DMI high temperature warning threshold. The value displayed will be either Celsius or Fahrenheit based on your current regional display settings. ')
sfpDmiLowTempWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowTempWarn.setStatus('current')
if mibBuilder.loadTexts: sfpDmiLowTempWarn.setDescription('This object identifies the SFP DMI high temperature warning threshold. The value displayed will be either Celsius or Fahrenheit based on your current regional display settings. ')
sfpDmiLowTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowTempAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpDmiLowTempAlarm.setDescription('This object identifies the SFP DMI high temperature warning threshold. The value displayed will be either Celsius or Fahrenheit based on your current regional display settings. ')
sfpDmiCurrentVoltState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("notSupported", 1), ("normal", 2), ("highWarn", 3), ("highAlarm", 4), ("lowWarn", 5), ("lowAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiCurrentVoltState.setStatus('current')
if mibBuilder.loadTexts: sfpDmiCurrentVoltState.setDescription('This object identifies current alarm status for SFP DMI internally measured voltage. ')
sfpDmiRealTimeVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiRealTimeVolt.setStatus('current')
if mibBuilder.loadTexts: sfpDmiRealTimeVolt.setDescription('This object identifies the SFP DMI real time voltage in Volts. ')
sfpDmiHighVoltWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighVoltWarn.setStatus('current')
if mibBuilder.loadTexts: sfpDmiHighVoltWarn.setDescription('This object identifies the SFP DMI high voltage warning threshold in Volts ')
sfpDmiHighVoltAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighVoltAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpDmiHighVoltAlarm.setDescription('This object identifies the SFP DMI high voltage warning threshold in Volts ')
sfpDmiLowVoltWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowVoltWarn.setStatus('current')
if mibBuilder.loadTexts: sfpDmiLowVoltWarn.setDescription('This object identifies the SFP DMI high voltage warning threshold in Volts')
sfpDmiLowVoltAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowVoltAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpDmiLowVoltAlarm.setDescription('This object identifies the SFP DMI high voltage warning threshold in Volts')
sfpDmiCurrentTxBiasState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("notSupported", 1), ("normal", 2), ("highWarn", 3), ("highAlarm", 4), ("lowWarn", 5), ("lowAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiCurrentTxBiasState.setStatus('current')
if mibBuilder.loadTexts: sfpDmiCurrentTxBiasState.setDescription('This object identifies current alarm status for SFP DMI internally measured transmit bias current in milliamps. ')
sfpDmiRealTimeTxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiRealTimeTxBias.setStatus('current')
if mibBuilder.loadTexts: sfpDmiRealTimeTxBias.setDescription('This object identifies the SFP DMI high TX Bias current in milliamps. ')
sfpDmiHighTxBiasWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighTxBiasWarn.setStatus('current')
if mibBuilder.loadTexts: sfpDmiHighTxBiasWarn.setDescription('This object identifies the SFP DMI high TX Bias current warning threshold in milliamps.')
sfpDmiHighTxBiasAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighTxBiasAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpDmiHighTxBiasAlarm.setDescription('This object identifies the SFP DMI high TX Bias current alarm threshold in milliamps.')
sfpDmiLowTxBiasWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowTxBiasWarn.setStatus('current')
if mibBuilder.loadTexts: sfpDmiLowTxBiasWarn.setDescription('This object identifies the SFP DMI low TX Bias current warning threshold in milliamps.')
sfpDmiLowTxBiasAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowTxBiasAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpDmiLowTxBiasAlarm.setDescription('This object identifies the SFP DMI low TX Bias current alarm threshold in milliamps.')
sfpDmiCurrentTxPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("notSupported", 1), ("normal", 2), ("highWarn", 3), ("highAlarm", 4), ("lowWarn", 5), ("lowAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiCurrentTxPowerState.setStatus('current')
if mibBuilder.loadTexts: sfpDmiCurrentTxPowerState.setDescription('This object identifies current alarm status for SFP DMI internally measured transmit power. ')
sfpDmiRealTimeTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiRealTimeTxPower.setStatus('current')
if mibBuilder.loadTexts: sfpDmiRealTimeTxPower.setDescription('This object identifies the SFP DMI real time TX output power. The value displayed will be either millwatts or Dbm based on your current regional display settings. ')
sfpDmiHighTxPowerWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighTxPowerWarn.setStatus('current')
if mibBuilder.loadTexts: sfpDmiHighTxPowerWarn.setDescription('This object identifies the SFP DMI high TX output power warning threshold. The value displayed will be either millwatts or Dbm based on your current regional display settings. ')
sfpDmiHighTxPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighTxPowerAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpDmiHighTxPowerAlarm.setDescription('This object identifies the SFP DMI high TX output power alarm threshold. The value displayed will be either millwatts or Dbm based on your current regional display settings. ')
sfpDmiLowTxPowerWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowTxPowerWarn.setStatus('current')
if mibBuilder.loadTexts: sfpDmiLowTxPowerWarn.setDescription('This object identifies the SFP DMI low TX output power warning threshold. The value displayed will be either millwatts or Dbm based on your current regional display settings. ')
sfpDmiLowTxPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowTxPowerAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpDmiLowTxPowerAlarm.setDescription('This object identifies the SFP DMI low TX output power alarm threshold. The value displayed will be either millwatts or Dbm based on your current regional display settings. ')
sfpDmiCurrentRxPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("notSupported", 1), ("normal", 2), ("highWarn", 3), ("highAlarm", 4), ("lowWarn", 5), ("lowAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiCurrentRxPowerState.setStatus('current')
if mibBuilder.loadTexts: sfpDmiCurrentRxPowerState.setDescription('This object identifies current alarm status for SFP DMI internally measured receive power. ')
sfpDmiRealTimeRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiRealTimeRxPower.setStatus('current')
if mibBuilder.loadTexts: sfpDmiRealTimeRxPower.setDescription('This object identifies the SFP DMI real time RX received optical power. The value displayed will be either millwatts or Dbm based on your current regional display settings. ')
sfpDmiHighRxPowerWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighRxPowerWarn.setStatus('current')
if mibBuilder.loadTexts: sfpDmiHighRxPowerWarn.setDescription('This object identifies the SFP DMI high RX received optical warning threshold. The value displayed will be either millwatts or Dbm based on your current regional display settings. ')
sfpDmiHighRxPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiHighRxPowerAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpDmiHighRxPowerAlarm.setDescription('This object identifies the SFP DMI high RX received optical alarm threshold. The value displayed will be either millwatts or Dbm based on your current regional display settings. ')
sfpDmiLowRxPowerWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowRxPowerWarn.setStatus('current')
if mibBuilder.loadTexts: sfpDmiLowRxPowerWarn.setDescription('This object identifies the SFP DMI low RX received optical warning threshold. The value displayed will be either millwatts or Dbm based on your current regional display settings. ')
sfpDmiLowRxPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiLowRxPowerAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpDmiLowRxPowerAlarm.setDescription('This object identifies the SFP DMI low RX received optical alarm threshold. The value displayed will be either millwatts or Dbm based on your current regional display settings. ')
sfpDmiStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiStatus2.setStatus('current')
if mibBuilder.loadTexts: sfpDmiStatus2.setDescription('This object identifies the status of the SFP module. If sfpCommFailed value is set then the rest of the data in this entry is invalid 0x80 - sfpModuleInserted 0x40 - sfpCommFailed 0x20 - sfpDmiSupported')
sfpDmiVendorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiVendorSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sfpDmiVendorSerialNumber.setDescription('This object identifies the SFP DMI serial number. ')
sfpDmiVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiVendorName.setStatus('current')
if mibBuilder.loadTexts: sfpDmiVendorName.setDescription('This object identifies the SFP DMI serial number. ')
sfpDmiVendorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiVendorPartNumber.setStatus('current')
if mibBuilder.loadTexts: sfpDmiVendorPartNumber.setDescription('This object identifies the SFP DMI serial number. ')
xfpDmiAux1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15))).clone(namedValues=NamedValues(("notSupported", 0), ("apdBiasVoltmv", 1), ("tecCurrentma", 3), ("laserTemperature", 4), ("laserWavelength", 5), ("p5Voltv", 6), ("p33Voltv", 7), ("p18Voltv", 8), ("m52Voltv", 9), ("p5vCurrentma", 10), ("p33vCurrentma", 13), ("p18vCurrentma", 14), ("m52vCurrentma", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiAux1Type.setStatus('current')
if mibBuilder.loadTexts: xfpDmiAux1Type.setDescription('This object identifies the type of value that is being measured by the Auxillary 1 registers on the XFP')
xfpDmiAux1State = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("notSupported", 1), ("normal", 2), ("highWarn", 3), ("highAlarm", 4), ("lowWarn", 5), ("lowAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiAux1State.setStatus('current')
if mibBuilder.loadTexts: xfpDmiAux1State.setDescription('This object identifies current alarm status for the XFP Aux1 registers')
xfpDmiRealTimeAux1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiRealTimeAux1.setStatus('current')
if mibBuilder.loadTexts: xfpDmiRealTimeAux1.setDescription('This object identifies the XFP DMI real time values for the Aux1 registers')
xfpDmiHighAux1Warn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiHighAux1Warn.setStatus('current')
if mibBuilder.loadTexts: xfpDmiHighAux1Warn.setDescription('This object identifies the XFP DMI high warning threshold for Aux1')
xfpDmiHighAux1Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiHighAux1Alarm.setStatus('current')
if mibBuilder.loadTexts: xfpDmiHighAux1Alarm.setDescription('This object identifies the XFP DMI alarm alarm threshold for Aux1')
xfpDmiLowAux1Warn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiLowAux1Warn.setStatus('current')
if mibBuilder.loadTexts: xfpDmiLowAux1Warn.setDescription('This object identifies the XFP DMI low warning threshold for Aux1')
xfpDmiLowAux1Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiLowAux1Alarm.setStatus('current')
if mibBuilder.loadTexts: xfpDmiLowAux1Alarm.setDescription('This object identifies the XFP DMI low alarm threshold for Aux1')
xfpDmiAux2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15))).clone(namedValues=NamedValues(("notSupported", 0), ("apdBiasVoltmv", 1), ("tecCurrentma", 3), ("laserTemperature", 4), ("laserWavelength", 5), ("p5Voltv", 6), ("p33Voltv", 7), ("p18Voltv", 8), ("m52Voltv", 9), ("p5vCurrentma", 10), ("p33vCurrentma", 13), ("p18vCurrentma", 14), ("m52vCurrentma", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiAux2Type.setStatus('current')
if mibBuilder.loadTexts: xfpDmiAux2Type.setDescription('This object identifies the type of value that is being measured by the Auxillary 1 registers on the XFP')
xfpDmiAux2State = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("notSupported", 1), ("normal", 2), ("highWarn", 3), ("highAlarm", 4), ("lowWarn", 5), ("lowAlarm", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiAux2State.setStatus('current')
if mibBuilder.loadTexts: xfpDmiAux2State.setDescription('This object identifies current alarm status for the XFP Aux2 registers')
xfpDmiRealTimeAux2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiRealTimeAux2.setStatus('current')
if mibBuilder.loadTexts: xfpDmiRealTimeAux2.setDescription('This object identifies the SFP DMI real time values for the Aux2 registers')
xfpDmiHighAux2Warn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiHighAux2Warn.setStatus('current')
if mibBuilder.loadTexts: xfpDmiHighAux2Warn.setDescription('This object identifies the XFP DMI high warning threshold for Aux2')
xfpDmiHighAux2Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiHighAux2Alarm.setStatus('current')
if mibBuilder.loadTexts: xfpDmiHighAux2Alarm.setDescription('This object identifies the XFP DMI alarm alarm threshold for Aux2')
xfpDmiLowAux2Warn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiLowAux2Warn.setStatus('current')
if mibBuilder.loadTexts: xfpDmiLowAux2Warn.setDescription('This object identifies the XFP DMI low warning threshold for Aux2')
xfpDmiLowAux2Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiLowAux2Alarm.setStatus('current')
if mibBuilder.loadTexts: xfpDmiLowAux2Alarm.setDescription('This object identifies the XFP DMI low alarm threshold for Aux2')
xfpDmiMinBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiMinBitRate.setStatus('current')
if mibBuilder.loadTexts: xfpDmiMinBitRate.setDescription('This object specifies the XFP minimum bit rate.')
xfpDmiMaxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiMaxBitRate.setStatus('current')
if mibBuilder.loadTexts: xfpDmiMaxBitRate.setDescription('This object specifies the XFP maximum bit rate.')
xfpDmiReachEBW50125 = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiReachEBW50125.setStatus('current')
if mibBuilder.loadTexts: xfpDmiReachEBW50125.setDescription('This object specifies the link length that is supported by the fiber transceiver using extended bandwidth 50 micron core (125 micron jacket) multimode fiber')
sfpDmiReachCopper = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 5, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDmiReachCopper.setStatus('current')
if mibBuilder.loadTexts: sfpDmiReachCopper.setDescription('This object identifies the maximum length in meters that is supported by the SFP/XFP interface using copper cable.')
mcrAlarmsWarningsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6), )
if mibBuilder.loadTexts: mcrAlarmsWarningsTable.setStatus('current')
if mibBuilder.loadTexts: mcrAlarmsWarningsTable.setDescription('Table of outstanding alarms and warnings.')
mcrAlarmsWarningsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "alarmWarnSequenceIndex"))
if mibBuilder.loadTexts: mcrAlarmsWarningsEntry.setStatus('current')
if mibBuilder.loadTexts: mcrAlarmsWarningsEntry.setDescription('Entries of the table, each relating to a separate alarm or warning.')
alarmWarnSequenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: alarmWarnSequenceIndex.setStatus('current')
if mibBuilder.loadTexts: alarmWarnSequenceIndex.setDescription('This object identifies the sequence in which the alarms or warnings were generated. Gaps in the sequence numbers are normal.')
alarmWarnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWarnType.setStatus('current')
if mibBuilder.loadTexts: alarmWarnType.setDescription('This object identifies the alert/Trap number associated with this alarm/warning.')
alarmWarnSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWarnSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmWarnSeverity.setDescription('This object identifies the severity level of the alarm/warning. Value will be one of the top three levels.')
alarmWarnFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWarnFlags.setStatus('current')
if mibBuilder.loadTexts: alarmWarnFlags.setDescription('This object identifies the flags defining the alarm/warning. 0x00000002 - chassis type alert 0x00000004 - Power Supply Monitoring Unit type alert 0x00000008 - PSMU power supply type alert 0x00000010 - PSMU fan type alert 0x00000020 - Management module type alert 0x00000040 - Media converter module type alert 0x00000080 - Media converter module SFP module type alert.')
alarmWarnChassisNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWarnChassisNum.setStatus('current')
if mibBuilder.loadTexts: alarmWarnChassisNum.setDescription('This object identifies the chassis number associated with this alarm/warning.')
alarmWarnDeviceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWarnDeviceNum.setStatus('current')
if mibBuilder.loadTexts: alarmWarnDeviceNum.setDescription('This object identifies the Hardware slot/bay location of the hardware associated with this alarm or warning. - 0 indicates alarm/warning occurred on the chassis backplane. - If AlarmWarnFlags indicates a power supply then this value the power supply bay number. - Otherwise it is the chassis slot number.')
alarmWarnTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWarnTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alarmWarnTimeStamp.setDescription('This object identifies the time stamp of when the alarm/warning was reported. (in seconds since the Epoch, defined as 0:00:00 UTC on the morning of January 1, 1970), that the alert was reported on the MCR-MGT.)')
alarmWarnMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWarnMessage.setStatus('current')
if mibBuilder.loadTexts: alarmWarnMessage.setDescription('This object identifies the alarm/warning message string which will contain any values of bound variables.')
alarmWarnPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmWarnPortNum.setStatus('current')
if mibBuilder.loadTexts: alarmWarnPortNum.setDescription('This object identifies the location of the media port associated with this alarm or warning.')
mcrMediaPortTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7), )
if mibBuilder.loadTexts: mcrMediaPortTable.setStatus('current')
if mibBuilder.loadTexts: mcrMediaPortTable.setDescription('Table of general port status information.')
mcrMediaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "mediaPortSlotIndex"), (0, "PERLE-MCR-MGT-MIB", "mediaPortPortIndex"))
if mibBuilder.loadTexts: mcrMediaPortEntry.setStatus('current')
if mibBuilder.loadTexts: mcrMediaPortEntry.setDescription('Entries of the table, each relating to a separate media converter module port.')
mediaPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: mediaPortSlotIndex.setStatus('current')
if mibBuilder.loadTexts: mediaPortSlotIndex.setDescription('Slot number for the media converter module containing this port.')
mediaPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 3), Unsigned32())
if mibBuilder.loadTexts: mediaPortPortIndex.setStatus('current')
if mibBuilder.loadTexts: mediaPortPortIndex.setDescription('Port number on media card. Valid values are 1 to the highest number of ports available on a media card. There are usually two ports')
moduleModel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleModel.setStatus('current')
if mibBuilder.loadTexts: moduleModel.setDescription('This object identifies the model name of the module containing this port.')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portName.setStatus('current')
if mibBuilder.loadTexts: portName.setDescription('This object identifies the name configured for this port.')
portEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portEnable.setStatus('current')
if mibBuilder.loadTexts: portEnable.setDescription('This object indicates whether the port has been enabled.')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("copper", 0), ("fiber", 1), ("sfp", 2), ("xfp", 3), ("sfpPlus", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
if mibBuilder.loadTexts: portType.setDescription('The type of port (copper, fiber, etc.) .')
portLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("shutdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkStatus.setStatus('current')
if mibBuilder.loadTexts: portLinkStatus.setDescription("The port's current link status.")
portConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("rj45", 0), ("sc", 1), ("lc", 2), ("st", 3), ("sfp", 4), ("fc", 5), ("mtrj", 6), ("xfp", 7), ("sfpPlus", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConnType.setStatus('current')
if mibBuilder.loadTexts: portConnType.setDescription("The port's connector type")
portAutoNegState = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", -1), ("disabled", 0), ("complete", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAutoNegState.setStatus('current')
if mibBuilder.loadTexts: portAutoNegState.setDescription("The port's auto-negotiation state")
portSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("speed10Mbs", 0), ("speed100Mbps", 1), ("speed1000Mbps", 2), ("speed10Gbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeed.setStatus('current')
if mibBuilder.loadTexts: portSpeed.setDescription('If the port auto-negotiation state is complete then this object indicates the ports current auto-negotiated speed setting. If auto-negotiation is not complete then the value returned should be ignored')
portDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("notApplicable", -1), ("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDuplex.setStatus('current')
if mibBuilder.loadTexts: portDuplex.setDescription("If port auto-negotiation state is complete then this object indicates the media converter module's current auto-negotiated duplex setting for this port. If auto-negotiation is not complete then the value returned should be ignored.")
portPause = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", -1), ("disabled", 0), ("symmetrical", 1), ("asymmetricalTx", 2), ("asymmetricalRx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPause.setStatus('current')
if mibBuilder.loadTexts: portPause.setDescription("If port auto-negotiation state is complete then this object indicates the media converter module's current auto-negotiated pause setting for this port. If auto-negotiation is not complete then the value returned should be ignored.")
portRemoteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", -1), ("ok", 0), ("remoteFault", 1), ("offline", 2), ("linkFault", 3), ("autoNegError", 4), ("disable", 5), ("receivingFEF", 6), ("sendingFEF", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRemoteStatus.setStatus('current')
if mibBuilder.loadTexts: portRemoteStatus.setDescription("This port's Link Partner Remote Fault status or Far End Fault status")
portMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("unknown", -1), ("copper", 0), ("fiber", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaType.setStatus('current')
if mibBuilder.loadTexts: portMediaType.setDescription('The type of port (copper, fiber, etc.) .')
portPhysicalProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("ethernet", 1), ("vdsl", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPhysicalProtocol.setStatus('current')
if mibBuilder.loadTexts: portPhysicalProtocol.setDescription('The physical networking protocol used by the port.')
mgtNetworkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1))
mgtAccessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2))
mgtAlertGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3))
mgtUsersGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4))
mgtDateTimeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5))
mgtFilesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6))
mgtAdminGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 7))
mgtDisplayFormatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 8))
mgtChassisCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9))
systemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1))
systemStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemStatus.setStatus('current')
if mibBuilder.loadTexts: systemStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module. 6-Indicates that the changes in the container folder are to be discarded.')
systemName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemName.setStatus('current')
if mibBuilder.loadTexts: systemName.setDescription('The name of the system management module.')
systemDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDomainName.setStatus('current')
if mibBuilder.loadTexts: systemDomainName.setDescription('The domain name of the management module.')
systemIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemIpAddress.setStatus('current')
if mibBuilder.loadTexts: systemIpAddress.setDescription("The management module's unique IPv4 network IP address. If you are using the management module in an IPv6 network, this field can be left blank.")
systemSubnetBits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSubnetBits.setStatus('current')
if mibBuilder.loadTexts: systemSubnetBits.setDescription('The number of bits in the subnet mask. For example, a subnet mask of 255.255.0.0 has 16 subnet/prefix bits. Valid values are 0-32. The default is 0. When the value is 0, the correct value is determined based on the class of the IP Address.')
systemDHCPUpdateDNS = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDHCPUpdateDNS.setStatus('current')
if mibBuilder.loadTexts: systemDHCPUpdateDNS.setDescription('If enabled, the DNS system will be updated after the management module gets the IP address via DHCP.')
systemAutoObtainDNS = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemAutoObtainDNS.setStatus('current')
if mibBuilder.loadTexts: systemAutoObtainDNS.setDescription('If on, the DNS server IP address will be obtained automatically automatically via DHCP.')
systemAutoObtainGW = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemAutoObtainGW.setStatus('current')
if mibBuilder.loadTexts: systemAutoObtainGW.setDescription('If enabled, the default gateway IP address will be get automatically via DHCP.')
systemDomainPrefix = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDomainPrefix.setStatus('current')
if mibBuilder.loadTexts: systemDomainPrefix.setDescription('The domain prefix for primary Ethernet interface of the management module.')
systemTFTPRetry = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTFTPRetry.setStatus('current')
if mibBuilder.loadTexts: systemTFTPRetry.setDescription('The number of times the management module will attempt to transfer (using TFTP) a file to/from a host. Default is 5. A value of 0 (zero) means that the management module will not attempt a retry should TFTP fail.')
systemTFTPTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTFTPTimeOut.setStatus('current')
if mibBuilder.loadTexts: systemTFTPTimeOut.setDescription('The time, in seconds, that the management module will wait for a successful transmit or receipt of TFTP packets before retrying a TFTP transfer. Default is 3 seconds.')
gatewayTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2), )
if mibBuilder.loadTexts: gatewayTable.setStatus('current')
if mibBuilder.loadTexts: gatewayTable.setDescription('Table of configured gateway.')
gatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "gatewayIndex"))
if mibBuilder.loadTexts: gatewayEntry.setStatus('current')
if mibBuilder.loadTexts: gatewayEntry.setDescription('Entries of the table, each relating to a separate configured gateway. ')
gatewayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: gatewayIndex.setStatus('current')
if mibBuilder.loadTexts: gatewayIndex.setDescription('gatewayIndex')
gatewayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayStatus.setStatus('current')
if mibBuilder.loadTexts: gatewayStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
gatewayHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayHost.setStatus('current')
if mibBuilder.loadTexts: gatewayHost.setDescription('You can specify up to twenty hosts to act as gateways in your network. Each gateway host must be defined in the management module host table.')
gatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("host", 0), ("network", 1), ("default", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayType.setStatus('current')
if mibBuilder.loadTexts: gatewayType.setDescription('Specify the type of gateway: Default-A gateway which provides general access beyond your local network. Host-A gateway reserved for accessing a specific host external to your local network. Network-A gateway reserved for accessing a specific network external to your local network.')
gatewayIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2, 1, 5), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayIpAddress.setStatus('current')
if mibBuilder.loadTexts: gatewayIpAddress.setDescription('When the gateway is a Host or Network gateway, you must specify the IP address of the target host machine/network.')
gatewaySubnetBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewaySubnetBits.setStatus('current')
if mibBuilder.loadTexts: gatewaySubnetBits.setDescription('When the gateway is a Network gateway, you must specify the subnet/prefix bits for that network. If the IP address is IPv4, then the Subnet/Prefix Bits range is 0-32. If the IP address is IPv6, then the Subnet/Prefix Bits range is 0-128.')
gatewayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayInterface.setStatus('current')
if mibBuilder.loadTexts: gatewayInterface.setDescription('The interface that the management module is going to use to access the Remote Host.')
hostTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 3), )
if mibBuilder.loadTexts: hostTable.setStatus('current')
if mibBuilder.loadTexts: hostTable.setDescription('The hosts Group table.')
hostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "hostIndex"))
if mibBuilder.loadTexts: hostEntry.setStatus('current')
if mibBuilder.loadTexts: hostEntry.setDescription('An entry in the host table, each relating to a separate host.')
hostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 3, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: hostIndex.setStatus('current')
if mibBuilder.loadTexts: hostIndex.setDescription('The table entry number for this host.')
hostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 3, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostStatus.setStatus('current')
if mibBuilder.loadTexts: hostStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
hostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setStatus('current')
if mibBuilder.loadTexts: hostName.setDescription('The host name used for this host entry. To delete an entry, blank out this field. If blank, this entry is currently unused.')
hostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 3, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIpAddr.setStatus('current')
if mibBuilder.loadTexts: hostIpAddr.setDescription('The host IP address used for this entry.')
hostFqdn = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostFqdn.setStatus('current')
if mibBuilder.loadTexts: hostFqdn.setDescription('The host full qualified domain name for the host entry. If blank, this entry is currently unused.')
dnsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 4), )
if mibBuilder.loadTexts: dnsTable.setStatus('current')
if mibBuilder.loadTexts: dnsTable.setDescription('Table of DNS hosts')
dnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "dnsIndex"))
if mibBuilder.loadTexts: dnsEntry.setStatus('current')
if mibBuilder.loadTexts: dnsEntry.setDescription('Entries of the table, each relating to a separate DNS host.')
dnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 4, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: dnsIndex.setStatus('current')
if mibBuilder.loadTexts: dnsIndex.setDescription('DNS host index ')
dnsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 4, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsStatus.setStatus('current')
if mibBuilder.loadTexts: dnsStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
dnsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 4, 1, 3), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsIpAddress.setStatus('current')
if mibBuilder.loadTexts: dnsIpAddress.setDescription('You can specify the IP addresses for up to two DNS (Domain Name Servers) hosts in your network. The first DNS entry in the list is the primary DNS and the second DNS entry is the secondary server.')
dnsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 4, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsActive.setStatus('current')
if mibBuilder.loadTexts: dnsActive.setDescription('Activates/deactivates a DNS entry.')
dynamicDNSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5))
dynamicDNSStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSStatus.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
dynamicDNS = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNS.setStatus('current')
if mibBuilder.loadTexts: dynamicDNS.setDescription('Enable/disable dynamic DNS.')
dynamicDNSHostname = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSHostname.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSHostname.setDescription('Host name.')
dynamicDNSUserName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSUserName.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSUserName.setDescription('User name.')
dynamicDNSPassword = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSPassword.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSPassword.setDescription('This object identifies the dynamic DNS password. Reading of this object will always return a blank string')
dynamicDNSSystemType = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dynamic", 0), ("static", 1), ("custom", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSystemType.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSystemType.setDescription('System type.')
dynamicDNSWildCard = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1), ("nochange", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSWildCard.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSWildCard.setDescription('Specifies whether to add a alias such as * to your registered host name.')
dynamicDNSConnectionMethod = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("http", 0), ("httpport8245", 1), ("https", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSConnectionMethod.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSConnectionMethod.setDescription('Specifies how the management module is going to connection to the DynDNS.org server.')
dynamicDNSSSLVerifyPeerCertificate = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLVerifyPeerCertificate.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLVerifyPeerCertificate.setDescription('Enable this option when you want the Validation Criteria to match the Peer Certificate for authentication to pass. If you enable this option, you need to download an SSL/TLS certificate authority (CA) list file to the management module. Any values that are entered in the validation criteria must match the peer certificate for an SSL connection; any fields left blank will not be validated against the peer certificate.')
dynamicDNSSSLCountry = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCountry.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLCountry.setDescription('A two character country code; for example, US.')
dynamicDNSSSLStateProv = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLStateProv.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLStateProv.setDescription('Up to a 128 character entry for the state/province; for example, IL.')
dynamicDNSSSLLocality = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLLocality.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLLocality.setDescription('Up to a 128 character entry for the location; for example, a city.')
dynamicDNSSSLOrganisation = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLOrganisation.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLOrganisation.setDescription('Up to a 64 character entry for the organization; for example, Accounting.')
dynamicDNSSSLOrganisationUnit = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLOrganisationUnit.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLOrganisationUnit.setDescription('Up to a 64 character entry for the unit in the organization; for example, Payroll.')
dynamicDNSSSLCommonName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCommonName.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLCommonName.setDescription('Up to a 64 character entry for common name; for example, the host name or fully qualified domain name.')
dynamicDNSSSLEmail = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLEmail.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLEmail.setDescription('Up to a 64 character entry for an email address; for example, acct@anycompany.com.')
dynamicDNSStatusString = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynamicDNSStatusString.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSStatusString.setDescription('Dynamic DNS statistics')
dynamicDNSSSLCipherTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18), )
if mibBuilder.loadTexts: dynamicDNSSSLCipherTable.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLCipherTable.setDescription('SSL Cipher.')
dynamicDNSSSLCipherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "dynamicDNSSSLCipherPriority"))
if mibBuilder.loadTexts: dynamicDNSSSLCipherEntry.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLCipherEntry.setDescription('An entry in the dynamicDNSSSLCipherTable, each relating to a cipher entry.')
dynamicDNSSSLCipherPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: dynamicDNSSSLCipherPriority.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLCipherPriority.setDescription('The cipher priority. 1- highest 5 - lowest.')
dynamicDNSSSLCipherStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherStatus.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLCipherStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
dynamicDNSSSLCipherEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("any", 1), ("aes", 2), ("tripledes", 3), ("des", 4), ("arctwo", 5), ("arcfour", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherEncryption.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLCipherEncryption.setDescription('SSL Encryption. None is not allowed for priority 1. Any will use the first encryption format that can be negotiated. The default is any.')
dynamicDNSSSLCipherKeySizeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("min40", 0), ("min56", 1), ("min64", 2), ("min128", 3), ("min168", 4), ("min256", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherKeySizeMin.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLCipherKeySizeMin.setDescription('The minimum key size value that will be used for the specified encryption type. The default is 40.')
dynamicDNSSSLCipherKeySizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("max40", 0), ("max56", 1), ("max64", 2), ("max128", 3), ("max168", 4), ("max256", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherKeySizeMax.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLCipherKeySizeMax.setDescription('The maximum key size value that will be used for the specified encryption type. The default is 256.')
dynamicDNSSSLCipherKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("any", 0), ("rsa", 1), ("edhrsa", 2), ("edhdss", 3), ("adh", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherKeyExchange.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLCipherKeyExchange.setDescription('The type of key to exchange for the encryption format: Any-Any key exchange that is valid is used (this does not, however, include ADH keys). RSA-This is an RSA key exchange using an RSA key and certificate. EDHRSA-This is an EDH key exchange using an RSA key and certificate. EDHDSS-This is an EDH key exchange using a DSA key and certificate. ADH-This is an anonymous key exchange which does not require a private key or certificate. Choose this key if you do not want to authenticate the peer device, but you want the data encrypted on the SSL/TLS connection. The default is Any.')
dynamicDNSSSLCipherHMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 5, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("any", 0), ("sha", 1), ("md5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDNSSSLCipherHMAC.setStatus('current')
if mibBuilder.loadTexts: dynamicDNSSSLCipherHMAC.setDescription('Select the key-hashing for message authentication method for your encryption type: Any, MD5, or SHA1. The default is Any.')
ipv6Group = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6))
ipv6ServicesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 1))
ipv6serviceStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 1, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6serviceStatus.setStatus('current')
if mibBuilder.loadTexts: ipv6serviceStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
serviceAutoDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 1, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceAutoDiscovery.setStatus('current')
if mibBuilder.loadTexts: serviceAutoDiscovery.setDescription('When on, the management module will send out a Router Solicitation message. If a Router Advertisement message is received, the management module will configure the IPv6 address(es) and configuration parameters based on the information contained in the advertisement. If no Router Advertisement message is received, the management module will attempt to connect to a DHCPv6 server to obtain IPv6 addresses and other configuration parameters. Default on.')
serviceDHCPv6 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCPv6.setStatus('current')
if mibBuilder.loadTexts: serviceDHCPv6.setDescription('When on, requests IPv6 address(es) and configuration information from the DHCPv6 server. Default off.')
serviceDHCPv6IPAddresses = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCPv6IPAddresses.setStatus('current')
if mibBuilder.loadTexts: serviceDHCPv6IPAddresses.setDescription('When on, the management module will accept IPv6 address(es) from the DHCPv6 server.')
serviceDHCPv6NetworkPrefix = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCPv6NetworkPrefix.setStatus('current')
if mibBuilder.loadTexts: serviceDHCPv6NetworkPrefix.setDescription('When on, the management module will accept the network prefix from the DHCPv6 server.')
serviceDHCPv6AutoObtainDNS = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serviceDHCPv6AutoObtainDNS.setStatus('current')
if mibBuilder.loadTexts: serviceDHCPv6AutoObtainDNS.setDescription('If on, the DNS server IP address will be obtained automatically automatically via DHCP.')
ipv6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 2), )
if mibBuilder.loadTexts: ipv6AddressTable.setStatus('current')
if mibBuilder.loadTexts: ipv6AddressTable.setDescription('IPv6 custom address table.')
ipv6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 2, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "ipv6AddressIndex"))
if mibBuilder.loadTexts: ipv6AddressEntry.setStatus('current')
if mibBuilder.loadTexts: ipv6AddressEntry.setDescription('IPv6 custom entry.')
ipv6AddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 2, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: ipv6AddressIndex.setStatus('current')
if mibBuilder.loadTexts: ipv6AddressIndex.setDescription('Custom IPv6 address index.')
ipv6AddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 2, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressStatus.setStatus('current')
if mibBuilder.loadTexts: ipv6AddressStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
ipv6AddressAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 2, 1, 3), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressAddr.setStatus('current')
if mibBuilder.loadTexts: ipv6AddressAddr.setDescription("Either enter a network prefix that the Device Server will use to derive an IPv6 address using the Device Server's MAC address (must turn ipv6AddressAuto1 on) or enter a specific IPv6 address.")
ipv6AddressPrefixBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressPrefixBits.setStatus('current')
if mibBuilder.loadTexts: ipv6AddressPrefixBits.setDescription('The IPv6 prefix bits of either the network or IPv6 address.')
ipv6AddressAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 2, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressAuto.setStatus('current')
if mibBuilder.loadTexts: ipv6AddressAuto.setDescription("When on, the management module will derive an IPv6 address from the entered network prefix and the management module's MAC address.")
ipv6AddressSendAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 2, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6AddressSendAdvertise.setStatus('current')
if mibBuilder.loadTexts: ipv6AddressSendAdvertise.setDescription('When on, the management module will include the IPv6 address in router advertisements.')
interfacev6StatsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 3), )
if mibBuilder.loadTexts: interfacev6StatsTable.setStatus('current')
if mibBuilder.loadTexts: interfacev6StatsTable.setDescription('The interface IPv6 Group table.')
interfacev6StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "interfacev6Index"))
if mibBuilder.loadTexts: interfacev6StatsEntry.setStatus('current')
if mibBuilder.loadTexts: interfacev6StatsEntry.setDescription('An entry in the interface IPv6 table')
interfacev6Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 3, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: interfacev6Index.setStatus('current')
if mibBuilder.loadTexts: interfacev6Index.setDescription('The IPv6 interface index.')
interfacev6Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacev6Name.setStatus('current')
if mibBuilder.loadTexts: interfacev6Name.setDescription('The IPv6 interface name.')
interfacev6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacev6Address.setStatus('current')
if mibBuilder.loadTexts: interfacev6Address.setDescription('The IPv6 interface IP address.')
interfacev6PrefixBits = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacev6PrefixBits.setStatus('current')
if mibBuilder.loadTexts: interfacev6PrefixBits.setDescription('The IPv6 interface Prefix bits')
interfacev6Scope = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("global", 0), ("host", 1), ("link", 2), ("site", 3), ("compatv4", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfacev6Scope.setStatus('current')
if mibBuilder.loadTexts: interfacev6Scope.setDescription('The IPv6 interface scope.')
ipv6TunnelTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 4), )
if mibBuilder.loadTexts: ipv6TunnelTable.setStatus('current')
if mibBuilder.loadTexts: ipv6TunnelTable.setDescription('IPv6 tunnel table.')
ipv6TunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "ipv6TunnelIndex"))
if mibBuilder.loadTexts: ipv6TunnelEntry.setStatus('current')
if mibBuilder.loadTexts: ipv6TunnelEntry.setDescription('IPv6 tunnel entry.')
ipv6TunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 4, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: ipv6TunnelIndex.setStatus('current')
if mibBuilder.loadTexts: ipv6TunnelIndex.setDescription('The IPv6 tunnel index.')
ipv6TunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 4, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6TunnelStatus.setStatus('current')
if mibBuilder.loadTexts: ipv6TunnelStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
ipv6TunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6TunnelName.setStatus('current')
if mibBuilder.loadTexts: ipv6TunnelName.setDescription('The name of the IPv6 tunnel. Maximum 16 alphanumeric characters.')
ipv6TunnelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("manual", 0), ("ip6to4", 1), ("teredo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6TunnelMode.setStatus('current')
if mibBuilder.loadTexts: ipv6TunnelMode.setDescription('The method or protocol that is used to create the IPv6 tunnel. o Manual-When specified, the management module will manually create the IPv6 tunnel to the specified Remote Host through the specified Interface. o ip6to4-When specified, the MCR-MGT will broadcast to the multicast address 192.88.99.1 through the specified Interface. When the closest ip6to4 router responds, it will create the IPv6 tunnel, encapsulating and decapsulating IPv6 traffic sent to and from the management module. o Teredo-When specified, the Teredo protocol encapsulates the IPv6 packet as an IPv4 UDP message, allowing it to pass through most network address translator (NAT) boxes and create an IPv6 tunnel to the specified Remote Host (a Teredo server) through the specified Interface. Default is Manual.')
ipv6TunnelRemoteHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 1, 6, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv6TunnelRemoteHost.setStatus('current')
if mibBuilder.loadTexts: ipv6TunnelRemoteHost.setDescription('The IPv4 host that can access the IPv6 network when the Mode is Manual. The Teredo server when the Mode is Teredo. ')
mgtAcessServicesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1))
accessServicesStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessServicesStatus.setStatus('current')
if mibBuilder.loadTexts: accessServicesStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
accessServicesSessInactTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessServicesSessInactTimeout.setStatus('current')
if mibBuilder.loadTexts: accessServicesSessInactTimeout.setDescription('The amount of time, in seconds, that the management session inactivity timer will run. When the timer expires, becuase no activity on the management session within the specified time, the management module will reset the management session. A value of 0 (zero), means that the inactivity timer will not expire (the session is open permanently, or until the user logs out).')
accessServiceHTTPD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessServiceHTTPD.setStatus('current')
if mibBuilder.loadTexts: accessServiceHTTPD.setDescription('Turn on/off the HTTPD Service')
accessServiceHTTPSD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessServiceHTTPSD.setStatus('current')
if mibBuilder.loadTexts: accessServiceHTTPSD.setDescription('Turn on/off the HTTPSD Service')
accessServiceTelnetD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessServiceTelnetD.setStatus('current')
if mibBuilder.loadTexts: accessServiceTelnetD.setDescription('Turn on/off the TelnetD Service')
acessServiceSSHD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acessServiceSSHD.setStatus('current')
if mibBuilder.loadTexts: acessServiceSSHD.setDescription('Turn on/off the SSHD Service')
acessServiceSnmpD = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acessServiceSnmpD.setStatus('current')
if mibBuilder.loadTexts: acessServiceSnmpD.setDescription('Turn on/off the SnmpD Service')
acessServiceSetIP = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acessServiceSetIP.setStatus('current')
if mibBuilder.loadTexts: acessServiceSetIP.setDescription('Turn on/off the SetIP Service')
acessIncomingPings = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 1, 9), EnableDisableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acessIncomingPings.setStatus('current')
if mibBuilder.loadTexts: acessIncomingPings.setDescription('Allow incoming ping requests.')
webManagerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 2))
webManagerStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 2, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webManagerStatus.setStatus('current')
if mibBuilder.loadTexts: webManagerStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
httpsPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsPassphrase.setStatus('current')
if mibBuilder.loadTexts: httpsPassphrase.setDescription('This object identifies the HTTPS SSL certificate passphrase. Reading of this object will always return a blank string')
sshServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3))
sshServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerStatus.setStatus('current')
if mibBuilder.loadTexts: sshServerStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
sshServerAuthRSA = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerAuthRSA.setStatus('current')
if mibBuilder.loadTexts: sshServerAuthRSA.setDescription("When a client SSH session requests RSA authentication, the management module's SSH server will authenticate the user via RSA.")
sshServerAuthDSA = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 3), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerAuthDSA.setStatus('current')
if mibBuilder.loadTexts: sshServerAuthDSA.setDescription("When a client SSH session requests DSA authentication, the management module's SSH server will authenticate the user via DSA")
sshServerAuthKeyboard = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 4), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerAuthKeyboard.setStatus('current')
if mibBuilder.loadTexts: sshServerAuthKeyboard.setDescription('The user types in a password for authentication.')
sshServerAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerAuthPassword.setStatus('current')
if mibBuilder.loadTexts: sshServerAuthPassword.setDescription('The user types in a password for authentication.')
sshServerCipher3Des = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 6), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerCipher3Des.setStatus('current')
if mibBuilder.loadTexts: sshServerCipher3Des.setDescription("The management module SSH server's 3DES encryption is enable/disabled.")
sshServerCipherBlowfish = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 7), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerCipherBlowfish.setStatus('current')
if mibBuilder.loadTexts: sshServerCipherBlowfish.setDescription("The management module SSH server's Blowfish encryption is enabled/disabled.")
sshServerCipherCipherAES = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 8), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerCipherCipherAES.setStatus('current')
if mibBuilder.loadTexts: sshServerCipherCipherAES.setDescription("The management module SSH server's AES encryption is enabled/disabled")
sshServerCipherCAST = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerCipherCAST.setStatus('current')
if mibBuilder.loadTexts: sshServerCipherCAST.setDescription("The management module SSH server's CAST encryption is enabled/disabled")
sshServerCipherArcfour = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerCipherArcfour.setStatus('current')
if mibBuilder.loadTexts: sshServerCipherArcfour.setDescription("The management module SSH server's Arcfour encryption is enabled/disabled.")
sshServerVerbose = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerVerbose.setStatus('current')
if mibBuilder.loadTexts: sshServerVerbose.setDescription('Displays debug messages on the terminal.')
sshServerCompression = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerCompression.setStatus('current')
if mibBuilder.loadTexts: sshServerCompression.setDescription('Requests compression of all data. Compression is desirable on slow connections, but will only slow down things on fast networks.')
sshServerSSH1 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 3, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerSSH1.setStatus('current')
if mibBuilder.loadTexts: sshServerSSH1.setDescription('Enable/Disable SSH-1 on the server.')
snmpAgentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4))
snmpAgentStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentStatus.setStatus('current')
if mibBuilder.loadTexts: snmpAgentStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
snmpContact = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpContact.setStatus('current')
if mibBuilder.loadTexts: snmpContact.setDescription('The name and contract information of the person who manages this SMNP node.')
snmpLocation = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpLocation.setStatus('current')
if mibBuilder.loadTexts: snmpLocation.setDescription('The physical location of the SNMP node.')
snmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 4), )
if mibBuilder.loadTexts: snmpCommunityTable.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityTable.setDescription('Table of SNMP communities configured for the MCR-MGT agent')
snmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "snmpCommunityIndex"))
if mibBuilder.loadTexts: snmpCommunityEntry.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityEntry.setDescription('Entries of the table, each relating to a separate SNMP community definition ')
snmpCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 4, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: snmpCommunityIndex.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityIndex.setDescription('The MCR-MGT agent community index')
snmpCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 4, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityStatus.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
snmpCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityName.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityName.setDescription('A name that will be sent to the management module from an SNMP manager. This name will define the permissions of the manager.')
snmpCommunityIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 4, 1, 4), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityIpAddress.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityIpAddress.setDescription('The IP address of the SNMP manager that will send requests to the management module. If the address is 0.0.0.0, any SNMP manager with the Community Name can access the management module.')
snmpCommunityPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("readonly", 1), ("readwrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCommunityPermission.setStatus('current')
if mibBuilder.loadTexts: snmpCommunityPermission.setDescription('Permits the management module to respond to SNMP requests by: None -There is no response to requests from SNMP. Readonly -Responds only to Read requests from SNMP. Readwrite -Responds to both Read and Write requests from SNMP.')
snmpV3ReadOnlyUser = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 5))
snmpV3ReadOnlyStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 5, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadOnlyStatus.setStatus('current')
if mibBuilder.loadTexts: snmpV3ReadOnlyStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
snmpV3ReadOnlyUserName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadOnlyUserName.setStatus('current')
if mibBuilder.loadTexts: snmpV3ReadOnlyUserName.setDescription('SNMP v3 read-only user name. This SNMP v3 user will have read-only S SNMP access permissions.')
snmpV3ReadOnlySecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("authNoPriv", 1), ("authPriv", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadOnlySecurityLevel.setStatus('current')
if mibBuilder.loadTexts: snmpV3ReadOnlySecurityLevel.setDescription('Specifies the SNMP v3 read-only user security level.')
snmpV3ReadOnlyAuthAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("md5", 0), ("sha", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadOnlyAuthAlgorithm.setStatus('current')
if mibBuilder.loadTexts: snmpV3ReadOnlyAuthAlgorithm.setDescription('Specifies the SNMP v3 read-only user authentication method.')
snmpV3ReadOnlyAuthPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadOnlyAuthPasswd.setStatus('current')
if mibBuilder.loadTexts: snmpV3ReadOnlyAuthPasswd.setDescription('Specifies the SNMP v3 read-only user authentication password.')
snmpV3ReadOnlyPrivacyAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("des", 0), ("aes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadOnlyPrivacyAlgorithm.setStatus('current')
if mibBuilder.loadTexts: snmpV3ReadOnlyPrivacyAlgorithm.setDescription('Specifies the SNMP v3 read-only user privacy algorithm.')
snmpV3ReadOnlyPrivacyPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadOnlyPrivacyPasswd.setStatus('current')
if mibBuilder.loadTexts: snmpV3ReadOnlyPrivacyPasswd.setDescription('Specifies the SNMP v3 read-only user privacy password.')
snmpV3ReadWriteUser = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 6))
snmpV3ReadWriteStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 6, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadWriteStatus.setStatus('current')
if mibBuilder.loadTexts: snmpV3ReadWriteStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
snmpV3ReadWriteUserName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadWriteUserName.setStatus('current')
if mibBuilder.loadTexts: snmpV3ReadWriteUserName.setDescription('Specifies the SNMP v3 read-write user name. This SNMP v3 user will have read-write SNMP access permissions.')
snmpV3ReadWriteSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("authNoPriv", 1), ("authPriv", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadWriteSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: snmpV3ReadWriteSecurityLevel.setDescription('Specifies the SNMP v3 read-write user security level.')
snmpV3ReadWriteAuthAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("md5", 0), ("sha", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadWriteAuthAlgorithm.setStatus('current')
if mibBuilder.loadTexts: snmpV3ReadWriteAuthAlgorithm.setDescription('Specifies the SNMP v3 read-write user authentication method.')
snmpV3ReadWriteAuthPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadWriteAuthPasswd.setStatus('current')
if mibBuilder.loadTexts: snmpV3ReadWriteAuthPasswd.setDescription('Specifies the SNMP v3 read-write user authentication password.')
snmpV3ReadWritePrivacyAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("des", 0), ("aes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadWritePrivacyAlgorithm.setStatus('current')
if mibBuilder.loadTexts: snmpV3ReadWritePrivacyAlgorithm.setDescription('Specifies the SNMP v3 read-write user privacy algorithm.')
snmpV3ReadWritePrivacyPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 4, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3ReadWritePrivacyPasswd.setStatus('current')
if mibBuilder.loadTexts: snmpV3ReadWritePrivacyPasswd.setDescription('Specifies the SNMP v3 read-write user privacy password.')
authorizedHostGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5))
authHostsStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authHostsStatus.setStatus('current')
if mibBuilder.loadTexts: authHostsStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
authHostOnly = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 2), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authHostOnly.setStatus('current')
if mibBuilder.loadTexts: authHostOnly.setDescription('Determines whether only authorized hosts are allowed to access the management module. If set to yes then the management module will only respond to, and allow access to and from, the IP or MAC addresses of hosts configured in the authorized IP and MAC hosts tables.')
authIpHostTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 3), )
if mibBuilder.loadTexts: authIpHostTable.setStatus('current')
if mibBuilder.loadTexts: authIpHostTable.setDescription('The hosts Group table.')
authIpHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "authHostIpIndex"))
if mibBuilder.loadTexts: authIpHostEntry.setStatus('current')
if mibBuilder.loadTexts: authIpHostEntry.setDescription('An entry in the AuthIpHostTable, each relating to a IP host.')
authHostIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 3, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: authHostIpIndex.setStatus('current')
if mibBuilder.loadTexts: authHostIpIndex.setDescription('The table entry number for this host.')
authHostIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 3, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authHostIpStatus.setStatus('current')
if mibBuilder.loadTexts: authHostIpStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
authHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 3, 1, 3), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authHostIpAddr.setStatus('current')
if mibBuilder.loadTexts: authHostIpAddr.setDescription('The host IP address used for this entry.')
authHostIpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authHostIpDescr.setStatus('current')
if mibBuilder.loadTexts: authHostIpDescr.setDescription('The host IP entry description.')
authMacHostTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 4), )
if mibBuilder.loadTexts: authMacHostTable.setStatus('current')
if mibBuilder.loadTexts: authMacHostTable.setDescription('The hosts Group table.')
authMacHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "authHostMacIndex"))
if mibBuilder.loadTexts: authMacHostEntry.setStatus('current')
if mibBuilder.loadTexts: authMacHostEntry.setDescription('An entry in the AuthIpHostTable, each relating to a host.')
authHostMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 4, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: authHostMacIndex.setStatus('current')
if mibBuilder.loadTexts: authHostMacIndex.setDescription('The table entry number for this host.')
authHostMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 4, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authHostMacStatus.setStatus('current')
if mibBuilder.loadTexts: authHostMacStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
authHostMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 4, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authHostMacAddr.setStatus('current')
if mibBuilder.loadTexts: authHostMacAddr.setDescription('The host MAC address used for this entry.')
authHostMacDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 2, 5, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authHostMacDescr.setStatus('current')
if mibBuilder.loadTexts: authHostMacDescr.setDescription('The host MAC address entry description.')
alertLocalEventGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 1))
localEventLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 1, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localEventLogStatus.setStatus('current')
if mibBuilder.loadTexts: localEventLogStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
localEventLogEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 1, 2), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localEventLogEnabled.setStatus('current')
if mibBuilder.loadTexts: localEventLogEnabled.setDescription('Determines whether alert events are logged to the internal local event log.')
localEventLogAlertLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 1, 3), AlertSeverityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localEventLogAlertLevel.setStatus('current')
if mibBuilder.loadTexts: localEventLogAlertLevel.setDescription('Choose the alert level that will trigger a local event being stored in the local event log. When you select an alert level, all alerts that appear above it in the list will also trigger a local event log message. For example, if you select oneTimeError, all oneTimeError, persistantError, moduleLevelFault, and systemLevelFault alert events will be generate a local event message.')
localEventLogClear = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 1, 4), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localEventLogClear.setStatus('current')
if mibBuilder.loadTexts: localEventLogClear.setDescription('Writing a yes(1) to this object will clear the local event log on the management module. Reading of this object will always return 0')
alertSyslogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 2))
syslogStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 2, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogStatus.setStatus('current')
if mibBuilder.loadTexts: syslogStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
syslogEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 2, 2), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEnabled.setStatus('current')
if mibBuilder.loadTexts: syslogEnabled.setDescription('Determines whether syslog is enabled.')
syslogSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("informational", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: syslogSeverityLevel.setDescription('Choose the severity level that will trigger a syslog message: Emergency, Alert, Critical, Error, Warning, Notice, Info, Debug When you select a severity level, all the levels that appear above it in the list will also trigger a syslog message. For example, if you select Error, all Error, Critical, Alert, and Emergency events will generate a syslog message. NOTE: In addition to alert events, syslog message will also be generated for several non-alert system events')
syslogPrimaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogPrimaryHost.setStatus('current')
if mibBuilder.loadTexts: syslogPrimaryHost.setDescription("The first preconfigured host that the management module will attempt to send system log messages to; messages will be displayed on the host's monitor.")
syslogSecondaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSecondaryHost.setStatus('current')
if mibBuilder.loadTexts: syslogSecondaryHost.setDescription("If the management module cannot communicate with the primary host, then the management module will attempt to send system log messages to this preconfigured host; messages will be displayed on the host's monitor.")
alertSnmpTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3))
snmpTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapStatus.setStatus('current')
if mibBuilder.loadTexts: snmpTrapStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
snmpTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 2), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEnabled.setDescription('Determines whether SNMP Traps are enabled.')
snmpTrapAlertLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 3), AlertSeverityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapAlertLevel.setStatus('current')
if mibBuilder.loadTexts: snmpTrapAlertLevel.setDescription('Choose the alert level that will trigger a SNMP trap message to be sent if SNMP traps is enabled. When you select an alert level, all alerts that appear above it in the list will also trigger a local event log message. For example, if you select oneTimeError, all oneTimeError, persistantError, moduleLevelFault, and systemLevelFault alert events will be generate a SNMP trap message.')
snmpTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4), )
if mibBuilder.loadTexts: snmpTrapHostTable.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostTable.setDescription('Table of SNMP Trap Hosts information.')
snmpTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "snmpTrapHostIndex"))
if mibBuilder.loadTexts: snmpTrapHostEntry.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostEntry.setDescription('Entries of the table, each relating to a separate SNMP trap host.')
snmpTrapHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1, 1), GenericTableIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: snmpTrapHostIndex.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostIndex.setDescription('This object identifies the SNMP trap host index.')
snmpTrapHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostStatus.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
snmpTrapHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1, 3), Ipv4v6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostIpAddress.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostIpAddress.setDescription('Defines the hosts (by IP address) that will receive trap messages generated by the management module. ')
snmpTrapHostUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostUdpPort.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostUdpPort.setDescription('Defines the UDP port number the SNMP trap host will listen on to receive trap messages generated by the management module.')
snmpTrapHostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("snmpTrapV1", 0), ("snmpTrapV2c", 1), ("snmpTrapV3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostVersion.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostVersion.setDescription('Defines the SNMP version of the traps sent to this host. If snmpTrapV3 is selected then the SNMP trap v3 user ')
snmpTrapHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("snmpTrap", 0), ("snmpInform", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostType.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostType.setDescription('If set to snmpInform(1) the management module will send traps via an INFORM-PDU, expecting a response from the trap host, retransmitting if required. Otherwise it will send them via a TRAP-PDU or TRAP2-PDU. This object is ignored for for SNMP v1')
snmpTrapHostCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostCommunity.setDescription('An arbitrary trap community name. This object is ignored for SNMP v3')
snmpTrapHostEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 4, 1, 8), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapHostEnable.setStatus('current')
if mibBuilder.loadTexts: snmpTrapHostEnable.setDescription('If set to No, the management module will not use this table entry to send traps.')
snmpV3TrapUser = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 5))
snmpV3TrapUserStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 5, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapUserStatus.setStatus('current')
if mibBuilder.loadTexts: snmpV3TrapUserStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
snmpV3TrapUserUserName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapUserUserName.setStatus('current')
if mibBuilder.loadTexts: snmpV3TrapUserUserName.setDescription('SNMP trap v3 user name. This user will be used for every SNMP trap host that is using snmpTrapHostVersion of snmpTrapV3(2) ')
snmpV3TrapUserSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("authNoPriv", 1), ("authPriv", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapUserSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: snmpV3TrapUserSecurityLevel.setDescription('SNMP trap v3 user security level.')
snmpV3TrapUserAuthAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("md5", 0), ("sha", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapUserAuthAlgorithm.setStatus('current')
if mibBuilder.loadTexts: snmpV3TrapUserAuthAlgorithm.setDescription('SNMP trap v3 user authentication method.')
snmpV3TrapUserAuthPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapUserAuthPasswd.setStatus('current')
if mibBuilder.loadTexts: snmpV3TrapUserAuthPasswd.setDescription('SNMP trap v3 user authentication password.')
snmpV3TrapUserPrivacyAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("des", 0), ("aes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapUserPrivacyAlgorithm.setStatus('current')
if mibBuilder.loadTexts: snmpV3TrapUserPrivacyAlgorithm.setDescription('SNMP trap v3 user privacy algorithm.')
snmpV3TrapUserPrivacyPasswd = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapUserPrivacyPasswd.setStatus('current')
if mibBuilder.loadTexts: snmpV3TrapUserPrivacyPasswd.setDescription('SNMP trap v3 user privacy password.')
snmpTrapGlbHostTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapGlbHostTimeout.setStatus('current')
if mibBuilder.loadTexts: snmpTrapGlbHostTimeout.setDescription('Defines the timeout in miliseconds between retries of sending the SNMP INFORM-PDU if no response is received for the trap host. ')
snmpTapGlobHostRetries = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTapGlobHostRetries.setStatus('current')
if mibBuilder.loadTexts: snmpTapGlobHostRetries.setDescription('Defines the number of retries to send the SNMP INFORM-PDU trap if no response is received from the trap host.')
snmpV3LocalEngineID = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 8), SnmpEngineID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3LocalEngineID.setStatus('current')
if mibBuilder.loadTexts: snmpV3LocalEngineID.setDescription('An SNMPv3 engine ID used by the MCR-MGT for identification when sending SNMP v3 traps.')
snmpV3LocalEngineIDTextSuffix = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3LocalEngineIDTextSuffix.setStatus('current')
if mibBuilder.loadTexts: snmpV3LocalEngineIDTextSuffix.setDescription('This configured text is used to build the suffix of the SNMPv3 engine ID')
snmpTrapVarsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10))
mgtAccessMethod = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mgtConsole", 1), ("mgtSnmp", 2), ("mgtTelnet", 3), ("mgtSSH", 4), ("mgtHTTP", 5), ("mgtHTTPS", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mgtAccessMethod.setStatus('current')
if mibBuilder.loadTexts: mgtAccessMethod.setDescription('Defines the management protocol used to access the management module')
remoteMgtIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: remoteMgtIpAddress.setStatus('current')
if mibBuilder.loadTexts: remoteMgtIpAddress.setDescription('Defines the remote IP address accessing the management module')
remoteTftpHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: remoteTftpHost.setStatus('current')
if mibBuilder.loadTexts: remoteTftpHost.setDescription('Defines the remote TFTP server IP address or host name performing the TFP file transfer')
remoteTftpFileName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: remoteTftpFileName.setStatus('current')
if mibBuilder.loadTexts: remoteTftpFileName.setDescription('Defines the remote TFTP file name ')
networkIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 5), Ipv4v6Address()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: networkIpAddress.setStatus('current')
if mibBuilder.loadTexts: networkIpAddress.setDescription('Defines the IP address assigned to the management module ')
mcrMediaPortNum = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcrMediaPortNum.setStatus('current')
if mibBuilder.loadTexts: mcrMediaPortNum.setDescription('This object identifies the media converter module port number.')
mcrMediaPortDescr = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcrMediaPortDescr.setStatus('current')
if mibBuilder.loadTexts: mcrMediaPortDescr.setDescription('A description of the media port that consists of the user defined media port name, followed by the system name for the port.')
eventSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 8), AlertSeverityLevel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: eventSeverityLevel.setDescription('The severity level of the event that generated this trap.')
xfpDmiRealTimeAux = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiRealTimeAux.setStatus('current')
if mibBuilder.loadTexts: xfpDmiRealTimeAux.setDescription('This object identifies the XFP DMI real time values for one of the auxillary register sets.')
xfpDmiHighAuxWarn = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiHighAuxWarn.setStatus('current')
if mibBuilder.loadTexts: xfpDmiHighAuxWarn.setDescription('This object identifies the XFP DMI high warning threshold for one of the auxillary register sets.')
xfpDmiHighAuxAlarm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiHighAuxAlarm.setStatus('current')
if mibBuilder.loadTexts: xfpDmiHighAuxAlarm.setDescription('This object identifies the XFP DMI alarm alarm threshold for one of the auxillary register sets.')
xfpDmiLowAuxWarn = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiLowAuxWarn.setStatus('current')
if mibBuilder.loadTexts: xfpDmiLowAuxWarn.setDescription('This object identifies the XFP DMI low warning threshold for one of the auxillary register sets.')
xfpDmiLowAuxAlarm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xfpDmiLowAuxAlarm.setStatus('current')
if mibBuilder.loadTexts: xfpDmiLowAuxAlarm.setDescription('This object identifies the XFP DMI low alarm threshold for one of the auxillary register sets.')
mcrModuleSubTypeInserted = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("blank", -1), ("sts", 0), ("xts", 1), ("xtsh", 2), ("xtx", 3), ("xtxh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrModuleSubTypeInserted.setStatus('current')
if mibBuilder.loadTexts: mcrModuleSubTypeInserted.setDescription('This object identifies the module sub-type inserted in the slot.')
mcrMediaBackedupModuleSubType = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("blank", -1), ("sts", 0), ("xts", 1), ("xtsh", 2), ("xtx", 3), ("xtxh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcrMediaBackedupModuleSubType.setStatus('current')
if mibBuilder.loadTexts: mcrMediaBackedupModuleSubType.setDescription('This object identifies the module sub-type of the backup configuration.')
mcrMediaPortBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 16), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcrMediaPortBandwidth.setStatus('current')
if mibBuilder.loadTexts: mcrMediaPortBandwidth.setDescription("This object identifies the media converter module port's current bandwith in kbps.")
mcrMediaPortBandwidthThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 3, 10, 17), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mcrMediaPortBandwidthThreshold.setStatus('current')
if mibBuilder.loadTexts: mcrMediaPortBandwidthThreshold.setDescription("This object identifies the media converter module port's bandwith threshold in kbps.")
alertEmailGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4))
emailStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailStatus.setStatus('current')
if mibBuilder.loadTexts: emailStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
emailEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 2), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailEnabled.setStatus('current')
if mibBuilder.loadTexts: emailEnabled.setDescription('Determines whether or not email notification is turned on. Default is Off.')
emailAlertLevel = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 3), AlertSeverityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailAlertLevel.setStatus('current')
if mibBuilder.loadTexts: emailAlertLevel.setDescription('Choose the alert level that will trigger a email message to be sent if alert email is enabled. When you select an alert level, all alerts that appear above it in the list will also trigger a local event log message. For example, if you select oneTimeError, all oneTimeError, persistantError, moduleLevelFault, and systemLevelFault alert events will be generate a email message.')
emailTo = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailTo.setStatus('current')
if mibBuilder.loadTexts: emailTo.setDescription('An email address or list of email addresses that will receive the email notification.')
emailFrom = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailFrom.setStatus('current')
if mibBuilder.loadTexts: emailFrom.setDescription('This field can contain an email address that might identify the management module name or some other value.')
emailSMTPHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPHost.setStatus('current')
if mibBuilder.loadTexts: emailSMTPHost.setDescription('The SMTP host (email server) that will process the email notification request. This can be either a host name defined in the management module host table or the SMTP host IP address.')
emailReply = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailReply.setStatus('current')
if mibBuilder.loadTexts: emailReply.setDescription('The email address to whom all replies to the email notification should go.')
emailSubject = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSubject.setStatus('current')
if mibBuilder.loadTexts: emailSubject.setDescription('A text string, which can contain spaces, that will display in the Subject field of the email notification.')
emailSMTPUsername = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPUsername.setStatus('current')
if mibBuilder.loadTexts: emailSMTPUsername.setDescription('The user name for the SMTP server, if the server requires authentication.')
emailSMTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPPassword.setStatus('current')
if mibBuilder.loadTexts: emailSMTPPassword.setDescription('The password for the SMTP server, if the server requires authentication.')
emailSMTPEncryption = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("tls", 2), ("ssl", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPEncryption.setStatus('current')
if mibBuilder.loadTexts: emailSMTPEncryption.setDescription('The encryption method for the SMTP server.')
emailSMTPValidatePeerCertificate = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 12), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPValidatePeerCertificate.setStatus('current')
if mibBuilder.loadTexts: emailSMTPValidatePeerCertificate.setDescription('Validate peer SSL/TLS certificate, when SSL or TLS encryption is used.')
emailSMTPTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPTcpPort.setStatus('current')
if mibBuilder.loadTexts: emailSMTPTcpPort.setDescription('The TCP port used for communicating with the SMTP server. For no encryption or TLS encryption, use port 25. For SSL encryption, use port 465.')
emailSMTPDomain = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 3, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emailSMTPDomain.setStatus('current')
if mibBuilder.loadTexts: emailSMTPDomain.setDescription('The domain for NTLM authentication with the SMTP server, if applicable.')
mgtUsersStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtUsersStatus.setStatus('current')
if mibBuilder.loadTexts: mgtUsersStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
mgtUsersByPassLoginEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtUsersByPassLoginEnabled.setStatus('current')
if mibBuilder.loadTexts: mgtUsersByPassLoginEnabled.setDescription('Indicates whether by pass login is enabled. When enable users will be automatically login as admin user. The will not be prompted for a user ID or password when accessing the management module. ')
mgtUsersPrimaryAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("local", 1), ("radius", 2), ("kerberos", 3), ("ldap", 4), ("tacacs", 5), ("securid", 6), ("nis", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtUsersPrimaryAuthMethod.setStatus('current')
if mibBuilder.loadTexts: mgtUsersPrimaryAuthMethod.setDescription('The first authentication method that the management module attempts. Some type of authentication must be done by the management module.')
mgtUsersSecondaryAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("radius", 3), ("kerberos", 4), ("ldap", 5), ("tacacs", 6), ("securid", 7), ("nis", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtUsersSecondaryAuthMethod.setStatus('current')
if mibBuilder.loadTexts: mgtUsersSecondaryAuthMethod.setDescription('If the Primary Authentication Method fails, the next authentication method that the management module attempts. You can choose to use authentication methods in combination. For example, you can specify the Primary Authentication Method as Local and the Secondary Authentication Method as RADIUS. Therefore, some users can be defined in the Device Server (Local) others in RADIUS.')
mgtUsersAlwaysAttemptSecond = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtUsersAlwaysAttemptSecond.setStatus('current')
if mibBuilder.loadTexts: mgtUsersAlwaysAttemptSecond.setDescription('If enabled, the secondary authentication method will always be used.')
localUserAccountsTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 6), )
if mibBuilder.loadTexts: localUserAccountsTable.setStatus('current')
if mibBuilder.loadTexts: localUserAccountsTable.setDescription(' Table of locally defined user information')
localUserAccountsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 6, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "userIndex"))
if mibBuilder.loadTexts: localUserAccountsEntry.setStatus('current')
if mibBuilder.loadTexts: localUserAccountsEntry.setDescription('Entries of the table, each relating to separate user defined locally.')
userIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 6, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: userIndex.setStatus('current')
if mibBuilder.loadTexts: userIndex.setDescription('The table entry number for this user.')
userStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 6, 1, 2), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userStatus.setStatus('current')
if mibBuilder.loadTexts: userStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('The user name. To delete a user, set this field to blank. If blank, this entry is currently unused.')
userPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPassword.setStatus('current')
if mibBuilder.loadTexts: userPassword.setDescription('The password for the local user.')
userLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("admin", 0), ("operator", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLevel.setStatus('current')
if mibBuilder.loadTexts: userLevel.setDescription('Admin: Total access to the management module. More than one admin user account can exist, but we recommend that you only have one. operator: Full read only access to configuration and limited control commands ')
localUsersStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 7), )
if mibBuilder.loadTexts: localUsersStatusTable.setStatus('current')
if mibBuilder.loadTexts: localUsersStatusTable.setDescription(' Table of locally defined user information')
localUsersStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 7, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "userStatusIndex"))
if mibBuilder.loadTexts: localUsersStatusEntry.setStatus('current')
if mibBuilder.loadTexts: localUsersStatusEntry.setDescription('Entries of the table, each relating to separate user defined locally.')
userStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 7, 1, 1), GenericTableIndex())
if mibBuilder.loadTexts: userStatusIndex.setStatus('current')
if mibBuilder.loadTexts: userStatusIndex.setDescription('The table entry number for this user status.')
userStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userStatusName.setStatus('current')
if mibBuilder.loadTexts: userStatusName.setDescription('The user name. To delete a user, set this field to blank. If blank, this entry is currently unused.')
userStatusMgtAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mgtAccessHTTP", 1), ("mgtAccessHTTPS", 2), ("mgtAccessTelnet", 3), ("mgtAccessSSH", 4), ("mgtAccessConsole", 5))))
if mibBuilder.loadTexts: userStatusMgtAccessType.setStatus('current')
if mibBuilder.loadTexts: userStatusMgtAccessType.setDescription('Defines the management protocol used to access the management module')
userStatusRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 7, 1, 4), Ipv4v6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userStatusRemoteIPAddress.setStatus('current')
if mibBuilder.loadTexts: userStatusRemoteIPAddress.setDescription('This object specifies the remote IP address user management session.')
userStatusStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userStatusStartTime.setStatus('current')
if mibBuilder.loadTexts: userStatusStartTime.setDescription("This object identifies the date and time that the current user's management session started.")
userStatusLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("admin", 0), ("operator", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userStatusLevel.setStatus('current')
if mibBuilder.loadTexts: userStatusLevel.setDescription('Admin: Total access to the management module. More than one admin user account can exist, but we recommend that you only have one. operator: Full read only access to configuration and limited control commands ')
radiusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8))
radiusStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusStatus.setStatus('current')
if mibBuilder.loadTexts: radiusStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module. 6-Indicates that the changes in the container folder are to be discarded.')
radiusPrimaryAuthHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusPrimaryAuthHost.setStatus('current')
if mibBuilder.loadTexts: radiusPrimaryAuthHost.setDescription('Primary Radius Authentication Host')
radiusSecondaryAuthHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecondaryAuthHost.setStatus('current')
if mibBuilder.loadTexts: radiusSecondaryAuthHost.setDescription('Secondary Radius Authentication Host')
radiusAuthenticationPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthenticationPort.setStatus('current')
if mibBuilder.loadTexts: radiusAuthenticationPort.setDescription('The port that the RADIUS host listens to for authentication requests. The default port is 1812.')
radiusAccounting = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccounting.setStatus('current')
if mibBuilder.loadTexts: radiusAccounting.setDescription('Radius Accounting ')
radiusPrimaryAcctHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusPrimaryAcctHost.setStatus('current')
if mibBuilder.loadTexts: radiusPrimaryAcctHost.setDescription('Name of the primary RADIUS authentication host.')
radiusSecondaryAcctHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecondaryAcctHost.setStatus('current')
if mibBuilder.loadTexts: radiusSecondaryAcctHost.setDescription('Name of the secondary RADIUS authentication host.')
radiusAccountingPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAccountingPort.setStatus('current')
if mibBuilder.loadTexts: radiusAccountingPort.setDescription('The port that the RADIUS host listens to for accounting requests. The default port is 1813.')
radiusAcctAuth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctAuth.setStatus('current')
if mibBuilder.loadTexts: radiusAcctAuth.setDescription('Radius Accounting Authenticator ')
radiusRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusRetryLimit.setStatus('current')
if mibBuilder.loadTexts: radiusRetryLimit.setDescription('The number of times the management module tries to connect to the RADIUS server before erroring out. Valid values are 0-255. The default is 5.')
radiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusTimeout.setStatus('current')
if mibBuilder.loadTexts: radiusTimeout.setDescription('The time, in seconds, that the management module waits to receive a reply after sending out a request to a RADIUS accounting or authentication host. If no reply is received before the timeout period expires, the management module will retry the same host up to and including the number of retry attempts. Valid values are 1-255. The default is 3 seconds.')
radiusNasIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasIdentifier.setStatus('current')
if mibBuilder.loadTexts: radiusNasIdentifier.setDescription('The NAS identifier name. To delete this , set this field to blank.')
radiusNasIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 13), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasIpAddress.setStatus('current')
if mibBuilder.loadTexts: radiusNasIpAddress.setDescription('When on, the NAS Identifier obtains ipv4 address automatically. Default is on.')
radiusNasSpecifyIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasSpecifyIpAddress.setStatus('current')
if mibBuilder.loadTexts: radiusNasSpecifyIpAddress.setDescription('Specify the unique IPv4 address that NAS Identifier will use')
radiusNasIpv6Address = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 15), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasIpv6Address.setStatus('current')
if mibBuilder.loadTexts: radiusNasIpv6Address.setDescription('When on, the NAS Identifier obtains ipv6 address automatically. Default is on.')
radiusNasSpecifyIpv6Address = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 8, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasSpecifyIpv6Address.setStatus('current')
if mibBuilder.loadTexts: radiusNasSpecifyIpv6Address.setDescription('Specify the unique IPv6 address that NAS Identifier will use')
kerberosGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 9))
kerberosStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 9, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerberosStatus.setStatus('current')
if mibBuilder.loadTexts: kerberosStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
kerberosRealm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerberosRealm.setStatus('current')
if mibBuilder.loadTexts: kerberosRealm.setDescription('The Kerberos realm is the Kerberos host domain name, in upper-case letters.')
kerberosDomain = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerberosDomain.setStatus('current')
if mibBuilder.loadTexts: kerberosDomain.setDescription("The name of a host running the KDC (Key Distribution Center) for the specified realm. The host name that you specify must either be defined in the management module's host Table before the last reboot or be resolved by DNS.")
kerberosPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kerberosPort.setStatus('current')
if mibBuilder.loadTexts: kerberosPort.setDescription('The port that the Kerberos server listens to for authentication requests. If no port is specified, the default port 88 is used.')
ldapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10))
ldapStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapStatus.setStatus('current')
if mibBuilder.loadTexts: ldapStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
ldapHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapHost.setStatus('current')
if mibBuilder.loadTexts: ldapHost.setDescription("The name or IP address of the LDAP host. If you use a host name, that host must either have been defined in the management module's Host Table before the last reboot or be resolved by DNS. If you are using TLS, you must enter the same string you used to create the LDAP certificate. ")
ldapPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapPort.setStatus('current')
if mibBuilder.loadTexts: ldapPort.setDescription('The port that the LDAP host listens to for authentication requests. The default port is 389.')
ldapBase = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapBase.setStatus('current')
if mibBuilder.loadTexts: ldapBase.setDescription('The domain component (dc) that is the starting point for the search for user authentication.')
ldapEnableTLS = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapEnableTLS.setStatus('current')
if mibBuilder.loadTexts: ldapEnableTLS.setDescription('Enables/disables the Transport Layer Security (TLS) with the LDAP host.')
ldapTLSPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapTLSPort.setStatus('current')
if mibBuilder.loadTexts: ldapTLSPort.setDescription('Specify the port number that LDAP will use for TLS. The default is port 636.')
ldapUID = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapUID.setStatus('current')
if mibBuilder.loadTexts: ldapUID.setDescription("LDAP user attribute. e.g. uid (OpenLDAP) sAMAccountName (Active Directory) The default is 'uid'.")
ldapPasswordEncryption = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("md5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapPasswordEncryption.setStatus('current')
if mibBuilder.loadTexts: ldapPasswordEncryption.setDescription('LDAP password encryption method.')
ldapClientAuth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientAuth.setStatus('current')
if mibBuilder.loadTexts: ldapClientAuth.setDescription('LDAP client authentication.')
ldapClientName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientName.setStatus('current')
if mibBuilder.loadTexts: ldapClientName.setDescription('LDAP client name. Identifies the unit to the LDAP server, when client authentication is .')
ldapClientAppendBase = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 11), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientAppendBase.setStatus('current')
if mibBuilder.loadTexts: ldapClientAppendBase.setDescription('Append base to LDAP client name.')
ldapClientPassword = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 10, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ldapClientPassword.setStatus('current')
if mibBuilder.loadTexts: ldapClientPassword.setDescription('LDAP client password. Identifies the unit to the LDAP server, when client authentication is .')
tacacsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11))
tacacsStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsStatus.setStatus('current')
if mibBuilder.loadTexts: tacacsStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
tacacsPrimaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPrimaryHost.setStatus('current')
if mibBuilder.loadTexts: tacacsPrimaryHost.setDescription('The primary TACACS+ host that is used for authentication.')
tacacsSecondaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsSecondaryHost.setStatus('current')
if mibBuilder.loadTexts: tacacsSecondaryHost.setDescription('The secondary TACACS+ host that is used for authentication, should the primary TACACS+ host fail to respond.')
tacacsPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPort.setStatus('current')
if mibBuilder.loadTexts: tacacsPort.setDescription('The port number that TACACS+ listens to for authentication requests. The default port number is 49.')
tacacsAccounting = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAccounting.setStatus('current')
if mibBuilder.loadTexts: tacacsAccounting.setDescription('Enable/Disable TACACS+ accounting')
tacacsAccountingPrimaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAccountingPrimaryHost.setStatus('current')
if mibBuilder.loadTexts: tacacsAccountingPrimaryHost.setDescription('The primary TACACS+ accounting host that is used for.')
tacacsAccountingSecondaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAccountingSecondaryHost.setStatus('current')
if mibBuilder.loadTexts: tacacsAccountingSecondaryHost.setDescription('The secondary TACACS+ accounting host that is used for , should the primary TACACS+ host fail to respond.')
tacacsAccountingPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAccountingPort.setStatus('current')
if mibBuilder.loadTexts: tacacsAccountingPort.setDescription('The port number that TACACS+ listens to for accounting requests. The default port number is 49.')
tacacsAuthorization = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 9), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAuthorization.setStatus('current')
if mibBuilder.loadTexts: tacacsAuthorization.setDescription('Enable/Disable TACACS+ authorization')
tacacsAlternateServiceNames = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 11, 10), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAlternateServiceNames.setStatus('current')
if mibBuilder.loadTexts: tacacsAlternateServiceNames.setDescription('Enable alternate service names for TACACS+.')
securidGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 12))
securidStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 12, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidStatus.setStatus('current')
if mibBuilder.loadTexts: securidStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
securidMasterHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidMasterHost.setStatus('current')
if mibBuilder.loadTexts: securidMasterHost.setDescription('The first SecurID server that is tried for user authentication.')
securidSlaveHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 12, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidSlaveHost.setStatus('current')
if mibBuilder.loadTexts: securidSlaveHost.setDescription('If the first SecurID server does not respond to an authentication request, this is the next SecurID server that is tried for user authentication.')
securidPort = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 12, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidPort.setStatus('current')
if mibBuilder.loadTexts: securidPort.setDescription('The port number that SecurID listens to for authentication requests. The default port number is 5500.')
securidType = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("des", 1), ("sdi", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidType.setStatus('current')
if mibBuilder.loadTexts: securidType.setDescription('You can specify either SDI or DES encryption for SecurID server communication. The default is SDI encryption.')
securidLegacy = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 12, 6), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securidLegacy.setStatus('current')
if mibBuilder.loadTexts: securidLegacy.setDescription('If you are running SecurID 3.x or 4.x, you need to run in Legacy Mode. If you are running SecurID 5.x or above, do not select Legacy Mode.')
nisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 13))
nisStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 13, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nisStatus.setStatus('current')
if mibBuilder.loadTexts: nisStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
nisDomain = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nisDomain.setStatus('current')
if mibBuilder.loadTexts: nisDomain.setDescription('The NIS domain name.')
nisPrimaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 13, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nisPrimaryHost.setStatus('current')
if mibBuilder.loadTexts: nisPrimaryHost.setDescription('The primary NIS host that is used for authentication.')
nisSecondaryHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 4, 13, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nisSecondaryHost.setStatus('current')
if mibBuilder.loadTexts: nisSecondaryHost.setDescription('The secondary NIS host that is used for authentication, should the primary NIS host fail to respond.')
mgtDateTimeStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtDateTimeStatus.setStatus('current')
if mibBuilder.loadTexts: mgtDateTimeStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
systemDate = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDate.setStatus('current')
if mibBuilder.loadTexts: systemDate.setDescription('The system date. Format dd/mm/yyyy.')
systemTime = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTime.setStatus('current')
if mibBuilder.loadTexts: systemTime.setDescription('The system time (local time). Format hh:mm:ss.')
systemDateTimeAndOffset = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDateTimeAndOffset.setStatus('current')
if mibBuilder.loadTexts: systemDateTimeAndOffset.setDescription('This read only object identifies the current system date, time and GMT offset. The date and time will be displayed in the regional time format configured.')
timeZoneListEnable = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 5), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZoneListEnable.setStatus('current')
if mibBuilder.loadTexts: timeZoneListEnable.setDescription('When the time zone list is enabled then the time zone being use is the one selected form the predefined list of time zones. If not enabled then the customTimeZoneGroup will define the time zone being used')
selectionFromTimeZoneList = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450))).clone(namedValues=NamedValues(("tzAfricaAbidjan", 0), ("tzAfricaAccra", 1), ("tzAfricaAddisAbaba", 2), ("tzAfricaAlgiers", 3), ("tzAfricaAsmera", 4), ("tzAfricaBamako", 5), ("tzAfricaBangui", 6), ("tzAfricaBanjul", 7), ("tzAfricaBissau", 8), ("tzAfricaBlantyre", 9), ("tzAfricaBrazzaville", 10), ("tzAfricaBujumbura", 11), ("tzAfricaCairo", 12), ("tzAfricaCasablanca", 13), ("tzAfricaCeuta", 14), ("tzAfricaConakry", 15), ("tzAfricaDakar", 16), ("tzAfricaDaresSalaam", 17), ("tzAfricaDjibouti", 18), ("tzAfricaDouala", 19), ("tzAfricaElAaiun", 20), ("tzAfricaFreetown", 21), ("tzAfricaGaborone", 22), ("tzAfricaHarare", 23), ("tzAfricaJohannesburg", 24), ("tzAfricaKampala", 25), ("tzAfricaKhartoum", 26), ("tzAfricaKigali", 27), ("tzAfricaKinshasa", 28), ("tzAfricaLagos", 29), ("tzAfricaLibreville", 30), ("tzAfricaLome", 31), ("tzAfricaLuanda", 32), ("tzAfricaLubumbashi", 33), ("tzAfricaLusaka", 34), ("tzAfricaMalabo", 35), ("tzAfricaMaputo", 36), ("tzAfricaMaseru", 37), ("tzAfricaMbabane", 38), ("tzAfricaMogadishu", 39), ("tzAfricaMonrovia", 40), ("tzAfricaNairobi", 41), ("tzAfricaNdjamena", 42), ("tzAfricaNiamey", 43), ("tzAfricaNouakchott", 44), ("tzAfricaOuagadougou", 45), ("tzAfricaPortoNovo", 46), ("tzAfricaSaoTome", 47), ("tzAfricaTimbuktu", 48), ("tzAfricaTripoli", 49), ("tzAfricaTunis", 50), ("tzAfricaWindhoek", 51), ("tzAmericaAdak", 52), ("tzAmericaAnchorage", 53), ("tzAmericaAnguilla", 54), ("tzAmericaAntigua", 55), ("tzAmericaAraguaina", 56), ("tzAmericaAruba", 57), ("tzAmericaAsuncion", 58), ("tzAmericaAtka", 59), ("tzAmericaBarbados", 60), ("tzAmericaBelem", 61), ("tzAmericaBelize", 62), ("tzAmericaBoaVista", 63), ("tzAmericaBogota", 64), ("tzAmericaBoise", 65), ("tzAmericaBuenosAires", 66), ("tzAmericaCambridgeBay", 67), ("tzAmericaCancun", 68), ("tzAmericaCaracas", 69), ("tzAmericaCatamarca", 70), ("tzAmericaCayenne", 71), ("tzAmericaCayman", 72), ("tzAmericaChicago", 73), ("tzAmericaChihuahua", 74), ("tzAmericaCordoba", 75), ("tzAmericaCostaRica", 76), ("tzAmericaCuiaba", 77), ("tzAmericaCuracao", 78), ("tzAmericaDanmarkshavn", 79), ("tzAmericaDawson", 80), ("tzAmericaDawsonCreek", 81), ("tzAmericaDenver", 82), ("tzAmericaDetroit", 83), ("tzAmericaDominica", 84), ("tzAmericaEdmonton", 85), ("tzAmericaEirunepe", 86), ("tzAmericaElSalvador", 87), ("tzAmericaEnsenada", 88), ("tzAmericaFortWayne", 89), ("tzAmericaFortaleza", 90), ("tzAmericaGlaceBay", 91), ("tzAmericaGodthab", 92), ("tzAmericaGooseBay", 93), ("tzAmericaGrandTurk", 94), ("tzAmericaGrenada", 95), ("tzAmericaGuadeloupe", 96), ("tzAmericaGuatemala", 97), ("tzAmericaGuayaquil", 98), ("tzAmericaGuyana", 99), ("tzAmericaHalifax", 100), ("tzAmericaHavana", 101), ("tzAmericaHermosillo", 102), ("tzAmericaIndianaIndianapolis", 103), ("tzAmericaIndianaKnox", 104), ("tzAmericaIndianaMarengo", 105), ("tzAmericaIndianaVevay", 106), ("tzAmericaIndianapolis", 107), ("tzAmericaInuvik", 108), ("tzAmericaIqaluit", 109), ("tzAmericaJamaica", 110), ("tzAmericaJujuy", 111), ("tzAmericaJuneau", 112), ("tzAmericaKentuckyLouisville", 113), ("tzAmericaKentuckyMonticello", 114), ("tzAmericaKnoxIN", 115), ("tzAmericaLaPaz", 116), ("tzAmericaLima", 117), ("tzAmericaLosAngeles", 118), ("tzAmericaLouisville", 119), ("tzAmericaMaceio", 120), ("tzAmericaManagua", 121), ("tzAmericaManaus", 122), ("tzAmericaMartinique", 123), ("tzAmericaMazatlan", 124), ("tzAmericaMendoza", 125), ("tzAmericaMenominee", 126), ("tzAmericaMerida", 127), ("tzAmericaMexicoCity", 128), ("tzAmericaMiquelon", 129), ("tzAmericaMonterrey", 130), ("tzAmericaMontevideo", 131), ("tzAmericaMontreal", 132), ("tzAmericaMontserrat", 133), ("tzAmericaNassau", 134), ("tzAmericaNewYork", 135), ("tzAmericaNipigon", 136), ("tzAmericaNome", 137), ("tzAmericaNoronha", 138), ("tzAmericaNorthDakotaCenter", 139), ("tzAmericaPanama", 140), ("tzAmericaPangnirtung", 141), ("tzAmericaParamaribo", 142), ("tzAmericaPhoenix", 143), ("tzAmericaPortofSpain", 144), ("tzAmericaPortauPrince", 145), ("tzAmericaPortoAcre", 146), ("tzAmericaPortoVelho", 147), ("tzAmericaPuertoRico", 148), ("tzAmericaRainyRiver", 149), ("tzAmericaRankinInlet", 150), ("tzAmericaRecife", 151), ("tzAmericaRegina", 152), ("tzAmericaRioBranco", 153), ("tzAmericaRosario", 154), ("tzAmericaSantiago", 155), ("tzAmericaSantoDomingo", 156), ("tzAmericaSaoPaulo", 157), ("tzAmericaScoresbysund", 158), ("tzAmericaShiprock", 159), ("tzAmericaStJohns", 160), ("tzAmericaStKitts", 161), ("tzAmericaStLucia", 162), ("tzAmericaStThomas", 163), ("tzAmericaStVincent", 164), ("tzAmericaSwiftCurrent", 165), ("tzAmericaTegucigalpa", 166), ("tzAmericaThule", 167), ("tzAmericaThunderBay", 168), ("tzAmericaTijuana", 169), ("tzAmericaTortola", 170), ("tzAmericaVancouver", 171), ("tzAmericaVirgin", 172), ("tzAmericaWhitehorse", 173), ("tzAmericaWinnipeg", 174), ("tzAmericaYakutat", 175), ("tzAmericaYellowknife", 176), ("tzAntarcticaCasey", 177), ("tzAntarcticaDavis", 178), ("tzAntarcticaDumontDUrville", 179), ("tzAntarcticaMawson", 180), ("tzAntarcticaMcMurdo", 181), ("tzAntarcticaPalmer", 182), ("tzAntarcticaSouthPole", 183), ("tzAntarcticaSyowa", 184), ("tzAntarcticaVostok", 185), ("tzArcticLongyearbyen", 186), ("tzAsiaAden", 187), ("tzAsiaAlmaty", 188), ("tzAsiaAmman", 189), ("tzAsiaAnadyr", 190), ("tzAsiaAqtau", 191), ("tzAsiaAqtobe", 192), ("tzAsiaAshgabat", 193), ("tzAsiaAshkhabad", 194), ("tzAsiaBaghdad", 195), ("tzAsiaBahrain", 196), ("tzAsiaBaku", 197), ("tzAsiaBangkok", 198), ("tzAsiaBeirut", 199), ("tzAsiaBishkek", 200), ("tzAsiaBrunei", 201), ("tzAsiaCalcutta", 202), ("tzAsiaChoibalsan", 203), ("tzAsiaChongqing", 204), ("tzAsiaChungking", 205), ("tzAsiaColombo", 206), ("tzAsiaDacca", 207), ("tzAsiaDamascus", 208), ("tzAsiaDhaka", 209), ("tzAsiaDili", 210), ("tzAsiaDubai", 211), ("tzAsiaDushanbe", 212), ("tzAsiaGaza", 213), ("tzAsiaHarbin", 214), ("tzAsiaHongKong", 215), ("tzAsiaHovd", 216), ("tzAsiaIrkutsk", 217), ("tzAsiaIstanbul", 218), ("tzAsiaJakarta", 219), ("tzAsiaJayapura", 220), ("tzAsiaJerusalem", 221), ("tzAsiaKabul", 222), ("tzAsiaKamchatka", 223), ("tzAsiaKarachi", 224), ("tzAsiaKashgar", 225), ("tzAsiaKatmandu", 226), ("tzAsiaKrasnoyarsk", 227), ("tzAsiaKualaLumpur", 228), ("tzAsiaKuching", 229), ("tzAsiaKuwait", 230), ("tzAsiaMacao", 231), ("tzAsiaMagadan", 232), ("tzAsiaManila", 233), ("tzAsiaMuscat", 234), ("tzAsiaNicosia", 235), ("tzAsiaNovosibirsk", 236), ("tzAsiaOmsk", 237), ("tzAsiaPhnomPenh", 238), ("tzAsiaPontianak", 239), ("tzAsiaPyongyang", 240), ("tzAsiaQatar", 241), ("tzAsiaRangoon", 242), ("tzAsiaRiyadh", 243), ("tzAsiaSaigon", 244), ("tzAsiaSakhalin", 245), ("tzAsiaSamarkand", 246), ("tzAsiaSeoul", 247), ("tzAsiaShanghai", 248), ("tzAsiaSingapore", 249), ("tzAsiaTaipei", 250), ("tzAsiaTashkent", 251), ("tzAsiaTbilisi", 252), ("tzAsiaTehran", 253), ("tzAsiaTelAviv", 254)) + NamedValues(("tzAsiaThimbu", 255), ("tzAsiaThimphu", 256), ("tzAsiaTokyo", 257), ("tzAsiaUjungPandang", 258), ("tzAsiaUlaanbaatar", 259), ("tzAsiaUlanBator", 260), ("tzAsiaUrumqi", 261), ("tzAsiaVientiane", 262), ("tzAsiaVladivostok", 263), ("tzAsiaYakutsk", 264), ("tzAsiaYekaterinburg", 265), ("tzAsiaYerevan", 266), ("tzAtlanticAzores", 267), ("tzAtlanticBermuda", 268), ("tzAtlanticCanary", 269), ("tzAtlanticCapeVerde", 270), ("tzAtlanticFaeroe", 271), ("tzAtlanticJanMayen", 272), ("tzAtlanticMadeira", 273), ("tzAtlanticReykjavik", 274), ("tzAtlanticSouthGeorgia", 275), ("tzAtlanticStHelena", 276), ("tzAtlanticStanley", 277), ("tzAustraliaACT", 278), ("tzAustraliaAdelaide", 279), ("tzAustraliaBrisbane", 280), ("tzAustraliaBrokenHill", 281), ("tzAustraliaCanberra", 282), ("tzAustraliaDarwin", 283), ("tzAustraliaHobart", 284), ("tzAustraliaLHI", 285), ("tzAustraliaLindeman", 286), ("tzAustraliaLordHowe", 287), ("tzAustraliaMelbourne", 288), ("tzAustraliaNSW", 289), ("tzAustraliaNorth", 290), ("tzAustraliaPerth", 291), ("tzAustraliaQueensland", 292), ("tzAustraliaSouth", 293), ("tzAustraliaSydney", 294), ("tzAustraliaTasmania", 295), ("tzAustraliaVictoria", 296), ("tzAustraliaWest", 297), ("tzAustraliaYancowinna", 298), ("tzBrazilDeNoronha", 299), ("tzBrazilEast", 300), ("tzBrazilWest", 301), ("tzCanadaAtlantic", 302), ("tzCanadaCentral", 303), ("tzCanadaEastSaskatchewan", 304), ("tzCanadaEastern", 305), ("tzCanadaMountain", 306), ("tzCanadaNewfoundland", 307), ("tzCanadaPacific", 308), ("tzCanadaSaskatchewan", 309), ("tzCanadaYukon", 310), ("tzChileContinental", 311), ("tzChileEasterIsland", 312), ("tzCuba", 313), ("tzEgypt", 314), ("tzEire", 315), ("tzEuropeAmsterdam", 316), ("tzEuropeAndorra", 317), ("tzEuropeAthens", 318), ("tzEuropeBelfast", 319), ("tzEuropeBelgrade", 320), ("tzEuropeBerlin", 321), ("tzEuropeBratislava", 322), ("tzEuropeBrussels", 323), ("tzEuropeBucharest", 324), ("tzEuropeBudapest", 325), ("tzEuropeChisinau", 326), ("tzEuropeCopenhagen", 327), ("tzEuropeDublin", 328), ("tzEuropeGibraltar", 329), ("tzEuropeHelsinki", 330), ("tzEuropeIstanbul", 331), ("tzEuropeKaliningrad", 332), ("tzEuropeKiev", 333), ("tzEuropeLisbon", 334), ("tzEuropeLjubljana", 335), ("tzEuropeLondon", 336), ("tzEuropeLuxembourg", 337), ("tzEuropeMadrid", 338), ("tzEuropeMalta", 339), ("tzEuropeMinsk", 340), ("tzEuropeMonaco", 341), ("tzEuropeMoscow", 342), ("tzEuropeNicosia", 343), ("tzEuropeOslo", 344), ("tzEuropeParis", 345), ("tzEuropePrague", 346), ("tzEuropeRiga", 347), ("tzEuropeRome", 348), ("tzEuropeSamara", 349), ("tzEuropeSanMarino", 350), ("tzEuropeSarajevo", 351), ("tzEuropeSimferopol", 352), ("tzEuropeSkopje", 353), ("tzEuropeSofia", 354), ("tzEuropeStockholm", 355), ("tzEuropeTallinn", 356), ("tzEuropeTirane", 357), ("tzEuropeTiraspol", 358), ("tzEuropeUzhgorod", 359), ("tzEuropeVaduz", 360), ("tzEuropeVatican", 361), ("tzEuropeVienna", 362), ("tzEuropeVilnius", 363), ("tzEuropeWarsaw", 364), ("tzEuropeZagreb", 365), ("tzEuropeZaporozhye", 366), ("tzEuropeZurich", 367), ("tzGreatBritainEire", 368), ("tzGreatBritainGreatBritain", 369), ("tzHongKong", 370), ("tzIceland", 371), ("tzIndianAntananarivo", 372), ("tzIndianChagos", 373), ("tzIndianChristmas", 374), ("tzIndianCocos", 375), ("tzIndianComoro", 376), ("tzIndianKerguelen", 377), ("tzIndianMahe", 378), ("tzIndianMaldives", 379), ("tzIndianMauritius", 380), ("tzIndianMayotte", 381), ("tzIndianReunion", 382), ("tzIran", 383), ("tzIsrael", 384), ("tzJamaica", 385), ("tzJapan", 386), ("tzKwajalein", 387), ("tzLibya", 388), ("tzMexicoBajaNorte", 389), ("tzMexicoBajaSur", 390), ("tzMexicoGeneral", 391), ("tzNavajo", 392), ("tzNewZealandChatham", 393), ("tzNewZealandNewZealand", 394), ("tzPacificApia", 395), ("tzPacificAuckland", 396), ("tzPacificChatham", 397), ("tzPacificEaster", 398), ("tzPacificEfate", 399), ("tzPacificEnderbury", 400), ("tzPacificFakaofo", 401), ("tzPacificFiji", 402), ("tzPacificFunafuti", 403), ("tzPacificGalapagos", 404), ("tzPacificGambier", 405), ("tzPacificGuadalcanal", 406), ("tzPacificGuam", 407), ("tzPacificHonolulu", 408), ("tzPacificJohnston", 409), ("tzPacificKiritimati", 410), ("tzPacificKosrae", 411), ("tzPacificKwajalein", 412), ("tzPacificMajuro", 413), ("tzPacificMarquesas", 414), ("tzPacificMidway", 415), ("tzPacificNauru", 416), ("tzPacificNiue", 417), ("tzPacificNorfolk", 418), ("tzPacificNoumea", 419), ("tzPacificPagoPago", 420), ("tzPacificPalau", 421), ("tzPacificPitcairn", 422), ("tzPacificPonape", 423), ("tzPacificPortMoresby", 424), ("tzPacificRarotonga", 425), ("tzPacificSaipan", 426), ("tzPacificSamoa", 427), ("tzPacificTahiti", 428), ("tzPacificTarawa", 429), ("tzPacificTongatapu", 430), ("tzPacificTruk", 431), ("tzPacificWake", 432), ("tzPacificWallis", 433), ("tzPacificYap", 434), ("tzPoland", 435), ("tzPortugal", 436), ("tzSingapore", 437), ("tzTurkey", 438), ("tzUSAlaska", 439), ("tzUSAleutian", 440), ("tzUSArizona", 441), ("tzUSCentral", 442), ("tzUSEastIndiana", 443), ("tzUSEastern", 444), ("tzUSHawaii", 445), ("tzUSIndianaStarke", 446), ("tzUSMichigan", 447), ("tzUSMountain", 448), ("tzUSPacific", 449), ("tzUSSamoa", 450)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: selectionFromTimeZoneList.setStatus('current')
if mibBuilder.loadTexts: selectionFromTimeZoneList.setDescription('This object identifies the predefined time zone selected. This time zone will be used if timeZoneListEnable object is set to yes. configured.')
timeZoneAdjustForDST = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 7), YesNoValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZoneAdjustForDST.setStatus('current')
if mibBuilder.loadTexts: timeZoneAdjustForDST.setDescription('This object identifies if the time will be adjusted for DST (Daylight Savings Time) or not.')
customTimeZoneGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8))
customTimeZoneStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: customTimeZoneStatus.setStatus('current')
if mibBuilder.loadTexts: customTimeZoneStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
timeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZoneName.setStatus('current')
if mibBuilder.loadTexts: timeZoneName.setDescription('The name of the time zone when using standard time.')
timeOffset = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-720, 840))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeOffset.setStatus('current')
if mibBuilder.loadTexts: timeOffset.setDescription('The offset of summer time from standard time in minutes.')
timeSummerName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerName.setStatus('current')
if mibBuilder.loadTexts: timeSummerName.setDescription('The name of the time zone when using summer time.')
timeSummerOffset = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerOffset.setStatus('current')
if mibBuilder.loadTexts: timeSummerOffset.setDescription('The offset of summer time from standard time in minutes.')
timeSummerMode = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("fixed", 1), ("recurring", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerMode.setStatus('current')
if mibBuilder.loadTexts: timeSummerMode.setDescription('You can configure the summer time to take effect: None-No summer time change. Fixed-The summer time change goes into effect at the specified time every year. For example, April 15 at 1:00 pm. Recurring-The summer time changes goes into effect every year at same relative time. For example, on the third week in April on a Tuesday at 1:00 pm.')
timeSummerRecStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecStartMonth.setStatus('current')
if mibBuilder.loadTexts: timeSummerRecStartMonth.setDescription('The recurring summer time start month.')
timeSummerRecStartWeek = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 0), ("second", 1), ("third", 2), ("fourth", 3), ("last", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecStartWeek.setStatus('current')
if mibBuilder.loadTexts: timeSummerRecStartWeek.setDescription('The recurring summer time start week.')
timeSummerRecStartDay = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecStartDay.setStatus('current')
if mibBuilder.loadTexts: timeSummerRecStartDay.setDescription('The recurring summer time start day.')
timeSummerRecStartHour = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecStartHour.setStatus('current')
if mibBuilder.loadTexts: timeSummerRecStartHour.setDescription('The recurring summer time start hour.')
timeSummerRecStartMin = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecStartMin.setStatus('current')
if mibBuilder.loadTexts: timeSummerRecStartMin.setDescription('The recurring summer time start minute')
timeSummerRecEndMonth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecEndMonth.setStatus('current')
if mibBuilder.loadTexts: timeSummerRecEndMonth.setDescription('The recurring summer time end month.')
timeSummerRecEndWeek = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 0), ("second", 1), ("third", 2), ("fourth", 3), ("last", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecEndWeek.setStatus('current')
if mibBuilder.loadTexts: timeSummerRecEndWeek.setDescription('The recurring summer time end week.')
timeSummerRecEndDay = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecEndDay.setStatus('current')
if mibBuilder.loadTexts: timeSummerRecEndDay.setDescription('The recurring summer time end day.')
timeSummerRecEndHour = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecEndHour.setStatus('current')
if mibBuilder.loadTexts: timeSummerRecEndHour.setDescription('The recurring summer time end hour')
timeSummerRecEndMin = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerRecEndMin.setStatus('current')
if mibBuilder.loadTexts: timeSummerRecEndMin.setDescription('The recurring summer time end minute')
timeSummerFixStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixStartMonth.setStatus('current')
if mibBuilder.loadTexts: timeSummerFixStartMonth.setDescription('The fixed summer time start month')
timeSummerFixStartDay = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixStartDay.setStatus('current')
if mibBuilder.loadTexts: timeSummerFixStartDay.setDescription('The fixed summer time start day')
timeSummerFixStartHour = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixStartHour.setStatus('current')
if mibBuilder.loadTexts: timeSummerFixStartHour.setDescription('The fixed summer time start hour')
timeSummerFixStartMinute = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixStartMinute.setStatus('current')
if mibBuilder.loadTexts: timeSummerFixStartMinute.setDescription('The fixed summer time start minute')
timeSummerFixEndMonth = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixEndMonth.setStatus('current')
if mibBuilder.loadTexts: timeSummerFixEndMonth.setDescription('The fixed summer time End month')
timeSummerFixEndDay = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixEndDay.setStatus('current')
if mibBuilder.loadTexts: timeSummerFixEndDay.setDescription('The fixed summer time End day')
timeSummerFixEndHour = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixEndHour.setStatus('current')
if mibBuilder.loadTexts: timeSummerFixEndHour.setDescription('The fixed summer time End hour')
timeSummerFixEndMinute = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 8, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSummerFixEndMinute.setStatus('current')
if mibBuilder.loadTexts: timeSummerFixEndMinute.setDescription('The fixed summer time End minute')
networkTimeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9))
timeStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeStatus.setStatus('current')
if mibBuilder.loadTexts: timeStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
timeSntpMode = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("unicast", 1), ("multicast", 2), ("anycast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpMode.setStatus('current')
if mibBuilder.loadTexts: timeSntpMode.setDescription('The SNTP client mode. Valid modes are Disabled, Unicast, Multicast or Anycast')
timeSntpVersion = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("version1", 0), ("version2", 1), ("version3", 2), ("version4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpVersion.setStatus('current')
if mibBuilder.loadTexts: timeSntpVersion.setDescription('The sntp client version.')
timeSntpHost1 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpHost1.setStatus('current')
if mibBuilder.loadTexts: timeSntpHost1.setDescription('The first remote SNTP host name that the device server communicates with.')
timeSntpHost2 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpHost2.setStatus('current')
if mibBuilder.loadTexts: timeSntpHost2.setDescription('The second remote SNTP host name that the device server communicates with.')
sntpStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6))
sntpStatAddress = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatAddress.setStatus('current')
if mibBuilder.loadTexts: sntpStatAddress.setDescription('The address of the remote SNMP host that updated the time.')
sntpStatLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatLastUpdate.setStatus('current')
if mibBuilder.loadTexts: sntpStatLastUpdate.setDescription('The time of the last update.')
sntpStatLeapIndicator = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noWarning", 0), ("minutes61", 1), ("minutes59", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatLeapIndicator.setStatus('current')
if mibBuilder.loadTexts: sntpStatLeapIndicator.setDescription('The leap year indicator.')
sntpStatVersion = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("ipV4", 3), ("ipv4ipv6osi", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatVersion.setStatus('current')
if mibBuilder.loadTexts: sntpStatVersion.setDescription('The SNTP version. ')
sntpStatMode = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reserved", 0), ("symmetricActive", 1), ("symmetricPassive", 2), ("client", 3), ("server", 4), ("broadcast", 5), ("reservedNTP", 6), ("reserved2", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatMode.setStatus('current')
if mibBuilder.loadTexts: sntpStatMode.setDescription('The current SNTP mode')
sntpStatStratum = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatStratum.setStatus('current')
if mibBuilder.loadTexts: sntpStatStratum.setDescription('The SNTP stratum.')
sntpStatRefId = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatRefId.setStatus('current')
if mibBuilder.loadTexts: sntpStatRefId.setDescription('The SNTP reference ID.')
sntpStatOffset = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 6, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpStatOffset.setStatus('current')
if mibBuilder.loadTexts: sntpStatOffset.setDescription('The SNTP offset')
timeSntpServerAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpServerAuthentication.setStatus('current')
if mibBuilder.loadTexts: timeSntpServerAuthentication.setDescription('Specifies whether to authenticate with the ntp time server.')
timeSntpKeyID = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpKeyID.setStatus('current')
if mibBuilder.loadTexts: timeSntpKeyID.setDescription('Specifies the key ID to use for host 1 during server authentication.')
timeSntpKeyID2 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 5, 9, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSntpKeyID2.setStatus('current')
if mibBuilder.loadTexts: timeSntpKeyID2.setDescription('Specifies the key ID to use for host 2 during server authentication.')
mgtBootFilesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 1))
bootFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 1, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootFileStatus.setStatus('current')
if mibBuilder.loadTexts: bootFileStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
fileFirmwareHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileFirmwareHost.setStatus('current')
if mibBuilder.loadTexts: fileFirmwareHost.setDescription("The host name or IP address of the server that contains the firmware file. If you use a host name, it must exist in the management module's host table or be resolved by DNS.")
fileFirmwareName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileFirmwareName.setStatus('current')
if mibBuilder.loadTexts: fileFirmwareName.setDescription('The path and file name (do not use a drive letter), relative to the default path of your TFTP server software, of the update software for the management module that will be loaded when the management module is rebooted.')
fileConfigurationHost = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileConfigurationHost.setStatus('current')
if mibBuilder.loadTexts: fileConfigurationHost.setDescription("The host name or IP address of the server that contains the configuration file. If you use a host name, it must exist in the management module's host table or be resolved by DNS.")
fileConfigurationName = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileConfigurationName.setStatus('current')
if mibBuilder.loadTexts: fileConfigurationName.setDescription('The path and file name (do not use a drive letter), relative to the default path of your TFTP server software, of the new configuration file for the Device Server that will be loaded when the management module is rebooted.')
mgtfirmwareUpdatesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2))
firmwareUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
firmwareUpdateAuto = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 2), OnOffValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateAuto.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateAuto.setDescription('Enable automatic updates of installed media converter modules from firmware bundle on management module..')
firmwareUpdateBundleVersionCm100 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm100.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm100.setDescription('This object identifies the bundled firmware version for CM-100 modules.')
firmwareUpdateBundleVersionCm110 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm110.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm110.setDescription('This object identifies the bundled firmware version for CM-110 modules.')
firmwareUpdateBundleVersionCm1000OrCm1000Sfp = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm1000OrCm1000Sfp.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm1000OrCm1000Sfp.setDescription('This object identifies the bundled firmware version for CM-1000 or CM-1000-SFP modules.')
firmwareUpdateBundleVersionCm1110 = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm1110.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm1110.setDescription('This object identifies the bundled firmware version for CM-1110 modules.')
firmwareUpdateBundleVersionCm1110Sfp = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm1110Sfp.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm1110Sfp.setDescription('This object identifies the bundled firmware version for CM-1110-SFP modules.')
firmwareUpdateBundleVersionCm100mm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm100mm.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm100mm.setDescription('This object identifies the bundled firmware version for CM-100MM modules.')
firmwareUpdateBundleVersionCm1000mm = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm1000mm.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm1000mm.setDescription('This object identifies the bundled firmware version for CM-1000MM modules.')
firmwareUpdateBundleVersionCm10g = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm10g.setStatus('current')
if mibBuilder.loadTexts: firmwareUpdateBundleVersionCm10g.setDescription('This object identifies the bundled firmware version for CM-10G modules.')
nettxfrTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3), )
if mibBuilder.loadTexts: nettxfrTable.setStatus('current')
if mibBuilder.loadTexts: nettxfrTable.setDescription('Table of snmp file transfer sessions.')
nettxfrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "nettxfrSessionID"))
if mibBuilder.loadTexts: nettxfrEntry.setStatus('current')
if mibBuilder.loadTexts: nettxfrEntry.setDescription('Entries of the table, each relating to a SNMP file transfer session. ')
nettxfrSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nettxfrSessionID.setStatus('current')
if mibBuilder.loadTexts: nettxfrSessionID.setDescription('This indicates if the net transfer is to be loaded to the management module or saved from the management module.')
nettxfrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("fileNotFound", -3), ("busy", -2), ("error", -1), ("idle", 0), ("start", 1), ("transferringFile", 2), ("erassingFlash", 3), ("programmingFlash", 4), ("verifyingFlash", 5), ("moduleReset", 6), ("processingScriptFile", 7), ("finished", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrStatus.setStatus('current')
if mibBuilder.loadTexts: nettxfrStatus.setDescription('This field indicates the status of the nettxfr process. A value of start(1) should be written to this field to start the nettxfr process with the specified parameters in the rest of this group.')
nettxfrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("load", 0), ("save", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrDirection.setStatus('current')
if mibBuilder.loadTexts: nettxfrDirection.setDescription('This indicates if the net transfer is to be loaded to the management module or saved from the management module.')
nettxfrFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("configuration", 0), ("firmware", 1), ("media-converter", 2), ("script", 3), ("serialt-buf", 4), ("ssh-server", 5), ("ssl", 6), ("text-config", 7), ("diagnostic-file", 8), ("sntp-keys", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrFileType.setStatus('current')
if mibBuilder.loadTexts: nettxfrFileType.setDescription('This indicates the type of file to be transfered to/from the management module.')
nettxfrFileHost = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrFileHost.setStatus('current')
if mibBuilder.loadTexts: nettxfrFileHost.setDescription("The host name or IP address of the server that contains the file to be transfered to/from the management module.. If you use a host name, it must exist in the management module's host table or be resolved by DNS.")
nettxfrFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrFileName.setStatus('current')
if mibBuilder.loadTexts: nettxfrFileName.setDescription('The path and file name (do not use a drive letter), relative to the default path of your TFTP server software, of the file to be transfered to/from the management module.')
nettxfrMCSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 7), SlotNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrMCSlotNumber.setStatus('current')
if mibBuilder.loadTexts: nettxfrMCSlotNumber.setDescription('Specifies the slot number of the Media Converter Module to which the firmware will be transfered.')
nettxfrUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrUserName.setStatus('current')
if mibBuilder.loadTexts: nettxfrUserName.setDescription('Specifies the user login name who owns the ssh public key that is to be transfered to the management module.')
nettxfrSSHKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dsa", 0), ("rsa", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrSSHKeyType.setStatus('current')
if mibBuilder.loadTexts: nettxfrSSHKeyType.setDescription('Specifies the authentication method used by the ssh-server public key that is to be transfered to/from the management module')
nettxfrSSLType = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ca-list", 0), ("certificate", 1), ("private-key", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrSSLType.setStatus('current')
if mibBuilder.loadTexts: nettxfrSSLType.setDescription('Specifies the type of SSL file to be transfered to the management module. These files are needed if you are using the secure version of the WebManager (HTTPS), or LDAP authentication with TLS.')
nettxfrSessionInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("in-use", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrSessionInUse.setStatus('current')
if mibBuilder.loadTexts: nettxfrSessionInUse.setDescription('Specifies whether this net transfer session entry is in use. If a manager tries to write a 1 to this field and the session is already in use, then an error is returned.')
nettxfrTftpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 6, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nettxfrTftpPort.setStatus('current')
if mibBuilder.loadTexts: nettxfrTftpPort.setDescription('Specifies a UDP port number for the TFTP host server. Default is 69. ')
adminFunction = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("writeToFlash", 1), ("resetToFactoryDefaults", 2), ("reboot", 3), ("resetSecurIDNodeSecret", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminFunction.setStatus('current')
if mibBuilder.loadTexts: adminFunction.setDescription('Perform a specific function on the management module. If you want to save all the changes that have been submitted to the management module, you need to expand the adminGroup container folder and SET the adminFunction to 1 to write to FLASH. To make the configuration changes take effect, SET the adminFunction to 3 to reboot the management module.')
adminLastFunction = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("writeToFlash", 1), ("resetToFactoryDefaults", 2), ("reboot", 3), ("resetSecurIDNodeSecret", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminLastFunction.setStatus('current')
if mibBuilder.loadTexts: adminLastFunction.setDescription('The last function requested')
adminStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("successful", 0), ("error", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminStatus.setStatus('current')
if mibBuilder.loadTexts: adminStatus.setDescription('The status of the last function performed.')
adminbootReason = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 7, 4), Bits().clone(namedValues=NamedValues(("bootCrash", 29), ("bootWarmStart", 30), ("bootNormal", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminbootReason.setStatus('current')
if mibBuilder.loadTexts: adminbootReason.setDescription('The reason(s) why the management module last rebooted.')
adminDiagFileAvailable = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 7, 5), YesNoValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminDiagFileAvailable.setStatus('current')
if mibBuilder.loadTexts: adminDiagFileAvailable.setDescription('This object indicates that a diagnostic file is available. ')
displayFormatStatus = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 8, 1), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: displayFormatStatus.setStatus('current')
if mibBuilder.loadTexts: displayFormatStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
cfgTemperatureUnits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("celsius", 0), ("fahrenheit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgTemperatureUnits.setStatus('current')
if mibBuilder.loadTexts: cfgTemperatureUnits.setDescription('This object identifies the units to display any internally measured temperature. The units can be Celsius or Fahrenheit.')
cfgSfpPowerUnits = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("milliwats", 0), ("decibelmilliwatts", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgSfpPowerUnits.setStatus('current')
if mibBuilder.loadTexts: cfgSfpPowerUnits.setDescription('This object identifies the units to display any SFP DMI internally measured transmit/receive power. The units can be milliwatts (mW) or Decibel milliwatts (dBm).')
cfgTimeFormat = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("time12HourFmt", 0), ("time24HourFmt", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgTimeFormat.setStatus('current')
if mibBuilder.loadTexts: cfgTimeFormat.setDescription('This object identifies the format to display the time.')
cfgDateFormat = MibScalar((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dateMonthDayYearFmt", 0), ("dateDayMonthYearFmt", 1), ("dateYearMonthDayFmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgDateFormat.setStatus('current')
if mibBuilder.loadTexts: cfgDateFormat.setDescription('This object identifies the format to display date.')
mgtChassisSlotPowerScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1), )
if mibBuilder.loadTexts: mgtChassisSlotPowerScheduleTable.setStatus('current')
if mibBuilder.loadTexts: mgtChassisSlotPowerScheduleTable.setDescription('Table of power schedule configuration for chassis slots. (Not applicable to 2-slot chassis.)')
mgtChassisSlotPowerScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1, 1), ).setIndexNames((0, "PERLE-MCR-MGT-MIB", "mcrChassisIndex"), (0, "PERLE-MCR-MGT-MIB", "powerSchedSlotIndex"), (0, "PERLE-MCR-MGT-MIB", "powerSchedDayOfWeek"))
if mibBuilder.loadTexts: mgtChassisSlotPowerScheduleEntry.setStatus('current')
if mibBuilder.loadTexts: mgtChassisSlotPowerScheduleEntry.setDescription('Entries of the table, each relating to a separate slot in a chassis.')
powerSchedSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: powerSchedSlotIndex.setStatus('current')
if mibBuilder.loadTexts: powerSchedSlotIndex.setDescription('This object identifies the chassis slot number.')
powerSchedDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7))))
if mibBuilder.loadTexts: powerSchedDayOfWeek.setStatus('current')
if mibBuilder.loadTexts: powerSchedDayOfWeek.setDescription('This object identifies the day of the week.')
powerSchedConifgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1, 1, 4), ContainerStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSchedConifgStatus.setStatus('current')
if mibBuilder.loadTexts: powerSchedConifgStatus.setDescription('When you perform a GET on this variable, one of the following values will be returned: 1-Indicates that the container folder is active with no changes. 2-Indicates that the container folder is active with change(s). Once you have completed setting the variables in a folder, you will want to submit your changes to the management module. To do this, set the Status variable to 4. If you want to discard the changes, set the Status variable to 6. 4-Indicates that the changes in the container folder are to be submitted to the management module and verified. To save the changes to flash a write of writeToFlash(1) in the adminFunction object is required. 6-Indicates that the changes in the container folder are to be discarded.')
powerSchedOnHour = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSchedOnHour.setStatus('current')
if mibBuilder.loadTexts: powerSchedOnHour.setDescription('This object identifies the hour (0-23) of the day to schedule a power on of the chassis slot')
powerSchedOnMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSchedOnMinute.setStatus('current')
if mibBuilder.loadTexts: powerSchedOnMinute.setDescription('This object identifies the minute (0-59) of the hour to schedule a power on of the chassis slot')
powerSchedOffHour = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSchedOffHour.setStatus('current')
if mibBuilder.loadTexts: powerSchedOffHour.setDescription('This object identifies the hour (0-23) of the day to schedule a power off of the chassis slot')
powerSchedOffMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 1, 2, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSchedOffMinute.setStatus('current')
if mibBuilder.loadTexts: powerSchedOffMinute.setDescription('This object identifies the minute (0-59) of the hour to schedule a power off of the chassis slot')
mcrMgtModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 1)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrModuleModelName"), ("PERLE-MCR-MGT-MIB", "mcrModuleSerialNumber"))
if mibBuilder.loadTexts: mcrMgtModuleInserted.setStatus('current')
if mibBuilder.loadTexts: mcrMgtModuleInserted.setDescription('Trap being sent indicates that a management module has been inserted int the chassis.')
mcrMgtSystemBoot = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 2)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "adminbootReason"))
if mibBuilder.loadTexts: mcrMgtSystemBoot.setStatus('current')
if mibBuilder.loadTexts: mcrMgtSystemBoot.setDescription("Trap being sent indicates that the management module's system firmware is being booted up and has completed system initialization. In some case this alert will indicate a cold start like a user resetting the management module or warm start if the module automatically resets because of a detected crash.")
mcrMgtReset = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 3)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"))
if mibBuilder.loadTexts: mcrMgtReset.setStatus('current')
if mibBuilder.loadTexts: mcrMgtReset.setDescription('Trap being sent indicates that the management module has been manually reset via the reset button or one of the managers.')
mcrMgtResetFactory = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 4)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"))
if mibBuilder.loadTexts: mcrMgtResetFactory.setStatus('current')
if mibBuilder.loadTexts: mcrMgtResetFactory.setDescription('Trap being sent indicates that the management module has been manually reset to factory by holding the reset button for 3 or more seconds, or one of the managers. This means that any files downloaded to the management module will be erase and the management configuration file is reset back to the default configuration. ')
mcrMgtEtheLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 5)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"))
if mibBuilder.loadTexts: mcrMgtEtheLinkUp.setStatus('current')
if mibBuilder.loadTexts: mcrMgtEtheLinkUp.setDescription('Trap being sent indicates that the current link status of the Ethernet port on the management module is up. ')
mcrMgtEtheLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 6)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"))
if mibBuilder.loadTexts: mcrMgtEtheLinkDown.setStatus('current')
if mibBuilder.loadTexts: mcrMgtEtheLinkDown.setDescription('Trap being sent indicates that the current link status of the Ethernet port on the management module is down.')
mcrMgtConMonDSRSigChg = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 7)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrMgtConsoleDSR"))
if mibBuilder.loadTexts: mcrMgtConMonDSRSigChg.setStatus('current')
if mibBuilder.loadTexts: mcrMgtConMonDSRSigChg.setDescription('Trap being sent indicates that monitor console DSR is configured and the status of one of these signal has changed on the console port. ')
mcrMgtAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 8)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mgtAccessMethod"), ("PERLE-MCR-MGT-MIB", "remoteMgtIpAddress"))
if mibBuilder.loadTexts: mcrMgtAuthFail.setStatus('current')
if mibBuilder.loadTexts: mcrMgtAuthFail.setDescription('Trap being sent indicates that a user failed authentication via Telnet, SSH, WebManager, SNMP or the serial console.')
mcrMgtAuthSuccess = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 9)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mgtAccessMethod"), ("PERLE-MCR-MGT-MIB", "remoteMgtIpAddress"))
if mibBuilder.loadTexts: mcrMgtAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: mcrMgtAuthSuccess.setDescription('Trap being sent indicates that a user failed authentication via Telnet, SSH, WebManager or the serial console. ')
mcrMgtDateTimeChg = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 10)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "systemDateTimeAndOffset"))
if mibBuilder.loadTexts: mcrMgtDateTimeChg.setStatus('current')
if mibBuilder.loadTexts: mcrMgtDateTimeChg.setDescription('Trap being sent indicates that the system date and/or time has been changed. ')
mcrMgtSntpServFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 11)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "timeSntpHost1"), ("PERLE-MCR-MGT-MIB", "timeSntpHost2"))
if mibBuilder.loadTexts: mcrMgtSntpServFail.setStatus('current')
if mibBuilder.loadTexts: mcrMgtSntpServFail.setDescription('Trap being sent indicates that SNTP is configured and the management module can not communicate with the configured SNTP server. ')
mcrMgtSntpServRec = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 12)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "timeSntpHost1"), ("PERLE-MCR-MGT-MIB", "timeSntpHost2"))
if mibBuilder.loadTexts: mcrMgtSntpServRec.setStatus('current')
if mibBuilder.loadTexts: mcrMgtSntpServRec.setDescription('Trap being sent indicates that the SNTP is configured and the management module has recovered communications with the configured SNTP server.')
mcrMgtSnmpTrapHostFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 13)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostIndex"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostIpAddress"))
if mibBuilder.loadTexts: mcrMgtSnmpTrapHostFail.setStatus('current')
if mibBuilder.loadTexts: mcrMgtSnmpTrapHostFail.setDescription("Trap being sent indicates that SNMP traps is and the management module can not communicate with the configured SNMP trap host. This trap will only be sent for SNMP trap hosts configured for 'Inform' type traps. ")
mcrMgtSnmpTrapHostRec = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 14)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostIndex"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostIpAddress"))
if mibBuilder.loadTexts: mcrMgtSnmpTrapHostRec.setStatus('current')
if mibBuilder.loadTexts: mcrMgtSnmpTrapHostRec.setDescription('Trap being sent indicates that SNMP traps is and the management module has recovered communications with the configured SNMP trap host.')
mcrMgtEmailServFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 15)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "emailSMTPHost"))
if mibBuilder.loadTexts: mcrMgtEmailServFail.setStatus('current')
if mibBuilder.loadTexts: mcrMgtEmailServFail.setDescription('Trap being sent indicates that an alert email server is configured and the management module can not communicate with the configured email server. ')
mcrMgtEmailServRec = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 16)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "emailSMTPHost"))
if mibBuilder.loadTexts: mcrMgtEmailServRec.setStatus('current')
if mibBuilder.loadTexts: mcrMgtEmailServRec.setDescription('Trap being sent indicates that an alert email server is configured and the management module has recovered communications with the configured email server.')
mcrMgtConfSavedFlash = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 17)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"))
if mibBuilder.loadTexts: mcrMgtConfSavedFlash.setStatus('current')
if mibBuilder.loadTexts: mcrMgtConfSavedFlash.setDescription('Trap being sent indicates that the configuration has been saved to flash on the management module. ')
mcrMgtIpAddrDynChg = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 18)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "networkIpAddress"))
if mibBuilder.loadTexts: mcrMgtIpAddrDynChg.setStatus('current')
if mibBuilder.loadTexts: mcrMgtIpAddrDynChg.setDescription('Trap being sent indicates that the system IP address has been dynamically changed. ')
mcrMgtTftpUploadFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 19)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "remoteTftpFileName"), ("PERLE-MCR-MGT-MIB", "remoteTftpHost"))
if mibBuilder.loadTexts: mcrMgtTftpUploadFail.setStatus('current')
if mibBuilder.loadTexts: mcrMgtTftpUploadFail.setDescription('Trap being sent indicates that an attempt to transfer a file via TFTP, off the management module to a remote host has failed. ')
mcrMgtTftpUploadSuccess = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 20)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "remoteTftpFileName"), ("PERLE-MCR-MGT-MIB", "remoteTftpHost"))
if mibBuilder.loadTexts: mcrMgtTftpUploadSuccess.setStatus('current')
if mibBuilder.loadTexts: mcrMgtTftpUploadSuccess.setDescription('Trap being sent indicates that an attempt to transfer a file via TFTP, off the management module to a remote host was successful. ')
mcrMgtTftpDownloadFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 21)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "remoteTftpFileName"), ("PERLE-MCR-MGT-MIB", "remoteTftpHost"))
if mibBuilder.loadTexts: mcrMgtTftpDownloadFail.setStatus('current')
if mibBuilder.loadTexts: mcrMgtTftpDownloadFail.setDescription('Trap being sent indicates that an attempt to transfer a file via TFTP, from a remote host to the management module has failed.')
mcrMgtTftpDownloadSuccess = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 22)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "remoteTftpFileName"), ("PERLE-MCR-MGT-MIB", "remoteTftpHost"))
if mibBuilder.loadTexts: mcrMgtTftpDownloadSuccess.setStatus('current')
if mibBuilder.loadTexts: mcrMgtTftpDownloadSuccess.setDescription('Trap being sent indicates that an attempt to transfer a file via TFTP, from a remote host to the management module was successful. ')
mcrMgtChassisMismatch = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 23)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"))
if mibBuilder.loadTexts: mcrMgtChassisMismatch.setStatus('current')
if mibBuilder.loadTexts: mcrMgtChassisMismatch.setDescription("Trap being sent indicates that the management module has been inserted into a chassis that does not match it's Backup media converter module configuration. Backup media module configurations will be reset to factory default. ")
mcrChassisAdd = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 24)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "chassisModelName"), ("PERLE-MCR-MGT-MIB", "chassisSerialNumber"))
if mibBuilder.loadTexts: mcrChassisAdd.setStatus('current')
if mibBuilder.loadTexts: mcrChassisAdd.setDescription('Trap being sent indicates that a new chassis as been added to the chain of chassis. ')
mcrChassisRemove = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 25)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrChassisRemove.setStatus('current')
if mibBuilder.loadTexts: mcrChassisRemove.setDescription('Trap being sent indicates that that a chassis has been removed from the chain of chassis. ')
mcrChassisReset = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 26)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrChassisReset.setStatus('current')
if mibBuilder.loadTexts: mcrChassisReset.setDescription('Trap being sent indicates that the chassis back-plane has been manually reset by a user managing the unit. ')
mcrChassisTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 27)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "chassisTemperature"), ("PERLE-MCR-MGT-MIB", "chassisCfgHighTempThreshold"))
if mibBuilder.loadTexts: mcrChassisTemperatureAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrChassisTemperatureAlarm.setDescription('Trap being sent indicates that the chassis temperature has exceeded the configured high temperature threshold temperature. ')
mcrChassisTemperatureRecover = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 28)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "chassisTemperature"))
if mibBuilder.loadTexts: mcrChassisTemperatureRecover.setStatus('current')
if mibBuilder.loadTexts: mcrChassisTemperatureRecover.setDescription('Trap being sent indicates that the chassis temperature has recovered back to normal operating temperature. ')
mcrChassisSlotPoweredOn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 29)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrModuleModelName"), ("PERLE-MCR-MGT-MIB", "mcrModuleSerialNumber"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrChassisSlotPoweredOn.setStatus('current')
if mibBuilder.loadTexts: mcrChassisSlotPoweredOn.setDescription('Trap being sent indicates that the chassis slot has been powered off either manually or through the configured chassis slot power schedule. ')
mcrChassisSlotPoweredOff = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 30)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"))
if mibBuilder.loadTexts: mcrChassisSlotPoweredOff.setStatus('current')
if mibBuilder.loadTexts: mcrChassisSlotPoweredOff.setDescription('Trap being sent indicates that the chassis slot has been powered on either manually or through the configured chassis slot power schedule. ')
mcrChassisFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 31)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrChassisFail.setStatus('current')
if mibBuilder.loadTexts: mcrChassisFail.setDescription('Trap being sent indicates that the management module has detected a failure condition in the chassis. ')
mcrChassisOk = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 32)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrChassisOk.setStatus('current')
if mibBuilder.loadTexts: mcrChassisOk.setDescription('Trap being sent indicates that the chassis has recovered from a failure and is now operating normally.')
mcrPsmuInserted = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 33)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuModelName"))
if mibBuilder.loadTexts: mcrPsmuInserted.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuInserted.setDescription('Trap being sent indicates that a power supply has been inserted into the chassis.')
mcrPsmuRemoved = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 34)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"))
if mibBuilder.loadTexts: mcrPsmuRemoved.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuRemoved.setDescription("Trap being sent indicates that a power supply's has been removed from the chassis.")
mcrPsmuPsuFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 35)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuStatus"))
if mibBuilder.loadTexts: mcrPsmuPsuFail.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuPsuFail.setDescription("Trap being sent indicates that the power supply has failed it's self-test diagnostics. ")
mcrPsmuPsuOk = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 36)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"))
if mibBuilder.loadTexts: mcrPsmuPsuOk.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuPsuOk.setDescription("Trap being sent indicates that the power supply has passed it's self-test diagnostics. ")
mcrPsmuPsuVoltageFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 37)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"))
if mibBuilder.loadTexts: mcrPsmuPsuVoltageFail.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuPsuVoltageFail.setDescription('Trap being sent indicates that the voltage being supplied by the indicated power supply is insufficient.')
mcrPsmuPsuVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 38)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"))
if mibBuilder.loadTexts: mcrPsmuPsuVoltageOk.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuPsuVoltageOk.setDescription('Trap being sent indicates that the voltage being supplied by the indicated power supply is now in the normal operating range.')
mcrPsmuFanFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 39)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"))
if mibBuilder.loadTexts: mcrPsmuFanFail.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuFanFail.setDescription('Trap being sent indicates that the fan has failed. ')
mcrPsmuFanOk = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 40)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"))
if mibBuilder.loadTexts: mcrPsmuFanOk.setStatus('current')
if mibBuilder.loadTexts: mcrPsmuFanOk.setDescription('Trap being sent indicates that the fan currently operating normally. ')
mcrMediaInserted = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 42)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrModuleModelName"), ("PERLE-MCR-MGT-MIB", "mcrModuleSerialNumber"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaInserted.setStatus('current')
if mibBuilder.loadTexts: mcrMediaInserted.setDescription('Trap being sent indicates that a media converter module has been inserted into the chassis. ')
mcrMediaRemoved = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 43)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaRemoved.setStatus('current')
if mibBuilder.loadTexts: mcrMediaRemoved.setDescription('Trap being sent indicates that a media converter module has been removed from the chassis. ')
mcrMediaReset = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 44)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaReset.setStatus('current')
if mibBuilder.loadTexts: mcrMediaReset.setDescription('Trap being sent indicates that the media converter module has been manually reset by a user managing the unit. ')
mcrMediaLostCommunication = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 45)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaLostCommunication.setStatus('current')
if mibBuilder.loadTexts: mcrMediaLostCommunication.setDescription('Trap being sent indicates that the management module can no longer communicate with the media converter module ')
mcrMediaRecovCommunication = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 46)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaRecovCommunication.setStatus('current')
if mibBuilder.loadTexts: mcrMediaRecovCommunication.setDescription('Trap being sent indicates that the management module recovered communication with a media converter module ')
mcrMediaFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 47)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrModuleDiagStatus"))
if mibBuilder.loadTexts: mcrMediaFail.setStatus('current')
if mibBuilder.loadTexts: mcrMediaFail.setDescription('Trap being sent indicates that the media converter module has failed its self-test diagnostics ')
mcrMediaOk = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 48)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaOk.setStatus('current')
if mibBuilder.loadTexts: mcrMediaOk.setDescription('Trap being sent indicates that the media converter module has passed its self-test diagnostics ')
mcrMediaLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 49)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortDescr"))
if mibBuilder.loadTexts: mcrMediaLinkUp.setStatus('current')
if mibBuilder.loadTexts: mcrMediaLinkUp.setDescription('Trap being sent indicates that the current link status of the Fiber or Copper port on the media converter module is up.')
mcrMediaLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 50)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortDescr"))
if mibBuilder.loadTexts: mcrMediaLinkDown.setStatus('current')
if mibBuilder.loadTexts: mcrMediaLinkDown.setDescription('Trap being sent indicates that the current link status of the Fiber or Copper port on the media converter module is down. ')
mcrMediaConfUpdateFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 51)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaConfUpdateFail.setStatus('current')
if mibBuilder.loadTexts: mcrMediaConfUpdateFail.setDescription('Trap being sent indicates that the configuration update on the media converter module has failed.')
mcrMediaConfUpdateSuccess = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 52)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaConfUpdateSuccess.setStatus('current')
if mibBuilder.loadTexts: mcrMediaConfUpdateSuccess.setDescription('Trap being sent indicates that the configuration update on the media converter module was successful. The media converter module configuration can be updated manually or automatically. ')
mcrMediaConfMismatch = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 53)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrModuleTypeInserted"), ("PERLE-MCR-MGT-MIB", "mcrMediaBackedupModuleType"), ("PERLE-MCR-MGT-MIB", "mcrModuleSubTypeInserted"), ("PERLE-MCR-MGT-MIB", "mcrMediaBackedupModuleSubType"))
if mibBuilder.loadTexts: mcrMediaConfMismatch.setStatus('current')
if mibBuilder.loadTexts: mcrMediaConfMismatch.setDescription('Trap being sent indicates that a chassis slot is configured with Backup/Restore and the media converter module type configured for the slot does not match the media converter module type inserted into the slot. ')
mcrMediaConfMismatchResolv = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 54)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrModuleTypeInserted"), ("PERLE-MCR-MGT-MIB", "mcrMediaBackedupModuleType"), ("PERLE-MCR-MGT-MIB", "mcrModuleSubTypeInserted"), ("PERLE-MCR-MGT-MIB", "mcrMediaBackedupModuleSubType"))
if mibBuilder.loadTexts: mcrMediaConfMismatchResolv.setStatus('current')
if mibBuilder.loadTexts: mcrMediaConfMismatchResolv.setDescription('Trap being sent indicates that a user has taken action to resolved media converter module configuration mismatch ')
mcrMediaFirmwareUpdateFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 55)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrModuleModelName"))
if mibBuilder.loadTexts: mcrMediaFirmwareUpdateFail.setStatus('current')
if mibBuilder.loadTexts: mcrMediaFirmwareUpdateFail.setDescription("Trap being sent indicates that an attempt to update a media converter module's firmware has Failed. ")
mcrMediaFirmwareUpdateSuccess = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 56)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrModuleModelName"))
if mibBuilder.loadTexts: mcrMediaFirmwareUpdateSuccess.setStatus('current')
if mibBuilder.loadTexts: mcrMediaFirmwareUpdateSuccess.setDescription("Trap being sent indicates that an attempt to update a media converter module's firmware was successful. ")
mcrSfpInserted = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 57)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrSfpInserted.setStatus('current')
if mibBuilder.loadTexts: mcrSfpInserted.setDescription('Trap being sent indicates that a SFP module has been inserted into a media converter module')
mcrSfpRemoved = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 58)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrSfpRemoved.setStatus('current')
if mibBuilder.loadTexts: mcrSfpRemoved.setDescription('Trap being sent indicates that a SFP module has been removed from a media converter module ')
mcrSfpHighTempWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 59)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTempWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTempWarn.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighTempWarn.setDescription("Trap being sent indicates that a SFP module's temperature has exceeded the high temperature warning threshold. ")
mcrSfpHighTempWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 60)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTempWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighTempWarnRecov.setDescription("Trap being sent indicates that a SFP module's temperature has recovered to normal operating level. ")
mcrSfpHighTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 61)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTempAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTempAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighTempAlarm.setDescription("Trap being sent indicates that a SFP module's temperature has exceeded the high temperature alarm threshold. ")
mcrSfpHighTempAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 62)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTempAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighTempAlarmRecov.setDescription("Trap being sent indicates that a SFP module's temperature has recovered to normal operating level. ")
mcrSfpLowTempWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 63)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTempWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTempWarn.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowTempWarn.setDescription("Trap being sent indicates that a SFP module's temperature has gone below the low temperature warning threshold. ")
mcrSfpLowTempWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 64)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTempWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowTempWarnRecov.setDescription("Trap being sent indicates that a SFP module's temperature has recovered to normal operating level. ")
mcrSfpLowTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 65)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTempAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTempAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowTempAlarm.setDescription("Trap being sent indicates that a SFP module's temperature has gone below the low temperature alarm threshold. ")
mcrSfpLowTempAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 66)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTempAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowTempAlarmRecov.setDescription("Trap being sent indicates that a SFP module's temperature has recovered to normal operating level. ")
mcrSfpHighVoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 67)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighVoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighVoltWarn.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighVoltWarn.setDescription("Trap being sent indicates that a SFP module's voltage has exceeded the high voltage warning threshold. ")
mcrSfpHighVoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 68)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighVoltWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighVoltWarnRecov.setDescription("Trap being sent indicates that a SFP module's voltage has recovered to normal operating level. ")
mcrSfpHighVoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 69)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighVoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighVoltAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighVoltAlarm.setDescription("Trap being sent indicates that a SFP module's voltage has exceeded the high voltage alarm threshold. ")
mcrSfpHighVoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 70)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighVoltAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighVoltAlarmRecov.setDescription("Trap being sent indicates that a SFP module's voltage has recovered to normal operating level. ")
mcrSfpLowVoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 71)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowVoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowVoltWarn.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowVoltWarn.setDescription("Trap being sent indicates that a SFP module's voltage has gone below the low voltage warning threshold. ")
mcrSfpLowVoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 72)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowVoltWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowVoltWarnRecov.setDescription("Trap being sent indicates that a SFP module's voltage has recovered to normal operating level. ")
mcrSfpLowVoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 73)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowVoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowVoltAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowVoltAlarm.setDescription("Trap being sent indicates that a SFP module's voltage has gone below the low voltage alarm threshold. ")
mcrSfpLowVoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 74)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowVoltAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowVoltAlarmRecov.setDescription("Trap being sent indicates that a SFP module's voltage has recovered to normal operating level. ")
mcrSfpHighTxBiasWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 75)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTxBiasWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTxBiasWarn.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighTxBiasWarn.setDescription("Trap being sent indicates that a SFP module's TX Bias current has exceeded the high TX Bias current warning threshold. ")
mcrSfpHighTxBiasWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 76)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTxBiasWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighTxBiasWarnRecov.setDescription("Trap being sent indicates that a SFP module's TX Bias current has recovered to normal operating level. ")
mcrSfpHighTxBiasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 77)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTxBiasAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTxBiasAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighTxBiasAlarm.setDescription("Trap being sent indicates that a SFP module's TX Bias current has exceeded the high TX Bias current alarm threshold. ")
mcrSfpHighTxBiasAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 78)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTxBiasAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighTxBiasAlarmRecov.setDescription("Trap being sent indicates that a SFP module's TX Bias current has recovered to normal operating level. ")
mcrSfpLowTxBiasWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 79)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTxBiasWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTxBiasWarn.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowTxBiasWarn.setDescription("Trap being sent indicates that a SFP module's TX Bias current has gone below the low Tx Bias current warning threshold. ")
mcrSfpLowTxBiasWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 80)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTxBiasWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowTxBiasWarnRecov.setDescription("Trap being sent indicates that a SFP module's TX Bias current has recovered to normal operating level. ")
mcrSfpLowTxBiasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 81)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTxBiasAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTxBiasAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowTxBiasAlarm.setDescription("Trap being sent indicates that a SFP module's TX Bias current has gone below the low Tx Bias current alarm threshold. ")
mcrSfpLowTxBiasAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 82)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTxBiasAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowTxBiasAlarmRecov.setDescription("Trap being sent indicates that a SFP module's TX Bias current has recovered to normal operating level. ")
mcrSfpHighTxPowerWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 83)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTxPowerWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTxPowerWarn.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighTxPowerWarn.setDescription("Trap being sent indicates that a SFP module's TX power has exceeded the high TX power warning threshold. ")
mcrSfpHighTxPowerWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 84)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTxPowerWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighTxPowerWarnRecov.setDescription("Trap being sent indicates that a SFP module's TX power has recovered to normal operating level. ")
mcrSfpHighTxPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 85)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTxPowerAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighTxPowerAlarm.setDescription("Trap being sent indicates that a SFP module's TX power has exceeded the high TX power alarm threshold. ")
mcrSfpHighTxPowerAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 86)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighTxPowerAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighTxPowerAlarmRecov.setDescription("Trap being sent indicates that a SFP module's TX power has recovered to normal operating level. ")
mcrSfpLowTxPowerWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 87)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTxPowerWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTxPowerWarn.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowTxPowerWarn.setDescription("Trap being sent indicates that a SFP module's TX power has gone below the low TX power warning threshold. ")
mcrSfpLowTxPowerWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 88)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTxPowerWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowTxPowerWarnRecov.setDescription("Trap being sent indicates that a SFP module's TX power has recovered to normal operating level. ")
mcrSfpLowTxPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 89)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTxPowerAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowTxPowerAlarm.setDescription("Trap being sent indicates that a SFP module's TX power has gone below the low TX power alarm threshold. ")
mcrSfpLowTxPowerAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 90)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowTxPowerAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowTxPowerAlarmRecov.setDescription("Trap being sent indicates that a SFP module's TX power has recovered to normal operating level. ")
mcrSfpHighRxPowerWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 91)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighRxPowerWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighRxPowerWarn.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighRxPowerWarn.setDescription("Trap being sent indicates that a SFP module's RX power has exceeded the high RX power warning threshold. ")
mcrSfpHighRxPowerWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 92)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighRxPowerWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighRxPowerWarnRecov.setDescription("Trap being sent indicates that a SFP module's RX power has recovered to normal operating level. ")
mcrSfpHighRxPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 93)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighRxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighRxPowerAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighRxPowerAlarm.setDescription("Trap being sent indicates that a SFP module's RX power has exceeded the high RX power alarm threshold. ")
mcrSfpHighRxPowerAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 94)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpHighRxPowerAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpHighRxPowerAlarmRecov.setDescription("Trap being sent indicates that a SFP module's RX power has recovered to normal operating level. ")
mcrSfpLowRxPowerWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 95)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowRxPowerWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowRxPowerWarn.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowRxPowerWarn.setDescription("Trap being sent indicates that a SFP module's RX power has gone below the low RX power warning threshold. ")
mcrSfpLowRxPowerWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 96)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowRxPowerWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowRxPowerWarnRecov.setDescription("Trap being sent indicates that a SFP module's RX power has recovered to normal operating level. ")
mcrSfpLowRxPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 97)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowRxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowRxPowerAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowRxPowerAlarm.setDescription("Trap being sent indicates that a SFP module's RX power has gone below the low RX power alarm threshold. ")
mcrSfpLowRxPowerAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 98)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpLowRxPowerAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLowRxPowerAlarmRecov.setDescription("Trap being sent indicates that a SFP module's RX power has recovered to normal operating level. ")
mcrChassisCommTempSensorFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 99)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrChassisCommTempSensorFail.setStatus('current')
if mibBuilder.loadTexts: mcrChassisCommTempSensorFail.setDescription('Trap being sent indicates that communication with the chassis temperature sensor has failed. The current chassis temperature reading will be unknown')
mcrChassisCommTempSensorRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 100)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrChassisCommTempSensorRecov.setStatus('current')
if mibBuilder.loadTexts: mcrChassisCommTempSensorRecov.setDescription('Trap being sent indicates that communication with the chassis temperature sensor has recovered.')
mcrMediaDetectFail = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 101)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaDetectFail.setStatus('current')
if mibBuilder.loadTexts: mcrMediaDetectFail.setDescription('Trap being sent indicates that the indicated media card is being powered down due to the detection of a hardware failure.')
mcrMediaBadImage = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 102)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaBadImage.setStatus('current')
if mibBuilder.loadTexts: mcrMediaBadImage.setDescription('Trap being sent indicates that the CRC of the media converter module firmware is incorrect. This can be caused if there is no image on the module or the image is corrupt.')
mcrSfpLostComm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 103)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrSfpLostComm.setStatus('current')
if mibBuilder.loadTexts: mcrSfpLostComm.setDescription("Trap being sent indicates that the media converter module's microcode can no longer communicate with the SFP module.")
mcrSfpRecovComm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 104)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrSfpRecovComm.setStatus('current')
if mibBuilder.loadTexts: mcrSfpRecovComm.setDescription("Trap being sent indicates that the media converter module's microcode had previously lost communication with, but has now regained communication with the SFP module.")
mcrModuleNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 105)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrModuleNotSupported.setStatus('current')
if mibBuilder.loadTexts: mcrModuleNotSupported.setDescription('Trap being sent indicates that the media converter module is not fully supported by the management module. Update the management module firmware to rectify this issue.')
mcrModuleFirmwareUpdate = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 106)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrModuleFirmwareUpdate.setStatus('current')
if mibBuilder.loadTexts: mcrModuleFirmwareUpdate.setDescription('Trap being sent indicates that the media converter module firmware is being updated.')
mcrSfpPortShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 107)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpPortShutdown.setStatus('current')
if mibBuilder.loadTexts: mcrSfpPortShutdown.setDescription('Trap being sent indicates that the Sfp/Xfp port has been shutdown due to high temperature.')
mcrSfpPortShutdownRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 108)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrSfpPortShutdownRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpPortShutdownRecov.setDescription('Trap being sent indicates that the Sfp/Xfp port shutdown has recovered.')
mcrXfpHighApdBiasWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 109)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighApdBiasWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighApdBiasWarn.setDescription("Trap being sent indicates that an XFP module's APD Bias Current has exceeded the high APD Bias warning threshold. ")
mcrXfpHighApdBiasWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 110)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighApdBiasWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighApdBiasWarnRecov.setDescription("Trap being sent indicates that an XFP module's APD Bias Current has recovered to normal operating level.")
mcrXfpHighApdBiasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 111)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighApdBiasAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighApdBiasAlarm.setDescription("Trap being sent indicates that an XFP module's APD Bias Current has exceeded the high APD Bias alarm threshold. ")
mcrXfpHighApdBiasAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 112)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighApdBiasAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighApdBiasAlarmRecov.setDescription("Trap being sent indicates that an XFP module's APD Bias Current has recovered to normal operating level. ")
mcrXfpLowApdBiasWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 113)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowApdBiasWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowApdBiasWarn.setDescription("Trap being sent indicates that an XFP module's APD Bias Current has gone below the low APD Bias warning threshold. ")
mcrXfpLowApdBiasWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 114)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowApdBiasWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowApdBiasWarnRecov.setDescription("Trap being sent indicates that an XFP module's APD Bias Current has recovered to normal operating level. ")
mcrXfpLowApdBiasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 115)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowApdBiasAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowApdBiasAlarm.setDescription("Trap being sent indicates that an XFP module's APD Bias Current has gone below the low APD Bias alarm threshold. ")
mcrXfpLowApdBiasAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 116)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowApdBiasAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowApdBiasAlarmRecov.setDescription("Trap being sent indicates that an XFP module's APD Bias Current has recovered to normal operating level. ")
mcrXfpHighTecCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 117)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighTecCurrentWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighTecCurrentWarn.setDescription("Trap being sent indicates that an XFP module's TEC Current has exceeded the high TEC Current warning threshold. ")
mcrXfpHighTecCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 118)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighTecCurrentWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighTecCurrentWarnRecov.setDescription("Trap being sent indicates that an XFP module's TEC Current has recovered to normal operating level.")
mcrXfpHighTecCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 119)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighTecCurrentAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighTecCurrentAlarm.setDescription("Trap being sent indicates that an XFP module's TEC Current has exceeded the high TEC Current alarm threshold. ")
mcrXfpHighTecCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 120)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighTecCurrentAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighTecCurrentAlarmRecov.setDescription("Trap being sent indicates that an XFP module's TEC Current has recovered to normal operating level. ")
mcrXfpLowTecCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 121)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowTecCurrentWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowTecCurrentWarn.setDescription("Trap being sent indicates that an XFP module's TEC Current has gone below the low TEC Current warning threshold. ")
mcrXfpLowTecCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 122)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowTecCurrentWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowTecCurrentWarnRecov.setDescription("Trap being sent indicates that an XFP module's TEC Current has recovered to normal operating level. ")
mcrXfpLowTecCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 123)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowTecCurrentAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowTecCurrentAlarm.setDescription("Trap being sent indicates that an XFP module's TEC Current has gone below the low TEC Current alarm threshold. ")
mcrXfpLowTecCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 124)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowTecCurrentAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowTecCurrentAlarmRecov.setDescription("Trap being sent indicates that an XFP module's TEC Current has recovered to normal operating level. ")
mcrXfpHighLaserTempWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 125)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighLaserTempWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighLaserTempWarn.setDescription("Trap being sent indicates that an XFP module's Laser Temperature has exceeded the high Laser Temperature warning threshold. ")
mcrXfpHighLaserTempWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 126)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighLaserTempWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighLaserTempWarnRecov.setDescription("Trap being sent indicates that an XFP module's Laser Temperature has recovered to normal operating level.")
mcrXfpHighLaserTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 127)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighLaserTempAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighLaserTempAlarm.setDescription("Trap being sent indicates that an XFP module's Laser Temperature has exceeded the high Laser Temperature alarm threshold. ")
mcrXfpHighLaserTempAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 128)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighLaserTempAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighLaserTempAlarmRecov.setDescription("Trap being sent indicates that an XFP module's Laser Temperature has recovered to normal operating level. ")
mcrXfpLowLaserTempWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 129)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowLaserTempWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowLaserTempWarn.setDescription("Trap being sent indicates that an XFP module's Laser Temperature has gone below the low Laser Temperature warning threshold. ")
mcrXfpLowLaserTempWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 130)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowLaserTempWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowLaserTempWarnRecov.setDescription("Trap being sent indicates that an XFP module's Laser Temperature has recovered to normal operating level. ")
mcrXfpLowLaserTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 131)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowLaserTempAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowLaserTempAlarm.setDescription("Trap being sent indicates that an XFP module's Laser Temperature has gone below the low Laser Temperature alarm threshold. ")
mcrXfpLowLaserTempAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 132)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowLaserTempAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowLaserTempAlarmRecov.setDescription("Trap being sent indicates that an XFP module's Laser Temperature has recovered to normal operating level. ")
mcrXfpHighLaserWavelengthWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 133)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighLaserWavelengthWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighLaserWavelengthWarn.setDescription("Trap being sent indicates that an XFP module's Laser Wavelength has exceeded the high Laser Wavelength warning threshold. ")
mcrXfpHighLaserWavelengthWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 134)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighLaserWavelengthWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighLaserWavelengthWarnRecov.setDescription("Trap being sent indicates that an XFP module's Laser Wavelength has recovered to normal operating level.")
mcrXfpHighLaserWavelengthAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 135)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighLaserWavelengthAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighLaserWavelengthAlarm.setDescription("Trap being sent indicates that an XFP module's Laser Wavelength has exceeded the high Laser Wavelength alarm threshold. ")
mcrXfpHighLaserWavelengthAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 136)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighLaserWavelengthAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighLaserWavelengthAlarmRecov.setDescription("Trap being sent indicates that an XFP module's Laser Wavelength has recovered to normal operating level. ")
mcrXfpLowLaserWavelengthWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 137)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowLaserWavelengthWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowLaserWavelengthWarn.setDescription("Trap being sent indicates that an XFP module's Laser Wavelength has gone below the low Laser Wavelength warning threshold. ")
mcrXfpLowLaserWavelengthWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 138)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowLaserWavelengthWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowLaserWavelengthWarnRecov.setDescription("Trap being sent indicates that an XFP module's Laser Wavelength has recovered to normal operating level. ")
mcrXfpLowLaserWavelengthAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 139)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowLaserWavelengthAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowLaserWavelengthAlarm.setDescription("Trap being sent indicates that an XFP module's Laser Wavelength has gone below the low Laser Wavelength alarm threshold. ")
mcrXfpLowLaserWavelengthAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 140)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowLaserWavelengthAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowLaserWavelengthAlarmRecov.setDescription("Trap being sent indicates that an XFP module's Laser Wavelength has recovered to normal operating level. ")
mcrXfpHigh5VoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 141)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh5VoltWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh5VoltWarn.setDescription("Trap being sent indicates that an XFP module's +5v supply has exceeded the high +5v supply warning threshold. ")
mcrXfpHigh5VoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 142)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh5VoltWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh5VoltWarnRecov.setDescription("Trap being sent indicates that an XFP module's +5v supply has recovered to normal operating level.")
mcrXfpHigh5VoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 143)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh5VoltAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh5VoltAlarm.setDescription("Trap being sent indicates that an XFP module's +5v supply has exceeded the high +5v supply alarm threshold. ")
mcrXfpHigh5VoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 144)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh5VoltAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh5VoltAlarmRecov.setDescription("Trap being sent indicates that an XFP module's +5v supply has recovered to normal operating level. ")
mcrXfpLow5VoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 145)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow5VoltWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow5VoltWarn.setDescription("Trap being sent indicates that an XFP module's +5v supply has gone below the low +5v supply warning threshold. ")
mcrXfpLow5VoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 146)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow5VoltWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow5VoltWarnRecov.setDescription("Trap being sent indicates that an XFP module's +5v supply has recovered to normal operating level. ")
mcrXfpLow5VoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 147)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow5VoltAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow5VoltAlarm.setDescription("Trap being sent indicates that an XFP module's +5v supply has gone below the low +5v supply alarm threshold. ")
mcrXfpLow5VoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 148)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow5VoltAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow5VoltAlarmRecov.setDescription("Trap being sent indicates that an XFP module's +5v supply has recovered to normal operating level. ")
mcrXfpHigh33VoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 149)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh33VoltWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh33VoltWarn.setDescription("Trap being sent indicates that an XFP module's +3.3v supply has exceeded the high +3.3v supply warning threshold. ")
mcrXfpHigh33VoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 150)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh33VoltWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh33VoltWarnRecov.setDescription("Trap being sent indicates that an XFP module's +3.3v supply has recovered to normal operating level.")
mcrXfpHigh33VoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 151)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh33VoltAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh33VoltAlarm.setDescription("Trap being sent indicates that an XFP module's +3.3v supply has exceeded the high +3.3v supply alarm threshold. ")
mcrXfpHigh33VoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 152)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh33VoltAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh33VoltAlarmRecov.setDescription("Trap being sent indicates that an XFP module's +3.3v supply has recovered to normal operating level. ")
mcrXfpLow33VoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 153)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow33VoltWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow33VoltWarn.setDescription("Trap being sent indicates that an XFP module's +3.3v supply has gone below the low +3.3v supply warning threshold. ")
mcrXfpLow33VoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 154)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow33VoltWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow33VoltWarnRecov.setDescription("Trap being sent indicates that an XFP module's +3.3v supply has recovered to normal operating level. ")
mcrXfpLow33VoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 155)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow33VoltAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow33VoltAlarm.setDescription("Trap being sent indicates that an XFP module's +3.3v supply has gone below the low +3.3v supply alarm threshold. ")
mcrXfpLow33VoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 156)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow33VoltAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow33VoltAlarmRecov.setDescription("Trap being sent indicates that an XFP module's +3.3v supply has recovered to normal operating level. ")
mcrXfpHigh18VoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 157)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh18VoltWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh18VoltWarn.setDescription("Trap being sent indicates that an XFP module's +1.8v supply has exceeded the high +1.8v supply warning threshold. ")
mcrXfpHigh18VoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 158)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh18VoltWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh18VoltWarnRecov.setDescription("Trap being sent indicates that an XFP module's +1.8v supply has recovered to normal operating level.")
mcrXfpHigh18VoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 159)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh18VoltAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh18VoltAlarm.setDescription("Trap being sent indicates that an XFP module's +1.8v supply has exceeded the high +1.8v supply alarm threshold. ")
mcrXfpHigh18VoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 160)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh18VoltAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh18VoltAlarmRecov.setDescription("Trap being sent indicates that an XFP module's +1.8v supply has recovered to normal operating level. ")
mcrXfpLow18VoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 161)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow18VoltWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow18VoltWarn.setDescription("Trap being sent indicates that an XFP module's +1.8v supply has gone below the low +1.8v supply warning threshold. ")
mcrXfpLow18VoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 162)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow18VoltWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow18VoltWarnRecov.setDescription("Trap being sent indicates that an XFP module's +1.8v supply has recovered to normal operating level. ")
mcrXfpLow18VoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 163)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow18VoltAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow18VoltAlarm.setDescription("Trap being sent indicates that an XFP module's +1.8v supply has gone below the low +1.8v supply alarm threshold. ")
mcrXfpLow18VoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 164)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow18VoltAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow18VoltAlarmRecov.setDescription("Trap being sent indicates that an XFP module's +1.8v supply has recovered to normal operating level. ")
mcrXfpHighM52VoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 165)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighM52VoltWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighM52VoltWarn.setDescription("Trap being sent indicates that an XFP module's -5.2v supply has exceeded the high -5.2v supply warning threshold. ")
mcrXfpHighM52VoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 166)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighM52VoltWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighM52VoltWarnRecov.setDescription("Trap being sent indicates that an XFP module's -5.2v supply has recovered to normal operating level.")
mcrXfpHighM52VoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 167)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighM52VoltAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighM52VoltAlarm.setDescription("Trap being sent indicates that an XFP module's -5.2v supply has exceeded the high -5.2v supply alarm threshold. ")
mcrXfpHighM52VoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 168)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighM52VoltAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighM52VoltAlarmRecov.setDescription("Trap being sent indicates that an XFP module's -5.2v supply has recovered to normal operating level. ")
mcrXfpLowM52VoltWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 169)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowM52VoltWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowM52VoltWarn.setDescription("Trap being sent indicates that an XFP module's -5.2v supply has gone below the low -5.2v supply warning threshold. ")
mcrXfpLowM52VoltWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 170)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowM52VoltWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowM52VoltWarnRecov.setDescription("Trap being sent indicates that an XFP module's -5.2v supply has recovered to normal operating level. ")
mcrXfpLowM52VoltAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 171)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowM52VoltAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowM52VoltAlarm.setDescription("Trap being sent indicates that an XFP module's -5.2v supply has gone below the low -5.2v supply alarm threshold. ")
mcrXfpLowM52VoltAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 172)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowM52VoltAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowM52VoltAlarmRecov.setDescription("Trap being sent indicates that an XFP module's -5.2v supply has recovered to normal operating level. ")
mcrXfpHigh5VCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 173)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh5VCurrentWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh5VCurrentWarn.setDescription("Trap being sent indicates that an XFP module's +5v supply current has exceeded the high +5v supply current warning threshold. ")
mcrXfpHigh5VCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 174)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh5VCurrentWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh5VCurrentWarnRecov.setDescription("Trap being sent indicates that an XFP module's +5v supply current has recovered to normal operating level.")
mcrXfpHigh5VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 175)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh5VCurrentAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh5VCurrentAlarm.setDescription("Trap being sent indicates that an XFP module's +5v supply current has exceeded the high +5v supply current alarm threshold. ")
mcrXfpHigh5VCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 176)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh5VCurrentAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh5VCurrentAlarmRecov.setDescription("Trap being sent indicates that an XFP module's +5v supply current has recovered to normal operating level. ")
mcrXfpLow5VCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 177)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow5VCurrentWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow5VCurrentWarn.setDescription("Trap being sent indicates that an XFP module's +5v supply current has gone below the low +5v supply current warning threshold. ")
mcrXfpLow5VCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 178)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow5VCurrentWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow5VCurrentWarnRecov.setDescription("Trap being sent indicates that an XFP module's +5v supply current has recovered to normal operating level. ")
mcrXfpLow5VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 179)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow5VCurrentAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow5VCurrentAlarm.setDescription("Trap being sent indicates that an XFP module's +5v supply current has gone below the low +5v supply current alarm threshold. ")
mcrXfpLow5VCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 180)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow5VCurrentAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow5VCurrentAlarmRecov.setDescription("Trap being sent indicates that an XFP module's +5v supply current has recovered to normal operating level. ")
mcrXfpHigh33VCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 181)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh33VCurrentWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh33VCurrentWarn.setDescription("Trap being sent indicates that an XFP module's +3.3v supply current has exceeded the high +3.3v supply current warning threshold. ")
mcrXfpHigh33VCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 182)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh33VCurrentWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh33VCurrentWarnRecov.setDescription("Trap being sent indicates that an XFP module's +3.3v supply current has recovered to normal operating level.")
mcrXfpHigh33VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 183)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh33VCurrentAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh33VCurrentAlarm.setDescription("Trap being sent indicates that an XFP module's +3.3v supply current has exceeded the high +3.3v supply current alarm threshold. ")
mcrXfpHigh33VCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 184)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh33VCurrentAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh33VCurrentAlarmRecov.setDescription("Trap being sent indicates that an XFP module's +3.3v supply current has recovered to normal operating level. ")
mcrXfpLow33VCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 185)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow33VCurrentWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow33VCurrentWarn.setDescription("Trap being sent indicates that an XFP module's +3.3v supply current has gone below the low +3.3v supply current warning threshold. ")
mcrXfpLow33VCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 186)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow33VCurrentWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow33VCurrentWarnRecov.setDescription("Trap being sent indicates that an XFP module's +3.3v supply current has recovered to normal operating level. ")
mcrXfpLow33VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 187)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow33VCurrentAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow33VCurrentAlarm.setDescription("Trap being sent indicates that an XFP module's +3.3v supply current has gone below the low +3.3v supply current alarm threshold. ")
mcrXfpLow33VCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 188)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow33VCurrentAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow33VCurrentAlarmRecov.setDescription("Trap being sent indicates that an XFP module's +3.3v supply current has recovered to normal operating level. ")
mcrXfpHigh18VCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 189)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh18VCurrentWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh18VCurrentWarn.setDescription("Trap being sent indicates that an XFP module's +1.8v supply current has exceeded the high +1.8v supply current warning threshold. ")
mcrXfpHigh18VCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 190)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh18VCurrentWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh18VCurrentWarnRecov.setDescription("Trap being sent indicates that an XFP module's +1.8v supply current has recovered to normal operating level.")
mcrXfpHigh18VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 191)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh18VCurrentAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh18VCurrentAlarm.setDescription("Trap being sent indicates that an XFP module's +1.8v supply current has exceeded the high +1.8v supply current alarm threshold. ")
mcrXfpHigh18VCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 192)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHigh18VCurrentAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHigh18VCurrentAlarmRecov.setDescription("Trap being sent indicates that an XFP module's +1.8v supply current has recovered to normal operating level. ")
mcrXfpLow18VCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 193)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow18VCurrentWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow18VCurrentWarn.setDescription("Trap being sent indicates that an XFP module's +1.8v supply current has gone below the low +1.8v supply current warning threshold. ")
mcrXfpLow18VCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 194)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow18VCurrentWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow18VCurrentWarnRecov.setDescription("Trap being sent indicates that an XFP module's +1.8v supply current has recovered to normal operating level. ")
mcrXfpLow18VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 195)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow18VCurrentAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow18VCurrentAlarm.setDescription("Trap being sent indicates that an XFP module's +1.8v supply current has gone below the low +1.8v supply current alarm threshold. ")
mcrXfpLow18VCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 196)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLow18VCurrentAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLow18VCurrentAlarmRecov.setDescription("Trap being sent indicates that an XFP module's +1.8v supply current has recovered to normal operating level. ")
mcrXfpHighM52VCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 197)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighM52VCurrentWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighM52VCurrentWarn.setDescription("Trap being sent indicates that an XFP module's -5.2v supply current has exceeded the high -5.2v supply current warning threshold. ")
mcrXfpHighM52VCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 198)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighM52VCurrentWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighM52VCurrentWarnRecov.setDescription("Trap being sent indicates that an XFP module's -5.2v supply current has recovered to normal operating level.")
mcrXfpHighM52VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 199)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighM52VCurrentAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighM52VCurrentAlarm.setDescription("Trap being sent indicates that an XFP module's -5.2v supply current has exceeded the high -5.2v supply current alarm threshold. ")
mcrXfpHighM52VCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 200)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighM52VCurrentAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighM52VCurrentAlarmRecov.setDescription("Trap being sent indicates that an XFP module's -5.2v supply current has recovered to normal operating level. ")
mcrXfpLowM52VCurrentWarn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 201)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowM52VCurrentWarn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowM52VCurrentWarn.setDescription("Trap being sent indicates that an XFP module's -5.2v supply current has gone below the low -5.2v supply current warning threshold. ")
mcrXfpLowM52VCurrentWarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 202)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowM52VCurrentWarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowM52VCurrentWarnRecov.setDescription("Trap being sent indicates that an XFP module's -5.2v supply current has recovered to normal operating level. ")
mcrXfpLowM52VCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 203)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowM52VCurrentAlarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowM52VCurrentAlarm.setDescription("Trap being sent indicates that an XFP module's -5.2v supply current has gone below the low -5.2v supply current alarm threshold. ")
mcrXfpLowM52VCurrentAlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 204)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowM52VCurrentAlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowM52VCurrentAlarmRecov.setDescription("Trap being sent indicates that an XFP module's -5.2v supply current has recovered to normal operating level. ")
mcrXfpHighVCC5Warn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 205)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC5Warn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighVCC5Warn.setDescription("Trap being sent indicates that an XFP module's +5v supply has exceeded the high +5v supply warning threshold.")
mcrXfpHighVCC5WarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 206)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC5WarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighVCC5WarnRecov.setDescription("Trap being sent indicates that an XFP module's +5v supply has recovered to normal operating level.")
mcrXfpHighVCC5Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 207)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC5Alarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighVCC5Alarm.setDescription("Trap being sent indicates that an XFP module's +5v supply has exceeded the high +5v supply alarm threshold. ")
mcrXfpHighVCC5AlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 208)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC5AlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighVCC5AlarmRecov.setDescription("Trap being sent indicates that an XFP module's +5v supply has recovered to normal operating level. ")
mcrXfpLowVCC5Warn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 209)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC5Warn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowVCC5Warn.setDescription("Trap being sent indicates that an XFP module's +5v supply has gone below the low +5v supply warning threshold. ")
mcrXfpLowVCC5WarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 210)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC5WarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowVCC5WarnRecov.setDescription("Trap being sent indicates that an XFP module's +5v supply has recovered to normal operating level. ")
mcrXfpLowVCC5Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 211)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC5Alarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowVCC5Alarm.setDescription("Trap being sent indicates that an XFP module's +5v supply has gone below the low +5v supply alarm threshold. ")
mcrXfpLowVCC5AlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 212)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC5AlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowVCC5AlarmRecov.setDescription("Trap being sent indicates that an XFP module's +5v supply has recovered to normal operating level. ")
mcrXfpHighVCC3Warn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 213)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC3Warn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighVCC3Warn.setDescription("Trap being sent indicates that an XFP module's +3.3v supply has exceeded the high +3.3v supply warning threshold.")
mcrXfpHighVCC3WarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 214)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC3WarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighVCC3WarnRecov.setDescription("Trap being sent indicates that an XFP module's +3.3v supply has recovered to normal operating level.")
mcrXfpHighVCC3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 215)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC3Alarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighVCC3Alarm.setDescription("Trap being sent indicates that an XFP module's +3.3v supply has exceeded the high +3.3v supply alarm threshold. ")
mcrXfpHighVCC3AlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 216)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC3AlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighVCC3AlarmRecov.setDescription("Trap being sent indicates that an XFP module's +3.3v supply has recovered to normal operating level. ")
mcrXfpLowVCC3Warn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 217)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC3Warn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowVCC3Warn.setDescription("Trap being sent indicates that an XFP module's +3.3v supply has gone below the low +3.3v supply warning threshold. ")
mcrXfpLowVCC3WarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 218)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC3WarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowVCC3WarnRecov.setDescription("Trap being sent indicates that an XFP module's +3.3v supply has recovered to normal operating level. ")
mcrXfpLowVCC3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 219)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC3Alarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowVCC3Alarm.setDescription("Trap being sent indicates that an XFP module's +3.3v supply has gone below the low +3.3v supply alarm threshold. ")
mcrXfpLowVCC3AlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 220)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC3AlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowVCC3AlarmRecov.setDescription("Trap being sent indicates that an XFP module's +3.3v supply has recovered to normal operating level. ")
mcrXfpHighVCC2Warn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 221)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC2Warn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighVCC2Warn.setDescription("Trap being sent indicates that an XFP module's +1.8v supply has exceeded the high +1.8v supply warning threshold.")
mcrXfpHighVCC2WarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 222)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC2WarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighVCC2WarnRecov.setDescription("Trap being sent indicates that an XFP module's +1.8v supply has recovered to normal operating level.")
mcrXfpHighVCC2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 223)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC2Alarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighVCC2Alarm.setDescription("Trap being sent indicates that an XFP module's +1.8v supply has exceeded the high +1.8v supply alarm threshold. ")
mcrXfpHighVCC2AlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 224)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVCC2AlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighVCC2AlarmRecov.setDescription("Trap being sent indicates that an XFP module's +1.8v supply has recovered to normal operating level. ")
mcrXfpLowVCC2Warn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 225)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC2Warn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowVCC2Warn.setDescription("Trap being sent indicates that an XFP module's +1.8v supply has gone below the low +1.8v supply warning threshold. ")
mcrXfpLowVCC2WarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 226)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC2WarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowVCC2WarnRecov.setDescription("Trap being sent indicates that an XFP module's +1.8v supply has recovered to normal operating level. ")
mcrXfpLowVCC2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 227)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC2Alarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowVCC2Alarm.setDescription("Trap being sent indicates that an XFP module's +1.8v supply has gone below the low +1.8v supply alarm threshold. ")
mcrXfpLowVCC2AlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 228)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVCC2AlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowVCC2AlarmRecov.setDescription("Trap being sent indicates that an XFP module's +1.8v supply has recovered to normal operating level. ")
mcrXfpHighVEE5Warn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 229)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVEE5Warn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighVEE5Warn.setDescription("Trap being sent indicates that an XFP module's -5.2v supply has exceeded the high -5.2v supply warning threshold.")
mcrXfpHighVEE5WarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 230)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVEE5WarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighVEE5WarnRecov.setDescription("Trap being sent indicates that an XFP module's -5.2v supply has recovered to normal operating level.")
mcrXfpHighVEE5Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 231)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVEE5Alarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighVEE5Alarm.setDescription("Trap being sent indicates that an XFP module's -5.2v supply has exceeded the high -5.2v supply alarm threshold. ")
mcrXfpHighVEE5AlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 232)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpHighVEE5AlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpHighVEE5AlarmRecov.setDescription("Trap being sent indicates that an XFP module's -5.2v supply has recovered to normal operating level. ")
mcrXfpLowVEE5Warn = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 233)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVEE5Warn.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowVEE5Warn.setDescription("Trap being sent indicates that an XFP module's -5.2v supply has gone below the low -5.2v supply warning threshold. ")
mcrXfpLowVEE5WarnRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 234)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVEE5WarnRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowVEE5WarnRecov.setDescription("Trap being sent indicates that an XFP module's -5.2v supply has recovered to normal operating level. ")
mcrXfpLowVEE5Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 235)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVEE5Alarm.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowVEE5Alarm.setDescription("Trap being sent indicates that an XFP module's -5.2v supply has gone below the low -5.2v supply alarm threshold. ")
mcrXfpLowVEE5AlarmRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 236)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"))
if mibBuilder.loadTexts: mcrXfpLowVEE5AlarmRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpLowVEE5AlarmRecov.setDescription("Trap being sent indicates that an XFP module's -5.2v supply has recovered to normal operating level. ")
mcrSfpSpeedMismatch = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 237)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrSfpSpeedMismatch.setStatus('current')
if mibBuilder.loadTexts: mcrSfpSpeedMismatch.setDescription('Trap being sent indicates that there is a speed mismatch between the two SFP modules installed in the media converter.')
mcrSfpSpeedMismatchRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 238)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrSfpSpeedMismatchRecov.setStatus('current')
if mibBuilder.loadTexts: mcrSfpSpeedMismatchRecov.setDescription('Trap being sent indicates that the speed mismatch between the two SFP modules has recovered.')
mcrXfpPowerExceeded = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 239)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrXfpPowerExceeded.setStatus('current')
if mibBuilder.loadTexts: mcrXfpPowerExceeded.setDescription("Trap being sent indicates that an XFP module's power requirements has exceeded card capacity.")
mcrXfpPowerExceededRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 240)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrXfpPowerExceededRecov.setStatus('current')
if mibBuilder.loadTexts: mcrXfpPowerExceededRecov.setDescription('Trap being sent indicates that the XFP excessive power alarm has recovered.')
mcrLinkTestError = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 241)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrLinkTestError.setStatus('current')
if mibBuilder.loadTexts: mcrLinkTestError.setDescription('Trap being sent indicates that the link test running on the media converter has detected errors.')
mcrAlarmRelayEngaged = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 242)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrAlarmRelayEngaged.setStatus('current')
if mibBuilder.loadTexts: mcrAlarmRelayEngaged.setDescription('Trap being sent indicates that the chassis alarm relay has engaged')
mcrAlarmRelayDisengaged = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 243)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"))
if mibBuilder.loadTexts: mcrAlarmRelayDisengaged.setStatus('current')
if mibBuilder.loadTexts: mcrAlarmRelayDisengaged.setDescription('Trap being sent indicates that the chassis alarm relay has disengaged')
mcrBandwidthLevelUpstreamLow = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 244)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidth"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidthThreshold"))
if mibBuilder.loadTexts: mcrBandwidthLevelUpstreamLow.setStatus('current')
if mibBuilder.loadTexts: mcrBandwidthLevelUpstreamLow.setDescription('Trap being sent indicates the media port is in a low upstream bandwidth condition. This happens when the bandwidth is below the configured threshold.')
mcrBandwidthLevelUpstreamRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 245)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidth"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidthThreshold"))
if mibBuilder.loadTexts: mcrBandwidthLevelUpstreamRecov.setStatus('current')
if mibBuilder.loadTexts: mcrBandwidthLevelUpstreamRecov.setDescription('Trap being sent indicates the media port has recovered from a low upstream bandwidth condition.')
mcrBandwidthLevelDownstreamLow = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 246)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidth"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidthThreshold"))
if mibBuilder.loadTexts: mcrBandwidthLevelDownstreamLow.setStatus('current')
if mibBuilder.loadTexts: mcrBandwidthLevelDownstreamLow.setDescription('Trap being sent indicates the media port is in a low downstream bandwidth condition. This happens when the bandwidth is below the configured threshold.')
mcrBandwidthLevelDownstreamRecov = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 247)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidth"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidthThreshold"))
if mibBuilder.loadTexts: mcrBandwidthLevelDownstreamRecov.setStatus('current')
if mibBuilder.loadTexts: mcrBandwidthLevelDownstreamRecov.setDescription('Trap being sent indicates the media port has recovered from a low downstream bandwidth condition.')
mcrMediaRemoteReset = NotificationType((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 0, 248)).setObjects(("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"))
if mibBuilder.loadTexts: mcrMediaRemoteReset.setStatus('current')
if mibBuilder.loadTexts: mcrMediaRemoteReset.setDescription("Trap being sent indicates that the media converter module's peer has been manually reset by a user managing the unit. ")
mcrMGTMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 2, 1))
mcrMGTMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 2, 2))
mcrMGTMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 2, 1, 1)).setObjects(("PERLE-MCR-MGT-MIB", "mcrMGTMIBChassisGroup"), ("PERLE-MCR-MGT-MIB", "mcrMGTMIBMediaGroup"), ("PERLE-MCR-MGT-MIB", "mcrMGTMIBMgtGroup"), ("PERLE-MCR-MGT-MIB", "mcrMGTMIBNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mcrMGTMIBCompliance = mcrMGTMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: mcrMGTMIBCompliance.setDescription('The compliance statement for mcrMGT which implement the Perle Managed Media Converters MIB.')
mcrMGTMIBChassisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 2, 2, 1)).setObjects(("PERLE-MCR-MGT-MIB", "mcrChassisIndex"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotIndex"), ("PERLE-MCR-MGT-MIB", "mcrPsmuIndex"), ("PERLE-MCR-MGT-MIB", "chassisModelName"), ("PERLE-MCR-MGT-MIB", "chassisModelDesc"), ("PERLE-MCR-MGT-MIB", "chassisSerialNumber"), ("PERLE-MCR-MGT-MIB", "chassisBootloaderVersion"), ("PERLE-MCR-MGT-MIB", "chassisFirmwareVersion"), ("PERLE-MCR-MGT-MIB", "chassisOutStandWarnAlarms"), ("PERLE-MCR-MGT-MIB", "chassisDiagStatus"), ("PERLE-MCR-MGT-MIB", "chassisTemperature"), ("PERLE-MCR-MGT-MIB", "chassisCfgHighTempThreshold"), ("PERLE-MCR-MGT-MIB", "chassisReset"), ("PERLE-MCR-MGT-MIB", "chassisCfgMgmtSlot"), ("PERLE-MCR-MGT-MIB", "mcrPsmuModelName"), ("PERLE-MCR-MGT-MIB", "mcrPsmuModelDesc"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuSerialNumber"), ("PERLE-MCR-MGT-MIB", "mcrPsmuBootloaderVersion"), ("PERLE-MCR-MGT-MIB", "mcrPsmuFirmwareVersion"), ("PERLE-MCR-MGT-MIB", "mcrPsmuOutStandWarnAlarms"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuStatus"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuVoltage"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuPowerUsage"), ("PERLE-MCR-MGT-MIB", "mcrPsmuFanStatus"), ("PERLE-MCR-MGT-MIB", "mcrPsmuFanSpeed"), ("PERLE-MCR-MGT-MIB", "mcrUserDefinedModuleName"), ("PERLE-MCR-MGT-MIB", "mcrModuleModelName"), ("PERLE-MCR-MGT-MIB", "mcrUnManagedModuleSlotName"), ("PERLE-MCR-MGT-MIB", "mcrModuleSerialNumber"), ("PERLE-MCR-MGT-MIB", "mcrModuleBootloaderVersion"), ("PERLE-MCR-MGT-MIB", "mcrModuleFirmwareVersion"), ("PERLE-MCR-MGT-MIB", "mcrModuleoOutStandWarnAlarms"), ("PERLE-MCR-MGT-MIB", "mcrModuleDiagStatus"), ("PERLE-MCR-MGT-MIB", "mcrModuleTypeInserted"), ("PERLE-MCR-MGT-MIB", "mcrMediaConfigBackupRestore"), ("PERLE-MCR-MGT-MIB", "mcrMediaBackedupModuleType"), ("PERLE-MCR-MGT-MIB", "mcrChassisPwrUpSlotPwrState"), ("PERLE-MCR-MGT-MIB", "mcrCurrentPowerState"), ("PERLE-MCR-MGT-MIB", "mcrPowerScheduleEnable"), ("PERLE-MCR-MGT-MIB", "mcrModuleReset"), ("PERLE-MCR-MGT-MIB", "mcrModuleResetToFactory"), ("PERLE-MCR-MGT-MIB", "mcrModuleModelDesc"), ("PERLE-MCR-MGT-MIB", "alarmWarnSeverity"), ("PERLE-MCR-MGT-MIB", "alarmWarnType"), ("PERLE-MCR-MGT-MIB", "alarmWarnFlags"), ("PERLE-MCR-MGT-MIB", "alarmWarnChassisNum"), ("PERLE-MCR-MGT-MIB", "alarmWarnDeviceNum"), ("PERLE-MCR-MGT-MIB", "alarmWarnTimeStamp"), ("PERLE-MCR-MGT-MIB", "alarmWarnMessage"), ("PERLE-MCR-MGT-MIB", "alarmWarnPortNum"), ("PERLE-MCR-MGT-MIB", "moduleModel"), ("PERLE-MCR-MGT-MIB", "portName"), ("PERLE-MCR-MGT-MIB", "portEnable"), ("PERLE-MCR-MGT-MIB", "portType"), ("PERLE-MCR-MGT-MIB", "portLinkStatus"), ("PERLE-MCR-MGT-MIB", "portConnType"), ("PERLE-MCR-MGT-MIB", "portAutoNegState"), ("PERLE-MCR-MGT-MIB", "portSpeed"), ("PERLE-MCR-MGT-MIB", "portDuplex"), ("PERLE-MCR-MGT-MIB", "portPause"), ("PERLE-MCR-MGT-MIB", "portRemoteStatus"), ("PERLE-MCR-MGT-MIB", "portMediaType"), ("PERLE-MCR-MGT-MIB", "portPhysicalProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mcrMGTMIBChassisGroup = mcrMGTMIBChassisGroup.setStatus('current')
if mibBuilder.loadTexts: mcrMGTMIBChassisGroup.setDescription('The group of objects for identifying and determining the configuration and current timeliness values of the Perle Managed Media Converters chassis.')
mcrMGTMIBMediaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 2, 2, 2))
for _mcrMGTMIBMediaGroup_obj in [[("PERLE-MCR-MGT-MIB", "cm1000Modelname"), ("PERLE-MCR-MGT-MIB", "cm1000ModelDesc"), ("PERLE-MCR-MGT-MIB", "cm1000HwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm1000HwSw1FiberAutoNeg"), ("PERLE-MCR-MGT-MIB", "cm1000HwSw2LinkMode"), ("PERLE-MCR-MGT-MIB", "cm1000HwSw3FiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm1000HwSw4Duplex"), ("PERLE-MCR-MGT-MIB", "cm1000HwSw5Pause"), ("PERLE-MCR-MGT-MIB", "cm1000HwSw6Loopback"), ("PERLE-MCR-MGT-MIB", "cm1000FiberLinkStatus"), ("PERLE-MCR-MGT-MIB", "cm1000FiberConnType"), ("PERLE-MCR-MGT-MIB", "cm1000FiberAutoNegState"), ("PERLE-MCR-MGT-MIB", "cm1000FiberSpeed"), ("PERLE-MCR-MGT-MIB", "cm1000FiberDuplex"), ("PERLE-MCR-MGT-MIB", "cm1000FiberPauseEnh"), ("PERLE-MCR-MGT-MIB", "cm1000FiberLPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm1000FiberReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm1000FiberLoopBack"), ("PERLE-MCR-MGT-MIB", "cm1000CopperLinkStatus"), ("PERLE-MCR-MGT-MIB", "cm1000CopperConnType"), ("PERLE-MCR-MGT-MIB", "cm1000CopperAutoNegState"), ("PERLE-MCR-MGT-MIB", "cm1000CopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm1000CopperDuplex"), ("PERLE-MCR-MGT-MIB", "cm1000CopperCrossOver"), ("PERLE-MCR-MGT-MIB", "cm1000CopperPauseEnh"), ("PERLE-MCR-MGT-MIB", "cm1000CopperLPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigFiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigJumboPackets"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigFiberPortName"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigFiberPortEnable"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigFiberAutoNeg"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigCopperPortName"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigCopperPortEnable"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigCopperDuplex"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigCopperPauseEnh"), ("PERLE-MCR-MGT-MIB", "cm1000ConfigCopperLowPower"), ("PERLE-MCR-MGT-MIB", "cm1000LedPWR"), ("PERLE-MCR-MGT-MIB", "cm1000LedLKF"), ("PERLE-MCR-MGT-MIB", "cm1000LedLKC"), ("PERLE-MCR-MGT-MIB", "cm1000mmModelname"), ("PERLE-MCR-MGT-MIB", "cm1000mmModelDesc"), ("PERLE-MCR-MGT-MIB", "cm1000mmHwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm1000mmHwSw1FiberAutoNeg"), ("PERLE-MCR-MGT-MIB", "cm1000mmHwSw2LinkMode"), ("PERLE-MCR-MGT-MIB", "cm1000mmHwSw3FiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm1000mmHwSw4Loopback1"), ("PERLE-MCR-MGT-MIB", "cm1000mmHwSw5Loopback2"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber1LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber1ConnType"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber1AutoNegState"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber1Speed"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber1Duplex"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber1PauseEnh"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber1LPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber1ReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber2LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber2ConnType"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber2AutoNegState"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber2Speed"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber2Duplex"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber2PauseEnh"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber2LPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiber2ReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm1000mmFiberLoopBack"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigFiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigJumboPackets"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigFiberAutoNeg"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigFiber1PortName"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigFiber1PortEnable"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigFiber2PortName"), ("PERLE-MCR-MGT-MIB", "cm1000mmConfigFiber2PortEnable"), ("PERLE-MCR-MGT-MIB", "cm1000mmLedPWR"), ("PERLE-MCR-MGT-MIB", "cm1000mmLedLK1"), ("PERLE-MCR-MGT-MIB", "cm1000mmLedLK2"), ("PERLE-MCR-MGT-MIB", "cm100ModelName"), ("PERLE-MCR-MGT-MIB", "cm100ModelDesc"), ("PERLE-MCR-MGT-MIB", "cm100HwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm100HwJmp6AutoMDI"), ("PERLE-MCR-MGT-MIB", "cm100HwSw1AutoNegotiation"), ("PERLE-MCR-MGT-MIB", "cm100HwSw2LinkMode"), ("PERLE-MCR-MGT-MIB", "cm100HwSw3FarEndFault"), ("PERLE-MCR-MGT-MIB", "cm100HwSw5Pause"), ("PERLE-MCR-MGT-MIB", "cm100HwSw6Loopback"), ("PERLE-MCR-MGT-MIB", "cm100FiberLinkStatus"), ("PERLE-MCR-MGT-MIB", "cm100FiberConnType"), ("PERLE-MCR-MGT-MIB", "cm100FiberSpeed"), ("PERLE-MCR-MGT-MIB", "cm100FiberFarEndFault"), ("PERLE-MCR-MGT-MIB", "cm100FiberReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm100FiberLoopBack"), ("PERLE-MCR-MGT-MIB", "cm100CopperLinkStatus"), ("PERLE-MCR-MGT-MIB", "cm100CopperConnType"), ("PERLE-MCR-MGT-MIB", "cm100CopperAutoNegState"), ("PERLE-MCR-MGT-MIB", "cm100CopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm100CopperDuplex"), ("PERLE-MCR-MGT-MIB", "cm100CopperCrossOver"), ("PERLE-MCR-MGT-MIB", "cm100CopperPause"), ("PERLE-MCR-MGT-MIB", "cm100CopperLPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm100ConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm100ConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm100ConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm100ConfigFiberFarEndFault"), ("PERLE-MCR-MGT-MIB", "cm100ConfigFiberPortName"), ("PERLE-MCR-MGT-MIB", "cm100ConfigFiberPortEnable"), ("PERLE-MCR-MGT-MIB", "cm100ConfigCopperPortName"), ("PERLE-MCR-MGT-MIB", "cm100ConfigCopperPortEnable"), ("PERLE-MCR-MGT-MIB", "cm100ConfigCopperAutoNegotiation"), ("PERLE-MCR-MGT-MIB", "cm100ConfigCopperCrossOver"), ("PERLE-MCR-MGT-MIB", "cm100ConfigCopperPause"), ("PERLE-MCR-MGT-MIB", "cm100LedPWR"), ("PERLE-MCR-MGT-MIB", "cm100LedLKC"), ("PERLE-MCR-MGT-MIB", "cm100LedLKF"), ("PERLE-MCR-MGT-MIB", "cm100mmModelName"), ("PERLE-MCR-MGT-MIB", "cm100mmModelDesc"), ("PERLE-MCR-MGT-MIB", "cm100mmHwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm100mmHwSw1LinkPassthrough"), ("PERLE-MCR-MGT-MIB", "cm100mmHwSw2FarEndFault"), ("PERLE-MCR-MGT-MIB", "cm100mmHwSw3Loopback1"), ("PERLE-MCR-MGT-MIB", "cm100mmHwSw4Loopback2"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber1LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber1ConnType"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber1Speed"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber1FarEndFault"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber1ReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber2LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber2ConnType"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber2Speed"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber2FarEndFault"), ("PERLE-MCR-MGT-MIB", "cm100mmFiber2ReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm100mmFiberLoopBack"), ("PERLE-MCR-MGT-MIB", "cm100mmConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm100mmConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm100mmConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm100mmConfigFiberFarEndFault"), ("PERLE-MCR-MGT-MIB", "cm100mmConfigFiber1PortName"), ("PERLE-MCR-MGT-MIB", "cm100mmConfigFiber1PortEnable"), ("PERLE-MCR-MGT-MIB", "cm100mmConfigFiber2PortName"), ("PERLE-MCR-MGT-MIB", "cm100mmConfigFiber2PortEnable"), ("PERLE-MCR-MGT-MIB", "cm100mmLedPWR"), ("PERLE-MCR-MGT-MIB", "cm100mmLedLK1"), ("PERLE-MCR-MGT-MIB", "cm100mmLedLK2"), ("PERLE-MCR-MGT-MIB", "cm1110ModelName"), ("PERLE-MCR-MGT-MIB", "cm1110ModelDesc"), ("PERLE-MCR-MGT-MIB", "cm1110HwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm1110HwJmp6AutoMDIX"), ("PERLE-MCR-MGT-MIB", "cm1110HwSw1TpAutoNegotiation"), ("PERLE-MCR-MGT-MIB", "cm1110HwSw2LinkMode"), ("PERLE-MCR-MGT-MIB", "cm1110HwSw3FiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm1110HwSw4TpDuplex"), ("PERLE-MCR-MGT-MIB", "cm1110HwSw5TpSpeed"), ("PERLE-MCR-MGT-MIB", "cm1110HwSw6FiberAutoNegotiation"), ("PERLE-MCR-MGT-MIB", "cm1110HwSw6FiberSfp100Duplex"), ("PERLE-MCR-MGT-MIB", "cm1110HwSw7Loopback"), ("PERLE-MCR-MGT-MIB", "cm1110FiberLinkStatus"), ("PERLE-MCR-MGT-MIB", "cm1110FiberConnType"), ("PERLE-MCR-MGT-MIB", "cm1110FiberAutoNegState"), ("PERLE-MCR-MGT-MIB", "cm1110FiberSpeed"), ("PERLE-MCR-MGT-MIB", "cm1110FiberDuplex"), ("PERLE-MCR-MGT-MIB", "cm1110FiberPauseEnh"), ("PERLE-MCR-MGT-MIB", "cm1110FiberLPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm1110FiberSfp100FarEndFault"), ("PERLE-MCR-MGT-MIB", "cm1110FiberReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm1110FiberLoopBack"), ("PERLE-MCR-MGT-MIB", "cm1110CopperLinkStatus"), ("PERLE-MCR-MGT-MIB", "cm1110CopperConnType"), ("PERLE-MCR-MGT-MIB", "cm1110CopperAutoNegState"), ("PERLE-MCR-MGT-MIB", "cm1110CopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm1110CopperDuplex"), ("PERLE-MCR-MGT-MIB", "cm1110CopperCrossOver"), ("PERLE-MCR-MGT-MIB", "cm1110CopperPauseEnh"), ("PERLE-MCR-MGT-MIB", "cm1110CopperLPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm1110CopperAutoSpeedDownshift"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigMaxPacketsSize"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPortName"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPortEnable"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberAutoNegotiation"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberSfp100duplex"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPortName"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPortEnable"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperAutoNegotiation"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperAutoNegAdv10HDX"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperAutoNegAdv10FDX"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperAutoNegAdv100HDX"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperAutoNegAdv100FDX"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperAutoNegAdv1000FDX"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperDuplex"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperCrossOver"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPauseEnh"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperAutoSpeedDownshift"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopper10BaseTDistance"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigUnidirectionalEthernet"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigPriorityToEgressQueueMap0"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigPriorityToEgressQueueMap1"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigPriorityToEgressQueueMap2"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigPriorityToEgressQueueMap3"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigPriorityToEgressQueueMap4"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigPriorityToEgressQueueMap5"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigPriorityToEgressQueueMap6"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigPriorityToEgressQueueMap7"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopper8021pPriority"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperIpTosPriority"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityPrecedence"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperCongestionPolicy"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityMap0"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityMap1"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityMap2"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityMap3"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityMap4"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityMap5"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityMap6"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperPriorityMap7"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperIngressLimit"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperEgressLimit"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperDiscardTaggedFrames"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperDiscardUntaggedFrames"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperDefaultVlanId"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperDefaultPriority"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperVlanTaggingAction"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperFilterUnknownMulticast"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigCopperFilterUnknownUnicast"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiber8021pPriority"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberIpTosPriority"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityPrecedence"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberCongestionPolicy"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityMap0"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityMap1"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityMap2"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityMap3"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityMap4"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityMap5"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityMap6"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberPriorityMap7"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberIngressLimit"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberEgressLimit"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberDiscardTaggedFrames"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberDiscardUntaggedFrames"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberDefaultVlanId"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberDefaultPriority"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberVlanTaggingAction"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberFilterUnknownMulticast"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberFilterUnknownUnicast"), ("PERLE-MCR-MGT-MIB", "cm1110ConfigFiberSgmiiInterface"), ("PERLE-MCR-MGT-MIB", "cm1110LedPWR"), ("PERLE-MCR-MGT-MIB", "cm1110LedFDF"), ("PERLE-MCR-MGT-MIB", "cm1110LedLKF")], [("PERLE-MCR-MGT-MIB", "cm1110LedCopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm1110LedFDC"), ("PERLE-MCR-MGT-MIB", "cm1110LedLKC"), ("PERLE-MCR-MGT-MIB", "cm1110PortInDiscards"), ("PERLE-MCR-MGT-MIB", "cm1110PortInFiltered"), ("PERLE-MCR-MGT-MIB", "cm1110PortInGoodOctets"), ("PERLE-MCR-MGT-MIB", "cm1110PortHCInGoodOctets"), ("PERLE-MCR-MGT-MIB", "cm1110PortInBadOctets"), ("PERLE-MCR-MGT-MIB", "cm1110PortInUnicasts"), ("PERLE-MCR-MGT-MIB", "cm1110PortInBroadcasts"), ("PERLE-MCR-MGT-MIB", "cm1110PortInMulticasts"), ("PERLE-MCR-MGT-MIB", "cm1110PortInPauses"), ("PERLE-MCR-MGT-MIB", "cm1110PortInUnderSizes"), ("PERLE-MCR-MGT-MIB", "cm1110PortInFragments"), ("PERLE-MCR-MGT-MIB", "cm1110PortInOversizes"), ("PERLE-MCR-MGT-MIB", "cm1110PortInJabbers"), ("PERLE-MCR-MGT-MIB", "cm1110PortInRxErrs"), ("PERLE-MCR-MGT-MIB", "cm1110PortInFcsErrs"), ("PERLE-MCR-MGT-MIB", "cm1110PortPkts64Octets"), ("PERLE-MCR-MGT-MIB", "cm1110PortPkts65to127Octets"), ("PERLE-MCR-MGT-MIB", "cm1110PortPkts128to255Octets"), ("PERLE-MCR-MGT-MIB", "cm1110PortPkts256to511Octets"), ("PERLE-MCR-MGT-MIB", "cm1110PortPkts512to1023Octets"), ("PERLE-MCR-MGT-MIB", "cm1110PortPkts1024toMaxOctets"), ("PERLE-MCR-MGT-MIB", "cm1110PortOutOctets"), ("PERLE-MCR-MGT-MIB", "cm1110PortHCOutOctets"), ("PERLE-MCR-MGT-MIB", "cm1110PortOutFiltered"), ("PERLE-MCR-MGT-MIB", "cm1110PortOutUnicasts"), ("PERLE-MCR-MGT-MIB", "cm1110PortOutBroadcasts"), ("PERLE-MCR-MGT-MIB", "cm1110PortOutMulticasts"), ("PERLE-MCR-MGT-MIB", "cm1110PortOutPauses"), ("PERLE-MCR-MGT-MIB", "cm1110PortDeferreds"), ("PERLE-MCR-MGT-MIB", "cm1110PortCollisions"), ("PERLE-MCR-MGT-MIB", "cm1110PortSingles"), ("PERLE-MCR-MGT-MIB", "cm1110PortMultiples"), ("PERLE-MCR-MGT-MIB", "cm1110PortExcessives"), ("PERLE-MCR-MGT-MIB", "cm1110PortLates"), ("PERLE-MCR-MGT-MIB", "cm1110PortOutFcsErrs"), ("PERLE-MCR-MGT-MIB", "cm1110PortResetCounters"), ("PERLE-MCR-MGT-MIB", "cm1110AvctStart"), ("PERLE-MCR-MGT-MIB", "cm1110AvctStatus"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair1Results"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair1Amplitude"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair1Distance"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair2Results"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair2Amplitude"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair2Distance"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair3Results"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair3Amplitude"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair3Distance"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair4Results"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair4Amplitude"), ("PERLE-MCR-MGT-MIB", "cm1110AvctTxRxPair4Distance"), ("PERLE-MCR-MGT-MIB", "cm110Modelname"), ("PERLE-MCR-MGT-MIB", "cm110ModelDesc"), ("PERLE-MCR-MGT-MIB", "cm110HwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm110HwJmp6AutoMDIX"), ("PERLE-MCR-MGT-MIB", "cm110HwSw1TpAutoNegotiation"), ("PERLE-MCR-MGT-MIB", "cm110HwSw2LinkMode"), ("PERLE-MCR-MGT-MIB", "cm110HwSw3FarEndFault"), ("PERLE-MCR-MGT-MIB", "cm110HwSw4TpDuplex"), ("PERLE-MCR-MGT-MIB", "cm110HwSw5TpSpeed"), ("PERLE-MCR-MGT-MIB", "cm110HwSw6FiberDuplex"), ("PERLE-MCR-MGT-MIB", "cm110HwSw7Loopback"), ("PERLE-MCR-MGT-MIB", "cm110FiberLinkStatus"), ("PERLE-MCR-MGT-MIB", "cm110FiberConnType"), ("PERLE-MCR-MGT-MIB", "cm110FiberSpeed"), ("PERLE-MCR-MGT-MIB", "cm110FiberFarEndFault"), ("PERLE-MCR-MGT-MIB", "cm110FiberReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm110FiberLoopBack"), ("PERLE-MCR-MGT-MIB", "cm110CopperLinkStatus"), ("PERLE-MCR-MGT-MIB", "cm110CopperConnType"), ("PERLE-MCR-MGT-MIB", "cm110CopperAutoNegState"), ("PERLE-MCR-MGT-MIB", "cm110CopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm110CopperDuplex"), ("PERLE-MCR-MGT-MIB", "cm110CopperCrossOver"), ("PERLE-MCR-MGT-MIB", "cm110CopperPause"), ("PERLE-MCR-MGT-MIB", "cm110CopperLPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm110ConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm110ConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm110ConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberFarEndFault"), ("PERLE-MCR-MGT-MIB", "cm110ConfigMaxPacketSize"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPortName"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPortEnable"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberDuplex"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPortName"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPortEnable"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperAutoNegotiation"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperAutoNegAdv10HDX"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperAutoNegAdv10FDX"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperAutoNegAdv100HDX"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperAutoNegAdv100FDX"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperDuplex"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperCrossOver"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPause"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperExtendDistance"), ("PERLE-MCR-MGT-MIB", "cm110ConfigUnidirectionalEthernet"), ("PERLE-MCR-MGT-MIB", "cm110ConfigPriorityToEgressQueueMap0"), ("PERLE-MCR-MGT-MIB", "cm110ConfigPriorityToEgressQueueMap1"), ("PERLE-MCR-MGT-MIB", "cm110ConfigPriorityToEgressQueueMap2"), ("PERLE-MCR-MGT-MIB", "cm110ConfigPriorityToEgressQueueMap3"), ("PERLE-MCR-MGT-MIB", "cm110ConfigPriorityToEgressQueueMap4"), ("PERLE-MCR-MGT-MIB", "cm110ConfigPriorityToEgressQueueMap5"), ("PERLE-MCR-MGT-MIB", "cm110ConfigPriorityToEgressQueueMap6"), ("PERLE-MCR-MGT-MIB", "cm110ConfigPriorityToEgressQueueMap7"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopper8021pPriority"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperIpTosPriority"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityPrecedence"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperCongestionPolicy"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityMap0"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityMap1"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityMap2"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityMap3"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityMap4"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityMap5"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityMap6"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperPriorityMap7"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperIngressLimit"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperEgressLimit"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperDiscardTaggedFrames"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperDiscardUntaggedFrames"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperDefaultVlanId"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperDefaultPriority"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperVlanTaggingAction"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperFilterUnknownMulticast"), ("PERLE-MCR-MGT-MIB", "cm110ConfigCopperFilterUnknownUnicast"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiber8021pPriority"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberIpTosPriority"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityPrecedence"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberCongestionPolicy"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityMap0"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityMap1"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityMap2"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityMap3"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityMap4"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityMap5"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityMap6"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberPriorityMap7"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberIngressLimit"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberEgressLimit"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberDiscardTaggedFrames"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberDiscardUntaggedFrames"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberDefaultVlanId"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberDefaultPriority"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberVlanTaggingAction"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberFilterUnknownMulticast"), ("PERLE-MCR-MGT-MIB", "cm110ConfigFiberFilterUnknownUnicast"), ("PERLE-MCR-MGT-MIB", "cm110LedPWR"), ("PERLE-MCR-MGT-MIB", "cm110LedFDF"), ("PERLE-MCR-MGT-MIB", "cm110LedLKF"), ("PERLE-MCR-MGT-MIB", "cm110LedCopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm110LedFDC"), ("PERLE-MCR-MGT-MIB", "cm110LedLKC"), ("PERLE-MCR-MGT-MIB", "cm110PortRxErrors"), ("PERLE-MCR-MGT-MIB", "cm110PortTxCollisions"), ("PERLE-MCR-MGT-MIB", "cm110PortInFiltered"), ("PERLE-MCR-MGT-MIB", "cm110PortInGoodOctets"), ("PERLE-MCR-MGT-MIB", "cm110PortInBadOctets"), ("PERLE-MCR-MGT-MIB", "cm110PortInUnicasts"), ("PERLE-MCR-MGT-MIB", "cm110PortInBroadcasts"), ("PERLE-MCR-MGT-MIB", "cm110PortInMulticasts"), ("PERLE-MCR-MGT-MIB", "cm110PortInPauses"), ("PERLE-MCR-MGT-MIB", "cm110PortInUnderSizes"), ("PERLE-MCR-MGT-MIB", "cm110PortInFragments"), ("PERLE-MCR-MGT-MIB", "cm110PortInOversizes"), ("PERLE-MCR-MGT-MIB", "cm110PortInJabbers"), ("PERLE-MCR-MGT-MIB", "cm110PortInMACRcvErrs"), ("PERLE-MCR-MGT-MIB", "cm110PortInFcsErrs"), ("PERLE-MCR-MGT-MIB", "cm110PortPkts64Octets"), ("PERLE-MCR-MGT-MIB", "cm110PortPkts65to127Octets"), ("PERLE-MCR-MGT-MIB", "cm110PortPkts128to255Octets"), ("PERLE-MCR-MGT-MIB", "cm110PortPkts256to511Octets"), ("PERLE-MCR-MGT-MIB", "cm110PortPkts512to1023Octets"), ("PERLE-MCR-MGT-MIB", "cm110PortPkts1024toMaxOctets"), ("PERLE-MCR-MGT-MIB", "cm110PortOutOctets"), ("PERLE-MCR-MGT-MIB", "cm110PortOutUnicasts"), ("PERLE-MCR-MGT-MIB", "cm110PortOutBroadcasts"), ("PERLE-MCR-MGT-MIB", "cm110PortOutMulticasts"), ("PERLE-MCR-MGT-MIB", "cm110PortOutPauses"), ("PERLE-MCR-MGT-MIB", "cm110PortExcessives"), ("PERLE-MCR-MGT-MIB", "cm110PortCollisions"), ("PERLE-MCR-MGT-MIB", "cm110PortDeferreds"), ("PERLE-MCR-MGT-MIB", "cm110PortSingles"), ("PERLE-MCR-MGT-MIB", "cm110PortMultiples"), ("PERLE-MCR-MGT-MIB", "cm110PortOutFcsErrs"), ("PERLE-MCR-MGT-MIB", "cm110PortLates"), ("PERLE-MCR-MGT-MIB", "cm110PortResetCounters"), ("PERLE-MCR-MGT-MIB", "cm110VctStart"), ("PERLE-MCR-MGT-MIB", "cm110VctStatus"), ("PERLE-MCR-MGT-MIB", "cm110VctTxPairResults"), ("PERLE-MCR-MGT-MIB", "cm110VctTxPairAmplitude"), ("PERLE-MCR-MGT-MIB", "cm110VctTxPairDistance"), ("PERLE-MCR-MGT-MIB", "cm110VctRxPairResults"), ("PERLE-MCR-MGT-MIB", "cm110VctRxPairAmplitude"), ("PERLE-MCR-MGT-MIB", "cm110VctRxPairDistance"), ("PERLE-MCR-MGT-MIB", "mcrMgtModelName"), ("PERLE-MCR-MGT-MIB", "mcrMgtModelDesc"), ("PERLE-MCR-MGT-MIB", "mcrMgtFailSafeBootLoaderVer"), ("PERLE-MCR-MGT-MIB", "mcrMgtUpTime"), ("PERLE-MCR-MGT-MIB", "mcrMgtConsoleDSR"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigStatus"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigEthSpeedDuplex"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigEthCrossover"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigConsolePortEnabled"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigConsoleSpeed"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigConsoleDataBits"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigConsoleParity"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigConsoleStopBits"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigConsoleFlowControl"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfigConsoleMonitorDSR"), ("PERLE-MCR-MGT-MIB", "mcrMgtLedPWR"), ("PERLE-MCR-MGT-MIB", "mcrMgtLedALM"), ("PERLE-MCR-MGT-MIB", "mcrMgtLedLKC"), ("PERLE-MCR-MGT-MIB", "mcrMgtLedCopperSpeed"), ("PERLE-MCR-MGT-MIB", "cm10gModelname"), ("PERLE-MCR-MGT-MIB", "cm10gModelDesc"), ("PERLE-MCR-MGT-MIB", "cm10gHwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm10gHwSw1OperationMode"), ("PERLE-MCR-MGT-MIB", "cm10gHwSw2LinkMode"), ("PERLE-MCR-MGT-MIB", "cm10gHwSw3FiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm10gHwSw4Port1EdcMode"), ("PERLE-MCR-MGT-MIB", "cm10gHwSw5Port2EdcMode"), ("PERLE-MCR-MGT-MIB", "cm10gPort1LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm10gPort1ConnType"), ("PERLE-MCR-MGT-MIB", "cm10gPort1AutoNegState"), ("PERLE-MCR-MGT-MIB", "cm10gPort1Speed"), ("PERLE-MCR-MGT-MIB", "cm10gPort1Duplex"), ("PERLE-MCR-MGT-MIB", "cm10gPort1PauseEnh"), ("PERLE-MCR-MGT-MIB", "cm10gPort1ReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm10gPort2LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm10gPort2ConnType"), ("PERLE-MCR-MGT-MIB", "cm10gPort2AutoNegState"), ("PERLE-MCR-MGT-MIB", "cm10gPort2Speed"), ("PERLE-MCR-MGT-MIB", "cm10gPort2Duplex"), ("PERLE-MCR-MGT-MIB", "cm10gPort2PauseEnh"), ("PERLE-MCR-MGT-MIB", "cm10gPort2ReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm10gPortLoopBack"), ("PERLE-MCR-MGT-MIB", "cm10gPortTestMode"), ("PERLE-MCR-MGT-MIB", "cm10gConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm10gConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm10gConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm10gConfigFiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm10gConfigFiberAutoNeg"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1Name"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1Enable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1EdcMode"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1FecEnable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1FecAmplitude"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1FecPhase"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1WavelengthEnable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1WavelengthValue"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1ChannelEnable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1ChannelNumber")], [("PERLE-MCR-MGT-MIB", "cm10gConfigPort1TxDitherEnable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort1TxDitherValue"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2Name"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2Enable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2EdcMode"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2FecEnable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2FecAmplitude"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2FecPhase"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2WavelengthEnable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2WavelengthValue"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2ChannelEnable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2ChannelNumber"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2TxDitherEnable"), ("PERLE-MCR-MGT-MIB", "cm10gConfigPort2TxDitherValue"), ("PERLE-MCR-MGT-MIB", "cm10gLedPWR"), ("PERLE-MCR-MGT-MIB", "cm10gLedLK1"), ("PERLE-MCR-MGT-MIB", "cm10gLedLK2"), ("PERLE-MCR-MGT-MIB", "exCMModelName"), ("PERLE-MCR-MGT-MIB", "exCMModelDesc"), ("PERLE-MCR-MGT-MIB", "exCMHwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "exCMHwSw1AutoLocalRemote"), ("PERLE-MCR-MGT-MIB", "exCMHwSw2Rate"), ("PERLE-MCR-MGT-MIB", "exCMHwSw3SymmetricAsymmetric"), ("PERLE-MCR-MGT-MIB", "exCMHwSw4SnrRatio"), ("PERLE-MCR-MGT-MIB", "exCMHwSw5Loopback"), ("PERLE-MCR-MGT-MIB", "exCMHwSw6EthAutoNeg"), ("PERLE-MCR-MGT-MIB", "exCMHwSw7EthSpeed"), ("PERLE-MCR-MGT-MIB", "exCMHwSw8EthDuplex"), ("PERLE-MCR-MGT-MIB", "exCMHwSw9LinkMode"), ("PERLE-MCR-MGT-MIB", "exCMHwSw10InterlinkFaultFeedback"), ("PERLE-MCR-MGT-MIB", "exCMVdslLinkStatus"), ("PERLE-MCR-MGT-MIB", "exCMVdslConnType"), ("PERLE-MCR-MGT-MIB", "exCMVdslLoopBack"), ("PERLE-MCR-MGT-MIB", "exCMVdslRole"), ("PERLE-MCR-MGT-MIB", "exCMVdslProfile"), ("PERLE-MCR-MGT-MIB", "exCMVdslBitswapping"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusAttainableDataRateUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusAttainableDataRateDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualDataRateUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualDataRateDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusPrevDataRateUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusPrevDataRateDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrUs0"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrUs1"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrDs1"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrUs2"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrDs2"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrUs3"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrDs3"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrUs4"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSnrDs4"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationUs0"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationUs1"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationDs1"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationUs2"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationDs2"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationUs3"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationDs3"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationUs4"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualSignalAttenuationDs4"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationUs0"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationUs1"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationDs1"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationUs2"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationDs2"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationUs3"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationDs3"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationUs4"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualLineAttenuationDs4"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualInterleaveDelayUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualInterleaveDelayDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualInpUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualInpDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualInterleavingDepthUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualInterleavingDepthDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualInterleavingBlockUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualInterleavingBlockDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualTransmitPowerUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusActualTransmitPowerDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusMaxDataRateUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusMaxDataRateDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusMinDataRateUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusMinDataRateDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusTargetSnrUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusTargetSnrDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusMaxInterleaveDelayUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusMaxInterleaveDelayDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusMinInpUp"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatusMinInpDown"), ("PERLE-MCR-MGT-MIB", "exCMVdslRemoteLoopback"), ("PERLE-MCR-MGT-MIB", "exCMVdslRemoteReset"), ("PERLE-MCR-MGT-MIB", "exCMEthernetLinkStatus"), ("PERLE-MCR-MGT-MIB", "exCMEthernetConnType"), ("PERLE-MCR-MGT-MIB", "exCMEthernetAutoNegState"), ("PERLE-MCR-MGT-MIB", "exCMEthernetSpeed"), ("PERLE-MCR-MGT-MIB", "exCMEthernetDuplex"), ("PERLE-MCR-MGT-MIB", "exCMEthernetCrossOver"), ("PERLE-MCR-MGT-MIB", "exCMEthernetPauseEnh"), ("PERLE-MCR-MGT-MIB", "exCMEthernetLPRFStatus"), ("PERLE-MCR-MGT-MIB", "exCMEthernetAutoSpeedDownshift"), ("PERLE-MCR-MGT-MIB", "exCMEthernetMDI"), ("PERLE-MCR-MGT-MIB", "exCMVdslFirmwareVersion"), ("PERLE-MCR-MGT-MIB", "exCMVdslFirmwareDate"), ("PERLE-MCR-MGT-MIB", "exCMVdslFirmwareDateString"), ("PERLE-MCR-MGT-MIB", "exCMConfigStatus"), ("PERLE-MCR-MGT-MIB", "exCMConfigModuleName"), ("PERLE-MCR-MGT-MIB", "exCMConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "exCMConfigInterlinkFaultFeedback"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPortName"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPortEnable"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslProfileMode"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslRole"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslRate"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslSymmetry"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslProfile"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslOverrideProfile"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslSignalToNoiseRatioUp"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslMinDataRateUp"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslMaxDataRateUp"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslMaxInterleaveDelayUp"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslMinInpUp"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslSignalToNoiseRatioDown"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslMinDataRateDown"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslMaxDataRateDown"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslMaxInterleaveDelayDown"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslMinInpDown"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslBitswapping"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslLowBandwidthAlarmUp"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslLowBandwidthAlarmDown"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPortName"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPortEnable"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetAutoNegotiation"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetAutoNegAdv10HDX"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetAutoNegAdv10FDX"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetAutoNegAdv100HDX"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetAutoNegAdv100FDX"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetAutoNegAdv1000FDX"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetSpeed"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetDuplex"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetCrossOver"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPauseEnh"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetAutoSpeedDownshift"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernet10BaseTDistance"), ("PERLE-MCR-MGT-MIB", "exCMConfigUnidirectionalEthernet"), ("PERLE-MCR-MGT-MIB", "exCMConfigPriorityToEgressQueueMap0"), ("PERLE-MCR-MGT-MIB", "exCMConfigPriorityToEgressQueueMap1"), ("PERLE-MCR-MGT-MIB", "exCMConfigPriorityToEgressQueueMap2"), ("PERLE-MCR-MGT-MIB", "exCMConfigPriorityToEgressQueueMap3"), ("PERLE-MCR-MGT-MIB", "exCMConfigPriorityToEgressQueueMap4"), ("PERLE-MCR-MGT-MIB", "exCMConfigPriorityToEgressQueueMap5"), ("PERLE-MCR-MGT-MIB", "exCMConfigPriorityToEgressQueueMap6"), ("PERLE-MCR-MGT-MIB", "exCMConfigPriorityToEgressQueueMap7"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernet8021pPriority"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetIpTosPriority"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityPrecedence"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetCongestionPolicy"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityMap0"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityMap1"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityMap2"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityMap3"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityMap4"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityMap5"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityMap6"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetPriorityMap7"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetIngressLimit"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetEgressLimit"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetDiscardTaggedFrames"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetDiscardUntaggedFrames"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetDefaultVlanId"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetDefaultPriority"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetVlanTaggingAction"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetFilterUnknownMulticast"), ("PERLE-MCR-MGT-MIB", "exCMConfigEthernetFilterUnknownUnicast"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdsl8021pPriority"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslIpTosPriority"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityPrecedence"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslCongestionPolicy"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityMap0"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityMap1"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityMap2"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityMap3"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityMap4"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityMap5"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityMap6"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslPriorityMap7"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslIngressLimit"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslEgressLimit"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslDiscardTaggedFrames"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslDiscardUntaggedFrames"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslDefaultVlanId"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslDefaultPriority"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslVlanTaggingAction"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslFilterUnknownMulticast"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslFilterUnknownUnicast"), ("PERLE-MCR-MGT-MIB", "exCMConfigVdslFastMode"), ("PERLE-MCR-MGT-MIB", "exCMLedILNK"), ("PERLE-MCR-MGT-MIB", "exCMLedLOC"), ("PERLE-MCR-MGT-MIB", "exCMLedPWR"), ("PERLE-MCR-MGT-MIB", "exCMLedETH"), ("PERLE-MCR-MGT-MIB", "exCMLedRMT"), ("PERLE-MCR-MGT-MIB", "exCMPortInDiscards"), ("PERLE-MCR-MGT-MIB", "exCMPortInFiltered"), ("PERLE-MCR-MGT-MIB", "exCMPortInGoodOctets"), ("PERLE-MCR-MGT-MIB", "exCMPortHCInGoodOctets"), ("PERLE-MCR-MGT-MIB", "exCMPortInBadOctets"), ("PERLE-MCR-MGT-MIB", "exCMPortInUnicasts"), ("PERLE-MCR-MGT-MIB", "exCMPortInBroadcasts"), ("PERLE-MCR-MGT-MIB", "exCMPortInMulticasts"), ("PERLE-MCR-MGT-MIB", "exCMPortInPauses"), ("PERLE-MCR-MGT-MIB", "exCMPortInUnderSizes"), ("PERLE-MCR-MGT-MIB", "exCMPortInFragments"), ("PERLE-MCR-MGT-MIB", "exCMPortInOversizes"), ("PERLE-MCR-MGT-MIB", "exCMPortInJabbers"), ("PERLE-MCR-MGT-MIB", "exCMPortInRxErrs"), ("PERLE-MCR-MGT-MIB", "exCMPortInFcsErrs"), ("PERLE-MCR-MGT-MIB", "exCMPortPkts64Octets"), ("PERLE-MCR-MGT-MIB", "exCMPortPkts65to127Octets"), ("PERLE-MCR-MGT-MIB", "exCMPortPkts128to255Octets"), ("PERLE-MCR-MGT-MIB", "exCMPortPkts256to511Octets"), ("PERLE-MCR-MGT-MIB", "exCMPortPkts512to1023Octets"), ("PERLE-MCR-MGT-MIB", "exCMPortPkts1024toMaxOctets"), ("PERLE-MCR-MGT-MIB", "exCMPortOutOctets"), ("PERLE-MCR-MGT-MIB", "exCMPortHCOutOctets"), ("PERLE-MCR-MGT-MIB", "exCMPortOutFiltered"), ("PERLE-MCR-MGT-MIB", "exCMPortOutUnicasts"), ("PERLE-MCR-MGT-MIB", "exCMPortOutBroadcasts"), ("PERLE-MCR-MGT-MIB", "exCMPortOutMulticasts"), ("PERLE-MCR-MGT-MIB", "exCMPortOutPauses"), ("PERLE-MCR-MGT-MIB", "exCMPortDeferreds"), ("PERLE-MCR-MGT-MIB", "exCMPortCollisions"), ("PERLE-MCR-MGT-MIB", "exCMPortSingles"), ("PERLE-MCR-MGT-MIB", "exCMPortMultiples"), ("PERLE-MCR-MGT-MIB", "exCMPortExcessives"), ("PERLE-MCR-MGT-MIB", "exCMPortLates"), ("PERLE-MCR-MGT-MIB", "exCMPortOutFcsErrs"), ("PERLE-MCR-MGT-MIB", "exCMPortResetCounters"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsTimePeriod"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsFullInitLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsCodeViolationLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsCorrectedLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsFecSecsLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsErroredSecsLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsSeverelyErroredSecsLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsLossOfSignalSecsLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsUnavailableSecsLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsTimeElapsedLocal"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsFullInitRemote"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsCodeViolationRemote"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsCorrectedRemote")], [("PERLE-MCR-MGT-MIB", "exCMVdslStatsFecSecsRemote"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsErroredSecsRemote"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsSeverelyErroredSecsRemote"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsLossOfSignalSecsRemote"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsUnavailableSecsRemote"), ("PERLE-MCR-MGT-MIB", "exCMVdslStatsTimeElapsedRemote"), ("PERLE-MCR-MGT-MIB", "exCMAvctStart"), ("PERLE-MCR-MGT-MIB", "exCMAvctStatus"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair1Results"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair1Amplitude"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair1Distance"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair2Results"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair2Amplitude"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair2Distance"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair3Results"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair3Amplitude"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair3Distance"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair4Results"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair4Amplitude"), ("PERLE-MCR-MGT-MIB", "exCMAvctTxRxPair4Distance"), ("PERLE-MCR-MGT-MIB", "cm10gtModelname"), ("PERLE-MCR-MGT-MIB", "cm10gtModelDesc"), ("PERLE-MCR-MGT-MIB", "cm10gtHwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm10gtHwSw1OperationMode"), ("PERLE-MCR-MGT-MIB", "cm10gtHwSw2LinkMode"), ("PERLE-MCR-MGT-MIB", "cm10gtHwSw3FiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm10gtHwSw4EnergyEfficentEthernet"), ("PERLE-MCR-MGT-MIB", "cm10gtHwSw5Unused"), ("PERLE-MCR-MGT-MIB", "cm10gtPort1LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm10gtPort1ConnType"), ("PERLE-MCR-MGT-MIB", "cm10gtPort1AutoNegState"), ("PERLE-MCR-MGT-MIB", "cm10gtPort1Speed"), ("PERLE-MCR-MGT-MIB", "cm10gtPort1Duplex"), ("PERLE-MCR-MGT-MIB", "cm10gtPort1PauseEnh"), ("PERLE-MCR-MGT-MIB", "cm10gtPort1ReceiveStatus"), ("PERLE-MCR-MGT-MIB", "cm10gtPort1LPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm10gtPort2LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm10gtPort2ConnType"), ("PERLE-MCR-MGT-MIB", "cm10gtPort2AutoNegState"), ("PERLE-MCR-MGT-MIB", "cm10gtPort2Speed"), ("PERLE-MCR-MGT-MIB", "cm10gtPort2Duplex"), ("PERLE-MCR-MGT-MIB", "cm10gtPort2PauseEnh"), ("PERLE-MCR-MGT-MIB", "cm10gtPort2LPRFStatus"), ("PERLE-MCR-MGT-MIB", "cm10gtPortLoopBack"), ("PERLE-MCR-MGT-MIB", "cm10gtPortTestMode"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigFiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigFiberAutoNeg"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1Name"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1Enable"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1FecEnable"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1FecAmplitude"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1FecPhase"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1WavelengthEnable"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1WavelengthValue"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1ChannelEnable"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1ChannelNumber"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1TxDitherEnable"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort1TxDitherValue"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort2Name"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort2Enable"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort2CopperDuplex"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort2CopperPauseEnh"), ("PERLE-MCR-MGT-MIB", "cm10gtConfigPort2CopperEnergyEfficientEthernet"), ("PERLE-MCR-MGT-MIB", "cm10gtLedsSlotIndex"), ("PERLE-MCR-MGT-MIB", "cm10gtLedPWR"), ("PERLE-MCR-MGT-MIB", "cm10gtLedLK1"), ("PERLE-MCR-MGT-MIB", "cm10gtLedLK2"), ("PERLE-MCR-MGT-MIB", "cm4gptModelname"), ("PERLE-MCR-MGT-MIB", "cm4gptModelDesc"), ("PERLE-MCR-MGT-MIB", "cm4gptHwJmp5ConfigMode"), ("PERLE-MCR-MGT-MIB", "cm4gptHwSw1LinkMode"), ("PERLE-MCR-MGT-MIB", "cm4gptHwSw2FiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm4gptHwSw3RateSelect"), ("PERLE-MCR-MGT-MIB", "cm4gptHwSw4Unused"), ("PERLE-MCR-MGT-MIB", "cm4gptPort1LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm4gptPort1ConnType"), ("PERLE-MCR-MGT-MIB", "cm4gptPort2LinkStatus"), ("PERLE-MCR-MGT-MIB", "cm4gptPort2ConnType"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigStatus"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigModuleName"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigLinkMode"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigFiberFaultAlert"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigRateSelect"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigPort1Name"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigPort1Enable"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigPort2Name"), ("PERLE-MCR-MGT-MIB", "cm4gptConfigPort2Enable"), ("PERLE-MCR-MGT-MIB", "cm4gptLedPWR"), ("PERLE-MCR-MGT-MIB", "cm4gptLedLK1"), ("PERLE-MCR-MGT-MIB", "cm4gptLedLK2"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsName"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsMacAddress"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsStatus"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsSpeedDuplex"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsBroadcast"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsDebug"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsLoopback"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsPointtoPoint"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsNoTrailers"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsRunning"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsNoArp"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsPromiscuous"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsRxMulticast"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsMasterLoadBalancer"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsSlaveLoadBalancer"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsMulticast"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsSetMedia"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsAutoMedia"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsDynamic"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsLocalAddress"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsSubnetMask"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsBroadcastAddress"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsMtu"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsTxQLen"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsRxBytes"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsTxBytes"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsRxPackets"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsTxPackets"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsRxErrors"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsTxPktErrors"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsRxDroppedPkts"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsTxDroppedPkts"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsRxOverruns"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsTxOverruns"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsRxFrameErrs"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsTxCarrierErrs"), ("PERLE-MCR-MGT-MIB", "mgtEthStatsCollisions"), ("PERLE-MCR-MGT-MIB", "sfpDmiStatus"), ("PERLE-MCR-MGT-MIB", "sfpDmiConnectorType"), ("PERLE-MCR-MGT-MIB", "sfpDmiNominalBitRate"), ("PERLE-MCR-MGT-MIB", "sfpDmiLinkReach9125"), ("PERLE-MCR-MGT-MIB", "sfpDmiLinkReach50125"), ("PERLE-MCR-MGT-MIB", "sfpDmiLinkReach625125"), ("PERLE-MCR-MGT-MIB", "sfpDmiFiberWaveLength"), ("PERLE-MCR-MGT-MIB", "sfpDmiCurrentTempState"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTemp"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTempWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTempAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTempWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTempAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiCurrentVoltState"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeVolt"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighVoltWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighVoltAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowVoltWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowVoltAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiCurrentTxBiasState"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxBias"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTxBiasWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTxBiasAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTxBiasWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTxBiasAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiCurrentTxPowerState"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeTxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTxPowerWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighTxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTxPowerWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowTxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiCurrentRxPowerState"), ("PERLE-MCR-MGT-MIB", "sfpDmiRealTimeRxPower"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighRxPowerWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiHighRxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowRxPowerWarn"), ("PERLE-MCR-MGT-MIB", "sfpDmiLowRxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "sfpDmiStatus2"), ("PERLE-MCR-MGT-MIB", "sfpDmiVendorSerialNumber"), ("PERLE-MCR-MGT-MIB", "sfpDmiVendorName"), ("PERLE-MCR-MGT-MIB", "sfpDmiVendorPartNumber"), ("PERLE-MCR-MGT-MIB", "xfpDmiAux1Type"), ("PERLE-MCR-MGT-MIB", "xfpDmiAux1State"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux1"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAux1Warn"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAux1Alarm"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAux1Warn"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAux1Alarm"), ("PERLE-MCR-MGT-MIB", "xfpDmiAux2Type"), ("PERLE-MCR-MGT-MIB", "xfpDmiAux2State"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux2"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAux2Warn"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAux2Alarm"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAux2Warn"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAux2Alarm"), ("PERLE-MCR-MGT-MIB", "xfpDmiMinBitRate"), ("PERLE-MCR-MGT-MIB", "xfpDmiMaxBitRate"), ("PERLE-MCR-MGT-MIB", "xfpDmiReachEBW50125"), ("PERLE-MCR-MGT-MIB", "sfpDmiReachCopper")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        mcrMGTMIBMediaGroup = mcrMGTMIBMediaGroup.setObjects(*_mcrMGTMIBMediaGroup_obj)
    else:
        mcrMGTMIBMediaGroup = mcrMGTMIBMediaGroup.setObjects(*_mcrMGTMIBMediaGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mcrMGTMIBMediaGroup = mcrMGTMIBMediaGroup.setStatus('current')
if mibBuilder.loadTexts: mcrMGTMIBMediaGroup.setDescription('The group of objects for identifying and determining the configuration and current timeliness values of the Perle Managed Media Converters media converter modules')
mcrMGTMIBMgtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 2, 2, 3))
for _mcrMGTMIBMgtGroup_obj in [[("PERLE-MCR-MGT-MIB", "systemStatus"), ("PERLE-MCR-MGT-MIB", "systemName"), ("PERLE-MCR-MGT-MIB", "systemDomainName"), ("PERLE-MCR-MGT-MIB", "systemIpAddress"), ("PERLE-MCR-MGT-MIB", "systemSubnetBits"), ("PERLE-MCR-MGT-MIB", "systemDHCPUpdateDNS"), ("PERLE-MCR-MGT-MIB", "systemAutoObtainDNS"), ("PERLE-MCR-MGT-MIB", "systemAutoObtainGW"), ("PERLE-MCR-MGT-MIB", "systemDomainPrefix"), ("PERLE-MCR-MGT-MIB", "systemTFTPRetry"), ("PERLE-MCR-MGT-MIB", "systemTFTPTimeOut"), ("PERLE-MCR-MGT-MIB", "gatewayStatus"), ("PERLE-MCR-MGT-MIB", "gatewayHost"), ("PERLE-MCR-MGT-MIB", "gatewayType"), ("PERLE-MCR-MGT-MIB", "gatewayIpAddress"), ("PERLE-MCR-MGT-MIB", "gatewaySubnetBits"), ("PERLE-MCR-MGT-MIB", "gatewayInterface"), ("PERLE-MCR-MGT-MIB", "hostStatus"), ("PERLE-MCR-MGT-MIB", "hostName"), ("PERLE-MCR-MGT-MIB", "hostIpAddr"), ("PERLE-MCR-MGT-MIB", "hostFqdn"), ("PERLE-MCR-MGT-MIB", "dnsStatus"), ("PERLE-MCR-MGT-MIB", "dnsIpAddress"), ("PERLE-MCR-MGT-MIB", "dnsActive"), ("PERLE-MCR-MGT-MIB", "dynamicDNSStatus"), ("PERLE-MCR-MGT-MIB", "dynamicDNS"), ("PERLE-MCR-MGT-MIB", "dynamicDNSHostname"), ("PERLE-MCR-MGT-MIB", "dynamicDNSUserName"), ("PERLE-MCR-MGT-MIB", "dynamicDNSPassword"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSystemType"), ("PERLE-MCR-MGT-MIB", "dynamicDNSWildCard"), ("PERLE-MCR-MGT-MIB", "dynamicDNSConnectionMethod"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLVerifyPeerCertificate"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLCountry"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLStateProv"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLLocality"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLOrganisation"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLOrganisationUnit"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLCommonName"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLEmail"), ("PERLE-MCR-MGT-MIB", "dynamicDNSStatusString"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLCipherStatus"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLCipherEncryption"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLCipherKeySizeMin"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLCipherKeySizeMax"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLCipherKeyExchange"), ("PERLE-MCR-MGT-MIB", "dynamicDNSSSLCipherHMAC"), ("PERLE-MCR-MGT-MIB", "ipv6serviceStatus"), ("PERLE-MCR-MGT-MIB", "serviceAutoDiscovery"), ("PERLE-MCR-MGT-MIB", "serviceDHCPv6"), ("PERLE-MCR-MGT-MIB", "serviceDHCPv6IPAddresses"), ("PERLE-MCR-MGT-MIB", "serviceDHCPv6NetworkPrefix"), ("PERLE-MCR-MGT-MIB", "serviceDHCPv6AutoObtainDNS"), ("PERLE-MCR-MGT-MIB", "ipv6AddressStatus"), ("PERLE-MCR-MGT-MIB", "ipv6AddressAddr"), ("PERLE-MCR-MGT-MIB", "ipv6AddressPrefixBits"), ("PERLE-MCR-MGT-MIB", "ipv6AddressAuto"), ("PERLE-MCR-MGT-MIB", "ipv6AddressSendAdvertise"), ("PERLE-MCR-MGT-MIB", "interfacev6Name"), ("PERLE-MCR-MGT-MIB", "interfacev6Address"), ("PERLE-MCR-MGT-MIB", "interfacev6PrefixBits"), ("PERLE-MCR-MGT-MIB", "interfacev6Scope"), ("PERLE-MCR-MGT-MIB", "ipv6TunnelStatus"), ("PERLE-MCR-MGT-MIB", "ipv6TunnelName"), ("PERLE-MCR-MGT-MIB", "ipv6TunnelMode"), ("PERLE-MCR-MGT-MIB", "ipv6TunnelRemoteHost"), ("PERLE-MCR-MGT-MIB", "accessServicesStatus"), ("PERLE-MCR-MGT-MIB", "accessServicesSessInactTimeout"), ("PERLE-MCR-MGT-MIB", "accessServiceHTTPD"), ("PERLE-MCR-MGT-MIB", "accessServiceHTTPSD"), ("PERLE-MCR-MGT-MIB", "accessServiceTelnetD"), ("PERLE-MCR-MGT-MIB", "acessServiceSSHD"), ("PERLE-MCR-MGT-MIB", "acessServiceSnmpD"), ("PERLE-MCR-MGT-MIB", "acessServiceSetIP"), ("PERLE-MCR-MGT-MIB", "acessIncomingPings"), ("PERLE-MCR-MGT-MIB", "webManagerStatus"), ("PERLE-MCR-MGT-MIB", "httpsPassphrase"), ("PERLE-MCR-MGT-MIB", "sshServerStatus"), ("PERLE-MCR-MGT-MIB", "sshServerAuthRSA"), ("PERLE-MCR-MGT-MIB", "sshServerAuthDSA"), ("PERLE-MCR-MGT-MIB", "sshServerAuthKeyboard"), ("PERLE-MCR-MGT-MIB", "sshServerAuthPassword"), ("PERLE-MCR-MGT-MIB", "sshServerCipher3Des"), ("PERLE-MCR-MGT-MIB", "sshServerCipherBlowfish"), ("PERLE-MCR-MGT-MIB", "sshServerCipherCipherAES"), ("PERLE-MCR-MGT-MIB", "sshServerCipherCAST"), ("PERLE-MCR-MGT-MIB", "sshServerCipherArcfour"), ("PERLE-MCR-MGT-MIB", "sshServerVerbose"), ("PERLE-MCR-MGT-MIB", "sshServerCompression"), ("PERLE-MCR-MGT-MIB", "sshServerSSH1"), ("PERLE-MCR-MGT-MIB", "snmpAgentStatus"), ("PERLE-MCR-MGT-MIB", "snmpContact"), ("PERLE-MCR-MGT-MIB", "snmpLocation"), ("PERLE-MCR-MGT-MIB", "snmpCommunityStatus"), ("PERLE-MCR-MGT-MIB", "snmpCommunityName"), ("PERLE-MCR-MGT-MIB", "snmpCommunityIpAddress"), ("PERLE-MCR-MGT-MIB", "snmpCommunityPermission"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadOnlyStatus"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadOnlyUserName"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadOnlySecurityLevel"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadOnlyAuthAlgorithm"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadOnlyAuthPasswd"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadOnlyPrivacyAlgorithm"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadOnlyPrivacyPasswd"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadWriteStatus"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadWriteUserName"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadWriteSecurityLevel"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadWriteAuthAlgorithm"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadWriteAuthPasswd"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadWritePrivacyAlgorithm"), ("PERLE-MCR-MGT-MIB", "snmpV3ReadWritePrivacyPasswd"), ("PERLE-MCR-MGT-MIB", "snmpV3LocalEngineID"), ("PERLE-MCR-MGT-MIB", "snmpV3LocalEngineIDTextSuffix"), ("PERLE-MCR-MGT-MIB", "authHostsStatus"), ("PERLE-MCR-MGT-MIB", "authHostOnly"), ("PERLE-MCR-MGT-MIB", "authHostIpStatus"), ("PERLE-MCR-MGT-MIB", "authHostIpAddr"), ("PERLE-MCR-MGT-MIB", "authHostIpDescr"), ("PERLE-MCR-MGT-MIB", "authHostMacStatus"), ("PERLE-MCR-MGT-MIB", "authHostMacAddr"), ("PERLE-MCR-MGT-MIB", "authHostMacDescr"), ("PERLE-MCR-MGT-MIB", "localEventLogStatus"), ("PERLE-MCR-MGT-MIB", "localEventLogEnabled"), ("PERLE-MCR-MGT-MIB", "localEventLogAlertLevel"), ("PERLE-MCR-MGT-MIB", "localEventLogClear"), ("PERLE-MCR-MGT-MIB", "syslogStatus"), ("PERLE-MCR-MGT-MIB", "syslogEnabled"), ("PERLE-MCR-MGT-MIB", "syslogSeverityLevel"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostIndex"), ("PERLE-MCR-MGT-MIB", "syslogPrimaryHost"), ("PERLE-MCR-MGT-MIB", "syslogSecondaryHost"), ("PERLE-MCR-MGT-MIB", "snmpTrapStatus"), ("PERLE-MCR-MGT-MIB", "snmpTrapEnabled"), ("PERLE-MCR-MGT-MIB", "snmpTrapAlertLevel"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostStatus"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostIpAddress"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostUdpPort"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostVersion"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostType"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostCommunity"), ("PERLE-MCR-MGT-MIB", "snmpTrapHostEnable"), ("PERLE-MCR-MGT-MIB", "snmpV3TrapUserStatus"), ("PERLE-MCR-MGT-MIB", "snmpV3TrapUserUserName"), ("PERLE-MCR-MGT-MIB", "snmpV3TrapUserSecurityLevel"), ("PERLE-MCR-MGT-MIB", "snmpV3TrapUserAuthAlgorithm"), ("PERLE-MCR-MGT-MIB", "snmpV3TrapUserAuthPasswd"), ("PERLE-MCR-MGT-MIB", "snmpV3TrapUserPrivacyAlgorithm"), ("PERLE-MCR-MGT-MIB", "snmpV3TrapUserPrivacyPasswd"), ("PERLE-MCR-MGT-MIB", "snmpTrapGlbHostTimeout"), ("PERLE-MCR-MGT-MIB", "snmpTapGlobHostRetries"), ("PERLE-MCR-MGT-MIB", "mgtAccessMethod"), ("PERLE-MCR-MGT-MIB", "remoteMgtIpAddress"), ("PERLE-MCR-MGT-MIB", "remoteTftpHost"), ("PERLE-MCR-MGT-MIB", "remoteTftpFileName"), ("PERLE-MCR-MGT-MIB", "networkIpAddress"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortNum"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortDescr"), ("PERLE-MCR-MGT-MIB", "eventSeverityLevel"), ("PERLE-MCR-MGT-MIB", "xfpDmiRealTimeAux"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxWarn"), ("PERLE-MCR-MGT-MIB", "xfpDmiHighAuxAlarm"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxWarn"), ("PERLE-MCR-MGT-MIB", "xfpDmiLowAuxAlarm"), ("PERLE-MCR-MGT-MIB", "mcrModuleSubTypeInserted"), ("PERLE-MCR-MGT-MIB", "mcrMediaBackedupModuleSubType"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidth"), ("PERLE-MCR-MGT-MIB", "mcrMediaPortBandwidthThreshold"), ("PERLE-MCR-MGT-MIB", "emailStatus"), ("PERLE-MCR-MGT-MIB", "emailEnabled"), ("PERLE-MCR-MGT-MIB", "emailAlertLevel"), ("PERLE-MCR-MGT-MIB", "emailTo"), ("PERLE-MCR-MGT-MIB", "emailFrom"), ("PERLE-MCR-MGT-MIB", "emailSMTPHost"), ("PERLE-MCR-MGT-MIB", "emailReply"), ("PERLE-MCR-MGT-MIB", "emailSubject"), ("PERLE-MCR-MGT-MIB", "emailSMTPUsername"), ("PERLE-MCR-MGT-MIB", "emailSMTPPassword"), ("PERLE-MCR-MGT-MIB", "emailSMTPEncryption"), ("PERLE-MCR-MGT-MIB", "emailSMTPValidatePeerCertificate"), ("PERLE-MCR-MGT-MIB", "emailSMTPTcpPort"), ("PERLE-MCR-MGT-MIB", "emailSMTPDomain"), ("PERLE-MCR-MGT-MIB", "mgtUsersStatus"), ("PERLE-MCR-MGT-MIB", "mgtUsersByPassLoginEnabled"), ("PERLE-MCR-MGT-MIB", "mgtUsersPrimaryAuthMethod"), ("PERLE-MCR-MGT-MIB", "mgtUsersSecondaryAuthMethod"), ("PERLE-MCR-MGT-MIB", "mgtUsersAlwaysAttemptSecond"), ("PERLE-MCR-MGT-MIB", "userStatus"), ("PERLE-MCR-MGT-MIB", "userName"), ("PERLE-MCR-MGT-MIB", "userPassword"), ("PERLE-MCR-MGT-MIB", "userLevel"), ("PERLE-MCR-MGT-MIB", "userStatusName"), ("PERLE-MCR-MGT-MIB", "userStatusRemoteIPAddress"), ("PERLE-MCR-MGT-MIB", "userStatusStartTime"), ("PERLE-MCR-MGT-MIB", "userStatusLevel"), ("PERLE-MCR-MGT-MIB", "radiusStatus"), ("PERLE-MCR-MGT-MIB", "radiusPrimaryAuthHost"), ("PERLE-MCR-MGT-MIB", "radiusSecondaryAuthHost"), ("PERLE-MCR-MGT-MIB", "radiusAuthenticationPort"), ("PERLE-MCR-MGT-MIB", "radiusAccounting"), ("PERLE-MCR-MGT-MIB", "radiusPrimaryAcctHost"), ("PERLE-MCR-MGT-MIB", "radiusSecondaryAcctHost"), ("PERLE-MCR-MGT-MIB", "radiusAccountingPort"), ("PERLE-MCR-MGT-MIB", "radiusAcctAuth"), ("PERLE-MCR-MGT-MIB", "radiusRetryLimit"), ("PERLE-MCR-MGT-MIB", "radiusTimeout"), ("PERLE-MCR-MGT-MIB", "radiusNasIdentifier"), ("PERLE-MCR-MGT-MIB", "radiusNasIpAddress"), ("PERLE-MCR-MGT-MIB", "radiusNasSpecifyIpAddress"), ("PERLE-MCR-MGT-MIB", "radiusNasIpv6Address"), ("PERLE-MCR-MGT-MIB", "radiusNasSpecifyIpv6Address"), ("PERLE-MCR-MGT-MIB", "kerberosStatus"), ("PERLE-MCR-MGT-MIB", "kerberosRealm"), ("PERLE-MCR-MGT-MIB", "kerberosDomain"), ("PERLE-MCR-MGT-MIB", "kerberosPort"), ("PERLE-MCR-MGT-MIB", "ldapStatus"), ("PERLE-MCR-MGT-MIB", "ldapHost"), ("PERLE-MCR-MGT-MIB", "ldapPort"), ("PERLE-MCR-MGT-MIB", "ldapBase"), ("PERLE-MCR-MGT-MIB", "ldapEnableTLS"), ("PERLE-MCR-MGT-MIB", "ldapTLSPort"), ("PERLE-MCR-MGT-MIB", "ldapUID"), ("PERLE-MCR-MGT-MIB", "ldapPasswordEncryption"), ("PERLE-MCR-MGT-MIB", "ldapClientAuth"), ("PERLE-MCR-MGT-MIB", "ldapClientName"), ("PERLE-MCR-MGT-MIB", "ldapClientAppendBase"), ("PERLE-MCR-MGT-MIB", "ldapClientPassword"), ("PERLE-MCR-MGT-MIB", "tacacsStatus"), ("PERLE-MCR-MGT-MIB", "tacacsPrimaryHost"), ("PERLE-MCR-MGT-MIB", "tacacsSecondaryHost"), ("PERLE-MCR-MGT-MIB", "tacacsPort"), ("PERLE-MCR-MGT-MIB", "tacacsAccounting"), ("PERLE-MCR-MGT-MIB", "tacacsAccountingPrimaryHost"), ("PERLE-MCR-MGT-MIB", "tacacsAccountingSecondaryHost"), ("PERLE-MCR-MGT-MIB", "tacacsAccountingPort"), ("PERLE-MCR-MGT-MIB", "tacacsAuthorization"), ("PERLE-MCR-MGT-MIB", "tacacsAlternateServiceNames"), ("PERLE-MCR-MGT-MIB", "securidStatus"), ("PERLE-MCR-MGT-MIB", "securidMasterHost"), ("PERLE-MCR-MGT-MIB", "securidSlaveHost"), ("PERLE-MCR-MGT-MIB", "securidPort"), ("PERLE-MCR-MGT-MIB", "securidType"), ("PERLE-MCR-MGT-MIB", "securidLegacy"), ("PERLE-MCR-MGT-MIB", "nisStatus"), ("PERLE-MCR-MGT-MIB", "nisDomain"), ("PERLE-MCR-MGT-MIB", "nisPrimaryHost"), ("PERLE-MCR-MGT-MIB", "nisSecondaryHost"), ("PERLE-MCR-MGT-MIB", "mgtDateTimeStatus"), ("PERLE-MCR-MGT-MIB", "systemDate"), ("PERLE-MCR-MGT-MIB", "systemTime"), ("PERLE-MCR-MGT-MIB", "systemDateTimeAndOffset"), ("PERLE-MCR-MGT-MIB", "timeZoneListEnable"), ("PERLE-MCR-MGT-MIB", "selectionFromTimeZoneList"), ("PERLE-MCR-MGT-MIB", "timeZoneAdjustForDST"), ("PERLE-MCR-MGT-MIB", "customTimeZoneStatus"), ("PERLE-MCR-MGT-MIB", "timeZoneName")], [("PERLE-MCR-MGT-MIB", "timeOffset"), ("PERLE-MCR-MGT-MIB", "timeSummerName"), ("PERLE-MCR-MGT-MIB", "timeSummerOffset"), ("PERLE-MCR-MGT-MIB", "timeSummerMode"), ("PERLE-MCR-MGT-MIB", "timeSummerRecStartMonth"), ("PERLE-MCR-MGT-MIB", "timeSummerRecStartWeek"), ("PERLE-MCR-MGT-MIB", "timeSummerRecStartDay"), ("PERLE-MCR-MGT-MIB", "timeSummerRecStartHour"), ("PERLE-MCR-MGT-MIB", "timeSummerRecStartMin"), ("PERLE-MCR-MGT-MIB", "timeSummerRecEndMonth"), ("PERLE-MCR-MGT-MIB", "timeSummerRecEndWeek"), ("PERLE-MCR-MGT-MIB", "timeSummerRecEndDay"), ("PERLE-MCR-MGT-MIB", "timeSummerRecEndHour"), ("PERLE-MCR-MGT-MIB", "timeSummerRecEndMin"), ("PERLE-MCR-MGT-MIB", "timeSummerFixStartMonth"), ("PERLE-MCR-MGT-MIB", "timeSummerFixStartDay"), ("PERLE-MCR-MGT-MIB", "timeSummerFixStartHour"), ("PERLE-MCR-MGT-MIB", "timeSummerFixStartMinute"), ("PERLE-MCR-MGT-MIB", "timeSummerFixEndMonth"), ("PERLE-MCR-MGT-MIB", "timeSummerFixEndDay"), ("PERLE-MCR-MGT-MIB", "timeSummerFixEndHour"), ("PERLE-MCR-MGT-MIB", "timeSummerFixEndMinute"), ("PERLE-MCR-MGT-MIB", "timeStatus"), ("PERLE-MCR-MGT-MIB", "timeSntpMode"), ("PERLE-MCR-MGT-MIB", "timeSntpVersion"), ("PERLE-MCR-MGT-MIB", "timeSntpHost1"), ("PERLE-MCR-MGT-MIB", "timeSntpHost2"), ("PERLE-MCR-MGT-MIB", "timeSntpServerAuthentication"), ("PERLE-MCR-MGT-MIB", "timeSntpKeyID"), ("PERLE-MCR-MGT-MIB", "timeSntpKeyID2"), ("PERLE-MCR-MGT-MIB", "sntpStatAddress"), ("PERLE-MCR-MGT-MIB", "sntpStatLastUpdate"), ("PERLE-MCR-MGT-MIB", "sntpStatLeapIndicator"), ("PERLE-MCR-MGT-MIB", "sntpStatVersion"), ("PERLE-MCR-MGT-MIB", "sntpStatMode"), ("PERLE-MCR-MGT-MIB", "sntpStatStratum"), ("PERLE-MCR-MGT-MIB", "sntpStatRefId"), ("PERLE-MCR-MGT-MIB", "sntpStatOffset"), ("PERLE-MCR-MGT-MIB", "bootFileStatus"), ("PERLE-MCR-MGT-MIB", "fileFirmwareHost"), ("PERLE-MCR-MGT-MIB", "fileFirmwareName"), ("PERLE-MCR-MGT-MIB", "fileConfigurationHost"), ("PERLE-MCR-MGT-MIB", "fileConfigurationName"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateStatus"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateAuto"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateBundleVersionCm100"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateBundleVersionCm110"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateBundleVersionCm1000OrCm1000Sfp"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateBundleVersionCm1110"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateBundleVersionCm1110Sfp"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateBundleVersionCm100mm"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateBundleVersionCm1000mm"), ("PERLE-MCR-MGT-MIB", "firmwareUpdateBundleVersionCm10g"), ("PERLE-MCR-MGT-MIB", "nettxfrStatus"), ("PERLE-MCR-MGT-MIB", "nettxfrDirection"), ("PERLE-MCR-MGT-MIB", "nettxfrFileType"), ("PERLE-MCR-MGT-MIB", "nettxfrFileHost"), ("PERLE-MCR-MGT-MIB", "nettxfrFileName"), ("PERLE-MCR-MGT-MIB", "nettxfrMCSlotNumber"), ("PERLE-MCR-MGT-MIB", "nettxfrUserName"), ("PERLE-MCR-MGT-MIB", "nettxfrSSHKeyType"), ("PERLE-MCR-MGT-MIB", "nettxfrSSLType"), ("PERLE-MCR-MGT-MIB", "nettxfrSessionInUse"), ("PERLE-MCR-MGT-MIB", "nettxfrTftpPort"), ("PERLE-MCR-MGT-MIB", "adminFunction"), ("PERLE-MCR-MGT-MIB", "adminLastFunction"), ("PERLE-MCR-MGT-MIB", "adminStatus"), ("PERLE-MCR-MGT-MIB", "adminbootReason"), ("PERLE-MCR-MGT-MIB", "adminDiagFileAvailable"), ("PERLE-MCR-MGT-MIB", "displayFormatStatus"), ("PERLE-MCR-MGT-MIB", "cfgTemperatureUnits"), ("PERLE-MCR-MGT-MIB", "cfgSfpPowerUnits"), ("PERLE-MCR-MGT-MIB", "cfgTimeFormat"), ("PERLE-MCR-MGT-MIB", "cfgDateFormat"), ("PERLE-MCR-MGT-MIB", "powerSchedConifgStatus"), ("PERLE-MCR-MGT-MIB", "powerSchedOnHour"), ("PERLE-MCR-MGT-MIB", "powerSchedOnMinute"), ("PERLE-MCR-MGT-MIB", "powerSchedOffHour"), ("PERLE-MCR-MGT-MIB", "powerSchedOffMinute")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        mcrMGTMIBMgtGroup = mcrMGTMIBMgtGroup.setObjects(*_mcrMGTMIBMgtGroup_obj)
    else:
        mcrMGTMIBMgtGroup = mcrMGTMIBMgtGroup.setObjects(*_mcrMGTMIBMgtGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mcrMGTMIBMgtGroup = mcrMGTMIBMgtGroup.setStatus('current')
if mibBuilder.loadTexts: mcrMGTMIBMgtGroup.setDescription('The group of objects for identifying and determining the configuration and current timeliness values of the Perle Managed Media Converters media converter modules')
mcrMGTMIBNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 1966, 21, 1, 1, 2, 2, 4)).setObjects(("PERLE-MCR-MGT-MIB", "mcrMgtModuleInserted"), ("PERLE-MCR-MGT-MIB", "mcrMgtSystemBoot"), ("PERLE-MCR-MGT-MIB", "mcrMgtReset"), ("PERLE-MCR-MGT-MIB", "mcrMgtResetFactory"), ("PERLE-MCR-MGT-MIB", "mcrMgtEtheLinkUp"), ("PERLE-MCR-MGT-MIB", "mcrMgtEtheLinkDown"), ("PERLE-MCR-MGT-MIB", "mcrMgtConMonDSRSigChg"), ("PERLE-MCR-MGT-MIB", "mcrMgtAuthFail"), ("PERLE-MCR-MGT-MIB", "mcrMgtAuthSuccess"), ("PERLE-MCR-MGT-MIB", "mcrMgtDateTimeChg"), ("PERLE-MCR-MGT-MIB", "mcrMgtSntpServFail"), ("PERLE-MCR-MGT-MIB", "mcrMgtSntpServRec"), ("PERLE-MCR-MGT-MIB", "mcrMgtSnmpTrapHostFail"), ("PERLE-MCR-MGT-MIB", "mcrMgtSnmpTrapHostRec"), ("PERLE-MCR-MGT-MIB", "mcrMgtEmailServFail"), ("PERLE-MCR-MGT-MIB", "mcrMgtEmailServRec"), ("PERLE-MCR-MGT-MIB", "mcrMgtConfSavedFlash"), ("PERLE-MCR-MGT-MIB", "mcrMgtIpAddrDynChg"), ("PERLE-MCR-MGT-MIB", "mcrMgtTftpUploadFail"), ("PERLE-MCR-MGT-MIB", "mcrMgtTftpUploadSuccess"), ("PERLE-MCR-MGT-MIB", "mcrMgtTftpDownloadFail"), ("PERLE-MCR-MGT-MIB", "mcrMgtTftpDownloadSuccess"), ("PERLE-MCR-MGT-MIB", "mcrMgtChassisMismatch"), ("PERLE-MCR-MGT-MIB", "mcrChassisAdd"), ("PERLE-MCR-MGT-MIB", "mcrChassisRemove"), ("PERLE-MCR-MGT-MIB", "mcrChassisReset"), ("PERLE-MCR-MGT-MIB", "mcrChassisTemperatureAlarm"), ("PERLE-MCR-MGT-MIB", "mcrChassisTemperatureRecover"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotPoweredOn"), ("PERLE-MCR-MGT-MIB", "mcrChassisSlotPoweredOff"), ("PERLE-MCR-MGT-MIB", "mcrChassisFail"), ("PERLE-MCR-MGT-MIB", "mcrChassisOk"), ("PERLE-MCR-MGT-MIB", "mcrPsmuInserted"), ("PERLE-MCR-MGT-MIB", "mcrPsmuRemoved"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuFail"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuOk"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuVoltageFail"), ("PERLE-MCR-MGT-MIB", "mcrPsmuPsuVoltageOk"), ("PERLE-MCR-MGT-MIB", "mcrPsmuFanFail"), ("PERLE-MCR-MGT-MIB", "mcrPsmuFanOk"), ("PERLE-MCR-MGT-MIB", "mcrMediaInserted"), ("PERLE-MCR-MGT-MIB", "mcrMediaRemoved"), ("PERLE-MCR-MGT-MIB", "mcrMediaReset"), ("PERLE-MCR-MGT-MIB", "mcrMediaLostCommunication"), ("PERLE-MCR-MGT-MIB", "mcrMediaRecovCommunication"), ("PERLE-MCR-MGT-MIB", "mcrMediaFail"), ("PERLE-MCR-MGT-MIB", "mcrMediaOk"), ("PERLE-MCR-MGT-MIB", "mcrMediaLinkUp"), ("PERLE-MCR-MGT-MIB", "mcrMediaLinkDown"), ("PERLE-MCR-MGT-MIB", "mcrMediaConfUpdateFail"), ("PERLE-MCR-MGT-MIB", "mcrMediaConfUpdateSuccess"), ("PERLE-MCR-MGT-MIB", "mcrMediaConfMismatch"), ("PERLE-MCR-MGT-MIB", "mcrMediaConfMismatchResolv"), ("PERLE-MCR-MGT-MIB", "mcrMediaFirmwareUpdateFail"), ("PERLE-MCR-MGT-MIB", "mcrMediaFirmwareUpdateSuccess"), ("PERLE-MCR-MGT-MIB", "mcrSfpInserted"), ("PERLE-MCR-MGT-MIB", "mcrSfpRemoved"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTempWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTempWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTempAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTempAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTempWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTempWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTempAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTempAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighVoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighVoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighVoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighVoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowVoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowVoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowVoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowVoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTxBiasWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTxBiasWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTxBiasAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTxBiasAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTxBiasWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTxBiasWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTxBiasAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTxBiasAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTxPowerWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTxPowerWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighTxPowerAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTxPowerWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTxPowerWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowTxPowerAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighRxPowerWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighRxPowerWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighRxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpHighRxPowerAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowRxPowerWarn"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowRxPowerWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowRxPowerAlarm"), ("PERLE-MCR-MGT-MIB", "mcrSfpLowRxPowerAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrChassisCommTempSensorFail"), ("PERLE-MCR-MGT-MIB", "mcrChassisCommTempSensorRecov"), ("PERLE-MCR-MGT-MIB", "mcrMediaDetectFail"), ("PERLE-MCR-MGT-MIB", "mcrMediaBadImage"), ("PERLE-MCR-MGT-MIB", "mcrSfpLostComm"), ("PERLE-MCR-MGT-MIB", "mcrSfpRecovComm"), ("PERLE-MCR-MGT-MIB", "mcrModuleNotSupported"), ("PERLE-MCR-MGT-MIB", "mcrModuleFirmwareUpdate"), ("PERLE-MCR-MGT-MIB", "mcrSfpPortShutdown"), ("PERLE-MCR-MGT-MIB", "mcrSfpPortShutdownRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighApdBiasWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighApdBiasWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighApdBiasAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighApdBiasAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowApdBiasWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowApdBiasWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowApdBiasAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowApdBiasAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighTecCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighTecCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighTecCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighTecCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowTecCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowTecCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowTecCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowTecCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighLaserTempWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighLaserTempWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighLaserTempAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighLaserTempAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowLaserTempWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowLaserTempWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowLaserTempAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowLaserTempAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighLaserWavelengthWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighLaserWavelengthWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighLaserWavelengthAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighLaserWavelengthAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowLaserWavelengthWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowLaserWavelengthWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowLaserWavelengthAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowLaserWavelengthAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh5VoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh5VoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh5VoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh5VoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow5VoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow5VoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow5VoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow5VoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh33VoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh33VoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh33VoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh33VoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow33VoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow33VoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow33VoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow33VoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh18VoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh18VoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh18VoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh18VoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow18VoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow18VoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow18VoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow18VoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighM52VoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighM52VoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighM52VoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighM52VoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowM52VoltWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowM52VoltWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowM52VoltAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowM52VoltAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh5VCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh5VCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh5VCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh5VCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow5VCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow5VCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow5VCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow5VCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh33VCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh33VCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh33VCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh33VCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow33VCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow33VCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow33VCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow33VCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh18VCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh18VCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh18VCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHigh18VCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow18VCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow18VCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow18VCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLow18VCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighM52VCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighM52VCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighM52VCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighM52VCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowM52VCurrentWarn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowM52VCurrentWarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowM52VCurrentAlarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowM52VCurrentAlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC5Warn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC5WarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC5Alarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC5AlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC5Warn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC5WarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC5Alarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC5AlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC3Warn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC3WarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC3Alarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC3AlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC3Warn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC3WarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC3Alarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC3AlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC2Warn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC2WarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC2Alarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVCC2AlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC2Warn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC2WarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC2Alarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVCC2AlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVEE5Warn"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVEE5WarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVEE5Alarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpHighVEE5AlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVEE5Warn"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVEE5WarnRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVEE5Alarm"), ("PERLE-MCR-MGT-MIB", "mcrXfpLowVEE5AlarmRecov"), ("PERLE-MCR-MGT-MIB", "mcrSfpSpeedMismatch"), ("PERLE-MCR-MGT-MIB", "mcrSfpSpeedMismatchRecov"), ("PERLE-MCR-MGT-MIB", "mcrXfpPowerExceeded"), ("PERLE-MCR-MGT-MIB", "mcrXfpPowerExceededRecov"), ("PERLE-MCR-MGT-MIB", "mcrLinkTestError"), ("PERLE-MCR-MGT-MIB", "mcrAlarmRelayEngaged"), ("PERLE-MCR-MGT-MIB", "mcrAlarmRelayDisengaged"), ("PERLE-MCR-MGT-MIB", "mcrBandwidthLevelUpstreamLow"), ("PERLE-MCR-MGT-MIB", "mcrBandwidthLevelUpstreamRecov"), ("PERLE-MCR-MGT-MIB", "mcrBandwidthLevelDownstreamLow"), ("PERLE-MCR-MGT-MIB", "mcrBandwidthLevelDownstreamRecov"), ("PERLE-MCR-MGT-MIB", "mcrMediaRemoteReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mcrMGTMIBNotificationsGroup = mcrMGTMIBNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: mcrMGTMIBNotificationsGroup.setDescription('The group of notifications (traps) which is implemented for the Perle Managed Media Converters.')
mibBuilder.exportSymbols("PERLE-MCR-MGT-MIB", EnableDisableValue=EnableDisableValue, xfpDmiLowAux2Alarm=xfpDmiLowAux2Alarm, cm110RateConvStatsTable=cm110RateConvStatsTable, mcrXfpHigh18VoltWarnRecov=mcrXfpHigh18VoltWarnRecov, sfpDmiConnectorType=sfpDmiConnectorType, authIpHostTable=authIpHostTable, cm10gtSlotIndex=cm10gtSlotIndex, cm1000ConfigFiberAutoNeg=cm1000ConfigFiberAutoNeg, cm100ConfigCopperPause=cm100ConfigCopperPause, cm1110ConfigCopperEgressLimit=cm1110ConfigCopperEgressLimit, cm1110AvctTxRxPair3Amplitude=cm1110AvctTxRxPair3Amplitude, cm110ConfigLinkMode=cm110ConfigLinkMode, cm110RateConvVctTable=cm110RateConvVctTable, mcrPsmuPsuOk=mcrPsmuPsuOk, acessIncomingPings=acessIncomingPings, mcrXfpHighVEE5Alarm=mcrXfpHighVEE5Alarm, cm1000mmSlotIndex=cm1000mmSlotIndex, cm110PortInMACRcvErrs=cm110PortInMACRcvErrs, authHostsStatus=authHostsStatus, cm1110PortInBadOctets=cm1110PortInBadOctets, cm10gModelDesc=cm10gModelDesc, cm100Fixed=cm100Fixed, powerSchedOnMinute=powerSchedOnMinute, mcrMgtEmailServRec=mcrMgtEmailServRec, sshServerGroup=sshServerGroup, mgtEthStatsTxOverruns=mgtEthStatsTxOverruns, exCMLedEntry=exCMLedEntry, exCMConfigEthernetCrossOver=exCMConfigEthernetCrossOver, tacacsSecondaryHost=tacacsSecondaryHost, emailSMTPTcpPort=emailSMTPTcpPort, cm1000mmLedLK2=cm1000mmLedLK2, cm100FiberSpeed=cm100FiberSpeed, cm100FixedTable=cm100FixedTable, cm1110ConfigCopperCongestionPolicy=cm1110ConfigCopperCongestionPolicy, cm1000mmLedTable=cm1000mmLedTable, cm110ConfigFiberIngressLimit=cm110ConfigFiberIngressLimit, dynamicDNSSSLCountry=dynamicDNSSSLCountry, snmpTrapHostIpAddress=snmpTrapHostIpAddress, mcrSfpHighVoltWarn=mcrSfpHighVoltWarn, cm1110PortOutBroadcasts=cm1110PortOutBroadcasts, mcrChassisSlotTable=mcrChassisSlotTable, cm1110ConfigCopperCrossOver=cm1110ConfigCopperCrossOver, cm10gtConfigPort1TxDitherValue=cm10gtConfigPort1TxDitherValue, mcrXfpLowM52VCurrentAlarmRecov=mcrXfpLowM52VCurrentAlarmRecov, cm110LedCopperSpeed=cm110LedCopperSpeed, dynamicDNSSSLStateProv=dynamicDNSSSLStateProv, mcrSfpLowTxPowerWarn=mcrSfpLowTxPowerWarn, cm10gtLedLK1=cm10gtLedLK1, cm110ConfigCopperSpeed=cm110ConfigCopperSpeed, mcrMgtLedPWR=mcrMgtLedPWR, cm10gConfigPort2FecAmplitude=cm10gConfigPort2FecAmplitude, ldapStatus=ldapStatus, cm100mmFixed=cm100mmFixed, timeSummerRecEndDay=timeSummerRecEndDay, cm10gPort1AutoNegState=cm10gPort1AutoNegState, mcrPsmuPsuVoltageOk=mcrPsmuPsuVoltageOk, cm1000mmConfigJumboPackets=cm1000mmConfigJumboPackets, cm110ConfigCopperPriorityPrecedence=cm110ConfigCopperPriorityPrecedence, cm110ConfigCopperPriorityMap5=cm110ConfigCopperPriorityMap5, nettxfrSSLType=nettxfrSSLType, cm10gLedTable=cm10gLedTable, acessServiceSSHD=acessServiceSSHD, mcrXfpHigh33VCurrentAlarmRecov=mcrXfpHigh33VCurrentAlarmRecov, mgtEthStatsMasterLoadBalancer=mgtEthStatsMasterLoadBalancer, adminLastFunction=adminLastFunction, firmwareUpdateBundleVersionCm100mm=firmwareUpdateBundleVersionCm100mm, exCMConfigEthernetPriorityMap5=exCMConfigEthernetPriorityMap5, cm1110FiberSfp100FarEndFault=cm1110FiberSfp100FarEndFault, cm1110CopperAutoNegState=cm1110CopperAutoNegState, cm110PortOutOctets=cm110PortOutOctets, timeSummerOffset=timeSummerOffset, cm110ConfigFiberDefaultVlanId=cm110ConfigFiberDefaultVlanId, powerSchedConifgStatus=powerSchedConifgStatus, exCMHwSw1AutoLocalRemote=exCMHwSw1AutoLocalRemote, exCMConfigEthernet10BaseTDistance=exCMConfigEthernet10BaseTDistance, cm10gtPort1LPRFStatus=cm10gtPort1LPRFStatus, cm110PortOutUnicasts=cm110PortOutUnicasts, cm100CopperAutoNegState=cm100CopperAutoNegState, cm10gConfigPort2WavelengthEnable=cm10gConfigPort2WavelengthEnable, hostIpAddr=hostIpAddr, cm10gtEntry=cm10gtEntry, sntpStatRefId=sntpStatRefId, mcrXfpHighM52VoltAlarmRecov=mcrXfpHighM52VoltAlarmRecov, cm110ConfigFiber8021pPriority=cm110ConfigFiber8021pPriority, dynamicDNSSSLCipherTable=dynamicDNSSSLCipherTable, serviceDHCPv6AutoObtainDNS=serviceDHCPv6AutoObtainDNS, exCMConfigPriorityToEgressQueueMap5=exCMConfigPriorityToEgressQueueMap5, exCMConfigVdslRole=exCMConfigVdslRole, mcrMgtConfSavedFlash=mcrMgtConfSavedFlash, exCMVdslRemoteLoopback=exCMVdslRemoteLoopback, cm1110ConfigCopperAutoNegAdv10HDX=cm1110ConfigCopperAutoNegAdv10HDX, mgtEthStatsName=mgtEthStatsName, cm1000mmConfigFiber2PortEnable=cm1000mmConfigFiber2PortEnable, dynamicDNSSSLCommonName=dynamicDNSSSLCommonName, cm1110PortInDiscards=cm1110PortInDiscards, dynamicDNSSSLLocality=dynamicDNSSSLLocality, exCMPortPkts65to127Octets=exCMPortPkts65to127Octets, mcrSfpHighTxPowerAlarmRecov=mcrSfpHighTxPowerAlarmRecov, mcrXfpLowVCC5AlarmRecov=mcrXfpLowVCC5AlarmRecov, mcrMgtConfigSlotIndex=mcrMgtConfigSlotIndex, timeSummerFixEndHour=timeSummerFixEndHour, cm100mmLedSlotIndex=cm100mmLedSlotIndex, mgtEthStatsTxPktErrors=mgtEthStatsTxPktErrors, exCMConfigPriorityToEgressQueueMap6=exCMConfigPriorityToEgressQueueMap6, exCMPortPkts256to511Octets=exCMPortPkts256to511Octets, cm10gtPort1Duplex=cm10gtPort1Duplex, mcrXfpHighVEE5WarnRecov=mcrXfpHighVEE5WarnRecov, cm100mmConfigFiber1PortName=cm100mmConfigFiber1PortName, cm10gPort1LinkStatus=cm10gPort1LinkStatus, mcrMgtConfigConsoleParity=mcrMgtConfigConsoleParity, exCMVdslStatusTargetSnrUp=exCMVdslStatusTargetSnrUp, remoteTftpFileName=remoteTftpFileName, dynamicDNSStatusString=dynamicDNSStatusString, ipv6TunnelStatus=ipv6TunnelStatus, cm110ConfigFiberFarEndFault=cm110ConfigFiberFarEndFault, cm100LedPWR=cm100LedPWR, cm1000mmFixedTable=cm1000mmFixedTable, cm4gptLedLK1=cm4gptLedLK1, snmpV3ReadOnlyUser=snmpV3ReadOnlyUser, cm100mmConfigModuleName=cm100mmConfigModuleName, cm4gptModelname=cm4gptModelname, mcrXfpLowM52VoltWarn=mcrXfpLowM52VoltWarn, mcrMgtChassisMismatch=mcrMgtChassisMismatch, cm10gPort2ConnType=cm10gPort2ConnType, alarmWarnType=alarmWarnType, securidSlaveHost=securidSlaveHost, cm10gHwSw3FiberFaultAlert=cm10gHwSw3FiberFaultAlert, mgtUsersSecondaryAuthMethod=mgtUsersSecondaryAuthMethod, mcrSfpLowRxPowerWarn=mcrSfpLowRxPowerWarn, ldapClientPassword=ldapClientPassword, mcrSfpLowVoltAlarm=mcrSfpLowVoltAlarm, cm1110ConfigFiberPriorityMap5=cm1110ConfigFiberPriorityMap5, cm100CopperSpeed=cm100CopperSpeed, chassisCfgMgmtSlot=chassisCfgMgmtSlot, cm100mmFiber1ConnType=cm100mmFiber1ConnType, exCMConfigVdslPriorityMap2=exCMConfigVdslPriorityMap2, mgtfirmwareUpdatesGroup=mgtfirmwareUpdatesGroup, cm100ModelDesc=cm100ModelDesc, exCMConfigEthernetAutoNegotiation=exCMConfigEthernetAutoNegotiation, mcrModuleResetToFactory=mcrModuleResetToFactory, cm1000mmHwSw2LinkMode=cm1000mmHwSw2LinkMode, cm110CopperConnType=cm110CopperConnType, systemDHCPUpdateDNS=systemDHCPUpdateDNS, cm1110ConfigFiberFaultAlert=cm1110ConfigFiberFaultAlert, cm1110PortHCOutOctets=cm1110PortHCOutOctets, mcrXfpLowLaserTempAlarmRecov=mcrXfpLowLaserTempAlarmRecov, alertLocalEventGroup=alertLocalEventGroup, hostStatus=hostStatus, sfpDmiFiberWaveLength=sfpDmiFiberWaveLength, snmpV3TrapUserPrivacyAlgorithm=snmpV3TrapUserPrivacyAlgorithm, cm1110ConfigEntry=cm1110ConfigEntry, dynamicDNSSSLOrganisation=dynamicDNSSSLOrganisation, mcrXfpHighLaserWavelengthWarnRecov=mcrXfpHighLaserWavelengthWarnRecov, cm110ConfigFiberIpTosPriority=cm110ConfigFiberIpTosPriority, mgtEthStatsCollisions=mgtEthStatsCollisions, systemAutoObtainGW=systemAutoObtainGW, exCMVdslStatusActualSignalAttenuationDs1=exCMVdslStatusActualSignalAttenuationDs1, cm10gtPort1AutoNegState=cm10gtPort1AutoNegState, cm1110LedFDF=cm1110LedFDF, exCMVdslStatusActualLineAttenuationUp=exCMVdslStatusActualLineAttenuationUp, mediaconverterMIB=mediaconverterMIB, mcrMediaReset=mcrMediaReset, chassisSerialNumber=chassisSerialNumber, accessServiceHTTPD=accessServiceHTTPD, ldapEnableTLS=ldapEnableTLS, snmpTapGlobHostRetries=snmpTapGlobHostRetries, timeSummerRecStartWeek=timeSummerRecStartWeek, mcrMediaPortTable=mcrMediaPortTable, cm10gConfigPort1TxDitherEnable=cm10gConfigPort1TxDitherEnable, cm100LedSlotIndex=cm100LedSlotIndex, cm1110CopperLPRFStatus=cm1110CopperLPRFStatus, mcrXfpLowM52VCurrentWarnRecov=mcrXfpLowM52VCurrentWarnRecov, ipv6AddressSendAdvertise=ipv6AddressSendAdvertise, ipv6TunnelName=ipv6TunnelName, cm1110PortOutFcsErrs=cm1110PortOutFcsErrs, cm110PortCollisions=cm110PortCollisions, cm110PortExcessives=cm110PortExcessives, mcrMediaRecovCommunication=mcrMediaRecovCommunication, adminStatus=adminStatus, emailSMTPUsername=emailSMTPUsername, cm10gtConfigPort1WavelengthValue=cm10gtConfigPort1WavelengthValue, mcrChassisSlotEntry=mcrChassisSlotEntry, mcrSfpLowTxBiasWarnRecov=mcrSfpLowTxBiasWarnRecov, cm1110HwJmp6AutoMDIX=cm1110HwJmp6AutoMDIX, mcrSfpSpeedMismatch=mcrSfpSpeedMismatch, cm1110ConfigFiber8021pPriority=cm1110ConfigFiber8021pPriority, cm10gLedsSlotIndex=cm10gLedsSlotIndex, cm1110FiberPauseEnh=cm1110FiberPauseEnh, ldapPort=ldapPort, localUsersStatusEntry=localUsersStatusEntry, snmpTrapHostVersion=snmpTrapHostVersion, cm1000FiberSpeed=cm1000FiberSpeed, mcrSfpLowTxPowerAlarm=mcrSfpLowTxPowerAlarm, exCMLedPWR=exCMLedPWR, authIpHostEntry=authIpHostEntry, exCMVdslStatusActualSnrUs4=exCMVdslStatusActualSnrUs4, radiusAccountingPort=radiusAccountingPort, cm110HwJmp6AutoMDIX=cm110HwJmp6AutoMDIX, cm1110PortResetCounters=cm1110PortResetCounters, cm100mmHwJmp5ConfigMode=cm100mmHwJmp5ConfigMode, cm10gtTable=cm10gtTable, exCMHwSw5Loopback=exCMHwSw5Loopback, cm1000FixedTable=cm1000FixedTable, mcrAlarmRelayEngaged=mcrAlarmRelayEngaged, cm10gConfigPort1WavelengthEnable=cm10gConfigPort1WavelengthEnable, cm1000mmFiber2LPRFStatus=cm1000mmFiber2LPRFStatus, cm110PortDeferreds=cm110PortDeferreds, sshServerVerbose=sshServerVerbose, mcrModuleSubTypeInserted=mcrModuleSubTypeInserted, SlotNumber=SlotNumber, localEventLogAlertLevel=localEventLogAlertLevel, cm1000ConfigEntry=cm1000ConfigEntry, cm110VctSlotIndex=cm110VctSlotIndex, mcrXfpLowLaserTempAlarm=mcrXfpLowLaserTempAlarm, sfpDmiHighTempWarn=sfpDmiHighTempWarn, OnOffValue=OnOffValue, snmpCommunityTable=snmpCommunityTable, xfpDmiLowAuxWarn=xfpDmiLowAuxWarn, timeSntpServerAuthentication=timeSntpServerAuthentication, cm1110PortInFcsErrs=cm1110PortInFcsErrs, mcrMediaLinkUp=mcrMediaLinkUp, cm100mmLedPWR=cm100mmLedPWR, cm110CopperLinkStatus=cm110CopperLinkStatus, exCMConfigVdslPriorityMap4=exCMConfigVdslPriorityMap4, exCMVdslStatusActualSnrUs0=exCMVdslStatusActualSnrUs0, mcrXfpLow33VoltWarn=mcrXfpLow33VoltWarn, cm10gtConfigSlotIndex=cm10gtConfigSlotIndex, ipv6AddressTable=ipv6AddressTable, exCMConfigVdslPriorityPrecedence=exCMConfigVdslPriorityPrecedence, cm1110LedPWR=cm1110LedPWR, cm10gConfigFiberFaultAlert=cm10gConfigFiberFaultAlert, mcrXfpLowTecCurrentWarnRecov=mcrXfpLowTecCurrentWarnRecov, syslogEnabled=syslogEnabled, cm100HwSw6Loopback=cm100HwSw6Loopback, mcrXfpHighVCC3Warn=mcrXfpHighVCC3Warn, cm10gtHwSw5Unused=cm10gtHwSw5Unused, mcrPsmuModelDesc=mcrPsmuModelDesc, hostTable=hostTable, mcrLinkTestError=mcrLinkTestError, mcrModuleoOutStandWarnAlarms=mcrModuleoOutStandWarnAlarms, mcrSfpLowTxBiasAlarmRecov=mcrSfpLowTxBiasAlarmRecov, nisDomain=nisDomain, exCMConfigEthernetAutoNegAdv100HDX=exCMConfigEthernetAutoNegAdv100HDX, mcrSfpHighRxPowerAlarm=mcrSfpHighRxPowerAlarm, exCMVdslStatsSeverelyErroredSecsRemote=exCMVdslStatsSeverelyErroredSecsRemote, mcrXfpHighM52VoltWarn=mcrXfpHighM52VoltWarn, mgtEthStatsBroadcastAddress=mgtEthStatsBroadcastAddress, exCMConfigEthernetFilterUnknownMulticast=exCMConfigEthernetFilterUnknownMulticast, cm110HwSw1TpAutoNegotiation=cm110HwSw1TpAutoNegotiation, exCMPortLates=exCMPortLates, accessServiceHTTPSD=accessServiceHTTPSD, cm110ConfigCopperExtendDistance=cm110ConfigCopperExtendDistance, adminDiagFileAvailable=adminDiagFileAvailable, mcrSfpHighRxPowerAlarmRecov=mcrSfpHighRxPowerAlarmRecov)
mibBuilder.exportSymbols("PERLE-MCR-MGT-MIB", dynamicDNSSSLCipherEntry=dynamicDNSSSLCipherEntry, mcrXfpHigh5VoltAlarmRecov=mcrXfpHigh5VoltAlarmRecov, exCMConfigVdslPriorityMap7=exCMConfigVdslPriorityMap7, mcrXfpLowVEE5Alarm=mcrXfpLowVEE5Alarm, sntpStatStratum=sntpStatStratum, xfpDmiHighAux1Alarm=xfpDmiHighAux1Alarm, cm1110LedLKF=cm1110LedLKF, cm1110FiberConnType=cm1110FiberConnType, exCMConfigEthernetPriorityMap0=exCMConfigEthernetPriorityMap0, cm10gtPort2LPRFStatus=cm10gtPort2LPRFStatus, mcrPsmuPsuFail=mcrPsmuPsuFail, ipv6AddressStatus=ipv6AddressStatus, cm1110ConfigFiberEgressLimit=cm1110ConfigFiberEgressLimit, exCMConfigVdslDefaultVlanId=exCMConfigVdslDefaultVlanId, cm1110AvctSlotIndex=cm1110AvctSlotIndex, cm100HwJmp6AutoMDI=cm100HwJmp6AutoMDI, cm4gpt=cm4gpt, cm4gptPort2LinkStatus=cm4gptPort2LinkStatus, cm1110ConfigStatus=cm1110ConfigStatus, mgtChassisSlotPowerScheduleEntry=mgtChassisSlotPowerScheduleEntry, mcrMgtSnmpTrapHostFail=mcrMgtSnmpTrapHostFail, mcrXfpHigh18VCurrentWarn=mcrXfpHigh18VCurrentWarn, cm100LedTable=cm100LedTable, cm1110PortInJabbers=cm1110PortInJabbers, serviceAutoDiscovery=serviceAutoDiscovery, cm10gPort1PauseEnh=cm10gPort1PauseEnh, exCMEthernetAutoNegState=exCMEthernetAutoNegState, emailSubject=emailSubject, radiusGroup=radiusGroup, exCMConfigEthernetIpTosPriority=exCMConfigEthernetIpTosPriority, systemDomainName=systemDomainName, cm1110ConfigCopperAutoSpeedDownshift=cm1110ConfigCopperAutoSpeedDownshift, cm110ConfigFiberPriorityMap1=cm110ConfigFiberPriorityMap1, mcrMgtEtheLinkDown=mcrMgtEtheLinkDown, snmpTrapHostEnable=snmpTrapHostEnable, exCMPortOutPauses=exCMPortOutPauses, cm110ConfigCopperPriorityMap4=cm110ConfigCopperPriorityMap4, cm1110CopperDuplex=cm1110CopperDuplex, mcrXfpPowerExceeded=mcrXfpPowerExceeded, cm1110CopperSpeed=cm1110CopperSpeed, sfpDmiLowVoltWarn=sfpDmiLowVoltWarn, exCMConfigVdslPriorityMap3=exCMConfigVdslPriorityMap3, cm1110PortInUnicasts=cm1110PortInUnicasts, cm110ConfigPriorityToEgressQueueMap5=cm110ConfigPriorityToEgressQueueMap5, cm1110ConfigCopperPauseEnh=cm1110ConfigCopperPauseEnh, cm1000HwSw1FiberAutoNeg=cm1000HwSw1FiberAutoNeg, timeSummerMode=timeSummerMode, dynamicDNSSSLCipherStatus=dynamicDNSSSLCipherStatus, exCMConfigVdslFilterUnknownMulticast=exCMConfigVdslFilterUnknownMulticast, mcrMgtTftpDownloadSuccess=mcrMgtTftpDownloadSuccess, mcrXfpHigh33VoltWarnRecov=mcrXfpHigh33VoltWarnRecov, cm1110ConfigCopperVlanTaggingAction=cm1110ConfigCopperVlanTaggingAction, mcrChassisCommTempSensorRecov=mcrChassisCommTempSensorRecov, sshServerAuthRSA=sshServerAuthRSA, mcrXfpLowVCC3WarnRecov=mcrXfpLowVCC3WarnRecov, mcrMediaPortEntry=mcrMediaPortEntry, cm1110PortInFiltered=cm1110PortInFiltered, mcrMgtUpTime=mcrMgtUpTime, cm1110HwSw5TpSpeed=cm1110HwSw5TpSpeed, snmpTrapHostEntry=snmpTrapHostEntry, radiusAccounting=radiusAccounting, interfacev6Index=interfacev6Index, serviceDHCPv6NetworkPrefix=serviceDHCPv6NetworkPrefix, cm1110ConfigPriorityToEgressQueueMap7=cm1110ConfigPriorityToEgressQueueMap7, exCMConfigPriorityToEgressQueueMap4=exCMConfigPriorityToEgressQueueMap4, cm10gPortLoopBack=cm10gPortLoopBack, cm1000CopperSpeed=cm1000CopperSpeed, mgtNetworkGroup=mgtNetworkGroup, cm1110HwJmp5ConfigMode=cm1110HwJmp5ConfigMode, mcrBandwidthLevelUpstreamLow=mcrBandwidthLevelUpstreamLow, cm110ConfigFiberPriorityMap2=cm110ConfigFiberPriorityMap2, cm1000ConfigCopperPortEnable=cm1000ConfigCopperPortEnable, cm100mmFiber2Speed=cm100mmFiber2Speed, cm1000mmConfigFiber1PortEnable=cm1000mmConfigFiber1PortEnable, securidStatus=securidStatus, mcrChassisEntry=mcrChassisEntry, mcrChassisTemperatureRecover=mcrChassisTemperatureRecover, mcrXfpHighVCC2Alarm=mcrXfpHighVCC2Alarm, mcrPsmuPsuSerialNumber=mcrPsmuPsuSerialNumber, cm1110PortPkts64Octets=cm1110PortPkts64Octets, snmpTrapHostUdpPort=snmpTrapHostUdpPort, exCMEthernetSpeed=exCMEthernetSpeed, exCMVdslStatsCodeViolationRemote=exCMVdslStatsCodeViolationRemote, mcrChassisFail=mcrChassisFail, exCMVdslStatsErroredSecsLocal=exCMVdslStatsErroredSecsLocal, nettxfrDirection=nettxfrDirection, cm1000mmFiberLoopBack=cm1000mmFiberLoopBack, cm1000LedEntry=cm1000LedEntry, cm1110ConfigFiberDefaultVlanId=cm1110ConfigFiberDefaultVlanId, nettxfrUserName=nettxfrUserName, mcrMGTMIB=mcrMGTMIB, gatewayInterface=gatewayInterface, cm110RateConvVctEntry=cm110RateConvVctEntry, webManagerStatus=webManagerStatus, cm100mmConfigFiber1PortEnable=cm100mmConfigFiber1PortEnable, cm100mmLedLK2=cm100mmLedLK2, exCMConfigEthernetPriorityPrecedence=exCMConfigEthernetPriorityPrecedence, nettxfrSessionInUse=nettxfrSessionInUse, cm100ConfigCopperPortEnable=cm100ConfigCopperPortEnable, authHostIpAddr=authHostIpAddr, localUserAccountsEntry=localUserAccountsEntry, cm110VctTxPairAmplitude=cm110VctTxPairAmplitude, exCMPortDeferreds=exCMPortDeferreds, exCMEthernetLinkStatus=exCMEthernetLinkStatus, ipv6TunnelRemoteHost=ipv6TunnelRemoteHost, hostEntry=hostEntry, cm10gConfigPort2EdcMode=cm10gConfigPort2EdcMode, cm100HwSw5Pause=cm100HwSw5Pause, perle=perle, Ipv4v6Address=Ipv4v6Address, cm110ConfigCopperPriorityMap3=cm110ConfigCopperPriorityMap3, cm1000mmConfigStatus=cm1000mmConfigStatus, exCMVdslStatusActualLineAttenuationUs4=exCMVdslStatusActualLineAttenuationUs4, powerSchedSlotIndex=powerSchedSlotIndex, mgtEthStatsTxCarrierErrs=mgtEthStatsTxCarrierErrs, mcrXfpLow33VCurrentWarnRecov=mcrXfpLow33VCurrentWarnRecov, cm10gtConfigPort2Name=cm10gtConfigPort2Name, cm10gPort1Duplex=cm10gPort1Duplex, cm110ConfigCopperPriorityMap1=cm110ConfigCopperPriorityMap1, exCMConfigEthernetCongestionPolicy=exCMConfigEthernetCongestionPolicy, snmpV3ReadOnlyPrivacyAlgorithm=snmpV3ReadOnlyPrivacyAlgorithm, mgtEthStatsBroadcast=mgtEthStatsBroadcast, sshServerStatus=sshServerStatus, authMacHostTable=authMacHostTable, exCMAvctTxRxPair1Distance=exCMAvctTxRxPair1Distance, cm1000mmConfigFiberFaultAlert=cm1000mmConfigFiberFaultAlert, cm110ConfigFiberDiscardTaggedFrames=cm110ConfigFiberDiscardTaggedFrames, cm100FiberLinkStatus=cm100FiberLinkStatus, sfpDmiLowRxPowerAlarm=sfpDmiLowRxPowerAlarm, selectionFromTimeZoneList=selectionFromTimeZoneList, cfgTimeFormat=cfgTimeFormat, cm1110PortMultiples=cm1110PortMultiples, cm10gModelname=cm10gModelname, mgtEthStatsTxQLen=mgtEthStatsTxQLen, mcrXfpHighVCC5Warn=mcrXfpHighVCC5Warn, snmpV3ReadOnlyAuthAlgorithm=snmpV3ReadOnlyAuthAlgorithm, cm1000mmFiber2PauseEnh=cm1000mmFiber2PauseEnh, exCMVdslStatusActualDataRateUp=exCMVdslStatusActualDataRateUp, emailSMTPHost=emailSMTPHost, exCMAvctTxRxPair3Results=exCMAvctTxRxPair3Results, portMediaType=portMediaType, cm100mmSlotIndex=cm100mmSlotIndex, userIndex=userIndex, cm110VctRxPairAmplitude=cm110VctRxPairAmplitude, cm1000mmFiber2Duplex=cm1000mmFiber2Duplex, snmpCommunityPermission=snmpCommunityPermission, mgtEthStatsDynamic=mgtEthStatsDynamic, cm10gPort1Speed=cm10gPort1Speed, mgtEthStatsRxMulticast=mgtEthStatsRxMulticast, cm1110PortInMulticasts=cm1110PortInMulticasts, cm1110FiberDuplex=cm1110FiberDuplex, cm110ConfigFiberPriorityMap4=cm110ConfigFiberPriorityMap4, ContainerStatus=ContainerStatus, mcrPsmuIndex=mcrPsmuIndex, cm10gConfigLinkMode=cm10gConfigLinkMode, mcrXfpLow5VCurrentWarn=mcrXfpLow5VCurrentWarn, cm100mmFiber2ConnType=cm100mmFiber2ConnType, mgtAlertGroup=mgtAlertGroup, portType=portType, cm110RateConvEntry=cm110RateConvEntry, mcrXfpLow5VCurrentWarnRecov=mcrXfpLow5VCurrentWarnRecov, exCMConfigPriorityToEgressQueueMap7=exCMConfigPriorityToEgressQueueMap7, mcrSfpHighTempAlarm=mcrSfpHighTempAlarm, exCMVdslStatsSlotIndex=exCMVdslStatsSlotIndex, mcrXfpLow18VoltWarnRecov=mcrXfpLow18VoltWarnRecov, mcrUserDefinedModuleName=mcrUserDefinedModuleName, exCMAvctStatus=exCMAvctStatus, exCMAvctTxRxPair4Results=exCMAvctTxRxPair4Results, cm1000HwSw5Pause=cm1000HwSw5Pause, cm1110CopperConnType=cm1110CopperConnType, xfpDmiReachEBW50125=xfpDmiReachEBW50125, tacacsGroup=tacacsGroup, cm10gtLedTable=cm10gtLedTable, mcrXfpHighM52VoltWarnRecov=mcrXfpHighM52VoltWarnRecov, mcrMediaPortBandwidth=mcrMediaPortBandwidth, sntpStatAddress=sntpStatAddress, cm110ConfigCopperIpTosPriority=cm110ConfigCopperIpTosPriority, exCMConfigPriorityToEgressQueueMap1=exCMConfigPriorityToEgressQueueMap1, cm110ConfigCopperPriorityMap6=cm110ConfigCopperPriorityMap6, sfpDmiLinkReach625125=sfpDmiLinkReach625125, sshServerCipherBlowfish=sshServerCipherBlowfish, dynamicDNS=dynamicDNS, cm1110ConfigFiberPortEnable=cm1110ConfigFiberPortEnable, cm1000mmFiber1Duplex=cm1000mmFiber1Duplex, cm100mmFiber1FarEndFault=cm100mmFiber1FarEndFault, cm10gPort2Duplex=cm10gPort2Duplex, timeSummerRecStartHour=timeSummerRecStartHour, alertSnmpTrapGroup=alertSnmpTrapGroup, sfpDmiHighTxBiasAlarm=sfpDmiHighTxBiasAlarm, syslogSeverityLevel=syslogSeverityLevel, cm1000HwSw4Duplex=cm1000HwSw4Duplex, mcrXfpLowTecCurrentAlarmRecov=mcrXfpLowTecCurrentAlarmRecov, mcrModuleDiagStatus=mcrModuleDiagStatus, cm100ConfigFiberPortEnable=cm100ConfigFiberPortEnable, exCMVdslStatsUnavailableSecsLocal=exCMVdslStatsUnavailableSecsLocal, cm10gtPort1PauseEnh=cm10gtPort1PauseEnh, sfpDmiHighTempAlarm=sfpDmiHighTempAlarm, interfacev6Address=interfacev6Address, mcrSfpDmiModuleEntry=mcrSfpDmiModuleEntry, exCMEthernetAutoSpeedDownshift=exCMEthernetAutoSpeedDownshift, cm1000ConfigTable=cm1000ConfigTable, cm110PortOutPauses=cm110PortOutPauses, cm10gtPort2PauseEnh=cm10gtPort2PauseEnh, cm1110LedCopperSpeed=cm1110LedCopperSpeed, cm1000FiberPauseEnh=cm1000FiberPauseEnh, exCMAvctTxRxPair2Distance=exCMAvctTxRxPair2Distance, cm100HwJmp5ConfigMode=cm100HwJmp5ConfigMode, ldapClientName=ldapClientName, portEnable=portEnable, cm1110AvctStart=cm1110AvctStart, cm10gConfigPort1Enable=cm10gConfigPort1Enable, mcrXfpLow18VoltAlarmRecov=mcrXfpLow18VoltAlarmRecov, exCMConfigVdslMaxInterleaveDelayDown=exCMConfigVdslMaxInterleaveDelayDown, cm1110FiberLPRFStatus=cm1110FiberLPRFStatus, cm1000ConfigModuleName=cm1000ConfigModuleName, mcrXfpHighLaserTempAlarm=mcrXfpHighLaserTempAlarm, exCMPortInGoodOctets=exCMPortInGoodOctets, cm10gConfigPort2ChannelEnable=cm10gConfigPort2ChannelEnable, mcrXfpHighLaserTempWarn=mcrXfpHighLaserTempWarn, mcrXfpLowVCC2Warn=mcrXfpLowVCC2Warn, hostIndex=hostIndex, systemName=systemName, securidLegacy=securidLegacy, cm100CopperCrossOver=cm100CopperCrossOver, timeSummerRecEndMonth=timeSummerRecEndMonth, cm100mmFiber1LinkStatus=cm100mmFiber1LinkStatus, cm1000ConfigCopperLowPower=cm1000ConfigCopperLowPower, cm100FiberConnType=cm100FiberConnType, timeSummerFixEndMonth=timeSummerFixEndMonth, exCMVdslStatsSeverelyErroredSecsLocal=exCMVdslStatsSeverelyErroredSecsLocal, sntpStatGroup=sntpStatGroup, exCMConfigVdslPortEnable=exCMConfigVdslPortEnable, kerberosDomain=kerberosDomain, radiusNasSpecifyIpv6Address=radiusNasSpecifyIpv6Address, exCMPortExcessives=exCMPortExcessives, securidType=securidType, mgtEthStatsRxPackets=mgtEthStatsRxPackets, xfpDmiAux2Type=xfpDmiAux2Type, productId=productId, accessServicesStatus=accessServicesStatus, dynamicDNSUserName=dynamicDNSUserName, mcrXfpHigh33VoltWarn=mcrXfpHigh33VoltWarn, acessServiceSnmpD=acessServiceSnmpD, cm1000mmFiber1ConnType=cm1000mmFiber1ConnType, cm4gptConfigLinkMode=cm4gptConfigLinkMode, userStatusName=userStatusName, ldapPasswordEncryption=ldapPasswordEncryption, mcrXfpHigh5VCurrentAlarm=mcrXfpHigh5VCurrentAlarm, exCMConfigVdslPortName=exCMConfigVdslPortName, mcrMediaBadImage=mcrMediaBadImage, cm1110PortPkts256to511Octets=cm1110PortPkts256to511Octets, exCMAvctTxRxPair4Amplitude=exCMAvctTxRxPair4Amplitude, interfacev6Name=interfacev6Name, cm10gHwJmp5ConfigMode=cm10gHwJmp5ConfigMode)
mibBuilder.exportSymbols("PERLE-MCR-MGT-MIB", cm110FiberFarEndFault=cm110FiberFarEndFault, mcrXfpLow5VoltAlarmRecov=mcrXfpLow5VoltAlarmRecov, cm1000FiberLoopBack=cm1000FiberLoopBack, mcrSfpRemoved=mcrSfpRemoved, gatewayStatus=gatewayStatus, kerberosStatus=kerberosStatus, cm10gPort2AutoNegState=cm10gPort2AutoNegState, cm1000Fixed=cm1000Fixed, mgtDateTimeStatus=mgtDateTimeStatus, exCMConfigVdslPriorityMap0=exCMConfigVdslPriorityMap0, cm1000FiberAutoNegState=cm1000FiberAutoNegState, cm1110ConfigCopperDuplex=cm1110ConfigCopperDuplex, ldapGroup=ldapGroup, mcrXfpHighVCC2Warn=mcrXfpHighVCC2Warn, mgtEthStatsRxErrors=mgtEthStatsRxErrors, exCMEthernetConnType=exCMEthernetConnType, exCMVdslStatusActualLineAttenuationUs0=exCMVdslStatusActualLineAttenuationUs0, ipv6AddressEntry=ipv6AddressEntry, snmpV3ReadWriteAuthAlgorithm=snmpV3ReadWriteAuthAlgorithm, nettxfrStatus=nettxfrStatus, cm1000FiberDuplex=cm1000FiberDuplex, mcrMgtAuthFail=mcrMgtAuthFail, exCMConfigVdslFilterUnknownUnicast=exCMConfigVdslFilterUnknownUnicast, exCMVdslStatusActualSignalAttenuationUs2=exCMVdslStatusActualSignalAttenuationUs2, remoteMgtIpAddress=remoteMgtIpAddress, mcrSfpHighTempAlarmRecov=mcrSfpHighTempAlarmRecov, ipv6ServicesGroup=ipv6ServicesGroup, cm1110HwSw1TpAutoNegotiation=cm1110HwSw1TpAutoNegotiation, exCMVdslStatusPrevDataRateDown=exCMVdslStatusPrevDataRateDown, firmwareUpdateBundleVersionCm1000OrCm1000Sfp=firmwareUpdateBundleVersionCm1000OrCm1000Sfp, snmpV3ReadOnlyPrivacyPasswd=snmpV3ReadOnlyPrivacyPasswd, cm110MediaPortIndex=cm110MediaPortIndex, xfpDmiHighAux2Alarm=xfpDmiHighAux2Alarm, httpsPassphrase=httpsPassphrase, exCMVdslStatusActualSignalAttenuationDs4=exCMVdslStatusActualSignalAttenuationDs4, tacacsAuthorization=tacacsAuthorization, exCMConfigVdslSymmetry=exCMConfigVdslSymmetry, cm1110ConfigCopperSpeed=cm1110ConfigCopperSpeed, exCMVdslStatusActualSignalAttenuationUs0=exCMVdslStatusActualSignalAttenuationUs0, cm1000Modelname=cm1000Modelname, sfpDmiLowTxPowerAlarm=sfpDmiLowTxPowerAlarm, cm110PortPkts64Octets=cm110PortPkts64Octets, mgtEthStatsSpeedDuplex=mgtEthStatsSpeedDuplex, cm110ConfigStatus=cm110ConfigStatus, cm10gPort2PauseEnh=cm10gPort2PauseEnh, cm1110ConfigFiberPortName=cm1110ConfigFiberPortName, cm4gptLedTable=cm4gptLedTable, networkTimeGroup=networkTimeGroup, mcrXfpHigh18VCurrentAlarm=mcrXfpHigh18VCurrentAlarm, cm110ConfigFiberDuplex=cm110ConfigFiberDuplex, mcrManagementGroup=mcrManagementGroup, mcrChassisTemperatureAlarm=mcrChassisTemperatureAlarm, mcrSfpHighVoltAlarm=mcrSfpHighVoltAlarm, mcrMgt=mcrMgt, cm110RateConvStatsEntry=cm110RateConvStatsEntry, cm1110ConfigModuleName=cm1110ConfigModuleName, cm110ConfigCopperEgressLimit=cm110ConfigCopperEgressLimit, cm10gtConfigPort1FecEnable=cm10gtConfigPort1FecEnable, mcrSfpHighTxPowerAlarm=mcrSfpHighTxPowerAlarm, exCMVdslStatusActualLineAttenuationDs1=exCMVdslStatusActualLineAttenuationDs1, cm4gptConfigSlotIndex=cm4gptConfigSlotIndex, cm1000LedLKF=cm1000LedLKF, mcrBandwidthLevelDownstreamLow=mcrBandwidthLevelDownstreamLow, mcrSfpHighVoltWarnRecov=mcrSfpHighVoltWarnRecov, timeSummerFixStartHour=timeSummerFixStartHour, mcrSfpLowTempAlarm=mcrSfpLowTempAlarm, cm110ConfigFiberEgressLimit=cm110ConfigFiberEgressLimit, cm10gConfigEntry=cm10gConfigEntry, accessServicesSessInactTimeout=accessServicesSessInactTimeout, cm10gConfigPort2WavelengthValue=cm10gConfigPort2WavelengthValue, timeSummerRecStartMonth=timeSummerRecStartMonth, cm1000mmFiber1LinkStatus=cm1000mmFiber1LinkStatus, cm110VctTxPairDistance=cm110VctTxPairDistance, nettxfrMCSlotNumber=nettxfrMCSlotNumber, mcrXfpHigh5VoltWarn=mcrXfpHigh5VoltWarn, mcrPsmuBootloaderVersion=mcrPsmuBootloaderVersion, systemDateTimeAndOffset=systemDateTimeAndOffset, serviceDHCPv6=serviceDHCPv6, mgtUsersAlwaysAttemptSecond=mgtUsersAlwaysAttemptSecond, exCMVdslStatusActualInpDown=exCMVdslStatusActualInpDown, mgtEthStatsRunning=mgtEthStatsRunning, mcrSfpPortShutdown=mcrSfpPortShutdown, cm1000mmFiber1LPRFStatus=cm1000mmFiber1LPRFStatus, cm10gConfigPort2FecEnable=cm10gConfigPort2FecEnable, cm10gPortTestMode=cm10gPortTestMode, snmpTrapEnabled=snmpTrapEnabled, exCMAvctTxRxPair1Results=exCMAvctTxRxPair1Results, exCMVdslStatusActualSnrUs3=exCMVdslStatusActualSnrUs3, systemDomainPrefix=systemDomainPrefix, exCMPortSingles=exCMPortSingles, mcrSfpPortShutdownRecov=mcrSfpPortShutdownRecov, mgtEthStatsSubnetMask=mgtEthStatsSubnetMask, exCMConfigEthernet8021pPriority=exCMConfigEthernet8021pPriority, exCMConfigPriorityToEgressQueueMap3=exCMConfigPriorityToEgressQueueMap3, mcrMediaPortDescr=mcrMediaPortDescr, mcrXfpHigh5VoltWarnRecov=mcrXfpHigh5VoltWarnRecov, cm1110PortCollisions=cm1110PortCollisions, cm1000ConfigJumboPackets=cm1000ConfigJumboPackets, mgtAcessServicesGroup=mgtAcessServicesGroup, cm1110LedFDC=cm1110LedFDC, cm110PortInUnderSizes=cm110PortInUnderSizes, mcrMgtLedLKC=mcrMgtLedLKC, exCMPortHCInGoodOctets=exCMPortHCInGoodOctets, mcrMediaConfMismatchResolv=mcrMediaConfMismatchResolv, cm10gLedPWR=cm10gLedPWR, cm1000mmHwSw3FiberFaultAlert=cm1000mmHwSw3FiberFaultAlert, cm100mmLedEntry=cm100mmLedEntry, exCMVdslStatsCorrectedRemote=exCMVdslStatsCorrectedRemote, dynamicDNSSSLOrganisationUnit=dynamicDNSSSLOrganisationUnit, cm110LedTable=cm110LedTable, exCMConfigEthernetAutoNegAdv1000FDX=exCMConfigEthernetAutoNegAdv1000FDX, exCMVdslStatusActualSnrUp=exCMVdslStatusActualSnrUp, cm10gtConfigTable=cm10gtConfigTable, cm1110ConfigFiberCongestionPolicy=cm1110ConfigFiberCongestionPolicy, chassisModelName=chassisModelName, mcrXfpHigh18VCurrentWarnRecov=mcrXfpHigh18VCurrentWarnRecov, cm100mmConfigFiber2PortName=cm100mmConfigFiber2PortName, mcrSfpLostComm=mcrSfpLostComm, mcrMgtAuthSuccess=mcrMgtAuthSuccess, exCMConfigVdslDefaultPriority=exCMConfigVdslDefaultPriority, exCMEthernetMDI=exCMEthernetMDI, securidMasterHost=securidMasterHost, cm1110PortPkts1024toMaxOctets=cm1110PortPkts1024toMaxOctets, cm4gptLedLK2=cm4gptLedLK2, exCMHwJmp5ConfigMode=exCMHwJmp5ConfigMode, cm1110ConfigFiberPriorityMap1=cm1110ConfigFiberPriorityMap1, exCMConfigEthernetAutoSpeedDownshift=exCMConfigEthernetAutoSpeedDownshift, cm1000FixedEntry=cm1000FixedEntry, emailStatus=emailStatus, cm1000CopperConnType=cm1000CopperConnType, cm110VctRxPairResults=cm110VctRxPairResults, chassisTemperature=chassisTemperature, cm10gPort1ReceiveStatus=cm10gPort1ReceiveStatus, cm1110ConfigFiberDiscardTaggedFrames=cm1110ConfigFiberDiscardTaggedFrames, cm100LedLKF=cm100LedLKF, exCMConfigVdslDiscardUntaggedFrames=exCMConfigVdslDiscardUntaggedFrames, mcrXfpLowLaserTempWarnRecov=mcrXfpLowLaserTempWarnRecov, exCMPortPkts64Octets=exCMPortPkts64Octets, cm100HwSw3FarEndFault=cm100HwSw3FarEndFault, gatewayTable=gatewayTable, cm1110MediaPortIndex=cm1110MediaPortIndex, exCMLedTable=exCMLedTable, cm1110PortPkts512to1023Octets=cm1110PortPkts512to1023Octets, cm1110HwSw7Loopback=cm1110HwSw7Loopback, mcrSfpHighRxPowerWarn=mcrSfpHighRxPowerWarn, tacacsAccountingSecondaryHost=tacacsAccountingSecondaryHost, cm110ConfigCopperPriorityMap7=cm110ConfigCopperPriorityMap7, cm110PortPkts256to511Octets=cm110PortPkts256to511Octets, cm10gLedLK1=cm10gLedLK1, exCMAvctEntry=exCMAvctEntry, serviceDHCPv6IPAddresses=serviceDHCPv6IPAddresses, cm1110ConfigCopperPortEnable=cm1110ConfigCopperPortEnable, cm10gPort2ReceiveStatus=cm10gPort2ReceiveStatus, cm10gtHwSw4EnergyEfficentEthernet=cm10gtHwSw4EnergyEfficentEthernet, mcrMgtSntpServFail=mcrMgtSntpServFail, mcrModuleFirmwareUpdate=mcrModuleFirmwareUpdate, chassisReset=chassisReset, authorizedHostGroup=authorizedHostGroup, nettxfrEntry=nettxfrEntry, exCMEthernetDuplex=exCMEthernetDuplex, mcrMgtLedSlotIndex=mcrMgtLedSlotIndex, mcrChassisSlotPoweredOn=mcrChassisSlotPoweredOn, tacacsAccountingPort=tacacsAccountingPort, mgtEthStatsPromiscuous=mgtEthStatsPromiscuous, cm1110AvctTxRxPair1Amplitude=cm1110AvctTxRxPair1Amplitude, cm110ConfigUnidirectionalEthernet=cm110ConfigUnidirectionalEthernet, mcrMGT=mcrMGT, cm1000FiberReceiveStatus=cm1000FiberReceiveStatus, cm110PortPkts128to255Octets=cm110PortPkts128to255Octets, mcrCurrentPowerState=mcrCurrentPowerState, cm110ConfigPriorityToEgressQueueMap4=cm110ConfigPriorityToEgressQueueMap4, cm1000mmModelname=cm1000mmModelname, mcrMgtSlotIndex=mcrMgtSlotIndex, cm100mmFiber1Speed=cm100mmFiber1Speed, exCMVdslStatsLossOfSignalSecsRemote=exCMVdslStatsLossOfSignalSecsRemote, cm110PortLates=cm110PortLates, cm1110ConfigCopperDiscardUntaggedFrames=cm1110ConfigCopperDiscardUntaggedFrames, exCMHwSw10InterlinkFaultFeedback=exCMHwSw10InterlinkFaultFeedback, mcrXfpHigh33VCurrentWarn=mcrXfpHigh33VCurrentWarn, dnsEntry=dnsEntry, exCMConfigEthernetPriorityMap1=exCMConfigEthernetPriorityMap1, exCMConfigEthernetDiscardTaggedFrames=exCMConfigEthernetDiscardTaggedFrames, snmpCommunityEntry=snmpCommunityEntry, cm1110ConfigPriorityToEgressQueueMap3=cm1110ConfigPriorityToEgressQueueMap3, cm10gtConfigStatus=cm10gtConfigStatus, cm1110PortHCInGoodOctets=cm1110PortHCInGoodOctets, cm1000mmFiber2AutoNegState=cm1000mmFiber2AutoNegState, exCMStatsEntry=exCMStatsEntry, exCMEthernetLPRFStatus=exCMEthernetLPRFStatus, cm100mmFiber2FarEndFault=cm100mmFiber2FarEndFault, mcrXfpHigh5VCurrentWarnRecov=mcrXfpHigh5VCurrentWarnRecov, cm100mmModelName=cm100mmModelName, exCMConfigEthernetDefaultVlanId=exCMConfigEthernetDefaultVlanId, mcrSfpHighRxPowerWarnRecov=mcrSfpHighRxPowerWarnRecov, cm10gtConfigPort2Enable=cm10gtConfigPort2Enable, cm4gptConfigTable=cm4gptConfigTable, mcrMgtReset=mcrMgtReset, mcrSfpHighTxPowerWarnRecov=mcrSfpHighTxPowerWarnRecov, sfpDmiCurrentRxPowerState=sfpDmiCurrentRxPowerState, interfacev6StatsTable=interfacev6StatsTable, cm110ConfigCopperAutoNegAdv100FDX=cm110ConfigCopperAutoNegAdv100FDX, mcrPsmuModelName=mcrPsmuModelName, mcrMGTMIBCompliances=mcrMGTMIBCompliances, exCMConfigEthernetPriorityMap6=exCMConfigEthernetPriorityMap6, mcrXfpLow18VCurrentAlarm=mcrXfpLow18VCurrentAlarm, kerberosRealm=kerberosRealm, fileFirmwareName=fileFirmwareName, exCMConfigVdslMinInpDown=exCMConfigVdslMinInpDown, cm110PortPkts1024toMaxOctets=cm110PortPkts1024toMaxOctets, exCMPortOutUnicasts=exCMPortOutUnicasts, cm1110ConfigFiberPriorityMap6=cm1110ConfigFiberPriorityMap6, cm110PortInFcsErrs=cm110PortInFcsErrs, timeSummerRecEndMin=timeSummerRecEndMin, exCMConfigVdslLowBandwidthAlarmUp=exCMConfigVdslLowBandwidthAlarmUp, userStatusMgtAccessType=userStatusMgtAccessType, ipv6TunnelTable=ipv6TunnelTable, mcrXfpHighLaserTempAlarmRecov=mcrXfpHighLaserTempAlarmRecov, cm1000ConfigFiberPortEnable=cm1000ConfigFiberPortEnable, mcrModuleTypes=mcrModuleTypes, xfpDmiLowAux1Warn=xfpDmiLowAux1Warn, mcrPsmuFanOk=mcrPsmuFanOk, cm1110ConfigCopperAutoNegAdv10FDX=cm1110ConfigCopperAutoNegAdv10FDX, authHostMacDescr=authHostMacDescr, networkIpAddress=networkIpAddress, mcrSfpHighTxBiasWarnRecov=mcrSfpHighTxBiasWarnRecov, sfpDmiNominalBitRate=sfpDmiNominalBitRate, mcrModuleModelDesc=mcrModuleModelDesc, tacacsStatus=tacacsStatus, snmpTrapHostTable=snmpTrapHostTable, cm1110ConfigPriorityToEgressQueueMap6=cm1110ConfigPriorityToEgressQueueMap6, cm10gConfigPort1FecPhase=cm10gConfigPort1FecPhase, exCMVdslStatsTimeElapsedLocal=exCMVdslStatsTimeElapsedLocal, cm10gtHwSw3FiberFaultAlert=cm10gtHwSw3FiberFaultAlert, cm1110RateConvStatsEntry=cm1110RateConvStatsEntry, interfacev6StatsEntry=interfacev6StatsEntry, exCMConfigTable=exCMConfigTable, cm110ConfigFiberCongestionPolicy=cm110ConfigFiberCongestionPolicy, cm4gptHwSw2FiberFaultAlert=cm4gptHwSw2FiberFaultAlert, tacacsPort=tacacsPort, cm10gtConfigPort1WavelengthEnable=cm10gtConfigPort1WavelengthEnable, snmpV3ReadOnlyAuthPasswd=snmpV3ReadOnlyAuthPasswd, cm1110ConfigCopper8021pPriority=cm1110ConfigCopper8021pPriority, cm10gtPort2AutoNegState=cm10gtPort2AutoNegState, cm1110ConfigFiberVlanTaggingAction=cm1110ConfigFiberVlanTaggingAction, mcrXfpHigh33VoltAlarm=mcrXfpHigh33VoltAlarm, cm100FixedEntry=cm100FixedEntry, gatewayIndex=gatewayIndex, ipv6serviceStatus=ipv6serviceStatus, cfgTemperatureUnits=cfgTemperatureUnits, cm110LedLKC=cm110LedLKC, powerSchedDayOfWeek=powerSchedDayOfWeek, exCMVdslStatusActualSignalAttenuationUs3=exCMVdslStatusActualSignalAttenuationUs3, cm1000LedPWR=cm1000LedPWR, cm110ConfigCopperPause=cm110ConfigCopperPause)
mibBuilder.exportSymbols("PERLE-MCR-MGT-MIB", dynamicDNSPassword=dynamicDNSPassword, exCMVdslStatusActualInpUp=exCMVdslStatusActualInpUp, mcrXfpHighM52VCurrentAlarm=mcrXfpHighM52VCurrentAlarm, GenericTableIndex=GenericTableIndex, cm1000FiberConnType=cm1000FiberConnType, snmpContact=snmpContact, cm110PortResetCounters=cm110PortResetCounters, cm100ConfigCopperPortName=cm100ConfigCopperPortName, cm110VctTxPairResults=cm110VctTxPairResults, mcrSfpLowTxBiasWarn=mcrSfpLowTxBiasWarn, cm1110ConfigCopperAutoNegAdv1000FDX=cm1110ConfigCopperAutoNegAdv1000FDX, cm1110FiberReceiveStatus=cm1110FiberReceiveStatus, firmwareUpdateBundleVersionCm10g=firmwareUpdateBundleVersionCm10g, cm4gptEntry=cm4gptEntry, cm10gConfigFiberAutoNeg=cm10gConfigFiberAutoNeg, cm100mmLedLK1=cm100mmLedLK1, mcrChassisTable=mcrChassisTable, firmwareUpdateBundleVersionCm1110=firmwareUpdateBundleVersionCm1110, exCMConfigUnidirectionalEthernet=exCMConfigUnidirectionalEthernet, portSpeed=portSpeed, mcrMGTMIBCompliance=mcrMGTMIBCompliance, mcrMediaConfigBackupRestore=mcrMediaConfigBackupRestore, cm1110FiberLinkStatus=cm1110FiberLinkStatus, mcrMgtSntpServRec=mcrMgtSntpServRec, exCMHwSw7EthSpeed=exCMHwSw7EthSpeed, nettxfrFileName=nettxfrFileName, cm1000FiberLinkStatus=cm1000FiberLinkStatus, cm110ConfigCopperDiscardTaggedFrames=cm110ConfigCopperDiscardTaggedFrames, snmpV3TrapUserUserName=snmpV3TrapUserUserName, mcrMediaConfUpdateFail=mcrMediaConfUpdateFail, radiusSecondaryAuthHost=radiusSecondaryAuthHost, sfpDmiLinkReach50125=sfpDmiLinkReach50125, exCMConfigLinkMode=exCMConfigLinkMode, authHostMacStatus=authHostMacStatus, timeZoneAdjustForDST=timeZoneAdjustForDST, dynamicDNSSSLCipherKeySizeMin=dynamicDNSSSLCipherKeySizeMin, radiusTimeout=radiusTimeout, sfpDmiRealTimeTemp=sfpDmiRealTimeTemp, mcrMGTMIBObjects=mcrMGTMIBObjects, cm110ModelDesc=cm110ModelDesc, cm1000mmConfigFiber2PortName=cm1000mmConfigFiber2PortName, ldapHost=ldapHost, cm1110ConfigFiberFilterUnknownMulticast=cm1110ConfigFiberFilterUnknownMulticast, tacacsPrimaryHost=tacacsPrimaryHost, sfpDmiMediaPortIndex=sfpDmiMediaPortIndex, cm1110ConfigCopperPriorityMap2=cm1110ConfigCopperPriorityMap2, cm10gFixedEntry=cm10gFixedEntry, cm110PortPkts512to1023Octets=cm110PortPkts512to1023Octets, mcrSfpLowTxBiasAlarm=mcrSfpLowTxBiasAlarm, mcrXfpHighTecCurrentWarn=mcrXfpHighTecCurrentWarn, sshServerAuthDSA=sshServerAuthDSA, mcrXfpLow18VCurrentWarn=mcrXfpLow18VCurrentWarn, localUserAccountsTable=localUserAccountsTable, sfpDmiLinkReach9125=sfpDmiLinkReach9125, timeSummerFixEndMinute=timeSummerFixEndMinute, mcrMgtModelName=mcrMgtModelName, sfpDmiRealTimeRxPower=sfpDmiRealTimeRxPower, cm1110PortOutPauses=cm1110PortOutPauses, exCMVdslStatusMinInpDown=exCMVdslStatusMinInpDown, cm110FiberConnType=cm110FiberConnType, cm1110AvctTxRxPair1Results=cm1110AvctTxRxPair1Results, mcrMediaLinkDown=mcrMediaLinkDown, bootFileStatus=bootFileStatus, cm110HwSw3FarEndFault=cm110HwSw3FarEndFault, exCMVdslStatusActualInterleavingBlockDown=exCMVdslStatusActualInterleavingBlockDown, cm1000mmFiber2LinkStatus=cm1000mmFiber2LinkStatus, cm1110PortPkts65to127Octets=cm1110PortPkts65to127Octets, exCMPortInUnicasts=exCMPortInUnicasts, ipv6AddressIndex=ipv6AddressIndex, mcrChassisRemove=mcrChassisRemove, cm10gPort2Speed=cm10gPort2Speed, cm110ConfigCopperCongestionPolicy=cm110ConfigCopperCongestionPolicy, radiusNasIdentifier=radiusNasIdentifier, xfpDmiHighAux2Warn=xfpDmiHighAux2Warn, snmpV3LocalEngineID=snmpV3LocalEngineID, cm110ConfigCopperAutoNegAdv100HDX=cm110ConfigCopperAutoNegAdv100HDX, dnsIpAddress=dnsIpAddress, cm1110HwSw2LinkMode=cm1110HwSw2LinkMode, exCMPortPkts128to255Octets=exCMPortPkts128to255Octets, adminFunction=adminFunction, cm1110ConfigMaxPacketsSize=cm1110ConfigMaxPacketsSize, xfpDmiAux1Type=xfpDmiAux1Type, cm100HwSw1AutoNegotiation=cm100HwSw1AutoNegotiation, exCMVdslRole=exCMVdslRole, mcrSfpHighTxBiasAlarm=mcrSfpHighTxBiasAlarm, cm100mmFixedTable=cm100mmFixedTable, mcrMediaFirmwareUpdateFail=mcrMediaFirmwareUpdateFail, syslogSecondaryHost=syslogSecondaryHost, cm10gtLedPWR=cm10gtLedPWR, securidPort=securidPort, cm110ConfigPriorityToEgressQueueMap0=cm110ConfigPriorityToEgressQueueMap0, exCMVdslStatusMaxInterleaveDelayUp=exCMVdslStatusMaxInterleaveDelayUp, cm1110PortOutUnicasts=cm1110PortOutUnicasts, mcrMgtEtheLinkUp=mcrMgtEtheLinkUp, cm1000ModelDesc=cm1000ModelDesc, cm110ConfigCopperIngressLimit=cm110ConfigCopperIngressLimit, cm1110ConfigFiberPriorityMap7=cm1110ConfigFiberPriorityMap7, sfpDmiReachCopper=sfpDmiReachCopper, mcrPsmuPsuVoltage=mcrPsmuPsuVoltage, sfpDmiRealTimeVolt=sfpDmiRealTimeVolt, cm1110ConfigCopperPriorityMap3=cm1110ConfigCopperPriorityMap3, dynamicDNSSSLCipherKeyExchange=dynamicDNSSSLCipherKeyExchange, cm110FiberLinkStatus=cm110FiberLinkStatus, cm1110AvctTxRxPair4Distance=cm1110AvctTxRxPair4Distance, mediaPortPortIndex=mediaPortPortIndex, syslogPrimaryHost=syslogPrimaryHost, mcrMgtConfigConsolePortEnabled=mcrMgtConfigConsolePortEnabled, exCMVdslStatsCorrectedLocal=exCMVdslStatsCorrectedLocal, cm10gtConfigPort2CopperDuplex=cm10gtConfigPort2CopperDuplex, cm100FiberFarEndFault=cm100FiberFarEndFault, portName=portName, cm4gptConfigRateSelect=cm4gptConfigRateSelect, ldapTLSPort=ldapTLSPort, cm110LedEntry=cm110LedEntry, exCMConfigEthernetSpeed=exCMConfigEthernetSpeed, exCMConfigVdslCongestionPolicy=exCMConfigVdslCongestionPolicy, cm110ConfigPriorityToEgressQueueMap6=cm110ConfigPriorityToEgressQueueMap6, cm110RateConvTable=cm110RateConvTable, cm1110ConfigCopperDefaultPriority=cm1110ConfigCopperDefaultPriority, ldapClientAppendBase=ldapClientAppendBase, mcrXfpHighVEE5AlarmRecov=mcrXfpHighVEE5AlarmRecov, cm1110ModelName=cm1110ModelName, cm100ConfigLinkMode=cm100ConfigLinkMode, cm1000mmFiber1ReceiveStatus=cm1000mmFiber1ReceiveStatus, timeStatus=timeStatus, mcrMGTMIBMgtGroup=mcrMGTMIBMgtGroup, cm1000mmFiber2ConnType=cm1000mmFiber2ConnType, cm4gptConfigStatus=cm4gptConfigStatus, nisGroup=nisGroup, snmpV3ReadWritePrivacyAlgorithm=snmpV3ReadWritePrivacyAlgorithm, cm100mmFiberLoopBack=cm100mmFiberLoopBack, userStatusLevel=userStatusLevel, mcrChassisReset=mcrChassisReset, cm100ConfigModuleName=cm100ConfigModuleName, cm110HwSw2LinkMode=cm110HwSw2LinkMode, snmpV3LocalEngineIDTextSuffix=snmpV3LocalEngineIDTextSuffix, cm110CopperDuplex=cm110CopperDuplex, mcrPsmuFanSpeed=mcrPsmuFanSpeed, localEventLogEnabled=localEventLogEnabled, exCMPortInUnderSizes=exCMPortInUnderSizes, cm110SlotIndex=cm110SlotIndex, xfpDmiLowAuxAlarm=xfpDmiLowAuxAlarm, cm10gtConfigPort1ChannelNumber=cm10gtConfigPort1ChannelNumber, cm1110ConfigPriorityToEgressQueueMap4=cm1110ConfigPriorityToEgressQueueMap4, mcrXfpHighVCC5Alarm=mcrXfpHighVCC5Alarm, cm110ConfigCopperPortEnable=cm110ConfigCopperPortEnable, snmpV3TrapUserStatus=snmpV3TrapUserStatus, timeSummerRecStartMin=timeSummerRecStartMin, cm10gtConfigLinkMode=cm10gtConfigLinkMode, cm1110ConfigCopperPriorityMap0=cm1110ConfigCopperPriorityMap0, mcrSfpHighTxBiasWarn=mcrSfpHighTxBiasWarn, exCMLedSlotIndex=exCMLedSlotIndex, exCMVdslStatusActualInterleavingDepthUp=exCMVdslStatusActualInterleavingDepthUp, systemTFTPTimeOut=systemTFTPTimeOut, timeSummerFixEndDay=timeSummerFixEndDay, mcrMgtSnmpTrapHostRec=mcrMgtSnmpTrapHostRec, mcrAlarmsWarningsEntry=mcrAlarmsWarningsEntry, cm1110ConfigFiberPriorityPrecedence=cm1110ConfigFiberPriorityPrecedence, mcrMgtEmailServFail=mcrMgtEmailServFail, exCMConfigVdslSignalToNoiseRatioUp=exCMConfigVdslSignalToNoiseRatioUp, userName=userName, cm100HwSw2LinkMode=cm100HwSw2LinkMode, cm110ConfigCopperFilterUnknownUnicast=cm110ConfigCopperFilterUnknownUnicast, systemAutoObtainDNS=systemAutoObtainDNS, cm1000LedSlotIndex=cm1000LedSlotIndex, authHostMacIndex=authHostMacIndex, radiusPrimaryAcctHost=radiusPrimaryAcctHost, cm1000mmLedsSlotIndex=cm1000mmLedsSlotIndex, nisPrimaryHost=nisPrimaryHost, cm100ConfigSlotIndex=cm100ConfigSlotIndex, mcrXfpHighVCC2WarnRecov=mcrXfpHighVCC2WarnRecov, snmpV3TrapUserPrivacyPasswd=snmpV3TrapUserPrivacyPasswd, exCMVdslStatsUnavailableSecsRemote=exCMVdslStatsUnavailableSecsRemote, snmpV3TrapUserAuthPasswd=snmpV3TrapUserAuthPasswd, cm100ModelName=cm100ModelName, exCMVdslFirmwareVersion=exCMVdslFirmwareVersion, exCMVdslProfile=exCMVdslProfile, mcrMediaRemoteReset=mcrMediaRemoteReset, mcrXfpHighM52VoltAlarm=mcrXfpHighM52VoltAlarm, cm10gtConfigFiberAutoNeg=cm10gtConfigFiberAutoNeg, snmpLocation=snmpLocation, cm4gptConfigPort1Enable=cm4gptConfigPort1Enable, cm110ConfigFiberDiscardUntaggedFrames=cm110ConfigFiberDiscardUntaggedFrames, securidGroup=securidGroup, mgtChassisSlotPowerScheduleTable=mgtChassisSlotPowerScheduleTable, productMIB=productMIB, timeSummerRecEndWeek=timeSummerRecEndWeek, cm4gptTable=cm4gptTable, mcrMGTMIBNotifications=mcrMGTMIBNotifications, cm10gtConfigPort1FecAmplitude=cm10gtConfigPort1FecAmplitude, exCMPortInMulticasts=exCMPortInMulticasts, timeSummerFixStartMonth=timeSummerFixStartMonth, exCMConfigVdslOverrideProfile=exCMConfigVdslOverrideProfile, mcrPsmuOutStandWarnAlarms=mcrPsmuOutStandWarnAlarms, sfpDmiVendorSerialNumber=sfpDmiVendorSerialNumber, mcrMediaInserted=mcrMediaInserted, cm4gptPort1LinkStatus=cm4gptPort1LinkStatus, snmpTrapHostStatus=snmpTrapHostStatus, mcrXfpLowApdBiasAlarmRecov=mcrXfpLowApdBiasAlarmRecov, radiusPrimaryAuthHost=radiusPrimaryAuthHost, cm1000mmHwSw4Loopback1=cm1000mmHwSw4Loopback1, mgtEthStatsSetMedia=mgtEthStatsSetMedia, exCMConfigVdslEgressLimit=exCMConfigVdslEgressLimit, sfpDmiHighRxPowerWarn=sfpDmiHighRxPowerWarn, exCMConfigEthernetDefaultPriority=exCMConfigEthernetDefaultPriority, mgtEthStatsRxFrameErrs=mgtEthStatsRxFrameErrs, cm4gptHwSw3RateSelect=cm4gptHwSw3RateSelect, localEventLogClear=localEventLogClear, ipv6TunnelMode=ipv6TunnelMode, snmpCommunityName=snmpCommunityName, cm100ConfigFiberFarEndFault=cm100ConfigFiberFarEndFault, exCMLedILNK=exCMLedILNK, mcrSfpSpeedMismatchRecov=mcrSfpSpeedMismatchRecov, cm100CopperLinkStatus=cm100CopperLinkStatus, cm110HwSw7Loopback=cm110HwSw7Loopback, cm110PortInFiltered=cm110PortInFiltered, exCMAvctTable=exCMAvctTable, mcrMgtConMonDSRSigChg=mcrMgtConMonDSRSigChg, xfpDmiLowAux1Alarm=xfpDmiLowAux1Alarm, ldapClientAuth=ldapClientAuth, cm1110PortOutFiltered=cm1110PortOutFiltered, mgtAccessGroup=mgtAccessGroup, userStatus=userStatus, customTimeZoneGroup=customTimeZoneGroup, cm100CopperPause=cm100CopperPause, ldapBase=ldapBase, cm1110AvctTxRxPair4Results=cm1110AvctTxRxPair4Results, fileConfigurationName=fileConfigurationName, mcrPsmuFanStatus=mcrPsmuFanStatus, cm110ConfigCopperPriorityMap2=cm110ConfigCopperPriorityMap2, exCMConfigEthernetAutoNegAdv100FDX=exCMConfigEthernetAutoNegAdv100FDX, cm10gHwSw1OperationMode=cm10gHwSw1OperationMode, mcrMgtTftpDownloadFail=mcrMgtTftpDownloadFail, mcrSfpLowRxPowerWarnRecov=mcrSfpLowRxPowerWarnRecov, exCMAvctTxRxPair3Distance=exCMAvctTxRxPair3Distance, chassisDiagStatus=chassisDiagStatus, systemTFTPRetry=systemTFTPRetry, mcrXfpHighVCC2AlarmRecov=mcrXfpHighVCC2AlarmRecov, cm1110AvctStatus=cm1110AvctStatus, snmpV3ReadWriteAuthPasswd=snmpV3ReadWriteAuthPasswd, snmpTrapHostIndex=snmpTrapHostIndex, exCMVdslStatusMinDataRateUp=exCMVdslStatusMinDataRateUp, cm10gtConfigPort2CopperPauseEnh=cm10gtConfigPort2CopperPauseEnh, radiusNasIpv6Address=radiusNasIpv6Address, dynamicDNSGroup=dynamicDNSGroup, mgtEthStatsStatus=mgtEthStatsStatus, radiusStatus=radiusStatus, cm1110HwSw6FiberSfp100Duplex=cm1110HwSw6FiberSfp100Duplex, mcrMgtDateTimeChg=mcrMgtDateTimeChg, sntpStatLastUpdate=sntpStatLastUpdate, exCMConfigStatus=exCMConfigStatus, mcrXfpLowM52VoltAlarm=mcrXfpLowM52VoltAlarm, systemStatus=systemStatus, cm110ConfigFiberPriorityMap7=cm110ConfigFiberPriorityMap7)
mibBuilder.exportSymbols("PERLE-MCR-MGT-MIB", dynamicDNSSSLEmail=dynamicDNSSSLEmail, exCMPortPkts512to1023Octets=exCMPortPkts512to1023Octets, exCMConfigVdslIpTosPriority=exCMConfigVdslIpTosPriority, cm1000mmConfigEntry=cm1000mmConfigEntry, cm110CopperAutoNegState=cm110CopperAutoNegState, cm1000mmConfigModuleName=cm1000mmConfigModuleName, cm10gtHwJmp5ConfigMode=cm10gtHwJmp5ConfigMode, timeSummerRecStartDay=timeSummerRecStartDay, cm1110ConfigCopperAutoNegAdv100HDX=cm1110ConfigCopperAutoNegAdv100HDX, mcrXfpLowVCC3Alarm=mcrXfpLowVCC3Alarm, exCMHwSw9LinkMode=exCMHwSw9LinkMode, cm1110RateConvAvctTable=cm1110RateConvAvctTable, cm110PortSingles=cm110PortSingles, exCMVdslStatsFecSecsLocal=exCMVdslStatsFecSecsLocal, cm110ConfigCopper8021pPriority=cm110ConfigCopper8021pPriority, cm1000ConfigFiberPortName=cm1000ConfigFiberPortName, mcrMgtEthStatsEntry=mcrMgtEthStatsEntry, cm1110ConfigCopper10BaseTDistance=cm1110ConfigCopper10BaseTDistance, cm110PortInGoodOctets=cm110PortInGoodOctets, mcrMGTMIBGroups=mcrMGTMIBGroups, mcrMgtFailSafeBootLoaderVer=mcrMgtFailSafeBootLoaderVer, cm1000mmConfigTable=cm1000mmConfigTable, mgtFilesGroup=mgtFilesGroup, cm110ConfigModuleName=cm110ConfigModuleName, timeZoneName=timeZoneName, mgtEthStatsNoTrailers=mgtEthStatsNoTrailers, cm10gtLedLK2=cm10gtLedLK2, cm10gtPort2Speed=cm10gtPort2Speed, AlertSeverityLevel=AlertSeverityLevel, dynamicDNSSSLVerifyPeerCertificate=dynamicDNSSSLVerifyPeerCertificate, mcrPsmuTable=mcrPsmuTable, snmpV3ReadWritePrivacyPasswd=snmpV3ReadWritePrivacyPasswd, cm1000mmLedLK1=cm1000mmLedLK1, mcrMgtConfigConsoleMonitorDSR=mcrMgtConfigConsoleMonitorDSR, snmpV3ReadWriteUser=snmpV3ReadWriteUser, authHostIpStatus=authHostIpStatus, mcrXfpLowVCC2WarnRecov=mcrXfpLowVCC2WarnRecov, exCMLedRMT=exCMLedRMT, cm110CopperCrossOver=cm110CopperCrossOver, cm100mmModelDesc=cm100mmModelDesc, cm1110ConfigPriorityToEgressQueueMap5=cm1110ConfigPriorityToEgressQueueMap5, sfpDmiRealTimeTxBias=sfpDmiRealTimeTxBias, exCMConfigEthernetIngressLimit=exCMConfigEthernetIngressLimit, mcrXfpHigh33VCurrentAlarm=mcrXfpHigh33VCurrentAlarm, exCMVdslStatusActualSignalAttenuationDown=exCMVdslStatusActualSignalAttenuationDown, exCMVdslStatsFecSecsRemote=exCMVdslStatsFecSecsRemote, mcrSfpLowTempAlarmRecov=mcrSfpLowTempAlarmRecov, cm1110ModelDesc=cm1110ModelDesc, mcrSfpHighTxPowerWarn=mcrSfpHighTxPowerWarn, cm10gPort1ConnType=cm10gPort1ConnType, exCMPortInRxErrs=exCMPortInRxErrs, mcrSfpHighVoltAlarmRecov=mcrSfpHighVoltAlarmRecov, kerberosPort=kerberosPort, cm1110ConfigCopperDefaultVlanId=cm1110ConfigCopperDefaultVlanId, exCMPortInFiltered=exCMPortInFiltered, mcrSfpLowVoltWarn=mcrSfpLowVoltWarn, cm10gConfigPort1ChannelEnable=cm10gConfigPort1ChannelEnable, cm10gSlotIndex=cm10gSlotIndex, mgtEthStatsLoopback=mgtEthStatsLoopback, mgtEthStatsLocalAddress=mgtEthStatsLocalAddress, nisSecondaryHost=nisSecondaryHost, exCMVdslStatusActualTransmitPowerDown=exCMVdslStatusActualTransmitPowerDown, cm10gtPort1ReceiveStatus=cm10gtPort1ReceiveStatus, gatewayType=gatewayType, dynamicDNSSSLCipherPriority=dynamicDNSSSLCipherPriority, snmpTrapGlbHostTimeout=snmpTrapGlbHostTimeout, timeSntpKeyID2=timeSntpKeyID2, exCMConfigVdslPriorityMap6=exCMConfigVdslPriorityMap6, mediaPortSlotIndex=mediaPortSlotIndex, cm110ConfigCopperPortName=cm110ConfigCopperPortName, mgtEthStatsAutoMedia=mgtEthStatsAutoMedia, mcrXfpLowVEE5AlarmRecov=mcrXfpLowVEE5AlarmRecov, cm110ConfigCopperDuplex=cm110ConfigCopperDuplex, syslogStatus=syslogStatus, mcrMgtConsoleDSR=mcrMgtConsoleDSR, firmwareUpdateBundleVersionCm1000mm=firmwareUpdateBundleVersionCm1000mm, cm10gFixed=cm10gFixed, cm100mmConfigFiber2PortEnable=cm100mmConfigFiber2PortEnable, mcrXfpHighTecCurrentAlarmRecov=mcrXfpHighTecCurrentAlarmRecov, cm1110ConfigFiberDiscardUntaggedFrames=cm1110ConfigFiberDiscardUntaggedFrames, cm1110PortExcessives=cm1110PortExcessives, mcrXfpLowVCC2AlarmRecov=mcrXfpLowVCC2AlarmRecov, cm110PortTxCollisions=cm110PortTxCollisions, exCMVdslStatusActualLineAttenuationUs3=exCMVdslStatusActualLineAttenuationUs3, cm1110HwSw6FiberAutoNegotiation=cm1110HwSw6FiberAutoNegotiation, mcrXfpLowTecCurrentWarn=mcrXfpLowTecCurrentWarn, cm110ConfigFiberPriorityMap0=cm110ConfigFiberPriorityMap0, cm1110ConfigCopperIpTosPriority=cm1110ConfigCopperIpTosPriority, exCMVdslStatsErroredSecsRemote=exCMVdslStatsErroredSecsRemote, exCMVdslStatusMaxDataRateUp=exCMVdslStatusMaxDataRateUp, exCMVdslStatusActualInterleaveDelayUp=exCMVdslStatusActualInterleaveDelayUp, cm1110PortInGoodOctets=cm1110PortInGoodOctets, exCMPortInPauses=exCMPortInPauses, mgtEthStatsTxBytes=mgtEthStatsTxBytes, cm100SlotIndex=cm100SlotIndex, cm110LedFDC=cm110LedFDC, mcrXfpHighApdBiasAlarm=mcrXfpHighApdBiasAlarm, cm1000mmFiber1AutoNegState=cm1000mmFiber1AutoNegState, cm1110PortInBroadcasts=cm1110PortInBroadcasts, cm10gtConfigEntry=cm10gtConfigEntry, sfpDmiLowTempWarn=sfpDmiLowTempWarn, exCMPortMultiples=exCMPortMultiples, mcrSfpLowTempWarn=mcrSfpLowTempWarn, mcrPsmuPsuVoltageFail=mcrPsmuPsuVoltageFail, xfpDmiAux1State=xfpDmiAux1State, exCMVdslStatusActualSignalAttenuationUs4=exCMVdslStatusActualSignalAttenuationUs4, displayFormatStatus=displayFormatStatus, cm110VctStatus=cm110VctStatus, exCMVdslStatsMediaPortIndex=exCMVdslStatsMediaPortIndex, cm1110ConfigCopperFilterUnknownUnicast=cm1110ConfigCopperFilterUnknownUnicast, cm10gtHwSw2LinkMode=cm10gtHwSw2LinkMode, xfpDmiLowAux2Warn=xfpDmiLowAux2Warn, exCMVdslLoopBack=exCMVdslLoopBack, snmpV3ReadWriteStatus=snmpV3ReadWriteStatus, snmpTrapVarsGroup=snmpTrapVarsGroup, cm1110LedTable=cm1110LedTable, mcrMediaDetectFail=mcrMediaDetectFail, cm1110ConfigCopperIngressLimit=cm1110ConfigCopperIngressLimit, cm4gptConfigEntry=cm4gptConfigEntry, cm1000ConfigSlotIndex=cm1000ConfigSlotIndex, emailReply=emailReply, PYSNMP_MODULE_ID=mcrMGTMIB, mcrXfpLow5VoltWarn=mcrXfpLow5VoltWarn, cm1110PortInOversizes=cm1110PortInOversizes, cm110LedLKF=cm110LedLKF, cm1000ConfigFiberFaultAlert=cm1000ConfigFiberFaultAlert, systemDate=systemDate, mcrMgtSystemBoot=mcrMgtSystemBoot, mcrMediaBackedupModuleType=mcrMediaBackedupModuleType, mcrModuleTypeInserted=mcrModuleTypeInserted, mgtEthStatsRxBytes=mgtEthStatsRxBytes, exCMPortInBroadcasts=exCMPortInBroadcasts, cm110ConfigCopperCrossOver=cm110ConfigCopperCrossOver, adminbootReason=adminbootReason, mcrSfpHighTxBiasAlarmRecov=mcrSfpHighTxBiasAlarmRecov, cm110ConfigCopperAutoNegAdv10FDX=cm110ConfigCopperAutoNegAdv10FDX, exCMVdslStatsFullInitLocal=exCMVdslStatsFullInitLocal, xfpDmiAux2State=xfpDmiAux2State, exCMVdslStatsEntry=exCMVdslStatsEntry, cm10gConfigPort2TxDitherValue=cm10gConfigPort2TxDitherValue, cm10gtHwSw1OperationMode=cm10gtHwSw1OperationMode, exCMConfigPriorityToEgressQueueMap0=exCMConfigPriorityToEgressQueueMap0, exCMConfigVdslMaxDataRateDown=exCMConfigVdslMaxDataRateDown, timeSummerName=timeSummerName, firmwareUpdateStatus=firmwareUpdateStatus, cm110ConfigCopperPriorityMap0=cm110ConfigCopperPriorityMap0, cm1110ConfigFiberSgmiiInterface=cm1110ConfigFiberSgmiiInterface, exCMAvctSlotIndex=exCMAvctSlotIndex, mcrXfpLow5VCurrentAlarmRecov=mcrXfpLow5VCurrentAlarmRecov, dnsStatus=dnsStatus, portAutoNegState=portAutoNegState, sntpStatLeapIndicator=sntpStatLeapIndicator, exCMConfigSlotIndex=exCMConfigSlotIndex, mcrXfpLowLaserWavelengthAlarmRecov=mcrXfpLowLaserWavelengthAlarmRecov, cm1110ConfigFiberPriorityMap4=cm1110ConfigFiberPriorityMap4, cm100mmHwSw2FarEndFault=cm100mmHwSw2FarEndFault, exCMConfigVdslLowBandwidthAlarmDown=exCMConfigVdslLowBandwidthAlarmDown, authMacHostEntry=authMacHostEntry, cm1000ConfigCopperPortName=cm1000ConfigCopperPortName, exCMPortResetCounters=exCMPortResetCounters, mcrPowerScheduleEnable=mcrPowerScheduleEnable, localUsersStatusTable=localUsersStatusTable, nettxfrFileHost=nettxfrFileHost, alarmWarnMessage=alarmWarnMessage, cm1110HwSw4TpDuplex=cm1110HwSw4TpDuplex, cm1000mmLedEntry=cm1000mmLedEntry, mcrMgtTftpUploadSuccess=mcrMgtTftpUploadSuccess, mcrXfpHighTecCurrentWarnRecov=mcrXfpHighTecCurrentWarnRecov, gatewayEntry=gatewayEntry, mcrMGTMIBMediaGroup=mcrMGTMIBMediaGroup, cm1110PortOutOctets=cm1110PortOutOctets, exCMAvctTxRxPair4Distance=exCMAvctTxRxPair4Distance, cm4gptLedsSlotIndex=cm4gptLedsSlotIndex, mgtEthStatsSlaveLoadBalancer=mgtEthStatsSlaveLoadBalancer, cm110HwSw5TpSpeed=cm110HwSw5TpSpeed, mcrMGTMIBConformance=mcrMGTMIBConformance, mcrXfpLowVEE5Warn=mcrXfpLowVEE5Warn, exCMVdslStatusActualInterleavingDepthDown=exCMVdslStatusActualInterleavingDepthDown, mgtEthStatsTxPackets=mgtEthStatsTxPackets, cm1000mmFiber2Speed=cm1000mmFiber2Speed, fileFirmwareHost=fileFirmwareHost, mcrMgtLedCopperSpeed=mcrMgtLedCopperSpeed, cm1110LedSlotIndex=cm1110LedSlotIndex, sfpDmiLowVoltAlarm=sfpDmiLowVoltAlarm, mcrModuleBootloaderVersion=mcrModuleBootloaderVersion, timeSntpHost1=timeSntpHost1, radiusAuthenticationPort=radiusAuthenticationPort, ipv6TunnelEntry=ipv6TunnelEntry, cm10gConfigSlotIndex=cm10gConfigSlotIndex, userStatusRemoteIPAddress=userStatusRemoteIPAddress, cm110ConfigFiberPriorityMap3=cm110ConfigFiberPriorityMap3, cm4gptConfigPort1Name=cm4gptConfigPort1Name, mcrChassisAdd=mcrChassisAdd, cm1000LedLKC=cm1000LedLKC, sshServerAuthKeyboard=sshServerAuthKeyboard, timeSntpMode=timeSntpMode, cm110PortOutBroadcasts=cm110PortOutBroadcasts, acessServiceSetIP=acessServiceSetIP, cm1110ConfigPriorityToEgressQueueMap0=cm1110ConfigPriorityToEgressQueueMap0, cm110ConfigFiberPortEnable=cm110ConfigFiberPortEnable, portPause=portPause, exCMMediaPortIndex=exCMMediaPortIndex, mcrXfpLowVEE5WarnRecov=mcrXfpLowVEE5WarnRecov, cm110PortRxErrors=cm110PortRxErrors, mgtDisplayFormatGroup=mgtDisplayFormatGroup, exCMVdslStatusActualSignalAttenuationDs3=exCMVdslStatusActualSignalAttenuationDs3, exCMPortOutBroadcasts=exCMPortOutBroadcasts, sshServerCompression=sshServerCompression, exCMPortInFragments=exCMPortInFragments, cm1110PortLates=cm1110PortLates, cm1000CopperCrossOver=cm1000CopperCrossOver, cm1000mmHwJmp5ConfigMode=cm1000mmHwJmp5ConfigMode, exCMVdslStatusActualInterleavingBlockUp=exCMVdslStatusActualInterleavingBlockUp, userStatusStartTime=userStatusStartTime, cm10gConfigPort2ChannelNumber=cm10gConfigPort2ChannelNumber, sfpDmiSlotIndex=sfpDmiSlotIndex, mcrMgtLedALM=mcrMgtLedALM, cm110ConfigPriorityToEgressQueueMap3=cm110ConfigPriorityToEgressQueueMap3, mcrMgtConfigStatus=mcrMgtConfigStatus, sfpDmiCurrentVoltState=sfpDmiCurrentVoltState, mcrXfpLowVCC2Alarm=mcrXfpLowVCC2Alarm, cm10gConfigPort2TxDitherEnable=cm10gConfigPort2TxDitherEnable, exCMConfigVdslMinDataRateDown=exCMConfigVdslMinDataRateDown, cm110PortInPauses=cm110PortInPauses, cm10gConfigStatus=cm10gConfigStatus, exCMEntry=exCMEntry, exCMAvctTxRxPair2Results=exCMAvctTxRxPair2Results, mcrSfpLowVoltWarnRecov=mcrSfpLowVoltWarnRecov, cm10gtPort2Duplex=cm10gtPort2Duplex, mgtEthSlotIndex=mgtEthSlotIndex, cm110PortInMulticasts=cm110PortInMulticasts, exCMConfigEthernetPortEnable=exCMConfigEthernetPortEnable, exCMLedLOC=exCMLedLOC, cm110ConfigCopperVlanTaggingAction=cm110ConfigCopperVlanTaggingAction, mgtUsersStatus=mgtUsersStatus, cm1110ConfigFiberSfp100duplex=cm1110ConfigFiberSfp100duplex, mcrChassisGroup=mcrChassisGroup, snmpV3ReadOnlySecurityLevel=snmpV3ReadOnlySecurityLevel, mcrSfpHighTempWarn=mcrSfpHighTempWarn, ipv6TunnelIndex=ipv6TunnelIndex, authHostMacAddr=authHostMacAddr, cm110PortInBadOctets=cm110PortInBadOctets, cm4gptPort2ConnType=cm4gptPort2ConnType, exCMPortOutMulticasts=exCMPortOutMulticasts, mgtAdminGroup=mgtAdminGroup, timeSummerFixStartMinute=timeSummerFixStartMinute, authHostIpIndex=authHostIpIndex, mcrMgtIpAddrDynChg=mcrMgtIpAddrDynChg, exCMConfigPriorityToEgressQueueMap2=exCMConfigPriorityToEgressQueueMap2, mcrXfpHighM52VCurrentWarnRecov=mcrXfpHighM52VCurrentWarnRecov, exCMPortOutFiltered=exCMPortOutFiltered, chassisBootloaderVersion=chassisBootloaderVersion, cm110ConfigCopperAutoNegAdv10HDX=cm110ConfigCopperAutoNegAdv10HDX, radiusNasIpAddress=radiusNasIpAddress)
mibBuilder.exportSymbols("PERLE-MCR-MGT-MIB", cm10gConfigPort1FecAmplitude=cm10gConfigPort1FecAmplitude, cm110PortOutFcsErrs=cm110PortOutFcsErrs, mcrPsmuRemoved=mcrPsmuRemoved, mcrXfpHighM52VCurrentWarn=mcrXfpHighM52VCurrentWarn, exCMConfigEthernetPortName=exCMConfigEthernetPortName, mcrSfpLowTxPowerWarnRecov=mcrSfpLowTxPowerWarnRecov, dnsTable=dnsTable, cm1000mmFixed=cm1000mmFixed, ipv6Group=ipv6Group, emailFrom=emailFrom, sfpDmiHighTxBiasWarn=sfpDmiHighTxBiasWarn, cm110PortInOversizes=cm110PortInOversizes, cm1000mmFiber2ReceiveStatus=cm1000mmFiber2ReceiveStatus, exCMConfigVdslProfile=exCMConfigVdslProfile, exCMAvctStart=exCMAvctStart, cfgSfpPowerUnits=cfgSfpPowerUnits, exCMVdslStatusActualLineAttenuationDs3=exCMVdslStatusActualLineAttenuationDs3, cm1000mmLedPWR=cm1000mmLedPWR, alarmWarnChassisNum=alarmWarnChassisNum, YesNoValue=YesNoValue, cm1000FiberLPRFStatus=cm1000FiberLPRFStatus, tacacsAccounting=tacacsAccounting, mcrXfpLow18VCurrentWarnRecov=mcrXfpLow18VCurrentWarnRecov, alarmWarnSequenceIndex=alarmWarnSequenceIndex, mcrMgtModuleInserted=mcrMgtModuleInserted, exCMVdslStatusPrevDataRateUp=exCMVdslStatusPrevDataRateUp, cm1000HwJmp5ConfigMode=cm1000HwJmp5ConfigMode, cm1110AvctTxRxPair2Results=cm1110AvctTxRxPair2Results, cm110FiberReceiveStatus=cm110FiberReceiveStatus, snmpAgentGroup=snmpAgentGroup, exCMVdslStatusActualLineAttenuationDs4=exCMVdslStatusActualLineAttenuationDs4, exCMPortInBadOctets=exCMPortInBadOctets, ldapUID=ldapUID, cm1000mmFixedEntry=cm1000mmFixedEntry, mcrXfpHighVCC5AlarmRecov=mcrXfpHighVCC5AlarmRecov, cm1000CopperDuplex=cm1000CopperDuplex, cm100mmConfigFiberFarEndFault=cm100mmConfigFiberFarEndFault, mcrMgtLedTable=mcrMgtLedTable, cm10gtPortTestMode=cm10gtPortTestMode, exCMVdslStatsTimePeriod=exCMVdslStatsTimePeriod, cm1110RateConv=cm1110RateConv, exCMConfigEthernetPriorityMap7=exCMConfigEthernetPriorityMap7, cm1000mmConfigSlotIndex=cm1000mmConfigSlotIndex, snmpV3ReadOnlyUserName=snmpV3ReadOnlyUserName, cm10gConfigPort1EdcMode=cm10gConfigPort1EdcMode, alarmWarnTimeStamp=alarmWarnTimeStamp, sfpDmiHighRxPowerAlarm=sfpDmiHighRxPowerAlarm, exCMPortInJabbers=exCMPortInJabbers, cm110PortInJabbers=cm110PortInJabbers, cm1110ConfigCopperPortName=cm1110ConfigCopperPortName, mcrXfpLowTecCurrentAlarm=mcrXfpLowTecCurrentAlarm, cm1110ConfigFiberFilterUnknownUnicast=cm1110ConfigFiberFilterUnknownUnicast, exCMConfigVdslSignalToNoiseRatioDown=exCMConfigVdslSignalToNoiseRatioDown, mcrXfpHigh33VoltAlarmRecov=mcrXfpHigh33VoltAlarmRecov, chassisOutStandWarnAlarms=chassisOutStandWarnAlarms, remoteTftpHost=remoteTftpHost, cm1110AvctTxRxPair2Amplitude=cm1110AvctTxRxPair2Amplitude, cm1110StatsSlotIndex=cm1110StatsSlotIndex, exCMModelName=exCMModelName, cm10gConfigPort1WavelengthValue=cm10gConfigPort1WavelengthValue, alarmWarnFlags=alarmWarnFlags, mcrMgtLedEntry=mcrMgtLedEntry, cm4gptLedEntry=cm4gptLedEntry, exCMPortHCOutOctets=exCMPortHCOutOctets, userStatusIndex=userStatusIndex, exCMStatsTable=exCMStatsTable, exCMConfigVdslPriorityMap1=exCMConfigVdslPriorityMap1, mcrMediaOk=mcrMediaOk, mgtEthStatsIfIndex=mgtEthStatsIfIndex, cm1000mmConfigLinkMode=cm1000mmConfigLinkMode, cm100ConfigCopperAutoNegotiation=cm100ConfigCopperAutoNegotiation, cm1110ConfigPriorityToEgressQueueMap1=cm1110ConfigPriorityToEgressQueueMap1, exCMVdslStatsTable=exCMVdslStatsTable, emailTo=emailTo, mgtAccessMethod=mgtAccessMethod, mcrModuleNotSupported=mcrModuleNotSupported, dynamicDNSWildCard=dynamicDNSWildCard, exCMVdslStatusMaxDataRateDown=exCMVdslStatusMaxDataRateDown, cm1110ConfigCopperPriorityMap7=cm1110ConfigCopperPriorityMap7, radiusNasSpecifyIpAddress=radiusNasSpecifyIpAddress, mcrXfpLowLaserWavelengthWarn=mcrXfpLowLaserWavelengthWarn, gatewaySubnetBits=gatewaySubnetBits, dynamicDNSSSLCipherKeySizeMax=dynamicDNSSSLCipherKeySizeMax, sfpDmiCurrentTxPowerState=sfpDmiCurrentTxPowerState, mcrXfpLowM52VCurrentWarn=mcrXfpLowM52VCurrentWarn, dynamicDNSSystemType=dynamicDNSSystemType, cm100FiberLoopBack=cm100FiberLoopBack, cm1000ConfigStatus=cm1000ConfigStatus, exCMVdslStatusActualSnrDs4=exCMVdslStatusActualSnrDs4, cm110PortMultiples=cm110PortMultiples, emailSMTPValidatePeerCertificate=emailSMTPValidatePeerCertificate, mcrXfpLowM52VoltWarnRecov=mcrXfpLowM52VoltWarnRecov, cm100mmLedTable=cm100mmLedTable, mgtBootFilesGroup=mgtBootFilesGroup, exCMAvctTxRxPair3Amplitude=exCMAvctTxRxPair3Amplitude, mcrMgtTftpUploadFail=mcrMgtTftpUploadFail, cm1110PortInPauses=cm1110PortInPauses, cm10gtPort2LinkStatus=cm10gtPort2LinkStatus, sfpDmiVendorPartNumber=sfpDmiVendorPartNumber, cm110ConfigCopperAutoNegotiation=cm110ConfigCopperAutoNegotiation, cm10gConfigTable=cm10gConfigTable, cm110PortOutMulticasts=cm110PortOutMulticasts, cm1110AvctTxRxPair3Distance=cm1110AvctTxRxPair3Distance, mcrBandwidthLevelUpstreamRecov=mcrBandwidthLevelUpstreamRecov, cm1110FiberAutoNegState=cm1110FiberAutoNegState, powerSchedOnHour=powerSchedOnHour, cm110ConfigFiberFilterUnknownUnicast=cm110ConfigFiberFilterUnknownUnicast, cm1000CopperLPRFStatus=cm1000CopperLPRFStatus, cm110ConfigPriorityToEgressQueueMap7=cm110ConfigPriorityToEgressQueueMap7, exCMHwSw4SnrRatio=exCMHwSw4SnrRatio, cm100mmHwSw4Loopback2=cm100mmHwSw4Loopback2, exCMAvctTxRxPair1Amplitude=exCMAvctTxRxPair1Amplitude, cm10gConfigPort2Enable=cm10gConfigPort2Enable, radiusRetryLimit=radiusRetryLimit, cm100CopperLPRFStatus=cm100CopperLPRFStatus, gatewayIpAddress=gatewayIpAddress, mcrMediaPortBandwidthThreshold=mcrMediaPortBandwidthThreshold, timeSntpKeyID=timeSntpKeyID, powerSchedOffMinute=powerSchedOffMinute, cm10gtPort1Speed=cm10gtPort1Speed, interfacev6PrefixBits=interfacev6PrefixBits, mcrMgtConfigEthCrossover=mcrMgtConfigEthCrossover, exCMConfigVdsl8021pPriority=exCMConfigVdsl8021pPriority, localEventLogStatus=localEventLogStatus, cm1110AvctTxRxPair1Distance=cm1110AvctTxRxPair1Distance, exCMVdslStatusAttainableDataRateUp=exCMVdslStatusAttainableDataRateUp, cm10gt=cm10gt, mcrChassisCommTempSensorFail=mcrChassisCommTempSensorFail, mcrModuleModelName=mcrModuleModelName, moduleModel=moduleModel, exCMAvctTxRxPair2Amplitude=exCMAvctTxRxPair2Amplitude, mcrXfpLow33VoltAlarm=mcrXfpLow33VoltAlarm, mcrMGTMIBChassisGroup=mcrMGTMIBChassisGroup, sfpDmiCurrentTxBiasState=sfpDmiCurrentTxBiasState, alarmWarnPortNum=alarmWarnPortNum, exCMConfigEthernetPriorityMap4=exCMConfigEthernetPriorityMap4, cm110FiberSpeed=cm110FiberSpeed, cm100mmHwSw3Loopback1=cm100mmHwSw3Loopback1, mcrMgtTable=mcrMgtTable, cm1110CopperLinkStatus=cm1110CopperLinkStatus, cm1110ConfigCopperPriorityMap5=cm1110ConfigCopperPriorityMap5, mgtUsersGroup=mgtUsersGroup, cm10gtPortLoopBack=cm10gtPortLoopBack, sfpDmiLowTxPowerWarn=sfpDmiLowTxPowerWarn, cm1110LedLKC=cm1110LedLKC, cm1110CopperAutoSpeedDownshift=cm1110CopperAutoSpeedDownshift, cm100CopperConnType=cm100CopperConnType, cm110ConfigFiberPriorityMap5=cm110ConfigFiberPriorityMap5, eventSeverityLevel=eventSeverityLevel, cm10gtLedEntry=cm10gtLedEntry, exCMVdslStatusTargetSnrDown=exCMVdslStatusTargetSnrDown, cm110PortPkts65to127Octets=cm110PortPkts65to127Octets, exCMVdslStatusActualSnrUs2=exCMVdslStatusActualSnrUs2, mcrAlarmsWarningsTable=mcrAlarmsWarningsTable, radiusAcctAuth=radiusAcctAuth, xfpDmiRealTimeAux=xfpDmiRealTimeAux, portDuplex=portDuplex, mcrSfpLowVoltAlarmRecov=mcrSfpLowVoltAlarmRecov, exCMVdslStatusMinDataRateDown=exCMVdslStatusMinDataRateDown, cm100mmConfigTable=cm100mmConfigTable, exCMStatsSlotIndex=exCMStatsSlotIndex, mcrXfpLowApdBiasWarn=mcrXfpLowApdBiasWarn, mcrSfpLowRxPowerAlarmRecov=mcrSfpLowRxPowerAlarmRecov, mcrSfpLowTempWarnRecov=mcrSfpLowTempWarnRecov, cm1110AvctTxRxPair2Distance=cm1110AvctTxRxPair2Distance, mgtEthStatsDebug=mgtEthStatsDebug, exCMVdslStatusActualTransmitPowerUp=exCMVdslStatusActualTransmitPowerUp, sfpDmiVendorName=sfpDmiVendorName, timeOffset=timeOffset, mcrXfpLowVCC3AlarmRecov=mcrXfpLowVCC3AlarmRecov, cm1110ConfigCopperPriorityMap4=cm1110ConfigCopperPriorityMap4, timeSummerFixStartDay=timeSummerFixStartDay, exCMVdslStatusActualSignalAttenuationUp=exCMVdslStatusActualSignalAttenuationUp, mcrMgtConfigConsoleStopBits=mcrMgtConfigConsoleStopBits, exCMVdslStatsCodeViolationLocal=exCMVdslStatsCodeViolationLocal, mcrXfpLow33VoltWarnRecov=mcrXfpLow33VoltWarnRecov, mcrPsmuPsuStatus=mcrPsmuPsuStatus, exCMVdslStatusActualSnrDown=exCMVdslStatusActualSnrDown, sfpDmiHighTxPowerWarn=sfpDmiHighTxPowerWarn, mcrXfpHighApdBiasAlarmRecov=mcrXfpHighApdBiasAlarmRecov, cm10gHwSw2LinkMode=cm10gHwSw2LinkMode, cm1000mmConfigFiberAutoNeg=cm1000mmConfigFiberAutoNeg, cm10gConfigPort1Name=cm10gConfigPort1Name, timeSntpVersion=timeSntpVersion, cm4gptPort1ConnType=cm4gptPort1ConnType, mcrXfpHigh18VoltAlarmRecov=mcrXfpHigh18VoltAlarmRecov, sfpDmiLowTxBiasAlarm=sfpDmiLowTxBiasAlarm, exCMConfigEthernetVlanTaggingAction=exCMConfigEthernetVlanTaggingAction, sfpDmiHighVoltWarn=sfpDmiHighVoltWarn, mcrSfpRecovComm=mcrSfpRecovComm, mcrChassisSlotIndex=mcrChassisSlotIndex, radiusSecondaryAcctHost=radiusSecondaryAcctHost, cm4gptLedPWR=cm4gptLedPWR, exCMConfigVdslPriorityMap5=exCMConfigVdslPriorityMap5, sshServerAuthPassword=sshServerAuthPassword, cm110ConfigPriorityToEgressQueueMap2=cm110ConfigPriorityToEgressQueueMap2, exCMConfigEthernetAutoNegAdv10FDX=exCMConfigEthernetAutoNegAdv10FDX, snmpV3TrapUserAuthAlgorithm=snmpV3TrapUserAuthAlgorithm, exCMVdslFirmwareDate=exCMVdslFirmwareDate, customTimeZoneStatus=customTimeZoneStatus, mcrXfpLowVCC5Warn=mcrXfpLowVCC5Warn, mcrXfpPowerExceededRecov=mcrXfpPowerExceededRecov, emailSMTPEncryption=emailSMTPEncryption, snmpV3TrapUserSecurityLevel=snmpV3TrapUserSecurityLevel, firmwareUpdateBundleVersionCm1110Sfp=firmwareUpdateBundleVersionCm1110Sfp, snmpTrapStatus=snmpTrapStatus, cm10gtLedsSlotIndex=cm10gtLedsSlotIndex, cm1110HwSw3FiberFaultAlert=cm1110HwSw3FiberFaultAlert, tacacsAccountingPrimaryHost=tacacsAccountingPrimaryHost, cm110Modelname=cm110Modelname, nettxfrFileType=nettxfrFileType, cm110CopperLPRFStatus=cm110CopperLPRFStatus, mcrXfpHighVEE5Warn=mcrXfpHighVEE5Warn, tacacsAlternateServiceNames=tacacsAlternateServiceNames, authHostIpDescr=authHostIpDescr, exCMVdslFirmwareDateString=exCMVdslFirmwareDateString, exCMConfigVdslMaxInterleaveDelayUp=exCMConfigVdslMaxInterleaveDelayUp, cm10gtConfigPort1ChannelEnable=cm10gtConfigPort1ChannelEnable, exCMVdslStatusMaxInterleaveDelayDown=exCMVdslStatusMaxInterleaveDelayDown, cm110ConfigEntry=cm110ConfigEntry, cm110ConfigTable=cm110ConfigTable, cm100FiberReceiveStatus=cm100FiberReceiveStatus, userLevel=userLevel, chassisCfgHighTempThreshold=chassisCfgHighTempThreshold, exCMVdslStatusActualSnrDs3=exCMVdslStatusActualSnrDs3, mcrXfpLowVCC5Alarm=mcrXfpLowVCC5Alarm, cm10gConfigPort1ChannelNumber=cm10gConfigPort1ChannelNumber, systemIpAddress=systemIpAddress, xfpDmiMinBitRate=xfpDmiMinBitRate, snmpV3ReadWriteSecurityLevel=snmpV3ReadWriteSecurityLevel, mgtEthStatsMulticast=mgtEthStatsMulticast, exCMVdslStatusMinInpUp=exCMVdslStatusMinInpUp, cm10gConfigPort1TxDitherValue=cm10gConfigPort1TxDitherValue, ipv6AddressPrefixBits=ipv6AddressPrefixBits, mcrMediaConfMismatch=mcrMediaConfMismatch, cm1110PortSingles=cm1110PortSingles, cm1000mmFiber1PauseEnh=cm1000mmFiber1PauseEnh, exCMVdslStatusActualSignalAttenuationDs2=exCMVdslStatusActualSignalAttenuationDs2, cm1110ConfigCopperPriorityMap1=cm1110ConfigCopperPriorityMap1, nettxfrSessionID=nettxfrSessionID, ipv6AddressAddr=ipv6AddressAddr, mcrChassisPwrUpSlotPwrState=mcrChassisPwrUpSlotPwrState, cm1110ConfigCopperPriorityMap6=cm1110ConfigCopperPriorityMap6, cm4gptHwSw1LinkMode=cm4gptHwSw1LinkMode, exCMVdslStatusActualLineAttenuationUs1=exCMVdslStatusActualLineAttenuationUs1, mcrMgtConfigConsoleDataBits=mcrMgtConfigConsoleDataBits, kerberosGroup=kerberosGroup, cm1000mmModelDesc=cm1000mmModelDesc, exCMVdslStatusActualSnrDs1=exCMVdslStatusActualSnrDs1, cm10gtConfigModuleName=cm10gtConfigModuleName, exCMHwSw3SymmetricAsymmetric=exCMHwSw3SymmetricAsymmetric, exCMConfigVdslMinDataRateUp=exCMConfigVdslMinDataRateUp, exCMConfigEthernetPriorityMap2=exCMConfigEthernetPriorityMap2, snmpV3ReadWriteUserName=snmpV3ReadWriteUserName)
mibBuilder.exportSymbols("PERLE-MCR-MGT-MIB", mcrXfpHighM52VCurrentAlarmRecov=mcrXfpHighM52VCurrentAlarmRecov, cm110ConfigFiberFilterUnknownMulticast=cm110ConfigFiberFilterUnknownMulticast, cm1110ConfigSlotIndex=cm1110ConfigSlotIndex, exCMPortInOversizes=exCMPortInOversizes, exCMConfigEthernetAutoNegAdv10HDX=exCMConfigEthernetAutoNegAdv10HDX, nettxfrSSHKeyType=nettxfrSSHKeyType, cm10gHwSw4Port1EdcMode=cm10gHwSw4Port1EdcMode, exCMHwSw8EthDuplex=exCMHwSw8EthDuplex, exCMVdslStatusActualSnrUs1=exCMVdslStatusActualSnrUs1, exCMVdslStatusActualInterleaveDelayDown=exCMVdslStatusActualInterleaveDelayDown, snmpTrapHostCommunity=snmpTrapHostCommunity, cm110ConfigMaxPacketSize=cm110ConfigMaxPacketSize, xfpDmiMaxBitRate=xfpDmiMaxBitRate, cm100mmFiber2LinkStatus=cm100mmFiber2LinkStatus, alertEmailGroup=alertEmailGroup, cm1110ConfigFiberIngressLimit=cm1110ConfigFiberIngressLimit, exCMVdslConnType=exCMVdslConnType, mcrXfpLow33VCurrentAlarm=mcrXfpLow33VCurrentAlarm, sfpDmiLowTxBiasWarn=sfpDmiLowTxBiasWarn, nisStatus=nisStatus, exCMEthernetPauseEnh=exCMEthernetPauseEnh, exCMEthernetCrossOver=exCMEthernetCrossOver, cm10gtPort1LinkStatus=cm10gtPort1LinkStatus, cm100mmFiber2ReceiveStatus=cm100mmFiber2ReceiveStatus, mcrAlarmRelayDisengaged=mcrAlarmRelayDisengaged, cm1110PortInUnderSizes=cm1110PortInUnderSizes, ipv6AddressAuto=ipv6AddressAuto, cm1000mmHwSw5Loopback2=cm1000mmHwSw5Loopback2, cm1110ConfigCopperFilterUnknownMulticast=cm1110ConfigCopperFilterUnknownMulticast, cm1110ConfigFiberDefaultPriority=cm1110ConfigFiberDefaultPriority, portLinkStatus=portLinkStatus, exCMConfigVdslFastMode=exCMConfigVdslFastMode, cm10gtConfigPort1Name=cm10gtConfigPort1Name, cm10gtPort2ConnType=cm10gtPort2ConnType, xfpDmiHighAuxAlarm=xfpDmiHighAuxAlarm, systemSubnetBits=systemSubnetBits, cm100LedEntry=cm100LedEntry, firmwareUpdateBundleVersionCm110=firmwareUpdateBundleVersionCm110, cm4gptConfigPort2Name=cm4gptConfigPort2Name, cm1110FiberSpeed=cm1110FiberSpeed, userPassword=userPassword, cm4gptHwSw4Unused=cm4gptHwSw4Unused, cm100ConfigEntry=cm100ConfigEntry, interfacev6Scope=interfacev6Scope, cm110StatsSlotIndex=cm110StatsSlotIndex, authHostOnly=authHostOnly, mcrXfpHigh18VCurrentAlarmRecov=mcrXfpHigh18VCurrentAlarmRecov, exCMVdslStatusActualSnrDs2=exCMVdslStatusActualSnrDs2, cm1110ConfigCopperPriorityPrecedence=cm1110ConfigCopperPriorityPrecedence, cm1000mmHwSw1FiberAutoNeg=cm1000mmHwSw1FiberAutoNeg, cm100mmConfigStatus=cm100mmConfigStatus, mcrSfpHighTempWarnRecov=mcrSfpHighTempWarnRecov, cm4gptConfigModuleName=cm4gptConfigModuleName, cm1110RateConvEntry=cm1110RateConvEntry, snmpCommunityStatus=snmpCommunityStatus, sshServerSSH1=sshServerSSH1, nettxfrTftpPort=nettxfrTftpPort, mcrXfpLow5VoltAlarm=mcrXfpLow5VoltAlarm, exCMPortInDiscards=exCMPortInDiscards, alertSyslogGroup=alertSyslogGroup, cm10gtConfigPort1Enable=cm10gtConfigPort1Enable, exCMHwSw2Rate=exCMHwSw2Rate, mcrMgtEntry=mcrMgtEntry, mcrMgtConfigEntry=mcrMgtConfigEntry, mgtDateTimeGroup=mgtDateTimeGroup, cm1000ConfigLinkMode=cm1000ConfigLinkMode, exCMConfigVdslVlanTaggingAction=exCMConfigVdslVlanTaggingAction, firmwareUpdateBundleVersionCm100=firmwareUpdateBundleVersionCm100, cm4gptModelDesc=cm4gptModelDesc, cm1110ConfigFiberPriorityMap0=cm1110ConfigFiberPriorityMap0, dynamicDNSConnectionMethod=dynamicDNSConnectionMethod, mcrMediaRemoved=mcrMediaRemoved, cm110ConfigCopperFilterUnknownMulticast=cm110ConfigCopperFilterUnknownMulticast, mcrXfpHighApdBiasWarnRecov=mcrXfpHighApdBiasWarnRecov, hostName=hostName, mcrUnManagedModuleSlotName=mcrUnManagedModuleSlotName, mcrXfpLowLaserTempWarn=mcrXfpLowLaserTempWarn, mcrMgtConfigEthSpeedDuplex=mcrMgtConfigEthSpeedDuplex, cm110PortInBroadcasts=cm110PortInBroadcasts, cm110ConfigFiberPriorityPrecedence=cm110ConfigFiberPriorityPrecedence, mgtEthStatsMtu=mgtEthStatsMtu, cm10gtConfigFiberFaultAlert=cm10gtConfigFiberFaultAlert, exCMConfigModuleName=exCMConfigModuleName, sfpDmiRealTimeTxPower=sfpDmiRealTimeTxPower, cm1110ConfigFiberPriorityMap2=cm1110ConfigFiberPriorityMap2, sfpDmiHighTxPowerAlarm=sfpDmiHighTxPowerAlarm, systemTime=systemTime, mcrXfpHighVCC5WarnRecov=mcrXfpHighVCC5WarnRecov, mcrSfpLowRxPowerAlarm=mcrSfpLowRxPowerAlarm, cm110CopperPause=cm110CopperPause, cm110VctStart=cm110VctStart, dynamicDNSStatus=dynamicDNSStatus, cm110ConfigFiberDefaultPriority=cm110ConfigFiberDefaultPriority, mgtEthStatsRxDroppedPkts=mgtEthStatsRxDroppedPkts, cm100mmHwSw1LinkPassthrough=cm100mmHwSw1LinkPassthrough, mcrModuleReset=mcrModuleReset, cm100CopperDuplex=cm100CopperDuplex, exCMVdslStatusActualDataRateDown=exCMVdslStatusActualDataRateDown, emailEnabled=emailEnabled, cm1110PortPkts128to255Octets=cm1110PortPkts128to255Octets, mcrXfpLowM52VoltAlarmRecov=mcrXfpLowM52VoltAlarmRecov, systemGroup=systemGroup, mcrXfpLowVCC5WarnRecov=mcrXfpLowVCC5WarnRecov, cm110ConfigFiberVlanTaggingAction=cm110ConfigFiberVlanTaggingAction, exCMVdslStatusActualSignalAttenuationUs1=exCMVdslStatusActualSignalAttenuationUs1, dynamicDNSSSLCipherEncryption=dynamicDNSSSLCipherEncryption, exCMModelDesc=exCMModelDesc, mcrXfpLow33VCurrentAlarmRecov=mcrXfpLow33VCurrentAlarmRecov, timeSummerRecEndHour=timeSummerRecEndHour, mcrModuleSerialNumber=mcrModuleSerialNumber, cm1000CopperAutoNegState=cm1000CopperAutoNegState, cm1110LedEntry=cm1110LedEntry, cm10gtConfigPort1TxDitherEnable=cm10gtConfigPort1TxDitherEnable, exCM=exCM, xfpDmiRealTimeAux1=xfpDmiRealTimeAux1, chassisModelDesc=chassisModelDesc, mcrXfpHighLaserWavelengthAlarmRecov=mcrXfpHighLaserWavelengthAlarmRecov, cm110LedSlotIndex=cm110LedSlotIndex, mcrMediaBackedupModuleSubType=mcrMediaBackedupModuleSubType, mgtEthStatsPointtoPoint=mgtEthStatsPointtoPoint, exCMConfigEntry=exCMConfigEntry, cm1110PortDeferreds=cm1110PortDeferreds, cm1110RateConvAvctEntry=cm1110RateConvAvctEntry, cm100ConfigStatus=cm100ConfigStatus, exCMVdslStatsFullInitRemote=exCMVdslStatsFullInitRemote, mcrXfpLow33VCurrentWarn=mcrXfpLow33VCurrentWarn, mcrSfpLowTxPowerAlarmRecov=mcrSfpLowTxPowerAlarmRecov, sshServerCipherCipherAES=sshServerCipherCipherAES, exCMConfigVdslMinInpUp=exCMConfigVdslMinInpUp, mcrXfpHigh33VCurrentWarnRecov=mcrXfpHigh33VCurrentWarnRecov, snmpV3ReadOnlyStatus=snmpV3ReadOnlyStatus, mcrXfpLow18VCurrentAlarmRecov=mcrXfpLow18VCurrentAlarmRecov, snmpV3TrapUser=snmpV3TrapUser, fileConfigurationHost=fileConfigurationHost, xfpDmiRealTimeAux2=xfpDmiRealTimeAux2, mcrXfpLowLaserWavelengthWarnRecov=mcrXfpLowLaserWavelengthWarnRecov, exCMConfigVdslMaxDataRateUp=exCMConfigVdslMaxDataRateUp, exCMSlotIndex=exCMSlotIndex, exCMConfigVdslBitswapping=exCMConfigVdslBitswapping, exCMVdslBitswapping=exCMVdslBitswapping, emailSMTPDomain=emailSMTPDomain, mcrXfpHighVCC3AlarmRecov=mcrXfpHighVCC3AlarmRecov, cm10gConfigModuleName=cm10gConfigModuleName, cm110ConfigCopperDefaultPriority=cm110ConfigCopperDefaultPriority, exCMVdslStatsLossOfSignalSecsLocal=exCMVdslStatsLossOfSignalSecsLocal, cm110HwSw4TpDuplex=cm110HwSw4TpDuplex, cm100ConfigTable=cm100ConfigTable, cm1110ConfigFiberAutoNegotiation=cm1110ConfigFiberAutoNegotiation, cm10gtModelDesc=cm10gtModelDesc, mcrXfpLow18VoltWarn=mcrXfpLow18VoltWarn, cm1000mmConfigFiber1PortName=cm1000mmConfigFiber1PortName, exCMVdslStatusActualLineAttenuationUs2=exCMVdslStatusActualLineAttenuationUs2, cm110LedFDF=cm110LedFDF, mcrPsmuFanFail=mcrPsmuFanFail, cm1000SlotIndex=cm1000SlotIndex, cm1110ConfigFiberIpTosPriority=cm1110ConfigFiberIpTosPriority, mcrMGTMIBNotificationsGroup=mcrMGTMIBNotificationsGroup, exCMPortOutFcsErrs=exCMPortOutFcsErrs, cm10gPort2LinkStatus=cm10gPort2LinkStatus, cm1000HwSw3FiberFaultAlert=cm1000HwSw3FiberFaultAlert, sfpDmiStatus=sfpDmiStatus, exCMPortCollisions=exCMPortCollisions, cm1000CopperLinkStatus=cm1000CopperLinkStatus, exCMVdslStatusAttainableDataRateDown=exCMVdslStatusAttainableDataRateDown, snmpAgentStatus=snmpAgentStatus, cm100mmConfigEntry=cm100mmConfigEntry, exCMPortPkts1024toMaxOctets=exCMPortPkts1024toMaxOctets, mgtUsersByPassLoginEnabled=mgtUsersByPassLoginEnabled, cm1110AvctTxRxPair4Amplitude=cm1110AvctTxRxPair4Amplitude, cm100mmConfigSlotIndex=cm100mmConfigSlotIndex, sshServerCipherCAST=sshServerCipherCAST, exCMLedETH=exCMLedETH, mcrMediaLostCommunication=mcrMediaLostCommunication, mcrModuleFirmwareVersion=mcrModuleFirmwareVersion, cm10gConfigPort1FecEnable=cm10gConfigPort1FecEnable, exCMVdslStatusActualLineAttenuationDs2=exCMVdslStatusActualLineAttenuationDs2, mcrMediaPortNum=mcrMediaPortNum, mcrBandwidthLevelDownstreamRecov=mcrBandwidthLevelDownstreamRecov, cm100ConfigCopperCrossOver=cm100ConfigCopperCrossOver, cm1110ConfigCopperDiscardTaggedFrames=cm1110ConfigCopperDiscardTaggedFrames, sfpDmiLowRxPowerWarn=sfpDmiLowRxPowerWarn, exCMTable=exCMTable, mcrXfpHighVCC3WarnRecov=mcrXfpHighVCC3WarnRecov, cm110VctRxPairDistance=cm110VctRxPairDistance, mcrXfpHighApdBiasWarn=mcrXfpHighApdBiasWarn, sntpStatVersion=sntpStatVersion, snmpCommunityIndex=snmpCommunityIndex, cm1110ConfigPriorityToEgressQueueMap2=cm1110ConfigPriorityToEgressQueueMap2, cm4gptHwJmp5ConfigMode=cm4gptHwJmp5ConfigMode, exCMPortInFcsErrs=exCMPortInFcsErrs, exCMConfigEthernetDuplex=exCMConfigEthernetDuplex, mcrXfpHigh18VoltWarn=mcrXfpHigh18VoltWarn, chassisFirmwareVersion=chassisFirmwareVersion, dnsIndex=dnsIndex, mcrXfpLowApdBiasWarnRecov=mcrXfpLowApdBiasWarnRecov, mcrChassisOk=mcrChassisOk, mcrPsmuFirmwareVersion=mcrPsmuFirmwareVersion, exCMConfigVdslProfileMode=exCMConfigVdslProfileMode, sfpDmiStatus2=sfpDmiStatus2, cm110ConfigFiberPriorityMap6=cm110ConfigFiberPriorityMap6, exCMVdslStatusActualLineAttenuationDown=exCMVdslStatusActualLineAttenuationDown, nettxfrTable=nettxfrTable, cm110PortInUnicasts=cm110PortInUnicasts, mcrXfpHighLaserWavelengthAlarm=mcrXfpHighLaserWavelengthAlarm, cm110ConfigPriorityToEgressQueueMap1=cm110ConfigPriorityToEgressQueueMap1, mcrPsmuEntry=mcrPsmuEntry, cm10gtModelname=cm10gtModelname, cm110CopperSpeed=cm110CopperSpeed, mcrXfpHigh5VoltAlarm=mcrXfpHigh5VoltAlarm, exCMPortOutOctets=exCMPortOutOctets, gatewayHost=gatewayHost, mcrMgtEthStatsTable=mcrMgtEthStatsTable, cm4gptConfigFiberFaultAlert=cm4gptConfigFiberFaultAlert, mcrChassisSlotPoweredOff=mcrChassisSlotPoweredOff, cm110RateConv=cm110RateConv, cm110ConfigCopperDefaultVlanId=cm110ConfigCopperDefaultVlanId, emailSMTPPassword=emailSMTPPassword, cm1000CopperPauseEnh=cm1000CopperPauseEnh, cm100mmFiber1ReceiveStatus=cm100mmFiber1ReceiveStatus, mcrPsmuInserted=mcrPsmuInserted, portRemoteStatus=portRemoteStatus, cm1110ConfigTable=cm1110ConfigTable, cm1000HwSw2LinkMode=cm1000HwSw2LinkMode, cm10gLedLK2=cm10gLedLK2, mcrMgtConfigConsoleSpeed=mcrMgtConfigConsoleSpeed, mcrSfpInserted=mcrSfpInserted, cm110HwJmp5ConfigMode=cm110HwJmp5ConfigMode, cm110ConfigCopperDiscardUntaggedFrames=cm110ConfigCopperDiscardUntaggedFrames, snmpCommunityIpAddress=snmpCommunityIpAddress, powerSchedOffHour=powerSchedOffHour, portPhysicalProtocol=portPhysicalProtocol, exCMHwSw6EthAutoNeg=exCMHwSw6EthAutoNeg, cfgDateFormat=cfgDateFormat, sntpStatMode=sntpStatMode, cm10gConfigPort2Name=cm10gConfigPort2Name, sfpDmiHighVoltAlarm=sfpDmiHighVoltAlarm, cm100LedLKC=cm100LedLKC, mcrXfpLowLaserWavelengthAlarm=mcrXfpLowLaserWavelengthAlarm, mcrXfpLow33VoltAlarmRecov=mcrXfpLow33VoltAlarmRecov, timeZoneListEnable=timeZoneListEnable, mcrChassisIndex=mcrChassisIndex, exCMConfigVdslDiscardTaggedFrames=exCMConfigVdslDiscardTaggedFrames, mcrXfpLowApdBiasAlarm=mcrXfpLowApdBiasAlarm, mgtEthStatsRxOverruns=mgtEthStatsRxOverruns, cm1000HwSw6Loopback=cm1000HwSw6Loopback, exCMVdslLinkStatus=exCMVdslLinkStatus, mgtEthStatsNoArp=mgtEthStatsNoArp, cm10gtConfigPort2CopperEnergyEfficientEthernet=cm10gtConfigPort2CopperEnergyEfficientEthernet, mcrMediaFail=mcrMediaFail, mcrXfpHighLaserWavelengthWarn=mcrXfpHighLaserWavelengthWarn, firmwareUpdateAuto=firmwareUpdateAuto, exCMConfigEthernetPauseEnh=exCMConfigEthernetPauseEnh, exCMVdslRemoteReset=exCMVdslRemoteReset, mcrMgtConfigConsoleFlowControl=mcrMgtConfigConsoleFlowControl)
mibBuilder.exportSymbols("PERLE-MCR-MGT-MIB", snmpTrapAlertLevel=snmpTrapAlertLevel, cm1110ConfigUnidirectionalEthernet=cm1110ConfigUnidirectionalEthernet, cm1000mmFiber1Speed=cm1000mmFiber1Speed, alarmWarnSeverity=alarmWarnSeverity, hostFqdn=hostFqdn, exCMVdslStatsTimeElapsedRemote=exCMVdslStatsTimeElapsedRemote, cm10gConfigPort2FecPhase=cm10gConfigPort2FecPhase, xfpDmiHighAuxWarn=xfpDmiHighAuxWarn, mcrMgtResetFactory=mcrMgtResetFactory, cm1110ConfigLinkMode=cm1110ConfigLinkMode, sshServerCipherArcfour=sshServerCipherArcfour, mcrXfpHigh5VCurrentWarn=mcrXfpHigh5VCurrentWarn, cm4gptSlotIndex=cm4gptSlotIndex, sshServerCipher3Des=sshServerCipher3Des, mcrMgtConfigTable=mcrMgtConfigTable, mcrXfpLowVCC3Warn=mcrXfpLowVCC3Warn, exCMConfigVdslIngressLimit=exCMConfigVdslIngressLimit, mcrPsmuPsuPowerUsage=mcrPsmuPsuPowerUsage, mgtEthStatsMacAddress=mgtEthStatsMacAddress, dynamicDNSHostname=dynamicDNSHostname, cm1110ConfigCopperAutoNegotiation=cm1110ConfigCopperAutoNegotiation, mgtUsersPrimaryAuthMethod=mgtUsersPrimaryAuthMethod, exCMConfigEthernetFilterUnknownUnicast=exCMConfigEthernetFilterUnknownUnicast, exCMConfigEthernetPriorityMap3=exCMConfigEthernetPriorityMap3, xfpDmiHighAux1Warn=xfpDmiHighAux1Warn, cm1110RateConvTable=cm1110RateConvTable, accessServiceTelnetD=accessServiceTelnetD, cm1110RateConvStatsTable=cm1110RateConvStatsTable, cm110LedPWR=cm110LedPWR, exCMConfigEthernetEgressLimit=exCMConfigEthernetEgressLimit, cm10gtPort1ConnType=cm10gtPort1ConnType, webManagerGroup=webManagerGroup, cm1110CopperPauseEnh=cm1110CopperPauseEnh, dynamicDNSSSLCipherHMAC=dynamicDNSSSLCipherHMAC, cm1000ConfigCopperPauseEnh=cm1000ConfigCopperPauseEnh, mcrSfpDmiModuleTable=mcrSfpDmiModuleTable, cm1110PortInRxErrs=cm1110PortInRxErrs, exCMConfigEthernetDiscardUntaggedFrames=exCMConfigEthernetDiscardUntaggedFrames, cm110FiberLoopBack=cm110FiberLoopBack, cm1110FiberLoopBack=cm1110FiberLoopBack, dnsActive=dnsActive, mcrXfpLow5VoltWarnRecov=mcrXfpLow5VoltWarnRecov, cm1000ConfigCopperDuplex=cm1000ConfigCopperDuplex, mediaConverter=mediaConverter, exCMConfigVdslRate=exCMConfigVdslRate, cm1110ConfigCopperAutoNegAdv100FDX=cm1110ConfigCopperAutoNegAdv100FDX, cm10gFixedTable=cm10gFixedTable, mcrXfpHigh18VoltAlarm=mcrXfpHigh18VoltAlarm, cm110ConfigFiberPortName=cm110ConfigFiberPortName, cm4gptConfigPort2Enable=cm4gptConfigPort2Enable, mcrXfpLow18VoltAlarm=mcrXfpLow18VoltAlarm, cm100mmConfigLinkMode=cm100mmConfigLinkMode, cm100ConfigFiberPortName=cm100ConfigFiberPortName, alarmWarnDeviceNum=alarmWarnDeviceNum, mcrMediaFirmwareUpdateSuccess=mcrMediaFirmwareUpdateSuccess, mcrXfpHighTecCurrentAlarm=mcrXfpHighTecCurrentAlarm, mcrXfpLowM52VCurrentAlarm=mcrXfpLowM52VCurrentAlarm, mcrXfpHighVCC3Alarm=mcrXfpHighVCC3Alarm, mcrMgtModelDesc=mcrMgtModelDesc, exCMConfigInterlinkFaultFeedback=exCMConfigInterlinkFaultFeedback, cm10gHwSw5Port2EdcMode=cm10gHwSw5Port2EdcMode, cm110PortInFragments=cm110PortInFragments, cm1110AvctTxRxPair3Results=cm1110AvctTxRxPair3Results, mgtChassisCfgGroup=mgtChassisCfgGroup, mcrXfpLow5VCurrentAlarm=mcrXfpLow5VCurrentAlarm, emailAlertLevel=emailAlertLevel, mcrXfpHighLaserTempWarnRecov=mcrXfpHighLaserTempWarnRecov, portConnType=portConnType, mcrXfpHigh5VCurrentAlarmRecov=mcrXfpHigh5VCurrentAlarmRecov, cm1110ConfigFiberPriorityMap3=cm1110ConfigFiberPriorityMap3, cm1110PortInFragments=cm1110PortInFragments, cm1110SlotIndex=cm1110SlotIndex, cm1110PortOutMulticasts=cm1110PortOutMulticasts, sfpDmiCurrentTempState=sfpDmiCurrentTempState, sntpStatOffset=sntpStatOffset, cm1000LedTable=cm1000LedTable, cm100mmFixedEntry=cm100mmFixedEntry, sfpDmiLowTempAlarm=sfpDmiLowTempAlarm, timeSntpHost2=timeSntpHost2, cm110HwSw6FiberDuplex=cm110HwSw6FiberDuplex, cm110ConfigSlotIndex=cm110ConfigSlotIndex, cm1110CopperCrossOver=cm1110CopperCrossOver, mgtEthStatsTxDroppedPkts=mgtEthStatsTxDroppedPkts, cm10gLedEntry=cm10gLedEntry, snmpTrapHostType=snmpTrapHostType, cm10gtConfigPort1FecPhase=cm10gtConfigPort1FecPhase, mcrMediaConfUpdateSuccess=mcrMediaConfUpdateSuccess)
