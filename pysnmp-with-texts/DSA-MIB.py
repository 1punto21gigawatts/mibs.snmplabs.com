#
# PySNMP MIB module DSA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DSA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
DistinguishedName, applIndex = mibBuilder.importSymbols("NETWORK-SERVICES-MIB", "DistinguishedName", "applIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, Counter32, ObjectIdentity, Unsigned32, Integer32, MibIdentifier, iso, Bits, mib_2, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, ModuleIdentity, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "ObjectIdentity", "Unsigned32", "Integer32", "MibIdentifier", "iso", "Bits", "mib-2", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "ModuleIdentity", "NotificationType", "IpAddress")
TextualConvention, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString")
dsaMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 29))
if mibBuilder.loadTexts: dsaMIB.setLastUpdated('9311250000Z')
if mibBuilder.loadTexts: dsaMIB.setOrganization('IETF Mail and Directory Management Working Group')
if mibBuilder.loadTexts: dsaMIB.setContactInfo(' Glenn Mansfield Postal: AIC Systems Laboratory 6-6-3, Minami Yoshinari Aoba-ku, Sendai, 989-32 JP Tel: +81 22 279 3310 Fax: +81 22 279 3640 E-Mail: glenn@aic.co.jp')
if mibBuilder.loadTexts: dsaMIB.setDescription(' The MIB module for monitoring Directory System Agents.')
dsaOpsTable = MibTable((1, 3, 6, 1, 2, 1, 29, 1), )
if mibBuilder.loadTexts: dsaOpsTable.setStatus('current')
if mibBuilder.loadTexts: dsaOpsTable.setDescription(' The table holding information related to the DSA operations.')
dsaOpsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 29, 1, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: dsaOpsEntry.setStatus('current')
if mibBuilder.loadTexts: dsaOpsEntry.setDescription(' Entry containing operations related statistics for a DSA.')
dsaAnonymousBinds = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaAnonymousBinds.setStatus('current')
if mibBuilder.loadTexts: dsaAnonymousBinds.setDescription(' Number of anonymous binds to this DSA from DUAs since application start.')
dsaUnauthBinds = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaUnauthBinds.setStatus('current')
if mibBuilder.loadTexts: dsaUnauthBinds.setDescription(' Number of un-authenticated binds to this DSA since application start.')
dsaSimpleAuthBinds = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaSimpleAuthBinds.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 8.1.2.1.1.')
if mibBuilder.loadTexts: dsaSimpleAuthBinds.setStatus('current')
if mibBuilder.loadTexts: dsaSimpleAuthBinds.setDescription(' Number of binds to this DSA that were authenticated using simple authentication procedures since application start.')
dsaStrongAuthBinds = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaStrongAuthBinds.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Sections 8.1.2.1.2 & 8.1.2.1.3.')
if mibBuilder.loadTexts: dsaStrongAuthBinds.setStatus('current')
if mibBuilder.loadTexts: dsaStrongAuthBinds.setDescription(' Number of binds to this DSA that were authenticated using the strong authentication procedures since application start. This includes the binds that were authenticated using external authentication procedures.')
dsaBindSecurityErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaBindSecurityErrors.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 12.7.2')
if mibBuilder.loadTexts: dsaBindSecurityErrors.setStatus('current')
if mibBuilder.loadTexts: dsaBindSecurityErrors.setDescription(' Number of bind operations that have been rejected by this DSA due to inappropriateAuthentication or invalidCredentials.')
dsaInOps = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaInOps.setStatus('current')
if mibBuilder.loadTexts: dsaInOps.setDescription(' Number of operations forwarded to this DSA from DUAs or other DSAs since application start up.')
dsaReadOps = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaReadOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 9.1.')
if mibBuilder.loadTexts: dsaReadOps.setStatus('current')
if mibBuilder.loadTexts: dsaReadOps.setDescription(' Number of read operations serviced by this DSA since application startup.')
dsaCompareOps = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaCompareOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 9.2.')
if mibBuilder.loadTexts: dsaCompareOps.setStatus('current')
if mibBuilder.loadTexts: dsaCompareOps.setDescription(' Number of compare operations serviced by this DSA since application startup.')
dsaAddEntryOps = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaAddEntryOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 11.1.')
if mibBuilder.loadTexts: dsaAddEntryOps.setStatus('current')
if mibBuilder.loadTexts: dsaAddEntryOps.setDescription(' Number of addEntry operations serviced by this DSA since application startup.')
dsaRemoveEntryOps = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaRemoveEntryOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 11.2.')
if mibBuilder.loadTexts: dsaRemoveEntryOps.setStatus('current')
if mibBuilder.loadTexts: dsaRemoveEntryOps.setDescription(' Number of removeEntry operations serviced by this DSA since application startup.')
dsaModifyEntryOps = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaModifyEntryOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 11.3.')
if mibBuilder.loadTexts: dsaModifyEntryOps.setStatus('current')
if mibBuilder.loadTexts: dsaModifyEntryOps.setDescription(' Number of modifyEntry operations serviced by this DSA since application startup.')
dsaModifyRDNOps = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaModifyRDNOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 11.4.')
if mibBuilder.loadTexts: dsaModifyRDNOps.setStatus('current')
if mibBuilder.loadTexts: dsaModifyRDNOps.setDescription(' Number of modifyRDN operations serviced by this DSA since application startup.')
dsaListOps = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaListOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 10.1.')
if mibBuilder.loadTexts: dsaListOps.setStatus('current')
if mibBuilder.loadTexts: dsaListOps.setDescription(' Number of list operations serviced by this DSA since application startup.')
dsaSearchOps = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaSearchOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 10.2.')
if mibBuilder.loadTexts: dsaSearchOps.setStatus('current')
if mibBuilder.loadTexts: dsaSearchOps.setDescription(' Number of search operations- baseObjectSearches, oneLevelSearches and subTreeSearches, serviced by this DSA since application startup.')
dsaOneLevelSearchOps = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaOneLevelSearchOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 10.2.2.2.')
if mibBuilder.loadTexts: dsaOneLevelSearchOps.setStatus('current')
if mibBuilder.loadTexts: dsaOneLevelSearchOps.setDescription(' Number of oneLevelSearch operations serviced by this DSA since application startup.')
dsaWholeTreeSearchOps = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaWholeTreeSearchOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 10.2.2.2.')
if mibBuilder.loadTexts: dsaWholeTreeSearchOps.setStatus('current')
if mibBuilder.loadTexts: dsaWholeTreeSearchOps.setDescription(' Number of wholeTreeSearch operations serviced by this DSA since application startup.')
dsaReferrals = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaReferrals.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 12.6.')
if mibBuilder.loadTexts: dsaReferrals.setStatus('current')
if mibBuilder.loadTexts: dsaReferrals.setDescription(' Number of referrals returned by this DSA in response to requests for operations since application startup.')
dsaChainings = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaChainings.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.518, 1988: Section 14.')
if mibBuilder.loadTexts: dsaChainings.setStatus('current')
if mibBuilder.loadTexts: dsaChainings.setDescription(' Number of operations forwarded by this DSA to other DSAs since application startup.')
dsaSecurityErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaSecurityErrors.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 12.7.')
if mibBuilder.loadTexts: dsaSecurityErrors.setStatus('current')
if mibBuilder.loadTexts: dsaSecurityErrors.setDescription(' Number of operations forwarded to this DSA which did not meet the security requirements. ')
dsaErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaErrors.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Sections 12.4, 12.5, 12.8 & 12.9.')
if mibBuilder.loadTexts: dsaErrors.setStatus('current')
if mibBuilder.loadTexts: dsaErrors.setDescription(' Number of operations that could not be serviced due to errors other than security errors, and referrals. A partially serviced operation will not be counted as an error. The errors include NameErrors, UpdateErrors, Attribute errors and ServiceErrors.')
dsaEntriesTable = MibTable((1, 3, 6, 1, 2, 1, 29, 2), )
if mibBuilder.loadTexts: dsaEntriesTable.setStatus('current')
if mibBuilder.loadTexts: dsaEntriesTable.setDescription(' The table holding information related to the entry statistics and cache performance of the DSAs.')
dsaEntriesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 29, 2, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: dsaEntriesEntry.setStatus('current')
if mibBuilder.loadTexts: dsaEntriesEntry.setDescription(' Entry containing statistics pertaining to entries held by a DSA.')
dsaMasterEntries = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaMasterEntries.setStatus('current')
if mibBuilder.loadTexts: dsaMasterEntries.setDescription(' Number of entries mastered in the DSA.')
dsaCopyEntries = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaCopyEntries.setStatus('current')
if mibBuilder.loadTexts: dsaCopyEntries.setDescription(' Number of entries for which systematic (slave) copies are maintained in the DSA.')
dsaCacheEntries = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaCacheEntries.setStatus('current')
if mibBuilder.loadTexts: dsaCacheEntries.setDescription(' Number of entries cached (non-systematic copies) in the DSA. This will include the entries that are cached partially. The negative cache is not counted.')
dsaCacheHits = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaCacheHits.setStatus('current')
if mibBuilder.loadTexts: dsaCacheHits.setDescription(' Number of operations that were serviced from the locally held cache since application startup.')
dsaSlaveHits = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaSlaveHits.setStatus('current')
if mibBuilder.loadTexts: dsaSlaveHits.setDescription(' Number of operations that were serviced from the locally held object replications [ shadow entries] since application startup.')
dsaIntTable = MibTable((1, 3, 6, 1, 2, 1, 29, 3), )
if mibBuilder.loadTexts: dsaIntTable.setStatus('current')
if mibBuilder.loadTexts: dsaIntTable.setDescription(' Each row of this table contains some details related to the history of the interaction of the monitored DSAs with their respective peer DSAs.')
dsaIntEntry = MibTableRow((1, 3, 6, 1, 2, 1, 29, 3, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "DSA-MIB", "dsaIntIndex"))
if mibBuilder.loadTexts: dsaIntEntry.setStatus('current')
if mibBuilder.loadTexts: dsaIntEntry.setDescription(' Entry containing interaction details of a DSA with a peer DSA.')
dsaIntIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dsaIntIndex.setStatus('current')
if mibBuilder.loadTexts: dsaIntIndex.setDescription(' Together with applIndex it forms the unique key to identify the conceptual row which contains useful info on the (attempted) interaction between the DSA (referred to by applIndex) and a peer DSA.')
dsaName = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 3, 1, 2), DistinguishedName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaName.setStatus('current')
if mibBuilder.loadTexts: dsaName.setDescription(' Distinguished Name of the peer DSA to which this entry pertains.')
dsaTimeOfCreation = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaTimeOfCreation.setStatus('current')
if mibBuilder.loadTexts: dsaTimeOfCreation.setDescription(' The value of sysUpTime when this row was created. If the entry was created before the network management subsystem was initialized, this object will contain a value of zero.')
dsaTimeOfLastAttempt = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaTimeOfLastAttempt.setStatus('current')
if mibBuilder.loadTexts: dsaTimeOfLastAttempt.setDescription(' The value of sysUpTime when the last attempt was made to contact this DSA. If the last attempt was made before the network management subsystem was initialized, this object will contain a value of zero.')
dsaTimeOfLastSuccess = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaTimeOfLastSuccess.setStatus('current')
if mibBuilder.loadTexts: dsaTimeOfLastSuccess.setDescription(' The value of sysUpTime when the last attempt made to contact this DSA was successful. If there have been no successful attempts this entry will have a value of zero. If the last successful attempt was made before the network management subsystem was initialized, this object will contain a value of zero.')
dsaFailuresSinceLastSuccess = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaFailuresSinceLastSuccess.setStatus('current')
if mibBuilder.loadTexts: dsaFailuresSinceLastSuccess.setDescription(' The number of failures since the last time an attempt to contact this DSA was successful. If there has been no successful attempts, this counter will contain the number of failures since this entry was created.')
dsaFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaFailures.setStatus('current')
if mibBuilder.loadTexts: dsaFailures.setDescription(' Cumulative failures since the creation of this entry.')
dsaSuccesses = MibTableColumn((1, 3, 6, 1, 2, 1, 29, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsaSuccesses.setStatus('current')
if mibBuilder.loadTexts: dsaSuccesses.setDescription(' Cumulative successes since the creation of this entry.')
dsaConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 29, 4))
dsaGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 29, 4, 1))
dsaCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 29, 4, 2))
dsaOpsCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 29, 4, 2, 1)).setObjects(("DSA-MIB", "dsaOpsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsaOpsCompliance = dsaOpsCompliance.setStatus('current')
if mibBuilder.loadTexts: dsaOpsCompliance.setDescription('The compliance statement for SNMPv2 entities which implement the DSA-MIB for monitoring DSA operations.')
dsaEntryCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 29, 4, 2, 2)).setObjects(("DSA-MIB", "dsaOpsGroup"), ("DSA-MIB", "dsaEntryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsaEntryCompliance = dsaEntryCompliance.setStatus('current')
if mibBuilder.loadTexts: dsaEntryCompliance.setDescription('The compliance statement for SNMPv2 entities which implement the DSA-MIB for monitoring DSA operations, entry statistics and cache performance.')
dsaIntCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 29, 4, 2, 3)).setObjects(("DSA-MIB", "dsaOpsGroup"), ("DSA-MIB", "dsaIntGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsaIntCompliance = dsaIntCompliance.setStatus('current')
if mibBuilder.loadTexts: dsaIntCompliance.setDescription(' The compliance statement for SNMPv2 entities which implement the DSA-MIB for monitoring DSA operations and the interaction of the DSA with peer DSAs.')
dsaOpsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 29, 4, 1, 1)).setObjects(("DSA-MIB", "dsaAnonymousBinds"), ("DSA-MIB", "dsaUnauthBinds"), ("DSA-MIB", "dsaSimpleAuthBinds"), ("DSA-MIB", "dsaStrongAuthBinds"), ("DSA-MIB", "dsaBindSecurityErrors"), ("DSA-MIB", "dsaInOps"), ("DSA-MIB", "dsaReadOps"), ("DSA-MIB", "dsaCompareOps"), ("DSA-MIB", "dsaAddEntryOps"), ("DSA-MIB", "dsaRemoveEntryOps"), ("DSA-MIB", "dsaModifyEntryOps"), ("DSA-MIB", "dsaModifyRDNOps"), ("DSA-MIB", "dsaListOps"), ("DSA-MIB", "dsaSearchOps"), ("DSA-MIB", "dsaOneLevelSearchOps"), ("DSA-MIB", "dsaWholeTreeSearchOps"), ("DSA-MIB", "dsaReferrals"), ("DSA-MIB", "dsaChainings"), ("DSA-MIB", "dsaSecurityErrors"), ("DSA-MIB", "dsaErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsaOpsGroup = dsaOpsGroup.setStatus('current')
if mibBuilder.loadTexts: dsaOpsGroup.setDescription(' A collection of objects for monitoring the DSA operations.')
dsaEntryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 29, 4, 1, 2)).setObjects(("DSA-MIB", "dsaMasterEntries"), ("DSA-MIB", "dsaCopyEntries"), ("DSA-MIB", "dsaCacheEntries"), ("DSA-MIB", "dsaCacheHits"), ("DSA-MIB", "dsaSlaveHits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsaEntryGroup = dsaEntryGroup.setStatus('current')
if mibBuilder.loadTexts: dsaEntryGroup.setDescription(' A collection of objects for monitoring the DSA entry statistics and cache performance.')
dsaIntGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 29, 4, 1, 3)).setObjects(("DSA-MIB", "dsaName"), ("DSA-MIB", "dsaTimeOfCreation"), ("DSA-MIB", "dsaTimeOfLastAttempt"), ("DSA-MIB", "dsaTimeOfLastSuccess"), ("DSA-MIB", "dsaFailuresSinceLastSuccess"), ("DSA-MIB", "dsaFailures"), ("DSA-MIB", "dsaSuccesses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsaIntGroup = dsaIntGroup.setStatus('current')
if mibBuilder.loadTexts: dsaIntGroup.setDescription(" A collection of objects for monitoring the DSA's interaction with peer DSAs.")
mibBuilder.exportSymbols("DSA-MIB", dsaOneLevelSearchOps=dsaOneLevelSearchOps, dsaIntCompliance=dsaIntCompliance, dsaEntriesTable=dsaEntriesTable, dsaSuccesses=dsaSuccesses, dsaReferrals=dsaReferrals, dsaModifyRDNOps=dsaModifyRDNOps, dsaFailures=dsaFailures, dsaAnonymousBinds=dsaAnonymousBinds, dsaOpsCompliance=dsaOpsCompliance, dsaTimeOfCreation=dsaTimeOfCreation, dsaBindSecurityErrors=dsaBindSecurityErrors, dsaFailuresSinceLastSuccess=dsaFailuresSinceLastSuccess, dsaChainings=dsaChainings, dsaCompareOps=dsaCompareOps, dsaTimeOfLastAttempt=dsaTimeOfLastAttempt, dsaCompliances=dsaCompliances, dsaCopyEntries=dsaCopyEntries, dsaOpsEntry=dsaOpsEntry, dsaSecurityErrors=dsaSecurityErrors, dsaStrongAuthBinds=dsaStrongAuthBinds, dsaEntriesEntry=dsaEntriesEntry, dsaMasterEntries=dsaMasterEntries, dsaUnauthBinds=dsaUnauthBinds, dsaIntTable=dsaIntTable, dsaWholeTreeSearchOps=dsaWholeTreeSearchOps, dsaAddEntryOps=dsaAddEntryOps, dsaListOps=dsaListOps, dsaIntIndex=dsaIntIndex, dsaCacheHits=dsaCacheHits, dsaEntryCompliance=dsaEntryCompliance, dsaOpsGroup=dsaOpsGroup, dsaName=dsaName, dsaInOps=dsaInOps, dsaRemoveEntryOps=dsaRemoveEntryOps, dsaSimpleAuthBinds=dsaSimpleAuthBinds, dsaSlaveHits=dsaSlaveHits, dsaConformance=dsaConformance, dsaMIB=dsaMIB, dsaSearchOps=dsaSearchOps, PYSNMP_MODULE_ID=dsaMIB, dsaCacheEntries=dsaCacheEntries, dsaModifyEntryOps=dsaModifyEntryOps, dsaOpsTable=dsaOpsTable, dsaReadOps=dsaReadOps, dsaIntGroup=dsaIntGroup, dsaErrors=dsaErrors, dsaEntryGroup=dsaEntryGroup, dsaTimeOfLastSuccess=dsaTimeOfLastSuccess, dsaGroups=dsaGroups, dsaIntEntry=dsaIntEntry)
