#
# PySNMP MIB module RFC1406Ext-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RFC1406Ext-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:56:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
cxDSX1Ext, = mibBuilder.importSymbols("CXProduct-SMI", "cxDSX1Ext")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ModuleIdentity, Unsigned32, NotificationType, iso, MibIdentifier, Integer32, IpAddress, Counter32, ObjectIdentity, Counter64, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "Unsigned32", "NotificationType", "iso", "MibIdentifier", "Integer32", "IpAddress", "Counter32", "ObjectIdentity", "Counter64", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dsx1ExtMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtMibLevel.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtMibLevel.setDescription('Used to determine current MIB module release supported by the agent. Object is in decimal.')
dsx1ExtCfgTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10), )
if mibBuilder.loadTexts: dsx1ExtCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgTable.setDescription('The T1/E1 extensions configuration table.')
dsx1ExtCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1), ).setIndexNames((0, "RFC1406Ext-MIB", "dsx1ExtCfgLinkIndex"))
if mibBuilder.loadTexts: dsx1ExtCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgEntry.setDescription('An entry in the T1/E1 extensions configuration table.')
dsx1ExtCfgLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgLinkIndex.setDescription('Identifies the physical port with the T1/E1 (dsx1Ext) interface. Range of Values: 1 - 2 Default Value: None Configuration Changed: administrative')
dsx1ExtCfgPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtCfgPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgPortStatus.setDescription('Indicates whether this T1/E1 (dsx1Ext) port is enabled or disabled. Options: disabled (1): The port is physically present but will be disabled (deactivated) after the next reset. enabled (2): The port will become enabled (functional) after the next reset. Default Value: disabled (1) Configuration Changed: administrative')
dsx1ExtCfgTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtCfgTraps.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgTraps.setDescription('Determines whether the software will produce a T1/E1 (dsx1...) trap. Options: disabled (1): The trap will not be produced. enabled (2): The trap will be generated. Default Value: disabled (1) Configuration Changed: administrative')
dsx1ExtCfgLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ExtCfgLineBuildOut.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgLineBuildOut.setDescription('Specifies the attenuation or Line Build Out to be used on the transmitter side of the line. Options: For T1 1: 0 to 133 feet / 0 dB 2: 133 to 266 feet 3: 266 to 399 feet 4: 399 to 533 feet 5: 533 to 655 feet 6: -7.5 dB 7: -15 dB 8: -22.5 dB For E1 1: 75 Ohm (coax. cable) 2: 120 Ohm (RJ45 shilded twisted pair) 3: 75 Ohm ( with protection resistor) 4: 120 Ohm ( with protection resistor) 5: 75 Ohm (with high return loss 1:1.15) 6: 120 Ohm (with high return loss 1:1.36) 7: 75 Ohm (with high return loss 1:1.36) 8: N/A Default Value: 1 Configuration Changed: administrative')
dsx1ExtCfgCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dsx1ExtNoCard", 1), ("dsx1ExtT1Card", 2), ("dsx1ExtE1Card", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgCardType.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgCardType.setDescription('Indicates the type of card connected to this CPU board. Options: dsx1ExtNoCard (1): Indicates that there is not a T1 or E1 card connected to the line interface or the value indicates that if there is a T1 or E1 card connected then the card is not functional. dsx1ExtT1Card (2): Indicates that a functional T1 card is connected to the line interface. dsx1ExtE1Card (3): Indicates that a functional E1 card is connected to the line interface.')
dsx1ExtCfgLossTxClock = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 51), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgLossTxClock.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgLossTxClock.setDescription('Indicates the total time at which the transmit clock was lost on this line interface. If no such event has occurred since system startup, then the value will be zero.')
dsx1ExtCfgLossSync = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 52), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgLossSync.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgLossSync.setDescription('Indicates the total time at which the synchronization was lost on this line interface. If no such event has occurred since system startup, then the value will be zero.')
dsx1ExtCfgLossCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 53), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgLossCarrier.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgLossCarrier.setDescription('Indicates the total time at which the carrier was lost on this line interface. If no such event has occurred since system startup, then the value will be zero.')
dsx1ExtCfgT18ZeroDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 54), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgT18ZeroDetect.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgT18ZeroDetect.setDescription('Indicates the total time that 8 consecutive zeros were received on this line interface. If no such event has occurred since system startup, then the value will be zero.')
dsx1ExtCfgT116ZeroDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 55), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgT116ZeroDetect.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgT116ZeroDetect.setDescription('Indicates the total time that 16 consecutive zeros were received on this line interface. If no such event has occurred since system startup, then the value will be zero.')
dsx1ExtCfgT1RxB8ZSCode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 56), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgT1RxB8ZSCode.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgT1RxB8ZSCode.setDescription('Indicates the total time that a B8ZS code word was detected during reception on this line interface. If no such event has occurred since system startup, then the value will be zero. Note: B8ZS code work detection occurs whether or not the B8ZS mode is selected.')
dsx1ExtCfgT1RxBlueAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 57), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgT1RxBlueAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgT1RxBlueAlarm.setDescription("Indicates the total time that a 'blue alarm' was received on this line interface. A blue alarm is an unframed signal comprised of all ones (1s). If no such event has occurred since system startup, then the value will be zero.")
dsx1ExtCfgT1RxYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 58), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgT1RxYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgT1RxYellowAlarm.setDescription("Indicates the total time that a 'yellow alarm' was received on this line interface. A yellow alarm occurs when bit 2 of 256 consecutive channels is set to zero for at least 254 occurrences in D4 format mode or when 16 consecutive patterns of 00FF hex appear in FDL format mode. If no such event has occurred since system startup, then the value will be zero.")
dsx1ExtCfgIoRegTest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("passed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgIoRegTest.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgIoRegTest.setDescription('Indicates the test results for the T1/E1 I/O card registers.')
dsx1ExtCfgSctRegTest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("passed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgSctRegTest.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgSctRegTest.setDescription('Indicates the test results for the T1 transceiver registers, specifically the 12 Transmit Signaling Registers.')
dsx1ExtCfgSctLatchRegTest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("passed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1ExtCfgSctLatchRegTest.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgSctLatchRegTest.setDescription('Indicates the test results for the T1 transceiver latch register, specifically the second Status Register.')
dsx1ExtCfgReinit = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 53, 10, 1, 81), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsx1ExtCfgReinit.setStatus('mandatory')
if mibBuilder.loadTexts: dsx1ExtCfgReinit.setDescription('When this object is set to any value, it reinitializes the corresponding port.')
mibBuilder.exportSymbols("RFC1406Ext-MIB", dsx1ExtCfgLineBuildOut=dsx1ExtCfgLineBuildOut, dsx1ExtCfgT116ZeroDetect=dsx1ExtCfgT116ZeroDetect, dsx1ExtCfgReinit=dsx1ExtCfgReinit, dsx1ExtCfgT1RxBlueAlarm=dsx1ExtCfgT1RxBlueAlarm, dsx1ExtCfgTraps=dsx1ExtCfgTraps, dsx1ExtCfgLossSync=dsx1ExtCfgLossSync, dsx1ExtMibLevel=dsx1ExtMibLevel, dsx1ExtCfgEntry=dsx1ExtCfgEntry, dsx1ExtCfgPortStatus=dsx1ExtCfgPortStatus, dsx1ExtCfgT18ZeroDetect=dsx1ExtCfgT18ZeroDetect, dsx1ExtCfgSctLatchRegTest=dsx1ExtCfgSctLatchRegTest, dsx1ExtCfgLinkIndex=dsx1ExtCfgLinkIndex, dsx1ExtCfgSctRegTest=dsx1ExtCfgSctRegTest, dsx1ExtCfgLossTxClock=dsx1ExtCfgLossTxClock, dsx1ExtCfgTable=dsx1ExtCfgTable, dsx1ExtCfgCardType=dsx1ExtCfgCardType, dsx1ExtCfgT1RxB8ZSCode=dsx1ExtCfgT1RxB8ZSCode, dsx1ExtCfgIoRegTest=dsx1ExtCfgIoRegTest, dsx1ExtCfgT1RxYellowAlarm=dsx1ExtCfgT1RxYellowAlarm, dsx1ExtCfgLossCarrier=dsx1ExtCfgLossCarrier)
