#
# PySNMP MIB module CISCO-IETF-NAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-NAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:00:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, MibIdentifier, Integer32, mib_2, TimeTicks, iso, Counter32, NotificationType, IpAddress, Counter64, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "MibIdentifier", "Integer32", "mib-2", "TimeTicks", "iso", "Counter32", "NotificationType", "IpAddress", "Counter64", "ObjectIdentity", "Unsigned32")
TextualConvention, DisplayString, StorageType, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "StorageType", "RowStatus")
ciscoIetfNatMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 77))
ciscoIetfNatMIB.setRevisions(('2001-03-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIetfNatMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoIetfNatMIB.setLastUpdated('200103010000Z')
if mibBuilder.loadTexts: ciscoIetfNatMIB.setOrganization('Cisco Systems, Inc')
if mibBuilder.loadTexts: ciscoIetfNatMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-nat@cisco.com')
if mibBuilder.loadTexts: ciscoIetfNatMIB.setDescription('This MIB module defines the generic managed objects for NAT.')
ciscoNatMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 77, 1))
cnatConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1))
cnatBind = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2))
cnatStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3))
class NATProtocolType(TextualConvention, Integer32):
    description = 'A list of protocols that are affected by NAT. Inclusion of values is not intended to imply that those protocols need be supported.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("icmp", 2), ("udp", 3), ("tcp", 4))

cnatConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 1), )
if mibBuilder.loadTexts: cnatConfTable.setStatus('current')
if mibBuilder.loadTexts: cnatConfTable.setDescription('This table specifies the configuration attributes for a device supporting NAT function.')
cnatConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 1, 1), ).setIndexNames((1, "CISCO-IETF-NAT-MIB", "cnatConfName"))
if mibBuilder.loadTexts: cnatConfEntry.setStatus('current')
if mibBuilder.loadTexts: cnatConfEntry.setDescription('Each entry in the cnatConfTable holds a set of configuration parameters associated with an instance of NAT. Entries in the cnatConfTable are created and deleted using the cnatConfStatus object.')
cnatConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cnatConfName.setStatus('current')
if mibBuilder.loadTexts: cnatConfName.setDescription('The locally arbitrary, but unique identifier associated with this cnatConfEntry.')
cnatConfServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("basicNat", 1), ("napt", 2), ("bidirectionalNat", 3), ("twiceNat", 4), ("multihomedNat", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfServiceType.setStatus('current')
if mibBuilder.loadTexts: cnatConfServiceType.setDescription('An indication of the direction in which new sessions are permitted and the extent of translation done within the IP and transport headers.')
cnatConfTimeoutIcmpIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfTimeoutIcmpIdle.setStatus('current')
if mibBuilder.loadTexts: cnatConfTimeoutIcmpIdle.setDescription('The interval of time for which an ICMP protocol session, associated with this configuration, is allowed to remain valid without any activity.')
cnatConfTimeoutUdpIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(300)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfTimeoutUdpIdle.setStatus('current')
if mibBuilder.loadTexts: cnatConfTimeoutUdpIdle.setDescription('The interval of time for which a UDP protocol session, associated with this configuration, is allowed to remain valid without any activity.')
cnatConfTimeoutTcpIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(86400)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfTimeoutTcpIdle.setStatus('current')
if mibBuilder.loadTexts: cnatConfTimeoutTcpIdle.setDescription('The interval of time for which a TCP protocol session, associated with this configuration, is allowed to remain valid without any activity. This timeout value applies to a TCP session during its data transfer phase.')
cnatConfTimeoutTcpNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfTimeoutTcpNeg.setStatus('current')
if mibBuilder.loadTexts: cnatConfTimeoutTcpNeg.setDescription('The interval of time for which a TCP protocol session, associated with this configuration, is allowed to remain valid without any activity. This timeout value applies to a TCP session during its establishment and termination phases.')
cnatConfTimeoutOther = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfTimeoutOther.setStatus('current')
if mibBuilder.loadTexts: cnatConfTimeoutOther.setDescription('The interval of time for which a protocol session other than ICMP, UDP and TCP, associated with this configuration, is allowed to remain valid, without any activity.')
cnatConfMaxBindLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfMaxBindLeaseTime.setStatus('current')
if mibBuilder.loadTexts: cnatConfMaxBindLeaseTime.setDescription('The maximum lease time for the BIND, associated with this configuration. Unless the lease time is renewed, a BIND will not be valid past the lease time. As a special case, a value of 0 may be assumed to indicate no lease time limit. Typically, this attribute is of relevance only in conjunction with Realm-Specific-IP (RSIP) operation.')
cnatConfMaxBindIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfMaxBindIdleTime.setStatus('current')
if mibBuilder.loadTexts: cnatConfMaxBindIdleTime.setDescription('The maximum time, associated with this configuration, to allow a dynamic BIND to remain valid with no NAT session hanging off this BIND. By default for NATIVE NAT maximum Idle time is 0. External agents could control this parameter differently. Static Binds and lease time limited BINDs are not affected by this parameter.')
cnatConfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 1, 1, 10), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfStorageType.setReference('Textual Conventions for SMIv2, Section 2.')
if mibBuilder.loadTexts: cnatConfStorageType.setStatus('current')
if mibBuilder.loadTexts: cnatConfStorageType.setDescription('The storage type for this conceptual row.')
cnatConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfStatus.setStatus('current')
if mibBuilder.loadTexts: cnatConfStatus.setDescription('The status of this conceptual row.')
cnatConfStaticAddrMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 2), )
if mibBuilder.loadTexts: cnatConfStaticAddrMapTable.setStatus('current')
if mibBuilder.loadTexts: cnatConfStaticAddrMapTable.setDescription('This table lists configuration for static NAT entries. This table has an expansion dependent relationship on the cnatConfTable. When an SNMP entity deletes a conceptual row from the cnatConfTable, then the corresponding entries are deleted from cnatConfStaticAddrMapTable.')
cnatConfStaticAddrMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-IETF-NAT-MIB", "cnatConfName"), (0, "CISCO-IETF-NAT-MIB", "cnatConfStaticAddrMapName"))
if mibBuilder.loadTexts: cnatConfStaticAddrMapEntry.setStatus('current')
if mibBuilder.loadTexts: cnatConfStaticAddrMapEntry.setDescription('A description of a static NAT entry. This entry contributes to the static NAT table of the device.')
cnatConfStaticAddrMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cnatConfStaticAddrMapName.setStatus('current')
if mibBuilder.loadTexts: cnatConfStaticAddrMapName.setDescription('An arbitrary, but unique identifier associated with this cnatConfStaticAddrMapEntry. The value of this object is unique across both the static address map and the dynamic address map tables.')
cnatConfStaticAddrMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfStaticAddrMapType.setStatus('current')
if mibBuilder.loadTexts: cnatConfStaticAddrMapType.setDescription('Address (and Transport-ID) maps may be defined for both inbound and outbound direction. Outbound address map refers to mapping a selected set of addresses from private realm to a selected set of addresses in external realm; whereas inbound address map refers to mapping a set of addresses from the external realm to private realm.')
cnatConfStaticLocalAddrFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfStaticLocalAddrFrom.setStatus('current')
if mibBuilder.loadTexts: cnatConfStaticLocalAddrFrom.setDescription('This object specifies the first IP address of the range of IP addresses mapped by this translation entry.')
cnatConfStaticLocalAddrTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfStaticLocalAddrTo.setStatus('current')
if mibBuilder.loadTexts: cnatConfStaticLocalAddrTo.setDescription('This object specifies the last IP address of the range of IP addresses mapped by this translation entry. If only a single address being mapped, the value of this object is equal to the value of cnatConfStaticLocalAddrFrom. The number addresses in the range defined by cnatConfStaticLocalAddrFrom and cnatConfStaticLocalAddrTo should be equal to the number of addresses in the range defined by cnatConfStaticGlobalAddrFrom and cnatConfStaticGlobalAddrTo.')
cnatConfStaticLocalPortFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfStaticLocalPortFrom.setStatus('current')
if mibBuilder.loadTexts: cnatConfStaticLocalPortFrom.setDescription("If this conceptual row describes a basic NAT, then the value of this object is '0'. If this conceptual row describes NAPT, then the value of this object specifies the first port number in the range of ports being mapped. If the translation specifies a single port, then the value of this object is equal to the value of cnatConfStaticLocalPortTo.")
cnatConfStaticLocalPortTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfStaticLocalPortTo.setStatus('current')
if mibBuilder.loadTexts: cnatConfStaticLocalPortTo.setDescription("If this conceptual row describes a basic NAT, then the value of this object is '0'. If this conceptual row describes NAPT, then the value of this object specifies the last port number in the range of ports being mapped. If the translation specifies a single port, then the value of this object is equal to the value of cnatConfStaticLocalPortFrom.")
cnatConfStaticGlobalAddrFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfStaticGlobalAddrFrom.setStatus('current')
if mibBuilder.loadTexts: cnatConfStaticGlobalAddrFrom.setDescription('This object specifies the first IP address of the range of IP addresses being mapped to.')
cnatConfStaticGlobalAddrTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 2, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfStaticGlobalAddrTo.setStatus('current')
if mibBuilder.loadTexts: cnatConfStaticGlobalAddrTo.setDescription('This object specifies the last IP address of the range of IP addresses being mapped to. If only a single address is being mapped to, the value of this object is equal to the value of cnatConfStaticGlobalAddrFrom.The number addresses in the range defined by cnatConfStaticGlobalAddrFrom and cnatConfStaticGlobalAddrTo should be equal to the number of addresses in the range defined by cnatConfStaticLocalAddrFrom and cnatConfStaticLocalAddrTo. ')
cnatConfStaticGlobalPortFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfStaticGlobalPortFrom.setStatus('current')
if mibBuilder.loadTexts: cnatConfStaticGlobalPortFrom.setDescription("If this conceptual row describes a basic NAT, then the value of this object is '0'. If this conceptual row describes NAPT, then the value of this object specifies the first port number in the range of ports being mapped to. If the translation specifies a single port, then the value of this object is equal to the value cnatConfStaticGlobalPortTo.")
cnatConfStaticGlobalPortTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfStaticGlobalPortTo.setStatus('current')
if mibBuilder.loadTexts: cnatConfStaticGlobalPortTo.setDescription("If this conceptual row describes a basic NAT, then the value of this object is '0'. If this conceptual describes NAPT, then the value of this object specifies the last port number in the range of ports being to. If the translation specifies a single port, then the value of this object is equal to the value of cnatConfStaticGlobalPortFrom.")
cnatConfStaticProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 2, 1, 11), Bits().clone(namedValues=NamedValues(("all", 0), ("other", 1), ("icmp", 2), ("udp", 3), ("tcp", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfStaticProtocol.setStatus('current')
if mibBuilder.loadTexts: cnatConfStaticProtocol.setDescription("This object specifies a protocol identifier. If the value of this object is '0', then this basic NAT entry applies to all IP traffic. If the value of this object is non-zero, then this NAT entry only applies to IP traffic with the specified protocol.")
cnatConfStaticAddrMapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 2, 1, 12), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfStaticAddrMapStorageType.setReference('Textual Conventions for SMIv2, Section 2.')
if mibBuilder.loadTexts: cnatConfStaticAddrMapStorageType.setStatus('current')
if mibBuilder.loadTexts: cnatConfStaticAddrMapStorageType.setDescription('The storage type for this conceptual row.')
cnatConfStaticAddrMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfStaticAddrMapStatus.setStatus('current')
if mibBuilder.loadTexts: cnatConfStaticAddrMapStatus.setDescription('The status of this conceptual row. To create a row in this table, a manager must set this object to either createAndGo(4) or createAndWait(5).')
cnatConfDynAddrMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 3), )
if mibBuilder.loadTexts: cnatConfDynAddrMapTable.setStatus('current')
if mibBuilder.loadTexts: cnatConfDynAddrMapTable.setDescription('This table lists dynamic NAT entries. This table has an expansion dependent relationship on the cnatConfTable. When an SNMP entity deletes a conceptual row from the cnatConfTable, then the corresponding entries are deleted from cnatConfDynAddrMapTable.')
cnatConfDynAddrMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-IETF-NAT-MIB", "cnatConfName"), (0, "CISCO-IETF-NAT-MIB", "cnatConfDynAddrMapName"))
if mibBuilder.loadTexts: cnatConfDynAddrMapEntry.setStatus('current')
if mibBuilder.loadTexts: cnatConfDynAddrMapEntry.setDescription('A description of a dynamic NAT entry. This entry contributes to the dynamic NAT table of the device.')
cnatConfDynAddrMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cnatConfDynAddrMapName.setStatus('current')
if mibBuilder.loadTexts: cnatConfDynAddrMapName.setDescription('An arbitrary, but unique identifier associated with this cnatConfDynAddrMapEntry. The value of this object is unique across both the static address map and the dynamic address map tables.')
cnatConfDynAddressMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfDynAddressMapType.setStatus('current')
if mibBuilder.loadTexts: cnatConfDynAddressMapType.setDescription('Address (and Transport-ID) maps may be defined for both inbound and outbound direction. Outbound address map refers to mapping a selected set of addresses from private realm to a selected set of addresses in external realm; whereas inbound address map refers to mapping a set of addresses from the external realm to private realm.')
cnatConfDynLocalAddrFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfDynLocalAddrFrom.setStatus('current')
if mibBuilder.loadTexts: cnatConfDynLocalAddrFrom.setDescription('This object specifies the first IP address of the range of IP addresses mapped by this translation entry.')
cnatConfDynLocalAddrTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfDynLocalAddrTo.setStatus('current')
if mibBuilder.loadTexts: cnatConfDynLocalAddrTo.setDescription('This object specifies the last IP address of the range of IP addresses mapped by this translation entry.')
cnatConfDynLocalPortFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfDynLocalPortFrom.setStatus('current')
if mibBuilder.loadTexts: cnatConfDynLocalPortFrom.setDescription("If this conceptual row describes a basic NAT, then the value of this object is '0'. If this conceptual row describes NAPT, then the value of this object specifies the first port number in the range of ports being mapped. If the translation specifies a single port, then the value of this object is equal to the value of cnatConfDynLocalPortTo.")
cnatConfDynLocalPortTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatConfDynLocalPortTo.setStatus('current')
if mibBuilder.loadTexts: cnatConfDynLocalPortTo.setDescription("If this conceptual row describes a basic NAT, then the value of this object is '0'. If this conceptual row describes NAPT, then the value of this object specifies the last port number in the range of ports being mapped. If the translation specifies a single port, then the value of this object is equal to the value of cnatConfDynLocalPortFrom.")
cnatConfDynGlobalAddrFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 3, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfDynGlobalAddrFrom.setStatus('current')
if mibBuilder.loadTexts: cnatConfDynGlobalAddrFrom.setDescription('This object specifies the first IP address of the range of IP addresses being mapped to.')
cnatConfDynGlobalAddrTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 3, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfDynGlobalAddrTo.setStatus('current')
if mibBuilder.loadTexts: cnatConfDynGlobalAddrTo.setDescription('This object specifies the last IP address of the range of IP addresses being mapped to.')
cnatConfDynGlobalPortFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfDynGlobalPortFrom.setStatus('current')
if mibBuilder.loadTexts: cnatConfDynGlobalPortFrom.setDescription("If this conceptual row describes a basic NAT, then the value of this object is '0'. If this conceptual row describes NAPT, then the value of this object specifies the first port number in the range of ports being mapped to. If the translation specifies a single port, then the value of this object is equal to the value of cnatConfDynGlobalPortTo.")
cnatConfDynGlobalPortTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfDynGlobalPortTo.setStatus('current')
if mibBuilder.loadTexts: cnatConfDynGlobalPortTo.setDescription("If this conceptual row describes a basic NAT, then the value of this object is '0'. If this conceptual row describes NAPT, then the value of this object specifies the last port number in the range of ports being mapped to. If the translation specifies a single port, then the value of this object is equal to the value of cnatConfDynGlobalPortFrom.")
cnatConfDynProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 3, 1, 11), Bits().clone(namedValues=NamedValues(("all", 0), ("other", 1), ("icmp", 2), ("udp", 3), ("tcp", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfDynProtocol.setStatus('current')
if mibBuilder.loadTexts: cnatConfDynProtocol.setDescription("This object specifies a protocol identifier. If the value of this object is '0', then this basic NAT entry applies to all IP traffic. If the value of this object is non-zero, then this NAT entry only applies to IP traffic with the specified protocol.")
cnatConfDynAddrMapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 3, 1, 12), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfDynAddrMapStorageType.setReference('Textual Conventions for SMIv2, Section 2.')
if mibBuilder.loadTexts: cnatConfDynAddrMapStorageType.setStatus('current')
if mibBuilder.loadTexts: cnatConfDynAddrMapStorageType.setDescription('The storage type for this conceptual row.')
cnatConfDynAddrMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 3, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatConfDynAddrMapStatus.setStatus('current')
if mibBuilder.loadTexts: cnatConfDynAddrMapStatus.setDescription('The status of this conceptual row. To create a row in this table, a manager must set this object to either createAndGo(4) or createAndWait(5).')
cnatInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 4), )
if mibBuilder.loadTexts: cnatInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: cnatInterfaceTable.setDescription('This table holds information regarding the interface on which NAT is enabled.')
cnatInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-IETF-NAT-MIB", "cnatInterfaceIndex"))
if mibBuilder.loadTexts: cnatInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: cnatInterfaceEntry.setDescription('Each entry in the NAT Interface Table holds information regarding an interface on which NAT is enabled.')
cnatInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cnatInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: cnatInterfaceIndex.setDescription('The ifIndex of the interface on which NAT is enabled.')
cnatInterfaceRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("private", 1), ("public", 2))).clone('public')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatInterfaceRealm.setStatus('current')
if mibBuilder.loadTexts: cnatInterfaceRealm.setDescription('This object identifies whether this interface is connected to the private or the public realm.')
cnatInterfaceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 4, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatInterfaceStorageType.setReference('Textual Conventions for SMIv2, Section 2.')
if mibBuilder.loadTexts: cnatInterfaceStorageType.setStatus('current')
if mibBuilder.loadTexts: cnatInterfaceStorageType.setDescription('The storage type for this conceptual row.')
cnatInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnatInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: cnatInterfaceStatus.setDescription('Status of NAT on this interface. An active status indicates that NAT is enabled on this interface.')
cnatAddrBindNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrBindNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: cnatAddrBindNumberOfEntries.setDescription('This object maintains a count of the number of entries that currently exist in the cnatAddrBindTable.')
cnatAddrBindTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 2), )
if mibBuilder.loadTexts: cnatAddrBindTable.setStatus('current')
if mibBuilder.loadTexts: cnatAddrBindTable.setDescription('This table holds information about the currently active NAT BINDs.')
cnatAddrBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-IETF-NAT-MIB", "cnatAddrBindLocalAddr"))
if mibBuilder.loadTexts: cnatAddrBindEntry.setStatus('current')
if mibBuilder.loadTexts: cnatAddrBindEntry.setDescription('Each entry in the NAT BIND table holds information about a NAT BIND that is currently active.')
cnatAddrBindLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: cnatAddrBindLocalAddr.setStatus('current')
if mibBuilder.loadTexts: cnatAddrBindLocalAddr.setDescription('This object represents the private-realm specific network layer address, which maps to the public-realm address represented by cnatAddrBindGlobalAddr.')
cnatAddrBindGlobalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrBindGlobalAddr.setStatus('current')
if mibBuilder.loadTexts: cnatAddrBindGlobalAddr.setDescription('This object represents the public-realm network layer address that maps to the private-realm network layer address represented by cnatAddrBindLocalAddr.')
cnatAddrBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrBindId.setStatus('current')
if mibBuilder.loadTexts: cnatAddrBindId.setDescription('This object represents a BIND id that is dynamically assigned to each BIND by a NAT enabled device. Each BIND is represented by a unique BIND id across both, the Address bind and Address-Port bind tables.')
cnatAddrBindDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uniDirectional", 1), ("biDirectional", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrBindDirection.setStatus('current')
if mibBuilder.loadTexts: cnatAddrBindDirection.setDescription('This object represents the direction of the BIND. A BIND may be either uni-directional or bi-directional, same as the orientation of the address map, based on which this bind is formed. The direction of this bind is with reference to the private realm.')
cnatAddrBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrBindType.setStatus('current')
if mibBuilder.loadTexts: cnatAddrBindType.setDescription('This object indicates whether the BIND is static or dynamic.')
cnatAddrBindConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 2, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrBindConfName.setStatus('current')
if mibBuilder.loadTexts: cnatAddrBindConfName.setDescription('This object is a pointer to the cnatConfTable entry (and the parameters of that entry) which was used in creating this BIND.')
cnatAddrBindSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrBindSessionCount.setStatus('current')
if mibBuilder.loadTexts: cnatAddrBindSessionCount.setDescription('Number of sessions currently using this BIND.')
cnatAddrBindCurrentIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrBindCurrentIdleTime.setStatus('current')
if mibBuilder.loadTexts: cnatAddrBindCurrentIdleTime.setDescription('At any given instance of time, this object indicates the time that this BIND has been idle with no sessions attached to it. The value represented by this object is of relevance only when the value of Maximum Idle time (cnatConfMaxBindIdleTime) is non-zero.')
cnatAddrBindInTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrBindInTranslate.setStatus('current')
if mibBuilder.loadTexts: cnatAddrBindInTranslate.setDescription('The number of inbound packets that were translated as per this BIND entry.')
cnatAddrBindOutTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrBindOutTranslate.setStatus('current')
if mibBuilder.loadTexts: cnatAddrBindOutTranslate.setDescription('The number of outbound packets that were translated as per this BIND entry.')
cnatAddrPortBindNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrPortBindNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: cnatAddrPortBindNumberOfEntries.setDescription('This object maintains a count of the number of entries that currently exist in the cnatAddrPortBindTable.')
cnatAddrPortBindTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 4), )
if mibBuilder.loadTexts: cnatAddrPortBindTable.setStatus('current')
if mibBuilder.loadTexts: cnatAddrPortBindTable.setDescription('This table holds information about the currently active NAPT BINDs.')
cnatAddrPortBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-IETF-NAT-MIB", "cnatAddrPortBindLocalAddr"), (0, "CISCO-IETF-NAT-MIB", "cnatAddrPortBindLocalPort"), (0, "CISCO-IETF-NAT-MIB", "cnatAddrPortBindProtocol"))
if mibBuilder.loadTexts: cnatAddrPortBindEntry.setStatus('current')
if mibBuilder.loadTexts: cnatAddrPortBindEntry.setDescription('Each entry in the this table holds information a NAPT BIND that is currently active.')
cnatAddrPortBindLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: cnatAddrPortBindLocalAddr.setStatus('current')
if mibBuilder.loadTexts: cnatAddrPortBindLocalAddr.setDescription('This object represents the private-realm specific network layer address which, in conjunction with cnatAddrPortBindLocalPort, maps to the public-realm network layer address and transport id represented by cnatAddrPortBindGlobalAddr and cnatAddrPortBindGlobalPort respectively.')
cnatAddrPortBindLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cnatAddrPortBindLocalPort.setStatus('current')
if mibBuilder.loadTexts: cnatAddrPortBindLocalPort.setDescription('This object represents the private-realm specific port number (or query ID in case of ICMP messages) which, in conjunction with cnatAddrPortBindLocalAddr, maps to the public-realm network layer address and transport id represented by cnatAddrPortBindGlobalAddr and cnatAddrPortBindGlobalPort respectively.')
cnatAddrPortBindProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 4, 1, 3), Bits().clone(namedValues=NamedValues(("all", 0), ("other", 1), ("icmp", 2), ("udp", 3), ("tcp", 4))))
if mibBuilder.loadTexts: cnatAddrPortBindProtocol.setStatus('current')
if mibBuilder.loadTexts: cnatAddrPortBindProtocol.setDescription("This object specifies a protocol identifier. If the value of this object is '0', then this BIND entry applies to all IP traffic. If the value of this object is non-zero, then this NAT entry only applies to IP traffic with the specified protocol.")
cnatAddrPortBindGlobalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrPortBindGlobalAddr.setStatus('current')
if mibBuilder.loadTexts: cnatAddrPortBindGlobalAddr.setDescription('This object represents the public-realm specific network layer address that, in conjunction with cnatAddrPortBindGlobalPort, maps to the private-realm network layer address and transport id represented by cnatAddrPortBindLocalAddr and cnatAddrPortBindLocalPort respectively.')
cnatAddrPortBindGlobalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrPortBindGlobalPort.setStatus('current')
if mibBuilder.loadTexts: cnatAddrPortBindGlobalPort.setDescription('This object represents the port number (or query id in case of ICMP) that, in conjunction with cnatAddrPortBindGlobalAddr, maps to the private-realm network layer address and transport id represented by cnatAddrPortBindLocalAddr and cnatAddrPortBindLocalPort respectively.')
cnatAddrPortBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrPortBindId.setStatus('current')
if mibBuilder.loadTexts: cnatAddrPortBindId.setDescription('This object represents a BIND id that is dynamically assigned to each BIND by a NAT enabled device. Each BIND is represented by a unique BIND id across both, the Address Bind and Address-Port Bind tables.')
cnatAddrPortBindDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uniDirectional", 1), ("biDirectional", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrPortBindDirection.setStatus('current')
if mibBuilder.loadTexts: cnatAddrPortBindDirection.setDescription('This object represents the direction of the BIND. A BIND may be either uni-directional or bi-directional, same as the orientation of the address map, based on which this bind is formed. The direction of this bind is with reference to the private realm.')
cnatAddrPortBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrPortBindType.setStatus('current')
if mibBuilder.loadTexts: cnatAddrPortBindType.setDescription('This object indicates whether the BIND is static or dynamic.')
cnatAddrPortBindConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 4, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrPortBindConfName.setStatus('current')
if mibBuilder.loadTexts: cnatAddrPortBindConfName.setDescription('This object is a pointer to the cnatConfTable entry (and the parameters of that entry) which was used in creating this BIND.')
cnatAddrPortBindSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrPortBindSessionCount.setStatus('current')
if mibBuilder.loadTexts: cnatAddrPortBindSessionCount.setDescription('Number of sessions currently using this BIND.')
cnatAddrPortBindCurrentIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 4, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrPortBindCurrentIdleTime.setStatus('current')
if mibBuilder.loadTexts: cnatAddrPortBindCurrentIdleTime.setDescription('At any given instance of time, this object indicates the time that this BIND has been idle with no sessions attached to it. The value represented by this object is of relevance only when the value of Maximum Idle time (cnatConfMaxBindIdleTime) is non-zero.')
cnatAddrPortBindInTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrPortBindInTranslate.setStatus('current')
if mibBuilder.loadTexts: cnatAddrPortBindInTranslate.setDescription('The number of inbound packets that were translated as per this BIND entry.')
cnatAddrPortBindOutTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrPortBindOutTranslate.setStatus('current')
if mibBuilder.loadTexts: cnatAddrPortBindOutTranslate.setDescription('The number of outbound packets that were translated as per this BIND entry.')
cnatSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5), )
if mibBuilder.loadTexts: cnatSessionTable.setStatus('current')
if mibBuilder.loadTexts: cnatSessionTable.setDescription('The (conceptual) table containing one entry for each NAT session currently active on this NAT device.')
cnatSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-IETF-NAT-MIB", "cnatSessionBindId"), (0, "CISCO-IETF-NAT-MIB", "cnatSessionId"))
if mibBuilder.loadTexts: cnatSessionEntry.setStatus('current')
if mibBuilder.loadTexts: cnatSessionEntry.setDescription('An entry (conceptual row) containing information about an active NAT session on this NAT device.')
cnatSessionBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cnatSessionBindId.setStatus('current')
if mibBuilder.loadTexts: cnatSessionBindId.setDescription('This object represents a BIND id that is dynamically assigned to each BIND by a NAT enabled device. This bind id is that same as represented by the BindId objects in the Address bind and Address-Port bind tables.')
cnatSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cnatSessionId.setStatus('current')
if mibBuilder.loadTexts: cnatSessionId.setDescription('The session ID for this NAT session.')
cnatSessionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatSessionDirection.setStatus('current')
if mibBuilder.loadTexts: cnatSessionDirection.setDescription("The direction of this session with respect to the local network. 'inbound' indicates that this session was initiated from the public network into the private network. 'outbound' indicates that this session was initiated from the private network into the public network.")
cnatSessionUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatSessionUpTime.setStatus('current')
if mibBuilder.loadTexts: cnatSessionUpTime.setDescription('The up time of this session in one-hundredths of a second.')
cnatSessionProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 5), NATProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatSessionProtocolType.setStatus('current')
if mibBuilder.loadTexts: cnatSessionProtocolType.setDescription('The protocol type of this session. TCP and UDP sessions are uniquely identified by the tuple of (source IP address, source UDP/TCP port, destination IP address, destination TCP/UCP port). ICMP query sessions are identified by the tuple of (source IP address, ICMP query ID, destination IP address).')
cnatSessionOrigPrivateAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatSessionOrigPrivateAddr.setStatus('current')
if mibBuilder.loadTexts: cnatSessionOrigPrivateAddr.setDescription('The original IP address of the session endpoint that lies in the private network.')
cnatSessionTransPrivateAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatSessionTransPrivateAddr.setStatus('current')
if mibBuilder.loadTexts: cnatSessionTransPrivateAddr.setDescription('The translated IP address of the session endpoint that lies in the private network. The value of this object is equal to that of the original public IP Address (cnatSessionOrigPrivateAddr) when there is no translation.')
cnatSessionOrigPrivatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatSessionOrigPrivatePort.setStatus('current')
if mibBuilder.loadTexts: cnatSessionOrigPrivatePort.setDescription('The original transport port of the session endpoint that belongs to the private network. If this is an ICMP session then the value is the ICMP request ID.')
cnatSessionTransPrivatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatSessionTransPrivatePort.setStatus('current')
if mibBuilder.loadTexts: cnatSessionTransPrivatePort.setDescription('The translated transport port of the session that lies in the private network. The value of this object is equal to that of the original transport port (cnatSessionOrigPrivatePort) when there is no translation.')
cnatSessionOrigPublicAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatSessionOrigPublicAddr.setStatus('current')
if mibBuilder.loadTexts: cnatSessionOrigPublicAddr.setDescription('The original IP address of the session endpoint that lies in the public network.')
cnatSessionTransPublicAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatSessionTransPublicAddr.setStatus('current')
if mibBuilder.loadTexts: cnatSessionTransPublicAddr.setDescription('The translated IP address of the session endpoint that belongs to the public network. The value of this object is equal to that of the original public IP Address (cnatSessionOrigPublicAddr) when there is no translation.')
cnatSessionOrigPublicPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatSessionOrigPublicPort.setStatus('current')
if mibBuilder.loadTexts: cnatSessionOrigPublicPort.setDescription('The original transport port of the session endpoint that belongs to the public network. If this is an ICMP session then the value contains the ICMP request ID.')
cnatSessionTransPublicPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatSessionTransPublicPort.setStatus('current')
if mibBuilder.loadTexts: cnatSessionTransPublicPort.setDescription('The translated transport port of the session endpoint that belongs to the public network. The value of this object is equal to that of the original transport port (cnatSessionOrigPublicPort) when there is no translation.')
cnatSessionCurrentIdletime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatSessionCurrentIdletime.setStatus('current')
if mibBuilder.loadTexts: cnatSessionCurrentIdletime.setDescription('The time in one-hundredths of a second since a packet belonging to this session was last detected.')
cnatSessionSecondBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatSessionSecondBindId.setStatus('current')
if mibBuilder.loadTexts: cnatSessionSecondBindId.setDescription("The natBindId of the 'other' NAT binding incase of Twice NAT. An instance of this object contains a valid value only if the binding type for this session is TwiceNAT.")
cnatSessionInTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatSessionInTranslate.setStatus('current')
if mibBuilder.loadTexts: cnatSessionInTranslate.setDescription('The number of inbound packets that were translated by this session.')
cnatSessionOutTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 2, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatSessionOutTranslate.setStatus('current')
if mibBuilder.loadTexts: cnatSessionOutTranslate.setDescription('The number of outbound packets that were translated by this session.')
cnatProtocolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 1), )
if mibBuilder.loadTexts: cnatProtocolStatsTable.setStatus('current')
if mibBuilder.loadTexts: cnatProtocolStatsTable.setDescription('The (conceptual) table containing per protocol NAT statistics.')
cnatProtocolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-IETF-NAT-MIB", "cnatProtocolStatsName"))
if mibBuilder.loadTexts: cnatProtocolStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cnatProtocolStatsEntry.setDescription('An entry (conceptual row) containing NAT statistics pertaining to a particular protocol.')
cnatProtocolStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 1, 1, 1), NATProtocolType())
if mibBuilder.loadTexts: cnatProtocolStatsName.setStatus('current')
if mibBuilder.loadTexts: cnatProtocolStatsName.setDescription('This object represents the protocol pertaining to which statistics are reported.')
cnatProtocolStatsInTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatProtocolStatsInTranslate.setStatus('current')
if mibBuilder.loadTexts: cnatProtocolStatsInTranslate.setDescription('The number of inbound packets, pertaining to the protocol identified by cnatProtocolStatsName, that underwent NAT.')
cnatProtocolStatsOutTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatProtocolStatsOutTranslate.setStatus('current')
if mibBuilder.loadTexts: cnatProtocolStatsOutTranslate.setDescription('The number of outbound packets, pertaining to the protocol identified by cnatProtocolStatsName, that underwent NAT.')
cnatProtocolStatsRejectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatProtocolStatsRejectCount.setStatus('current')
if mibBuilder.loadTexts: cnatProtocolStatsRejectCount.setDescription('The number of packets, pertaining to the protocol identified by cnatProtocolStatsName, that had to be rejected/dropped due to lack of resources. These rejections could be due to session timeout, resource unavailability etc.')
cnatAddrMapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 2), )
if mibBuilder.loadTexts: cnatAddrMapStatsTable.setStatus('current')
if mibBuilder.loadTexts: cnatAddrMapStatsTable.setDescription('The (conceptual) table containing per address map NAT statistics.')
cnatAddrMapStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-IETF-NAT-MIB", "cnatAddrMapStatsConfName"), (0, "CISCO-IETF-NAT-MIB", "cnatAddrMapStatsMapName"))
if mibBuilder.loadTexts: cnatAddrMapStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cnatAddrMapStatsEntry.setDescription('An entry (conceptual row) containing NAT statistics per address map.')
cnatAddrMapStatsConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cnatAddrMapStatsConfName.setStatus('current')
if mibBuilder.loadTexts: cnatAddrMapStatsConfName.setDescription('The name of the configuration (from the cnatConfTable), regarding which statistics are being reported. The configuration name along with Map name uniquely identifies an entry across both (static and dynamic) Address Map tables.')
cnatAddrMapStatsMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cnatAddrMapStatsMapName.setStatus('current')
if mibBuilder.loadTexts: cnatAddrMapStatsMapName.setDescription('The name of the Address Map (from the cnatConfStaticAddrMapTable/cnatConfDynAddrMapTable), regarding which statistics are being reported. The configuration name along with Map name uniquely identifies an entry across both (static and dynamic) Address Map tables.')
cnatAddrMapStatsInTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrMapStatsInTranslate.setStatus('current')
if mibBuilder.loadTexts: cnatAddrMapStatsInTranslate.setDescription('The number of inbound packets, pertaining to this address map entry, that were translated.')
cnatAddrMapStatsOutTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrMapStatsOutTranslate.setStatus('current')
if mibBuilder.loadTexts: cnatAddrMapStatsOutTranslate.setDescription('The number of outbound packets, pertaining to this address map entry, that were translated.')
cnatAddrMapStatsNoResource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrMapStatsNoResource.setStatus('current')
if mibBuilder.loadTexts: cnatAddrMapStatsNoResource.setDescription('The number of packets, pertaining to this address map entry, that were dropped due to lack of addresses in the address pool identified by this address map. The value of this object should always be zero in case of static address map.')
cnatAddrMapStatsAddrUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatAddrMapStatsAddrUsed.setStatus('current')
if mibBuilder.loadTexts: cnatAddrMapStatsAddrUsed.setDescription('The number of addresses, pertaining to this address map, that are currently being used from the nat pool. The value of this object is irrelevant if the address map in question is a static address map.')
cnatInterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 3), )
if mibBuilder.loadTexts: cnatInterfaceStatsTable.setStatus('current')
if mibBuilder.loadTexts: cnatInterfaceStatsTable.setDescription('This table augments the cnatInterfaceTable and provides statistics information pertaining to the specified interface.')
cnatInterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 3, 1), )
cnatInterfaceEntry.registerAugmentions(("CISCO-IETF-NAT-MIB", "cnatInterfaceStatsEntry"))
cnatInterfaceStatsEntry.setIndexNames(*cnatInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: cnatInterfaceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cnatInterfaceStatsEntry.setDescription('Each entry of the cnatInterfaceStatsTable represents stats pertaining to one interface, which is identified by its ifIndex.')
cnatInterfacePktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatInterfacePktsIn.setStatus('current')
if mibBuilder.loadTexts: cnatInterfacePktsIn.setDescription('Number of packets received on this interface that were translated.')
cnatInterfacePktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 77, 1, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnatInterfacePktsOut.setStatus('current')
if mibBuilder.loadTexts: cnatInterfacePktsOut.setDescription('Number of translated packets that were sent out this interface.')
ciscoNatMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 77, 2))
ciscoNatMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 77, 2, 0))
ciscoNatMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 77, 3))
ciscoNatMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 77, 3, 1))
ciscoNatMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 77, 3, 2))
ciscoNatMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 77, 3, 1, 1)).setObjects(("CISCO-IETF-NAT-MIB", "cnatConfigGroup"), ("CISCO-IETF-NAT-MIB", "cnatBindGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoNatMIBCompliance = ciscoNatMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoNatMIBCompliance.setDescription('The compliance statement for devices running NAT.')
cnatConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 77, 3, 2, 1)).setObjects(("CISCO-IETF-NAT-MIB", "cnatConfServiceType"), ("CISCO-IETF-NAT-MIB", "cnatConfTimeoutIcmpIdle"), ("CISCO-IETF-NAT-MIB", "cnatConfTimeoutUdpIdle"), ("CISCO-IETF-NAT-MIB", "cnatConfTimeoutTcpIdle"), ("CISCO-IETF-NAT-MIB", "cnatConfTimeoutTcpNeg"), ("CISCO-IETF-NAT-MIB", "cnatConfTimeoutOther"), ("CISCO-IETF-NAT-MIB", "cnatConfMaxBindLeaseTime"), ("CISCO-IETF-NAT-MIB", "cnatConfMaxBindIdleTime"), ("CISCO-IETF-NAT-MIB", "cnatConfStorageType"), ("CISCO-IETF-NAT-MIB", "cnatConfStatus"), ("CISCO-IETF-NAT-MIB", "cnatConfStaticAddrMapType"), ("CISCO-IETF-NAT-MIB", "cnatConfStaticLocalAddrFrom"), ("CISCO-IETF-NAT-MIB", "cnatConfStaticLocalAddrTo"), ("CISCO-IETF-NAT-MIB", "cnatConfStaticLocalPortFrom"), ("CISCO-IETF-NAT-MIB", "cnatConfStaticLocalPortTo"), ("CISCO-IETF-NAT-MIB", "cnatConfStaticGlobalAddrFrom"), ("CISCO-IETF-NAT-MIB", "cnatConfStaticGlobalAddrTo"), ("CISCO-IETF-NAT-MIB", "cnatConfStaticGlobalPortFrom"), ("CISCO-IETF-NAT-MIB", "cnatConfStaticGlobalPortTo"), ("CISCO-IETF-NAT-MIB", "cnatConfStaticProtocol"), ("CISCO-IETF-NAT-MIB", "cnatConfStaticAddrMapStorageType"), ("CISCO-IETF-NAT-MIB", "cnatConfStaticAddrMapStatus"), ("CISCO-IETF-NAT-MIB", "cnatConfDynAddressMapType"), ("CISCO-IETF-NAT-MIB", "cnatConfDynLocalAddrFrom"), ("CISCO-IETF-NAT-MIB", "cnatConfDynLocalAddrTo"), ("CISCO-IETF-NAT-MIB", "cnatConfDynLocalPortFrom"), ("CISCO-IETF-NAT-MIB", "cnatConfDynLocalPortTo"), ("CISCO-IETF-NAT-MIB", "cnatConfDynGlobalAddrFrom"), ("CISCO-IETF-NAT-MIB", "cnatConfDynGlobalAddrTo"), ("CISCO-IETF-NAT-MIB", "cnatConfDynGlobalPortFrom"), ("CISCO-IETF-NAT-MIB", "cnatConfDynGlobalPortTo"), ("CISCO-IETF-NAT-MIB", "cnatConfDynProtocol"), ("CISCO-IETF-NAT-MIB", "cnatConfDynAddrMapStorageType"), ("CISCO-IETF-NAT-MIB", "cnatConfDynAddrMapStatus"), ("CISCO-IETF-NAT-MIB", "cnatInterfaceRealm"), ("CISCO-IETF-NAT-MIB", "cnatInterfaceStorageType"), ("CISCO-IETF-NAT-MIB", "cnatInterfaceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnatConfigGroup = cnatConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cnatConfigGroup.setDescription('A collection of configuration-related information required to support management of devices supporting NAT.')
cnatBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 77, 3, 2, 2)).setObjects(("CISCO-IETF-NAT-MIB", "cnatAddrBindNumberOfEntries"), ("CISCO-IETF-NAT-MIB", "cnatAddrBindGlobalAddr"), ("CISCO-IETF-NAT-MIB", "cnatAddrBindId"), ("CISCO-IETF-NAT-MIB", "cnatAddrBindDirection"), ("CISCO-IETF-NAT-MIB", "cnatAddrBindType"), ("CISCO-IETF-NAT-MIB", "cnatAddrBindConfName"), ("CISCO-IETF-NAT-MIB", "cnatAddrBindSessionCount"), ("CISCO-IETF-NAT-MIB", "cnatAddrBindCurrentIdleTime"), ("CISCO-IETF-NAT-MIB", "cnatAddrBindInTranslate"), ("CISCO-IETF-NAT-MIB", "cnatAddrBindOutTranslate"), ("CISCO-IETF-NAT-MIB", "cnatAddrPortBindNumberOfEntries"), ("CISCO-IETF-NAT-MIB", "cnatAddrPortBindGlobalAddr"), ("CISCO-IETF-NAT-MIB", "cnatAddrPortBindGlobalPort"), ("CISCO-IETF-NAT-MIB", "cnatAddrPortBindId"), ("CISCO-IETF-NAT-MIB", "cnatAddrPortBindDirection"), ("CISCO-IETF-NAT-MIB", "cnatAddrPortBindType"), ("CISCO-IETF-NAT-MIB", "cnatAddrPortBindConfName"), ("CISCO-IETF-NAT-MIB", "cnatAddrPortBindSessionCount"), ("CISCO-IETF-NAT-MIB", "cnatAddrPortBindCurrentIdleTime"), ("CISCO-IETF-NAT-MIB", "cnatAddrPortBindInTranslate"), ("CISCO-IETF-NAT-MIB", "cnatAddrPortBindOutTranslate"), ("CISCO-IETF-NAT-MIB", "cnatSessionDirection"), ("CISCO-IETF-NAT-MIB", "cnatSessionUpTime"), ("CISCO-IETF-NAT-MIB", "cnatSessionProtocolType"), ("CISCO-IETF-NAT-MIB", "cnatSessionOrigPrivateAddr"), ("CISCO-IETF-NAT-MIB", "cnatSessionTransPrivateAddr"), ("CISCO-IETF-NAT-MIB", "cnatSessionOrigPrivatePort"), ("CISCO-IETF-NAT-MIB", "cnatSessionTransPrivatePort"), ("CISCO-IETF-NAT-MIB", "cnatSessionOrigPublicAddr"), ("CISCO-IETF-NAT-MIB", "cnatSessionTransPublicAddr"), ("CISCO-IETF-NAT-MIB", "cnatSessionOrigPublicPort"), ("CISCO-IETF-NAT-MIB", "cnatSessionTransPublicPort"), ("CISCO-IETF-NAT-MIB", "cnatSessionCurrentIdletime"), ("CISCO-IETF-NAT-MIB", "cnatSessionSecondBindId"), ("CISCO-IETF-NAT-MIB", "cnatSessionInTranslate"), ("CISCO-IETF-NAT-MIB", "cnatSessionOutTranslate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnatBindGroup = cnatBindGroup.setStatus('current')
if mibBuilder.loadTexts: cnatBindGroup.setDescription('A collection of BIND-related objects required to support management of devices supporting NAT.')
cnatStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 77, 3, 2, 3)).setObjects(("CISCO-IETF-NAT-MIB", "cnatProtocolStatsInTranslate"), ("CISCO-IETF-NAT-MIB", "cnatProtocolStatsOutTranslate"), ("CISCO-IETF-NAT-MIB", "cnatProtocolStatsRejectCount"), ("CISCO-IETF-NAT-MIB", "cnatAddrMapStatsInTranslate"), ("CISCO-IETF-NAT-MIB", "cnatAddrMapStatsOutTranslate"), ("CISCO-IETF-NAT-MIB", "cnatAddrMapStatsNoResource"), ("CISCO-IETF-NAT-MIB", "cnatAddrMapStatsAddrUsed"), ("CISCO-IETF-NAT-MIB", "cnatInterfacePktsIn"), ("CISCO-IETF-NAT-MIB", "cnatInterfacePktsOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnatStatsGroup = cnatStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cnatStatsGroup.setDescription('A collection of NAT statistics related objects required to support troubleshooting/monitoring NAT operation.')
mibBuilder.exportSymbols("CISCO-IETF-NAT-MIB", cnatConfDynGlobalPortFrom=cnatConfDynGlobalPortFrom, ciscoNatMIBCompliances=ciscoNatMIBCompliances, cnatConfDynGlobalAddrFrom=cnatConfDynGlobalAddrFrom, cnatConfName=cnatConfName, cnatConfDynGlobalPortTo=cnatConfDynGlobalPortTo, cnatSessionCurrentIdletime=cnatSessionCurrentIdletime, cnatConfig=cnatConfig, cnatInterfaceStatus=cnatInterfaceStatus, cnatConfStaticGlobalPortFrom=cnatConfStaticGlobalPortFrom, cnatSessionUpTime=cnatSessionUpTime, cnatConfStaticAddrMapEntry=cnatConfStaticAddrMapEntry, cnatAddrBindLocalAddr=cnatAddrBindLocalAddr, cnatAddrBindConfName=cnatAddrBindConfName, cnatSessionId=cnatSessionId, PYSNMP_MODULE_ID=ciscoIetfNatMIB, cnatAddrMapStatsEntry=cnatAddrMapStatsEntry, cnatSessionTransPrivatePort=cnatSessionTransPrivatePort, cnatSessionOrigPublicPort=cnatSessionOrigPublicPort, cnatConfDynLocalPortTo=cnatConfDynLocalPortTo, cnatConfTimeoutTcpIdle=cnatConfTimeoutTcpIdle, cnatInterfaceTable=cnatInterfaceTable, cnatConfDynLocalAddrFrom=cnatConfDynLocalAddrFrom, cnatAddrBindNumberOfEntries=cnatAddrBindNumberOfEntries, ciscoNatMIBCompliance=ciscoNatMIBCompliance, cnatConfDynProtocol=cnatConfDynProtocol, cnatSessionDirection=cnatSessionDirection, cnatAddrBindTable=cnatAddrBindTable, cnatConfStaticLocalPortTo=cnatConfStaticLocalPortTo, cnatConfTimeoutTcpNeg=cnatConfTimeoutTcpNeg, cnatAddrMapStatsInTranslate=cnatAddrMapStatsInTranslate, cnatAddrBindGlobalAddr=cnatAddrBindGlobalAddr, cnatAddrPortBindEntry=cnatAddrPortBindEntry, cnatConfDynAddressMapType=cnatConfDynAddressMapType, cnatSessionTable=cnatSessionTable, cnatConfDynAddrMapStatus=cnatConfDynAddrMapStatus, cnatAddrMapStatsTable=cnatAddrMapStatsTable, cnatConfDynAddrMapStorageType=cnatConfDynAddrMapStorageType, cnatProtocolStatsName=cnatProtocolStatsName, cnatSessionProtocolType=cnatSessionProtocolType, cnatAddrPortBindSessionCount=cnatAddrPortBindSessionCount, cnatInterfacePktsIn=cnatInterfacePktsIn, cnatConfEntry=cnatConfEntry, cnatAddrBindSessionCount=cnatAddrBindSessionCount, cnatSessionSecondBindId=cnatSessionSecondBindId, cnatAddrPortBindGlobalPort=cnatAddrPortBindGlobalPort, cnatSessionInTranslate=cnatSessionInTranslate, cnatConfTimeoutUdpIdle=cnatConfTimeoutUdpIdle, cnatSessionOrigPrivatePort=cnatSessionOrigPrivatePort, ciscoNatMIBNotificationPrefix=ciscoNatMIBNotificationPrefix, cnatProtocolStatsOutTranslate=cnatProtocolStatsOutTranslate, cnatAddrBindType=cnatAddrBindType, cnatAddrPortBindLocalPort=cnatAddrPortBindLocalPort, ciscoNatMIBNotifications=ciscoNatMIBNotifications, cnatConfTimeoutOther=cnatConfTimeoutOther, cnatAddrMapStatsMapName=cnatAddrMapStatsMapName, cnatConfStaticProtocol=cnatConfStaticProtocol, cnatConfTimeoutIcmpIdle=cnatConfTimeoutIcmpIdle, cnatConfStaticAddrMapStatus=cnatConfStaticAddrMapStatus, cnatSessionEntry=cnatSessionEntry, cnatAddrBindEntry=cnatAddrBindEntry, cnatConfStaticAddrMapType=cnatConfStaticAddrMapType, cnatConfStaticAddrMapStorageType=cnatConfStaticAddrMapStorageType, cnatSessionOrigPrivateAddr=cnatSessionOrigPrivateAddr, ciscoNatMIBObjects=ciscoNatMIBObjects, cnatSessionTransPublicPort=cnatSessionTransPublicPort, cnatAddrBindOutTranslate=cnatAddrBindOutTranslate, cnatAddrMapStatsAddrUsed=cnatAddrMapStatsAddrUsed, cnatAddrPortBindCurrentIdleTime=cnatAddrPortBindCurrentIdleTime, cnatConfDynAddrMapEntry=cnatConfDynAddrMapEntry, cnatAddrPortBindDirection=cnatAddrPortBindDirection, cnatConfDynGlobalAddrTo=cnatConfDynGlobalAddrTo, cnatConfStorageType=cnatConfStorageType, cnatAddrPortBindTable=cnatAddrPortBindTable, ciscoIetfNatMIB=ciscoIetfNatMIB, NATProtocolType=NATProtocolType, cnatConfStaticAddrMapTable=cnatConfStaticAddrMapTable, cnatConfDynLocalPortFrom=cnatConfDynLocalPortFrom, cnatConfStaticGlobalAddrFrom=cnatConfStaticGlobalAddrFrom, cnatAddrBindCurrentIdleTime=cnatAddrBindCurrentIdleTime, cnatAddrMapStatsNoResource=cnatAddrMapStatsNoResource, cnatConfTable=cnatConfTable, cnatConfStaticAddrMapName=cnatConfStaticAddrMapName, cnatAddrMapStatsConfName=cnatAddrMapStatsConfName, cnatInterfaceStatsTable=cnatInterfaceStatsTable, cnatProtocolStatsInTranslate=cnatProtocolStatsInTranslate, cnatConfServiceType=cnatConfServiceType, cnatProtocolStatsRejectCount=cnatProtocolStatsRejectCount, cnatConfStaticGlobalAddrTo=cnatConfStaticGlobalAddrTo, cnatAddrBindDirection=cnatAddrBindDirection, cnatConfigGroup=cnatConfigGroup, cnatInterfaceIndex=cnatInterfaceIndex, cnatSessionOrigPublicAddr=cnatSessionOrigPublicAddr, cnatAddrPortBindType=cnatAddrPortBindType, cnatConfDynAddrMapTable=cnatConfDynAddrMapTable, cnatSessionTransPrivateAddr=cnatSessionTransPrivateAddr, cnatSessionBindId=cnatSessionBindId, cnatStatistics=cnatStatistics, cnatInterfaceStatsEntry=cnatInterfaceStatsEntry, cnatAddrBindId=cnatAddrBindId, cnatInterfacePktsOut=cnatInterfacePktsOut, cnatConfMaxBindIdleTime=cnatConfMaxBindIdleTime, cnatAddrPortBindOutTranslate=cnatAddrPortBindOutTranslate, cnatConfDynAddrMapName=cnatConfDynAddrMapName, cnatAddrBindInTranslate=cnatAddrBindInTranslate, cnatAddrPortBindInTranslate=cnatAddrPortBindInTranslate, cnatAddrMapStatsOutTranslate=cnatAddrMapStatsOutTranslate, cnatAddrPortBindGlobalAddr=cnatAddrPortBindGlobalAddr, cnatSessionOutTranslate=cnatSessionOutTranslate, cnatProtocolStatsTable=cnatProtocolStatsTable, cnatInterfaceStorageType=cnatInterfaceStorageType, cnatConfStaticLocalPortFrom=cnatConfStaticLocalPortFrom, ciscoNatMIBGroups=ciscoNatMIBGroups, cnatBind=cnatBind, cnatConfStaticLocalAddrFrom=cnatConfStaticLocalAddrFrom, cnatConfStaticLocalAddrTo=cnatConfStaticLocalAddrTo, cnatAddrPortBindLocalAddr=cnatAddrPortBindLocalAddr, cnatStatsGroup=cnatStatsGroup, cnatConfMaxBindLeaseTime=cnatConfMaxBindLeaseTime, cnatConfDynLocalAddrTo=cnatConfDynLocalAddrTo, cnatAddrPortBindId=cnatAddrPortBindId, cnatConfStatus=cnatConfStatus, cnatAddrPortBindConfName=cnatAddrPortBindConfName, cnatAddrPortBindNumberOfEntries=cnatAddrPortBindNumberOfEntries, cnatInterfaceEntry=cnatInterfaceEntry, cnatInterfaceRealm=cnatInterfaceRealm, cnatSessionTransPublicAddr=cnatSessionTransPublicAddr, ciscoNatMIBConformance=ciscoNatMIBConformance, cnatConfStaticGlobalPortTo=cnatConfStaticGlobalPortTo, cnatBindGroup=cnatBindGroup, cnatProtocolStatsEntry=cnatProtocolStatsEntry, cnatAddrPortBindProtocol=cnatAddrPortBindProtocol)
