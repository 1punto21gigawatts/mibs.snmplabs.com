#
# PySNMP MIB module REPEATER-REV4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REPEATER-REV4-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:44:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
repeaterRev4, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "repeaterRev4")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, Counter32, Integer32, Counter64, NotificationType, ObjectIdentity, iso, MibIdentifier, ModuleIdentity, Unsigned32, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "Counter32", "Integer32", "Counter64", "NotificationType", "ObjectIdentity", "iso", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Bits", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
repeaterrev4 = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4))
rptr = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1))
rptrMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1))
rptrMgmtName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrMgmtName.setStatus('mandatory')
if mibBuilder.loadTexts: rptrMgmtName.setDescription('The ASCII name assigned to this network.')
rptrMgmtPortCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: rptrMgmtPortCount.setDescription('Total number of ports residing on this lan segment.')
rptrMgmtPortsEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrMgmtPortsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrMgmtPortsEnable.setDescription('Setting this object to Enable will cause all the ports residing in this network segment to be enabled. Setting this object to noEnable will have no effect. When read this object will always return noEnable.')
rptrMgmtPortsOn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtPortsOn.setStatus('mandatory')
if mibBuilder.loadTexts: rptrMgmtPortsOn.setDescription('Get the total number of ON ports in this network.')
rptrMgmtPortsOper = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtPortsOper.setStatus('mandatory')
if mibBuilder.loadTexts: rptrMgmtPortsOper.setDescription('Get the number of operational ports in this network.')
rptrMgmtBoardMap = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtBoardMap.setStatus('mandatory')
if mibBuilder.loadTexts: rptrMgmtBoardMap.setDescription('Get a map of the chassis slots occupied by the boards in this network.')
rptrMgmtInterfaceNum = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMgmtInterfaceNum.setStatus('mandatory')
if mibBuilder.loadTexts: rptrMgmtInterfaceNum.setDescription('Get the MIBII interface number of this network. A return of zero will mean this network is not associated with a MIBII interface.')
rptrMgmtResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reseStaticCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrMgmtResetCounters.setStatus('mandatory')
if mibBuilder.loadTexts: rptrMgmtResetCounters.setDescription("Setting this OID to 2 will reset the 'rptrPktStats', 'rptrProtocols' and 'rptrFrameSizes' RREV-4 branch static counters. Reading this OID will always return a 1.")
rptrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2))
rptrPktStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1))
rptrPktStatsPackets = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsPackets.setDescription("Get this repeater's total received packets.")
rptrPktStatsBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsBytes.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsBytes.setDescription("Get this repeater's total received bytes.")
rptrPktStatsColls = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsColls.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsColls.setDescription("Get this repeater's total collisions.")
rptrPktStatsErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsErrors.setDescription("Get this repeater's total errors.")
rptrPktStatsAlign = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsAlign.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsAlign.setDescription("Get this repeater's total frame alignment errors.")
rptrPktStatsCRC = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsCRC.setDescription("Get this repeater's total CRC errors.")
rptrPktStatsOOW = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsOOW.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsOOW.setDescription("Get this repeater's total out-of-window collisions.")
rptrPktStatsNoRsc = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsNoRsc.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsNoRsc.setDescription('This counter is the number of packets on this network that the hardware has processed that the management has either not seen yet, in the case of an active network, or has missed missed all together, in the case of a once active network.')
rptrPktStatsBroadcasts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsBroadcasts.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsBroadcasts.setDescription('This counter is the number of broadcast packets on this network that the hardware has processed.')
rptrPktStatsMulticasts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPktStatsMulticasts.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPktStatsMulticasts.setDescription('This counter is the number of multicast packets on this network that the hardware has processed.')
rptrProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2))
rptrProtocolsOSI = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsOSI.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsOSI.setDescription("Get this repeater's total received OSI packets.")
rptrProtocolsNovell = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsNovell.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsNovell.setDescription("Get this repeater's total received Novell packets.")
rptrProtocolsBanyan = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsBanyan.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsBanyan.setDescription("Get this repeater's total received Banyan packets.")
rptrProtocolsDECNet = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsDECNet.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsDECNet.setDescription("Get this repeater's total received DECNet packets.")
rptrProtocolsXNS = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsXNS.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsXNS.setDescription("Get this repeater's total received XNS packets.")
rptrProtocolsIP = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsIP.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsIP.setDescription("Get this repeater's total received TCP/IP packets.")
rptrProtocolsCtron = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsCtron.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsCtron.setDescription("Get this repeater's total received CTRON Management packets.")
rptrProtocolsAppletalk = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsAppletalk.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsAppletalk.setDescription("Get this repeater's total received Appletalk packets.")
rptrProtocolsOther = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrProtocolsOther.setStatus('mandatory')
if mibBuilder.loadTexts: rptrProtocolsOther.setDescription("Get this repeater's total received unknown protocol packets.")
rptrFrameSizes = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3))
rptrFrameSzRunt = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSzRunt.setStatus('mandatory')
if mibBuilder.loadTexts: rptrFrameSzRunt.setDescription("Get this repeater's total received packets of size less than 64 bytes.")
rptrFrameSz64To127 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz64To127.setStatus('mandatory')
if mibBuilder.loadTexts: rptrFrameSz64To127.setDescription("Get this repeater's total received packets of size between 64 and 127 bytes.")
rptrFrameSz128To255 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz128To255.setStatus('mandatory')
if mibBuilder.loadTexts: rptrFrameSz128To255.setDescription("Get this repeater's total received packets of size between 128 and 255 bytes.")
rptrFrameSz256To511 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz256To511.setStatus('mandatory')
if mibBuilder.loadTexts: rptrFrameSz256To511.setDescription("Get this repeater's total received packets of size between 256 and 511 bytes.")
rptrFrameSz512To1023 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz512To1023.setStatus('mandatory')
if mibBuilder.loadTexts: rptrFrameSz512To1023.setDescription("Get this repeater's total received packets of size between 512 and 1023 bytes.")
rptrFrameSz1024To1518 = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSz1024To1518.setStatus('mandatory')
if mibBuilder.loadTexts: rptrFrameSz1024To1518.setDescription("Get this repeater's total received packets of size between 1024 and 1518 bytes.")
rptrFrameSzGiant = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrFrameSzGiant.setStatus('mandatory')
if mibBuilder.loadTexts: rptrFrameSzGiant.setDescription("Get this repeater's total received packets of size greater than 1518 bytes.")
rptrAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3))
rptrAlarmsTrafEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsTrafEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsTrafEnable.setDescription('Get returns whether traffic alarms are enabled/disabled. Set allows for enabling/disabling of traffic alarms.')
rptrAlarmsTrafThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsTrafThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsTrafThreshold.setDescription('The maximum number of packets that will be allowed before an alarm is generated.')
rptrAlarmsCollEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsCollEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsCollEnable.setDescription('Get returns whether collision alarms are enabled/disabled. Set allows for enabling/disabling of collision alarms.')
rptrAlarmsCollThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsCollThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsCollThreshold.setDescription('The collision threshold is the maximum number of collisions within the time base that will be allowed before an alarm is generated.')
rptrAlarmsErrEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsErrEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsErrEnable.setDescription('Get returns whether error alarms are enabled/disabled. Set allows for enabling/disabling of error alarms.')
rptrAlarmsErrThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsErrThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsErrThreshold.setDescription('The percentage of errors per good packet within the timebase that will cause an alarm. The units of this value is in seconds.')
rptrAlarmsErrSource = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsErrSource.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsErrSource.setDescription('Get/Set a bit encoded map of which errors to include in the error sum, as follows: CRC_errors - Bit 0 - Least Significant Bit runts - Bit 1 OOW_colls - Bit 2 align_errs - Bit 3 undefined - Bit 4 Giants - Bit 5')
rptrAlarmsAlarmTimebase = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsAlarmTimebase.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsAlarmTimebase.setDescription('The alarm timebase, in seconds.')
rptrAlarmsBroadEnable = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsBroadEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsBroadEnable.setDescription('Get returns whether broadcast alarms are enabled/disabled. Set allows for enabling/disabling of broadcast alarms.')
rptrAlarmsBroadThreshold = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrAlarmsBroadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrAlarmsBroadThreshold.setDescription('The broadcase threshold represents the maximum number of broadcasts that are allowed during the time base before an alarm is generated.')
rptrRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4))
rptrRedund = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1))
rptrRedundReset = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundReset.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundReset.setDescription('If this object is set to Reset it will cause a reset of the redundancy object to occur. Setting this object to NoReset will do nothing. This object will always be read as NoReset.')
rptrRedundPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPollInterval.setDescription('Get/Set the number of seconds between polls for redundancy.')
rptrRedundTestTOD = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundTestTOD.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundTestTOD.setDescription('Get/Set the time of day at which the redundant circuits will be tested. The format of the time string is hh:mm:ss.')
rptrRedundPerformTest = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTest", 1), ("test", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundPerformTest.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPerformTest.setDescription('If this object is set to Test it will cause a test of the redundant circuits to be performed. Setting this object to NoTest will have no effect. When read this object will always return NoTest.')
rptrRedundMaxCrcts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundMaxCrcts.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundMaxCrcts.setDescription('Returns the maximum number of circuits which may exist on this network.')
rptrRedundCrctTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2), )
if mibBuilder.loadTexts: rptrRedundCrctTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctTable.setDescription('A list of redundant circuit objects for this repeater.')
rptrRedundCrctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrRedundCrctId"))
if mibBuilder.loadTexts: rptrRedundCrctEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctEntry.setDescription('A list of objects for a particular redundant circuit.')
rptrRedundCrctId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundCrctId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctId.setDescription('Returns the index for a member circuit in the table of redundant circuits.')
rptrRedundCrctName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctName.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctName.setDescription('Get/Set the name of the indicated circuit.')
rptrRedundCrctRetrys = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctRetrys.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctRetrys.setDescription('Get/Set the the number of unanswered polls allowed for the circuit.')
rptrRedundCrctNumBPs = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundCrctNumBPs.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctNumBPs.setDescription('Get the number of board/port combinations associated with the circuit.')
rptrRedundCrctNumAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundCrctNumAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctNumAddr.setDescription('Get the number of IP Addresses associated with the circuit.')
rptrRedundCrctAddAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctAddAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctAddAddr.setDescription('Add an IP Address to the polling list for the indicated circuit.')
rptrRedundCrctDelAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctDelAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctDelAddr.setDescription('Delete an IP Address from the polling list of the indicated circuit.')
rptrRedundCrctEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctEnable.setDescription('If this object is set to Enable, the circuit is enabled. If this object is set to Disable, the circuit is disbabled. When read, this object returns the state of the object based on the last request made.')
rptrRedundCrctReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrRedundCrctReset.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundCrctReset.setDescription("If this object is set to Reset, the circuit is reset. All of the circuit's associated boards and ports are returned to NOT_USED, any associated IP Addresses are purged from the circuit's address list, the name is cleared, and the retry count is reset to a default value. Setting this object to NoReset has no effect. When read, NoReset is always returned.")
rptrRedundPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3), )
if mibBuilder.loadTexts: rptrRedundPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPortTable.setDescription('A list of redundant port objects for this repeater.')
rptrRedundPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrRedundPortCrctId"), (0, "REPEATER-REV4-MIB", "rptrRedundPortId"))
if mibBuilder.loadTexts: rptrRedundPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPortEntry.setDescription('A redundant port entry containing objects pertaining to a particular redundant port.')
rptrRedundPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPortId.setDescription('A unique value identifying an element in a sequence of member ports which belong to a circuit in the table of redundant circuits. This value is not a port number; rather it is a value which goes from 1 to the maximum number of ports which may be included in a redundant circuit.')
rptrRedundPortCrctId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortCrctId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPortCrctId.setDescription('A unique value identifying a member circuit in the table of redundant circuits. This value is similar to rptrRedundCrctId.')
rptrRedundPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPortNum.setDescription('Returns the port number of a member port belonging to a redundant circuit.')
rptrRedundPortBoardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortBoardNum.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPortBoardNum.setDescription('Returns the board number of a member port belonging to a redundant circuit.')
rptrRedundPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 1), ("primary", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundPortType.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundPortType.setDescription('Return the state of a port associated with the indicated circuit.')
rptrRedundAddrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4), )
if mibBuilder.loadTexts: rptrRedundAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundAddrTable.setDescription('A list of redundant IP Address objects which belong to a circuit for this repeater.')
rptrRedundAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrRedundAddrCrctId"), (0, "REPEATER-REV4-MIB", "rptrRedundAddrId"))
if mibBuilder.loadTexts: rptrRedundAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundAddrEntry.setDescription('A entry containing objects pertaining to a particular redundant IP Address which belongs to a circuit.')
rptrRedundAddrId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundAddrId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundAddrId.setDescription('A unique value identifying an element in a sequence of member IP Addresses which belong to a circuit in the table of redundant circuits. This value goes from 1 to the maximum number of IP Addresses which may be included in a redundant circuit.')
rptrRedundAddrCrctId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundAddrCrctId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundAddrCrctId.setDescription('A unique value identifying a member circuit in the table of redundant circuits. This value is similar to rptrRedundCrctId.')
rptrRedundAddrIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 4, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRedundAddrIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRedundAddrIPAddr.setDescription('Returns an IP Address associated with the indicated circuit.')
rptrSourceAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5))
rptrSrcAddrListTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 1), )
if mibBuilder.loadTexts: rptrSrcAddrListTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrListTable.setDescription('This table defines the source address list that is defined at the repeater level.')
rptrSrcAddrListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrSrcAddrListId"))
if mibBuilder.loadTexts: rptrSrcAddrListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrListEntry.setDescription('Defines a specific source address object.')
rptrSrcAddrListId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrListId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrListId.setDescription('Returns an index into a table of source address seen by this repeater.')
rptrSrcAddrAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrAddressList.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrAddressList.setDescription('Returns a source address seen by this repeater.')
rptrSrcAddrSrcTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2), )
if mibBuilder.loadTexts: rptrSrcAddrSrcTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrSrcTable.setDescription('This table defines the list of all source addresses that have been seen.')
rptrSrcAddrSrcTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrSrcAddrSrcTableEntryId"))
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntry.setDescription('Describes a particular source address source entry.')
rptrSrcAddrSrcTableEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryId.setDescription("Returns the source address to which this table's information pertains.")
rptrSrcAddrSrcTableEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryPort.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryPort.setDescription('Returns the port# of the port that sourced the source address.')
rptrSrcAddrSrcTableEntryPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryPortGroup.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrSrcTableEntryPortGroup.setDescription('Returns the port group# of the port that sourced the source address.')
rptrSrcAddrMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3))
rptrSrcAddrMgmtSrcAgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSrcAddrMgmtSrcAgeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrMgmtSrcAgeInterval.setDescription('Get/Set source addressing ageing interval.')
rptrSrcAddrMgmtPortLock = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2), ("portMisMatch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSrcAddrMgmtPortLock.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrMgmtPortLock.setDescription('Setting this object to Lock will activate the network port security lock. Setting a value of portMisMatch(3) is invalid. A value of portMisMatch(3) reflects that not all ports are at the same value.')
rptrSrcAddrMgmtActiveUsers = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSrcAddrMgmtActiveUsers.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrMgmtActiveUsers.setDescription('Get the number of active users on this network.')
rptrSrcAddrMgmtHashType = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDecHash", 1), ("decHash", 2))).clone('noDecHash')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSrcAddrMgmtHashType.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSrcAddrMgmtHashType.setDescription('Defines the type of hashing that will be used for source address management. In a DEC-NET environment or a combination fo DEC-NET and non DEC-NET users where source address hash access is a concern a value of decHash(2) may yield better results. For non DEC-NET users a value of noDecHash(1) is preferred.')
rptrTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 6))
rptrHwTrapSet = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 6, 1))
rptrSaTrapSet = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 6, 2))
rptrHwTrapSetLink = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrHwTrapSetLink.setStatus('mandatory')
if mibBuilder.loadTexts: rptrHwTrapSetLink.setDescription('Enables and disables link traps for this network. Setting a value of disable(1) is equivalent to setting all instances of rptrPortHwTrapSetLink to a value of disable(1). Setting a value of enable(2) is equivalent to setting all instances of rptrPortHwTrapSetLink to a value of disable(2). Setting a value of other(3) is not allowed. This object will read with the value of disable(1) if all instances of rptrPortHwTrapSetLink for this network are currently set to a value of disable(1). This object will read with the value of enable(2) if all instances of rptrPortHwTrapSetLink for this network are currently set to a value of enable(2). This object will read with the value of other(3) if all instances of rptrPortHwTrapSetLink for this network are not currently set to a value the same value.')
rptrHwTrapSetSeg = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrHwTrapSetSeg.setStatus('mandatory')
if mibBuilder.loadTexts: rptrHwTrapSetSeg.setDescription('Enables and disables segmentation traps for this network. Setting a value of disable(1) is equivalent to setting all instances of rptrPortHwTrapSetSeg to a value of disable(1). Setting a value of enable(2) is equivalent to setting all instances of rptrPortHwTrapSetSeg to a value of disable(2). Setting a value of other(3) is not allowed. This object will read with the value of disable(1) if all instances of rptrPortHwTrapSetSeg for this network are currently set to a value of disable(1). This object will read with the value of enable(2) if all instances of rptrPortHwTrapSetSeg for this network are currently set to a value of enable(2). This object will read with the value of other(3) if all instances of rptrPortHwTrapSetSeg for this network are not currently set to a value the same value.')
rptrSaTrapSetSrcaddr = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSaTrapSetSrcaddr.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSaTrapSetSrcaddr.setDescription('Enables and disables source address traps for this network. Setting a value of disable(1) is equivalent to setting all instances of rptrPortSaTrapSetSrcaddr to a value of disable(1). Setting a value of enable(2) is equivalent to setting all instances of rptrPortSaTrapSetSrcaddr to a value of disable(2). Setting a value of other(3) is not allowed. This object will read with the value of disable(1) if all instances of rptrPortSaTrapSetSrcaddr for this network are currently set to a value of disable(1). This object will read with the value of enable(2) if all instances of rptrPortSaTrapSetSrcaddr for this network are currently set to a value of enable(2). This object will read with the value of other(3) if all instances of rptrPortSaTrapSetSrcaddr for this network are not currently set to a value the same value.')
rptrSaSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 7))
rptrSecurityLockState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2), ("portMisMatch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSecurityLockState.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSecurityLockState.setDescription('Setting this object to Lock will activate the network port security lock. Setting a value of portMisMatch(3) is invalid. A value of portMisMatch(3) reflects that not all ports are at the same value.')
rptrSecuritySecureState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("secure", 1), ("nonSecure", 2), ("portMisMatch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSecuritySecureState.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSecuritySecureState.setDescription('The status of source address security of the network. Ports on the network that are secure(1), can be locked in order to enable security. nonSecure(2) ports cannot be locked. Setting a value of portMisMatch(3) is invalid. A value of portMisMatch(3) reflects that not all ports are at the same value.')
rptrSecurityLearnState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("learn", 1), ("noLearn", 2), ("portMisMatch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSecurityLearnState.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSecurityLearnState.setDescription('The learn state of the network. This object will only be applied to ports that are unlocked. If set to learn(1), all addresses are deleted on the ports and learning begins once again. If it is set to noLearn(2), learning stops on the port. Setting a value of portMisMatch(3) is invalid. A value of portMisMatch(3) reflects that not all ports are at the same value.')
rptrSecurityLearnMode = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneTime", 1), ("continuous", 2), ("portMisMatch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSecurityLearnMode.setStatus('mandatory')
if mibBuilder.loadTexts: rptrSecurityLearnMode.setDescription('Get/Set the learn mode of the network. If set to onetime learn mode oneTime(1), each port is capable of learning two addresses and securing on both destination and source addresses once they are locked. If set to continuous learn continuous(2), all addresses are initially deleted and each port continuously replaces the existing secure source address with the latest source address it sees. Setting a value of portMisMatch(3) is invalid. A value of portMisMatch(3) reflects that not all ports are at the same value.')
rptrPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2))
rptrPortGrpMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1), )
if mibBuilder.loadTexts: rptrPortGrpMgmtTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtTable.setDescription('A list of port management objects for this repeater node.')
rptrPortGrpMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpMgmtGrpId"))
if mibBuilder.loadTexts: rptrPortGrpMgmtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtEntry.setDescription('An entry containing objects pertaining to port management for a port group.')
rptrPortGrpMgmtGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortGrpMgmtName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpMgmtName.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtName.setDescription('Gets/Sets a name for the specified port group.')
rptrPortGrpMgmtPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtPortCount.setDescription('Get total number of ports contained on the board. Notice that this is the physical port count.')
rptrPortGrpMgmtPortsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEnable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsEnable.setDescription('Setting this object to Enable will cause all the ports residing in this network segment to be enabled. Setting this object to noEnable will have no effect. When read this object will always return noEnable.')
rptrPortGrpMgmtPortsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsOn.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsOn.setDescription('Get total number of ON ports in this port group.')
rptrPortGrpMgmtPortsOper = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsOper.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtPortsOper.setDescription('Get total number of operational ports in the port group.')
rptrPortGrpMgmtLogPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpMgmtLogPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpMgmtLogPortCount.setDescription('Get total number of ports contained in this port group.')
rptrPortGrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2))
rptrPortGrpPktStatsTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1), )
if mibBuilder.loadTexts: rptrPortGrpPktStatsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsTbl.setDescription('This table provides packet statistics for port group.')
rptrPortGrpPktStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpPktStatsId"))
if mibBuilder.loadTexts: rptrPortGrpPktStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsEntry.setDescription('Defines a specific packet statistics entry.')
rptrPortGrpPktStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortGrpPktStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsPkts.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsPkts.setDescription("Return this port group's total received packets.")
rptrPortGrpPktStatsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsBytes.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsBytes.setDescription("Return this port group's total received bytes.")
rptrPortGrpPktStatsColls = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsColls.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsColls.setDescription("Return this port group's total collisions.")
rptrPortGrpPktStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsErrors.setDescription("Return this port group's total errors.")
rptrPortGrpPktStatsAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsAlign.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsAlign.setDescription("Return this port group's total frame alignment errors.")
rptrPortGrpPktStatsCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsCRC.setDescription("Return this port group's total CRC errors.")
rptrPortGrpPktStatsOOW = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsOOW.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsOOW.setDescription("Return this port group's total out-of-window collisions.")
rptrPortGrpPktStatsBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsBroadcasts.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsBroadcasts.setDescription("Return this port group's total received broadcast packets.")
rptrPortGrpPktStatsMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpPktStatsMulticasts.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpPktStatsMulticasts.setDescription("Return this port group's total received multicast packets.")
rptrPortGrpProtocolTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2), )
if mibBuilder.loadTexts: rptrPortGrpProtocolTbl.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolTbl.setDescription('Provides port group protocol statistics.')
rptrPortGrpProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpProtocolId"))
if mibBuilder.loadTexts: rptrPortGrpProtocolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolEntry.setDescription('Defines a specific port group protocol statistics entry.')
rptrPortGrpProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortGrpProtocolOSI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolOSI.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolOSI.setDescription("Return this port group's total received OSI packets.")
rptrPortGrpProtocolNovell = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolNovell.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolNovell.setDescription("Return this port group's total received Novell packets.")
rptrPortGrpProtocolBanyan = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolBanyan.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolBanyan.setDescription("Return this port group's total received Banyan packets.")
rptrPortGrpProtocolDECNet = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolDECNet.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolDECNet.setDescription("Return this port group's total received DECNet packets.")
rptrPortGrpProtocolXNS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolXNS.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolXNS.setDescription("Return this port group's total received XNS packets.")
rptrPortGrpProtocolIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolIP.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolIP.setDescription("Return this port group's total received TCP/IP packets.")
rptrPortGrpProtocolCtron = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolCtron.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolCtron.setDescription("Return this port group's total received CTRON Management packets.")
rptrPortGrpProtocolAppletalk = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolAppletalk.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolAppletalk.setDescription("Return this port group's total received Appletalk packets.")
rptrPortGrpProtocolOther = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpProtocolOther.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpProtocolOther.setDescription("Return this port group's total received unknown protocol packets.")
rptrPortGrpFrameSzTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3), )
if mibBuilder.loadTexts: rptrPortGrpFrameSzTbl.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSzTbl.setDescription('Defines frame sizes as seen by this port group.')
rptrPortGrpFrameSzEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpFrameSzId"))
if mibBuilder.loadTexts: rptrPortGrpFrameSzEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSzEntry.setDescription('Defines a particular frame size entry.')
rptrPortGrpFrameSzId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSzId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSzId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortGrpFrameSzRunt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSzRunt.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSzRunt.setDescription("Return this port group's total received packets of size less than 64 bytes.")
rptrPortGrpFrameSz64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz64To127.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSz64To127.setDescription("Return this port group's total received packets of size between 64 and 127 bytes.")
rptrPortGrpFrameSz128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz128To255.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSz128To255.setDescription("Return this port group's total received packets of size between 128 and 255 bytes.")
rptrPortGrpFrameSz256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz256To511.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSz256To511.setDescription("Return this port group's total received packets of size between 256 and 511 bytes.")
rptrPortGrpFrameSz512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz512To1023.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSz512To1023.setDescription("Return this port group's total received packets of size between 512 and 1023 bytes.")
rptrPortGrpFrameSz1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSz1024To1518.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSz1024To1518.setDescription("Return this port group's total received packets of size between 1024 and 1518 bytes.")
rptrPortGrpFrameSzGiant = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpFrameSzGiant.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpFrameSzGiant.setDescription("Return this port group's total received packets of size greater than 1518 bytes.")
rptrPortGrpAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3), )
if mibBuilder.loadTexts: rptrPortGrpAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmTable.setDescription('A list of port group alarm objects for this repeater node.')
rptrPortGrpAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpAlarmId"))
if mibBuilder.loadTexts: rptrPortGrpAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmEntry.setDescription('An entry containing objects pertaining to port group alarms for a port group.')
rptrPortGrpAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpAlarmId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortGrpAlarmTrafEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafEnable.setDescription('Get returns whether traffic alarms are enabled/disabled. Set allows for enabling/disabling of traffic alarms.')
rptrPortGrpAlarmTrafThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafThreshold.setDescription('The maximum number of packets that will be allowed before an alarm is generated.')
rptrPortGrpAlarmTrafGrpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafGrpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmTrafGrpDisable.setDescription('Set will permit a port group to be disabled on a traffic alarm condition. Get will show whether the port group disabling is allowed or not.')
rptrPortGrpAlarmCollEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmCollEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmCollEnable.setDescription('Get returns whether collision alarms are enabled/disabled. Set allows for enabling/disabling of collision alarms.')
rptrPortGrpAlarmCollThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmCollThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmCollThreshold.setDescription('The collision threshold is the maximum number of collisions within the time base that will be allowed before an alaram is generated.')
rptrPortGrpAlarmCollBdDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmCollBdDisable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmCollBdDisable.setDescription('Set will permit a port group to be disabled on a collision alarm condition. Get will show whether the port group disabling is allowed or not.')
rptrPortGrpAlarmErrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmErrEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmErrEnable.setDescription('Get returns whether error alarms are enabled/disabled. Set allows for enabling/disabling of error alarms.')
rptrPortGrpAlarmErrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmErrThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmErrThreshold.setDescription('Get/Set the percentage of errors per good packet within the timebase that will cause an alarm.')
rptrPortGrpAlarmErrSource = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmErrSource.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmErrSource.setDescription('Get/Set a bit encoded map of which errors to include in the error sum, as follows: CRC_errors - Bit 0 - Least Significant Bit runts - Bit 1 OOW_colls - Bit 2 align_errs - Bit 3 undefined - Bit 4 Giants - Bit 5')
rptrPortGrpAlarmErrGrpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmErrGrpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmErrGrpDisable.setDescription('Set will permit a port group to be disabled on an error alarm condition. Get will show whether the port group disabling is allowed or not.')
rptrPortGrpAlarmBroadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmBroadEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmBroadEnable.setDescription('Get returns whether broadcast alarms are enabled/disabled. Set allows for enabling/disabling of broadcast alarms.')
rptrPortGrpAlarmBroadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmBroadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmBroadThreshold.setDescription('The broadcase threshold represents the maximum number of broadcasts that are allowed during the time base before an alarm is generated.')
rptrPortGrpAlarmBroadGrpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpAlarmBroadGrpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpAlarmBroadGrpDisable.setDescription('Set will permit a port group to be disabled on a broadcast alarm condition. Get will show whether the port group disabling is allowed or not.')
rptrPortGrpSrcAddrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 4), )
if mibBuilder.loadTexts: rptrPortGrpSrcAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSrcAddrTable.setDescription('This table provides a list of the number of active users that have been seen by port group.')
rptrPortGrpSrcAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 4, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpSrcAddrId"))
if mibBuilder.loadTexts: rptrPortGrpSrcAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSrcAddrEntry.setDescription('Defines a specific active user entry.')
rptrPortGrpSrcAddrId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpSrcAddrId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSrcAddrId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortGrpSrcAddrActiveUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpSrcAddrActiveUsers.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSrcAddrActiveUsers.setDescription('Returns the total number of active users seen by this port group.')
rptrPortGrpTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5))
rptrPortGrpHwTrapSet = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 1))
rptrPortGrpSaTrapSet = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 2))
rptrPortGrpHwTrapTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 1, 1), )
if mibBuilder.loadTexts: rptrPortGrpHwTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpHwTrapTable.setDescription('A list of trap enable/disable at the port group level. Disable here is equivalent to disable for each port in the port group.')
rptrPortGrpHwTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 1, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpHwTrapSetGrpId"))
if mibBuilder.loadTexts: rptrPortGrpHwTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpHwTrapEntry.setDescription('Individual trap entries for port group enable/disable.')
rptrPortGrpHwTrapSetGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpHwTrapSetGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpHwTrapSetGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortGrpHwTrapSetLink = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpHwTrapSetLink.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpHwTrapSetLink.setDescription('Enables and disables link traps for the specified port group. Setting a value of disable(1) is equivalent to setting all instances of rptrPortHwTrapSetLink to a value of disable(1). Setting a value of enable(2) is equivalent to setting all instances of rptrPortHwTrapSetLink to a value of disable(2). Setting a value of other(3) is not allowed. This object will read with the value of disable(1) if all instances of rptrPortHwTrapSetLink for this port group are currently set to a value of disable(1). This object will read with the value of enable(2) if all instances of rptrPortHwTrapSetLink for this port group are currently set to a value of enable(2). This object will read with the value of other(3) if all instances of rptrPortHwTrapSetLink for this port group are not currently set to a value the same value.')
rptrPortGrpHwTrapSetSeg = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpHwTrapSetSeg.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpHwTrapSetSeg.setDescription('Enables and disables segmentation traps for the specified port group. Setting a value of disable(1) is equivalent to setting all instances of rptrPortHwTrapSetSeg to a value of disable(1). Setting a value of enable(2) is equivalent to setting all instances of rptrPortHwTrapSetSeg to a value of disable(2). Setting a value of other(3) is not allowed. This object will read with the value of disable(1) if all instances of rptrPortHwTrapSetSeg for this port group are currently set to a value of disable(1). This object will read with the value of enable(2) if all instances of rptrPortHwTrapSetSeg for this port group are currently set to a value of enable(2). This object will read with the value of other(3) if all instances of rptrPortHwTrapSetSeg for this port group are not currently set to a value the same value.')
rptrPortGrpSaTrapTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 2, 1), )
if mibBuilder.loadTexts: rptrPortGrpSaTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSaTrapTable.setDescription('A list of trap enable/disable at the port group level. Disable here is equivalent to disable for each port in the port group.')
rptrPortGrpSaTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 2, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpSaTrapSetGrpId"))
if mibBuilder.loadTexts: rptrPortGrpSaTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSaTrapEntry.setDescription('Individual trap entries for port group enable/disable.')
rptrPortGrpSaTrapSetGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpSaTrapSetGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSaTrapSetGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortGrpSaTrapSetSrcaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpSaTrapSetSrcaddr.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSaTrapSetSrcaddr.setDescription('Enables and disables source address traps for the specified port group. Setting a value of disable(1) is equivalent to setting all instances of rtprPortSaTrapSetSrcaddr to a value of disable(1). Setting a value of enable(2) is equivalent to setting all instances of rtprPortSaTrapSetSrcaddr to a value of disable(2). Setting a value of other(3) is not allowed. This object will read with the value of disable(1) if all instances of rptrPortSaTrapSetSrcaddr for this port group are currently set to a value of disable(1). This object will read with the value of enable(2) if all instances of rptrPortSaTrapSetSrcaddr for this port group are currently set to a value of enable(2). This object will read with the value of other(3) if all instances of rptrPortSaTrapSetSrcaddr for this port group are not currently set to a value the same value.')
rptrPortGrpSrcAddrLockTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 6), )
if mibBuilder.loadTexts: rptrPortGrpSrcAddrLockTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSrcAddrLockTable.setDescription('This table defines the status of the port group source address security locks.')
rptrPortGrpSrcAddrLockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 6, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortGrpSrcAddrLockGrpId"))
if mibBuilder.loadTexts: rptrPortGrpSrcAddrLockEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSrcAddrLockEntry.setDescription('DeDefines a status of a particular port group security lock.')
rptrPortGrpSrcAddrLockGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpSrcAddrLockGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSrcAddrLockGrpId.setDescription('Defines a particular port group for which this source address security lock information pertains.')
rptrPortGrpSrcAddrLock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2), ("portMisMatch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpSrcAddrLock.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSrcAddrLock.setDescription('Allows setting of the security lock status for this port group. unlock(1) - Unlocks the source address lock this group, lock(2) - Locks the source address for this group, Setting a value of portMisMatch(3) is invalid. A value of portMisMatch(3) reflects that not all ports are at the same value.')
rptrPortGrpSASecuritySecureState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("secure", 1), ("nonSecure", 2), ("portMisMatch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortGrpSASecuritySecureState.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSASecuritySecureState.setDescription('The state of the source addressing security for this port group. Ports on the port group that are secure(1), can be locked in order to enable security. When a value of nonSecure(2) is returned ports cannot be locked. Setting a value of portMisMatch(3) is invalid. A value of portMisMatch(3) reflects that not all ports are at the same value.')
rptrPortGrpSASecurityLearnState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("learn", 1), ("noLearn", 2), ("portMisMatch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpSASecurityLearnState.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSASecurityLearnState.setDescription('The learn state of source addressing security for this port group. This object will only be applied to ports that are unlocked. If set to learn(1), all addresses are deleted on the port and learning begins once again. If it is set to noLearn(2), learning stops on the port. Setting a value of portMisMatch(3) is invalid. A value of portMisMatch(3) reflects that not all ports are at the same value.')
rptrPortGrpSASecurityLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneTime", 1), ("continuous", 2), ("portMisMatch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortGrpSASecurityLearnMode.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortGrpSASecurityLearnMode.setDescription('The learn mode of source addressing security port group. If set to oneTime(1), each port is capable of learning two addresses and securing on both destination and source addresses once they are locked. If set to continuous(2), all addresses are initially deleted and each port continuously replaces the existing secure source address with latest source address it sees. Setting a value of portMisMatch(3) is invalid. A value of portMisMatch(3) reflects that not all ports are at the same value.')
rptrPort = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3))
rptrPortMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1), )
if mibBuilder.loadTexts: rptrPortMgmtTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortMgmtTable.setDescription('A list of port management objects for this repeater node.')
rptrPortMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortMgmtPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortMgmtPortId"))
if mibBuilder.loadTexts: rptrPortMgmtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortMgmtEntry.setDescription('An entry containing objects pertaining to port management for a port.')
rptrPortMgmtPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortMgmtPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortMgmtPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortMgmtPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortMgmtPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortMgmtPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortMgmtName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortMgmtName.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortMgmtName.setDescription('Sets/Gets an ASCII name assigned to this port.')
rptrPortMgmtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortMgmtAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortMgmtAdminState.setDescription('Setting this object to Enable will cause port to be enabled. Setting this object to Disable will cause the port to be disabled. When read this object will return the state of the object per the last request.')
rptrPortMgmtOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notOperational", 1), ("operational", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortMgmtOperState.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortMgmtOperState.setDescription('Get port operational status.')
rptrPortMgmtPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortMgmtPortType.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortMgmtPortType.setDescription('Uniquely defines the repeater port type. A authoritative identification for a port type. By convention, this value is allocated within the SMI enterprises subtree (1.3.6.1.4.1), and provides an easy and unambiguous means to determine the type of repeater port.')
rptrPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2))
rptrPortPktStatsTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1), )
if mibBuilder.loadTexts: rptrPortPktStatsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsTbl.setDescription('Provides repeater port packet statistics.')
rptrPortPktStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortPktStatsPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortPktStatsPortId"))
if mibBuilder.loadTexts: rptrPortPktStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsEntry.setDescription('Provides basic statistics for a specific port.')
rptrPortPktStatsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortPktStatsPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortPktStatsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsPackets.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsPackets.setDescription("Get this port's total received packets.")
rptrPortPktStatsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsBytes.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsBytes.setDescription("Get this port's total received bytes.")
rptrPortPktStatsColls = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsColls.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsColls.setDescription("Get this port's total collisions.")
rptrPortPktStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsErrors.setDescription("Get this port's total errors.")
rptrPortPktStatsAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsAlign.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsAlign.setDescription("Get this port's total frame alignment errors.")
rptrPortPktStatsCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsCRC.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsCRC.setDescription("Get this port's total CRC errors.")
rptrPortPktStatsOOW = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsOOW.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsOOW.setDescription("Get this port's total out-of-window collisions.")
rptrPortPktStatsBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsBroadcasts.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsBroadcasts.setDescription("Get this port's total received broadcast packets.")
rptrPortPktStatsMulticasts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPktStatsMulticasts.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortPktStatsMulticasts.setDescription("Get this port's total received multicast packets.")
rptrPortProtocolTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2), )
if mibBuilder.loadTexts: rptrPortProtocolTbl.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolTbl.setDescription('Provides statistics about the protocols seen by the different ports.')
rptrPortProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortProtocolPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortProtocolPortId"))
if mibBuilder.loadTexts: rptrPortProtocolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolEntry.setDescription('An entry containing objects pertaining to statistics about protocols seen by different ports.')
rptrPortProtocolPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortProtocolPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortProtocolOSI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolOSI.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolOSI.setDescription("Get this port's total received OSI protocol packets.")
rptrPortProtocolNovell = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolNovell.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolNovell.setDescription("Get this port's total received Novell protocol packets.")
rptrPortProtocolBanyan = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolBanyan.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolBanyan.setDescription("Get this port's total received Banyan protocol packets.")
rptrPortProtocolDECNet = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolDECNet.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolDECNet.setDescription("Get this port's total received DECNet protocol packets.")
rptrPortProtocolXNS = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolXNS.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolXNS.setDescription("Get this port's total received XNS protocol packets.")
rptrPortProtocolIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolIP.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolIP.setDescription("Get this port's total received TCP/IP protocol packets.")
rptrPortProtocolCtron = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolCtron.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolCtron.setDescription("Get this port's total received CTRON Management protocol packets.")
rptrPortProtocolAppletalk = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolAppletalk.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolAppletalk.setDescription("Get this port's total received Appletalk protocol packets.")
rptrPortProtocolOther = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortProtocolOther.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortProtocolOther.setDescription("Get this port's total received unknown protocol packets.")
rptrPortFrameSzTbl = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3), )
if mibBuilder.loadTexts: rptrPortFrameSzTbl.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSzTbl.setDescription('Provides repeater port frame size statistics.')
rptrPortFrameSzEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortFrameSzPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortFrameSzPortId"))
if mibBuilder.loadTexts: rptrPortFrameSzEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSzEntry.setDescription('Describes a set of frame size statistics for a specific port.')
rptrPortFrameSzPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSzPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSzPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortFrameSzPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSzPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSzPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortFrameSzRunt = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSzRunt.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSzRunt.setDescription("Get this port's total received packets of size less than 64 bytes.")
rptrPortFrameSz64To127 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz64To127.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSz64To127.setDescription("Get this port's total received packets of size between 64 and 127 bytes.")
rptrPortFrameSz128To255 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz128To255.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSz128To255.setDescription("Get this port's total received packets of size between 128 and 255 bytes.")
rptrPortFrameSz256To511 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz256To511.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSz256To511.setDescription("Get this port's total received packets of size between 256 and 511 bytes.")
rptrPortFrameSz512To1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz512To1023.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSz512To1023.setDescription("Get this port's total received packets of size between 512 and 1023 bytes.")
rptrPortFrameSz1024To1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSz1024To1518.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSz1024To1518.setDescription("Get this port's total received packets of size between 1024 and 1518 bytes.")
rptrPortFrameSzGiant = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameSzGiant.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortFrameSzGiant.setDescription("Get this port's total received packets of size greater than 1518 bytes.")
rptrPortAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3), )
if mibBuilder.loadTexts: rptrPortAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmTable.setDescription('A list of port alarm objects for this repeater node.')
rptrPortAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortAlarmPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortAlarmPortId"))
if mibBuilder.loadTexts: rptrPortAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmEntry.setDescription('An entry containing objects pertaining to port alarm objects for a port group.')
rptrPortAlarmPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortAlarmPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortAlarmPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortAlarmPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortAlarmTrafEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmTrafEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmTrafEnable.setDescription('Get returns whether traffic alarms are enabled/disabled. Set allows for enabling/disabling of traffic alarms.')
rptrPortAlarmTrafThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmTrafThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmTrafThreshold.setDescription('The maximum number of packets that will be allowed before an alarm is generated.')
rptrPortAlarmTrafPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmTrafPortDisable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmTrafPortDisable.setDescription('Set will permit a port to be disabled on a traffic alarm condition. Get will show whether the port disabling is allowed or not.')
rptrPortAlarmCollEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmCollEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmCollEnable.setDescription('Get returns whether collision alarms are enabled/disabled. Set allows for enabling/disabling of collision alarms.')
rptrPortAlarmCollThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmCollThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmCollThreshold.setDescription('The collision threshold is the maximum number of collisions within the time base that will be allowed before an alaram is generated.')
rptrPortAlarmCollPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmCollPortDisable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmCollPortDisable.setDescription('Set will permit a port to be disabled on a collision alarm condition. Get will show whether the port disabling is allowed or not.')
rptrPortAlarmErrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmErrEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmErrEnable.setDescription('Get returns whether error alarms are enabled/disabled. Set allows for enabling/disabling of error alarms.')
rptrPortAlarmErrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmErrThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmErrThreshold.setDescription('Get/Set the percentage of errors per good packet within the timebase that will cause an alarm.')
rptrPortAlarmErrSource = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmErrSource.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmErrSource.setDescription('Get/Set a bit encoded map of which errors to include in the error sum, as follows: CRC_errors - Bit 0 - Least Significant Bit runts - Bit 1 OOW_colls - Bit 2 align_errs - Bit 3 undefined - Bit 4 Giants - Bit 5')
rptrPortAlarmErrPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmErrPortDisable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmErrPortDisable.setDescription('Set will permit a port to be disabled on an error alarm condition. Get will show whether the port disabling is allowed or not.')
rptrPortAlarmBroadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmBroadEnable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmBroadEnable.setDescription('Get returns whether broadcast alarms are enabled/disabled. Set allows for enabling/disabling of broadcast alarms.')
rptrPortAlarmBroadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmBroadThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmBroadThreshold.setDescription('The broadcase threshold represents the maximum number of broadcasts that are allowed during the time base before an alarm is generated.')
rptrPortAlarmBroadPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAlarmBroadPortDisable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAlarmBroadPortDisable.setDescription('Set will permit a port to be disabled on a broadcast alarm condition. Get will show whether the port disabling is allowed or not.')
rptrPortRedundTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4), )
if mibBuilder.loadTexts: rptrPortRedundTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortRedundTable.setDescription('A list of port redundancy objects for this repeater node.')
rptrPortRedundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortRedundPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortRedundPortId"))
if mibBuilder.loadTexts: rptrPortRedundEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortRedundEntry.setDescription('An entry containing objects pertaining to port redundancy for a port group.')
rptrPortRedundPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortRedundPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortRedundPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortRedundPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortRedundPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortRedundPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortRedundCrctNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortRedundCrctNum.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortRedundCrctNum.setDescription('Get/Set redundant circuit number of redundant circuit that port is or is to be associated with.')
rptrPortRedundType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 1), ("primary", 2), ("backup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortRedundType.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortRedundType.setDescription('Get/Set redundant port type.')
rptrPortRedundStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortRedundStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortRedundStatus.setDescription('Get/Set redundant port status.')
rptrPortSrcAddrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5), )
if mibBuilder.loadTexts: rptrPortSrcAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrTable.setDescription('A list of port source address objects for this repeater node.')
rptrPortSrcAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortSrcAddrPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortSrcAddrPortId"))
if mibBuilder.loadTexts: rptrPortSrcAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrEntry.setDescription('An entry containing objects pertaining to port source address objects for a port group.')
rptrPortSrcAddrPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortSrcAddrPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortSrcAddrTopoState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("station", 1), ("trunk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrTopoState.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrTopoState.setDescription('Returns the topological state of the port.')
rptrPortSrcAddrForceTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noForce", 1), ("force", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSrcAddrForceTrunk.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrForceTrunk.setDescription('When this object is set to Force it causes the port to be placed into a Trunk topological state whether the network traffic would warrant such a state or not. When this object is set to NoForce it allows the port to assume the topological state it would naturally assume based on the network activity across it. When read this object reports the current setting.')
rptrPortSrcAddrActiveUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrActiveUsers.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrActiveUsers.setDescription('Returns the total number of active users seen by this port.')
rptrPortSrcAddrListTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6), )
if mibBuilder.loadTexts: rptrPortSrcAddrListTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrListTable.setDescription('This table provides information about the source addresses that have been seen by the differnt ports.')
rptrPortSrcAddrListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortSrcAddrListPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortSrcAddrListPortId"), (0, "REPEATER-REV4-MIB", "rptrPortSrcAddrListId"))
if mibBuilder.loadTexts: rptrPortSrcAddrListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrListEntry.setDescription('A specific source address that has been seen')
rptrPortSrcAddrListId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrListId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrListId.setDescription('Returns an index associated with the number of address to be returned.')
rptrPortSrcAddrListPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrListPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrListPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortSrcAddrListPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrListPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrListPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortSrcAddrAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 6, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSrcAddrAddressList.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSrcAddrAddressList.setDescription('Returns a source address seen on this port.')
rptrPortHardwareTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7), )
if mibBuilder.loadTexts: rptrPortHardwareTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHardwareTable.setDescription('A list of port hardware objects for this repeater port.')
rptrPortHardwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortHardwarePortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortHardwarePortId"))
if mibBuilder.loadTexts: rptrPortHardwareEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHardwareEntry.setDescription('An entry containing objects pertaining to port hardware for a hardware port group.')
rptrPortHardwarePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHardwarePortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHardwarePortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortHardwarePortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHardwarePortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHardwarePortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortHardwareSegStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSegmented", 1), ("segmented", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHardwareSegStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHardwareSegStatus.setDescription('Returns port segmentation status.')
rptrPortHardwareLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notLinked", 1), ("linked", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHardwareLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHardwareLinkStatus.setDescription('Returns port link status.')
rptrPortTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8))
rptrPortHwTrapSet = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 1))
rptrPortSaTrapSet = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 2))
rptrPortHwTrapTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 1, 1), )
if mibBuilder.loadTexts: rptrPortHwTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHwTrapTable.setDescription('A list of trap enable/disable at the port level.')
rptrPortHwTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 1, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortHwTrapSetPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortHwTrapSetPortId"))
if mibBuilder.loadTexts: rptrPortHwTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHwTrapEntry.setDescription('Individual trap entries for port group enable/disable.')
rptrPortHwTrapSetPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHwTrapSetPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHwTrapSetPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortHwTrapSetPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortHwTrapSetPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHwTrapSetPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortHwTrapSetLink = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortHwTrapSetLink.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHwTrapSetLink.setDescription('Enables and disables link traps for this port.')
rptrPortHwTrapSetSeg = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortHwTrapSetSeg.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortHwTrapSetSeg.setDescription('Enables and disables segmentation traps for this port.')
rptrPortSaTrapTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 2, 1), )
if mibBuilder.loadTexts: rptrPortSaTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSaTrapTable.setDescription('A list of trap enable/disable at the port level')
rptrPortSaTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 2, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortSaTrapSetPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortSaTrapSetPortId"))
if mibBuilder.loadTexts: rptrPortSaTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSaTrapEntry.setDescription('Individual trap entries for port group enable/disable.')
rptrPortSaTrapSetPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSaTrapSetPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSaTrapSetPortId.setDescription('Returns an index to a port for which the information in this table pertains.')
rptrPortSaTrapSetPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSaTrapSetPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSaTrapSetPortGrpId.setDescription('Returns an index to a port group for which the information in this table pertains.')
rptrPortSaTrapSetSrcaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSaTrapSetSrcaddr.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSaTrapSetSrcaddr.setDescription('Enables and disables source address traps for this port.')
rptrPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9))
rptrPortSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1), )
if mibBuilder.loadTexts: rptrPortSecurityTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityTable.setDescription('This table defines status of the source lock security.')
rptrPortSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortSecurityPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortSecurityPortId"))
if mibBuilder.loadTexts: rptrPortSecurityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityEntry.setDescription('Defines lock status for this particular entry.')
rptrPortSecurityPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSecurityPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityPortGrpId.setDescription(' The port Group ID for which this source address lock entry pertains.')
rptrPortSecurityPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSecurityPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityPortId.setDescription('The port ID for which this source address lock entry pertains.')
rptrPortSecurityLockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlock", 1), ("lock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSecurityLockStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityLockStatus.setDescription('Defines the lock status for this particular port entry.')
rptrPortSecurityLockAddAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSecurityLockAddAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityLockAddAddress.setDescription('Setting a value to this object will cause a new entry to be added to the rptrPortSecurityListTable. When read this object will display an OCTET STRING of SIZE 6 with each octet containing a 0. In general it is possible to add addresses at anytime. However there are several instances where the firmware and or hardware can not support the operation. In these instances an error will be returned if a addition is attempted.')
rptrPortSecurityLockDelAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSecurityLockDelAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityLockDelAddress.setDescription("Setting a value to this object will cause corresponding entry in the rptrPortSecurityListTable to be deleted. When read this object returns an OCTET STRING of length 6 with each octet having the value '0'. In general it is possible to delete locked addresses at any time. however there are instances where it is not supported in which case an error will be returned.")
rptrPortSecurityDisableOnViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDisable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSecurityDisableOnViolation.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityDisableOnViolation.setDescription('Designates whether port is disabled if its source address is violated. A source address violation occurs when a address is detected which is not in the source address list for this port. If the port is disabled due to the source address violation it can be enabled by setting rptrPortMgmtAdminState.')
rptrPortSecurityFullSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("partialSecurity", 1), ("fullSecurity", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSecurityFullSecEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityFullSecEnabled.setDescription('A port that is set to full security and is locked will scramble ALL packets, which are not contained in the expected address list, including broadcasts and multicasts. A port that is set to partial security will allow broadcasts and multicasts to repeat unscrambled.')
rptrPortSecuritySecureState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("secure", 1), ("nonSecure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSecuritySecureState.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecuritySecureState.setDescription('The secure state of the port. If the port is secure(1), it can be locked in order to enable security. A nonSecure(2) port cannot be locked.')
rptrPortSecurityForceNonSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noForce", 1), ("forceNonSecure", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSecurityForceNonSecure.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityForceNonSecure.setDescription('The force non-secure state of port. If the port is Forced, Non-Secure via a value of forceNonSecure(2), it is put into a Non-Secure state, in which case it cannot be locked. If a port is not forced noForce(1), then it will take on its natural state, according to the traffic flow on the port.')
rptrPortSecurityLearnState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("learn", 1), ("noLearn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSecurityLearnState.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityLearnState.setDescription('The learn state of the port. This object will only be applied to a port that is unlocked. If set to learn(1), all addresses are deleted on the port and learning begins once again. If it is set to noLearn(2), learning stops on the port.')
rptrPortSecurityLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneTime", 1), ("continuous", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortSecurityLearnMode.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityLearnMode.setDescription('The learn mode of the port. If set to oneTime(1), the port is capable of learning two addresses and securing on both destination and source addresses (upon locking port). If set to continuous(2), all addresses are initially deleted and the port continuously replaces the existing secure source address with the latest source address it sees.')
rptrPortSecurityListTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 2), )
if mibBuilder.loadTexts: rptrPortSecurityListTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityListTable.setDescription('This table defines a list of all source address locks maintained for the specified port.')
rptrPortSecurityListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 2, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortSecurityListPortGrpId"), (0, "REPEATER-REV4-MIB", "rptrPortSecurityListPortId"), (0, "REPEATER-REV4-MIB", "rptrPortSecurityListIndex"))
if mibBuilder.loadTexts: rptrPortSecurityListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityListEntry.setDescription('An entry containing objects pertaining to source address locks for a port group.')
rptrPortSecurityListPortGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSecurityListPortGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityListPortGrpId.setDescription('The port group for which this security list entry pertains.')
rptrPortSecurityListPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSecurityListPortId.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityListPortId.setDescription('The port ID for which this source address lock list pertains.')
rptrPortSecurityListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSecurityListIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityListIndex.setDescription('A unique index for the source address entries.')
rptrPortSecurityListAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 3, 9, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSecurityListAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortSecurityListAddress.setDescription('Defines the particular source address that has been locked.')
rptrPortAssoc = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 4))
rptrPortAssocTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 4, 1), )
if mibBuilder.loadTexts: rptrPortAssocTable.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAssocTable.setDescription('This table defines the port association for those switching MIMs that support this functionality.')
rptrPortAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 4, 1, 1), ).setIndexNames((0, "REPEATER-REV4-MIB", "rptrPortAssocBoard"))
if mibBuilder.loadTexts: rptrPortAssocEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAssocEntry.setDescription('Describes a particular port association entry.')
rptrPortAssocBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortAssocBoard.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAssocBoard.setDescription('The board number for which this port association information pertains.')
rptrPortAssocStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 1, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("defaultPort", 1), ("otherPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrPortAssocStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rptrPortAssocStatus.setDescription('This object describes the status of the user selectable port. On a TPXMIM34 this is port 13 which may either be an EPIM or default configuration. A value of defaultPort(1) restores the default configuration. A value of otherPort(2) may imply the use of the EPIM connection.')
mibBuilder.exportSymbols("REPEATER-REV4-MIB", rptrFrameSz256To511=rptrFrameSz256To511, rptrPortGrpAlarmBroadEnable=rptrPortGrpAlarmBroadEnable, rptrPortGrpAlarmTrafEnable=rptrPortGrpAlarmTrafEnable, rptrPortGrpSASecurityLearnMode=rptrPortGrpSASecurityLearnMode, rptrProtocolsXNS=rptrProtocolsXNS, rptrPortAlarmErrPortDisable=rptrPortAlarmErrPortDisable, rptrPortProtocolDECNet=rptrPortProtocolDECNet, rptrPortSecurityLockAddAddress=rptrPortSecurityLockAddAddress, rptrPort=rptrPort, rptrPortSecurityTable=rptrPortSecurityTable, rptrPortGrpAlarmCollThreshold=rptrPortGrpAlarmCollThreshold, rptrRedundancy=rptrRedundancy, rptrRedundAddrIPAddr=rptrRedundAddrIPAddr, rptrStats=rptrStats, rptrRedundCrctEnable=rptrRedundCrctEnable, repeaterrev4=repeaterrev4, rptrProtocolsDECNet=rptrProtocolsDECNet, rptrPortGrpPktStatsId=rptrPortGrpPktStatsId, rptrPortPktStatsPackets=rptrPortPktStatsPackets, rptrPortSrcAddrListEntry=rptrPortSrcAddrListEntry, rptrPortMgmtOperState=rptrPortMgmtOperState, rptrPortGrpProtocolIP=rptrPortGrpProtocolIP, rptrPortSaTrapSetPortId=rptrPortSaTrapSetPortId, rptrPortGrpFrameSzTbl=rptrPortGrpFrameSzTbl, rptrPortGrpProtocolXNS=rptrPortGrpProtocolXNS, rptrPortAlarmErrSource=rptrPortAlarmErrSource, rptrPortGrpSaTrapTable=rptrPortGrpSaTrapTable, rptrAlarmsAlarmTimebase=rptrAlarmsAlarmTimebase, rptrSaTrapSetSrcaddr=rptrSaTrapSetSrcaddr, rptrPortGroup=rptrPortGroup, rptrPortGrpPktStatsBroadcasts=rptrPortGrpPktStatsBroadcasts, rptrAlarmsErrEnable=rptrAlarmsErrEnable, rptrPortGrpPktStatsBytes=rptrPortGrpPktStatsBytes, rptrPortAlarmErrThreshold=rptrPortAlarmErrThreshold, rptrPortAlarmBroadPortDisable=rptrPortAlarmBroadPortDisable, rptrPktStatsMulticasts=rptrPktStatsMulticasts, rptrPortAlarmBroadThreshold=rptrPortAlarmBroadThreshold, rptrPortGrpMgmtEntry=rptrPortGrpMgmtEntry, rptrPortGrpAlarmTrafThreshold=rptrPortGrpAlarmTrafThreshold, rptrPortProtocolNovell=rptrPortProtocolNovell, rptrRedundAddrId=rptrRedundAddrId, rptrPortGrpSrcAddrLockTable=rptrPortGrpSrcAddrLockTable, rptrPortSecurityFullSecEnabled=rptrPortSecurityFullSecEnabled, rptrPortFrameSz256To511=rptrPortFrameSz256To511, rptrPortGrpPktStatsColls=rptrPortGrpPktStatsColls, rptrPortPktStatsColls=rptrPortPktStatsColls, rptrPortGrpPktStatsPkts=rptrPortGrpPktStatsPkts, rptrPortSaTrapSet=rptrPortSaTrapSet, rptrPortFrameSz1024To1518=rptrPortFrameSz1024To1518, rptrRedundMaxCrcts=rptrRedundMaxCrcts, rptrPortMgmtTable=rptrPortMgmtTable, rptrMgmtPortsEnable=rptrMgmtPortsEnable, rptrRedundAddrTable=rptrRedundAddrTable, rptrHwTrapSet=rptrHwTrapSet, rptrPortHardwareLinkStatus=rptrPortHardwareLinkStatus, rptrPktStatsNoRsc=rptrPktStatsNoRsc, rptrPortGrpHwTrapSetGrpId=rptrPortGrpHwTrapSetGrpId, rptrPortProtocolPortGrpId=rptrPortProtocolPortGrpId, rptrPortGrpPktStatsMulticasts=rptrPortGrpPktStatsMulticasts, rptrPortFrameSz512To1023=rptrPortFrameSz512To1023, rptrFrameSzGiant=rptrFrameSzGiant, rptrPortPktStatsPortId=rptrPortPktStatsPortId, rptrPktStatsBroadcasts=rptrPktStatsBroadcasts, rptrPktStatsColls=rptrPktStatsColls, rptrRedundPortType=rptrRedundPortType, rptrSrcAddrMgmtSrcAgeInterval=rptrSrcAddrMgmtSrcAgeInterval, rptrSecurityLearnState=rptrSecurityLearnState, rptrAlarmsTrafEnable=rptrAlarmsTrafEnable, rptrPortGrpSrcAddrId=rptrPortGrpSrcAddrId, rptrPortFrameSzRunt=rptrPortFrameSzRunt, rptrPortGrpTrap=rptrPortGrpTrap, rptrPortGrpProtocolOther=rptrPortGrpProtocolOther, rptrHwTrapSetLink=rptrHwTrapSetLink, rptrPortSecurityListEntry=rptrPortSecurityListEntry, rptrPktStatsOOW=rptrPktStatsOOW, rptrPortGrpAlarmCollBdDisable=rptrPortGrpAlarmCollBdDisable, rptrAlarms=rptrAlarms, rptrPortSrcAddrListTable=rptrPortSrcAddrListTable, rptrPortGrpAlarmBroadThreshold=rptrPortGrpAlarmBroadThreshold, rptrFrameSizes=rptrFrameSizes, rptrPortGrpSrcAddrLock=rptrPortGrpSrcAddrLock, rptrPortSecurityListIndex=rptrPortSecurityListIndex, rptrPortGrpFrameSz64To127=rptrPortGrpFrameSz64To127, rptrMgmtPortCount=rptrMgmtPortCount, rptrPortGrpHwTrapTable=rptrPortGrpHwTrapTable, rptrSrcAddrListEntry=rptrSrcAddrListEntry, rptrPortGrpMgmtName=rptrPortGrpMgmtName, rptrPortGrpProtocolId=rptrPortGrpProtocolId, rptrPortSrcAddrPortId=rptrPortSrcAddrPortId, rptrPortHardwarePortGrpId=rptrPortHardwarePortGrpId, rptrRedundCrctReset=rptrRedundCrctReset, rptrPortGrpPktStatsTbl=rptrPortGrpPktStatsTbl, rptrPortGrpMgmtLogPortCount=rptrPortGrpMgmtLogPortCount, rptrPortRedundPortId=rptrPortRedundPortId, rptrPortAlarmPortId=rptrPortAlarmPortId, rptrPortSrcAddrAddressList=rptrPortSrcAddrAddressList, rptrPortHwTrapSetPortId=rptrPortHwTrapSetPortId, rptrPortGrpAlarmErrGrpDisable=rptrPortGrpAlarmErrGrpDisable, rptrPortRedundStatus=rptrPortRedundStatus, rptrPortSecurityListAddress=rptrPortSecurityListAddress, rptrPortProtocolBanyan=rptrPortProtocolBanyan, rptrPortFrameSzTbl=rptrPortFrameSzTbl, rptrPortGrpFrameSz512To1023=rptrPortGrpFrameSz512To1023, rptrMgmtPortsOper=rptrMgmtPortsOper, rptrPortSecurityLockDelAddress=rptrPortSecurityLockDelAddress, rptrAlarmsErrThreshold=rptrAlarmsErrThreshold, rptrMgmt=rptrMgmt, rptrSaSecurity=rptrSaSecurity, rptrRedundPortEntry=rptrRedundPortEntry, rptr=rptr, rptrPortSecurityPortId=rptrPortSecurityPortId, rptrPortGrpAlarmErrSource=rptrPortGrpAlarmErrSource, rptrPortAlarmErrEnable=rptrPortAlarmErrEnable, rptrPortSecurityEntry=rptrPortSecurityEntry, rptrPortGrpProtocolOSI=rptrPortGrpProtocolOSI, rptrAlarmsTrafThreshold=rptrAlarmsTrafThreshold, rptrPortGrpSrcAddrTable=rptrPortGrpSrcAddrTable, rptrSrcAddrMgmtPortLock=rptrSrcAddrMgmtPortLock, rptrPortProtocolOSI=rptrPortProtocolOSI, rptrAlarmsErrSource=rptrAlarmsErrSource, rptrRedundCrctAddAddr=rptrRedundCrctAddAddr, rptrPortGrpMgmtTable=rptrPortGrpMgmtTable, rptrFrameSz512To1023=rptrFrameSz512To1023, rptrPortGrpPktStatsErrors=rptrPortGrpPktStatsErrors, rptrPortGrpAlarmErrEnable=rptrPortGrpAlarmErrEnable, rptrPktStatsErrors=rptrPktStatsErrors, rptrRedundPortBoardNum=rptrRedundPortBoardNum, rptrRedundCrctEntry=rptrRedundCrctEntry, rptrRedundCrctNumAddr=rptrRedundCrctNumAddr, rptrPortGrpSaTrapSetGrpId=rptrPortGrpSaTrapSetGrpId, rptrPortGrpSrcAddrLockGrpId=rptrPortGrpSrcAddrLockGrpId, rptrRedundCrctId=rptrRedundCrctId, rptrRedundPortTable=rptrRedundPortTable, rptrSecurityLockState=rptrSecurityLockState, rptrPortSrcAddrActiveUsers=rptrPortSrcAddrActiveUsers, rptrAlarmsBroadEnable=rptrAlarmsBroadEnable, rptrRedundPerformTest=rptrRedundPerformTest, rptrProtocols=rptrProtocols, rptrPortGrpProtocolBanyan=rptrPortGrpProtocolBanyan, rptrPortGrpSaTrapSet=rptrPortGrpSaTrapSet, rptrPktStatsCRC=rptrPktStatsCRC, rptrPortTrap=rptrPortTrap, rptrPortSrcAddrPortGrpId=rptrPortSrcAddrPortGrpId, rptrProtocolsAppletalk=rptrProtocolsAppletalk, rptrPortProtocolXNS=rptrPortProtocolXNS, rptrPortProtocolCtron=rptrPortProtocolCtron, rptrMgmtResetCounters=rptrMgmtResetCounters, rptrSrcAddrSrcTableEntryPortGroup=rptrSrcAddrSrcTableEntryPortGroup, rptrFrameSz128To255=rptrFrameSz128To255, rptrPktStatsBytes=rptrPktStatsBytes, rptrProtocolsOther=rptrProtocolsOther, rptrPortGrpHwTrapSet=rptrPortGrpHwTrapSet, rptrPortAlarmTrafEnable=rptrPortAlarmTrafEnable, rptrPortSrcAddrListPortGrpId=rptrPortSrcAddrListPortGrpId, rptrPortSrcAddrListId=rptrPortSrcAddrListId, rptrPortSecurityForceNonSecure=rptrPortSecurityForceNonSecure, rptrPortSecurityLearnState=rptrPortSecurityLearnState, rptrRedundCrctDelAddr=rptrRedundCrctDelAddr, rptrPortHardwareEntry=rptrPortHardwareEntry, rptrPortRedundTable=rptrPortRedundTable, rptrPortProtocolAppletalk=rptrPortProtocolAppletalk, rptrPortRedundCrctNum=rptrPortRedundCrctNum, rptrPortGrpProtocolAppletalk=rptrPortGrpProtocolAppletalk, rptrPortAlarmCollThreshold=rptrPortAlarmCollThreshold, rptrPortGrpMgmtPortsOn=rptrPortGrpMgmtPortsOn, rptrPortMgmtPortGrpId=rptrPortMgmtPortGrpId, rptrPortHwTrapSetPortGrpId=rptrPortHwTrapSetPortGrpId, rptrPortGrpSrcAddrLockEntry=rptrPortGrpSrcAddrLockEntry, rptrSrcAddrSrcTableEntryPort=rptrSrcAddrSrcTableEntryPort, rptrHwTrapSetSeg=rptrHwTrapSetSeg, rptrAlarmsCollEnable=rptrAlarmsCollEnable, rptrRedundCrctTable=rptrRedundCrctTable, rptrPortAlarmCollEnable=rptrPortAlarmCollEnable, rptrMgmtName=rptrMgmtName, rptrRedundAddrEntry=rptrRedundAddrEntry, rptrPortGrpSASecurityLearnState=rptrPortGrpSASecurityLearnState, rptrPortGrpProtocolCtron=rptrPortGrpProtocolCtron, rptrPortPktStatsCRC=rptrPortPktStatsCRC, rptrRedund=rptrRedund, rptrPortPktStatsErrors=rptrPortPktStatsErrors, rptrPortGrpSrcAddrEntry=rptrPortGrpSrcAddrEntry, rptrPortGrpFrameSzRunt=rptrPortGrpFrameSzRunt, rptrPortGrpStats=rptrPortGrpStats, rptrPortGrpSASecuritySecureState=rptrPortGrpSASecuritySecureState, rptrPortMgmtPortId=rptrPortMgmtPortId, rptrPortFrameSz128To255=rptrPortFrameSz128To255, rptrPortPktStatsAlign=rptrPortPktStatsAlign, rptrPortHwTrapSetSeg=rptrPortHwTrapSetSeg, rptrPortProtocolPortId=rptrPortProtocolPortId, rptrPortAlarmCollPortDisable=rptrPortAlarmCollPortDisable, rptrPortMgmtEntry=rptrPortMgmtEntry, rptrPortGrpAlarmTable=rptrPortGrpAlarmTable, rptrPortPktStatsTbl=rptrPortPktStatsTbl, rptrPortRedundType=rptrPortRedundType, rptrPortSrcAddrForceTrunk=rptrPortSrcAddrForceTrunk, rptrTrap=rptrTrap, rptrPortGrpFrameSzGiant=rptrPortGrpFrameSzGiant, rptrMgmtBoardMap=rptrMgmtBoardMap, rptrProtocolsCtron=rptrProtocolsCtron, rptrPortGrpMgmtGrpId=rptrPortGrpMgmtGrpId, rptrPortMgmtName=rptrPortMgmtName, rptrPortPktStatsPortGrpId=rptrPortPktStatsPortGrpId, rptrPortSrcAddrEntry=rptrPortSrcAddrEntry, rptrPortGrpPktStatsOOW=rptrPortGrpPktStatsOOW, rptrPortGrpAlarmCollEnable=rptrPortGrpAlarmCollEnable, rptrPortSecuritySecureState=rptrPortSecuritySecureState, rptrPortSaTrapSetSrcaddr=rptrPortSaTrapSetSrcaddr, rptrPortSecurityLockStatus=rptrPortSecurityLockStatus, rptrSrcAddrMgmtActiveUsers=rptrSrcAddrMgmtActiveUsers, rptrPortGrpFrameSz1024To1518=rptrPortGrpFrameSz1024To1518, rptrPortPktStatsBytes=rptrPortPktStatsBytes, rptrSecurityLearnMode=rptrSecurityLearnMode, rptrRedundCrctNumBPs=rptrRedundCrctNumBPs, rptrRedundCrctName=rptrRedundCrctName, rptrPortGrpAlarmBroadGrpDisable=rptrPortGrpAlarmBroadGrpDisable, rptrMgmtPortsOn=rptrMgmtPortsOn, rptrPortSecurityPortGrpId=rptrPortSecurityPortGrpId, rptrPortHardwareTable=rptrPortHardwareTable, rptrPortSecurityLearnMode=rptrPortSecurityLearnMode, rptrMgmtInterfaceNum=rptrMgmtInterfaceNum, rptrPortFrameSzPortGrpId=rptrPortFrameSzPortGrpId, rptrPktStatsPackets=rptrPktStatsPackets, rptrPortRedundPortGrpId=rptrPortRedundPortGrpId, rptrSrcAddrSrcTableEntryId=rptrSrcAddrSrcTableEntryId, rptrProtocolsBanyan=rptrProtocolsBanyan, rptrSecuritySecureState=rptrSecuritySecureState, rptrFrameSzRunt=rptrFrameSzRunt, rptrPortMgmtPortType=rptrPortMgmtPortType, rptrPortHwTrapSetLink=rptrPortHwTrapSetLink, rptrPortGrpAlarmEntry=rptrPortGrpAlarmEntry, rptrPortAlarmEntry=rptrPortAlarmEntry, rptrSrcAddrListId=rptrSrcAddrListId, rptrPortGrpFrameSzId=rptrPortGrpFrameSzId, rptrRedundTestTOD=rptrRedundTestTOD, rptrPortGrpProtocolDECNet=rptrPortGrpProtocolDECNet, rptrPortGrpProtocolEntry=rptrPortGrpProtocolEntry, rptrPortGrpMgmtPortsOper=rptrPortGrpMgmtPortsOper, rptrPortAlarmTable=rptrPortAlarmTable, rptrPortGrpPktStatsCRC=rptrPortGrpPktStatsCRC, rptrPortGrpProtocolNovell=rptrPortGrpProtocolNovell, rptrPortAlarmPortGrpId=rptrPortAlarmPortGrpId, rptrPortPktStatsBroadcasts=rptrPortPktStatsBroadcasts, rptrPortGrpAlarmTrafGrpDisable=rptrPortGrpAlarmTrafGrpDisable, rptrPortAlarmTrafPortDisable=rptrPortAlarmTrafPortDisable, rptrPortSaTrapTable=rptrPortSaTrapTable, rptrAlarmsCollThreshold=rptrAlarmsCollThreshold, rptrRedundCrctRetrys=rptrRedundCrctRetrys, rptrPortGrpFrameSz128To255=rptrPortGrpFrameSz128To255, rptrPortHwTrapTable=rptrPortHwTrapTable, rptrPortAssoc=rptrPortAssoc, rptrPortHardwareSegStatus=rptrPortHardwareSegStatus, rptrPortAssocEntry=rptrPortAssocEntry, rptrPortPktStatsOOW=rptrPortPktStatsOOW, rptrPortSecurityListTable=rptrPortSecurityListTable)
mibBuilder.exportSymbols("REPEATER-REV4-MIB", rptrPortGrpFrameSzEntry=rptrPortGrpFrameSzEntry, rptrPortFrameSzGiant=rptrPortFrameSzGiant, rptrSourceAddress=rptrSourceAddress, rptrSrcAddrListTable=rptrSrcAddrListTable, rptrPortHwTrapEntry=rptrPortHwTrapEntry, rptrSrcAddrAddressList=rptrSrcAddrAddressList, rptrSrcAddrSrcTableEntry=rptrSrcAddrSrcTableEntry, rptrPortAlarmBroadEnable=rptrPortAlarmBroadEnable, rptrRedundAddrCrctId=rptrRedundAddrCrctId, rptrRedundPortCrctId=rptrRedundPortCrctId, rptrPortGrpSrcAddrActiveUsers=rptrPortGrpSrcAddrActiveUsers, rptrPortProtocolOther=rptrPortProtocolOther, rptrAlarmsBroadThreshold=rptrAlarmsBroadThreshold, rptrPortHwTrapSet=rptrPortHwTrapSet, rptrPortAssocTable=rptrPortAssocTable, rptrPortProtocolEntry=rptrPortProtocolEntry, rptrPortGrpAlarmErrThreshold=rptrPortGrpAlarmErrThreshold, rptrPortGrpMgmtPortCount=rptrPortGrpMgmtPortCount, rptrPortFrameSzEntry=rptrPortFrameSzEntry, rptrPortGrpHwTrapEntry=rptrPortGrpHwTrapEntry, rptrPortSaTrapSetPortGrpId=rptrPortSaTrapSetPortGrpId, rptrPortPktStatsEntry=rptrPortPktStatsEntry, rptrPortGrpHwTrapSetSeg=rptrPortGrpHwTrapSetSeg, rptrPortSrcAddrListPortId=rptrPortSrcAddrListPortId, rptrRedundPortId=rptrRedundPortId, rptrPortGrpAlarmId=rptrPortGrpAlarmId, rptrPortProtocolIP=rptrPortProtocolIP, rptrPortFrameSzPortId=rptrPortFrameSzPortId, rptrPortGrpMgmtPortsEnable=rptrPortGrpMgmtPortsEnable, rptrSrcAddrMgmtHashType=rptrSrcAddrMgmtHashType, rptrPortProtocolTbl=rptrPortProtocolTbl, rptrRedundReset=rptrRedundReset, rptrPortSaTrapEntry=rptrPortSaTrapEntry, rptrPortGrpSaTrapSetSrcaddr=rptrPortGrpSaTrapSetSrcaddr, rptrPortSecurityDisableOnViolation=rptrPortSecurityDisableOnViolation, rptrPktStatsAlign=rptrPktStatsAlign, rptrSrcAddrSrcTable=rptrSrcAddrSrcTable, rptrPortSrcAddrTopoState=rptrPortSrcAddrTopoState, rptrPortSecurityListPortId=rptrPortSecurityListPortId, rptrPortGrpPktStatsEntry=rptrPortGrpPktStatsEntry, rptrPortSecurity=rptrPortSecurity, rptrPortSrcAddrTable=rptrPortSrcAddrTable, rptrFrameSz1024To1518=rptrFrameSz1024To1518, rptrPortGrpSaTrapEntry=rptrPortGrpSaTrapEntry, rptrPortGrpPktStatsAlign=rptrPortGrpPktStatsAlign, rptrPktStats=rptrPktStats, rptrSaTrapSet=rptrSaTrapSet, rptrProtocolsIP=rptrProtocolsIP, rptrPortStats=rptrPortStats, rptrPortAssocStatus=rptrPortAssocStatus, rptrPortFrameSz64To127=rptrPortFrameSz64To127, rptrPortGrpHwTrapSetLink=rptrPortGrpHwTrapSetLink, rptrRedundPollInterval=rptrRedundPollInterval, rptrPortRedundEntry=rptrPortRedundEntry, rptrPortAssocBoard=rptrPortAssocBoard, rptrPortPktStatsMulticasts=rptrPortPktStatsMulticasts, rptrProtocolsNovell=rptrProtocolsNovell, rptrPortHardwarePortId=rptrPortHardwarePortId, rptrPortGrpFrameSz256To511=rptrPortGrpFrameSz256To511, rptrPortSecurityListPortGrpId=rptrPortSecurityListPortGrpId, rptrProtocolsOSI=rptrProtocolsOSI, rptrPortGrpProtocolTbl=rptrPortGrpProtocolTbl, rptrSrcAddrMgmt=rptrSrcAddrMgmt, rptrRedundPortNum=rptrRedundPortNum, rptrPortMgmtAdminState=rptrPortMgmtAdminState, rptrFrameSz64To127=rptrFrameSz64To127, rptrPortAlarmTrafThreshold=rptrPortAlarmTrafThreshold)
