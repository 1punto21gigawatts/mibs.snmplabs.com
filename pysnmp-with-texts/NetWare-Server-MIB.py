#
# PySNMP MIB module NetWare-Server-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NetWare-Server-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:26:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
KBytes, InternationalDisplayString = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "KBytes", "InternationalDisplayString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, IpAddress, ObjectIdentity, MibIdentifier, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, NotificationType, Gauge32, Counter32, iso, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "IpAddress", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "NotificationType", "Gauge32", "Counter32", "iso", "Unsigned32", "Integer32")
DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString")
novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
mibDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2))
nwServer = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 28))
nwSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 28, 1))
nwFileSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 28, 2))
nwUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 28, 3))
nwQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 28, 4))
nwOdi = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 28, 5))
nwSft3 = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 28, 6))
nwNCP = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 28, 7))
nwWatchdog = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 28, 8))
nwNLM = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 28, 9))
nwSetParams = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 28, 10))
nwUserAccounts = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 28, 11))
class Seconds(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class IPXNetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class TransportDomain(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noAddress", 1), ("ipx", 2), ("ip", 3), ("appleTalkDDP", 4))

class TransportAddress(OctetString):
    pass

class EngineType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("msEngine", 1), ("ioEnginePrimary", 2), ("ioEngineSecondary", 3))

class DSTType(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(7, 7)
    fixedLength = 7

nwSysServerName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 1), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysServerName.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysServerName.setDescription('The physical name of this NetWare server.')
nwSysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 2), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysSerialNumber.setDescription('The serial number of the instance of the NetWare Operating System running on this server.')
nwSysInternalNetNum = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 3), IPXNetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysInternalNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysInternalNetNum.setDescription('The internal IPX network number of this server.')
nwSysServerUpTime = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysServerUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysServerUpTime.setDescription('The time (in hundredths of a second) since this server was last restarted.')
nwSysOSSFTLevel = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("sftI", 2), ("sftII", 3), ("sftIII", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysOSSFTLevel.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysOSSFTLevel.setDescription('The System Fault Tolerance Level of the NetWare Operating System running on this server.')
nwSysOSMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysOSMajorVer.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysOSMajorVer.setDescription('The major version number of the NetWare Operating System running on this server.')
nwSysOSMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysOSMinorVer.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysOSMinorVer.setDescription('The minor version number of the NetWare Operating System running on this server.')
nwSysOSReleaseDate = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysOSReleaseDate.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysOSReleaseDate.setDescription('The release date of the NetWare Operating System running on this server.')
nwSysOSDescription = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 9), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysOSDescription.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysOSDescription.setDescription('A textual description of the NetWare Operating System running on this server.')
nwSysOSCopyright = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 10), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysOSCopyright.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysOSCopyright.setDescription('The copyright string for the NetWare Operating System running on this server.')
nwSysTime = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 11), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwSysTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysTime.setDescription('The date and time kept by this server.')
nwSysTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 12), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwSysTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysTimeZone.setDescription("The time zone in which this server resides. The string is in the same format as in the NetWare 'SET TIMEZONE' command.")
nwSysLoginState = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwSysLoginState.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysLoginState.setDescription('The current login state of this Server.')
nwSysLanguageID = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("canadianFrench", 2), ("chinese", 3), ("danish", 4), ("dutch", 5), ("english", 6), ("finnish", 7), ("french", 8), ("german", 9), ("italian", 10), ("japanese", 11), ("portuguese", 14), ("russian", 15), ("spanish", 16), ("swedish", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysLanguageID.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysLanguageID.setDescription('The national language in use on this server.')
nwSysNMASerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 15), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysNMASerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysNMASerialNumber.setDescription('The serial number of the instance of the NetWare Management Agent running on this server. Or, a zero-length string if not applicable.')
nwSysNMACopiesAllowed = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysNMACopiesAllowed.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysNMACopiesAllowed.setDescription('The maximum number of instances of the NMA with this serial number allowed by the license agreement. A value of 0 implies no limit.')
nwSysDirectoryTree = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 17), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysDirectoryTree.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysDirectoryTree.setDescription('The name of the NetWare directory services tree containing this server. Or, a zero-length string if not applicable.')
nwSysBinderyContext = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 18), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysBinderyContext.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysBinderyContext.setDescription('The container object(s) where the bindery services context(s) is set. Or, a zero-length string if not applicable.')
nwSysServerDSName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 19), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysServerDSName.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysServerDSName.setDescription('The Directory Services full distinguished name of this NetWare server, or the zero-length string if not applicable.')
nwSysDaylightSavingsStart = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 20), DSTType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysDaylightSavingsStart.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysDaylightSavingsStart.setDescription('Start of daylight savings time. A language independent representation of the local date and time when the switch to Daylight Savings Time occurs on the server.')
nwSysDaylightSavingsEnd = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 21), DSTType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysDaylightSavingsEnd.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysDaylightSavingsEnd.setDescription('End of daylight savings time. A language independent representation of the local date and time when the switch from Daylight Savings Time occurs on the server.')
nwSysDaylightSavingsOffset = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysDaylightSavingsOffset.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysDaylightSavingsOffset.setDescription('The offset applied in time calculations when daylight savings is in effect. This is a signed quantity, and the units are seconds.')
nwSysDaylightSavingsStatus = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSysDaylightSavingsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwSysDaylightSavingsStatus.setDescription('Indicates whether daylight savings time is applicable or not.')
nwFSReads = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFSReads.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSReads.setDescription('The total number of file reads the file system has made since this server was started. This value provides a relative measure of server activity.')
nwFSWrites = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFSWrites.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSWrites.setDescription('The total number of file writes the file system has made since this server was started. This value provides a relative measure of server activity.')
nwFSReadKBytes = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFSReadKBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSReadKBytes.setDescription('The total number of KBytes read by the file system. This value provides a measure of server activity.')
nwFSWrittenKBytes = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFSWrittenKBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSWrittenKBytes.setDescription('The total number of KBytes written by the file system. This value provides a measure of server activity.')
nwFSCacheChecks = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFSCacheChecks.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSCacheChecks.setDescription('The total number of checks that have been made against the file cache.')
nwFSCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFSCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSCacheHits.setDescription('The total number of times a file cache check has resulted in a hit.')
nwFSOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFSOpenFiles.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSOpenFiles.setDescription('The number of open files in the file system.')
nwFSMaxOpenFiles = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFSMaxOpenFiles.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSMaxOpenFiles.setDescription('The maximum number of open files allowed in the file system.')
nwFSRecordLocks = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFSRecordLocks.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSRecordLocks.setDescription('The current number of record locks.')
nwFSMaxRecordLocks = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFSMaxRecordLocks.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSMaxRecordLocks.setDescription('The maximum number of record locks allowed.')
nwFSMaxSubdirectoryTreeDepth = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFSMaxSubdirectoryTreeDepth.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSMaxSubdirectoryTreeDepth.setDescription('The number of levels of subdirectories the OS supports.')
nwFSMaxPercentOfVolumeUsedByDir = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFSMaxPercentOfVolumeUsedByDir.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSMaxPercentOfVolumeUsedByDir.setDescription('The percentage of a volume that may be used as directory space.')
nwFSVolCount = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFSVolCount.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSVolCount.setDescription('The number of volumes listed in the volume table')
nwFSVolTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14), )
if mibBuilder.loadTexts: nwFSVolTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSVolTable.setDescription('The volume table lists all the NetWare volumes, whether mounted or not ( see nwVolMounted for more details).')
nwFSVolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1), ).setIndexNames((0, "NetWare-Server-MIB", "nwVolID"))
if mibBuilder.loadTexts: nwFSVolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSVolEntry.setDescription('An entry in the volume table describing a single NetWare Volume')
nwVolID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolID.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolID.setDescription('A unique value for each NetWare volume on the server. The value for each volume must remain constant at least from one re-initialization of the agent to the next re- initialization.')
nwVolPhysicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1, 2), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolPhysicalName.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolPhysicalName.setDescription('The name of the physical volume (as opposed to any Directory Services (DS) name.')
nwVolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1, 3), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolSize.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolSize.setDescription('The size of the volume in KBytes.')
nwVolFree = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1, 4), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolFree.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolFree.setDescription('The free space on the volume in KBytes. As this number approaches zero, the volume is running out of space for new or expanding files.')
nwVolFreeable = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1, 5), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolFreeable.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolFreeable.setDescription('The amount of freeable space (in KBytes) being used by previously deleted files on this volume. The freeable space can be reclaimed as free space by purging deleted files.')
nwVolNonFreeable = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1, 6), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolNonFreeable.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolNonFreeable.setDescription('The non-freeable space (in KBytes) on the volume. This is the space being used by deleted files that cannot be purged. Non-freeable space can be reclaimed as free space when the deleted files become eligible to be purged.')
nwVolBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolBlockSize.setDescription('The block size on the volume in bytes.')
nwVolMounted = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mounted", 1), ("dismounted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwVolMounted.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolMounted.setDescription('The mount state of the volume. Note that if the volume is not mounted, all the other values in the table, except nwVolName, are invalid. Writing a value of mounted(1) to this object will cause the volume to be mounted if it is currently dismounted. Writing a value of dismounted(2) to this object will cause the volume to be dismounted if the volume is currently mounted.')
nwVolAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolAttributes.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolAttributes.setDescription('A value that represents the attributes of the volume. The value is a sum. This value initially takes the value zero, then for each attribute that is enabled on the volume, 2 raised to a power is added to the sum. The powers are according to the following table: Attribute Power Block Suballocation 0 File Compression 1 Data Migration 2 Auditing 3 Read Only 4 For example, a read-only volume with suballocation enabled would have a value of 17 (2**4 + 2**0).')
nwVolNameSpaces = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolNameSpaces.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolNameSpaces.setDescription('A value representing all the name spaces supported by this volume. The value is a sum. This value initially takes the value zero, then for each name space that is supported by the volume, 2 raised to a power is added to the sum. The powers are according to the following table: Name Space Power DOS 0 MAC 1 NFS 2 FTAM 3 OS/2 4 NT 5 For example, a volume supporting both the DOS and MAC name spaces would have a value of 3 (2**0 + 2**1).')
nwVolTotalDirEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolTotalDirEntries.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolTotalDirEntries.setDescription('The total number of directory table entries available on this volume.')
nwVolUsedDirEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolUsedDirEntries.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolUsedDirEntries.setDescription('The number of directory table entries that are currently being used on this volume.')
nwVolSegmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolSegmentCount.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolSegmentCount.setDescription('The number of segments comprising this volume.')
nwVolDSName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1, 14), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolDSName.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolDSName.setDescription('The full Directory Services distinguished name for the volume, or the zero-length string if not applicable.')
nwVolFileSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("netWareVolume", 3), ("nfsVolume", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolFileSystemID.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolFileSystemID.setDescription('The type of the file system on the volume.')
nwVolFileSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 14, 1, 16), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolFileSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolFileSystemName.setDescription('If remote, the remote mount point; e.g. va:/usr/x If local, the zero length string.')
nwFSOpenFileTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 15), )
if mibBuilder.loadTexts: nwFSOpenFileTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSOpenFileTable.setDescription('A table of all open files on the server. If a file is opened by more than one connection, multiple entries for the same file will appear in the table.')
nwFSOpenFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 15, 1), ).setIndexNames((0, "NetWare-Server-MIB", "nwOfileVolID"), (0, "NetWare-Server-MIB", "nwOfileDirectoryNumber"), (0, "NetWare-Server-MIB", "nwOfileConnection"))
if mibBuilder.loadTexts: nwFSOpenFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwFSOpenFileEntry.setDescription('An entry in the Open File table providing information about a single open file.')
nwOfileVolID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwOfileVolID.setStatus('mandatory')
if mibBuilder.loadTexts: nwOfileVolID.setDescription('A number that uniquely identifies a NetWare volume. The value of this object for a particular volume has the same value as the nwVolID object for the same volume.')
nwOfileDirectoryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwOfileDirectoryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nwOfileDirectoryNumber.setDescription('A number that uniquely identifies an open file within a NetWare volume.')
nwOfileConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwOfileConnection.setStatus('mandatory')
if mibBuilder.loadTexts: nwOfileConnection.setDescription('The number of the connection that opened the file.')
nwOfileVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 15, 1, 4), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwOfileVolumeName.setStatus('mandatory')
if mibBuilder.loadTexts: nwOfileVolumeName.setDescription('The physical name of the NetWare volume containing the open file.')
nwOfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 15, 1, 5), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwOfileName.setStatus('mandatory')
if mibBuilder.loadTexts: nwOfileName.setDescription('The name of the open file including the directory path.')
nwOfileLoginName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 2, 15, 1, 6), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwOfileLoginName.setStatus('mandatory')
if mibBuilder.loadTexts: nwOfileLoginName.setDescription('The name of the user (if any) who opened the file. If the file was opened by the system or by an NLM, etc., nwOfileLoginName will be the zero-length string.')
nwUserCount = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserCount.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserCount.setDescription('The number of entries in the User Account Table.')
nwLoginCount = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwLoginCount.setStatus('mandatory')
if mibBuilder.loadTexts: nwLoginCount.setDescription('The number of licensed connections (logins) in this file server.')
nwMaxLogins = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwMaxLogins.setStatus('mandatory')
if mibBuilder.loadTexts: nwMaxLogins.setDescription('The maximum number of licensed connections (logins) supported by this file server. Zero if unlimited.')
nwConnectionCount = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnectionCount.setStatus('mandatory')
if mibBuilder.loadTexts: nwConnectionCount.setDescription('The number of entries in the Connection Table. The current number of connections to this file server(including connection 0 (zero), the system connection).')
nwPeakRemoteConnections = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwPeakRemoteConnections.setStatus('mandatory')
if mibBuilder.loadTexts: nwPeakRemoteConnections.setDescription('The peak number of remote stations that have simultaneously connected to this server. Note that this number does not include connections made by the server itself, nor NLMs running on the server.')
nwMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwMaxConnections.setStatus('mandatory')
if mibBuilder.loadTexts: nwMaxConnections.setDescription('The maximum number of connections supported by this file server. Zero if unlimited.')
nwNLMConnections = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNLMConnections.setStatus('mandatory')
if mibBuilder.loadTexts: nwNLMConnections.setDescription('The current number of logged in connections used by the system.')
nwConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 8), )
if mibBuilder.loadTexts: nwConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwConnectionTable.setDescription('The Connection Table lists all connections used; including those by Workstations, NLMs, and Attachments. Connection 0 (zero) is used by the system.')
nwConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 8, 1), ).setIndexNames((0, "NetWare-Server-MIB", "nwConnectionNumber"))
if mibBuilder.loadTexts: nwConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwConnectionEntry.setDescription('An entry in the connections table provides information about a single connection')
nwConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnectionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nwConnectionNumber.setDescription('The connection number. Connection 0 (zero) is used by the system.')
nwConnectionLoginName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 8, 1, 2), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnectionLoginName.setStatus('mandatory')
if mibBuilder.loadTexts: nwConnectionLoginName.setDescription('The login name (Directory Services full distinguished name where appropriate). Zero-length string if not applicable.')
nwConnectionTransportDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 8, 1, 3), TransportDomain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnectionTransportDomain.setStatus('mandatory')
if mibBuilder.loadTexts: nwConnectionTransportDomain.setDescription(' The transport domain of the connection.')
nwConnectionTransportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 8, 1, 4), TransportAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnectionTransportAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nwConnectionTransportAddress.setDescription(' The transport address of the connection.')
nwConnectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 8, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnectionTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwConnectionTime.setDescription('The date and time the connection was established.')
nwConnectionReadKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnectionReadKBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwConnectionReadKBytes.setDescription('The number of KBytes the connection has read since it was established.')
nwConnectionWrittenKBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnectionWrittenKBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwConnectionWrittenKBytes.setDescription('The number of KBytes the connection has written since it was established.')
nwConnectionNcpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnectionNcpRequests.setStatus('mandatory')
if mibBuilder.loadTexts: nwConnectionNcpRequests.setDescription('The number of NCP Requests the connection has made since it was established.')
nwConnectionFilesOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnectionFilesOpen.setStatus('mandatory')
if mibBuilder.loadTexts: nwConnectionFilesOpen.setDescription('The number of files that are currently opened by the connection.')
nwConnectionRecordsLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnectionRecordsLocked.setStatus('mandatory')
if mibBuilder.loadTexts: nwConnectionRecordsLocked.setDescription('The number of file records that are currently locked by the connection.')
nwConnectionPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnectionPrivilege.setStatus('mandatory')
if mibBuilder.loadTexts: nwConnectionPrivilege.setDescription("A value that represents the connection's login privileges. The value is a sum. This value initially takes the value zero, then for each privilege that the connection has, 2 raised to a power is added to the sum. The powers are according to the following table: Privilege Power Supervisor 0 Operator 1 Auditor 2 High_Privilege 3 Second_Authentication 4 Second_High_Privilege 5 For example, a user with both Supervisor and Auditor privileges would have a value of 5 (2**0 + 2**2) ")
nwConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 3, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwConnectionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwConnectionStatus.setDescription('A value that represents the login status of the user. The value is a sum. This value initially takes the value zero, then for each status that the user has, 2 raised to a power is added to the sum. The powers are according to the following table: Status Power Not logged in 0 Logged in 1 Need security change 2 MacStation 3 Connection abort 4 Audited 5 Authenticated temporary 6 Audit connection recorded 7 DS audit connection recorded 8 Logout in progress 9 For example a logged in user who needs a security change would have a value of 6 (2**1 + 2**2).')
nwQueueCount = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQueueCount.setStatus('mandatory')
if mibBuilder.loadTexts: nwQueueCount.setDescription('The number of active queues on this server.')
nwQueueTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 2), )
if mibBuilder.loadTexts: nwQueueTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwQueueTable.setDescription('The Queue table lists all the active NetWare queues including: print, job and archive queues on this server. ')
nwQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 2, 1), ).setIndexNames((0, "NetWare-Server-MIB", "nwQID"))
if mibBuilder.loadTexts: nwQueueEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwQueueEntry.setDescription('An entry in the Queue table provides information about a single NetWare queue.')
nwQID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQID.setStatus('mandatory')
if mibBuilder.loadTexts: nwQID.setDescription('A unique value for each NetWare queue on the server. The value for each queue must remain constant at least from one re-initialization of the agent to the next re- initialization.')
nwQName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 2, 1, 2), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQName.setStatus('mandatory')
if mibBuilder.loadTexts: nwQName.setDescription('The queue name (Directory Services full distinguished name where appropriate). Zero-length string if not applicable.')
nwQType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("printQueue", 2), ("archiveQueue", 3), ("jobQueue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQType.setStatus('mandatory')
if mibBuilder.loadTexts: nwQType.setDescription('The type of the queue.')
nwQAddJobState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("canAddJobs", 1), ("cannotAddJobs", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQAddJobState.setStatus('mandatory')
if mibBuilder.loadTexts: nwQAddJobState.setDescription('This value indicates whether more jobs can be added to this queue. A value of canAddJobs(1) indicates more jobs can be added. A value of cannotAddJobs(2) indicates more jobs cannot be added.')
nwQAttachState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("canAttach", 1), ("cannotAttach", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQAttachState.setStatus('mandatory')
if mibBuilder.loadTexts: nwQAttachState.setDescription('This value indicates whether queue servers can attach to this queue. A value of canAttach(1) indicates a queue server can attach. A value of cannotAttach(2) indicates a queue server cannot attach.')
nwQServiceJobState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("canService", 1), ("cannotService", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQServiceJobState.setStatus('mandatory')
if mibBuilder.loadTexts: nwQServiceJobState.setDescription('This value indicates whether the queue can service jobs. A value of canService(1) indicates that the queue can service jobs. A value of cannotService(2) indicates the queue cannot service jobs.')
nwQDirVolName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 2, 1, 7), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQDirVolName.setStatus('mandatory')
if mibBuilder.loadTexts: nwQDirVolName.setDescription('The physical name of the volume, where the directory created for this queue resides.')
nwQNumJobEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQNumJobEntries.setStatus('mandatory')
if mibBuilder.loadTexts: nwQNumJobEntries.setDescription('The number of job entries in the queue.')
nwQNumAssignedServers = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQNumAssignedServers.setStatus('mandatory')
if mibBuilder.loadTexts: nwQNumAssignedServers.setDescription('The number of servers assigned to the queue.')
nwQueueJobTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 3), )
if mibBuilder.loadTexts: nwQueueJobTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwQueueJobTable.setDescription('The Queue Job table lists all the jobs for all the active queues defined on this server QMS creates a file for each job. The name of that file will be Q$XXXX.NNN where XXXX is the last 4 digits of nwQJobQID and NNN is the job number. Therefore the Q Job File name can be calculated and will not be in the table.')
nwQueueJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 3, 1), ).setIndexNames((0, "NetWare-Server-MIB", "nwQJobQID"), (0, "NetWare-Server-MIB", "nwQJobNumber"))
if mibBuilder.loadTexts: nwQueueJobEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwQueueJobEntry.setDescription('An entry in the Queue Job table provides information about a particular job in a particular queue.')
nwQJobQID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQJobQID.setStatus('mandatory')
if mibBuilder.loadTexts: nwQJobQID.setDescription('A number that uniquely identifies a NetWare queue. The value of this object for a particular queue has the same value as the nwQID object for the same queue.')
nwQJobNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQJobNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nwQJobNumber.setDescription('The job number.')
nwQJobDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 3, 1, 3), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQJobDescription.setStatus('mandatory')
if mibBuilder.loadTexts: nwQJobDescription.setDescription('The description of the queue job.')
nwQJobEntryDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 3, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQJobEntryDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwQJobEntryDateTime.setDescription('The entry date and time.')
nwQJobPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQJobPosition.setStatus('mandatory')
if mibBuilder.loadTexts: nwQJobPosition.setDescription('The order in the queue.')
nwQJobSize = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQJobSize.setStatus('mandatory')
if mibBuilder.loadTexts: nwQJobSize.setDescription('The size of the job file in bytes.')
nwQJobControlFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQJobControlFlags.setStatus('mandatory')
if mibBuilder.loadTexts: nwQJobControlFlags.setDescription('A value representing the job control flags. The value is a sum. This value initially takes the value zero, then for each job control flag that is set, 2 raised to a power is added to the sum. The powers are according to the following table: 8h Service Auto-Start 10h Execute 20h Entry Open 40h User Hold 80h Operator Hold')
nwQJobUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 3, 1, 8), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQJobUserName.setStatus('mandatory')
if mibBuilder.loadTexts: nwQJobUserName.setDescription('The name of the user who submitted the job (Directory Services full distinguished name where appropriate). Zero-length string if not applicable.')
nwQJobTargetServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 3, 1, 9), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQJobTargetServerName.setStatus('mandatory')
if mibBuilder.loadTexts: nwQJobTargetServerName.setDescription("The target server name (Directory Services full distinguished name where appropriate).. The zero length string will be returned for 'Any Server'.")
nwQJobTargetDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 3, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQJobTargetDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwQJobTargetDateTime.setDescription('The target date and time. When the job is to be printed. A job may be first in queue but may not print because this is set to some other time.')
nwQJobServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 3, 1, 11), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQJobServerName.setStatus('mandatory')
if mibBuilder.loadTexts: nwQJobServerName.setDescription('The server currently processing the job (Directory Services full distinguished name where appropriate).. If the job is not being handled currently, this field will be a zero-length string.')
nwQueueServerTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 4), )
if mibBuilder.loadTexts: nwQueueServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwQueueServerTable.setDescription('The Queue Server Table lists all the assigned servers for all the active NetWare queues on this instrumented server. For each active queue on the server, zero or more entries will exist, one for each server assigned to service that particular queue.')
nwQueueServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 4, 1), ).setIndexNames((0, "NetWare-Server-MIB", "nwQServerQID"), (0, "NetWare-Server-MIB", "nwQServerID"))
if mibBuilder.loadTexts: nwQueueServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwQueueServerEntry.setDescription('An entry in the Queue Server table provides information about the assignment of a particular server to a particular queue.')
nwQServerQID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQServerQID.setStatus('mandatory')
if mibBuilder.loadTexts: nwQServerQID.setDescription('A number that uniquely identifies a NetWare queue. The value of this object for a particular queue has the same value as the nwQID object for the same queue.')
nwQServerID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQServerID.setStatus('mandatory')
if mibBuilder.loadTexts: nwQServerID.setDescription('A unique value for each server servicing this queue. The value for each server must remain constant at least from one re-initialization of the agent to the next re- initialization.')
nwQServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 4, 1, 3), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQServerName.setStatus('mandatory')
if mibBuilder.loadTexts: nwQServerName.setDescription('The name of a queue server servicing this queue (Directory Services full distinguished name where appropriate). Zero-length string if not applicable..')
nwQServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwQServerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwQServerStatus.setDescription('The status of the Queue Server.')
nwOdiLslEnqSendCount = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwOdiLslEnqSendCount.setStatus('mandatory')
if mibBuilder.loadTexts: nwOdiLslEnqSendCount.setDescription("The Link Support Layer's Enqueued Send Count, this is the current number of send packets that have been placed in a send queue.")
nwOdiOsPktRcvBuffer = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwOdiOsPktRcvBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: nwOdiOsPktRcvBuffer.setDescription('The current number of packet receive buffers being used by the operating system.')
nwOdiOsMaxPktRcvBuffers = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwOdiOsMaxPktRcvBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: nwOdiOsMaxPktRcvBuffers.setDescription('The maximum number of packet receive buffers that the operating system can allocate. This object is settable and can also be set through the nwSetParamTable.')
nwOdiOsMinPktRcvBuffers = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwOdiOsMinPktRcvBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: nwOdiOsMinPktRcvBuffers.setDescription('The minimum number of packet receive buffers that the operating system can allocate. This value can only be changed at startup time from STARTUP.NCF; therefore it is settable only through the nwSetParamTable.')
nwSft3Engine = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 6, 1), EngineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSft3Engine.setStatus('mandatory')
if mibBuilder.loadTexts: nwSft3Engine.setDescription('The type of the this engine.')
nwSft3EngineState = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("synchronizing", 2), ("mirrored", 3), ("noSecondary", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSft3EngineState.setStatus('mandatory')
if mibBuilder.loadTexts: nwSft3EngineState.setDescription('The state of this engine. Note the msEngine does not know its state and thus will always be unknown(1).')
nwSft3EngineTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 28, 6, 3), )
if mibBuilder.loadTexts: nwSft3EngineTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwSft3EngineTable.setDescription('Information about each engine which comprises an SFT- III server.')
nwSft3EngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 28, 6, 3, 1), ).setIndexNames((0, "NetWare-Server-MIB", "nwSft3EngineType"))
if mibBuilder.loadTexts: nwSft3EngineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwSft3EngineEntry.setDescription('Information about a particular engine in an SFT-III server.')
nwSft3EngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 6, 3, 1, 1), EngineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSft3EngineType.setStatus('mandatory')
if mibBuilder.loadTexts: nwSft3EngineType.setDescription('The type of the engine.')
nwSft3EngineName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 6, 3, 1, 2), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSft3EngineName.setStatus('mandatory')
if mibBuilder.loadTexts: nwSft3EngineName.setDescription('The name of this engine.')
nwSft3EngineInternalNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 6, 3, 1, 3), IPXNetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSft3EngineInternalNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: nwSft3EngineInternalNetNum.setDescription('The internal IPX network number of this server.')
nwNCPIPXChecksums = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noChecksums", 1), ("checksumIfEnabledAtClient", 2), ("requireChecksums", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwNCPIPXChecksums.setStatus('mandatory')
if mibBuilder.loadTexts: nwNCPIPXChecksums.setDescription('Controls NCP IPX checksumming.')
nwNCPPacketSignatures = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serverNeverSigns", 1), ("serverSignsOnClientRequest", 2), ("serverSignsIfClientCapable", 3), ("serverMandatesSigning", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNCPPacketSignatures.setStatus('mandatory')
if mibBuilder.loadTexts: nwNCPPacketSignatures.setDescription('The security level currently in force on this server.')
nwNCPNumNCPReqs = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNCPNumNCPReqs.setStatus('mandatory')
if mibBuilder.loadTexts: nwNCPNumNCPReqs.setDescription('Number of NCP Requests.')
nwNCPUseCount = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNCPUseCount.setStatus('mandatory')
if mibBuilder.loadTexts: nwNCPUseCount.setDescription('NCP station in use count.')
nwNCPPeakUseCount = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNCPPeakUseCount.setStatus('mandatory')
if mibBuilder.loadTexts: nwNCPPeakUseCount.setDescription('NCP peak station in use count.')
nwNCPForgedPkts = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 7, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNCPForgedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwNCPForgedPkts.setDescription('The count of NCP requests that were forged packets.')
nwNCPBeingProcesseds = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 7, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNCPBeingProcesseds.setStatus('mandatory')
if mibBuilder.loadTexts: nwNCPBeingProcesseds.setDescription('The count of NCP requests that were already being processed.')
nwNCPNoAvailConns = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNCPNoAvailConns.setStatus('mandatory')
if mibBuilder.loadTexts: nwNCPNoAvailConns.setDescription('The count of NCP requests that were not processed because there were no available connections.')
nwNCPIPXChecksumErrs = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNCPIPXChecksumErrs.setStatus('mandatory')
if mibBuilder.loadTexts: nwNCPIPXChecksumErrs.setDescription('NCP IPX checksum error count.')
nwNCPInvalidPacketSigs = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNCPInvalidPacketSigs.setStatus('mandatory')
if mibBuilder.loadTexts: nwNCPInvalidPacketSigs.setDescription('NCP invalid packet signature error count.')
nwNCPExtNumReg = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNCPExtNumReg.setStatus('mandatory')
if mibBuilder.loadTexts: nwNCPExtNumReg.setDescription('Number of NCP extensions Registered.')
nwNCPExtInvalidReqs = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 7, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNCPExtInvalidReqs.setStatus('mandatory')
if mibBuilder.loadTexts: nwNCPExtInvalidReqs.setDescription('Invalid NCP Extensions Requests.')
nwWDTimeBeforeFirstPkt = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwWDTimeBeforeFirstPkt.setStatus('mandatory')
if mibBuilder.loadTexts: nwWDTimeBeforeFirstPkt.setDescription('The time before the first Watchdog Packet in seconds.')
nwWDTimeBetweenPkts = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 8, 2), Seconds()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwWDTimeBetweenPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwWDTimeBetweenPkts.setDescription('The time between Watchdog Packets in seconds.')
nwWDNumPktsToSend = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwWDNumPktsToSend.setStatus('mandatory')
if mibBuilder.loadTexts: nwWDNumPktsToSend.setDescription('The number of Watchdog Packets to Send.')
nwWDCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("waiting", 2), ("sendingPackets", 3), ("clearingStations", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwWDCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: nwWDCurrentState.setDescription('The current Watchdog State. Note: this is only available in 4.0, will be unknown in 3.11')
nwWDNotifyConsoleFlag = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 28, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doNotNotify", 1), ("notify", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwWDNotifyConsoleFlag.setStatus('mandatory')
if mibBuilder.loadTexts: nwWDNotifyConsoleFlag.setDescription('The Watchdog Notify Console Flag.')
nwNLMTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 28, 9, 1), )
if mibBuilder.loadTexts: nwNLMTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwNLMTable.setDescription('The nwNLMTable augments the hrSWRunTable in the Host Resources MIB to provide additional NetWare specific information.')
nwNLMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 28, 9, 1, 1), ).setIndexNames((0, "NetWare-Server-MIB", "nwNLMIndex"))
if mibBuilder.loadTexts: nwNLMEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwNLMEntry.setDescription('An entry in the NLM table provides additional information about a particular NLM.')
nwNLMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNLMIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwNLMIndex.setDescription('A number that uniquely identifies an NLM. The value of this object for a particular NLM has the same value as the hrSWRunIndex object, defined in the HOST- RESOURCES-MIB, for the same NLM.')
nwNLMName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 9, 1, 1, 2), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNLMName.setStatus('mandatory')
if mibBuilder.loadTexts: nwNLMName.setDescription('The name of the NLM.')
nwNLMDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 9, 1, 1, 3), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNLMDescription.setStatus('mandatory')
if mibBuilder.loadTexts: nwNLMDescription.setDescription('A text string that describes this NLM.')
nwNLMTotalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNLMTotalMemory.setStatus('mandatory')
if mibBuilder.loadTexts: nwNLMTotalMemory.setDescription('The total memory, in bytes, used by this NLM. This is a composite total of Short Term Memory, Semi-Permanent Memory, and Non-movable Cache Memory allocated by the NLM, plus the sizes of the code and data sections of this instance of an NLM.')
nwNLMCopyright = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 9, 1, 1, 5), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNLMCopyright.setStatus('mandatory')
if mibBuilder.loadTexts: nwNLMCopyright.setDescription('The copyright string for this NLM.')
nwNLMProtectionDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("osDomain", 1), ("protectedDomain", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNLMProtectionDomain.setStatus('mandatory')
if mibBuilder.loadTexts: nwNLMProtectionDomain.setDescription('The protection level at which this NLM is executing.')
nwNLMMajorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNLMMajorVer.setStatus('mandatory')
if mibBuilder.loadTexts: nwNLMMajorVer.setDescription('The major version number of this NLM.')
nwNLMMinorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNLMMinorVer.setStatus('mandatory')
if mibBuilder.loadTexts: nwNLMMinorVer.setDescription('The minor version number of this NLM.')
nwNLMRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNLMRevision.setStatus('mandatory')
if mibBuilder.loadTexts: nwNLMRevision.setDescription('The revision level of this NLM.')
nwNLMReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 9, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNLMReleaseDate.setStatus('mandatory')
if mibBuilder.loadTexts: nwNLMReleaseDate.setDescription('The date and time this NLM was released')
nwSetCategoryTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 1), )
if mibBuilder.loadTexts: nwSetCategoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetCategoryTable.setDescription('A table of NetWare SET parameter categories')
nwSetCategoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 1, 1), ).setIndexNames((0, "NetWare-Server-MIB", "nwSetCategoryIndex"))
if mibBuilder.loadTexts: nwSetCategoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetCategoryEntry.setDescription('A NetWare SET parameter category')
nwSetCategoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSetCategoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetCategoryIndex.setDescription('A unique value for each category of SET commands')
nwSetCategoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 1, 1, 2), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSetCategoryName.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetCategoryName.setDescription('A descriptive name of this category of SET commands')
nwSetParamTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 2), )
if mibBuilder.loadTexts: nwSetParamTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetParamTable.setDescription('A table of the NetWare SET parameters. This table emulates the NetWare SET command. Note that some of the parameters can also be set through other MIB objects')
nwSetParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 2, 1), ).setIndexNames((0, "NetWare-Server-MIB", "nwSetParamCategoryIndex"), (0, "NetWare-Server-MIB", "nwSetParamIndex"))
if mibBuilder.loadTexts: nwSetParamEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetParamEntry.setDescription('An entry in the SET parameter table provides information about a particular parameter.')
nwSetParamCategoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSetParamCategoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetParamCategoryIndex.setDescription('A number that uniquely identifies a Set parameter category. The value of this object for a particular category has the same value as the nwSetCategoryIndex object for the same category.')
nwSetParamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSetParamIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetParamIndex.setDescription('An index which uniquely identifies this set parameter within the category')
nwSetParamName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 2, 1, 3), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSetParamName.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetParamName.setDescription('The name of the settable parameter')
nwSetParamType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("number", 1), ("boolean", 2), ("ticks", 3), ("blockShift", 4), ("timeOffset", 5), ("string", 6), ("trigger", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSetParamType.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetParamType.setDescription("The type of the parameter. All types are integer- valued except 'string', which is string-valued. number: integer boolean: 0 == FALSE, non-zero == TRUE ticks: 1 tick == 3600/65535 == approx 55 millisecs blockShift: integer timeOffset: [+|-]hh:mm:ss converted to seconds string: character string trigger: integer")
nwSetParamValueInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwSetParamValueInteger.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetParamValueInteger.setDescription('The current value of the parameter if integer-valued. Zero otherwise.')
nwSetParamValueString = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 2, 1, 6), InternationalDisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwSetParamValueString.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetParamValueString.setDescription('The current value of the parameter if string-valued. The zero-length string otherwise.')
nwSetParamLowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSetParamLowerLimit.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetParamLowerLimit.setDescription('The lower limit of the parameter if integer-valued.')
nwSetParamUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSetParamUpperLimit.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetParamUpperLimit.setDescription('The upper limit of the parameter if integer-valued. The maximum length of the string if string-valued.')
nwSetParamDescrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSetParamDescrLength.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetParamDescrLength.setDescription('The total length (in octets) of the parameter description string, which can be retrieved in segments from the nwSetDescrTable.')
nwSetParamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwSetParamMode.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetParamMode.setDescription('A value defining how and when the command takes effect. The value is a sum. This value initially takes the value zero, then for each place the parameter can be set from, 2 raised to a power is added to the sum. The powers are according to the following table: Set From Power Console 0 AUTOEXEC.NCF 1 STARTUP.NCF 2 For example, a parameter that can be set from either the console or AUTOEXEC would have a value of 3 (2**0 + 2**1). On a read, a bit will be set for each place the parameter can be set from. On a write, bits should be set to specify where the set command should be placed. If nwSetParamValue is written without nwSetParam also being set in the same PDU, the parameter will be set as if at the console; unless it is a parameter which can only be set in STARTUP.NCF in which case an error will be returned')
nwSetDescrTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 3), )
if mibBuilder.loadTexts: nwSetDescrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetDescrTable.setDescription('A table of description string segments for each NetWare SET parameter. This table allows for long description strings to be retrieved in segments. A complete description string can be reconstituted by concatenating the ordered set of string segments. The length of the complete string is available through the nwSetParamTable.')
nwSetDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 3, 1), ).setIndexNames((0, "NetWare-Server-MIB", "nwSetDescrCategoryIndex"), (0, "NetWare-Server-MIB", "nwSetDescrParamIndex"), (0, "NetWare-Server-MIB", "nwSetDescrIndex"))
if mibBuilder.loadTexts: nwSetDescrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetDescrEntry.setDescription('An entry in the SET description table contains one segment of a NetWare SET parameter description string. The complete description string can be reconstituted by concatenating the ordered set of string segments. The length of the complete string is available through the nwSetParamTable.')
nwSetDescrCategoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSetDescrCategoryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetDescrCategoryIndex.setDescription('A number that uniquely identifies a Set parameter category. The value of this object for a particular category has the same value as the nwSetCategoryIndex object for the same category.')
nwSetDescrParamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSetDescrParamIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetDescrParamIndex.setDescription('A number that uniquely identifies a Set parameter. The value of this object for a particular parameter has the same value as the nwSetParamIndex object for the same parameter.')
nwSetDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSetDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetDescrIndex.setDescription("An ordinal that indicates this segment's relative position in the complete description string for this NetWare SET Parameter.")
nwSetDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 10, 3, 1, 4), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwSetDescription.setStatus('mandatory')
if mibBuilder.loadTexts: nwSetDescription.setDescription('A segment of the description string for this NetWare SET parameter.')
nwUserAcctTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 1), )
if mibBuilder.loadTexts: nwUserAcctTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserAcctTable.setDescription('The User Account Table lists all user accounts in this file server. Users in the table may or may not be logged in currently. The information in this table is applicable only to NetWare 3.11 and 3.12 servers, or NetWare 4.10 servers with Bindery Services enabled. In the case of Bindery Services, data is only available for those users in the Bindery context(s) of the server. In a 4.10 server without Bindery Services enabled, this table will be empty ')
nwUserAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 1, 1), ).setIndexNames((0, "NetWare-Server-MIB", "nwUserID"))
if mibBuilder.loadTexts: nwUserAcctEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserAcctEntry.setDescription('An entry in the User Account table provides information on a single user account. The information in this table is applicable only to NetWare 3.11 and 3.12 servers, or NetWare 4.10 servers with Bindery Services enabled. In the case of Bindery Services, data is only available for those users in the Bindery context(s) of the server. In a 4.x server without Bindery Services enabled, this table will be empty ')
nwUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserID.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserID.setDescription('A unique value for each NetWare user with an account on the server. The value for each user must remain constant at least from one re-initialization of the agent to the next re-initialization.')
nwUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 1, 1, 2), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserName.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserName.setDescription("The user's login name (Directory Services full distinguished name where appropriate). Zero-length string if not applicable.")
nwUserDiskUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 1, 1, 3), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserDiskUsage.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserDiskUsage.setDescription('The amount of disk space, in KBytes, this user is occupying across all volumes on this server.')
nwUserLastLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserLastLoginTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserLastLoginTime.setDescription('The time the user last logged in to this server.')
nwUserAccountStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("expired", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserAccountStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserAccountStatus.setDescription("The status of this user's account")
nwUserPasswordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("expired", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserPasswordStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserPasswordStatus.setDescription("The status of this user's password.")
nwUserBadLoginTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 1, 1, 7), TransportDomain()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserBadLoginTransport.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserBadLoginTransport.setDescription('The transport domain (protocol) the user used to log in with bad password last time, valid only if the variable nwUserBadLoginAttempt is larger than zero.')
nwUserBadLoginAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 1, 1, 8), TransportAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserBadLoginAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserBadLoginAddress.setDescription(' The address the user used to log in with bad password last time, valid only if the variable nwUserBadLoginAttempt is larger than zero.')
nwUserBadLoginAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserBadLoginAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserBadLoginAttempts.setDescription('The number of times the user attempted to log in with a bad password since the server started. The number would be 0xFFFF if the number of bad login attempts has exceeded the bad login threshold and the account has been locked.')
nwUserFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 1, 1, 10), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserFullName.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserFullName.setDescription("The user's full name.")
nwUserVolUsageTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 2), )
if mibBuilder.loadTexts: nwUserVolUsageTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserVolUsageTable.setDescription('The User Volume Usage Table lists the amount of volume space used by each user. It is indexed so you can easily find out how much space a particular user is using on each volume.')
nwUserVolUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 2, 1), ).setIndexNames((0, "NetWare-Server-MIB", "nwUserVolUserID"), (0, "NetWare-Server-MIB", "nwUserVolVolID"))
if mibBuilder.loadTexts: nwUserVolUsageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserVolUsageEntry.setDescription('An entry in the User Volume Usage table provides information about the amount of space a particular user is using on a particular volume.')
nwUserVolUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserVolUserID.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserVolUserID.setDescription('A number that uniquely identifies a user. The value of this object for a particular user has the same value as the nwUserID object for the same user.')
nwUserVolVolID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserVolVolID.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserVolVolID.setDescription('A number that uniquely identifies a NetWare volume. The value of this object for a particular volume has the same value as the nwVolID object for the same volume.')
nwUserVolUsageUser = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 2, 1, 3), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserVolUsageUser.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserVolUsageUser.setDescription("The user's login name (Directory Services full distinguished name where appropriate). Zero-length string if not applicable.")
nwUserVolUsageVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 2, 1, 4), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserVolUsageVolume.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserVolUsageVolume.setDescription(' The physical volume name.')
nwUserVolUsageSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 2, 1, 5), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserVolUsageSpaceUsed.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserVolUsageSpaceUsed.setDescription(' The amount of volume space, in KBytes, this user is occupying.')
nwUserVolUsageLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 2, 1, 6), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwUserVolUsageLimit.setStatus('mandatory')
if mibBuilder.loadTexts: nwUserVolUsageLimit.setDescription(' The amount of volume space, in KBytes, to which this user is limited. 2147483647 if no limit.')
nwVolUsageTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 3), )
if mibBuilder.loadTexts: nwVolUsageTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolUsageTable.setDescription('The Volume Usage Table lists the amount of space on each volume used by each user. It is indexed so that you can easily find all the users who are occupying space on a particular volume.')
nwVolUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 3, 1), ).setIndexNames((0, "NetWare-Server-MIB", "nwVolUsageVolID"), (0, "NetWare-Server-MIB", "nwVolUsageUserID"))
if mibBuilder.loadTexts: nwVolUsageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolUsageEntry.setDescription('An entry in the Volume Usage Table provides information about how much space a particular user is using on a particular volume.')
nwVolUsageVolID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolUsageVolID.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolUsageVolID.setDescription('A number that uniquely identifies a NetWare volume. The value of this object for a particular volume has the same value as the nwVolID object for the same volume.')
nwVolUsageUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolUsageUserID.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolUsageUserID.setDescription('A number that uniquely identifies a user. The value of this object for a particular user has the same value as the nwUserID object for the same user.')
nwVolUsageVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 3, 1, 3), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolUsageVolume.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolUsageVolume.setDescription('The volume name.')
nwVolUsageUser = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 3, 1, 4), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolUsageUser.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolUsageUser.setDescription('The user name.')
nwVolUsageSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 3, 1, 5), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolUsageSpaceUsed.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolUsageSpaceUsed.setDescription('The volume space, in KBytes, in use by user.')
nwVolUsageLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 28, 11, 3, 1, 6), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwVolUsageLimit.setStatus('mandatory')
if mibBuilder.loadTexts: nwVolUsageLimit.setDescription(' The amount of volume space, in KBytes, to which this user is limited. 2147483647 if no limit.')
mibBuilder.exportSymbols("NetWare-Server-MIB", nwSysLoginState=nwSysLoginState, nwNLM=nwNLM, nwNLMConnections=nwNLMConnections, nwWDTimeBetweenPkts=nwWDTimeBetweenPkts, nwVolAttributes=nwVolAttributes, nwConnectionStatus=nwConnectionStatus, nwFSMaxPercentOfVolumeUsedByDir=nwFSMaxPercentOfVolumeUsedByDir, nwQueueTable=nwQueueTable, mibDoc=mibDoc, nwOfileVolumeName=nwOfileVolumeName, nwConnectionRecordsLocked=nwConnectionRecordsLocked, nwSetParamValueString=nwSetParamValueString, nwSysOSMinorVer=nwSysOSMinorVer, nwSetParamLowerLimit=nwSetParamLowerLimit, nwSystem=nwSystem, nwVolNonFreeable=nwVolNonFreeable, nwQJobDescription=nwQJobDescription, nwUserAccountStatus=nwUserAccountStatus, nwVolPhysicalName=nwVolPhysicalName, nwNCPForgedPkts=nwNCPForgedPkts, nwUserFullName=nwUserFullName, nwFileSystem=nwFileSystem, nwFSMaxRecordLocks=nwFSMaxRecordLocks, nwUserAcctEntry=nwUserAcctEntry, nwSysOSDescription=nwSysOSDescription, nwFSVolEntry=nwFSVolEntry, nwQNumJobEntries=nwQNumJobEntries, nwSft3EngineState=nwSft3EngineState, nwSetDescrParamIndex=nwSetDescrParamIndex, nwQAddJobState=nwQAddJobState, nwSysOSCopyright=nwSysOSCopyright, nwQID=nwQID, nwSft3EngineName=nwSft3EngineName, nwNCPNoAvailConns=nwNCPNoAvailConns, TransportAddress=TransportAddress, nwSysInternalNetNum=nwSysInternalNetNum, nwOdiOsMinPktRcvBuffers=nwOdiOsMinPktRcvBuffers, nwOfileName=nwOfileName, nwUserAccounts=nwUserAccounts, nwConnectionNcpRequests=nwConnectionNcpRequests, nwSysTime=nwSysTime, nwVolFileSystemName=nwVolFileSystemName, nwVolSize=nwVolSize, nwServer=nwServer, nwSysDaylightSavingsOffset=nwSysDaylightSavingsOffset, nwQServerName=nwQServerName, nwSetParamUpperLimit=nwSetParamUpperLimit, nwLoginCount=nwLoginCount, nwQJobSize=nwQJobSize, nwConnectionTransportDomain=nwConnectionTransportDomain, nwQueueEntry=nwQueueEntry, nwQServerQID=nwQServerQID, nwNCPInvalidPacketSigs=nwNCPInvalidPacketSigs, nwFSOpenFiles=nwFSOpenFiles, nwSft3=nwSft3, nwQName=nwQName, nwSetParamValueInteger=nwSetParamValueInteger, nwSetParamMode=nwSetParamMode, nwOdiLslEnqSendCount=nwOdiLslEnqSendCount, nwUserVolUserID=nwUserVolUserID, nwFSVolCount=nwFSVolCount, nwSft3Engine=nwSft3Engine, nwNCPUseCount=nwNCPUseCount, nwQType=nwQType, nwConnectionTime=nwConnectionTime, nwSetParamEntry=nwSetParamEntry, nwQueueCount=nwQueueCount, nwSysNMACopiesAllowed=nwSysNMACopiesAllowed, nwVolUsageUserID=nwVolUsageUserID, nwNCP=nwNCP, nwVolUsageUser=nwVolUsageUser, nwQJobQID=nwQJobQID, nwWDNotifyConsoleFlag=nwWDNotifyConsoleFlag, nwUserBadLoginTransport=nwUserBadLoginTransport, nwVolUsageTable=nwVolUsageTable, nwConnectionPrivilege=nwConnectionPrivilege, nwQServiceJobState=nwQServiceJobState, nwUserBadLoginAddress=nwUserBadLoginAddress, nwSetDescrIndex=nwSetDescrIndex, nwOfileLoginName=nwOfileLoginName, nwConnectionCount=nwConnectionCount, nwOfileVolID=nwOfileVolID, nwOdi=nwOdi, nwVolUsageEntry=nwVolUsageEntry, nwSetParamDescrLength=nwSetParamDescrLength, nwQAttachState=nwQAttachState, nwNCPNumNCPReqs=nwNCPNumNCPReqs, nwUserLastLoginTime=nwUserLastLoginTime, nwSft3EngineInternalNetNum=nwSft3EngineInternalNetNum, nwNCPIPXChecksums=nwNCPIPXChecksums, nwVolSegmentCount=nwVolSegmentCount, nwSysLanguageID=nwSysLanguageID, nwFSRecordLocks=nwFSRecordLocks, nwVolUsedDirEntries=nwVolUsedDirEntries, nwNCPPacketSignatures=nwNCPPacketSignatures, nwSysDirectoryTree=nwSysDirectoryTree, nwFSOpenFileTable=nwFSOpenFileTable, nwWDNumPktsToSend=nwWDNumPktsToSend, nwVolUsageSpaceUsed=nwVolUsageSpaceUsed, nwSysDaylightSavingsStatus=nwSysDaylightSavingsStatus, nwWDCurrentState=nwWDCurrentState, EngineType=EngineType, nwSysOSReleaseDate=nwSysOSReleaseDate, nwFSMaxOpenFiles=nwFSMaxOpenFiles, TransportDomain=TransportDomain, nwNLMName=nwNLMName, nwConnectionReadKBytes=nwConnectionReadKBytes, nwQueueServerEntry=nwQueueServerEntry, nwConnectionTable=nwConnectionTable, nwNLMMinorVer=nwNLMMinorVer, nwUserVolUsageLimit=nwUserVolUsageLimit, nwFSCacheChecks=nwFSCacheChecks, nwNLMDescription=nwNLMDescription, nwVolUsageVolID=nwVolUsageVolID, nwSysSerialNumber=nwSysSerialNumber, nwVolFree=nwVolFree, nwNLMTotalMemory=nwNLMTotalMemory, nwUserPasswordStatus=nwUserPasswordStatus, nwConnectionEntry=nwConnectionEntry, nwSetParamName=nwSetParamName, nwSft3EngineType=nwSft3EngineType, nwSetParamType=nwSetParamType, nwUserVolUsageUser=nwUserVolUsageUser, nwUserVolUsageSpaceUsed=nwUserVolUsageSpaceUsed, nwUserID=nwUserID, nwVolTotalDirEntries=nwVolTotalDirEntries, nwFSOpenFileEntry=nwFSOpenFileEntry, nwUserName=nwUserName, nwQJobTargetDateTime=nwQJobTargetDateTime, nwNLMTable=nwNLMTable, nwWatchdog=nwWatchdog, nwSysServerDSName=nwSysServerDSName, nwConnectionTransportAddress=nwConnectionTransportAddress, nwQJobControlFlags=nwQJobControlFlags, nwNLMReleaseDate=nwNLMReleaseDate, nwUserVolUsageTable=nwUserVolUsageTable, nwQJobUserName=nwQJobUserName, nwUserCount=nwUserCount, nwQDirVolName=nwQDirVolName, nwNCPPeakUseCount=nwNCPPeakUseCount, nwSetCategoryName=nwSetCategoryName, nwSetCategoryIndex=nwSetCategoryIndex, nwConnectionLoginName=nwConnectionLoginName, DSTType=DSTType, novell=novell, nwQJobTargetServerName=nwQJobTargetServerName, nwSetCategoryEntry=nwSetCategoryEntry, nwSetDescription=nwSetDescription, nwSysDaylightSavingsEnd=nwSysDaylightSavingsEnd, nwUserAcctTable=nwUserAcctTable, nwSysOSSFTLevel=nwSysOSSFTLevel, nwQServerStatus=nwQServerStatus, nwSetParamTable=nwSetParamTable, nwUserVolUsageVolume=nwUserVolUsageVolume, nwSysBinderyContext=nwSysBinderyContext, nwNLMRevision=nwNLMRevision, nwVolID=nwVolID, nwWDTimeBeforeFirstPkt=nwWDTimeBeforeFirstPkt, nwVolMounted=nwVolMounted, nwQueueServerTable=nwQueueServerTable, nwSetDescrCategoryIndex=nwSetDescrCategoryIndex, nwSetParamIndex=nwSetParamIndex, nwVolUsageVolume=nwVolUsageVolume, nwSysServerUpTime=nwSysServerUpTime, nwMaxConnections=nwMaxConnections, nwConnectionFilesOpen=nwConnectionFilesOpen, nwFSCacheHits=nwFSCacheHits, nwSetCategoryTable=nwSetCategoryTable, nwFSWrittenKBytes=nwFSWrittenKBytes, nwSft3EngineTable=nwSft3EngineTable, nwNCPIPXChecksumErrs=nwNCPIPXChecksumErrs, nwSetParams=nwSetParams, nwVolFreeable=nwVolFreeable, nwVolBlockSize=nwVolBlockSize, nwConnectionWrittenKBytes=nwConnectionWrittenKBytes, nwFSVolTable=nwFSVolTable, nwQueueJobTable=nwQueueJobTable, nwNLMProtectionDomain=nwNLMProtectionDomain, nwOfileConnection=nwOfileConnection, nwOdiOsMaxPktRcvBuffers=nwOdiOsMaxPktRcvBuffers, nwSysTimeZone=nwSysTimeZone, nwFSMaxSubdirectoryTreeDepth=nwFSMaxSubdirectoryTreeDepth, nwSft3EngineEntry=nwSft3EngineEntry, nwSetParamCategoryIndex=nwSetParamCategoryIndex, nwFSReads=nwFSReads, nwQJobPosition=nwQJobPosition, nwVolUsageLimit=nwVolUsageLimit, nwQueueJobEntry=nwQueueJobEntry, nwNLMMajorVer=nwNLMMajorVer, nwNLMCopyright=nwNLMCopyright, nwOdiOsPktRcvBuffer=nwOdiOsPktRcvBuffer, nwPeakRemoteConnections=nwPeakRemoteConnections, nwUserBadLoginAttempts=nwUserBadLoginAttempts, nwQJobEntryDateTime=nwQJobEntryDateTime, nwNLMEntry=nwNLMEntry, nwQNumAssignedServers=nwQNumAssignedServers, nwQueue=nwQueue, nwQJobNumber=nwQJobNumber, nwSetDescrEntry=nwSetDescrEntry, nwUserVolVolID=nwUserVolVolID, nwSysServerName=nwSysServerName, IPXNetNumber=IPXNetNumber, nwUserVolUsageEntry=nwUserVolUsageEntry, nwOfileDirectoryNumber=nwOfileDirectoryNumber, nwNLMIndex=nwNLMIndex, nwSetDescrTable=nwSetDescrTable, nwSysNMASerialNumber=nwSysNMASerialNumber, nwNCPBeingProcesseds=nwNCPBeingProcesseds, nwFSWrites=nwFSWrites, nwVolNameSpaces=nwVolNameSpaces, Seconds=Seconds, nwQServerID=nwQServerID, nwUserDiskUsage=nwUserDiskUsage, nwUsers=nwUsers, nwVolFileSystemID=nwVolFileSystemID, nwQJobServerName=nwQJobServerName, nwConnectionNumber=nwConnectionNumber, nwNCPExtInvalidReqs=nwNCPExtInvalidReqs, nwSysDaylightSavingsStart=nwSysDaylightSavingsStart, nwFSReadKBytes=nwFSReadKBytes, nwNCPExtNumReg=nwNCPExtNumReg, nwVolDSName=nwVolDSName, nwSysOSMajorVer=nwSysOSMajorVer, nwMaxLogins=nwMaxLogins)
