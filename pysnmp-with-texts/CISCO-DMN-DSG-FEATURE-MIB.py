#
# PySNMP MIB module CISCO-DMN-DSG-FEATURE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DMN-DSG-FEATURE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:54:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ciscoDSGUtilities, = mibBuilder.importSymbols("CISCO-DMN-DSG-ROOT-MIB", "ciscoDSGUtilities")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, NotificationType, ModuleIdentity, MibIdentifier, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, Counter64, iso, Counter32, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "ModuleIdentity", "MibIdentifier", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "Counter64", "iso", "Counter32", "TimeTicks", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoDSGFeature = ModuleIdentity((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 27))
ciscoDSGFeature.setRevisions(('2012-02-28 18:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDSGFeature.setRevisionsDescriptions(('V01.00.00 2012-02-28 Initial Version.',))
if mibBuilder.loadTexts: ciscoDSGFeature.setLastUpdated('201202281800Z')
if mibBuilder.loadTexts: ciscoDSGFeature.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoDSGFeature.setContactInfo('Cisco Systems, Inc. Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 NETS E-mail: cs-ipsla@cisco.com')
if mibBuilder.loadTexts: ciscoDSGFeature.setDescription('Cisco DSG Feature MIB.')
featureTable = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 27, 2))
featureLicenceTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 27, 2, 1), )
if mibBuilder.loadTexts: featureLicenceTable.setStatus('current')
if mibBuilder.loadTexts: featureLicenceTable.setDescription('Licence status.')
featureLicenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 27, 2, 1, 1), ).setIndexNames((0, "CISCO-DMN-DSG-FEATURE-MIB", "featureLicenceIdx"))
if mibBuilder.loadTexts: featureLicenceEntry.setStatus('current')
if mibBuilder.loadTexts: featureLicenceEntry.setDescription('Entry for licence status.')
featureLicenceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 27, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: featureLicenceIdx.setStatus('current')
if mibBuilder.loadTexts: featureLicenceIdx.setDescription('Index of Licence table.')
featureLicenceID = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 27, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureLicenceID.setStatus('current')
if mibBuilder.loadTexts: featureLicenceID.setDescription('The identification of features that require a licence.')
featureLicenceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 27, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureLicenceStatus.setStatus('current')
if mibBuilder.loadTexts: featureLicenceStatus.setDescription('The status of licence.')
installedOptionTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 27, 2, 2), )
if mibBuilder.loadTexts: installedOptionTable.setStatus('current')
if mibBuilder.loadTexts: installedOptionTable.setDescription('Status of installed option.')
installedOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 27, 2, 2, 1), ).setIndexNames((0, "CISCO-DMN-DSG-FEATURE-MIB", "installedOptionIdx"))
if mibBuilder.loadTexts: installedOptionEntry.setStatus('current')
if mibBuilder.loadTexts: installedOptionEntry.setDescription('Entry for installed options')
installedOptionIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 27, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: installedOptionIdx.setStatus('current')
if mibBuilder.loadTexts: installedOptionIdx.setDescription('Index of installed option table.')
installedOptionID = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 27, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: installedOptionID.setStatus('current')
if mibBuilder.loadTexts: installedOptionID.setDescription('The identification of optional component.')
installedOptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 27, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: installedOptionStatus.setStatus('current')
if mibBuilder.loadTexts: installedOptionStatus.setDescription('The status of optional component.')
mibBuilder.exportSymbols("CISCO-DMN-DSG-FEATURE-MIB", featureLicenceStatus=featureLicenceStatus, installedOptionTable=installedOptionTable, PYSNMP_MODULE_ID=ciscoDSGFeature, installedOptionIdx=installedOptionIdx, featureLicenceTable=featureLicenceTable, featureLicenceEntry=featureLicenceEntry, installedOptionID=installedOptionID, installedOptionEntry=installedOptionEntry, featureTable=featureTable, installedOptionStatus=installedOptionStatus, featureLicenceID=featureLicenceID, ciscoDSGFeature=ciscoDSGFeature, featureLicenceIdx=featureLicenceIdx)
