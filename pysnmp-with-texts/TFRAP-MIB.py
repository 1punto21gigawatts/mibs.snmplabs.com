#
# PySNMP MIB module TFRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TFRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:16:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Integer32, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, internet, NotificationType, MibIdentifier, TimeTicks, IpAddress, ObjectIdentity, Counter32, Unsigned32, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "internet", "NotificationType", "MibIdentifier", "TimeTicks", "IpAddress", "ObjectIdentity", "Counter32", "Unsigned32", "iso", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
sync = MibIdentifier((1, 3, 6, 1, 4, 1, 485))
tfrap = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5))
tfrapSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 1))
tfrapSysTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 1, 1))
tfrapSysType = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysType.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysType.setDescription('A textual description of the system model identifier. for example: SYNC-TFRAP')
tfrapSysSoftRev = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysSoftRev.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysSoftRev.setDescription('Displays the Software Revision of the application code installed in this node.')
tfrapSysHardRev = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysHardRev.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysHardRev.setDescription('Displays the Hardware Revision of the node.')
tfrapSysNumT1Installed = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysNumT1Installed.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysNumT1Installed.setDescription('The number of Wide Area Network (T1) ports that are installed. There is 1 on the TFRAP.')
tfrapSysNumDteInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysNumDteInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysNumDteInstalled.setDescription('The number of user serial date channels (DTE) that are installed. There is 1 on the TFRAP.')
tfrapSysNumMaintInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysNumMaintInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysNumMaintInstalled.setDescription('The number of Async Maintenance/Comm (console) ports that are installed. There is 1 dual-purpose comm port on the TFRAP which may configured as either a VT-100 console or a SLIP management port.')
tfrapSysName = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapSysName.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysName.setDescription('The user supplied name of the node. This object does not affect operation, but may be useful for network management.')
tfrapSysSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysSerialNo.setDescription('The serial number of the board.')
tfrapSysResetNode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(321))).clone(namedValues=NamedValues(("reset-node", 321)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapSysResetNode.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysResetNode.setDescription('Command to reset the node. NODE WILL BE OFF-LINE AND USER DATA WILL BE INTERRUPTED FOR APPROXIMATELY 15 SECONDS. Full network recovery may take longer ')
tfrapSysAmtMemoryInstalled = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysAmtMemoryInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysAmtMemoryInstalled.setDescription('The amount of memory (RAM) installed (in megabytes).')
tfrapSysLocation = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapSysLocation.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysLocation.setDescription('The user supplied location of the node. This object does not affect operation, but may be useful for network management.')
tfrapSysContact = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapSysContact.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysContact.setDescription('The user supplied contact information for the node. This object does not affect operation, but may be useful for network management.')
tfrapSysPrompt = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapSysPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysPrompt.setDescription('Configurable Command Line Interface (CLI) prompt. CLI is the User Interface protocol used for directly attached VT100 terminal access and for remote access via Telnet.')
tfrapSysBootRev = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysBootRev.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysBootRev.setDescription('Displays the Software Revision of the Bootstrapping code installed in this node.')
tfrapSysFeatureTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 1, 2))
tfrapSysSLIPSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysSLIPSupported.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysSLIPSupported.setDescription('Shows whether the unit has SLIP (Serial Line IP) capability. SLIP is a method for out-of-band management that connects through the asynchronous terminal port.')
tfrapSysPPPSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysPPPSupported.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysPPPSupported.setDescription('Shows whether the unit has PPP (Point to Point protocol) capability. PPP is a method for out-of-band management that connects through the asynchronous terminal port.')
tfrapSysRDOSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysRDOSupported.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysRDOSupported.setDescription('Shows whether the unit has Remote Dial Out capability.')
tfrapSysETHSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysETHSupported.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysETHSupported.setDescription('Shows whether the unit has Ethernet capability.')
tfrapSysTKRSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysTKRSupported.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysTKRSupported.setDescription('Shows whether the unit has Token Ring capability.')
tfrapSysExtTimSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysExtTimSupported.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysExtTimSupported.setDescription('Shows whether the unit has External Timing capability. This is the ability to derive WAN timing from the DTE port.')
tfrapSysBRISupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysBRISupported.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysBRISupported.setDescription('Shows whether the unit has BRI (ISDN Basic Rate) capability.')
tfrapSysSelDTESupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysSelDTESupported.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysSelDTESupported.setDescription('Shows whether the unit has a Selectable DTE interface. This being the ability to select amongst various electrical interface formats (V.35, RS449, RS232, etc.) via software.')
tfrapSysMLSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysMLSupported.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysMLSupported.setDescription('Shows whether the unit supports MLs (out-of-band management links). N/A to frame relay networks.')
tfrapSysNumDlcisSupported = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysNumDlcisSupported.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysNumDlcisSupported.setDescription('Shows how many DLCIs can be monitored for frame-based statistics. The unit will pass an unlimited number of DLCIs but will only collect statistics on this number (first come first served).')
tfrapSysLTFNumDlcis = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysLTFNumDlcis.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysLTFNumDlcis.setDescription('Shows how many DLCIs can be specified in the Long Term Statistics Filter.')
tfrapSysLTFNumProtocols = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysLTFNumProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysLTFNumProtocols.setDescription('Shows how many protocols can be specified in the Long Term Statistics Filter.')
tfrapSysNumUserProtocols = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysNumUserProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysNumUserProtocols.setDescription('Shows how many protocols can be defined by the user. The user configures TCP/UDP ports which can be monitored as protocols. They are available for short term or long term statistics monitoring.')
tfrapSysNumSnmpMgrs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysNumSnmpMgrs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysNumSnmpMgrs.setDescription('Shows how many SNMP managers can be programmed in the table tfrapCfgSnmpMngrTable. These managers are sent TRAPs if configured to do so.')
tfrapSysNumDlciNames = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapSysNumDlciNames.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapSysNumDlciNames.setDescription('Shows how many DLCI names can be defined by the user in the table tfrapCfgFrPerfDlciNamesTable.')
tfrapConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2))
tfrapCfgMgmtTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 1))
tfrapCfgIpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 1))
tfrapCfgIpMyIP = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgIpMyIP.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgIpMyIP.setDescription('The IP address for this node. This address will be unique to the IP network and is required for in-band or out-of-band ip and SNMP management.')
tfrapCfgIpPeerIP = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgIpPeerIP.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgIpPeerIP.setDescription('This parameter is not used internally by the unit. It is intended to identify either the device directly connected to the SLIP port or, in Frame Relay applications, the address of the primary network management station. This should always be non-zero.')
tfrapCfgIpMask = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgIpMask.setDescription('The IP Subnet Mask (eg 255.255.255.0). This parameter should be consisent with the IP subnet address setting of the external internetworking equipment (router/frad).')
tfrapCfgIpMaxMTU = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgIpMaxMTU.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgIpMaxMTU.setDescription('The Maximum Transmission Unit is the size of the largest IP packet supported (including header). This value should be set to the lowest value supported by any equipment in the transmission path. For Frame Relay management the typical value is 1500. For SLIP management the typical value is 1006.')
tfrapCfgIpChannel = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("slip-port", 2), ("in-band-dlci", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgIpChannel.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgIpChannel.setDescription('This is the method by which IP traffic is being carried. Either via the SLIP port or a DLCI. This reflects how your Management scheme is configured (read only).')
tfrapCfgIpTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-telnet", 1), ("disable-telnet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgIpTelnetEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgIpTelnetEnable.setDescription('Enables/Disables the telnet feature. (1) enable-telnet (2) disable-telnet')
tfrapCfgIpTelnetAutoLogOut = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 10, 30, 60))).clone(namedValues=NamedValues(("autologout-at-15-minutes", 1), ("disable-autologout", 2), ("autologout-at-3-minutes", 3), ("autologout-at-5-minutes", 5), ("autologout-at-10-minutes", 10), ("autologout-at-30-minutes", 30), ("autologout-at-60-minutes", 60)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgIpTelnetAutoLogOut.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgIpTelnetAutoLogOut.setDescription('If Telnet Auto logout is enabled the unit will automatically disconnect from a Telnet session after a period of inactivity (absence of key strokes from remote terminal). (2) disables this feature (1) auto logout after 15 minutes inactivity (3) auto logout after 3 minutes inactivity (5) auto logout after 5 minutes inactivity (10) auto logout after 10 minutes inactivity (30) auto logout after 30 minutes inactivity (60) auto logout after 60 minutes inactivity')
tfrapCfgTftpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 2))
tfrapCfgTftpInitiate = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgTftpInitiate.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTftpInitiate.setDescription('Setting this object to a value that matches the TFTP Password will command the unit to attempt a TFTP file transfer. A TFTP profile including host ip address, dlci value, interface, and file name must first be configured.')
tfrapCfgTftpIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTftpIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTftpIpAddress.setDescription('The IP address of the TFTP host with which the unit will attempt to establish a TFTP session when initiated.')
tfrapCfgTftpFilename = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTftpFilename.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTftpFilename.setDescription('The name of the file located on the TFTP host that will be transferred to the unit. Typically this is a product-specific software image that will be programmed into unit FLASH. The unit provides several levels of checking to verify the validity and integrity of this file. Note - depending upon the host, this file name may be case sensitive.')
tfrapCfgTftpInterface = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2), ("slip-interface", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTftpInterface.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTftpInterface.setDescription('The physical interface out which the TFTP host is located. This parameter is only required for Piggyback and Bi-directional in-band frame relay managed applications. With Local and Remote in-band and SLIP-based applications the interface is known and Sets to this will be ignored.')
tfrapCfgTftpDlci = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63487))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTftpDlci.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTftpDlci.setDescription('The local DLCI value on which the TFTP host can be reached. This DLCI should be active prior to initiating the TFTP session. This parameter is only required for Piggyback in-band frame relay managed applications. With Private management (Local, Remote or Bi-directional in-band applications) the DLCI is known and will be reported here (Sets will be ignored). In SLIP-based applications the DLCI value is not applicable and a value of -1 is reported (Sets will be ignored).')
tfrapCfgTftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("inactive", 1), ("requested", 2), ("transferring", 3), ("programming", 4), ("transfer-aborted", 5), ("host-no-reply", 6), ("file-not-found", 7), ("invalid-file", 8), ("corrupt-file", 9), ("successful", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTftpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTftpStatus.setDescription('The status of current or most recent TFTP operation. (1) TFTP inactive, sets to this value will abort the session (2) TFTP requested (3) TFTP transferring (4) TFTP programming FLASH - unit will reset (5) TFTP fail: session aborted by user or error condition (6) TFTP fail: host no reply - verify TFTP profile and host (7) TFTP fail: file not found - verify file name and location (8) TFTP fail: invalid file - file rejected by unit as inappropriate (9) TFTP fail: corrupt file - session terminated due to checksum error (10) TFTP transfer successful and file has been verified')
tfrapCfgTftpNumBytes = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgTftpNumBytes.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTftpNumBytes.setDescription("The number of Bytes from the ROM image that have been TFTP'd to the unit")
tfrapCfgSnmpTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3))
tfrapCfgSnmpFrTrap = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgSnmpFrTrap.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgSnmpFrTrap.setDescription('Controls whether or not the Frame Relay DLCI status change traps are issued. These traps are tfrapDLCIActiveTrap and tfrapDLCIInactiveTrap. (1) FR Trap enabled - a trap will be sent each time an individual DLCI changes status between active and inactive. (2) FR Trap disabled - DLCI state change traps are not sent.')
tfrapCfgSnmpTrapMuting = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgSnmpTrapMuting.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgSnmpTrapMuting.setDescription('Controls whether Traps are Sent or Muted. If traps are Muted then a single trap (#75) will be periodically issued by the unit at the programmed frequency. If Muting is Disabled then the full set of Trap events are reported accordingly. (0) Disable Trap Muting (30-10080) Trap Muting frequency in minutes.')
tfrapCfgSnmpUtilTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgSnmpUtilTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgSnmpUtilTrapEnable.setDescription('Enables or disables the sending of per-DLCI utilization traps. (1) enable utilization traps (2) disable utilization traps ')
tfrapCfgSnmpMgrClearN = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgSnmpMgrClearN.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgSnmpMgrClearN.setDescription(' Deletes the number of entries in the tfrapCfgSnmpMgrTable indicated by the value. If the value is a positive number the entries will be deleted starting from the first entry. If the value is negative the entries will be deleted starting from the last entry. ')
tfrapCfgSnmpMgrTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 2), )
if mibBuilder.loadTexts: tfrapCfgSnmpMgrTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgSnmpMgrTable.setDescription("The table of SNMP manager profiles to which traps are sent. In all managed modes an SNMP trap mangager's ip address is required as a minimum. Additionally for Piggyback managed units the DLCI and interface must also be configured appropriately. For Local, Remote and SLIP-based management, the DLCI and interface are implied and need not be configured as part of this profile.")
tfrapCfgSnmpMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 2, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapCfgSnmpMgrIndex"))
if mibBuilder.loadTexts: tfrapCfgSnmpMgrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgSnmpMgrEntry.setDescription('The SNMP trap manager profiles to which the unit sends TRAPs.')
tfrapCfgSnmpMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgSnmpMgrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgSnmpMgrIndex.setDescription('The index to the list of SNMP managers receiving TRAPs.')
tfrapCfgSnmpMgrIP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgSnmpMgrIP.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgSnmpMgrIP.setDescription("The IP address of a SNMP manager to receive this node's TRAPs. Setting this value to 0.0.0.0 will disable the issuance of traps to the indexed manager.")
tfrapCfgSnmpMgrInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2), ("slip-interface", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgSnmpMgrInterface.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgSnmpMgrInterface.setDescription('The interface out which the indexed trap manager can be reached. This entry is required in Piggyback and Bi-directional in-band managed applications. In Local, Remote and SLIP-based applications, the interface is known and this parameter is ignored. (1) Traps sent out DTE interface for this manager (2) Traps sent out T1 interface for this manager (3) Traps sent out SLIP interface (async maint port) When the node is configured for SLIP, a GET on this MIB object will return slip-interface(3) and a SET of this MIB object to slip-interface(3) is allowed but unnecessary. When the node is not configured for SLIP, this MIB object can be SET to dte-interface(1) or t1-interface(2); slip-interface(3) would be rejected.')
tfrapCfgSnmpMgrDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgSnmpMgrDlci.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgSnmpMgrDlci.setDescription('The DLCI out which the indexed trap manager can be reached. This entry is required in Piggyback in-band managed applications. In Private in-band applications the DLCI is known and Sets to this parameter will be ignored. In SLIP mode the DLCI is not applicable, Sets will be ignored and a -1 will be returned as the DLCI value.')
tfrapCfgCommTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 4))
tfrapCfgCommMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vt100", 1), ("slip", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgCommMode.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgCommMode.setDescription("The protocol running on the Maintenance/Comm port (console). Setting this to SLIP mode will automatically disable in-band management if it's enabled. (1) VT100 for directly attached async terminal (2) SLIP - Serial Line IP out-of-band management")
tfrapCfgCommBaud = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 5, 6))).clone(namedValues=NamedValues(("baud-2400", 2), ("baud-9600", 4), ("baud-19200", 5), ("baud-38400", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgCommBaud.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgCommBaud.setDescription('Asynchronous baud rate for the Maintenance/Comm port (Console). This must be configured to match either the VT100 compatible terminal, MODEM support or the SLIP Terminal Server depending upon the Comm port mode. (2) baud-2400 (4) baud-9600 (5) baud-19200 (6) baud-38400')
tfrapCfgCommDataBits = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgCommDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgCommDataBits.setDescription('Asynchronous data format for the Maintenance/Comm port (Console). This must be configured to match either the VT100 compatible terminal or the SLIP Terminal Server depending upon the Comm port mode. (1) 7 databits per character (2) 8 databits per character')
tfrapCfgCommStopBits = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-1-5", 2), ("stopbits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgCommStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgCommStopBits.setDescription('Asynchronous intercharacter protocol for the Maintenance/Comm port (Console). This must be configured to match either the VT100 compatible terminal or the SLIP Terminal Server depending upon the Comm port mode. (1) 1 stopbit (2) 1.5 stopbits (3) 3 stopbits')
tfrapCfgCommParity = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-parity", 1), ("odd-parity", 2), ("even-parity", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgCommParity.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgCommParity.setDescription('Asynchronous parity checking protocol for the Maintenance/Comm port (Console). This must be configured to match either the VT100 compatible terminal or the SLIP Terminal Server depending upon the Comm port mode. (1) no parity (2) odd-parity (3) even-parity')
tfrapCfgCommFlowCtrl = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("no-flow-control", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgCommFlowCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgCommFlowCtrl.setDescription('Flow Control for this Communication port. Values are no-flow-control (1).')
tfrapCfgFrDLCITable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 5))
tfrapCfgFrDLCIMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inactive", 1), ("local", 2), ("remote", 3), ("bidirectional", 4), ("piggyback", 5), ("fixedDCE", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrDLCIMode.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrDLCIMode.setDescription('In-band Frame Relay management mode. A variety of options exist which are differentiated by how PVCs can be provisioned to manage the unit and the resulting impact to the logical processing of Link Management Protocol messages (LMI spoofing and sourcing). The unit is designed to support these management modes even in non-provisioned or failed frame relay networks. This setting also has implications upon how networking protocols such as ARP and InARP are handled by the unit. (1) inactive: in-band management is not enabled (2) local DLCI mode: in-band managed using a private dedicated DLCI accessible via the DTE port only. A DLCI value is configured which, through LMI spoofing, will only be visible to the DTE equipment and need not be provisioned on the WAN. All traffic on this DLCI will be terminated by the unit. (3) remote DLCI mode: in-band managed using a private dedicated DLCI accessible via the WAN port only. A DLCI value is configured which, through LMI spoofing, will only be visible from the WAN side and will not be seen by any DTE equipment. All traffic on this DLCI will be terminated by the unit. (4) bidirectional mode: in-band managed using a private dedicated DLCI accessible through either port. A DLCI value is configured which is expected to be fully provisioned in the frame relay network but dedicated to the management function of this particular unit. All traffic on this DLCI will be terminated by the unit. (5) piggyback mode: in-band managed using any DLCI on any interface. A DLCI value is defined that becomes the default DLCI that will be maintained by the unit during network or LMI failure conditions. The unit will terminate and respond accordingly to management and networking data while transparently passing on user data. (6) fixed DCE mode: special mode of operation to support frame relay applications that do not include a switch (frame relay DCE). The unit will independently respond to LMI requests on each interface and will provision the configured DLCI to each Frame Relay DTE device. Except for this, the unit behaves like piggyback.')
tfrapCfgFrDLCIValue = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 63487))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrDLCIValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrDLCIValue.setDescription('If in-band management is being used this DLCI value should be defined. In all modes of in-band management with the LMI Sourcing feature enabled the unit may provision this DLCI during LMI failure to facilitate management access. In Private modes (Local, Remote, and Bidirectional) this is the dedicated DLCI for management data and address resolution protocols - all other traffic on this DLCI will be discarded. In Piggyback mode this DLCI is treated like all others except during LMI failure sourcing when it may be provisioned by the unit. In Piggyback mode if InARP is enabled on a single DLCI then this value defines that DLCI.')
tfrapCfgFrDLCIEncap = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rfc1490", 1), ("rfc1490snap", 2), ("auto", 3), ("cisco", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrDLCIEncap.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrDLCIEncap.setDescription('This is the protocol used for enacapsulating and formatting ip data for Frame Relay transmission. This setting is specific to management data to and from the unit. (1) RFC1490 - per IETF standard with Network Level Protocol ID (NLPID) set for IP encapsulation. (2) RFC1490 SNAP/IP - per IETF standard with NLPID set for Sub-Network Access Protocol (SNAP). (3) auto - adjusts to either of these encapsulation techniques as required. (4) Cisco - proprietary encapsulation (4-byte header).')
tfrapCfgFrDLCIMgmtDE = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-DE-bit-0", 1), ("yes-DE-bit-1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrDLCIMgmtDE.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrDLCIMgmtDE.setDescription('Provides user control over the state of the Frame Relay Discard Eligibility bit of all management frames generated by the unit. Frames marked DE=1 are more likely to be dropped in a congested Frame Relay network than those that are DE=0. Heavily congested circumstances can cause both to be dropped. Additionally, frames marked DE=0 may get re-marked to DE=1 by intervening equipment. (1) DE bit cleared to 0: frame is not discard eligible (2) DE bit set to 1: frame is discard eligible')
tfrapCfgAppTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 2))
tfrapCfgAppClockSource = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("network", 2), ("dte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgAppClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgAppClockSource.setDescription('Timing source for transmission of data towards the WAN and for the generation of DTE clocking. There should be only one source per end-to-end WAN link. Unit is typically network timed in a point-to-network application. (1) internal: derive timing from a high-stability on-board crystal oscillator. (2) network: or Loop timing, derive timing from the signal received at the WAN interface (3) dte: derive timing from the clock presented by the DTE equipment on the Terminal Timing(TT)/Transmit Clock External (TCE) leads. This setting expects the DTE timing mode to be Loop 1 and the DTE device to be generating a clock at the DTE data rate.')
tfrapCfgAppCircuitId = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgAppCircuitId.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgAppCircuitId.setDescription('Alphanumeric circuit identifier may be provided by the service provider for reference or assigned arbitrarily per user requirements.')
tfrapCfgAppType = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dedicated", 1), ("frame-relay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgAppType.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgAppType.setDescription('This unit provides many features specifically adapted to Frame Relay transmission links; this includes diagnostic utilities, statistical analysis, protocol trends, quality of service reporting, and in-band SNMP management. If the unit will be operating in a Frame Relay network the Application Type must be set to Frame Relay to enable these features. To operate in a non-Frame Relay network or to bypass this feature set the unit may be placed in Dedicated mode and will emulate a more familiar DSU/CSU. Note - changing this value will automatically change the Application Format setting and vice versa. (1) dedicated: protocol-independent transparent DSU/CSU (2) Frame Relay: Frame and protocol aware DSU/CSU')
tfrapCfgAppFormat = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cbo", 1), ("hdlc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgAppFormat.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgAppFormat.setDescription('Refer to Application Type. Frame Relay is based upon HDLC framing. To operate in a Frame Relay application the Format must be set for HDLC. To operate in a protocol-independent application the Format must be set for Constant Bit Operation (CBO). Note - changing this value will automatically change the Application Type setting and vice versa (1) CBO: protocol-independent transparent DSU/CSU (2) HDLC: Frame and protocol aware DSU/CSU')
tfrapCfgAppLpbkTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgAppLpbkTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgAppLpbkTimeout.setDescription('The length of time a service-impacting loopback or diagnostic utility may run before automatically returning to normal operation. This setting will override any alternatively timed tests (such as VBERT). (0) Loopbak Timeout Disabled (1-1440) Loopback Timeout')
tfrapCfgAppPerfBuffLimit = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgAppPerfBuffLimit.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgAppPerfBuffLimit.setDescription('This value controls the throttling mechanism used to determine the optimum level of statistical processing versus manageability of the unit. The lower the value (1 - 128), the unit becomes more responsive to management commands during very heavy utilization at the possible expense of statistical accuracy. The larger the value (129 - 512), the more accurate the TFRAP performs statistical analysis of the frames but management may seem slow or unresponsive during periods of very heavy link utilization. NOTE: A value of 0 disables statistical processing entirely.')
tfrapCfgT1Table = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 3))
tfrapCfgT1Framing = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("d4", 1), ("esf-54016", 2), ("esf-ansi", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgT1Framing.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgT1Framing.setDescription('Type of Framing on this T1 Line. Check with your service provider to determine value. (1) D4 - also known as Superframe or SF. (2) ESF 54016 - Extended Superframe supporting the Facility Data Link per AT&T pub 54016. ESF provides enhanced performance monitoring capabilities over the FDL. (3) ESF ANSI - Extended SuperFrame supporting the Facility Data Link per ANSI T1.403 standard. ESF provides enhanced performance monitoring capabilities over the FDL.')
tfrapCfgT1LineEncoding = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgT1LineEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgT1LineEncoding.setDescription("T1 interface bipolar encoding scheme. Check with your service provider to determine value. B8ZS, which inherently provides ample 'ones-density', is recommended. AMI users must pay special attention to the 'ones-density' requirements of the service provider. (1) B8ZS - intercepts and encodes streams of 8 consecutive zeros and transmits them as a special pattern including Bipolar or Line Code Violations. Function not supported on certain networks. (2) AMI - Alternate Mark Inversion - sends the user data without introducing controlled BPVs.")
tfrapCfgT1Density = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-density", 1), ("twelve-half-percent", 2), ("one-in-16", 3), ("one-in-64", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgT1Density.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgT1Density.setDescription("CSU 'ones density' monitor. Defines the maximum number of consecutive zeros that can be transmitted to the WAN. If density monitoring is enabled, the composite signal is guaranteed to meet the selected density threshhold at the expense of user data. (1) No Density Monitoring - unit will transparently transmit user data without regard for ones density. Recommended for use in B8ZS applications, in nx56K applications where bit-7 stuffing is configured for DTE Channel Density, and when an external CSU is used. (2) 12.5% - unit will maintain a sliding window and will assure a minumum of 12.5% or an average of 1 in 8 ones. (3) 1 in 16 - unit will guarantee that no more than 15 consecutive zeros will be transmit to the WAN. (4) 1 in 64 - unit will guarantee that no more than 63 consecutive zeros will be transmit to the WAN.")
tfrapCfgT1Interface = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsx-1", 1), ("csu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgT1Interface.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgT1Interface.setDescription("Enables the unit's internal CSU functionality. Typical network access requires a CSU to condition the WAN signal, guard against network hazards, and provide access to service personnel for network maintenance. (1) Disables internal CSU and unit operates as a DSX-1 cross connect device. This should be the setting if the unit is cabled to an external CSU device providing network acces. CSU. (2) Enables internal CSU and corresponding feature set which includes density monitoring, line build-out pulse shaping, ESF facility data link, and certain diagnostic functions. This should be the seting if the unit is directly cabled to the service provider's equipment (such as a smart jack).")
tfrapCfgT1LboSetting = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("zero-db", 1), ("n7-5-db", 2), ("n15-db", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgT1LboSetting.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgT1LboSetting.setDescription('CSU Line Build Out (LBO). This feature provides selectable output signal strength. Consult service provider for proper setting. Signal may require attenuation to equalize it with neighboring equipment or under certain cabled access conditions. Not applicable if CSU functions are diabled (interface type = dsx-1) (1) 0dB - standard output signal (2) -7.5dB - standard output signal attenuated by 7.5dB (3) -15dB - standard output signal attenuated by 15 dB.')
tfrapCfgDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 4))
tfrapCfgDteIntfType = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("intf-v35", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgDteIntfType.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteIntfType.setDescription('The electrical interface for the DTE port (3) V.35 interface (4) RS-449 interface (not supported)')
tfrapCfgDteDataMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data-normal", 1), ("data-invert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteDataMode.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteDataMode.setDescription('Inverts the DTE data for transfer across the WAN. Can make some applications, particularly HDLC-based protocols, meet density requirements even across clear channel DS0s in AMI mode.')
tfrapCfgDteClockMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clock-normal", 1), ("clock-invert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteClockMode.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteClockMode.setDescription('This selection controls how the unit internally latches the transmit data from the DTE. Normal will sample data with the rising edge of the selected TX Clock, Invert will sample data with the falling edge of the selected TX Clock. The TX Clock is selected using CfgDteTiming. This clock invertion is most useful when loop-2 timing is used - particularly at higher rates and with long cable runs. Only in rare circumstances will clock-invert be used with loop-1 timing. If the DTE Interface TX statistics are indicating excessive crc errors or aborts then changing this setting may have some benefit. (1) normal (2) invert')
tfrapCfgDteTiming = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loop-1", 1), ("loop-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteTiming.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteTiming.setDescription('Serial DTE Transmit Timing mode. Loop-1 (1) uses the clock returned from the DTE (TT/TCE) to sample tx data, Loop-2 (2) uses the clock (ST/TC) generated by the node to sample tx data. Loop-1 is the preferred mode. Loop-2 timing could experience data errors at high rates or due to long DTE cable runs - may need to Invert the clock (see CfgDteClockMode). (1) Loop 1: external clock returned from DTE with data (2) Loop 2: internal clock used to sample incoming data')
tfrapCfgDteLineRate = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1536000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgDteLineRate.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteLineRate.setDescription('Serial DTE Data Rate in bits per second. Valid rates depend upon channel density selection: nX56K for bit-7-stuffing, and nX64K for clear-channel (n is an integer 1-24 inclusive). This read-only value is the value which was most recently set through CfgDteConnRate; in the event of a connection failure, this field should be examined along with CfgDteChannelDensity and CfgDteStartDso to determine the parameter mismatch that caused the connection failure.')
tfrapCfgDteChannelDensity = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(56, 64))).clone(namedValues=NamedValues(("bit-7-stuff", 56), ("clear-channel", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgDteChannelDensity.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteChannelDensity.setDescription("Packing of serial data into T1 DS0's. Bit-7-stuff supports DTE rates of nX56Kb/s (from 56K to 1344K) and provides sufficient ones-density on any circuit. Clear-channel allows DTE rates of nX64Kb/s (from 64K to 1.536M) and may require an additional means of density enforcement (eg, B8ZS). This read-only value is the value which was most recently set through CfgDteConnDensity; in the event of a connection failure, this field should be examined along with CfgDteLineRate and CfgDteStartDso to determine the parameter mismatch that caused the connection failure.")
tfrapCfgDteStartDs0 = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40, 41))).clone(namedValues=NamedValues(("ds0-01", 1), ("ds0-02", 2), ("ds0-03", 3), ("ds0-04", 4), ("ds0-05", 5), ("ds0-06", 6), ("ds0-07", 7), ("ds0-08", 8), ("ds0-09", 9), ("ds0-10", 10), ("ds0-11", 11), ("ds0-12", 12), ("ds0-13", 13), ("ds0-14", 14), ("ds0-15", 15), ("ds0-16", 16), ("ds0-17", 17), ("ds0-18", 18), ("ds0-19", 19), ("ds0-20", 20), ("ds0-21", 21), ("ds0-22", 22), ("ds0-23", 23), ("ds0-24", 24), ("no-current-connections", 40), ("non-continuous-ds0s", 41)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgDteStartDs0.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteStartDs0.setDescription("T1 WAN includes 24 DS0's available for user data. Each DS0 carries either 56Kbit/sec (bit-7-stuffing) or 64KBit/sec (clear-channel). This value is the starting DS0 used by the node to allocate DS0s to match the DTE's data rate. Sequential, contiguous DS0s are assigned as required. The number of DS0s required is based upon the DTE Data Rate and DTE Channel Mapping. This read-only value is the value which was most recently set through DteCfgConnStartDs0; in the event of a connection failure, this field should be examined along with CfgDteLineRate and CfgDteChanelDensity to determine the parameter mismatch that caused the connection failure.")
tfrapCfgDteConnStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("connections-valid", 1), ("no-current-connections", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgDteConnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteConnStatus.setDescription('The current status of the WAN to DTE mappings. (1) connections valid and DS0s allocated to DTE data. (4) no connections configured between WAN and DTE.')
tfrapCfgDteConnStartDs0 = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40, 41))).clone(namedValues=NamedValues(("ds0-01", 1), ("ds0-02", 2), ("ds0-03", 3), ("ds0-04", 4), ("ds0-05", 5), ("ds0-06", 6), ("ds0-07", 7), ("ds0-08", 8), ("ds0-09", 9), ("ds0-10", 10), ("ds0-11", 11), ("ds0-12", 12), ("ds0-13", 13), ("ds0-14", 14), ("ds0-15", 15), ("ds0-16", 16), ("ds0-17", 17), ("ds0-18", 18), ("ds0-19", 19), ("ds0-20", 20), ("ds0-21", 21), ("ds0-22", 22), ("ds0-23", 23), ("ds0-24", 24), ("no-current-connections", 40), ("non-continuous-ds0s", 41)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteConnStartDs0.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteConnStartDs0.setDescription("T1 WAN includes 24 DS0's available for user data. Each DS0 carries either 56Kbit/sec (bit-7-stuffing) or 64KBit/sec (clear-channel). This value is the starting DS0 used by the node to allocate DS0s to match the DTE's data rate. Sequential, contiguous DS0s are assigned as required. The number of DS0s required is based upon the DTE Data Rate and DTE Channel Mapping. Consult WAN service provider for the appropriate setting here in a fractional T1 application.")
tfrapCfgDteConnRate = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1536000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteConnRate.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteConnRate.setDescription('Serial DTE Data Rate in bits per second. Valid rates depend upon channel density selection: nX56K for bit-7-stuffing, and nX64K for clear-channel (n is an integer 1-24 inclusive). Rates are entered in bits/sec, for example, 128000 for a 128Kbit/sec DTE data rate.')
tfrapCfgDteConnDensity = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(56, 64))).clone(namedValues=NamedValues(("bit-7-stuff", 56), ("clear-channel", 64)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteConnDensity.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteConnDensity.setDescription("Packing of serial data into T1 DS0's. Bit-7-stuff supports DTE rates of nX56Kb/s (from 56K to 1344K) and provides sufficient ones-density on any circuit. Clear-channel supports DTE rates of nX64Kb/s (from 64K to 1.536M) and may require an additional means of density enforcement (eg, B8ZS). (56) Bit 7 Stuffing (nx56K data rate, n=1-24) (64) Clear Channel (nx64K data rate, n=1-24)")
tfrapCfgDteConnDs0Required = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgDteConnDs0Required.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteConnDs0Required.setDescription("The number of DS0s required by the node's DTE port. This is based upon the DTE data rate and channel density selections.")
tfrapCfgDteConnAutoStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("configuration-valid", 1), ("configuration-invalid", 2), ("valid-config-updated", 3), ("invalid-cfg-no-update", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgDteConnAutoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteConnAutoStatus.setDescription("There's a tight correlation among DTE data rate, starting DS0, and channel density. This read-only parameter reports the status of the most recent change to any of these connection parameters. If the connection request is not valid a mismatch among DteLineRate, DteStartDs0, and DteChannelDensity must be resolved (1) and (3) configuration valid - the previous connections profile is accepted and activated (2) and (4) connections profile invalid, previous configuration remains.")
tfrapCfgDteConnAutoUpdate = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("config-and-connect", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgDteConnAutoUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteConnAutoUpdate.setDescription('Updates the connection-critical parameters: line rate, channel density and starting ds0; drops the current connection; and initiate the new connection. Following the issuance of this command, DteAutoStatus should be queried to verify the update was successful.')
tfrapCfgDteRts = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal-held-active", 1), ("external-from-dte", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteRts.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteRts.setDescription("Controls the reporting of the status of the DTE's Request to Send (RTS) control signal, specifically the generation of traps in response to control signal state changes. If Internally Held Active, the unit will ignore the actual status and always report this signal Active. If External, the unit will reflect the status as driven by the DTE; as such, Traps will be generated due to change of state (these may be useful for a network manager's assessment of interface status. (1) Internally Held Active (2) Externally Presented from DTE")
tfrapCfgDteDtr = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal-held-active", 1), ("external-from-dte", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteDtr.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteDtr.setDescription("Controls the reporting of the status of the DTE's Data Terminal Ready (DTR) control signal, specifically the generation of traps in response to control signal state changes. If Internally Held Active, the unit will ignore the actual status and always report this signal Active. If External, the unit will reflect the status as driven by the DTE; as such, Traps will be generated due to change of state (these may be useful for a network manager's assessment of interface status. (1) Internally Held Active (2) Externally Presented from DTE")
tfrapCfgDteDcdOutput = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("signal-off", 1), ("signal-on", 2), ("follow-carrier", 3), ("follow-test", 4), ("follow-rts", 5), ("follow-carrier-rts", 6), ("follow-sync-rts", 7), ("follow-lmi-carr-rts", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteDcdOutput.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteDcdOutput.setDescription('Specifies the behavior of the Data Carrier Detect (DCD) control signal generated by the unit towards the DTE. (1) inactive always: signal is permanently INACTIVE. (2) active always: signal is permanently ACTIVE. (3) reflect WAN carrier: signal echoes the received signal status from the WAN. (4) inactive with test mode: signal is ACTIVE during normal data transfer and INACTIVE during diagnostic conditions that interfere with data transfer from the DTE to the WAN. (5) follow RTS: signal echoes the status of RTS as processed from the DTE. (6) reflect carrier and RTS: signal is a logical AND between RTS processed from the DTE and the received signal status from the WAN. No signal received from the WAN or RTS INACTIVE will cause this control signal to be asserted INACTIVE. (7) reflect sync and RTS: signal is a logical AND between RTS processed from the DTE and the frame synchronization with the WAN. Red Alarm defines the threshold for declaring synchronization. (8) reflect LMI and carrier and RTS: signal is a logical AND between RTS processed from the DTE and the carrier signal status from the WAN and LMI. If the unit is in an LMI passthrough state then LMI is considered Active. LMI Inactivity timer must be non-zero for LMI to be declared Inactive. In non-Frame Relay applications (type = dedicated) LMI will be presumed ACTIVE so this will setting is equivalent to (6). Note that there is a separate parameter for how the unit processes RTS that is related to this function if options (4), (5), (6), or (7) is selected, see CfgDteRts.')
tfrapCfgDteDsrOutput = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("signal-off", 1), ("signal-on", 2), ("follow-carrier", 3), ("follow-test", 4), ("follow-rts", 5), ("follow-carrier-rts", 6), ("follow-sync-rts", 7), ("follow-lmi-carr-rts", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteDsrOutput.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteDsrOutput.setDescription('Specifies the behavior of the Data Set Ready (DSR) control signal generated by the unit towards the DTE. (1) inactive always: signal is permanently INACTIVE. (2) active always: signal is permanently ACTIVE. (3) reflect WAN carrier: signal echoes the received signal status from the WAN. (4) inactive with test mode: signal is ACTIVE during normal data transfer and INACTIVE during diagnostic conditions that interfere with data transfer from the DTE to the WAN. (5) follow RTS: signal echoes the status of RTS as processed from the DTE. (6) reflect carrier and RTS: signal is a logical AND between RTS processed from the DTE and the received signal status from the WAN. No signal received from the WAN or RTS INACTIVE will cause this control signal to be asserted INACTIVE. (7) reflect sync and RTS: signal is a logical AND between RTS processed from the DTE and the frame synchronization with the WAN. Frame Red Alarm defines the threshold for declaring synchronization. (8) reflect LMI and carrier and RTS: signal is a logical AND between RTS processed from the DTE and the carrier signal status from the WAN and LMI. If the unit is in an LMI passthrough state then LMI is considered Active. LMI Inactivity timer must be non-zero for LMI to be declared Inactive. In non-Frame Relay applications (type = dedicated) LMI will be presumed ACTIVE so this will setting is equivalent to (6). Note that there is a separate parameter for how the unit processes RTS that is related to this function if options (4), (5), (6), or (7) is selected, see CfgDteRts.')
tfrapCfgDteCtsOutput = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("signal-off", 1), ("signal-on", 2), ("follow-carrier", 3), ("follow-test", 4), ("follow-rts", 5), ("follow-carrier-rts", 6), ("follow-sync-rts", 7), ("follow-lmi-carr-rts", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgDteCtsOutput.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgDteCtsOutput.setDescription('Specifies the behavior of the Clear to Send (CTS) control signal generated by the unit towards the DTE. (1) inactive always: signal is permanently INACTIVE. (2) active always: signal is permanently ACTIVE. (3) reflect WAN carrier: signal echoes the received signal status from the WAN. (4) inactive with test mode: signal is ACTIVE during normal data transfer and INACTIVE during diagnostic conditions that interfere with data transfer from the DTE to the WAN. (5) follow RTS: signal echoes the status of RTS as processed from the DTE. (6) reflect carrier and RTS: signal is a logical AND between RTS processed from the DTE and the received signal status from the WAN. No signal received from the WAN or RTS INACTIVE will cause this control signal to be asserted INACTIVE. (7) reflect sync and RTS: signal is a logical AND between RTS processed from the DTE and the frame synchronization with the WAN. Red Alarm defines the threshold for declaring synchronization. (8) reflect LMI and carrier and RTS: signal is a logical AND between RTS processed from the DTE and the carrier signal status from the WAN and LMI. If the unit is in an LMI passthrough state then LMI is considered Active. LMI Inactivity timer must be non-zero for LMI to be declared Inactive. In non-Frame Relay applications (type = dedicated) LMI will be presumed ACTIVE so this will setting is equivalent to (6). Note that there is a separate parameter for how the unit processes RTS that is related to this function if options (4), (5), (6), or (7) is selected, see CfgDteRts.')
tfrapCfgFrTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 5))
tfrapCfgFrAddrLen = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("twobytes", 1), ("threebytes", 2), ("fourbytes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrAddrLen.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrAddrLen.setDescription('Defines the size of the DLCI address field of the Frame Relay header. This setting must correspond to the Frame Relay transmission format; typically Two bytes. (1) two byte DLCI address field (2) three byte DLCI address field (3) four byte DLCI address field')
tfrapCfgFrCrcMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("passthru", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrCrcMode.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrCrcMode.setDescription('This defines the manner in which the unit handles HDLC protocol errors (crc errors) in a Frame Relay application. If Discard is selected the unit will respond to an errored frame by aborting the frame if transmission has begun; or simply discarding it if transmission has not begun. If Passthru is selected the unit will transmit the entire frame but will place an incorrect crc in it to preserve the error indication. (1) discard (2) passthru')
tfrapCfgFrLmiType = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("annexd", 1), ("annexa", 2), ("type1", 3), ("autosense", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrLmiType.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrLmiType.setDescription('The LMI type used in a Frame Relay application. This setting must match the attached Frame Relay device configuration. Annex-A and Annex-D use DLCI 0, and Type 1 uses DLCI 1023. Type 1 is alternatively referred to as Cisco, Group of four, or simply LMI. Annex-D may be referred to as ANSI T1.617. Annex-A may be referred to as ITU or CCITT Q.933. Auto-sense will either use the most recently detected LMI type or, in the absence of any LMI, will attempt to instigate LMI communications using each protocol. (1) Annnex-A: conforms to ITU (CCITT) Q.933 annex A (2) Annnex-D: conforms to ANSI T1.617 annex D (3) Type 1: conforms to the original LMI as developed by the Group of Four (4) Auto-sense: unit will attempt to detect and synchronize to the LMI type of the attached equipment.')
tfrapCfgFrLmiInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrLmiInactivityTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrLmiInactivityTimeout.setDescription('Timer used by the unit to determine that an attached device is not participating in the LMI protocol and that the unit should attempt to source LMI. This timer also controls the length of time that the LMI sourcing state machine remains in a particular state as it attempts to locate an LMI peer. (0) LMI Sourcing disabled (2-255) LMI Inactivity timeout')
tfrapCfgFrLmiKeepaliveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrLmiKeepaliveTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrLmiKeepaliveTimeout.setDescription('Timer used by the unit to determine the frequency at which Status Enquiries are issued during LMI sourcing states where the unit is emulating a Frame Relay DTE device. (2-255) length of time between sending enquiries (in seconds)')
tfrapCfgFrAddrResMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("arp", 2), ("inarp", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrAddrResMode.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrAddrResMode.setDescription('Enable ARP (2), INARP (3), both (4), or neither (1).')
tfrapCfgFrAddrResDlcis = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("single", 1), ("multiple", 2), ("t1multi", 3), ("dtemulti", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrAddrResDlcis.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrAddrResDlcis.setDescription('Address Resolution Dlcis determines which dlcis are used for address resolution. Multiple DLCI support only applies to piggyback mode; in other management modes, only the configured default dlci is used (1) Support the configured Address Resolution protocol(s) out both ports on the single configured default DLCI only (CfgFrDLCIValue). (2) Support the configured Address Resolution protocol(s) out both ports on all active DLCIs (per LMI). (3) Support the configured Address Resolution protocol(s) out the WAN on all active DLCIs (per LMI) and out the DTE on only the single default DLCI (CfgFrDLCIValue). (4) Support the configured Address Resolution protocol(s) out the DTE on all active DLCIs (per LMI) and out the WAN on only the single default DLCI (CfgFrDLCIValue).')
tfrapCfgFrAddrResInarpTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrAddrResInarpTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrAddrResInarpTimer.setDescription('The frequency at which the unit issues INARP requests (in seconds) from 5 to 86400 (24 hours).')
tfrapCfgFrLmiFullStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrLmiFullStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrLmiFullStatus.setDescription("Timer used by the unit to determine if an LMI Full Status Report is missing. In the absence of a Full Status report for the duration defined by this timer, the unit will declare all DLCI's status INACTIVE and begin logging down time. Data passage is not interfered with. (0) Full Status Timer is disabled (20-3600) Full Status Report Timeout in seconds.")
tfrapCfgVnipTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 6))
tfrapCfgVnipMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("dte", 2), ("t1", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgVnipMode.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgVnipMode.setDescription("This setting configures the unit for VNIP topology support on a per-interface basis. Establishing a VNIP topology is a fundamental prerequisite to applying the VNIP feature set which includes PVC-based delay measurement, diagnostics, and congestion monitoring. With VNIP enabled on an interface the unit will attempt to locate VNIP peers out that port. As peers are discovered and logged the unit will report the topology it has learned on its opposite interface. If VNIP is inactive on one interface it will not engage in any VNIP dialog; however it will continue to listen for topology messages on the inactive interface and will reflect these messages out the opposite interface if VNIP is enabled. With VNIP inactive on both interfaces the unit will transparently pass all VNIP messages. The topology database includes ip addresses, DLCI values, and the number of VNIP hops in between. (1) Topology Inactive: VNIP messages pass through unit (2) Topology Enabled on DTE only: unit logs VNIP peers seen out the DTE interface. Unit listens for topology reports from the WAN but doesn't generate any towards the WAN. Will report learned WAN topology towards the DTE. (3) Topology Enabled on WAN only: unit logs VNIP peers seen out the WAN interface. Unit listens for topology reports from the DTE but doesn't generate any towards the DTE. Will report learned DTE topology towards the WAN. (4) Topolgy Enabled on Both DTE and WAN: Unit logs VNIP peers seen out both interfaces and generates DTE topolgy reports towards the WAN and vice versa.")
tfrapCfgVnipInitTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgVnipInitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgVnipInitTimer.setDescription('VNIP peer to peer communications are initiated following the detection of a VNIP Hello message. The unit will periodically issue this message out interfaces that have VNIP enabled until a Hello response is received. Following the reception of the Hello response, the unit will stop issuing Hello messahges on that DLCI/interface and generate periodic topology reports at the VNIP Keep Alive frequency. The unit will generate periodic Hello messages, at the InitTimer frequency if no Hello responses are ever detected or a topology message not been detected within the time period defined by the VNIP Inactivity timer. (5-86400) VNIP Hello frequency (in seconds)')
tfrapCfgVnipKeepAliveTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgVnipKeepAliveTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgVnipKeepAliveTimer.setDescription("This is the frequency that topology reports are issued out any interface that has VNIP enabled. Once a Hello exchange occurs, the unit will periodically issue a VNIP message which reflects the topology it has learned on the opposite interface. This Keep Alive timer must be less than any peer unit's Inactivity timer. (5-86400) VNIP Topology Update frequency (in seconds)")
tfrapCfgVnipInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgVnipInactivityTimer.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgVnipInactivityTimer.setDescription('The length of time to wait before dropping a VNIP peer from the database and attempting tp reestablish communications by issuing the VNIP Hello message. If this timer expires then the entire topology database is reset. The Inactivity timers of any unit participating in a VNIP topology must be greater than the highest Keep Alive timer in the topology. (5- 86400) VNIP Hello frequency (in seconds)')
tfrapCfgVnipTransitDelayFrequency = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgVnipTransitDelayFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgVnipTransitDelayFrequency.setDescription('Transit Delay measurements may be enabled between any DLCI peers that have been logged through the topology protocol. Delay messages are issued at this frequency and results are recorded. Transit delay measures the round-trip network delay between two VNIP peers (internal unit latencies are not part of the measurement). Traps may be optionally generated if a delay threshold is exceeded. (15-86400): Transit Delay message frequency (in seconds)')
tfrapCfgTransitDelayTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 20), )
if mibBuilder.loadTexts: tfrapCfgTransitDelayTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTransitDelayTable.setDescription("The table defining the transit delay measurement profile for each of the learned VNIP peers. As peers are located and logged into the topology database, a default transit delay profile is assumed. The default is to enable transit delay to all hops located out the interface. A DLCI's transit delay profile cannot be modified unless the DLCI has been discovered through the VNIP topology protocol.")
tfrapCfgTransitDelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 20, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapCfgTransitDelayInterface"), (0, "TFRAP-MIB", "tfrapCfgTransitDelayDlciValue"))
if mibBuilder.loadTexts: tfrapCfgTransitDelayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTransitDelayEntry.setDescription("A VNIP Transit Delay configuration entry for a particular DLCI on a particular interface. A DLCI's transit delay profile cannot be modified unless the DLCI has been discovered through the VNIP topology protocol")
tfrapCfgTransitDelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTransitDelayInterface.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTransitDelayInterface.setDescription('This is the interface being configured for VNIP Transit Delay. If topology is enabled, each interface will contain a database of VNIP peers organized by DLCI value and Number of Hops. (1) DTE Interface (2) DDS Interface')
tfrapCfgTransitDelayDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 20, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTransitDelayDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTransitDelayDlciValue.setDescription('This is the DLCI being configured for VNIP Transit Delay. If topology is enabled, each interface will contain a database of VNIP peers organized by DLCI value and Number of Hops.')
tfrapCfgTransitDelayNumHops = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTransitDelayNumHops.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTransitDelayNumHops.setDescription('VNIP topolgy may include multiple units on a given DLCI/interface. The topology logs the number of intermediate VNIP peers between units (Hops). This setting determines which peers on a DLCI are participating in delay measurements. (0) All hops (1-254) Individually addressable delay measurement between any two peers. (255) Furthest hop only')
tfrapCfgTransitDelayRcvSummaryCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-rsc", 1), ("disable-rsc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTransitDelayRcvSummaryCancel.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTransitDelayRcvSummaryCancel.setDescription("Controls the Receive Summary Cancellation feature of VNIP Transit Delay on this interface/DLCI. Every Transit Delay measurement exchange includes a follow-up message from the initiator with the delay results. If RSC is enabled, a unit will log results based upon this summary message and will not issue its next scheduled delay measurement. With RSC disabled, the unit will not use the summary message and will always issue its regularly scheduled message based on the delay frequency timer. The purpose of this feature is to reduce traffic introduced by VNIP. In a typical peer-to-peer transit delay measurement where both ends are concurrently conducting transit delay measurements it's recommended that one end have RSC enabled and one end disabled.")
tfrapCfgTransitDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTransitDelayThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTransitDelayThreshold.setDescription('Specifies a transit delay threshold for this DLCI/interface. When the transit delay exceeds the threshold, a TRAP is sent. The threshold may be set from one millisecond to 24 hours. A value of 0 will prevent a TRAP from being sent. (0): Transit delay threshold trap disabled for this DLCI/interface (1-86400000): delay threshhold. Any delay measurements exceeding this result will generate a trap.')
tfrapCfgTDDeleteTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 21), )
if mibBuilder.loadTexts: tfrapCfgTDDeleteTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTDDeleteTable.setDescription('The table allows the user to disable transit delay measurements for a specific DLCI on a particular interface.')
tfrapCfgTDDeleteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 21, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapCfgTDDeleteInterface"))
if mibBuilder.loadTexts: tfrapCfgTDDeleteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTDDeleteEntry.setDescription('Disables VNIP Transit Delay for a particular interface and DLCI.')
tfrapCfgTDDeleteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2))))
if mibBuilder.loadTexts: tfrapCfgTDDeleteInterface.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTDDeleteInterface.setDescription('Transit delay can be disabled for a given DLCI on either interface. This indexes the interface. Setting this index and the associated DLCI index will disable transit delay on that combination.')
tfrapCfgTDDeleteDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 21, 1, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgTDDeleteDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTDDeleteDlciValue.setDescription('Transit delay can be disabled for a given DLCI on either interface. This indexes the DLCI. Setting this index and the associated interface index will disable transit delay on that combination.')
tfrapCfgTransitDelayTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgTransitDelayTableClear.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTransitDelayTableClear.setDescription(' The tfrapCfgTransitDelayTable is cleared. (1) clear the table ')
tfrapCfgFrPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 7))
tfrapCfgFrPerfDlciNamesTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 1), )
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesTable.setDescription('This table allows the user to configure DLCI specific parameters such as Names, CIR, and EIR. Additionally, any DLCIs configured with these parameters will be added into the Short Term statistics database next time its cleared.')
tfrapCfgFrPerfDlciNamesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 1, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapCfgFrPerfDlciNamesDlciValue"))
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesEntry.setDescription('A table entry indexed by DLCI, containing a DLCI, a DLCI name, a CIR, how the CIR value was obtained, and EIR.')
tfrapCfgFrPerfDlciNamesDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesDlciValue.setDescription("A DLCI selected for customized configuration and to be added to short term statistics collection (if it wasn't already there).")
tfrapCfgFrPerfDlciNamesDlciName = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesDlciName.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesDlciName.setDescription('A user-specifiable name for an individual DLCI.')
tfrapCfgFrPerfDlciNamesCirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesCirValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesCirValue.setDescription('The CIR value for an individual DLCI. This value is used in the calculation utilization as a percentage of CIR. If the CIR is reported in the LMI message then the reported value will override this configured entry. In the absence of LMI CIR and a configured CIR, the unit will assume that the CIR is the DTE Line Rate.')
tfrapCfgFrPerfDlciNamesCirType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cir-acquired-from-lmi", 1), ("cir-configured-by-user", 2), ("cir-is-datarate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesCirType.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesCirType.setDescription('The source of the CIR value for this DLCI. If CIR for a DLCI is part of the LMI message then this LMI supplied CIR will override any defined CIR. If CIR is not part of LMI and has not been explicitly defined by the user it will default to the DTE Line Rate. (1) CIR reported in LMI Full Status message (2) CIR configured by user (3) CIR defaulted to DTE Line Rate')
tfrapCfgFrPerfDlciNamesUtilThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesUtilThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesUtilThreshold.setDescription("The threshold for generating a utilization threshold trap as a percentage of the CIR. If the utilization percentage is above this threshold for more than tfrapCfgFrPerfDlciUtilThreshold number of tfrapCfgFrPerfTimersSTInterval's a tfrapPvc(Rx/Tx)UtilizationExceeded trap will be issued. If the If the utilization percentage falls below this threshold for more than tfrapCfgFrPerfDlciUtilThreshold number of tfrapCfgFrPerfTimersSTInterval's a tfrapPvc(Rx/Tx)UtilizationExceeded trap will be issued.")
tfrapCfgFrPerfDlciNamesEirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesEirValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesEirValue.setDescription('The EIR value for an individual DLCI. In the absence of a configured EIR, the unit will assume that the EIR is the DTE Line Rate.')
tfrapCfgFrPerfDlciNamesDelete = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesDelete.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesDelete.setDescription('Setting this object with a specific DLCI value will remove the DLCI form the DLCI-specific parameters database.')
tfrapCfgFrPerfTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 3))
tfrapCfgFrPerfTimersSTInterval = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfTimersSTInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfTimersSTInterval.setDescription('Short term statistics maintain cumulative counts, and counts for the current and previous short term windows. This value is the window size for the short term statistics intervals. (3-60): short term statistics collection interval')
tfrapCfgFrPerfTimersLTInterval = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfTimersLTInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfTimersLTInterval.setDescription('Long term statistics maintain 96 contiguous intervals of configurable protocol per DLCI statistics. This value is the window size of each interval. Adjusting this value will change the overall length of time that the 96 intervals will span. (4-3600): long term statsistics collection interval')
tfrapCfgFrPerfUserProtocolsTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 4), )
if mibBuilder.loadTexts: tfrapCfgFrPerfUserProtocolsTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfUserProtocolsTable.setDescription('This table allows the user to select TCP/UDP ports for statistics collection. Tx and Rx byte counts will collected on the specified ports. These ports are selectable as protocols in the long term statistics filter and are displayed with the other protocols in the short term statistics.')
tfrapCfgFrPerfUserProtocolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 4, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapCfgFrPerfUserProtocolsIndex"))
if mibBuilder.loadTexts: tfrapCfgFrPerfUserProtocolsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfUserProtocolsEntry.setDescription('An index and TCP/UDP port number pair.')
tfrapCfgFrPerfUserProtocolsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfUserProtocolsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfUserProtocolsIndex.setDescription('An index. Beginning with index 1, the range is defined in SysNumUserProtocols')
tfrapCfgFrPerfUserProtocolsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfUserProtocolsPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfUserProtocolsPortNum.setDescription('Tx and Rx byte counts will be collected on the user-specifiable TCP/UDP port number. (0) port not defined (1-65535): IP TCP/UDP protocol port number.')
tfrapCfgFrPerfLTDlciFilterTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 5), )
if mibBuilder.loadTexts: tfrapCfgFrPerfLTDlciFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfLTDlciFilterTable.setDescription('Long term statistics can only be collected on a limited number of DLCIs. The value of SysLTFNumDlcis defines the maximum number of DLCIs that can be included in the Long Term Statistics. Once one or more DLCIs are added to Long Term Stats, the user may assign a set of protocols that will be monitored across all of the Long Term DLCIs.')
tfrapCfgFrPerfLTDlciFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 5, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapCfgFrPerfLTDlciFilterIndex"))
if mibBuilder.loadTexts: tfrapCfgFrPerfLTDlciFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfLTDlciFilterEntry.setDescription('An index and DLCI number pair.')
tfrapCfgFrPerfLTDlciFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfLTDlciFilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfLTDlciFilterIndex.setDescription('An index. Beginning with index 1, the maximum is defined by the value of SysLTFNumDlcis.')
tfrapCfgFrPerfLTDlciFilterDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfLTDlciFilterDlciNum.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfLTDlciFilterDlciNum.setDescription('Setting a DLCI value here will add that DLCI into the Long term statistics database (associated with its index) and it will be monitored for the protocol activity defined in the Long Term Protocol filter.')
tfrapCfgFrPerfLTProtocolFilterTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 6), )
if mibBuilder.loadTexts: tfrapCfgFrPerfLTProtocolFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfLTProtocolFilterTable.setDescription('Long term statistics can only be collected on a limited number of protocols. The maximum number of Long Term Protoocls are defined by SysLTFNumProtocols. This table allows the user to configure those protocols.')
tfrapCfgFrPerfLTProtocolFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 6, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapCfgFrPerfLTProtocolFilterIndex"))
if mibBuilder.loadTexts: tfrapCfgFrPerfLTProtocolFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfLTProtocolFilterEntry.setDescription('An index and protocol pair.')
tfrapCfgFrPerfLTProtocolFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfLTProtocolFilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfLTProtocolFilterIndex.setDescription('An index. Beginning with index 1, the maximum is defined by the value of SysLTFNumProtocols.')
tfrapCfgFrPerfLTProtocolFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 21, 22, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, -1))).clone(namedValues=NamedValues(("ip-tx-bc", 1), ("ip-rx-bc", 2), ("tcp-ip-tx-bc", 3), ("tcp-ip-rx-bc", 4), ("ftp-tcp-ip-tx-bc", 5), ("ftp-tcp-ip-rx-bc", 6), ("telnet-tcp-ip-tx-bc", 7), ("telnet-tcp-ip-rx-bc", 8), ("smtp-tcp-ip-tx-bc", 9), ("smtp-tcp-ip-rx-bc", 10), ("http-tcp-ip-tx-bc", 13), ("http-tcp-ip-rx-bc", 14), ("netbios-ssn-tcp-ip-tx-bc", 15), ("netbios-ssn-tcp-ip-rx-bc", 16), ("udp-ip-tx-bc", 21), ("udp-ip-rx-bc", 22), ("tftp-udp-ip-tx-bc", 29), ("tftp-udp-ip-rx-bc", 30), ("netbios-dgm-udp-ip-tx-bc", 33), ("netbios-dgm-udp-ip-rx-bc", 34), ("snmp-udp-ip-tx-bc", 35), ("snmp-udp-ip-rx-bc", 36), ("snmptrap-udp-ip-tx-bc", 37), ("snmptrap-udp-ip-rx-bc", 38), ("rip-udp-ip-tx-bc", 39), ("rip-udp-ip-rx-bc", 40), ("icmp-ip-tx-bc", 41), ("icmp-ip-rx-bc", 42), ("echorep-icmp-ip-tx-bc", 43), ("echorep-icmp-ip-rx-bc", 44), ("dest-unr-icmp-ip-tx-bc", 45), ("dest-unr-icmp-ip-rx-bc", 46), ("src-quench-icmp-ip-tx-bc", 47), ("src-quench-icmp-ip-rx-bc", 48), ("redirect-icmp-ip-tx-bc", 49), ("redirect-icmp-ip-rx-bc", 50), ("echoreq-icmp-ip-tx-bc", 51), ("echoreq-icmp-ip-rx-bc", 52), ("time-excd-icmp-ip-tx-bc", 53), ("time-excd-icmp-ip-rx-bc", 54), ("param-prob-icmp-ip-tx-bc", 55), ("param-prob-icmp-ip-rx-bc", 56), ("timestamp-req-icmp-ip-tx-bc", 57), ("timestamp-req-icmp-ip-rx-bc", 58), ("timestamp-rep-icmp-ip-tx-bc", 59), ("timestamp-rep-icmp-ip-rx-bc", 60), ("addr-mask-req-icmp-ip-tx-bc", 61), ("addr-mask-req-icmp-ip-rx-bc", 62), ("addr-mask-rep-icmp-ip-tx-bc", 63), ("addr-mask-rep-icmp-ip-rx-bc", 64), ("pkt-too-big-icmp-ip-tx-bc", 65), ("pkt-too-big-icmp-ip-rx-bc", 66), ("gp-mem-query-icmp-ip-tx-bc", 67), ("gp-mem-query-icmp-ip-rx-bc", 68), ("gp-mem-report-icmp-ip-tx-bc", 69), ("gp-mem-report-icmp-ip-rx-bc", 70), ("gp-mem-reduct-icmp-ip-tx-bc", 71), ("gp-mem-reduct-icmp-ip-rx-bc", 72), ("ospf-ip-tx-bc", 73), ("ospf-ip-rx-bc", 74), ("other-ip-tx-bc", 75), ("other-ip-rx-bc", 76), ("ipx-tx-bc", 77), ("ipx-rx-bc", 78), ("spx-ipx-tx-bc", 79), ("spx-ipx-rx-bc", 80), ("ncp-ipx-tx-bc", 81), ("ncp-ipx-rx-bc", 82), ("sap-ipx-tx-bc", 83), ("sap-ipx-rx-bc", 84), ("rip-ipx-tx-bc", 85), ("rip-ipx-rx-bc", 86), ("netbios-ipx-tx-bc", 87), ("netbios-ipx-rx-bc", 88), ("other-ipx-tx-bc", 89), ("other-ipx-rx-bc", 90), ("arp-tx-bc", 91), ("arp-rx-bc", 92), ("arp-req-tx-bc", 93), ("arp-req-rx-bc", 94), ("arp-rep-tx-bc", 95), ("arp-rep-rx-bc", 96), ("rarp-req-tx-bc", 97), ("rarp-req-rx-bc", 98), ("rarp-rep-tx-bc", 99), ("rarp-rep-rx-bc", 100), ("inarp-req-tx-bc", 101), ("inarp-req-rx-bc", 102), ("inarp-rep-tx-bc", 103), ("inarp-rep-rx-bc", 104), ("sna-tx-bc", 105), ("sna-rx-bc", 106), ("sna-subarea-tx-bc", 107), ("sna-subarea-rx-bc", 108), ("sna-periph-tx-bc", 109), ("sna-periph-rx-bc", 110), ("sna-appn-tx-bc", 111), ("sna-appn-rx-bc", 112), ("sna-netbios-tx-bc", 113), ("sna-netbios-rx-bc", 114), ("cisco-tx-bc", 115), ("cisco-rx-bc", 116), ("other-tx-bc", 117), ("other-rx-bc", 118), ("user-defined-1-tx-bc", 119), ("user-defined-1-rx-bc", 120), ("user-defined-2-tx-bc", 121), ("user-defined-2-rx-bc", 122), ("user-defined-3-tx-bc", 123), ("user-defined-3-rx-bc", 124), ("user-defined-4-tx-bc", 125), ("user-defined-4-rx-bc", 126), ("thru-byte-tx-bc", 127), ("thru-byte-rx-bc", 128), ("thru-frame-tx-bc", 129), ("thru-frame-rx-bc", 130), ("thru-fecn-tx-bc", 131), ("thru-fecn-rx-bc", 132), ("thru-becn-tx-bc", 133), ("thru-becn-rx-bc", 134), ("thru-de-tx-bc", 135), ("thru-de-rx-bc", 136), ("cir-percent-range1-tx-bc", 137), ("cir-percent-range1-rx-bc", 138), ("cir-percent-range2-tx-bc", 139), ("cir-percent-range2-rx-bc", 140), ("cir-percent-range3-tx-bc", 141), ("cir-percent-range3-rx-bc", 142), ("cir-percent-range4-tx-bc", 143), ("cir-percent-range4-rx-bc", 144), ("cir-percent-range5-tx-bc", 145), ("cir-percent-range5-rx-bc", 146), ("cir-percent-range6-tx-bc", 147), ("cir-percent-range6-rx-bc", 148), ("cir-percent-range7-tx-bc", 149), ("cir-percent-range7-rx-bc", 150), ("cir-percent-range8-tx-bc", 151), ("cir-percent-range8-rx-bc", 152), ("lmi-tx-bc", 153), ("lmi-rx-bc", 154), ("lmi-livo-enq-tx-bc", 155), ("lmi-livo-enq-rx-bc", 156), ("lmi-livo-stat-tx-bc", 157), ("lmi-livo-stat-rx-bc", 158), ("lmi-full-enq-tx-bc", 159), ("lmi-full-enq-rx-bc", 160), ("lmi-full-stat-tx-bc", 161), ("lmi-full-stat-rx-bc", 162), ("lmi-other-tx-bc", 163), ("lmi-other-rx-bc", 164), ("total-uptime", 165), ("total-downtime", 166), ("igrp-tx-bc", 167), ("igrp-rx-bc", 168), ("vnip-tx-bc", 169), ("vnip-rx-bc", 170), ("annex-g-tx-bc", 171), ("annex-g-rx-bc", 172), ("delete-entry", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfLTProtocolFilterProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfLTProtocolFilterProtocol.setDescription('Long term statistics will be collected on the user-specifiable protocol. Setting a -1 remove the indexed protocol from the filter.')
tfrapCfgFrPerfDlciDefaultUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciDefaultUtilThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciDefaultUtilThreshold.setDescription('The default threshold for generating a utilization threshold trap as a percentage of the CIR. This value is used for tfrapCfgFrPerfDlciNamesUtilThreshold when a DLCI is first discovered. ')
tfrapCfgFrPerfDlciUtilDuration = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciUtilDuration.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciUtilDuration.setDescription("The number of Short Term Intervals that a DLCI's utilization as a percentage of CIR must be above or below the value of tfrapCfgFrPerfDlciUtilThreshold before a tfrapPvc(Rx/Tx)UtilizationExceededTrap or tfrapPvc(Rx/Tx)UtilizationClearedTrap is issued. ")
tfrapCfgFrPerfDlciNamesTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear-table", 1), ("clear-table-keep-stats", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesTableClear.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfDlciNamesTableClear.setDescription("Clears the smperCfgFrPerfDlciNamesTable (1) clear the table or (2) clear the table but don't remove the dlcis from the short term statistics.")
tfrapCfgFrPerfUserProtocolsTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfUserProtocolsTableClear.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfUserProtocolsTableClear.setDescription(' Clears the tfrapCfgFrPerfUserProtocolsTable (1) clear the table ')
tfrapCfgFrPerfLTDlciFilterTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfLTDlciFilterTableClear.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfLTDlciFilterTableClear.setDescription(' Clears the tfrapCfgFrPerfLTDlciFilterTable (1) clear the table ')
tfrapCfgFrPerfLTProtocolFilterTableClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-table", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfLTProtocolFilterTableClear.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfLTProtocolFilterTableClear.setDescription(' Clears the tfrapCfgFrPerfLTProtocolFilterTable (1) clear the table ')
tfrapCfgFrPerfUnprovDlcisDelete = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 7, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete-unprov", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgFrPerfUnprovDlcisDelete.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgFrPerfUnprovDlcisDelete.setDescription('Delete all unprovisioned and Not-In-LMI dlcis (1) delete all unprovisioned ')
tfrapCfgSecurityTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 2, 8))
tfrapCfgTelnetCliLcdPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTelnetCliLcdPassword.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTelnetCliLcdPassword.setDescription('The password needed to start a CLI (Command Line Interface), Telnet or LCD session.')
tfrapCfgTftpPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgTftpPassword.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgTftpPassword.setDescription('The password needed to initiate a TFTP download.')
tfrapCfgCliPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgCliPassword.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgCliPassword.setDescription('OBSOLETE: The Telnet, CLI and LCD passwords are one and the same. Use the above tfrapCfgTelnetCliLcdPassword to log into the CLI (Command Line Interface).')
tfrapCfgLcdPassword = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgLcdPassword.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgLcdPassword.setDescription('OBSOLETE: The Telnet, CLI and LCD passwords are one and the same. Use the above tfrapCfgTelnetCliLcdPassword to log into the LCD Interface.')
tfrapCfgGetCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgGetCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgGetCommunityString.setDescription('The community string for doing SNMP GETs. The unit will respond to GETs that use either this string or the SET community string. All others will be rejected and a trap will be generated. String is case sensitive.')
tfrapCfgSetCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgSetCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgSetCommunityString.setDescription('The community string for doing SNMP SETs. The unit will reject SETs with any other coimmunity string and will generate a trap. String is case sensitive.')
tfrapCfgLcdPswdEnable = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-lcd-pswd", 1), ("disable-lcd-pswd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgLcdPswdEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgLcdPswdEnable.setDescription('This selection controls whether a password is necessary to use the LCD interface.')
tfrapCfgLcdPswdTimeout = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 8, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgLcdPswdTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgLcdPswdTimeout.setDescription('OBSOLETE.')
tfrapCfgLock = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgLock.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgLock.setDescription(' Request to start configuration download and lock out any other means of configuring the unit. The integer passed in represents the time out period in seconds between sets. A set to this object will fail if the unit is already in a configuration locked state.')
tfrapCfgLockID = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgLockID.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgLockID.setDescription(' Returns the IP Address of the management station currently in control of configuration. A unit that is not in a configuration locked state will return 0.0.0.0')
tfrapCfgID = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapCfgID.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgID.setDescription(' A read of this object returns the Current Configuration ID string. A write sets the Configuration ID string. The string contains a starting character to indicate the last configuration source C = Envisage N = CLI/TELNET L = LCD S= other SNMP management station and a unique 7 integer value to differentiate configurations between common sources. A value of *STARTUP indicates the configuration has been defaulted. A write will only be accepted from the management station that has successfully obtained the configuration lock')
tfrapCfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("in-progress", 1), ("success", 2), ("datarate-density-conflict", 3), ("bandwidth-allocation-error", 4), ("general-error", 5), ("timeout", 6), ("aborted-by-user", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgStatus.setDescription(' The status of a configuration install is reported here. On startup, a status of success will be reported. (1) The configuration has been locked and an update or unlock command has not been received. (2) An update command has been received and the configuration has been validated as consistent; . (3) An update command has been received but the DTE port datarate is not compatible with the density. (4) An update command has been received but the number of channels to be allocated will not fit in the available channels. (5) An update command has been received but there is an error in the configuration that is not a datarate-density-conflict or bandwidth-allocation-error. (6) The time between consecutive set requests exceeded the timeout sent with the tfrapCfgLock command. (7) The user sent a tfrapCfgUnlock command before a tfrapCfgUpdate command. This usually means that one of the sets in the configuration failed. ')
tfrapCfgUnlock = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("un-lock", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgUnlock.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgUnlock.setDescription(' The management station sets this variable to complete the configuration install process. Un-lock (1) notifies the agent to remove the lock on configuring the unit without updating the configuration.')
tfrapCfgUpdate = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapCfgUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgUpdate.setDescription(' The management station sets this variable to complete the configuration install process. Update (1) notifies the agent to start the update process within the unit.')
tfrapDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 3))
tfrapDiagUnitTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 3, 1))
tfrapDiagUnitLocLoop = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagUnitLocLoop.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagUnitLocLoop.setDescription('Controls a bi-directional unit loopback. Data is received from either interface, processed, and transmitted back towards the same interface. When configured for Frame Relay operation the unit will preserve the LMI path and maintain managed access during this loopback. In Frame Relay mode, only valid HDLC frames are looped back (pseudorandom test patterns will be dropped). (1) enable unit loopback (2) disable unit loopback')
tfrapDiagUnitReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset-unit", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapDiagUnitReset.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagUnitReset.setDescription('Enables the operator to remotely cause a software reset on the unit. Using this command will cause the unit to terminate all its connections and drop data. (1) Reset Unit.')
tfrapDiagUnitTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagUnitTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagUnitTimeRemaining.setDescription('The remaining time on the active loopback before the loopback times out and disables itself. The time is in hundredths of seconds (TimeTicks).')
tfrapDiagT1Table = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 3, 2))
tfrapDiagT1LocLineLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("line-lpbk-disable", 1), ("line-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagT1LocLineLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagT1LocLineLpbk.setDescription('Controls local network loopback. All data (including framing and line errors) received from the WAN, regardless of format or content, is transmitted back out to the WAN (line interface loopback) while still being passed through to the DTE. In Frame Relay applications the unit will not preserve the LMI path during this diagnostic and in-band management may not operate. (1) disable line loopback (2) enable line loopback')
tfrapDiagT1LocPylLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pyl-lpbk-disable", 1), ("pyl-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagT1LocPylLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagT1LocPylLpbk.setDescription('Controls network payload loopback. All data received from the WAN is terminated, reframed and sent back towards the WAN. Framing errors and Line Code Violations are corrected. Network contact via ESF Facility Data Link is preserved during this loopback state. All user data regardless of format or content, is transmitted back out while all Ones are sent to the DTE. In Frame Relay applications the unit will not preserve the LMI path during this diagnostic and in-band management may not operate. (1) disable payload loopback (2) enable payload loopback')
tfrapDiagT1LocAggrLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aggr-lpbk-disable", 1), ("aggr-lpbk-enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagT1LocAggrLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagT1LocAggrLpbk.setDescription('Controls Local Aggregate Loopback. All data received from the DTE is framed, formatted and transmit towards the WAN while being looped back towards the DTE. The loopback path covers the entire digital data path within the device. In Frame Relay mode, only error-free HDLC frames will pass through the loopback path. Additionally, in Frame Relay applications the unit will not preserve the LMI path during this loopback and in-band management may not operate. (1) disable local aggregate (digital) loopback (2) enable local aggregate (digital) loopback ')
tfrapDiagT1RmtLpbkStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-remote-lpbks", 1), ("csu-lpbk-from-remote", 2), ("dsu-lpbk-from-remote", 3), ("pyl-lpbk-from-remote", 4), ("csu-lpbk-sent-to-remote", 5), ("dsu-lpbk-sent-to-remote", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagT1RmtLpbkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagT1RmtLpbkStatus.setDescription("Status of Remote Loopback commands sent or received on the WAN. (1) csu loopback from remote - indicates the node is in a Network Line Loopback state due to the reception of the standard CSU Loop-up pattern from the WAN. (2) dsu loopback from remote - indicates the node is in a Network Line Loopback state due to the reception of the Sync Research proprietary Loop-up pattern from a remote node. (3) payload loopback from remote - indicates the node is in a Payload Loopback state due to the reception of the ESF Facility Data Link's Loop-up pattern from the network. (4) csu loopback sent to remote - indicates the node has sent a csu loop up pattern towards the WAN. A device terminating the WAN's physical link is expected to enter a Line Loopback. The initating unit doesn't know if the loopback was accepted by the remote unit. (5) dsu loopback sent to remote - indicates the node has sent a dsu loop up pattern to a remote Sync unit out the WAN. A compatible device detecting this pattern is expected to enter a Line Loopback. The initating unit doesn't know if the loopback was accepted by the remote unit.")
tfrapDiagT1RmtLpbkCmd = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rmt-csu-lpbk-loopup", 1), ("rmt-csu-lpbk-loopdown", 2), ("rmt-dsu-lpbk-loopup", 3), ("rmt-dsu-lpbk-loopdown", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapDiagT1RmtLpbkCmd.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagT1RmtLpbkCmd.setDescription("Remote loopback commands are intended to place compatible external equipment into a loopback state. The initiating unit will maintain normal data flows during these tests. (1) csu loop up - commands the node to send a standard in-band csu loop up pattern towards the WAN. This is a repetetive framed T1 signal consisting of four 'zeros' followed by one 'one' persisting for a few seconds in place of all T1 data. A device terminating the WAN's physical link is expected to enter a Line Loopback condition upon recognition of this pattern. The initating unit doesn't know if the command was accepted by the remote unit. (2) csu loop down - commands the node to send a standard in-band csu loop down pattern towards the WAN. This is a repetetive framed T1 signal consisting of two 'zeros' followed by one 'one' persisting for a few seconds in place of all T1 data. A device terminating the WAN's physical link is expected to clear any Line Loopback condition upon recognition of this pattern. The initating unit doesn't know if the commad was accepted by the remote unit. (3) dsu loop up - commands the node to send a proprietary in-band dsu loop up pattern towards the WAN. This is a repetetive framed T1 signal consisting of a pseudorandom pattern persisting for a few seconds in place of all T1 data. A compatible device terminating the WAN's physical link is expected to enter a Line Loopback condition upon recognition of this pattern. The initating unit doesn't know if the command was accepted by the remote unit. (4) dsu loop down - commands the node to send a proprietary in-band dsu loop down pattern towards the WAN. This is a repetetive framed T1 signal consisting of a pseudorandom pattern persisting for a few seconds in place of all T1 data. A compatible device terminating the WAN's physical link is expected to clear any Line Loopback condition upon recognition of this pattern. The initating unit doesn't know if the command was accepted by the remote unit.")
tfrapDiagT1TimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 2, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagT1TimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagT1TimeRemaining.setDescription('The remaining time on the active loopback before the loopback times out and automatically clears itself to restore the unit to normal operation. The time is in hundredths of seconds (TimeTicks).')
tfrapDiagDteTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 3, 3))
tfrapDiagDteSigRTS = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rts-signal-on", 1), ("rts-signal-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteSigRTS.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagDteSigRTS.setDescription('Status of the Request to Send (RTS) signal from the DTE port. (1) RTS Active (2) RTS Inactive')
tfrapDiagDteSigDTR = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtr-signal-on", 1), ("dtr-signal-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteSigDTR.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagDteSigDTR.setDescription('Status of the Data Terminal Ready (DTR) signal from the DTE port. (1) DTR Active (2) DTR Inactive')
tfrapDiagDteLclLpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable-loopback-mode", 1), ("disable-loopback-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagDteLclLpbk.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagDteLclLpbk.setDescription('Controls the DTE loopback state. This is a bi-directional loopback state where both the DTE and WAN ports are placed in line loopback. All data received on each interface is sent back out the respective interface regardless of format or content. In Frame Relay applications the unit will not preserve the LMI path during this diagnostic and in-band management will not operate. (1) enable payload loopback (2) disable payload loopback')
tfrapDiagDteV54Lpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopback-enable", 1), ("loopback-disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteV54Lpbk.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagDteV54Lpbk.setDescription("This reports the status of any remote V54 testing initiated by this unit. Remote V54 loopback commands are intended to place compatible external equipment into a loopback state. The initiating unit will maintain normal data flows during these tests. (1) V54 loop up issued - indicates the node has sent a standard in-band loop up pattern towards the WAN per ITU V.54. This is a framed T1 signal consisting of a pseudorandom signal in place of all user data (that is only in the DS0s assigned to the DTE). A device terminating the fractional T1 data is expected to enter a bi-directional DTE Loopback condition upon recognition of this pattern. The initating unit doesn't know if the command was accepted by the remote unit. This pattern will not traverse a typical frame relay network and is designed for circuit-switched diagnostics. (2) V54 loop down issued - indicates the node has sent a standard in-band loop down pattern towards the WAN per ITU V.54. This is a framed T1 signal consisting of a pseudorandom signal in place of all user data (that is only in the DS0s assigned to the DTE). A device terminating the fractional T1 data is expected to clear a bi-directional DTE Loopback condition upon recognition of this pattern. The initating unit doesn't know if the command was accepted by the remote unit.")
tfrapDiagDteRmtV54Lpbk = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("transmit-code-enable", 3), ("transmit-code-disable", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapDiagDteRmtV54Lpbk.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagDteRmtV54Lpbk.setDescription("Remote V54 loopback commands are intended to place compatible external equipment into a loopback state. The initiating unit will maintain normal data flows during these tests. (3) Transmit V54 loop up - commands the node to send a standard in-band loop up pattern towards the WAN per ITU V.54. This is a framed T1 signal consisting of a pseudorandom signal in place of all user data (that is only in the DS0s assigned to the DTE). A device terminating the fractional T1 data is expected to enter a bi-directional DTE Loopback condition upon recognition of this pattern. The initating unit doesn't know if the command was accepted by the remote unit. This pattern will not traverse a typical frame relay network and is designed for circuit-switched diagnostics. (4) Transmit V54 loop down - commands the node to send a standard in-band loop down pattern towards the WAN per ITU V.54. This is a framed T1 signal consisting of a pseudorandom signal in place of all user data (that is only in the DS0s assigned to the DTE). A device terminating the fractional T1 data is expected to clear a bi-directional DTE Loopback condition upon recognition of this pattern. The initating unit doesn't know if the command was accepted by the remote unit.")
tfrapDiagDteBerState = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("start-bert-test-t1", 1), ("start-bert-test-dte", 2), ("stop-bert-test", 3), ("inject-error-bert-test", 4), ("clear-error-bert-test", 5)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapDiagDteBerState.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagDteBerState.setDescription('The unit is capable of sending a pseudorandom test pattern (511 or QRSS) out the WAN and monitoring the WAN received data for the same pattern. The BERT pattern may be selected to occupy either the full T1 payload or only the bandwidth allocated to the DTE (fractional T1). When a unit is sending this BERT, the receiver will monitor and characterize the incoming signal for the same BERT pattern. In Frame Relay applications the unit will not preserve the LMI path during this diagnostic and in-band management may not operate. This test may be ineffective in certain frame relay environments as pseudorandom data lacks appropriate framing. Refer to VLOOP and VBERT for PVC-based error-rate testing in a live frame relay network. (1) Start a BERT test on full T1 - replaces entire T1 payload with the configured BERT pattern while monitoring the full T1 bandwidth (1.536M) for the presence of the BERT pattern. (2) Start a BERT test on fractional T1 - replaces only the protion of the T1 payload that has been allocated to the DTE with the configured BERT pattern while monitoring the same T1 bandwidth (DTE Data Rate) for the presence of the BERT pattern. (3) Stop a BERT test. (4) Inject a single bit error into the outgoing pattern. (5) Clear current BERT results.')
tfrapDiagDteBerStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bert-off", 1), ("bert-out-of-sync", 2), ("bert-in-sync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteBerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagDteBerStatus.setDescription('Displays the current BERT test sync status. (1) BERT is not running (2) BERT is running but is not in sync (3) BERT is running and has detected a received BERT')
tfrapDiagDteBerErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteBerErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagDteBerErrors.setDescription('Displays the number of errors detected in Bert Test.')
tfrapDiagDteBerErrSec = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteBerErrSec.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagDteBerErrSec.setDescription('Displays the number of seconds containing 1 or more errors in BERT Test.')
tfrapDiagDteBerTimeElaps = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteBerTimeElaps.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagDteBerTimeElaps.setDescription('Elapsed time since BERT test was started or cleared.')
tfrapDiagDteBerResyncs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteBerResyncs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagDteBerResyncs.setDescription('Displays the number of times BERT test has synched up on the pattern. The BERT will attempt to resynchronize in response to excessive errors. A running count here indicates that a clean BERT is not being received.')
tfrapDiagDteBerPattern = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("five11-pattern", 1), ("qrss", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagDteBerPattern.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagDteBerPattern.setDescription('The type of pseudorandom BERT pattern used. (1) 511: 9-bit pseudorandom pattern (2) QRSS: 20-bit pseudorandom pattern with no more than 14 consecutive zeros')
tfrapDiagDteTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 3, 3, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagDteTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagDteTimeRemaining.setDescription('The remaining time on the active diagnostic before it times out and the unit returns to normal operation. The time is hundredths of seconds (TimeTicks).')
tfrapDiagVnipTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 3, 6), )
if mibBuilder.loadTexts: tfrapDiagVnipTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagVnipTable.setDescription(' Table of Diagnostics performed with the VNIP protocol')
tfrapDiagVnipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapDiagVnipInterface"), (0, "TFRAP-MIB", "tfrapDiagVnipIndex"))
if mibBuilder.loadTexts: tfrapDiagVnipEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagVnipEntry.setDescription('VNIP VLOOP and VBERT diagnostic profile. Initiating these tests require an established and stable VNIP topology on an interface. Once the topology is in place, the user can execute a PVC-based diagnostic between this unit and any indexed entry in the topology table. The index into the topology table for a particular interface is required.')
tfrapDiagVnipInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagVnipInterface.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagVnipInterface.setDescription('The interface out which a PVC-based VNIP diagnostic will be run. This must be an interface with a valid and stable VNIP topology for a VNIP Diagnostic.')
tfrapDiagVnipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagVnipIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagVnipIndex.setDescription('The index to the external VNIP peer as presented by the VNIP topology database for the given interface. Refer to VnipTopologyTable to determine the index of the remote peer.')
tfrapDiagVnipDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagVnipDlci.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagVnipDlci.setDescription('This is the DLCI value for the given interface/index combination. This comes from the VniptTopologyTable.')
tfrapDiagVnipIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDiagVnipIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagVnipIpAddr.setDescription('This is the ip address for the given interface/index combination. This comes from the VniptTopologyTable.')
tfrapDiagVLOOP = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start-test", 1), ("stop-test", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapDiagVLOOP.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagVLOOP.setDescription('Controls execution of the Vnip Logical Loopback (VLOOP) test. VLOOP is designed as an intrusive test and customer data on the DLCI-under-test will be discarded. The VLOOP test includes a timed VBERT test and is run using the profile configured within this table. (1) start VLOOP test (2) stop VLOOP test (override VBERT test duration)')
tfrapDiagVBERT = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapDiagVBERT.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagVBERT.setDescription('Controls execution of the Vnip Virtual Bit Eror Rate (VBERT) test. VBERT is designed to be a non-intrusive test and will attempt to statistically multiplex VBERT test data and customer data on the DLCI-under-test. However, VBERT data is given priority over customer data when the selected VBERT volume causes internal congestion. The test is run using the profile configured within this table. (1) start test (2) stop test (override VBERT test duration)')
tfrapDiagVBERTRate = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagVBERTRate.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagVBERTRate.setDescription('Specifies the throughput bit rate applied by VBERT or VLOOP to the DLCI-under-test. For DTE Rates or configured CIR up to 64K the maximum VBERT rate is either the DTE data rate or 110% of CIR (which ever is less). For DTE Rates or configured CIR greater than 64K, the maximum VBERT rate is 75% of the DTE data rate or 110% of CIR (which ever is less). Note that selecting rates that approach line rate will impact neighboring PVCs. (8000-1152000): VBERT/VLOOP data rate (in bits per second).')
tfrapDiagVBERTSize = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(64, 128, 256, 512, 1024, 2048))).clone(namedValues=NamedValues(("pkt-size-64", 64), ("pkt-size-128", 128), ("pkt-size-256", 256), ("pkt-size-512", 512), ("pkt-size-1024", 1024), ("pkt-size-2048", 2048)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagVBERTSize.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagVBERTSize.setDescription('Specifies the size of framed data that will be used during the VBERT test, measured in Bytes. (64) 64-byte frames (128) 128-byte frames (256) 256-byte frames (512) 512-byte frames (1024) 1024-byte frames (2048) 2048-byte frames')
tfrapDiagVBERTPktPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 25, 50, 75, 100))).clone(namedValues=NamedValues(("zero-percent", 0), ("twentyFive-percent", 25), ("fifty-percent", 50), ("seventyFive-percent", 75), ("oneHundred-percent", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagVBERTPktPercent.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagVBERTPktPercent.setDescription('Specifies percentage of VBERT packets that will have the Frame Relay Discard Eligibility bit set. Frames with this bit set may be more likley to get dropped in a congested network. (0) 0% of the test frames are marked discard eligible (25) 25% of the test frames are marked discard eligible (50) 50% of the test frames are marked discard eligible (75) 75% of the test frames are marked discard eligible (100) 100% of the test frames are marked discard eligible')
tfrapDiagVBERTTestPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapDiagVBERTTestPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDiagVBERTTestPeriod.setDescription("Specifies the duration of a VBERT test. Note that VBERT is subjected to the unit's Loopback Timer and will be terminated by whichever timer expires first. (10-1440): VBERT time duration in seconds")
tfrapStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 4))
tfrapStatusIntfTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 4, 1))
tfrapIntfDteMode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-connections", 1), ("active", 2), ("test", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfDteMode.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapIntfDteMode.setDescription('Status of allocation of T1 bandwidth to the DTE port data. (1) no connections - indicates the DTE port has no connections to the WAN. (2) Active - indicates DTE data rate has been assigned T1 DS0s and is in a normal data mode. (3) Test - indicates DTE data rate has been assigned T1 DS0s but is in a diagnostic condition.')
tfrapIntfDteRts = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfDteRts.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapIntfDteRts.setDescription('Status of the Request to Send (RTS) signal from the DTE port. (1) RTS Active (2) RTS Inactive')
tfrapIntfDteDtr = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfDteDtr.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapIntfDteDtr.setDescription('Status of the Data Terminal Ready (DTR) signal from the DTE port. (1) DTR Active (2) DTR Inactive')
tfrapIntfT1Mode = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-connections", 1), ("active", 2), ("test", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfT1Mode.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapIntfT1Mode.setDescription('Status of allocation of T1 bandwidth to the DTE port data. (1) no connections - indicates the DTE port has no connections to the WAN. (2) Active - indicates DTE data rate has been assigned T1 DS0s and is in a normal data mode. (3) Test - indicates DTE data rate has been assigned T1 DS0s but is in a diagnostic condition.')
tfrapIntfT1Status = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1-frame-sync-okay", 1), ("t1-frame-sync-with-errors", 2), ("signal-present-without-frame-sync", 3), ("signal-not-present", 4), ("not-applicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfT1Status.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapIntfT1Status.setDescription('Status of the signal received from the WAN (1) In Sync - unit has detected a properly framed T1 signal and is not experiencing any error conditions. (2) In Sync with Errors - unit has detected a properly framed T1 signal but is experiencing some error conditions. Refer to T1 current performance results for details. (3) Signal Detected without Frame Sync - while a signal is present from the WAN it does not contain the framing pattern defined for this unit. This could be either incorrectly configured T1 Frame type or the presence of an alarm condition on the WAN. (4) No Carrier - there is no signal detected from the WAN. (5) Not Applicable.')
tfrapIntfT1Alarms = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-alarms", 1), ("red-alarm-declared", 2), ("yellow-alarm-detected", 3), ("unframed-all-ones-detected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfT1Alarms.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapIntfT1Alarms.setDescription('Alarms present at the T1 port. (1) No alarm conditions present. (2) Red Alarm Declared - Unit has experienced loss of frame synchronization with the signal received from the WAN for an extended time and is reporting an alarm condition that severely impairs normal operation. During this Red Alarm condition the unit will transmit Yellow alarm back to the WAN. If this condition persists consult your service provider. (3) Yellow ALarm Detected - Unit is receiving a yellow alarm indication from the wide area network. Detection of yellow alarm implies that the attached device is in a red alarm conditon. Red alarm is declared due to the extended absence of a properly framed signal. If this condition persists consult your service provider. (4) Unframe All Ones Detected - Unit is receiving unframed all ones from the wide area network (AIS, blue alarm). Detection of AIS implies that the attached device is reporting an alarm condition from an upstream device. If this condition persists consult your service provider.')
tfrapIntfDteDcd = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfDteDcd.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapIntfDteDcd.setDescription('Status of the Data Carrier Detect (DCD) signal driven by this unit towards the DTE port (1) DCD Active (2) DCD Inactive')
tfrapIntfDteDsr = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfDteDsr.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapIntfDteDsr.setDescription('Status of the Data Set Ready (DSR) signal driven by this unit towards the DTE port. (1) DSR Active (2) DSR Inactive')
tfrapIntfDteCts = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIntfDteCts.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapIntfDteCts.setDescription('Status of the Clear to Send (CTS) signal driven by this unit towards the DTE port (1) CTS Active (2) CTS Inactive')
tfrapStatusLedTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 4, 4))
tfrapStatusDteModeLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("offLED-DTE-inactive", 1), ("greenLED-normal", 2), ("yellowLED-test-mode", 3), ("redLED-no-active-WAN-connection", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusDteModeLED.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapStatusDteModeLED.setDescription('Status of the DTE Mode LED. (1) DTE Mode LED off: Missing control signals (2) DTE Mode LED green: Normal (3) DTE Mode LED yellow: Test Mode')
tfrapStatusDteStatusLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offLED-inactive", 1), ("greenLED-active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusDteStatusLED.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapStatusDteStatusLED.setDescription('Status of the DTE Status LED. (1) DTE Status LED off: no connections to WAN (2) DTE Status LED green: normal')
tfrapStatusDteTxLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offLED-inactive", 1), ("greenLED-tx-data-transmitting", 2), ("yellowLED-disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusDteTxLED.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapStatusDteTxLED.setDescription('Status of the DTE Tx Data LED. In Frame Relay mode, this LED is ON (green) when the DTE is not sending HDLC Flags and is OFF when HDLC flags are being transmit. In CBO mode, the LED is ON (green) for a SPACE and OFF for a MARK. (1) DTE Transmit LED OFF: inactive (HDLC flags or CBO marks) (2) DTE Transmit LED ON: active (HDLC frames or CBO spaces)')
tfrapStatusDteRxLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offLED-inactive", 1), ("greenLED-rx-data-receiving", 2), ("yellowLED-disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusDteRxLED.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapStatusDteRxLED.setDescription('Status of the DTE Rx Data LED. In Frame Relay mode, this LED is ON (green) when the WAN is receiving HDLC Flags and is OFF when HDLC flags are being received. In CBO mode, the LED is ON (green) for a SPACE and OFF for a MARK. (1) DTE Receive LED OFF: inactive (HDLC flags or CBO marks) (2) DTE Receive LED ON: active (HDLC frames or CBO spaces)')
tfrapStatusT1ModeLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("greenLED-normal", 2), ("yellowLED-test-mode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusT1ModeLED.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapStatusT1ModeLED.setDescription('Status of the WAN Mode LED. (1) WAN Mode LED is green: normal data mode (2) WAN Mode LED is yellow: test mode')
tfrapStatusT1StatusLED = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("offLED-T1-no-signal", 1), ("greenLED-normal", 2), ("yellowLED-remote-alarm", 3), ("redLED-red-alarm", 4), ("blinking-redLED-no-carrier-red-alarm", 5), ("blinking-red-greenLED-transient-error", 6), ("blinking-red-yellowLED-AIS", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusT1StatusLED.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapStatusT1StatusLED.setDescription('Status of the WAN Status LED. (1) Off - no signal detected from WAN. (2) Green - framed signal detected with no errors (normal operation) (3) Yellow - remote alarm condition detected (yellow or AIS alarms) (4) Red - unit has declared Red Alarm due to the presence of an improperly framed signal from the WAN. (5) Blinking Red and Off - unit has declared Red Alarm due to the absence of a signal from the WAN. (6) Blinking Green and Red - unit is receiving a properly framed signal from the WAN but has detected a transient error condition. Possible Line Code Violations or ESF CRC errors indicating errored data bits. (7) Blinking Red and Yellow - unit is receiving an unframed all ones (AIS) from the WAN. This is indicative of an upstream alarm condition on the WAN.')
tfrapStatusAllLEDs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusAllLEDs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapStatusAllLEDs.setDescription("Status of all six TFRAP LEDs, encoded in a string. 'F' off '5' green '0' yellow 'A' red '7' blinking green and off '3' blinking yellow and off 'B' blinking red and off '4' blinking green and yellow '6' blinking green and red '8' blinking yellow and red Positionally, the 6 letters are DTE Mode, DTE status, Dte Tx, Dte Rx, T1 Mode, and T1 Status. For example, '555556' would mean: DTE in normal mode, active status, transmitting and receiving and T1 normal with transient errors.")
tfrapVnipTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 4, 2), )
if mibBuilder.loadTexts: tfrapVnipTopologyTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopologyTable.setDescription('VNIP topology is a feature that, for each interface, maps all compatible VNIP peers, their DLCI value, ip address and relative location. The topology is a fundamental prerequisite to applying the VNIP feature set which includes PVC-based delay measurement, diagnostics, and congestion monitoring. With VNIP enabled on an interface the unit will attempt to locate VNIP peers out that port. As peers are discovered and logged the unit will report the topology it has learned on its opposite interface. If VNIP is inactive on one interface it will not engage in any VNIP dialog; however it will continue to listen for topology messages on the inactive interface and will reflect these messages out the opposite interface if VNIP is enabled. With VNIP inactive on both interfaces the unit will transparently pass all VNIP messages. The topology database includes the interface, local DLCI value, remote peer DLCI value, remote peer ip address, and the number of VNIP hops in between. This table also reports the status of other VNIP features as well.')
tfrapVnipTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapVnipTopologyInterface"), (0, "TFRAP-MIB", "tfrapVnipTopologyIndex"))
if mibBuilder.loadTexts: tfrapVnipTopologyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopologyEntry.setDescription('The DLCI, IP address, and number of hops for a particular node, discovered via VNIP off of an interface. The entry may also have transit delay measurements and VBERT diagnostic status to report as well.')
tfrapVnipTopologyInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-interface", 1), ("t1-interface", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopologyInterface.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopologyInterface.setDescription('The interface off of which the peer was discovered. Topology is discovered by sending VNIP messages out each interface. Units discovered via a particular interface are kept in a list associated with that interface. (1) VNIP peers and status out DTE interface (2) VNIP peers and status out WAN interface')
tfrapVnipTopologyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopologyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopologyIndex.setDescription('The number of this discovered peer in the list of nodes for this interface. For each interface, the nodes are numbered 1 through n. This index is required when disabling or enabling VBERT/VLOOP to a particular peer.')
tfrapVnipTopologyDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopologyDlci.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopologyDlci.setDescription('The DLCI of the discovered neighboring peer. This may be different from the local DLCI.')
tfrapVnipTopologyIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopologyIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopologyIpAddr.setDescription('The IP address for the discovered peer.')
tfrapVnipTopologyNumHops = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopologyNumHops.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopologyNumHops.setDescription('The discovered peer is this number of hops away. Each hop is a VNIP peer.')
tfrapVnipTopologyLocalDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopologyLocalDlci.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopologyLocalDlci.setDescription('The DLCI from this unit over which the remote peer was discovered.')
tfrapVnipTopoTDNumSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoTDNumSamples.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopoTDNumSamples.setDescription('The number of transit delay samples collected.')
tfrapVnipTopoTDAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoTDAvgDelay.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopoTDAvgDelay.setDescription('The average transit delay between this unit and the remote peer (in milliseconds).')
tfrapVnipTopoTDMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoTDMaxDelay.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopoTDMaxDelay.setDescription('The maximum transit delay between this node and the remote peer (in milliseconds).')
tfrapVnipTopoTDMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoTDMinDelay.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopoTDMinDelay.setDescription('The minimum transit delay between this node and the remote peer (in milliseconds).')
tfrapVnipTopoTDLastDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoTDLastDelay.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopoTDLastDelay.setDescription('The most recent transit delay measured between this node and the remote peer (in milliseconds).')
tfrapVnipTopoVLOOPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopback-enable", 1), ("loopback-disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVLOOPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopoVLOOPStatus.setDescription('This selection displays the status of the VNIP PVC Loopback for this entry. This loopback is initiated by the remote node through the VLOOP utility, causing this node to loop data back to the remote node. (1) Virtual Loopback path present on this PVC due to command received from remote unit. All data received on this DLCI will be looped back out the same interface. (2) No active VLOOP test on this')
tfrapVnipTopoVBERTStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("testing", 2), ("test-failed", 3), ("test-completed", 4), ("in-test", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBERTStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopoVBERTStatus.setDescription('Displays the current status of the VBERT/VLOOP test. (1) Off: no test has run or the entry has been cleared (2) Testing: the entry is generating VBERT test frames (3) Test Failed: the request for a test on this entry failed (4) Test Completed: a test has run and is finished results are complete (5) In Test: the entry is on the receiving end of VBERT packets')
tfrapVnipTopoVBertTxDESetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertTxDESetFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopoVBertTxDESetFrames.setDescription('Displays the number of Frames transmitted during VBERT Test that had the Discard Eligibility indicator bit set.')
tfrapVnipTopoVBertRxDESetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertRxDESetFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopoVBertRxDESetFrames.setDescription('Displays the number of Frames received during VBERT Test that had the Discard Eligibility indicator bit set.')
tfrapVnipTopoVBertTxDEClrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertTxDEClrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopoVBertTxDEClrFrames.setDescription('Displays the number of Frames transmitted during VBERT Test that had the Discard Eligibility indicator bit cleared.')
tfrapVnipTopoVBertRxDEClrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertRxDEClrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopoVBertRxDEClrFrames.setDescription('Displays the number of Frames received during VBERT Test that had the Discard Eligibility indicator bit cleared.')
tfrapVnipTopoVBertTransitDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertTransitDelayMax.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopoVBertTransitDelayMax.setDescription('The maximum transit delay between this node and the remote peer during the VBERT test. This delay measurement will include internal device latencies. This result may differ from the VNIP transit delay measurement which accounts for internal latencies.')
tfrapVnipTopoVBertTransitDelayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertTransitDelayAvg.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopoVBertTransitDelayAvg.setDescription('The average transit delay between this node and the remote peer during the VBERT test. This delay measurement will include internal device latencies. This result may differ from the VNIP transit delay measurement which accounts for internal latencies')
tfrapVnipTopoVBertTimeElapse = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertTimeElapse.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopoVBertTimeElapse.setDescription('Elapsed time since VBERT/VLOOP test was started or cleared (in seconds).')
tfrapVnipTopoVBertPerUtilCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertPerUtilCIR.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopoVBertPerUtilCIR.setDescription(' The calculated percent of CIR utilization during a VBERT test, this value is only valid after a test is complete not during.')
tfrapVnipTopoVBertPerUtilEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapVnipTopoVBertPerUtilEIR.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTopoVBertPerUtilEIR.setDescription(' The calculated percent of EIR utilization during a VBERT test, this value is only valid after a test is complete not during.')
tfrapVnipTransitDelayClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-transit-delay", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapVnipTransitDelayClear.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVnipTransitDelayClear.setDescription('Allows the user to clear all the VNIP Transit Delay data collected in the VNIP topology database. (1) Clear entire Transit Delay results database')
tfrapLmiSourcing = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("initializing", 1), ("passthrough", 2), ("user-dte", 3), ("user-t1", 4), ("network-dte", 5), ("network-t1", 6), ("disabled", 7), ("both-ports", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapLmiSourcing.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapLmiSourcing.setDescription('If configured for Frame Relay with a non-zero LMI inactivity timer the unit will monitor the status of LMI and, if proper messaging is not detected, will attempt to emulate either Frame Relay DTE or DCE devices in attempt to restore LMI to any attached equipment and provide managed access for diagnostic purposes. Typically frads/routers are Frame Relay DTE while switches are Frame Relay DCE but this model may vary. In the absence of full-duplex LMI, the unit will cycle through various states in attempt to adapt to an LMI partner. The unit will try each state for the duration of the LMI Inactivity timer and then advance to the next one if satisfactory handshaking is not established. While in any of these states if full-duplex LMI handshaking does appear, the unit will immediately revert to the passthrough state. (1) initializing (2) Passthrough: not sourcing any LMI messages. (3) Status Enquiries out DTE interface: unit is emulating a Frame Relay DTE device out the its (physical) DTE interface. (4) Status Enquiries out WAN interface: unit is emulating a Frame Relay DTE device out the its WAN interface. (5) Status Responses out the DTE interface: unit is emulating a Frame Relay DCE device out the its (physical) DTE interface (provisioning the single default management DLCI). (6) Status Responses out the WAN interface: unit is emulating a Frame Relay DCE device out the its WAN interface (provisioning the single default management DLCI). (7) Disabled - LMI Inactivity timer is zero or unit not configured for a Frame Relay application. (8) Status Responses out both DTE and WAN interfaces: unit is configured for Fixed DCE mode of management and emulates a Frame Relay DCE independently on both ports (provisioning the single default management DLCI).')
tfrapVBertClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-vbert", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapVBertClear.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapVBertClear.setDescription('Allows the user to clear all the VBERT data collected in the VNIP topology database as long as the entry is not in a test status. (1) Clear all VBERT/VLOOP status information')
tfrapStatusMgmtTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 4, 3))
tfrapStatusMgmtChannel = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("slip", 2), ("private-dlci", 3), ("piggyback-dlci", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusMgmtChannel.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapStatusMgmtChannel.setDescription("This is the method in which the unit is configured for SNMP management access. (1) None: SNMP management disabled (2) SLIP: out-of-band management via asynchronous Serial Line IP (3) Private DLCI: in-band management using a private DLCI that is dedicated solely to this unit's management. (4) Piggyback DLCI: in-band management using any DLCI optionally multiplexing both management and user data.")
tfrapStatusMgmtInterface = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("comm", 1), ("dte", 2), ("t1", 3), ("dte-and-t1", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusMgmtInterface.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapStatusMgmtInterface.setDescription('This is the port(s) on which the management traffic will appear. (1) Async Maintenance(Comm)/Console port - SLIP mode (2) Local DTE interface: unit is configured for Private Local DLCI mode (3) Remote WAN Interface: unit is confiogured for Private Remote DLCI mode (4) DTE and WAN Interfaces: unit is configured for either Piggyback Bidirectional mode.')
tfrapStatusMgmtInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusMgmtInterfaceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapStatusMgmtInterfaceStatus.setDescription('This is the status of the port(s) on which the management traffic will appear. (1) Active: port or DLCI is configured and status is okay (2) Inactive: port or DLCI is declared out of service (3) Alarm: port or DLCI is experiencing an alarm condition that may interefere with management access ')
tfrapStatusMgmtDefaultDLCINo = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusMgmtDefaultDLCINo.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapStatusMgmtDefaultDLCINo.setDescription('This is the DLCI for the PVC that is defined for the Management port. All traffic using this DLCI in the Frame Replay packet will be destined for the InBand Management task.')
tfrapStatusMgmtDefaultDLCIStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("na", 1), ("dlci-active", 2), ("dlci-inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusMgmtDefaultDLCIStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapStatusMgmtDefaultDLCIStatus.setDescription('This is the status of the default management DLCI. (1) not applicable: SLIP mode or management is disabled (2) DLCI Active: default DLCI is active in the LMI full status response. (3) DLCI Inactive: default DLCI is not active in the LMI full status response.')
tfrapStatusLmiAutosense = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("searching", 2), ("learned-annex-d", 3), ("learned-annex-a", 4), ("learned-type1", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapStatusLmiAutosense.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapStatusLmiAutosense.setDescription("This indicates the current status of LMI Auto Sensing if it's enabled. (1) Disabled: LMI is configured as Type 1, Annex-D, or Annex-A (2) Searching: unit is attempting to determine the LMI type of the attached equipment by issuing LMI messages of each LMI type and searching for responses. (3) Learned Annex-D: unit has successfully detected Annex-D LMI (ANSI T1.617 Annex D) (4) Learned Annex-A: unit has successfully detected Annex-A LMI (ITU/CCITT Q.933 Annex A) (5) Learned Type 1: unit has successfully detected Type 1 LMI (Cisco, Group of four, LMI)")
tfrapPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5))
tfrapPerfPhysicalIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 1))
tfrapPerfT1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1), )
if mibBuilder.loadTexts: tfrapPerfT1CurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfT1CurrentTable.setDescription('The T1 physical layer performance numbers for the current 15 minute interval. These are defined and accumulated per ANSI specification T1.403 and AT&T publication 54016. Depending upon the configured T1 Framing mode, these results may be retrieved via ESF facility data link by service personnel.')
tfrapT1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapT1CurrentIndex"))
if mibBuilder.loadTexts: tfrapT1CurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1CurrentEntry.setDescription('An entry in the T1 Current Perf table. This table is structured for devices to support multiple T1 interfaces.')
tfrapT1CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1CurrentIndex.setDescription("The index value which uniquely identifies the T1 interface to which this entry is applicable. There's only one T1 on this unit so the index will always be 1.")
tfrapT1CurrentCrc6Events = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentCrc6Events.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1CurrentCrc6Events.setDescription('Count of CRC errors detected on an ESF framed circuit. In ESF framing a CRC is generated at the source, based upon the composite data. A CRC error indicates the presence of at least one bit error in an ESF superframe. This field is a free-running accumulation of CRC errors and IS NOT reset when the current 15 minute interval expires. It can be reset with the performance command tfrapT1PerfClearEvents. Not applicable if D4/SF framing is selcted.')
tfrapT1CurrentOofEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentOofEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1CurrentOofEvents.setDescription('Count of Out-of-Frame events on a T1 circuit. An out-of- frame event occurs when the frame synchronization criteria is lost and a resynchronization must occur. Data is interrupted during frame resynchronization. This field is a free-running accumulation of OOF transitions and IS NOT reset when the current 15 minute interval expires. It can be reset with the performance command tfrapT1PerfClearEvents.')
tfrapT1CurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1CurrentESs.setDescription('The number of Errored Seconds, encountered by a T1 interface in the current 15 minute inter- val. An errored second is a one-second interval with CRC errors or a loss of frame sync occurred.')
tfrapT1CurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1CurrentSESs.setDescription('The number of Severely Errored Seconds encountered by a t1 interface in the current 15 minute interval. A severely errored second is a one second interval with more than 320 CRC errors or one or more frame sync losses.')
tfrapT1CurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1CurrentSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a t1 interface in the current 15 minute interval. A SEFS is a one second interval with one or more frame sync losses.')
tfrapT1CurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1CurrentUASs.setDescription("The number of Unavailable Seconds encountered by a t1 interface in the current 15 minute in- terval. A UAS is a one second interval during which the received signal is classified as 'unavailable due to excessive errors'. A signal is unavailable after receiving ten consective severely errored seconds and stays unavailable until ten seconds without a severely errored second occur.")
tfrapT1CurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1CurrentCSSs.setDescription('The number of Controlled Slip Seconds encoun- tered by a t1 interface in the current 15 minute interval. A controlled slip is the replication or deletion of a T1 frame at the receiver. These events often indicate a T1 network timing problem.')
tfrapT1CurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentBESs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1CurrentBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in the current 15 minute interval. A BES is a one second interval with more than one and less than 320 CRC errors.')
tfrapT1CurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1CurrentLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1CurrentLCVs.setDescription('The number of Line Code Violations (LCVs) en- countered by a DS1 interface in the current 15 minute interval. LCVs are non-B8ZS related violations of the alternate mark inversion protocol. An excessive count usually indicates a B8ZS/AMI configuration mismatch in the T1 network.')
tfrapPerfT1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2), )
if mibBuilder.loadTexts: tfrapPerfT1IntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfT1IntervalTable.setDescription('The DS1 Interval table. A history of physical layer performance results are maintained and represented as 96 15-minute intervals. These are defined and accumulated per ANSI specification T1.403 and AT&T publication 54016. Depending upon the configured T1 Framing mode, these results may be retrieved via ESF facility data link by service personnel')
tfrapT1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapT1IntervalIndex"), (0, "TFRAP-MIB", "tfrapT1IntervalNumber"))
if mibBuilder.loadTexts: tfrapT1IntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1IntervalEntry.setDescription('An entry in the DS1 Interval table which includes physical layer statistics for each of the prior 96 15-minute intervals.')
tfrapT1IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1IntervalIndex.setDescription('The index value which uniquely identifies the t1 interface to which this entry is applicable. There is only one T1 on this unit so this index will be 1.')
tfrapT1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1IntervalNumber.setDescription('A number between 1 and 96, where 96 is the most recently completed 15 minute interval and 1 occurred 24 hours ago (assuming that all 96 intervals are valid).')
tfrapT1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1IntervalESs.setDescription('The number of Errored Seconds encountered by a t1 interface in one of the previous 96, indi- vidual 15 minute, intervals. An errored second is a one-second interval with CRC errors or a loss of frame sync occurred.')
tfrapT1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1IntervalSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a t1 interface in one of the previous 96, individual 15 minute, intervals. A severely errored second is a one second interval with more than 320 CRC errors or one or more frame sync losses.')
tfrapT1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1IntervalSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a t1 interface in one of the previous 96, individual 15 minute, intervals. A SEFS is a one second interval with one or more frame sync losses.')
tfrapT1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1IntervalUASs.setDescription("The number of Unavailable Seconds encountered by a t1 interface in one of the previous 96, individual 15 minute, intervals. A UAS is a one second interval during which the received signal is classified as 'unavailable due to excessive errors'. A signal is unavailable after receiving ten consective severely errored seconds and stays unavailable until ten seconds without a severely errored second occur.")
tfrapT1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1IntervalCSSs.setDescription('The number of Controlled Slip Seconds encoun- tered by a t1 interface in one of the previous 96, individual 15 minute, intervals. A controlled slip is the replication or deletion of a T1 frame at the receiver. These events often indicate a T1 network timing problem.')
tfrapT1IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1IntervalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a t1 interface in one of the previous 96, individual 15 minute, intervals. A BES is a one second interval with more than one and less than 320 CRC errors.')
tfrapT1IntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1IntervalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1IntervalLCVs.setDescription('The number of Line Code Violations (LCVs) en- countered by a DS1 interface in the current 15 minute interval. LCVs are non-B8ZS related violations of the alternate mark inversion protocol. An excessive count usually indicates a B8ZS/AMI configuration mismatch in the T1 network.')
tfrapPerfT1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3), )
if mibBuilder.loadTexts: tfrapPerfT1TotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfT1TotalTable.setDescription('The T1 Total table cumulative physical layer performance results from the past 24 hours. These are defined and accumulated per ANSI specification T1.403 and AT&T publication 54016. Depending upon the configured T1 Framing mode, these results may be retrieved via ESF facility data link by service personnel.')
tfrapT1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapT1TotalIndex"))
if mibBuilder.loadTexts: tfrapT1TotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1TotalEntry.setDescription('An entry in the T1 Physical Layer Measurement Totals table.')
tfrapT1TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1TotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1TotalIndex.setDescription('The index value which uniquely identifies the t1 interface to which this entry is applica- ble. There is only one T1 port on this device so this index must be 1.')
tfrapT1TotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1TotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1TotalESs.setDescription('The number of Errored Seconds encountered by a t1 interface in the previous 24 hour interval. An errored second is a one-second interval with CRC errors or a loss of frame sync occurred.')
tfrapT1TotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1TotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1TotalSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a t1 interface in the previous 24 hour interval. A severely errored second is a one second interval with more than 320 CRC errors or one or more frame sync losses.')
tfrapT1TotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1TotalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1TotalSEFSs.setDescription('The number of Severely Errored Framing Seconds 24 hour interval. A SEFS is a one second interval with one or more frame sync losses.')
tfrapT1TotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1TotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1TotalUASs.setDescription("The number of Unavailable Seconds encountered by a t1 interface in the previous 24 hour in- terval. A UAS is a one second interval during which the received signal is classified as 'unavailable due to excessive errors'. A signal is unavailable after receiving ten consective severely errored seconds and stays unavailable until ten seconds without a severely errored second occur.")
tfrapT1TotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1TotalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1TotalCSSs.setDescription('The number of Controlled Slip Seconds encoun- tered by a t1 interface in the previous 24 hour interval. A controlled slip is the replication or deletion of a T1 frame at the receiver. These events often indicate a T1 network timing problem.')
tfrapT1TotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1TotalBESs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1TotalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a t1 interface in the previous 24 hour interval. A BES is a one second interval with more than one and less than 320 CRC errors.')
tfrapT1TotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapT1TotalLCVs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1TotalLCVs.setDescription('The number of Line Code Violations (LCVs) en- countered by a t1 interface in the current 15 minute interval. LCVs are non-B8ZS related violations of the alternate mark inversion protocol. An excessive count usually indicates a B8ZS/AMI configuration mismatch in the T1 network.')
tfrapT1PerfCmdTypeTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 4))
tfrapT1PerfFreezeState = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freeze-reg", 1), ("unfreeze-reg", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tfrapT1PerfFreezeState.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1PerfFreezeState.setDescription("This command halts the node's performance monitoring and freezes the current, interval, and total performance register values.")
tfrapT1PerfClearEvents = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-events", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapT1PerfClearEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1PerfClearEvents.setDescription("This command resets all of the (user's) error event registers. This includes the CRC6 and Out-of-Frame counts. It does not affect the interval or 24 hour performance totals.")
tfrapT1PerfClearAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-all", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapT1PerfClearAll.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapT1PerfClearAll.setDescription("This command resets all of the (user's) performance registers.")
tfrapPerfMgmtIp = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 2))
tfrapPerfMgmtIpIFStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 1))
tfrapPerfMgmtIpIFInOctets = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIFInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpIFInOctets.setDescription('The count of all octets associated with received frames that are specifically addressed as management packets for this unit. Same as ifInOctets in mib-2.')
tfrapPerfMgmtIpIFInErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIFInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpIFInErrors.setDescription('The count of packets associated with received frames that are specifically addressed as management packets for this unit which could not be handled because of errors. Same as ifInErrors in mib-2.')
tfrapPerfMgmtIpIFOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIFOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpIFOutOctets.setDescription('The count of all octets associated with generated frames that are specifically addressed as management packets from this unit. Same as ifOutOctets in mib-2. Same as ifOutOctets in mib-2.')
tfrapPerfMgmtIpIFOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIFOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpIFOperStatus.setDescription('The current operational state of the management interface. Same as ifOperStatus in mib-2. (1) Interface Up (2) Interface Down (3) Interface in Test')
tfrapPerfMgmtIpIPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2))
tfrapPerfMgmtIpIPInRcv = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInRcv.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInRcv.setDescription('The count of all ip datagrams received which are specifically addressed as management frames for this unit. Same as ipInReceives in mib-2.')
tfrapPerfMgmtIpIPInHdrErr = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInHdrErr.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInHdrErr.setDescription('The count of ip datagrams received which are specifically addressed as management frames for this unit that were discarded because of errors in their IP headers. Same as ipInHdrErrors in mib-2.')
tfrapPerfMgmtIpIPInAddrErr = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInAddrErr.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInAddrErr.setDescription('The count of ip datagrams received which are specifically addressed as management frames for this unit that were discarded because unexpected or invalid IP addresses in their IP headers. Same as ipInAddrErrors in mib-2.')
tfrapPerfMgmtIpIPInProtUnk = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInProtUnk.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInProtUnk.setDescription('The count of ip datagrams received which are specifically addressed as management frames for this unit that were discarded because of unsupported protocols. Same as ipInUnknownProtos in mib-2.')
tfrapPerfMgmtIpIPInDscrd = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInDscrd.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInDscrd.setDescription('The count of datagrams received which are specifically addressed as management frames for this unit that were discarded for reasons other than a problem with the datagram. Same as ipInDiscards in mib-2.')
tfrapPerfMgmtIpIPInDlvrs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInDlvrs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPInDlvrs.setDescription('The count ofip datagrams received which are specifically addressed as management frames for this unit that were delivered to IP client protocols. Same as ipInDelivers in mib-2.')
tfrapPerfMgmtIpIPOutRqst = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPOutRqst.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPOutRqst.setDescription('The count of all outgoing datagrams generated by this unit which are specifically addressed as management frames. Same as ipOutRequests in mib-2.')
tfrapPerfMgmtIpIPOutDscrd = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPOutDscrd.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPOutDscrd.setDescription('The count of outgoing datagrams generated by this unit which are specifically addressed as management frames that were discarded for reasons other than a problem with the datagram. Same as ipOutDiscards in mib-2.')
tfrapPerfMgmtIpIPOutNoRt = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPOutNoRt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpIPOutNoRt.setDescription('The count of outgoing datagrams generated by this unit which are specifically addressed as management frames that were discarded because no route could be found for transmission. Same as ipOutNoRoutes in mib-2.')
tfrapPerfMgmtIpICMPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3))
tfrapPerfMgmtIpICMPInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInMsgs.setDescription('The count of all ICMP messages received which are addressed to this unit. Same as icmpInMsgs in mib-2.')
tfrapPerfMgmtIpICMPInErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInErrors.setDescription('The count of ICMP messages received which are addressed to this unit but contain errors. Same as icmpInErrors in mib-2.')
tfrapPerfMgmtIpICMPInDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInDestUnreachs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInDestUnreachs.setDescription('The count of ICMP Destination Unreachable messages received which are addressed to this unit. Same as icmpInDestUnreachs in mib-2.')
tfrapPerfMgmtIpICMPInTimeExcds = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInTimeExcds.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInTimeExcds.setDescription('The count of ICMP Time Exceeded messages received which are addressed to this unit. Same as icmpInTimeExcds in mib-2.')
tfrapPerfMgmtIpICMPInParmProbs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInParmProbs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInParmProbs.setDescription('The count of ICMP Parameter Problem messages received which are addressed to this unit. Same as icmpInParmProbs in mib-2.')
tfrapPerfMgmtIpICMPInRedirects = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInRedirects.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInRedirects.setDescription('The count of ICMP Redirect messages received which are addressed to this unit. Same as icmpInRedirects in mib-2.')
tfrapPerfMgmtIpICMPInEchos = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInEchos.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInEchos.setDescription('The count of ICMP Echo messages received which are addressed to this unit. Same as icmpInEchos in mib-2.')
tfrapPerfMgmtIpICMPInEchoReps = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInEchoReps.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPInEchoReps.setDescription('The count of ICMP Echo Reply messages received which are addressed to this unit. Same as icmpInEchoReps in mib-2.')
tfrapPerfMgmtIpICMPOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutMsgs.setDescription('The count of all outgoing ICMP messages originating from this node. Same as icmpOutMsgs in mib-2.')
tfrapPerfMgmtIpICMPOutErrors = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutErrors.setDescription('The count of outgoing ICMP messages generated by this unit which are not transmitted due problems found by the ICMP layer. Same as icmpOutErrors in mib-2.')
tfrapPerfMgmtIpICMPOutDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutDestUnreachs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutDestUnreachs.setDescription('The count of outgoing ICMP Destination Unreachable messages generated by this unit. Same as icmpOutDestUnreachs in mib-2.')
tfrapPerfMgmtIpICMPOutParmProbs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutParmProbs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutParmProbs.setDescription('The count of outgoing ICMP Parameter Problem messages generated by this unit. Same as icmpOutParmProbs in mib-2.')
tfrapPerfMgmtIpICMPOutRedirects = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutRedirects.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutRedirects.setDescription('The count of outgoing ICMP Redirect messages generated by this unit. Same as icmpOutRedirects in mib-2.')
tfrapPerfMgmtIpICMPOutEchos = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutEchos.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutEchos.setDescription('The count of outgoing ICMP Echo messages generated by this unit. Same as icmpOutEchos in mib-2.')
tfrapPerfMgmtIpICMPOutEchoReps = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutEchoReps.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpICMPOutEchoReps.setDescription('The count of outgoing ICMP Echo Reply messages generated by this unit. Same as icmpOutEchoReps in mib-2.')
tfrapPerfMgmtIpUDPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 4))
tfrapPerfMgmtIpUDPInDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpUDPInDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpUDPInDatagrams.setDescription('The count of all UDP datagrams received that are addressed as management frames for this unit. Same as udpInDatagrams in mib-2.')
tfrapPerfMgmtIpUDPOutDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpUDPOutDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpUDPOutDatagrams.setDescription('The count of all UDP datagrams generated by this unit. Same as udpOutDatagrams in mib-2.')
tfrapPerfMgmtIpUDPNoPorts = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpUDPNoPorts.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpUDPNoPorts.setDescription('The count of all UDP datagrams received that are addressed as management frames for this unit with no application at the destination port. Same as udpNoPorts in mib-2.')
tfrapPerfMgmtIpTCPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 5))
tfrapPerfMgmtIpTCPActiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPActiveOpens.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPActiveOpens.setDescription('The count of the times TCP connections specific to this unit have made a direct state transition from CLOSED to SYN-SENT. Same as tcpActiveOpens in mib-2.')
tfrapPerfMgmtIpTCPPassiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPPassiveOpens.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPPassiveOpens.setDescription('The count of the times TCP connections specific to this unit have made a direct state transition from CLOSED to SYN-RCVD. Same as tcpPassiveOpens in mib-2.')
tfrapPerfMgmtIpTCPAttemptFails = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPAttemptFails.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPAttemptFails.setDescription('The count of the times TCP connections specific to this unit have made a direct state transition from SYN-SENT or SYN-RCVD to CLOSED state, plus the count of the times TCP connections have made a direct state transition from SYN-RCVD to LISTEN. Same as tcpAttemptFails in mib-2.')
tfrapPerfMgmtIpTCPCurrEstab = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPCurrEstab.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPCurrEstab.setDescription('The count of the TCP connections specific to this unit in state ESTABLISHED or CLOSE-WAIT. Same as tcpCurrEstab in mib-2.')
tfrapPerfMgmtIpTCPInSegs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPInSegs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPInSegs.setDescription('The count of all the segments received that are addressed as management frames for this unit. Same as tcpInSegs in mib-2.')
tfrapPerfMgmtIpTCPOutSegs = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPOutSegs.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfMgmtIpTCPOutSegs.setDescription('The count of all the segments generated from this unit. Same as tcpOutSegs in mib-2.')
tfrapPerfThruput = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 3))
tfrapPerfThruputPerIntfTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1), )
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfTable.setDescription('The throughput per interface table. These values are accumulated across all DLCIs.')
tfrapPerfThruputPerIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfThruputPerIntfIndex"))
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfEntry.setDescription('An entry in the throughput per interface table.')
tfrapPerfThruputPerIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("t1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfIndex.setDescription('Interface for which the statistics apply. (1) DTE interface (2) T1 interface')
tfrapPerfThruputPerIntfRxByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfRxByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfRxByteCnt.setDescription('The number of framed bytes that have been received on this interface.')
tfrapPerfThruputPerIntfTxByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfTxByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfTxByteCnt.setDescription('The number of framed bytes that have been transmit on this interface.')
tfrapPerfThruputPerIntfRxFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfRxFrameCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfRxFrameCnt.setDescription('The number of frames that have been received on this interface.')
tfrapPerfThruputPerIntfTxFrameCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfTxFrameCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfTxFrameCnt.setDescription('The number of frames that have been transmit on this interface.')
tfrapPerfThruputPerIntfRxCrcErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfRxCrcErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfRxCrcErrCnt.setDescription('The number of frames with CRC errors received on this interface.')
tfrapPerfThruputPerIntfRxAbortCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfRxAbortCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerIntfRxAbortCnt.setDescription('The number of aborted frames received on this interface.')
class Index(Integer32):
    pass

tfrapPerfThruputPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2), )
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTable.setDescription('Layer 2 statistics on a per-DLCI basis. Transmit direction is from DTE to WAN and receive direction is from the WAN towards the DTE.')
tfrapPerfThruputPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfThruputPerDlciIndex"), (0, "TFRAP-MIB", "tfrapPerfThruputPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciEntry.setDescription('The Statistics for a particular Data Link Connection Management Interface (DLCI).')
tfrapPerfThruputPerDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciIndex.setDescription('This value must be in the range 1-3. Other than that, this value is ignored as all three will return the same result.')
tfrapPerfThruputPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciValue.setDescription('The DLCI value in which the Statistics are associated.')
tfrapPerfThruputPerDlciCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciCreateTime.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciCreateTime.setDescription('The amount of time elapsed since this DLCI was first detected through traffic sensing or in an LMI message (in seconds).')
tfrapPerfThruputPerDlciChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciChangeTime.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciChangeTime.setDescription('The amount of elapsed time since this DLCI last changed state from active to inactive or vice versa (in seconds).')
tfrapPerfThruputPerDlciRxByte = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxByte.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxByte.setDescription('The number of bytes that have been received from the WAN towards the DTE on this DLCI. This count will include any frames that are terminated by the unit and do not pass through to the opposite interface (management and networking data).')
tfrapPerfThruputPerDlciTxByte = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTxByte.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTxByte.setDescription('The number of bytes that have been transmit from the DTE towards the WAN on this DLCI. This count will include any frames that are terminated by the unit and do not pass through to the opposite interface (management and networking data).')
tfrapPerfThruputPerDlciRxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxFrame.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxFrame.setDescription('The number of frames that have been received from the WAN towards to the DTE on this DLCI. This count will include any frames that are terminated by the unit and do not pass through to the opposite interface (management and networking data).')
tfrapPerfThruputPerDlciTxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTxFrame.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTxFrame.setDescription('The number of frames that have been transmit from the DTE towards the WAN on this DLCI. This count will include any frames that are terminated by the unit and do not pass through to the opposite interface (management and networking data).')
tfrapPerfThruputPerDlciRxFecn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxFecn.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxFecn.setDescription('The number frames received from the WAN towards the DTE that have had the Forward Explict Congestion Notification (FECN) bit set on this DLCI. This count will include any frames that are terminated by the unit and do not pass through to the opposite interface (management and networking data).')
tfrapPerfThruputPerDlciRxBecn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxBecn.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxBecn.setDescription('The number frames received from the WAN towards the DTE that have had the Backward Explict Congestion Notification (BECN) bit set on this DLCI. This count will include any frames that are terminated by the unit and do not pass through to the opposite interface (management and networking data).')
tfrapPerfThruputPerDlciRxDe = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxDe.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxDe.setDescription('The number frames received from the WAN towards the DTE that have had the Discard Eligibility (DE) bit set on this DLCI. This count will include any frames that are terminated by the unit and do not pass through to the opposite interface (management and networking data).')
tfrapPerfThruputPerDlciTxDe = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTxDe.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTxDe.setDescription('The number frames transmit towards the WAN from the DTE that have had the Discard Eligibility (DE) bit set on this DLCI. This count will include any frames that are terminated by the unit and do not pass through to the opposite interface (management and networking data).')
tfrapPerfThruputPerDlciRxThruput = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxThruput.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxThruput.setDescription('The number of bits/sec received from the WAN on this DLCI. This count will include any frames that are terminated by the unit and do not pass through to the opposite interface (management and networking data).')
tfrapPerfThruputPerDlciTxThruput = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTxThruput.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTxThruput.setDescription('The number of bits/sec transmit to the WAN on this DLCI. This count will include any frames that are terminated by the unit and do not pass through to the opposite interface (management and networking data).')
tfrapPerfThruputPerDlciCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciCIR.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciCIR.setDescription('The Committed Information Rate (CIR) for this DLCI. This can come form one of three sources: From the LMI Full Status Response, configured by the user, or the DTE line rate (default).')
tfrapPerfThruputPerDlciCirType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cir-acquired-from-lmi", 1), ("cir-configured-by-user", 2), ("cir-is-dte-datarate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciCirType.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciCirType.setDescription('The source of the CIR value for this DLCI. (1) CIR acquired from LMI message. Will override user configured CIR. This feature is not supported by all Frame Relay DCE (switches). (2) CIR configured by user. (3) CIR is DTE Line Rate. Default if CIR is not set by one of the other methods.')
tfrapPerfThruputPerDlciUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciUptime.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciUptime.setDescription('The total amount of time that the DLCI has been up as reproted by the LMI Full Status Response (in seconds).')
tfrapPerfThruputPerDlciDowntime = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciDowntime.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciDowntime.setDescription("The total amount of time that the DLCI has been declared down (in seconds). A DLCI is Down if it's explicitly declared Inactive through LMI or if it's missing from the LMI Full Status message or if there is no Full Status message at all.")
tfrapPerfThruputPerDlciPvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pvc-active", 1), ("pvc-inactive", 2), ("pvc-unprovisioned", 3), ("pvc-not-in-lmi", 4), ("pvc-lmi-timeout", 5), ("pvc-undetermined", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciPvcState.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciPvcState.setDescription('The current state of the DLCI: (1) DLCI marked active in last full status LMI (2) DLCI in last full status LMI but not marked active (3) DLCI has never been seen in a full status LMI (4) DLCI was seen at least once in a full status LMI but was not in the last full status LMI (5) the full status LMI has timed out; all previously active or inactive DLCIs are changed to this state (6) DLCI was detected in the traffic stream and a full status LMI has not been received so the state cannot be determined yet. ')
tfrapPerfThruputPerDlciOutageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciOutageCount.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciOutageCount.setDescription('The number of times the smperPerfThruputPerDlciPvcState transitions from pvc-active or pvc-undetermined to one of the other (inactive) states. ')
tfrapPerfThruputPerDlciAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciAvailability.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciAvailability.setDescription('The measure of the percentage time the DLCI is available: UpTime/CreateTime or zero if CreateTime = 0. (in 1/1000 per cent; i.e. availability = 1000 converts to 1%). ')
tfrapPerfThruputPerDlciMTBSO = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciMTBSO.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciMTBSO.setDescription('Mean Time Between Service Outages: UpTime/OutageCount or zero if OutageCount = 0 (in seconds). ')
tfrapPerfThruputPerDlciMTTSR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciMTTSR.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciMTTSR.setDescription('Mean Time to ServiceRestoral: DownTime/OutageCount or zero if OutageCount = 0 (in seconds). ')
tfrapPerfThruputPerDlciEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("encap-na", 1), ("encap-1490", 2), ("encap-cisco", 3), ("encap-annex-g", 4), ("encap-other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciEncapType.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciEncapType.setDescription('The encapsulation protocol seen in the last frame analyzed on this DLCI: (1) DLCI is the LMI DLCI or no frames have been analyzed (2) The encapsulation is per rfc1490 (3) The encapsulation is per Cisco proprietary (4) The encapsulation is per Annex-G (X.25 over frame relay) (5) The encapsulation is not one of the above. ')
tfrapPerfThruputPerDlciRxUtilizationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("over-threshold", 2), ("alarm", 3), ("alarm-under-threshold", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxUtilizationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciRxUtilizationStatus.setDescription(' The status of the per-DLCI utilization alarm in the receive direction. (1) there is no alarm condition; utilization is under the configured CIR percentage threshold; if traps are enabled and the alarm had been previously triggered, a utilization alarm clear trap will be sent. (2) the utilization has been over the configured CIR percentage threshold for less than the configured duration. (3) the utilization has been over the configured CIR percentage threshold for more than the configured duration; if traps are enabled a utilization exceeded trap will be sent. (4) the utilization has been under the configured CIR percentage threshold for less than the configured duration. ')
tfrapPerfThruputPerDlciTxUtilizationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("over-threshold", 2), ("alarm", 3), ("alarm-under-threshold", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTxUtilizationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciTxUtilizationStatus.setDescription(' The status of the per-DLCI utilization alarm in the transmit direction. (1) there is no alarm condition; utilization is under the configured CIR percentage threshold; if traps are enabled and the alarm had been previously triggered, a utilization alarm clear trap will be sent. (2) the utilization has been over the configured CIR percentage threshold for less than the configured duration. (3) the utilization has been over the configured CIR percentage threshold for more than the configured duration; if traps are enabled a utilization exceeded trap will be sent. (4) the utilization has been under the configured CIR percentage threshold for less than the configured duration. ')
tfrapPerfThruputPerDlciEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciEIR.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputPerDlciEIR.setDescription('The Excess Information Rate. This is defined to be the maximum rate traffic is (supposed to be) allowed to burst to.')
tfrapPerfThruputCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3))
tfrapPerfThruputCmdClearDteStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdClearDteStats.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputCmdClearDteStats.setDescription('Allows the user to zero out all the interface statistics in the DTE portion of the ThruputPerIntf statistics table. (1) Clear DTE interface statistics command.')
tfrapPerfThruputCmdClearT1Stats = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdClearT1Stats.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputCmdClearT1Stats.setDescription('Allows the user to zero out all the interface statistics in the WAN portion of the ThruputPerIntf statistics table. (1) Clear WAN interface statistics command.')
tfrapPerfThruputCmdClearAllIntfStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdClearAllIntfStats.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputCmdClearAllIntfStats.setDescription('Allows the user to zero out all the statistics in the ThruputPerIntf statistics table.')
tfrapPerfThruputCmdClearDlciStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdClearDlciStats.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputCmdClearDlciStats.setDescription('Allows the user to zero out all the per-DLCI statistics in the ThruputPerDlci statistics table and the the short term statistics tables. (1) Clear layer 2 per-DLCI statistics command.')
tfrapPerfThruputCmdClearAllStats = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdClearAllStats.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputCmdClearAllStats.setDescription('Allows the user to zero out all the statistics in the ThruputPerIntf and ThruputPerDlci statistics tables and in the short term statistics tables. (1) Clear all interface and layer 2 per-DLCI statistics.')
tfrapPerfThruputCmdRemoveStsDlci = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdRemoveStsDlci.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputCmdRemoveStsDlci.setDescription('Allows the user to remove a Dlci from the short term statistics tables.')
tfrapPerfThruputCmdReplaceDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 7), )
if mibBuilder.loadTexts: tfrapPerfThruputCmdReplaceDlciTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputCmdReplaceDlciTable.setDescription('Allows the user to replace one DLCI in the short-term statistics table with another one.')
tfrapPerfThruputCmdReplaceDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 7, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfThruputCmdReplaceDlciValue"))
if mibBuilder.loadTexts: tfrapPerfThruputCmdReplaceDlciEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputCmdReplaceDlciEntry.setDescription('Allows the user to replace one DLCI in the short-term statistics table with another one.')
tfrapPerfThruputCmdReplaceDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdReplaceDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputCmdReplaceDlciValue.setDescription('A Dlci that is in the short-term stats table. Index by this Dlci value to identify the statistics entry to be replaced.')
tfrapPerfThruputCmdReplaceDlciNewValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 7, 1, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdReplaceDlciNewValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputCmdReplaceDlciNewValue.setDescription('A Dlci that is to replace another in the short-term stats table. Index by this Dlci value to identify the statistics entry to do the replacing.')
tfrapPerfThruputCmdAvailabilityStsDlciReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdAvailabilityStsDlciReset.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputCmdAvailabilityStsDlciReset.setDescription('Allows the user to reset the availability statistics of an individual Dlci within the short-term stats table.')
tfrapPerfThruputCmdAvailabilityStsDlciResetAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 9), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdAvailabilityStsDlciResetAll.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputCmdAvailabilityStsDlciResetAll.setDescription("Allows the user to reset the availability statistics of all Dlci's within the short-term stats table.")
tfrapPerfThruputCmdCountsStsDlciReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 10), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdCountsStsDlciReset.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputCmdCountsStsDlciReset.setDescription('Allows the user to reset the count statistics of an individual Dlci within the short-term stats table.')
tfrapPerfThruputCmdCountsStsDlciResetAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 11), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdCountsStsDlciResetAll.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputCmdCountsStsDlciResetAll.setDescription("Allows the user to reset the count statistics of all Dlci's within the short-term stats table.")
tfrapPerfThruputCmdAllStsDlciReset = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 12), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdAllStsDlciReset.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputCmdAllStsDlciReset.setDescription('Allows the user to reset both the count and availability statistics of an individual Dlci within the short-term stats table.')
tfrapPerfThruputCmdAllStsDlciResetAll = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 3, 3, 13), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfThruputCmdAllStsDlciResetAll.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfThruputCmdAllStsDlciResetAll.setDescription("Allows the user to reset both the count and the availability statistics of all Dlci's within the short-term stats table.")
tfrapPerfNetworkShortTerm = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 4))
tfrapPerfNetwProtoPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1), )
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTable.setDescription('The Short Term Statistics on the Network Layer protocol for each DLCI. These are protocol-based per-DLCI statistics. The Short Term model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval).')
tfrapPerfNetwProtoPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfNetwProtoPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfNetwProtoPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciEntry.setDescription('The Network Layer Short Term Statistics for a particular DLCI. This table organizes statistics by high-layer network protocol.')
tfrapPerfNetwProtoPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfNetwProtoPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciValue.setDescription('The DLCI value with which the Statistics are associated.')
tfrapPerfNetwProtoPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxTotal.setDescription('The total number of received Network Layer bytes that have been counted on this DLCI.')
tfrapPerfNetwProtoPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxTotal.setDescription('The total number of transmitted Network Layer bytes that have been counted on this DLCI.')
tfrapPerfNetwProtoPerDlciRxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxIp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxIp.setDescription('The number of received IP bytes that have been counted on this DLCI.')
tfrapPerfNetwProtoPerDlciTxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxIp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxIp.setDescription('The number of transmitted IP bytes that have been counted on this DLCI.')
tfrapPerfNetwProtoPerDlciRxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxIpx.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxIpx.setDescription('The number of received IPX bytes that have been counted on this DLCI.')
tfrapPerfNetwProtoPerDlciTxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxIpx.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxIpx.setDescription('The number of transmitted IPX bytes that have been counted on this DLCI.')
tfrapPerfNetwProtoPerDlciRxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxSna.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxSna.setDescription('The number of received SNA bytes that have been counted on this DLCI.')
tfrapPerfNetwProtoPerDlciTxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxSna.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxSna.setDescription('The number of transmitted SNA bytes that have been counted on this DLCI.')
tfrapPerfNetwProtoPerDlciRxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxArp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxArp.setDescription('The number of received ARP bytes that have been counted on this DLCI.')
tfrapPerfNetwProtoPerDlciTxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxArp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxArp.setDescription('The number of transmitted ARP bytes that have been counted on this DLCI.')
tfrapPerfNetwProtoPerDlciRxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxCisco.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxCisco.setDescription('The number of received Cisco protocol bytes that have been counted on this DLCI.')
tfrapPerfNetwProtoPerDlciTxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxCisco.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxCisco.setDescription('The number of transmitted Cisco protocol bytes that have been counted on this DLCI.')
tfrapPerfNetwProtoPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxOther.setDescription('The number of received bytes on this DLCI from protocols that are not counted elsewhere in this table.')
tfrapPerfNetwProtoPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxOther.setDescription('The number of transmitted bytes on this DLCI from protocols that are not counted elsewhere in this table.')
tfrapPerfNetwProtoPerDlciRxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxVnip.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxVnip.setDescription('The number of received VNIP protocol bytes that have been counted on this DLCI.')
tfrapPerfNetwProtoPerDlciTxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxVnip.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxVnip.setDescription('The number of transmitted VNIP protocol bytes that have been counted on this DLCI.')
tfrapPerfNetwProtoPerDlciRxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxAnnexG.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciRxAnnexG.setDescription('The number of received Annex G protocol bytes that have been counted on this DLCI.')
tfrapPerfNetwProtoPerDlciTxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxAnnexG.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoPerDlciTxAnnexG.setDescription('The number of transmitted Annex G protocol bytes that have been counted on this DLCI.')
tfrapPerfNetwProtoTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2), )
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTable.setDescription('The Short Term Statistics on Network Layer protocols summed across all DLCIs.')
tfrapPerfNetwProtoTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfNetwProtoTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalEntry.setDescription('The Network Layer Short Term Statistics for a particular DLCI.')
tfrapPerfNetwProtoTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfNetwProtoTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxTotal.setDescription('The total number of received Network Layer bytes that have been counted across all DLCIs.')
tfrapPerfNetwProtoTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxTotal.setDescription('The total number of transmitted Network Layer bytes that have been counted across all DLCIs.')
tfrapPerfNetwProtoTotalRxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxIp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxIp.setDescription('The number of received IP bytes that have been counted across all DLCIs.')
tfrapPerfNetwProtoTotalTxIp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxIp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxIp.setDescription('The number of transmitted IP bytes that have been counted across all DLCIs.')
tfrapPerfNetwProtoTotalRxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxIpx.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxIpx.setDescription('The number of received IPX bytes that have been counted across all DLCIs.')
tfrapPerfNetwProtoTotalTxIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxIpx.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxIpx.setDescription('The number of transmitted IPX bytes that have been counted across all DLCIs.')
tfrapPerfNetwProtoTotalRxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxSna.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxSna.setDescription('The number of received SNA bytes that have been counted across all DLCIs.')
tfrapPerfNetwProtoTotalTxSna = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxSna.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxSna.setDescription('The number of transmitted SNA bytes that have been counted across all DLCIs.')
tfrapPerfNetwProtoTotalRxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxArp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxArp.setDescription('The number of received ARP bytes that have been counted across all DLCIs.')
tfrapPerfNetwProtoTotalTxArp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxArp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxArp.setDescription('The number of transmitted ARP bytes that have been counted across all DLCIs.')
tfrapPerfNetwProtoTotalRxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxCisco.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxCisco.setDescription('The number of received Cisco protocol bytes that have been counted across all DLCIs.')
tfrapPerfNetwProtoTotalTxCisco = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxCisco.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxCisco.setDescription('The number of transmitted Cisco protocol bytes that have been counted across all DLCIs.')
tfrapPerfNetwProtoTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxOther.setDescription('The number of received bytes across all DLCIs from protocols that are not counted elsewhere in this table.')
tfrapPerfNetwProtoTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxOther.setDescription('The number of transmitted bytes across all DLCIs from protocols that are not counted elsewhere in this table.')
tfrapPerfNetwProtoTotalRxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxVnip.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxVnip.setDescription('The number of received VNIP protocol bytes that have been counted across all DLCIs.')
tfrapPerfNetwProtoTotalTxVnip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxVnip.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxVnip.setDescription('The number of transmitted VNIP protocol bytes that have been counted across all DLCIs.')
tfrapPerfNetwProtoTotalRxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxAnnexG.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalRxAnnexG.setDescription('The number of received Annex G protocol bytes that have been counted across all DLCIs.')
tfrapPerfNetwProtoTotalTxAnnexG = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxAnnexG.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwProtoTotalTxAnnexG.setDescription('The number of transmitted Annex G protocol bytes that have been counted across all DLCIs.')
tfrapPerfIpPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3), )
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTable.setDescription('The Short Term Statistics on the IP protocol for each DLCI.')
tfrapPerfIpPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfIpPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfIpPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfIpPerDlciEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpPerDlciEntry.setDescription('The IP Short Term Statistics for a particular DLCI.')
tfrapPerfIpPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpPerDlciInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfIpPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpPerDlciValue.setDescription('The DLCI value with which the Statistics are associated.')
tfrapPerfIpPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxTotal.setDescription('The total number of received IP bytes that have been counted on this DLCI.')
tfrapPerfIpPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxTotal.setDescription('The total number of transmitted IP bytes that have been counted on this DLCI.')
tfrapPerfIpPerDlciRxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxTcp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxTcp.setDescription('The number of received TCP over IP bytes that have been counted on this DLCI.')
tfrapPerfIpPerDlciTxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxTcp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxTcp.setDescription('The number of transmitted TCP over IP bytes that have been counted on this DLCI.')
tfrapPerfIpPerDlciRxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxUdp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxUdp.setDescription('The number of received UDP over IP bytes that have been counted on this DLCI.')
tfrapPerfIpPerDlciTxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxUdp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxUdp.setDescription('The number of transmitted UDP over IP bytes that have been counted on this DLCI.')
tfrapPerfIpPerDlciRxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxIcmp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxIcmp.setDescription('The number of received ICMP over IP bytes that have been counted on this DLCI.')
tfrapPerfIpPerDlciTxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxIcmp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxIcmp.setDescription('The number of transmitted ICMP over IP bytes that have been counted on this DLCI.')
tfrapPerfIpPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxOther.setDescription('The number of received bytes on this DLCI from protocols over IP that are not counted elsewhere in this table.')
tfrapPerfIpPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxOther.setDescription('The number of transmitted bytes on this DLCI from protocols over IP that are not counted elsewhere in this table.')
tfrapPerfIpPerDlciRxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxIgrp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpPerDlciRxIgrp.setDescription('The number of received IGRP over IP bytes that have been counted on this DLCI.')
tfrapPerfIpPerDlciTxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxIgrp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpPerDlciTxIgrp.setDescription('The number of transmitted IGRP over IP bytes that have been counted on this DLCI.')
tfrapPerfIpTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4), )
if mibBuilder.loadTexts: tfrapPerfIpTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpTotalTable.setDescription('The Short Term Statistics on the IP protocol across all DLCIs.')
tfrapPerfIpTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfIpTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfIpTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpTotalEntry.setDescription('The IP Short Term Statistics across all DLCIs.')
tfrapPerfIpTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpTotalInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfIpTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalRxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpTotalRxTotal.setDescription('The total number of received IP bytes that have been counted across all DLCIs.')
tfrapPerfIpTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpTotalTxTotal.setDescription('The total number of transmitted IP bytes that have been counted across all DLCIs.')
tfrapPerfIpTotalRxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalRxTcp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpTotalRxTcp.setDescription('The number of received TCP over IP bytes that have been counted across all DLCIs.')
tfrapPerfIpTotalTxTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalTxTcp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpTotalTxTcp.setDescription('The number of transmitted TCP over IP bytes that have been counted across all DLCIs.')
tfrapPerfIpTotalRxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalRxUdp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpTotalRxUdp.setDescription('The number of received UDP over IP bytes that have been counted across all DLCIs.')
tfrapPerfIpTotalTxUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalTxUdp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpTotalTxUdp.setDescription('The number of transmitted UDP over IP bytes that have been counted across all DLCIs.')
tfrapPerfIpTotalRxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalRxIcmp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpTotalRxIcmp.setDescription('The number of received ICMP over IP bytes that have been counted across all DLCIs.')
tfrapPerfIpTotalTxIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalTxIcmp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpTotalTxIcmp.setDescription('The number of transmitted ICMP over IP bytes that have been counted across all DLCIs.')
tfrapPerfIpTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalRxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpTotalRxOther.setDescription('The number of received bytes across all DLCIs from protocols over IP that are not counted elsewhere in this table.')
tfrapPerfIpTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalTxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpTotalTxOther.setDescription('The number of transmitted bytes across all DLCIs. from protocols over IP that are not counted elsewhere in this table.')
tfrapPerfIpTotalRxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalRxIgrp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpTotalRxIgrp.setDescription('The number of received IGRP over IP bytes that have been counted across all DLCIs.')
tfrapPerfIpTotalTxIgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpTotalTxIgrp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpTotalTxIgrp.setDescription('The number of transmitted IGRP over IP bytes that have been counted across all DLCIs.')
tfrapPerfIcmpPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5), )
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTable.setDescription('Short Term Statistics on the ICMP protocol for each DLCI.')
tfrapPerfIcmpPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfIcmpPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfIcmpPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciEntry.setDescription('The ICMP Short Term Statistics for a particular DLCI.')
tfrapPerfIcmpPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfIcmpPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciValue.setDescription('The DLCI value in which the Statistics are associated.')
tfrapPerfIcmpPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxTotal.setDescription('The total number of ICMP bytes that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxTotal.setDescription('The total number of ICMP bytes that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciRxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxEchoRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxEchoRep.setDescription('The number of bytes in ICMP ECHO repies that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciTxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxEchoRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxEchoRep.setDescription('The number of bytes in ICMP ECHO repies that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciRxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxDestUnr.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxDestUnr.setDescription('The number of bytes in ICMP destination unreachables that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciTxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxDestUnr.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxDestUnr.setDescription('The number of bytes in ICMP destination unreachables that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciRxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxSrcQuench.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxSrcQuench.setDescription('The number of bytes in ICMP source quenches that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciTxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxSrcQuench.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxSrcQuench.setDescription('The number of bytes in ICMP source quenches that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciRxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxRedirect.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxRedirect.setDescription('The number of bytes in ICMP redirects that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciTxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxRedirect.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxRedirect.setDescription('The number of bytes in ICMP redirects that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciRxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxEchoReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxEchoReq.setDescription('The number of bytes in ICMP ECHO requests that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciTxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxEchoReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxEchoReq.setDescription('The number of bytes in ICMP ECHO requests that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciRxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxTimeExcd.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxTimeExcd.setDescription('The number of bytes in ICMP time exceededs that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciTxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxTimeExcd.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxTimeExcd.setDescription('The number of bytes in ICMP time exceededs that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciRxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxParamProb.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxParamProb.setDescription('The number of bytes in ICMP parameter problems that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciTxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxParamProb.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxParamProb.setDescription('The number of bytes in ICMP parameter problems that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciRxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxTimestpReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxTimestpReq.setDescription('The number of bytes in ICMP timestamp requests that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciTxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxTimestpReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxTimestpReq.setDescription('The number of bytes in ICMP timestamp requests that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciRxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxTimestpRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxTimestpRep.setDescription('The number of bytes in ICMP timestamp replies that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciTxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxTimestpRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxTimestpRep.setDescription('The number of bytes in ICMP timestamp replies that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciRxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxAddrMaskReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxAddrMaskReq.setDescription('The number of bytes in ICMP address mask requests that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciTxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxAddrMaskReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxAddrMaskReq.setDescription('The number of bytes in ICMP address mask requests that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciRxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxAddrMaskRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxAddrMaskRep.setDescription('The number of bytes in ICMP address mask replies that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciTxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxAddrMaskRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxAddrMaskRep.setDescription('The number of bytes in ICMP address mask replies that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciRxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxPktTooBig.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxPktTooBig.setDescription('The number of bytes in ICMP packet too bigs that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciTxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxPktTooBig.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxPktTooBig.setDescription('The number of bytes in ICMP packet too bigs that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciRxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxGmQuery.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxGmQuery.setDescription('The number of bytes in ICMP group membership queries that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciTxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxGmQuery.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxGmQuery.setDescription('The number of bytes in ICMP group membership queries that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciRxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxGmReport.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxGmReport.setDescription('The number of bytes in ICMP group membership reports that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciTxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxGmReport.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxGmReport.setDescription('The number of bytes in ICMP group membership reports that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciRxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxGmReduct.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciRxGmReduct.setDescription('The number of bytes in ICMP group membership reductions that have been counted on this DLCI.')
tfrapPerfIcmpPerDlciTxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxGmReduct.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpPerDlciTxGmReduct.setDescription('The number of bytes in ICMP group membership reductions that have been counted on this DLCI.')
tfrapPerfIcmpTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6), )
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTable.setDescription('Short Term Statistics on the ICMP protocol across all DLCIs.')
tfrapPerfIcmpTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfIcmpTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfIcmpTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalEntry.setDescription('The ICMP Short Term Statistics for a particular DLCI.')
tfrapPerfIcmpTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfIcmpTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxTotal.setDescription('The total number of ICMP bytes that have been counted across all DLCIs.')
tfrapPerfIcmpTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxTotal.setDescription('The total number of ICMP bytes that have been counted across all DLCIs.')
tfrapPerfIcmpTotalRxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxEchoRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxEchoRep.setDescription('The number of bytes in ICMP ECHO repies that have been counted across all DLCIs.')
tfrapPerfIcmpTotalTxEchoRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxEchoRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxEchoRep.setDescription('The number of bytes in ICMP ECHO repies that have been counted across all DLCIs.')
tfrapPerfIcmpTotalRxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxDestUnr.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxDestUnr.setDescription('The number of bytes in ICMP destination unreachables that have been counted across all DLCIs.')
tfrapPerfIcmpTotalTxDestUnr = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxDestUnr.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxDestUnr.setDescription('The number of bytes in ICMP destination unreachables that have been counted across all DLCIs.')
tfrapPerfIcmpTotalRxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxSrcQuench.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxSrcQuench.setDescription('The number of bytes in ICMP source quenches that have been counted across all DLCIs.')
tfrapPerfIcmpTotalTxSrcQuench = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxSrcQuench.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxSrcQuench.setDescription('The number of bytes in ICMP source quenches that have been counte across all DLCIs.')
tfrapPerfIcmpTotalRxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxRedirect.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxRedirect.setDescription('The number of bytes in ICMP redirects that have been counte across all DLCIs.')
tfrapPerfIcmpTotalTxRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxRedirect.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxRedirect.setDescription('The number of bytes in ICMP redirects that have been counte across all DLCIs.')
tfrapPerfIcmpTotalRxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxEchoReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxEchoReq.setDescription('The number of bytes in ICMP ECHO requests that have been counte across all DLCIs.')
tfrapPerfIcmpTotalTxEchoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxEchoReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxEchoReq.setDescription('The number of bytes in ICMP ECHO requests that have been counte across all DLCIs.')
tfrapPerfIcmpTotalRxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxTimeExcd.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxTimeExcd.setDescription('The number of bytes in ICMP time exceededs that have been counte across all DLCIs.')
tfrapPerfIcmpTotalTxTimeExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxTimeExcd.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxTimeExcd.setDescription('The number of bytes in ICMP time exceededs that have been counte across all DLCIs.')
tfrapPerfIcmpTotalRxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxParamProb.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxParamProb.setDescription('The number of bytes in ICMP parameter problems that have been counte across all DLCIs.')
tfrapPerfIcmpTotalTxParamProb = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxParamProb.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxParamProb.setDescription('The number of bytes in ICMP parameter problems that have been counte across all DLCIs.')
tfrapPerfIcmpTotalRxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxTimestpReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxTimestpReq.setDescription('The number of bytes in ICMP timestamp requests that have been counte across all DLCIs.')
tfrapPerfIcmpTotalTxTimestpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxTimestpReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxTimestpReq.setDescription('The number of bytes in ICMP timestamp requests that have been counte across all DLCIs.')
tfrapPerfIcmpTotalRxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxTimestpRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxTimestpRep.setDescription('The number of bytes in ICMP timestamp replies that have been counted across all DLCIs.')
tfrapPerfIcmpTotalTxTimestpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxTimestpRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxTimestpRep.setDescription('The number of bytes in ICMP timestamp replies that have been counte across all DLCIs.')
tfrapPerfIcmpTotalRxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxAddrMaskReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxAddrMaskReq.setDescription('The number of bytes in ICMP address mask requests that have been counte across all DLCIs.')
tfrapPerfIcmpTotalTxAddrMaskReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxAddrMaskReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxAddrMaskReq.setDescription('The number of bytes in ICMP address mask requests that have been counte across all DLCIs.')
tfrapPerfIcmpTotalRxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxAddrMaskRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxAddrMaskRep.setDescription('The number of bytes in ICMP address mask replies that have been counte across all DLCIs.')
tfrapPerfIcmpTotalTxAddrMaskRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxAddrMaskRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxAddrMaskRep.setDescription('The number of bytes in ICMP address mask replies that have been counte across all DLCIs.')
tfrapPerfIcmpTotalRxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxPktTooBig.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxPktTooBig.setDescription('The number of bytes in ICMP packet too bigs that have been counte across all DLCIs.')
tfrapPerfIcmpTotalTxPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxPktTooBig.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxPktTooBig.setDescription('The number of bytes in ICMP packet too bigs that have been counte across all DLCIs.')
tfrapPerfIcmpTotalRxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxGmQuery.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxGmQuery.setDescription('The number of bytes in ICMP group membership queries that have been counte across all DLCIs.')
tfrapPerfIcmpTotalTxGmQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxGmQuery.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxGmQuery.setDescription('The number of bytes in ICMP group membership queries that have been counte across all DLCIs.')
tfrapPerfIcmpTotalRxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxGmReport.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxGmReport.setDescription('The number of bytes in ICMP group membership reports that have been counte across all DLCIs.')
tfrapPerfIcmpTotalTxGmReport = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxGmReport.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxGmReport.setDescription('The number of bytes in ICMP group membership reports that have been counte across all DLCIs.')
tfrapPerfIcmpTotalRxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxGmReduct.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalRxGmReduct.setDescription('The number of bytes in ICMP group membership reductions that have been counte across all DLCIs.')
tfrapPerfIcmpTotalTxGmReduct = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 6, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxGmReduct.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIcmpTotalTxGmReduct.setDescription('The number of bytes in ICMP group membership reductions that have been counte across all DLCIs.')
tfrapPerfApplicationPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7), )
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTable.setDescription('The Short Term Statistics on the Application protocol for each DLCI.')
tfrapPerfApplicationPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfApplicationPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfApplicationPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciEntry.setDescription('The Application Short Term Statistics for a particular DLCI.')
tfrapPerfApplicationPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfApplicationPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciValue.setDescription('The DLCI value with which the Statistics are associated.')
tfrapPerfApplicationPerDlciRxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxSnmp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxSnmp.setDescription('The number of received SNMP bytes that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciTxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxSnmp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxSnmp.setDescription('The number of transmitted SNMP bytes that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciRxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxSnmpTrap.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxSnmpTrap.setDescription('The number of received SNMP TRAP bytes that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciTxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxSnmpTrap.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxSnmpTrap.setDescription('The number of transmitted SNMP TRAP bytes that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciRxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxHttp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxHttp.setDescription('The number of received HTTP bytes that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciTxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxHttp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxHttp.setDescription('The number of transmitted HTTP bytes that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciRxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxTelnet.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxTelnet.setDescription('The number of received Telnet bytes that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciTxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxTelnet.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxTelnet.setDescription('The number of transmitted Telnet bytes that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciRxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxSmtp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxSmtp.setDescription('The number of received SMTP bytes that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciTxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxSmtp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxSmtp.setDescription('The number of transmitted SMTP bytes that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciRxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxFtp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxFtp.setDescription('The number of received FTP bytes that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciTxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxFtp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxFtp.setDescription('The number of transmitted FTP bytes that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciRxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxTftp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxTftp.setDescription('The number of received TFTP bytes that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciTxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxTftp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxTftp.setDescription('The number of transmitted TFTP bytes that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciRxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxCustom1.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxCustom1.setDescription('The number of received bytes of User Defined Protocol #1 that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciTxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxCustom1.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxCustom1.setDescription('The number of transmitted bytes of User Defined Protocol #1 that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciRxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxCustom2.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxCustom2.setDescription('The number of received bytes of User Defined Protocol #2 that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciTxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxCustom2.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxCustom2.setDescription('The number of transmitted bytes of User Defined Protocol #2 that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciRxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxCustom3.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxCustom3.setDescription('The number of received bytes of User Defined Protocol #3 that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciTxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxCustom3.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxCustom3.setDescription('The number of transmitted bytes of User Defined Protocol #3 that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciRxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxCustom4.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciRxCustom4.setDescription('The number of received bytes of User Defined Protocol #4 that have been counted on this DLCI.')
tfrapPerfApplicationPerDlciTxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxCustom4.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationPerDlciTxCustom4.setDescription('The number of transmitted bytes of User Defined Protocol #4 that have been counted on this DLCI.')
tfrapPerfApplicationTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8), )
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTable.setDescription('The Short Term Statistics on the Application protocol across all DLCIs.')
tfrapPerfApplicationTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfApplicationTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfApplicationTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalEntry.setDescription('The Application Short Term Statistics for a particular DLCI.')
tfrapPerfApplicationTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfApplicationTotalRxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxSnmp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxSnmp.setDescription('The number of received SNMP bytes that have been counted across all DLCIs.')
tfrapPerfApplicationTotalTxSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxSnmp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxSnmp.setDescription('The number of transmitted SNMP bytes that have been counted across all DLCIs.')
tfrapPerfApplicationTotalRxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxSnmpTrap.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxSnmpTrap.setDescription('The number of received SNMP TRAP bytes that have been counted across all DLCIs.')
tfrapPerfApplicationTotalTxSnmpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxSnmpTrap.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxSnmpTrap.setDescription('The number of transmitted SNMP TRAP bytes that have been counted across all DLCIs.')
tfrapPerfApplicationTotalRxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxHttp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxHttp.setDescription('The number of received HTTP bytes that have been counted across all DLCIs.')
tfrapPerfApplicationTotalTxHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxHttp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxHttp.setDescription('The number of transmitted HTTP bytes that have been counted across all DLCIs.')
tfrapPerfApplicationTotalRxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxTelnet.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxTelnet.setDescription('The number of received Telnet bytes that have been counted across all DLCIs.')
tfrapPerfApplicationTotalTxTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxTelnet.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxTelnet.setDescription('The number of transmitted Telnet bytes that have been counted across all DLCIs.')
tfrapPerfApplicationTotalRxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxSmtp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxSmtp.setDescription('The number of received SMTP bytes that have been counted across all DLCIs.')
tfrapPerfApplicationTotalTxSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxSmtp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxSmtp.setDescription('The number of transmitted SMTP bytes that have been counted across all DLCIs.')
tfrapPerfApplicationTotalRxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxFtp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxFtp.setDescription('The number of received FTP bytes that have been counted across all DLCIs.')
tfrapPerfApplicationTotalTxFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxFtp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxFtp.setDescription('The number of transmitted FTP bytes that have been counted across all DLCIs.')
tfrapPerfApplicationTotalRxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxTftp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxTftp.setDescription('The number of received TFTP bytes that have been counted across all DLCIs.')
tfrapPerfApplicationTotalTxTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxTftp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxTftp.setDescription('The number of transmitted TFTP bytes that have been counted across all DLCIs.')
tfrapPerfApplicationTotalRxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxCustom1.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxCustom1.setDescription('The number of received bytes of User Defined Protocol #1 that have been counted across all DLCIs.')
tfrapPerfApplicationTotalTxCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxCustom1.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxCustom1.setDescription('The number of transmitted bytes of User Defined Protocol #1 that have been counted across all DLCIs.')
tfrapPerfApplicationTotalRxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxCustom2.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxCustom2.setDescription('The number of received bytes of User Defined Protocol #2 that have been counted across all DLCIs.')
tfrapPerfApplicationTotalTxCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxCustom2.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxCustom2.setDescription('The number of transmitted bytes of User Defined Protocol #2 that have been counted across all DLCIs.')
tfrapPerfApplicationTotalRxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxCustom3.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxCustom3.setDescription('The number of received bytes of User Defined Protocol #3 that have been counted across all DLCIs.')
tfrapPerfApplicationTotalTxCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxCustom3.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxCustom3.setDescription('The number of transmitted bytes of User Defined Protocol #3 that have been counted across all DLCIs.')
tfrapPerfApplicationTotalRxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxCustom4.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalRxCustom4.setDescription('The number of received bytes of User Defined Protocol #4 that have been counted across all DLCIs.')
tfrapPerfApplicationTotalTxCustom4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxCustom4.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfApplicationTotalTxCustom4.setDescription('The number of transmitted bytes of User Defined Protocol #4 that have been counted across all DLCIs.')
tfrapPerfRoutingPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9), )
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciTable.setDescription('The Short Term Statistics on the Routing protocol for each DLCI.')
tfrapPerfRoutingPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfRoutingPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfRoutingPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciEntry.setDescription('The Routing Short Term Statistics for a particular DLCI.')
tfrapPerfRoutingPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfRoutingPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciValue.setDescription('The DLCI value with which the Statistics are associated.')
tfrapPerfRoutingPerDlciRxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciRxOspf.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciRxOspf.setDescription('The number of received OSPF bytes that have been counted on this DLCI.')
tfrapPerfRoutingPerDlciTxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciTxOspf.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciTxOspf.setDescription('The number of transmitted OSPF bytes that have been counted on this DLCI.')
tfrapPerfRoutingPerDlciRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciRxRip.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciRxRip.setDescription('The number of received RIP bytes that have been counted on this DLCI.')
tfrapPerfRoutingPerDlciTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciTxRip.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciTxRip.setDescription('The number of transmitted RIP bytes that have been counted on this DLCI.')
tfrapPerfRoutingPerDlciRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciRxNetbios.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciRxNetbios.setDescription('The number of received Netbios bytes that have been counted on this DLCI.')
tfrapPerfRoutingPerDlciTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciTxNetbios.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingPerDlciTxNetbios.setDescription('The number of transmitted Netbios bytes that have been counted on this DLCI.')
tfrapPerfRoutingTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10), )
if mibBuilder.loadTexts: tfrapPerfRoutingTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingTotalTable.setDescription('The Short Term Statistics on the Routing protocol across all DLCIs.')
tfrapPerfRoutingTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfRoutingTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfRoutingTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingTotalEntry.setDescription('The Routing Short Term Statistics for a particular DLCI.')
tfrapPerfRoutingTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingTotalInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingTotalInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfRoutingTotalRxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingTotalRxOspf.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingTotalRxOspf.setDescription('The number of received OSPF bytes that have been counted across all DLCIs.')
tfrapPerfRoutingTotalTxOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingTotalTxOspf.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingTotalTxOspf.setDescription('The number of transmitted OSPF bytes that have been counted across all DLCIs.')
tfrapPerfRoutingTotalRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingTotalRxRip.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingTotalRxRip.setDescription('The number of received RIP bytes that have been counted across all DLCIs.')
tfrapPerfRoutingTotalTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingTotalTxRip.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingTotalTxRip.setDescription('The number of transmitted RIP bytes that have been counted across all DLCIs.')
tfrapPerfRoutingTotalRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingTotalRxNetbios.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingTotalRxNetbios.setDescription('The number of received Netbios bytes that have been counted across all DLCIs.')
tfrapPerfRoutingTotalTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfRoutingTotalTxNetbios.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfRoutingTotalTxNetbios.setDescription('The number of transmitted Netbios bytes that have been counted across all DLCIs.')
tfrapPerfIpxPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11), )
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTable.setDescription('Short Term Statistics on the IPX protocol for each DLCI.')
tfrapPerfIpxPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfIpxPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfIpxPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciEntry.setDescription('The IPX Short Term Statistics for a particular DLCI.')
tfrapPerfIpxPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfIpxPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciValue.setDescription('The DLCI value in which the Statistics are associated.')
tfrapPerfIpxPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxTotal.setDescription('The total number of IPX bytes that have been counted on this DLCI.')
tfrapPerfIpxPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxTotal.setDescription('The total number of IPX bytes that have been counted on this DLCI.')
tfrapPerfIpxPerDlciRxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxSpx.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxSpx.setDescription('The number of SPX over IPX bytes that have been counted on this DLCI.')
tfrapPerfIpxPerDlciTxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxSpx.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxSpx.setDescription('The number of SPX over IPX bytes that have been counted on this DLCI.')
tfrapPerfIpxPerDlciRxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxNcp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxNcp.setDescription('The number of NCP over IPX bytes that have been counted on this DLCI.')
tfrapPerfIpxPerDlciTxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxNcp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxNcp.setDescription('The number of NCP over IPX bytes that have been counted on this DLCI.')
tfrapPerfIpxPerDlciRxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxSap.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxSap.setDescription('The number of SAP over IPX bytes that have been counted on this DLCI.')
tfrapPerfIpxPerDlciTxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxSap.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxSap.setDescription('The number of SAP over IPX bytes that have been counted on this DLCI.')
tfrapPerfIpxPerDlciRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxRip.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxRip.setDescription('The number of RIP over IPX bytes that have been counted on this DLCI.')
tfrapPerfIpxPerDlciTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxRip.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxRip.setDescription('The number of RIP over IPX bytes that have been counted on this DLCI.')
tfrapPerfIpxPerDlciRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxNetbios.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxNetbios.setDescription('The number of NETBIOS over IPX bytes that have been counted on this DLCI.')
tfrapPerfIpxPerDlciTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxNetbios.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxNetbios.setDescription('The number of NETBIOS over IPX bytes that have been counted on this DLCI.')
tfrapPerfIpxPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciRxOther.setDescription('The number of received bytes on this DLCI from protocols over IPX that are not counted elsewhere in this table.')
tfrapPerfIpxPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxPerDlciTxOther.setDescription('The number of transmitted bytes on this DLCI from protocols over IPX that are not counted elsewhere in this table.')
tfrapPerfIpxTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12), )
if mibBuilder.loadTexts: tfrapPerfIpxTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalTable.setDescription('Short Term Statistics on the IPX protocol across all DLCIs.')
tfrapPerfIpxTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfIpxTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfIpxTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalEntry.setDescription('The IPX Short Term Statistics for a particular DLCI.')
tfrapPerfIpxTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfIpxTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxTotal.setDescription('The total number of IPX bytes that have been counted across all DLCIs.')
tfrapPerfIpxTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxTotal.setDescription('The total number of IPX bytes that have been counted across all DLCIs.')
tfrapPerfIpxTotalRxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxSpx.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxSpx.setDescription('The number of SPX over IPX bytes that have been counted across all DLCIs.')
tfrapPerfIpxTotalTxSpx = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxSpx.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxSpx.setDescription('The number of SPX over IPX bytes that have been counted across all DLCIs.')
tfrapPerfIpxTotalRxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxNcp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxNcp.setDescription('The number of NCP over IPX bytes that have been counted across all DLCIs.')
tfrapPerfIpxTotalTxNcp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxNcp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxNcp.setDescription('The number of NCP over IPX bytes that have been counted across all DLCIs.')
tfrapPerfIpxTotalRxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxSap.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxSap.setDescription('The number of SAP over IPX bytes that have been counted across all DLCIs.')
tfrapPerfIpxTotalTxSap = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxSap.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxSap.setDescription('The number of SAP over IPX bytes that have been counted across all DLCIs.')
tfrapPerfIpxTotalRxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxRip.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxRip.setDescription('The number of RIP over IPX bytes that have been counted across all DLCIs.')
tfrapPerfIpxTotalTxRip = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxRip.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxRip.setDescription('The number of RIP over IPX bytes that have been counted across all DLCIs.')
tfrapPerfIpxTotalRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxNetbios.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxNetbios.setDescription('The number of NETBIOS over IPX bytes that have been counted across all DLCIs.')
tfrapPerfIpxTotalTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxNetbios.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxNetbios.setDescription('The number of NETBIOS over IPX bytes that have been counted across all DLCIs.')
tfrapPerfIpxTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalRxOther.setDescription('The number of received bytes across all DLCIs from protocols over IPX that are not counted elsewhere in this table.')
tfrapPerfIpxTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfIpxTotalTxOther.setDescription('The number of transmitted bytes across all DLCIs from protocols over IPX that are not counted elsewhere in this table.')
tfrapPerfSnaPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13), )
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTable.setDescription('Short Term Statistics on the SNA protocol for each DLCI.')
tfrapPerfSnaPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfSnaPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfSnaPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciEntry.setDescription('The SNA Short Term Statistics for a particular DLCI.')
tfrapPerfSnaPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfSnaPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciValue.setDescription('The DLCI value in which the Statistics are associated.')
tfrapPerfSnaPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxTotal.setDescription('The total number of SNA bytes that have been counted on this DLCI.')
tfrapPerfSnaPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxTotal.setDescription('The total number of SNA bytes that have been counted on this DLCI.')
tfrapPerfSnaPerDlciRxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxSubarea.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxSubarea.setDescription('The number of SNA Subarea bytes that have been counted on this DLCI.')
tfrapPerfSnaPerDlciTxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxSubarea.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxSubarea.setDescription('The number of SNA Subarea bytes that have been counted on this DLCI.')
tfrapPerfSnaPerDlciRxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxPeriph.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxPeriph.setDescription('The number of SNA Periph bytes that have been counted on this DLCI.')
tfrapPerfSnaPerDlciTxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxPeriph.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxPeriph.setDescription('The number of SNA Periph bytes that have been counted on this DLCI.')
tfrapPerfSnaPerDlciRxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxAppn.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxAppn.setDescription('The number of SNA Appn bytes that have been counted on this DLCI.')
tfrapPerfSnaPerDlciTxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxAppn.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxAppn.setDescription('The number of SNA Appn bytes that have been counted on this DLCI.')
tfrapPerfSnaPerDlciRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxNetbios.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxNetbios.setDescription('The number of SNA Netbios bytes that have been counted on this DLCI.')
tfrapPerfSnaPerDlciTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxNetbios.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxNetbios.setDescription('The number of SNA Netbios bytes that have been counted on this DLCI.')
tfrapPerfSnaPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciRxOther.setDescription('The number of received bytes on this DLCI from protocols over SNA that are not counted elsewhere in this table.')
tfrapPerfSnaPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaPerDlciTxOther.setDescription('The number of transmitted bytes on this DLCI from protocols over SNA that are not counted elsewhere in this table.')
tfrapPerfSnaTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14), )
if mibBuilder.loadTexts: tfrapPerfSnaTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaTotalTable.setDescription('Short Term Statistics on the SNA protocol across all DLCIs.')
tfrapPerfSnaTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfSnaTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfSnaTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaTotalEntry.setDescription('The SNA Short Term Statistics for a particular DLCI.')
tfrapPerfSnaTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaTotalInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfSnaTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxTotal.setDescription('The total number of SNA bytes that have been counted across all DLCIs.')
tfrapPerfSnaTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxTotal.setDescription('The total number of SNA bytes that have been counted across all DLCIs.')
tfrapPerfSnaTotalRxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxSubarea.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxSubarea.setDescription('The number of SNA Subarea bytes that have been counted across all DLCIs.')
tfrapPerfSnaTotalTxSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxSubarea.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxSubarea.setDescription('The number of SNA Subarea bytes that have been counted across all DLCIs.')
tfrapPerfSnaTotalRxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxPeriph.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxPeriph.setDescription('The number of SNA Periph bytes that have been counted across all DLCIs.')
tfrapPerfSnaTotalTxPeriph = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxPeriph.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxPeriph.setDescription('The number of SNA Periph bytes that have been counted across all DLCIs.')
tfrapPerfSnaTotalRxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxAppn.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxAppn.setDescription('The number of SNA Appn bytes that have been counted across all DLCIs.')
tfrapPerfSnaTotalTxAppn = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxAppn.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxAppn.setDescription('The number of SNA Appn bytes that have been counted across all DLCIs.')
tfrapPerfSnaTotalRxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxNetbios.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxNetbios.setDescription('The number of SNA Netbios bytes that have been counted across all DLCIs.')
tfrapPerfSnaTotalTxNetbios = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxNetbios.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxNetbios.setDescription('The number of SNA Netbios bytes that have been counted across all DLCIs.')
tfrapPerfSnaTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaTotalRxOther.setDescription('The number of received bytes across all DLCIs from protocols over SNA that are not counted elsewhere in this table.')
tfrapPerfSnaTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfSnaTotalTxOther.setDescription('The number of transmitted bytes across all DLCIs from protocols over SNA that are not counted elsewhere in this table.')
tfrapPerfArpPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15), )
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTable.setDescription('Short Term Statistics on the ARP protocol for each DLCI.')
tfrapPerfArpPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfArpPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfArpPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfArpPerDlciEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciEntry.setDescription('The ARP Short Term Statistics for a particular DLCI.')
tfrapPerfArpPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfArpPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciValue.setDescription('The DLCI value in which the Statistics are associated.')
tfrapPerfArpPerDlciRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxTotal.setDescription('The total number of ARP bytes that have been counted on this DLCI.')
tfrapPerfArpPerDlciTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxTotal.setDescription('The total number of ARP bytes that have been counted on this DLCI.')
tfrapPerfArpPerDlciRxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxArpReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxArpReq.setDescription('The number of ARP request bytes that have been counted on this DLCI.')
tfrapPerfArpPerDlciTxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxArpReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxArpReq.setDescription('The number of ARP request bytes that have been counted on this DLCI.')
tfrapPerfArpPerDlciRxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxArpRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxArpRep.setDescription('The number of ARP reply bytes that have been counted on this DLCI.')
tfrapPerfArpPerDlciTxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxArpRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxArpRep.setDescription('The number of ARP reply bytes that have been counted on this DLCI.')
tfrapPerfArpPerDlciRxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxRarpReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxRarpReq.setDescription('The number of RARP request bytes that have been counted on this DLCI.')
tfrapPerfArpPerDlciTxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxRarpReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxRarpReq.setDescription('The number of RARP request bytes that have been counted on this DLCI.')
tfrapPerfArpPerDlciRxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxRarpRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxRarpRep.setDescription('The number of RARP reply bytes that have been counted on this DLCI.')
tfrapPerfArpPerDlciTxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxRarpRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxRarpRep.setDescription('The number of RARP reply bytes that have been counted on this DLCI.')
tfrapPerfArpPerDlciRxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxInarpReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxInarpReq.setDescription('The number of INARP request bytes that have been counted on this DLCI.')
tfrapPerfArpPerDlciTxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxInarpReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxInarpReq.setDescription('The number of INARP request bytes that have been counted on this DLCI.')
tfrapPerfArpPerDlciRxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxInarpRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxInarpRep.setDescription('The number of INARP reply bytes that have been counted on this DLCI.')
tfrapPerfArpPerDlciTxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxInarpRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxInarpRep.setDescription('The number of INARP reply bytes that have been counted on this DLCI.')
tfrapPerfArpPerDlciRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciRxOther.setDescription('The number of received bytes on this DLCI from ARP message types that are not counted elsewhere in this table.')
tfrapPerfArpPerDlciTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 15, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpPerDlciTxOther.setDescription('The number of transmitted bytes on this DLCI from ARP message types that are not counted elsewhere in this table.')
tfrapPerfArpTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16), )
if mibBuilder.loadTexts: tfrapPerfArpTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalTable.setDescription('Short Term Statistics on the ARP protocol across all DLCIs.')
tfrapPerfArpTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfArpTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfArpTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalEntry.setDescription('The ARP Short Term Statistics for a particular DLCI.')
tfrapPerfArpTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfArpTotalRxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalRxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalRxTotal.setDescription('The total number of ARP bytes that have been counted across all DLCIs.')
tfrapPerfArpTotalTxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalTxTotal.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalTxTotal.setDescription('The total number of ARP bytes that have been counted across all DLCIs.')
tfrapPerfArpTotalRxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalRxArpReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalRxArpReq.setDescription('The number of ARP request bytes that have been counted across all DLCIs.')
tfrapPerfArpTotalTxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalTxArpReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalTxArpReq.setDescription('The number of ARP request bytes that have been counted across all DLCIs.')
tfrapPerfArpTotalRxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalRxArpRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalRxArpRep.setDescription('The number of ARP reply bytes that have been counted across all DLCIs.')
tfrapPerfArpTotalTxArpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalTxArpRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalTxArpRep.setDescription('The number of ARP reply bytes that have been counted across all DLCIs.')
tfrapPerfArpTotalRxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalRxRarpReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalRxRarpReq.setDescription('The number of RARP request bytes that have been counted across all DLCIs.')
tfrapPerfArpTotalTxRarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalTxRarpReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalTxRarpReq.setDescription('The number of RARP request bytes that have been counted across all DLCIs.')
tfrapPerfArpTotalRxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalRxRarpRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalRxRarpRep.setDescription('The number of RARP reply bytes that have been counted across all DLCIs.')
tfrapPerfArpTotalTxRarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalTxRarpRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalTxRarpRep.setDescription('The number of RARP reply bytes that have been counted across all DLCIs.')
tfrapPerfArpTotalRxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalRxInarpReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalRxInarpReq.setDescription('The number of INARP request bytes that have been counted across all DLCIs.')
tfrapPerfArpTotalTxInarpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalTxInarpReq.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalTxInarpReq.setDescription('The number of INARP request bytes that have been counted across all DLCIs.')
tfrapPerfArpTotalRxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalRxInarpRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalRxInarpRep.setDescription('The number of INARP reply bytes that have been counted across all DLCIs.')
tfrapPerfArpTotalTxInarpRep = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalTxInarpRep.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalTxInarpRep.setDescription('The number of INARP reply bytes that have been counted across all DLCIs.')
tfrapPerfArpTotalRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalRxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalRxOther.setDescription('The number of received bytes across all DLCIs from ARP message types that are not counted elsewhere in this table.')
tfrapPerfArpTotalTxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 16, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfArpTotalTxOther.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfArpTotalTxOther.setDescription('The number of transmitted bytes across all DLCIs from ARP message types that are not counted elsewhere in this table.')
tfrapPerfLmiPerDlciTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17), )
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTable.setDescription('Short Term Statistics on LMI protocol for each DLCI.')
tfrapPerfLmiPerDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfLmiPerDlciInterval"), (0, "TFRAP-MIB", "tfrapPerfLmiPerDlciValue"))
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciEntry.setDescription('The LMI Short Term Statistics for a particular DLCI.')
tfrapPerfLmiPerDlciInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfLmiPerDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciValue.setDescription('The DLCI value with which the Statistics are associated.')
tfrapPerfLmiPerDlciRxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxTotalByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxTotalByteCnt.setDescription('The total number of received LMI bytes counted on this DLCI.')
tfrapPerfLmiPerDlciTxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxTotalByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxTotalByteCnt.setDescription('The total number of transmitted LMI bytes counted on this DLCI.')
tfrapPerfLmiPerDlciRxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxLivoEnqByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxLivoEnqByteCnt.setDescription('The number of bytes received in Link Integrity Verification Only (LIVO) enquiries on this DLCI.')
tfrapPerfLmiPerDlciTxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxLivoEnqByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxLivoEnqByteCnt.setDescription('The number of bytes transmitted in Link Integrity Verification Only (LIVO) enquiries on this DLCI.')
tfrapPerfLmiPerDlciRxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxLivoStatByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxLivoStatByteCnt.setDescription('The number of bytes received in Link Integrity Verification Only (LIVO) statuses on this DLCI.')
tfrapPerfLmiPerDlciTxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxLivoStatByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxLivoStatByteCnt.setDescription('The number of bytes transmitted in Link Integrity Verification Only (LIVO) statuses on this DLCI.')
tfrapPerfLmiPerDlciRxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxFullEnqByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxFullEnqByteCnt.setDescription('The number of bytes received in Full Status enquiries on this DLCI.')
tfrapPerfLmiPerDlciTxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxFullEnqByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxFullEnqByteCnt.setDescription('The number of bytes transmitted in Full Status enquiries on this DLCI.')
tfrapPerfLmiPerDlciRxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxFullStatByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxFullStatByteCnt.setDescription('The number of bytes received in Full Status messages on this DLCI.')
tfrapPerfLmiPerDlciTxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxFullStatByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxFullStatByteCnt.setDescription('The number of bytes transmitted in Full Status messages on this DLCI.')
tfrapPerfLmiPerDlciRxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxOtherByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciRxOtherByteCnt.setDescription('The number of received bytes on this DLCI from LMI protocols that are not counted elsewhere (other than Total) in this table.')
tfrapPerfLmiPerDlciTxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxOtherByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiPerDlciTxOtherByteCnt.setDescription('The number of transmitted bytes on this DLCI from LMI protocols that are not counted elsewhere (other than Total) in this table.')
tfrapPerfLmiTotalTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18), )
if mibBuilder.loadTexts: tfrapPerfLmiTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiTotalTable.setDescription('Short Term Statistics on LMI protocol across all DLCIs.')
tfrapPerfLmiTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfLmiTotalInterval"))
if mibBuilder.loadTexts: tfrapPerfLmiTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiTotalEntry.setDescription('The LMI Short Term Statistics across all DLCIs.')
tfrapPerfLmiTotalInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiTotalInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfLmiTotalDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiTotalDlciValue.setDescription('OBSOLETE.')
tfrapPerfLmiTotalRxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxTotalByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxTotalByteCnt.setDescription('The total number of received LMI bytes counted across all DLCIs.')
tfrapPerfLmiTotalTxTotalByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxTotalByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxTotalByteCnt.setDescription('The total number of transmitted LMI bytes counted across all DLCIs.')
tfrapPerfLmiTotalRxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxLivoEnqByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxLivoEnqByteCnt.setDescription('The number of bytes received in Link Integrity Verification Only (LIVO) enquiries across all DLCIs.')
tfrapPerfLmiTotalTxLivoEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxLivoEnqByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxLivoEnqByteCnt.setDescription('The number of bytes transmitted in Link Integrity Verification Only (LIVO) enquiries across all DLCIs.')
tfrapPerfLmiTotalRxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxLivoStatByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxLivoStatByteCnt.setDescription('The number of bytes received in Link Integrity Verification Only (LIVO) statuses across all DLCIs.')
tfrapPerfLmiTotalTxLivoStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxLivoStatByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxLivoStatByteCnt.setDescription('The number of bytes transmitted in Link Integrity Verification Only (LIVO) statuses across all DLCIs.')
tfrapPerfLmiTotalRxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxFullEnqByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxFullEnqByteCnt.setDescription('The number of bytes received in Full Status enquiries across all DLCIs.')
tfrapPerfLmiTotalTxFullEnqByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxFullEnqByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxFullEnqByteCnt.setDescription('The number of bytes transmitted in Full Status enquiries across all DLCIs.')
tfrapPerfLmiTotalRxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxFullStatByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxFullStatByteCnt.setDescription('The number of bytes received in Full Status messages across all DLCIs.')
tfrapPerfLmiTotalTxFullStatByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxFullStatByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxFullStatByteCnt.setDescription('The number of bytes transmitted in Full Status messages across all DLCIs.')
tfrapPerfLmiTotalRxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxOtherByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiTotalRxOtherByteCnt.setDescription('The number of received bytes across all DLCIs from LMI protocols that are not counted elsewhere (other than Total) in this table.')
tfrapPerfLmiTotalTxOtherByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 4, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxOtherByteCnt.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfLmiTotalTxOtherByteCnt.setDescription('The number of transmitted bytes across all DLCIs from LMI protocols that are not counted elsewhere (other than Total) in this table.')
tfrapPerfNetworkLongTerm = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 5))
tfrapPerfNetwLongTermTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 1), )
if mibBuilder.loadTexts: tfrapPerfNetwLongTermTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwLongTermTable.setDescription('Long Term Statistics by DLCI, protocol, and interval. LT statistics are collected on a configurable set of DLCIs and protocols. There are 96 intervals maintained each with a duration defined by the Long Term Timer. Interval 96 is the current window and Interval 1 is furthest back in time (96xLT Timer seconds ago).')
tfrapPerfNetwLongTermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 1, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfNetwLongTermDlci"), (0, "TFRAP-MIB", "tfrapPerfNetwLongTermProtocol"), (0, "TFRAP-MIB", "tfrapPerfNetwLongTermInterval"))
if mibBuilder.loadTexts: tfrapPerfNetwLongTermEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwLongTermEntry.setDescription('The Long Term Statistic for a particular DLCI, protocol and interval.')
tfrapPerfNetwLongTermDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwLongTermDlci.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwLongTermDlci.setDescription('The DLCI monitored for the statistics. The Long Term DLCI filter must first be configured (CfgFrPerfLTDlciFilterEntry).')
tfrapPerfNetwLongTermProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 21, 22, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172))).clone(namedValues=NamedValues(("ip-tx-bc", 1), ("ip-rx-bc", 2), ("tcp-ip-tx-bc", 3), ("tcp-ip-rx-bc", 4), ("ftp-tcp-ip-tx-bc", 5), ("ftp-tcp-ip-rx-bc", 6), ("telnet-tcp-ip-tx-bc", 7), ("telnet-tcp-ip-rx-bc", 8), ("smtp-tcp-ip-tx-bc", 9), ("smtp-tcp-ip-rx-bc", 10), ("http-tcp-ip-tx-bc", 13), ("http-tcp-ip-rx-bc", 14), ("netbios-ssn-tcp-ip-tx-bc", 15), ("netbios-ssn-tcp-ip-rx-bc", 16), ("udp-ip-tx-bc", 21), ("udp-ip-rx-bc", 22), ("tftp-udp-ip-tx-bc", 29), ("tftp-udp-ip-rx-bc", 30), ("netbios-dgm-udp-ip-tx-bc", 33), ("netbios-dgm-udp-ip-rx-bc", 34), ("snmp-udp-ip-tx-bc", 35), ("snmp-udp-ip-rx-bc", 36), ("snmptrap-udp-ip-tx-bc", 37), ("snmptrap-udp-ip-rx-bc", 38), ("rip-udp-ip-tx-bc", 39), ("rip-udp-ip-rx-bc", 40), ("icmp-ip-tx-bc", 41), ("icmp-ip-rx-bc", 42), ("echorep-icmp-ip-tx-bc", 43), ("echorep-icmp-ip-rx-bc", 44), ("dest-unr-icmp-ip-tx-bc", 45), ("dest-unr-icmp-ip-rx-bc", 46), ("src-quench-icmp-ip-tx-bc", 47), ("src-quench-icmp-ip-rx-bc", 48), ("redirect-icmp-ip-tx-bc", 49), ("redirect-icmp-ip-rx-bc", 50), ("echoreq-icmp-ip-tx-bc", 51), ("echoreq-icmp-ip-rx-bc", 52), ("time-excd-icmp-ip-tx-bc", 53), ("time-excd-icmp-ip-rx-bc", 54), ("param-prob-icmp-ip-tx-bc", 55), ("param-prob-icmp-ip-rx-bc", 56), ("timestamp-req-icmp-ip-tx-bc", 57), ("timestamp-req-icmp-ip-rx-bc", 58), ("timestamp-rep-icmp-ip-tx-bc", 59), ("timestamp-rep-icmp-ip-rx-bc", 60), ("addr-mask-req-icmp-ip-tx-bc", 61), ("addr-mask-req-icmp-ip-rx-bc", 62), ("addr-mask-rep-icmp-ip-tx-bc", 63), ("addr-mask-rep-icmp-ip-rx-bc", 64), ("pkt-too-big-icmp-ip-tx-bc", 65), ("pkt-too-big-icmp-ip-rx-bc", 66), ("gp-mem-query-icmp-ip-tx-bc", 67), ("gp-mem-query-icmp-ip-rx-bc", 68), ("gp-mem-report-icmp-ip-tx-bc", 69), ("gp-mem-report-icmp-ip-rx-bc", 70), ("gp-mem-reduct-icmp-ip-tx-bc", 71), ("gp-mem-reduct-icmp-ip-rx-bc", 72), ("ospf-ip-tx-bc", 73), ("ospf-ip-rx-bc", 74), ("other-ip-tx-bc", 75), ("other-ip-rx-bc", 76), ("ipx-tx-bc", 77), ("ipx-rx-bc", 78), ("spx-ipx-tx-bc", 79), ("spx-ipx-rx-bc", 80), ("ncp-ipx-tx-bc", 81), ("ncp-ipx-rx-bc", 82), ("sap-ipx-tx-bc", 83), ("sap-ipx-rx-bc", 84), ("rip-ipx-tx-bc", 85), ("rip-ipx-rx-bc", 86), ("netbios-ipx-tx-bc", 87), ("netbios-ipx-rx-bc", 88), ("other-ipx-tx-bc", 89), ("other-ipx-rx-bc", 90), ("arp-tx-bc", 91), ("arp-rx-bc", 92), ("arp-req-tx-bc", 93), ("arp-req-rx-bc", 94), ("arp-rep-tx-bc", 95), ("arp-rep-rx-bc", 96), ("rarp-req-tx-bc", 97), ("rarp-req-rx-bc", 98), ("rarp-rep-tx-bc", 99), ("rarp-rep-rx-bc", 100), ("inarp-req-tx-bc", 101), ("inarp-req-rx-bc", 102), ("inarp-rep-tx-bc", 103), ("inarp-rep-rx-bc", 104), ("sna-tx-bc", 105), ("sna-rx-bc", 106), ("sna-subarea-tx-bc", 107), ("sna-subarea-rx-bc", 108), ("sna-periph-tx-bc", 109), ("sna-periph-rx-bc", 110), ("sna-appn-tx-bc", 111), ("sna-appn-rx-bc", 112), ("sna-netbios-tx-bc", 113), ("sna-netbios-rx-bc", 114), ("cisco-tx-bc", 115), ("cisco-rx-bc", 116), ("other-tx-bc", 117), ("other-rx-bc", 118), ("user-defined-1-tx-bc", 119), ("user-defined-1-rx-bc", 120), ("user-defined-2-tx-bc", 121), ("user-defined-2-rx-bc", 122), ("user-defined-3-tx-bc", 123), ("user-defined-3-rx-bc", 124), ("user-defined-4-tx-bc", 125), ("user-defined-4-rx-bc", 126), ("thru-byte-tx-bc", 127), ("thru-byte-rx-bc", 128), ("thru-frame-tx-bc", 129), ("thru-frame-rx-bc", 130), ("thru-fecn-tx-bc", 131), ("thru-fecn-rx-bc", 132), ("thru-becn-tx-bc", 133), ("thru-becn-rx-bc", 134), ("thru-de-tx-bc", 135), ("thru-de-rx-bc", 136), ("cir-percent-range1-tx-bc", 137), ("cir-percent-range1-rx-bc", 138), ("cir-percent-range2-tx-bc", 139), ("cir-percent-range2-rx-bc", 140), ("cir-percent-range3-tx-bc", 141), ("cir-percent-range3-rx-bc", 142), ("cir-percent-range4-tx-bc", 143), ("cir-percent-range4-rx-bc", 144), ("cir-percent-range5-tx-bc", 145), ("cir-percent-range5-rx-bc", 146), ("cir-percent-range6-tx-bc", 147), ("cir-percent-range6-rx-bc", 148), ("cir-percent-range7-tx-bc", 149), ("cir-percent-range7-rx-bc", 150), ("cir-percent-range8-tx-bc", 151), ("cir-percent-range8-rx-bc", 152), ("lmi-tx-bc", 153), ("lmi-rx-bc", 154), ("lmi-livo-enq-tx-bc", 155), ("lmi-livo-enq-rx-bc", 156), ("lmi-livo-stat-tx-bc", 157), ("lmi-livo-stat-rx-bc", 158), ("lmi-full-enq-tx-bc", 159), ("lmi-full-enq-rx-bc", 160), ("lmi-full-stat-tx-bc", 161), ("lmi-full-stat-rx-bc", 162), ("lmi-other-tx-bc", 163), ("lmi-other-rx-bc", 164), ("total-uptime", 165), ("total-downtime", 166), ("igrp-tx-bc", 167), ("igrp-rx-bc", 168), ("vnip-tx-bc", 169), ("vnip-rx-bc", 170), ("annex-g-tx-bc", 171), ("annex-g-rx-bc", 172)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwLongTermProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwLongTermProtocol.setDescription('The type of protocol monitored for the statistics.')
tfrapPerfNetwLongTermInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwLongTermInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwLongTermInterval.setDescription('The time interval in which the value was collected. Long Term statistis are maintained for 96 intervals with the interval duration defined by (CfgFrPerfTimersLTInterval).')
tfrapPerfNetwLongTermValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwLongTermValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwLongTermValue.setDescription('The statistic collected for the given DLCI and protocol and within the given time interval.')
tfrapPerfNetwLongTermAltTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 2), )
if mibBuilder.loadTexts: tfrapPerfNetwLongTermAltTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwLongTermAltTable.setDescription('This is an alternative method to access the database of long term statistics. The statistics are indexed by DLCI and protocol and are returned in an OCTETSTRING.')
tfrapPerfNetwLongTermAltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 2, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfNetwLongTermAltDlci"), (0, "TFRAP-MIB", "tfrapPerfNetwLongTermAltProtocol"))
if mibBuilder.loadTexts: tfrapPerfNetwLongTermAltEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwLongTermAltEntry.setDescription('The Long Term Statistic for a particular DLCI and protocol.')
tfrapPerfNetwLongTermAltDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwLongTermAltDlci.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwLongTermAltDlci.setDescription('The DLCI monitored for the statistics.')
tfrapPerfNetwLongTermAltProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 21, 22, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172))).clone(namedValues=NamedValues(("ip-tx-bc", 1), ("ip-rx-bc", 2), ("tcp-ip-tx-bc", 3), ("tcp-ip-rx-bc", 4), ("ftp-tcp-ip-tx-bc", 5), ("ftp-tcp-ip-rx-bc", 6), ("telnet-tcp-ip-tx-bc", 7), ("telnet-tcp-ip-rx-bc", 8), ("smtp-tcp-ip-tx-bc", 9), ("smtp-tcp-ip-rx-bc", 10), ("http-tcp-ip-tx-bc", 13), ("http-tcp-ip-rx-bc", 14), ("netbios-ssn-tcp-ip-tx-bc", 15), ("netbios-ssn-tcp-ip-rx-bc", 16), ("udp-ip-tx-bc", 21), ("udp-ip-rx-bc", 22), ("tftp-udp-ip-tx-bc", 29), ("tftp-udp-ip-rx-bc", 30), ("netbios-dgm-udp-ip-tx-bc", 33), ("netbios-dgm-udp-ip-rx-bc", 34), ("snmp-udp-ip-tx-bc", 35), ("snmp-udp-ip-rx-bc", 36), ("snmptrap-udp-ip-tx-bc", 37), ("snmptrap-udp-ip-rx-bc", 38), ("rip-udp-ip-tx-bc", 39), ("rip-udp-ip-rx-bc", 40), ("icmp-ip-tx-bc", 41), ("icmp-ip-rx-bc", 42), ("echorep-icmp-ip-tx-bc", 43), ("echorep-icmp-ip-rx-bc", 44), ("dest-unr-icmp-ip-tx-bc", 45), ("dest-unr-icmp-ip-rx-bc", 46), ("src-quench-icmp-ip-tx-bc", 47), ("src-quench-icmp-ip-rx-bc", 48), ("redirect-icmp-ip-tx-bc", 49), ("redirect-icmp-ip-rx-bc", 50), ("echoreq-icmp-ip-tx-bc", 51), ("echoreq-icmp-ip-rx-bc", 52), ("time-excd-icmp-ip-tx-bc", 53), ("time-excd-icmp-ip-rx-bc", 54), ("param-prob-icmp-ip-tx-bc", 55), ("param-prob-icmp-ip-rx-bc", 56), ("timestamp-req-icmp-ip-tx-bc", 57), ("timestamp-req-icmp-ip-rx-bc", 58), ("timestamp-rep-icmp-ip-tx-bc", 59), ("timestamp-rep-icmp-ip-rx-bc", 60), ("addr-mask-req-icmp-ip-tx-bc", 61), ("addr-mask-req-icmp-ip-rx-bc", 62), ("addr-mask-rep-icmp-ip-tx-bc", 63), ("addr-mask-rep-icmp-ip-rx-bc", 64), ("pkt-too-big-icmp-ip-tx-bc", 65), ("pkt-too-big-icmp-ip-rx-bc", 66), ("gp-mem-query-icmp-ip-tx-bc", 67), ("gp-mem-query-icmp-ip-rx-bc", 68), ("gp-mem-report-icmp-ip-tx-bc", 69), ("gp-mem-report-icmp-ip-rx-bc", 70), ("gp-mem-reduct-icmp-ip-tx-bc", 71), ("gp-mem-reduct-icmp-ip-rx-bc", 72), ("ospf-ip-tx-bc", 73), ("ospf-ip-rx-bc", 74), ("other-ip-tx-bc", 75), ("other-ip-rx-bc", 76), ("ipx-tx-bc", 77), ("ipx-rx-bc", 78), ("spx-ipx-tx-bc", 79), ("spx-ipx-rx-bc", 80), ("ncp-ipx-tx-bc", 81), ("ncp-ipx-rx-bc", 82), ("sap-ipx-tx-bc", 83), ("sap-ipx-rx-bc", 84), ("rip-ipx-tx-bc", 85), ("rip-ipx-rx-bc", 86), ("netbios-ipx-tx-bc", 87), ("netbios-ipx-rx-bc", 88), ("other-ipx-tx-bc", 89), ("other-ipx-rx-bc", 90), ("arp-tx-bc", 91), ("arp-rx-bc", 92), ("arp-req-tx-bc", 93), ("arp-req-rx-bc", 94), ("arp-rep-tx-bc", 95), ("arp-rep-rx-bc", 96), ("rarp-req-tx-bc", 97), ("rarp-req-rx-bc", 98), ("rarp-rep-tx-bc", 99), ("rarp-rep-rx-bc", 100), ("inarp-req-tx-bc", 101), ("inarp-req-rx-bc", 102), ("inarp-rep-tx-bc", 103), ("inarp-rep-rx-bc", 104), ("sna-tx-bc", 105), ("sna-rx-bc", 106), ("sna-subarea-tx-bc", 107), ("sna-subarea-rx-bc", 108), ("sna-periph-tx-bc", 109), ("sna-periph-rx-bc", 110), ("sna-appn-tx-bc", 111), ("sna-appn-rx-bc", 112), ("sna-netbios-tx-bc", 113), ("sna-netbios-rx-bc", 114), ("cisco-tx-bc", 115), ("cisco-rx-bc", 116), ("other-tx-bc", 117), ("other-rx-bc", 118), ("user-defined-1-tx-bc", 119), ("user-defined-1-rx-bc", 120), ("user-defined-2-tx-bc", 121), ("user-defined-2-rx-bc", 122), ("user-defined-3-tx-bc", 123), ("user-defined-3-rx-bc", 124), ("user-defined-4-tx-bc", 125), ("user-defined-4-rx-bc", 126), ("thru-byte-tx-bc", 127), ("thru-byte-rx-bc", 128), ("thru-frame-tx-bc", 129), ("thru-frame-rx-bc", 130), ("thru-fecn-tx-bc", 131), ("thru-fecn-rx-bc", 132), ("thru-becn-tx-bc", 133), ("thru-becn-rx-bc", 134), ("thru-de-tx-bc", 135), ("thru-de-rx-bc", 136), ("cir-percent-range1-tx-bc", 137), ("cir-percent-range1-rx-bc", 138), ("cir-percent-range2-tx-bc", 139), ("cir-percent-range2-rx-bc", 140), ("cir-percent-range3-tx-bc", 141), ("cir-percent-range3-rx-bc", 142), ("cir-percent-range4-tx-bc", 143), ("cir-percent-range4-rx-bc", 144), ("cir-percent-range5-tx-bc", 145), ("cir-percent-range5-rx-bc", 146), ("cir-percent-range6-tx-bc", 147), ("cir-percent-range6-rx-bc", 148), ("cir-percent-range7-tx-bc", 149), ("cir-percent-range7-rx-bc", 150), ("cir-percent-range8-tx-bc", 151), ("cir-percent-range8-rx-bc", 152), ("lmi-tx-bc", 153), ("lmi-rx-bc", 154), ("lmi-livo-enq-tx-bc", 155), ("lmi-livo-enq-rx-bc", 156), ("lmi-livo-stat-tx-bc", 157), ("lmi-livo-stat-rx-bc", 158), ("lmi-full-enq-tx-bc", 159), ("lmi-full-enq-rx-bc", 160), ("lmi-full-stat-tx-bc", 161), ("lmi-full-stat-rx-bc", 162), ("lmi-other-tx-bc", 163), ("lmi-other-rx-bc", 164), ("total-uptime", 165), ("total-downtime", 166), ("igrp-tx-bc", 167), ("igrp-rx-bc", 168), ("vnip-tx-bc", 169), ("vnip-rx-bc", 170), ("annex-g-tx-bc", 171), ("annex-g-rx-bc", 172)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwLongTermAltProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwLongTermAltProtocol.setDescription('The protocol monitored for the statistics.')
tfrapPerfNetwLongTermAltArray = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfNetwLongTermAltArray.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetwLongTermAltArray.setDescription('The statistic collected for the given DLCI and protocol.')
tfrapPerfNetworkLongTermCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 3))
tfrapPerfNetworkLongTermCmdClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-statistics", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapPerfNetworkLongTermCmdClear.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfNetworkLongTermCmdClear.setDescription('Allows the user to zero out all the statistics in the long term statistics tables. (1) Clear all Long Term statistics')
tfrapPerfCirPercentUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 6))
tfrapPerfCirPercentUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1), )
if mibBuilder.loadTexts: tfrapPerfCirPercentUtilizationTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirPercentUtilizationTable.setDescription('Short Term Statistics on the percentage of CIR used on each DLCI. Each short term statistics interval, the count of bytes transmitted and received is used to calculate the percentage of CIR used. The byte count is then added to the appropriate bucket for the CIR percentage range.')
tfrapPerfCirPercentUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfCirPercentUtilizationInterval"), (0, "TFRAP-MIB", "tfrapPerfCirPercentUtilizationDlciValue"))
if mibBuilder.loadTexts: tfrapPerfCirPercentUtilizationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirPercentUtilizationEntry.setDescription('The CIR Percentage Statistics for a particular DLCI. These calculations are done at the completion of each Short Term interval.')
tfrapPerfCirPercentUtilizationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("current-interval", 1), ("previous-interval", 2), ("cumulative-counts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirPercentUtilizationInterval.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirPercentUtilizationInterval.setDescription('The Short Term statistics model maintains three intervals: current, previous, and cumulative totals. Interval duration is defined by the Short Term Timer (CfgFrPerfTimersSTInterval). (1) Currently active short term interval (2) Previously completed short term interval (3) Cumulative total since last cleared.')
tfrapPerfCirPercentUtilizationDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirPercentUtilizationDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirPercentUtilizationDlciValue.setDescription('The DLCI value with which the Statistics are associated.')
tfrapPerfCirRxPercentUtilizationRange1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange1.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange1.setDescription('The number of short-term intervals during which rx data throughput on this DLCI compared to CIR was in range 1 (0% of CIR).')
tfrapPerfCirRxPercentUtilizationRange2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange2.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange2.setDescription('The number of short-term intervals during which rx data throughput on this DLCI compared to CIR was in range 2 (1-10% of CIR).')
tfrapPerfCirRxPercentUtilizationRange3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange3.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange3.setDescription('The number of short-term intervals during which rx data throughput on this DLCI compared to CIR was in range 3 (11-20% of CIR).')
tfrapPerfCirRxPercentUtilizationRange4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange4.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange4.setDescription('The number of short-term intervals during which rx data throughput on this DLCI compared to CIR was in range 4 (21-50% of CIR).')
tfrapPerfCirRxPercentUtilizationRange5 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange5.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange5.setDescription('The number of short-term intervals during which rx data throughput on this DLCI compared to CIR was in range 5 (51-80% of CIR).')
tfrapPerfCirRxPercentUtilizationRange6 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange6.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange6.setDescription('The number of short-term intervals during which rx data throughput on this DLCI compared to CIR was in range 6 (81-100% of CIR).')
tfrapPerfCirRxPercentUtilizationRange7 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange7.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange7.setDescription('The number of short-term intervals during which rx data throughput on this DLCI compared to CIR was in range 7 (101-150% of CIR).')
tfrapPerfCirRxPercentUtilizationRange8 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange8.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirRxPercentUtilizationRange8.setDescription('The number of short-term intervals during which rx data throughput on this DLCI compared to CIR was in range 8 (> 150% of CIR).')
tfrapPerfCirTxPercentUtilizationRange1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange1.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange1.setDescription('The number of short-term intervals during which tx data throughput on this DLCI compared to CIR was in range 1 (0% of CIR).')
tfrapPerfCirTxPercentUtilizationRange2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange2.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange2.setDescription('The number of short-term intervals during which tx data throughput on this DLCI compared to CIR was in range 2 (1-10% of CIR).')
tfrapPerfCirTxPercentUtilizationRange3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange3.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange3.setDescription('The number of short-term intervals during which tx data throughput on this DLCI compared to CIR was in range 3 (11-20% of CIR).')
tfrapPerfCirTxPercentUtilizationRange4 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange4.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange4.setDescription('The number of short-term intervals during which tx data throughput on this DLCI compared to CIR was in range 4 (21-50% of CIR).')
tfrapPerfCirTxPercentUtilizationRange5 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange5.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange5.setDescription('The number of short-term intervals during which tx data throughput on this DLCI compared to CIR was in range 5 (51-80% of CIR).')
tfrapPerfCirTxPercentUtilizationRange6 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange6.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange6.setDescription('The number of short-term intervals during which tx data throughput on this DLCI compared to CIR was in range 6 (81-100% o0f CIR).')
tfrapPerfCirTxPercentUtilizationRange7 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange7.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange7.setDescription('The number of short-term intervals during which tx data throughput on this DLCI compared to CIR was in range 7 (101-150% of CIR).')
tfrapPerfCirTxPercentUtilizationRange8 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange8.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCirTxPercentUtilizationRange8.setDescription('The number of short-term intervals during which tx data throughput on this DLCI compared to CIR was in range 8 (> 150% of CIR).')
tfrapPerfCurrentPerDlciUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 2), )
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciUtilizationTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciUtilizationTable.setDescription('The current measurement of utilization as a percentage of CIR on each DLCI. Each short term statistics interval, the count of bytes transmitted and received is used to calculate the percentage of CIR used.')
tfrapPerfCurrentPerDlciUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 2, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapPerfCurrentPerDlciUtilizationDlciValue"))
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciUtilizationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciUtilizationEntry.setDescription('The utilization statistics for a particular DLCI.')
tfrapPerfCurrentPerDlciUtilizationDlciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciUtilizationDlciValue.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciUtilizationDlciValue.setDescription('The DLCI value with which the Statistics are associated.')
tfrapPerfCurrentPerDlciRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciRxUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciRxUtilization.setDescription('The receive direction utilization as a percentage of CIR.')
tfrapPerfCurrentPerDlciTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciTxUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciTxUtilization.setDescription('The transmit direction utilization as a percentage of CIR.')
tfrapPerfCurrentPerDlciAggregateUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciAggregateUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCurrentPerDlciAggregateUtilization.setDescription('The aggregate utilization, the average of the receive and transmit utilization as a percentage of CIR.')
tfrapPerfCurrentUnitUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 3))
tfrapPerfCurrentDteUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCurrentDteUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCurrentDteUtilization.setDescription('The DTE interface utilization as a percentage of line rate.')
tfrapPerfCurrentWanUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCurrentWanUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCurrentWanUtilization.setDescription('The WAN interface utilization as a percentage of line rate.')
tfrapPerfCurrentAggregateUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 5, 6, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPerfCurrentAggregateUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPerfCurrentAggregateUtilization.setDescription('The aggregate utilization of the unit, the average of the DTE and WAN interface utilizations as a percentage of line rate.')
tfrapEventTrapLog = MibIdentifier((1, 3, 6, 1, 4, 1, 485, 5, 10))
tfrapEventTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 10, 1), )
if mibBuilder.loadTexts: tfrapEventTrapLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapEventTrapLogTable.setDescription('This table contains the Event/Trap log. The entries are indexed by sequence number.')
tfrapEventTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 10, 1, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapEventTrapLogSeqNum"))
if mibBuilder.loadTexts: tfrapEventTrapLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapEventTrapLogEntry.setDescription('The event record for a particular event.')
tfrapEventTrapLogSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventTrapLogSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapEventTrapLogSeqNum.setDescription('The sequence number associated with an event record.')
tfrapEventTrapLogGenericEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventTrapLogGenericEvent.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapEventTrapLogGenericEvent.setDescription('The SNMP generic trap or event number.')
tfrapEventTrapLogSpecificEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventTrapLogSpecificEvent.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapEventTrapLogSpecificEvent.setDescription('The SNMP specific trap or event sub-identifier number.')
tfrapEventTrapLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventTrapLogTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapEventTrapLogTimeStamp.setDescription('The SNMP trap timestamp.')
tfrapEventTrapLogVarBind1 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventTrapLogVarBind1.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapEventTrapLogVarBind1.setDescription('Variable Binding 1 for this SNMP Trap event.')
tfrapEventTrapLogVarBind2 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventTrapLogVarBind2.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapEventTrapLogVarBind2.setDescription('Variable Binding 2 for this SNMP Trap event.')
tfrapEventTrapLogVarBind3 = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventTrapLogVarBind3.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapEventTrapLogVarBind3.setDescription('Variable Binding 3 for this SNMP Trap event.')
tfrapEventLogAltTable = MibTable((1, 3, 6, 1, 4, 1, 485, 5, 10, 2), )
if mibBuilder.loadTexts: tfrapEventLogAltTable.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapEventLogAltTable.setDescription("This is an alternative method to access the database of the Event/Trap Log. The database is indexed by Sequence Number and Event/Trap log's are returned in an OCTETSTRING.")
tfrapEventLogAltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 485, 5, 10, 2, 1), ).setIndexNames((0, "TFRAP-MIB", "tfrapEventLogAltSeqNum"))
if mibBuilder.loadTexts: tfrapEventLogAltEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapEventLogAltEntry.setDescription('The Event/Trap Log for a particular sequence number.')
tfrapEventLogAltSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventLogAltSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapEventLogAltSeqNum.setDescription('The Sequence Number monitored for the Event Log')
tfrapEventLogAltArray = MibTableColumn((1, 3, 6, 1, 4, 1, 485, 5, 10, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventLogAltArray.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapEventLogAltArray.setDescription('The Event / Trap log for the given sequence number.')
tfrapEventLogCurrentSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapEventLogCurrentSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapEventLogCurrentSeqNum.setDescription('The current index into the Event Log Table.')
tfrapEventLogFreeze = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freeze", 1), ("un-freeze", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapEventLogFreeze.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapEventLogFreeze.setDescription('This freezes the Event/Trap Log. freeze(1) will prevent Events / Traps from being entered into the database, un-freeze(2) will allow Events / Traps to be logged into the database. An event will be logged indicating a set of this entry')
tfrapEventLogClear = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tfrapEventLogClear.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapEventLogClear.setDescription('This clears the Event/Trap Log.')
tfrapAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 75, 76, 90, 91, 92, 93, 94, 95, 96, 97, 136, 137, 138, 139, 140, 141, 142, 257, 258, 259, 260, 261, 262, 263, 264, 265))).clone(namedValues=NamedValues(("bad-config-in-set", 1), ("config-local-update", 2), ("t1-netw-carrier-loss", 3), ("t1-netw-carrier-detect", 4), ("t1-netw-sync-loss-declare", 5), ("t1-netw-sync-acquire", 6), ("t1-netw-red-alarm-declare", 7), ("t1-netw-red-alarm-clear", 8), ("t1-netw-yellow-alarm-detect", 9), ("t1-netw-yellow-alarm-clear", 10), ("t1-netw-ais-detect", 11), ("t1-netw-ais-clear", 12), ("t1-controlled-slip", 13), ("local-unit-loopback-enabled", 14), ("local-unit-loopback-disabled", 15), ("local-unit-loopback-failure", 16), ("local-dte-loopback-enabled", 17), ("local-dte-loopback-disabled", 18), ("local-dte-loopback-failure", 19), ("local-aggregate-loopback-enabled", 20), ("local-aggregate-loopback-disabled", 21), ("local-aggregate-loopback-failure", 22), ("local-payload-loopback-enabled", 23), ("local-payload-loopback-disabled", 24), ("local-payload-loopback-failure", 25), ("local-network-loopback-enabled", 26), ("local-network-loopback-disabled", 27), ("local-network-loopback-failure", 28), ("v54-loop-up-initiated", 29), ("v54-loop-down-completed", 30), ("v54-loopback-enabled-by-remote", 31), ("v54-loopback-disabled-by-remote", 32), ("v54-loopback-failure", 33), ("csu-loop-up-initiated", 34), ("csu-loop-down-completed", 35), ("csu-loopback-enabled-by-remote", 36), ("csu-loopback-disabled-by-remote", 37), ("csu-loopback-failure", 38), ("dsu-loop-up-initiated", 39), ("dsu-loop-down-completed", 40), ("dsu-loopback-enabled-by-remote", 41), ("dsu-loopback-disabled-by-remote", 42), ("dsu-loopback-failure", 43), ("bert-test-pattern-initiated", 44), ("bert-test-pattern-completed", 45), ("bert-test-pattern-failure", 46), ("dlci-active", 47), ("dlci-inactive", 48), ("dlci-td-threshold", 49), ("lmi-sourcing-change-passthru", 50), ("lmi-sourcing-change-user-dte", 51), ("lmi-sourcing-change-net-dte", 52), ("lmi-sourcing-change-user-net", 53), ("lmi-sourcing-change-net-net", 54), ("dte-signal-rts-on", 55), ("dte-signal-rts-off", 56), ("dte-signal-dtr-on", 57), ("dte-signal-dtr-off", 58), ("lmi-non-incr-seq-num-dte", 59), ("lmi-non-incr-seq-num-net", 60), ("lmi-seq-num-mismatch-dte", 61), ("lmi-seq-num-mismatch-net", 62), ("trap-muting-active", 75), ("trap-muting-inactive", 76), ("vloop-loop-up", 90), ("vloop-loop-down", 91), ("vloop-up-via-remote", 92), ("vloop-down-via-remote", 93), ("vloop-failed", 94), ("vbert-started", 95), ("vbert-stopped", 96), ("vbert-request-failed", 97), ("local-payload-loopback-via-rmt-enabled", 136), ("local-payload-loopback-via-rmt-disabled", 137), ("pvc-rx-utilization-exceeded", 138), ("pvc-tx-utilization-exceeded", 139), ("pvc-rx-utilization-cleared", 140), ("pvc-tx-utilization-cleared", 141), ("config-install-success", 142), ("tftp-requested", 257), ("tftp-transferring", 258), ("tftp-programming", 259), ("tftp-aborted", 260), ("tftp-success", 261), ("tftp-host-unreachable", 262), ("tftp-no-file", 263), ("tftp-invalid-file", 264), ("tftp-corrupt-file", 265)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapAlarmType.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapAlarmType.setDescription('The type of alarms that are generated on the node')
tfrapDLCINum = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapDLCINum.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapDLCINum.setDescription('The DLCI number for the DLCI active or inactive trap')
tfrapInterface = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("t1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapInterface.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapInterface.setDescription('The interface most recently reported in a TRAP.')
tfrapIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapIpAddress.setDescription('The IP address most recently reported in a TRAP.')
tfrapPercentUtilization = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapPercentUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapPercentUtilization.setDescription('The percent utilization for a DLCI most recently reported in a TRAP.')
tfrapUtilizationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapUtilizationThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapUtilizationThreshold.setDescription('The percent utilization threshold for a DLCI most recently reported in a TRAP.')
tfrapCfgLockIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 485, 5, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfrapCfgLockIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tfrapCfgLockIpAddress.setDescription('The IP address of the management station locking the configuration most recently reported in a TRAP.')
tfrapTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,0)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapTrap.setDescription('A tfrapTrap trap signifies that the sending node had its `tfrapAlarmType` variable modified.')
tfrapBadConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,1)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapBadConfigTrap.setDescription('Unit has received a configuration update request through SNMP but the request was rejected to due an incorrect or inappropriate parameter.')
tfrapLocalConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,2)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalConfigTrap.setDescription('Unit configuration has been updated locally (console port or front panel keypad) or remotely (telnet).')
tfrapt1netwcarrierloss = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,3)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapt1netwcarrierloss.setDescription('Unit is not detecting a signal from the wide area network.')
tfrapt1netwcarrierdetect = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,4)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapt1netwcarrierdetect.setDescription('Unit is detecting a signal from the wide area network.')
tfrapt1netwsynclossdeclare = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,5)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapt1netwsynclossdeclare.setDescription('Unit is not properly synchronized to the signal received from the wide area network. Frame synchronization is required for normal operation.')
tfrapt1netwsyncacquire = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,6)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapt1netwsyncacquire.setDescription('Unit is now synchronized with the signal received from the wide area network.')
tfrapt1netwredalarmdeclare = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,7)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapt1netwredalarmdeclare.setDescription('Unit has experienced loss of frame synchronization for an extended time and is reporting an alarm condition that severely impairs normal operation. During this Red Alarm condition the unit will transmit Yellow alarm back to the network. If this condition persists consult your service provider.')
tfrapt1netwredalarmclear = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,8)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapt1netwredalarmclear.setDescription('Unit has achieved frame synchronization for a length of time necessary to declare the interface stable and operational.')
tfrapt1netwyellowalarmdetect = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,9)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapt1netwyellowalarmdetect.setDescription('Unit is receiving a yellow alarm indication from the wide area network. Detection of yellow alarm implies that the attached device is in a red alarm conditon. Red alarm is declared due to the extended absence of a properly framed signal. If this condition persists consult your service provider.')
tfrapt1netwyellowalarmclear = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,10)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapt1netwyellowalarmclear.setDescription('Unit is no longer receiving a yellow alarm indication from the wide area network. Yellow alarm implies that the attached device is in a red alarm conditon. Red alarm is declared due to the extended absence of a properly framed signal.')
tfrapt1netwaisdetect = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,11)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapt1netwaisdetect.setDescription('Unit is receiving unframed all ones from the wide area network (AIS, blue alarm). Detection of AIS implies that the attached device is reporting an alarm condition from an upstream device. If this condition persists consult your service provider.')
tfrapt1netwaisclear = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,12)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapt1netwaisclear.setDescription('Unit is no longer receiving unframed all ones from the wide area network (AIS, blue alarm). Detection of AIS implies that the attached device is reporting an alarm condition from an upstream device.')
tfrapt1controlledslip = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,13)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapt1controlledslip.setDescription('Unit is reporting an occurrence of a timing slip causing either the deletion or repetition of a block of data. This is indicative of a timing problem within the application. Check for multiple clock sources or the absence of a stable clock source.')
tfrapLocalUnitLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,14)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalUnitLoopbackEnabledTrap.setDescription('Unit is in a bidirectional unit loopback. Data is received from either interface, processed, and transmitted back towards the same interface. When configured for Frame Relay operation the unit will preserve the LMI path during this loopback. In Frame Relay mode, only valid frames are looped back (pseudorandom test patterns will be dropped).')
tfrapLocalUnitLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,15)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalUnitLoopbackDisabledTrap.setDescription('Bidirectional unit loopback path is removed.')
tfrapLocalUnitLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,16)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalUnitLoopbackFailedTrap.setDescription('Bidirectional unit loopback request has been rejected by the unit. Typically, this is due to the presence of another loopback condition.')
tfrapLocalDteLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,17)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalDteLoopbackEnabledTrap.setDescription('Unit is in a bidirectional DTE loopback. All data received at the DTE interface is looped back regardless of format or content (line loopback). When configured for Frame Relay operation the unit will not preserve the LMI path during this loopback. Data received from the WAN is processed and transmitted back out the WAN. In Frame Relay mode, on the WAN interface, only valid frames are looped back (pseudorandom test patterns will be dropped).')
tfrapLocalDteLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,18)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalDteLoopbackDisabledTrap.setDescription('Bidirectional DTE loopback path is removed.')
tfrapLocalDteLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,19)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalDteLoopbackFailedTrap.setDescription('Bidirectional DTE loopback request has been rejected by the unit. Typically, this is due to the presence of another loopback condition.')
tfrapLocalAggregateLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,20)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalAggregateLoopbackEnabledTrap.setDescription('Unit is in local aggregate loopback. All data received from the DTE is transmit to the WAN and also looped back towards the DTE at a point just prior to WAN transmission (digital loopback). When configured for Frame Relay operation the unit will not preserve the LMI path during this loopback. In Frame Relay mode only valid frames are looped back (pseudorandom test patterns will be dropped).')
tfrapLocalAggregateLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,21)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalAggregateLoopbackDisabledTrap.setDescription('Local aggregate loopback path is removed.')
tfrapLocalAggregateLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,22)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalAggregateLoopbackFailedTrap.setDescription('Local aggregate loopback request has been rejected by the unit. Typically, this is due to the presence of another loopback condition.')
tfrapLocalPayloadLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,23)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalPayloadLoopbackEnabledTrap.setDescription('Unit is in payload loopback. All data received from the WAN, regardless of format or content, is processed at the physical layer before being reframed and transmit back out the WAN. All ones are sent to the DTE during this diagnostic state. When configured for Frame Relay operation the unit will not preserve the LMI path during this loopback.')
tfrapLocalPayloadLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,24)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalPayloadLoopbackDisabledTrap.setDescription('Local payload loopback path is removed.')
tfrapLocalPayloadLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,25)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalPayloadLoopbackFailedTrap.setDescription('Local payload loopback request has been rejected. Typically, this is due to the presence of another loopback condition.')
tfrapLocalNetLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,26)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalNetLoopbackEnabledTrap.setDescription('Unit is in local network loopback. All data received from the WAN, regardless of format or content, is transmitted back out (line interface loopback) while still being sent to the DTE. When configured for Frame Relay operation the unit will not preserve the LMI path during this loopback.')
tfrapLocalNetLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,27)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalNetLoopbackDisabledTrap.setDescription('Local network loopback path is removed.')
tfrapLocalNetLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,28)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalNetLoopbackFailedTrap.setDescription('Local network loopback request is rejected. Typically, this is due to the presence of another loopback condition.')
tfrapV54LoopUpInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,29)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapV54LoopUpInitiatedTrap.setDescription('Unit has sent the standard V54 loop up pattern out the WAN at the DTE rate. A compatible piece of equipment can sense this pattern and enter a loopback state - typically putting up a bidirectional DTE loopback path. After sending the V54 loop up pattern, the (local) unit returns to normal operation, expecting a loopback condition at the remote device.')
tfrapV54LoopDownCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,30)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapV54LoopDownCompletedTrap.setDescription('Unit has sent the standard V54 loop down pattern out the WAN at the DTE rate. A compatible piece of equipment can sense this pattern remove the loopback state that is entered after receiving a loop up pattern - typically a bidirectional DTE loopback path. After sending the V54 loop down pattern, the unit returns to normal operation.')
tfrapV54LoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,31)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapV54LoopbackEnabledTrap.setDescription('Unit has received a V54 loop up pattern from a compatible piece of equipment. A bidirectional DTE loopback is activated. All data received at the DTE interface is looped back regardless of format or content. When configured for Frame Relay operation the unit will not preserve the LMI path during this loopback. Data received from the WAN is processed and transmitted back out the WAN. In Frame Relay mode, on the WAN interface, only valid frames are looped back (pseudorandom test patterns will be dropped).')
tfrapV54LoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,32)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapV54LoopbackDisabledTrap.setDescription('Unit has received a V54 loop down pattern from a compatible piece of equipment. The bidirectional local DTE loopback is removed.')
tfrapV54LoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,33)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapV54LoopbackFailedTrap.setDescription('Unit has rejected the request to send a V54 loop up. Typically, this is due to the presence of another loopback condition.')
tfrapCsuLoopUpInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,34)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapCsuLoopUpInitiatedTrap.setDescription('Unit has sent a standard CSU loop up pattern at the full WAN rate. A compatible piece of equipment can sense this pattern and enter a loopback state - typically putting up a network line loopback. After sending the CSU loop up pattern, the (local) unit returns to normal operation, expecting a loopback condition at the attached device.')
tfrapCsuLoopDownCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,35)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapCsuLoopDownCompletedTrap.setDescription('Unit has sent the standard CSU loop down pattern out the WAN at the full WAN rate. A compatible piece of equipment can sense this pattern and remove the loopback state that is entered after receiving a loop up pattern - typically a network line loopback. After sending the CSU loop down pattern, the unit returns to normal operation.')
tfrapCsuLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,36)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapCsuLoopbackEnabledTrap.setDescription('Unit has received a standard CSU loop up pattern and will enter a local network loopback state. All data received from the WAN, regardless of format or content, is transmitted back out (line interface loopback) while still being sent to the DTE. When configured for Frame Relay operation the unit will not preserve the LMI path during this loopback.')
tfrapCsuLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,37)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapCsuLoopbackDisabledTrap.setDescription('Unit has received a standard CSU loop down pattern and will remove the local network loopback path.')
tfrapCsuLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,38)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapCsuLoopbackFailedTrap.setDescription('Unit has rejected the request to send a CSU loop up. Typically, this is due to the presence of another loopback condition.')
tfrapDsuLoopUpInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,39)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapDsuLoopUpInitiatedTrap.setDescription('Unit has sent a proprietary DSU loop up pattern at the full WAN rate. A compatible piece of equipment can sense this pattern and enter a network line loopback state. After sending the DSU loop up pattern, the (local) unit returns to normal operation, expecting a loopback condition at the remote device.')
tfrapDsuLoopDownCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,40)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapDsuLoopDownCompletedTrap.setDescription('Unit has sent the proprietary DSU loop down pattern out the WAN at the full WAN rate. A compatible piece of equipment can sense this pattern and remove a network line loopback condition. After sending the DSU loop down pattern, the unit returns to normal operation.')
tfrapDsuLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,41)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapDsuLoopbackEnabledTrap.setDescription('Unit has received a proprietary DSU loop up pattern and will enter a local network loopback state. All data received from the WAN, regardless of format or content, is transmitted back out (line interface loopback) while still being sent to the DTE. When configured for Frame Relay operation the unit will not preserve the LMI path during this loopback.')
tfrapDsuLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,42)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapDsuLoopbackDisabledTrap.setDescription('Unit has received a proprietary DSU loop down pattern and will remove the local network loopback path.')
tfrapDsuLoopbackFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,43)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapDsuLoopbackFailedTrap.setDescription('Unit has rejected the request to send a DSU loop up. Typically, this is due to the presence of another loopback condition.')
tfrapBertInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,44)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapBertInitiatedTrap.setDescription('Unit is sending a pseudorandom test pattern (511 or QRSS) out the WAN and monitoring the WAN received data for the same pattern. This test may be ineffective in certain frame relay applications as pseudorandom data lacks appropriate framing.')
tfrapBertCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,45)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapBertCompletedTrap.setDescription('Unit has stopped sending a pseudorandom test pattern out the WAN.')
tfrapBertFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,46)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapBertFailedTrap.setDescription('Unit has rejected the request to enter a BERT test state. Typically, this is due to the presence of another diagnostic condition.')
tfrapDLCIActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,47)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"))
if mibBuilder.loadTexts: tfrapDLCIActiveTrap.setDescription('Unit is reporting this DLCI as active and provisioned. An active DLCI is one that is explictly declared ACTIVE in an LMI Full Status Response (typically coming from a frame relay switch).')
tfrapDLCIInactiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,48)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"))
if mibBuilder.loadTexts: tfrapDLCIInactiveTrap.setDescription("Unit is reporting this DLCI as inactive. An inactive DLCI is determined inactive one of two ways: it is either explictly declared inactive in an LMI Full Status Response (typically coming from a frame relay switch) or a Full Status Response is not seen causing a Full Status Timer expiry. Having the unit's full status timer too low could result in the unit falsely declaring DLCIs inactive (then active again). This does not interfere with any data activity on the DLCI but could result in excessive traps.")
tfrapDLCITDThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,49)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapIpAddress"))
if mibBuilder.loadTexts: tfrapDLCITDThresholdTrap.setDescription('VNIP has measured a round-trip transit delay on this PVC to this peer which exceeds the user-defined threshold.')
tfrapLmiSourcingChangePassthruTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,50)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLmiSourcingChangePassthruTrap.setDescription('Unit is not sourcing any LMI messages. If this state persists then LMI is up and the proper handshaking is occurring independent of the unit. This may also be a transient state if the unit is in an LMI hunt mode. If this trap occurs repeatedly, separated by other LMI sourcing states, the unit is not seeing any of the expected LMI messages from either interface. Check LMI type, connectivity, and configuration of associated equipment.')
tfrapLmiSourcingChangeUserDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,51)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLmiSourcingChangeUserDteTrap.setDescription('Unit is acting as a source of LMI Status Requests (Link Integrity Verification, Keep Alive). If this state persists then the equipment attached to the DTE interface is configured as a Frame Relay DCE but a companion Frame Relay DTE device is not seen out the WAN. This could also be a transient state if the unit is in an LMI hunt mode. If this trap occurs repeatedly, separated by other LMI sourcing states, the unit is not seeing any of the expected LMI messages from either interface. Check LMI type, connectivity, and configuration of associated equipment.')
tfrapLmiSourcingChangeNetDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,52)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLmiSourcingChangeNetDteTrap.setDescription('Unit is acting as a source of LMI Status Responses (Link Intergrity Verification, Keep Alive). If this state persists then the equpiment attached to the DTE interface is configured as a Frame Relay DTE but a companion Frame Relay DCE device is not seen out the WAN. This could also be a transient state if the unit is in an LMI hunt mode. If this trap occurs repeatedly, separated by other LMI sourcing states, the unit is not seeing any of the expected LMI messages from either interface. Check LMI type, connectivity, and configuration of external equipment.')
tfrapLmiSourcingChangeUserT1Trap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,53)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLmiSourcingChangeUserT1Trap.setDescription('Unit is acting as a source of LMI Status Requests (Link Integrity Verification, Keep Alive). If this state persists then the equipment attached to the WAN interface is configured as a Frame Relay DCE but a companion Frame Relay DTE device is not seen out the DTE interface. This could also be a transient state if the unit is in an LMI hunt mode. If this trap occurs repeatedly, separated by other LMI sourcing states, the unit is not seeing any of the expected LMI messages from either interface. Check LMI type, connectivity, and configuration of associated equipment.')
tfrapLmiSourcingChangeNetT1Trap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,54)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLmiSourcingChangeNetT1Trap.setDescription('Unit is acting as a source of LMI Status Responses (Link Integrity Verification, Keep Alive). If this state persists then the equipment attached to the WAN interface is configured as a Frame Relay DTE but a companion Frame Relay DCE device is not seen out the DTE interface. This could also be a transient state if the unit is in an LMI hunt mode. If this trap occurs repeatedly, separated by other LMI sourcing states, the unit is not seeing any of the expected LMI messages from either interface. Check LMI type, connectivity, and configuration of associated equipment.')
tfrapDteSignalRtsOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,55)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapDteSignalRtsOnTrap.setDescription("Unit's DTE Request to Send (RTS) interface control signal is now active (on). This signal is presented by the external DTE device. Unit may be configured to ignore the state of this signal or to require it for data transmission.")
tfrapDteSignalRtsOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,56)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapDteSignalRtsOffTrap.setDescription("Unit's DTE Request to Send (RTS) interface control signal is now inactive (off). This signal is presented by the external DTE device. Unit may be configured to ignore the state of this signal or to require it for data transmission.")
tfrapDteSignalDtrOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,57)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapDteSignalDtrOnTrap.setDescription("Unit's DTE Data Terminal Ready (DTR) interface control signal is now active (on). This signal is presented by the external DTE device. The unit may be configured to ignore the state of this signal or to require it for data transmission.")
tfrapDteSignalDtrOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,58)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapDteSignalDtrOffTrap.setDescription("Unit's DTE Data Terminal Ready (DTR) interface control signal is now inactive (off). This signal is presented by the external DTE device. Unit may be configured to ignore the state of this signal or to require it for data transmission.")
tfrapNonIncrLmiSeqNumDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,59)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapNonIncrLmiSeqNumDteTrap.setDescription("Unit has detected a non-incrementing LMI sequence number from the DTE. A Status Enquiry or Status Response message has been seen at the DTE interface. The Link Integrity information element's Send Sequence Number was not incremented or was incremented more than once since the last Send Sequence Number seen from the DTE interface.")
tfrapNonIncrLmiSeqNumT1Trap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,60)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapNonIncrLmiSeqNumT1Trap.setDescription("Unit has detected a non-incrementing LMI sequence number from the WAN. A Status Enquiry or Status Response message has been seen at the WAN interface. The Link Integrity information element's Send Sequence Number was not incremented or was incremented more than once since the last Send Sequence Number seen from the WAN interface.")
tfrapLmiSeqNumMismatchDteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,61)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLmiSeqNumMismatchDteTrap.setDescription("Unit has detetcted an LMI sequence number mismatch from the DTE. A Status Enquiry or Status Response message has been seen at the DTE interface. The Link Inetgrity information element's Receive Sequence Number was not the most recent Send Sequence number sent from the WAN interface. ")
tfrapLmiSeqNumMismatchT1Trap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,62)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLmiSeqNumMismatchT1Trap.setDescription("Unit has detetcted an LMI sequence number mismatch from the WAN. A Status Enquiry or Status Response message has been seen at the WAN interface. The Link Inetgrity information element's Receive Sequence Number was not the most recent Send Sequence number sent from the DTE interface.")
tfrapTrapMutingActive = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,75)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapTrapMutingActive.setDescription('Trap generation is muted.')
tfrapTrapMutingInactive = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,76)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapTrapMutingInactive.setDescription('Trap generation is re-enabled (muting disabled).')
tfrapVloopUp = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,90)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapInterface"))
if mibBuilder.loadTexts: tfrapVloopUp.setDescription('A Vnip PVC loopback (VLOOP) request has been sent to a remote device on this DLCI out this interface. The remote unit should respond by looping all data received on this PVC back towards the unit that initiated this request. A PVC running VLOOP will not be running any user data.')
tfrapVloopDown = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,91)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapInterface"))
if mibBuilder.loadTexts: tfrapVloopDown.setDescription('A Vnip PVC loopback (VLOOP) disable request has been sent to a remote device on this DLCI out this interface. The remote unit should respond by tearing down the logical loop on this DLCI.')
tfrapVloopUpViaRemote = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,92)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapInterface"))
if mibBuilder.loadTexts: tfrapVloopUpViaRemote.setDescription('A Vnip PVC loopback (VLOOP) request has been received from a remote device on this DLCI on this interface. The unit will respond by looping all data received on this PVC back out the interface towards the unit that initiated the request.')
tfrapVloopDownViaRemote = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,93)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapInterface"))
if mibBuilder.loadTexts: tfrapVloopDownViaRemote.setDescription('A request to disable a Vnip PVC loopback (VLOOP) on this unit with the indicated DLCI and Interface has been received. Usually this disable request is from the remote device that requested the VLOOP, however the request may also be due to a local event such as expiration of a locally configured loopback timeout. The unit will respond by tearing down the logical loop on this DLCI.')
tfrapVloopRequestFailed = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,94)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapInterface"))
if mibBuilder.loadTexts: tfrapVloopRequestFailed.setDescription('The request for a PVC loopback (VLOOP) has been rejected or did not complete.')
tfrapVbertStarted = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,95)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapInterface"))
if mibBuilder.loadTexts: tfrapVbertStarted.setDescription('A Vnip PVC error rate test (VBERT) has been started on this DLCI out this interface to a remote device. The VBERT test data will be statistically multiplexed in with user data, management data, and networking data. The destination peer will echo this test data back to the source producing a full-duplex volume-based timed test.')
tfrapVbertStopped = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,96)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapInterface"))
if mibBuilder.loadTexts: tfrapVbertStopped.setDescription('A Vnip PVC BERT (VBERT) has been stopped on this DLCI on this interface to a remote device.')
tfrapVbertRequestFailed = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,97)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapInterface"))
if mibBuilder.loadTexts: tfrapVbertRequestFailed.setDescription('The request for a PVC BERT (VBERT) on this DLCI on this interface has been rejected.')
tfrapLocalPayloadLoopbackEnabledViaRemoteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,136)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalPayloadLoopbackEnabledViaRemoteTrap.setDescription('Local Payload loopback enabled Via Remote unit.')
tfrapLocalPayloadLoopbackDisabledViaRemoteTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,137)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapLocalPayloadLoopbackDisabledViaRemoteTrap.setDescription('Local Payload loopback disabled Via Remote unit.')
tfrapPvcRxUtilizationExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,138)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapPercentUtilization"), ("TFRAP-MIB", "tfrapUtilizationThreshold"))
if mibBuilder.loadTexts: tfrapPvcRxUtilizationExceededTrap.setDescription('Percent utilization threshold was exceeded for the defined number of Short Term Intervals in the reception direction on this DLCI. ')
tfrapPvcTxUtilizationExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,139)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapPercentUtilization"), ("TFRAP-MIB", "tfrapUtilizationThreshold"))
if mibBuilder.loadTexts: tfrapPvcTxUtilizationExceededTrap.setDescription('Percent utilization threshold was exceeded for the defined number of Short Term Intervals in the transmission direction on this DLCI. ')
tfrapPvcRxUtilizationClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,140)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapPercentUtilization"), ("TFRAP-MIB", "tfrapUtilizationThreshold"))
if mibBuilder.loadTexts: tfrapPvcRxUtilizationClearedTrap.setDescription('Percent utilization was below the threshold for the defined number of Short Term Intervals in the reception direction on this DLCI. ')
tfrapPvcTxUtilizationClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,141)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapDLCINum"), ("TFRAP-MIB", "tfrapPercentUtilization"), ("TFRAP-MIB", "tfrapUtilizationThreshold"))
if mibBuilder.loadTexts: tfrapPvcTxUtilizationClearedTrap.setDescription('Percent utilization was below the threshold for the defined number of Short Term Intervals in the transmission direction on this DLCI. ')
tfrapConfigInstallSuccess = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,142)).setObjects(("TFRAP-MIB", "tfrapAlarmType"), ("TFRAP-MIB", "tfrapCfgLockIpAddress"))
if mibBuilder.loadTexts: tfrapConfigInstallSuccess.setDescription(' The configuration install process has successfully completed. ')
tfrapTftpRequestedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,257)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapTftpRequestedTrap.setDescription("Unit has received a TFTP download request. TFTP is the preferred method for upgrading a unit's software image.")
tfrapTftpTransferringTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,258)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapTftpTransferringTrap.setDescription('Unit has established a TFTP session, found the file, and begun the transfer. The file must still be qualified as appropriate for this unit.')
tfrapTftpProgrammingTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,259)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapTftpProgrammingTrap.setDescription('Unit has completed the TFTP transfer of a new software image which will next be programmed into non-volatile flash memory.')
tfrapTftpAbortedTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,260)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapTftpAbortedTrap.setDescription("Unit's TFTP session was established but the transfer was aborted by user intervention or an unrecoverable TFTP protocol error.")
tfrapTftpSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,261)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapTftpSuccessTrap.setDescription("Unit's TFTP download completed successfully. Flash devices will be programmed with a new image. Unit will stop passing data during the programming phase (less than a minute) and, upon completion, will reset and return to full operation using the new image.")
tfrapTftpHostUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,262)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapTftpHostUnreachableTrap.setDescription('Unit could not establish a TFTP session with the designated server. Verify that the correct TFTP ip address, TFTP DLCI and TFTP interface are configured on the unit and also verify the TFTP server confguration.')
tfrapTftpNoFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,263)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapTftpNoFileTrap.setDescription('Unit could not locate the designated file on the TFTP server. Verify the correct TFTP filename is configured on the unit and verify the location of this file on the server (file name may be case sensitive).')
tfrapTftpInvalidFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,264)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapTftpInvalidFileTrap.setDescription('Unit had established a TFTP session and began transfer of the designated file. The unit aborted the transfer after determining that the specified file is not appropriate for this product (failed header verification).')
tfrapTftpCorruptFileTrap = NotificationType((1, 3, 6, 1, 4, 1, 485, 5) + (0,265)).setObjects(("TFRAP-MIB", "tfrapAlarmType"))
if mibBuilder.loadTexts: tfrapTftpCorruptFileTrap.setDescription('Unit transferred the designated file but aborted the operation due to a checksum error within the downloaded s-record file.')
mibBuilder.exportSymbols("TFRAP-MIB", tfrapPerfApplicationTotalTxSmtp=tfrapPerfApplicationTotalTxSmtp, tfrapCfgDteCtsOutput=tfrapCfgDteCtsOutput, tfrapPerfNetwProtoPerDlciTxIpx=tfrapPerfNetwProtoPerDlciTxIpx, tfrapDsuLoopDownCompletedTrap=tfrapDsuLoopDownCompletedTrap, tfrapCfgTransitDelayDlciValue=tfrapCfgTransitDelayDlciValue, tfrapDiagDteBerErrors=tfrapDiagDteBerErrors, tfrapDiagT1LocPylLpbk=tfrapDiagT1LocPylLpbk, tfrapDsuLoopbackDisabledTrap=tfrapDsuLoopbackDisabledTrap, tfrapPerfApplicationTotalTable=tfrapPerfApplicationTotalTable, tfrapDLCIInactiveTrap=tfrapDLCIInactiveTrap, tfrapVnipTopoVLOOPStatus=tfrapVnipTopoVLOOPStatus, tfrapPerfApplicationTotalRxTelnet=tfrapPerfApplicationTotalRxTelnet, tfrapPerfThruputPerDlciRxFrame=tfrapPerfThruputPerDlciRxFrame, tfrapCfgFrPerfDlciNamesDlciValue=tfrapCfgFrPerfDlciNamesDlciValue, tfrapSysContact=tfrapSysContact, tfrapPerfApplicationPerDlciRxCustom3=tfrapPerfApplicationPerDlciRxCustom3, tfrapPerfCirRxPercentUtilizationRange1=tfrapPerfCirRxPercentUtilizationRange1, tfrapCfgTftpInterface=tfrapCfgTftpInterface, tfrapt1netwyellowalarmdetect=tfrapt1netwyellowalarmdetect, tfrapPerfCurrentPerDlciUtilizationDlciValue=tfrapPerfCurrentPerDlciUtilizationDlciValue, tfrapPerfSnaPerDlciTxTotal=tfrapPerfSnaPerDlciTxTotal, tfrapt1netwcarrierdetect=tfrapt1netwcarrierdetect, tfrapPerfIpxTotalRxSap=tfrapPerfIpxTotalRxSap, tfrapPerfArpPerDlciTxRarpRep=tfrapPerfArpPerDlciTxRarpRep, tfrapPerfRoutingPerDlciValue=tfrapPerfRoutingPerDlciValue, tfrapCfgFrPerfLTProtocolFilterTable=tfrapCfgFrPerfLTProtocolFilterTable, tfrapStatusMgmtInterfaceStatus=tfrapStatusMgmtInterfaceStatus, tfrapCfgFrPerf=tfrapCfgFrPerf, tfrapPerfLmiTotalInterval=tfrapPerfLmiTotalInterval, tfrapPerfMgmtIpIPInDlvrs=tfrapPerfMgmtIpIPInDlvrs, tfrapPerfIpxTotalTable=tfrapPerfIpxTotalTable, tfrapPerfLmiTotalRxFullEnqByteCnt=tfrapPerfLmiTotalRxFullEnqByteCnt, tfrapPerfIcmpPerDlciTxEchoReq=tfrapPerfIcmpPerDlciTxEchoReq, tfrapPerfIcmpTotalRxRedirect=tfrapPerfIcmpTotalRxRedirect, tfrapIntfDteDsr=tfrapIntfDteDsr, tfrapPerfThruputPerIntfRxFrameCnt=tfrapPerfThruputPerIntfRxFrameCnt, tfrapPerfIpPerDlciRxUdp=tfrapPerfIpPerDlciRxUdp, tfrapPerfLmiPerDlciTxLivoEnqByteCnt=tfrapPerfLmiPerDlciTxLivoEnqByteCnt, tfrapDiagUnitLocLoop=tfrapDiagUnitLocLoop, tfrapPerfIcmpPerDlciEntry=tfrapPerfIcmpPerDlciEntry, tfrapLocalNetLoopbackDisabledTrap=tfrapLocalNetLoopbackDisabledTrap, tfrapDiagT1TimeRemaining=tfrapDiagT1TimeRemaining, tfrapPerfIcmpTotalRxDestUnr=tfrapPerfIcmpTotalRxDestUnr, tfrapTftpSuccessTrap=tfrapTftpSuccessTrap, tfrapPerfMgmtIpIFStatsTable=tfrapPerfMgmtIpIFStatsTable, tfrapPerfIcmpTotalRxTimestpRep=tfrapPerfIcmpTotalRxTimestpRep, tfrapPerfNetwProtoTotalTxVnip=tfrapPerfNetwProtoTotalTxVnip, tfrapPerfIpTotalInterval=tfrapPerfIpTotalInterval, tfrapPerfNetworkLongTermCommands=tfrapPerfNetworkLongTermCommands, tfrapPerfApplicationPerDlciTxFtp=tfrapPerfApplicationPerDlciTxFtp, tfrapCfgCommBaud=tfrapCfgCommBaud, tfrapVnipTopoVBertTransitDelayAvg=tfrapVnipTopoVBertTransitDelayAvg, tfrapPerfSnaTotalTxNetbios=tfrapPerfSnaTotalTxNetbios, tfrapCfgFrPerfUserProtocolsIndex=tfrapCfgFrPerfUserProtocolsIndex, tfrapDiagVBERTRate=tfrapDiagVBERTRate, tfrapPerfArpPerDlciTxArpReq=tfrapPerfArpPerDlciTxArpReq, tfrapT1PerfCmdTypeTable=tfrapT1PerfCmdTypeTable, tfrapPerfArpPerDlciRxRarpRep=tfrapPerfArpPerDlciRxRarpRep, tfrapPerfArpTotalTxArpRep=tfrapPerfArpTotalTxArpRep, tfrapPerfThruputPerDlciEntry=tfrapPerfThruputPerDlciEntry, tfrapPerfApplicationTotalTxCustom1=tfrapPerfApplicationTotalTxCustom1, tfrapPerfRoutingTotalEntry=tfrapPerfRoutingTotalEntry, tfrapPerfApplicationTotalTxTftp=tfrapPerfApplicationTotalTxTftp, tfrapCfgFrLmiInactivityTimeout=tfrapCfgFrLmiInactivityTimeout, tfrapPerfIpPerDlciTxIcmp=tfrapPerfIpPerDlciTxIcmp, tfrapCfgIpChannel=tfrapCfgIpChannel, tfrapCfgIpPeerIP=tfrapCfgIpPeerIP, tfrapCfgFrDLCIMode=tfrapCfgFrDLCIMode, tfrapPerfIcmpTotalRxSrcQuench=tfrapPerfIcmpTotalRxSrcQuench, tfrapEventLogAltArray=tfrapEventLogAltArray, tfrapLmiSourcingChangeNetDteTrap=tfrapLmiSourcingChangeNetDteTrap, tfrapPerfIpTotalTable=tfrapPerfIpTotalTable, tfrapPerfMgmtIpIPInHdrErr=tfrapPerfMgmtIpIPInHdrErr, tfrapPerfApplicationTotalRxSnmpTrap=tfrapPerfApplicationTotalRxSnmpTrap, tfrapV54LoopUpInitiatedTrap=tfrapV54LoopUpInitiatedTrap, tfrapPerfApplicationPerDlciRxSnmpTrap=tfrapPerfApplicationPerDlciRxSnmpTrap, tfrapPerfIcmpPerDlciTxTotal=tfrapPerfIcmpPerDlciTxTotal, tfrapPerfThruputPerDlciTxByte=tfrapPerfThruputPerDlciTxByte, tfrapPerfNetwProtoTotalTxCisco=tfrapPerfNetwProtoTotalTxCisco, tfrapPerfIcmpTotalRxAddrMaskReq=tfrapPerfIcmpTotalRxAddrMaskReq, tfrapEventTrapLogGenericEvent=tfrapEventTrapLogGenericEvent, tfrapDLCINum=tfrapDLCINum, tfrapVloopDownViaRemote=tfrapVloopDownViaRemote, tfrapPerfArpPerDlciTxRarpReq=tfrapPerfArpPerDlciTxRarpReq, tfrapCfgDteIntfType=tfrapCfgDteIntfType, tfrapPerfThruputPerDlciIndex=tfrapPerfThruputPerDlciIndex, tfrapDiagDteSigRTS=tfrapDiagDteSigRTS, tfrapPerfIpPerDlciEntry=tfrapPerfIpPerDlciEntry, tfrapPerfNetwProtoPerDlciRxIp=tfrapPerfNetwProtoPerDlciRxIp, tfrapPerfNetworkLongTermCmdClear=tfrapPerfNetworkLongTermCmdClear, tfrapCfgTDDeleteDlciValue=tfrapCfgTDDeleteDlciValue, tfrapCfgFrPerfLTDlciFilterTable=tfrapCfgFrPerfLTDlciFilterTable, tfrapT1IntervalBESs=tfrapT1IntervalBESs, tfrapPerfNetwProtoPerDlciTxTotal=tfrapPerfNetwProtoPerDlciTxTotal, tfrapPerfSnaTotalEntry=tfrapPerfSnaTotalEntry, tfrapEventTrapLogVarBind2=tfrapEventTrapLogVarBind2, tfrapVbertStarted=tfrapVbertStarted, tfrapDiagVnipInterface=tfrapDiagVnipInterface, tfrapPerfThruputPerDlciAvailability=tfrapPerfThruputPerDlciAvailability, tfrapPerfArpTotalRxRarpReq=tfrapPerfArpTotalRxRarpReq, tfrapPerfIcmpPerDlciTxGmReport=tfrapPerfIcmpPerDlciTxGmReport, tfrapPerfRoutingTotalRxRip=tfrapPerfRoutingTotalRxRip, tfrapPerfThruputPerIntfTxFrameCnt=tfrapPerfThruputPerIntfTxFrameCnt, tfrapPerfApplicationTotalEntry=tfrapPerfApplicationTotalEntry, tfrapPerfSnaPerDlciRxPeriph=tfrapPerfSnaPerDlciRxPeriph, tfrapPerfThruputCmdClearAllIntfStats=tfrapPerfThruputCmdClearAllIntfStats, tfrapPerfIcmpPerDlciTxGmReduct=tfrapPerfIcmpPerDlciTxGmReduct, tfrapPerfIpxPerDlciTxSpx=tfrapPerfIpxPerDlciTxSpx, tfrapLocalPayloadLoopbackEnabledTrap=tfrapLocalPayloadLoopbackEnabledTrap, tfrapPerfIpxTotalTxNetbios=tfrapPerfIpxTotalTxNetbios, tfrapPerfMgmtIpICMPOutEchoReps=tfrapPerfMgmtIpICMPOutEchoReps, tfrapPerfIpxTotalTxTotal=tfrapPerfIpxTotalTxTotal, tfrapPerfMgmtIpIFOperStatus=tfrapPerfMgmtIpIFOperStatus, tfrapPerfApplicationTotalRxFtp=tfrapPerfApplicationTotalRxFtp, tfrapCfgDteRts=tfrapCfgDteRts, tfrapCfgDteDtr=tfrapCfgDteDtr, tfrapDteSignalDtrOnTrap=tfrapDteSignalDtrOnTrap, tfrapPerfApplicationTotalTxCustom3=tfrapPerfApplicationTotalTxCustom3, tfrapPerfLmiPerDlciTxOtherByteCnt=tfrapPerfLmiPerDlciTxOtherByteCnt, tfrapCfgTftpFilename=tfrapCfgTftpFilename, tfrapPerfNetwProtoPerDlciRxArp=tfrapPerfNetwProtoPerDlciRxArp, tfrapPerfCirTxPercentUtilizationRange7=tfrapPerfCirTxPercentUtilizationRange7, tfrapCfgIpMask=tfrapCfgIpMask, tfrapPerfIcmpTotalRxEchoRep=tfrapPerfIcmpTotalRxEchoRep, tfrapPerfIpxTotalRxSpx=tfrapPerfIpxTotalRxSpx, tfrapPerfThruputPerDlciCirType=tfrapPerfThruputPerDlciCirType, tfrapPerfArpTotalTxTotal=tfrapPerfArpTotalTxTotal, tfrapPerfArpPerDlciTxOther=tfrapPerfArpPerDlciTxOther, tfrapVnipTopoTDMinDelay=tfrapVnipTopoTDMinDelay, tfrapPerfIpPerDlciRxTcp=tfrapPerfIpPerDlciRxTcp, tfrapPerfIpxTotalInterval=tfrapPerfIpxTotalInterval, tfrapPerfSnaTotalTable=tfrapPerfSnaTotalTable, tfrapPerfSnaPerDlciValue=tfrapPerfSnaPerDlciValue, tfrapPerfCirRxPercentUtilizationRange4=tfrapPerfCirRxPercentUtilizationRange4, tfrapDteSignalDtrOffTrap=tfrapDteSignalDtrOffTrap, tfrapPerfLmiTotalRxOtherByteCnt=tfrapPerfLmiTotalRxOtherByteCnt, tfrapPerfArpPerDlciValue=tfrapPerfArpPerDlciValue, tfrapTrapMutingActive=tfrapTrapMutingActive, tfrapt1netwsynclossdeclare=tfrapt1netwsynclossdeclare, tfrapPerfIpPerDlciTable=tfrapPerfIpPerDlciTable, tfrapCfgTransitDelayEntry=tfrapCfgTransitDelayEntry, tfrapPerfThruputPerDlciChangeTime=tfrapPerfThruputPerDlciChangeTime, tfrapPerfIcmpPerDlciRxEchoRep=tfrapPerfIcmpPerDlciRxEchoRep, tfrapPerfApplicationPerDlciTxSnmp=tfrapPerfApplicationPerDlciTxSnmp, tfrapt1controlledslip=tfrapt1controlledslip, tfrapT1TotalSEFSs=tfrapT1TotalSEFSs, tfrapDiagVBERT=tfrapDiagVBERT, tfrapPerfIcmpTotalEntry=tfrapPerfIcmpTotalEntry, tfrapCfgDteDsrOutput=tfrapCfgDteDsrOutput, tfrapSysSerialNo=tfrapSysSerialNo, tfrapCfgFrPerfTimersSTInterval=tfrapCfgFrPerfTimersSTInterval, tfrapCfgSecurityTable=tfrapCfgSecurityTable, tfrapAlarmType=tfrapAlarmType, tfrapPerfApplicationTotalRxCustom3=tfrapPerfApplicationTotalRxCustom3, tfrapPerfIpTotalRxTcp=tfrapPerfIpTotalRxTcp, tfrapPerfRoutingPerDlciTxRip=tfrapPerfRoutingPerDlciTxRip, tfrapPerfApplicationPerDlciTxHttp=tfrapPerfApplicationPerDlciTxHttp, tfrapPerfNetwProtoPerDlciRxIpx=tfrapPerfNetwProtoPerDlciRxIpx, tfrapCfgSetCommunityString=tfrapCfgSetCommunityString, tfrapPercentUtilization=tfrapPercentUtilization, tfrapCfgVnipMode=tfrapCfgVnipMode, tfrapPerfSnaPerDlciEntry=tfrapPerfSnaPerDlciEntry, tfrapCfgIpTelnetAutoLogOut=tfrapCfgIpTelnetAutoLogOut, tfrapVnipTopoVBertPerUtilCIR=tfrapVnipTopoVBertPerUtilCIR, tfrapPerfIcmpTotalRxGmReport=tfrapPerfIcmpTotalRxGmReport, tfrapPerfRoutingPerDlciInterval=tfrapPerfRoutingPerDlciInterval, tfrapCfgCommParity=tfrapCfgCommParity, tfrapLocalUnitLoopbackEnabledTrap=tfrapLocalUnitLoopbackEnabledTrap, tfrapIntfT1Mode=tfrapIntfT1Mode, tfrapPerfIcmpPerDlciRxAddrMaskRep=tfrapPerfIcmpPerDlciRxAddrMaskRep, tfrapCfgFrPerfUnprovDlcisDelete=tfrapCfgFrPerfUnprovDlcisDelete, tfrapCfgFrPerfLTProtocolFilterProtocol=tfrapCfgFrPerfLTProtocolFilterProtocol, tfrapTrapMutingInactive=tfrapTrapMutingInactive, tfrapIntfT1Status=tfrapIntfT1Status, tfrapIpAddress=tfrapIpAddress, tfrapPerfArpTotalRxOther=tfrapPerfArpTotalRxOther, tfrapPerfThruputPerDlciPvcState=tfrapPerfThruputPerDlciPvcState, tfrapCfgVnipTransitDelayFrequency=tfrapCfgVnipTransitDelayFrequency, tfrapCfgFrCrcMode=tfrapCfgFrCrcMode, tfrapDiagVLOOP=tfrapDiagVLOOP, tfrapPerfIcmpTotalRxEchoReq=tfrapPerfIcmpTotalRxEchoReq, tfrapCsuLoopbackFailedTrap=tfrapCsuLoopbackFailedTrap, tfrapCfgFrPerfDlciNamesDelete=tfrapCfgFrPerfDlciNamesDelete, tfrapT1TotalESs=tfrapT1TotalESs, tfrapPerfNetwProtoTotalEntry=tfrapPerfNetwProtoTotalEntry, tfrapPerfCirTxPercentUtilizationRange3=tfrapPerfCirTxPercentUtilizationRange3, tfrapT1TotalEntry=tfrapT1TotalEntry, tfrapPerfCirRxPercentUtilizationRange6=tfrapPerfCirRxPercentUtilizationRange6, tfrapCfgFrPerfUserProtocolsTable=tfrapCfgFrPerfUserProtocolsTable, tfrapPerfNetwProtoPerDlciTxVnip=tfrapPerfNetwProtoPerDlciTxVnip, tfrapPerfSnaPerDlciRxAppn=tfrapPerfSnaPerDlciRxAppn, tfrapPerfThruputCmdRemoveStsDlci=tfrapPerfThruputCmdRemoveStsDlci, tfrapStatusIntfTable=tfrapStatusIntfTable, tfrapStatusDteTxLED=tfrapStatusDteTxLED, tfrapPerfNetwProtoPerDlciTxArp=tfrapPerfNetwProtoPerDlciTxArp, tfrapPerfLmiTotalRxLivoStatByteCnt=tfrapPerfLmiTotalRxLivoStatByteCnt, tfrapCfgT1Table=tfrapCfgT1Table, tfrapT1IntervalESs=tfrapT1IntervalESs, tfrapPerfArpTotalTxRarpRep=tfrapPerfArpTotalTxRarpRep, tfrapPerfNetwLongTermAltDlci=tfrapPerfNetwLongTermAltDlci, tfrapPerfIcmpTotalTxParamProb=tfrapPerfIcmpTotalTxParamProb, tfrapDteSignalRtsOnTrap=tfrapDteSignalRtsOnTrap, tfrapPerfSnaPerDlciRxOther=tfrapPerfSnaPerDlciRxOther, tfrapBertInitiatedTrap=tfrapBertInitiatedTrap, tfrapPerfIpxPerDlciRxTotal=tfrapPerfIpxPerDlciRxTotal, tfrapPerfApplicationPerDlciTxCustom1=tfrapPerfApplicationPerDlciTxCustom1, tfrapT1CurrentBESs=tfrapT1CurrentBESs, tfrapPerfApplicationTotalRxCustom4=tfrapPerfApplicationTotalRxCustom4, tfrapEventTrapLogSpecificEvent=tfrapEventTrapLogSpecificEvent, tfrapLmiSourcingChangeNetT1Trap=tfrapLmiSourcingChangeNetT1Trap, tfrapStatusT1ModeLED=tfrapStatusT1ModeLED, tfrapCfgSnmpUtilTrapEnable=tfrapCfgSnmpUtilTrapEnable, tfrapPerfRoutingTotalTxRip=tfrapPerfRoutingTotalTxRip, tfrapPerfApplicationPerDlciTxSnmpTrap=tfrapPerfApplicationPerDlciTxSnmpTrap, tfrapPerfMgmtIpTCPCurrEstab=tfrapPerfMgmtIpTCPCurrEstab, tfrapCfgT1LineEncoding=tfrapCfgT1LineEncoding, tfrapV54LoopbackFailedTrap=tfrapV54LoopbackFailedTrap, tfrapDiagVBERTPktPercent=tfrapDiagVBERTPktPercent, tfrapT1CurrentEntry=tfrapT1CurrentEntry, tfrapCfgDteStartDs0=tfrapCfgDteStartDs0, tfrapPerfIcmpPerDlciValue=tfrapPerfIcmpPerDlciValue, tfrapPerfApplicationTotalTxSnmp=tfrapPerfApplicationTotalTxSnmp, tfrapCfgLockID=tfrapCfgLockID, tfrapSysNumUserProtocols=tfrapSysNumUserProtocols, tfrapPerfArpPerDlciTxArpRep=tfrapPerfArpPerDlciTxArpRep, tfrapCfgDteConnAutoStatus=tfrapCfgDteConnAutoStatus, tfrapConfigInstallSuccess=tfrapConfigInstallSuccess, tfrapDiagUnitTable=tfrapDiagUnitTable, tfrapStatusDteStatusLED=tfrapStatusDteStatusLED, tfrapt1netwredalarmclear=tfrapt1netwredalarmclear, tfrapPerfNetwProtoPerDlciTable=tfrapPerfNetwProtoPerDlciTable, tfrapLocalPayloadLoopbackDisabledTrap=tfrapLocalPayloadLoopbackDisabledTrap, tfrapLocalPayloadLoopbackEnabledViaRemoteTrap=tfrapLocalPayloadLoopbackEnabledViaRemoteTrap, tfrapPerfNetwProtoTotalTxSna=tfrapPerfNetwProtoTotalTxSna, tfrapPerfNetwProtoTotalRxArp=tfrapPerfNetwProtoTotalRxArp, tfrapPerfNetwProtoTotalRxVnip=tfrapPerfNetwProtoTotalRxVnip, tfrapPerfRoutingTotalTxNetbios=tfrapPerfRoutingTotalTxNetbios, tfrapPerfCurrentUnitUtilization=tfrapPerfCurrentUnitUtilization, tfrapDLCIActiveTrap=tfrapDLCIActiveTrap, tfrapPerfIcmpPerDlciRxAddrMaskReq=tfrapPerfIcmpPerDlciRxAddrMaskReq, tfrapEventTrapLog=tfrapEventTrapLog, tfrapPerfApplicationPerDlciRxSnmp=tfrapPerfApplicationPerDlciRxSnmp, tfrapDsuLoopbackFailedTrap=tfrapDsuLoopbackFailedTrap, tfrapStatusLedTable=tfrapStatusLedTable, tfrapPerfIcmpPerDlciTxPktTooBig=tfrapPerfIcmpPerDlciTxPktTooBig, tfrapPerfIcmpTotalTxTimestpRep=tfrapPerfIcmpTotalTxTimestpRep, tfrapPerfLmiTotalDlciValue=tfrapPerfLmiTotalDlciValue, tfrapV54LoopbackEnabledTrap=tfrapV54LoopbackEnabledTrap, tfrapT1TotalUASs=tfrapT1TotalUASs, tfrapPerfMgmtIpUDPNoPorts=tfrapPerfMgmtIpUDPNoPorts, tfrapPerfCirPercentUtilization=tfrapPerfCirPercentUtilization, tfrapPerfThruputCmdClearT1Stats=tfrapPerfThruputCmdClearT1Stats, tfrapPerfNetwProtoTotalTable=tfrapPerfNetwProtoTotalTable, tfrapLmiSeqNumMismatchT1Trap=tfrapLmiSeqNumMismatchT1Trap)
mibBuilder.exportSymbols("TFRAP-MIB", tfrapDteSignalRtsOffTrap=tfrapDteSignalRtsOffTrap, tfrapPerfMgmtIpICMPOutEchos=tfrapPerfMgmtIpICMPOutEchos, tfrapPerfIpxPerDlciTxTotal=tfrapPerfIpxPerDlciTxTotal, tfrapEventTrapLogTimeStamp=tfrapEventTrapLogTimeStamp, tfrapNonIncrLmiSeqNumDteTrap=tfrapNonIncrLmiSeqNumDteTrap, tfrapSysBRISupported=tfrapSysBRISupported, tfrapPerfMgmtIp=tfrapPerfMgmtIp, tfrapCfgSnmpMgrInterface=tfrapCfgSnmpMgrInterface, tfrapCfgFrPerfUserProtocolsPortNum=tfrapCfgFrPerfUserProtocolsPortNum, tfrapPerfIpTotalTxTotal=tfrapPerfIpTotalTxTotal, tfrapt1netwaisclear=tfrapt1netwaisclear, tfrapPerfMgmtIpIFInOctets=tfrapPerfMgmtIpIFInOctets, tfrapPerfIpxPerDlciRxNetbios=tfrapPerfIpxPerDlciRxNetbios, tfrapPerfThruputCmdClearDteStats=tfrapPerfThruputCmdClearDteStats, tfrapDsuLoopUpInitiatedTrap=tfrapDsuLoopUpInitiatedTrap, tfrapPerfMgmtIpTCPPassiveOpens=tfrapPerfMgmtIpTCPPassiveOpens, tfrapPerfApplicationPerDlciEntry=tfrapPerfApplicationPerDlciEntry, tfrapPerfIpTotalRxTotal=tfrapPerfIpTotalRxTotal, tfrapPerfSnaTotalTxSubarea=tfrapPerfSnaTotalTxSubarea, tfrapDsuLoopbackEnabledTrap=tfrapDsuLoopbackEnabledTrap, tfrapCfgID=tfrapCfgID, tfrapPerfApplicationPerDlciRxFtp=tfrapPerfApplicationPerDlciRxFtp, tfrapCfgCommDataBits=tfrapCfgCommDataBits, tfrapCfgFrPerfLTDlciFilterIndex=tfrapCfgFrPerfLTDlciFilterIndex, tfrapPerfNetwProtoTotalInterval=tfrapPerfNetwProtoTotalInterval, tfrapPerfMgmtIpIPOutDscrd=tfrapPerfMgmtIpIPOutDscrd, tfrapPerfArpPerDlciRxTotal=tfrapPerfArpPerDlciRxTotal, tfrapPerfCurrentPerDlciAggregateUtilization=tfrapPerfCurrentPerDlciAggregateUtilization, tfrapPerfMgmtIpICMPOutRedirects=tfrapPerfMgmtIpICMPOutRedirects, tfrapPerfSnaTotalRxSubarea=tfrapPerfSnaTotalRxSubarea, tfrapPerfLmiPerDlciRxTotalByteCnt=tfrapPerfLmiPerDlciRxTotalByteCnt, tfrapCfgDteDataMode=tfrapCfgDteDataMode, tfrapCfgT1Density=tfrapCfgT1Density, tfrapPerfMgmtIpIPOutRqst=tfrapPerfMgmtIpIPOutRqst, tfrapDiagVnipDlci=tfrapDiagVnipDlci, tfrapPerfIpTotalRxIcmp=tfrapPerfIpTotalRxIcmp, tfrapCfgDteClockMode=tfrapCfgDteClockMode, tfrapPerfIpPerDlciTxIgrp=tfrapPerfIpPerDlciTxIgrp, tfrapLocalPayloadLoopbackFailedTrap=tfrapLocalPayloadLoopbackFailedTrap, tfrapPerfCirTxPercentUtilizationRange5=tfrapPerfCirTxPercentUtilizationRange5, tfrapEventTrapLogSeqNum=tfrapEventTrapLogSeqNum, tfrapCfgVnipInactivityTimer=tfrapCfgVnipInactivityTimer, tfrapCfgTftpNumBytes=tfrapCfgTftpNumBytes, tfrapCfgDteConnStatus=tfrapCfgDteConnStatus, tfrapCfgSnmpMgrClearN=tfrapCfgSnmpMgrClearN, tfrapCfgLockIpAddress=tfrapCfgLockIpAddress, tfrapIntfDteDcd=tfrapIntfDteDcd, tfrapSysNumSnmpMgrs=tfrapSysNumSnmpMgrs, tfrapPerfMgmtIpUDPOutDatagrams=tfrapPerfMgmtIpUDPOutDatagrams, tfrapPerfIcmpPerDlciTxSrcQuench=tfrapPerfIcmpPerDlciTxSrcQuench, tfrapCfgTDDeleteInterface=tfrapCfgTDDeleteInterface, tfrapT1PerfFreezeState=tfrapT1PerfFreezeState, tfrapPerfMgmtIpICMPInEchos=tfrapPerfMgmtIpICMPInEchos, tfrapPerfArpTotalRxRarpRep=tfrapPerfArpTotalRxRarpRep, tfrapPerfNetwProtoTotalTxArp=tfrapPerfNetwProtoTotalTxArp, tfrapPerfThruputCmdReplaceDlciTable=tfrapPerfThruputCmdReplaceDlciTable, tfrapPerfCirRxPercentUtilizationRange7=tfrapPerfCirRxPercentUtilizationRange7, tfrapPerfLmiTotalRxLivoEnqByteCnt=tfrapPerfLmiTotalRxLivoEnqByteCnt, tfrapPerfThruputPerDlciCreateTime=tfrapPerfThruputPerDlciCreateTime, tfrapPerfIpPerDlciRxOther=tfrapPerfIpPerDlciRxOther, tfrapPerfApplicationPerDlciRxHttp=tfrapPerfApplicationPerDlciRxHttp, tfrapPerfSnaTotalRxNetbios=tfrapPerfSnaTotalRxNetbios, tfrapSysSLIPSupported=tfrapSysSLIPSupported, tfrapPerfT1TotalTable=tfrapPerfT1TotalTable, tfrapPerfNetwProtoPerDlciRxSna=tfrapPerfNetwProtoPerDlciRxSna, tfrapPerfIcmpTotalTxAddrMaskReq=tfrapPerfIcmpTotalTxAddrMaskReq, tfrapPerfLmiTotalTxFullStatByteCnt=tfrapPerfLmiTotalTxFullStatByteCnt, tfrapLocalUnitLoopbackDisabledTrap=tfrapLocalUnitLoopbackDisabledTrap, tfrapTftpRequestedTrap=tfrapTftpRequestedTrap, tfrapPerfApplicationPerDlciTxCustom3=tfrapPerfApplicationPerDlciTxCustom3, tfrapT1CurrentESs=tfrapT1CurrentESs, tfrapPerfArpPerDlciRxOther=tfrapPerfArpPerDlciRxOther, tfrapSysResetNode=tfrapSysResetNode, tfrapCfgTransitDelayTableClear=tfrapCfgTransitDelayTableClear, tfrapPerfApplicationTotalTxFtp=tfrapPerfApplicationTotalTxFtp, tfrapPerfIpxTotalTxOther=tfrapPerfIpxTotalTxOther, tfrapLocalAggregateLoopbackFailedTrap=tfrapLocalAggregateLoopbackFailedTrap, tfrapPerfIpTotalRxIgrp=tfrapPerfIpTotalRxIgrp, tfrapPerfIpxPerDlciTxNetbios=tfrapPerfIpxPerDlciTxNetbios, tfrapDiagT1RmtLpbkStatus=tfrapDiagT1RmtLpbkStatus, tfrapCfgCliPassword=tfrapCfgCliPassword, tfrapPerfMgmtIpICMPInMsgs=tfrapPerfMgmtIpICMPInMsgs, tfrapVnipTopologyNumHops=tfrapVnipTopologyNumHops, tfrapStatusMgmtDefaultDLCIStatus=tfrapStatusMgmtDefaultDLCIStatus, tfrapPerfApplicationPerDlciTxSmtp=tfrapPerfApplicationPerDlciTxSmtp, tfrapPerfArpTotalRxArpReq=tfrapPerfArpTotalRxArpReq, tfrapStatusMgmtChannel=tfrapStatusMgmtChannel, tfrapUtilizationThreshold=tfrapUtilizationThreshold, tfrapVBertClear=tfrapVBertClear, tfrapPerfIcmpTotalRxTimestpReq=tfrapPerfIcmpTotalRxTimestpReq, tfrapLocalDteLoopbackEnabledTrap=tfrapLocalDteLoopbackEnabledTrap, tfrapTftpNoFileTrap=tfrapTftpNoFileTrap, tfrapT1CurrentSEFSs=tfrapT1CurrentSEFSs, tfrapPerfIcmpPerDlciRxRedirect=tfrapPerfIcmpPerDlciRxRedirect, tfrapPerfIcmpPerDlciRxTimestpRep=tfrapPerfIcmpPerDlciRxTimestpRep, tfrapPerfApplicationTotalRxSnmp=tfrapPerfApplicationTotalRxSnmp, tfrapPerfThruputPerDlciRxByte=tfrapPerfThruputPerDlciRxByte, tfrapCfgFrPerfLTDlciFilterEntry=tfrapCfgFrPerfLTDlciFilterEntry, tfrapPerfNetwLongTermTable=tfrapPerfNetwLongTermTable, tfrapPerfLmiPerDlciRxLivoEnqByteCnt=tfrapPerfLmiPerDlciRxLivoEnqByteCnt, tfrapPerfCirTxPercentUtilizationRange1=tfrapPerfCirTxPercentUtilizationRange1, tfrapPerfMgmtIpTCPActiveOpens=tfrapPerfMgmtIpTCPActiveOpens, tfrapLocalUnitLoopbackFailedTrap=tfrapLocalUnitLoopbackFailedTrap, tfrapTftpCorruptFileTrap=tfrapTftpCorruptFileTrap, tfrapTftpInvalidFileTrap=tfrapTftpInvalidFileTrap, tfrapSysNumDlciNames=tfrapSysNumDlciNames, tfrapPerfThruputCmdReplaceDlciEntry=tfrapPerfThruputCmdReplaceDlciEntry, tfrapDiagVBERTSize=tfrapDiagVBERTSize, tfrapPerfThruputCmdAvailabilityStsDlciResetAll=tfrapPerfThruputCmdAvailabilityStsDlciResetAll, tfrapPerfIpxTotalRxOther=tfrapPerfIpxTotalRxOther, sync=sync, tfrapPerfThruputPerIntfTable=tfrapPerfThruputPerIntfTable, tfrapPerfNetworkShortTerm=tfrapPerfNetworkShortTerm, tfrapPerfApplicationPerDlciTable=tfrapPerfApplicationPerDlciTable, tfrapPerfApplicationTotalRxCustom2=tfrapPerfApplicationTotalRxCustom2, tfrapSysName=tfrapSysName, tfrapDiagVnipIpAddr=tfrapDiagVnipIpAddr, tfrapDiagDteRmtV54Lpbk=tfrapDiagDteRmtV54Lpbk, tfrapPerfThruputCmdCountsStsDlciResetAll=tfrapPerfThruputCmdCountsStsDlciResetAll, tfrapPerfNetwLongTermAltArray=tfrapPerfNetwLongTermAltArray, tfrapCfgGetCommunityString=tfrapCfgGetCommunityString, tfrapPerfIcmpPerDlciTable=tfrapPerfIcmpPerDlciTable, tfrapPerfRoutingPerDlciRxNetbios=tfrapPerfRoutingPerDlciRxNetbios, tfrapSysType=tfrapSysType, tfrapIntfDteRts=tfrapIntfDteRts, tfrapPerfThruputPerDlciMTBSO=tfrapPerfThruputPerDlciMTBSO, tfrapPerfIcmpPerDlciTxAddrMaskReq=tfrapPerfIcmpPerDlciTxAddrMaskReq, tfrapCfgSnmpMgrIP=tfrapCfgSnmpMgrIP, tfrapPerfIpxPerDlciValue=tfrapPerfIpxPerDlciValue, tfrapPerfArpTotalInterval=tfrapPerfArpTotalInterval, tfrapPerfSnaTotalTxPeriph=tfrapPerfSnaTotalTxPeriph, tfrapEventLogAltTable=tfrapEventLogAltTable, tfrapPerfSnaTotalTxAppn=tfrapPerfSnaTotalTxAppn, tfrapPerfT1IntervalTable=tfrapPerfT1IntervalTable, tfrapCfgAppLpbkTimeout=tfrapCfgAppLpbkTimeout, tfrapVnipTopologyEntry=tfrapVnipTopologyEntry, tfrapPerfSnaTotalTxOther=tfrapPerfSnaTotalTxOther, tfrapPerfLmiTotalTxLivoStatByteCnt=tfrapPerfLmiTotalTxLivoStatByteCnt, tfrapEventTrapLogVarBind3=tfrapEventTrapLogVarBind3, tfrapEventLogClear=tfrapEventLogClear, tfrapLmiSourcing=tfrapLmiSourcing, tfrapPerfIcmpPerDlciTxAddrMaskRep=tfrapPerfIcmpPerDlciTxAddrMaskRep, tfrapDiagVBERTTestPeriod=tfrapDiagVBERTTestPeriod, tfrapVnipTopoTDMaxDelay=tfrapVnipTopoTDMaxDelay, tfrapCfgFrPerfDlciNamesUtilThreshold=tfrapCfgFrPerfDlciNamesUtilThreshold, tfrapCfgLcdPswdEnable=tfrapCfgLcdPswdEnable, tfrapDiagUnitTimeRemaining=tfrapDiagUnitTimeRemaining, tfrapPvcTxUtilizationClearedTrap=tfrapPvcTxUtilizationClearedTrap, tfrapPerfMgmtIpICMPStatsTable=tfrapPerfMgmtIpICMPStatsTable, tfrapPerfIpxPerDlciInterval=tfrapPerfIpxPerDlciInterval, tfrapPerfCirRxPercentUtilizationRange8=tfrapPerfCirRxPercentUtilizationRange8, tfrapCfgFrPerfDlciNamesEirValue=tfrapCfgFrPerfDlciNamesEirValue, tfrapVnipTopologyDlci=tfrapVnipTopologyDlci, tfrapPvcTxUtilizationExceededTrap=tfrapPvcTxUtilizationExceededTrap, tfrapDiagDteBerTimeElaps=tfrapDiagDteBerTimeElaps, tfrapPerfIpTotalTxOther=tfrapPerfIpTotalTxOther, tfrapPerfRoutingPerDlciRxOspf=tfrapPerfRoutingPerDlciRxOspf, tfrapPerfArpTotalTxInarpRep=tfrapPerfArpTotalTxInarpRep, tfrapPerfNetwLongTermAltProtocol=tfrapPerfNetwLongTermAltProtocol, tfrapCfgFrDLCIEncap=tfrapCfgFrDLCIEncap, tfrapPerfIpPerDlciTxOther=tfrapPerfIpPerDlciTxOther, tfrapT1IntervalIndex=tfrapT1IntervalIndex, tfrapPerfNetwProtoTotalTxAnnexG=tfrapPerfNetwProtoTotalTxAnnexG, tfrapPerfPhysicalIntf=tfrapPerfPhysicalIntf, tfrapTftpTransferringTrap=tfrapTftpTransferringTrap, tfrapSysAmtMemoryInstalled=tfrapSysAmtMemoryInstalled, tfrapPerfThruputCmdAllStsDlciReset=tfrapPerfThruputCmdAllStsDlciReset, tfrapPerfIpxPerDlciTxRip=tfrapPerfIpxPerDlciTxRip, tfrapPerfThruputPerDlciTxFrame=tfrapPerfThruputPerDlciTxFrame, tfrapCfgFrPerfDlciNamesCirValue=tfrapCfgFrPerfDlciNamesCirValue, tfrapPerfIpTotalTxIcmp=tfrapPerfIpTotalTxIcmp, tfrapPerfIpTotalTxIgrp=tfrapPerfIpTotalTxIgrp, tfrapCfgT1LboSetting=tfrapCfgT1LboSetting, tfrapPerfSnaPerDlciRxTotal=tfrapPerfSnaPerDlciRxTotal, tfrapPerfIcmpTotalTxDestUnr=tfrapPerfIcmpTotalTxDestUnr, tfrapPerfMgmtIpTCPAttemptFails=tfrapPerfMgmtIpTCPAttemptFails, tfrapVnipTransitDelayClear=tfrapVnipTransitDelayClear, tfrapPerfNetwLongTermProtocol=tfrapPerfNetwLongTermProtocol, tfrapStatusT1StatusLED=tfrapStatusT1StatusLED, tfrapCfgDteLineRate=tfrapCfgDteLineRate, tfrapPerfRoutingPerDlciTable=tfrapPerfRoutingPerDlciTable, tfrapStatusMgmtInterface=tfrapStatusMgmtInterface, tfrapSysNumMaintInstalled=tfrapSysNumMaintInstalled, tfrapPerfThruputPerDlciCIR=tfrapPerfThruputPerDlciCIR, tfrapPerfThruputPerDlciEncapType=tfrapPerfThruputPerDlciEncapType, tfrapPerfMgmtIpTCPOutSegs=tfrapPerfMgmtIpTCPOutSegs, tfrapPerfMgmtIpICMPInTimeExcds=tfrapPerfMgmtIpICMPInTimeExcds, tfrapPerfThruputPerIntfEntry=tfrapPerfThruputPerIntfEntry, tfrapPerfIcmpPerDlciInterval=tfrapPerfIcmpPerDlciInterval, tfrapPerfThruputPerIntfRxAbortCnt=tfrapPerfThruputPerIntfRxAbortCnt, tfrapPerfIcmpPerDlciTxParamProb=tfrapPerfIcmpPerDlciTxParamProb, tfrapSysFeatureTable=tfrapSysFeatureTable, tfrapPerfIcmpPerDlciRxGmReduct=tfrapPerfIcmpPerDlciRxGmReduct, tfrapPerfNetwProtoPerDlciRxOther=tfrapPerfNetwProtoPerDlciRxOther, tfrapCfgFrLmiKeepaliveTimeout=tfrapCfgFrLmiKeepaliveTimeout, tfrapPerfThruputPerDlciRxFecn=tfrapPerfThruputPerDlciRxFecn, tfrapDiagT1RmtLpbkCmd=tfrapDiagT1RmtLpbkCmd, tfrap=tfrap, tfrapPvcRxUtilizationExceededTrap=tfrapPvcRxUtilizationExceededTrap, tfrapCfgT1Framing=tfrapCfgT1Framing, tfrapPerfIpTotalTxTcp=tfrapPerfIpTotalTxTcp, tfrapCfgCommTable=tfrapCfgCommTable, tfrapPerfLmiPerDlciTxFullEnqByteCnt=tfrapPerfLmiPerDlciTxFullEnqByteCnt, tfrapPerfT1CurrentTable=tfrapPerfT1CurrentTable, tfrapPerfThruputPerDlciDowntime=tfrapPerfThruputPerDlciDowntime, tfrapPerfLmiPerDlciRxFullEnqByteCnt=tfrapPerfLmiPerDlciRxFullEnqByteCnt, tfrapCfgLcdPswdTimeout=tfrapCfgLcdPswdTimeout, tfrapCfgDteConnDensity=tfrapCfgDteConnDensity, tfrapTrap=tfrapTrap, tfrapSysSoftRev=tfrapSysSoftRev, tfrapVnipTopoVBERTStatus=tfrapVnipTopoVBERTStatus, tfrapCfgVnipKeepAliveTimer=tfrapCfgVnipKeepAliveTimer, tfrapDiagVnipIndex=tfrapDiagVnipIndex, tfrapDiagDteTimeRemaining=tfrapDiagDteTimeRemaining, tfrapCfgFrPerfDlciNamesDlciName=tfrapCfgFrPerfDlciNamesDlciName, tfrapPerfIcmpTotalTxTimeExcd=tfrapPerfIcmpTotalTxTimeExcd, tfrapPerfRoutingPerDlciEntry=tfrapPerfRoutingPerDlciEntry, tfrapPerfSnaPerDlciTxAppn=tfrapPerfSnaPerDlciTxAppn, tfrapPerfCurrentPerDlciTxUtilization=tfrapPerfCurrentPerDlciTxUtilization, tfrapPerfMgmtIpUDPInDatagrams=tfrapPerfMgmtIpUDPInDatagrams, tfrapIntfDteCts=tfrapIntfDteCts, tfrapPerfIpxTotalRxTotal=tfrapPerfIpxTotalRxTotal, tfrapPerfLmiPerDlciRxOtherByteCnt=tfrapPerfLmiPerDlciRxOtherByteCnt, tfrapLocalAggregateLoopbackDisabledTrap=tfrapLocalAggregateLoopbackDisabledTrap, tfrapCfgT1Interface=tfrapCfgT1Interface, tfrapPerfMgmtIpICMPOutParmProbs=tfrapPerfMgmtIpICMPOutParmProbs, tfrapPerfThruputPerIntfTxByteCnt=tfrapPerfThruputPerIntfTxByteCnt, tfrapPerfIcmpPerDlciRxSrcQuench=tfrapPerfIcmpPerDlciRxSrcQuench, tfrapPerfRoutingTotalRxNetbios=tfrapPerfRoutingTotalRxNetbios, tfrapSysNumT1Installed=tfrapSysNumT1Installed, tfrapPerfThruputPerDlciRxThruput=tfrapPerfThruputPerDlciRxThruput, tfrapPerfIpxTotalTxSpx=tfrapPerfIpxTotalTxSpx, tfrapPerfNetwLongTermEntry=tfrapPerfNetwLongTermEntry, tfrapSysNumDteInstalled=tfrapSysNumDteInstalled, tfrapPerfSnaPerDlciRxNetbios=tfrapPerfSnaPerDlciRxNetbios, tfrapCfgTDDeleteTable=tfrapCfgTDDeleteTable, tfrapVnipTopologyIndex=tfrapVnipTopologyIndex, tfrapSysHardRev=tfrapSysHardRev, tfrapInterface=tfrapInterface, tfrapCfgFrPerfUserProtocolsTableClear=tfrapCfgFrPerfUserProtocolsTableClear, tfrapCfgTftpInitiate=tfrapCfgTftpInitiate, tfrapPerfMgmtIpIPStatsTable=tfrapPerfMgmtIpIPStatsTable, tfrapPerfNetwProtoPerDlciTxIp=tfrapPerfNetwProtoPerDlciTxIp, tfrapCfgFrPerfDlciNamesTable=tfrapCfgFrPerfDlciNamesTable, tfrapLmiSeqNumMismatchDteTrap=tfrapLmiSeqNumMismatchDteTrap, tfrapDiagDteSigDTR=tfrapDiagDteSigDTR, tfrapT1TotalSESs=tfrapT1TotalSESs, tfrapPerfCirPercentUtilizationInterval=tfrapPerfCirPercentUtilizationInterval, tfrapVloopUpViaRemote=tfrapVloopUpViaRemote, tfrapPerfMgmtIpICMPInErrors=tfrapPerfMgmtIpICMPInErrors, tfrapCfgTransitDelayInterface=tfrapCfgTransitDelayInterface, tfrapPerfMgmtIpTCPStatsTable=tfrapPerfMgmtIpTCPStatsTable, tfrapPerfLmiTotalRxTotalByteCnt=tfrapPerfLmiTotalRxTotalByteCnt, tfrapPerfRoutingTotalRxOspf=tfrapPerfRoutingTotalRxOspf)
mibBuilder.exportSymbols("TFRAP-MIB", tfrapPerfMgmtIpIPInProtUnk=tfrapPerfMgmtIpIPInProtUnk, tfrapPerfCirRxPercentUtilizationRange2=tfrapPerfCirRxPercentUtilizationRange2, tfrapCsuLoopUpInitiatedTrap=tfrapCsuLoopUpInitiatedTrap, tfrapPerfLmiPerDlciTxFullStatByteCnt=tfrapPerfLmiPerDlciTxFullStatByteCnt, tfrapSysLocation=tfrapSysLocation, tfrapPerfNetwProtoPerDlciRxCisco=tfrapPerfNetwProtoPerDlciRxCisco, tfrapT1CurrentOofEvents=tfrapT1CurrentOofEvents, tfrapPerfIpPerDlciInterval=tfrapPerfIpPerDlciInterval, tfrapCfgDteChannelDensity=tfrapCfgDteChannelDensity, tfrapDiagDteBerResyncs=tfrapDiagDteBerResyncs, tfrapPerfIcmpTotalRxAddrMaskRep=tfrapPerfIcmpTotalRxAddrMaskRep, tfrapPerfSnaTotalRxPeriph=tfrapPerfSnaTotalRxPeriph, tfrapPerfNetwProtoPerDlciRxAnnexG=tfrapPerfNetwProtoPerDlciRxAnnexG, tfrapPerfArpTotalTable=tfrapPerfArpTotalTable, tfrapT1CurrentLCVs=tfrapT1CurrentLCVs, tfrapVbertRequestFailed=tfrapVbertRequestFailed, tfrapPerfThruputCmdClearDlciStats=tfrapPerfThruputCmdClearDlciStats, tfrapCfgIpMyIP=tfrapCfgIpMyIP, tfrapPerfCirPercentUtilizationTable=tfrapPerfCirPercentUtilizationTable, tfrapPerfIcmpPerDlciTxEchoRep=tfrapPerfIcmpPerDlciTxEchoRep, tfrapPerfNetwLongTermDlci=tfrapPerfNetwLongTermDlci, tfrapPerfNetwProtoPerDlciTxAnnexG=tfrapPerfNetwProtoPerDlciTxAnnexG, tfrapPerfIcmpTotalRxGmReduct=tfrapPerfIcmpTotalRxGmReduct, tfrapEventTrapLogTable=tfrapEventTrapLogTable, tfrapPerfArpTotalRxInarpReq=tfrapPerfArpTotalRxInarpReq, tfrapPerfArpPerDlciRxArpRep=tfrapPerfArpPerDlciRxArpRep, tfrapPerfThruputCmdCountsStsDlciReset=tfrapPerfThruputCmdCountsStsDlciReset, tfrapPerfMgmtIpIFOutOctets=tfrapPerfMgmtIpIFOutOctets, tfrapDiagDteBerErrSec=tfrapDiagDteBerErrSec, tfrapCfgUnlock=tfrapCfgUnlock, tfrapPerfNetwProtoPerDlciRxTotal=tfrapPerfNetwProtoPerDlciRxTotal, tfrapCfgFrPerfDlciNamesCirType=tfrapCfgFrPerfDlciNamesCirType, tfrapPerfIcmpTotalRxTotal=tfrapPerfIcmpTotalRxTotal, tfrapCfgTftpStatus=tfrapCfgTftpStatus, tfrapCfgFrDLCIValue=tfrapCfgFrDLCIValue, tfrapTftpHostUnreachableTrap=tfrapTftpHostUnreachableTrap, tfrapT1PerfClearAll=tfrapT1PerfClearAll, tfrapPerfRoutingPerDlciRxRip=tfrapPerfRoutingPerDlciRxRip, tfrapPerfApplicationPerDlciTxCustom2=tfrapPerfApplicationPerDlciTxCustom2, tfrapT1IntervalUASs=tfrapT1IntervalUASs, tfrapCfgVnipTable=tfrapCfgVnipTable, tfrapCfgDteTable=tfrapCfgDteTable, tfrapSystem=tfrapSystem, tfrapCfgFrPerfTimers=tfrapCfgFrPerfTimers, tfrapPerfMgmtIpIFInErrors=tfrapPerfMgmtIpIFInErrors, tfrapEventLogAltEntry=tfrapEventLogAltEntry, tfrapCfgAppType=tfrapCfgAppType, tfrapSysExtTimSupported=tfrapSysExtTimSupported, tfrapPerfIpxPerDlciEntry=tfrapPerfIpxPerDlciEntry, tfrapDiagnostics=tfrapDiagnostics, tfrapCfgAppPerfBuffLimit=tfrapCfgAppPerfBuffLimit, tfrapPerfThruput=tfrapPerfThruput, tfrapPerfIcmpPerDlciRxParamProb=tfrapPerfIcmpPerDlciRxParamProb, tfrapIntfT1Alarms=tfrapIntfT1Alarms, tfrapPerfArpTotalRxTotal=tfrapPerfArpTotalRxTotal, tfrapConfiguration=tfrapConfiguration, tfrapPerfIcmpPerDlciTxTimestpRep=tfrapPerfIcmpPerDlciTxTimestpRep, tfrapVnipTopoVBertTxDEClrFrames=tfrapVnipTopoVBertTxDEClrFrames, tfrapCfgLock=tfrapCfgLock, tfrapPerfCurrentAggregateUtilization=tfrapPerfCurrentAggregateUtilization, tfrapPerfSnaPerDlciRxSubarea=tfrapPerfSnaPerDlciRxSubarea, tfrapPerfLmiPerDlciTxLivoStatByteCnt=tfrapPerfLmiPerDlciTxLivoStatByteCnt, tfrapBertFailedTrap=tfrapBertFailedTrap, tfrapPerfMgmtIpICMPInRedirects=tfrapPerfMgmtIpICMPInRedirects, tfrapT1IntervalLCVs=tfrapT1IntervalLCVs, tfrapPerfThruputPerDlciEIR=tfrapPerfThruputPerDlciEIR, tfrapPerfIpPerDlciTxTotal=tfrapPerfIpPerDlciTxTotal, tfrapPerfIpxPerDlciTxSap=tfrapPerfIpxPerDlciTxSap, tfrapPerfLmiTotalTable=tfrapPerfLmiTotalTable, tfrapStatusLmiAutosense=tfrapStatusLmiAutosense, tfrapCfgLcdPassword=tfrapCfgLcdPassword, tfrapPerfIcmpPerDlciTxTimeExcd=tfrapPerfIcmpPerDlciTxTimeExcd, tfrapVnipTopologyTable=tfrapVnipTopologyTable, tfrapPerfSnaPerDlciTxPeriph=tfrapPerfSnaPerDlciTxPeriph, tfrapPerfSnaTotalTxTotal=tfrapPerfSnaTotalTxTotal, tfrapPerfCurrentWanUtilization=tfrapPerfCurrentWanUtilization, tfrapLmiSourcingChangeUserT1Trap=tfrapLmiSourcingChangeUserT1Trap, tfrapCfgSnmpMgrTable=tfrapCfgSnmpMgrTable, tfrapDiagDteLclLpbk=tfrapDiagDteLclLpbk, tfrapPerfThruputCmdClearAllStats=tfrapPerfThruputCmdClearAllStats, private=private, tfrapPerfCirPercentUtilizationDlciValue=tfrapPerfCirPercentUtilizationDlciValue, tfrapPerfIcmpTotalTxGmReport=tfrapPerfIcmpTotalTxGmReport, tfrapPerfIcmpPerDlciTxRedirect=tfrapPerfIcmpPerDlciTxRedirect, tfrapPerfArpTotalRxInarpRep=tfrapPerfArpTotalRxInarpRep, tfrapT1CurrentCSSs=tfrapT1CurrentCSSs, tfrapSysNumDlcisSupported=tfrapSysNumDlcisSupported, tfrapPerfIpPerDlciValue=tfrapPerfIpPerDlciValue, tfrapLocalNetLoopbackFailedTrap=tfrapLocalNetLoopbackFailedTrap, enterprises=enterprises, tfrapT1TotalBESs=tfrapT1TotalBESs, tfrapVloopDown=tfrapVloopDown, tfrapPerfApplicationPerDlciTxTelnet=tfrapPerfApplicationPerDlciTxTelnet, tfrapSysLTFNumProtocols=tfrapSysLTFNumProtocols, tfrapPerfNetwProtoTotalRxIp=tfrapPerfNetwProtoTotalRxIp, tfrapPerfMgmtIpICMPOutMsgs=tfrapPerfMgmtIpICMPOutMsgs, tfrapPerfThruputCmdAllStsDlciResetAll=tfrapPerfThruputCmdAllStsDlciResetAll, tfrapPerfThruputCmdReplaceDlciNewValue=tfrapPerfThruputCmdReplaceDlciNewValue, tfrapt1netwredalarmdeclare=tfrapt1netwredalarmdeclare, tfrapPerfIcmpPerDlciTxGmQuery=tfrapPerfIcmpPerDlciTxGmQuery, tfrapPerfApplicationTotalTxTelnet=tfrapPerfApplicationTotalTxTelnet, tfrapPerfCirPercentUtilizationEntry=tfrapPerfCirPercentUtilizationEntry, tfrapPerfMgmtIpIPInDscrd=tfrapPerfMgmtIpIPInDscrd, tfrapV54LoopbackDisabledTrap=tfrapV54LoopbackDisabledTrap, tfrapT1TotalLCVs=tfrapT1TotalLCVs, tfrapPerfMgmtIpIPInAddrErr=tfrapPerfMgmtIpIPInAddrErr, tfrapT1TotalIndex=tfrapT1TotalIndex, tfrapCfgDteDcdOutput=tfrapCfgDteDcdOutput, tfrapCfgFrLmiType=tfrapCfgFrLmiType, tfrapPerfIcmpPerDlciRxPktTooBig=tfrapPerfIcmpPerDlciRxPktTooBig, tfrapPerfSnaPerDlciTxSubarea=tfrapPerfSnaPerDlciTxSubarea, tfrapDiagT1LocAggrLpbk=tfrapDiagT1LocAggrLpbk, tfrapPerfIpxTotalTxSap=tfrapPerfIpxTotalTxSap, tfrapLocalPayloadLoopbackDisabledViaRemoteTrap=tfrapLocalPayloadLoopbackDisabledViaRemoteTrap, tfrapSysPPPSupported=tfrapSysPPPSupported, tfrapCfgAppCircuitId=tfrapCfgAppCircuitId, tfrapVnipTopologyIpAddr=tfrapVnipTopologyIpAddr, tfrapLocalConfigTrap=tfrapLocalConfigTrap, tfrapCfgFrPerfDlciDefaultUtilThreshold=tfrapCfgFrPerfDlciDefaultUtilThreshold, tfrapDiagDteTable=tfrapDiagDteTable, tfrapPerfIcmpPerDlciRxTimeExcd=tfrapPerfIcmpPerDlciRxTimeExcd, tfrapPerfThruputPerDlciMTTSR=tfrapPerfThruputPerDlciMTTSR, tfrapVnipTopoVBertPerUtilEIR=tfrapVnipTopoVBertPerUtilEIR, tfrapPerfIpxPerDlciRxNcp=tfrapPerfIpxPerDlciRxNcp, tfrapPerfIpPerDlciTxUdp=tfrapPerfIpPerDlciTxUdp, tfrapLmiSourcingChangeUserDteTrap=tfrapLmiSourcingChangeUserDteTrap, tfrapPerfThruputPerDlciTxUtilizationStatus=tfrapPerfThruputPerDlciTxUtilizationStatus, tfrapPerfNetwProtoPerDlciTxOther=tfrapPerfNetwProtoPerDlciTxOther, tfrapCfgFrPerfLTProtocolFilterIndex=tfrapCfgFrPerfLTProtocolFilterIndex, tfrapPerfNetwProtoTotalRxAnnexG=tfrapPerfNetwProtoTotalRxAnnexG, tfrapCfgDteConnAutoUpdate=tfrapCfgDteConnAutoUpdate, tfrapCfgFrTable=tfrapCfgFrTable, tfrapPerfNetwProtoTotalRxTotal=tfrapPerfNetwProtoTotalRxTotal, tfrapSysSelDTESupported=tfrapSysSelDTESupported, tfrapPerfMgmtIpICMPInParmProbs=tfrapPerfMgmtIpICMPInParmProbs, tfrapDiagDteBerPattern=tfrapDiagDteBerPattern, tfrapT1CurrentCrc6Events=tfrapT1CurrentCrc6Events, tfrapPerfNetwLongTermValue=tfrapPerfNetwLongTermValue, tfrapPerfNetwProtoPerDlciEntry=tfrapPerfNetwProtoPerDlciEntry, tfrapPerfIcmpPerDlciTxTimestpReq=tfrapPerfIcmpPerDlciTxTimestpReq, tfrapPerfArpPerDlciRxInarpReq=tfrapPerfArpPerDlciRxInarpReq, tfrapPerfArpTotalEntry=tfrapPerfArpTotalEntry, tfrapPerfIpxTotalRxNcp=tfrapPerfIpxTotalRxNcp, tfrapCfgUpdate=tfrapCfgUpdate, tfrapPerfIcmpTotalTxPktTooBig=tfrapPerfIcmpTotalTxPktTooBig, tfrapPerfRoutingTotalInterval=tfrapPerfRoutingTotalInterval, tfrapCfgTftpIpAddress=tfrapCfgTftpIpAddress, tfrapPerfApplicationPerDlciRxTelnet=tfrapPerfApplicationPerDlciRxTelnet, tfrapT1CurrentUASs=tfrapT1CurrentUASs, tfrapSysRDOSupported=tfrapSysRDOSupported, tfrapCfgTransitDelayTable=tfrapCfgTransitDelayTable, tfrapEventLogAltSeqNum=tfrapEventLogAltSeqNum, tfrapVnipTopoVBertTransitDelayMax=tfrapVnipTopoVBertTransitDelayMax, tfrapPerfNetwProtoTotalRxIpx=tfrapPerfNetwProtoTotalRxIpx, tfrapCfgFrPerfUserProtocolsEntry=tfrapCfgFrPerfUserProtocolsEntry, tfrapPerfNetwProtoTotalTxOther=tfrapPerfNetwProtoTotalTxOther, tfrapPerfArpPerDlciRxArpReq=tfrapPerfArpPerDlciRxArpReq, tfrapCfgFrAddrResInarpTimer=tfrapCfgFrAddrResInarpTimer, tfrapPerfThruputPerDlciValue=tfrapPerfThruputPerDlciValue, tfrapCfgTransitDelayNumHops=tfrapCfgTransitDelayNumHops, tfrapPerfApplicationTotalRxSmtp=tfrapPerfApplicationTotalRxSmtp, tfrapCfgTransitDelayRcvSummaryCancel=tfrapCfgTransitDelayRcvSummaryCancel, tfrapCfgAppFormat=tfrapCfgAppFormat, tfrapEventTrapLogEntry=tfrapEventTrapLogEntry, tfrapCfgIpTelnetEnable=tfrapCfgIpTelnetEnable, tfrapCfgDteConnStartDs0=tfrapCfgDteConnStartDs0, tfrapStatusMgmtTable=tfrapStatusMgmtTable, tfrapLmiSourcingChangePassthruTrap=tfrapLmiSourcingChangePassthruTrap, tfrapPerfLmiPerDlciEntry=tfrapPerfLmiPerDlciEntry, tfrapCfgIpMaxMTU=tfrapCfgIpMaxMTU, tfrapPerfMgmtIpIPInRcv=tfrapPerfMgmtIpIPInRcv, tfrapPerfNetwProtoPerDlciRxVnip=tfrapPerfNetwProtoPerDlciRxVnip, tfrapPerfNetwProtoTotalRxCisco=tfrapPerfNetwProtoTotalRxCisco, tfrapPerfLmiTotalRxFullStatByteCnt=tfrapPerfLmiTotalRxFullStatByteCnt, tfrapVnipTopoVBertTxDESetFrames=tfrapVnipTopoVBertTxDESetFrames, tfrapPerfSnaPerDlciTable=tfrapPerfSnaPerDlciTable, tfrapCfgMgmtTable=tfrapCfgMgmtTable, tfrapPerfNetwProtoPerDlciInterval=tfrapPerfNetwProtoPerDlciInterval, tfrapPerfIpxPerDlciTxNcp=tfrapPerfIpxPerDlciTxNcp, tfrapCfgStatus=tfrapCfgStatus, tfrapPerfIpxPerDlciTxOther=tfrapPerfIpxPerDlciTxOther, tfrapPerfLmiTotalTxFullEnqByteCnt=tfrapPerfLmiTotalTxFullEnqByteCnt, tfrapPerfApplicationTotalTxCustom4=tfrapPerfApplicationTotalTxCustom4, tfrapCfgTelnetCliLcdPassword=tfrapCfgTelnetCliLcdPassword, tfrapPerfIcmpTotalTxSrcQuench=tfrapPerfIcmpTotalTxSrcQuench, tfrapPerfApplicationPerDlciRxCustom4=tfrapPerfApplicationPerDlciRxCustom4, tfrapCfgFrLmiFullStatus=tfrapCfgFrLmiFullStatus, tfrapPerfIcmpTotalTxGmReduct=tfrapPerfIcmpTotalTxGmReduct, tfrapEventTrapLogVarBind1=tfrapEventTrapLogVarBind1, tfrapPerfIpxTotalRxNetbios=tfrapPerfIpxTotalRxNetbios, tfrapPerfIpPerDlciRxIgrp=tfrapPerfIpPerDlciRxIgrp, tfrapT1PerfClearEvents=tfrapT1PerfClearEvents, tfrapPerfArpPerDlciInterval=tfrapPerfArpPerDlciInterval, tfrapBadConfigTrap=tfrapBadConfigTrap, tfrapPerfThruputPerDlciTxDe=tfrapPerfThruputPerDlciTxDe, tfrapPerfCirTxPercentUtilizationRange4=tfrapPerfCirTxPercentUtilizationRange4, tfrapPerfIcmpTotalTxTimestpReq=tfrapPerfIcmpTotalTxTimestpReq, tfrapPerfLmiPerDlciRxFullStatByteCnt=tfrapPerfLmiPerDlciRxFullStatByteCnt, tfrapVnipTopoTDLastDelay=tfrapVnipTopoTDLastDelay, tfrapPerfSnaPerDlciInterval=tfrapPerfSnaPerDlciInterval, tfrapPerfMgmtIpICMPInDestUnreachs=tfrapPerfMgmtIpICMPInDestUnreachs, tfrapPerformance=tfrapPerformance, tfrapSysTable=tfrapSysTable, tfrapPerfThruputPerDlciRxUtilizationStatus=tfrapPerfThruputPerDlciRxUtilizationStatus, tfrapPerfCurrentPerDlciRxUtilization=tfrapPerfCurrentPerDlciRxUtilization, tfrapCfgFrPerfLTProtocolFilterEntry=tfrapCfgFrPerfLTProtocolFilterEntry, tfrapCfgFrPerfLTProtocolFilterTableClear=tfrapCfgFrPerfLTProtocolFilterTableClear, tfrapCfgVnipInitTimer=tfrapCfgVnipInitTimer, tfrapT1IntervalNumber=tfrapT1IntervalNumber, tfrapPerfNetwProtoTotalRxOther=tfrapPerfNetwProtoTotalRxOther, tfrapVloopUp=tfrapVloopUp, tfrapCfgFrAddrResMode=tfrapCfgFrAddrResMode, tfrapCfgIpTable=tfrapCfgIpTable, tfrapDiagDteV54Lpbk=tfrapDiagDteV54Lpbk, tfrapVloopRequestFailed=tfrapVloopRequestFailed, tfrapPerfLmiPerDlciInterval=tfrapPerfLmiPerDlciInterval, tfrapCfgSnmpMgrEntry=tfrapCfgSnmpMgrEntry, tfrapPerfIpTotalRxOther=tfrapPerfIpTotalRxOther, tfrapVnipTopoTDNumSamples=tfrapVnipTopoTDNumSamples, tfrapPerfThruputPerDlciRxDe=tfrapPerfThruputPerDlciRxDe, tfrapPerfLmiPerDlciTable=tfrapPerfLmiPerDlciTable, tfrapCfgFrAddrResDlcis=tfrapCfgFrAddrResDlcis, tfrapEventLogCurrentSeqNum=tfrapEventLogCurrentSeqNum, tfrapStatusDteRxLED=tfrapStatusDteRxLED, tfrapCfgTftpPassword=tfrapCfgTftpPassword, tfrapPerfApplicationTotalRxHttp=tfrapPerfApplicationTotalRxHttp, tfrapPerfIcmpTotalTxAddrMaskRep=tfrapPerfIcmpTotalTxAddrMaskRep, tfrapT1IntervalCSSs=tfrapT1IntervalCSSs, tfrapPerfRoutingPerDlciTxNetbios=tfrapPerfRoutingPerDlciTxNetbios, tfrapPerfSnaTotalInterval=tfrapPerfSnaTotalInterval, tfrapLocalDteLoopbackDisabledTrap=tfrapLocalDteLoopbackDisabledTrap, tfrapCfgSnmpMgrIndex=tfrapCfgSnmpMgrIndex, tfrapCfgFrPerfLTDlciFilterTableClear=tfrapCfgFrPerfLTDlciFilterTableClear, tfrapPerfCirRxPercentUtilizationRange5=tfrapPerfCirRxPercentUtilizationRange5, tfrapPerfThruputPerIntfRxByteCnt=tfrapPerfThruputPerIntfRxByteCnt, tfrapDiagT1Table=tfrapDiagT1Table, tfrapVnipTopologyLocalDlci=tfrapVnipTopologyLocalDlci, tfrapPerfApplicationTotalTxSnmpTrap=tfrapPerfApplicationTotalTxSnmpTrap, tfrapT1CurrentIndex=tfrapT1CurrentIndex, tfrapPerfThruputPerDlciOutageCount=tfrapPerfThruputPerDlciOutageCount, tfrapPerfNetwProtoTotalTxIp=tfrapPerfNetwProtoTotalTxIp, tfrapPerfIcmpTotalTable=tfrapPerfIcmpTotalTable, tfrapPerfMgmtIpTCPInSegs=tfrapPerfMgmtIpTCPInSegs, tfrapEventLogFreeze=tfrapEventLogFreeze, tfrapLocalDteLoopbackFailedTrap=tfrapLocalDteLoopbackFailedTrap, tfrapPerfRoutingTotalTxOspf=tfrapPerfRoutingTotalTxOspf, tfrapPerfLmiTotalEntry=tfrapPerfLmiTotalEntry, tfrapPerfThruputCmdAvailabilityStsDlciReset=tfrapPerfThruputCmdAvailabilityStsDlciReset, tfrapPerfIpTotalTxUdp=tfrapPerfIpTotalTxUdp, tfrapPerfArpPerDlciEntry=tfrapPerfArpPerDlciEntry, tfrapPerfCurrentPerDlciUtilizationEntry=tfrapPerfCurrentPerDlciUtilizationEntry, tfrapPerfThruputPerIntfIndex=tfrapPerfThruputPerIntfIndex, tfrapCsuLoopbackDisabledTrap=tfrapCsuLoopbackDisabledTrap, tfrapt1netwsyncacquire=tfrapt1netwsyncacquire)
mibBuilder.exportSymbols("TFRAP-MIB", tfrapStatusMgmtDefaultDLCINo=tfrapStatusMgmtDefaultDLCINo, tfrapVnipTopologyInterface=tfrapVnipTopologyInterface, tfrapDiagT1LocLineLpbk=tfrapDiagT1LocLineLpbk, tfrapSysLTFNumDlcis=tfrapSysLTFNumDlcis, tfrapLocalNetLoopbackEnabledTrap=tfrapLocalNetLoopbackEnabledTrap, tfrapPerfIpxPerDlciRxRip=tfrapPerfIpxPerDlciRxRip, tfrapPerfIcmpPerDlciRxTotal=tfrapPerfIcmpPerDlciRxTotal, tfrapPerfArpTotalTxInarpReq=tfrapPerfArpTotalTxInarpReq, tfrapPerfArpPerDlciTable=tfrapPerfArpPerDlciTable, tfrapPerfNetwLongTermInterval=tfrapPerfNetwLongTermInterval, tfrapPerfArpPerDlciRxRarpReq=tfrapPerfArpPerDlciRxRarpReq, tfrapPerfIpPerDlciRxIcmp=tfrapPerfIpPerDlciRxIcmp, tfrapCfgSnmpFrTrap=tfrapCfgSnmpFrTrap, tfrapPerfApplicationPerDlciRxSmtp=tfrapPerfApplicationPerDlciRxSmtp, tfrapVnipTopoVBertRxDEClrFrames=tfrapVnipTopoVBertRxDEClrFrames, tfrapPerfNetwProtoPerDlciTxSna=tfrapPerfNetwProtoPerDlciTxSna, tfrapPerfNetwLongTermAltTable=tfrapPerfNetwLongTermAltTable, tfrapPerfLmiPerDlciTxTotalByteCnt=tfrapPerfLmiPerDlciTxTotalByteCnt, tfrapPerfApplicationTotalTxHttp=tfrapPerfApplicationTotalTxHttp, tfrapPerfApplicationTotalRxTftp=tfrapPerfApplicationTotalRxTftp, tfrapPerfApplicationTotalRxCustom1=tfrapPerfApplicationTotalRxCustom1, tfrapT1TotalCSSs=tfrapT1TotalCSSs, tfrapTftpProgrammingTrap=tfrapTftpProgrammingTrap, tfrapPerfApplicationPerDlciRxCustom2=tfrapPerfApplicationPerDlciRxCustom2, tfrapCfgFrPerfDlciNamesEntry=tfrapCfgFrPerfDlciNamesEntry, tfrapPerfArpPerDlciRxInarpRep=tfrapPerfArpPerDlciRxInarpRep, tfrapV54LoopDownCompletedTrap=tfrapV54LoopDownCompletedTrap, tfrapPerfIpxTotalTxRip=tfrapPerfIpxTotalTxRip, tfrapPerfIcmpPerDlciRxGmQuery=tfrapPerfIcmpPerDlciRxGmQuery, tfrapCfgTftpDlci=tfrapCfgTftpDlci, tfrapPerfIpxPerDlciRxSpx=tfrapPerfIpxPerDlciRxSpx, tfrapPerfIcmpTotalTxRedirect=tfrapPerfIcmpTotalTxRedirect, tfrapPerfThruputPerDlciRxBecn=tfrapPerfThruputPerDlciRxBecn, tfrapPerfArpPerDlciTxInarpReq=tfrapPerfArpPerDlciTxInarpReq, tfrapIntfDteDtr=tfrapIntfDteDtr, tfrapPerfIpPerDlciTxTcp=tfrapPerfIpPerDlciTxTcp, tfrapCfgFrPerfDlciNamesTableClear=tfrapCfgFrPerfDlciNamesTableClear, tfrapPerfIpxTotalEntry=tfrapPerfIpxTotalEntry, tfrapDiagDteBerStatus=tfrapDiagDteBerStatus, tfrapPerfCirRxPercentUtilizationRange3=tfrapPerfCirRxPercentUtilizationRange3, tfrapCfgDteConnDs0Required=tfrapCfgDteConnDs0Required, tfrapStatus=tfrapStatus, tfrapCfgCommFlowCtrl=tfrapCfgCommFlowCtrl, tfrapPerfApplicationPerDlciInterval=tfrapPerfApplicationPerDlciInterval, tfrapPerfIcmpPerDlciRxTimestpReq=tfrapPerfIcmpPerDlciRxTimestpReq, tfrapPerfLmiTotalTxTotalByteCnt=tfrapPerfLmiTotalTxTotalByteCnt, tfrapStatusAllLEDs=tfrapStatusAllLEDs, tfrapPerfCirTxPercentUtilizationRange2=tfrapPerfCirTxPercentUtilizationRange2, tfrapCfgTransitDelayThreshold=tfrapCfgTransitDelayThreshold, tfrapPerfIcmpTotalRxPktTooBig=tfrapPerfIcmpTotalRxPktTooBig, tfrapPerfIcmpTotalTxEchoReq=tfrapPerfIcmpTotalTxEchoReq, tfrapPerfIcmpTotalRxGmQuery=tfrapPerfIcmpTotalRxGmQuery, tfrapPerfIcmpTotalRxParamProb=tfrapPerfIcmpTotalRxParamProb, tfrapCfgFrPerfDlciUtilDuration=tfrapCfgFrPerfDlciUtilDuration, tfrapt1netwyellowalarmclear=tfrapt1netwyellowalarmclear, tfrapCfgDteTiming=tfrapCfgDteTiming, tfrapIntfDteMode=tfrapIntfDteMode, tfrapPerfMgmtIpICMPInEchoReps=tfrapPerfMgmtIpICMPInEchoReps, tfrapCfgFrAddrLen=tfrapCfgFrAddrLen, tfrapNonIncrLmiSeqNumT1Trap=tfrapNonIncrLmiSeqNumT1Trap, tfrapCfgSnmpMgrDlci=tfrapCfgSnmpMgrDlci, tfrapCfgSnmpTable=tfrapCfgSnmpTable, tfrapT1IntervalEntry=tfrapT1IntervalEntry, Index=Index, tfrapT1CurrentSESs=tfrapT1CurrentSESs, tfrapPerfIcmpTotalTxTotal=tfrapPerfIcmpTotalTxTotal, tfrapPerfApplicationPerDlciRxCustom1=tfrapPerfApplicationPerDlciRxCustom1, tfrapPerfNetwProtoTotalRxSna=tfrapPerfNetwProtoTotalRxSna, tfrapPerfSnaTotalRxAppn=tfrapPerfSnaTotalRxAppn, tfrapPerfIpxTotalTxNcp=tfrapPerfIpxTotalTxNcp, tfrapPerfIpTotalEntry=tfrapPerfIpTotalEntry, tfrapPerfSnaTotalRxTotal=tfrapPerfSnaTotalRxTotal, tfrapStatusDteModeLED=tfrapStatusDteModeLED, tfrapDiagUnitReset=tfrapDiagUnitReset, tfrapPerfNetwProtoPerDlciTxCisco=tfrapPerfNetwProtoPerDlciTxCisco, tfrapPerfIpxPerDlciRxOther=tfrapPerfIpxPerDlciRxOther, tfrapPerfThruputPerDlciTxThruput=tfrapPerfThruputPerDlciTxThruput, tfrapPerfIcmpTotalTxEchoRep=tfrapPerfIcmpTotalTxEchoRep, tfrapPerfLmiPerDlciRxLivoStatByteCnt=tfrapPerfLmiPerDlciRxLivoStatByteCnt, tfrapPerfApplicationPerDlciTxCustom4=tfrapPerfApplicationPerDlciTxCustom4, tfrapPerfLmiTotalTxOtherByteCnt=tfrapPerfLmiTotalTxOtherByteCnt, tfrapCsuLoopDownCompletedTrap=tfrapCsuLoopDownCompletedTrap, tfrapSysETHSupported=tfrapSysETHSupported, tfrapt1netwaisdetect=tfrapt1netwaisdetect, tfrapBertCompletedTrap=tfrapBertCompletedTrap, tfrapT1IntervalSEFSs=tfrapT1IntervalSEFSs, tfrapPerfArpTotalTxRarpReq=tfrapPerfArpTotalTxRarpReq, tfrapCfgAppClockSource=tfrapCfgAppClockSource, tfrapPerfCirTxPercentUtilizationRange6=tfrapPerfCirTxPercentUtilizationRange6, tfrapPvcRxUtilizationClearedTrap=tfrapPvcRxUtilizationClearedTrap, tfrapPerfIcmpTotalInterval=tfrapPerfIcmpTotalInterval, tfrapPerfRoutingPerDlciTxOspf=tfrapPerfRoutingPerDlciTxOspf, tfrapTftpAbortedTrap=tfrapTftpAbortedTrap, tfrapCfgTftpTable=tfrapCfgTftpTable, tfrapPerfLmiPerDlciValue=tfrapPerfLmiPerDlciValue, tfrapPerfThruputCommands=tfrapPerfThruputCommands, tfrapPerfIcmpPerDlciTxDestUnr=tfrapPerfIcmpPerDlciTxDestUnr, tfrapPerfArpTotalRxArpRep=tfrapPerfArpTotalRxArpRep, tfrapPerfArpTotalTxArpReq=tfrapPerfArpTotalTxArpReq, tfrapCfgFrDLCIMgmtDE=tfrapCfgFrDLCIMgmtDE, tfrapPerfNetwProtoTotalTxIpx=tfrapPerfNetwProtoTotalTxIpx, tfrapPerfIpxTotalRxRip=tfrapPerfIpxTotalRxRip, tfrapPerfArpTotalTxOther=tfrapPerfArpTotalTxOther, tfrapCfgCommStopBits=tfrapCfgCommStopBits, tfrapPerfCurrentDteUtilization=tfrapPerfCurrentDteUtilization, tfrapPerfCurrentPerDlciUtilizationTable=tfrapPerfCurrentPerDlciUtilizationTable, tfrapPerfApplicationPerDlciRxTftp=tfrapPerfApplicationPerDlciRxTftp, tfrapPerfMgmtIpICMPOutDestUnreachs=tfrapPerfMgmtIpICMPOutDestUnreachs, tfrapPerfApplicationPerDlciTxTftp=tfrapPerfApplicationPerDlciTxTftp, tfrapPerfNetworkLongTerm=tfrapPerfNetworkLongTerm, tfrapPerfMgmtIpIPOutNoRt=tfrapPerfMgmtIpIPOutNoRt, tfrapCfgFrDLCITable=tfrapCfgFrDLCITable, tfrapPerfLmiTotalTxLivoEnqByteCnt=tfrapPerfLmiTotalTxLivoEnqByteCnt, tfrapPerfIpxPerDlciTable=tfrapPerfIpxPerDlciTable, tfrapPerfIcmpPerDlciRxEchoReq=tfrapPerfIcmpPerDlciRxEchoReq, tfrapCfgFrPerfTimersLTInterval=tfrapCfgFrPerfTimersLTInterval, tfrapVnipTopoVBertRxDESetFrames=tfrapVnipTopoVBertRxDESetFrames, tfrapPerfThruputPerIntfRxCrcErrCnt=tfrapPerfThruputPerIntfRxCrcErrCnt, tfrapSysMLSupported=tfrapSysMLSupported, tfrapPerfArpPerDlciTxInarpRep=tfrapPerfArpPerDlciTxInarpRep, tfrapPerfIcmpTotalRxTimeExcd=tfrapPerfIcmpTotalRxTimeExcd, tfrapCfgAppTable=tfrapCfgAppTable, tfrapCfgDteConnRate=tfrapCfgDteConnRate, tfrapPerfApplicationTotalInterval=tfrapPerfApplicationTotalInterval, tfrapPerfIpPerDlciRxTotal=tfrapPerfIpPerDlciRxTotal, tfrapDLCITDThresholdTrap=tfrapDLCITDThresholdTrap, tfrapPerfThruputPerDlciTable=tfrapPerfThruputPerDlciTable, tfrapPerfApplicationPerDlciValue=tfrapPerfApplicationPerDlciValue, tfrapCsuLoopbackEnabledTrap=tfrapCsuLoopbackEnabledTrap, tfrapPerfArpPerDlciTxTotal=tfrapPerfArpPerDlciTxTotal, tfrapPerfMgmtIpICMPOutErrors=tfrapPerfMgmtIpICMPOutErrors, tfrapPerfSnaPerDlciTxOther=tfrapPerfSnaPerDlciTxOther, tfrapSysBootRev=tfrapSysBootRev, tfrapCfgSnmpTrapMuting=tfrapCfgSnmpTrapMuting, tfrapPerfIcmpPerDlciRxDestUnr=tfrapPerfIcmpPerDlciRxDestUnr, tfrapCfgFrPerfLTDlciFilterDlciNum=tfrapCfgFrPerfLTDlciFilterDlciNum, tfrapPerfIpTotalRxUdp=tfrapPerfIpTotalRxUdp, tfrapPerfSnaPerDlciTxNetbios=tfrapPerfSnaPerDlciTxNetbios, tfrapLocalAggregateLoopbackEnabledTrap=tfrapLocalAggregateLoopbackEnabledTrap, tfrapCfgCommMode=tfrapCfgCommMode, tfrapDiagDteBerState=tfrapDiagDteBerState, tfrapPerfRoutingTotalTable=tfrapPerfRoutingTotalTable, tfrapPerfIpxPerDlciRxSap=tfrapPerfIpxPerDlciRxSap, tfrapPerfNetwLongTermAltEntry=tfrapPerfNetwLongTermAltEntry, tfrapPerfThruputPerDlciUptime=tfrapPerfThruputPerDlciUptime, tfrapPerfIcmpTotalTxGmQuery=tfrapPerfIcmpTotalTxGmQuery, tfrapDiagVnipTable=tfrapDiagVnipTable, tfrapPerfCirTxPercentUtilizationRange8=tfrapPerfCirTxPercentUtilizationRange8, tfrapVbertStopped=tfrapVbertStopped, tfrapCfgTDDeleteEntry=tfrapCfgTDDeleteEntry, tfrapPerfThruputCmdReplaceDlciValue=tfrapPerfThruputCmdReplaceDlciValue, tfrapPerfMgmtIpUDPStatsTable=tfrapPerfMgmtIpUDPStatsTable, tfrapPerfSnaTotalRxOther=tfrapPerfSnaTotalRxOther, tfrapPerfIcmpPerDlciRxGmReport=tfrapPerfIcmpPerDlciRxGmReport, tfrapPerfApplicationTotalTxCustom2=tfrapPerfApplicationTotalTxCustom2, tfrapSysTKRSupported=tfrapSysTKRSupported, tfrapDiagVnipEntry=tfrapDiagVnipEntry, tfrapVnipTopoTDAvgDelay=tfrapVnipTopoTDAvgDelay, tfrapVnipTopoVBertTimeElapse=tfrapVnipTopoVBertTimeElapse, tfrapPerfNetwProtoTotalTxTotal=tfrapPerfNetwProtoTotalTxTotal, tfrapt1netwcarrierloss=tfrapt1netwcarrierloss, tfrapSysPrompt=tfrapSysPrompt, tfrapT1IntervalSESs=tfrapT1IntervalSESs, tfrapPerfNetwProtoPerDlciValue=tfrapPerfNetwProtoPerDlciValue)
