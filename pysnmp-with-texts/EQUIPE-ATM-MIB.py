#
# PySNMP MIB module EQUIPE-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EQUIPE-ATM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:05:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, iso, Bits, Integer32, IpAddress, MibIdentifier, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, NotificationType, enterprises, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "Bits", "Integer32", "IpAddress", "MibIdentifier", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "NotificationType", "enterprises", "TimeTicks", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
equipe = MibIdentifier((1, 3, 6, 1, 4, 1, 5022))
eqAtmMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 5022, 2))
if mibBuilder.loadTexts: eqAtmMib.setLastUpdated('0009170000Z')
if mibBuilder.loadTexts: eqAtmMib.setOrganization('')
if mibBuilder.loadTexts: eqAtmMib.setContactInfo('Jas Parmar Equipe Communications 100 Nagog Park Acton MA 01720')
if mibBuilder.loadTexts: eqAtmMib.setDescription('This is the Equipe ATM MIB module.')
class AtmCauseCode(TextualConvention, Integer32):
    description = 'The atm last cause code values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))
    namedValues = NamedValues(("none", 1), ("unallocNumber", 2), ("noRouteToTransitNet", 3), ("noRouteToDest", 4), ("vccUnacceptable30", 5), ("normalCallCleared31", 6), ("userBusy", 7), ("noUserResponse", 8), ("callRejected", 9), ("numberChanged", 10), ("callRejectCLIR", 11), ("destOutOfOrder", 12), ("invalidNumberFormat", 13), ("respToStatusEnquiry", 14), ("normalUnspecified", 15), ("reqVccUnavailable", 16), ("vccFail31", 17), ("rateUnavailable31", 18), ("networkOutOfOrder", 19), ("tempFailure", 20), ("accessInfoDiscarded", 21), ("resourcesUnavailable", 22), ("qosUnavailable", 23), ("rateUnavailable", 24), ("bcapNotAuthorised", 25), ("bcapUnavailable", 26), ("serviceUnavailable", 27), ("bcapNotImplemented", 28), ("combinationUnsupported", 29), ("aalParamsUnsupported31", 30), ("invalidCallReference", 31), ("noChannel", 32), ("destIncompatible", 33), ("invalidEndpointRef", 34), ("invalidTransitNet", 35), ("tooManyAddPartyRequests", 36), ("aalParamsUnsupported30", 37), ("infoELementMissing", 38), ("msgTypeNotImplemented", 39), ("infoElementNotImplemented", 40), ("invalidInfoElement", 41), ("msgNotCompatible", 42), ("timerRecovery", 43), ("invalidMsgLen", 44), ("protocolError", 45), ("opticalElementError", 46), ("noRouteToNextNode", 47), ("dtlNotMyNode", 48))

eqAtmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 2, 1), )
if mibBuilder.loadTexts: eqAtmStatsTable.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsTable.setDescription('This table contains stats for an ATM logical port.')
eqAtmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1), ).setIndexNames((0, "EQUIPE-ATM-MIB", "eqAtmStatsIfIndex"))
if mibBuilder.loadTexts: eqAtmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsEntry.setDescription('An ATM logical port stats entry.')
eqAtmStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsIfIndex.setDescription('The ifIndex for the corresponding atm logical port.')
eqAtmStatsInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsInCells.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsInCells.setDescription('The number of cells received.')
eqAtmStatsInCellsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsInCellsPerSecond.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsInCellsPerSecond.setDescription('The number of cells received per second.')
eqAtmStatsInBitsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsInBitsPerSecond.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsInBitsPerSecond.setDescription('The number of bits received per second.')
eqAtmStatsInCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsInCellsClp0.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsInCellsClp0.setDescription('The number of CLP-0 cells received.')
eqAtmStatsInCellsClp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsInCellsClp1.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsInCellsClp1.setDescription('The number of CLP-1 cells received.')
eqAtmStatsInCellsTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsInCellsTagged.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsInCellsTagged.setDescription('The number of tagged cells received.')
eqAtmStatsInCellsClp0Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsInCellsClp0Discards.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsInCellsClp0Discards.setDescription('The number of CLP-0 cells received and discarded.')
eqAtmStatsInCellsClp1Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsInCellsClp1Discards.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsInCellsClp1Discards.setDescription('The number of CLP-1 cells received and discarded.')
eqAtmStatsInCellsOam = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsInCellsOam.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsInCellsOam.setDescription('The number of OAM cells received.')
eqAtmStatsInCellsClp0Oam = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsInCellsClp0Oam.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsInCellsClp0Oam.setDescription('The number of CLP-0 OAM cells received.')
eqAtmStatsInCellsClp1Oam = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsInCellsClp1Oam.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsInCellsClp1Oam.setDescription('The number of CLP-1 OAM cells received.')
eqAtmStatsInCellsLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsInCellsLoopback.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsInCellsLoopback.setDescription('The number of loopback cells received.')
eqAtmStatsInCellsLoopbackOam = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsInCellsLoopbackOam.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsInCellsLoopbackOam.setDescription('The number of loopback OAM cells received.')
eqAtmStatsOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsOutCells.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsOutCells.setDescription('The number of cells transmitted.')
eqAtmStatsOutCellsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsOutCellsPerSecond.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsOutCellsPerSecond.setDescription('The number of cells transmitted per second.')
eqAtmStatsOutBitsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsOutBitsPerSecond.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsOutBitsPerSecond.setDescription('The number of bits transmitted per second.')
eqAtmStatsOutCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsOutCellsClp0.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsOutCellsClp0.setDescription('The number of CLP-0 cells transmitted.')
eqAtmStatsOutCellsClp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsOutCellsClp1.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsOutCellsClp1.setDescription('The number of CLP-1 cells transmitted.')
eqAtmStatsOutCellsTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsOutCellsTagged.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsOutCellsTagged.setDescription('The number of tagged cells transmitted.')
eqAtmStatsOutCellsClp0Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsOutCellsClp0Discards.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsOutCellsClp0Discards.setDescription('The number of CLP-0 cells discarded due to lack of resources.')
eqAtmStatsOutCellsClp1Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsOutCellsClp1Discards.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsOutCellsClp1Discards.setDescription('The number of CLP-1 cells discarded due to lack of resources.')
eqAtmStatsOutCellsOam = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsOutCellsOam.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsOutCellsOam.setDescription('The number of OAM cells transmitted.')
eqAtmStatsOutCellsClp0Oam = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsOutCellsClp0Oam.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsOutCellsClp0Oam.setDescription('The number of CLP-0 OAM cells transmitted.')
eqAtmStatsOutCellsClp1Oam = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsOutCellsClp1Oam.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsOutCellsClp1Oam.setDescription('The number of CLP-1 OAM cells transmitted.')
eqAtmStatsOutCellsLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsOutCellsLoopback.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsOutCellsLoopback.setDescription('The number of loopback cells transmitted.')
eqAtmStatsOutCellsLoopbackOam = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsOutCellsLoopbackOam.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsOutCellsLoopbackOam.setDescription('The number of loopback OAM cells transmitted.')
eqAtmStatsCLR = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmStatsCLR.setStatus('current')
if mibBuilder.loadTexts: eqAtmStatsCLR.setDescription('The cell loss ratio requirement, expressed as a negative exponent of 10. The default value of 512 indicates any cell loss ratio is acceptable.')
eqAtmSvcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 2, 2), )
if mibBuilder.loadTexts: eqAtmSvcStatsTable.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcStatsTable.setDescription('This table contains svc stats for an ATM logical port.')
eqAtmSvcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1), ).setIndexNames((0, "EQUIPE-ATM-MIB", "eqAtmSvcStatsIfIndex"))
if mibBuilder.loadTexts: eqAtmSvcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcStatsEntry.setDescription('An ATM logical port svc stats entry.')
eqAtmSvcStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcStatsIfIndex.setDescription('The ifIndex for the corresponding atm logical port.')
eqAtmSvcTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcTotal.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcTotal.setDescription("The total number of svc's established on this port.")
eqAtmSvcConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcConnected.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcConnected.setDescription("The number of svc's currently active on this port.")
eqAtmSvcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcFailures.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcFailures.setDescription('The number of svc configuration failures on this port.')
eqAtmSvcInLastCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 5), AtmCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInLastCauseCode.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInLastCauseCode.setDescription('The last cause code received on this port.')
eqAtmSvcInSetupPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInSetupPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInSetupPdus.setDescription("The number of setup pdu's received on this port.")
eqAtmSvcInCallProceeding = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInCallProceeding.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInCallProceeding.setDescription("The number of call proceeding pdu's received on this port.")
eqAtmSvcInPdusConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInPdusConnect.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInPdusConnect.setDescription("The number of connect pdu's received on this port.")
eqAtmSvcInPdusConnectAck = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInPdusConnectAck.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInPdusConnectAck.setDescription("The number of connect ack pdu's received on this port.")
eqAtmSvcInPdusReleaseComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInPdusReleaseComplete.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInPdusReleaseComplete.setDescription("The number of release complete pdu's received on this port.")
eqAtmSvcInPdusAddParty = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInPdusAddParty.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInPdusAddParty.setDescription("The number of add party pdu's received on this port.")
eqAtmSvcInPdusAddPartyAck = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInPdusAddPartyAck.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInPdusAddPartyAck.setDescription("The number of add party ack pdu's received on this port.")
eqAtmSvcInPdusAddPartyReject = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInPdusAddPartyReject.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInPdusAddPartyReject.setDescription("The number of add party reject pdu's received on this port.")
eqAtmSvcInPdusDropParty = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInPdusDropParty.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInPdusDropParty.setDescription("The number of drop party pdu's received on this port.")
eqAtmSvcInPdusDropPartyAck = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInPdusDropPartyAck.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInPdusDropPartyAck.setDescription("The number of drop party ack pdu's received on this port.")
eqAtmSvcInPdusStatusEnquiry = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInPdusStatusEnquiry.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInPdusStatusEnquiry.setDescription("The number of status enquiry pdu's received on this port.")
eqAtmSvcInPdusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInPdusStatus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInPdusStatus.setDescription("The number of status pdu's received on this port.")
eqAtmSvcInPdusRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInPdusRestart.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInPdusRestart.setDescription("The number of restart pdu's received on this port.")
eqAtmSvcInPdusRestartAck = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInPdusRestartAck.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInPdusRestartAck.setDescription("The number of restart ack pdu's received on this port.")
eqAtmSvcInPdusNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInPdusNotify.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInPdusNotify.setDescription("The number of notify pdu's received on this port.")
eqAtmSvcInPdusProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInPdusProgress.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInPdusProgress.setDescription("The number of progress pdu's received on this port.")
eqAtmSvcInPdusAlerting = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInPdusAlerting.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInPdusAlerting.setDescription("The number of alerting pdu's received on this port.")
eqAtmSvcInPdusPartyAlerting = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcInPdusPartyAlerting.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcInPdusPartyAlerting.setDescription("The number of party alerting pdu's received on this port.")
eqAtmSvcOutLastCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 24), AtmCauseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutLastCauseCode.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutLastCauseCode.setDescription('The last cause code transmitted on this port.')
eqAtmSvcOutSetupPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutSetupPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutSetupPdus.setDescription("The number of setup pdu's transmitted on this port.")
eqAtmSvcOutCallProceeding = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutCallProceeding.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutCallProceeding.setDescription("The number of call proceeding pdu's transmitted on this port.")
eqAtmSvcOutPdusConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutPdusConnect.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutPdusConnect.setDescription("The number of connect pdu's transmitted on this port.")
eqAtmSvcOutPdusConnectAck = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutPdusConnectAck.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutPdusConnectAck.setDescription("The number of connect ack pdu's transmitted on this port.")
eqAtmSvcOutPdusReleaseComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutPdusReleaseComplete.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutPdusReleaseComplete.setDescription("The number of release complete pdu's transmitted on this port.")
eqAtmSvcOutPdusAddParty = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutPdusAddParty.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutPdusAddParty.setDescription("The number of add party pdu's transmitted on this port.")
eqAtmSvcOutPdusAddPartyAck = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutPdusAddPartyAck.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutPdusAddPartyAck.setDescription("The number of add party ack pdu's transmitted on this port.")
eqAtmSvcOutPdusAddPartyReject = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutPdusAddPartyReject.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutPdusAddPartyReject.setDescription("The number of add party reject pdu's transmitted on this port.")
eqAtmSvcOutPdusDropParty = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutPdusDropParty.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutPdusDropParty.setDescription("The number of drop party pdu's transmitted on this port.")
eqAtmSvcOutPdusDropPartyAck = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutPdusDropPartyAck.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutPdusDropPartyAck.setDescription("The number of drop party ack pdu's transmitted on this port.")
eqAtmSvcOutPdusStatusEnquiry = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutPdusStatusEnquiry.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutPdusStatusEnquiry.setDescription("The number of status enquiry pdu's transmitted on this port.")
eqAtmSvcOutPdusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutPdusStatus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutPdusStatus.setDescription("The number of status pdu's transmitted on this port.")
eqAtmSvcOutPdusRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutPdusRestart.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutPdusRestart.setDescription("The number of restart pdu's transmitted on this port.")
eqAtmSvcOutPdusRestartAck = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutPdusRestartAck.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutPdusRestartAck.setDescription("The number of restart ack pdu's transmitted on this port.")
eqAtmSvcOutPdusNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutPdusNotify.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutPdusNotify.setDescription("The number of notify pdu's transmitted on this port.")
eqAtmSvcOutPdusProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutPdusProgress.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutPdusProgress.setDescription("The number of progress pdu's transmitted on this port.")
eqAtmSvcOutPdusAlerting = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutPdusAlerting.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutPdusAlerting.setDescription("The number of alerting pdu's transmitted on this port.")
eqAtmSvcOutPdusPartyAlerting = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSvcOutPdusPartyAlerting.setStatus('current')
if mibBuilder.loadTexts: eqAtmSvcOutPdusPartyAlerting.setDescription("The number of party alerting pdu's transmitted on this port.")
eqAtmSaalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 2, 3), )
if mibBuilder.loadTexts: eqAtmSaalStatsTable.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalStatsTable.setDescription('This table contains SAAL stats for an ATM logical port.')
eqAtmSaalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1), ).setIndexNames((0, "EQUIPE-ATM-MIB", "eqAtmSaalStatsIfIndex"))
if mibBuilder.loadTexts: eqAtmSaalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalStatsEntry.setDescription('An ATM logical port SAAL stats entry.')
eqAtmSaalStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalStatsIfIndex.setDescription('The ifIndex for the corresponding atm logical port.')
eqAtmSaalInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInErrors.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInErrors.setDescription('The number of receive errors on this port.')
eqAtmSaalInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInDiscards.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInDiscards.setDescription('The number of discards on this port.')
eqAtmSaalInBeginPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInBeginPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInBeginPdus.setDescription('The number of begin pdus received on this port.')
eqAtmSaalInBeginAckPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInBeginAckPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInBeginAckPdus.setDescription('The number of begin ack pdus received on this port.')
eqAtmSaalInBeginRejectPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInBeginRejectPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInBeginRejectPdus.setDescription('The number of begin reject pdus received on this port.')
eqAtmSaalInEndPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInEndPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInEndPdus.setDescription('The number of end pdus received on this port.')
eqAtmSaalInEndAckPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInEndAckPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInEndAckPdus.setDescription('The number of end ack pdus received on this port.')
eqAtmSaalInResyncPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInResyncPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInResyncPdus.setDescription('The number of resync pdus received on this port.')
eqAtmSaalInResyncAckPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInResyncAckPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInResyncAckPdus.setDescription('The number of resync ack pdus received on this port.')
eqAtmSaalInErrRecoveryPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInErrRecoveryPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInErrRecoveryPdus.setDescription('The number of error recovery pdus received on this port.')
eqAtmSaalInSeqDataPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInSeqDataPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInSeqDataPdus.setDescription('The number of sequence data pdus received on this port.')
eqAtmSaalInPollPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInPollPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInPollPdus.setDescription('The number of poll pdus received on this port.')
eqAtmSaalInStatusPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInStatusPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInStatusPdus.setDescription('The number of status pdus received on this port.')
eqAtmSaalInUnsolicitedStatusPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInUnsolicitedStatusPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInUnsolicitedStatusPdus.setDescription('The number of unsolicited status pdus received on this port.')
eqAtmSaalInUnsolicitedUserPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInUnsolicitedUserPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInUnsolicitedUserPdus.setDescription('The number of unsolicited user pdus received on this port.')
eqAtmSaalInUnnumberedUserPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInUnnumberedUserPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInUnnumberedUserPdus.setDescription('The number of unnumbered pdus received on this port.')
eqAtmSaalInUnnumberedMgmtPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInUnnumberedMgmtPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInUnnumberedMgmtPdus.setDescription('The number of unnumbered mgmt pdus received on this port.')
eqAtmSaalInSignalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalInSignalOctets.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalInSignalOctets.setDescription('The number of signal octets transmitted on this port.')
eqAtmSaalOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutDiscards.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutDiscards.setDescription('The number of begin pdus transmitted on this port.')
eqAtmSaalOutBeginPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutBeginPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutBeginPdus.setDescription('The number of begin pdus transmitted on this port.')
eqAtmSaalOutBeginAckPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutBeginAckPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutBeginAckPdus.setDescription('The number of begin ack pdus transmitted on this port.')
eqAtmSaalOutBeginRejectPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutBeginRejectPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutBeginRejectPdus.setDescription('The number of begin reject pdus transmitted on this port.')
eqAtmSaalOutEndPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutEndPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutEndPdus.setDescription('The number of end pdus transmitted on this port.')
eqAtmSaalOutEndAckPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutEndAckPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutEndAckPdus.setDescription('The number of end ack pdus transmitted on this port.')
eqAtmSaalOutResyncPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutResyncPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutResyncPdus.setDescription('The number of resync pdus transmitted on this port.')
eqAtmSaalOutResyncAckPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutResyncAckPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutResyncAckPdus.setDescription('The number of resync ack pdus transmitted on this port.')
eqAtmSaalOutErrRecoveryPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutErrRecoveryPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutErrRecoveryPdus.setDescription('The number of error recovery pdus transmitted on this port.')
eqAtmSaalOutSeqDataPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutSeqDataPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutSeqDataPdus.setDescription('The number of sequence data pdus transmitted on this port.')
eqAtmSaalOutPollPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutPollPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutPollPdus.setDescription('The number of poll pdus transmitted on this port.')
eqAtmSaalOutStatusPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutStatusPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutStatusPdus.setDescription('The number of status pdus transmitted on this port.')
eqAtmSaalOutUnsolicitedStatusPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutUnsolicitedStatusPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutUnsolicitedStatusPdus.setDescription('The number of unsolicited status pdus transmitted on this port.')
eqAtmSaalOutUnsolicitedUserPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutUnsolicitedUserPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutUnsolicitedUserPdus.setDescription('The number of unsolicited user pdus transmitted on this port.')
eqAtmSaalOutUnnumberedUserPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutUnnumberedUserPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutUnnumberedUserPdus.setDescription('The number of unnumbered pdus transmitted on this port.')
eqAtmSaalOutUnnumberedMgmtPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutUnnumberedMgmtPdus.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutUnnumberedMgmtPdus.setDescription('The number of unnumbered mgmt pdus transmitted on this port.')
eqAtmSaalOutSignalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutSignalOctets.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutSignalOctets.setDescription('The number of signal octets transmitted on this port.')
eqAtmSaalOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmSaalOutWindowSize.setStatus('current')
if mibBuilder.loadTexts: eqAtmSaalOutWindowSize.setDescription('The window size for SAAL on this port.')
eqAtmVcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 2, 4), )
if mibBuilder.loadTexts: eqAtmVcStatsTable.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsTable.setDescription('This table contains stats for an ATM logical port.')
eqAtmVcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1), ).setIndexNames((0, "EQUIPE-ATM-MIB", "eqAtmVcStatsIfIndex"), (0, "EQUIPE-ATM-MIB", "eqAtmVcStatsVpi"), (0, "EQUIPE-ATM-MIB", "eqAtmVcStatsVci"))
if mibBuilder.loadTexts: eqAtmVcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsEntry.setDescription('An ATM logical port stats entry.')
eqAtmVcStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsIfIndex.setDescription('The ifIndex for the corresponding atm logical port.')
eqAtmVcStatsVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsVpi.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsVpi.setDescription('The Virtual Path Identifier.')
eqAtmVcStatsVci = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsVci.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsVci.setDescription('The Virtual Channel Identifier.')
eqAtmVcStatsInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsInCells.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsInCells.setDescription('The number of cells received.')
eqAtmVcStatsInCellsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsInCellsPerSecond.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsInCellsPerSecond.setDescription('The number of cells received per second.')
eqAtmVcStatsInBitsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsInBitsPerSecond.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsInBitsPerSecond.setDescription('The number of bits received per second.')
eqAtmVcStatsInCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsInCellsClp0.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsInCellsClp0.setDescription('The number of CLP-0 cells received.')
eqAtmVcStatsInCellsClp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsInCellsClp1.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsInCellsClp1.setDescription('The number of CLP-1 cells received.')
eqAtmVcStatsInCellsTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsInCellsTagged.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsInCellsTagged.setDescription('The number of tagged cells received.')
eqAtmVcStatsInCellsClp0Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsInCellsClp0Discards.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsInCellsClp0Discards.setDescription('The number of CLP-0 cells received and discarded.')
eqAtmVcStatsInCellsClp1Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsInCellsClp1Discards.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsInCellsClp1Discards.setDescription('The number of CLP-1 cells received and discarded.')
eqAtmVcStatsInCellsOam = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsInCellsOam.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsInCellsOam.setDescription('The number of OAM cells received.')
eqAtmVcStatsInCellsClp0Oam = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsInCellsClp0Oam.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsInCellsClp0Oam.setDescription('The number of CLP-0 OAM cells received.')
eqAtmVcStatsInCellsClp1Oam = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsInCellsClp1Oam.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsInCellsClp1Oam.setDescription('The number of CLP-1 OAM cells received.')
eqAtmVcStatsInCellsLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsInCellsLoopback.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsInCellsLoopback.setDescription('The number of loopback cells received.')
eqAtmVcStatsInCellsLoopbackOam = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsInCellsLoopbackOam.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsInCellsLoopbackOam.setDescription('The number of loopback OAM cells received.')
eqAtmVcStatsOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsOutCells.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsOutCells.setDescription('The number of cells transmitted.')
eqAtmVcStatsOutCellsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsPerSecond.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsPerSecond.setDescription('The number of cells transmitted per second.')
eqAtmVcStatsOutBitsPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsOutBitsPerSecond.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsOutBitsPerSecond.setDescription('The number of bits transmitted per second.')
eqAtmVcStatsOutCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsClp0.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsClp0.setDescription('The number of CLP-0 cells transmitted.')
eqAtmVcStatsOutCellsClp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsClp1.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsClp1.setDescription('The number of CLP-1 cells transmitted.')
eqAtmVcStatsOutCellsTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsTagged.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsTagged.setDescription('The number of tagged cells transmitted.')
eqAtmVcStatsOutCellsClp0Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsClp0Discards.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsClp0Discards.setDescription('The number of CLP-0 cells discarded due to lack of resources.')
eqAtmVcStatsOutCellsClp1Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsClp1Discards.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsClp1Discards.setDescription('The number of CLP-1 cells discarded due to lack of resources.')
eqAtmVcStatsOutCellsOam = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsOam.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsOam.setDescription('The number of OAM cells transmitted.')
eqAtmVcStatsOutCellsClp0Oam = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsClp0Oam.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsClp0Oam.setDescription('The number of CLP-0 OAM cells transmitted.')
eqAtmVcStatsOutCellsClp1Oam = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsClp1Oam.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsClp1Oam.setDescription('The number of CLP-1 OAM cells transmitted.')
eqAtmVcStatsOutCellsLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsLoopback.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsLoopback.setDescription('The number of loopback cells transmitted.')
eqAtmVcStatsOutCellsLoopbackOam = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsLoopbackOam.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsOutCellsLoopbackOam.setDescription('The number of loopback OAM cells transmitted.')
eqAtmVcStatsCLR = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmVcStatsCLR.setStatus('current')
if mibBuilder.loadTexts: eqAtmVcStatsCLR.setDescription('The cell loss ratio requirement, expressed as a negative exponent of 10. The default value of 512 indicates any cell loss ratio is acceptable.')
eqAtmOamPmTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 2, 5), )
if mibBuilder.loadTexts: eqAtmOamPmTable.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmTable.setDescription('This table contains OAM Performance Monitoring stats for an ATM OAM PM Session.')
eqAtmOamPmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1), ).setIndexNames((0, "EQUIPE-ATM-MIB", "eqAtmOamPmIfIndex"), (0, "EQUIPE-ATM-MIB", "eqAtmOamPmVpi"), (0, "EQUIPE-ATM-MIB", "eqAtmOamPmVci"))
if mibBuilder.loadTexts: eqAtmOamPmEntry.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmEntry.setDescription('An ATM logical port stats entry.')
eqAtmOamPmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmIfIndex.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmIfIndex.setDescription('The ifIndex for the corresponding atm logical port.')
eqAtmOamPmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmVpi.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmVpi.setDescription('The Virtual Path Identifier.')
eqAtmOamPmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmVci.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmVci.setDescription('The Virtual Channel Identifier.')
eqAtmOamPmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activating", 1), ("connected", 2), ("failConnect", 3), ("failNoResource", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmStatus.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmStatus.setDescription("Indicates whether the activation process is in the middle of activating, has successfully connected, has failed to connect because the remote end did not respond, or couldn't setup the connection because of lack of local resources.")
eqAtmOamPmSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("contCheck", 1), ("perfMonitoring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmSessionType.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmSessionType.setDescription('Identifies the PM session to perform Continuity Check or Performance Monitoring.')
eqAtmOamPmSinkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sink", 1), ("source", 2), ("bidirectional", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmSinkSource.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmSinkSource.setDescription('Identifies the PM session to be sink, source, or both.')
eqAtmOamPmBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("bytes128", 1), ("bytes256", 2), ("bytes512", 3), ("bytes1K", 4), ("bytes2K", 5), ("bytes4K", 6), ("bytes8K", 7), ("bytes16K", 8), ("bytes32K", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmBlockSize.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmBlockSize.setDescription('The Block Size of User cells transmitted before an OAM PM cell is transmitted.')
eqAtmOamPmEndPt = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segment", 1), ("endToEnd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmEndPt.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmEndPt.setDescription('Identifies the PM Session as either a Segment Endpoint or an End-to-End Point')
eqAtmOamPmFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("f4", 1), ("f5", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmFlow.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmFlow.setDescription('Identifies the Flow as either an F4 (Virtual Path) or F5 (Virtual Channel) flow.')
eqAtmOamPmDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segment", 1), ("endToEnd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmDirection.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmDirection.setDescription('Identifies the direction as either Forward (Egress, toward the outside netword) or Backward (Ingress, toward the switch fabric)')
eqAtmOamPmTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmTimeout.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmTimeout.setDescription('Identifies the Time Period in which to timeout an Activation/DeActivation Cell (in which case another cell may be sent depending on the Retry Count).')
eqAtmOamPmRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmRetryCount.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmRetryCount.setDescription('Number of times to retry Activation in the event of a failure (no response).')
eqAtmOamPmFwdTxUserCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmFwdTxUserCellsClp0.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmFwdTxUserCellsClp0.setDescription('The number of Clp0 cells transmitted.')
eqAtmOamPmFwdTxUserCellsClp01 = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmFwdTxUserCellsClp01.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmFwdTxUserCellsClp01.setDescription('The number of Clp0 plus Clp1 cells transmitted.')
eqAtmOamPmFwdTxLostCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmFwdTxLostCellsClp0.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmFwdTxLostCellsClp0.setDescription('The number of Clp0 cells Lost.')
eqAtmOamPmFwdTxLostCellsClp01 = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmFwdTxLostCellsClp01.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmFwdTxLostCellsClp01.setDescription('The number of Clp0 plus Clp1 cells Lost.')
eqAtmOamPmFwdSECBs = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmFwdSECBs.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmFwdSECBs.setDescription('The number of Severely Errored Cell Blocks.')
eqAtmOamPmBwdTxUserCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmBwdTxUserCellsClp0.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmBwdTxUserCellsClp0.setDescription('The number of Clp0 cells transmitted.')
eqAtmOamPmBwdTxUserCellsClp01 = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmBwdTxUserCellsClp01.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmBwdTxUserCellsClp01.setDescription('The number of Clp0 plus Clp1 cells transmitted.')
eqAtmOamPmBwdTxLostCellsClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmBwdTxLostCellsClp0.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmBwdTxLostCellsClp0.setDescription('The number of Clp0 cells Lost.')
eqAtmOamPmBwdTxLostCellsClp01 = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmBwdTxLostCellsClp01.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmBwdTxLostCellsClp01.setDescription('The number of Clp0 plus Clp1 cells Lost.')
eqAtmOamPmBwdSECBs = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamPmBwdSECBs.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamPmBwdSECBs.setDescription('The number of Severely Errored Cell Blocks.')
eqAtmOamLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 5022, 2, 6), )
if mibBuilder.loadTexts: eqAtmOamLoopbackTable.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackTable.setDescription('This table contains OAM Performance Monitoring stats for an ATM OAM PM Session.')
eqAtmOamLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1), ).setIndexNames((0, "EQUIPE-ATM-MIB", "eqAtmOamLoopbackIfIndex"), (0, "EQUIPE-ATM-MIB", "eqAtmOamLoopbackVpi"), (0, "EQUIPE-ATM-MIB", "eqAtmOamLoopbackVci"))
if mibBuilder.loadTexts: eqAtmOamLoopbackEntry.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackEntry.setDescription('An ATM logical port stats entry.')
eqAtmOamLoopbackIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamLoopbackIfIndex.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackIfIndex.setDescription('The ifIndex for the corresponding atm logical port.')
eqAtmOamLoopbackVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamLoopbackVpi.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackVpi.setDescription('The Virtual Path Identifier.')
eqAtmOamLoopbackVci = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamLoopbackVci.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackVci.setDescription('The Virtual Channel Identifier.')
eqAtmOamLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inProgress", 1), ("completed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackStatus.setDescription('Indicates whether the Loopback request is being worked on or has completed.')
eqAtmOamLoopbackSendCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamLoopbackSendCount.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackSendCount.setDescription('Indicates the number of Loopback Cells to send.')
eqAtmOamLoopbackSendTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("send", 1), ("noAction", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamLoopbackSendTrap.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackSendTrap.setDescription('Indicates whether or not to send an SNMP trap when finished.')
eqAtmOamLoopbackEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segment", 1), ("endToEnd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamLoopbackEndPoint.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackEndPoint.setDescription('Indicates whether the Loopback Cell to be sent is a Segment or End-to-End Point type cell.')
eqAtmOamLoopbackFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("f4", 1), ("f5", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamLoopbackFlow.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackFlow.setDescription('Identifies the Flow as either an F4 (Virtual Path) or F5 (Virtual Channel) flow.')
eqAtmOamLoopbackDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segment", 1), ("endToEnd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamLoopbackDirection.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackDirection.setDescription('Identifies the direction as either Forward (Egress, toward the outside netword) or Backward (Ingress, toward the switch fabric)')
eqAtmOamLoopbackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamLoopbackTimeout.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackTimeout.setDescription('Indicates the Timeout (in seconds) to wait for a Loopback response before sending another (or finishing).')
eqAtmOamLoopbackCellsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamLoopbackCellsReceived.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackCellsReceived.setDescription('Count of the number of Loopback cell responses received succesfully.')
eqAtmOamLoopbackCellsTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamLoopbackCellsTimedOut.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackCellsTimedOut.setDescription('Count of the number of Loopback cell responses not received succesfully.')
eqAtmOamLoopbackAveCellTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamLoopbackAveCellTime.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackAveCellTime.setDescription('Average response time (in milliseconds) for the Loopback Cell.')
eqAtmOamLoopbackMinCellTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamLoopbackMinCellTime.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackMinCellTime.setDescription('Minimum response time (in milliseconds) for the Loopback Cell.')
eqAtmOamLoopbackMaxCellTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamLoopbackMaxCellTime.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackMaxCellTime.setDescription('Maximum response time (in milliseconds) for the Loopback Cell.')
eqAtmOamLoopbackTotalCellTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5022, 2, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqAtmOamLoopbackTotalCellTime.setStatus('current')
if mibBuilder.loadTexts: eqAtmOamLoopbackTotalCellTime.setDescription('Total response time (in milliseconds) for all Loopback Cells of the session.')
mibBuilder.exportSymbols("EQUIPE-ATM-MIB", eqAtmSvcOutPdusReleaseComplete=eqAtmSvcOutPdusReleaseComplete, eqAtmSvcInPdusAddPartyReject=eqAtmSvcInPdusAddPartyReject, eqAtmSvcInPdusStatusEnquiry=eqAtmSvcInPdusStatusEnquiry, eqAtmStatsInCellsClp0Discards=eqAtmStatsInCellsClp0Discards, eqAtmSaalOutUnsolicitedStatusPdus=eqAtmSaalOutUnsolicitedStatusPdus, eqAtmVcStatsVpi=eqAtmVcStatsVpi, eqAtmSvcOutPdusDropParty=eqAtmSvcOutPdusDropParty, eqAtmStatsInCellsLoopback=eqAtmStatsInCellsLoopback, eqAtmSaalInResyncPdus=eqAtmSaalInResyncPdus, eqAtmSaalOutUnnumberedUserPdus=eqAtmSaalOutUnnumberedUserPdus, eqAtmStatsOutCellsClp0Oam=eqAtmStatsOutCellsClp0Oam, eqAtmSvcOutCallProceeding=eqAtmSvcOutCallProceeding, eqAtmStatsOutCellsLoopbackOam=eqAtmStatsOutCellsLoopbackOam, eqAtmOamPmStatus=eqAtmOamPmStatus, eqAtmSvcOutPdusStatusEnquiry=eqAtmSvcOutPdusStatusEnquiry, eqAtmVcStatsInCellsClp0=eqAtmVcStatsInCellsClp0, eqAtmVcStatsOutCellsOam=eqAtmVcStatsOutCellsOam, eqAtmSaalInUnsolicitedUserPdus=eqAtmSaalInUnsolicitedUserPdus, eqAtmOamLoopbackCellsTimedOut=eqAtmOamLoopbackCellsTimedOut, eqAtmStatsInBitsPerSecond=eqAtmStatsInBitsPerSecond, eqAtmSaalInSeqDataPdus=eqAtmSaalInSeqDataPdus, eqAtmSvcInLastCauseCode=eqAtmSvcInLastCauseCode, eqAtmSaalOutStatusPdus=eqAtmSaalOutStatusPdus, eqAtmOamLoopbackAveCellTime=eqAtmOamLoopbackAveCellTime, eqAtmSvcFailures=eqAtmSvcFailures, eqAtmVcStatsInBitsPerSecond=eqAtmVcStatsInBitsPerSecond, eqAtmSaalInErrors=eqAtmSaalInErrors, eqAtmOamLoopbackIfIndex=eqAtmOamLoopbackIfIndex, eqAtmSvcInPdusAlerting=eqAtmSvcInPdusAlerting, eqAtmSaalInBeginPdus=eqAtmSaalInBeginPdus, eqAtmSvcInPdusConnectAck=eqAtmSvcInPdusConnectAck, eqAtmSvcStatsEntry=eqAtmSvcStatsEntry, eqAtmSaalOutErrRecoveryPdus=eqAtmSaalOutErrRecoveryPdus, eqAtmStatsInCellsPerSecond=eqAtmStatsInCellsPerSecond, eqAtmVcStatsTable=eqAtmVcStatsTable, eqAtmSvcOutSetupPdus=eqAtmSvcOutSetupPdus, eqAtmOamPmFwdTxUserCellsClp01=eqAtmOamPmFwdTxUserCellsClp01, eqAtmSaalOutEndPdus=eqAtmSaalOutEndPdus, eqAtmVcStatsInCellsClp0Oam=eqAtmVcStatsInCellsClp0Oam, eqAtmVcStatsCLR=eqAtmVcStatsCLR, eqAtmOamPmFlow=eqAtmOamPmFlow, eqAtmVcStatsInCellsTagged=eqAtmVcStatsInCellsTagged, eqAtmSvcInPdusRestartAck=eqAtmSvcInPdusRestartAck, eqAtmSvcOutPdusAlerting=eqAtmSvcOutPdusAlerting, eqAtmVcStatsOutCellsClp0Discards=eqAtmVcStatsOutCellsClp0Discards, eqAtmSvcStatsIfIndex=eqAtmSvcStatsIfIndex, eqAtmSvcInPdusPartyAlerting=eqAtmSvcInPdusPartyAlerting, eqAtmVcStatsOutCellsClp0=eqAtmVcStatsOutCellsClp0, eqAtmOamLoopbackVpi=eqAtmOamLoopbackVpi, eqAtmStatsOutBitsPerSecond=eqAtmStatsOutBitsPerSecond, eqAtmSaalOutUnsolicitedUserPdus=eqAtmSaalOutUnsolicitedUserPdus, eqAtmSaalInResyncAckPdus=eqAtmSaalInResyncAckPdus, eqAtmSaalOutDiscards=eqAtmSaalOutDiscards, eqAtmSvcInPdusDropPartyAck=eqAtmSvcInPdusDropPartyAck, eqAtmOamPmBlockSize=eqAtmOamPmBlockSize, eqAtmOamLoopbackTotalCellTime=eqAtmOamLoopbackTotalCellTime, eqAtmSaalInErrRecoveryPdus=eqAtmSaalInErrRecoveryPdus, eqAtmVcStatsOutCellsLoopbackOam=eqAtmVcStatsOutCellsLoopbackOam, eqAtmOamPmFwdSECBs=eqAtmOamPmFwdSECBs, eqAtmSaalInBeginRejectPdus=eqAtmSaalInBeginRejectPdus, eqAtmSvcInPdusNotify=eqAtmSvcInPdusNotify, eqAtmStatsOutCellsClp0=eqAtmStatsOutCellsClp0, eqAtmStatsInCellsTagged=eqAtmStatsInCellsTagged, eqAtmSaalInUnnumberedUserPdus=eqAtmSaalInUnnumberedUserPdus, eqAtmOamPmEndPt=eqAtmOamPmEndPt, eqAtmSvcOutPdusRestart=eqAtmSvcOutPdusRestart, eqAtmSaalOutResyncPdus=eqAtmSaalOutResyncPdus, eqAtmSvcStatsTable=eqAtmSvcStatsTable, eqAtmOamLoopbackTable=eqAtmOamLoopbackTable, eqAtmSaalOutEndAckPdus=eqAtmSaalOutEndAckPdus, eqAtmStatsOutCellsLoopback=eqAtmStatsOutCellsLoopback, PYSNMP_MODULE_ID=eqAtmMib, eqAtmVcStatsOutCellsClp1Oam=eqAtmVcStatsOutCellsClp1Oam, eqAtmSvcOutPdusPartyAlerting=eqAtmSvcOutPdusPartyAlerting, eqAtmVcStatsOutCellsTagged=eqAtmVcStatsOutCellsTagged, eqAtmOamPmFwdTxUserCellsClp0=eqAtmOamPmFwdTxUserCellsClp0, eqAtmSvcInSetupPdus=eqAtmSvcInSetupPdus, eqAtmSaalOutUnnumberedMgmtPdus=eqAtmSaalOutUnnumberedMgmtPdus, eqAtmSvcOutPdusRestartAck=eqAtmSvcOutPdusRestartAck, eqAtmVcStatsInCellsPerSecond=eqAtmVcStatsInCellsPerSecond, eqAtmStatsInCellsClp0Oam=eqAtmStatsInCellsClp0Oam, eqAtmVcStatsOutCells=eqAtmVcStatsOutCells, AtmCauseCode=AtmCauseCode, eqAtmSaalInUnsolicitedStatusPdus=eqAtmSaalInUnsolicitedStatusPdus, eqAtmSvcInPdusAddPartyAck=eqAtmSvcInPdusAddPartyAck, eqAtmSaalInBeginAckPdus=eqAtmSaalInBeginAckPdus, eqAtmVcStatsInCellsOam=eqAtmVcStatsInCellsOam, eqAtmOamLoopbackTimeout=eqAtmOamLoopbackTimeout, eqAtmStatsOutCellsClp1=eqAtmStatsOutCellsClp1, eqAtmSvcOutPdusStatus=eqAtmSvcOutPdusStatus, eqAtmOamLoopbackVci=eqAtmOamLoopbackVci, eqAtmSaalInStatusPdus=eqAtmSaalInStatusPdus, eqAtmSvcInPdusAddParty=eqAtmSvcInPdusAddParty, eqAtmSvcInCallProceeding=eqAtmSvcInCallProceeding, eqAtmSvcTotal=eqAtmSvcTotal, eqAtmOamLoopbackSendCount=eqAtmOamLoopbackSendCount, eqAtmStatsEntry=eqAtmStatsEntry, eqAtmOamLoopbackEntry=eqAtmOamLoopbackEntry, eqAtmOamPmSinkSource=eqAtmOamPmSinkSource, eqAtmSaalInEndAckPdus=eqAtmSaalInEndAckPdus, eqAtmOamLoopbackSendTrap=eqAtmOamLoopbackSendTrap, equipe=equipe, eqAtmSvcOutLastCauseCode=eqAtmSvcOutLastCauseCode, eqAtmOamPmBwdTxUserCellsClp0=eqAtmOamPmBwdTxUserCellsClp0, eqAtmOamLoopbackEndPoint=eqAtmOamLoopbackEndPoint, eqAtmVcStatsOutCellsLoopback=eqAtmVcStatsOutCellsLoopback, eqAtmOamPmBwdTxLostCellsClp01=eqAtmOamPmBwdTxLostCellsClp01, eqAtmSvcOutPdusConnectAck=eqAtmSvcOutPdusConnectAck, eqAtmStatsOutCellsClp1Discards=eqAtmStatsOutCellsClp1Discards, eqAtmOamLoopbackStatus=eqAtmOamLoopbackStatus, eqAtmSaalInSignalOctets=eqAtmSaalInSignalOctets, eqAtmOamLoopbackCellsReceived=eqAtmOamLoopbackCellsReceived, eqAtmSaalOutBeginPdus=eqAtmSaalOutBeginPdus, eqAtmVcStatsEntry=eqAtmVcStatsEntry, eqAtmSaalOutBeginRejectPdus=eqAtmSaalOutBeginRejectPdus, eqAtmOamPmFwdTxLostCellsClp01=eqAtmOamPmFwdTxLostCellsClp01, eqAtmSvcOutPdusConnect=eqAtmSvcOutPdusConnect, eqAtmOamLoopbackFlow=eqAtmOamLoopbackFlow, eqAtmStatsTable=eqAtmStatsTable, eqAtmVcStatsInCellsClp1=eqAtmVcStatsInCellsClp1, eqAtmSvcInPdusDropParty=eqAtmSvcInPdusDropParty, eqAtmVcStatsInCellsClp0Discards=eqAtmVcStatsInCellsClp0Discards, eqAtmStatsInCellsClp0=eqAtmStatsInCellsClp0, eqAtmStatsOutCellsPerSecond=eqAtmStatsOutCellsPerSecond, eqAtmSaalOutBeginAckPdus=eqAtmSaalOutBeginAckPdus, eqAtmSvcInPdusConnect=eqAtmSvcInPdusConnect, eqAtmStatsIfIndex=eqAtmStatsIfIndex, eqAtmSaalOutResyncAckPdus=eqAtmSaalOutResyncAckPdus, eqAtmStatsInCellsOam=eqAtmStatsInCellsOam, eqAtmOamLoopbackDirection=eqAtmOamLoopbackDirection, eqAtmSvcInPdusStatus=eqAtmSvcInPdusStatus, eqAtmSaalInPollPdus=eqAtmSaalInPollPdus, eqAtmVcStatsVci=eqAtmVcStatsVci, eqAtmOamPmRetryCount=eqAtmOamPmRetryCount, eqAtmOamPmFwdTxLostCellsClp0=eqAtmOamPmFwdTxLostCellsClp0, eqAtmOamPmEntry=eqAtmOamPmEntry, eqAtmSvcInPdusRestart=eqAtmSvcInPdusRestart, eqAtmSvcOutPdusAddParty=eqAtmSvcOutPdusAddParty, eqAtmStatsOutCellsTagged=eqAtmStatsOutCellsTagged, eqAtmOamPmBwdTxUserCellsClp01=eqAtmOamPmBwdTxUserCellsClp01, eqAtmSaalStatsTable=eqAtmSaalStatsTable, eqAtmSaalStatsEntry=eqAtmSaalStatsEntry, eqAtmStatsInCellsClp1=eqAtmStatsInCellsClp1, eqAtmSaalInEndPdus=eqAtmSaalInEndPdus, eqAtmOamPmBwdTxLostCellsClp0=eqAtmOamPmBwdTxLostCellsClp0, eqAtmOamPmTimeout=eqAtmOamPmTimeout, eqAtmVcStatsInCells=eqAtmVcStatsInCells, eqAtmVcStatsOutBitsPerSecond=eqAtmVcStatsOutBitsPerSecond, eqAtmOamPmIfIndex=eqAtmOamPmIfIndex, eqAtmOamPmVpi=eqAtmOamPmVpi, eqAtmOamPmDirection=eqAtmOamPmDirection, eqAtmSvcOutPdusNotify=eqAtmSvcOutPdusNotify, eqAtmVcStatsInCellsLoopback=eqAtmVcStatsInCellsLoopback, eqAtmVcStatsInCellsClp1Oam=eqAtmVcStatsInCellsClp1Oam, eqAtmStatsOutCellsClp0Discards=eqAtmStatsOutCellsClp0Discards, eqAtmStatsOutCellsClp1Oam=eqAtmStatsOutCellsClp1Oam, eqAtmSaalOutSignalOctets=eqAtmSaalOutSignalOctets, eqAtmOamPmBwdSECBs=eqAtmOamPmBwdSECBs, eqAtmOamPmSessionType=eqAtmOamPmSessionType, eqAtmSaalOutPollPdus=eqAtmSaalOutPollPdus, eqAtmSaalInDiscards=eqAtmSaalInDiscards, eqAtmSaalOutWindowSize=eqAtmSaalOutWindowSize, eqAtmVcStatsOutCellsClp1=eqAtmVcStatsOutCellsClp1, eqAtmOamLoopbackMinCellTime=eqAtmOamLoopbackMinCellTime, eqAtmStatsInCellsLoopbackOam=eqAtmStatsInCellsLoopbackOam, eqAtmSvcOutPdusDropPartyAck=eqAtmSvcOutPdusDropPartyAck, eqAtmOamLoopbackMaxCellTime=eqAtmOamLoopbackMaxCellTime, eqAtmOamPmVci=eqAtmOamPmVci, eqAtmSvcInPdusReleaseComplete=eqAtmSvcInPdusReleaseComplete, eqAtmVcStatsOutCellsPerSecond=eqAtmVcStatsOutCellsPerSecond, eqAtmVcStatsInCellsClp1Discards=eqAtmVcStatsInCellsClp1Discards, eqAtmVcStatsIfIndex=eqAtmVcStatsIfIndex, eqAtmVcStatsOutCellsClp0Oam=eqAtmVcStatsOutCellsClp0Oam, eqAtmStatsInCellsClp1Discards=eqAtmStatsInCellsClp1Discards, eqAtmVcStatsInCellsLoopbackOam=eqAtmVcStatsInCellsLoopbackOam, eqAtmSvcConnected=eqAtmSvcConnected, eqAtmVcStatsOutCellsClp1Discards=eqAtmVcStatsOutCellsClp1Discards, eqAtmSaalStatsIfIndex=eqAtmSaalStatsIfIndex, eqAtmOamPmTable=eqAtmOamPmTable, eqAtmSvcInPdusProgress=eqAtmSvcInPdusProgress, eqAtmStatsInCells=eqAtmStatsInCells, eqAtmMib=eqAtmMib, eqAtmSvcOutPdusProgress=eqAtmSvcOutPdusProgress, eqAtmSvcOutPdusAddPartyReject=eqAtmSvcOutPdusAddPartyReject, eqAtmStatsOutCells=eqAtmStatsOutCells, eqAtmStatsOutCellsOam=eqAtmStatsOutCellsOam, eqAtmSaalInUnnumberedMgmtPdus=eqAtmSaalInUnnumberedMgmtPdus, eqAtmSaalOutSeqDataPdus=eqAtmSaalOutSeqDataPdus, eqAtmSvcOutPdusAddPartyAck=eqAtmSvcOutPdusAddPartyAck, eqAtmStatsCLR=eqAtmStatsCLR, eqAtmStatsInCellsClp1Oam=eqAtmStatsInCellsClp1Oam)
