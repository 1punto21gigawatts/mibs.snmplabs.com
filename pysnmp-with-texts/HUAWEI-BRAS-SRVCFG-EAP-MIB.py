#
# PySNMP MIB module HUAWEI-BRAS-SRVCFG-EAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-BRAS-SRVCFG-EAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:43:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
hwBRASMib, = mibBuilder.importSymbols("HUAWEI-MIB", "hwBRASMib")
ifDescr, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanId, VlanIdOrNone = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId", "VlanIdOrNone")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, ObjectIdentity, NotificationType, MibIdentifier, Bits, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Counter32, iso, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "NotificationType", "MibIdentifier", "Bits", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Counter32", "iso", "Unsigned32", "Integer32")
TextualConvention, DisplayString, TruthValue, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowStatus", "MacAddress")
hwBRASSrvcfgEap = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4))
if mibBuilder.loadTexts: hwBRASSrvcfgEap.setLastUpdated('200912151800Z')
if mibBuilder.loadTexts: hwBRASSrvcfgEap.setOrganization('Huawei Technologies Co., Ltd.')
if mibBuilder.loadTexts: hwBRASSrvcfgEap.setContactInfo(' NanJing Institute,Huawei Technologies Co.,Ltd. HuiHong Mansion,No.91 BaiXia Rd. NanJing, P.R. of China Zipcode:210001 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwBRASSrvcfgEap.setDescription('The MIB contains objects of module SRVCFG.')
hwSrvcfgEapMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1))
hwDot1xSystemConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 1), )
if mibBuilder.loadTexts: hwDot1xSystemConfigTable.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSystemConfigTable.setDescription('The table describes 802.1x configuration information of template.')
hwDot1xSystemConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 1, 1), ).setIndexNames((0, "HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xTemplateIndex"))
if mibBuilder.loadTexts: hwDot1xSystemConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSystemConfigEntry.setDescription('Description.')
hwDot1xTemplateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xTemplateIndex.setStatus('current')
if mibBuilder.loadTexts: hwDot1xTemplateIndex.setDescription('802.1x template index.')
hwDot1xHandshakeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xHandshakeSwitch.setStatus('current')
if mibBuilder.loadTexts: hwDot1xHandshakeSwitch.setDescription('Handshake switch.')
hwDot1xHandshakeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xHandshakeCount.setStatus('current')
if mibBuilder.loadTexts: hwDot1xHandshakeCount.setDescription('Max handshake times.')
hwDot1xHandshakeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xHandshakeInterval.setStatus('current')
if mibBuilder.loadTexts: hwDot1xHandshakeInterval.setDescription('Handshake interval.')
hwDot1xIfEAPEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xIfEAPEnd.setStatus('current')
if mibBuilder.loadTexts: hwDot1xIfEAPEnd.setDescription('Whether to end the eap packet.')
hwDot1xEAPEndPapChap = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pap", 0), ("chap", 1))).clone('chap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xEAPEndPapChap.setStatus('current')
if mibBuilder.loadTexts: hwDot1xEAPEndPapChap.setDescription('Type of eap end.')
hwDot1xIfSendEAPSIMParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xIfSendEAPSIMParameter.setStatus('current')
if mibBuilder.loadTexts: hwDot1xIfSendEAPSIMParameter.setDescription('Whether to send parameter of eap-sim.')
hwDot1xRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDot1xRowStatus.setDescription(' ')
hwDot1xAuthenticationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xAuthenticationTimeout.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAuthenticationTimeout.setDescription('Timeout time of authentication.')
hwDot1xRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xRequestCount.setStatus('current')
if mibBuilder.loadTexts: hwDot1xRequestCount.setDescription('Max number of re-transmission events.')
hwDot1xRequestInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xRequestInterval.setStatus('current')
if mibBuilder.loadTexts: hwDot1xRequestInterval.setDescription('Timeout time of waiting for the response of a request message.')
hwDot1xReauthenticationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xReauthenticationTimeout.setStatus('current')
if mibBuilder.loadTexts: hwDot1xReauthenticationTimeout.setDescription('Re-authentication interval in seconds.')
hwDot1xGlobal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xGlobal.setStatus('current')
if mibBuilder.loadTexts: hwDot1xGlobal.setDescription('The Global 802.1x configuration. Enable this before you want to enable other interfaces 802.1x authentication.')
hwDot1xAuthenMethod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("chap", 1), ("pap", 2), ("eap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xAuthenMethod.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAuthenMethod.setDescription('Specify system authentication method.')
hwDot1xDhcpTrigger = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xDhcpTrigger.setStatus('current')
if mibBuilder.loadTexts: hwDot1xDhcpTrigger.setDescription('Trigger system authentication when receiving DHCP packet(s).')
hwDot1xHandshake = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 5), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xHandshake.setStatus('current')
if mibBuilder.loadTexts: hwDot1xHandshake.setDescription('Shake hand of 802.1x.')
hwDot1xQuietPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: hwDot1xQuietPeriod.setDescription('Enable quiet period function.')
hwDot1xRetry = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xRetry.setStatus('current')
if mibBuilder.loadTexts: hwDot1xRetry.setDescription('Specify maximal request times.')
hwDot1xTimerHandshakePeriod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xTimerHandshakePeriod.setStatus('current')
if mibBuilder.loadTexts: hwDot1xTimerHandshakePeriod.setDescription('Value of handshake interval with 802.1x supplicant.')
hwDot1xTimerQuietPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xTimerQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: hwDot1xTimerQuietPeriod.setDescription('Interval following failed authentication.')
hwDot1xTimerServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xTimerServerTimeout.setStatus('current')
if mibBuilder.loadTexts: hwDot1xTimerServerTimeout.setDescription('Value of server timeout.')
hwDot1xTimerClientTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xTimerClientTimeout.setStatus('current')
if mibBuilder.loadTexts: hwDot1xTimerClientTimeout.setDescription('Value of Client timeout.')
hwDot1xTimerTxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xTimerTxPeriod.setStatus('current')
if mibBuilder.loadTexts: hwDot1xTimerTxPeriod.setDescription('Interval between identity requests.')
hwDot1xReauthenPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 7200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xReauthenPeriod.setStatus('current')
if mibBuilder.loadTexts: hwDot1xReauthenPeriod.setDescription('Reauthenticate period.')
hwDot1xPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 14), )
if mibBuilder.loadTexts: hwDot1xPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: hwDot1xPortConfigTable.setDescription('The table describes 802.1x configuration information of template.')
hwDot1xPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 14, 1), ).setIndexNames((0, "HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xPortIndex"))
if mibBuilder.loadTexts: hwDot1xPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hwDot1xPortConfigEntry.setDescription('An entry in the 802.1x configuration table.')
hwDot1xPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1280)))
if mibBuilder.loadTexts: hwDot1xPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwDot1xPortIndex.setDescription('The Index of L2-Switch Interface.')
hwDot1xPortSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 14, 1, 2), EnabledStatus().clone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xPortSwitch.setStatus('current')
if mibBuilder.loadTexts: hwDot1xPortSwitch.setDescription('Whether to enable 802.1x on this interface.')
hwDot1xPortGuestVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 14, 1, 3), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xPortGuestVlan.setStatus('current')
if mibBuilder.loadTexts: hwDot1xPortGuestVlan.setDescription('Specify guest vlan configuration information for ports.')
hwDot1xPortMaxUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192)).clone(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xPortMaxUser.setStatus('current')
if mibBuilder.loadTexts: hwDot1xPortMaxUser.setDescription('Specify maximal on-line user number per port.')
hwDot1xPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("authorizedForce", 2), ("unauthorizedForce", 3))).clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xPortControl.setStatus('current')
if mibBuilder.loadTexts: hwDot1xPortControl.setDescription('Specify port authenticated status.')
hwDot1xPortMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac", 1), ("port", 2))).clone('mac')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xPortMethod.setStatus('current')
if mibBuilder.loadTexts: hwDot1xPortMethod.setDescription('Specify port controlled method.')
hwDot1xPortReauthen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 14, 1, 7), EnabledStatus().clone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xPortReauthen.setStatus('current')
if mibBuilder.loadTexts: hwDot1xPortReauthen.setDescription('Enable periodic reauthentication of the client.')
hwDot1xMacByPass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 14, 1, 8), EnabledStatus().clone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xMacByPass.setStatus('current')
if mibBuilder.loadTexts: hwDot1xMacByPass.setDescription('Enable dot1x-macbypass function.')
hwDot1xModemVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 14, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xModemVersion.setStatus('current')
if mibBuilder.loadTexts: hwDot1xModemVersion.setDescription('Specify version of modem at this port.')
hwDot1xForceDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 14, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xForceDomain.setStatus('current')
if mibBuilder.loadTexts: hwDot1xForceDomain.setDescription(' ')
hwDot1xAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 14, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xAuthStatus.setStatus('current')
if mibBuilder.loadTexts: hwDot1xAuthStatus.setDescription('authenticate status.')
hwDot1xPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 14, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDot1xPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDot1xPortRowStatus.setDescription(' ')
hwDot1xQuietFailTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDot1xQuietFailTimes.setStatus('current')
if mibBuilder.loadTexts: hwDot1xQuietFailTimes.setDescription('Failure times before adding to the quiet table.')
hwDot1xSessionDisplayByPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 16), )
if mibBuilder.loadTexts: hwDot1xSessionDisplayByPortTable.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessionDisplayByPortTable.setDescription('The table displays the infomations of the online users according to the port.')
hwDot1xSessionDisplayByPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 16, 1), ).setIndexNames((0, "HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xSessDispByPortIndex"), (0, "HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xSessDispByPortUserIndex"))
if mibBuilder.loadTexts: hwDot1xSessionDisplayByPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessionDisplayByPortEntry.setDescription('An entry in the port display table.')
hwDot1xSessDispByPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1280)))
if mibBuilder.loadTexts: hwDot1xSessDispByPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByPortIndex.setDescription('The Index of port Interface.')
hwDot1xSessDispByPortUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 49151)))
if mibBuilder.loadTexts: hwDot1xSessDispByPortUserIndex.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByPortUserIndex.setDescription('The Index of User.')
hwDot1xSessDispByPortIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByPortIfName.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByPortIfName.setDescription('The interface name of the online user.')
hwDot1xSessDispByPortUserMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 16, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByPortUserMac.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByPortUserMac.setDescription('The mac of the user online.')
hwDot1xSessDispByPortUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 16, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByPortUserState.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByPortUserState.setDescription('The authenticate status of the user online.')
hwDot1xSessDispByPortUserVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByPortUserVlanId.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByPortUserVlanId.setDescription('The vlan Id of the user.')
hwDot1xSessDispByPortUserQinqId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByPortUserQinqId.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByPortUserQinqId.setDescription('The Qinq Id of the user.')
hwDot1xSessDispByPortTemplateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByPortTemplateIndex.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByPortTemplateIndex.setDescription('The Template Index of the user using.')
hwDot1xSessDispByPortHandShakeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 16, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByPortHandShakeSwitch.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByPortHandShakeSwitch.setDescription('The HandShake Switch of the user online.')
hwDot1xSessDispByPortReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 16, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByPortReauth.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByPortReauth.setDescription('The Reauthenticate status of the user online.')
hwDot1xSessionDisplayBySlotTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 17), )
if mibBuilder.loadTexts: hwDot1xSessionDisplayBySlotTable.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessionDisplayBySlotTable.setDescription('The table displays the infomations of the online users according to the Slot.')
hwDot1xSessionDisplayBySlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 17, 1), ).setIndexNames((0, "HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xSessDispBySlotIndex"), (0, "HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xSessDispBySlotUserIndex"))
if mibBuilder.loadTexts: hwDot1xSessionDisplayBySlotEntry.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessionDisplayBySlotEntry.setDescription('An entry in the Slot display table.')
hwDot1xSessDispBySlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1280)))
if mibBuilder.loadTexts: hwDot1xSessDispBySlotIndex.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispBySlotIndex.setDescription('The Index of Slot.')
hwDot1xSessDispBySlotUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 49151)))
if mibBuilder.loadTexts: hwDot1xSessDispBySlotUserIndex.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispBySlotUserIndex.setDescription('The Index of user.')
hwDot1xSessDispBySlotIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 17, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispBySlotIfName.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispBySlotIfName.setDescription('The interface name of the online user.')
hwDot1xSessDispBySlotUserMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 17, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispBySlotUserMac.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispBySlotUserMac.setDescription('The mac of the user online.')
hwDot1xSessDispBySlotUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 17, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispBySlotUserState.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispBySlotUserState.setDescription('The authenticate status of the user online.')
hwDot1xSessDispBySlotUserVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispBySlotUserVlanId.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispBySlotUserVlanId.setDescription('The vlan Id of the user.')
hwDot1xSessDispBySlotUserQinqId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 17, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispBySlotUserQinqId.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispBySlotUserQinqId.setDescription('The Qinq Id of the user.')
hwDot1xSessDispBySlotTemplateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 17, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispBySlotTemplateIndex.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispBySlotTemplateIndex.setDescription('The Template Index of the user using.')
hwDot1xSessDispBySlotHandShakeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 17, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispBySlotHandShakeSwitch.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispBySlotHandShakeSwitch.setDescription('The HandShake Switch of the user online.')
hwDot1xSessDispBySlotReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 17, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispBySlotReauth.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispBySlotReauth.setDescription('The Reauthenticate status of the user online.')
hwDot1xSessionDisplayByMacTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 18), )
if mibBuilder.loadTexts: hwDot1xSessionDisplayByMacTable.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessionDisplayByMacTable.setDescription('The table displays the infomations of the online users according to the Mac.')
hwDot1xSessionDisplayByMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 18, 1), ).setIndexNames((0, "HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xSessDispByMacUserMac"))
if mibBuilder.loadTexts: hwDot1xSessionDisplayByMacEntry.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessionDisplayByMacEntry.setDescription('An entry in the Mac display table.')
hwDot1xSessDispByMacUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 49151))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByMacUserIndex.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByMacUserIndex.setDescription('The index of the user.')
hwDot1xSessDispByMacIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 18, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByMacIfName.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByMacIfName.setDescription('The interface name of the online user.')
hwDot1xSessDispByMacUserMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 18, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByMacUserMac.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByMacUserMac.setDescription('The mac of the user online.')
hwDot1xSessDispByMacUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 18, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByMacUserState.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByMacUserState.setDescription('The authenticate status of the user online.')
hwDot1xSessDispByMacUserVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByMacUserVlanId.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByMacUserVlanId.setDescription('The vlan Id of the user.')
hwDot1xSessDispByMacUserQinqId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByMacUserQinqId.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByMacUserQinqId.setDescription('The Qinq Id of the user.')
hwDot1xSessDispByMacTemplateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByMacTemplateIndex.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByMacTemplateIndex.setDescription('The Template Index of the user using.')
hwDot1xSessDispByMacHandShakeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 18, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByMacHandShakeSwitch.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByMacHandShakeSwitch.setDescription('The HandShake Switch of the user online.')
hwDot1xSessDispByMacReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 18, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDot1xSessDispByMacReauth.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSessDispByMacReauth.setDescription('The Reauthenticate status of the user online.')
hwPacketStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 19), )
if mibBuilder.loadTexts: hwPacketStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwPacketStatisticsTable.setDescription('The table displays the packet statistics of the Slot.')
hwPacketStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 19, 1), ).setIndexNames((0, "HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwSlotIndex"))
if mibBuilder.loadTexts: hwPacketStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwPacketStatisticsEntry.setDescription('An entry in the table of packet statistics display .')
hwSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotIndex.setStatus('current')
if mibBuilder.loadTexts: hwSlotIndex.setDescription('Slot number')
hwEapReqID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEapReqID.setStatus('current')
if mibBuilder.loadTexts: hwEapReqID.setDescription('EAP_REQ/ID')
hwEapRespID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEapRespID.setStatus('current')
if mibBuilder.loadTexts: hwEapRespID.setDescription('EAP_RESP/ID')
hwEapReqChallenge = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEapReqChallenge.setStatus('current')
if mibBuilder.loadTexts: hwEapReqChallenge.setDescription('EAP_REQ/CHALLENGE')
hwEapRespChallenge = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEapRespChallenge.setStatus('current')
if mibBuilder.loadTexts: hwEapRespChallenge.setDescription('EAP_RESP/CHALLENGE')
hwEapSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 19, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEapSuccess.setStatus('current')
if mibBuilder.loadTexts: hwEapSuccess.setDescription('EAP_SUCCESS')
hwEapFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEapFailure.setStatus('current')
if mibBuilder.loadTexts: hwEapFailure.setDescription('EAP_FAILURE')
hwEapStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 19, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEapStart.setStatus('current')
if mibBuilder.loadTexts: hwEapStart.setDescription('EAP_START')
hwEapLogOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 19, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEapLogOff.setStatus('current')
if mibBuilder.loadTexts: hwEapLogOff.setDescription('EAP_LOGOFF')
hwEapKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 1, 19, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEapKey.setStatus('current')
if mibBuilder.loadTexts: hwEapKey.setDescription('EAP_KEY')
hwSrvcfgEapMibTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 2))
hwSrvcfgEapMaxUserAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 2, 1)).setObjects(("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hwSrvcfgEapMaxUserAlarm.setStatus('current')
if mibBuilder.loadTexts: hwSrvcfgEapMaxUserAlarm.setDescription('The number of ahthenticate users is reached the max number. ')
hwSrvcfgEapMibUserLimitTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 3))
hwEapTrapOid = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 3, 1))
hwEapUserPortMaxNumThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 3, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEapUserPortMaxNumThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEapUserPortMaxNumThreshold.setDescription('hwEapUserPortMaxNumThreshold')
hwEapUserPortMaxNumThresholdResume = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 3, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEapUserPortMaxNumThresholdResume.setStatus('current')
if mibBuilder.loadTexts: hwEapUserPortMaxNumThresholdResume.setDescription('hwEapUserPortMaxNumThresholdResume')
hwEapUserSlot = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 3, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEapUserSlot.setStatus('current')
if mibBuilder.loadTexts: hwEapUserSlot.setDescription('Slot')
hwEapUserSlotMaxNumThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 3, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEapUserSlotMaxNumThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEapUserSlotMaxNumThreshold.setDescription('hwEapUserSlotMaxNumThreshold')
hwEapUserTotalMaxNumThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 3, 1, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwEapUserTotalMaxNumThreshold.setStatus('current')
if mibBuilder.loadTexts: hwEapUserTotalMaxNumThreshold.setDescription('hwEapUserTotalMaxNumThreshold')
hwEapTrapsDefine = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 3, 2))
hwEapTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 3, 2, 0))
hwEapUserPortMaxNum = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 3, 2, 0, 1)).setObjects(("IF-MIB", "ifDescr"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwEapUserPortMaxNumThreshold"))
if mibBuilder.loadTexts: hwEapUserPortMaxNum.setStatus('current')
if mibBuilder.loadTexts: hwEapUserPortMaxNum.setDescription(' 1 Notice/Trap name: Reach the eap port user threshold 2 Notice/Trap generation cause: the number of the online eap user in this port reaches the threshold ')
hwEapUserPortMaxNumResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 3, 2, 0, 2)).setObjects(("IF-MIB", "ifDescr"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwEapUserPortMaxNumThresholdResume"))
if mibBuilder.loadTexts: hwEapUserPortMaxNumResume.setStatus('current')
if mibBuilder.loadTexts: hwEapUserPortMaxNumResume.setDescription(' 1 Notice/Trap name: under the eap port user threshold 2 Notice/Trap generation cause: the number of the online eap user in this port is under the threshold ')
hwEapUserSlotMaxNum = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 3, 2, 0, 3)).setObjects(("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwEapUserSlot"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwEapUserSlotMaxNumThreshold"))
if mibBuilder.loadTexts: hwEapUserSlotMaxNum.setStatus('current')
if mibBuilder.loadTexts: hwEapUserSlotMaxNum.setDescription(' 1 Notice/Trap name: Reach the eap slot user threshold 2 Notice/Trap generation cause: the number of the online eap user in this slot reaches the threshold ')
hwEapUserTotalMaxNum = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 3, 2, 0, 4)).setObjects(("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwEapUserTotalMaxNumThreshold"))
if mibBuilder.loadTexts: hwEapUserTotalMaxNum.setStatus('current')
if mibBuilder.loadTexts: hwEapUserTotalMaxNum.setDescription(' 1 Notice/Trap name: Reach the eap total user threshold 2 Notice/Trap generation cause: the number of the online eap user in this device reaches the threshold ')
hwSrvcfgEapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 4))
hwSrvcfgEapCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 4, 1))
hwSrvcfgEapCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 4, 1, 1)).setObjects(("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xSystemConfigGroup"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xPortConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSrvcfgEapCompliance = hwSrvcfgEapCompliance.setStatus('current')
if mibBuilder.loadTexts: hwSrvcfgEapCompliance.setDescription('The compliance statement for systems supporting the this module.')
hwDot1xSystemConfigGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 4, 2))
hwDot1xSystemConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 4, 2, 1)).setObjects(("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xTemplateIndex"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xHandshakeSwitch"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xHandshakeCount"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xHandshakeInterval"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xIfEAPEnd"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xEAPEndPapChap"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xIfSendEAPSIMParameter"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDot1xSystemConfigGroup = hwDot1xSystemConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hwDot1xSystemConfigGroup.setDescription('The Dot1x System Config group.')
hwDot1xPortConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 4, 2, 2)).setObjects(("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xGlobal"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xAuthenMethod"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xDhcpTrigger"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xHandshake"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xQuietPeriod"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xRetry"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xTimerHandshakePeriod"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xTimerQuietPeriod"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xTimerServerTimeout"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xTimerClientTimeout"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xTimerTxPeriod"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xReauthenPeriod"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xPortSwitch"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xPortGuestVlan"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xPortMaxUser"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xPortControl"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xPortMethod"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xPortReauthen"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xMacByPass"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xModemVersion"), ("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwDot1xQuietFailTimes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDot1xPortConfigGroup = hwDot1xPortConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hwDot1xPortConfigGroup.setDescription('The Dot1x Port Config group.')
hwDot1xPortTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 40, 4, 4, 2, 3)).setObjects(("HUAWEI-BRAS-SRVCFG-EAP-MIB", "hwSrvcfgEapMaxUserAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDot1xPortTrapGroup = hwDot1xPortTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwDot1xPortTrapGroup.setDescription("The Dot1x's Notification group.")
mibBuilder.exportSymbols("HUAWEI-BRAS-SRVCFG-EAP-MIB", hwDot1xSystemConfigGroup=hwDot1xSystemConfigGroup, hwDot1xSystemConfigGroups=hwDot1xSystemConfigGroups, hwDot1xSessDispBySlotTemplateIndex=hwDot1xSessDispBySlotTemplateIndex, hwDot1xSessDispByMacReauth=hwDot1xSessDispByMacReauth, hwDot1xRequestCount=hwDot1xRequestCount, hwDot1xQuietFailTimes=hwDot1xQuietFailTimes, hwDot1xTimerHandshakePeriod=hwDot1xTimerHandshakePeriod, hwDot1xSessDispByMacUserVlanId=hwDot1xSessDispByMacUserVlanId, hwDot1xSessDispByMacTemplateIndex=hwDot1xSessDispByMacTemplateIndex, hwEapTrapsDefine=hwEapTrapsDefine, hwDot1xSessDispByPortTemplateIndex=hwDot1xSessDispByPortTemplateIndex, hwSrvcfgEapMaxUserAlarm=hwSrvcfgEapMaxUserAlarm, hwDot1xSystemConfigTable=hwDot1xSystemConfigTable, hwDot1xRequestInterval=hwDot1xRequestInterval, hwDot1xSessDispByPortUserIndex=hwDot1xSessDispByPortUserIndex, hwDot1xForceDomain=hwDot1xForceDomain, hwDot1xEAPEndPapChap=hwDot1xEAPEndPapChap, hwDot1xSessDispByMacUserState=hwDot1xSessDispByMacUserState, hwEapUserPortMaxNumThresholdResume=hwEapUserPortMaxNumThresholdResume, hwEapUserSlotMaxNumThreshold=hwEapUserSlotMaxNumThreshold, hwEapKey=hwEapKey, hwBRASSrvcfgEap=hwBRASSrvcfgEap, hwDot1xHandshake=hwDot1xHandshake, hwDot1xAuthenticationTimeout=hwDot1xAuthenticationTimeout, PYSNMP_MODULE_ID=hwBRASSrvcfgEap, hwEapRespID=hwEapRespID, hwEapUserSlotMaxNum=hwEapUserSlotMaxNum, hwDot1xRowStatus=hwDot1xRowStatus, hwDot1xSessDispByPortIndex=hwDot1xSessDispByPortIndex, hwDot1xSessDispBySlotUserMac=hwDot1xSessDispBySlotUserMac, hwDot1xDhcpTrigger=hwDot1xDhcpTrigger, hwPacketStatisticsEntry=hwPacketStatisticsEntry, hwEapUserSlot=hwEapUserSlot, hwDot1xTimerClientTimeout=hwDot1xTimerClientTimeout, hwDot1xTimerTxPeriod=hwDot1xTimerTxPeriod, hwSrvcfgEapConformance=hwSrvcfgEapConformance, hwDot1xSessionDisplayByMacEntry=hwDot1xSessionDisplayByMacEntry, hwDot1xGlobal=hwDot1xGlobal, hwEapUserPortMaxNumResume=hwEapUserPortMaxNumResume, hwEapRespChallenge=hwEapRespChallenge, hwSrvcfgEapMibUserLimitTraps=hwSrvcfgEapMibUserLimitTraps, hwDot1xPortIndex=hwDot1xPortIndex, hwDot1xHandshakeSwitch=hwDot1xHandshakeSwitch, hwEapUserPortMaxNum=hwEapUserPortMaxNum, hwDot1xPortRowStatus=hwDot1xPortRowStatus, hwEapStart=hwEapStart, hwSlotIndex=hwSlotIndex, hwDot1xSessionDisplayByMacTable=hwDot1xSessionDisplayByMacTable, hwDot1xReauthenticationTimeout=hwDot1xReauthenticationTimeout, hwEapUserTotalMaxNumThreshold=hwEapUserTotalMaxNumThreshold, hwDot1xPortConfigTable=hwDot1xPortConfigTable, hwDot1xSessDispByPortReauth=hwDot1xSessDispByPortReauth, hwSrvcfgEapMibObjects=hwSrvcfgEapMibObjects, hwDot1xSessDispBySlotUserQinqId=hwDot1xSessDispBySlotUserQinqId, hwEapReqID=hwEapReqID, hwSrvcfgEapCompliance=hwSrvcfgEapCompliance, hwDot1xIfEAPEnd=hwDot1xIfEAPEnd, hwDot1xPortControl=hwDot1xPortControl, hwDot1xAuthStatus=hwDot1xAuthStatus, hwDot1xSessDispBySlotIfName=hwDot1xSessDispBySlotIfName, hwDot1xSessDispByMacUserMac=hwDot1xSessDispByMacUserMac, hwEapTrapOid=hwEapTrapOid, hwEapTraps=hwEapTraps, hwEapFailure=hwEapFailure, hwDot1xSessionDisplayBySlotTable=hwDot1xSessionDisplayBySlotTable, hwDot1xIfSendEAPSIMParameter=hwDot1xIfSendEAPSIMParameter, hwEapSuccess=hwEapSuccess, hwDot1xSessDispBySlotReauth=hwDot1xSessDispBySlotReauth, hwDot1xReauthenPeriod=hwDot1xReauthenPeriod, hwDot1xSessDispBySlotUserVlanId=hwDot1xSessDispBySlotUserVlanId, hwDot1xSystemConfigEntry=hwDot1xSystemConfigEntry, hwEapReqChallenge=hwEapReqChallenge, hwEapLogOff=hwEapLogOff, hwDot1xSessDispBySlotUserState=hwDot1xSessDispBySlotUserState, hwDot1xSessDispByMacUserQinqId=hwDot1xSessDispByMacUserQinqId, hwDot1xSessionDisplayByPortTable=hwDot1xSessionDisplayByPortTable, hwDot1xSessDispBySlotIndex=hwDot1xSessDispBySlotIndex, hwEapUserTotalMaxNum=hwEapUserTotalMaxNum, hwDot1xRetry=hwDot1xRetry, hwDot1xPortReauthen=hwDot1xPortReauthen, hwDot1xQuietPeriod=hwDot1xQuietPeriod, hwDot1xSessDispByPortUserVlanId=hwDot1xSessDispByPortUserVlanId, hwDot1xPortConfigEntry=hwDot1xPortConfigEntry, hwDot1xPortMethod=hwDot1xPortMethod, hwDot1xPortMaxUser=hwDot1xPortMaxUser, hwDot1xSessDispByMacHandShakeSwitch=hwDot1xSessDispByMacHandShakeSwitch, hwEapUserPortMaxNumThreshold=hwEapUserPortMaxNumThreshold, hwDot1xPortTrapGroup=hwDot1xPortTrapGroup, hwDot1xTimerQuietPeriod=hwDot1xTimerQuietPeriod, hwDot1xModemVersion=hwDot1xModemVersion, hwDot1xSessDispBySlotHandShakeSwitch=hwDot1xSessDispBySlotHandShakeSwitch, hwDot1xMacByPass=hwDot1xMacByPass, hwDot1xPortGuestVlan=hwDot1xPortGuestVlan, hwSrvcfgEapMibTraps=hwSrvcfgEapMibTraps, hwDot1xTimerServerTimeout=hwDot1xTimerServerTimeout, hwDot1xTemplateIndex=hwDot1xTemplateIndex, hwDot1xSessionDisplayBySlotEntry=hwDot1xSessionDisplayBySlotEntry, hwDot1xSessDispBySlotUserIndex=hwDot1xSessDispBySlotUserIndex, hwDot1xSessDispByPortHandShakeSwitch=hwDot1xSessDispByPortHandShakeSwitch, hwDot1xSessDispByMacIfName=hwDot1xSessDispByMacIfName, hwDot1xSessDispByMacUserIndex=hwDot1xSessDispByMacUserIndex, hwDot1xSessDispByPortUserMac=hwDot1xSessDispByPortUserMac, hwSrvcfgEapCompliances=hwSrvcfgEapCompliances, hwDot1xSessDispByPortUserState=hwDot1xSessDispByPortUserState, hwDot1xSessionDisplayByPortEntry=hwDot1xSessionDisplayByPortEntry, hwDot1xPortConfigGroup=hwDot1xPortConfigGroup, hwDot1xSessDispByPortUserQinqId=hwDot1xSessDispByPortUserQinqId, hwDot1xAuthenMethod=hwDot1xAuthenMethod, hwDot1xPortSwitch=hwDot1xPortSwitch, hwDot1xHandshakeCount=hwDot1xHandshakeCount, hwDot1xSessDispByPortIfName=hwDot1xSessDispByPortIfName, hwDot1xHandshakeInterval=hwDot1xHandshakeInterval, hwPacketStatisticsTable=hwPacketStatisticsTable)
