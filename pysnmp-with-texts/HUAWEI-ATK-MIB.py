#
# PySNMP MIB module HUAWEI-ATK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-ATK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:42:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
mplsVpnVrfName, = mibBuilder.importSymbols("MPLS-VPN-MIB", "mplsVpnVrfName")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, Unsigned32, MibIdentifier, ObjectIdentity, ModuleIdentity, IpAddress, NotificationType, Bits, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "Unsigned32", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "IpAddress", "NotificationType", "Bits", "Counter64", "Integer32")
TextualConvention, RowStatus, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TruthValue", "DisplayString")
hwATKComm = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1))
if mibBuilder.loadTexts: hwATKComm.setLastUpdated('200304110900Z')
if mibBuilder.loadTexts: hwATKComm.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwATKComm.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwATKComm.setDescription(' V1.00 The HUAWEI-ATK-MIB contains objects to manage the ATCKDF(Attack Defence) configuration for all products. ')
hwATK = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10))
hwAtkGlobalMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1))
hwAtkIpSpoofingSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkIpSpoofingSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkIpSpoofingSw.setDescription('The switch indicates whether inspecting IP spoofing attack.')
hwAtkLandSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkLandSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkLandSw.setDescription('The switch indicates whether inspecting Land attack.')
hwAtkSmurfSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkSmurfSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkSmurfSw.setDescription('The switch indicates whether inspecting Smurf attack.')
hwAtkFraggleSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkFraggleSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkFraggleSw.setDescription('The switch indicates whether inspecting Fraggle attack.')
hwAtkWinNukeSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkWinNukeSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkWinNukeSw.setDescription('The switch indicates whether inspecting WinNuke attack.')
hwAtkIcmpRedirectSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkIcmpRedirectSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkIcmpRedirectSw.setDescription('The switch indicates whether blocking ICMP re-direction packets.')
hwAtkIcmpUnReachSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkIcmpUnReachSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkIcmpUnReachSw.setDescription('The switch indicates whether blocking ICMP unreachable packets.')
hwAtkSourceRouteSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkSourceRouteSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkSourceRouteSw.setDescription('The switch indicates whether blocking packets with source route option.')
hwAtkRouteRecordSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkRouteRecordSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkRouteRecordSw.setDescription('The switch indicates whether blocking packets with route record option.')
hwAtkTracertSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkTracertSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkTracertSw.setDescription('The switch indicates whether blocking packets of tracert.')
hwAtkTcpFlagSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkTcpFlagSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkTcpFlagSw.setDescription('The switch indicates whether inspecting the flag of TCP packets.')
hwAtkPingOfDeathSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkPingOfDeathSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkPingOfDeathSw.setDescription('The switch indicates whether inspecting ping-of-death attack.')
hwAtkTeardropSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkTeardropSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkTeardropSw.setDescription('The switch indicates whether inspecting teardrop attack.')
hwAtkFragFlagSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkFragFlagSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkFragFlagSw.setDescription('The switch indicates whether inspecting the flag for fragment.')
hwAtkIPSweepSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkIPSweepSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkIPSweepSw.setDescription('The switch indicates whether inspecting IP sweep attack.')
hwAtkIpSweepSpeed = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkIpSweepSpeed.setStatus('current')
if mibBuilder.loadTexts: hwAtkIpSweepSpeed.setDescription('The maximum speed of IP sweeping.')
hwAtkIPSweepBlsTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkIPSweepBlsTime.setStatus('current')
if mibBuilder.loadTexts: hwAtkIPSweepBlsTime.setDescription('The time to add a host to blacklist when find it is sweeping.')
hwAtkPortScanSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkPortScanSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkPortScanSw.setDescription('The switch indicates whether inspecting port scan attack.')
hwAtkPortScanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkPortScanSpeed.setStatus('current')
if mibBuilder.loadTexts: hwAtkPortScanSpeed.setDescription('The maximum speed of port scanning.')
hwAtkPortScanBlsTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkPortScanBlsTime.setStatus('current')
if mibBuilder.loadTexts: hwAtkPortScanBlsTime.setDescription('The time to add a host to blacklist when find it is scanning port.')
hwAtkLargeIcmpSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkLargeIcmpSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkLargeIcmpSw.setDescription('The switch indicates whether blocking large icmp packets.')
hwAtkIcmpLength = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 65535)).clone(4000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkIcmpLength.setStatus('current')
if mibBuilder.loadTexts: hwAtkIcmpLength.setDescription('The maximum length of ICMP packets allowed to pass the system.')
hwAtkSynFloodSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 23), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkSynFloodSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkSynFloodSw.setDescription('The switch indicates whether inspecting SYN flooding attack.')
hwAtkUdpFloodSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 24), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkUdpFloodSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkUdpFloodSw.setDescription('The switch indicates whether inspecting UDP flooding attack.')
hwAtkIcmpFloodSw = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 1, 25), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtkIcmpFloodSw.setStatus('current')
if mibBuilder.loadTexts: hwAtkIcmpFloodSw.setDescription('The switch indicates whether inspecting ICMP flooding attack.')
hwAtkIPMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2))
hwAtkSynFloodIPTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 1), )
if mibBuilder.loadTexts: hwAtkSynFloodIPTable.setStatus('current')
if mibBuilder.loadTexts: hwAtkSynFloodIPTable.setDescription('The table define the parameters of SYN flood defence for hosts.')
hwAtkSynFloodIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 1, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "HUAWEI-ATK-MIB", "hwAtkSynFloodIP"))
if mibBuilder.loadTexts: hwAtkSynFloodIPEntry.setStatus('current')
if mibBuilder.loadTexts: hwAtkSynFloodIPEntry.setDescription(' ')
hwAtkSynFloodIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: hwAtkSynFloodIP.setStatus('current')
if mibBuilder.loadTexts: hwAtkSynFloodIP.setDescription('The IP address of host to be protected.')
hwAtkIPSynFloodSynSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtkIPSynFloodSynSpeed.setStatus('current')
if mibBuilder.loadTexts: hwAtkIPSynFloodSynSpeed.setDescription('The maximum speed of SYN packets to the host. when the speed of SYN packets to the host reach the maximum, system will start the TCP proxy.')
hwAtkIPSynFloodHalfMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtkIPSynFloodHalfMax.setStatus('current')
if mibBuilder.loadTexts: hwAtkIPSynFloodHalfMax.setDescription('The maximum incomplete connection for the host.')
hwAtkIPSynFloodHalfAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtkIPSynFloodHalfAge.setStatus('current')
if mibBuilder.loadTexts: hwAtkIPSynFloodHalfAge.setDescription('The age of TCP incomplete connections.')
hwAtkIPSynFloodProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("on", 2), ("off", 3))).clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtkIPSynFloodProxy.setStatus('current')
if mibBuilder.loadTexts: hwAtkIPSynFloodProxy.setDescription('The switch of TCP proxy, this switch decides the action of proxy. The switch has three status: auto, on, off.')
hwAtkIPSynFloodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtkIPSynFloodStatus.setStatus('current')
if mibBuilder.loadTexts: hwAtkIPSynFloodStatus.setDescription('The status of a row, can be CreateAndGo or Destroy currently.')
hwAtkUdpFloodIPTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 2), )
if mibBuilder.loadTexts: hwAtkUdpFloodIPTable.setStatus('current')
if mibBuilder.loadTexts: hwAtkUdpFloodIPTable.setDescription('The table define the parameters of UDP flood defence for hosts.')
hwAtkUdpFloodIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 2, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "HUAWEI-ATK-MIB", "hwAtkUdpFloodIP"))
if mibBuilder.loadTexts: hwAtkUdpFloodIPEntry.setStatus('current')
if mibBuilder.loadTexts: hwAtkUdpFloodIPEntry.setDescription(' ')
hwAtkUdpFloodIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: hwAtkUdpFloodIP.setStatus('current')
if mibBuilder.loadTexts: hwAtkUdpFloodIP.setDescription('The IP address of host to be protected.')
hwAtkIPUdpFloodSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtkIPUdpFloodSpeed.setStatus('current')
if mibBuilder.loadTexts: hwAtkIPUdpFloodSpeed.setDescription(' The maximum speed of UDP packets to the host. when the speed of UDP packets to the host reach the maximum, system will drop the subsequent UDP packets to this host, until the speed decline to 80 percent of the maximum. ')
hwAtkIPUdpFloodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtkIPUdpFloodStatus.setStatus('current')
if mibBuilder.loadTexts: hwAtkIPUdpFloodStatus.setDescription('The status of a row, can be CreateAndGo or Destroy currently.')
hwAtkIcmpFloodIPTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 3), )
if mibBuilder.loadTexts: hwAtkIcmpFloodIPTable.setStatus('current')
if mibBuilder.loadTexts: hwAtkIcmpFloodIPTable.setDescription('The table define the parameters of ICMP flood defence for hosts.')
hwAtkIcmpFloodIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 3, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "HUAWEI-ATK-MIB", "hwAtkIcmpFloodIP"))
if mibBuilder.loadTexts: hwAtkIcmpFloodIPEntry.setStatus('current')
if mibBuilder.loadTexts: hwAtkIcmpFloodIPEntry.setDescription(' ')
hwAtkIcmpFloodIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: hwAtkIcmpFloodIP.setStatus('current')
if mibBuilder.loadTexts: hwAtkIcmpFloodIP.setDescription('The IP address of host to be protected.')
hwAtkIPIcmpFloodSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtkIPIcmpFloodSpeed.setStatus('current')
if mibBuilder.loadTexts: hwAtkIPIcmpFloodSpeed.setDescription(' The maximum speed of ICMP packets to the host. when the speed of ICMP packets to the host reach the maximum, system will drop the subsequent ICMP packets to this host, until the speed decline to 80 percent of the maximum. ')
hwAtkIPIcmpFloodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAtkIPIcmpFloodStatus.setStatus('current')
if mibBuilder.loadTexts: hwAtkIPIcmpFloodStatus.setDescription('The status of a row, can be CreateAndGo or Destroy currently.')
hwAtkCommConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 3))
hwAtkCommCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 3, 1))
hwAtkCommMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 3, 2))
hwAtkGlobalCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 3, 2, 1)).setObjects(("HUAWEI-ATK-MIB", "hwAtkIpSpoofingSw"), ("HUAWEI-ATK-MIB", "hwAtkLandSw"), ("HUAWEI-ATK-MIB", "hwAtkSmurfSw"), ("HUAWEI-ATK-MIB", "hwAtkFraggleSw"), ("HUAWEI-ATK-MIB", "hwAtkWinNukeSw"), ("HUAWEI-ATK-MIB", "hwAtkIcmpRedirectSw"), ("HUAWEI-ATK-MIB", "hwAtkIcmpUnReachSw"), ("HUAWEI-ATK-MIB", "hwAtkSourceRouteSw"), ("HUAWEI-ATK-MIB", "hwAtkRouteRecordSw"), ("HUAWEI-ATK-MIB", "hwAtkTracertSw"), ("HUAWEI-ATK-MIB", "hwAtkTcpFlagSw"), ("HUAWEI-ATK-MIB", "hwAtkPingOfDeathSw"), ("HUAWEI-ATK-MIB", "hwAtkTeardropSw"), ("HUAWEI-ATK-MIB", "hwAtkFragFlagSw"), ("HUAWEI-ATK-MIB", "hwAtkIPSweepSw"), ("HUAWEI-ATK-MIB", "hwAtkIpSweepSpeed"), ("HUAWEI-ATK-MIB", "hwAtkIPSweepBlsTime"), ("HUAWEI-ATK-MIB", "hwAtkPortScanSw"), ("HUAWEI-ATK-MIB", "hwAtkPortScanSpeed"), ("HUAWEI-ATK-MIB", "hwAtkPortScanBlsTime"), ("HUAWEI-ATK-MIB", "hwAtkLargeIcmpSw"), ("HUAWEI-ATK-MIB", "hwAtkIcmpLength"), ("HUAWEI-ATK-MIB", "hwAtkSynFloodSw"), ("HUAWEI-ATK-MIB", "hwAtkUdpFloodSw"), ("HUAWEI-ATK-MIB", "hwAtkIcmpFloodSw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtkGlobalCfgGroup = hwAtkGlobalCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwAtkGlobalCfgGroup.setDescription('Description.')
hwAtkCommSynFloodGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 3, 2, 2)).setObjects(("HUAWEI-ATK-MIB", "hwAtkIPSynFloodSynSpeed"), ("HUAWEI-ATK-MIB", "hwAtkIPSynFloodHalfMax"), ("HUAWEI-ATK-MIB", "hwAtkIPSynFloodHalfAge"), ("HUAWEI-ATK-MIB", "hwAtkIPSynFloodProxy"), ("HUAWEI-ATK-MIB", "hwAtkIPSynFloodStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtkCommSynFloodGroup = hwAtkCommSynFloodGroup.setStatus('current')
if mibBuilder.loadTexts: hwAtkCommSynFloodGroup.setDescription('Description.')
hwAtkCommUdpFloodGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 3, 2, 3)).setObjects(("HUAWEI-ATK-MIB", "hwAtkIPUdpFloodSpeed"), ("HUAWEI-ATK-MIB", "hwAtkIPUdpFloodStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtkCommUdpFloodGroup = hwAtkCommUdpFloodGroup.setStatus('current')
if mibBuilder.loadTexts: hwAtkCommUdpFloodGroup.setDescription('Description.')
hwAtkCommIcmpFloodGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 10, 1, 3, 2, 4)).setObjects(("HUAWEI-ATK-MIB", "hwAtkIPIcmpFloodSpeed"), ("HUAWEI-ATK-MIB", "hwAtkIPIcmpFloodStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAtkCommIcmpFloodGroup = hwAtkCommIcmpFloodGroup.setStatus('current')
if mibBuilder.loadTexts: hwAtkCommIcmpFloodGroup.setDescription('Description.')
mibBuilder.exportSymbols("HUAWEI-ATK-MIB", hwAtkGlobalCfgGroup=hwAtkGlobalCfgGroup, hwAtkIPSweepBlsTime=hwAtkIPSweepBlsTime, hwAtkIPUdpFloodSpeed=hwAtkIPUdpFloodSpeed, hwAtkIPSynFloodHalfMax=hwAtkIPSynFloodHalfMax, hwAtkIPSynFloodStatus=hwAtkIPSynFloodStatus, hwAtkIcmpFloodIPEntry=hwAtkIcmpFloodIPEntry, hwAtkIPMibObjects=hwAtkIPMibObjects, hwAtkTcpFlagSw=hwAtkTcpFlagSw, hwAtkIpSweepSpeed=hwAtkIpSweepSpeed, hwAtkSynFloodIPEntry=hwAtkSynFloodIPEntry, hwAtkCommIcmpFloodGroup=hwAtkCommIcmpFloodGroup, hwAtkSourceRouteSw=hwAtkSourceRouteSw, hwAtkIcmpLength=hwAtkIcmpLength, hwAtkSynFloodIP=hwAtkSynFloodIP, hwAtkUdpFloodIPTable=hwAtkUdpFloodIPTable, hwAtkCommSynFloodGroup=hwAtkCommSynFloodGroup, hwAtkCommCompliance=hwAtkCommCompliance, hwAtkLandSw=hwAtkLandSw, hwAtkUdpFloodIP=hwAtkUdpFloodIP, hwAtkIcmpFloodIPTable=hwAtkIcmpFloodIPTable, hwAtkRouteRecordSw=hwAtkRouteRecordSw, hwAtkPortScanBlsTime=hwAtkPortScanBlsTime, hwAtkIPSweepSw=hwAtkIPSweepSw, hwAtkIPSynFloodHalfAge=hwAtkIPSynFloodHalfAge, hwAtkTeardropSw=hwAtkTeardropSw, hwAtkUdpFloodIPEntry=hwAtkUdpFloodIPEntry, hwAtkLargeIcmpSw=hwAtkLargeIcmpSw, hwAtkSynFloodIPTable=hwAtkSynFloodIPTable, hwAtkSynFloodSw=hwAtkSynFloodSw, hwAtkCommMibGroups=hwAtkCommMibGroups, hwAtkPortScanSw=hwAtkPortScanSw, hwAtkIcmpRedirectSw=hwAtkIcmpRedirectSw, hwAtkIPUdpFloodStatus=hwAtkIPUdpFloodStatus, hwAtkPingOfDeathSw=hwAtkPingOfDeathSw, hwAtkSmurfSw=hwAtkSmurfSw, hwAtkIcmpFloodSw=hwAtkIcmpFloodSw, hwAtkFragFlagSw=hwAtkFragFlagSw, hwATK=hwATK, hwAtkIpSpoofingSw=hwAtkIpSpoofingSw, hwAtkFraggleSw=hwAtkFraggleSw, hwAtkIPSynFloodSynSpeed=hwAtkIPSynFloodSynSpeed, hwAtkIcmpFloodIP=hwAtkIcmpFloodIP, hwAtkIPIcmpFloodStatus=hwAtkIPIcmpFloodStatus, hwAtkWinNukeSw=hwAtkWinNukeSw, PYSNMP_MODULE_ID=hwATKComm, hwAtkUdpFloodSw=hwAtkUdpFloodSw, hwAtkIPIcmpFloodSpeed=hwAtkIPIcmpFloodSpeed, hwAtkGlobalMibObjects=hwAtkGlobalMibObjects, hwAtkPortScanSpeed=hwAtkPortScanSpeed, hwAtkCommUdpFloodGroup=hwAtkCommUdpFloodGroup, hwAtkIPSynFloodProxy=hwAtkIPSynFloodProxy, hwAtkIcmpUnReachSw=hwAtkIcmpUnReachSw, hwATKComm=hwATKComm, hwAtkCommConformance=hwAtkCommConformance, hwAtkTracertSw=hwAtkTracertSw)
