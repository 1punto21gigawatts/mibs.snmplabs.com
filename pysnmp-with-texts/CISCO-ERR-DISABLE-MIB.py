#
# PySNMP MIB module CISCO-ERR-DISABLE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ERR-DISABLE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:57:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
VlanIndexOrZero, = mibBuilder.importSymbols("CISCO-PRIVATE-VLAN-MIB", "VlanIndexOrZero")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
TimeIntervalSec, = mibBuilder.importSymbols("CISCO-TC", "TimeIntervalSec")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, NotificationType, IpAddress, Unsigned32, Counter32, Counter64, Gauge32, Bits, iso, ObjectIdentity, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "NotificationType", "IpAddress", "Unsigned32", "Counter32", "Counter64", "Gauge32", "Bits", "iso", "ObjectIdentity", "TimeTicks", "ModuleIdentity")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ciscoErrDisableMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 548))
ciscoErrDisableMIB.setRevisions(('2016-06-02 00:00', '2013-04-23 00:00', '2010-10-19 00:00', '2009-03-23 00:00', '2008-04-07 00:00', '2006-05-31 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoErrDisableMIB.setRevisionsDescriptions(('Added the following new enumerations in CErrDisableFeatureID: other(36), portReinitLimitReached(37), adminRxBBCreditPerfBufIncomp(38), ficonNotEnabled(39), adminModeIncomp(40), adminSpeedIncomp(41), ncompAdminRxBBCredit(42), adminRxBufSizeIncomp(43), eppFailure(44), osmEPortUp(45), osmNonEPortUp(46), udldUniDir(47), udldTxRxLoop(48), udldNeighbourMismatch(49), udldEmptyEcho(50), udldAggrasiveModeLinkFailed(51), excessivePortInterrupts(52), channelErrDisabled(53), hwProgFailed(54), internalHandshakeFailed(55), stpInconsistencyOnVpcPeerLink(56), stpPortStateFailure(57), ipConflict(58), multipleMSapIdsRcvd(59), oneHundredPdusWithoutAck(60), and ipQosCompatCheckFailure(61).', 'Added ciscoErrDisableFeatureFlapGroup and a new enumeration flapControl(4) in cErrDisableFeatureConfigurable.', 'Added a new enumeration in CErrDisableFeatureID: tranceiverIncomp(35).', 'Added the following new enumerations in CErrDisableFeatureID: sfpConfigMismatch(24), communityLimit(25), invalidPolicy(26), lsGroup(27), ekey(28), portModeFailure(29), pppoeIaRateLimit(30), oamRemoteCriticalEvent(31), oamRemoteDyingGasp(32), oamRemoteLinkFault(33), and mvrp(34). Added the new enumeration detectShutdownVlan(3) to cErrDisableFeatureConfigurable. Added ciscoErrDisableShutdownVlanGroup.', 'Added the following new enumerations in CErrDisableFeatureID: packetBuffer(18), macLimit(19), linkMonitorFailure(20), oamRemoteFailure(21), dot1adIncompEtype(22), and dot1adIncompTunnel(23). cErrDisableInterfaceEvent notification is deprecated and replaced by a new notification cErrDisableInterfaceEventRev1. Modified the description of cErrDisableNotifEnable to add control for cErrDisableInterfaceEventRev1 notification.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoErrDisableMIB.setLastUpdated('201606020000Z')
if mibBuilder.loadTexts: ciscoErrDisableMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoErrDisableMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoErrDisableMIB.setDescription("This MIB module provides the ability for a Network Management Station (NMS) to configure and monitor the error-disable feature via SNMP. The error-disable feature allows other software features running in a system to operationally disable a system entity upon detecting abnormal conditions. Examples of such a system entity include interfaces, a vlan configured in the system, or a VLAN allowed on specific layer 2 multi-vlan interface. More specific examples: a) When BPDU guard is enabled on an interface it is expected that no BPDU packets are received by the interface. If a BPDU packet is received, then the BPDU guard will operationally disable the interface. b) Users can configure a particular threshold of broadcast packets received on an interface. If the number of packets received exceeds the threshold, then storm-control will disable the interface. c) When unidirectional Link Detection (UDLD) detects a unidirectional link on an interface, it can disable the interface. d) On a trunk or a multi-vlan layer 2 port, if port-security detects violation on a particular vlan, then it can operationally disable that vlan on that port. The definition of 'abnormal condition' is under the control of features that make use of the error-disable feature to disable system entities. The error-disable feature supports the following configuration: 1) Whether software features can in fact use the error-disable feature upon detecting abnormal conditions. NOTE: Some software features will ALWAYS use the error-disable feature to disable entities upon detection of error. 2) Whether the system can attempt to automatically recover after a system entity has been disabled (e.g., A system can attempt to bring up a physical interface which had been disabled earlier) 3) If error recovery is possible, then the time interval to wait before the system starts the recovery attempt.")
ciscoErrDisableMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 0))
ciscoErrDisableMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 1))
ciscoErrDisableMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 2))
cErrDisableGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 1))
cErrDisableFeatureObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2))
cErrDisableIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 3))
class CErrDisableFeatureID(TextualConvention, Integer32):
    description = "An integer-value assigned to various features/events that can error disable a system entity udld: Unidirectional Link Detection bpduGuard: Spanning Tree BPDU Guard feature that prevents processing BPDU packets on an access interface channelMisconfig: General Link Aggregation mis-configuration pagpFlap: Cisco's PAGP Link Aggregation protocol errors dtpFlap: Dynamic Trunking Protocol errors linkFlap: Link State flapping l2ptGuard: L2 Protocol Tunnel errors dot1xSecurityViolation: 802.1x authentication violations portSecurity: Port Security violations gbicInvalid: Invalid GBIC errors (examples include unsupported GBIC being inserted) dhcpRateLimit: DHCP snooping rate limit violation unicastFlood: Unicast Flooding threshold violations vmps: VLAN Membership Policy Server feature related errors stormControl: storm control (broadcast/multicast/unicast) threshold violations inlinePower: Errors in inline power arpInspection: Errors detected by Dynamic Arp Inspection (DAI) feature portLoopback: Interface Loopback Error packetBuffer: Packet Buffer Error macLimit: Errors detected by Mac Address Limit feature linkMonitorFailure: Link Monitoring failure oamRemoteFailure: Remote Failure detected by Ethernet OAM (Operations, Administration, and Maintenance) feature dot1adIncompEtype: 802.1ad Ether-type Incompatible errors dot1adIncompTunnel: 802.1ad Pdu Tunnel Incompatible errors sfpConfigMismatch: Mismatch on SFP configuration communityLimit: Vlan Community Limit violations invalidPolicy: QoS Policy violation lsGroup: Errors detected by Link State Group Tracking feature ekey: Errors detected by Error Key Mechanism portModeFailure: Port mode change failure pppoeIaRateLimit: Errors detected by PPPoE Intermediate Agent Rate Limit feature oamRemoteCriticalEvent: Ethernet OAM Remote Critical Event Failure oamRemoteDyingGasp: Ethernet OAM Remote Dying Gasp Failure oamRemoteLinkFault: Ethernet OAM Remote Link Fault Failure mvrp: Errors detected by Multiple VLAN Registration Protocol tranceiverIncomp: Tranceiver incompatible errors other: Any other feature not covered by enumerations listed here portReinitLimitReached: Port reinitialization limit reached adminRxBBCreditPerfBufIncomp: Incompatible admin port rxbbcredit performance buffers ficonNotEnabled: Ficon not enabled adminModeIncomp: Incompatible port admin mode adminSpeedIncomp: Incompatible port admin speed adminRxBBCreditIncomp: Incompatible admin port rxbbcredit adminRxBufSizeIncomp: Incompatible admin port rxbufsize eppFailure: EPP Failure osmEPortUp: First interface in this group is E osmNonEPortUp: Other interfaces in this group are not shut udldUniDir: Unidirectional UDLD detected udldTxRxLoop: UDLD Tx-Rx loop udldNeighbourMismatch: UDLD neighbor mismatch udldEmptyEcho: UDLD empty echo udldAggrasiveModeLinkFailed: UDLD detected link failure in aggressive mode excessivePortInterrupts: Error disabled due to excessive port interrupts channelErrDisabled: Channel error-disabled hwProgFailed: hardware programming failed internalHandshakeFailed: Internal handshake failure stpInconsistencyOnVpcPeerLink: STP inconsistency on VPC peer-link stpPortStateFailure: STP has set port state to failure ipConflict: Error disabled due to IP address conflict multipleMSapIdsRcvd: DCX Multiple MSAP IDs recieved for the port oneHundredPdusWithoutAck: DCX Recieved 100 PDUs without ACK ipQosCompatCheckFailure: IP Qos DCBXP compat check failed"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))
    namedValues = NamedValues(("udld", 1), ("bpduGuard", 2), ("channelMisconfig", 3), ("pagpFlap", 4), ("dtpFlap", 5), ("linkFlap", 6), ("l2ptGuard", 7), ("dot1xSecurityViolation", 8), ("portSecurityViolation", 9), ("gbicInvalid", 10), ("dhcpRateLimit", 11), ("unicastFlood", 12), ("vmps", 13), ("stormControl", 14), ("inlinePower", 15), ("arpInspection", 16), ("portLoopback", 17), ("packetBuffer", 18), ("macLimit", 19), ("linkMonitorFailure", 20), ("oamRemoteFailure", 21), ("dot1adIncompEtype", 22), ("dot1adIncompTunnel", 23), ("sfpConfigMismatch", 24), ("communityLimit", 25), ("invalidPolicy", 26), ("lsGroup", 27), ("ekey", 28), ("portModeFailure", 29), ("pppoeIaRateLimit", 30), ("oamRemoteCriticalEvent", 31), ("oamRemoteDyingGasp", 32), ("oamRemoteLinkFault", 33), ("mvrp", 34), ("tranceiverIncomp", 35), ("other", 36), ("portReinitLimitReached", 37), ("adminRxBBCreditPerfBufIncomp", 38), ("ficonNotEnabled", 39), ("adminModeIncomp", 40), ("adminSpeedIncomp", 41), ("adminRxBBCreditIncomp", 42), ("adminRxBufSizeIncomp", 43), ("eppFailure", 44), ("osmEPortUp", 45), ("osmNonEPortUp", 46), ("udldUniDir", 47), ("udldTxRxLoop", 48), ("udldNeighbourMismatch", 49), ("udldEmptyEcho", 50), ("udldAggrasiveModeLinkFailed", 51), ("excessivePortInterrupts", 52), ("channelErrDisabled", 53), ("hwProgFailed", 54), ("internalHandshakeFailed", 55), ("stpInconsistencyOnVpcPeerLink", 56), ("stpPortStateFailure", 57), ("ipConflict", 58), ("multipleMSapIdsRcvd", 59), ("oneHundredPdusWithoutAck", 60), ("ipQosCompatCheckFailure", 61))

cErrDisableRecoveryInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 1, 1), TimeIntervalSec()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableRecoveryInterval.setStatus('current')
if mibBuilder.loadTexts: cErrDisableRecoveryInterval.setDescription('This object specifies the error-disable recovery time interval. When a system entity is operationally disabled upon detecting abnormal condition by a particular feature, the system waits for a period equal to this time interval, and then re-enable the entity if automatic recovery is enabled for the feature.')
cErrDisableNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cErrDisableNotifEnable.setDescription('This object specifies whether cErrDisableInterfaceEvent and cErrDisableInterfaceEventRev1 notifications should be generated when a system entity is error-disabled.')
cErrDisableNotifRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 1, 3), Unsigned32()).setUnits('Notification/Minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableNotifRate.setStatus('current')
if mibBuilder.loadTexts: cErrDisableNotifRate.setDescription("The value of this object specifies the maximum number of error-disable notifications the device will generate per minute. A value of '0' specifies no limit and the device will generate a notification for each error-disable event.")
cErrDisableFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1), )
if mibBuilder.loadTexts: cErrDisableFeatureTable.setStatus('current')
if mibBuilder.loadTexts: cErrDisableFeatureTable.setDescription('This table contains the error-disable related info for each feature employing the error-disable feature.')
cErrDisableFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-ERR-DISABLE-MIB", "cErrDisableFeatureIndex"))
if mibBuilder.loadTexts: cErrDisableFeatureEntry.setStatus('current')
if mibBuilder.loadTexts: cErrDisableFeatureEntry.setDescription('An entry is created for each feature that employs the error-disable feature.')
cErrDisableFeatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1, 1), CErrDisableFeatureID())
if mibBuilder.loadTexts: cErrDisableFeatureIndex.setStatus('current')
if mibBuilder.loadTexts: cErrDisableFeatureIndex.setDescription('This object uniquely identifies a feature that makes use of the error-disable feature.')
cErrDisableFeatureConfigurable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1, 2), Bits().clone(namedValues=NamedValues(("detectionEnable", 0), ("recoveryEnable", 1), ("recoveryInterval", 2), ("detectShutdownVlan", 3), ("flapControl", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cErrDisableFeatureConfigurable.setStatus('current')
if mibBuilder.loadTexts: cErrDisableFeatureConfigurable.setDescription("This object indicates whether the error-disable related configuration is configurable for this feature. If a bit is set to 1, then the corresponding error-disable configuration can be configured. 'detectionEnable' - indicates the error-disable detection can be enabled/disabled for this feature via cErrDisableFeatureDetectEnable. 'recoveryEnable' - indicates the error-disable recovery can be enabled/disabled for this feature via cErrDisableFeatureRecoveryEnable. 'recoveryInterval' - indicates the error-disable recovery Interval can be configured via cErrDisableFeatureRecoveryInterval. 'detectShutdownVlan' - indicates the error-disable detection shutdown vlan mode can be configured for this feature via cErrDisableFeatureDetectShutdownVlan. 'flapControl' - indicates the error-disable flap control can be configured via cErrDisableFeatureMaxFlapCount and cErrDisableFeatureFlapTimePeriod.")
cErrDisableFeatureDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableFeatureDetectEnable.setStatus('current')
if mibBuilder.loadTexts: cErrDisableFeatureDetectEnable.setDescription('This object specifies whether the error-disable detection is enabled for the feature. Note: This object is read-write only for those features that are configurable, meaning: cErrDisableFeatureConfigurable.<featureIndex> has the first bit set to 1.')
cErrDisableFeatureRecoveryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableFeatureRecoveryEnable.setStatus('current')
if mibBuilder.loadTexts: cErrDisableFeatureRecoveryEnable.setDescription('This object specifies whether the system can automatically recover a system entity that has been disabled by the feature.')
cErrDisableFeatureRecoveryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1, 5), TimeIntervalSec()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableFeatureRecoveryInterval.setStatus('current')
if mibBuilder.loadTexts: cErrDisableFeatureRecoveryInterval.setDescription("This object specifies the error-recovery time interval that will be used by the system for any system entity that is error-disabled by this particular feature. If the value of this object is '0', then the device will use the value specified by the global configuration object cErrDisableRecoveryInterval.")
cErrDisableFeatureDetectShutdownVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableFeatureDetectShutdownVlan.setStatus('current')
if mibBuilder.loadTexts: cErrDisableFeatureDetectShutdownVlan.setDescription("This object specifies whether shutting down the violating VLAN on an interface is enabled or not. The value of 'true' indicates that shutting down the violating VLAN on an interface is enabled. The value of 'false' indicates that shutting down the violating VLAN on an interface is disabled.")
cErrDisableFeatureMaxFlapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableFeatureMaxFlapCount.setStatus('current')
if mibBuilder.loadTexts: cErrDisableFeatureMaxFlapCount.setDescription('This object specifies the maximum number of flaps that are allowed to occur before setting to error disable state. A read-only value of zero indicates that no flap control is present.')
cErrDisableFeatureFlapTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableFeatureFlapTimePeriod.setStatus('current')
if mibBuilder.loadTexts: cErrDisableFeatureFlapTimePeriod.setDescription('This object specifies the period of time counting the number of flaps that are allowed before setting to error disable state. A read-only value of zero indicates that no flap control is present.')
cErrDisableIfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 3, 1), )
if mibBuilder.loadTexts: cErrDisableIfStatusTable.setStatus('current')
if mibBuilder.loadTexts: cErrDisableIfStatusTable.setDescription('This table provides interface (port) specific error-disable status information. Each conceptual row provides status information about a {interface, vlan} disabled by a feature. On a trunk or multi-vlan access interface, a given vlan on the interface can be error-disabled. In this case, the row is indexed by the ifIndex for the interface and the vlan index corresponding to the vlan in question. If the interface is carrying only 1 vlan or the entire trunk interface is error-disabled (due to link flaps, for example) then the vlan index portion of the row index is 0.')
cErrDisableIfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ERR-DISABLE-MIB", "cErrDisableIfStatusVlanIndex"))
if mibBuilder.loadTexts: cErrDisableIfStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cErrDisableIfStatusEntry.setDescription('A collection of objects that specify the status of an error-disabled Interface or {interface, vlan}.')
cErrDisableIfStatusVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 3, 1, 1, 1), VlanIndexOrZero())
if mibBuilder.loadTexts: cErrDisableIfStatusVlanIndex.setStatus('current')
if mibBuilder.loadTexts: cErrDisableIfStatusVlanIndex.setDescription('This object specifies the vlan of the given interface that has been error-disabled. If the physical interface is error-disabled then the value of this object is 0.')
cErrDisableIfStatusCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 3, 1, 1, 2), CErrDisableFeatureID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cErrDisableIfStatusCause.setStatus('current')
if mibBuilder.loadTexts: cErrDisableIfStatusCause.setDescription('This object specifies the feature/event that caused the {interface, vlan} (or the entire interface) to be error-disabled.')
cErrDisableIfStatusTimeToRecover = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 3, 1, 1, 3), TimeIntervalSec()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cErrDisableIfStatusTimeToRecover.setStatus('current')
if mibBuilder.loadTexts: cErrDisableIfStatusTimeToRecover.setDescription("Time left before the system attempts an automatic recovery of the interface or the vlan of the given interface. If no recovery is scheduled, then the value of this object is '0'.")
cErrDisableNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 0, 1))
cErrDisableInterfaceEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 548, 0, 1, 1)).setObjects(("CISCO-ERR-DISABLE-MIB", "cErrDisableIfStatusCause"))
if mibBuilder.loadTexts: cErrDisableInterfaceEvent.setStatus('deprecated')
if mibBuilder.loadTexts: cErrDisableInterfaceEvent.setDescription('The cErrDisableInterfaceEvent is generated when an interface or {interface, vlan} is error-disabled by the feature specified in cErrDisableIfStatusCause. cErrDisableInterfaceEvent is deprecated and replaced by cErrDisableInterfaceEventRev1.')
cErrDisableInterfaceEventRev1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 548, 0, 2)).setObjects(("CISCO-ERR-DISABLE-MIB", "cErrDisableIfStatusCause"))
if mibBuilder.loadTexts: cErrDisableInterfaceEventRev1.setStatus('current')
if mibBuilder.loadTexts: cErrDisableInterfaceEventRev1.setDescription('The cErrDisableInterfaceEventRev1 is generated when an interface or {interface, vlan} is error-disabled by the feature specified in cErrDisableIfStatusCause. cErrDisableInterfaceEventRev1 deprecates cErrDisableInterfaceEvent to make it RFC 2578 compliant. According to section 8.5 of RFC 2578, the next to last sub-identifier in the name of any newly-defined notification must have the value zero.')
ciscoErrDisableMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 1))
ciscoErrDisableMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2))
ciscoErrDisableMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 1, 1)).setObjects(("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableGlobalCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableFeatureCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableIfStatusGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableNotifCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoErrDisableMIBCompliance = ciscoErrDisableMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoErrDisableMIBCompliance.setDescription('The compliance statement for the cisco errdisable MIB.')
ciscoErrDisableMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 1, 2)).setObjects(("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableGlobalCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableFeatureCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableIfStatusGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableNotifCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableNotifGroupRev1"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableShutdownVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoErrDisableMIBComplianceRev1 = ciscoErrDisableMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoErrDisableMIBComplianceRev1.setDescription('The compliance statement for the cisco errdisable MIB.')
ciscoErrDisableMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 1, 3)).setObjects(("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableGlobalCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableFeatureCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableIfStatusGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableNotifCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableNotifGroupRev1"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableShutdownVlanGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableFeatureFlapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoErrDisableMIBComplianceRev2 = ciscoErrDisableMIBComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoErrDisableMIBComplianceRev2.setDescription('The compliance statement for the cisco errdisable MIB.')
ciscoErrDisableGlobalCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2, 1)).setObjects(("CISCO-ERR-DISABLE-MIB", "cErrDisableRecoveryInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoErrDisableGlobalCfgGroup = ciscoErrDisableGlobalCfgGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoErrDisableGlobalCfgGroup.setDescription('A collection of objects to configure error-disable functionality.')
ciscoErrDisableFeatureCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2, 2)).setObjects(("CISCO-ERR-DISABLE-MIB", "cErrDisableFeatureConfigurable"), ("CISCO-ERR-DISABLE-MIB", "cErrDisableFeatureDetectEnable"), ("CISCO-ERR-DISABLE-MIB", "cErrDisableFeatureRecoveryEnable"), ("CISCO-ERR-DISABLE-MIB", "cErrDisableFeatureRecoveryInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoErrDisableFeatureCfgGroup = ciscoErrDisableFeatureCfgGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoErrDisableFeatureCfgGroup.setDescription('A collection of objects to manage the configuration of the error-disable feature.')
ciscoErrDisableIfStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2, 3)).setObjects(("CISCO-ERR-DISABLE-MIB", "cErrDisableIfStatusCause"), ("CISCO-ERR-DISABLE-MIB", "cErrDisableIfStatusTimeToRecover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoErrDisableIfStatusGroup = ciscoErrDisableIfStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoErrDisableIfStatusGroup.setDescription('A collection of error-disable interface status objects.')
ciscoErrDisableNotifCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2, 4)).setObjects(("CISCO-ERR-DISABLE-MIB", "cErrDisableNotifEnable"), ("CISCO-ERR-DISABLE-MIB", "cErrDisableNotifRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoErrDisableNotifCfgGroup = ciscoErrDisableNotifCfgGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoErrDisableNotifCfgGroup.setDescription('A collection of objects to configure error-disable notifications.')
ciscoErrDisableNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2, 5)).setObjects(("CISCO-ERR-DISABLE-MIB", "cErrDisableInterfaceEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoErrDisableNotifGroup = ciscoErrDisableNotifGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoErrDisableNotifGroup.setDescription('A collection of error-disable notification objects.')
ciscoErrDisableNotifGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2, 6)).setObjects(("CISCO-ERR-DISABLE-MIB", "cErrDisableInterfaceEventRev1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoErrDisableNotifGroupRev1 = ciscoErrDisableNotifGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoErrDisableNotifGroupRev1.setDescription('A collection of error-disable notification objects.')
ciscoErrDisableShutdownVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2, 7)).setObjects(("CISCO-ERR-DISABLE-MIB", "cErrDisableFeatureDetectShutdownVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoErrDisableShutdownVlanGroup = ciscoErrDisableShutdownVlanGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoErrDisableShutdownVlanGroup.setDescription('A collection of objects to manage the configuration of error-disable detection shutdown vlan mode.')
ciscoErrDisableFeatureFlapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2, 8)).setObjects(("CISCO-ERR-DISABLE-MIB", "cErrDisableFeatureMaxFlapCount"), ("CISCO-ERR-DISABLE-MIB", "cErrDisableFeatureFlapTimePeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoErrDisableFeatureFlapGroup = ciscoErrDisableFeatureFlapGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoErrDisableFeatureFlapGroup.setDescription('A collection of objects to manage the configuration of the error-disable flap control.')
mibBuilder.exportSymbols("CISCO-ERR-DISABLE-MIB", cErrDisableIfStatusTable=cErrDisableIfStatusTable, ciscoErrDisableMIBGroups=ciscoErrDisableMIBGroups, cErrDisableIfObjects=cErrDisableIfObjects, cErrDisableFeatureMaxFlapCount=cErrDisableFeatureMaxFlapCount, PYSNMP_MODULE_ID=ciscoErrDisableMIB, ciscoErrDisableNotifGroup=ciscoErrDisableNotifGroup, cErrDisableFeatureDetectShutdownVlan=cErrDisableFeatureDetectShutdownVlan, cErrDisableNotifEnable=cErrDisableNotifEnable, cErrDisableIfStatusTimeToRecover=cErrDisableIfStatusTimeToRecover, ciscoErrDisableFeatureFlapGroup=ciscoErrDisableFeatureFlapGroup, cErrDisableNotificationsPrefix=cErrDisableNotificationsPrefix, cErrDisableInterfaceEventRev1=cErrDisableInterfaceEventRev1, cErrDisableFeatureEntry=cErrDisableFeatureEntry, ciscoErrDisableMIBComplianceRev2=ciscoErrDisableMIBComplianceRev2, ciscoErrDisableGlobalCfgGroup=ciscoErrDisableGlobalCfgGroup, cErrDisableGlobalObjects=cErrDisableGlobalObjects, ciscoErrDisableNotifGroupRev1=ciscoErrDisableNotifGroupRev1, cErrDisableFeatureTable=cErrDisableFeatureTable, ciscoErrDisableMIBConform=ciscoErrDisableMIBConform, cErrDisableFeatureConfigurable=cErrDisableFeatureConfigurable, ciscoErrDisableMIBObjects=ciscoErrDisableMIBObjects, cErrDisableFeatureRecoveryEnable=cErrDisableFeatureRecoveryEnable, ciscoErrDisableShutdownVlanGroup=ciscoErrDisableShutdownVlanGroup, CErrDisableFeatureID=CErrDisableFeatureID, cErrDisableInterfaceEvent=cErrDisableInterfaceEvent, cErrDisableIfStatusEntry=cErrDisableIfStatusEntry, ciscoErrDisableNotifCfgGroup=ciscoErrDisableNotifCfgGroup, cErrDisableRecoveryInterval=cErrDisableRecoveryInterval, ciscoErrDisableMIBNotifs=ciscoErrDisableMIBNotifs, cErrDisableNotifRate=cErrDisableNotifRate, ciscoErrDisableMIBCompliance=ciscoErrDisableMIBCompliance, cErrDisableFeatureRecoveryInterval=cErrDisableFeatureRecoveryInterval, cErrDisableFeatureObjects=cErrDisableFeatureObjects, cErrDisableIfStatusVlanIndex=cErrDisableIfStatusVlanIndex, ciscoErrDisableMIB=ciscoErrDisableMIB, ciscoErrDisableMIBCompliances=ciscoErrDisableMIBCompliances, cErrDisableFeatureIndex=cErrDisableFeatureIndex, cErrDisableFeatureDetectEnable=cErrDisableFeatureDetectEnable, cErrDisableFeatureFlapTimePeriod=cErrDisableFeatureFlapTimePeriod, ciscoErrDisableMIBComplianceRev1=ciscoErrDisableMIBComplianceRev1, ciscoErrDisableFeatureCfgGroup=ciscoErrDisableFeatureCfgGroup, ciscoErrDisableIfStatusGroup=ciscoErrDisableIfStatusGroup, cErrDisableIfStatusCause=cErrDisableIfStatusCause)
