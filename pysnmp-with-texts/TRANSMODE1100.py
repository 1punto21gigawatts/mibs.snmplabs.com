#
# PySNMP MIB module TRANSMODE1100 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRANSMODE1100
# Produced by pysmi-0.3.4 at Wed May  1 15:27:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Gauge32, Unsigned32, Counter64, enterprises, NotificationType, ObjectIdentity, IpAddress, Bits, MibIdentifier, TimeTicks, iso, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "Unsigned32", "Counter64", "enterprises", "NotificationType", "ObjectIdentity", "IpAddress", "Bits", "MibIdentifier", "TimeTicks", "iso", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
transmode = ModuleIdentity((1, 3, 6, 1, 4, 1, 11857))
transmode.setRevisions(('2003-10-06 11:00', '2003-05-13 16:30', '2003-05-13 16:30', '2003-04-04 11:30', '2003-03-26 15:40', '2003-02-20 13:10', '2002-11-27 14:45', '2002-11-18 16:35', '2002-11-05 15:20', '2002-10-30 17:05', '2002-10-23 16:05', '2002-09-30 13:57',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: transmode.setRevisionsDescriptions(('Rev 1.2.9 06 Oct 2003 11:00 Changes in TEXTUAL-CONVENTION CDR55Mode.', 'Rev 1.2.8 04 Sep 2003 09:50 Added unit trm53005500. Added oids trmOpticalInputPowerHighAPDLine2, trmOpticalInputPowerLowAPDLine2, trmOpticalInputPowerHigh850Client, trmOpticalInputPowerLow850Client, trmOpticalInputPowerHigh1310Client, trmOpticalInputPowerLow1310Client, trm76xxOpticalInPowClient,trm76xxOpticalOutPowClient and trm76xxLaserBiasCurClient. Added disconnecting to TEXTUAL-CONVENTION CascadeStatus.', 'Rev 1.2.7 13 May 2003 16:30 Added new trap for 26xx, trm26xxTrapTxDisable.', 'Rev 1.2.6 4 Apr 2003 11:30 Added unit trm25xx.', 'Rev 1.2.5 26 Mar 2003 15:40 Added unit trm26xx.', 'Rev 1.2.4 20 Feb 2003 13:10 New oids trmCascade and trmCascadeStatus.', 'Rev 1.2.3 27 Nov 2002 14:45 New traps trm76xxTrapLaserDegradationLine, trm76xxTrapEyeQualityLine and trm76xxTrapEyeQualityClient', 'Rev 1.2.2 18 Nov 2002 16:35 New oids trm75xxAlarmSpeedLimit and trm76xxAlarmSpeedLimit. trm76xxAlarmSpeedLimit replaced trm76xxOpticalInPowLineTxt. New trap trmTrapSpeedLimitExceeded. Renamed trm75xxTxModeLine to trm75xxTxMode. Made trm75xxTxModeClient obsolete and read-only. Removed trm76xxTrapSFPFailureLine, trm76xxTrapSFPMissingLine, trm76xxTrapRxHighPowerClient and trm76xxTrapHxLowPowerClient.', 'Rev 1.2.1 5 Nov 2002 15:20 New oids trmOpticalInputPowerHighPINLine, trmOpticalInputPowerHighAPDLine, trmOpticalInputPowerLowPINLine, trmOpticalInputPowerLowAPDLine Renamed oids trm76xxTrapRxOverloadLine to trm76xxTrapRxHighPowerLine. trm76xxTrapRxOverloadClient to trm76xxTrapRxHighPowerClient. ', 'Rev 1.2.0 30 Oct 2002 17:05 Renamed: trmAlarmConfiguration --> trmAlarmConfig trmGeneralConfig --> trmAlarmGeneral trmSeverityConfig --> trmAlarmSeverity and all its sub objects. trmExternalAlarms --> trmAlarmExternal and all its sub objects. trmActiveAlarm* --> trmAlarmActive* trmActiveGeneral --> trmAlarmActiveGeneral trmActivealarmNum --> trmAlarmActiveCounter trmSr* --> trmList* trmSubrackUnits --> trmUnits trmNMB6001* --> trm6001* trmAlarmNMB6001* --> trm6001Trap* trmPower* --> trm9xxx* trmAlarmPs* --> trm9xxxTrap* trmInterfaceUnits7075* --> trm75xx* trm7075* --> trm75xx* trmAlarmUnit7075* --> trm75xxTrap* trmInterfaceUnits76* --> trm76* trm76* --> trm76xx* trm76RegenerationMode --> trm76xxCDR trmAlarmUnit76* --> trm76xxTrap* trmMux803x* --> trm803x* trmAlarmBmiTraps --> trmSubrackTraps trmAlarmBmi* --> trmTrap* Moved and renamed: All sub objets from trmTempAlarms(old) to trmAlarmGeneral(new) and renamed Temp to AlarmTemperature. trmSubrackConfigTemperature(old) to trmAlarmGeneral(new) and renamed to trmTemperature. trmSubrackConfigPluginReset(old) to trmAlarmGeneral(new) and renamed to trmPluginReset. trmSubrackConfigNMBReset to trm6001Table and renamed to trm6001SwReset. Removed: trmTempAlarms New: trm6001Date trm6001Time trm803xMuxType trm2204 Changed type: trm76xxCDR(trm76RegenerationMode) from DisplayString to CDRMode trm76xxCustomFibRate(trm76CustomFibRate) from DisplayString to INTEGER ', 'Rev 1.1.1 23 Oct 2002 16:05 indeterminate (0) removed from AlarmSeverity. Renamed off(5) to none(5) in AlarmSeverity. Changed AlarmAcknowledge to {acknowledge(1)}. Changed trmAutoAcknowledge to on(1), off(2). trm76RegenerationMode changed to trm76CDR and made read-write. trm76CustomFibRate changed to INTEGER. ', 'Rev 1.1.0 30 Sep 2002 13:57 Changed TEXTUAL-CONVENTION LineLoopMode from forced(2) to looptest(2). Descriptions updated.',))
if mibBuilder.loadTexts: transmode.setLastUpdated('200310061100Z')
if mibBuilder.loadTexts: transmode.setOrganization('Transmode Systems AB')
if mibBuilder.loadTexts: transmode.setContactInfo('http://www.transmode.com')
if mibBuilder.loadTexts: transmode.setDescription('This is the enterprise specific MIB for Transmode')
class AlarmClass(TextualConvention, Integer32):
    description = 'The AlarmClass type categorizes the alarm, and is defined when the alarm is registered. It is as defined in X.733, ITU Alarm Reporting Function: o communications. An alarm of this class is principally associated with the procedures or processes required to convey information from one point to another. o qos. An alarm of this class is principally associated with a degradation in the quality of service. o processing. An alarm of this class is principally associated with a software or processing fault. o equipment. An alarm of this class is principally associated with an equipment fault. o environmental. An alarm of this class is principally associated with a condition relating to an enclosure in with equipment resides.'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 0), ("communications", 1), ("qos", 2), ("processing", 3), ("equipment", 4), ("environmental", 5))

class PerceivedSeverity(TextualConvention, Integer32):
    description = 'The PerceivedSeverity defines six severity levels, which provide an indication of how it is perceived that the capability of the managed object has been affected. Those severity levels which represent service affecting conditions ordered from most severe to least severe are critical, major, minor and warning. The levels used are as defined in X.733, ITU Alarm Reporting Function: o The Indeterminate severity level indicates that the severity level cannot be determined. o The Critical severity level indicates that a service affecting condition has occurred and an immediate corrective action is required. Such a severity can be reported, for example, when a managed object becomes totally out of service and its capability must be restored. o The Major severity level indicates that a service affecting condition has developed and an urgent corrective action is required. Such a severity can be reported, for example, when there is a severe degradation in the capability of the managed object and its full capability must be restored. o The Minor severity level indicates the existence of a non-service affecting fault condition and that corrective action should be taken in order to prevent a more serious (for example, service affecting) fault. Such a severity can be reported, for example, when the detected alarm condition is not currently degrading the capacity of the managed object. o The Warning severity level indicates the detection of a potential or impending service affecting fault, before any significant effects have been felt. Action should be taken to further diagnose (if necessary) and correct the problem in order to prevent it from becoming a more serious service affecting fault. o The Cleared severity level indicates the clearing of one or more previously reported alarms. This alarm clears all alarms for this managed object that have the same Alarm type, Probable cause and Specific problems (if given). When an alarm is cleared, an alarmCleared event is generated. This event clears the alarm with the AlarmActiveFaultId contained in the event. It is not required that the clearing of previously reported alarms are reported. Therefore, a managing system cannot assume that the absence of an alarmedCleared event for a fault means that the condition that caused the generation of previous alarms is still present. Managed object definers shall state if, and under which conditions, the alarmedCleared event is used. The clear value of AlarmSeverity is an action which is used when a management station wants to clear an active alarm. This is not possible on all systems, and thus an agent does not have support write access for this value.'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("indeterminate", 0), ("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), ("cleared", 5))

class AlarmSeverity(TextualConvention, Integer32):
    description = 'The AlarmSeverity maps directly to the perceived severity field but includes an additional element for information alarms. See The perceived alarm severity textual convention for a description of the other types. o The information severity level indicates an event of information character.No action has to be taken.'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), ("none", 5))

class RowStatus(TextualConvention, Integer32):
    description = ''
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class OwnerString(DisplayString):
    description = "An OwnerString identifies the initiator or owner of a row in a table. This label is set by the initiator to provide for the following possibilities: o A management station may recognize resources it owns and no longer needs. o A network operator can find the management station that owns the resource and negotiate for it to be freed. o A network operator may decide to unilaterally free resources another network operator has reserved. o Upon initialization, a management station may recognize resources it had reserved in the past. With this information it may free the resources if it no longer needs them. Management stations and agent systems should support any format of the OwnerString dictated by the local policy of the organization. It is suggested that this name contain one or more of the following: IP address, management station name, network manager's name, location, or phone number. This information will help users to share the resources more effectively. There is often default functionality that the device or the administrator of the agent (often the network administrator) wishes to set up. The resources associated with this functionality are then owned by the device itself or by the network administrator, and are intended to be long-lived. In this case, the device or the administrator will set the relevant owner object to a string starting with 'local'. Indiscriminate modification of the local configuration by network management stations is discouraged. In fact, a network management station should only modify these objects under the direction of the administrator of the agent system."
    status = 'current'
    displayHint = '255a'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 127)

class TrafficStatus(TextualConvention, Integer32):
    description = 'Traffic Status. Indicates if there is traffic(2) or not, notraffic(1).'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("notraffic", 1), ("traffic", 2))

class TxMode76(TextualConvention, Integer32):
    description = 'Mode of the optical transmitter. normal(1) = On if Receiving signal. disabled(2) = Always off. enabled(3) = Always on(testmode).'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("normal", 1), ("disabled", 2), ("forcedon", 3))

class TxMode75(TextualConvention, Integer32):
    description = 'Mode of the optical transmitter. normal(1)= On if Receiving signal. disabled (2) = Always off.'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("normal", 1), ("disabled", 2))

class Present(TextualConvention, Integer32):
    description = 'Indicates if a unit is present(yes) or not(no).'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("yes", 1), ("no", 2))

class PowerStatus(TextualConvention, Integer32):
    description = 'Power Status. Indicates if power is on or off'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("off", 1), ("on", 2))

class PowerType(TextualConvention, Integer32):
    description = 'Power Type. Indicates the type of power.'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("power9048", 2), ("power9220", 3), ("power9148", 4), ("power9122", 5))

class MuxType(TextualConvention, Integer32):
    description = 'Mux Type. Indicates the Mux type.'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("mux8030", 2), ("mux8031", 3), ("mux8032", 4), ("mux8033", 5), ("mux8034", 6))

class ExternalAlarmLevel(TextualConvention, Integer32):
    description = 'External alarm level. Indicates at which level a alarm shoud be active on'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("activelow", 1), ("activehigh", 2))

class AlarmStatus(TextualConvention, Integer32):
    description = 'Switch, that can be active or ceased'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("ceased", 2))

class Switch(TextualConvention, Integer32):
    description = 'Switch, that can be turned either on or off'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("off", 1), ("on", 2))

class PortType(TextualConvention, Integer32):
    description = 'Type of port'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("line", 1), ("client", 2))

class RackNumber(TextualConvention, Integer32):
    description = 'Rack Number'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 5)

class SlotNumber(TextualConvention, Integer32):
    description = 'Slot position in rack'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 17)

class BoardNumber(TextualConvention, Integer32):
    description = 'Board position in rack'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 12)

class SlotNumberPS(TextualConvention, Integer32):
    description = 'Power supply slot position in rack'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(10, 15)

class SlotNumberNmb(TextualConvention, Integer32):
    description = 'Network management board slot position in rack'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(9, 13)

class AlarmAcknowledge(TextualConvention, Integer32):
    description = 'Indicates if a alarm is acknowledged or not. Can be either yes or no'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("acknowledge", 1))

class LineLoopMode(TextualConvention, Integer32):
    description = 'Line loop mode can be normal(1) or forced(2).'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("normal", 1), ("looptest", 2))

class CDRMode(TextualConvention, Integer32):
    description = 'Different CDR settings.'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("auto3R", 1), ("bypass2R", 2), ("custom", 3), ("fddiOR100Base-FX", 4), ("stm1orOC-3", 5), ("video270Mbps", 6), ("stm4orOC-12", 7), ("gigabitEthernet", 8), ("fibreChannel", 9), ("fibreChannelx2", 10), ("stm16orOC-48", 11), ("gigabitEthernetx2", 12))

class TrmDate(DisplayString):
    description = 'Date on format YYYY-MM-DD.'
    status = 'current'
    displayHint = ''
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 10)

class TrmTime(DisplayString):
    description = 'Date on format HH:MM:SS.'
    status = 'current'
    displayHint = ''
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 8)

class SecurityMode(TextualConvention, Integer32):
    description = 'Security Mode.'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("activated", 1), ("deactivated", 2))

class SpeedLimit75(TextualConvention, Integer32):
    description = 'Speed Limit.'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noLimit", 1), ("lowLimit", 2), ("mediumLimit", 3))

class SpeedLimit76(TextualConvention, Integer32):
    description = 'Speed Limit.'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noLimit", 1), ("lowLimit", 2), ("mediumLimit", 3), ("highLimit", 4))

class CascadeStatus(TextualConvention, Integer32):
    description = 'Cascade status.'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("deactivated", 1), ("initializing", 2), ("ok", 3), ("failure", 4), ("disconnecting", 5))

class CascadeMode(TextualConvention, Integer32):
    description = 'Cascade Mode.'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("activate", 1), ("deactivate", 2))

class CDR55Mode(TextualConvention, Integer32):
    description = 'Different CDR settings.'
    status = 'current'
    displayHint = ''
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("escon", 1), ("stm1orOC-3", 2), ("fddiOR100Base-FX", 3), ("syncSignal16-32Mbps", 4))

org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
system1100 = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1))
trmAlarmHandling = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 1))
trmAlarmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1))
trmAlarmLog = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 1, 2))
trmAlarmActive = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3))
trmAlarmGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1))
trmAutoAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmAutoAcknowledge.setStatus('current')
if mibBuilder.loadTexts: trmAutoAcknowledge.setDescription('Indicates if alarms should be automatically acknowledged or not. Can be on(1) or off(2).')
trmClearAlarmLog = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmClearAlarmLog.setStatus('current')
if mibBuilder.loadTexts: trmClearAlarmLog.setDescription('Used to delete all history alarms. To delete all history alarms, a SetRequest-PDU with a clear(1) value encoding is used.')
trmTemperature = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("farenheit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmTemperature.setStatus('current')
if mibBuilder.loadTexts: trmTemperature.setDescription('Indicates the temperature unit used in the system. Can be celsius(1) or farenheit(2).')
trmAlarmTemperatureHigh = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmAlarmTemperatureHigh.setStatus('current')
if mibBuilder.loadTexts: trmAlarmTemperatureHigh.setDescription('High temperature level. This parameter indicates at what level a High temperature alarm will occur in the system. See trmTemperature if deg. Celsius or Farenheit is used.')
trmAlarmTemperatureHighHyst = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmAlarmTemperatureHighHyst.setStatus('current')
if mibBuilder.loadTexts: trmAlarmTemperatureHighHyst.setDescription('High termperature hysteresis. This parameter is used together with trmAlarmTempemperatureHigh to decide when a High temperature alarm will cease. The alarm will cease at trmAlarmTemperatureHigh - trmAlarmTemperatureHighHyst. See trmTemperature if deg. Celsius or Farenheit is used.')
trmAlarmTemperatureLow = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmAlarmTemperatureLow.setStatus('current')
if mibBuilder.loadTexts: trmAlarmTemperatureLow.setDescription('Low temperature level. This parameter indicates at what level a Low temperature alarm will occur in the system. See trmTemperature if deg. Celsius or Farenheit is used.')
trmAlarmTemperatureLowHyst = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmAlarmTemperatureLowHyst.setStatus('current')
if mibBuilder.loadTexts: trmAlarmTemperatureLowHyst.setDescription('Low termperature hysteresis. This parameter is used together with trmAlarmTemperatureLow to decide when a Low temperature alarm will cease. The alarm will cease at trmAlarmTemperatureLow - trmAlarmTemperatureLowHyst. See trmTemperature if deg. Celsius or Farenheit is used.')
trmPluginReset = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmPluginReset.setStatus('current')
if mibBuilder.loadTexts: trmPluginReset.setDescription('Used to reset all the plug in units. To reset all units, a SetRequest-PDU with a reset(1) value encoding is used.')
trmOpticalInputPowerHighPINLine = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmOpticalInputPowerHighPINLine.setStatus('current')
if mibBuilder.loadTexts: trmOpticalInputPowerHighPINLine.setDescription('Optical input power high alarm level for line interface PINs. Value displayed and set is dBm/10.')
trmOpticalInputPowerHighAPDLine = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmOpticalInputPowerHighAPDLine.setStatus('current')
if mibBuilder.loadTexts: trmOpticalInputPowerHighAPDLine.setDescription('Optical input power high alarm level for client interface APDs. Value displayed and set is dBm/10.')
trmOpticalInputPowerLowPINLine = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmOpticalInputPowerLowPINLine.setStatus('current')
if mibBuilder.loadTexts: trmOpticalInputPowerLowPINLine.setDescription('Optical input power low alarm level for client interface PINs. Value displayed and set is dBm/10.')
trmOpticalInputPowerLowAPDLine = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmOpticalInputPowerLowAPDLine.setStatus('current')
if mibBuilder.loadTexts: trmOpticalInputPowerLowAPDLine.setDescription('Optical input power low alarm level for client interface APDs. Value displayed and set is dBm/10.')
trmCascade = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 13), CascadeMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmCascade.setStatus('current')
if mibBuilder.loadTexts: trmCascade.setDescription('Shows if Cascading is activated or not and is also used to enable/diasable Cascading. activate(1) means activated and deactivate(2) means not activated.')
trmCascadeStatus = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 14), CascadeStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmCascadeStatus.setStatus('current')
if mibBuilder.loadTexts: trmCascadeStatus.setDescription('Displays the current operating mode of the Cascading. Can be deactivated[1], initializing(2), ok(3) or failure(4).')
trmOpticalInputPowerHighAPDLine2 = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmOpticalInputPowerHighAPDLine2.setStatus('current')
if mibBuilder.loadTexts: trmOpticalInputPowerHighAPDLine2.setDescription('Optical input power high alarm level for client interface APDs. Applicable for 76xx/15 units(repeaters). Value displayed and set is dBm/10.')
trmOpticalInputPowerLowAPDLine2 = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmOpticalInputPowerLowAPDLine2.setStatus('current')
if mibBuilder.loadTexts: trmOpticalInputPowerLowAPDLine2.setDescription('Optical input power low alarm level for client interface APDs. Applicable for 76xx/15 units(repeaters). Value displayed and set is dBm/10.')
trmOpticalInputPowerHigh850Client = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmOpticalInputPowerHigh850Client.setStatus('current')
if mibBuilder.loadTexts: trmOpticalInputPowerHigh850Client.setDescription('Optical input power high alarm level for 850 nm client interface. Value displayed and set is dBm/10.')
trmOpticalInputPowerHigh1310Client = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmOpticalInputPowerHigh1310Client.setStatus('current')
if mibBuilder.loadTexts: trmOpticalInputPowerHigh1310Client.setDescription('Optical input power high alarm level for 1310 nm client interface. Value displayed and set is dBm/10.')
trmOpticalInputPowerLow850Client = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmOpticalInputPowerLow850Client.setStatus('current')
if mibBuilder.loadTexts: trmOpticalInputPowerLow850Client.setDescription('Optical input power low alarm level for 850 nm client interface. Value displayed and set is dBm/10.')
trmOpticalInputPowerLow1310Client = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmOpticalInputPowerLow1310Client.setStatus('current')
if mibBuilder.loadTexts: trmOpticalInputPowerLow1310Client.setDescription('Optical input power low alarm level for 1310 nm client interface. Value displayed and set is dBm/10.')
trmAlarmSeverity = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 2))
trmAlarmSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: trmAlarmSeverityTable.setStatus('current')
if mibBuilder.loadTexts: trmAlarmSeverityTable.setDescription('A list of all type of alarms in the system.')
trmAlarmSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "TRANSMODE1100", "trmAlarmSeverityId"))
if mibBuilder.loadTexts: trmAlarmSeverityEntry.setStatus('current')
if mibBuilder.loadTexts: trmAlarmSeverityEntry.setDescription('A set of parameters that describe a alarm.')
trmAlarmSeverityId = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: trmAlarmSeverityId.setStatus('current')
if mibBuilder.loadTexts: trmAlarmSeverityId.setDescription('An id that uniquely identifies an alarm.')
trmAlarmSeverityName = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmSeverityName.setStatus('current')
if mibBuilder.loadTexts: trmAlarmSeverityName.setDescription('The alarm name.')
trmAlarmSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 2, 1, 1, 3), AlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmAlarmSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: trmAlarmSeverityLevel.setDescription('Indicates the alarm severity. Can be set to critical (1) , major (2) , minor (3) , warning (4) or off(5)')
trmAlarmExternal = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 3))
trmAlarmExternalTable = MibTable((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: trmAlarmExternalTable.setStatus('current')
if mibBuilder.loadTexts: trmAlarmExternalTable.setDescription('A list of all external alarms.')
trmAlarmExternalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "TRANSMODE1100", "trmAlarmExternalId"))
if mibBuilder.loadTexts: trmAlarmExternalEntry.setStatus('current')
if mibBuilder.loadTexts: trmAlarmExternalEntry.setDescription('A set of parameters that describe a external alarm.')
trmAlarmExternalId = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: trmAlarmExternalId.setStatus('current')
if mibBuilder.loadTexts: trmAlarmExternalId.setDescription('An id that uniquely identifies an external alarm. 1 = External alarm 1, 2 = External alarm 2 and 3 = External alarm 3.')
trmAlarmExternalName = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmAlarmExternalName.setStatus('current')
if mibBuilder.loadTexts: trmAlarmExternalName.setDescription('The External alarm name. Maximum number of characters is 20.')
trmAlarmExternalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 1, 3, 1, 1, 3), ExternalAlarmLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmAlarmExternalLevel.setStatus('current')
if mibBuilder.loadTexts: trmAlarmExternalLevel.setDescription('Alarm level that activates the alarm. Can be activelow (1) or activehigh (2).')
trmAlarmLogTable = MibTable((1, 3, 6, 1, 4, 1, 11857, 1, 1, 2, 1), )
if mibBuilder.loadTexts: trmAlarmLogTable.setStatus('current')
if mibBuilder.loadTexts: trmAlarmLogTable.setDescription('A table of history alarms in the system. The number of entries are as many as there are acknowledged alarms in the system.')
trmAlarmLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11857, 1, 1, 2, 1, 1), ).setIndexNames((0, "TRANSMODE1100", "trmAlarmLogIndex"))
if mibBuilder.loadTexts: trmAlarmLogEntry.setStatus('current')
if mibBuilder.loadTexts: trmAlarmLogEntry.setDescription('A set of parameters that describe a history alarm. A row in this table can not be created or deleted by SNMP operations on columns of the table.')
trmAlarmLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: trmAlarmLogIndex.setStatus('current')
if mibBuilder.loadTexts: trmAlarmLogIndex.setDescription('The index for this alarm entry.')
trmAlarmLogRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 2, 1, 1, 2), RackNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmLogRackNumber.setStatus('current')
if mibBuilder.loadTexts: trmAlarmLogRackNumber.setDescription('The rack number where the alarm occured.')
trmAlarmLogSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 2, 1, 1, 3), SlotNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmLogSlotNumber.setStatus('current')
if mibBuilder.loadTexts: trmAlarmLogSlotNumber.setDescription('The slot number where the alarm occured.')
trmAlarmLogName = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmLogName.setStatus('current')
if mibBuilder.loadTexts: trmAlarmLogName.setDescription('The alarm description.')
trmAlarmLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 2, 1, 1, 5), PerceivedSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmLogSeverity.setStatus('current')
if mibBuilder.loadTexts: trmAlarmLogSeverity.setDescription('The alarm severity. Can be indeterminate (0) , critical (1) , major (2) , minor (3) or warning (4).')
trmAlarmLogUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmLogUnit.setStatus('current')
if mibBuilder.loadTexts: trmAlarmLogUnit.setDescription('The type, version and index for the unit associated with the alarm.')
trmAlarmLogSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmLogSerialNumber.setStatus('current')
if mibBuilder.loadTexts: trmAlarmLogSerialNumber.setDescription('The serial number for the unit associated with the alarm.')
trmAlarmLogActTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmLogActTime.setStatus('current')
if mibBuilder.loadTexts: trmAlarmLogActTime.setDescription('The time the alarm was generated.')
trmAlarmLogDeactTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmLogDeactTime.setStatus('current')
if mibBuilder.loadTexts: trmAlarmLogDeactTime.setDescription('The time the alarm was deactivated.')
trmAlarmLogAckTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmLogAckTime.setStatus('current')
if mibBuilder.loadTexts: trmAlarmLogAckTime.setDescription('This time the alarm was acknowledged.')
trmAlarmLogAckUser = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmLogAckUser.setStatus('current')
if mibBuilder.loadTexts: trmAlarmLogAckUser.setDescription('The user that acknowledged the alarm.')
trmAlarmActiveGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3, 1))
trmAlarmActiveCounter = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmActiveCounter.setStatus('current')
if mibBuilder.loadTexts: trmAlarmActiveCounter.setDescription('Indicates the total number of active alarms in the system.')
trmAlarmActiveAcknowledgeAllDeact = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3, 1, 2), AlarmAcknowledge()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmAlarmActiveAcknowledgeAllDeact.setStatus('current')
if mibBuilder.loadTexts: trmAlarmActiveAcknowledgeAllDeact.setDescription('Acknowledges all alarm that is not acknowledged and is deactivated. To acknowledge, a SetRequest-PDU with a yes(1) value encoding is used.')
trmAlarmActiveAcknowledgeAll = MibScalar((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3, 1, 3), AlarmAcknowledge()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmAlarmActiveAcknowledgeAll.setStatus('current')
if mibBuilder.loadTexts: trmAlarmActiveAcknowledgeAll.setDescription('Acknowledgedges all alarms that is not acknowledged. To acknowledge, a SetRequest-PDU with a yes(1) value encoding is used.')
trmAlarmActiveTable = MibTable((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3, 2), )
if mibBuilder.loadTexts: trmAlarmActiveTable.setStatus('current')
if mibBuilder.loadTexts: trmAlarmActiveTable.setDescription('A table of active alarms in the system. With active alarm the meaning is a not acknowledged alarm. The number of entries are as many as there are not acknowledged alarms in the system.')
trmAlarmActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3, 2, 1), ).setIndexNames((0, "TRANSMODE1100", "trmAlarmActiveIndex"))
if mibBuilder.loadTexts: trmAlarmActiveEntry.setStatus('current')
if mibBuilder.loadTexts: trmAlarmActiveEntry.setDescription('An entry in the table of active alarms in the system. A row in this table can not be created or deleted by SNMP operations on columns of the table.')
trmAlarmActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: trmAlarmActiveIndex.setStatus('current')
if mibBuilder.loadTexts: trmAlarmActiveIndex.setDescription('The index for this alarm entry.')
trmAlarmActiveRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3, 2, 1, 2), RackNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmActiveRackNumber.setStatus('current')
if mibBuilder.loadTexts: trmAlarmActiveRackNumber.setDescription('The rack number where the alarm occured.')
trmAlarmActiveSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3, 2, 1, 3), SlotNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmActiveSlotNumber.setStatus('current')
if mibBuilder.loadTexts: trmAlarmActiveSlotNumber.setDescription('The slot number where the alarm occured.')
trmAlarmActiveName = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmActiveName.setStatus('current')
if mibBuilder.loadTexts: trmAlarmActiveName.setDescription('The alarm description')
trmAlarmActiveSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3, 2, 1, 5), PerceivedSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmActiveSeverity.setStatus('current')
if mibBuilder.loadTexts: trmAlarmActiveSeverity.setDescription('The alarm severity. Can be indeterminate (0) , critical (1) , major (2) , minor (3) or warning (4).')
trmAlarmActiveUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmActiveUnit.setStatus('current')
if mibBuilder.loadTexts: trmAlarmActiveUnit.setDescription('The type, version and index of the unit associated with the alarm.')
trmAlarmActiveSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmActiveSerialNumber.setStatus('current')
if mibBuilder.loadTexts: trmAlarmActiveSerialNumber.setDescription('The serial number of the unit associated with the alarm.')
trmAlarmActiveActTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmActiveActTime.setStatus('current')
if mibBuilder.loadTexts: trmAlarmActiveActTime.setDescription('The time the alarm was generated.')
trmAlarmActiveDeactTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmAlarmActiveDeactTime.setStatus('current')
if mibBuilder.loadTexts: trmAlarmActiveDeactTime.setDescription('The time the alarm was deactivated.')
trmAlarmActiveAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 1, 3, 2, 1, 10), AlarmAcknowledge()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trmAlarmActiveAcknowledge.setStatus('current')
if mibBuilder.loadTexts: trmAlarmActiveAcknowledge.setDescription('This oid is used to acknowledge a alarm. To acknowledge a alarm, a SetRequest-PDU with a acknowledge(1) value encoding is used.')
trmSubrack = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2))
trmSubrackList = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 1))
trmSubrackListTable = MibTable((1, 3, 6, 1, 4, 1, 11857, 1, 2, 1, 1), )
if mibBuilder.loadTexts: trmSubrackListTable.setStatus('current')
if mibBuilder.loadTexts: trmSubrackListTable.setDescription('A list of units present in the subrack(s).')
trmSubrackListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11857, 1, 2, 1, 1, 1), ).setIndexNames((0, "TRANSMODE1100", "trmListRackNumber"), (0, "TRANSMODE1100", "trmListSlotNumber"))
if mibBuilder.loadTexts: trmSubrackListEntry.setStatus('current')
if mibBuilder.loadTexts: trmSubrackListEntry.setDescription('A set of parameters that describe a unit.')
trmListRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 1, 1, 1, 1), RackNumber())
if mibBuilder.loadTexts: trmListRackNumber.setStatus('current')
if mibBuilder.loadTexts: trmListRackNumber.setDescription('This object indicates in what rack the unit is situated in.')
trmListSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 1, 1, 1, 2), SlotNumber())
if mibBuilder.loadTexts: trmListSlotNumber.setStatus('current')
if mibBuilder.loadTexts: trmListSlotNumber.setDescription('This object indicates in what slot the unit is situated in. Can be slot 1-12.')
trmListUnitPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 1, 1, 1, 3), Present()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmListUnitPresent.setStatus('current')
if mibBuilder.loadTexts: trmListUnitPresent.setDescription('This object indicates if the unit is present yes(1) or not no(2).')
trmListProductNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmListProductNumber.setStatus('current')
if mibBuilder.loadTexts: trmListProductNumber.setDescription('The Product number of the unit (XXYY/ZZ) where: Board type = XX Board version = YY Board index = ZZ.')
trmListProductDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmListProductDescription.setStatus('current')
if mibBuilder.loadTexts: trmListProductDescription.setDescription('A product description of the unit.')
trmListHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmListHwRevision.setStatus('current')
if mibBuilder.loadTexts: trmListHwRevision.setDescription('The hardware revision of the unit.')
trmListSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmListSerialNumber.setStatus('current')
if mibBuilder.loadTexts: trmListSerialNumber.setDescription('The serial number of the unit.')
trmListManufacturingDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmListManufacturingDate.setStatus('current')
if mibBuilder.loadTexts: trmListManufacturingDate.setDescription('The manufacturing date of the unit. Format is Year:Week.')
trmListSoftwareProdNo = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmListSoftwareProdNo.setStatus('current')
if mibBuilder.loadTexts: trmListSoftwareProdNo.setDescription('The software product number of the software on this unit.')
trmListSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trmListSwVersion.setStatus('current')
if mibBuilder.loadTexts: trmListSwVersion.setDescription('Revision number of the software on this unit.')
trmSubrackUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2))
trm6001 = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1))
trm6001PM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 1))
trm6001Table = MibTable((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 1, 1), )
if mibBuilder.loadTexts: trm6001Table.setStatus('current')
if mibBuilder.loadTexts: trm6001Table.setDescription('List of NMB(s).')
trm6001Entry = MibTableRow((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 1, 1, 1), ).setIndexNames((0, "TRANSMODE1100", "trm6001RackNumber"), (0, "TRANSMODE1100", "trm6001SlotNumber"))
if mibBuilder.loadTexts: trm6001Entry.setStatus('current')
if mibBuilder.loadTexts: trm6001Entry.setDescription('A set of parameters that describes an NMB')
trm6001RackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 1, 1, 1, 1), RackNumber())
if mibBuilder.loadTexts: trm6001RackNumber.setStatus('current')
if mibBuilder.loadTexts: trm6001RackNumber.setDescription('The network management board rack number.')
trm6001SlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 1, 1, 1, 2), SlotNumberNmb())
if mibBuilder.loadTexts: trm6001SlotNumber.setStatus('current')
if mibBuilder.loadTexts: trm6001SlotNumber.setDescription('The network management board slot number.')
trm6001IPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm6001IPAddress.setStatus('current')
if mibBuilder.loadTexts: trm6001IPAddress.setDescription('The network management board IP address.')
trm6001MACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm6001MACAddress.setStatus('current')
if mibBuilder.loadTexts: trm6001MACAddress.setDescription('The network management board MAC address.')
trm6001Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm6001Temperature.setStatus('current')
if mibBuilder.loadTexts: trm6001Temperature.setDescription('The network management board temperature in deg. C or deg. F. See trmTemperature if deg. Celsius or Farenheit is used.')
trm6001UpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm6001UpTime.setStatus('current')
if mibBuilder.loadTexts: trm6001UpTime.setDescription('The network management board up time.')
trm6001Date = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 1, 1, 1, 7), TrmDate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm6001Date.setStatus('current')
if mibBuilder.loadTexts: trm6001Date.setDescription('Used to set the NMB date on format YYYY-MM-DD.')
trm6001Time = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 1, 1, 1, 8), TrmTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm6001Time.setStatus('current')
if mibBuilder.loadTexts: trm6001Time.setDescription('Used to set the NMB time on format HH:MM:SS.')
trm6001SwReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm6001SwReset.setStatus('current')
if mibBuilder.loadTexts: trm6001SwReset.setDescription('Used to reset the NMB unit. To reset the NMB unit, a SetRequest-PDU with a reset(1) value encoding is used.')
trm6001FM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 2))
trm6001Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 2, 0))
trm6001TrapExternal1 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 2, 0, 1)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm6001TrapExternal1.setStatus('current')
if mibBuilder.loadTexts: trm6001TrapExternal1.setDescription('This trap is sent when a External 1 alarm is generated at the NMB 6001 unit.')
trm6001TrapExternal2 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 2, 0, 2)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm6001TrapExternal2.setStatus('current')
if mibBuilder.loadTexts: trm6001TrapExternal2.setDescription('This trap is sent when a External 2 alarm is generated at the NMB 6001 unit.')
trm6001TrapExternal3 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 2, 0, 3)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm6001TrapExternal3.setStatus('current')
if mibBuilder.loadTexts: trm6001TrapExternal3.setDescription('This trap is sent when a External 3 alarm is generated at the NMB 6001 unit.')
trm6001CascadeFailure = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 1, 2, 0, 4)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm6001CascadeFailure.setStatus('current')
if mibBuilder.loadTexts: trm6001CascadeFailure.setDescription('This trap is sent when a attempt to enable Cascading has failed or connection is lost with the cascading rack.')
trm9xxx = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 2))
trm9xxxPM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 2, 1))
trm9xxxTable = MibTable((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 2, 1, 1), )
if mibBuilder.loadTexts: trm9xxxTable.setStatus('current')
if mibBuilder.loadTexts: trm9xxxTable.setDescription('A list of power supply units in the subrack(s).')
trm9xxxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 2, 1, 1, 1), ).setIndexNames((0, "TRANSMODE1100", "trm9xxxRackNumber"), (0, "TRANSMODE1100", "trm9xxxSlotNumber"))
if mibBuilder.loadTexts: trm9xxxEntry.setStatus('current')
if mibBuilder.loadTexts: trm9xxxEntry.setDescription('A set of parameters that describe a power supply unit.')
trm9xxxRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 2, 1, 1, 1, 1), RackNumber())
if mibBuilder.loadTexts: trm9xxxRackNumber.setStatus('current')
if mibBuilder.loadTexts: trm9xxxRackNumber.setDescription('This object indicates in what rack the power supply is situated in.')
trm9xxxSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 2, 1, 1, 1, 2), SlotNumberPS())
if mibBuilder.loadTexts: trm9xxxSlotNumber.setStatus('current')
if mibBuilder.loadTexts: trm9xxxSlotNumber.setDescription('This object indicates in what slot number the power supply is situated in. Can be slot 10 or 11.')
trm9xxxPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 2, 1, 1, 1, 3), Present()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm9xxxPresent.setStatus('current')
if mibBuilder.loadTexts: trm9xxxPresent.setDescription('This parameter indicates if the power supply is present or not. yes(1) means present and no(2) means not present.')
trm9xxxType = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 2, 1, 1, 1, 4), PowerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm9xxxType.setStatus('current')
if mibBuilder.loadTexts: trm9xxxType.setDescription('This parameter describes what kind of power supply this unit is. Power9048(2) means a power supply with input pover 48 VDC, Power9220(3) means 100-240 VAC. If the type is unknown this parameter is unknown(1).')
trm9xxxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 2, 1, 1, 1, 5), PowerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm9xxxStatus.setStatus('current')
if mibBuilder.loadTexts: trm9xxxStatus.setDescription('This parameter indicates the status of the power supply. off(1) means that the power supply not is operating and on(2) means that it is operating.')
trm9xxxFM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 2, 2))
trm9xxxTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 2, 2, 0))
trm9xxxTrapFailure = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 2, 2, 0, 1)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm9xxxTrapFailure.setStatus('current')
if mibBuilder.loadTexts: trm9xxxTrapFailure.setDescription('This trap indicates that a fault was detected on a power supply or the input power is removed.')
trm9xxxTrapMissing = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 2, 2, 0, 2)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm9xxxTrapMissing.setStatus('current')
if mibBuilder.loadTexts: trm9xxxTrapMissing.setDescription('This trap is sent when a power supply is missing.')
trm75xx = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3))
trm75xxPM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1))
trm75xxTable = MibTable((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1), )
if mibBuilder.loadTexts: trm75xxTable.setStatus('current')
if mibBuilder.loadTexts: trm75xxTable.setDescription('A list of 70 & 75 units in the subrack(s).')
trm75xxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1), ).setIndexNames((0, "TRANSMODE1100", "trm75xxRackNumber"), (0, "TRANSMODE1100", "trm75xxSlotNumber"))
if mibBuilder.loadTexts: trm75xxEntry.setStatus('current')
if mibBuilder.loadTexts: trm75xxEntry.setDescription('A set of parameters that describe a 70 or a 75 unit.')
trm75xxRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 1), RackNumber())
if mibBuilder.loadTexts: trm75xxRackNumber.setStatus('current')
if mibBuilder.loadTexts: trm75xxRackNumber.setDescription('This parameter indicates in what rack the unit is situated in.')
trm75xxSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 2), BoardNumber())
if mibBuilder.loadTexts: trm75xxSlotNumber.setStatus('current')
if mibBuilder.loadTexts: trm75xxSlotNumber.setDescription('This parameter indicates in what slot number the unit is situated in. Can be slot 1 - 8.')
trm75xxRxLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm75xxRxLine.setStatus('current')
if mibBuilder.loadTexts: trm75xxRxLine.setDescription('This parameter indicates the status of the optical input for the line interface. It corresponds to the client Rx LED status of the unit. Can be Receiving or Not receiving.')
trm75xxEstProtLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm75xxEstProtLine.setStatus('current')
if mibBuilder.loadTexts: trm75xxEstProtLine.setDescription('This parameter indicates the Estimated Protocol for the line interface input.')
trm75xxEstFibRateLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm75xxEstFibRateLine.setStatus('current')
if mibBuilder.loadTexts: trm75xxEstFibRateLine.setDescription('This parameter indicates the Estimated Fiber Rate for the line interface input in Mbit/s.')
trm75xxTxLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm75xxTxLine.setStatus('current')
if mibBuilder.loadTexts: trm75xxTxLine.setDescription('This parameter indicates the status of the optical output power for the line interface. It corresponds to the line Tx LED status of the unit. Can be on or off.')
trm75xxTxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 7), TxMode75()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm75xxTxMode.setStatus('current')
if mibBuilder.loadTexts: trm75xxTxMode.setDescription('This parameter indicates the mode of the optical transmitter for line and client TX. Can be set to normal(1) or disabled(2). normal (1): Optical output when receiving signal. disabled(2): Optical output is OFF.')
trm75xxWavelengthLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm75xxWavelengthLine.setStatus('current')
if mibBuilder.loadTexts: trm75xxWavelengthLine.setDescription('This parameter indicates the nominal wavelength for the line interface transiever.')
trm75xxRxClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm75xxRxClient.setStatus('current')
if mibBuilder.loadTexts: trm75xxRxClient.setDescription('This parameter indicates the status of the optical input for the client interface. It corresponds to the client Rx LED status of the unit. Can be Receiving or Not receiving.')
trm75xxEstProtClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm75xxEstProtClient.setStatus('current')
if mibBuilder.loadTexts: trm75xxEstProtClient.setDescription('This parameter indicates the Estimated Protocol for the client interface input.')
trm75xxEstFibRateClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm75xxEstFibRateClient.setStatus('current')
if mibBuilder.loadTexts: trm75xxEstFibRateClient.setDescription('This parameter indicates the Estimated Fiber Rate for the client interface input in Mbit/s.')
trm75xxTxClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm75xxTxClient.setStatus('current')
if mibBuilder.loadTexts: trm75xxTxClient.setDescription('This parameter indicates the status of the optical output power for the client interface. It corresponds to the client Tx LED status of the unit. Can be on or off.')
trm75xxTxModeClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 13), TxMode75()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm75xxTxModeClient.setStatus('obsolete')
if mibBuilder.loadTexts: trm75xxTxModeClient.setDescription('This object is obsolete and not used anymore.')
trm75xxIDStringClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm75xxIDStringClient.setStatus('current')
if mibBuilder.loadTexts: trm75xxIDStringClient.setDescription('This parameter identifies the equipment(ID String) connected to the client interface. Maximum number of characters is 20.')
trm75xxIPAddressClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm75xxIPAddressClient.setStatus('current')
if mibBuilder.loadTexts: trm75xxIPAddressClient.setDescription('This parameter indentifies the equipment(IP Address) connected to the client interface.')
trm75xxWavelengthClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm75xxWavelengthClient.setStatus('current')
if mibBuilder.loadTexts: trm75xxWavelengthClient.setDescription('This parameter indicates the nominal wavelength for the client interface transiever.')
trm75xxSpeedLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 1, 1, 1, 17), SpeedLimit75()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm75xxSpeedLimit.setStatus('current')
if mibBuilder.loadTexts: trm75xxSpeedLimit.setDescription('This parameter indicates the speed limit set for this unit and is used to set a new speed limit. It generates an alarm and disables Line and Client Tx if the Client bitrate is higher than a predefined protocol. The alarm is ceased and Tx is enabled again at a lower value (hysteresis). Speed Limit is deactivated if trm75xxTxMode is disabled(2). Speed Limit can be set in 3 modes to allow different protocols: noLimit(1): Any protocol is allowed. lowLimit(2): 100Base-FX, STM1/OC3, ESCON & Video 270Mb. mediumLimit(3): All protocols above + STM4/OC-12.')
trm75xxFM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 2))
trm75xxTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 2, 0))
trm75xxTrapGlitchLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 2, 0, 1)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm75xxTrapGlitchLine.setStatus('current')
if mibBuilder.loadTexts: trm75xxTrapGlitchLine.setDescription('This trap is sent when a unit experiences a split second optical input power glitch at the line interface.')
trm75xxTrapLopLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 2, 0, 2)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm75xxTrapLopLine.setStatus('current')
if mibBuilder.loadTexts: trm75xxTrapLopLine.setDescription('This trap is sent when the optical input power is lost at the line interface.')
trm75xxTrapTxLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 2, 0, 3)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm75xxTrapTxLine.setStatus('current')
if mibBuilder.loadTexts: trm75xxTrapTxLine.setDescription('This trap is sent when a unit fails to generate optical output power at Tx line interface.')
trm75xxTrapTxDisableLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 2, 0, 4)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm75xxTrapTxDisableLine.setStatus('current')
if mibBuilder.loadTexts: trm75xxTrapTxDisableLine.setDescription('This trap is sent when the optical output power for the line interface is disabled.')
trm75xxTrapGlitchClient = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 2, 0, 5)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm75xxTrapGlitchClient.setStatus('current')
if mibBuilder.loadTexts: trm75xxTrapGlitchClient.setDescription('This trap is sent when a unit experiences a split second optical input power glitch at the client interface.')
trm75xxTrapLopClient = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 2, 0, 6)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm75xxTrapLopClient.setStatus('current')
if mibBuilder.loadTexts: trm75xxTrapLopClient.setDescription('This trap is sent when the optical input power is lost at the client interface.')
trm75xxTrapTxClient = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 2, 0, 7)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm75xxTrapTxClient.setStatus('current')
if mibBuilder.loadTexts: trm75xxTrapTxClient.setDescription('This trap is sent when a unit fails to generate optical output power at Tx client.')
trm75xxTrapTxDisableClient = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 3, 2, 0, 8)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm75xxTrapTxDisableClient.setStatus('current')
if mibBuilder.loadTexts: trm75xxTrapTxDisableClient.setDescription('This trap is sent when the optical output power for the client interface is disabled.')
trm76xx = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4))
trm76xxPM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1))
trm76xxTable = MibTable((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1), )
if mibBuilder.loadTexts: trm76xxTable.setStatus('current')
if mibBuilder.loadTexts: trm76xxTable.setDescription('A list of 76YY/ZZ in the subrack(s).')
trm76xxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1), ).setIndexNames((0, "TRANSMODE1100", "trm76xxRackNumber"), (0, "TRANSMODE1100", "trm76xxSlotNumber"))
if mibBuilder.loadTexts: trm76xxEntry.setStatus('current')
if mibBuilder.loadTexts: trm76xxEntry.setDescription('A set of parameters that describe the Subrack units')
trm76xxRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 1), RackNumber())
if mibBuilder.loadTexts: trm76xxRackNumber.setStatus('current')
if mibBuilder.loadTexts: trm76xxRackNumber.setDescription('This parameter indicates in what rack the unit is situated in.')
trm76xxSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 2), BoardNumber())
if mibBuilder.loadTexts: trm76xxSlotNumber.setStatus('current')
if mibBuilder.loadTexts: trm76xxSlotNumber.setDescription('This parameter indicates in what slot number the unit is situated in. Can be any of slot 1 - 8.')
trm76xxTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxTemperature.setStatus('current')
if mibBuilder.loadTexts: trm76xxTemperature.setDescription('This parameter indicates the temperature measured by the unit in deg. C or deg. F. See trmSubrackConfigTemp if deg. Celsius or Farenheit is used.')
trm76xxCDR = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 4), CDRMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm76xxCDR.setStatus('current')
if mibBuilder.loadTexts: trm76xxCDR.setDescription('This parameter indicates the working mode of the CDR clock recovery circuit. Can be auto3R(1), bypass2R(2), custom(3),fddiOR100Base-FX(4), stm1orOC-3(5), video270Mbps(6), stm4orOC-12(7), gigabitEthernet(8), fibreChannel(9), fibreChannelx2(10), stm16orOC-48(11) or gigabitEthernetx2(12). custom(3) can not be set, it just indicates if a custom protocol is set with oid trm76xxCustomFibRate.')
trm76xxCustomFibRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm76xxCustomFibRate.setStatus('current')
if mibBuilder.loadTexts: trm76xxCustomFibRate.setDescription('This parameter is used to set the working mode of the CDR clock recovery circuit(Custom mode). Custom mode can be set between 30000 and 2700000 Kbit/s.')
trm76xxTxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 6), TxMode76()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm76xxTxMode.setStatus('current')
if mibBuilder.loadTexts: trm76xxTxMode.setDescription('This parameter indicates the mode of the optical transmitter for line and client TX. Can be set to normal(1), disabled(2) or forcedon(3). normal (1): Optical output when receiving signal. disabled(2): Optical output is OFF. forcedon(3): Optical output is ON. (Normally, forcedon(3) is used for test purpose only)')
trm76xxLineLoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 7), LineLoopMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm76xxLineLoopMode.setStatus('current')
if mibBuilder.loadTexts: trm76xxLineLoopMode.setDescription('This parameter is used to set the line loop mode. Can be set to normal(1) or looptest(2). normal(1): The line loop test function is off. looptest(2): Line is looped, RX=TX. (Normally, Loop test is only used for installation, test purpose or fault-location).')
trm76xxSwReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm76xxSwReset.setStatus('current')
if mibBuilder.loadTexts: trm76xxSwReset.setDescription('Used to reset the unit. To reset the unit, a SetRequest-PDU with a reset(1) value encoding is used.')
trm76xxRxLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxRxLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxRxLine.setDescription('This parameter indicates the status of the optical input for the line interface. It corresponds to the client Rx LED status of the unit. Can be Receiving or Not receiving.')
trm76xxOpticalInPowLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxOpticalInPowLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxOpticalInPowLine.setDescription('This parameter indicates the Optical input power for the line interface. When the Optical input power is to low to measure this parameter is -500 (-50 dBm). If the Optical output power is to high to measure this parameter is -20 (-2 dBm). If this parameter is invalid -1 (-0.1 dBm) is returned. Divide this value by 10 to show optical input power in dBm.')
trm76xxSpeedLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 11), SpeedLimit76()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm76xxSpeedLimit.setStatus('current')
if mibBuilder.loadTexts: trm76xxSpeedLimit.setDescription('This parameter indicates the speed limit set for this unit and is used to set a new speed limit. It generates an alarm and disables Line and Client Tx if the Client bitrate is higher than a predefined protocol. The alarm is ceased and Tx is enabled again at a lower value (hysteresis). Speed Limit is deactivated if trm76xxTxMode is disabled(2) or forcedon(3). Speed Limit can be set in 4 modes to allow different protocols: noLimit(1): Any protocol is allowed. lowLimit(2): 100Base-FX, STM1/OC3, ESCON & Video 270Mb. mediumLimit(3): All protocols above + STM4/OC-12. highLimit(4): All protocols above + Fibre channel & Gigabit Ethernet.')
trm76xxEstProtLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxEstProtLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxEstProtLine.setDescription('This parameter indicates the Estimated Protocol for the line interface Rx.')
trm76xxEstFibRateLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxEstFibRateLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxEstFibRateLine.setDescription('This parameter indicates the Estimated Fiber Rate for the line interface Rx in Mbit/s.')
trm76xxTxLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxTxLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxTxLine.setDescription('This parameter indicates the status of the optical output power for the line interface. It corresponds to the line Tx LED status of the unit. Can be on or off.')
trm76xxOpticalOutPowLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxOpticalOutPowLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxOpticalOutPowLine.setDescription('This parameter indicates the optical output power for the line interface. If data not is available yet this parameter is -1(-0.1 dBm). If this parameter is -100 (-10 dBm) the output power is equal too or less than -100 (-10 dBm). Divide this value by 10 to show the optical output power in dBm.')
trm76xxProdOutPowLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxProdOutPowLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxProdOutPowLine.setDescription('This parameter indicates the production output power for the line interface. If data not is valid yet this parameter is -1 (-0.1 dBm). Divide this value by 10 to show the production output power in dBm.')
trm76xxLaserBiasCurLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxLaserBiasCurLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxLaserBiasCurLine.setDescription('This parameter indicates the laser bias current for the line interface. If this parameter is 5450(545 mA) the laser bias current is more or equal to 545 mA. Divide this value by 10 to show the laser bias current in mA.')
trm76xxProdLaserBiasCurLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxProdLaserBiasCurLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxProdLaserBiasCurLine.setDescription('This parameter indicates the production laser bias current for the line interface. Divide this value by 10 to show the laser bias current in mA.')
trm76xxWavelengthLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxWavelengthLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxWavelengthLine.setDescription('This parameter indicates the nominal wavelength for the line interface transiever.')
trm76xxRxClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxRxClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxRxClient.setDescription('This parameter indicates the status of the optical input for the client interface. It corresponds to the client Rx LED status of the unit. Can be Receiving or Not receiving.')
trm76xxEstProtClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxEstProtClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxEstProtClient.setDescription('This parameter indicates the Estimated Protocol for the client interface Rx.')
trm76xxEstFibRateClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxEstFibRateClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxEstFibRateClient.setDescription('This parameter indicates the Estimated Fiber Rate for the client interface Rx in Mbit/s.')
trm76xxTxClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxTxClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxTxClient.setDescription('This parameter indicates the status of the optical output power for the client interface. It corresponds to the client Tx LED status of the unit. Can be on or off.')
trm76xxIDStringClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm76xxIDStringClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxIDStringClient.setDescription('This parameter identifies the equipment(ID String) connected to the client interface. Maximum number of characters is 20.')
trm76xxIPAddressClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm76xxIPAddressClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxIPAddressClient.setDescription('This parameter indentifies the equipment(IP Address) connected to the client interface.')
trm76xxWavelengthClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxWavelengthClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxWavelengthClient.setDescription('This parameter indicates the nominal wavelength for the client interface transiever.')
trm76xxOpticalInPowClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxOpticalInPowClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxOpticalInPowClient.setDescription('This parameter indicates the Optical input power for the client interface. When the Optical input power is to low to measure this parameter is -500 (-50 dBm). If the Optical output power is to high to measure this parameter is -20 (-2 dBm). If this parameter is invalid -1 (-0.1 dBm) is returned. Divide this value by 10 to show optical input power in dBm.')
trm76xxOpticalOutPowClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxOpticalOutPowClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxOpticalOutPowClient.setDescription('This parameter indicates the optical output power for the client interface. If data not is available yet this parameter is -1(-0.1 dBm). If this parameter is -100 (-10 dBm) the output power is equal too or less than -100 (-10 dBm). Divide this value by 10 to show the optical output power in dBm.')
trm76xxLaserBiasCurClient = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 1, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm76xxLaserBiasCurClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxLaserBiasCurClient.setDescription('This parameter indicates the laser bias current for the client interface. If this parameter is 5450(545 mA) the laser bias current is more or equal to 545 mA. Divide this value by 10 to show the laser bias current in mA.')
trm76xxFM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2))
trm76xxTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0))
trm76xxTrapCDRAutoModeRangeChangeLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 1)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapCDRAutoModeRangeChangeLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapCDRAutoModeRangeChangeLine.setDescription('This trap is sent when a client equipment might be using a protocol not specified for auto mode or it might have changed the protocol. If auto mode is used consider goto manual mode instead. This trap concerns the regeneration at the Tx line output.')
trm76xxTrapRxGlitchLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 2)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapRxGlitchLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapRxGlitchLine.setDescription('This trap is sent when a unit experiences a split second optical input power glitch at the line interface.')
trm76xxTrapLopLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 3)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapLopLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapLopLine.setDescription('This trap is sent when the optical input power is lost at the line interface.')
trm76xxTrapRxHighPowerLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 4)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapRxHighPowerLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapRxHighPowerLine.setDescription('This trap is sent when the optical input power for line is higher than trmOpticalInputPowerHighPINLine or trmOpticalInputPowerHighAPDLine.')
trm76xxTrapRxLowPowerLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 5)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapRxLowPowerLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapRxLowPowerLine.setDescription('This trap is sent when the optical input power for line is lower than trmOpticalInputPowerLowPINLine or trmOpticalInputPowerLowAPDLine.')
trm76xxTrapLoLLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 6)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapLoLLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapLoLLine.setDescription('This trap is sent when the line Tx indicates loss of 3R synchronization.')
trm76xxTrapTxLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 7)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapTxLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapTxLine.setDescription('This trap is sent when a unit fails to generate optical output power at Tx line.')
trm76xxTrapSFPFailureLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 8)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapSFPFailureLine.setStatus('obsolete')
if mibBuilder.loadTexts: trm76xxTrapSFPFailureLine.setDescription('This trap/alarm is not used in the system and is obsolete.')
trm76xxTrapSFPMissingLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 9)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapSFPMissingLine.setStatus('obsolete')
if mibBuilder.loadTexts: trm76xxTrapSFPMissingLine.setDescription('This trap/alarm is not used in the system and is obsolete.')
trm76xxTrapCDRAutoModeRangeChangeClient = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 10)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapCDRAutoModeRangeChangeClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapCDRAutoModeRangeChangeClient.setDescription('This trap is sent when a client equipment might be using a protocol not specified for auto mode or it might have changed the protocol. If auto mode is used consider goto manual mode instead. This trap concerns the regeneration at the Tx client output.')
trm76xxTrapRxGlitchClient = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 11)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapRxGlitchClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapRxGlitchClient.setDescription('This trap is sent when a unit experiences a split second optical input power glitch at the client interface.')
trm76xxTrapLopClient = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 12)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapLopClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapLopClient.setDescription('This trap is sent when the optical input power is lost at the client interface.')
trm76xxTrapRxHighPowerClient = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 13)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapRxHighPowerClient.setStatus('obsolete')
if mibBuilder.loadTexts: trm76xxTrapRxHighPowerClient.setDescription('This trap/alarm is not used in the system and the object is obsolete.')
trm76xxTrapRxLowPowerClient = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 14)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapRxLowPowerClient.setStatus('obsolete')
if mibBuilder.loadTexts: trm76xxTrapRxLowPowerClient.setDescription('This trap/alarm is not used in the system and the object is obsolete.')
trm76xxTrapLoLClient = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 15)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapLoLClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapLoLClient.setDescription('This trap is sent when the client Tx indicates loss of 3R synchronization.')
trm76xxTrapTxClient = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 16)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapTxClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapTxClient.setDescription('This trap is sent when a unit fails to generate optical output power at Tx client.')
trm76xxTrapSFPFailureClient = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 17)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapSFPFailureClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapSFPFailureClient.setDescription('This trap is sent when a unit have a client SFP transiever got a failure or a Bias temperature alarm.')
trm76xxTrapSFPMissingClient = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 18)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapSFPMissingClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapSFPMissingClient.setDescription("This trap is sent when a unit doesn't have a client SFP transiever.")
trm76xxTrapTxDisable = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 19)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapTxDisable.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapTxDisable.setDescription('This trap is sent when the optical output power for both the line and client interface have been disabled.')
trm76xxTrapLaserDegradationLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 20)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapLaserDegradationLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapLaserDegradationLine.setDescription('This trap is sent when there is a laser degradation on the line laser. This means that the laser bias current is raised to be able to keep the optical output from the laser.')
trm76xxTrapEyeQualityLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 21)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapEyeQualityLine.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapEyeQualityLine.setDescription('For future use.')
trm76xxTrapEyeQualityClient = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 4, 2, 0, 22)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm76xxTrapEyeQualityClient.setStatus('current')
if mibBuilder.loadTexts: trm76xxTrapEyeQualityClient.setDescription('For future use.')
trm803x = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 5))
trm803xPM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 5, 1))
trm803xTable = MibTable((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 5, 1, 1), )
if mibBuilder.loadTexts: trm803xTable.setStatus('current')
if mibBuilder.loadTexts: trm803xTable.setDescription('A list of 803x units.')
trm803xEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 5, 1, 1, 1), ).setIndexNames((0, "TRANSMODE1100", "trm803xRackNumber"), (0, "TRANSMODE1100", "trm803xSlotNumber"))
if mibBuilder.loadTexts: trm803xEntry.setStatus('current')
if mibBuilder.loadTexts: trm803xEntry.setDescription('A set of parameters that describe a 803x unit.')
trm803xRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 5, 1, 1, 1, 1), RackNumber())
if mibBuilder.loadTexts: trm803xRackNumber.setStatus('current')
if mibBuilder.loadTexts: trm803xRackNumber.setDescription('This object indicates in what rack the 803x unit is situated in.')
trm803xSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 5, 1, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: trm803xSlotNumber.setStatus('current')
if mibBuilder.loadTexts: trm803xSlotNumber.setDescription('This object indicates in what slot number the 803x unitis situated in. Can only be slot 12.')
trm803xMuxType = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 5, 1, 1, 1, 3), MuxType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm803xMuxType.setStatus('current')
if mibBuilder.loadTexts: trm803xMuxType.setDescription('This parameter indicates what Mux type this is. Can be none(1), mux8030(2), mux8031(3), mux8032(4), mux8033(5) or mux8034(6).')
trm803xIDStringLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 5, 1, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm803xIDStringLine.setStatus('current')
if mibBuilder.loadTexts: trm803xIDStringLine.setDescription('This parameter identifies the equipment connected to the line interface. The ID string can be used to indentify a fiber pair/link. Maximum number of characters is 20.')
trm803xIPAddressLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 5, 1, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm803xIPAddressLine.setStatus('current')
if mibBuilder.loadTexts: trm803xIPAddressLine.setDescription('This parameter identifies the equipment connected to the line interface. The IP address can be used to indentify the corresponding NMB unit.')
trm2204 = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 6))
trm2204PM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 6, 1))
trm2204Table = MibTable((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 6, 1, 1), )
if mibBuilder.loadTexts: trm2204Table.setStatus('current')
if mibBuilder.loadTexts: trm2204Table.setDescription('A list of 2204 units.')
trm2204Entry = MibTableRow((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 6, 1, 1, 1), ).setIndexNames((0, "TRANSMODE1100", "trm2204RackNumber"), (0, "TRANSMODE1100", "trm2204SlotNumber"))
if mibBuilder.loadTexts: trm2204Entry.setStatus('current')
if mibBuilder.loadTexts: trm2204Entry.setDescription('A set of parameters that describe a 2204 unit.')
trm2204RackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 6, 1, 1, 1, 1), RackNumber())
if mibBuilder.loadTexts: trm2204RackNumber.setStatus('current')
if mibBuilder.loadTexts: trm2204RackNumber.setDescription('This object indicates in what rack the 2204 unit is situated in.')
trm2204SlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 6, 1, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: trm2204SlotNumber.setStatus('current')
if mibBuilder.loadTexts: trm2204SlotNumber.setDescription('This object indicates in what slot number the 2204 unitis situated in. Can be slot 1-8.')
trm2204SecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 6, 1, 1, 1, 3), SecurityMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm2204SecurityMode.setStatus('current')
if mibBuilder.loadTexts: trm2204SecurityMode.setDescription('This parameter indicates the security mode for the unit. It is also used to set the Security Mode for the unit. Can be activated(1) or deactivated(2).')
trm26xx = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7))
trm26xxPM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1))
trm26xxTable = MibTable((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1), )
if mibBuilder.loadTexts: trm26xxTable.setStatus('current')
if mibBuilder.loadTexts: trm26xxTable.setDescription('A list of 26xx units in the subrack(s).')
trm26xxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1), ).setIndexNames((0, "TRANSMODE1100", "trm26xxRackNumber"), (0, "TRANSMODE1100", "trm26xxSlotNumber"))
if mibBuilder.loadTexts: trm26xxEntry.setStatus('current')
if mibBuilder.loadTexts: trm26xxEntry.setDescription('A set of parameters that describe a 26xx unit.')
trm26xxRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 1), RackNumber())
if mibBuilder.loadTexts: trm26xxRackNumber.setStatus('current')
if mibBuilder.loadTexts: trm26xxRackNumber.setDescription('This parameter indicates in what rack the unit is situated in.')
trm26xxSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 2), BoardNumber())
if mibBuilder.loadTexts: trm26xxSlotNumber.setStatus('current')
if mibBuilder.loadTexts: trm26xxSlotNumber.setDescription('This parameter indicates in what slot number the unit is situated in. Can be slot 1 - 8.')
trm26xxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm26xxStatus.setStatus('current')
if mibBuilder.loadTexts: trm26xxStatus.setDescription('This parameter indicates the status of the optical input for the line interface. It corresponds to the client Rx LED status of the unit. Can be Receiving or Not receiving.')
trm26xxTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm26xxTemperature.setStatus('current')
if mibBuilder.loadTexts: trm26xxTemperature.setDescription('The network management board temperature in deg. C or deg. F. See trmTemperature if deg. Celsius or Farenheit is used.')
trm26xxTxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 5), TxMode75()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm26xxTxMode.setStatus('current')
if mibBuilder.loadTexts: trm26xxTxMode.setDescription('This parameter indicates the mode of the optical transmitter for line and client TX. Can be set to normal(1) or disabled(2). normal (1): Optical output when receiving signal. disabled(2): Optical output is OFF.')
trm26xxSwReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm26xxSwReset.setStatus('current')
if mibBuilder.loadTexts: trm26xxSwReset.setDescription('Used to reset the unit. To reset the unit, a SetRequest-PDU with a reset(1) value encoding is used.')
trm26xxOpticalPowerPIN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm26xxOpticalPowerPIN1.setStatus('current')
if mibBuilder.loadTexts: trm26xxOpticalPowerPIN1.setDescription('')
trm26xxOpticalPowerPIN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm26xxOpticalPowerPIN2.setStatus('current')
if mibBuilder.loadTexts: trm26xxOpticalPowerPIN2.setDescription('')
trm26xxLogOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm26xxLogOpticalPower.setStatus('current')
if mibBuilder.loadTexts: trm26xxLogOpticalPower.setDescription('')
trm26xxTemperatureTEC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm26xxTemperatureTEC1.setStatus('current')
if mibBuilder.loadTexts: trm26xxTemperatureTEC1.setDescription('')
trm26xxTemperatureTEC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm26xxTemperatureTEC2.setStatus('current')
if mibBuilder.loadTexts: trm26xxTemperatureTEC2.setDescription('')
trm26xxVoltageTEC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm26xxVoltageTEC1.setStatus('current')
if mibBuilder.loadTexts: trm26xxVoltageTEC1.setDescription('')
trm26xxVoltageTEC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm26xxVoltageTEC2.setStatus('obsolete')
if mibBuilder.loadTexts: trm26xxVoltageTEC2.setDescription('')
trm26xxCurrentTEC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm26xxCurrentTEC1.setStatus('current')
if mibBuilder.loadTexts: trm26xxCurrentTEC1.setDescription('')
trm26xxCurrentTEC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm26xxCurrentTEC2.setStatus('current')
if mibBuilder.loadTexts: trm26xxCurrentTEC2.setDescription('')
trm26xxCurrentBIAS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm26xxCurrentBIAS1.setStatus('current')
if mibBuilder.loadTexts: trm26xxCurrentBIAS1.setDescription('')
trm26xxCurrentBIAS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm26xxCurrentBIAS2.setStatus('current')
if mibBuilder.loadTexts: trm26xxCurrentBIAS2.setDescription('')
trm26xxVoltageBIAS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm26xxVoltageBIAS1.setStatus('current')
if mibBuilder.loadTexts: trm26xxVoltageBIAS1.setDescription('')
trm26xxVoltageBIAS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm26xxVoltageBIAS2.setStatus('current')
if mibBuilder.loadTexts: trm26xxVoltageBIAS2.setDescription('')
trm26xxFM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 2))
trm26xxTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 2, 0))
trm26xxTrapTEC1Faulty = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 2, 0, 1)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm26xxTrapTEC1Faulty.setStatus('current')
if mibBuilder.loadTexts: trm26xxTrapTEC1Faulty.setDescription('')
trm26xxTrapTEC2Faulty = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 2, 0, 2)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm26xxTrapTEC2Faulty.setStatus('current')
if mibBuilder.loadTexts: trm26xxTrapTEC2Faulty.setDescription('')
trm26xxTrapBIAS1Faulty = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 2, 0, 3)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm26xxTrapBIAS1Faulty.setStatus('current')
if mibBuilder.loadTexts: trm26xxTrapBIAS1Faulty.setDescription('')
trm26xxTrapBIAS2Faulty = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 2, 0, 4)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm26xxTrapBIAS2Faulty.setStatus('current')
if mibBuilder.loadTexts: trm26xxTrapBIAS2Faulty.setDescription('')
trm26xxTrapPIUTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 2, 0, 5)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm26xxTrapPIUTempShutdown.setStatus('current')
if mibBuilder.loadTexts: trm26xxTrapPIUTempShutdown.setDescription('')
trm26xxTrapOpticalLinkdown = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 2, 0, 6)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm26xxTrapOpticalLinkdown.setStatus('current')
if mibBuilder.loadTexts: trm26xxTrapOpticalLinkdown.setDescription('')
trm26xxTrapTxDisable = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 7, 2, 0, 7)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm26xxTrapTxDisable.setStatus('current')
if mibBuilder.loadTexts: trm26xxTrapTxDisable.setDescription('This trap is sent when the amplifier has been disabled.')
trm25xx = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8))
trm25xxPM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1))
trm25xxTable = MibTable((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1), )
if mibBuilder.loadTexts: trm25xxTable.setStatus('current')
if mibBuilder.loadTexts: trm25xxTable.setDescription('A list of 25xx in the subrack(s).')
trm25xxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1), ).setIndexNames((0, "TRANSMODE1100", "trm25xxRackNumber"), (0, "TRANSMODE1100", "trm25xxSlotNumber"))
if mibBuilder.loadTexts: trm25xxEntry.setStatus('current')
if mibBuilder.loadTexts: trm25xxEntry.setDescription('A set of parameters that describe the Subrack units')
trm25xxRackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 1), RackNumber())
if mibBuilder.loadTexts: trm25xxRackNumber.setStatus('current')
if mibBuilder.loadTexts: trm25xxRackNumber.setDescription('This parameter indicates in what rack the unit is situated in.')
trm25xxSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 2), BoardNumber())
if mibBuilder.loadTexts: trm25xxSlotNumber.setStatus('current')
if mibBuilder.loadTexts: trm25xxSlotNumber.setDescription('This parameter indicates in what slot number the unit is situated in. Can be any of slot 1 - 8.')
trm25xxWorkingLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm25xxWorkingLineStatus.setStatus('current')
if mibBuilder.loadTexts: trm25xxWorkingLineStatus.setDescription('This parameter indicates the Working Line status.')
trm25xxProtectingLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm25xxProtectingLineStatus.setStatus('current')
if mibBuilder.loadTexts: trm25xxProtectingLineStatus.setDescription('This parameter indicates the Protecting Line status.')
trm25xxTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm25xxTemperature.setStatus('current')
if mibBuilder.loadTexts: trm25xxTemperature.setDescription('This parameter indicates the temperature measured by the unit in deg. C or deg. F. See trmSubrackConfigTemp if deg. Celsius or Farenheit is used.')
trm25xxSwReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm25xxSwReset.setStatus('current')
if mibBuilder.loadTexts: trm25xxSwReset.setDescription('Used to reset the unit. To reset the unit, a SetRequest-PDU with a reset(1) value encoding is used.')
trm25xxRxLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm25xxRxLine.setStatus('current')
if mibBuilder.loadTexts: trm25xxRxLine.setDescription('This parameter indicates the status of the optical input for the line Subrack. It corresponds to the client Rx LED status of the unit. Can be Receiving or Not receiving.')
trm25xxOpticalInPowLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm25xxOpticalInPowLine.setStatus('current')
if mibBuilder.loadTexts: trm25xxOpticalInPowLine.setDescription('This parameter indicates the Optical input power for the line Subrack. When the Optical input power is to low to measure this parameter is -500 (-50 dBm). If the Optical output power is to high to measure this parameter is -20 (-2 dBm). If this parameter is invalid -1 (-0.1 dBm) is returned. Divide this value by 10 to show optical input power in dBm.')
trm25xxSpeedLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 9), SpeedLimit76()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm25xxSpeedLimit.setStatus('current')
if mibBuilder.loadTexts: trm25xxSpeedLimit.setDescription('This parameter indicates the speed limit set for this unit and is used to set a new speed limit. It generates an alarm and disables Line and Client Tx if the Client bitrate is higher than a predefined protocol. The alarm is ceased and Tx is enabled again at a lower value (hysteresis). Speed Limit is deactivated if trm25xxTxMode is disabled(2) or forcedon(3). Speed Limit can be set in 4 modes to allow different protocols: noLimit(1): Any protocol is allowed. lowLimit(2): 100Base-FX, STM1/OC3, ESCON & Video 270Mb. mediumLimit(3): All protocols above + STM4/OC-12. highLimit(4): All protocols above + Fibre channel & Gigabit Ethernet.')
trm25xxEstProtLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm25xxEstProtLine.setStatus('current')
if mibBuilder.loadTexts: trm25xxEstProtLine.setDescription('This parameter indicates the Estimated Protocol for the line Subrack input.')
trm25xxEstFibRateLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm25xxEstFibRateLine.setStatus('current')
if mibBuilder.loadTexts: trm25xxEstFibRateLine.setDescription('This parameter indicates the Estimated Fiber Rate for the line Subrack input in Mbit/s.')
trm25xxTxLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm25xxTxLine.setStatus('current')
if mibBuilder.loadTexts: trm25xxTxLine.setDescription('This parameter indicates the status of the optical output power for the line Subrack. It corresponds to the line Tx LED status of the unit. Can be on or off.')
trm25xxOpticalOutPowLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm25xxOpticalOutPowLine.setStatus('current')
if mibBuilder.loadTexts: trm25xxOpticalOutPowLine.setDescription('This parameter indicates the optical output power for the line Subrack. If data not is available yet this parameter is -1(-0.1 dBm). If this parameter is -100 (-10 dBm) the output power is equal too or less than -100 (-10 dBm). Divide this value by 10 to show the optical output power in dBm.')
trm25xxProdOutPowLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm25xxProdOutPowLine.setStatus('current')
if mibBuilder.loadTexts: trm25xxProdOutPowLine.setDescription('This parameter indicates the production output power for the line Subrack. If data not is valid yet this parameter is -1 (-0.1 dBm). Divide this value by 10 to show the production output power in dBm.')
trm25xxLaserBiasCurLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm25xxLaserBiasCurLine.setStatus('current')
if mibBuilder.loadTexts: trm25xxLaserBiasCurLine.setDescription('This parameter indicates the laser bias current for the line Subrack. If this parameter is 5450(545 mA) the laser bias current is more or equal to 545 mA. Divide this value by 10 to show the laser bias current in mA.')
trm25xxProdLaserBiasCurLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm25xxProdLaserBiasCurLine.setStatus('current')
if mibBuilder.loadTexts: trm25xxProdLaserBiasCurLine.setDescription('This parameter indicates the production laser bias current for the line Subrack. Divide this value by 10 to show the laser bias current in mA.')
trm25xxCDR = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 17), CDRMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm25xxCDR.setStatus('current')
if mibBuilder.loadTexts: trm25xxCDR.setDescription('This parameter indicates the working mode of the CDR clock recovery circuit. Can be auto3R(1), bypass2R(2), custom(3),fddiOR100Base-FX(4), stm1orOC-3(5), video270Mbps(6), stm4orOC-12(7), gigabitEthernet(8), fibreChannel(9), fibreChannelx2(10), stm16orOC-48(11) or gigabitEthernetx2(12). custom(3) can not be set, it just indicates if a custom protocol is set with oid trm25xxCustomFibRate.')
trm25xxCustomFibRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm25xxCustomFibRate.setStatus('current')
if mibBuilder.loadTexts: trm25xxCustomFibRate.setDescription('This parameter is used to set the working mode of the CDR clock recovery circuit(Custom mode). Custom mode can be set between 30000 and 2700000 Kbit/s.')
trm25xxTxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 1, 1, 1, 19), TxMode76()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm25xxTxMode.setStatus('current')
if mibBuilder.loadTexts: trm25xxTxMode.setDescription('This parameter indicates the mode of the optical transmitter for line and client TX. Can be set to normal(1), disabled(2) or forcedon(3). normal (1): Optical output when receiving signal. disabled(2): Optical output is OFF. forcedon(3): Optical output is ON. (Normally, forcedon(3) is used for test purpose only)')
trm25xxFM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 2))
trm25xxTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 2, 0))
trm25xxTrapWorkingLineFailure = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 2, 0, 1)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm25xxTrapWorkingLineFailure.setStatus('current')
if mibBuilder.loadTexts: trm25xxTrapWorkingLineFailure.setDescription('This trap is sent when the Working Line goes down.')
trm25xxTrapProtectingLineFailure = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 2, 0, 2)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm25xxTrapProtectingLineFailure.setStatus('current')
if mibBuilder.loadTexts: trm25xxTrapProtectingLineFailure.setDescription('This trap is sent when the Protecting Line goes down.')
trm25xxTrapWorkingAndProtectingLineFailure = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 8, 2, 0, 3)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm25xxTrapWorkingAndProtectingLineFailure.setStatus('current')
if mibBuilder.loadTexts: trm25xxTrapWorkingAndProtectingLineFailure.setDescription('This trap is sent when both the Working and Protecting Line goes down.')
trm53005500 = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9))
trm53005500PM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1))
trm53005500Table = MibTable((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1), )
if mibBuilder.loadTexts: trm53005500Table.setStatus('current')
if mibBuilder.loadTexts: trm53005500Table.setDescription('A list of all 5300/01 and 5500/01 units in the subrack(s).')
trm53005500Entry = MibTableRow((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1), ).setIndexNames((0, "TRANSMODE1100", "trm53005500RackNumber"), (0, "TRANSMODE1100", "trm53005500SlotNumber"))
if mibBuilder.loadTexts: trm53005500Entry.setStatus('current')
if mibBuilder.loadTexts: trm53005500Entry.setDescription('A set of parameters that describe a 5300/01 or 5500/01 unit.')
trm53005500RackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 1), RackNumber())
if mibBuilder.loadTexts: trm53005500RackNumber.setStatus('current')
if mibBuilder.loadTexts: trm53005500RackNumber.setDescription('This parameter indicates in what rack the unit is situated in.')
trm53005500SlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 2), BoardNumber())
if mibBuilder.loadTexts: trm53005500SlotNumber.setStatus('current')
if mibBuilder.loadTexts: trm53005500SlotNumber.setDescription('This parameter indicates in what slot number the unit is situated in. Can be any of slot 1 - 8.')
trm53005500Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500Temperature.setStatus('current')
if mibBuilder.loadTexts: trm53005500Temperature.setDescription('This parameter indicates the temperature measured by the unit in deg. C or deg. F. See trmSubrackConfigTemp if deg. Celsius or Farenheit is used.')
trm53005500SwReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500SwReset.setStatus('current')
if mibBuilder.loadTexts: trm53005500SwReset.setDescription('Used to reset the unit. To reset the unit, a SetRequest-PDU with a reset(1) value encoding is used.')
trm53005500WavelengthLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500WavelengthLine.setStatus('current')
if mibBuilder.loadTexts: trm53005500WavelengthLine.setDescription('This parameter indicates the nominal wavelength for the line interface transiever.')
trm53005500RxLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500RxLine.setStatus('current')
if mibBuilder.loadTexts: trm53005500RxLine.setDescription('This parameter indicates the status of the optical input for the line Subrack. It corresponds to the client Rx LED status of the unit. Can be Receiving or Not receiving.')
trm53005500OpticalInPowLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500OpticalInPowLine.setStatus('current')
if mibBuilder.loadTexts: trm53005500OpticalInPowLine.setDescription('This parameter indicates the Optical input power for the line interface. When the Optical input power is to low to measure this parameter is -500 (-50 dBm). If the Optical output power is to high to measure this parameter is -20 (-2 dBm). If this parameter is invalid -1 (-0.1 dBm) is returned. Divide this value by 10 to show optical input power in dBm.')
trm53005500TxLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500TxLine.setStatus('current')
if mibBuilder.loadTexts: trm53005500TxLine.setDescription('This parameter indicates the status of the optical output power for the line Subrack. It corresponds to the line Tx LED status of the unit. Can be on or off.')
trm53005500TxModeLine = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 9), TxMode75()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500TxModeLine.setStatus('current')
if mibBuilder.loadTexts: trm53005500TxModeLine.setDescription('This parameter indicates the mode of the optical transmitter for line TX. Can be set to normal(1) or disabled(2). normal (1): Optical output when receiving signal. disabled(2): Optical output is OFF.')
trm53005500WavelengthClient1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500WavelengthClient1.setStatus('current')
if mibBuilder.loadTexts: trm53005500WavelengthClient1.setDescription('This parameter indicates the nominal wavelength for the client 1 interface transiever.')
trm53005500RxClient1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500RxClient1.setStatus('current')
if mibBuilder.loadTexts: trm53005500RxClient1.setDescription('This parameter indicates the status of the optical input for the client 1 interface. It corresponds to the client 1 Rx LED status of the unit. Can be Receiving or Not receiving.')
trm53005500CDRClient1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 12), CDR55Mode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500CDRClient1.setStatus('current')
if mibBuilder.loadTexts: trm53005500CDRClient1.setDescription('This parameter indicates the working mode of the CDR clock recovery circuit and is used to change working mode. Only setable for unit 5500/01. Can be ESCON(1), stm1orOC-3(2), fddiOR100Base-FX(3), or syncClock16MHz(4).')
trm53005500TxClient1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500TxClient1.setStatus('current')
if mibBuilder.loadTexts: trm53005500TxClient1.setDescription('This parameter indicates the status of the optical output power. It corresponds to the Tx LED status of the unit. Can be on or off.')
trm53005500TxModeClient1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 14), TxMode76()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500TxModeClient1.setStatus('current')
if mibBuilder.loadTexts: trm53005500TxModeClient1.setDescription('This parameter indicates the mode of the optical transmitter for client 1 TX. Can be set to normal(1), disabled(2) or forcedon(3). normal (1): Optical output when receiving signal. disabled(2): Optical output is OFF. forcedon(3): Optical output is ON. (Normally, forcedon(3) is used for test purpose only)')
trm53005500IDStringClient1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500IDStringClient1.setStatus('current')
if mibBuilder.loadTexts: trm53005500IDStringClient1.setDescription('This parameter identifies the equipment(ID String) connected to the client 1 interface. Maximum number of characters is 20.')
trm53005500IPAddressClient1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500IPAddressClient1.setStatus('current')
if mibBuilder.loadTexts: trm53005500IPAddressClient1.setDescription('This parameter indentifies the equipment(IP Address) connected to the client 1 interface.')
trm53005500WavelengthClient2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500WavelengthClient2.setStatus('current')
if mibBuilder.loadTexts: trm53005500WavelengthClient2.setDescription('This parameter indicates the nominal wavelength for the client 2 interface transiever.')
trm53005500RxClient2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500RxClient2.setStatus('current')
if mibBuilder.loadTexts: trm53005500RxClient2.setDescription('This parameter indicates the status of the optical input for the client 2 interface. It corresponds to the client 2 Rx LED status of the unit. Can be Receiving or Not receiving.')
trm53005500CDRClient2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 19), CDR55Mode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500CDRClient2.setStatus('current')
if mibBuilder.loadTexts: trm53005500CDRClient2.setDescription('This parameter indicates the working mode of the CDR clock recovery circuit and is used to change working mode. Only setable for unit 5500/01. Can be ESCON(1), stm1orOC-3(2), fddiOR100Base-FX(3), or syncClock16MHz(4).')
trm53005500TxClient2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500TxClient2.setStatus('current')
if mibBuilder.loadTexts: trm53005500TxClient2.setDescription('This parameter indicates the status of the optical output power. It corresponds to the Tx LED status of the unit. Can be on or off.')
trm53005500TxModeClient2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 21), TxMode76()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500TxModeClient2.setStatus('current')
if mibBuilder.loadTexts: trm53005500TxModeClient2.setDescription('This parameter indicates the mode of the optical transmitter for client 2 TX. Can be set to normal(1), disabled(2) or forcedon(3). normal (1): Optical output when receiving signal. disabled(2): Optical output is OFF. forcedon(3): Optical output is ON. (Normally, forcedon(3) is used for test purpose only)')
trm53005500IDStringClient2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500IDStringClient2.setStatus('current')
if mibBuilder.loadTexts: trm53005500IDStringClient2.setDescription('This parameter identifies the equipment(ID String) connected to the client 2 interface. Maximum number of characters is 20.')
trm53005500IPAddressClient2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500IPAddressClient2.setStatus('current')
if mibBuilder.loadTexts: trm53005500IPAddressClient2.setDescription('This parameter indentifies the equipment(IP Address) connected to the client 2 interface.')
trm53005500WavelengthClient3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500WavelengthClient3.setStatus('current')
if mibBuilder.loadTexts: trm53005500WavelengthClient3.setDescription('This parameter indicates the nominal wavelength for the client 3 interface transiever.')
trm53005500RxClient3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500RxClient3.setStatus('current')
if mibBuilder.loadTexts: trm53005500RxClient3.setDescription('This parameter indicates the status of the optical input for the client 3 interface. It corresponds to the client 3 Rx LED status of the unit. Can be Receiving or Not receiving.')
trm53005500CDRClient3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 26), CDR55Mode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500CDRClient3.setStatus('current')
if mibBuilder.loadTexts: trm53005500CDRClient3.setDescription('This parameter indicates the working mode of the CDR clock recovery circuit and is used to change working mode. Only setable for unit 5500/01. Can be ESCON(1), stm1orOC-3(2), fddiOR100Base-FX(3), or syncClock16MHz(4).')
trm53005500TxClient3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500TxClient3.setStatus('current')
if mibBuilder.loadTexts: trm53005500TxClient3.setDescription('This parameter indicates the status of the optical output power. It corresponds to the Tx LED status of the unit. Can be on or off.')
trm53005500TxModeClient3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 28), TxMode76()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500TxModeClient3.setStatus('current')
if mibBuilder.loadTexts: trm53005500TxModeClient3.setDescription('This parameter indicates the mode of the optical transmitter for client 3 TX. Can be set to normal(1), disabled(2) or forcedon(3). normal (1): Optical output when receiving signal. disabled(2): Optical output is OFF. forcedon(3): Optical output is ON. (Normally, forcedon(3) is used for test purpose only)')
trm53005500IDStringClient3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500IDStringClient3.setStatus('current')
if mibBuilder.loadTexts: trm53005500IDStringClient3.setDescription('This parameter identifies the equipment(ID String) connected to the client 3 interface. Maximum number of characters is 20.')
trm53005500IPAddressClient3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500IPAddressClient3.setStatus('current')
if mibBuilder.loadTexts: trm53005500IPAddressClient3.setDescription('This parameter indentifies the equipment(IP Address) connected to the client 3 interface.')
trm53005500WavelengthClient4 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500WavelengthClient4.setStatus('current')
if mibBuilder.loadTexts: trm53005500WavelengthClient4.setDescription('This parameter indicates the nominal wavelength for the client 4 interface transiever.')
trm53005500RxClient4 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500RxClient4.setStatus('current')
if mibBuilder.loadTexts: trm53005500RxClient4.setDescription('This parameter indicates the status of the optical input for the client 4 interface. It corresponds to the client 4 Rx LED status of the unit. Can be Receiving or Not receiving.')
trm53005500CDRClient4 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 33), CDR55Mode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500CDRClient4.setStatus('current')
if mibBuilder.loadTexts: trm53005500CDRClient4.setDescription('This parameter indicates the working mode of the CDR clock recovery circuit and is used to change working mode. Only setable for unit 5500/01. Can be ESCON(1), stm1orOC-3(2), fddiOR100Base-FX(3), or syncClock16MHz(4).')
trm53005500TxClient4 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trm53005500TxClient4.setStatus('current')
if mibBuilder.loadTexts: trm53005500TxClient4.setDescription('This parameter indicates the status of the optical output power. It corresponds to the Tx LED status of the unit. Can be on or off.')
trm53005500TxModeClient4 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 35), TxMode76()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500TxModeClient4.setStatus('current')
if mibBuilder.loadTexts: trm53005500TxModeClient4.setDescription('This parameter indicates the mode of the optical transmitter for client 4 TX. Can be set to normal(1), disabled(2) or forcedon(3). normal (1): Optical output when receiving signal. disabled(2): Optical output is OFF. forcedon(3): Optical output is ON. (Normally, forcedon(3) is used for test purpose only)')
trm53005500IDStringClient4 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500IDStringClient4.setStatus('current')
if mibBuilder.loadTexts: trm53005500IDStringClient4.setDescription('This parameter identifies the equipment(ID String) connected to the client 4 interface. Maximum number of characters is 20.')
trm53005500IPAddressClient4 = MibTableColumn((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 1, 1, 1, 37), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trm53005500IPAddressClient4.setStatus('current')
if mibBuilder.loadTexts: trm53005500IPAddressClient4.setDescription('This parameter indentifies the equipment(IP Address) connected to the client 4 interface.')
trm53005500FM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2))
trm53005500Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0))
trm53005500TrapRxLinkdownLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 1)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapRxLinkdownLine.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapRxLinkdownLine.setDescription('This trap is sent when the Line Rx signal is out of sync or has been lost.')
trm53005500TrapExternalsyncFailureLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 2)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapExternalsyncFailureLine.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapExternalsyncFailureLine.setDescription('This trap is sent when the Line external sync signal is lost or is out of sync.')
trm53005500TrapSfpMissingLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 3)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapSfpMissingLine.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapSfpMissingLine.setDescription('This trap is sent when the Line SFP transiever not is mounted.')
trm53005500TrapSfpBadTypeLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 4)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapSfpBadTypeLine.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapSfpBadTypeLine.setDescription('This trap is sent when a invalid Line SFP is used.')
trm53005500TrapSfpFaultyLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 5)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapSfpFaultyLine.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapSfpFaultyLine.setDescription('This trap is sent when the Line SFP is faulty.')
trm53005500TrapRxGlitchLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 6)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapRxGlitchLine.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapRxGlitchLine.setDescription('This trap is sent when a unit experiences a split second optical input power glitch at the Line interface.')
trm53005500TrapTxGlitchLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 7)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapTxGlitchLine.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapTxGlitchLine.setDescription('This trap is sent when a unit experiences a split second optical transmission glitch at the Line interface.')
trm53005500TrapTxDisabledLine = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 8)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapTxDisabledLine.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapTxDisabledLine.setDescription('This trap is sent when the optical output power for the line interface have been disabled.')
trm53005500TrapRxLinkDownClient1 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 9)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapRxLinkDownClient1.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapRxLinkDownClient1.setDescription('This trap is sent when the Client 1 Rx signal is out of sync or has been lost.')
trm53005500TrapTxOutOfSyncClient1 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 10)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapTxOutOfSyncClient1.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapTxOutOfSyncClient1.setDescription('This trap is sent when the Client 1 tx output signal is outside the selected frequencey range.')
trm53005500TrapSfpMissingClient1 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 11)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapSfpMissingClient1.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapSfpMissingClient1.setDescription('This trap is sent when the Client 1 SFP transiever not is mounted.')
trm53005500TrapSfpBadTypeClient1 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 12)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapSfpBadTypeClient1.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapSfpBadTypeClient1.setDescription('This trap is sent when a unsupported Client 1 SFP is used.')
trm53005500TrapSfpFaultyClient1 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 13)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapSfpFaultyClient1.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapSfpFaultyClient1.setDescription('This trap is sent when the Client 1 SFP is faulty.')
trm53005500TrapTxGlitchClient1 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 14)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapTxGlitchClient1.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapTxGlitchClient1.setDescription('This trap is sent when a unit experiences a split second optical transmission glitch at the Client 1 interface.')
trm53005500TrapRxGlitchClient1 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 15)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapRxGlitchClient1.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapRxGlitchClient1.setDescription('This trap is sent when a unit experiences a split second optical input power glitch at the Client 1 interface.')
trm53005500TrapTxDisabledClient1 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 16)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapTxDisabledClient1.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapTxDisabledClient1.setDescription('This trap is sent when the optical output power for the client 1 interface have been disabled.')
trm53005500TrapRxLinkDownClient2 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 17)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapRxLinkDownClient2.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapRxLinkDownClient2.setDescription('This trap is sent when the Client 2 Rx signal is out of sync or has been lost.')
trm53005500TrapTxOutOfSyncClient2 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 18)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapTxOutOfSyncClient2.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapTxOutOfSyncClient2.setDescription('This trap is sent when the Client 2 tx output signal is outside the selected frequencey range.')
trm53005500TrapSfpMissingClient2 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 19)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapSfpMissingClient2.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapSfpMissingClient2.setDescription('This trap is sent when the Client 2 SFP transiever not is mounted.')
trm53005500TrapSfpBadTypeClient2 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 20)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapSfpBadTypeClient2.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapSfpBadTypeClient2.setDescription('This trap is sent when a unsupported Client 2 SFP is used.')
trm53005500TrapSfpFaultyClient2 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 21)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapSfpFaultyClient2.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapSfpFaultyClient2.setDescription('This trap is sent when the Client 2 SFP is faulty.')
trm53005500TrapTxGlitchClient2 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 22)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapTxGlitchClient2.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapTxGlitchClient2.setDescription('This trap is sent when a unit experiences a split second optical transmission glitch at the Client 2 interface.')
trm53005500TrapRxGlitchClient2 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 23)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapRxGlitchClient2.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapRxGlitchClient2.setDescription('This trap is sent when a unit experiences a split second optical input power glitch at the Client 2 interface.')
trm53005500TrapTxDisabledClient2 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 24)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapTxDisabledClient2.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapTxDisabledClient2.setDescription('This trap is sent when the optical output power for the client 2 interface have been disabled.')
trm53005500TrapRxLinkDownClient3 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 25)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapRxLinkDownClient3.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapRxLinkDownClient3.setDescription('This trap is sent when the Client 3 Rx signal is out of sync or has been lost.')
trm53005500TrapTxOutOfSyncClient3 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 26)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapTxOutOfSyncClient3.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapTxOutOfSyncClient3.setDescription('This trap is sent when the Client 3 tx output signal is outside the selected frequencey range.')
trm53005500TrapSfpMissingClient3 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 27)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapSfpMissingClient3.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapSfpMissingClient3.setDescription('This trap is sent when the Client 3 SFP transiever not is mounted.')
trm53005500TrapSfpBadTypeClient3 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 28)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapSfpBadTypeClient3.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapSfpBadTypeClient3.setDescription('This trap is sent when a unsupported Client 3 SFP is used.')
trm53005500TrapSfpFaultyClient3 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 29)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapSfpFaultyClient3.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapSfpFaultyClient3.setDescription('This trap is sent when the Client 3 SFP is faulty.')
trm53005500TrapTxGlitchClient3 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 30)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapTxGlitchClient3.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapTxGlitchClient3.setDescription('This trap is sent when a unit experiences a split second optical transmission glitch at the Client 3 interface.')
trm53005500TrapRxGlitchClient3 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 31)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapRxGlitchClient3.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapRxGlitchClient3.setDescription('This trap is sent when a unit experiences a split second optical input power glitch at the Client 3 interface.')
trm53005500TrapTxDisabledClient3 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 32)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapTxDisabledClient3.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapTxDisabledClient3.setDescription('This trap is sent when the optical output power for the client 3 interface have been disabled.')
trm53005500TrapRxLinkDownClient4 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 33)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapRxLinkDownClient4.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapRxLinkDownClient4.setDescription('This trap is sent when the Client 4 Rx signal is out of sync or has been lost.')
trm53005500TrapTxOutOfSyncClient4 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 34)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapTxOutOfSyncClient4.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapTxOutOfSyncClient4.setDescription('This trap is sent when the Client 4 tx output signal is outside the selected frequencey range.')
trm53005500TrapSfpMissingClient4 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 35)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapSfpMissingClient4.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapSfpMissingClient4.setDescription('This trap is sent when the Client 4 SFP transiever not is mounted.')
trm53005500TrapSfpBadTypeClient4 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 36)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapSfpBadTypeClient4.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapSfpBadTypeClient4.setDescription('This trap is sent when a unsupported Client 4 SFP is used.')
trm53005500TrapSfpFaultyClient4 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 37)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapSfpFaultyClient4.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapSfpFaultyClient4.setDescription('This trap is sent when the Client 4 SFP is faulty.')
trm53005500TrapTxGlitchClient4 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 38)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapTxGlitchClient4.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapTxGlitchClient4.setDescription('This trap is sent when a unit experiences a split second optical transmission glitch at the Client 4 interface.')
trm53005500TrapRxGlitchClient4 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 39)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapRxGlitchClient4.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapRxGlitchClient4.setDescription('This trap is sent when a unit experiences a split second optical input power glitch at the Client 4 interface.')
trm53005500TrapTxDisabledClient4 = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 40)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapTxDisabledClient4.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapTxDisabledClient4.setDescription('This trap is sent when the optical output power for the client 4 interface have been disabled.')
trm53005500TrapHwFailure = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 2, 9, 2, 0, 41)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trm53005500TrapHwFailure.setStatus('current')
if mibBuilder.loadTexts: trm53005500TrapHwFailure.setDescription('This trap is sent when the unit got a hardware failure.')
trmSubrackFM = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 3))
trmSubrackTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11857, 1, 2, 3, 0))
trmTrapBmiLost = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 3, 0, 1)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trmTrapBmiLost.setStatus('current')
if mibBuilder.loadTexts: trmTrapBmiLost.setDescription('This trap is sent when communication with a unit is lost.')
trmTrapBmiError = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 3, 0, 2)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trmTrapBmiError.setStatus('current')
if mibBuilder.loadTexts: trmTrapBmiError.setDescription('This trap is sent when a internal BMI error occur.')
trmTrapHighTemp = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 3, 0, 3)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trmTrapHighTemp.setStatus('current')
if mibBuilder.loadTexts: trmTrapHighTemp.setDescription('This trap is sent when a high temperature alarm occurs on the NMB 6001 unit or a unit with temperature measurement.')
trmTrapLowTemp = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 3, 0, 4)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trmTrapLowTemp.setStatus('current')
if mibBuilder.loadTexts: trmTrapLowTemp.setDescription('This trap is sent when a low temperature alarm occurs on the NMB 6001 unit or a unit with temperature measurement.')
trmTrapVeryHighTemp = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 3, 0, 5)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trmTrapVeryHighTemp.setStatus('current')
if mibBuilder.loadTexts: trmTrapVeryHighTemp.setDescription('This trap is sent when a very high temperature alarm occurs on the NMB 6001 unit or a unit with temperature measurement.')
trmTrapSpeedLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 11857, 1, 2, 3, 0, 6)).setObjects(("TRANSMODE1100", "trmAlarmActiveName"), ("TRANSMODE1100", "trmAlarmActiveSeverity"), ("TRANSMODE1100", "trmAlarmActiveActTime"), ("TRANSMODE1100", "trmAlarmActiveUnit"), ("TRANSMODE1100", "trmAlarmActiveRackNumber"), ("TRANSMODE1100", "trmAlarmActiveSlotNumber"), ("TRANSMODE1100", "trmAlarmActiveSerialNumber"))
if mibBuilder.loadTexts: trmTrapSpeedLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: trmTrapSpeedLimitExceeded.setDescription('This trap is sent if the Client bitrate is higher than a predefined protocol. When the alarm is activated Line and Client Tx is disabled. The alarm is ceased and Tx is enabled again at a lower value (hysteresis). Speed Limit is deactivated if Tx mode for the unit is disabled(2) or forcedon(3)')
mibBuilder.exportSymbols("TRANSMODE1100", AlarmSeverity=AlarmSeverity, trm6001CascadeFailure=trm6001CascadeFailure, trm803x=trm803x, trm9xxxStatus=trm9xxxStatus, trm53005500IPAddressClient2=trm53005500IPAddressClient2, trmAlarmSeverityTable=trmAlarmSeverityTable, trm76xxPM=trm76xxPM, trm76xxTrapTxDisable=trm76xxTrapTxDisable, trm76xxProdLaserBiasCurLine=trm76xxProdLaserBiasCurLine, OwnerString=OwnerString, trm26xxTrapBIAS2Faulty=trm26xxTrapBIAS2Faulty, trm76xxEstProtLine=trm76xxEstProtLine, trm76xxTrapSFPFailureLine=trm76xxTrapSFPFailureLine, trm25xxFM=trm25xxFM, trm26xxTxMode=trm26xxTxMode, trm6001=trm6001, trmTrapLowTemp=trmTrapLowTemp, trm76xxSlotNumber=trm76xxSlotNumber, trm53005500TrapSfpFaultyClient4=trm53005500TrapSfpFaultyClient4, trm76xxRxLine=trm76xxRxLine, trm53005500CDRClient4=trm53005500CDRClient4, trm53005500RxClient1=trm53005500RxClient1, trm53005500TrapSfpFaultyLine=trm53005500TrapSfpFaultyLine, trm76xxTrapLoLClient=trm76xxTrapLoLClient, trm25xxRxLine=trm25xxRxLine, trm53005500TrapTxDisabledLine=trm53005500TrapTxDisabledLine, trm9xxxType=trm9xxxType, trm53005500TrapTxDisabledClient2=trm53005500TrapTxDisabledClient2, trm53005500TrapSfpMissingLine=trm53005500TrapSfpMissingLine, trm25xxTrapWorkingAndProtectingLineFailure=trm25xxTrapWorkingAndProtectingLineFailure, trm25xxEstProtLine=trm25xxEstProtLine, trm53005500Table=trm53005500Table, trm53005500TrapSfpMissingClient1=trm53005500TrapSfpMissingClient1, trm76xxEstFibRateClient=trm76xxEstFibRateClient, ExternalAlarmLevel=ExternalAlarmLevel, trm26xxTrapOpticalLinkdown=trm26xxTrapOpticalLinkdown, trm53005500IPAddressClient4=trm53005500IPAddressClient4, RowStatus=RowStatus, RackNumber=RackNumber, trm9xxxTable=trm9xxxTable, trm26xxEntry=trm26xxEntry, trm75xxRxLine=trm75xxRxLine, dod=dod, trm76xxIPAddressClient=trm76xxIPAddressClient, trm53005500TxClient3=trm53005500TxClient3, trm53005500TxModeClient2=trm53005500TxModeClient2, trm53005500TxModeClient1=trm53005500TxModeClient1, trmAlarmActiveActTime=trmAlarmActiveActTime, trm6001SwReset=trm6001SwReset, trm53005500TrapRxLinkDownClient3=trm53005500TrapRxLinkDownClient3, trm75xxTable=trm75xxTable, trm53005500TrapTxDisabledClient4=trm53005500TrapTxDisabledClient4, trm76xxTrapLopClient=trm76xxTrapLopClient, trmSubrackTraps=trmSubrackTraps, trmAlarmLogSlotNumber=trmAlarmLogSlotNumber, trm9xxxTrapFailure=trm9xxxTrapFailure, trmAlarmExternalEntry=trmAlarmExternalEntry, trm26xxTraps=trm26xxTraps, trm803xSlotNumber=trm803xSlotNumber, trm6001FM=trm6001FM, trm26xxTable=trm26xxTable, trmClearAlarmLog=trmClearAlarmLog, trm6001RackNumber=trm6001RackNumber, SlotNumber=SlotNumber, trmAlarmExternalName=trmAlarmExternalName, trm53005500TrapTxGlitchLine=trm53005500TrapTxGlitchLine, trmAlarmLogAckTime=trmAlarmLogAckTime, trmAlarmLogTable=trmAlarmLogTable, trmTrapSpeedLimitExceeded=trmTrapSpeedLimitExceeded, trm53005500TrapRxGlitchClient1=trm53005500TrapRxGlitchClient1, Switch=Switch, trm9xxxSlotNumber=trm9xxxSlotNumber, trm76xxTrapLaserDegradationLine=trm76xxTrapLaserDegradationLine, trm53005500IDStringClient2=trm53005500IDStringClient2, trm76xxIDStringClient=trm76xxIDStringClient, trm2204SlotNumber=trm2204SlotNumber, trm26xxTrapTEC1Faulty=trm26xxTrapTEC1Faulty, trm53005500TrapSfpBadTypeClient1=trm53005500TrapSfpBadTypeClient1, trm53005500TrapTxGlitchClient1=trm53005500TrapTxGlitchClient1, trm9xxxPresent=trm9xxxPresent, trm53005500TrapTxOutOfSyncClient3=trm53005500TrapTxOutOfSyncClient3, trm25xxRackNumber=trm25xxRackNumber, trm53005500TrapRxLinkDownClient4=trm53005500TrapRxLinkDownClient4, trm76xxTrapSFPMissingLine=trm76xxTrapSFPMissingLine, trmAlarmActive=trmAlarmActive, CascadeMode=CascadeMode, trm75xxRxClient=trm75xxRxClient, trm803xEntry=trm803xEntry, trm76xxTrapRxLowPowerClient=trm76xxTrapRxLowPowerClient, trm75xxTxMode=trm75xxTxMode, trm6001UpTime=trm6001UpTime, trm2204Entry=trm2204Entry, PYSNMP_MODULE_ID=transmode, trm53005500TrapSfpFaultyClient3=trm53005500TrapSfpFaultyClient3, trm2204PM=trm2204PM, trm53005500TrapRxGlitchClient4=trm53005500TrapRxGlitchClient4, trmListRackNumber=trmListRackNumber, trm75xxEstProtLine=trm75xxEstProtLine, trmAlarmLogName=trmAlarmLogName, trm25xxSlotNumber=trm25xxSlotNumber, trm53005500WavelengthLine=trm53005500WavelengthLine, trm26xxOpticalPowerPIN2=trm26xxOpticalPowerPIN2, trm53005500RxClient3=trm53005500RxClient3, trmAlarmLogSeverity=trmAlarmLogSeverity, trm9xxxTraps=trm9xxxTraps, trm75xxTrapGlitchLine=trm75xxTrapGlitchLine, trm53005500IDStringClient3=trm53005500IDStringClient3, trm76xxTrapCDRAutoModeRangeChangeLine=trm76xxTrapCDRAutoModeRangeChangeLine, PortType=PortType, trm76xxTrapRxGlitchClient=trm76xxTrapRxGlitchClient, trmSubrackListEntry=trmSubrackListEntry, trm75xxIDStringClient=trm75xxIDStringClient, trm6001Temperature=trm6001Temperature, CDR55Mode=CDR55Mode, trmOpticalInputPowerHighPINLine=trmOpticalInputPowerHighPINLine, trm76xxTxLine=trm76xxTxLine, trm76xxWavelengthLine=trm76xxWavelengthLine, trm75xxSlotNumber=trm75xxSlotNumber, SecurityMode=SecurityMode, trmPluginReset=trmPluginReset, trm53005500TrapSfpBadTypeClient3=trm53005500TrapSfpBadTypeClient3, trm76xxOpticalInPowLine=trm76xxOpticalInPowLine, trmAlarmTemperatureHigh=trmAlarmTemperatureHigh, trm803xIPAddressLine=trm803xIPAddressLine, enterprises=enterprises, trm26xxCurrentBIAS1=trm26xxCurrentBIAS1, trm75xxTrapGlitchClient=trm75xxTrapGlitchClient, trmAlarmLog=trmAlarmLog, trm76xxTemperature=trm76xxTemperature, AlarmStatus=AlarmStatus, trm76xxRxClient=trm76xxRxClient, trm75xxEstFibRateLine=trm75xxEstFibRateLine, trm9xxx=trm9xxx, trm803xPM=trm803xPM, trm53005500Temperature=trm53005500Temperature, trm25xxPM=trm25xxPM, trm25xxProdLaserBiasCurLine=trm25xxProdLaserBiasCurLine, PowerType=PowerType, internet=internet, trm75xxEstFibRateClient=trm75xxEstFibRateClient, trm76xxEstProtClient=trm76xxEstProtClient, trmAlarmActiveRackNumber=trmAlarmActiveRackNumber, trmOpticalInputPowerHigh1310Client=trmOpticalInputPowerHigh1310Client, trm25xxProdOutPowLine=trm25xxProdOutPowLine, trm53005500WavelengthClient1=trm53005500WavelengthClient1, trm76xxSwReset=trm76xxSwReset, trm53005500SwReset=trm53005500SwReset, trm803xMuxType=trm803xMuxType, trm2204SecurityMode=trm2204SecurityMode, BoardNumber=BoardNumber, trm6001TrapExternal1=trm6001TrapExternal1, trm25xxTrapProtectingLineFailure=trm25xxTrapProtectingLineFailure, trm53005500TxModeClient4=trm53005500TxModeClient4, trmSubrackListTable=trmSubrackListTable, trm53005500TxClient4=trm53005500TxClient4, system1100=system1100, trm26xxCurrentBIAS2=trm26xxCurrentBIAS2, trm76xxTrapLoLLine=trm76xxTrapLoLLine, trm76xxWavelengthClient=trm76xxWavelengthClient, trm75xxTrapTxDisableLine=trm75xxTrapTxDisableLine, trmAlarmTemperatureLow=trmAlarmTemperatureLow, trm26xxVoltageTEC2=trm26xxVoltageTEC2, trm75xxWavelengthClient=trm75xxWavelengthClient, trmAlarmSeverityLevel=trmAlarmSeverityLevel, trmAutoAcknowledge=trmAutoAcknowledge, trmAlarmLogEntry=trmAlarmLogEntry, trm53005500Traps=trm53005500Traps, trm26xxVoltageBIAS1=trm26xxVoltageBIAS1, trm53005500TrapRxGlitchLine=trm53005500TrapRxGlitchLine, LineLoopMode=LineLoopMode, trm26xxTemperatureTEC2=trm26xxTemperatureTEC2, trm76xxTrapRxHighPowerLine=trm76xxTrapRxHighPowerLine, trmTemperature=trmTemperature, trmSubrackUnits=trmSubrackUnits, trm26xxSwReset=trm26xxSwReset, TxMode76=TxMode76, trm26xxFM=trm26xxFM, trm53005500IDStringClient4=trm53005500IDStringClient4, trm26xxRackNumber=trm26xxRackNumber, trm2204Table=trm2204Table, trmAlarmActiveGeneral=trmAlarmActiveGeneral, PerceivedSeverity=PerceivedSeverity, trmSubrack=trmSubrack, trmAlarmExternalId=trmAlarmExternalId, trm53005500TrapSfpBadTypeLine=trm53005500TrapSfpBadTypeLine, trmAlarmActiveAcknowledgeAll=trmAlarmActiveAcknowledgeAll, trm6001PM=trm6001PM, trm25xxTxLine=trm25xxTxLine, trmListProductDescription=trmListProductDescription, trm76xxTrapTxLine=trm76xxTrapTxLine, SlotNumberPS=SlotNumberPS, trm25xxOpticalInPowLine=trm25xxOpticalInPowLine, trm6001Table=trm6001Table, trm9xxxPM=trm9xxxPM, trm26xxVoltageTEC1=trm26xxVoltageTEC1, trm53005500CDRClient1=trm53005500CDRClient1, trmAlarmActiveSlotNumber=trmAlarmActiveSlotNumber, trm53005500TrapRxLinkdownLine=trm53005500TrapRxLinkdownLine, trm53005500TrapTxDisabledClient1=trm53005500TrapTxDisabledClient1, trm53005500TxModeLine=trm53005500TxModeLine, trm75xxSpeedLimit=trm75xxSpeedLimit, trm76xxLaserBiasCurClient=trm76xxLaserBiasCurClient, trm75xxTxModeClient=trm75xxTxModeClient, trm53005500RxClient2=trm53005500RxClient2, MuxType=MuxType, trm53005500TrapRxGlitchClient2=trm53005500TrapRxGlitchClient2, trm75xxFM=trm75xxFM, trmAlarmActiveAcknowledge=trmAlarmActiveAcknowledge, trm76xxCDR=trm76xxCDR, trm53005500RxClient4=trm53005500RxClient4, trm53005500TrapTxGlitchClient2=trm53005500TrapTxGlitchClient2, trmAlarmSeverity=trmAlarmSeverity, Present=Present, trm76xxCustomFibRate=trm76xxCustomFibRate, trm53005500TxLine=trm53005500TxLine, trmAlarmExternal=trmAlarmExternal, trm25xxLaserBiasCurLine=trm25xxLaserBiasCurLine, trmListHwRevision=trmListHwRevision, trm75xxTrapTxClient=trm75xxTrapTxClient, trm26xxOpticalPowerPIN1=trm26xxOpticalPowerPIN1, trm26xxTrapTxDisable=trm26xxTrapTxDisable, trm53005500TrapSfpBadTypeClient4=trm53005500TrapSfpBadTypeClient4, trm76xxTrapRxHighPowerClient=trm76xxTrapRxHighPowerClient, trm53005500CDRClient3=trm53005500CDRClient3, trm9xxxEntry=trm9xxxEntry, trm6001Traps=trm6001Traps, PowerStatus=PowerStatus, trm9xxxTrapMissing=trm9xxxTrapMissing, trm76xxTrapEyeQualityLine=trm76xxTrapEyeQualityLine, trm53005500TrapSfpMissingClient4=trm53005500TrapSfpMissingClient4, trm75xxIPAddressClient=trm75xxIPAddressClient, trm25xxTraps=trm25xxTraps, trm76xxTable=trm76xxTable, trm25xx=trm25xx, trm76xxTrapCDRAutoModeRangeChangeClient=trm76xxTrapCDRAutoModeRangeChangeClient, trm76xxTraps=trm76xxTraps, trmCascadeStatus=trmCascadeStatus, trm26xxLogOpticalPower=trm26xxLogOpticalPower, trmTrapVeryHighTemp=trmTrapVeryHighTemp, trm26xxPM=trm26xxPM, trm803xTable=trm803xTable, trm76xxRackNumber=trm76xxRackNumber, trm76xxTrapRxGlitchLine=trm76xxTrapRxGlitchLine, trm6001Date=trm6001Date, trm26xxSlotNumber=trm26xxSlotNumber, trm53005500RxLine=trm53005500RxLine, trm76xxTrapSFPFailureClient=trm76xxTrapSFPFailureClient, trm53005500CDRClient2=trm53005500CDRClient2, trm26xx=trm26xx, trmAlarmActiveAcknowledgeAllDeact=trmAlarmActiveAcknowledgeAllDeact, CDRMode=CDRMode, trmAlarmActiveCounter=trmAlarmActiveCounter, trm6001TrapExternal2=trm6001TrapExternal2, trmAlarmHandling=trmAlarmHandling)
mibBuilder.exportSymbols("TRANSMODE1100", trm53005500TrapTxOutOfSyncClient4=trm53005500TrapTxOutOfSyncClient4, trm75xxPM=trm75xxPM, AlarmAcknowledge=AlarmAcknowledge, trm53005500PM=trm53005500PM, trm53005500TrapSfpMissingClient3=trm53005500TrapSfpMissingClient3, trm9xxxFM=trm9xxxFM, trmAlarmLogDeactTime=trmAlarmLogDeactTime, trm53005500TrapRxLinkDownClient1=trm53005500TrapRxLinkDownClient1, trmAlarmActiveName=trmAlarmActiveName, trm75xxTrapTxDisableClient=trm75xxTrapTxDisableClient, trmAlarmLogRackNumber=trmAlarmLogRackNumber, trm6001MACAddress=trm6001MACAddress, trm53005500TrapRxGlitchClient3=trm53005500TrapRxGlitchClient3, trm53005500=trm53005500, trm25xxProtectingLineStatus=trm25xxProtectingLineStatus, trm6001SlotNumber=trm6001SlotNumber, trmOpticalInputPowerHigh850Client=trmOpticalInputPowerHigh850Client, trm25xxTable=trm25xxTable, trmAlarmActiveEntry=trmAlarmActiveEntry, trm53005500TrapTxOutOfSyncClient1=trm53005500TrapTxOutOfSyncClient1, trm25xxTxMode=trm25xxTxMode, trm26xxCurrentTEC1=trm26xxCurrentTEC1, trm2204RackNumber=trm2204RackNumber, trmAlarmSeverityId=trmAlarmSeverityId, trmListProductNumber=trmListProductNumber, trm53005500TrapSfpMissingClient2=trm53005500TrapSfpMissingClient2, trm53005500OpticalInPowLine=trm53005500OpticalInPowLine, trm76xxLaserBiasCurLine=trm76xxLaserBiasCurLine, trmAlarmLogIndex=trmAlarmLogIndex, trm26xxTemperatureTEC1=trm26xxTemperatureTEC1, trm53005500Entry=trm53005500Entry, trmListSoftwareProdNo=trmListSoftwareProdNo, private=private, trm53005500TxModeClient3=trm53005500TxModeClient3, trmAlarmSeverityEntry=trmAlarmSeverityEntry, trmOpticalInputPowerHighAPDLine=trmOpticalInputPowerHighAPDLine, trm53005500FM=trm53005500FM, trm76xxTrapLopLine=trm76xxTrapLopLine, trmAlarmSeverityName=trmAlarmSeverityName, SpeedLimit76=SpeedLimit76, TrafficStatus=TrafficStatus, trm75xxWavelengthLine=trm75xxWavelengthLine, trmListSwVersion=trmListSwVersion, trm53005500TrapTxOutOfSyncClient2=trm53005500TrapTxOutOfSyncClient2, trm53005500WavelengthClient2=trm53005500WavelengthClient2, trmTrapBmiLost=trmTrapBmiLost, trm76xxProdOutPowLine=trm76xxProdOutPowLine, trm53005500TrapHwFailure=trm53005500TrapHwFailure, trm76xxTxMode=trm76xxTxMode, trm803xIDStringLine=trm803xIDStringLine, trm75xxTraps=trm75xxTraps, trmCascade=trmCascade, trm6001IPAddress=trm6001IPAddress, trmAlarmLogActTime=trmAlarmLogActTime, trm76xxTrapTxClient=trm76xxTrapTxClient, trm75xxTxLine=trm75xxTxLine, trm53005500RackNumber=trm53005500RackNumber, trm25xxEstFibRateLine=trm25xxEstFibRateLine, trm26xxTrapBIAS1Faulty=trm26xxTrapBIAS1Faulty, trm25xxCDR=trm25xxCDR, TrmDate=TrmDate, trmAlarmLogSerialNumber=trmAlarmLogSerialNumber, trm25xxSpeedLimit=trm25xxSpeedLimit, trmListSerialNumber=trmListSerialNumber, trm53005500TrapTxDisabledClient3=trm53005500TrapTxDisabledClient3, trm9xxxRackNumber=trm9xxxRackNumber, trm53005500IPAddressClient3=trm53005500IPAddressClient3, trmAlarmActiveIndex=trmAlarmActiveIndex, org=org, TxMode75=TxMode75, trm53005500TrapTxGlitchClient3=trm53005500TrapTxGlitchClient3, trm6001TrapExternal3=trm6001TrapExternal3, trm76xxTxClient=trm76xxTxClient, trm75xxTrapTxLine=trm75xxTrapTxLine, trm26xxTemperature=trm26xxTemperature, trm53005500TrapRxLinkDownClient2=trm53005500TrapRxLinkDownClient2, trm76xxEntry=trm76xxEntry, trmAlarmConfig=trmAlarmConfig, trmAlarmLogUnit=trmAlarmLogUnit, trm76xxFM=trm76xxFM, trm25xxCustomFibRate=trm25xxCustomFibRate, trmOpticalInputPowerHighAPDLine2=trmOpticalInputPowerHighAPDLine2, trm2204=trm2204, trm53005500TxClient1=trm53005500TxClient1, trmListSlotNumber=trmListSlotNumber, trm53005500WavelengthClient3=trm53005500WavelengthClient3, trmListManufacturingDate=trmListManufacturingDate, trmSubrackFM=trmSubrackFM, trmAlarmTemperatureHighHyst=trmAlarmTemperatureHighHyst, trm53005500SlotNumber=trm53005500SlotNumber, trm25xxEntry=trm25xxEntry, trmSubrackList=trmSubrackList, trmAlarmExternalTable=trmAlarmExternalTable, trm75xxTxClient=trm75xxTxClient, trm75xxRackNumber=trm75xxRackNumber, trm6001Entry=trm6001Entry, trm53005500TrapTxGlitchClient4=trm53005500TrapTxGlitchClient4, trmAlarmExternalLevel=trmAlarmExternalLevel, trm53005500IPAddressClient1=trm53005500IPAddressClient1, CascadeStatus=CascadeStatus, trm53005500WavelengthClient4=trm53005500WavelengthClient4, trm76xxEstFibRateLine=trm76xxEstFibRateLine, trm76xxOpticalInPowClient=trm76xxOpticalInPowClient, trm76xxTrapEyeQualityClient=trm76xxTrapEyeQualityClient, AlarmClass=AlarmClass, trm76xxOpticalOutPowClient=trm76xxOpticalOutPowClient, trmTrapHighTemp=trmTrapHighTemp, trm75xxEstProtClient=trm75xxEstProtClient, trmOpticalInputPowerLow850Client=trmOpticalInputPowerLow850Client, transmode=transmode, trm26xxTrapPIUTempShutdown=trm26xxTrapPIUTempShutdown, trm75xxEntry=trm75xxEntry, trm25xxSwReset=trm25xxSwReset, trmListUnitPresent=trmListUnitPresent, trm25xxWorkingLineStatus=trm25xxWorkingLineStatus, trmTrapBmiError=trmTrapBmiError, trmOpticalInputPowerLowAPDLine2=trmOpticalInputPowerLowAPDLine2, trmAlarmActiveUnit=trmAlarmActiveUnit, trm53005500TxClient2=trm53005500TxClient2, trm76xx=trm76xx, trmAlarmActiveTable=trmAlarmActiveTable, trmAlarmGeneral=trmAlarmGeneral, trm6001Time=trm6001Time, trm76xxLineLoopMode=trm76xxLineLoopMode, trmOpticalInputPowerLowPINLine=trmOpticalInputPowerLowPINLine, trm53005500IDStringClient1=trm53005500IDStringClient1, trmAlarmActiveSeverity=trmAlarmActiveSeverity, trmOpticalInputPowerLow1310Client=trmOpticalInputPowerLow1310Client, trmAlarmActiveSerialNumber=trmAlarmActiveSerialNumber, trm803xRackNumber=trm803xRackNumber, trm76xxSpeedLimit=trm76xxSpeedLimit, trm53005500TrapSfpBadTypeClient2=trm53005500TrapSfpBadTypeClient2, trm25xxOpticalOutPowLine=trm25xxOpticalOutPowLine, trm25xxTemperature=trm25xxTemperature, trm25xxTrapWorkingLineFailure=trm25xxTrapWorkingLineFailure, trmAlarmTemperatureLowHyst=trmAlarmTemperatureLowHyst, trm76xxTrapRxLowPowerLine=trm76xxTrapRxLowPowerLine, trm53005500TrapExternalsyncFailureLine=trm53005500TrapExternalsyncFailureLine, trmOpticalInputPowerLowAPDLine=trmOpticalInputPowerLowAPDLine, trm76xxOpticalOutPowLine=trm76xxOpticalOutPowLine, trmAlarmLogAckUser=trmAlarmLogAckUser, trm26xxCurrentTEC2=trm26xxCurrentTEC2, trmAlarmActiveDeactTime=trmAlarmActiveDeactTime, trm26xxStatus=trm26xxStatus, trm76xxTrapSFPMissingClient=trm76xxTrapSFPMissingClient, trm53005500TrapSfpFaultyClient2=trm53005500TrapSfpFaultyClient2, SpeedLimit75=SpeedLimit75, trm26xxVoltageBIAS2=trm26xxVoltageBIAS2, TrmTime=TrmTime, trm26xxTrapTEC2Faulty=trm26xxTrapTEC2Faulty, trm75xxTrapLopClient=trm75xxTrapLopClient, trm75xxTrapLopLine=trm75xxTrapLopLine, trm53005500TrapSfpFaultyClient1=trm53005500TrapSfpFaultyClient1, SlotNumberNmb=SlotNumberNmb, trm75xx=trm75xx)
