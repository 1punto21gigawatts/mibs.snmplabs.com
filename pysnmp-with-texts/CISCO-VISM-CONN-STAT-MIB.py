#
# PySNMP MIB module CISCO-VISM-CONN-STAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VISM-CONN-STAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:18:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
vismChanGrp, = mibBuilder.importSymbols("BASIS-MIB", "vismChanGrp")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, Counter64, Unsigned32, iso, Gauge32, MibIdentifier, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, ModuleIdentity, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Unsigned32", "iso", "Gauge32", "MibIdentifier", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "ModuleIdentity", "IpAddress", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoVismConnStatMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 89))
ciscoVismConnStatMIB.setRevisions(('2005-09-26 00:00', '2004-04-22 00:00', '2003-12-12 00:00', '2003-10-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVismConnStatMIB.setRevisionsDescriptions(('Added - vismChanOamLpbkTimeoutCnts - vismChanOamLpbkTimeoutDuration ', 'Added - vismChanXmtAisCnts - vismChanRcvAisCnts - vismChanXmtFerfCnts - vismChanRcvFerfCnts - vismChanAal5PduSentPkts - vismChanAal5PduRcvdPkts - vismChanAisDelayLeft ', 'Added - vismChan24HrPeakXmtCellRate - vismChanCurrentXmtCellRate - vismChan24HrPeakRcvCellRate - vismChanCurrentRcvCellRate - vismAisSuppressCnt - ciscoVismConnStatGroup1 - ciscoVismConnStatCompliance1 Deprecated - ciscoVismConnStatCompliance ', 'Initial version of the MIB. The content of this MIB was originally available in SMIv1 version. The MIB has been converted to SMIv2 version and descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoVismConnStatMIB.setLastUpdated('200509260000Z')
if mibBuilder.loadTexts: ciscoVismConnStatMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVismConnStatMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoVismConnStatMIB.setDescription('The MIB module contain VISM channel counters information. ')
vismChanCntGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3))
vismChanCntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1), )
if mibBuilder.loadTexts: vismChanCntGrpTable.setStatus('current')
if mibBuilder.loadTexts: vismChanCntGrpTable.setDescription('vismChanCntGrpTable contains VISM channels counters. ')
vismChanCntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1), ).setIndexNames((0, "CISCO-VISM-CONN-STAT-MIB", "vismCntChanNum"))
if mibBuilder.loadTexts: vismChanCntGrpEntry.setStatus('current')
if mibBuilder.loadTexts: vismChanCntGrpEntry.setDescription('An entry for each voice channel. ')
vismCntChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(131, 510))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismCntChanNum.setStatus('current')
if mibBuilder.loadTexts: vismCntChanNum.setDescription('This object identifies the LCN(Logical Channel Number) on the VISM. ')
vismCntClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetcounters", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismCntClrButton.setStatus('current')
if mibBuilder.loadTexts: vismCntClrButton.setDescription('This object is use to either reset counters or perform no action(do not clear counters). ')
vismChanAal2HecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2HecErrors.setStatus('current')
if mibBuilder.loadTexts: vismChanAal2HecErrors.setDescription('This object keep count of egress AAL2(ATM Adaptation layer 2) CPS(Common Part Sub-layer) PDU(Protocol Data Unit) dropped due to HEC(Header Error Control) error. ')
vismChanAal2CrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2CrcErrors.setStatus('current')
if mibBuilder.loadTexts: vismChanAal2CrcErrors.setDescription('This object keeps track of egress AAL2 Type3 CPS PDUs dropped due to invalid CRC-10(Cyclic redundancy check) error. CRC validation is for Type 3 packets only. Type 1 packets are not subjected to CRC-10 error validation. Also this counter keeps track of CRC-10 errors for the Type 3 packets which are generated by the the datamover CPU only. It does not take into account of Type 3 packets generated by the DSP(Digital Signal Processing). ')
vismChanAal2OamLpbLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2OamLpbLostCells.setStatus('current')
if mibBuilder.loadTexts: vismChanAal2OamLpbLostCells.setDescription('This object keeps track of the number of OAM(Operation and management) loopback cells lost. OAM loopback cells are sent on a periodic basis (1 sec) on each PVC(Permanent Virtual Circuit) to monitor the health of the PVC. ')
vismChanAal2InvOsfCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2InvOsfCells.setStatus('current')
if mibBuilder.loadTexts: vismChanAal2InvOsfCells.setDescription('This object keeps track of the number AAL2 cells dropped due to invalid OSF (OffSet Field) in the egress direction. ')
vismChanAal2InvParCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2InvParCells.setStatus('current')
if mibBuilder.loadTexts: vismChanAal2InvParCells.setDescription('This object keeps track of the number of AAL2 cells dropped due to invalid Parity bit field in the egress direction. ')
vismChanAal2CpsSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2CpsSentPkts.setStatus('current')
if mibBuilder.loadTexts: vismChanAal2CpsSentPkts.setDescription('This object keeps track of the number of AAL2 CPS packets sent to the network. ')
vismChanAal2CpsRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2CpsRcvdPkts.setStatus('current')
if mibBuilder.loadTexts: vismChanAal2CpsRcvdPkts.setDescription('This object keeps track of AAL2 CPS packets received from the network. This does not include the packets which are counted as error packets. ')
vismChanAal2CpsInvCidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2CpsInvCidPkts.setStatus('current')
if mibBuilder.loadTexts: vismChanAal2CpsInvCidPkts.setDescription('This object keeps track of AAL2 CPS packets dropped in the egress direction due to invalid CID(Channel Identifier). The CID may be considered as invalid if it is out of range or not configured. ')
vismChanAal2CpsInvUuiPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2CpsInvUuiPkts.setStatus('current')
if mibBuilder.loadTexts: vismChanAal2CpsInvUuiPkts.setDescription('This object keeps track of AAL2 CPS packets dropped in the egress direction due to invalid UUI (User-to-User Information) field. ')
vismChanAal2CpsInvLenPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal2CpsInvLenPkts.setStatus('current')
if mibBuilder.loadTexts: vismChanAal2CpsInvLenPkts.setDescription('This object keeps track of AAL2 CPS packets dropped in the egress direction due to invalid length field. ')
vismChanAal5InvCpiPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal5InvCpiPdus.setStatus('current')
if mibBuilder.loadTexts: vismChanAal5InvCpiPdus.setDescription('This object counts the number of AAL5 PDUs dropped in the egress direction due to invalid CPI(Common Part Indicator) field in the AAL5 PDU trailer. This is applicable only to the PVCs configured as AAL5 PVCs (VoIP(Voice Over IP) PVCs or CCS(Common Channel Signaling) PVCs in the case of VoAAL2 application. ')
vismChanAal5OversizedSdusRcvdPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal5OversizedSdusRcvdPdus.setStatus('current')
if mibBuilder.loadTexts: vismChanAal5OversizedSdusRcvdPdus.setDescription('This object counts the number AAL5 PDUs dropped due to the SDU(Service Data Unit) size bigger than the configured value. This is applicable for AAL5 PVCs only. ')
vismChanAal5InvLenPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal5InvLenPdus.setStatus('current')
if mibBuilder.loadTexts: vismChanAal5InvLenPdus.setDescription('This object counts the number of AAL5 PDUs dropped due to the length violations. This is applicable to the CCS PVCs. The HDLC(High Level Data Link Control) frames should have a minimum frame size in order for the proper interpretation by the upper layer protocol. ')
vismChanAal5Crc32ErrorPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal5Crc32ErrorPdus.setStatus('current')
if mibBuilder.loadTexts: vismChanAal5Crc32ErrorPdus.setDescription('This object counts the number of AAL5 PDUs dropped in the egress direction due to CRC-32 errors detected by the SAR(Segmentation and Reassembly). ')
vismChanAal5ReassemTimerExpiryPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal5ReassemTimerExpiryPdus.setStatus('current')
if mibBuilder.loadTexts: vismChanAal5ReassemTimerExpiryPdus.setDescription('This object counts of AAL5 PDU reassembly timer expirations. The timers are maintained in the egress direction for building an AAL5 PDU from the cells. ')
vismChan24HrPeakXmtCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChan24HrPeakXmtCellRate.setStatus('current')
if mibBuilder.loadTexts: vismChan24HrPeakXmtCellRate.setDescription('This object counts the peak transmit cell rate (cells per second) for the channel since midnight with reference to node time; the peak cell rate counter gets reset to 0 every 24 hours at midnight. If the node time is changed, the counter will continue to gather data until the next time midnight is reached.')
vismChanCurrentXmtCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanCurrentXmtCellRate.setStatus('current')
if mibBuilder.loadTexts: vismChanCurrentXmtCellRate.setDescription('This object counts the current transmit cell rate (cells per second) for the channel.')
vismChan24HrPeakRcvCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChan24HrPeakRcvCellRate.setStatus('current')
if mibBuilder.loadTexts: vismChan24HrPeakRcvCellRate.setDescription('This object counts the peak receive cell rate (cells per second) for the channel since midnight with reference to node time; the peak cell rate counter gets reset to 0 every 24 hours at midnight. If the node time is changed, the counter will continue to gather data until the next time midnight is reached.')
vismChanCurrentRcvCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanCurrentRcvCellRate.setStatus('current')
if mibBuilder.loadTexts: vismChanCurrentRcvCellRate.setDescription('This object counts the current receive cell rate (cells per second) for the channel.')
vismChanAisSuppressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAisSuppressCount.setStatus('current')
if mibBuilder.loadTexts: vismChanAisSuppressCount.setDescription('This object holds the number of times that ATM network alarms were successfully suppressed and prevented from propagating onto the TDM side for this PVC.')
vismChanXmtAisCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanXmtAisCnts.setStatus('current')
if mibBuilder.loadTexts: vismChanXmtAisCnts.setDescription('The number of instances that an ATM AIS alarm was transmitted.')
vismChanRcvAisCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanRcvAisCnts.setStatus('current')
if mibBuilder.loadTexts: vismChanRcvAisCnts.setDescription('The number of instances that an ATM AIS alarm was received.')
vismChanXmtFerfCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanXmtFerfCnts.setStatus('current')
if mibBuilder.loadTexts: vismChanXmtFerfCnts.setDescription('The number of instances that an ATM FERF alarm was transmitted.')
vismChanRcvFerfCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanRcvFerfCnts.setStatus('current')
if mibBuilder.loadTexts: vismChanRcvFerfCnts.setDescription('The number of instances that an ATM FERF alarm was received.')
vismChanAal5PduSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal5PduSentPkts.setStatus('current')
if mibBuilder.loadTexts: vismChanAal5PduSentPkts.setDescription('This object counts the number of AAL5 PDUs transmitted to the network. This is only applicable to the PVCs configured as AAL5 PVCs, VoIP (Voice Over IP) PVCs or CCS (Common Channel Signaling) PVCs in the case of VoAAL2 applications.')
vismChanAal5PduRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAal5PduRcvdPkts.setStatus('current')
if mibBuilder.loadTexts: vismChanAal5PduRcvdPkts.setDescription('This object counts the number of AAL5 PDUs received from the network. This is only applicable to the PVCs configured as AAL5 PVCs, VoIP (Voice Over IP) PVCs or CCS (Common Channel Signaling) PVCs in the case of VoAAL2 applications.')
vismChanAisDelayLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanAisDelayLeft.setStatus('current')
if mibBuilder.loadTexts: vismChanAisDelayLeft.setDescription('The real-time number of seconds remaining for the AIS delay timer after which the ATM alarm will be propagated to the TDM side. This object is tied to the vismChanAisDelayTime object in the CISCO-VISM-CONN-MIB. vismChanAisDelayTime will store the configurable AIS delay timer. The delay time left (vismChanAisDelayLeft) will be equal to the delay time in vismChanAisDelayTime until an AIS alarm is received at which point it starts to decrement and could go down to 0 and propagate the alarm to the TDM side.')
vismChanOamLpbkTimeoutCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanOamLpbkTimeoutCnts.setStatus('current')
if mibBuilder.loadTexts: vismChanOamLpbkTimeoutCnts.setDescription('The number of instances that OAM loopback timeout alarm has occurred since the system was last re-initialized.')
vismChanOamLpbkTimeoutDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 39), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vismChanOamLpbkTimeoutDuration.setStatus('current')
if mibBuilder.loadTexts: vismChanOamLpbkTimeoutDuration.setDescription('The total duration of OAM loopback timeout alarms since the system was last re-initialized.')
ciscoVismConnStatMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 89, 2))
ciscoVismConnStatMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 89, 2, 1))
ciscoVismConnStatMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 89, 2, 2))
ciscoVismConnStatCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 89, 2, 2, 1)).setObjects(("CISCO-VISM-CONN-STAT-MIB", "ciscoVismConnStatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismConnStatCompliance = ciscoVismConnStatCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoVismConnStatCompliance.setDescription('The compliance statement for objects related to VISM channel counters.')
ciscoVismConnStatCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 89, 2, 2, 2)).setObjects(("CISCO-VISM-CONN-STAT-MIB", "ciscoVismConnStatGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismConnStatCompliance1 = ciscoVismConnStatCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoVismConnStatCompliance1.setDescription('The compliance statement for objects related to VISM channel counters.')
ciscoVismConnStatCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 89, 2, 2, 3)).setObjects(("CISCO-VISM-CONN-STAT-MIB", "ciscoVismConnStatGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismConnStatCompliance2 = ciscoVismConnStatCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoVismConnStatCompliance2.setDescription('The compliance statement for objects related to VISM channel counters.')
ciscoVismConnStatCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 89, 2, 2, 4)).setObjects(("CISCO-VISM-CONN-STAT-MIB", "ciscoVismConnStatGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismConnStatCompliance3 = ciscoVismConnStatCompliance3.setStatus('current')
if mibBuilder.loadTexts: ciscoVismConnStatCompliance3.setDescription('The compliance statement for objects related to VISM channel counters.')
ciscoVismConnStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 89, 2, 1, 1)).setObjects(("CISCO-VISM-CONN-STAT-MIB", "vismCntChanNum"), ("CISCO-VISM-CONN-STAT-MIB", "vismCntClrButton"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2HecErrors"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CrcErrors"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2OamLpbLostCells"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2InvOsfCells"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2InvParCells"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsSentPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsRcvdPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsInvCidPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsInvUuiPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsInvLenPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5InvCpiPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5OversizedSdusRcvdPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5InvLenPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5Crc32ErrorPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5ReassemTimerExpiryPdus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismConnStatGroup = ciscoVismConnStatGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoVismConnStatGroup.setDescription('The collection of objects which are used to represent VISM channel counter group.')
ciscoVismConnStatGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 89, 2, 1, 2)).setObjects(("CISCO-VISM-CONN-STAT-MIB", "vismCntChanNum"), ("CISCO-VISM-CONN-STAT-MIB", "vismCntClrButton"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2HecErrors"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CrcErrors"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2OamLpbLostCells"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2InvOsfCells"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2InvParCells"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsSentPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsRcvdPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsInvCidPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsInvUuiPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsInvLenPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5InvCpiPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5OversizedSdusRcvdPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5InvLenPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5Crc32ErrorPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5ReassemTimerExpiryPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChan24HrPeakXmtCellRate"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanCurrentXmtCellRate"), ("CISCO-VISM-CONN-STAT-MIB", "vismChan24HrPeakRcvCellRate"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanCurrentRcvCellRate"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAisSuppressCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismConnStatGroup1 = ciscoVismConnStatGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoVismConnStatGroup1.setDescription('The collection of objects which are used to represent VISM channel counter group.')
ciscoVismConnStatGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 89, 2, 1, 3)).setObjects(("CISCO-VISM-CONN-STAT-MIB", "vismCntChanNum"), ("CISCO-VISM-CONN-STAT-MIB", "vismCntClrButton"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2HecErrors"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CrcErrors"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2OamLpbLostCells"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2InvOsfCells"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2InvParCells"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsSentPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsRcvdPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsInvCidPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsInvUuiPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsInvLenPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5InvCpiPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5OversizedSdusRcvdPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5InvLenPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5Crc32ErrorPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5ReassemTimerExpiryPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChan24HrPeakXmtCellRate"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanCurrentXmtCellRate"), ("CISCO-VISM-CONN-STAT-MIB", "vismChan24HrPeakRcvCellRate"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanCurrentRcvCellRate"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAisSuppressCount"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanXmtAisCnts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanRcvAisCnts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanXmtFerfCnts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanRcvFerfCnts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5PduSentPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5PduRcvdPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAisDelayLeft"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismConnStatGroup2 = ciscoVismConnStatGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoVismConnStatGroup2.setDescription('The collection of objects which are used to represent VISM channel counter group.')
ciscoVismConnStatGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 89, 2, 1, 4)).setObjects(("CISCO-VISM-CONN-STAT-MIB", "vismCntChanNum"), ("CISCO-VISM-CONN-STAT-MIB", "vismCntClrButton"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2HecErrors"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CrcErrors"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2OamLpbLostCells"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2InvOsfCells"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2InvParCells"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsSentPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsRcvdPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsInvCidPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsInvUuiPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal2CpsInvLenPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5InvCpiPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5OversizedSdusRcvdPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5InvLenPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5Crc32ErrorPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5ReassemTimerExpiryPdus"), ("CISCO-VISM-CONN-STAT-MIB", "vismChan24HrPeakXmtCellRate"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanCurrentXmtCellRate"), ("CISCO-VISM-CONN-STAT-MIB", "vismChan24HrPeakRcvCellRate"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanCurrentRcvCellRate"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAisSuppressCount"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanXmtAisCnts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanRcvAisCnts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanXmtFerfCnts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanRcvFerfCnts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5PduSentPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAal5PduRcvdPkts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanAisDelayLeft"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanOamLpbkTimeoutCnts"), ("CISCO-VISM-CONN-STAT-MIB", "vismChanOamLpbkTimeoutDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismConnStatGroup3 = ciscoVismConnStatGroup3.setStatus('current')
if mibBuilder.loadTexts: ciscoVismConnStatGroup3.setDescription('The collection of objects which are used to represent VISM channel counter group.')
mibBuilder.exportSymbols("CISCO-VISM-CONN-STAT-MIB", ciscoVismConnStatGroup1=ciscoVismConnStatGroup1, vismChanRcvAisCnts=vismChanRcvAisCnts, ciscoVismConnStatMIB=ciscoVismConnStatMIB, vismChanAal2CpsInvLenPkts=vismChanAal2CpsInvLenPkts, vismChanAal2OamLpbLostCells=vismChanAal2OamLpbLostCells, vismChanAal2CpsSentPkts=vismChanAal2CpsSentPkts, ciscoVismConnStatCompliance=ciscoVismConnStatCompliance, vismChanAal2CpsInvCidPkts=vismChanAal2CpsInvCidPkts, vismChanRcvFerfCnts=vismChanRcvFerfCnts, ciscoVismConnStatGroup=ciscoVismConnStatGroup, vismChanAal2CrcErrors=vismChanAal2CrcErrors, vismChan24HrPeakXmtCellRate=vismChan24HrPeakXmtCellRate, vismChanAal5Crc32ErrorPdus=vismChanAal5Crc32ErrorPdus, vismChanCurrentXmtCellRate=vismChanCurrentXmtCellRate, vismChanCurrentRcvCellRate=vismChanCurrentRcvCellRate, ciscoVismConnStatMIBConformance=ciscoVismConnStatMIBConformance, vismCntChanNum=vismCntChanNum, ciscoVismConnStatMIBCompliances=ciscoVismConnStatMIBCompliances, ciscoVismConnStatCompliance3=ciscoVismConnStatCompliance3, vismChanAal5OversizedSdusRcvdPdus=vismChanAal5OversizedSdusRcvdPdus, ciscoVismConnStatMIBGroups=ciscoVismConnStatMIBGroups, vismChanAisDelayLeft=vismChanAisDelayLeft, vismChanAal5InvCpiPdus=vismChanAal5InvCpiPdus, vismChanAal5InvLenPdus=vismChanAal5InvLenPdus, vismChanAisSuppressCount=vismChanAisSuppressCount, ciscoVismConnStatGroup3=ciscoVismConnStatGroup3, vismChanAal5PduSentPkts=vismChanAal5PduSentPkts, PYSNMP_MODULE_ID=ciscoVismConnStatMIB, vismChanXmtAisCnts=vismChanXmtAisCnts, vismChanOamLpbkTimeoutCnts=vismChanOamLpbkTimeoutCnts, ciscoVismConnStatGroup2=ciscoVismConnStatGroup2, vismChanCntGrp=vismChanCntGrp, vismChanOamLpbkTimeoutDuration=vismChanOamLpbkTimeoutDuration, vismChanAal2InvParCells=vismChanAal2InvParCells, vismChanCntGrpTable=vismChanCntGrpTable, vismChan24HrPeakRcvCellRate=vismChan24HrPeakRcvCellRate, vismChanAal2CpsRcvdPkts=vismChanAal2CpsRcvdPkts, vismChanAal2InvOsfCells=vismChanAal2InvOsfCells, vismChanCntGrpEntry=vismChanCntGrpEntry, vismChanAal5ReassemTimerExpiryPdus=vismChanAal5ReassemTimerExpiryPdus, ciscoVismConnStatCompliance2=ciscoVismConnStatCompliance2, vismChanAal2CpsInvUuiPkts=vismChanAal2CpsInvUuiPkts, vismCntClrButton=vismCntClrButton, vismChanAal5PduRcvdPkts=vismChanAal5PduRcvdPkts, vismChanXmtFerfCnts=vismChanXmtFerfCnts, ciscoVismConnStatCompliance1=ciscoVismConnStatCompliance1, vismChanAal2HecErrors=vismChanAal2HecErrors)
