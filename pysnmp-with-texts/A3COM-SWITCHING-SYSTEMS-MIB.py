#
# PySNMP MIB module A3COM-SWITCHING-SYSTEMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-SWITCHING-SYSTEMS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:08:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, enterprises, iso, Bits, IpAddress, ObjectIdentity, MibIdentifier, ModuleIdentity, Unsigned32, Integer32, NotificationType, Gauge32, TimeTicks, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "enterprises", "iso", "Bits", "IpAddress", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Integer32", "NotificationType", "Gauge32", "TimeTicks", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class A3ComSysStorageType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 3)

class A3ComSysAddressType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2)

class A3ComSysResourceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 3)

class A3ComSysResourceBitMask(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class IpxNetworkNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class ATNetworkNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class ATName(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class DdpNodeAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
switchingSystems_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29)).setLabel("switchingSystems-mib")
switchingSystemsMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4))
switchingSystemsFddiMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 10))
a3ComSysSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 1))
a3ComSysSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 2))
a3ComSysControlPanel = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 3))
a3ComSysPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 4))
a3ComSysSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 5))
a3ComSysAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 6))
a3ComSysInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 7))
a3ComSysEthernetPort = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 8))
a3ComSysSmt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 9))
a3ComSysBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 10))
a3ComSysIpRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 11))
a3ComSysNetworkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 12))
a3ComSysTokenRingPort = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 13))
a3ComSysFtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14))
a3ComSysIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 15))
a3ComSysIpxGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 16))
a3ComSysAppleTalkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 17))
a3ComSysModuleCardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 18))
a3ComSysDiagnosticsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 19))
a3ComSysSystemId = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemId.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemId.setDescription('The unique identifier assigned to this system during manufacturing.')
a3ComSysSystemType = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("lanplex6000", 2), ("lanplex2000", 3), ("coreBuilder3500", 4), ("coreBuilder9400", 5), ("superStack3900", 6), ("superStack9300", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemType.setDescription('The type of system.')
a3ComSysSystemName = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemName.setDescription('The text string describing this system.')
a3ComSysSystemManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemManufacturer.setDescription('The text string describing the manufacturer of this system.')
a3ComSysSystemHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemHardwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemHardwareRevision.setDescription('The revision level of the system, contained in two octets. The first octet indicates the artwork revision, and the second octet indicates the rework level.')
a3ComSysSystemMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemMemorySize.setDescription('The amount of memory (RAM), in bytes, present on the system processor board.')
a3ComSysSystemFlashMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemFlashMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemFlashMemorySize.setDescription('The amount of flash memory, in bytes, present on the system processor board.')
a3ComSysSystemNvMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemNvMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemNvMemorySize.setDescription('The amount of non-volatile memory, in bytes, present on the system processor board.')
a3ComSysSystemSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemSoftwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemSoftwareRevision.setDescription('The revision number of the Switching Systems software. Each byte indicates the following: byte 0: major release number. byte 1: minor release number. byte 2: update number. byte 3: bits 7-6: release type. bits 5-0: supplemental identifier.')
a3ComSysSystemBuildTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemBuildTime.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemBuildTime.setDescription('The build time of the system software.')
a3ComSysSystemSnmpRevision = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemSnmpRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemSnmpRevision.setDescription('The revision number of the SNMP agent implementation.')
a3ComSysSystemRequestedSnmpMode = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleAgentMode", 1), ("multiAgentMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSystemRequestedSnmpMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemRequestedSnmpMode.setDescription('This object describes the requested SNMP mode for the system. The value of this object indicates the mode that will become effective following a reboot of the system. Note that only a subset of the above values may be valid for some systems.')
a3ComSysSystemCurrentSnmpMode = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleAgentMode", 1), ("multiAgentMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemCurrentSnmpMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemCurrentSnmpMode.setDescription('This object describes the currently active SNMP mode for the system. Note that only a subset of the above values may be valid for some systems.')
a3ComSysSystemAction = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("nvReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSystemAction.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemAction.setDescription("This object, when read, always returns the value other(1). Setting this object to the value reset(2) causes a reset of the system. Setting this object to the value nvReset(3) causes the system's non-volatile configuration to be reset to the default values. The value other(1) is not a vaild value for set operations.")
a3ComSysSystemOvertemperature = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemOvertemperature.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemOvertemperature.setDescription('This object indicates the current overtemperature status for the system. If the system does not support overtemperature detection, this object returns notSupported.')
a3ComSysSystemFanFailure = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemFanFailure.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemFanFailure.setDescription('This object indicates the current fan status for the system. If the system does not support fan failure detection, this object returns notSupported.')
a3ComSysSystemProtocolMask = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemProtocolMask.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemProtocolMask.setDescription('This object is a bit mask that indicates which protocols exist in the software image currently loaded in memory. The value of this OBJECT is a sum. It initially takes on the value 0, then for each protocol bit as defined below, 2 raised to the value of the (bit position - 1) is added to the sum. The following bits are defined: IP_ROUTING 0x00000001 IPX_ROUTING 0x00000002 DDP_ROUTING 0x00000004 A value of 0x00000000 indicates the standard switching software.')
a3ComSysSystemConsoleAccess = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSystemConsoleAccess.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemConsoleAccess.setDescription('This object determines whether another device can remotely access the system console via Telnet, Rlogin, or modem port. An existing remote session will not be terminated when this value is modified.')
a3ComSysSystemConsoleReadPwd = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSystemConsoleReadPwd.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemConsoleReadPwd.setDescription('This object is the console read-access password.')
a3ComSysSystemConsoleWritePwd = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSystemConsoleWritePwd.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemConsoleWritePwd.setDescription('This object is the console write-access password. The read-write community string is required for access to this object.')
a3ComSysSystemConsoleAdminPwd = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSystemConsoleAdminPwd.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemConsoleAdminPwd.setDescription('This object is the console admin-access password. The read-write community string is required for access to this object.')
a3ComSysSystemDateTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSystemDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemDateTime.setDescription('The current date and time as reflected by the system clock in the format mm/dd/yy hh:mm:ss xM.')
a3ComSysSystemDSTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-120, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSystemDSTime.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemDSTime.setDescription('This parameter specifies the displacement, in minutes, from non-daylight savings time. The a3ComSysDSTime object, along with the a3ComSysTimeZone object, allows the system to support Universal time for network communications spanning different time zones.')
a3ComSysSystemTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-720, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSystemTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemTimeZone.setDescription('This parameter specifies, in minutes, displacement of the system west of Greenwich. A negative number for this parameter indicates how many minutes displacement east of Greenwich the site is located. A positive number indicates the number of minutes west of Greenwich.')
a3ComSysSystemCurrentFddiStationMode = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleStationMode", 1), ("multiStationMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemCurrentFddiStationMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemCurrentFddiStationMode.setDescription('This object describes the current FDDI station mode for systems that support multi-station mode.')
a3ComSysSystemRequestedFddiStationMode = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleStationMode", 1), ("multiStationMode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSystemRequestedFddiStationMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemRequestedFddiStationMode.setDescription('This object describes the requested FDDI station mode for systems that support multi-station mode. The requested mode will become current during the next system reboot.')
a3ComSysSystemLog = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 27))
a3ComSysSystemLogEntryCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 27, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemLogEntryCurrentCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemLogEntryCurrentCount.setDescription('The number of entries currently recorded in the system log.')
a3ComSysSystemLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 27, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemLogMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemLogMaxSize.setDescription('The maximum number of events that can be recorded in the system log.')
a3ComSysSystemLogSeverityThreshold = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 27, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("error", 3), ("fatal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSystemLogSeverityThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemLogSeverityThreshold.setDescription('This object determines the miminum serverety level of events recorded in the system log. For example, if the a3ComSysSysteLogSeverityThreshold is set to errors(3) than only events which have serverity levels of error(3) or higher will be recorded.')
a3ComSysSystemLogTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 27, 4), )
if mibBuilder.loadTexts: a3ComSysSystemLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemLogTable.setDescription('This table provides information on recorded system events.')
a3ComSysSystemLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 27, 4, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSystemLogIndex"))
if mibBuilder.loadTexts: a3ComSysSystemLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemLogEntry.setDescription('A system log entry.')
a3ComSysSystemLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 27, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemLogIndex.setDescription('The index of the log entry relative to this entry.')
a3ComSysSystemLogSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 27, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("information", 1), ("warning", 2), ("error", 3), ("fatal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemLogSeverityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemLogSeverityLevel.setDescription('Indicates the severity level of the log entry.')
a3ComSysSystemLogDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 27, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemLogDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemLogDateTime.setDescription('Indicates the date and time of the log event and is formatted as follows: MM:DD:YY HH:MM:SS.')
a3ComSysSystemLogFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 27, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("exception", 1), ("operatingSystem", 2), ("assertion", 3), ("spanningTree", 4), ("fcmlmm", 5), ("lmmfddi", 6), ("lmmboard", 7), ("esm", 8), ("trsm", 9), ("efsm", 10), ("fsm", 11), ("hsi", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemLogFacility.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemLogFacility.setDescription('The facility which entered the event in the log. fcmlmm(6) represents those events which may be common to the Lanplex Management Module (LMM) and the FDDI Concentrator Module (FCM). lmmfddi(6) represents those events specific to the FDDI portion of the LMM and lmmboard represents general events logged by the LMM.')
a3ComSysSystemLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 27, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemLogMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemLogMessage.setDescription('The recorded log message.')
a3ComSysSystemBaseMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 28), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemBaseMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemBaseMACAddress.setDescription('The base MAC address for the system.')
a3ComSysSystemMACAddressCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemMACAddressCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemMACAddressCount.setDescription('The number of MAC addresses allocated to this system.')
a3ComSysSystemChassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemChassisSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemChassisSerialNumber.setDescription('The serial number of the chassis.')
a3ComSysSystemFPMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemFPMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemFPMemorySize.setDescription('The amount of frame processor memory (RAM), in bytes.')
a3ComSysSystemBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSystemBufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSystemBufferSize.setDescription('The amount of buffer memory, in bytes.')
a3ComSysSlotCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSlotCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSlotCount.setDescription('The count of slots in the chassis.')
a3ComSysSlotTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 2, 2), )
if mibBuilder.loadTexts: a3ComSysSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSlotTable.setDescription('A list of slot entries. A single entry exists in this list for each slot in the chassis.')
a3ComSysSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 2, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSlotIndex"))
if mibBuilder.loadTexts: a3ComSysSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSlotEntry.setDescription('A slot entry contains information about a particular slot.')
a3ComSysSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSlotIndex.setDescription('The index of the slot identified by this entry.')
a3ComSysSlotBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("emptyLocation", 2), ("esmBoard", 7), ("fcmBoard", 8), ("lmmBoard", 9), ("efsmBoard", 10), ("trsmBoard", 11), ("tmmBoard", 12), ("fsmBoard", 13), ("fesmBoard", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSlotBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSlotBoardType.setDescription('The type of board residing in the slot identified by this entry.')
a3ComSysSlotBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSlotBoardRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSlotBoardRevision.setDescription('The revision number of the board in the slot identified by this entry. If the slot is empty, or the revision is unknown this object returns a zero length string.')
a3ComSysSlotBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("testing", 2), ("offline", 3), ("online", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSlotBoardStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSlotBoardStatus.setDescription('The status of the board in the slot identified by this entry.')
a3ComSysSlotBoardName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSlotBoardName.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSlotBoardName.setDescription('The text string describing the board in the slot identified by this entry.')
a3ComSysSlotBoardNameAbbrev = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSlotBoardNameAbbrev.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSlotBoardNameAbbrev.setDescription('The abbreviation used to describe the board in the slot identified by this entry.')
a3ComSysSlotEthernetPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSlotEthernetPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSlotEthernetPortCount.setDescription('The count of ethernet ports in the slot identified by this entry.')
a3ComSysSlotFddiMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSlotFddiMacCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSlotFddiMacCount.setDescription('The count of FDDI MACs in the slot identified by this entry.')
a3ComSysSlotFddiPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSlotFddiPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSlotFddiPortCount.setDescription('The count of FDDI ports in the slot identified by this entry.')
a3ComSysSlotOvertemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSlotOvertemperature.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSlotOvertemperature.setDescription('This object indicates the current overtemperature status for the slot. If the slot does not support overtemperature detection, this object returns notSupported.')
a3ComSysSlotTokenRingPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSlotTokenRingPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSlotTokenRingPortCount.setDescription('The count of TokenRing ports in the slot identified by this entry.')
a3ComSysSlotBoardRevStr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSlotBoardRevStr.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSlotBoardRevStr.setDescription('This revision number of the board in the slot identified by this entry. If the slot is empty, or the revision is unknown this object returns a zero length string. The format of the string is XX.YY, where the XX is the major revision (artwork), the YY is the minor revision (rework)')
a3ComSysSlotConverterBad = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSlotConverterBad.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSlotConverterBad.setDescription('This object indicates the current status +12V->+5V converter for the slot. If the slot does not support +12V->+5V converter detection, this object returns notSupported.')
a3ComSysControlPanelHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysControlPanelHardwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysControlPanelHardwareRevision.setDescription('An 8-bit value specifying the revision level of the control panel hardware.')
a3ComSysControlPanelSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysControlPanelSoftwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysControlPanelSoftwareRevision.setDescription('An 8-bit value specifying the revision level of the control panel software.')
a3ComSysControlPanelLines = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysControlPanelLines.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysControlPanelLines.setDescription('The number of lines in the control panel display.')
a3ComSysControlPanelColumns = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysControlPanelColumns.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysControlPanelColumns.setDescription('The number of columns in the control panel display.')
a3ComSysControlPanelText = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysControlPanelText.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysControlPanelText.setDescription('The currently displayed text in the control panel display.')
a3ComSysControlPanelAccess = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysControlPanelAccess.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysControlPanelAccess.setDescription('This object determines whether modifications to system configuration are allowed via the Control Panel')
a3ComSysPowerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysPowerSupplyCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysPowerSupplyCount.setDescription('The count of power supplies in the system.')
a3ComSysPowerSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 4, 2), )
if mibBuilder.loadTexts: a3ComSysPowerSupplyStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysPowerSupplyStatusTable.setDescription('A list of power supply status entries.')
a3ComSysPowerSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 4, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysPowerSupplyStatusIndex"))
if mibBuilder.loadTexts: a3ComSysPowerSupplyStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysPowerSupplyStatusEntry.setDescription('A power supply status entry contains information about a particular power supply.')
a3ComSysPowerSupplyStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysPowerSupplyStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysPowerSupplyStatusIndex.setDescription('The unique index of the power supply identified by this entry.')
a3ComSysPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysPowerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysPowerSupplyStatus.setDescription('This object represents the power supply status. The value is a sum. It initially takes on the value 0, then for each type which is active, 2 raised to a power is added to the sum. The powers are according to the following table. For the 6000 Backbone Aggregator an over temp for power supply 1 and power supply 2 will be reported as a power supply 1 Over Temperature Failure, and a fan failure will be reported as a power supply 2 Over Temperature Failure. Failure Type Power AC Failure 0 Plus 5 Failure 1 Plus 12 Failure 2 Over Temperature Failure 3 Power Supply Inserted 4 Power Supply Extracted 5')
a3ComSysPowerSupplyStatusSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysPowerSupplyStatusSupported.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysPowerSupplyStatusSupported.setDescription('This object represents the various power supply status types which are supported. The value is a sum. It initially takes on the value 0, then for each type which is supported, 2 raised to a power is added to the sum. The powers are according to the following table: Failure Type Power AC Failure 0 Plus 5 Failure 1 Plus 12 Failure 2 Over Temperature Failure 3 Power Supply Inserted 4 Power Supply Extracted 5 This object used in conjunction with the a3ComSysPowerSupplyStatus object for a given power supply provide a complete picture of the status of the power supply.')
a3ComSysSnmpAgentId = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSnmpAgentId.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSnmpAgentId.setDescription('The unique id for this SNMP agent within the system.')
a3ComSysSnmpInternalAgentTrapMask = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSnmpInternalAgentTrapMask.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSnmpInternalAgentTrapMask.setDescription('This value is a bit string that indicates which traps are enabled for transmit to other agents in the system. The octet string value is treated as a 64-bit integer value. The value is a sum. It initially takes on the value 0, then for each trap which is enabled, 2 raised to the value of (a3ComSysAgentTrapDescriptionIndex - 1) for that trap is added to the sum.')
a3ComSysSnmpInternalAgentTrapDestinationMask = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSnmpInternalAgentTrapDestinationMask.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSnmpInternalAgentTrapDestinationMask.setDescription('A value which indicates to which other agents in the system traps should be sent. The value is a sum. It initially takes on the value 0, then for each agent which is to receive traps, 2 raised to the value of (a3ComSysSnmpAgentId - 1) for that agent is added to the sum. Note that only traps which are enabled according to the value of the a3ComSysSnmpInternalAgentTrapMask object will be forwarded, and that each trap which is forwarded will be transmitted to each agent identified by this mask.')
a3ComSysSnmpProxyInternalRequests = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSnmpProxyInternalRequests.setStatus('deprecated')
if mibBuilder.loadTexts: a3ComSysSnmpProxyInternalRequests.setDescription('This object determines if this agent will proxy requests to other agents in the system. If the value of this object is true(1), this agent will proxy requests to other agents in the chassis.')
a3ComSysSnmpInternalProxyRequestMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSnmpInternalProxyRequestMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSnmpInternalProxyRequestMaxAge.setDescription('The maximum time, in seconds, an internal proxy request will remain queued waiting for a response before being discarded. Note that when the value of a3ComSysSnmpProxyInternalRequests is false(2), the value of this object is ignored.')
a3ComSysSnmpProxyInternalTraps = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSnmpProxyInternalTraps.setStatus('deprecated')
if mibBuilder.loadTexts: a3ComSysSnmpProxyInternalTraps.setDescription('This object determines if this agent will generate proxy traps for those traps received from other agents in the system. If the value of this object is true(1), this agent will generate proxy traps for those received from other agents in the chassis. Note that agents will not proxy traps to other agents within the system to prevent looping of traps.')
a3ComSysSnmpInternalProxyTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 5, 7), )
if mibBuilder.loadTexts: a3ComSysSnmpInternalProxyTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSnmpInternalProxyTable.setDescription('A list of SNMP internal agent proxy entries. An entry in this table exists for each agent in the system that can be reached by this agent via the internal proxy mechanism.')
a3ComSysSnmpInternalProxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 5, 7, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSnmpInternalProxyAgentId"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSnmpInternalProxyAccessClass"))
if mibBuilder.loadTexts: a3ComSysSnmpInternalProxyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSnmpInternalProxyEntry.setDescription('An entry identifies the communities available for communicating with another agent in the system via the internal proxy mechanism.')
a3ComSysSnmpInternalProxyAgentId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSnmpInternalProxyAgentId.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSnmpInternalProxyAgentId.setDescription('The id of the agent identified by this entry.')
a3ComSysSnmpInternalProxyAccessClass = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSnmpInternalProxyAccessClass.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSnmpInternalProxyAccessClass.setDescription('The access to MIB objects supported by the agent identified by this entry provided by this agent, when using the community string identified by the corresponding value of a3ComSysSnmpInternalProxyCommunity.')
a3ComSysSnmpInternalProxyCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 5, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSnmpInternalProxyCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSnmpInternalProxyCommunity.setDescription('A community which allows access to MIB objects supported by the agent identified by this entry.')
a3ComSysAgentRequestMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAgentRequestMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAgentRequestMaxAge.setDescription('The maximum time, in seconds, a local SNMP request will remain queued waiting for a response before being discarded.')
a3ComSysAgentProxyRemoteSmtRequests = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAgentProxyRemoteSmtRequests.setStatus('deprecated')
if mibBuilder.loadTexts: a3ComSysAgentProxyRemoteSmtRequests.setDescription('This object determines if this agent will proxy SMT requests to other FDDI stations. If the value of this object is true(1), this agent will proxy SMT requests to other stations. Note that only a subset of the above values may be valid for some systems.')
a3ComSysAgentRemoteSmtProxyRequestMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAgentRemoteSmtProxyRequestMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAgentRemoteSmtProxyRequestMaxAge.setDescription('The maximum time, in seconds, an SMT proxy request will remain queued waiting for a response before being discarded. Note that when the value of a3ComSysAgentProxyRemoteSmtRequests is false(2), the value of this object is ignored.')
a3ComSysAgentProxyRemoteSmtEvents = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAgentProxyRemoteSmtEvents.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAgentProxyRemoteSmtEvents.setDescription('This object determines if this agent will generate traps for SMT events occuring at other stations. If the value of this object is true(1), this agent will generate traps for all SMT events, those which occur locally, and those which occur at other stations. If the value of this object is false(2), this agent will only generate traps for events which occur locally. Note that only a subset of the above values may be valid for some systems.')
a3ComSysAgentTrapDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 5), )
if mibBuilder.loadTexts: a3ComSysAgentTrapDescriptionTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAgentTrapDescriptionTable.setDescription('This table contains a listing of trap descriptions for each trap supported by this agent. This provides a relationship between a trap index, and the trap enterprise oid and trap number for a given trap. In all cases except for the MIB-2 generic traps, the enterprise under which a trap is defined is the same as that appearing in the ENTERPRISE portion of the trap.')
a3ComSysAgentTrapDescriptionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 5, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysAgentTrapDescriptionIndex"))
if mibBuilder.loadTexts: a3ComSysAgentTrapDescriptionTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAgentTrapDescriptionTableEntry.setDescription('Information relating a trap index to a specific trap enterprise oid and trap number.')
a3ComSysAgentTrapDescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysAgentTrapDescriptionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAgentTrapDescriptionIndex.setDescription('A unique index corresponding to the trap described by this entry. This value of this object corresponding to a particular trap will remain constant accross system resets.')
a3ComSysAgentTrapEnterprise = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 5, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysAgentTrapEnterprise.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAgentTrapEnterprise.setDescription('The enterpise under which the trap identified by this entry is defined.')
a3ComSysAgentTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysAgentTrapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAgentTrapNumber.setDescription('The number of the trap identified by this entry, within the enterprise where it is defined.')
a3ComSysAgentTrapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 6), )
if mibBuilder.loadTexts: a3ComSysAgentTrapDestinationTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAgentTrapDestinationTable.setDescription('This table contains information specifying which traps will be transmitted to a given destination address. The table is indexed by the destination address type and destination address. Each entry in the table with a status of valid identifies a set of traps which, when generated, will be transmitted to the corresponding destination address listed in that entry.')
a3ComSysAgentTrapDestinationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 6, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysAgentTrapDestinationAddressType"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysAgentTrapDestinationAddress"))
if mibBuilder.loadTexts: a3ComSysAgentTrapDestinationTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAgentTrapDestinationTableEntry.setDescription('Information relating a set of traps and a destination address to which each trap in ths set will be transmitted when it is generated. To create a new entry, set a non-existent instance of a3ComSysAgentTrapDestinationTrapMask to a valid value. To remove an entry, set the instance of a3ComSysAgentTrapDestinationEntryStatus for the entry to invalid(2).')
a3ComSysAgentTrapDestinationAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysAgentTrapDestinationAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAgentTrapDestinationAddressType.setDescription('The type of address identified by this entry.')
a3ComSysAgentTrapDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysAgentTrapDestinationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAgentTrapDestinationAddress.setDescription('The address, of the type specified by the corresponding value of a3ComSysAgentTrapDestinationAddressType, to which the set of traps identified by this entry are to be transmitted.')
a3ComSysAgentTrapDestinationTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAgentTrapDestinationTrapMask.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAgentTrapDestinationTrapMask.setDescription('This value is a bit string that indicates which traps are enabled for the address identified by this entry. The octet string value is treated as a 64-bit value. The value is a sum. It initially takes on the value 0, then for each trap which is enabled, 2 raised to the value of (a3ComSysAgentTrapDescriptionIndex - 1) for that trap is added to the sum. A new entry in the table is created by setting the value of this object for a new destination address type and destination address. Note that an octet string of all zeros is not a valid value for this object.')
a3ComSysAgentTrapDestinationEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAgentTrapDestinationEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAgentTrapDestinationEntryStatus.setDescription('The status of the trap destination table entry. Setting this object to invalid(1) has the effect of removing the corresponding entry from the table.')
a3ComSysAgentReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAgentReadCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAgentReadCommunity.setDescription('This object is the read community string when access is made via SNMP, see RFC1157.')
a3ComSysAgentReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 6, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAgentReadWriteCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAgentReadWriteCommunity.setDescription('This object is the read-write community string when access is made via SNMP, see RFC1157. The read-write community string is required to access this object.')
a3ComSysInterfaceLocationTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 7, 1), )
if mibBuilder.loadTexts: a3ComSysInterfaceLocationTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysInterfaceLocationTable.setDescription('A list of interface location entries. A single entry exists in this list for each interface managed by this agent.')
a3ComSysInterfaceLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 7, 1, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysInterfaceLocationIfIndex"))
if mibBuilder.loadTexts: a3ComSysInterfaceLocationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysInterfaceLocationEntry.setDescription('An interface location entry describes the location of a particular interface managed by this agent.')
a3ComSysInterfaceLocationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysInterfaceLocationIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysInterfaceLocationIfIndex.setDescription('The value of the MIB-II ifIndex corresponding to the interface identified by this entry.')
a3ComSysInterfaceLocationInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ethernetPort", 2), ("fddiMac", 3), ("tokenringPort", 4), ("atmPort", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysInterfaceLocationInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysInterfaceLocationInterfaceType.setDescription('The type of the physical implementation of the interface identified by this entry.')
a3ComSysInterfaceLocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("modularSlot", 2), ("chassis", 3), ("modularCard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysInterfaceLocationType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysInterfaceLocationType.setDescription('The type of location where the interface identified by this entry is physically located.')
a3ComSysInterfaceLocationTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysInterfaceLocationTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysInterfaceLocationTypeIndex.setDescription('The index of the location identified by the corresponding instance of a3ComSysInterfaceLocationType where the interface identified by this entry is physically located.')
a3ComSysInterfaceLocationLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysInterfaceLocationLocalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysInterfaceLocationLocalIndex.setDescription('The local index of the interface identified by this entry relative to its type specified by the corresponding value of a3ComSysInterfaceLocationInterfaceType, and the location specified by the corresponding values of a3ComSysInterfaceLocationType and a3ComSysInterfaceLocationTypeIndex.')
a3ComSysInterfaceLocationSystemModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysInterfaceLocationSystemModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysInterfaceLocationSystemModuleIndex.setDescription('The system module index of the interface idnetified by this entry. Ths index can be used to acquire the module information from the s2SysModuleCardGroup and the a3ComSysDiagnosticsGroup groups.')
a3ComSysEthernetPortCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysEthernetPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortCount.setDescription('The count of ethernet ports managed by this agent.')
a3ComSysEthernetPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 2), )
if mibBuilder.loadTexts: a3ComSysEthernetPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortTable.setDescription('A list of ethernet port entries. A single entry exists in this list for each ethernet port managed by this agent.')
a3ComSysEthernetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysEthernetPortIndex"))
if mibBuilder.loadTexts: a3ComSysEthernetPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortEntry.setDescription('An ethernet port entry contains information about a particular ethernet port managed by this agent.')
a3ComSysEthernetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysEthernetPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortIndex.setDescription('The index of the ethernet port identified by this entry, relative to this agent.')
a3ComSysEthernetPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysEthernetPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortIfIndex.setDescription('The value of the MIB-II ifIndex corresponding to the ethernet port identified by this entry.')
a3ComSysEthernetPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysEthernetPortLabel.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortLabel.setDescription('An ASCII text string describing the ethernet port identified by this entry.')
a3ComSysEthernetPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysEthernetPortLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortLinkStatus.setDescription('The current value of the link status for the ethernet port identified by this entry.')
a3ComSysEthernetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("rj2110BaseT", 1), ("rj4510BaseT", 2), ("st10BaseFL", 3), ("aui", 4), ("bnc10Base2", 5), ("other", 6), ("rj45100BaseT", 7), ("sc100BaseFx", 8), ("untermBnc10Base2", 9), ("sc1000BaseLxSm", 10), ("sc1000BaseLxMm", 11), ("sc1000BaseLxSmMm", 12), ("sc1000BaseLx10km", 13), ("sc1000BaseSx", 14), ("hssdc1000BaseCx", 15), ("db91000BaseCx", 16), ("gbicNotPresent", 17), ("gbic1000BaseCxDb9", 18), ("gbic1000BaseCxHssdc", 19), ("gbic1000BaseLx10Km", 20), ("gbic1000BaseLx", 21), ("gbic1000BaseSx", 22), ("rj451000BaseT", 23), ("port1000NotPresent", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysEthernetPortType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortType.setDescription('Specific port type description for the ethernet port identified by this entry.')
a3ComSysEthernetPortRateTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 3), )
if mibBuilder.loadTexts: a3ComSysEthernetPortRateTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortRateTable.setDescription('A list of ethernet port rate entries. A single entry exists in this list for each ethernet port, managed by this agent, which supports rate information.')
a3ComSysEthernetPortRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 3, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysEthernetPortRateIndex"))
if mibBuilder.loadTexts: a3ComSysEthernetPortRateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortRateEntry.setDescription('An ethernet port rate entry contains rate statistics for a particular ethernet port managed by this agent. Rate statistics are calculated based on a one second sampling interval.')
a3ComSysEthernetPortRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysEthernetPortRateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortRateIndex.setDescription('The index of the ethernet port identified by this entry, relative to this agent.')
a3ComSysEthernetPortRateByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysEthernetPortRateByteReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortRateByteReceiveRate.setDescription('The average number of bytes received per second by the ethernet port identified by this entry during the most recent sampling period.')
a3ComSysEthernetPortRatePeakByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysEthernetPortRatePeakByteReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortRatePeakByteReceiveRate.setDescription('The peak value of a3ComSysEthernetPortRateByteReceiveRate since the system was last initialized for the ethernet port identified by this entry.')
a3ComSysEthernetPortRateFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysEthernetPortRateFrameReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortRateFrameReceiveRate.setDescription('The average number of frames received per second by the ethernet port identified by this entry during the most recent sampling period.')
a3ComSysEthernetPortRatePeakFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysEthernetPortRatePeakFrameReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortRatePeakFrameReceiveRate.setDescription('The peak value of a3ComSysEthernetPortRateFrameReceiveRate since the system was last initialized for the ethernet port identified by this entry.')
a3ComSysEthernetPortRateByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysEthernetPortRateByteTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortRateByteTransmitRate.setDescription('The average number of bytes transmitted per second by the ethernet port identified by this entry during the most recent sampling period.')
a3ComSysEthernetPortRatePeakByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysEthernetPortRatePeakByteTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortRatePeakByteTransmitRate.setDescription('The peak value of a3ComSysEthernetPortRateByteTransmitRate since the system was last initialized for the ethernet port identified by this entry.')
a3ComSysEthernetPortRateFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysEthernetPortRateFrameTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortRateFrameTransmitRate.setDescription('The average number of frames transmitted per second by the ethernet port identified by this entry during the most recent sampling period.')
a3ComSysEthernetPortRatePeakFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysEthernetPortRatePeakFrameTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysEthernetPortRatePeakFrameTransmitRate.setDescription('The peak value of a3ComSysEthernetPortRateFrameTransmitRate since the system was last initialized for the ethernet port identified by this entry.')
a3ComSysSmtCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtCount.setDescription('The count of SMTs managed by this agent.')
a3ComSysSmtFddiMacBeaconTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 4), )
if mibBuilder.loadTexts: a3ComSysSmtFddiMacBeaconTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacBeaconTable.setDescription('A list of FDDI MAC beacon entries. A single entry exists in this list for each FDDI MAC, managed by this agent, which supports MAC beacon history.')
a3ComSysSmtFddiMacBeaconEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 4, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSmtFddiMacBeaconSmtIndex"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSmtFddiMacBeaconIndex"))
if mibBuilder.loadTexts: a3ComSysSmtFddiMacBeaconEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacBeaconEntry.setDescription("An FDDI MAC beacon entry contains information about a particular FDDI MAC's beacon history.")
a3ComSysSmtFddiMacBeaconSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacBeaconSmtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacBeaconSmtIndex.setDescription('The index of the SMT instance identified by this entry, relative to this agent.')
a3ComSysSmtFddiMacBeaconIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacBeaconIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacBeaconIndex.setDescription('The index of the FDDI MAC identified by this entry, within the SMT identified by this entry.')
a3ComSysSmtFddiMacBeaconHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacBeaconHistory.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacBeaconHistory.setDescription('This object gives a history of the most recent beacon information received on the FDDI MAC identified by this entry. It can contain up to a maximum of eight records. Each record is of the form: source MAC: 6 bytes beacon data length: 2 bytes. beacon data: 0-16 bytes.')
a3ComSysSmtFddiMacRateTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 5), )
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRateTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRateTable.setDescription('A list of FDDI MAC rate entries. A single entry exists in this list for each FDDI MAC, managed by this agent, which supports rate statistics.')
a3ComSysSmtFddiMacRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 5, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSmtFddiMacRateSmtIndex"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSmtFddiMacRateIndex"))
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRateEntry.setDescription('An FDDI MAC rate entry contains rate statistics for a particular FDDI MAC managed by this agent. Rate statistics are calculated based on a one second sampling interval.')
a3ComSysSmtFddiMacRateSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRateSmtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRateSmtIndex.setDescription('The index of the SMT instance identified by this entry, relative to this agent.')
a3ComSysSmtFddiMacRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRateIndex.setDescription('The index of the FDDI MAC identified by this entry, within the SMT identified by this entry.')
a3ComSysSmtFddiMacRateByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRateByteReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRateByteReceiveRate.setDescription('The average number of bytes received per second by the FDDI MAC identified by this entry during the most recent sampling period.')
a3ComSysSmtFddiMacRatePeakByteReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRatePeakByteReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRatePeakByteReceiveRate.setDescription('The peak value of a3ComSysSmtFddiMacByteReceiveRate since the system was last initialized for the FDDI MAC identified by this entry.')
a3ComSysSmtFddiMacRateFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRateFrameReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRateFrameReceiveRate.setDescription('The average number of frames received per second by the FDDI MAC identified by this entry during the most recent sampling period.')
a3ComSysSmtFddiMacRatePeakFrameReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRatePeakFrameReceiveRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRatePeakFrameReceiveRate.setDescription('The peak value of a3ComSysSmtFddiMacRateFrameReceiveRate since the system was last initialized for the FDDI MAC identified by this entry.')
a3ComSysSmtFddiMacRateByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRateByteTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRateByteTransmitRate.setDescription('The average number of bytes transmitted per second by the FDDI MAC identified by this entry during the most recent sampling period.')
a3ComSysSmtFddiMacRatePeakByteTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRatePeakByteTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRatePeakByteTransmitRate.setDescription('The peak value of a3ComSysSmtFddiMacByteTransmitRate since the system was last initialized for the FDDI MAC identified by this entry.')
a3ComSysSmtFddiMacRateFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRateFrameTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRateFrameTransmitRate.setDescription('The average number of frames transmitted per second by the FDDI MAC identified by this entry during the most recent sampling period.')
a3ComSysSmtFddiMacRatePeakFrameTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRatePeakFrameTransmitRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRatePeakFrameTransmitRate.setDescription('The peak value of a3ComSysSmtFddiMacFrameTransmitRate since the system was last initialized for the FDDI MAC identified by this entry.')
a3ComSysSmtFddiPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 6), )
if mibBuilder.loadTexts: a3ComSysSmtFddiPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiPortTable.setDescription('A list of FDDI port entries. A single entry exists in this list for each FDDI port managed by this agent.')
a3ComSysSmtFddiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 6, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSmtFddiPortSmtIndex"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSmtFddiPortIndex"))
if mibBuilder.loadTexts: a3ComSysSmtFddiPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiPortEntry.setDescription('An FDDI port entry contains information about a particular FDDI port managed by this agent.')
a3ComSysSmtFddiPortSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiPortSmtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiPortSmtIndex.setDescription('The index of the SMT instance identified by this entry, relative to this agent.')
a3ComSysSmtFddiPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiPortIndex.setDescription('The index of the FDDI port identified by this entry, within the SMT identified by this entry.')
a3ComSysSmtFddiPortLocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("modularSlot", 2), ("chassis", 3), ("modularCard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiPortLocationType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiPortLocationType.setDescription('The type of location where the FDDI port identified by this entry is physically located.')
a3ComSysSmtFddiPortLocationTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiPortLocationTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiPortLocationTypeIndex.setDescription('The index of the location identified by the corresponding instance of a3ComSysSmtFddiPortLocationType where the FDDI port identified by this entry is physically located.')
a3ComSysSmtFddiPortLocationLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiPortLocationLocalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiPortLocationLocalIndex.setDescription('The local index of the FDDI port identified by this entry relative to the location specified by the corresponding values of a3ComSysSmtFddiPortLocationType and a3ComSysSmtFddiPortLocationTypeIndex.')
a3ComSysSmtFddiPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSmtFddiPortLabel.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiPortLabel.setDescription('An ASCII text string describing the FDDI port identified by this entry.')
a3ComSysSmtFddiMacLocationTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 7), )
if mibBuilder.loadTexts: a3ComSysSmtFddiMacLocationTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacLocationTable.setDescription('An FDDI MAC Location table contains information to assign an FDDI MAC to a different Location. The system must be rebooted after all changes to this table are completed in order that the changes take effect.')
a3ComSysSmtFddiMacLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 7, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSmtFddiMacLocationSmtIndex"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSmtFddiMacLocationIndex"))
if mibBuilder.loadTexts: a3ComSysSmtFddiMacLocationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacLocationEntry.setDescription('An FDDI MAC entry contains information to assign an FDDI MAC to a different Location.')
a3ComSysSmtFddiMacLocationSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacLocationSmtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacLocationSmtIndex.setDescription('The index of the SMT instance identified by this entry, relative to the agent.')
a3ComSysSmtFddiMacLocationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacLocationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacLocationIndex.setDescription('The index of the FDDI MAC instance identified by this entry, relative to the SMT identified by this entry.')
a3ComSysSmtFddiMacCurrentLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internalBackplane", 1), ("externalFddiPort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacCurrentLocation.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacCurrentLocation.setDescription('Indicates whether the MAC identified by this entry is assigned to a backplane FDDI station (internal) or an FDDI station configured on a module (external.)')
a3ComSysSmtFddiMacRequestedLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internalBackplane", 1), ("externalFddiPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRequestedLocation.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRequestedLocation.setDescription('The Location which the MAC identified by this entry is to be assigned to during the next reboot.')
a3ComSysSmtFddiMacAvailableLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internalBackplane", 1), ("externalFddiPort", 2), ("internalOrExternal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacAvailableLocation.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacAvailableLocation.setDescription('Indicates the Location(s) available for this MAC. A mac Location which can be modified to either the interanl backplane or an external FDDI port is indicated by internalOrExternal(3).')
a3ComSysSmtFddiMacStationTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 8), )
if mibBuilder.loadTexts: a3ComSysSmtFddiMacStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacStationTable.setDescription('An FDDI station MAC table contains information to assign an FDDI MAC to an FDDI Station. The system must be rebooted after all changes to this table are completed in order that the changes take effect.')
a3ComSysSmtFddiMacStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 8, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSmtFddiMacStationSmtIndex"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSmtFddiMacStationIndex"))
if mibBuilder.loadTexts: a3ComSysSmtFddiMacStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacStationEntry.setDescription('An FDDI MAC entry contains information to assign an FDDI MAC to an FDDI Station.')
a3ComSysSmtFddiMacStationSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacStationSmtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacStationSmtIndex.setDescription('The index of the SMT instance identified by this entry, relative to this agent.')
a3ComSysSmtFddiMacStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacStationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacStationIndex.setDescription('The index of the MAC instance identified by this entry, relative to the SMT identified by this entry.')
a3ComSysSmtFddiMacCurrentStation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacCurrentStation.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacCurrentStation.setDescription('Indicates which FDDI station that the FDDI MAC identified by this entry is assigned to. A value of 0 indicates that the mac is assigned to an external station. Otherwise the value represents the internal backplane station number.')
a3ComSysSmtFddiMacRequestedStation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRequestedStation.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacRequestedStation.setDescription('Indicates which FDDI station the FDDI MAC identified by this entry will be set to during the next system reboot. A value of 0 indicates an external station. Otherwise the value represents the internal backplane station number.')
a3ComSysSmtFddiMacAvailableStations = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiMacAvailableStations.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiMacAvailableStations.setDescription('This value is a sum. Setting of the first bit (LSB) indicates that the MAC can be assigned to an external station. Available backplane stations are indicated by adding 2^StationNumber to the sum. Where StationNumber represents a backplane station number.')
a3ComSysSmtFddiPortStationTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 9), )
if mibBuilder.loadTexts: a3ComSysSmtFddiPortStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiPortStationTable.setDescription('An FDDI station Port table contains information to assign an FDDI Port to an FDDI Station. The system must be rebooted after all changes to this table are completed in order that the changes take effect.')
a3ComSysSmtFddiPortStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 9, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSmtFddiPortStationSmtIndex"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSmtFddiPortStationIndex"))
if mibBuilder.loadTexts: a3ComSysSmtFddiPortStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiPortStationEntry.setDescription('An FDDI Port entry contains information to assign an FDDI Port to an FDDI Station.')
a3ComSysSmtFddiPortStationSmtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiPortStationSmtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiPortStationSmtIndex.setDescription('The index of the SMT instance identified by this entry, relative to this agent.')
a3ComSysSmtFddiPortStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiPortStationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiPortStationIndex.setDescription('The index of the Port instance identified by this entry, relative to the SMT indentified by this entry.')
a3ComSysSmtFddiPortCurrentStation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiPortCurrentStation.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiPortCurrentStation.setDescription('Indicates which FDDI station the FDDI Port identified by this entry is assigned to. A value of 0 indicates that the Port is assigned to an external station. Otherwise the value represents the internal backplane station number.')
a3ComSysSmtFddiPortRequestedStation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysSmtFddiPortRequestedStation.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiPortRequestedStation.setDescription('Indicates which FDDI station the FDDI port identified by this entry will be set to during the next system reboot. A value of 0 indicates an external station. Otherwise the value represents the internal backplane station number.')
a3ComSysSmtFddiPortAvailableStations = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 9, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysSmtFddiPortAvailableStations.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysSmtFddiPortAvailableStations.setDescription('This value is a sum. Setting of the first bit indicates that the port can be assigned to an external station. Available backplane stations are indicated by adding 2^StationNumber to the sum. Where StationNumber represents a backplane station number.')
a3ComSysBridgeCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeCount.setDescription('The count of bridges managed by this agent.')
a3ComSysBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2), )
if mibBuilder.loadTexts: a3ComSysBridgeTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeTable.setDescription('A list of bridge entries. A single entry exists in this list for each bridge managed by this agent.')
a3ComSysBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysBridgeIndex"))
if mibBuilder.loadTexts: a3ComSysBridgeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeEntry.setDescription('A bridge entry contains information about a particular bridge managed by this agent.')
a3ComSysBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeIndex.setDescription('The index of the bridge identified by this entry, relative to this agent.')
a3ComSysBridgePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortCount.setDescription('The number of bridge ports that the bridge identified by this entry controls.')
a3ComSysBridgeAddressTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeAddressTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeAddressTableSize.setDescription('The size of the address table for the bridge identified by this entry.')
a3ComSysBridgeAddressTableCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeAddressTableCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeAddressTableCount.setDescription('The current count of addresses in the address table for the bridge identified by this entry.')
a3ComSysBridgeAddressTablePeakCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgeAddressTablePeakCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeAddressTablePeakCount.setDescription('The peak count of addresses in the address table for the bridge identified by this entry, since the system was last initialized.')
a3ComSysBridgeAddressThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeAddressThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeAddressThreshold.setDescription('A reporting threshold for the total number of addresses known for the bridge identified by this entry. When this threshold is reached, the event a3ComSysBridgeAddressThresholdEvent is generated. The range of valid values for setting this object is between 1 and the corresponding value reported by a3ComSysBridgeAddressTableSize + 1 (Note that this range applies to values issued in set requests. The current value may be outside this range, for example if the corresponding value of a3ComSysBridgeMode is changed). Setting this object to one greater than the address table size disables the generation of a3ComSysBridgeAddressThresholdEvents since the limit will never be reached.')
a3ComSysBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("expressMode", 1), ("ieee8021dBridgeMode", 2), ("notSupported", 3), ("ieee8021dSRTBridgeMode", 4), ("ieee8021dSRBridgeMode", 5), ("ibmSRBridgeMode", 6), ("srtBBridgeMode", 7), ("srExpressBridgeMode", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeMode.setDescription('The operational mode of the bridge identified by this entry. Note that bridges which report notSupported(3) will not support sets of this object, and that the value notSupported(3) is not a valid value for a set operation.')
a3ComSysBridgeBackbonePort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeBackbonePort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeBackbonePort.setDescription('The number of the port selected as the backbone segment port when the corresponding value of a3ComSysBridgeMode is is expressMode(1). The value of this object can range from 1 to the corresponding value of a3ComSysBridgePortCount, however, some bridges may support only a subset of ports as backbone ports. If the corresponding value of a3ComSysBridgeMode is not expressMode(1), the value of this object is ignored.')
a3ComSysBridgeIpFragmentationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeIpFragmentationEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeIpFragmentationEnabled.setDescription('A flag indicating whether or not IP fragmentation is enabled on this bridge. Note that bridges which report notSupported(3) will not support sets of this object, and that the value notSupported(3) is not a valid value for a set operation.')
a3ComSysBridgeTrFddiTranslationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("native", 1), ("backbone", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeTrFddiTranslationMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeTrFddiTranslationMode.setDescription('The mode used to describe whether the embedded MAC addresses are byte-conjugated in order to convert them from Token Ring format to native FDDI format (and vice versa), or whether they are left alone (used for traffic flowing across a FDDI backbone to/from Token Ring end stations).')
a3ComSysBridgeSTPGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeSTPGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeSTPGroupAddress.setDescription('Spanning tree bridge group address. The address cannot be changed if the spanning tree is enabled (a3ComSysBridgeStpEnabled).')
a3ComSysBridgeSTPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeSTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeSTPEnable.setDescription('This object indicates if spanning tree bridge feature is enabled or disabled. If enabled this value will equal true(1).')
a3ComSysBridgeIpxSnapTranslationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeIpxSnapTranslationEnable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeIpxSnapTranslationEnable.setDescription('This object indicates if the IPX 802.3-FDDI SNAP Translation bridge feature is enabled or disabled. If enabled this value will equal true(1). Note, this object may not be supported on all bridges.')
a3ComSysBridgeLowLatencyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeLowLatencyEnable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeLowLatencyEnable.setDescription('This object indicates if the bridge low latency feature is enabled or disabled. If enabled this value will equal true(1). Note, this object may not be supported on all bridges.')
a3ComSysBridgeVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("mixed", 3), ("notSupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeVlanMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgeVlanMode.setDescription('This object indicates the VLAN types that this bridge will support. Open mode means that each VLAN within this bridge will be of the Open type; all VLANs within this bridge will share the same address table. Closed mode means that each VLAN within this bridge will be of the Closed type; each VLAN within this bridge will have its own address table. Mixed mode means that each VLAN within this bridge with be of either the Open or Closed type; all Open VLANs will share the same address table and each Closed VLAN will have its own address table.')
a3ComSysBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3), )
if mibBuilder.loadTexts: a3ComSysBridgePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortTable.setDescription('A list of bridge port entries. A single entry exists in this list for each bridge port managed by this agent.')
a3ComSysBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysBridgePortBridgeIndex"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysBridgePortIndex"))
if mibBuilder.loadTexts: a3ComSysBridgePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortEntry.setDescription('A bridge port entry contains information about a particular bridge port managed by this agent.')
a3ComSysBridgePortBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortBridgeIndex.setDescription('The index of the bridge identified by this entry, relative to this agent.')
a3ComSysBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortIndex.setDescription('The index of the bridge port identified by this entry, within the bridge identified by this entry.')
a3ComSysBridgePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortIfIndex.setDescription('The value of the MIB-II ifIndex corresponding to the bridge port identified by this entry.')
a3ComSysBridgePortReceiveMulticastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimit.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimit.setDescription('This variable limits the number of multicast frames forwarded by this port over a 1 second interval. The minimum threshold limit may vary between platforms, but can be determined by multiplying this value by the a3ComSysBridgePortReceiveMulticastLimitMultiplier value. For example if this value equals 2, and the a3ComSysBridgePortReceiveMulticastLimitMultiplier equals 1000 then no more than 2000 multicast frames per second will be forwarded by this port. The default value for this object is zero which an infinite rate.')
a3ComSysBridgePortAddressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("freezeAddress", 2), ("flushAddress", 3), ("flushDynamicAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressAction.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressAction.setDescription('This object, when read, always returns the value other(1). The behavior of setting this object to each of the acceptable values is as follows: freezeAddress: causes all the learned dynamic addresses to be converted into static addresses. flushAddress: causes all the addresses to be flushed from the address list for the bridge port identified by this entry. flushDynamicAddress: causes all dynamic addresses to be flushed from the address list for the bridge port identified by this entry.')
a3ComSysBridgePortSpanningTreeFrameReceivedCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortSpanningTreeFrameReceivedCounts.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortSpanningTreeFrameReceivedCounts.setDescription('The number of spanning tree frames received by the bridge port identified by this entry.')
a3ComSysBridgePortReceiveBlockedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveBlockedDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveBlockedDiscards.setDescription("The number of frames discarded by the bridge port identified by this entry because the receiving bridge port was not in the 'forwarding' state.")
a3ComSysBridgePortReceiveMulticastLimitExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimitExceededs.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimitExceededs.setDescription('The number of times the value of a3ComSysBridgePortReceiveMulticastLimit was exceeded for the port identified by this entry.')
a3ComSysBridgePortReceiveMulticastLimitExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimitExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimitExceededDiscards.setDescription('The number of multicast/broadcast frames discarded by the bridge port identified by this entry because the corresponding value of a3ComSysBridgePortReceiveMulticastLimit was exceeded.')
a3ComSysBridgePortReceiveSecurityDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveSecurityDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveSecurityDiscards.setDescription('The number of frames discarded by the bridge port identified by this entry because they contained source addresses which were statically configured on another bridge port. A statically configured address (station), which is not allowed to move, appears to have moved.')
a3ComSysBridgePortReceiveUnknownDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveUnknownDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveUnknownDiscards.setDescription('The number of frames discarded by the bridge port identified by this entry because the destination address was unknown. Note that this counter is only valid for backbone ports, and only when the bridge is operating in express mode.')
a3ComSysBridgePortReceiveOtherDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveOtherDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveOtherDiscards.setDescription('The number of frames discarded by the bridge port identified by this entry because they contained either invalid (group) source addresses or source addresses belonging to this bridge (indicative of network loops).')
a3ComSysBridgePortReceiveErrorDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveErrorDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveErrorDiscards.setDescription('The number of frames discarded by the bridge port identified by this entry because of internal bridge system errors (e.g., hardware and software address table discrepencies).')
a3ComSysBridgePortSameSegmentDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortSameSegmentDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortSameSegmentDiscards.setDescription('The number of frames discarded by the bridge port identified by this entry because the destination address is known on the same network segment as the source address, i.e., the frame does not need to be bridged.')
a3ComSysBridgePortTransmitBlockedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortTransmitBlockedDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortTransmitBlockedDiscards.setDescription("The number of frames discarded by the bridge port identified by this entry because the transmitting bridge port was not in the 'forwarding' state.")
a3ComSysBridgePortReceiveAllPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveAllPathFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveAllPathFilteredFrames.setDescription('The number of frames discarded by the bridge port identified by this entry due to user defined receive all path filters.')
a3ComSysBridgePortReceiveMulticastPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastPathFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastPathFilteredFrames.setDescription('The number of frames discarded by the bridge port identified by this entry due to user defined receive multicast path filters.')
a3ComSysBridgePortTransmitAllPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortTransmitAllPathFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortTransmitAllPathFilteredFrames.setDescription('The number of frames discarded by the bridge port identified by this entry due to user defined transmit all path filters.')
a3ComSysBridgePortTransmitMulticastPathFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortTransmitMulticastPathFilteredFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortTransmitMulticastPathFilteredFrames.setDescription('The number of frames discarded by the bridge port identified by this entry due to user defined transmit multicast path filters.')
a3ComSysBridgePortForwardedUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedUnicastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedUnicastFrames.setDescription('The number of unicast frames which this port forwarded to a single destination port.')
a3ComSysBridgePortForwardedUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedUnicastOctets.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedUnicastOctets.setDescription('The number of octets contained in unicast frames which this port forwarded to a single destination port.')
a3ComSysBridgePortForwardedMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedMulticastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedMulticastFrames.setDescription('The number of multicast frames which this port forwarded.')
a3ComSysBridgePortForwardedMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedMulticastOctets.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedMulticastOctets.setDescription('The number of octets contained in multicast frames which this port forwarded.')
a3ComSysBridgePortFloodedUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortFloodedUnicastFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortFloodedUnicastFrames.setDescription('The number of unicast frames which this port flooded to all other ports in the bridge.')
a3ComSysBridgePortFloodedUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortFloodedUnicastOctets.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortFloodedUnicastOctets.setDescription('The number of octets contained in unicast frames which this port flooded to all other ports in the bridge.')
a3ComSysBridgePortStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortStpMode.setReference('IEEE 802.1D-1990: Section 4.5.5.2 for enable and disable modes.')
if mibBuilder.loadTexts: a3ComSysBridgePortStpMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortStpMode.setDescription('The mode of the bridge port.')
a3ComSysBridgePortReceiveMulticastLimitFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("broadcastAndMulticast", 1), ("broadcastOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimitFrameType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimitFrameType.setDescription('This object identifies the frames type(s) that are to be counted when determining if the receive multicast limit has been exceeded for this bridge port. Devices attached to networks with predominantly high multicast traffic (e.g. video) should set this value to broadcastOnly(2) to detect broadcast storms.')
a3ComSysBridgePortForwardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortForwardedFrames.setDescription('The number of frames which this port forwarded.')
a3ComSysBridgePortReceiveMulticastLimitMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimitMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortReceiveMulticastLimitMultiplier.setDescription('This variable determines the minimum setting for the multicast limit threshold. For example if this value equals 1000, and the a3ComSysBridgePortReceiveMulticastLimit variable equals 2 then no more than 2000 multicast frames per second will be forwarded by this port.')
a3ComSysBridgePortAddressTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5), )
if mibBuilder.loadTexts: a3ComSysBridgePortAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressTable.setDescription('A list of bridge port address information. A single entry exists in this list for each learned address, accross all bridge ports and all bridges managed by this agent.')
a3ComSysBridgePortAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysBridgePortAddressBridgeIndex"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysBridgePortAddressPortIndex"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysBridgePortAddressIndex"))
if mibBuilder.loadTexts: a3ComSysBridgePortAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressEntry.setDescription('An bridge port address entry contains information about a particular bridge port address. To create a new entry, set an instance of a3ComSysBridgePortAddressRemoteAddress with the address index portion of the instance set to 0, to a valid value. To remove an entry, set the instance of the a3ComSysBridgePortAddressType for the entry to invalid(2).')
a3ComSysBridgePortAddressBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressBridgeIndex.setDescription('The index of the bridge identified by this entry, relative to this agent.')
a3ComSysBridgePortAddressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressPortIndex.setDescription('The index of the bridge port identified by this entry, within the bridge identified by this entry.')
a3ComSysBridgePortAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressIndex.setDescription('The index of this address entry within the bridge address table for the bridge identified by this entry. This index ranges from 1 to the corresponding value of a3ComSysBridgeAddressTableSize.')
a3ComSysBridgePortAddressRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressRemoteAddress.setDescription('The remote MAC address detected on the bridge port identified by to this entry. Setting this object results in an attempt to create a new entry in the table. Since the value of a3ComSysBridgePortAddressIndex is determined automatically internal to the bridge, a set is only successful if the index value specified for a3ComSysBridgePortAddressIndex is zero. A get-next using the values of a3ComSysBridgePortAddressTypeIndex and a3ComSysBridgePortAddressPortIndex can be used to determine the address index assigned to the newly added address entry.')
a3ComSysBridgePortAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressType.setDescription('This object, when read, always returns the value valid(1). Setting this object to invalid(2) will remove the corresponding address entry from the table.')
a3ComSysBridgePortAddressIsStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isStatic", 1), ("isDynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressIsStatic.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressIsStatic.setDescription('A value indicating whether this MAC address was statically configured or was dynamically learned. Note that isStatic(1) it the only valid for set operations.')
a3ComSysBridgePortAddressStaticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressStaticPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressStaticPort.setDescription('If the corresponding value of the object a3ComSysBridgePortAddressIsStatic is isStatic(1), this object indicates the local bridge port index (as reported by a3ComSysBridgePortLocalIndex) for which this address MAC was statically configured. If the object a3ComSysBridgePortAddressIsStatic has the value isDynamic(2), the value of this object is 0.')
a3ComSysBridgePortAddressAge = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysBridgePortAddressAge.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysBridgePortAddressAge.setDescription('This object indicates the time, in seconds, elapsed since a packet containing this address as a source was last seen on the bridge port identified by this entry.')
a3ComSysBridgeStpGroupAddress = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeStpGroupAddress.setStatus('obsolete')
if mibBuilder.loadTexts: a3ComSysBridgeStpGroupAddress.setDescription('Spanning tree bridge group address. The address cannot be changed if the spanning tree is enabled (a3ComSysBridgeStpEnabled). This object can now be found under the a3ComSysBridgeTable as a3ComSysBridgeSTPGroupAddress.')
a3ComSysBridgeStpEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysBridgeStpEnable.setStatus('obsolete')
if mibBuilder.loadTexts: a3ComSysBridgeStpEnable.setDescription('This object indicates if spanning tree bridge feature is enabled or disabled. If enabled this value will equal true(1). This object can now be found under the a3ComSysBridgeTable as a3ComSysBridgeSTPEnable.')
a3ComSysNetworkAnalyzerTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 12, 1), )
if mibBuilder.loadTexts: a3ComSysNetworkAnalyzerTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysNetworkAnalyzerTable.setDescription('A list of analyzer entries. A single entry exists in this list for each bridge port configured for an analyzer.')
a3ComSysNetworkAnalyzerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 12, 1, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysNetworkAnalyzerBridgeIndex"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysNetworkAnalyzerBridgePortIndex"))
if mibBuilder.loadTexts: a3ComSysNetworkAnalyzerTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysNetworkAnalyzerTableEntry.setDescription('An analyzer table entry contains information relating an analyzer port address to the bridge and port index for that analyzer. The effect of creating an entry for a particular port is to configure that port for monitoring. A port which is configured for monitoring is no longer available for switching. To create an entry, set the value of the a3ComSysNetworkAnalyzerStatus object for a non-existent instance to valid(1). The value of the a3ComSysNetworkAnalyzerPhysicalAddress object for the new entry is filled in as a result of the creation. The effect of removing an entry for a particular port is to disable the port for monitoring. The port is then available for switching. To remove an entry, set the value of the corresponding instance of the a3ComSysNetworkAnalyzerStatus object to invalid(2).')
a3ComSysNetworkAnalyzerBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysNetworkAnalyzerBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysNetworkAnalyzerBridgeIndex.setDescription('The index of the bridge relative to this agent where the analyzer identified by this entry is configured.')
a3ComSysNetworkAnalyzerBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysNetworkAnalyzerBridgePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysNetworkAnalyzerBridgePortIndex.setDescription('The index of the port relative to the bridge identified by this entry where the analyzer identified by this entry is configured.')
a3ComSysNetworkAnalyzerPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 12, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysNetworkAnalyzerPhysicalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysNetworkAnalyzerPhysicalAddress.setDescription('The physical address of the bridge port identified by the corresponding values of a3ComSysNetworkAnalyzerBridgeIndex and a3ComSysNetworkAnayzerBridgePortIndex.')
a3ComSysNetworkAnalyzerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysNetworkAnalyzerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysNetworkAnalyzerStatus.setDescription('The status of the entry. Setting the value of a non-existent instance of this object to valid(1) attempts to add the corresponding entry to the table. The effect of adding an entry to the table is to configure the port for monitoring and to disable it for switching. Setting an existing instance of this object to invalid(2) attempts to remove the corresponding entry from the table. The effect of removing an entry from the table is to disable the port for monitoring and to make available for switching.')
a3ComSysNetworkPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 12, 2), )
if mibBuilder.loadTexts: a3ComSysNetworkPortMonitorTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysNetworkPortMonitorTable.setDescription('A list of monitor port entries. A single entry exists in this for each bridge port being monitored.')
a3ComSysNetworkPortMonitorTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 12, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysNetworkPortMonitorBridgeIndex"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysNetworkPortMonitorBridgePortIndex"))
if mibBuilder.loadTexts: a3ComSysNetworkPortMonitorTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysNetworkPortMonitorTableEntry.setDescription('A port monitor table entry contains information relating a bridge port being monitored with the address of the analyzer which is being used to monitor the port. The effect of creating an entry for a particular port is to enable monitoring of that port by the analyzer specified. To create an entry, set the value of the a3ComSysNetworkPortMonitorAnalyzerAddress object to the address of the network analyzer port. This value should be the same as the value of the a3ComSysNetworkAnalyzerPhysicalAddress object for the analyzer. The effect of removing an entry for a particular port is to disable monitoring of that port. To remove an entry, set the value of the corresponding instance of the a3ComSysNetworkPortMonitorStatus object to invalid(2).')
a3ComSysNetworkPortMonitorBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysNetworkPortMonitorBridgeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysNetworkPortMonitorBridgeIndex.setDescription('The index of the bridge relative to this agent where the monitored port identified by this entry is located.')
a3ComSysNetworkPortMonitorBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysNetworkPortMonitorBridgePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysNetworkPortMonitorBridgePortIndex.setDescription('The index of the port which is being monitored relative to the bridge identified by this entry.')
a3ComSysNetworkPortMonitorAnalyzerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 12, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysNetworkPortMonitorAnalyzerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysNetworkPortMonitorAnalyzerAddress.setDescription('The physical address of the port where the analyzer, which is monitoring the port identified by this entry, is located. Setting the value of a non-existent instance of this object attempts to add an entry to the table. The effect of adding an entry to the table is to enable monitoring of the port by the analyzer specified. Setting the value of an existing instance of this object will switch the monitored port to the new analyzer address.')
a3ComSysNetworkPortMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysNetworkPortMonitorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysNetworkPortMonitorStatus.setDescription('The status of the entry. Setting an existing instance of this object to invalid(2) attempts to remove the corresponding entry from the table. The effect of removing an entry from the table is to disable monitoring of the port.')
a3ComSysTokenRingPortCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortCount.setDescription('The count of token ring ports managed by this agent.')
a3ComSysTokenRingPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2), )
if mibBuilder.loadTexts: a3ComSysTokenRingPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortTable.setDescription('A list of token ring port entries. A single entry exists in this list for each token ring port managed by this agent.')
a3ComSysTokenRingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysTokenRingPortIndex"))
if mibBuilder.loadTexts: a3ComSysTokenRingPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortEntry.setDescription('A token ring port entry contains information about a particular token ring port managed by this agent.')
a3ComSysTokenRingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortIndex.setDescription('The index of the token ring port identified by this entry, relative to this agent.')
a3ComSysTokenRingPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortIfIndex.setDescription('The value of the MIB-II ifIndex corresponding to the token ring port identified by this entry.')
a3ComSysTokenRingPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysTokenRingPortLabel.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortLabel.setDescription('An ASCII text string describing the token ring port identified by this entry.')
a3ComSysTokenRingPortInsertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inserted", 1), ("deinserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortInsertStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortInsertStatus.setDescription('The current value of the link status for the token ring port identified by this entry.')
a3ComSysTokenRingPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rj45", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortType.setDescription('Specific port type description for the token ring port identified by this entry.')
a3ComSysTokenRingPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("station", 1), ("lobe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysTokenRingPortMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortMode.setDescription('The current mode of the port. The default mode (station) is used to connect a hub to the port. Lobe mode is used to direct connect a Token Ring station into the port. This selection can only be made on ports 1 and 2 of the module.')
a3ComSysTokenRingPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2), ("sixteenMegabitETR", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysTokenRingPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortSpeed.setDescription('The current speed of the port. The default speed is sixteenMegabit.')
a3ComSysTokenRingPortLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortLineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortLineErrors.setDescription('This counter is incremented when a frame or token is copied or repeated by a station, the E bit is zero in the frame or token and one of the following conditions exists: 1) there is a non-data bit (J or K bit) between the SD and the ED of the frame or token, or 2) there is an FCS error in the frame.')
a3ComSysTokenRingPortBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortBurstErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortBurstErrors.setDescription('This counter is incremented when a station detects the absence of transitions for five half-bit timers (burst-five error).')
a3ComSysTokenRingPortACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortACErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortACErrors.setDescription('This counter is incremented when a station receives an AMP or SMP frame in which A is equal to C is equal to 0, and then receives another SMP frame with A is equal to C is equal to 0 without first receiving an AMP frame. It denotes a station that cannot set the AC bits properly.')
a3ComSysTokenRingPortAbortTransErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortAbortTransErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortAbortTransErrors.setDescription('This counter is incremented when a station transmits an abort delimiter while transmitting.')
a3ComSysTokenRingPortInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortInternalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortInternalErrors.setDescription('This counter is incremented when a station recognizes an internal error.')
a3ComSysTokenRingPortLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortLostFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortLostFrameErrors.setDescription('This counter is incremented when a station is transmitting and its TRR timer expires. This condition denotes a condition where a transmitting station in strip mode does not receive the trailer of the frame before the TRR timer goes off.')
a3ComSysTokenRingPortReceiveCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortReceiveCongestionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortReceiveCongestionErrors.setDescription('This counter is incremented when a station recognizes a frame addressed to its specific address, but has no available buffer space indicating that the station is congested.')
a3ComSysTokenRingPortFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortFrameCopiedErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortFrameCopiedErrors.setDescription('This counter is incremented when a station recognizes a frame addressed to its specific address and detects that the FS field A bits are set to 1 indicating a possible line hit or duplicate address.')
a3ComSysTokenRingPortTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortTokenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortTokenErrors.setDescription('This counter is incremented when a station acting as the active monitor recognizes an error condition that needs a token transmitted.')
a3ComSysTokenRingPortSoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortSoftErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortSoftErrors.setDescription('The number of Soft Errors the interface has detected. It directly corresponds to the number of Report Error MAC frames that this interface has transmitted. Soft Errors are those which are recoverable by the MAC layer protocols.')
a3ComSysTokenRingPortHardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortHardErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortHardErrors.setDescription('The number of times this interface has detected an immediately recoverable fatal error. It denotes the number of times this interface is either transmitting or receiving beacon MAC frames.')
a3ComSysTokenRingPortTransmitBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortTransmitBeacons.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortTransmitBeacons.setDescription('The number of times this interface has transmitted a beacon frame.')
a3ComSysTokenRingPortLobeWires = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortLobeWires.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortLobeWires.setDescription('The number of times the interface has detected an open or short circuit in the lobe data path. The adapter will be closed when this condition occurs.')
a3ComSysTokenRingPortRemoves = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortRemoves.setDescription('The number of times the interface has received a Remove Ring Station MAC frame request. When this frame is received the interface will enter the close state.')
a3ComSysTokenRingPortSingles = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortSingles.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortSingles.setDescription('The number of times the interface has sensed that it is the only station on the ring. This will happen if the interface is the first one up on a ring, or if there is a hardware problem.')
a3ComSysTokenRingPortFreqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortFreqErrors.setStatus('optional')
if mibBuilder.loadTexts: a3ComSysTokenRingPortFreqErrors.setDescription('The number of times the interface has detected that the frequency of the incoming signal differs from the expected frequency.')
a3ComSysTokenRingPortRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortRingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortRingStatus.setDescription("The current interface status which can be used to diagnose fluctuating problems that can occur on token rings, after a station has successfully been added to the ring. Before an open is completed, this object has the value for the 'no status' condition. This object is useful for debugging problems when the station can not even enter the ring. The object's value is a sum of values, one for each currently applicable condition. The following values are defined for various conditions: 0 = No Problems detected 32 = Ring Recovery 64 = Single Station 256 = Remove Received 512 = reserved 1024 = Auto-Removal Error 2048 = Lobe Wire Fault 4096 = Transmit Beacon 8192 = Soft Error 16384 = Hard Error 32768 = Signal Loss 131072 = no status, open not completed.")
a3ComSysFtTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1), )
if mibBuilder.loadTexts: a3ComSysFtTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtTable.setDescription('A list of entries which describe file transfers.')
a3ComSysFtTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysFtIndex"))
if mibBuilder.loadTexts: a3ComSysFtTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtTableEntry.setDescription('A description of a particular file transfer entry.')
a3ComSysFtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysFtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtIndex.setDescription('A unique index used to identifying this entry.')
a3ComSysFtDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("localToRemote", 1), ("remoteToLocal", 2))).clone('remoteToLocal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysFtDirection.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtDirection.setDescription('Specifies the direction of the file transfer.')
a3ComSysFtLocalStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 3), A3ComSysStorageType().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysFtLocalStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtLocalStorageType.setDescription('The type of storage on the local system to be used as the source/destination for the file transfer.')
a3ComSysFtLocalResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 4), A3ComSysResourceType().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysFtLocalResourceType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtLocalResourceType.setDescription('The type of resource on the local system to be used as the source/destination for the file transfer.')
a3ComSysFtLocalResourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 5), A3ComSysResourceBitMask().clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysFtLocalResourceMask.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtLocalResourceMask.setDescription('The indices of the resources on the local system to be used as the source/destination for the file transfer. The type of resource to which these indices apply is specified by the corresponding value of a3ComSysFtLocalResourceType. If resourceBridge is used, a3ComSysFtLocalResourceMask indicates the bridge slot number the filter code will be downloaded. For instance, a3ComSysFtLocalResourceMask value of 0x03 indicates bridge slot number 1 and 2.')
a3ComSysFtLocalResourceAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 6), ObjectIdentifier().clone((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 2, 1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysFtLocalResourceAttribute.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtLocalResourceAttribute.setDescription('An identifier which specifies the particular resource attribute on the local system which is the source/destination of the file transfer. The resource(s) to which this attribute applies is specified by the corresponding values of a3ComSysFtLocalResourceType and a3ComSysFtLocalResourceMask.')
a3ComSysFtRemoteAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 7), A3ComSysAddressType().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysFtRemoteAddressType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtRemoteAddressType.setDescription('The type of address which is specified by the corresponding value of a3ComSysFtRemoteAddress.')
a3ComSysFtRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysFtRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtRemoteAddress.setDescription('The address of the source/destination file on the remote system.')
a3ComSysFtRemoteFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysFtRemoteFileName.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtRemoteFileName.setDescription('The full path name of the source/destination file on the remote system.')
a3ComSysFtRemoteUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysFtRemoteUserName.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtRemoteUserName.setDescription('The user name to be used when requesting the file transfer to/from the remote system.')
a3ComSysFtRemoteUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysFtRemoteUserPassword.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtRemoteUserPassword.setDescription('The password to be used when requesting the file transfer to/from the remote system. When read, this object returns a zero length string. Note that, for security reasons, some ftp servers may insist on a non-zero length user password.')
a3ComSysFtForceTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysFtForceTransfer.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtForceTransfer.setDescription('Setting this object to true makes the agent ignore non-fatal (i.e. version/id mismatch) errors encountered during a file transfer request.')
a3ComSysFtBytesTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysFtBytesTransferred.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtBytesTransferred.setDescription('The number of bytes successfully transferred.')
a3ComSysFtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("statusSuccessfulCompletion", 1), ("statusInProgress", 2), ("statusLocalInvalid", 3), ("statusRemoteInvalid", 4), ("statusRemoteUnreachable", 5), ("statusUserAuthFailed", 6), ("statusFileNotFound", 7), ("statusFileTooBig", 8), ("statusFileIncompatible", 9), ("statusError", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysFtStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtStatus.setDescription('The status of the file transfer.')
a3ComSysFtDetailedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 15), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysFtDetailedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtDetailedStatus.setDescription('Detailed status for the transfer for the particular local resource attribute specified by the corresponding values of a3ComSysFtLocalStorageType, a3ComSysFtLocalResourceType, a3ComSysFtLocalResourceMask, and a3ComSysFtLocalResourceAttribute. Note that this object is only valid in the case where a3ComSysFtStatus indicates an error.')
a3ComSysFtDetailedStatusString = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysFtDetailedStatusString.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtDetailedStatusString.setDescription('Detailed status description for the requested transfer.')
a3ComSysFtOwnerString = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysFtOwnerString.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtOwnerString.setDescription('A string describing the creator/owner of this entry.')
a3ComSysFtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 1, 1, 18), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysFtRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysFtRowStatus.setDescription('The row status object controls the creation/deletion of rows in this table. Its semantics are the same as those for the RowStatus textual convention specified for SNMPv2. Setting this object to createAndGo(4) is not allowed. Setting this object to createAndWait(5) causes an entry to be created with a3ComSysFtRowStatus value of notReady(3). Setting this object to active(1) causes the transfer to start for the given row. Objects within the row cannot be modified once a row has been set to active(1), Setting this object to destroy(6) causes the corresponding row to be deleted. Note that a request to set a row to notInService(2) or destroy(6) will fail if the current rowStatus value is active(1) (i.e. a file transfer is currently in progress). This is necessary since aborting a file transfer may leave the system in an inconsistent state. Note that, currently, only a single instance of a row can be created in this table.')
a3ComSysFtResourceAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 2))
a3ComSysFtSystemAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 2, 1))
a3ComSysFtSystemOperationalCode = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 2, 1, 1))
a3ComSysFtSystemConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 2, 1, 2))
a3ComSysFtSystemBridgeFilterCode = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 2, 1, 3))
a3ComSysFtDetailedResourceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 3))
a3ComSysFtSystemDetailedStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 3, 1))
a3ComSysFtSysStatusNotApplicable = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 3, 1, 1))
a3ComSysFtSysStatusNoImageLabel = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 3, 1, 2))
a3ComSysFtSysStatusConfigIdMismatch = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 3, 1, 3))
a3ComSysFtSysStatusChecksumError = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 3, 1, 4))
a3ComSysFtSysStatusNvRamError = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 3, 1, 5))
a3ComSysFtSysStatusFlashError = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 3, 1, 6))
a3ComSysFtSysStatusNoRoom = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 3, 1, 7))
a3ComSysFtSysBridgeFilterNotApplicable = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 3, 1, 8))
a3ComSysFtSysBridgeFilterSyntaxError = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 3, 1, 9))
a3ComSysFtSysBridgeFilterdownloadError = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 3, 1, 10))
a3ComSysFtSysBridgeFilterNoRoom = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 14, 3, 1, 11))
a3ComSysIpBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 15, 1))
a3ComSysIpInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 15, 2))
a3ComSysIpInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 15, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysIpInterfaceCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpInterfaceCount.setDescription('A count of the total number of IP interfaces configured.')
a3ComSysIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 15, 2, 2), )
if mibBuilder.loadTexts: a3ComSysIpInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpInterfaceTable.setDescription('A list of configured IP interfaces.')
a3ComSysIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 15, 2, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysIpInterfaceIpStackIndex"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysIpInterfaceAddr"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysIpInterfaceNetMask"))
if mibBuilder.loadTexts: a3ComSysIpInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpInterfaceEntry.setDescription('An individual IP interface.')
a3ComSysIpInterfaceIpStackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 15, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysIpInterfaceIpStackIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpInterfaceIpStackIndex.setDescription('The index of the IP stack identified by this entry relative to this agent.')
a3ComSysIpInterfaceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 15, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysIpInterfaceAddr.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpInterfaceAddr.setDescription('The IP address of this entry within the IP stack identified within this entry.')
a3ComSysIpInterfaceNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 15, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysIpInterfaceNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpInterfaceNetMask.setDescription('The subnet mask associated with this IP interface. The value of the mask is an IP address with all the network bits set to 1 and all the host bits set to 0.')
a3ComSysIpInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 15, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysIpInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpInterfaceIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. lspIPInterfaceIndex maps to the same interface as identified by ifIndex in the ifTable. Currently, this object can not be modified after creation.')
a3ComSysIpInterfaceBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 15, 2, 2, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysIpInterfaceBcastAddr.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpInterfaceBcastAddr.setDescription("This object represents the value of the least significant bit of this entry's direct broadcast address. For example, a value of one signifies that the host portion of the broadcast address is set to all ones.")
a3ComSysIpInterfaceCost = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 15, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysIpInterfaceCost.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpInterfaceCost.setDescription('The route cost metric used for this entry.')
a3ComSysIpInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 15, 2, 2, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysIpInterfaceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpInterfaceStatus.setDescription('The status column for this IP interface. This object can be set to: createAndGo(4) destroy(6) The following value may be read: active(1) Setting this object to createAndGo(4) causes the agent to attempt to create and commit the row based on the contents of the object in the row. If all necessary information is present in the row and the values are acceptable to the agent, the agent will change the status to active(1). If any of the necessary objects are not available the agent will reject the request. Other objects in this row entry can be individually modified while the row status is active(1). Setting this object to destroy(6) will remove this entry.')
a3ComSysIpxBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 16, 1))
a3ComSysIpxInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 16, 2))
a3ComSysIpxInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 16, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysIpxInterfaceCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpxInterfaceCount.setDescription('A count of the total number of IPX interfaces configured.')
a3ComSysIpxInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 16, 2, 2), )
if mibBuilder.loadTexts: a3ComSysIpxInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpxInterfaceTable.setDescription('A list of configured IPX interfaces.')
a3ComSysIpxInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 16, 2, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysIpxInterfaceIpxStackIndex"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysIpxInterfaceNetNumber"))
if mibBuilder.loadTexts: a3ComSysIpxInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpxInterfaceEntry.setDescription('An individual IPX interface.')
a3ComSysIpxInterfaceIpxStackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 16, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysIpxInterfaceIpxStackIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpxInterfaceIpxStackIndex.setDescription('The index of the IPX stack identified by this entry relative to this agent.')
a3ComSysIpxInterfaceNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 16, 2, 2, 1, 2), IpxNetworkNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysIpxInterfaceNetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpxInterfaceNetNumber.setDescription('The IPX Network Number of this entry.')
a3ComSysIpxInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 16, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysIpxInterfaceIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpxInterfaceIfIndex.setDescription('The ifIndex of the virtual interface that this IPX interface is is configured over. The a3ComSysIpxInterfaceIfIndex identifies a virtual interface, for example a VLAN, that this local address is associated with for purposes of routing or network management.')
a3ComSysIpxInterfaceCost = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 16, 2, 2, 1, 4), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysIpxInterfaceCost.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpxInterfaceCost.setDescription('The cost associated with the IPX address of this entry.')
a3ComSysIpxInterfaceFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 16, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("frame-ethernetII", 1), ("frame-802-2", 2), ("frame-802-3-Raw", 3), ("frame-SNAP", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysIpxInterfaceFrameType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpxInterfaceFrameType.setDescription('The frame format used for routing frames on this IPX interface. The framing formats are for ethernet ports. There are two frame formats for FDDI ports: 802.2 and FDDI SNAP. The correct FDDI format is automatically chosen if this interface is associated with a VLAN interface that contains both ethernet and FDDI ports. If the VLAN interface is an FDDI port, than the only values that can be written to this object are: frame-802-2(2) and frame-SNAP(4). ')
a3ComSysIpxInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 16, 2, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysIpxInterfaceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysIpxInterfaceStatus.setDescription('The status column for this IPX interface. This OBJECT can be set to: createAndGo(4) destroy(6) The following value may be read: active(1) Setting this object ot createAndGo(4) causes the agent to attempt to create and commit the row based on the contents of the object in the row. If all necessary information is present in the row and the values are acceptable to the agent, the agent will change the status to active(1). If any of the necessary objects are not available the agent will reject the request. Other objects in this row entry can be individually modified while the row status is active(1). Setting this object to destroy(6) will remove this entry.')
a3ComSysAppleTalkBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 1))
a3ComSysAppleTalkInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2))
a3ComSysAtInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysAtInterfaceCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceCount.setDescription('A count of the total number of AppleTalk interfaces configured.')
a3ComSysAtInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2), )
if mibBuilder.loadTexts: a3ComSysAtInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceTable.setDescription('A list of AppleTalk ports for this entity.')
a3ComSysAtInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysAtInterfaceAtStackIndex"), (0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysAtInterfaceIfIndex"))
if mibBuilder.loadTexts: a3ComSysAtInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceEntry.setDescription('An individual appletalk interface entry. Appletalk entries with row status of active(1) cannot be modified but must set to destroy(6) and recreated.')
a3ComSysAtInterfaceAtStackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceAtStackIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceAtStackIndex.setDescription('The index of the Appletalk stack identified by this entry relative to this agent. Setting of this object is required for all interface creations.')
a3ComSysAtInterfaceNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 2), DdpNodeAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysAtInterfaceNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceNetAddress.setDescription('The AppleTalk network address configured for this port.')
a3ComSysAtInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seedInterface", 1), ("nonseedInterface", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceType.setDescription('The type of interface that is configured for this port. Setting of this object is required for all interface creations.')
a3ComSysAtInterfaceNetStart = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 4), ATNetworkNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceNetStart.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceNetStart.setDescription('The first AppleTalk network address in the range configured for this port. If this port is not a native AppleTalk port, this object shall have the value of two octets of zero. Setting of this object is mandatory only for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).')
a3ComSysAtInterfaceNetEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 5), ATNetworkNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceNetEnd.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceNetEnd.setDescription('The last AppleTalk network address in the range configured for this port. If the network to which this AppleTalk port is connected is a non-extended network, or if it is not a native AppleTalk port, the value for a3ComSysAtInterfaceNetEnd shall be two octets of zero. Setting of this object is mandatory only for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).')
a3ComSysAtInterfaceZoneDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 6), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceZoneDefault.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceZoneDefault.setDescription('The name of the default zone for this port. If this port only has one zone, that zone is represented here. Setting of this object is mandatory for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).')
a3ComSysAtInterfaceZone1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 7), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone1.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone1.setDescription("Zone name in this entry's zone list. This object may only only be set for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).")
a3ComSysAtInterfaceZone2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 8), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone2.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone2.setDescription("Zone name in this entry's zone list. This object may only only be set for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).")
a3ComSysAtInterfaceZone3 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 9), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone3.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone3.setDescription("Zone name in this entry's zone list. This object may only only be set for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).")
a3ComSysAtInterfaceZone4 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 10), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone4.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone4.setDescription("Zone name in this entry's zone list. This object may only only be set for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).")
a3ComSysAtInterfaceZone5 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 11), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone5.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone5.setDescription("Zone name in this entry's zone list. This object may only only be set for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).")
a3ComSysAtInterfaceZone6 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 12), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone6.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone6.setDescription("Zone name in this entry's zone list. This object may only only be set for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).")
a3ComSysAtInterfaceZone7 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 13), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone7.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone7.setDescription("Zone name in this entry's zone list. This object may only only be set for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).")
a3ComSysAtInterfaceZone8 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 14), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone8.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone8.setDescription("Zone name in this entry's zone list. This object may only only be set for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).")
a3ComSysAtInterfaceZone9 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 15), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone9.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone9.setDescription("Zone name in this entry's zone list. This object may only only be set for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).")
a3ComSysAtInterfaceZone10 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 16), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone10.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone10.setDescription("Zone name in this entry's zone list. This object may only only be set for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).")
a3ComSysAtInterfaceZone11 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 17), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone11.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone11.setDescription("Zone name in this entry's zone list. This object may only only be set for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).")
a3ComSysAtInterfaceZone12 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 18), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone12.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone12.setDescription("Zone name in this entry's zone list. This object may only only be set for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).")
a3ComSysAtInterfaceZone13 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 19), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone13.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone13.setDescription("Zone name in this entry's zone list. This object may only only be set for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).")
a3ComSysAtInterfaceZone14 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 20), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone14.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone14.setDescription("Zone name in this entry's zone list. This object may only only be set for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).")
a3ComSysAtInterfaceZone15 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 21), ATName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone15.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceZone15.setDescription("Zone name in this entry's zone list. This object may only only be set for interfaces with a3ComSysAtInterfaceType equal to seedInterface(1).")
a3ComSysAtInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceIfIndex.setDescription('The interface associated with this AppleTalk port. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the ifTable. Setting of this object is required for all interface creations.')
a3ComSysAtInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unused", 1), ("initialize", 2), ("terminate", 3), ("failed", 4), ("down", 5), ("validate", 6), ("discover", 7), ("waiting", 8), ("enabled", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysAtInterfaceState.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceState.setDescription('The current state of the appletalk interface.')
a3ComSysAtInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 17, 2, 2, 1, 24), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysAtInterfaceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysAtInterfaceStatus.setDescription('The status column for this IP interface. This object can be set to: createAndGo(4) createAndWait(5) destroy(6) The following value may be read: active(1) notInService(2) Setting this object to createAndGo(4) causes the agent to attempt to create and commit the row based on the contents of the object in the row. If all necessary information is present in the row and the values are acceptable to the agent, the agent will change the status to active(1). If any of the necessary objects are not available the agent will reject the request. Setting this object to createAndWait(5) causes the agent to create an entry which has the value notInService(2). Only three notInService(2) entries are permitted at any one time. Setting a row with status notInService(2) to active(1) will cause this entry to change to active(1) if the appropriate columns have been set. Setting this object to destroy(6) will remove this entry.')
a3ComSysModuleCardCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardCount.setDescription('The current count of module components present in the system.')
a3ComSysModuleCardInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2), )
if mibBuilder.loadTexts: a3ComSysModuleCardInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoTable.setDescription('A list of module card information entries. A single entry exists in this list for each modular component in the system.')
a3ComSysModuleCardInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysModuleCardInfoIndex"))
if mibBuilder.loadTexts: a3ComSysModuleCardInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoEntry.setDescription('A module card info entry contains information about a particular modular component within the system.')
a3ComSysModuleCardInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoIndex.setDescription('The index of the modular component identified by this entry.')
a3ComSysModuleCardInfoFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("coreBuilder3500", 1), ("superStack7000", 2), ("superStack9000", 3), ("coreBuilder9000-RF12R", 17), ("coreBuilder9000-RF6MC", 18), ("coreBuilder9000-LF20R", 19), ("coreBuilder9000-LF10MC", 20), ("coreBuilder9000-LF36T", 21), ("coreBuilder9000-FG24", 22), ("coreBuilder9000-FG9", 23), ("coreBuilder9000-LG9MC", 24), ("coreBuilder9000-LG9", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardInfoFamily.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoFamily.setDescription('The family code for this module.')
a3ComSysModuleCardInfoGenericType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("backplaneOrMotherboard", 1), ("processorBoard", 2), ("enet10MbAnd100MbAdaptor", 3), ("enet1GbAdaptor", 4), ("fddiAdaptor", 5), ("atmAdaptor", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardInfoGenericType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoGenericType.setDescription('The generic type code for this module.')
a3ComSysModuleCardInfoSpecificType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 161, 162, 163, 164, 177, 178, 179, 180, 181, 183, 225, 226, 227, 228, 229, 230, 241, 242, 243, 244))).clone(namedValues=NamedValues(("notApplicable", 1), ("atmSonetOC3Fiber", 161), ("atmSonetOC12Fiber", 162), ("atmSonetOC3Copper", 163), ("atmSonetOC12Copper", 164), ("enet1Gb850nMMultimodeFiber", 177), ("enet1Gb1300nMFiber", 178), ("enet1GbCoax", 179), ("packetSwitchingFabric1000BaseBackplane", 180), ("enet1Gb1000BaseTx", 181), ("enet1000BaseSxMmfSCandGBIC", 183), ("enet100Mb100BaseTx", 225), ("enet10or100BaseTxTelco", 226), ("enet100Mb100BaseFx", 227), ("enet100Mb100BaseT4", 228), ("enet100Mb100BaseTxSTP", 229), ("enet100Mb100BaseT2", 230), ("fddiMultimodeSC", 241), ("fddiSingleModeSC", 242), ("fddiCopperUTP", 243), ("fddiCopperSTP", 244)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardInfoSpecificType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoSpecificType.setDescription('The specific type code for this module.')
a3ComSysModuleCardInfoPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardInfoPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoPartNumber.setDescription('The specific part number for this module.')
a3ComSysModuleCardInfoManufacturingDate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardInfoManufacturingDate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoManufacturingDate.setDescription('The date that this module was manufactured in the format mm/dd/yyyy.')
a3ComSysModuleCardInfoModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardInfoModuleSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoModuleSerialNumber.setDescription('3Com serial number.')
a3ComSysModuleCardInfoTLASerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardInfoTLASerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoTLASerialNumber.setDescription('TOP level assembly serial number for boards with non-removable daughter cards. Null string for all other board types.')
a3ComSysModuleCardInfo3CNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardInfo3CNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfo3CNumber.setDescription('On a backplane or non-removable module this is the 3C number of the chassis. On a removable module this is the 3C number of the module.')
a3ComSysModuleCardInfoICTTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardInfoICTTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoICTTestStatus.setDescription('1 equals test passed, or greater than 1 identifies the test number failure (0 or FF indicates field yet not written).')
a3ComSysModuleCardInfoICTTestRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardInfoICTTestRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoICTTestRevision.setDescription('Manufacturing ATE test revision number (XX.XX).')
a3ComSysModuleCardInfoSystemTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardInfoSystemTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoSystemTestStatus.setDescription('1 equals test passed, or greater than 1 identifies the test number failure (0 or FF indicates field yet not written).')
a3ComSysModuleCardInfoFunctionalTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardInfoFunctionalTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoFunctionalTestStatus.setDescription('1 equals test passed, or greater than 1 identifies the test number failure (0 or FF indicates field yet not written).')
a3ComSysModuleCardInfoFunctionalTestRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardInfoFunctionalTestRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoFunctionalTestRevision.setDescription('Manufacturing functional test revision number (XX.XX).')
a3ComSysModuleCardInfoBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardInfoBoardRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoBoardRevision.setDescription('Board revision code. ')
a3ComSysModuleCardInfoRuntimeHours = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 18, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysModuleCardInfoRuntimeHours.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysModuleCardInfoRuntimeHours.setDescription('A total count of the number of hours this module has been in operation.')
a3ComSysDiagnosticsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 19, 1), )
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoTable.setDescription('A list of module card information entries. A single entry exists in this list for each modular component in the system.')
a3ComSysDiagnosticsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 19, 1, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysDiagnosticsInfoIndex"))
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoEntry.setDescription('A diagnostics info entry contains information about a particular diagnostics event on a modular component within the system.')
a3ComSysDiagnosticsInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoIndex.setDescription('The index of the diagnostics modular component identified by this entry.')
a3ComSysDiagnosticsInfoPOVDiagnosticsRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoPOVDiagnosticsRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoPOVDiagnosticsRevision.setDescription('The revision of the POV (power on verification) diagnostics software at the most recent failure.')
a3ComSysDiagnosticsInfoExtendedDiagnosticsRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 19, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoExtendedDiagnosticsRevision.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoExtendedDiagnosticsRevision.setDescription('The revision of the extended diagnostics software at the most recent failure.')
a3ComSysDiagnosticsInfoDiagnosticFailureCode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 19, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoDiagnosticFailureCode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoDiagnosticFailureCode.setDescription('The code written by the diagnostics at the most recent failure. This identifies both the test number and failure code in the following format: <testNumber>-<errorCode>. If there is no failure then 000-000 is displayed.')
a3ComSysDiagnosticsInfoDiagnosticFailureDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 19, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoDiagnosticFailureDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoDiagnosticFailureDateTime.setDescription('The date and time of the most recent diagnostic failure for the module.')
a3ComSysDiagnosticsInfoDiagnosticFailureSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 19, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoDiagnosticFailureSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoDiagnosticFailureSlotNumber.setDescription('The slot number (network adapter cards only) of the most recent diagnostic failure for the module.')
a3ComSysDiagnosticsInfoDiagnosticFailureCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 19, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoDiagnosticFailureCounter.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoDiagnosticFailureCounter.setDescription('The total number of diagnostic failures logged against this module.')
a3ComSysDiagnosticsInfoDiagnosticFieldDOACounter = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 19, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoDiagnosticFieldDOACounter.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysDiagnosticsInfoDiagnosticFieldDOACounter.setDescription('The total number of failures occurring at this module during the first 48 hours of operation.')
a3ComSysSystemOverTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 4) + (0,1)).setObjects(("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSystemOvertemperature"))
if mibBuilder.loadTexts: a3ComSysSystemOverTemperatureEvent.setDescription('The trap that is generated when the system temperature exceeds a certain threshold.')
a3ComSysPowerSupplyFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 4) + (0,2)).setObjects(("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysPowerSupplyStatusIndex"), ("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysPowerSupplyStatus"), ("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysPowerSupplyStatusSupported"))
if mibBuilder.loadTexts: a3ComSysPowerSupplyFailureEvent.setDescription('The trap that is generated when a power supply unit fails.')
a3ComSysChassisSlotOverTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 4) + (0,3)).setObjects(("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSlotIndex"), ("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSlotBoardType"), ("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSlotBoardRevision"), ("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSlotBoardStatus"), ("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSlotOvertemperature"), ("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSlotConverterBad"))
if mibBuilder.loadTexts: a3ComSysChassisSlotOverTemperatureEvent.setDescription('The trap that is generated when the temperature of a board in a particular slot exceeds a certain threshold.')
a3ComSysChassisSlotInsertEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 4) + (0,4)).setObjects(("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSlotIndex"), ("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSlotBoardType"), ("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSlotBoardRevision"))
if mibBuilder.loadTexts: a3ComSysChassisSlotInsertEvent.setDescription('The trap that is generated when a board is inserted into a particular slot.')
a3ComSysChassisSlotExtractEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 4) + (0,5)).setObjects(("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSlotIndex"))
if mibBuilder.loadTexts: a3ComSysChassisSlotExtractEvent.setDescription('The trap that is generated when a board is extracted from a particular slot.')
a3ComSysBridgeAddressThresholdEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 4) + (0,6)).setObjects(("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysBridgeIndex"))
if mibBuilder.loadTexts: a3ComSysBridgeAddressThresholdEvent.setDescription('The trap that is generated when the number of addresses stored in the bridge reaches a3ComSysBridgeAddressThreshold.')
a3ComSysSystemFanFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 4) + (0,7)).setObjects(("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysSystemFanFailure"))
if mibBuilder.loadTexts: a3ComSysSystemFanFailureEvent.setDescription('The trap that is generated when one of the system fans fails.')
a3ComSysModuleCardSysOverTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 4) + (0,8)).setObjects(("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysModuleCardInfoIndex"), ("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysModuleCardInfoFamily"), ("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysModuleCardInfoGenericType"))
if mibBuilder.loadTexts: a3ComSysModuleCardSysOverTemperatureEvent.setDescription('The trap that is generated when the temperature of the system exceeds a certain threshold. This trap is generated from agents that support the a3ComSysModuleCardInfoTable.')
a3ComSysModuleCardInsertEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 4) + (0,9)).setObjects(("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysModuleCardInfoIndex"), ("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysModuleCardInfoFamily"), ("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysModuleCardInfoGenericType"), ("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysModuleCardInfoSpecificType"))
if mibBuilder.loadTexts: a3ComSysModuleCardInsertEvent.setDescription('The trap that is generated when a board is inserted into a particular modular slot. This trap is generated from agents that support the a3ComSysModuleCardInfoTable.')
a3ComSysModuleCardExtractEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 4) + (0,10)).setObjects(("A3COM-SWITCHING-SYSTEMS-MIB", "a3ComSysModuleCardInfoIndex"))
if mibBuilder.loadTexts: a3ComSysModuleCardExtractEvent.setDescription('The trap that is generated when a board is extracted from a particular modular slot. This trap is generated from agents that support the a3ComSysModuleCardInfoTable.')
mibBuilder.exportSymbols("A3COM-SWITCHING-SYSTEMS-MIB", a3ComSysFtSysStatusConfigIdMismatch=a3ComSysFtSysStatusConfigIdMismatch, a3ComSysSmtFddiPortLocationTypeIndex=a3ComSysSmtFddiPortLocationTypeIndex, a3ComSysModuleCardInfoBoardRevision=a3ComSysModuleCardInfoBoardRevision, a3ComSysSmtFddiMacCurrentStation=a3ComSysSmtFddiMacCurrentStation, a3ComSysNetworkAnalyzerBridgeIndex=a3ComSysNetworkAnalyzerBridgeIndex, A3ComSysResourceType=A3ComSysResourceType, a3ComSysInterfaceLocationTypeIndex=a3ComSysInterfaceLocationTypeIndex, a3ComSysControlPanel=a3ComSysControlPanel, a3ComSysSnmpInternalProxyTable=a3ComSysSnmpInternalProxyTable, a3ComSysSmtFddiPortStationSmtIndex=a3ComSysSmtFddiPortStationSmtIndex, a3ComSysSmtFddiMacStationIndex=a3ComSysSmtFddiMacStationIndex, a3ComSysSnmpAgentId=a3ComSysSnmpAgentId, a3ComSysSystemFanFailureEvent=a3ComSysSystemFanFailureEvent, a3ComSysIpxInterfaceGroup=a3ComSysIpxInterfaceGroup, a3ComSysEthernetPortRateIndex=a3ComSysEthernetPortRateIndex, a3ComSysSlotBoardRevision=a3ComSysSlotBoardRevision, a3ComSysBridgeAddressTableSize=a3ComSysBridgeAddressTableSize, a3ComSysSmtFddiMacBeaconIndex=a3ComSysSmtFddiMacBeaconIndex, a3ComSysSystemConsoleAccess=a3ComSysSystemConsoleAccess, a3ComSysControlPanelHardwareRevision=a3ComSysControlPanelHardwareRevision, a3ComSysSmtFddiPortIndex=a3ComSysSmtFddiPortIndex, a3ComSysSmtFddiMacLocationSmtIndex=a3ComSysSmtFddiMacLocationSmtIndex, a3ComSysSlotEntry=a3ComSysSlotEntry, a3ComSysAgentReadCommunity=a3ComSysAgentReadCommunity, a3ComSysSnmpInternalProxyAgentId=a3ComSysSnmpInternalProxyAgentId, a3ComSysEthernetPortRatePeakFrameTransmitRate=a3ComSysEthernetPortRatePeakFrameTransmitRate, a3ComSysFtSystemBridgeFilterCode=a3ComSysFtSystemBridgeFilterCode, a3ComSysIpInterfaceCost=a3ComSysIpInterfaceCost, switchingSystems_mib=switchingSystems_mib, a3ComSysSmtFddiMacRatePeakFrameReceiveRate=a3ComSysSmtFddiMacRatePeakFrameReceiveRate, a3ComSysInterfaceLocationIfIndex=a3ComSysInterfaceLocationIfIndex, a3ComSysDiagnosticsInfoDiagnosticFailureSlotNumber=a3ComSysDiagnosticsInfoDiagnosticFailureSlotNumber, a3ComSysBridgePortReceiveMulticastLimit=a3ComSysBridgePortReceiveMulticastLimit, a3ComSysSystemCurrentSnmpMode=a3ComSysSystemCurrentSnmpMode, a3ComSysBridgePortStpMode=a3ComSysBridgePortStpMode, a3ComSysAtInterfaceZone1=a3ComSysAtInterfaceZone1, a3ComSysIpxInterfaceFrameType=a3ComSysIpxInterfaceFrameType, a3ComSysIpInterfaceIpStackIndex=a3ComSysIpInterfaceIpStackIndex, a3ComSysFtRowStatus=a3ComSysFtRowStatus, a3ComSysAtInterfaceIfIndex=a3ComSysAtInterfaceIfIndex, a3ComSysFtBytesTransferred=a3ComSysFtBytesTransferred, a3ComSysBridgePortAddressAge=a3ComSysBridgePortAddressAge, a3ComSysAtInterfaceZone10=a3ComSysAtInterfaceZone10, a3ComSysSlotConverterBad=a3ComSysSlotConverterBad, a3ComSysFtLocalResourceAttribute=a3ComSysFtLocalResourceAttribute, a3ComSysBridgeStpEnable=a3ComSysBridgeStpEnable, a3ComSysPowerSupplyStatusTable=a3ComSysPowerSupplyStatusTable, a3ComSysSmtFddiMacLocationEntry=a3ComSysSmtFddiMacLocationEntry, a3ComSysTokenRingPortInsertStatus=a3ComSysTokenRingPortInsertStatus, a3ComSysEthernetPortLabel=a3ComSysEthernetPortLabel, a3ComSysPowerSupplyCount=a3ComSysPowerSupplyCount, a3ComSysModuleCardCount=a3ComSysModuleCardCount, a3ComSysModuleCardInfoSpecificType=a3ComSysModuleCardInfoSpecificType, a3ComSysModuleCardInfoFamily=a3ComSysModuleCardInfoFamily, a3ComSysSystemLogFacility=a3ComSysSystemLogFacility, a3ComSysBridgePortForwardedMulticastFrames=a3ComSysBridgePortForwardedMulticastFrames, a3ComSysSnmpProxyInternalRequests=a3ComSysSnmpProxyInternalRequests, a3ComSysBridgePortReceiveMulticastLimitMultiplier=a3ComSysBridgePortReceiveMulticastLimitMultiplier, a3ComSysTokenRingPortRemoves=a3ComSysTokenRingPortRemoves, a3ComSysTokenRingPortEntry=a3ComSysTokenRingPortEntry, a3ComSysBridgePortSameSegmentDiscards=a3ComSysBridgePortSameSegmentDiscards, a3ComSysFtOwnerString=a3ComSysFtOwnerString, a3ComSysTokenRingPortHardErrors=a3ComSysTokenRingPortHardErrors, a3ComSysEthernetPortCount=a3ComSysEthernetPortCount, a3ComSysBridgePortReceiveMulticastLimitExceededDiscards=a3ComSysBridgePortReceiveMulticastLimitExceededDiscards, a3ComSysBridgePortFloodedUnicastOctets=a3ComSysBridgePortFloodedUnicastOctets, a3ComSysInterfaceLocationTable=a3ComSysInterfaceLocationTable, a3ComSysEthernetPortRatePeakByteTransmitRate=a3ComSysEthernetPortRatePeakByteTransmitRate, a3ComSysIpInterfaceNetMask=a3ComSysIpInterfaceNetMask, a3ComSysChassisSlotInsertEvent=a3ComSysChassisSlotInsertEvent, a3ComSysAtInterfaceTable=a3ComSysAtInterfaceTable, a3ComSysChassisSlotExtractEvent=a3ComSysChassisSlotExtractEvent, a3ComSysTokenRingPortTokenErrors=a3ComSysTokenRingPortTokenErrors, a3ComSysIpxInterfaceStatus=a3ComSysIpxInterfaceStatus, a3ComSysEthernetPortTable=a3ComSysEthernetPortTable, a3ComSysSystemSoftwareRevision=a3ComSysSystemSoftwareRevision, a3ComSysSmtFddiPortStationIndex=a3ComSysSmtFddiPortStationIndex, a3ComSysIpxInterfaceNetNumber=a3ComSysIpxInterfaceNetNumber, a3ComSysTokenRingPortSoftErrors=a3ComSysTokenRingPortSoftErrors, switchingSystemsFddiMibGroups=switchingSystemsFddiMibGroups, a3ComSysAgentTrapDestinationEntryStatus=a3ComSysAgentTrapDestinationEntryStatus, a3ComSysBridgeIndex=a3ComSysBridgeIndex, a3ComSysSmtFddiMacRatePeakByteReceiveRate=a3ComSysSmtFddiMacRatePeakByteReceiveRate, a3ComSysBridgePortReceiveMulticastLimitExceededs=a3ComSysBridgePortReceiveMulticastLimitExceededs, a3ComSysSystemId=a3ComSysSystemId, a3ComSysAgentTrapDestinationTrapMask=a3ComSysAgentTrapDestinationTrapMask, a3ComSysSmtFddiMacAvailableStations=a3ComSysSmtFddiMacAvailableStations, a3ComSysIpxInterfaceIpxStackIndex=a3ComSysIpxInterfaceIpxStackIndex, a3ComSysIpBaseGroup=a3ComSysIpBaseGroup, a3ComSysSnmpInternalProxyEntry=a3ComSysSnmpInternalProxyEntry, a3ComSysModuleCardExtractEvent=a3ComSysModuleCardExtractEvent, a3ComSysPowerSupplyStatusSupported=a3ComSysPowerSupplyStatusSupported, a3ComSysSmtFddiPortEntry=a3ComSysSmtFddiPortEntry, a3ComSysAppleTalkGroup=a3ComSysAppleTalkGroup, a3ComSysBridge=a3ComSysBridge, a3ComSysBridgePortAddressIndex=a3ComSysBridgePortAddressIndex, a3ComSysSnmpInternalProxyAccessClass=a3ComSysSnmpInternalProxyAccessClass, a3ComSysNetworkAnalyzerBridgePortIndex=a3ComSysNetworkAnalyzerBridgePortIndex, a3ComSysSystemOverTemperatureEvent=a3ComSysSystemOverTemperatureEvent, a3ComSysControlPanelAccess=a3ComSysControlPanelAccess, a3ComSysSlotIndex=a3ComSysSlotIndex, a3ComSysAtInterfaceZone9=a3ComSysAtInterfaceZone9, a3ComSysFtLocalStorageType=a3ComSysFtLocalStorageType, a3ComSysModuleCardInfoRuntimeHours=a3ComSysModuleCardInfoRuntimeHours, a3ComSysSystemRequestedFddiStationMode=a3ComSysSystemRequestedFddiStationMode, a3ComSysSmtFddiMacLocationTable=a3ComSysSmtFddiMacLocationTable, a3ComSysModuleCardInfoFunctionalTestRevision=a3ComSysModuleCardInfoFunctionalTestRevision, a3ComSysModuleCardInfoICTTestRevision=a3ComSysModuleCardInfoICTTestRevision, a3ComSysFtGroup=a3ComSysFtGroup, a3ComSysNetworkAnalyzerTableEntry=a3ComSysNetworkAnalyzerTableEntry, a3ComSysSmtFddiMacBeaconSmtIndex=a3ComSysSmtFddiMacBeaconSmtIndex, a3ComSysModuleCardInsertEvent=a3ComSysModuleCardInsertEvent, a3ComSysFtRemoteUserPassword=a3ComSysFtRemoteUserPassword, DdpNodeAddress=DdpNodeAddress, a3ComSysSystemLogSeverityLevel=a3ComSysSystemLogSeverityLevel, a3ComSysBridgePortTransmitAllPathFilteredFrames=a3ComSysBridgePortTransmitAllPathFilteredFrames, a3ComSysIpInterfaceBcastAddr=a3ComSysIpInterfaceBcastAddr, a3ComSysAtInterfaceNetEnd=a3ComSysAtInterfaceNetEnd, a3ComSysBridgeEntry=a3ComSysBridgeEntry, a3ComSysTokenRingPortLostFrameErrors=a3ComSysTokenRingPortLostFrameErrors, a3ComSysSmtFddiMacCurrentLocation=a3ComSysSmtFddiMacCurrentLocation, a3ComSysBridgePortAddressRemoteAddress=a3ComSysBridgePortAddressRemoteAddress, a3ComSysFtSystemDetailedStatus=a3ComSysFtSystemDetailedStatus, a3ComSysEthernetPortRatePeakFrameReceiveRate=a3ComSysEthernetPortRatePeakFrameReceiveRate, a3ComSysBridgePortFloodedUnicastFrames=a3ComSysBridgePortFloodedUnicastFrames, a3ComSysFtStatus=a3ComSysFtStatus, a3ComSysSmtFddiMacRateFrameTransmitRate=a3ComSysSmtFddiMacRateFrameTransmitRate, a3ComSysSystemLogSeverityThreshold=a3ComSysSystemLogSeverityThreshold, a3ComSysSystemHardwareRevision=a3ComSysSystemHardwareRevision, a3ComSysTokenRingPortCount=a3ComSysTokenRingPortCount, a3ComSysAtInterfaceType=a3ComSysAtInterfaceType, a3ComSysAgentTrapEnterprise=a3ComSysAgentTrapEnterprise, a3ComSysSmt=a3ComSysSmt, a3ComSysAgentTrapDescriptionTable=a3ComSysAgentTrapDescriptionTable, a3ComSysBridgeIpxSnapTranslationEnable=a3ComSysBridgeIpxSnapTranslationEnable, a3ComSysAgentTrapDestinationAddress=a3ComSysAgentTrapDestinationAddress, a3ComSysBridgePortReceiveMulticastLimitFrameType=a3ComSysBridgePortReceiveMulticastLimitFrameType, a3ComSysBridgePortAddressTable=a3ComSysBridgePortAddressTable, a3ComSysBridgePortIfIndex=a3ComSysBridgePortIfIndex, a3ComSysBridgeLowLatencyEnable=a3ComSysBridgeLowLatencyEnable, a3ComSysBridgePortAddressBridgeIndex=a3ComSysBridgePortAddressBridgeIndex, a3ComSysTokenRingPortType=a3ComSysTokenRingPortType, a3ComSysAgentRemoteSmtProxyRequestMaxAge=a3ComSysAgentRemoteSmtProxyRequestMaxAge, a3ComSysTokenRingPortLabel=a3ComSysTokenRingPortLabel, switchingSystemsMibGroups=switchingSystemsMibGroups, a3ComSysSystemName=a3ComSysSystemName, a3ComSysBridgePortReceiveUnknownDiscards=a3ComSysBridgePortReceiveUnknownDiscards, a3ComSysEthernetPortRateFrameTransmitRate=a3ComSysEthernetPortRateFrameTransmitRate, a3ComSysIpInterfaceCount=a3ComSysIpInterfaceCount, A3ComSysResourceBitMask=A3ComSysResourceBitMask, a3ComSysAtInterfaceNetAddress=a3ComSysAtInterfaceNetAddress, a3ComSysSnmpInternalProxyCommunity=a3ComSysSnmpInternalProxyCommunity, a3ComSysTokenRingPortLineErrors=a3ComSysTokenRingPortLineErrors, a3ComSysFtRemoteAddressType=a3ComSysFtRemoteAddressType, a3ComSysSystemConsoleWritePwd=a3ComSysSystemConsoleWritePwd, a3ComSysBridgePortBridgeIndex=a3ComSysBridgePortBridgeIndex, a3ComSysBridgePortTransmitBlockedDiscards=a3ComSysBridgePortTransmitBlockedDiscards, a3ComSysDiagnosticsInfoDiagnosticFailureCounter=a3ComSysDiagnosticsInfoDiagnosticFailureCounter, a3ComSysPowerSupply=a3ComSysPowerSupply, a3ComSysAgentProxyRemoteSmtEvents=a3ComSysAgentProxyRemoteSmtEvents, a3ComSysAtInterfaceZone12=a3ComSysAtInterfaceZone12, MacAddress=MacAddress, a3ComSysSmtFddiMacLocationIndex=a3ComSysSmtFddiMacLocationIndex, a3ComSysSmtFddiMacRateByteReceiveRate=a3ComSysSmtFddiMacRateByteReceiveRate, a3ComSysInterfaceLocationLocalIndex=a3ComSysInterfaceLocationLocalIndex, a3ComSysEthernetPortRateEntry=a3ComSysEthernetPortRateEntry, a3ComSysNetworkAnalyzerStatus=a3ComSysNetworkAnalyzerStatus, a3ComSysSystemRequestedSnmpMode=a3ComSysSystemRequestedSnmpMode, a3ComSysEthernetPortIndex=a3ComSysEthernetPortIndex, a3ComSysSnmpInternalProxyRequestMaxAge=a3ComSysSnmpInternalProxyRequestMaxAge, a3ComSysSmtFddiMacRequestedLocation=a3ComSysSmtFddiMacRequestedLocation, a3ComSysFtSystemAttributes=a3ComSysFtSystemAttributes, a3ComSysNetworkAnalyzerPhysicalAddress=a3ComSysNetworkAnalyzerPhysicalAddress, a3ComSysBridgePortForwardedUnicastOctets=a3ComSysBridgePortForwardedUnicastOctets, a3ComSysIpxInterfaceEntry=a3ComSysIpxInterfaceEntry, a3ComSysSlotTokenRingPortCount=a3ComSysSlotTokenRingPortCount, a3ComSysSystemLog=a3ComSysSystemLog, a3ComSysNetworkPortMonitorTableEntry=a3ComSysNetworkPortMonitorTableEntry, a3ComSysDiagnosticsInfoDiagnosticFailureDateTime=a3ComSysDiagnosticsInfoDiagnosticFailureDateTime, a3ComSysFtRemoteFileName=a3ComSysFtRemoteFileName, a3ComSysAtInterfaceZone2=a3ComSysAtInterfaceZone2, a3ComSysTokenRingPortBurstErrors=a3ComSysTokenRingPortBurstErrors, a3ComSysEthernetPort=a3ComSysEthernetPort, a3ComSysSlotFddiMacCount=a3ComSysSlotFddiMacCount, a3ComSysIpxInterfaceIfIndex=a3ComSysIpxInterfaceIfIndex, a3ComSysSystemDSTime=a3ComSysSystemDSTime, a3ComSysSystemManufacturer=a3ComSysSystemManufacturer, a3ComSysTokenRingPortACErrors=a3ComSysTokenRingPortACErrors, a3ComSysSlotBoardStatus=a3ComSysSlotBoardStatus, a3ComSysAtInterfaceNetStart=a3ComSysAtInterfaceNetStart, a3ComSysAgent=a3ComSysAgent, a3ComSysSystemBufferSize=a3ComSysSystemBufferSize, a3ComSysAtInterfaceEntry=a3ComSysAtInterfaceEntry, a3ComSysModuleCardInfoEntry=a3ComSysModuleCardInfoEntry, a3ComSysAgentProxyRemoteSmtRequests=a3ComSysAgentProxyRemoteSmtRequests, a3ComSysControlPanelText=a3ComSysControlPanelText, a3ComSysSystemLogDateTime=a3ComSysSystemLogDateTime, a3ComSysTokenRingPortLobeWires=a3ComSysTokenRingPortLobeWires, a3ComSysDiagnosticsInfoEntry=a3ComSysDiagnosticsInfoEntry, a3ComSysTokenRingPortIndex=a3ComSysTokenRingPortIndex, a3ComSysFtDetailedStatus=a3ComSysFtDetailedStatus, a3ComSysIpInterfaceTable=a3ComSysIpInterfaceTable, a3ComSysIpInterfaceGroup=a3ComSysIpInterfaceGroup, a3ComSysSlotEthernetPortCount=a3ComSysSlotEthernetPortCount, a3ComSysControlPanelColumns=a3ComSysControlPanelColumns, a3ComSysSystemLogEntryCurrentCount=a3ComSysSystemLogEntryCurrentCount, a3ComSysSlotBoardNameAbbrev=a3ComSysSlotBoardNameAbbrev, a3ComSysBridgePortAddressIsStatic=a3ComSysBridgePortAddressIsStatic, a3ComSysControlPanelLines=a3ComSysControlPanelLines, a3ComSysFtSysStatusNotApplicable=a3ComSysFtSysStatusNotApplicable, a3ComSysNetworkPortMonitorBridgePortIndex=a3ComSysNetworkPortMonitorBridgePortIndex, a3ComSysAtInterfaceZone8=a3ComSysAtInterfaceZone8, a3ComSysBridgePortForwardedUnicastFrames=a3ComSysBridgePortForwardedUnicastFrames, a3ComSysPowerSupplyStatusIndex=a3ComSysPowerSupplyStatusIndex, a3ComSysSystemNvMemorySize=a3ComSysSystemNvMemorySize, a3ComSysAtInterfaceCount=a3ComSysAtInterfaceCount, a3ComSysBridgePortForwardedMulticastOctets=a3ComSysBridgePortForwardedMulticastOctets, a3ComSysIpxGroup=a3ComSysIpxGroup, a3ComSysSmtFddiMacBeaconTable=a3ComSysSmtFddiMacBeaconTable, a3ComSysAtInterfaceState=a3ComSysAtInterfaceState, a3ComSysAtInterfaceZoneDefault=a3ComSysAtInterfaceZoneDefault, a3ComSysAtInterfaceZone5=a3ComSysAtInterfaceZone5, a3ComSysSystemMemorySize=a3ComSysSystemMemorySize, a3ComSysAppleTalkBaseGroup=a3ComSysAppleTalkBaseGroup, a3ComSysAtInterfaceStatus=a3ComSysAtInterfaceStatus, a3ComSysSmtFddiMacRateSmtIndex=a3ComSysSmtFddiMacRateSmtIndex, A3ComSysAddressType=A3ComSysAddressType, a3ComSysTokenRingPortReceiveCongestionErrors=a3ComSysTokenRingPortReceiveCongestionErrors, a3ComSysIpInterfaceIndex=a3ComSysIpInterfaceIndex, a3ComSysModuleCardInfoIndex=a3ComSysModuleCardInfoIndex, a3ComSysBridgeSTPEnable=a3ComSysBridgeSTPEnable, a3ComSysSmtFddiMacRateEntry=a3ComSysSmtFddiMacRateEntry, a3ComSysIpInterfaceStatus=a3ComSysIpInterfaceStatus, a3ComSysBridgePortIndex=a3ComSysBridgePortIndex, a3ComSysBridgePortReceiveOtherDiscards=a3ComSysBridgePortReceiveOtherDiscards, a3ComSysFtDirection=a3ComSysFtDirection, a3ComSysTokenRingPortFreqErrors=a3ComSysTokenRingPortFreqErrors, a3ComSysNetworkMonitor=a3ComSysNetworkMonitor, a3ComSysFtSysBridgeFilterNotApplicable=a3ComSysFtSysBridgeFilterNotApplicable, a3ComSysFtSystemConfiguration=a3ComSysFtSystemConfiguration, a3ComSysAppleTalkInterfaceGroup=a3ComSysAppleTalkInterfaceGroup, a3ComSysSystemSnmpRevision=a3ComSysSystemSnmpRevision, a3ComSysModuleCardInfoManufacturingDate=a3ComSysModuleCardInfoManufacturingDate, a3ComSysTokenRingPortRingStatus=a3ComSysTokenRingPortRingStatus, a3ComSysBridgeIpFragmentationEnabled=a3ComSysBridgeIpFragmentationEnabled, a3ComSysFtSystemOperationalCode=a3ComSysFtSystemOperationalCode, a3ComSysSmtFddiMacRateByteTransmitRate=a3ComSysSmtFddiMacRateByteTransmitRate, a3ComSysBridgePortReceiveSecurityDiscards=a3ComSysBridgePortReceiveSecurityDiscards, a3ComSysSmtFddiPortLabel=a3ComSysSmtFddiPortLabel, a3ComSysBridgeCount=a3ComSysBridgeCount, a3ComSysFtDetailedResourceStatus=a3ComSysFtDetailedResourceStatus, a3ComSysFtSysStatusNvRamError=a3ComSysFtSysStatusNvRamError, a3ComSysModuleCardSysOverTemperatureEvent=a3ComSysModuleCardSysOverTemperatureEvent, a3ComSysAgentRequestMaxAge=a3ComSysAgentRequestMaxAge)
mibBuilder.exportSymbols("A3COM-SWITCHING-SYSTEMS-MIB", a3ComSysTokenRingPort=a3ComSysTokenRingPort, a3ComSysEthernetPortEntry=a3ComSysEthernetPortEntry, a3ComSysSystemCurrentFddiStationMode=a3ComSysSystemCurrentFddiStationMode, a3ComSysSystemOvertemperature=a3ComSysSystemOvertemperature, a3ComSysSmtFddiPortStationEntry=a3ComSysSmtFddiPortStationEntry, a3ComSysEthernetPortIfIndex=a3ComSysEthernetPortIfIndex, a3ComSysModuleCardInfoTLASerialNumber=a3ComSysModuleCardInfoTLASerialNumber, a3ComSysAgentTrapDestinationTableEntry=a3ComSysAgentTrapDestinationTableEntry, a3ComSysSmtFddiMacAvailableLocation=a3ComSysSmtFddiMacAvailableLocation, a3ComSysDiagnosticsInfoTable=a3ComSysDiagnosticsInfoTable, a3ComSysSystemLogEntry=a3ComSysSystemLogEntry, a3ComSysSnmp=a3ComSysSnmp, a3ComSysSmtFddiMacBeaconEntry=a3ComSysSmtFddiMacBeaconEntry, a3ComSysFtTableEntry=a3ComSysFtTableEntry, a3ComSysEthernetPortRateTable=a3ComSysEthernetPortRateTable, a3ComSysAgentReadWriteCommunity=a3ComSysAgentReadWriteCommunity, a3ComSysSmtFddiMacStationTable=a3ComSysSmtFddiMacStationTable, a3ComSysModuleCardInfoICTTestStatus=a3ComSysModuleCardInfoICTTestStatus, a3ComSysFtSysStatusNoRoom=a3ComSysFtSysStatusNoRoom, a3ComSysSystemLogMessage=a3ComSysSystemLogMessage, a3ComSysBridgePortReceiveBlockedDiscards=a3ComSysBridgePortReceiveBlockedDiscards, a3ComSysSystemFanFailure=a3ComSysSystemFanFailure, ATName=ATName, a3ComSysNetworkPortMonitorBridgeIndex=a3ComSysNetworkPortMonitorBridgeIndex, a3ComSysControlPanelSoftwareRevision=a3ComSysControlPanelSoftwareRevision, a3ComSysModuleCardInfoSystemTestStatus=a3ComSysModuleCardInfoSystemTestStatus, a3ComSysSlotOvertemperature=a3ComSysSlotOvertemperature, a3ComSysPowerSupplyStatus=a3ComSysPowerSupplyStatus, a3ComSysTokenRingPortIfIndex=a3ComSysTokenRingPortIfIndex, a3ComSysChassisSlotOverTemperatureEvent=a3ComSysChassisSlotOverTemperatureEvent, a3ComSysDiagnosticsInfoDiagnosticFailureCode=a3ComSysDiagnosticsInfoDiagnosticFailureCode, a3ComSysFtResourceAttributes=a3ComSysFtResourceAttributes, a3ComSysSystemMACAddressCount=a3ComSysSystemMACAddressCount, a3ComSysIpInterfaceEntry=a3ComSysIpInterfaceEntry, a3ComSysSmtFddiMacRatePeakFrameTransmitRate=a3ComSysSmtFddiMacRatePeakFrameTransmitRate, ATNetworkNumber=ATNetworkNumber, a3ComSysModuleCardInfoFunctionalTestStatus=a3ComSysModuleCardInfoFunctionalTestStatus, a3ComSysAtInterfaceZone11=a3ComSysAtInterfaceZone11, a3ComSysBridgePortForwardedFrames=a3ComSysBridgePortForwardedFrames, a3ComSysSystemLogMaxSize=a3ComSysSystemLogMaxSize, a3ComSysFtRemoteAddress=a3ComSysFtRemoteAddress, a3ComSysIpInterfaceAddr=a3ComSysIpInterfaceAddr, a3ComSysSystemLogTable=a3ComSysSystemLogTable, a3ComSysTokenRingPortSpeed=a3ComSysTokenRingPortSpeed, a3ComSysFtSysBridgeFilterdownloadError=a3ComSysFtSysBridgeFilterdownloadError, a3ComSysAtInterfaceZone3=a3ComSysAtInterfaceZone3, a3ComSysInterfaceLocationSystemModuleIndex=a3ComSysInterfaceLocationSystemModuleIndex, a3ComSysAtInterfaceZone7=a3ComSysAtInterfaceZone7, a3ComSysBridgePortSpanningTreeFrameReceivedCounts=a3ComSysBridgePortSpanningTreeFrameReceivedCounts, a3ComSysAgentTrapDescriptionIndex=a3ComSysAgentTrapDescriptionIndex, a3ComSysSystemChassisSerialNumber=a3ComSysSystemChassisSerialNumber, a3ComSysAtInterfaceZone4=a3ComSysAtInterfaceZone4, a3ComSysSystemAction=a3ComSysSystemAction, a3ComSysInterfaceLocationType=a3ComSysInterfaceLocationType, a3ComSysBridgePortReceiveErrorDiscards=a3ComSysBridgePortReceiveErrorDiscards, a3ComSysBridgeAddressThreshold=a3ComSysBridgeAddressThreshold, a3ComSysBridgePortTable=a3ComSysBridgePortTable, a3ComSysDiagnosticsInfoIndex=a3ComSysDiagnosticsInfoIndex, a3ComSysSlotBoardRevStr=a3ComSysSlotBoardRevStr, a3ComSysInterfaceLocationEntry=a3ComSysInterfaceLocationEntry, a3ComSysSystemDateTime=a3ComSysSystemDateTime, a3ComSysSmtFddiPortLocationLocalIndex=a3ComSysSmtFddiPortLocationLocalIndex, a3ComSysSmtFddiMacRequestedStation=a3ComSysSmtFddiMacRequestedStation, a3ComSysBridgePortReceiveMulticastPathFilteredFrames=a3ComSysBridgePortReceiveMulticastPathFilteredFrames, a3ComSysSmtFddiPortTable=a3ComSysSmtFddiPortTable, a3ComSysModuleCardGroup=a3ComSysModuleCardGroup, a3ComSysSmtCount=a3ComSysSmtCount, a3ComSysSystemBaseMACAddress=a3ComSysSystemBaseMACAddress, a3ComSysSmtFddiMacRateFrameReceiveRate=a3ComSysSmtFddiMacRateFrameReceiveRate, a3ComSysAtInterfaceZone15=a3ComSysAtInterfaceZone15, a3ComSysNetworkPortMonitorTable=a3ComSysNetworkPortMonitorTable, a3ComSysIpxBaseGroup=a3ComSysIpxBaseGroup, a3ComSysAtInterfaceZone13=a3ComSysAtInterfaceZone13, a3ComSysIpRouter=a3ComSysIpRouter, a3ComSysEthernetPortRatePeakByteReceiveRate=a3ComSysEthernetPortRatePeakByteReceiveRate, a3ComSysSystemBuildTime=a3ComSysSystemBuildTime, a3ComSysModuleCardInfoModuleSerialNumber=a3ComSysModuleCardInfoModuleSerialNumber, a3ComSysBridgeMode=a3ComSysBridgeMode, a3ComSysBridgePortEntry=a3ComSysBridgePortEntry, a3ComSysEthernetPortLinkStatus=a3ComSysEthernetPortLinkStatus, a3ComSysFtRemoteUserName=a3ComSysFtRemoteUserName, a3ComSysModuleCardInfo3CNumber=a3ComSysModuleCardInfo3CNumber, a3ComSysBridgePortAddressEntry=a3ComSysBridgePortAddressEntry, a3ComSysInterfaceLocationInterfaceType=a3ComSysInterfaceLocationInterfaceType, a3ComSysFtDetailedStatusString=a3ComSysFtDetailedStatusString, a3ComSysModuleCardInfoPartNumber=a3ComSysModuleCardInfoPartNumber, a3ComSysFtForceTransfer=a3ComSysFtForceTransfer, a3ComSysSlotCount=a3ComSysSlotCount, a3ComSysEthernetPortType=a3ComSysEthernetPortType, a3ComSysSmtFddiMacRateTable=a3ComSysSmtFddiMacRateTable, a3ComSysSystemFPMemorySize=a3ComSysSystemFPMemorySize, a3ComSysSystemConsoleReadPwd=a3ComSysSystemConsoleReadPwd, a3ComSysBridgeAddressTablePeakCount=a3ComSysBridgeAddressTablePeakCount, a3ComSysSmtFddiPortCurrentStation=a3ComSysSmtFddiPortCurrentStation, a3ComSysIpxInterfaceTable=a3ComSysIpxInterfaceTable, a3ComSysBridgePortCount=a3ComSysBridgePortCount, a3ComSysSystemTimeZone=a3ComSysSystemTimeZone, a3ComSysBridgePortAddressAction=a3ComSysBridgePortAddressAction, a3ComSysTokenRingPortTransmitBeacons=a3ComSysTokenRingPortTransmitBeacons, a3ComSysFtTable=a3ComSysFtTable, a3ComSysSystemConsoleAdminPwd=a3ComSysSystemConsoleAdminPwd, a3ComSysPowerSupplyStatusEntry=a3ComSysPowerSupplyStatusEntry, a3ComSysSlot=a3ComSysSlot, a3ComSysTokenRingPortTable=a3ComSysTokenRingPortTable, a3ComSysBridgePortReceiveAllPathFilteredFrames=a3ComSysBridgePortReceiveAllPathFilteredFrames, a3ComSysSmtFddiPortSmtIndex=a3ComSysSmtFddiPortSmtIndex, a3ComSysIpxInterfaceCost=a3ComSysIpxInterfaceCost, a3ComSysFtIndex=a3ComSysFtIndex, a3ComSysSnmpInternalAgentTrapDestinationMask=a3ComSysSnmpInternalAgentTrapDestinationMask, a3ComSysBridgeAddressTableCount=a3ComSysBridgeAddressTableCount, a3ComSysSmtFddiPortRequestedStation=a3ComSysSmtFddiPortRequestedStation, a3ComSysDiagnosticsInfoDiagnosticFieldDOACounter=a3ComSysDiagnosticsInfoDiagnosticFieldDOACounter, a3ComSysIpGroup=a3ComSysIpGroup, a3ComSysFtLocalResourceType=a3ComSysFtLocalResourceType, a3ComSysFtSysBridgeFilterSyntaxError=a3ComSysFtSysBridgeFilterSyntaxError, a3ComSysSlotBoardName=a3ComSysSlotBoardName, a3Com=a3Com, a3ComSysInterface=a3ComSysInterface, a3ComSysSystemProtocolMask=a3ComSysSystemProtocolMask, a3ComSysEthernetPortRateByteTransmitRate=a3ComSysEthernetPortRateByteTransmitRate, a3ComSysTokenRingPortAbortTransErrors=a3ComSysTokenRingPortAbortTransErrors, a3ComSysDiagnosticsInfoExtendedDiagnosticsRevision=a3ComSysDiagnosticsInfoExtendedDiagnosticsRevision, a3ComSysFtSysStatusChecksumError=a3ComSysFtSysStatusChecksumError, a3ComSysPowerSupplyFailureEvent=a3ComSysPowerSupplyFailureEvent, a3ComSysBridgeSTPGroupAddress=a3ComSysBridgeSTPGroupAddress, a3ComSysBridgePortAddressStaticPort=a3ComSysBridgePortAddressStaticPort, a3ComSysSystemFlashMemorySize=a3ComSysSystemFlashMemorySize, a3ComSysIpxInterfaceCount=a3ComSysIpxInterfaceCount, a3ComSysSmtFddiPortAvailableStations=a3ComSysSmtFddiPortAvailableStations, RowStatus=RowStatus, a3ComSysSmtFddiMacBeaconHistory=a3ComSysSmtFddiMacBeaconHistory, a3ComSysFtLocalResourceMask=a3ComSysFtLocalResourceMask, a3ComSysBridgePortTransmitMulticastPathFilteredFrames=a3ComSysBridgePortTransmitMulticastPathFilteredFrames, a3ComSysAgentTrapNumber=a3ComSysAgentTrapNumber, a3ComSysSmtFddiMacRateIndex=a3ComSysSmtFddiMacRateIndex, a3ComSysAtInterfaceZone14=a3ComSysAtInterfaceZone14, a3ComSysTokenRingPortMode=a3ComSysTokenRingPortMode, a3ComSysSlotFddiPortCount=a3ComSysSlotFddiPortCount, a3ComSysAtInterfaceAtStackIndex=a3ComSysAtInterfaceAtStackIndex, IpxNetworkNumber=IpxNetworkNumber, a3ComSysTokenRingPortFrameCopiedErrors=a3ComSysTokenRingPortFrameCopiedErrors, a3ComSysSmtFddiPortStationTable=a3ComSysSmtFddiPortStationTable, a3ComSysDiagnosticsInfoPOVDiagnosticsRevision=a3ComSysDiagnosticsInfoPOVDiagnosticsRevision, a3ComSysDiagnosticsGroup=a3ComSysDiagnosticsGroup, a3ComSysBridgeAddressThresholdEvent=a3ComSysBridgeAddressThresholdEvent, a3ComSysNetworkAnalyzerTable=a3ComSysNetworkAnalyzerTable, a3ComSysModuleCardInfoTable=a3ComSysModuleCardInfoTable, a3ComSysSystemType=a3ComSysSystemType, a3ComSysSmtFddiMacRatePeakByteTransmitRate=a3ComSysSmtFddiMacRatePeakByteTransmitRate, a3ComSysEthernetPortRateByteReceiveRate=a3ComSysEthernetPortRateByteReceiveRate, a3ComSysSmtFddiPortLocationType=a3ComSysSmtFddiPortLocationType, a3ComSysSlotTable=a3ComSysSlotTable, a3ComSysSnmpProxyInternalTraps=a3ComSysSnmpProxyInternalTraps, a3ComSysBridgePortAddressPortIndex=a3ComSysBridgePortAddressPortIndex, a3ComSysSmtFddiMacStationEntry=a3ComSysSmtFddiMacStationEntry, a3ComSysSlotBoardType=a3ComSysSlotBoardType, a3ComSysModuleCardInfoGenericType=a3ComSysModuleCardInfoGenericType, a3ComSysAgentTrapDestinationAddressType=a3ComSysAgentTrapDestinationAddressType, a3ComSysSystemLogIndex=a3ComSysSystemLogIndex, a3ComSysAtInterfaceZone6=a3ComSysAtInterfaceZone6, a3ComSysBridgeBackbonePort=a3ComSysBridgeBackbonePort, a3ComSysBridgeVlanMode=a3ComSysBridgeVlanMode, a3ComSysNetworkPortMonitorAnalyzerAddress=a3ComSysNetworkPortMonitorAnalyzerAddress, a3ComSysTokenRingPortSingles=a3ComSysTokenRingPortSingles, a3ComSysTokenRingPortInternalErrors=a3ComSysTokenRingPortInternalErrors, a3ComSysSnmpInternalAgentTrapMask=a3ComSysSnmpInternalAgentTrapMask, a3ComSysFtSysStatusNoImageLabel=a3ComSysFtSysStatusNoImageLabel, a3ComSysNetworkPortMonitorStatus=a3ComSysNetworkPortMonitorStatus, a3ComSysEthernetPortRateFrameReceiveRate=a3ComSysEthernetPortRateFrameReceiveRate, a3ComSysAgentTrapDestinationTable=a3ComSysAgentTrapDestinationTable, a3ComSysFtSysBridgeFilterNoRoom=a3ComSysFtSysBridgeFilterNoRoom, a3ComSysSystem=a3ComSysSystem, a3ComSysBridgeTrFddiTranslationMode=a3ComSysBridgeTrFddiTranslationMode, a3ComSysBridgeStpGroupAddress=a3ComSysBridgeStpGroupAddress, a3ComSysBridgeTable=a3ComSysBridgeTable, A3ComSysStorageType=A3ComSysStorageType, a3ComSysAgentTrapDescriptionTableEntry=a3ComSysAgentTrapDescriptionTableEntry, a3ComSysFtSysStatusFlashError=a3ComSysFtSysStatusFlashError, a3ComSysBridgePortAddressType=a3ComSysBridgePortAddressType, a3ComSysSmtFddiMacStationSmtIndex=a3ComSysSmtFddiMacStationSmtIndex)
